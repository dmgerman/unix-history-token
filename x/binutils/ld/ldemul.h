begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* ld-emul.h - Linker emulation header file    Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 2000, 2002, 2003    Free Software Foundation, Inc.     This file is part of GLD, the Gnu Linker.     GLD is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 1, or (at your option)    any later version.     GLD is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LDEMUL_H
end_ifndef

begin_define
define|#
directive|define
name|LDEMUL_H
end_define

begin_function_decl
specifier|extern
name|void
name|ldemul_hll
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ldemul_syslib
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ldemul_after_parse
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ldemul_before_parse
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ldemul_after_open
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ldemul_after_allocation
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ldemul_before_allocation
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ldemul_set_output_arch
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|char
modifier|*
name|ldemul_choose_target
parameter_list|(
name|int
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ldemul_choose_mode
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ldemul_list_emulations
parameter_list|(
name|FILE
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ldemul_list_emulation_options
parameter_list|(
name|FILE
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|char
modifier|*
name|ldemul_get_script
parameter_list|(
name|int
modifier|*
name|isfile
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ldemul_finish
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ldemul_set_symbols
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ldemul_create_output_section_statements
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|ldemul_place_orphan
parameter_list|(
name|struct
name|lang_input_statement_struct
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|ldemul_parse_args
parameter_list|(
name|int
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ldemul_add_options
parameter_list|(
name|int
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|,
name|int
parameter_list|,
name|struct
name|option
modifier|*
modifier|*
parameter_list|,
name|int
parameter_list|,
name|struct
name|option
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|ldemul_handle_option
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|ldemul_unrecognized_file
parameter_list|(
name|struct
name|lang_input_statement_struct
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|ldemul_recognized_file
parameter_list|(
name|struct
name|lang_input_statement_struct
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|ldemul_open_dynamic_archive
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|struct
name|search_dirs
modifier|*
parameter_list|,
name|struct
name|lang_input_statement_struct
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|char
modifier|*
name|ldemul_default_target
parameter_list|(
name|int
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|after_parse_default
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|after_open_default
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|after_allocation_default
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|before_allocation_default
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|set_output_arch_default
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|syslib_default
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|hll_default
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|ldemul_find_potential_libraries
parameter_list|(
name|char
modifier|*
parameter_list|,
name|struct
name|lang_input_statement_struct
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|bfd_elf_version_expr
modifier|*
name|ldemul_new_vers_pattern
parameter_list|(
name|struct
name|bfd_elf_version_expr
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_typedef
typedef|typedef
struct|struct
name|ld_emulation_xfer_struct
block|{
comment|/* Run before parsing the command line and script file.      Set the architecture, maybe other things.  */
name|void
function_decl|(
modifier|*
name|before_parse
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Handle the SYSLIB (low level library) script command.  */
name|void
function_decl|(
modifier|*
name|syslib
function_decl|)
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
comment|/* Handle the HLL (high level library) script command.  */
name|void
function_decl|(
modifier|*
name|hll
function_decl|)
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
comment|/* Run after parsing the command line and script file.  */
name|void
function_decl|(
modifier|*
name|after_parse
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Run after opening all input files, and loading the symbols.  */
name|void
function_decl|(
modifier|*
name|after_open
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Run after allocating output sections.  */
name|void
function_decl|(
modifier|*
name|after_allocation
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Set the output architecture and machine if possible.  */
name|void
function_decl|(
modifier|*
name|set_output_arch
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Decide which target name to use.  */
name|char
modifier|*
function_decl|(
modifier|*
name|choose_target
function_decl|)
parameter_list|(
name|int
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
comment|/* Run before allocating output sections.  */
name|void
function_decl|(
modifier|*
name|before_allocation
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Return the appropriate linker script.  */
name|char
modifier|*
function_decl|(
modifier|*
name|get_script
function_decl|)
parameter_list|(
name|int
modifier|*
name|isfile
parameter_list|)
function_decl|;
comment|/* The name of this emulation.  */
name|char
modifier|*
name|emulation_name
decl_stmt|;
comment|/* The output format.  */
name|char
modifier|*
name|target_name
decl_stmt|;
comment|/* Run after assigning values from the script.  */
name|void
function_decl|(
modifier|*
name|finish
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Create any output sections needed by the target.  */
name|void
function_decl|(
modifier|*
name|create_output_section_statements
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Try to open a dynamic library.  ARCH is an architecture name, and      is normally the empty string.  ENTRY is the lang_input_statement      that should be opened.  */
name|bfd_boolean
function_decl|(
modifier|*
name|open_dynamic_archive
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|arch
parameter_list|,
name|struct
name|search_dirs
modifier|*
parameter_list|,
name|struct
name|lang_input_statement_struct
modifier|*
name|entry
parameter_list|)
function_decl|;
comment|/* Place an orphan section.  Return TRUE if it was placed, FALSE if      the default action should be taken.  This field may be NULL, in      which case the default action will always be taken.  */
name|bfd_boolean
function_decl|(
modifier|*
name|place_orphan
function_decl|)
parameter_list|(
name|struct
name|lang_input_statement_struct
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|)
function_decl|;
comment|/* Run after assigning parsing with the args, but before      reading the script.  Used to initialize symbols used in the script.  */
name|void
function_decl|(
modifier|*
name|set_symbols
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Parse args which the base linker doesn't understand.      Return TRUE if the arg needs no further processing.  */
name|bfd_boolean
function_decl|(
modifier|*
name|parse_args
function_decl|)
parameter_list|(
name|int
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
comment|/* Hook to add options to parameters passed by the base linker to      getopt_long and getopt_long_only calls.  */
name|void
function_decl|(
modifier|*
name|add_options
function_decl|)
parameter_list|(
name|int
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|,
name|int
parameter_list|,
name|struct
name|option
modifier|*
modifier|*
parameter_list|,
name|int
parameter_list|,
name|struct
name|option
modifier|*
modifier|*
parameter_list|)
function_decl|;
comment|/* Companion to the above to handle an option.  Returns TRUE if it is      one of our options.  */
name|bfd_boolean
function_decl|(
modifier|*
name|handle_option
function_decl|)
parameter_list|(
name|int
parameter_list|)
function_decl|;
comment|/* Run to handle files which are not recognized as object files or      archives.  Return TRUE if the file was handled.  */
name|bfd_boolean
function_decl|(
modifier|*
name|unrecognized_file
function_decl|)
parameter_list|(
name|struct
name|lang_input_statement_struct
modifier|*
parameter_list|)
function_decl|;
comment|/* Run to list the command line options which parse_args handles.  */
name|void
function_decl|(
modifier|*
name|list_options
function_decl|)
parameter_list|(
name|FILE
modifier|*
parameter_list|)
function_decl|;
comment|/* Run to specially handle files which *are* recognized as object      files or archives.  Return TRUE if the file was handled.  */
name|bfd_boolean
function_decl|(
modifier|*
name|recognized_file
function_decl|)
parameter_list|(
name|struct
name|lang_input_statement_struct
modifier|*
parameter_list|)
function_decl|;
comment|/* Called when looking for libraries in a directory specified      via a linker command line option or linker script option.      Files that match the pattern "lib*.a" have already been scanned.      (For VMS files matching ":lib*.a" have also been scanned).  */
name|int
function_decl|(
modifier|*
name|find_potential_libraries
function_decl|)
parameter_list|(
name|char
modifier|*
parameter_list|,
name|struct
name|lang_input_statement_struct
modifier|*
parameter_list|)
function_decl|;
comment|/* Called when adding a new version pattern.  PowerPC64-ELF uses      this hook to add a pattern matching ".foo" for every "foo".  */
name|struct
name|bfd_elf_version_expr
modifier|*
function_decl|(
modifier|*
name|new_vers_pattern
function_decl|)
parameter_list|(
name|struct
name|bfd_elf_version_expr
modifier|*
parameter_list|)
function_decl|;
block|}
name|ld_emulation_xfer_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|intel_ic960_ld_mode_enum
block|,
name|default_mode_enum
block|,
name|intel_gld960_ld_mode_enum
block|}
name|lang_emulation_mode_enum_type
typedef|;
end_typedef

begin_decl_stmt
specifier|extern
name|ld_emulation_xfer_type
modifier|*
name|ld_emulations
index|[]
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

