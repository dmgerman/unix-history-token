begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Disassembler structures definitions for the ARC.    Copyright 1994, 1995, 1997, 1998, 2000, 2001    Free Software Foundation, Inc.    Contributed by Doug Evans (dje@cygnus.com).     This program is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 2 of the License, or    (at your option) any later version.     This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.     You should have received a copy of the GNU General Public License    along with this program; if not, write to the Free Software Foundation,    Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ARCDIS_H
end_ifndef

begin_define
define|#
directive|define
name|ARCDIS_H
end_define

begin_enum
enum|enum
block|{
name|BR_exec_when_no_jump
block|,
name|BR_exec_always
block|,
name|BR_exec_when_jump
block|}
enum|;
end_enum

begin_enum
enum|enum
name|Flow
block|{
name|noflow
block|,
name|direct_jump
block|,
name|direct_call
block|,
name|indirect_jump
block|,
name|indirect_call
block|,
name|invalid_instr
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|no_reg
init|=
literal|99
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|allOperandsSize
init|=
literal|256
block|}
enum|;
end_enum

begin_struct
struct|struct
name|arcDisState
block|{
name|void
modifier|*
name|_this
decl_stmt|;
name|int
name|instructionLen
decl_stmt|;
name|void
function_decl|(
modifier|*
name|err
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
function_decl|(
modifier|*
name|coreRegName
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
function_decl|(
modifier|*
name|auxRegName
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
function_decl|(
modifier|*
name|condCodeName
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
function_decl|(
modifier|*
name|instName
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
name|unsigned
name|char
modifier|*
name|instruction
decl_stmt|;
name|unsigned
name|index
decl_stmt|;
specifier|const
name|char
modifier|*
name|comm
index|[
literal|6
index|]
decl_stmt|;
comment|/* instr name, cond, NOP, 3 operands  */
name|int
name|opWidth
decl_stmt|;
name|int
name|targets
index|[
literal|4
index|]
decl_stmt|;
name|int
name|addresses
index|[
literal|4
index|]
decl_stmt|;
comment|/* Set as a side-effect of calling the disassembler.      Used only by the debugger.  */
name|enum
name|Flow
name|flow
decl_stmt|;
name|int
name|register_for_indirect_jump
decl_stmt|;
name|int
name|ea_reg1
decl_stmt|,
name|ea_reg2
decl_stmt|,
name|_offset
decl_stmt|;
name|int
name|_cond
decl_stmt|,
name|_opcode
decl_stmt|;
name|unsigned
name|long
name|words
index|[
literal|2
index|]
decl_stmt|;
name|char
modifier|*
name|commentBuffer
decl_stmt|;
name|char
name|instrBuffer
index|[
literal|40
index|]
decl_stmt|;
name|char
name|operandBuffer
index|[
name|allOperandsSize
index|]
decl_stmt|;
name|char
name|_ea_present
decl_stmt|;
name|char
name|_mem_load
decl_stmt|;
name|char
name|_load_len
decl_stmt|;
name|char
name|nullifyMode
decl_stmt|;
name|unsigned
name|char
name|commNum
decl_stmt|;
name|unsigned
name|char
name|isBranch
decl_stmt|;
name|unsigned
name|char
name|tcnt
decl_stmt|;
name|unsigned
name|char
name|acnt
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|__TRANSLATION_REQUIRED
parameter_list|(
name|state
parameter_list|)
value|((state).acnt != 0)
end_define

begin_endif
endif|#
directive|endif
end_endif

end_unit

