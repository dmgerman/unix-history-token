begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* ARC target-dependent stuff. Extension data structures.    Copyright 1995, 1997, 2000, 2001 Free Software Foundation, Inc.  This file is part of GDB.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ARCEXT_H
end_ifndef

begin_define
define|#
directive|define
name|ARCEXT_H
end_define

begin_enum
enum|enum
block|{
name|EXT_INSTRUCTION
init|=
literal|0
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|EXT_CORE_REGISTER
init|=
literal|1
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|EXT_AUX_REGISTER
init|=
literal|2
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|EXT_COND_CODE
init|=
literal|3
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|NUM_EXT_INST
init|=
operator|(
literal|0x1f
operator|-
literal|0x10
operator|+
literal|1
operator|)
operator|+
operator|(
literal|0x3f
operator|-
literal|0x09
operator|+
literal|1
operator|)
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|NUM_EXT_CORE
init|=
literal|59
operator|-
literal|32
operator|+
literal|1
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|NUM_EXT_COND
init|=
literal|0x1f
operator|-
literal|0x10
operator|+
literal|1
block|}
enum|;
end_enum

begin_struct
struct|struct
name|ExtInstruction
block|{
name|char
name|flags
decl_stmt|;
name|char
modifier|*
name|name
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ExtAuxRegister
block|{
name|long
name|address
decl_stmt|;
name|char
modifier|*
name|name
decl_stmt|;
name|struct
name|ExtAuxRegister
modifier|*
name|next
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|arcExtMap
block|{
name|struct
name|ExtAuxRegister
modifier|*
name|auxRegisters
decl_stmt|;
name|struct
name|ExtInstruction
modifier|*
name|instructions
index|[
name|NUM_EXT_INST
index|]
decl_stmt|;
name|unsigned
name|char
modifier|*
name|coreRegisters
index|[
name|NUM_EXT_CORE
index|]
decl_stmt|;
name|unsigned
name|char
modifier|*
name|condCodes
index|[
name|NUM_EXT_COND
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
specifier|extern
name|int
name|arcExtMap_add
parameter_list|(
name|void
modifier|*
parameter_list|,
name|unsigned
name|long
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|arcExtMap_coreRegName
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|arcExtMap_auxRegName
parameter_list|(
name|long
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|arcExtMap_condCodeName
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|arcExtMap_instName
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|build_ARC_extmap
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|IGNORE_FIRST_OPD
value|1
end_define

begin_endif
endif|#
directive|endif
end_endif

end_unit

