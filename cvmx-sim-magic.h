begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/***********************license start***************  * Copyright (c) 2003-2010  Cavium Networks (support@cavium.com). All rights  * reserved.  *  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *  *   * Redistributions in binary form must reproduce the above  *     copyright notice, this list of conditions and the following  *     disclaimer in the documentation and/or other materials provided  *     with the distribution.   *   * Neither the name of Cavium Networks nor the names of  *     its contributors may be used to endorse or promote products  *     derived from this software without specific prior written  *     permission.   * This Software, including technical data, may be subject to U.S. export  control  * laws, including the U.S. Export Administration Act and its  associated  * regulations, and may be subject to export or import  regulations in other  * countries.   * TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"  * AND WITH ALL FAULTS AND CAVIUM  NETWORKS MAKES NO PROMISES, REPRESENTATIONS OR  * WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO  * THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY REPRESENTATION OR  * DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT DEFECTS, AND CAVIUM  * SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES OF TITLE,  * MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF  * VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR  * CORRESPONDENCE TO DESCRIPTION. THE ENTIRE  RISK ARISING OUT OF USE OR  * PERFORMANCE OF THE SOFTWARE LIES WITH YOU.  ***********************license end**************************************/
end_comment

begin_comment
comment|/**  * @file  *  * This is file defines ASM primitives for sim magic functions.   *<hr>$Revision: 49448 $<hr>  *  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CVMX_SIM_MAGIC_H__
end_ifndef

begin_define
define|#
directive|define
name|__CVMX_SIM_MAGIC_H__
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* Note, the following Magic function are only useful in the simulator  * environment. Typical simple executive application should not use  * these functions. Their access functions are defined and implemented in  * the newlib  *  SIM_MAGIC_PUTS  *  SIM_MAGIC_WRITE  *  SIM_MAGIC_READ  *  SIM_MAGIC_OPEN  *  SIM_MAGIC_CLOSE  *  SIM_MAGIC_STAT  *  SIM_MAGIC_FSTAT  *  SIM_MAGIC_LSEEK  *  SIM_MAGIC_ALLOC_MEM  */
comment|/* Assembler macros for accessing simulator magic functions */
define|#
directive|define
name|OCTEON_SIM_MAGIC_TRAP_ADDRESS
value|0x8000000feffe0000ull
comment|/* Reg t9 (r25) specifies the actual magic function*/
define|#
directive|define
name|SIM_MAGIC_PUTS
value|0x05
define|#
directive|define
name|SIM_MAGIC_SIMPRINTF
value|0x06
define|#
directive|define
name|SIM_MAGIC_WRITE
value|0x07
define|#
directive|define
name|SIM_MAGIC_READ
value|0x08
define|#
directive|define
name|SIM_MAGIC_OPEN
value|0x09
define|#
directive|define
name|SIM_MAGIC_CLOSE
value|0x0A
define|#
directive|define
name|SIM_MAGIC_STAT
value|0x0B
define|#
directive|define
name|SIM_MAGIC_FSTAT
value|0x0C
define|#
directive|define
name|SIM_MAGIC_LSEEK
value|0x0D
define|#
directive|define
name|SIM_MAGIC_ALLOC_MEM
value|0x20
define|#
directive|define
name|SIM_MAGIC_GET_CPUFREQ
value|0x31
comment|/* SDK 1.9 release and after */
define|#
directive|define
name|SIM_MAGIC_GET_MEMFREQ
value|0x32
comment|/* SDK 1.9 release and after */
define|#
directive|define
name|SIM_MAGIC_GET_IOFREQ
value|0x33
comment|/* SDK 2.0 release and after, only set in Octeon2 */
comment|/**  * @INTERNAL  * sim_magci implementation function with return code.  *  * @param func_no   SIM magic function to invoke  *  * @return Result of the SIM magic function  */
specifier|static
specifier|inline
name|int
name|__cvmx_sim_magic_return
parameter_list|(
name|unsigned
name|long
name|long
name|func_no
parameter_list|)
block|{
specifier|register
name|unsigned
name|long
name|long
name|magic_addr
name|asm
argument_list|(
literal|"$15"
argument_list|)
decl_stmt|;
specifier|register
name|unsigned
name|long
name|long
name|magic_func
name|asm
argument_list|(
literal|"$25"
argument_list|)
decl_stmt|;
comment|/* t9 */
name|int
name|ret
decl_stmt|;
name|magic_addr
operator|=
name|OCTEON_SIM_MAGIC_TRAP_ADDRESS
expr_stmt|;
name|magic_func
operator|=
name|func_no
expr_stmt|;
asm|asm
specifier|volatile
asm|(         "dadd $24, $31, $0 \n"         "jalr  $15 \n"         "dadd $31, $24, $0 \n"         "move %0, $2"         : "=r" (ret)         : "r" (magic_addr), "r" (magic_func) 	: "$2", "$24" );
return|return
name|ret
return|;
block|}
comment|/**  * @INTERNAL  * sim_magci implementation function without return code.  *  * @param func_no   SIM magic function to invoke  */
specifier|static
specifier|inline
name|void
name|__cvmx_sim_magic_no_return
parameter_list|(
name|unsigned
name|long
name|long
name|func_no
parameter_list|)
block|{
specifier|register
name|unsigned
name|long
name|long
name|magic_addr
name|asm
argument_list|(
literal|"$15"
argument_list|)
decl_stmt|;
specifier|register
name|unsigned
name|long
name|long
name|magic_func
name|asm
argument_list|(
literal|"$25"
argument_list|)
decl_stmt|;
comment|/* t9 */
name|magic_addr
operator|=
name|OCTEON_SIM_MAGIC_TRAP_ADDRESS
expr_stmt|;
name|magic_func
operator|=
name|func_no
expr_stmt|;
asm|asm
specifier|volatile
asm|(         "dadd $24, $31, $0 \n"         "jalr  $15 \n"         "dadd $31, $24, $0 \n"         :         : "r" (magic_addr), "r" (magic_func) 	: "$24" );
block|}
comment|/**  * @INTERNAL  * SIM magic printf function, only support up to 8 parameters  *  * @param format  */
specifier|static
specifier|inline
name|void
name|__cvmx_sim_magic_simprintf
parameter_list|(
specifier|const
name|char
modifier|*
name|format
parameter_list|,
modifier|...
parameter_list|)
block|{
name|CVMX_SYNC
expr_stmt|;
name|__cvmx_sim_magic_no_return
argument_list|(
name|SIM_MAGIC_SIMPRINTF
argument_list|)
expr_stmt|;
block|}
comment|/**  * Retrive cpu core clock frequency from the simulator  *  * @return simulating core frequency  */
specifier|static
specifier|inline
name|int
name|cvmx_sim_magic_get_cpufreq
parameter_list|(
name|void
parameter_list|)
block|{
name|CVMX_SYNC
expr_stmt|;
return|return
name|__cvmx_sim_magic_return
argument_list|(
name|SIM_MAGIC_GET_CPUFREQ
argument_list|)
return|;
block|}
comment|/**  * Retrive DDR clock frequency from the simulator  *  * @return simulating DDR frequency  */
specifier|static
specifier|inline
name|int
name|cvmx_sim_magic_get_memfreq
parameter_list|(
name|void
parameter_list|)
block|{
name|CVMX_SYNC
expr_stmt|;
return|return
name|__cvmx_sim_magic_return
argument_list|(
name|SIM_MAGIC_GET_MEMFREQ
argument_list|)
return|;
block|}
comment|/**  * Retrive io core clock frequency from the simulator  *  * @return simulating core frequency  */
specifier|static
specifier|inline
name|int
name|cvmx_sim_magic_get_iofreq
parameter_list|(
name|void
parameter_list|)
block|{
name|CVMX_SYNC
expr_stmt|;
if|if
condition|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN6XXX
argument_list|)
condition|)
return|return
name|__cvmx_sim_magic_return
argument_list|(
name|SIM_MAGIC_GET_IOFREQ
argument_list|)
return|;
else|else
return|return
literal|0
return|;
block|}
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __CVMX_SIM_MAGIC_H__ */
end_comment

end_unit

