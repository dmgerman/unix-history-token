begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/***********************license start***************  *  Copyright (c) 2003-2008 Cavium Networks (support@cavium.com). All rights  *  reserved.  *  *  *  Redistribution and use in source and binary forms, with or without  *  modification, are permitted provided that the following conditions are  *  met:  *  *      * Redistributions of source code must retain the above copyright  *        notice, this list of conditions and the following disclaimer.  *  *      * Redistributions in binary form must reproduce the above  *        copyright notice, this list of conditions and the following  *        disclaimer in the documentation and/or other materials provided  *        with the distribution.  *  *      * Neither the name of Cavium Networks nor the names of  *        its contributors may be used to endorse or promote products  *        derived from this software without specific prior written  *        permission.  *  *  TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"  *  AND WITH ALL FAULTS AND CAVIUM NETWORKS MAKES NO PROMISES, REPRESENTATIONS  *  OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH  *  RESPECT TO THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY  *  REPRESENTATION OR DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT  *  DEFECTS, AND CAVIUM SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES  *  OF TITLE, MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR  *  PURPOSE, LACK OF VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET  *  POSSESSION OR CORRESPONDENCE TO DESCRIPTION.  THE ENTIRE RISK ARISING OUT  *  OF USE OR PERFORMANCE OF THE SOFTWARE LIES WITH YOU.  *  *  *  For any questions regarding licensing please contact marketing@caviumnetworks.com  *  ***********************license end**************************************/
end_comment

begin_comment
comment|/**  * @file  *  * Interface to the hardware Fetch and Add Unit.  *  *<hr>$Revision: 41586 $<hr>  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CVMX_FAU_H__
end_ifndef

begin_define
define|#
directive|define
name|__CVMX_FAU_H__
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|CVMX_DONT_INCLUDE_CONFIG
end_ifndef

begin_include
include|#
directive|include
file|"cvmx-config.h"
end_include

begin_else
else|#
directive|else
end_else

begin_typedef
typedef|typedef
name|int
name|cvmx_fau_reg_64_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|int
name|cvmx_fau_reg_32_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|int
name|cvmx_fau_reg_16_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|int
name|cvmx_fau_reg_8_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/*  * Octeon Fetch and Add Unit (FAU)  */
define|#
directive|define
name|CVMX_FAU_LOAD_IO_ADDRESS
value|cvmx_build_io_address(0x1e, 0)
define|#
directive|define
name|CVMX_FAU_BITS_SCRADDR
value|63,56
define|#
directive|define
name|CVMX_FAU_BITS_LEN
value|55,48
define|#
directive|define
name|CVMX_FAU_BITS_INEVAL
value|35,14
define|#
directive|define
name|CVMX_FAU_BITS_TAGWAIT
value|13,13
define|#
directive|define
name|CVMX_FAU_BITS_NOADD
value|13,13
define|#
directive|define
name|CVMX_FAU_BITS_SIZE
value|12,11
define|#
directive|define
name|CVMX_FAU_BITS_REGISTER
value|10,0
typedef|typedef
enum|enum
block|{
name|CVMX_FAU_OP_SIZE_8
init|=
literal|0
block|,
name|CVMX_FAU_OP_SIZE_16
init|=
literal|1
block|,
name|CVMX_FAU_OP_SIZE_32
init|=
literal|2
block|,
name|CVMX_FAU_OP_SIZE_64
init|=
literal|3
block|}
name|cvmx_fau_op_size_t
typedef|;
comment|/**  * Tagwait return definition. If a timeout occurs, the error  * bit will be set. Otherwise the value of the register before  * the update will be returned.  */
typedef|typedef
struct|struct
block|{
name|uint64_t
name|error
range|:
literal|1
decl_stmt|;
name|int64_t
name|value
range|:
literal|63
decl_stmt|;
block|}
name|cvmx_fau_tagwait64_t
typedef|;
comment|/**  * Tagwait return definition. If a timeout occurs, the error  * bit will be set. Otherwise the value of the register before  * the update will be returned.  */
typedef|typedef
struct|struct
block|{
name|uint64_t
name|error
range|:
literal|1
decl_stmt|;
name|int32_t
name|value
range|:
literal|31
decl_stmt|;
block|}
name|cvmx_fau_tagwait32_t
typedef|;
comment|/**  * Tagwait return definition. If a timeout occurs, the error  * bit will be set. Otherwise the value of the register before  * the update will be returned.  */
typedef|typedef
struct|struct
block|{
name|uint64_t
name|error
range|:
literal|1
decl_stmt|;
name|int16_t
name|value
range|:
literal|15
decl_stmt|;
block|}
name|cvmx_fau_tagwait16_t
typedef|;
comment|/**  * Tagwait return definition. If a timeout occurs, the error  * bit will be set. Otherwise the value of the register before  * the update will be returned.  */
typedef|typedef
struct|struct
block|{
name|uint64_t
name|error
range|:
literal|1
decl_stmt|;
name|int8_t
name|value
range|:
literal|7
decl_stmt|;
block|}
name|cvmx_fau_tagwait8_t
typedef|;
comment|/**  * Asynchronous tagwait return definition. If a timeout occurs,  * the error bit will be set. Otherwise the value of the  * register before the update will be returned.  */
typedef|typedef
union|union
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
block|{
name|uint64_t
name|invalid
range|:
literal|1
decl_stmt|;
name|uint64_t
name|data
range|:
literal|63
decl_stmt|;
comment|// unpredictable if invalid is set
block|}
name|s
struct|;
block|}
name|cvmx_fau_async_tagwait_result_t
typedef|;
comment|/**  * @INTERNAL  * Builds a store I/O address for writing to the FAU  *  * @param noadd  0 = Store value is atomically added to the current value  *               1 = Store value is atomically written over the current value  * @param reg    FAU atomic register to access. 0<= reg< 2048.  *               - Step by 2 for 16 bit access.  *               - Step by 4 for 32 bit access.  *               - Step by 8 for 64 bit access.  * @return Address to store for atomic update  */
specifier|static
specifier|inline
name|uint64_t
name|__cvmx_fau_store_address
parameter_list|(
name|uint64_t
name|noadd
parameter_list|,
name|uint64_t
name|reg
parameter_list|)
block|{
return|return
operator|(
name|CVMX_ADD_IO_SEG
argument_list|(
name|CVMX_FAU_LOAD_IO_ADDRESS
argument_list|)
operator||
name|cvmx_build_bits
argument_list|(
name|CVMX_FAU_BITS_NOADD
argument_list|,
name|noadd
argument_list|)
operator||
name|cvmx_build_bits
argument_list|(
name|CVMX_FAU_BITS_REGISTER
argument_list|,
name|reg
argument_list|)
operator|)
return|;
block|}
comment|/**  * @INTERNAL  * Builds a I/O address for accessing the FAU  *  * @param tagwait Should the atomic add wait for the current tag switch  *                operation to complete.  *                - 0 = Don't wait  *                - 1 = Wait for tag switch to complete  * @param reg     FAU atomic register to access. 0<= reg< 2048.  *                - Step by 2 for 16 bit access.  *                - Step by 4 for 32 bit access.  *                - Step by 8 for 64 bit access.  * @param value   Signed value to add.  *                Note: When performing 32 and 64 bit access, only the low  *                22 bits are available.  * @return Address to read from for atomic update  */
specifier|static
specifier|inline
name|uint64_t
name|__cvmx_fau_atomic_address
parameter_list|(
name|uint64_t
name|tagwait
parameter_list|,
name|uint64_t
name|reg
parameter_list|,
name|int64_t
name|value
parameter_list|)
block|{
return|return
operator|(
name|CVMX_ADD_IO_SEG
argument_list|(
name|CVMX_FAU_LOAD_IO_ADDRESS
argument_list|)
operator||
name|cvmx_build_bits
argument_list|(
name|CVMX_FAU_BITS_INEVAL
argument_list|,
name|value
argument_list|)
operator||
name|cvmx_build_bits
argument_list|(
name|CVMX_FAU_BITS_TAGWAIT
argument_list|,
name|tagwait
argument_list|)
operator||
name|cvmx_build_bits
argument_list|(
name|CVMX_FAU_BITS_REGISTER
argument_list|,
name|reg
argument_list|)
operator|)
return|;
block|}
comment|/**  * Perform an atomic 64 bit add  *  * @param reg     FAU atomic register to access. 0<= reg< 2048.  *                - Step by 8 for 64 bit access.  * @param value   Signed value to add.  *                Note: Only the low 22 bits are available.  * @return Value of the register before the update  */
specifier|static
specifier|inline
name|int64_t
name|cvmx_fau_fetch_and_add64
parameter_list|(
name|cvmx_fau_reg_64_t
name|reg
parameter_list|,
name|int64_t
name|value
parameter_list|)
block|{
return|return
name|cvmx_read64_int64
argument_list|(
name|__cvmx_fau_atomic_address
argument_list|(
literal|0
argument_list|,
name|reg
argument_list|,
name|value
argument_list|)
argument_list|)
return|;
block|}
comment|/**  * Perform an atomic 32 bit add  *  * @param reg     FAU atomic register to access. 0<= reg< 2048.  *                - Step by 4 for 32 bit access.  * @param value   Signed value to add.  *                Note: Only the low 22 bits are available.  * @return Value of the register before the update  */
specifier|static
specifier|inline
name|int32_t
name|cvmx_fau_fetch_and_add32
parameter_list|(
name|cvmx_fau_reg_32_t
name|reg
parameter_list|,
name|int32_t
name|value
parameter_list|)
block|{
return|return
name|cvmx_read64_int32
argument_list|(
name|__cvmx_fau_atomic_address
argument_list|(
literal|0
argument_list|,
name|reg
argument_list|,
name|value
argument_list|)
argument_list|)
return|;
block|}
comment|/**  * Perform an atomic 16 bit add  *  * @param reg     FAU atomic register to access. 0<= reg< 2048.  *                - Step by 2 for 16 bit access.  * @param value   Signed value to add.  * @return Value of the register before the update  */
specifier|static
specifier|inline
name|int16_t
name|cvmx_fau_fetch_and_add16
parameter_list|(
name|cvmx_fau_reg_16_t
name|reg
parameter_list|,
name|int16_t
name|value
parameter_list|)
block|{
return|return
name|cvmx_read64_int16
argument_list|(
name|__cvmx_fau_atomic_address
argument_list|(
literal|0
argument_list|,
name|reg
argument_list|,
name|value
argument_list|)
argument_list|)
return|;
block|}
comment|/**  * Perform an atomic 8 bit add  *  * @param reg     FAU atomic register to access. 0<= reg< 2048.  * @param value   Signed value to add.  * @return Value of the register before the update  */
specifier|static
specifier|inline
name|int8_t
name|cvmx_fau_fetch_and_add8
parameter_list|(
name|cvmx_fau_reg_8_t
name|reg
parameter_list|,
name|int8_t
name|value
parameter_list|)
block|{
return|return
name|cvmx_read64_int8
argument_list|(
name|__cvmx_fau_atomic_address
argument_list|(
literal|0
argument_list|,
name|reg
argument_list|,
name|value
argument_list|)
argument_list|)
return|;
block|}
comment|/**  * Perform an atomic 64 bit add after the current tag switch  * completes  *  * @param reg    FAU atomic register to access. 0<= reg< 2048.  *               - Step by 8 for 64 bit access.  * @param value  Signed value to add.  *               Note: Only the low 22 bits are available.  * @return If a timeout occurs, the error bit will be set. Otherwise  *         the value of the register before the update will be  *         returned  */
specifier|static
specifier|inline
name|cvmx_fau_tagwait64_t
name|cvmx_fau_tagwait_fetch_and_add64
parameter_list|(
name|cvmx_fau_reg_64_t
name|reg
parameter_list|,
name|int64_t
name|value
parameter_list|)
block|{
union|union
block|{
name|uint64_t
name|i64
decl_stmt|;
name|cvmx_fau_tagwait64_t
name|t
decl_stmt|;
block|}
name|result
union|;
name|result
operator|.
name|i64
operator|=
name|cvmx_read64_int64
argument_list|(
name|__cvmx_fau_atomic_address
argument_list|(
literal|1
argument_list|,
name|reg
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|t
return|;
block|}
comment|/**  * Perform an atomic 32 bit add after the current tag switch  * completes  *  * @param reg    FAU atomic register to access. 0<= reg< 2048.  *               - Step by 4 for 32 bit access.  * @param value  Signed value to add.  *               Note: Only the low 22 bits are available.  * @return If a timeout occurs, the error bit will be set. Otherwise  *         the value of the register before the update will be  *         returned  */
specifier|static
specifier|inline
name|cvmx_fau_tagwait32_t
name|cvmx_fau_tagwait_fetch_and_add32
parameter_list|(
name|cvmx_fau_reg_32_t
name|reg
parameter_list|,
name|int32_t
name|value
parameter_list|)
block|{
union|union
block|{
name|uint64_t
name|i32
decl_stmt|;
name|cvmx_fau_tagwait32_t
name|t
decl_stmt|;
block|}
name|result
union|;
name|result
operator|.
name|i32
operator|=
name|cvmx_read64_int32
argument_list|(
name|__cvmx_fau_atomic_address
argument_list|(
literal|1
argument_list|,
name|reg
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|t
return|;
block|}
comment|/**  * Perform an atomic 16 bit add after the current tag switch  * completes  *  * @param reg    FAU atomic register to access. 0<= reg< 2048.  *               - Step by 2 for 16 bit access.  * @param value  Signed value to add.  * @return If a timeout occurs, the error bit will be set. Otherwise  *         the value of the register before the update will be  *         returned  */
specifier|static
specifier|inline
name|cvmx_fau_tagwait16_t
name|cvmx_fau_tagwait_fetch_and_add16
parameter_list|(
name|cvmx_fau_reg_16_t
name|reg
parameter_list|,
name|int16_t
name|value
parameter_list|)
block|{
union|union
block|{
name|uint64_t
name|i16
decl_stmt|;
name|cvmx_fau_tagwait16_t
name|t
decl_stmt|;
block|}
name|result
union|;
name|result
operator|.
name|i16
operator|=
name|cvmx_read64_int16
argument_list|(
name|__cvmx_fau_atomic_address
argument_list|(
literal|1
argument_list|,
name|reg
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|t
return|;
block|}
comment|/**  * Perform an atomic 8 bit add after the current tag switch  * completes  *  * @param reg    FAU atomic register to access. 0<= reg< 2048.  * @param value  Signed value to add.  * @return If a timeout occurs, the error bit will be set. Otherwise  *         the value of the register before the update will be  *         returned  */
specifier|static
specifier|inline
name|cvmx_fau_tagwait8_t
name|cvmx_fau_tagwait_fetch_and_add8
parameter_list|(
name|cvmx_fau_reg_8_t
name|reg
parameter_list|,
name|int8_t
name|value
parameter_list|)
block|{
union|union
block|{
name|uint64_t
name|i8
decl_stmt|;
name|cvmx_fau_tagwait8_t
name|t
decl_stmt|;
block|}
name|result
union|;
name|result
operator|.
name|i8
operator|=
name|cvmx_read64_int8
argument_list|(
name|__cvmx_fau_atomic_address
argument_list|(
literal|1
argument_list|,
name|reg
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|t
return|;
block|}
comment|/**  * @INTERNAL  * Builds I/O data for async operations  *  * @param scraddr Scratch pad byte addres to write to.  Must be 8 byte aligned  * @param value   Signed value to add.  *                Note: When performing 32 and 64 bit access, only the low  *                22 bits are available.  * @param tagwait Should the atomic add wait for the current tag switch  *                operation to complete.  *                - 0 = Don't wait  *                - 1 = Wait for tag switch to complete  * @param size    The size of the operation:  *                - CVMX_FAU_OP_SIZE_8  (0) = 8 bits  *                - CVMX_FAU_OP_SIZE_16 (1) = 16 bits  *                - CVMX_FAU_OP_SIZE_32 (2) = 32 bits  *                - CVMX_FAU_OP_SIZE_64 (3) = 64 bits  * @param reg     FAU atomic register to access. 0<= reg< 2048.  *                - Step by 2 for 16 bit access.  *                - Step by 4 for 32 bit access.  *                - Step by 8 for 64 bit access.  * @return Data to write using cvmx_send_single  */
specifier|static
specifier|inline
name|uint64_t
name|__cvmx_fau_iobdma_data
parameter_list|(
name|uint64_t
name|scraddr
parameter_list|,
name|int64_t
name|value
parameter_list|,
name|uint64_t
name|tagwait
parameter_list|,
name|cvmx_fau_op_size_t
name|size
parameter_list|,
name|uint64_t
name|reg
parameter_list|)
block|{
return|return
operator|(
name|CVMX_FAU_LOAD_IO_ADDRESS
operator||
name|cvmx_build_bits
argument_list|(
name|CVMX_FAU_BITS_SCRADDR
argument_list|,
name|scraddr
operator|>>
literal|3
argument_list|)
operator||
name|cvmx_build_bits
argument_list|(
name|CVMX_FAU_BITS_LEN
argument_list|,
literal|1
argument_list|)
operator||
name|cvmx_build_bits
argument_list|(
name|CVMX_FAU_BITS_INEVAL
argument_list|,
name|value
argument_list|)
operator||
name|cvmx_build_bits
argument_list|(
name|CVMX_FAU_BITS_TAGWAIT
argument_list|,
name|tagwait
argument_list|)
operator||
name|cvmx_build_bits
argument_list|(
name|CVMX_FAU_BITS_SIZE
argument_list|,
name|size
argument_list|)
operator||
name|cvmx_build_bits
argument_list|(
name|CVMX_FAU_BITS_REGISTER
argument_list|,
name|reg
argument_list|)
operator|)
return|;
block|}
comment|/**  * Perform an async atomic 64 bit add. The old value is  * placed in the scratch memory at byte address scraddr.  *  * @param scraddr Scratch memory byte address to put response in.  *                Must be 8 byte aligned.  * @param reg     FAU atomic register to access. 0<= reg< 2048.  *                - Step by 8 for 64 bit access.  * @param value   Signed value to add.  *                Note: Only the low 22 bits are available.  * @return Placed in the scratch pad register  */
specifier|static
specifier|inline
name|void
name|cvmx_fau_async_fetch_and_add64
parameter_list|(
name|uint64_t
name|scraddr
parameter_list|,
name|cvmx_fau_reg_64_t
name|reg
parameter_list|,
name|int64_t
name|value
parameter_list|)
block|{
name|cvmx_send_single
argument_list|(
name|__cvmx_fau_iobdma_data
argument_list|(
name|scraddr
argument_list|,
name|value
argument_list|,
literal|0
argument_list|,
name|CVMX_FAU_OP_SIZE_64
argument_list|,
name|reg
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**  * Perform an async atomic 32 bit add. The old value is  * placed in the scratch memory at byte address scraddr.  *  * @param scraddr Scratch memory byte address to put response in.  *                Must be 8 byte aligned.  * @param reg     FAU atomic register to access. 0<= reg< 2048.  *                - Step by 4 for 32 bit access.  * @param value   Signed value to add.  *                Note: Only the low 22 bits are available.  * @return Placed in the scratch pad register  */
specifier|static
specifier|inline
name|void
name|cvmx_fau_async_fetch_and_add32
parameter_list|(
name|uint64_t
name|scraddr
parameter_list|,
name|cvmx_fau_reg_32_t
name|reg
parameter_list|,
name|int32_t
name|value
parameter_list|)
block|{
name|cvmx_send_single
argument_list|(
name|__cvmx_fau_iobdma_data
argument_list|(
name|scraddr
argument_list|,
name|value
argument_list|,
literal|0
argument_list|,
name|CVMX_FAU_OP_SIZE_32
argument_list|,
name|reg
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**  * Perform an async atomic 16 bit add. The old value is  * placed in the scratch memory at byte address scraddr.  *  * @param scraddr Scratch memory byte address to put response in.  *                Must be 8 byte aligned.  * @param reg     FAU atomic register to access. 0<= reg< 2048.  *                - Step by 2 for 16 bit access.  * @param value   Signed value to add.  * @return Placed in the scratch pad register  */
specifier|static
specifier|inline
name|void
name|cvmx_fau_async_fetch_and_add16
parameter_list|(
name|uint64_t
name|scraddr
parameter_list|,
name|cvmx_fau_reg_16_t
name|reg
parameter_list|,
name|int16_t
name|value
parameter_list|)
block|{
name|cvmx_send_single
argument_list|(
name|__cvmx_fau_iobdma_data
argument_list|(
name|scraddr
argument_list|,
name|value
argument_list|,
literal|0
argument_list|,
name|CVMX_FAU_OP_SIZE_16
argument_list|,
name|reg
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**  * Perform an async atomic 8 bit add. The old value is  * placed in the scratch memory at byte address scraddr.  *  * @param scraddr Scratch memory byte address to put response in.  *                Must be 8 byte aligned.  * @param reg     FAU atomic register to access. 0<= reg< 2048.  * @param value   Signed value to add.  * @return Placed in the scratch pad register  */
specifier|static
specifier|inline
name|void
name|cvmx_fau_async_fetch_and_add8
parameter_list|(
name|uint64_t
name|scraddr
parameter_list|,
name|cvmx_fau_reg_8_t
name|reg
parameter_list|,
name|int8_t
name|value
parameter_list|)
block|{
name|cvmx_send_single
argument_list|(
name|__cvmx_fau_iobdma_data
argument_list|(
name|scraddr
argument_list|,
name|value
argument_list|,
literal|0
argument_list|,
name|CVMX_FAU_OP_SIZE_8
argument_list|,
name|reg
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**  * Perform an async atomic 64 bit add after the current tag  * switch completes.  *  * @param scraddr Scratch memory byte address to put response in.  *                Must be 8 byte aligned.  *                If a timeout occurs, the error bit (63) will be set. Otherwise  *                the value of the register before the update will be  *                returned  * @param reg     FAU atomic register to access. 0<= reg< 2048.  *                - Step by 8 for 64 bit access.  * @param value   Signed value to add.  *                Note: Only the low 22 bits are available.  * @return Placed in the scratch pad register  */
specifier|static
specifier|inline
name|void
name|cvmx_fau_async_tagwait_fetch_and_add64
parameter_list|(
name|uint64_t
name|scraddr
parameter_list|,
name|cvmx_fau_reg_64_t
name|reg
parameter_list|,
name|int64_t
name|value
parameter_list|)
block|{
name|cvmx_send_single
argument_list|(
name|__cvmx_fau_iobdma_data
argument_list|(
name|scraddr
argument_list|,
name|value
argument_list|,
literal|1
argument_list|,
name|CVMX_FAU_OP_SIZE_64
argument_list|,
name|reg
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**  * Perform an async atomic 32 bit add after the current tag  * switch completes.  *  * @param scraddr Scratch memory byte address to put response in.  *                Must be 8 byte aligned.  *                If a timeout occurs, the error bit (63) will be set. Otherwise  *                the value of the register before the update will be  *                returned  * @param reg     FAU atomic register to access. 0<= reg< 2048.  *                - Step by 4 for 32 bit access.  * @param value   Signed value to add.  *                Note: Only the low 22 bits are available.  * @return Placed in the scratch pad register  */
specifier|static
specifier|inline
name|void
name|cvmx_fau_async_tagwait_fetch_and_add32
parameter_list|(
name|uint64_t
name|scraddr
parameter_list|,
name|cvmx_fau_reg_32_t
name|reg
parameter_list|,
name|int32_t
name|value
parameter_list|)
block|{
name|cvmx_send_single
argument_list|(
name|__cvmx_fau_iobdma_data
argument_list|(
name|scraddr
argument_list|,
name|value
argument_list|,
literal|1
argument_list|,
name|CVMX_FAU_OP_SIZE_32
argument_list|,
name|reg
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**  * Perform an async atomic 16 bit add after the current tag  * switch completes.  *  * @param scraddr Scratch memory byte address to put response in.  *                Must be 8 byte aligned.  *                If a timeout occurs, the error bit (63) will be set. Otherwise  *                the value of the register before the update will be  *                returned  * @param reg     FAU atomic register to access. 0<= reg< 2048.  *                - Step by 2 for 16 bit access.  * @param value   Signed value to add.  * @return Placed in the scratch pad register  */
specifier|static
specifier|inline
name|void
name|cvmx_fau_async_tagwait_fetch_and_add16
parameter_list|(
name|uint64_t
name|scraddr
parameter_list|,
name|cvmx_fau_reg_16_t
name|reg
parameter_list|,
name|int16_t
name|value
parameter_list|)
block|{
name|cvmx_send_single
argument_list|(
name|__cvmx_fau_iobdma_data
argument_list|(
name|scraddr
argument_list|,
name|value
argument_list|,
literal|1
argument_list|,
name|CVMX_FAU_OP_SIZE_16
argument_list|,
name|reg
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**  * Perform an async atomic 8 bit add after the current tag  * switch completes.  *  * @param scraddr Scratch memory byte address to put response in.  *                Must be 8 byte aligned.  *                If a timeout occurs, the error bit (63) will be set. Otherwise  *                the value of the register before the update will be  *                returned  * @param reg     FAU atomic register to access. 0<= reg< 2048.  * @param value   Signed value to add.  * @return Placed in the scratch pad register  */
specifier|static
specifier|inline
name|void
name|cvmx_fau_async_tagwait_fetch_and_add8
parameter_list|(
name|uint64_t
name|scraddr
parameter_list|,
name|cvmx_fau_reg_8_t
name|reg
parameter_list|,
name|int8_t
name|value
parameter_list|)
block|{
name|cvmx_send_single
argument_list|(
name|__cvmx_fau_iobdma_data
argument_list|(
name|scraddr
argument_list|,
name|value
argument_list|,
literal|1
argument_list|,
name|CVMX_FAU_OP_SIZE_8
argument_list|,
name|reg
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**  * Perform an atomic 64 bit add  *  * @param reg     FAU atomic register to access. 0<= reg< 2048.  *                - Step by 8 for 64 bit access.  * @param value   Signed value to add.  */
specifier|static
specifier|inline
name|void
name|cvmx_fau_atomic_add64
parameter_list|(
name|cvmx_fau_reg_64_t
name|reg
parameter_list|,
name|int64_t
name|value
parameter_list|)
block|{
name|cvmx_write64_int64
argument_list|(
name|__cvmx_fau_store_address
argument_list|(
literal|0
argument_list|,
name|reg
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**  * Perform an atomic 32 bit add  *  * @param reg     FAU atomic register to access. 0<= reg< 2048.  *                - Step by 4 for 32 bit access.  * @param value   Signed value to add.  */
specifier|static
specifier|inline
name|void
name|cvmx_fau_atomic_add32
parameter_list|(
name|cvmx_fau_reg_32_t
name|reg
parameter_list|,
name|int32_t
name|value
parameter_list|)
block|{
name|cvmx_write64_int32
argument_list|(
name|__cvmx_fau_store_address
argument_list|(
literal|0
argument_list|,
name|reg
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**  * Perform an atomic 16 bit add  *  * @param reg     FAU atomic register to access. 0<= reg< 2048.  *                - Step by 2 for 16 bit access.  * @param value   Signed value to add.  */
specifier|static
specifier|inline
name|void
name|cvmx_fau_atomic_add16
parameter_list|(
name|cvmx_fau_reg_16_t
name|reg
parameter_list|,
name|int16_t
name|value
parameter_list|)
block|{
name|cvmx_write64_int16
argument_list|(
name|__cvmx_fau_store_address
argument_list|(
literal|0
argument_list|,
name|reg
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**  * Perform an atomic 8 bit add  *  * @param reg     FAU atomic register to access. 0<= reg< 2048.  * @param value   Signed value to add.  */
specifier|static
specifier|inline
name|void
name|cvmx_fau_atomic_add8
parameter_list|(
name|cvmx_fau_reg_8_t
name|reg
parameter_list|,
name|int8_t
name|value
parameter_list|)
block|{
name|cvmx_write64_int8
argument_list|(
name|__cvmx_fau_store_address
argument_list|(
literal|0
argument_list|,
name|reg
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**  * Perform an atomic 64 bit write  *  * @param reg     FAU atomic register to access. 0<= reg< 2048.  *                - Step by 8 for 64 bit access.  * @param value   Signed value to write.  */
specifier|static
specifier|inline
name|void
name|cvmx_fau_atomic_write64
parameter_list|(
name|cvmx_fau_reg_64_t
name|reg
parameter_list|,
name|int64_t
name|value
parameter_list|)
block|{
name|cvmx_write64_int64
argument_list|(
name|__cvmx_fau_store_address
argument_list|(
literal|1
argument_list|,
name|reg
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**  * Perform an atomic 32 bit write  *  * @param reg     FAU atomic register to access. 0<= reg< 2048.  *                - Step by 4 for 32 bit access.  * @param value   Signed value to write.  */
specifier|static
specifier|inline
name|void
name|cvmx_fau_atomic_write32
parameter_list|(
name|cvmx_fau_reg_32_t
name|reg
parameter_list|,
name|int32_t
name|value
parameter_list|)
block|{
name|cvmx_write64_int32
argument_list|(
name|__cvmx_fau_store_address
argument_list|(
literal|1
argument_list|,
name|reg
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**  * Perform an atomic 16 bit write  *  * @param reg     FAU atomic register to access. 0<= reg< 2048.  *                - Step by 2 for 16 bit access.  * @param value   Signed value to write.  */
specifier|static
specifier|inline
name|void
name|cvmx_fau_atomic_write16
parameter_list|(
name|cvmx_fau_reg_16_t
name|reg
parameter_list|,
name|int16_t
name|value
parameter_list|)
block|{
name|cvmx_write64_int16
argument_list|(
name|__cvmx_fau_store_address
argument_list|(
literal|1
argument_list|,
name|reg
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**  * Perform an atomic 8 bit write  *  * @param reg     FAU atomic register to access. 0<= reg< 2048.  * @param value   Signed value to write.  */
specifier|static
specifier|inline
name|void
name|cvmx_fau_atomic_write8
parameter_list|(
name|cvmx_fau_reg_8_t
name|reg
parameter_list|,
name|int8_t
name|value
parameter_list|)
block|{
name|cvmx_write64_int8
argument_list|(
name|__cvmx_fau_store_address
argument_list|(
literal|1
argument_list|,
name|reg
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __CVMX_FAU_H__ */
end_comment

end_unit

