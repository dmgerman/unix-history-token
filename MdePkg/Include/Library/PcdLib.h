begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/** @file   Provides library services to get and set Platform Configuration Database entries.    PCD Library Class provides a PCD usage macro interface for all PCD types.   It should be included in any module that uses PCD. If a module uses dynamic/dynamicex   PCD, module should be linked to a PEIM/DXE library instance to access that PCD.   If a module uses PatchableInModule type PCD, it also needs the library instance to produce   LibPatchPcdSetPtr() interface. For FeatureFlag/Fixed PCD, the macro interface is   translated to a variable or macro that is auto-generated by build tool in   module's autogen.h/autogen.c.   The PcdGetXX(), PcdSetXX(), PcdToken(), and PcdGetNextTokenSpace() operations are    only available prior to ExitBootServices().  If access to PCD values are required    at runtime, then their values must be collected prior to ExitBootServices().   There are no restrictions on the use of FeaturePcd(), FixedPcdGetXX(),   PatchPcdGetXX(), and PatchPcdSetXX().  Copyright (c) 2006 - 2017, Intel Corporation. All rights reserved.<BR> This program and the accompanying materials are licensed and made available under the terms and conditions of the BSD License which accompanies this distribution.  The full text of the license may be found at http://opensource.org/licenses/bsd-license.php  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.  **/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__PCD_LIB_H__
end_ifndef

begin_define
define|#
directive|define
name|__PCD_LIB_H__
end_define

begin_comment
comment|/**   Retrieves a token number based on a token name.    Returns the token number associated with the PCD token specified by TokenName.   If TokenName is not a valid token in the token space, then the module will not build.    @param   TokenName  The name of the PCD token to retrieve the token number for.    @return  The token number associated with the PCD.  **/
end_comment

begin_define
define|#
directive|define
name|PcdToken
parameter_list|(
name|TokenName
parameter_list|)
value|_PCD_TOKEN_##TokenName
end_define

begin_comment
comment|/**   Retrieves a Boolean PCD feature flag based on a token name.    Returns the Boolean value for the PCD feature flag specified by TokenName.   If TokenName is not a valid token in the token space, then the module will not build.   If TokenName is not a feature flag PCD, then the module will not build.    @param   TokenName  The name of the PCD token to retrieve a current value for.    @return  Boolean value for the PCD feature flag.  **/
end_comment

begin_define
define|#
directive|define
name|FeaturePcdGet
parameter_list|(
name|TokenName
parameter_list|)
value|_PCD_GET_MODE_BOOL_##TokenName
end_define

begin_comment
comment|/**   Retrieves an 8-bit fixed PCD token value based on a token name.    Returns the 8-bit value for the token specified by TokenName.   If TokenName is not a valid token in the token space, then the module will not build.   If TokenName is not a fixed at build PCD, then the module will not build.    @param   TokenName  The name of the PCD token to retrieve a current value for.    @return  8-bit value for the token specified by TokenName.  **/
end_comment

begin_define
define|#
directive|define
name|FixedPcdGet8
parameter_list|(
name|TokenName
parameter_list|)
value|_PCD_VALUE_##TokenName
end_define

begin_comment
comment|/**   Retrieves a 16-bit fixed PCD token value based on a token name.    Returns the 16-bit value for the token specified by TokenName.   If TokenName is not a valid token in the token space, then the module will not build.   If TokenName is not a fixed at build PCD, then the module will not build.    @param   TokenName  The name of the PCD token to retrieve a current value for.    @return  16-bit value for the token specified by TokenName.  **/
end_comment

begin_define
define|#
directive|define
name|FixedPcdGet16
parameter_list|(
name|TokenName
parameter_list|)
value|_PCD_VALUE_##TokenName
end_define

begin_comment
comment|/**   Retrieves a 32-bit fixed PCD token value based on a token name.    Returns the 32-bit value for the token specified by TokenName.   If TokenName is not a valid token in the token space, then the module will not build.   If TokenName is not a fixed at build PCD, then the module will not build.    @param   TokenName  The name of the PCD token to retrieve a current value for.    @return  32-bit value for the token specified by TokenName.  **/
end_comment

begin_define
define|#
directive|define
name|FixedPcdGet32
parameter_list|(
name|TokenName
parameter_list|)
value|_PCD_VALUE_##TokenName
end_define

begin_comment
comment|/**   Retrieves a 64-bit fixed PCD token value based on a token name.    Returns the 64-bit value for the token specified by TokenName.   If TokenName is not a valid token in the token space, then the module will not build.   If TokenName is not a fixed at build PCD, then the module will not build.    @param   TokenName  The name of the PCD token to retrieve a current value for.    @return  64-bit value for the token specified by TokenName.  **/
end_comment

begin_define
define|#
directive|define
name|FixedPcdGet64
parameter_list|(
name|TokenName
parameter_list|)
value|_PCD_VALUE_##TokenName
end_define

begin_comment
comment|/**   Retrieves a Boolean fixed PCD token value based on a token name.    Returns the Boolean value for the token specified by TokenName.   If TokenName is not a valid token in the token space, then the module will not build.   If TokenName is not a fixed at build PCD, then the module will not build.    @param   TokenName  The name of the PCD token to retrieve a current value for.    @return  The Boolean value for the token.   **/
end_comment

begin_define
define|#
directive|define
name|FixedPcdGetBool
parameter_list|(
name|TokenName
parameter_list|)
value|_PCD_VALUE_##TokenName
end_define

begin_comment
comment|/**   Retrieves a pointer to a fixed PCD token buffer based on a token name.    Returns a pointer to the buffer for the token specified by TokenName.   If TokenName is not a valid token in the token space, then the module will not build.   If TokenName is not a fixed at build PCD, then the module will not build.    @param   TokenName  The name of the PCD token to retrieve a current value for.    @return  A pointer to the buffer.   **/
end_comment

begin_define
define|#
directive|define
name|FixedPcdGetPtr
parameter_list|(
name|TokenName
parameter_list|)
value|((VOID *)_PCD_VALUE_##TokenName)
end_define

begin_comment
comment|/**   Retrieves an 8-bit binary patchable PCD token value based on a token name.    Returns the 8-bit value for the token specified by TokenName.   If TokenName is not a valid token in the token space, then the module will not build.   If TokenName is not a patchable in module PCD, then the module will not build.    @param   TokenName  The name of the PCD token to retrieve a current value for.    @return  An 8-bit binary patchable PCD token value.  **/
end_comment

begin_define
define|#
directive|define
name|PatchPcdGet8
parameter_list|(
name|TokenName
parameter_list|)
value|_gPcd_BinaryPatch_##TokenName
end_define

begin_comment
comment|/**   Retrieves a 16-bit binary patchable PCD token value based on a token name.    Returns the 16-bit value for the token specified by TokenName.   If TokenName is not a valid token in the token space, then the module will not build.   If TokenName is not a patchable in module PCD, then the module will not build.    @param   TokenName  The name of the PCD token to retrieve a current value for.    @return  A 16-bit binary patchable PCD token value.  **/
end_comment

begin_define
define|#
directive|define
name|PatchPcdGet16
parameter_list|(
name|TokenName
parameter_list|)
value|_gPcd_BinaryPatch_##TokenName
end_define

begin_comment
comment|/**   Retrieves a 32-bit binary patchable PCD token value based on a token name.    Returns the 32-bit value for the token specified by TokenName.   If TokenName is not a valid token in the token space, then the module will not build.   If TokenName is not a patchable in module PCD, then the module will not build.    @param   TokenName  The name of the PCD token to retrieve a current value for.    @return  A 32-bit binary patchable PCD token value.  **/
end_comment

begin_define
define|#
directive|define
name|PatchPcdGet32
parameter_list|(
name|TokenName
parameter_list|)
value|_gPcd_BinaryPatch_##TokenName
end_define

begin_comment
comment|/**   Retrieves a 64-bit binary patchable PCD token value based on a token name.    Returns the 64-bit value for the token specified by TokenName.   If TokenName is not a valid token in the token space, then the module will not build.   If TokenName is not a patchable in module PCD, then the module will not build.    @param   TokenName  The name of the PCD token to retrieve a current value for.    @return  A 64-bit binary patchable PCD token value.  **/
end_comment

begin_define
define|#
directive|define
name|PatchPcdGet64
parameter_list|(
name|TokenName
parameter_list|)
value|_gPcd_BinaryPatch_##TokenName
end_define

begin_comment
comment|/**   Retrieves a Boolean binary patchable PCD token value based on a token name.    Returns the Boolean value for the token specified by TokenName.   If TokenName is not a valid token in the token space, then the module will not build.   If TokenName is not a patchable in module PCD, then the module will not build.    @param   TokenName  The name of the PCD token to retrieve a current value for.    @return  The Boolean value for the token.  **/
end_comment

begin_define
define|#
directive|define
name|PatchPcdGetBool
parameter_list|(
name|TokenName
parameter_list|)
value|_gPcd_BinaryPatch_##TokenName
end_define

begin_comment
comment|/**   Retrieves a pointer to a binary patchable PCD token buffer based on a token name.    Returns a pointer to the buffer for the token specified by TokenName.   If TokenName is not a valid token in the token space, then the module will not build.   If TokenName is not a patchable in module PCD, then the module will not build.    @param   TokenName  The name of the PCD token to retrieve a current value for.    @return  A pointer to the buffer for the token.  **/
end_comment

begin_define
define|#
directive|define
name|PatchPcdGetPtr
parameter_list|(
name|TokenName
parameter_list|)
value|((VOID *)_gPcd_BinaryPatch_##TokenName)
end_define

begin_comment
comment|/**   Sets an 8-bit binary patchable PCD token value based on a token name.    Sets the 8-bit value for the token specified by TokenName. Value is returned.   If TokenName is not a valid token in the token space, then the module will not build.   If TokenName is not a patchable in module PCD, then the module will not build.    @param   TokenName  The name of the binary patchable PCD token to set the current value for.   @param   Value      The 8-bit value to set.      @return Return the Value that was set.  **/
end_comment

begin_define
define|#
directive|define
name|PatchPcdSet8
parameter_list|(
name|TokenName
parameter_list|,
name|Value
parameter_list|)
value|(_gPcd_BinaryPatch_##TokenName = (Value))
end_define

begin_comment
comment|/**   Sets a 16-bit binary patchable PCD token value based on a token name.    Sets the 16-bit value for the token specified by TokenName. Value is returned.   If TokenName is not a valid token in the token space, then the module will not build.   If TokenName is not a patchable in module PCD, then the module will not build.    @param   TokenName  The name of the binary patchable PCD token to set the current value for.   @param   Value      The 16-bit value to set.    @return Return the Value that was set.  **/
end_comment

begin_define
define|#
directive|define
name|PatchPcdSet16
parameter_list|(
name|TokenName
parameter_list|,
name|Value
parameter_list|)
value|(_gPcd_BinaryPatch_##TokenName = (Value))
end_define

begin_comment
comment|/**   Sets a 32-bit binary patchable PCD token value based on a token name.    Sets the 32-bit value for the token specified by TokenName. Value is returned.   If TokenName is not a valid token in the token space, then the module will not build.   If TokenName is not a patchable in module PCD, then the module will not build.    @param   TokenName  The name of the binary patchable PCD token to set the current value for.   @param   Value      The 32-bit value to set.    @return Return the Value that was set.  **/
end_comment

begin_define
define|#
directive|define
name|PatchPcdSet32
parameter_list|(
name|TokenName
parameter_list|,
name|Value
parameter_list|)
value|(_gPcd_BinaryPatch_##TokenName = (Value))
end_define

begin_comment
comment|/**   Sets a 64-bit binary patchable PCD token value based on a token name.    Sets the 64-bit value for the token specified by TokenName. Value is returned.   If TokenName is not a valid token in the token space, then the module will not build.   If TokenName is not a patchable in module PCD, then the module will not build.    @param   TokenName  The name of the binary patchable PCD token to set the current value for.   @param   Value      The 64-bit value to set.    @return Return the Value that was set.  **/
end_comment

begin_define
define|#
directive|define
name|PatchPcdSet64
parameter_list|(
name|TokenName
parameter_list|,
name|Value
parameter_list|)
value|(_gPcd_BinaryPatch_##TokenName = (Value))
end_define

begin_comment
comment|/**   Sets a Boolean binary patchable PCD token value based on a token name.    Sets the Boolean value for the token specified by TokenName. Value is returned.   If TokenName is not a valid token in the token space, then the module will not build.   If TokenName is not a patchable in module PCD, then the module will not build.    @param   TokenName  The name of the binary patchable PCD token to set the current value for.   @param   Value      The boolean value to set.    @return Return the Value that was set.  **/
end_comment

begin_define
define|#
directive|define
name|PatchPcdSetBool
parameter_list|(
name|TokenName
parameter_list|,
name|Value
parameter_list|)
value|(_gPcd_BinaryPatch_##TokenName = (Value))
end_define

begin_comment
comment|/**   Sets a pointer to a binary patchable PCD token buffer based on a token name.    Sets the buffer for the token specified by TokenName.  Buffer is returned.     If SizeOfBuffer is greater than the maximum size supported by TokenName, then set SizeOfBuffer   to the maximum size supported by TokenName and return NULL to indicate that the set operation    was not actually performed.  If SizeOfBuffer is set to MAX_ADDRESS, then SizeOfBuffer must be    set to the maximum size supported by TokenName and NULL must be returned.   If TokenName is not a valid token in the token space, then the module will not build.   If TokenName is not a patchable in module PCD, then the module will not build.      If SizeOfBuffer is NULL, then ASSERT().   If SizeOfBuffer> 0 and Buffer is NULL, then ASSERT().      @param   TokenName      The name of the binary patchable PCD token to set the current value for.   @param   SizeOfBuffer   A pointer to the size, in bytes, of Buffer.   @param   Buffer         Pointer to the value to set.    @return Return the pointer to the Buffer that was set.  **/
end_comment

begin_define
define|#
directive|define
name|PatchPcdSetPtr
parameter_list|(
name|TokenName
parameter_list|,
name|Size
parameter_list|,
name|Buffer
parameter_list|)
define|\
value|LibPatchPcdSetPtrAndSize (                 \                                               (VOID *)_gPcd_BinaryPatch_##TokenName,   \&_gPcd_BinaryPatch_Size_##TokenName,     \                                               (UINTN)_PCD_PATCHABLE_##TokenName##_SIZE, \                                               (Size),                                  \                                               (Buffer)                                 \                                               )
end_define

begin_comment
comment|/**   Retrieves an 8-bit PCD token value based on a token name.      Returns the 8-bit value for the token specified by TokenName.   If TokenName is not a valid token in the token space, then the module will not build.      @param   TokenName  The name of the PCD token to retrieve a current value for.    @return  8-bit value for the token specified by TokenName.  **/
end_comment

begin_define
define|#
directive|define
name|PcdGet8
parameter_list|(
name|TokenName
parameter_list|)
value|_PCD_GET_MODE_8_##TokenName
end_define

begin_comment
comment|/**   Retrieves a 16-bit PCD token value based on a token name.    Returns the 16-bit value for the token specified by TokenName.   If TokenName is not a valid token in the token space, then the module will not build.    @param   TokenName  The name of the PCD token to retrieve a current value for.    @return  16-bit value for the token specified by TokenName.  **/
end_comment

begin_define
define|#
directive|define
name|PcdGet16
parameter_list|(
name|TokenName
parameter_list|)
value|_PCD_GET_MODE_16_##TokenName
end_define

begin_comment
comment|/**   Retrieves a 32-bit PCD token value based on a token name.    Returns the 32-bit value for the token specified by TokenName.   If TokenName is not a valid token in the token space, then the module will not build.    @param   TokenName  The name of the PCD token to retrieve a current value for.    @return  32-bit value for the token specified by TokenName.  **/
end_comment

begin_define
define|#
directive|define
name|PcdGet32
parameter_list|(
name|TokenName
parameter_list|)
value|_PCD_GET_MODE_32_##TokenName
end_define

begin_comment
comment|/**   Retrieves a 64-bit PCD token value based on a token name.    Returns the 64-bit value for the token specified by TokenName.   If TokenName is not a valid token in the token space, then the module will not build.    @param   TokenName  The name of the PCD token to retrieve a current value for.    @return  64-bit value for the token specified by TokenName.  **/
end_comment

begin_define
define|#
directive|define
name|PcdGet64
parameter_list|(
name|TokenName
parameter_list|)
value|_PCD_GET_MODE_64_##TokenName
end_define

begin_comment
comment|/**   Retrieves a pointer to a PCD token buffer based on a token name.    Returns a pointer to the buffer for the token specified by TokenName.   If TokenName is not a valid token in the token space, then the module will not build.    @param   TokenName  The name of the PCD token to retrieve a current value for.    @return  A pointer to the buffer.  **/
end_comment

begin_define
define|#
directive|define
name|PcdGetPtr
parameter_list|(
name|TokenName
parameter_list|)
value|_PCD_GET_MODE_PTR_##TokenName
end_define

begin_comment
comment|/**   Retrieves a Boolean PCD token value based on a token name.    Returns the Boolean value for the token specified by TokenName.   If TokenName is not a valid token in the token space, then the module will not build.    @param   TokenName  The name of the PCD token to retrieve a current value for.    @return  A Boolean PCD token value.  **/
end_comment

begin_define
define|#
directive|define
name|PcdGetBool
parameter_list|(
name|TokenName
parameter_list|)
value|_PCD_GET_MODE_BOOL_##TokenName
end_define

begin_comment
comment|/**   Retrieves the size of a fixed PCD token based on a token name.    Returns the size of the token specified by TokenName.   If TokenName is not a valid token in the token space, then the module will not build.    @param[in]  TokenName  The name of the PCD token to retrieve a current value size for.    @return     Return the size  **/
end_comment

begin_define
define|#
directive|define
name|FixedPcdGetSize
parameter_list|(
name|TokenName
parameter_list|)
value|_PCD_SIZE_##TokenName
end_define

begin_comment
comment|/**   Retrieves the size of a binary patchable PCD token based on a token name.    Returns the size of the token specified by TokenName.   If TokenName is not a valid token in the token space, then the module will not build.    @param[in]  TokenName  The name of the PCD token to retrieve a current value size for.    @return     Return the size  **/
end_comment

begin_define
define|#
directive|define
name|PatchPcdGetSize
parameter_list|(
name|TokenName
parameter_list|)
value|_gPcd_BinaryPatch_Size_##TokenName
end_define

begin_comment
comment|/**   Retrieves the size of the PCD token based on a token name.      Returns the size of the token specified by TokenName.   If TokenName is not a valid token in the token space, then the module will not build.      @param[in]   TokenName  The name of the PCD token to retrieve a current value size for.    @return      Return the size  **/
end_comment

begin_define
define|#
directive|define
name|PcdGetSize
parameter_list|(
name|TokenName
parameter_list|)
value|_PCD_GET_MODE_SIZE_##TokenName
end_define

begin_comment
comment|/**   Retrieve the size of a given PCD token.      Returns the size of the token specified by TokenNumber and Guid.    If Guid is NULL, then ASSERT().     @param[in]  Guid          Pointer to a 128-bit unique value that designates                              which namespace to retrieve a value from.   @param[in]  TokenNumber   The PCD token number to retrieve a current value size for.    @return     Return the size.  **/
end_comment

begin_define
define|#
directive|define
name|PcdGetExSize
parameter_list|(
name|Guid
parameter_list|,
name|TokenName
parameter_list|)
value|LibPcdGetExSize ((Guid), PcdTokenEx(Guid,TokenName))
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|DISABLE_NEW_DEPRECATED_INTERFACES
end_ifndef

begin_comment
comment|/**   Sets an 8-bit PCD token value based on a token name.    Sets the 8-bit value for the token specified by TokenName. Value is returned.   If TokenName is not a valid token in the token space, then the module will not build.    @param   TokenName  The name of the PCD token to retrieve a current value for.   @param   Value      The 8-bit value to set.      @return Return the Value that was set.  **/
end_comment

begin_define
define|#
directive|define
name|PcdSet8
parameter_list|(
name|TokenName
parameter_list|,
name|Value
parameter_list|)
value|_PCD_SET_MODE_8_##TokenName     ((Value))
end_define

begin_comment
comment|/**   Sets a 16-bit PCD token value based on a token name.    Sets the 16-bit value for the token specified by TokenName. Value is returned.   If TokenName is not a valid token in the token space, then the module will not build.    @param   TokenName  The name of the PCD token to retrieve a current value for.   @param   Value      The 16-bit value to set.    @return Return the Value that was set.  **/
end_comment

begin_define
define|#
directive|define
name|PcdSet16
parameter_list|(
name|TokenName
parameter_list|,
name|Value
parameter_list|)
value|_PCD_SET_MODE_16_##TokenName    ((Value))
end_define

begin_comment
comment|/**   Sets a 32-bit PCD token value based on a token name.    Sets the 32-bit value for the token specified by TokenName. Value is returned.   If TokenName is not a valid token in the token space, then the module will not build.    @param   TokenName  The name of the PCD token to retrieve a current value for.   @param   Value      The 32-bit value to set.    @return Return the Value that was set.  **/
end_comment

begin_define
define|#
directive|define
name|PcdSet32
parameter_list|(
name|TokenName
parameter_list|,
name|Value
parameter_list|)
value|_PCD_SET_MODE_32_##TokenName    ((Value))
end_define

begin_comment
comment|/**   Sets a 64-bit PCD token value based on a token name.    Sets the 64-bit value for the token specified by TokenName. Value is returned.   If TokenName is not a valid token in the token space, then the module will not build.    @param   TokenName  The name of the PCD token to retrieve a current value for.   @param   Value      The 64-bit value to set.    @return Return the Value that was set.  **/
end_comment

begin_define
define|#
directive|define
name|PcdSet64
parameter_list|(
name|TokenName
parameter_list|,
name|Value
parameter_list|)
value|_PCD_SET_MODE_64_##TokenName    ((Value))
end_define

begin_comment
comment|/**   Sets a pointer to a PCD token buffer based on a token name.    Sets the buffer for the token specified by TokenName. Buffer is returned.     If SizeOfBuffer is greater than the maximum size supported by TokenName,    then set SizeOfBuffer to the maximum size supported by TokenName and return NULL    to indicate that the set operation was not actually performed.  If SizeOfBuffer    is set to MAX_ADDRESS, then SizeOfBuffer must be set to the maximum size supported    by TokenName and NULL must be returned.   If TokenName is not a valid token in the token space, then the module will not build.      If SizeOfBuffer is NULL, then ASSERT().   If SizeOfBuffer> 0 and Buffer is NULL, then ASSERT().      @param   TokenName      The name of the PCD token to set the current value for.   @param   SizeOfBuffer   A pointer to the size, in bytes, of Buffer.   @param   Buffer         A pointer to the buffer to set.    @return Return the pointer to the Buffer that was set.  **/
end_comment

begin_define
define|#
directive|define
name|PcdSetPtr
parameter_list|(
name|TokenName
parameter_list|,
name|SizeOfBuffer
parameter_list|,
name|Buffer
parameter_list|)
define|\
value|_PCD_SET_MODE_PTR_##TokenName   ((SizeOfBuffer), (Buffer))
end_define

begin_comment
comment|/**   Sets a Boolean PCD token value based on a token name.    Sets the Boolean value for the token specified by TokenName. Value is returned.    If TokenName is not a valid token in the token space, then the module will not build.    @param   TokenName      The name of the PCD token to set the current value for.   @param   Buffer         The Boolean value to set.    @return Return the Value that was set.  **/
end_comment

begin_define
define|#
directive|define
name|PcdSetBool
parameter_list|(
name|TokenName
parameter_list|,
name|Value
parameter_list|)
value|_PCD_SET_MODE_BOOL_##TokenName  ((Value))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/**   Sets a 8-bit PCD token value based on a token name.    Sets the 8-bit value for the token specified by TokenName.   If TokenName is not a valid token in the token space, then the module will not build.    @param TokenName  The name of the PCD token to retrieve a current value for.   @param Value      The 8-bit value to set.    @return The status of the set operation.  **/
end_comment

begin_define
define|#
directive|define
name|PcdSet8S
parameter_list|(
name|TokenName
parameter_list|,
name|Value
parameter_list|)
value|_PCD_SET_MODE_8_S_##TokenName    ((Value))
end_define

begin_comment
comment|/**   Sets a 16-bit PCD token value based on a token name.    Sets the 16-bit value for the token specified by TokenName.   If TokenName is not a valid token in the token space, then the module will not build.    @param TokenName  The name of the PCD token to retrieve a current value for.   @param Value      The 16-bit value to set.    @return The status of the set operation.  **/
end_comment

begin_define
define|#
directive|define
name|PcdSet16S
parameter_list|(
name|TokenName
parameter_list|,
name|Value
parameter_list|)
value|_PCD_SET_MODE_16_S_##TokenName    ((Value))
end_define

begin_comment
comment|/**   Sets a 32-bit PCD token value based on a token name.    Sets the 32-bit value for the token specified by TokenName.   If TokenName is not a valid token in the token space, then the module will not build.    @param TokenName  The name of the PCD token to retrieve a current value for.   @param Value      The 32-bit value to set.    @return The status of the set operation.  **/
end_comment

begin_define
define|#
directive|define
name|PcdSet32S
parameter_list|(
name|TokenName
parameter_list|,
name|Value
parameter_list|)
value|_PCD_SET_MODE_32_S_##TokenName    ((Value))
end_define

begin_comment
comment|/**   Sets a 64-bit PCD token value based on a token name.    Sets the 64-bit value for the token specified by TokenName.   If TokenName is not a valid token in the token space, then the module will not build.    @param TokenName  The name of the PCD token to retrieve a current value for.   @param Value      The 64-bit value to set.    @return The status of the set operation.  **/
end_comment

begin_define
define|#
directive|define
name|PcdSet64S
parameter_list|(
name|TokenName
parameter_list|,
name|Value
parameter_list|)
value|_PCD_SET_MODE_64_S_##TokenName    ((Value))
end_define

begin_comment
comment|/**   Sets a pointer to a PCD token buffer based on a token name.    Sets the buffer for the token specified by TokenName.   If SizeOfBuffer is greater than the maximum size supported by TokenName,   then set SizeOfBuffer to the maximum size supported by TokenName and return   RETURN_INVALID_PARAMETER to indicate that the set operation was not actually performed.   If SizeOfBuffer is set to MAX_ADDRESS, then SizeOfBuffer must be set to the maximum size   supported by TokenName and RETURN_INVALID_PARAMETER must be returned.   If TokenName is not a valid token in the token space, then the module will not build.    If SizeOfBuffer is NULL, then ASSERT().   If SizeOfBuffer> 0 and Buffer is NULL, then ASSERT().    @param TokenName      The name of the PCD token to set the current value for.   @param SizeOfBuffer   A pointer to the size, in bytes, of Buffer.   @param Buffer         A pointer to the buffer to set.    @return The status of the set operation.  **/
end_comment

begin_define
define|#
directive|define
name|PcdSetPtrS
parameter_list|(
name|TokenName
parameter_list|,
name|SizeOfBuffer
parameter_list|,
name|Buffer
parameter_list|)
define|\
value|_PCD_SET_MODE_PTR_S_##TokenName   ((SizeOfBuffer), (Buffer))
end_define

begin_comment
comment|/**   Sets a boolean PCD token value based on a token name.    Sets the boolean value for the token specified by TokenName.   If TokenName is not a valid token in the token space, then the module will not build.    @param TokenName  The name of the PCD token to retrieve a current value for.   @param Value      The boolean value to set.    @return The status of the set operation.  **/
end_comment

begin_define
define|#
directive|define
name|PcdSetBoolS
parameter_list|(
name|TokenName
parameter_list|,
name|Value
parameter_list|)
value|_PCD_SET_MODE_BOOL_S_##TokenName    ((Value))
end_define

begin_comment
comment|/**   Retrieves a token number based on a GUID and a token name.    Returns the token number for the token specified by Guid and TokenName.   If TokenName is not a valid token in the token space, then the module will not build.    @param   Guid        Pointer to a 128-bit unique value that designates                         which namespace to retrieve a value from.   @param   TokenName   The name of the PCD token to retrieve a current value for.                     @return  Return the token number.  **/
end_comment

begin_define
define|#
directive|define
name|PcdTokenEx
parameter_list|(
name|Guid
parameter_list|,
name|TokenName
parameter_list|)
value|_PCD_TOKEN_EX_##TokenName(Guid)
end_define

begin_comment
comment|/**   Retrieves an 8-bit PCD token value based on a GUID and a token name.    Returns the 8-bit value for the token specified by Guid and TokenName.   If TokenName is not a valid token in the token space specified by Guid,    then the module will not build.      If Guid is NULL, then ASSERT().    @param   Guid        Pointer to a 128-bit unique value that designates                         which namespace to retrieve a value from.   @param   TokenName   The name of the PCD token to retrieve a current value for.                     @return  An 8-bit PCD token value.  **/
end_comment

begin_define
define|#
directive|define
name|PcdGetEx8
parameter_list|(
name|Guid
parameter_list|,
name|TokenName
parameter_list|)
value|LibPcdGetEx8 ((Guid), PcdTokenEx(Guid,TokenName))
end_define

begin_comment
comment|/**   Retrieves a 16-bit PCD token value based on a GUID and a token name.    Returns the 16-bit value for the token specified by Guid and TokenName.   If TokenName is not a valid token in the token space specified by Guid,    then the module will not build.    If Guid is NULL, then ASSERT().    @param   Guid        Pointer to a 128-bit unique value that designates                         which namespace to retrieve a value from.   @param   TokenName   The name of the PCD token to retrieve a current value for.                     @return  A 16-bit PCD token value.  **/
end_comment

begin_define
define|#
directive|define
name|PcdGetEx16
parameter_list|(
name|Guid
parameter_list|,
name|TokenName
parameter_list|)
value|LibPcdGetEx16 ((Guid), PcdTokenEx(Guid,TokenName))
end_define

begin_comment
comment|/**   Retrieves a 32-bit PCD token value based on a GUID and a token name.    Returns the 32-bit value for the token specified by Guid and TokenName.   If TokenName is not a valid token in the token space specified by Guid,    then the module will not build.    If Guid is NULL, then ASSERT().    @param   Guid        Pointer to a 128-bit unique value that designates                         which namespace to retrieve a value from.   @param   TokenName   The name of the PCD token to retrieve a current value for.                     @return  A 32-bit PCD token value.  **/
end_comment

begin_define
define|#
directive|define
name|PcdGetEx32
parameter_list|(
name|Guid
parameter_list|,
name|TokenName
parameter_list|)
value|LibPcdGetEx32 ((Guid), PcdTokenEx(Guid,TokenName))
end_define

begin_comment
comment|/**   Retrieves a 64-bit PCD token value based on a GUID and a token name.    Returns the 64-bit value for the token specified by Guid and TokenName.   If TokenName is not a valid token in the token space specified by Guid,    then the module will not build.    If Guid is NULL, then ASSERT().    @param   Guid        Pointer to a 128-bit unique value that designates                         which namespace to retrieve a value from.   @param   TokenName   The name of the PCD token to retrieve a current value for.                     @return  A 64-bit PCD token value.  **/
end_comment

begin_define
define|#
directive|define
name|PcdGetEx64
parameter_list|(
name|Guid
parameter_list|,
name|TokenName
parameter_list|)
value|LibPcdGetEx64 ((Guid), PcdTokenEx(Guid,TokenName))
end_define

begin_comment
comment|/**   Retrieves a pointer to a PCD token buffer based on a GUID and a token name.    Returns a pointer to the buffer for the token specified by Guid and TokenName.   If TokenName is not a valid token in the token space specified by Guid,    then the module will not build.    If Guid is NULL, then ASSERT().    @param   Guid        Pointer to a 128-bit unique value that designates                         which namespace to retrieve a value from.   @param   TokenName   The name of the PCD token to retrieve a current value for.                     @return  A pointer to a PCD token buffer.  **/
end_comment

begin_define
define|#
directive|define
name|PcdGetExPtr
parameter_list|(
name|Guid
parameter_list|,
name|TokenName
parameter_list|)
value|LibPcdGetExPtr ((Guid), PcdTokenEx(Guid,TokenName))
end_define

begin_comment
comment|/**   Retrieves a Boolean PCD token value based on a GUID and a token name.    Returns the Boolean value for the token specified by Guid and TokenName.   If TokenName is not a valid token in the token space specified by Guid,    then the module will not build.    If Guid is NULL, then ASSERT().    @param   Guid        Pointer to a 128-bit unique value that designates                         which namespace to retrieve a value from.   @param   TokenName   The name of the PCD token to retrieve a current value for.                     @return  A Boolean PCD token value.  **/
end_comment

begin_define
define|#
directive|define
name|PcdGetExBool
parameter_list|(
name|Guid
parameter_list|,
name|TokenName
parameter_list|)
value|LibPcdGetExBool  ((Guid), PcdTokenEx(Guid,TokenName))
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|DISABLE_NEW_DEPRECATED_INTERFACES
end_ifndef

begin_comment
comment|/**   Sets an 8-bit PCD token value based on a GUID and a token name.    Sets the 8-bit value for the token specified by Guid and TokenName. Value is returned.   If TokenName is not a valid token in the token space specified by Guid,    then the module will not build.    If Guid is NULL, then ASSERT().    @param   Guid        Pointer to a 128-bit unique value that designates                         which namespace to retrieve a value from.   @param   TokenName   The name of the PCD token to set the current value for.   @param   Value       The 8-bit value to set.                       @return Return the Value that was set.  **/
end_comment

begin_define
define|#
directive|define
name|PcdSetEx8
parameter_list|(
name|Guid
parameter_list|,
name|TokenName
parameter_list|,
name|Value
parameter_list|)
value|LibPcdSetEx8   ((Guid), PcdTokenEx(Guid,TokenName), (Value))
end_define

begin_comment
comment|/**   Sets a 16-bit PCD token value based on a GUID and a token name.    Sets the 16-bit value for the token specified by Guid and TokenName. Value is returned.   If TokenName is not a valid token in the token space specified by Guid,    then the module will not build.    If Guid is NULL, then ASSERT().    @param   Guid        Pointer to a 128-bit unique value that designates                         which namespace to retrieve a value from.   @param   TokenName   The name of the PCD token to set the current value for.   @param   Value       The 16-bit value to set.                       @return Return the Value that was set.  **/
end_comment

begin_define
define|#
directive|define
name|PcdSetEx16
parameter_list|(
name|Guid
parameter_list|,
name|TokenName
parameter_list|,
name|Value
parameter_list|)
value|LibPcdSetEx16  ((Guid), PcdTokenEx(Guid,TokenName), (Value))
end_define

begin_comment
comment|/**   Sets a 32-bit PCD token value based on a GUID and a token name.    Sets the 32-bit value for the token specified by Guid and TokenName. Value is returned.   If TokenName is not a valid token in the token space specified by Guid,    then the module will not build.    If Guid is NULL, then ASSERT().    @param   Guid        Pointer to a 128-bit unique value that designates                         which namespace to retrieve a value from.   @param   TokenName   The name of the PCD token to set the current value for.   @param   Value       The 32-bit value to set.                       @return Return the Value that was set.  **/
end_comment

begin_define
define|#
directive|define
name|PcdSetEx32
parameter_list|(
name|Guid
parameter_list|,
name|TokenName
parameter_list|,
name|Value
parameter_list|)
value|LibPcdSetEx32  ((Guid), PcdTokenEx(Guid,TokenName), (Value))
end_define

begin_comment
comment|/**   Sets a 64-bit PCD token value based on a GUID and a token name.    Sets the 64-bit value for the token specified by Guid and TokenName. Value is returned.   If TokenName is not a valid token in the token space specified by Guid,    then the module will not build.    If Guid is NULL, then ASSERT().    @param   Guid        Pointer to a 128-bit unique value that designates    which namespace to retrieve a value from.   @param   TokenName   The name of the PCD token to set the current value for.   @param   Value       The 64-bit value to set.                       @return Return the Value that was set.  **/
end_comment

begin_define
define|#
directive|define
name|PcdSetEx64
parameter_list|(
name|Guid
parameter_list|,
name|TokenName
parameter_list|,
name|Value
parameter_list|)
value|LibPcdSetEx64  ((Guid), PcdTokenEx(Guid,TokenName), (Value))
end_define

begin_comment
comment|/**   Sets a pointer to a PCD token buffer based on a GUID and a token name.    Sets the buffer for the token specified by Guid and TokenName. Buffer is returned.     If SizeOfBuffer is greater than the maximum size supported by Guid and TokenName,    then set SizeOfBuffer to the maximum size supported by Guid and TokenName and return    NULL to indicate that the set operation was not actually performed. If SizeOfBuffer    is set to MAX_ADDRESS, then SizeOfBuffer must be set to the maximum size supported by   Guid and TokenName and NULL must be returned.   If TokenName is not a valid token in the token space specified by Guid,    then the module will not build.      If Guid is NULL, then ASSERT().   If SizeOfBuffer is NULL, then ASSERT().   If SizeOfBuffer> 0 and Buffer is NULL, then ASSERT().    @param   Guid           Pointer to a 128-bit unique value that designates                            which namespace to retrieve a value from.   @param   TokenName      The name of the PCD token to set the current value for.   @param   SizeOfBuffer   A pointer to the size, in bytes, of Buffer.                     @param   Buffer         Pointer to the buffer to set.        @return Return the pointer to the Buffer that was set.  **/
end_comment

begin_define
define|#
directive|define
name|PcdSetExPtr
parameter_list|(
name|Guid
parameter_list|,
name|TokenName
parameter_list|,
name|SizeOfBuffer
parameter_list|,
name|Buffer
parameter_list|)
define|\
value|LibPcdSetExPtr ((Guid), PcdTokenEx(Guid,TokenName), (SizeOfBuffer), (Buffer))
end_define

begin_comment
comment|/**   Sets a Boolean PCD token value based on a GUID and a token name.    Sets the Boolean value for the token specified by Guid and TokenName. Value is returned.    If TokenName is not a valid token in the token space specified by Guid,    then the module will not build.    If Guid is NULL, then ASSERT().    @param   Guid           Pointer to a 128-bit unique value that designates                            which namespace to retrieve a value from.   @param   TokenName      The name of the PCD token to set the current value for.                 @param   Value          The Boolean value to set.    @return Return the Value that was set.  **/
end_comment

begin_define
define|#
directive|define
name|PcdSetExBool
parameter_list|(
name|Guid
parameter_list|,
name|TokenName
parameter_list|,
name|Value
parameter_list|)
define|\
value|LibPcdSetExBool((Guid), PcdTokenEx(Guid,TokenName), (Value))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/**   Sets an 8-bit PCD token value based on a GUID and a token name.    Sets the 8-bit value for the token specified by Guid and TokenName.   If TokenName is not a valid token in the token space specified by Guid,   then the module will not build.    If Guid is NULL, then ASSERT().    @param Guid       Pointer to a 128-bit unique value that designates                     which namespace to retrieve a value from.   @param TokenName  The name of the PCD token to set the current value for.   @param Value      The 8-bit value to set.    @return The status of the set operation.  **/
end_comment

begin_define
define|#
directive|define
name|PcdSetEx8S
parameter_list|(
name|Guid
parameter_list|,
name|TokenName
parameter_list|,
name|Value
parameter_list|)
value|LibPcdSetEx8S ((Guid), PcdTokenEx(Guid,TokenName), (Value))
end_define

begin_comment
comment|/**   Sets an 16-bit PCD token value based on a GUID and a token name.    Sets the 16-bit value for the token specified by Guid and TokenName.   If TokenName is not a valid token in the token space specified by Guid,   then the module will not build.    If Guid is NULL, then ASSERT().    @param Guid       Pointer to a 128-bit unique value that designates                     which namespace to retrieve a value from.   @param TokenName  The name of the PCD token to set the current value for.   @param Value      The 16-bit value to set.    @return The status of the set operation.  **/
end_comment

begin_define
define|#
directive|define
name|PcdSetEx16S
parameter_list|(
name|Guid
parameter_list|,
name|TokenName
parameter_list|,
name|Value
parameter_list|)
value|LibPcdSetEx16S ((Guid), PcdTokenEx(Guid,TokenName), (Value))
end_define

begin_comment
comment|/**   Sets an 32-bit PCD token value based on a GUID and a token name.    Sets the 32-bit value for the token specified by Guid and TokenName.   If TokenName is not a valid token in the token space specified by Guid,   then the module will not build.    If Guid is NULL, then ASSERT().    @param Guid       Pointer to a 128-bit unique value that designates                     which namespace to retrieve a value from.   @param TokenName  The name of the PCD token to set the current value for.   @param Value      The 32-bit value to set.    @return The status of the set operation.  **/
end_comment

begin_define
define|#
directive|define
name|PcdSetEx32S
parameter_list|(
name|Guid
parameter_list|,
name|TokenName
parameter_list|,
name|Value
parameter_list|)
value|LibPcdSetEx32S ((Guid), PcdTokenEx(Guid,TokenName), (Value))
end_define

begin_comment
comment|/**   Sets an 64-bit PCD token value based on a GUID and a token name.    Sets the 64-bit value for the token specified by Guid and TokenName.   If TokenName is not a valid token in the token space specified by Guid,   then the module will not build.    If Guid is NULL, then ASSERT().    @param Guid       Pointer to a 128-bit unique value that designates                     which namespace to retrieve a value from.   @param TokenName  The name of the PCD token to set the current value for.   @param Value      The 64-bit value to set.    @return The status of the set operation.  **/
end_comment

begin_define
define|#
directive|define
name|PcdSetEx64S
parameter_list|(
name|Guid
parameter_list|,
name|TokenName
parameter_list|,
name|Value
parameter_list|)
value|LibPcdSetEx64S ((Guid), PcdTokenEx(Guid,TokenName), (Value))
end_define

begin_comment
comment|/**   Sets a pointer to a PCD token buffer based on a GUID and a token name.    Sets the buffer for the token specified by Guid and TokenName.   If SizeOfBuffer is greater than the maximum size supported by Guid and TokenName,   then set SizeOfBuffer to the maximum size supported by Guid and TokenName and return   RETURN_INVALID_PARAMETER to indicate that the set operation was not actually performed.   If SizeOfBuffer is set to MAX_ADDRESS, then SizeOfBuffer must be set to the maximum size   supported by Guid and TokenName and RETURN_INVALID_PARAMETER must be returned.   If TokenName is not a valid token in the token space specified by Guid,   then the module will not build.    If Guid is NULL, then ASSERT().   If SizeOfBuffer is NULL, then ASSERT().   If SizeOfBuffer> 0 and Buffer is NULL, then ASSERT().    @param Guid           Pointer to a 128-bit unique value that designates                         which namespace to retrieve a value from.   @param TokenName      The name of the PCD token to set the current value for.   @param SizeOfBuffer   A pointer to the size, in bytes, of Buffer.   @param Buffer         Pointer to the buffer to set.    @return The status of the set operation.  **/
end_comment

begin_define
define|#
directive|define
name|PcdSetExPtrS
parameter_list|(
name|Guid
parameter_list|,
name|TokenName
parameter_list|,
name|SizeOfBuffer
parameter_list|,
name|Buffer
parameter_list|)
define|\
value|LibPcdSetExPtrS ((Guid), PcdTokenEx(Guid,TokenName), (SizeOfBuffer), (Buffer))
end_define

begin_comment
comment|/**   Sets an boolean PCD token value based on a GUID and a token name.    Sets the boolean value for the token specified by Guid and TokenName.   If TokenName is not a valid token in the token space specified by Guid,   then the module will not build.    If Guid is NULL, then ASSERT().    @param Guid       Pointer to a 128-bit unique value that designates                     which namespace to retrieve a value from.   @param TokenName  The name of the PCD token to set the current value for.   @param Value      The boolean value to set.    @return The status of the set operation.  **/
end_comment

begin_define
define|#
directive|define
name|PcdSetExBoolS
parameter_list|(
name|Guid
parameter_list|,
name|TokenName
parameter_list|,
name|Value
parameter_list|)
define|\
value|LibPcdSetExBoolS ((Guid), PcdTokenEx(Guid,TokenName), (Value))
end_define

begin_comment
comment|/**   This function provides a means by which SKU support can be established in the PCD infrastructure.    Sets the current SKU in the PCD database to the value specified by SkuId.  SkuId is returned.    @param  SkuId   The SKU value that will be used when the PCD service retrieves and sets values                   associated with a PCD token.    @return  Return the SKU ID that was set.  **/
end_comment

begin_function_decl
name|UINTN
name|EFIAPI
name|LibPcdSetSku
parameter_list|(
name|IN
name|UINTN
name|SkuId
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   This function provides a means by which to retrieve a value for a given PCD token.      Returns the 8-bit value for the token specified by TokenNumber.     @param[in]  TokenNumber The PCD token number to retrieve a current value for.    @return Returns the 8-bit value for the token specified by TokenNumber.   **/
end_comment

begin_function_decl
name|UINT8
name|EFIAPI
name|LibPcdGet8
parameter_list|(
name|IN
name|UINTN
name|TokenNumber
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   This function provides a means by which to retrieve a value for a given PCD token.      Returns the 16-bit value for the token specified by TokenNumber.     @param[in]  TokenNumber The PCD token number to retrieve a current value for.    @return Returns the 16-bit value for the token specified by TokenNumber.   **/
end_comment

begin_function_decl
name|UINT16
name|EFIAPI
name|LibPcdGet16
parameter_list|(
name|IN
name|UINTN
name|TokenNumber
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   This function provides a means by which to retrieve a value for a given PCD token.      Returns the 32-bit value for the token specified by TokenNumber.     @param[in]  TokenNumber The PCD token number to retrieve a current value for.    @return Returns the 32-bit value for the token specified by TokenNumber.  **/
end_comment

begin_function_decl
name|UINT32
name|EFIAPI
name|LibPcdGet32
parameter_list|(
name|IN
name|UINTN
name|TokenNumber
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   This function provides a means by which to retrieve a value for a given PCD token.      Returns the 64-bit value for the token specified by TokenNumber.    @param[in]  TokenNumber The PCD token number to retrieve a current value for.    @return Returns the 64-bit value for the token specified by TokenNumber.  **/
end_comment

begin_function_decl
name|UINT64
name|EFIAPI
name|LibPcdGet64
parameter_list|(
name|IN
name|UINTN
name|TokenNumber
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   This function provides a means by which to retrieve a value for a given PCD token.      Returns the pointer to the buffer of the token specified by TokenNumber.    @param[in]  TokenNumber The PCD token number to retrieve a current value for.    @return Returns the pointer to the token specified by TokenNumber.  **/
end_comment

begin_function_decl
name|VOID
modifier|*
name|EFIAPI
name|LibPcdGetPtr
parameter_list|(
name|IN
name|UINTN
name|TokenNumber
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   This function provides a means by which to retrieve a value for a given PCD token.      Returns the Boolean value of the token specified by TokenNumber.     @param[in]  TokenNumber The PCD token number to retrieve a current value for.    @return Returns the Boolean value of the token specified by TokenNumber.   **/
end_comment

begin_function_decl
name|BOOLEAN
name|EFIAPI
name|LibPcdGetBool
parameter_list|(
name|IN
name|UINTN
name|TokenNumber
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   This function provides a means by which to retrieve the size of a given PCD token.    @param[in]  TokenNumber The PCD token number to retrieve a current value for.    @return Returns the size of the token specified by TokenNumber.   **/
end_comment

begin_function_decl
name|UINTN
name|EFIAPI
name|LibPcdGetSize
parameter_list|(
name|IN
name|UINTN
name|TokenNumber
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   This function provides a means by which to retrieve a value for a given PCD token.      Returns the 8-bit value for the token specified by TokenNumber and Guid.      If Guid is NULL, then ASSERT().     @param[in]  Guid         Pointer to a 128-bit unique value that designates                             which namespace to retrieve a value from.   @param[in]  TokenNumber  The PCD token number to retrieve a current value for.    @return Return the UINT8.  **/
end_comment

begin_function_decl
name|UINT8
name|EFIAPI
name|LibPcdGetEx8
parameter_list|(
name|IN
name|CONST
name|GUID
modifier|*
name|Guid
parameter_list|,
name|IN
name|UINTN
name|TokenNumber
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   This function provides a means by which to retrieve a value for a given PCD token.    Returns the 16-bit value for the token specified by TokenNumber and Guid.      If Guid is NULL, then ASSERT().     @param[in]  Guid         Pointer to a 128-bit unique value that designates                             which namespace to retrieve a value from.   @param[in]  TokenNumber  The PCD token number to retrieve a current value for.    @return Return the UINT16.  **/
end_comment

begin_function_decl
name|UINT16
name|EFIAPI
name|LibPcdGetEx16
parameter_list|(
name|IN
name|CONST
name|GUID
modifier|*
name|Guid
parameter_list|,
name|IN
name|UINTN
name|TokenNumber
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   Returns the 32-bit value for the token specified by TokenNumber and Guid.   If Guid is NULL, then ASSERT().     @param[in]  Guid         Pointer to a 128-bit unique value that designates                             which namespace to retrieve a value from.   @param[in]  TokenNumber  The PCD token number to retrieve a current value for.    @return Return the UINT32.  **/
end_comment

begin_function_decl
name|UINT32
name|EFIAPI
name|LibPcdGetEx32
parameter_list|(
name|IN
name|CONST
name|GUID
modifier|*
name|Guid
parameter_list|,
name|IN
name|UINTN
name|TokenNumber
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   This function provides a means by which to retrieve a value for a given PCD token.      Returns the 64-bit value for the token specified by TokenNumber and Guid.      If Guid is NULL, then ASSERT().     @param[in]  Guid          Pointer to a 128-bit unique value that designates                              which namespace to retrieve a value from.   @param[in]  TokenNumber   The PCD token number to retrieve a current value for.    @return Return the UINT64.  **/
end_comment

begin_function_decl
name|UINT64
name|EFIAPI
name|LibPcdGetEx64
parameter_list|(
name|IN
name|CONST
name|GUID
modifier|*
name|Guid
parameter_list|,
name|IN
name|UINTN
name|TokenNumber
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   This function provides a means by which to retrieve a value for a given PCD token.      Returns the pointer to the buffer of token specified by TokenNumber and Guid.      If Guid is NULL, then ASSERT().     @param[in]  Guid          Pointer to a 128-bit unique value that designates                              which namespace to retrieve a value from.   @param[in]  TokenNumber   The PCD token number to retrieve a current value for.    @return Return the VOID* pointer.  **/
end_comment

begin_function_decl
name|VOID
modifier|*
name|EFIAPI
name|LibPcdGetExPtr
parameter_list|(
name|IN
name|CONST
name|GUID
modifier|*
name|Guid
parameter_list|,
name|IN
name|UINTN
name|TokenNumber
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   This function provides a means by which to retrieve a value for a given PCD token.      Returns the Boolean value of the token specified by TokenNumber and Guid.       If Guid is NULL, then ASSERT().     @param[in]  Guid          Pointer to a 128-bit unique value that designates                              which namespace to retrieve a value from.   @param[in]  TokenNumber   The PCD token number to retrieve a current value for.    @return Return the BOOLEAN.  **/
end_comment

begin_function_decl
name|BOOLEAN
name|EFIAPI
name|LibPcdGetExBool
parameter_list|(
name|IN
name|CONST
name|GUID
modifier|*
name|Guid
parameter_list|,
name|IN
name|UINTN
name|TokenNumber
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   This function provides a means by which to retrieve the size of a given PCD token.      Returns the size of the token specified by TokenNumber and Guid.       If Guid is NULL, then ASSERT().     @param[in]  Guid          Pointer to a 128-bit unique value that designates                              which namespace to retrieve a value from.   @param[in]  TokenNumber   The PCD token number to retrieve a current value for.    @return Return the size.  **/
end_comment

begin_function_decl
name|UINTN
name|EFIAPI
name|LibPcdGetExSize
parameter_list|(
name|IN
name|CONST
name|GUID
modifier|*
name|Guid
parameter_list|,
name|IN
name|UINTN
name|TokenNumber
parameter_list|)
function_decl|;
end_function_decl

begin_ifndef
ifndef|#
directive|ifndef
name|DISABLE_NEW_DEPRECATED_INTERFACES
end_ifndef

begin_comment
comment|/**   This function provides a means by which to set a value for a given PCD token.      Sets the 8-bit value for the token specified by TokenNumber    to the value specified by Value.  Value is returned.    @param[in]  TokenNumber   The PCD token number to set a current value for.   @param[in]  Value         The 8-bit value to set.    @return Return the Value that was set.  **/
end_comment

begin_function_decl
name|UINT8
name|EFIAPI
name|LibPcdSet8
parameter_list|(
name|IN
name|UINTN
name|TokenNumber
parameter_list|,
name|IN
name|UINT8
name|Value
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   This function provides a means by which to set a value for a given PCD token.      Sets the 16-bit value for the token specified by TokenNumber    to the value specified by Value.  Value is returned.    @param[in]  TokenNumber   The PCD token number to set a current value for.   @param[in]  Value         The 16-bit value to set.    @return Return the Value that was set.  **/
end_comment

begin_function_decl
name|UINT16
name|EFIAPI
name|LibPcdSet16
parameter_list|(
name|IN
name|UINTN
name|TokenNumber
parameter_list|,
name|IN
name|UINT16
name|Value
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   This function provides a means by which to set a value for a given PCD token.      Sets the 32-bit value for the token specified by TokenNumber    to the value specified by Value.  Value is returned.    @param[in]  TokenNumber   The PCD token number to set a current value for.   @param[in]  Value         The 32-bit value to set.    @return Return the Value that was set.  **/
end_comment

begin_function_decl
name|UINT32
name|EFIAPI
name|LibPcdSet32
parameter_list|(
name|IN
name|UINTN
name|TokenNumber
parameter_list|,
name|IN
name|UINT32
name|Value
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   This function provides a means by which to set a value for a given PCD token.      Sets the 64-bit value for the token specified by TokenNumber    to the value specified by Value.  Value is returned.    @param[in]  TokenNumber   The PCD token number to set a current value for.   @param[in]  Value         The 64-bit value to set.    @return Return the Value that was set.  **/
end_comment

begin_function_decl
name|UINT64
name|EFIAPI
name|LibPcdSet64
parameter_list|(
name|IN
name|UINTN
name|TokenNumber
parameter_list|,
name|IN
name|UINT64
name|Value
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   This function provides a means by which to set a value for a given PCD token.      Sets a buffer for the token specified by TokenNumber to the value    specified by Buffer and SizeOfBuffer.  Buffer is returned.     If SizeOfBuffer is greater than the maximum size support by TokenNumber,    then set SizeOfBuffer to the maximum size supported by TokenNumber and    return NULL to indicate that the set operation was not actually performed.    If SizeOfBuffer is set to MAX_ADDRESS, then SizeOfBuffer must be set to the    maximum size supported by TokenName and NULL must be returned.      If SizeOfBuffer is NULL, then ASSERT().   If SizeOfBuffer> 0 and Buffer is NULL, then ASSERT().      @param[in]      TokenNumber   The PCD token number to set a current value for.   @param[in, out] SizeOfBuffer  The size, in bytes, of Buffer.   @param[in]      Buffer        A pointer to the buffer to set.    @return Return the pointer for the Buffer that was set.  **/
end_comment

begin_function_decl
name|VOID
modifier|*
name|EFIAPI
name|LibPcdSetPtr
parameter_list|(
name|IN
name|UINTN
name|TokenNumber
parameter_list|,
name|IN
name|OUT
name|UINTN
modifier|*
name|SizeOfBuffer
parameter_list|,
name|IN
name|CONST
name|VOID
modifier|*
name|Buffer
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   This function provides a means by which to set a value for a given PCD token.      Sets the Boolean value for the token specified by TokenNumber    to the value specified by Value.  Value is returned.    @param[in]  TokenNumber   The PCD token number to set a current value for.   @param[in]  Value         The boolean value to set.    @return Return the Value that was set.  **/
end_comment

begin_function_decl
name|BOOLEAN
name|EFIAPI
name|LibPcdSetBool
parameter_list|(
name|IN
name|UINTN
name|TokenNumber
parameter_list|,
name|IN
name|BOOLEAN
name|Value
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   This function provides a means by which to set a value for a given PCD token.      Sets the 8-bit value for the token specified by TokenNumber and    Guid to the value specified by Value. Value is returned.    If Guid is NULL, then ASSERT().    @param[in]  Guid          Pointer to a 128-bit unique value that                              designates which namespace to set a value from.   @param[in]  TokenNumber   The PCD token number to set a current value for.   @param[in]  Value         The 8-bit value to set.    @return Return the Value that was set.  **/
end_comment

begin_function_decl
name|UINT8
name|EFIAPI
name|LibPcdSetEx8
parameter_list|(
name|IN
name|CONST
name|GUID
modifier|*
name|Guid
parameter_list|,
name|IN
name|UINTN
name|TokenNumber
parameter_list|,
name|IN
name|UINT8
name|Value
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   This function provides a means by which to set a value for a given PCD token.      Sets the 16-bit value for the token specified by TokenNumber and    Guid to the value specified by Value. Value is returned.    If Guid is NULL, then ASSERT().    @param[in]  Guid          Pointer to a 128-bit unique value that                              designates which namespace to set a value from.   @param[in]  TokenNumber   The PCD token number to set a current value for.   @param[in]  Value         The 16-bit value to set.    @return Return the Value that was set.  **/
end_comment

begin_function_decl
name|UINT16
name|EFIAPI
name|LibPcdSetEx16
parameter_list|(
name|IN
name|CONST
name|GUID
modifier|*
name|Guid
parameter_list|,
name|IN
name|UINTN
name|TokenNumber
parameter_list|,
name|IN
name|UINT16
name|Value
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   This function provides a means by which to set a value for a given PCD token.      Sets the 32-bit value for the token specified by TokenNumber and    Guid to the value specified by Value. Value is returned.    If Guid is NULL, then ASSERT().    @param[in]  Guid          Pointer to a 128-bit unique value that                              designates which namespace to set a value from.   @param[in]  TokenNumber   The PCD token number to set a current value for.   @param[in]  Value         The 32-bit value to set.    @return Return the Value that was set.  **/
end_comment

begin_function_decl
name|UINT32
name|EFIAPI
name|LibPcdSetEx32
parameter_list|(
name|IN
name|CONST
name|GUID
modifier|*
name|Guid
parameter_list|,
name|IN
name|UINTN
name|TokenNumber
parameter_list|,
name|IN
name|UINT32
name|Value
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   This function provides a means by which to set a value for a given PCD token.      Sets the 64-bit value for the token specified by TokenNumber and    Guid to the value specified by Value. Value is returned.    If Guid is NULL, then ASSERT().    @param[in]  Guid          Pointer to a 128-bit unique value that                              designates which namespace to set a value from.   @param[in]  TokenNumber   The PCD token number to set a current value for.   @param[in]  Value         The 64-bit value to set.    @return Return the Value that was set.  **/
end_comment

begin_function_decl
name|UINT64
name|EFIAPI
name|LibPcdSetEx64
parameter_list|(
name|IN
name|CONST
name|GUID
modifier|*
name|Guid
parameter_list|,
name|IN
name|UINTN
name|TokenNumber
parameter_list|,
name|IN
name|UINT64
name|Value
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   This function provides a means by which to set a value for a given PCD token.      Sets a buffer for the token specified by TokenNumber to the value specified by    Buffer and SizeOfBuffer.  Buffer is returned.  If SizeOfBuffer is greater than    the maximum size support by TokenNumber, then set SizeOfBuffer to the maximum size    supported by TokenNumber and return NULL to indicate that the set operation    was not actually performed.      If Guid is NULL, then ASSERT().   If SizeOfBuffer is NULL, then ASSERT().   If SizeOfBuffer> 0 and Buffer is NULL, then ASSERT().      @param[in]  Guid              Pointer to a 128-bit unique value that                                  designates which namespace to set a value from.   @param[in]  TokenNumber       The PCD token number to set a current value for.   @param[in, out] SizeOfBuffer  The size, in bytes, of Buffer.   @param[in]  Buffer            A pointer to the buffer to set.    @return Return the pointer to the Buffer that was set.  **/
end_comment

begin_function_decl
name|VOID
modifier|*
name|EFIAPI
name|LibPcdSetExPtr
parameter_list|(
name|IN
name|CONST
name|GUID
modifier|*
name|Guid
parameter_list|,
name|IN
name|UINTN
name|TokenNumber
parameter_list|,
name|IN
name|OUT
name|UINTN
modifier|*
name|SizeOfBuffer
parameter_list|,
name|IN
name|VOID
modifier|*
name|Buffer
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   This function provides a means by which to set a value for a given PCD token.      Sets the Boolean value for the token specified by TokenNumber and    Guid to the value specified by Value. Value is returned.    If Guid is NULL, then ASSERT().    @param[in]  Guid          Pointer to a 128-bit unique value that                              designates which namespace to set a value from.   @param[in]  TokenNumber   The PCD token number to set a current value for.   @param[in]  Value         The Boolean value to set.    @return Return the Value that was set.  **/
end_comment

begin_function_decl
name|BOOLEAN
name|EFIAPI
name|LibPcdSetExBool
parameter_list|(
name|IN
name|CONST
name|GUID
modifier|*
name|Guid
parameter_list|,
name|IN
name|UINTN
name|TokenNumber
parameter_list|,
name|IN
name|BOOLEAN
name|Value
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/**   This function provides a means by which to set a value for a given PCD token.    Sets the 8-bit value for the token specified by TokenNumber   to the value specified by Value.    @param[in] TokenNumber    The PCD token number to set a current value for.   @param[in] Value          The 8-bit value to set.    @return The status of the set operation.  **/
end_comment

begin_function_decl
name|RETURN_STATUS
name|EFIAPI
name|LibPcdSet8S
parameter_list|(
name|IN
name|UINTN
name|TokenNumber
parameter_list|,
name|IN
name|UINT8
name|Value
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   This function provides a means by which to set a value for a given PCD token.    Sets the 16-bit value for the token specified by TokenNumber   to the value specified by Value.    @param[in] TokenNumber    The PCD token number to set a current value for.   @param[in] Value          The 16-bit value to set.    @return The status of the set operation.  **/
end_comment

begin_function_decl
name|RETURN_STATUS
name|EFIAPI
name|LibPcdSet16S
parameter_list|(
name|IN
name|UINTN
name|TokenNumber
parameter_list|,
name|IN
name|UINT16
name|Value
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   This function provides a means by which to set a value for a given PCD token.    Sets the 32-bit value for the token specified by TokenNumber   to the value specified by Value.    @param[in] TokenNumber    The PCD token number to set a current value for.   @param[in] Value          The 32-bit value to set.    @return The status of the set operation.  **/
end_comment

begin_function_decl
name|RETURN_STATUS
name|EFIAPI
name|LibPcdSet32S
parameter_list|(
name|IN
name|UINTN
name|TokenNumber
parameter_list|,
name|IN
name|UINT32
name|Value
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   This function provides a means by which to set a value for a given PCD token.    Sets the 64-bit value for the token specified by TokenNumber   to the value specified by Value.    @param[in] TokenNumber    The PCD token number to set a current value for.   @param[in] Value          The 64-bit value to set.    @return The status of the set operation.  **/
end_comment

begin_function_decl
name|RETURN_STATUS
name|EFIAPI
name|LibPcdSet64S
parameter_list|(
name|IN
name|UINTN
name|TokenNumber
parameter_list|,
name|IN
name|UINT64
name|Value
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   This function provides a means by which to set a value for a given PCD token.    Sets a buffer for the token specified by TokenNumber to the value specified   by Buffer and SizeOfBuffer. If SizeOfBuffer is greater than the maximum size   support by TokenNumber, then set SizeOfBuffer to the maximum size supported by   TokenNumber and return RETURN_INVALID_PARAMETER to indicate that the set operation   was not actually performed.    If SizeOfBuffer is set to MAX_ADDRESS, then SizeOfBuffer must be set to the   maximum size supported by TokenName and RETURN_INVALID_PARAMETER must be returned.    If SizeOfBuffer is NULL, then ASSERT().   If SizeOfBuffer> 0 and Buffer is NULL, then ASSERT().    @param[in]      TokenNumber   The PCD token number to set a current value for.   @param[in, out] SizeOfBuffer  The size, in bytes, of Buffer.   @param[in]      Buffer        A pointer to the buffer to set.    @return The status of the set operation.  **/
end_comment

begin_function_decl
name|RETURN_STATUS
name|EFIAPI
name|LibPcdSetPtrS
parameter_list|(
name|IN
name|UINTN
name|TokenNumber
parameter_list|,
name|IN
name|OUT
name|UINTN
modifier|*
name|SizeOfBuffer
parameter_list|,
name|IN
name|CONST
name|VOID
modifier|*
name|Buffer
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   This function provides a means by which to set a value for a given PCD token.    Sets the boolean value for the token specified by TokenNumber   to the value specified by Value.    @param[in] TokenNumber    The PCD token number to set a current value for.   @param[in] Value          The boolean value to set.    @return The status of the set operation.  **/
end_comment

begin_function_decl
name|RETURN_STATUS
name|EFIAPI
name|LibPcdSetBoolS
parameter_list|(
name|IN
name|UINTN
name|TokenNumber
parameter_list|,
name|IN
name|BOOLEAN
name|Value
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   This function provides a means by which to set a value for a given PCD token.    Sets the 8-bit value for the token specified by TokenNumber   to the value specified by Value.    If Guid is NULL, then ASSERT().    @param[in] Guid           The pointer to a 128-bit unique value that                             designates which namespace to set a value from.   @param[in] TokenNumber    The PCD token number to set a current value for.   @param[in] Value          The 8-bit value to set.    @return The status of the set operation.  **/
end_comment

begin_function_decl
name|RETURN_STATUS
name|EFIAPI
name|LibPcdSetEx8S
parameter_list|(
name|IN
name|CONST
name|GUID
modifier|*
name|Guid
parameter_list|,
name|IN
name|UINTN
name|TokenNumber
parameter_list|,
name|IN
name|UINT8
name|Value
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   This function provides a means by which to set a value for a given PCD token.    Sets the 16-bit value for the token specified by TokenNumber   to the value specified by Value.    If Guid is NULL, then ASSERT().    @param[in] Guid           The pointer to a 128-bit unique value that                             designates which namespace to set a value from.   @param[in] TokenNumber    The PCD token number to set a current value for.   @param[in] Value          The 16-bit value to set.    @return The status of the set operation.  **/
end_comment

begin_function_decl
name|RETURN_STATUS
name|EFIAPI
name|LibPcdSetEx16S
parameter_list|(
name|IN
name|CONST
name|GUID
modifier|*
name|Guid
parameter_list|,
name|IN
name|UINTN
name|TokenNumber
parameter_list|,
name|IN
name|UINT16
name|Value
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   This function provides a means by which to set a value for a given PCD token.    Sets the 32-bit value for the token specified by TokenNumber   to the value specified by Value.    If Guid is NULL, then ASSERT().    @param[in] Guid           The pointer to a 128-bit unique value that                             designates which namespace to set a value from.   @param[in] TokenNumber    The PCD token number to set a current value for.   @param[in] Value          The 32-bit value to set.    @return The status of the set operation.  **/
end_comment

begin_function_decl
name|RETURN_STATUS
name|EFIAPI
name|LibPcdSetEx32S
parameter_list|(
name|IN
name|CONST
name|GUID
modifier|*
name|Guid
parameter_list|,
name|IN
name|UINTN
name|TokenNumber
parameter_list|,
name|IN
name|UINT32
name|Value
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   This function provides a means by which to set a value for a given PCD token.    Sets the 64-bit value for the token specified by TokenNumber   to the value specified by Value.    If Guid is NULL, then ASSERT().    @param[in] Guid           The pointer to a 128-bit unique value that                             designates which namespace to set a value from.   @param[in] TokenNumber    The PCD token number to set a current value for.   @param[in] Value          The 64-bit value to set.    @return The status of the set operation.  **/
end_comment

begin_function_decl
name|RETURN_STATUS
name|EFIAPI
name|LibPcdSetEx64S
parameter_list|(
name|IN
name|CONST
name|GUID
modifier|*
name|Guid
parameter_list|,
name|IN
name|UINTN
name|TokenNumber
parameter_list|,
name|IN
name|UINT64
name|Value
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   This function provides a means by which to set a value for a given PCD token.    Sets a buffer for the token specified by TokenNumber to the value specified by   Buffer and SizeOfBuffer. If SizeOfBuffer is greater than the maximum size   support by TokenNumber, then set SizeOfBuffer to the maximum size supported by   TokenNumber and return RETURN_INVALID_PARAMETER to indicate that the set operation   was not actually performed.    If Guid is NULL, then ASSERT().   If SizeOfBuffer is NULL, then ASSERT().   If SizeOfBuffer> 0 and Buffer is NULL, then ASSERT().    @param[in]      Guid          Pointer to a 128-bit unique value that                                 designates which namespace to set a value from.   @param[in]      TokenNumber   The PCD token number to set a current value for.   @param[in, out] SizeOfBuffer  The size, in bytes, of Buffer.   @param[in]      Buffer        A pointer to the buffer to set.    @return The status of the set operation.  **/
end_comment

begin_function_decl
name|RETURN_STATUS
name|EFIAPI
name|LibPcdSetExPtrS
parameter_list|(
name|IN
name|CONST
name|GUID
modifier|*
name|Guid
parameter_list|,
name|IN
name|UINTN
name|TokenNumber
parameter_list|,
name|IN
name|OUT
name|UINTN
modifier|*
name|SizeOfBuffer
parameter_list|,
name|IN
name|VOID
modifier|*
name|Buffer
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   This function provides a means by which to set a value for a given PCD token.    Sets the boolean value for the token specified by TokenNumber   to the value specified by Value.    If Guid is NULL, then ASSERT().    @param[in] Guid           The pointer to a 128-bit unique value that                             designates which namespace to set a value from.   @param[in] TokenNumber    The PCD token number to set a current value for.   @param[in] Value          The boolean value to set.    @return The status of the set operation.  **/
end_comment

begin_function_decl
name|RETURN_STATUS
name|EFIAPI
name|LibPcdSetExBoolS
parameter_list|(
name|IN
name|CONST
name|GUID
modifier|*
name|Guid
parameter_list|,
name|IN
name|UINTN
name|TokenNumber
parameter_list|,
name|IN
name|BOOLEAN
name|Value
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   This notification function serves two purposes.    Firstly, it notifies the module that did the registration that the value of this   PCD token has been set.   Secondly, it provides a mechanism for the module that did the registration to intercept   the set operation and override the value been set if necessary. After the invocation of   the callback function, TokenData will be used by PCD service PEIM or driver to modify th   internal data in PCD database.     @param[in]      CallBackGuid    The PCD token GUID being set.   @param[in]      CallBackToken   The PCD token number being set.   @param[in, out] TokenData       A pointer to the token data being set.   @param[in]      TokenDataSize   The size, in bytes, of the data being set.  **/
end_comment

begin_typedef
typedef|typedef
name|VOID
function_decl|(
name|EFIAPI
modifier|*
name|PCD_CALLBACK
function_decl|)
parameter_list|(
name|IN
name|CONST
name|GUID
modifier|*
name|CallBackGuid
parameter_list|,
name|OPTIONAL
name|IN
name|UINTN
name|CallBackToken
parameter_list|,
name|IN
name|OUT
name|VOID
modifier|*
name|TokenData
parameter_list|,
name|IN
name|UINTN
name|TokenDataSize
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/**   Set up a notification function that is called when a specified token is set.      When the token specified by TokenNumber and Guid is set,    then notification function specified by NotificationFunction is called.     If Guid is NULL, then the default token space is used.   If NotificationFunction is NULL, then ASSERT().    @param[in]  Guid                  Pointer to a 128-bit unique value that designates which                                      namespace to set a value from.  If NULL, then the default                                      token space is used.   @param[in]  TokenNumber           The PCD token number to monitor.   @param[in]  NotificationFunction  The function to call when the token                                      specified by Guid and TokenNumber is set.  **/
end_comment

begin_function_decl
name|VOID
name|EFIAPI
name|LibPcdCallbackOnSet
parameter_list|(
name|IN
name|CONST
name|GUID
modifier|*
name|Guid
parameter_list|,
name|OPTIONAL
name|IN
name|UINTN
name|TokenNumber
parameter_list|,
name|IN
name|PCD_CALLBACK
name|NotificationFunction
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   Disable a notification function that was established with LibPcdCallbackonSet().      Disable a notification function that was previously established with LibPcdCallbackOnSet().   If NotificationFunction is NULL, then ASSERT().   If LibPcdCallbackOnSet() was not previously called with Guid, TokenNumber,    and NotificationFunction, then ASSERT().      @param[in]  Guid                 Specify the GUID token space.   @param[in]  TokenNumber          Specify the token number.   @param[in]  NotificationFunction The callback function to be unregistered.  **/
end_comment

begin_function_decl
name|VOID
name|EFIAPI
name|LibPcdCancelCallback
parameter_list|(
name|IN
name|CONST
name|GUID
modifier|*
name|Guid
parameter_list|,
name|OPTIONAL
name|IN
name|UINTN
name|TokenNumber
parameter_list|,
name|IN
name|PCD_CALLBACK
name|NotificationFunction
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   Retrieves the next token in a token space.      Retrieves the next PCD token number from the token space specified by Guid.     If Guid is NULL, then the default token space is used.  If TokenNumber is 0,    then the first token number is returned.  Otherwise, the token number that    follows TokenNumber in the token space is returned.  If TokenNumber is the last    token number in the token space, then 0 is returned.        If TokenNumber is not 0 and is not in the token space specified by Guid, then ASSERT().    @param[in]  Guid        Pointer to a 128-bit unique value that designates which namespace                            to set a value from.  If NULL, then the default token space is used.   @param[in]  TokenNumber The previous PCD token number.  If 0, then retrieves the first PCD                            token number.    @return The next valid token number.  **/
end_comment

begin_function_decl
name|UINTN
name|EFIAPI
name|LibPcdGetNextToken
parameter_list|(
name|IN
name|CONST
name|GUID
modifier|*
name|Guid
parameter_list|,
name|OPTIONAL
name|IN
name|UINTN
name|TokenNumber
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   Used to retrieve the list of available PCD token space GUIDs.      Returns the PCD token space GUID that follows TokenSpaceGuid in the list of token spaces   in the platform.   If TokenSpaceGuid is NULL, then a pointer to the first PCD token spaces returned.   If TokenSpaceGuid is the last PCD token space GUID in the list, then NULL is returned.      @param  TokenSpaceGuid  Pointer to the a PCD token space GUID    @return The next valid token namespace.  **/
end_comment

begin_function_decl
name|GUID
modifier|*
name|EFIAPI
name|LibPcdGetNextTokenSpace
parameter_list|(
name|IN
name|CONST
name|GUID
modifier|*
name|TokenSpaceGuid
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   Sets a value of a patchable PCD entry that is type pointer.      Sets the PCD entry specified by PatchVariable to the value specified by Buffer    and SizeOfBuffer.  Buffer is returned.  If SizeOfBuffer is greater than    MaximumDatumSize, then set SizeOfBuffer to MaximumDatumSize and return    NULL to indicate that the set operation was not actually performed.     If SizeOfBuffer is set to MAX_ADDRESS, then SizeOfBuffer must be set to    MaximumDatumSize and NULL must be returned.      If PatchVariable is NULL, then ASSERT().   If SizeOfBuffer is NULL, then ASSERT().   If SizeOfBuffer> 0 and Buffer is NULL, then ASSERT().    @param[out] PatchVariable     A pointer to the global variable in a module that is                                  the target of the set operation.   @param[in] MaximumDatumSize   The maximum size allowed for the PCD entry specified by PatchVariable.   @param[in, out] SizeOfBuffer  A pointer to the size, in bytes, of Buffer.   @param[in] Buffer             A pointer to the buffer to used to set the target variable.      @return Return the pointer to the Buffer that was set.  **/
end_comment

begin_function_decl
name|VOID
modifier|*
name|EFIAPI
name|LibPatchPcdSetPtr
parameter_list|(
name|OUT
name|VOID
modifier|*
name|PatchVariable
parameter_list|,
name|IN
name|UINTN
name|MaximumDatumSize
parameter_list|,
name|IN
name|OUT
name|UINTN
modifier|*
name|SizeOfBuffer
parameter_list|,
name|IN
name|CONST
name|VOID
modifier|*
name|Buffer
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   Sets a value of a patchable PCD entry that is type pointer.    Sets the PCD entry specified by PatchVariable to the value specified   by Buffer and SizeOfBuffer. If SizeOfBuffer is greater than MaximumDatumSize,   then set SizeOfBuffer to MaximumDatumSize and return RETURN_INVALID_PARAMETER   to indicate that the set operation was not actually performed.   If SizeOfBuffer is set to MAX_ADDRESS, then SizeOfBuffer must be set to   MaximumDatumSize and RETURN_INVALID_PARAMETER must be returned.    If PatchVariable is NULL, then ASSERT().   If SizeOfBuffer is NULL, then ASSERT().   If SizeOfBuffer> 0 and Buffer is NULL, then ASSERT().    @param[out] PatchVariable     A pointer to the global variable in a module that is                                 the target of the set operation.   @param[in] MaximumDatumSize   The maximum size allowed for the PCD entry specified by PatchVariable.   @param[in, out] SizeOfBuffer  A pointer to the size, in bytes, of Buffer.   @param[in] Buffer             A pointer to the buffer to used to set the target variable.      @return The status of the set operation.  **/
end_comment

begin_function_decl
name|RETURN_STATUS
name|EFIAPI
name|LibPatchPcdSetPtrS
parameter_list|(
name|OUT
name|VOID
modifier|*
name|PatchVariable
parameter_list|,
name|IN
name|UINTN
name|MaximumDatumSize
parameter_list|,
name|IN
name|OUT
name|UINTN
modifier|*
name|SizeOfBuffer
parameter_list|,
name|IN
name|CONST
name|VOID
modifier|*
name|Buffer
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   Sets a value and size of a patchable PCD entry that is type pointer.      Sets the PCD entry specified by PatchVariable to the value specified by Buffer    and SizeOfBuffer. Buffer is returned.  If SizeOfBuffer is greater than    MaximumDatumSize, then set SizeOfBuffer to MaximumDatumSize and return    NULL to indicate that the set operation was not actually performed.     If SizeOfBuffer is set to MAX_ADDRESS, then SizeOfBuffer must be set to    MaximumDatumSize and NULL must be returned.      If PatchVariable is NULL, then ASSERT().   If SizeOfPatchVariable is NULL, then ASSERT().   If SizeOfBuffer is NULL, then ASSERT().   If SizeOfBuffer> 0 and Buffer is NULL, then ASSERT().    @param[out] PatchVariable     A pointer to the global variable in a module that is                                  the target of the set operation.   @param[out] SizeOfPatchVariable A pointer to the size, in bytes, of PatchVariable.   @param[in] MaximumDatumSize   The maximum size allowed for the PCD entry specified by PatchVariable.   @param[in, out] SizeOfBuffer  A pointer to the size, in bytes, of Buffer.   @param[in] Buffer             A pointer to the buffer to used to set the target variable.      @return Return the pointer to the Buffer that was set.  **/
end_comment

begin_function_decl
name|VOID
modifier|*
name|EFIAPI
name|LibPatchPcdSetPtrAndSize
parameter_list|(
name|OUT
name|VOID
modifier|*
name|PatchVariable
parameter_list|,
name|OUT
name|UINTN
modifier|*
name|SizeOfPatchVariable
parameter_list|,
name|IN
name|UINTN
name|MaximumDatumSize
parameter_list|,
name|IN
name|OUT
name|UINTN
modifier|*
name|SizeOfBuffer
parameter_list|,
name|IN
name|CONST
name|VOID
modifier|*
name|Buffer
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   Sets a value and size of a patchable PCD entry that is type pointer.    Sets the PCD entry specified by PatchVariable to the value specified   by Buffer and SizeOfBuffer. If SizeOfBuffer is greater than MaximumDatumSize,   then set SizeOfBuffer to MaximumDatumSize and return RETURN_INVALID_PARAMETER   to indicate that the set operation was not actually performed.   If SizeOfBuffer is set to MAX_ADDRESS, then SizeOfBuffer must be set to   MaximumDatumSize and RETURN_INVALID_PARAMETER must be returned.    If PatchVariable is NULL, then ASSERT().   If SizeOfPatchVariable is NULL, then ASSERT().   If SizeOfBuffer is NULL, then ASSERT().   If SizeOfBuffer> 0 and Buffer is NULL, then ASSERT().    @param[out] PatchVariable     A pointer to the global variable in a module that is                                 the target of the set operation.   @param[out] SizeOfPatchVariable A pointer to the size, in bytes, of PatchVariable.   @param[in] MaximumDatumSize   The maximum size allowed for the PCD entry specified by PatchVariable.   @param[in, out] SizeOfBuffer  A pointer to the size, in bytes, of Buffer.   @param[in] Buffer             A pointer to the buffer to used to set the target variable.      @return The status of the set operation.  **/
end_comment

begin_function_decl
name|RETURN_STATUS
name|EFIAPI
name|LibPatchPcdSetPtrAndSizeS
parameter_list|(
name|OUT
name|VOID
modifier|*
name|PatchVariable
parameter_list|,
name|OUT
name|UINTN
modifier|*
name|SizeOfPatchVariable
parameter_list|,
name|IN
name|UINTN
name|MaximumDatumSize
parameter_list|,
name|IN
name|OUT
name|UINTN
modifier|*
name|SizeOfBuffer
parameter_list|,
name|IN
name|CONST
name|VOID
modifier|*
name|Buffer
parameter_list|)
function_decl|;
end_function_decl

begin_typedef
typedef|typedef
enum|enum
block|{
name|PCD_TYPE_8
block|,
name|PCD_TYPE_16
block|,
name|PCD_TYPE_32
block|,
name|PCD_TYPE_64
block|,
name|PCD_TYPE_BOOL
block|,
name|PCD_TYPE_PTR
block|}
name|PCD_TYPE
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
comment|///
comment|/// The returned information associated with the requested TokenNumber. If
comment|/// TokenNumber is 0, then PcdType is set to PCD_TYPE_8.
comment|///
name|PCD_TYPE
name|PcdType
decl_stmt|;
comment|///
comment|/// The size of the data in bytes associated with the TokenNumber specified. If
comment|/// TokenNumber is 0, then PcdSize is set 0.
comment|///
name|UINTN
name|PcdSize
decl_stmt|;
comment|///
comment|/// The null-terminated ASCII string associated with a given token. If the
comment|/// TokenNumber specified was 0, then this field corresponds to the null-terminated
comment|/// ASCII string associated with the token's namespace Guid. If NULL, there is no
comment|/// name associated with this request.
comment|///
name|CHAR8
modifier|*
name|PcdName
decl_stmt|;
block|}
name|PCD_INFO
typedef|;
end_typedef

begin_comment
comment|/**   Retrieve additional information associated with a PCD token.    This includes information such as the type of value the TokenNumber is associated with as well as possible   human readable name that is associated with the token.    If TokenNumber is not in the default token space specified, then ASSERT().    @param[in]    TokenNumber The PCD token number.   @param[out]   PcdInfo     The returned information associated with the requested TokenNumber.                             The caller is responsible for freeing the buffer that is allocated by callee for PcdInfo->PcdName. **/
end_comment

begin_function_decl
name|VOID
name|EFIAPI
name|LibPcdGetInfo
parameter_list|(
name|IN
name|UINTN
name|TokenNumber
parameter_list|,
name|OUT
name|PCD_INFO
modifier|*
name|PcdInfo
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   Retrieve additional information associated with a PCD token.    This includes information such as the type of value the TokenNumber is associated with as well as possible   human readable name that is associated with the token.    If TokenNumber is not in the token space specified by Guid, then ASSERT().    @param[in]    Guid        The 128-bit unique value that designates the namespace from which to extract the value.   @param[in]    TokenNumber The PCD token number.   @param[out]   PcdInfo     The returned information associated with the requested TokenNumber.                             The caller is responsible for freeing the buffer that is allocated by callee for PcdInfo->PcdName. **/
end_comment

begin_function_decl
name|VOID
name|EFIAPI
name|LibPcdGetInfoEx
parameter_list|(
name|IN
name|CONST
name|GUID
modifier|*
name|Guid
parameter_list|,
name|IN
name|UINTN
name|TokenNumber
parameter_list|,
name|OUT
name|PCD_INFO
modifier|*
name|PcdInfo
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   Retrieve the currently set SKU Id.    @return   The currently set SKU Id. If the platform has not set at a SKU Id, then the             default SKU Id value of 0 is returned. If the platform has set a SKU Id, then the currently set SKU             Id is returned. **/
end_comment

begin_function_decl
name|UINTN
name|EFIAPI
name|LibPcdGetSku
parameter_list|(
name|VOID
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

end_unit

