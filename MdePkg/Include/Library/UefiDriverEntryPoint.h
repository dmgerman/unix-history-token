begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/** @file   Module entry point library for UEFI drivers, DXE Drivers, DXE Runtime Drivers,   and DXE SMM Drivers.  Copyright (c) 2006 - 2008, Intel Corporation. All rights reserved.<BR> This program and the accompanying materials are licensed and made available under the terms and conditions of the BSD License which accompanies this distribution.  The full text of the license may be found at http://opensource.org/licenses/bsd-license.php  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.  **/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__MODULE_ENTRY_POINT_H__
end_ifndef

begin_define
define|#
directive|define
name|__MODULE_ENTRY_POINT_H__
end_define

begin_comment
comment|///
end_comment

begin_comment
comment|///Declare the PI Specification Revision that this driver requires to execute correctly.
end_comment

begin_comment
comment|///
end_comment

begin_decl_stmt
specifier|extern
name|CONST
name|UINT32
name|_gDxeRevision
decl_stmt|;
end_decl_stmt

begin_comment
comment|///
end_comment

begin_comment
comment|/// Declare the EFI/UEFI Specification Revision to which this driver is implemented
end_comment

begin_comment
comment|///
end_comment

begin_decl_stmt
specifier|extern
name|CONST
name|UINT32
name|_gUefiDriverRevision
decl_stmt|;
end_decl_stmt

begin_comment
comment|///
end_comment

begin_comment
comment|/// Declare the number of unload handler in the image.
end_comment

begin_comment
comment|///
end_comment

begin_decl_stmt
specifier|extern
name|CONST
name|UINT8
name|_gDriverUnloadImageCount
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**   The entry point of PE/COFF Image for a DXE Driver, DXE Runtime Driver, DXE SMM Driver, or UEFI Driver.     This function is the entry point for a DXE Driver, DXE Runtime Driver, DXE SMM Driver,   or UEFI Driver.  This function must call ProcessLibraryConstructorList() and   ProcessModuleEntryPointList(). If the return status from ProcessModuleEntryPointList()   is an error status, then ProcessLibraryDestructorList() must be called. The return value   from ProcessModuleEntryPointList() is returned. If _gDriverUnloadImageCount is greater   than zero, then an unload handler must be registered for this image and the unload handler   must invoke ProcessModuleUnloadList().   If _gUefiDriverRevision is not zero and SystemTable->Hdr.Revision is less than _gUefiDriverRevison,   then return EFI_INCOMPATIBLE_VERSION.     @param  ImageHandle  The image handle of the DXE Driver, DXE Runtime Driver, DXE SMM Driver, or UEFI Driver.   @param  SystemTable  A pointer to the EFI System Table.    @retval  EFI_SUCCESS               The DXE Driver, DXE Runtime Driver, DXE SMM Driver,                                      or UEFI Driver exited normally.   @retval  EFI_INCOMPATIBLE_VERSION  _gUefiDriverRevision is greater than SystemTable->Hdr.Revision.   @retval  Other                     Return value from ProcessModuleEntryPointList().  **/
end_comment

begin_function_decl
name|EFI_STATUS
name|EFIAPI
name|_ModuleEntryPoint
parameter_list|(
name|IN
name|EFI_HANDLE
name|ImageHandle
parameter_list|,
name|IN
name|EFI_SYSTEM_TABLE
modifier|*
name|SystemTable
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   Required by the EBC compiler and identical in functionality to _ModuleEntryPoint().     This function is required to call _ModuleEntryPoint() passing in ImageHandle, and SystemTable.    @param  ImageHandle  The image handle of the DXE Driver, DXE Runtime Driver, DXE SMM Driver, or UEFI Driver.   @param  SystemTable  A pointer to the EFI System Table.    @retval  EFI_SUCCESS               The DXE Driver, DXE Runtime Driver, DXE SMM Driver,                                      or UEFI Driver exited normally.   @retval  EFI_INCOMPATIBLE_VERSION  _gUefiDriverRevision is greater than SystemTable->Hdr.Revision.   @retval  Other                     Return value from ProcessModuleEntryPointList(). **/
end_comment

begin_function_decl
name|EFI_STATUS
name|EFIAPI
name|EfiMain
parameter_list|(
name|IN
name|EFI_HANDLE
name|ImageHandle
parameter_list|,
name|IN
name|EFI_SYSTEM_TABLE
modifier|*
name|SystemTable
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   Invokes the library destructors for all dependent libraries and terminates the   DXE Driver, DXE Runtime Driver, DXE SMM Driver, or UEFI Driver.     This function calls ProcessLibraryDestructorList() and the EFI Boot Service Exit()   with a status specified by Status.    @param  Status Status returned by the driver that is exiting.  **/
end_comment

begin_function_decl
name|VOID
name|EFIAPI
name|ExitDriver
parameter_list|(
name|IN
name|EFI_STATUS
name|Status
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   Autogenerated function that calls the library constructors for all of the module's   dependent libraries.    This function must be called by _ModuleEntryPoint().   This function calls the set of library constructors for the set of library instances   that a module depends on.  This includes library instances that a module depends on   directly and library instances that a module depends on indirectly through other libraries.     This function is autogenerated by build tools and those build tools are responsible   for collecting the set of library instances, determine which ones have constructors,   and calling the library constructors in the proper order based upon each of the library   instances own dependencies.    @param  ImageHandle  The image handle of the DXE Driver, DXE Runtime Driver, DXE SMM Driver, or UEFI Driver.   @param  SystemTable  A pointer to the EFI System Table.  **/
end_comment

begin_function_decl
name|VOID
name|EFIAPI
name|ProcessLibraryConstructorList
parameter_list|(
name|IN
name|EFI_HANDLE
name|ImageHandle
parameter_list|,
name|IN
name|EFI_SYSTEM_TABLE
modifier|*
name|SystemTable
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   Autogenerated function that calls the library descructors for all of the module's   dependent libraries.    This function may be called by _ModuleEntryPoint() or ExitDriver().   This function calls the set of library destructors for the set of library instances   that a module depends on. This includes library instances that a module depends on   directly and library instances that a module depends on indirectly through other libraries.     This function is autogenerated by build tools and those build tools are responsible for   collecting the set of library instances, determine which ones have destructors, and calling   the library destructors in the proper order based upon each of the library instances own dependencies.    @param  ImageHandle  The image handle of the DXE Driver, DXE Runtime Driver, DXE SMM Driver, or UEFI Driver.   @param  SystemTable  A pointer to the EFI System Table.  **/
end_comment

begin_function_decl
name|VOID
name|EFIAPI
name|ProcessLibraryDestructorList
parameter_list|(
name|IN
name|EFI_HANDLE
name|ImageHandle
parameter_list|,
name|IN
name|EFI_SYSTEM_TABLE
modifier|*
name|SystemTable
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   Autogenerated function that calls a set of module entry points.    This function must be called by _ModuleEntryPoint().   This function calls the set of module entry points.     This function is autogenerated by build tools and those build tools are responsible   for collecting the module entry points and calling them in a specified order.    @param  ImageHandle  The image handle of the DXE Driver, DXE Runtime Driver, DXE SMM Driver, or UEFI Driver.   @param  SystemTable  A pointer to the EFI System Table.    @retval  EFI_SUCCESS   The DXE Driver, DXE Runtime Driver, DXE SMM Driver, or UEFI Driver executed normally.   @retval  !EFI_SUCCESS  The DXE Driver, DXE Runtime Driver, DXE SMM Driver, or UEFI Driver failed to execute normally. **/
end_comment

begin_function_decl
name|EFI_STATUS
name|EFIAPI
name|ProcessModuleEntryPointList
parameter_list|(
name|IN
name|EFI_HANDLE
name|ImageHandle
parameter_list|,
name|IN
name|EFI_SYSTEM_TABLE
modifier|*
name|SystemTable
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**   Autogenerated function that calls a set of module unload handlers.    This function must be called from the unload handler registered by _ModuleEntryPoint().   This function calls the set of module unload handlers.     This function is autogenerated by build tools and those build tools are responsible   for collecting the module unload handlers and calling them in a specified order.    @param  ImageHandle  The image handle of the DXE Driver, DXE Runtime Driver, DXE SMM Driver, or UEFI Driver.    @retval  EFI_SUCCESS  The unload handlers executed normally.   @retval  !EFI_SUCCESS The unload handlers failed to execute normally.  **/
end_comment

begin_function_decl
name|EFI_STATUS
name|EFIAPI
name|ProcessModuleUnloadList
parameter_list|(
name|IN
name|EFI_HANDLE
name|ImageHandle
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

end_unit

