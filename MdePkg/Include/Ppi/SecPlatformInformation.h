begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/** @file   This file declares Sec Platform Information PPI.    This service is the primary handoff state into the PEI Foundation.   The Security (SEC) component creates the early, transitory memory   environment and also encapsulates knowledge of at least the   location of the Boot Firmware Volume (BFV).  Copyright (c) 2006 - 2015, Intel Corporation. All rights reserved.<BR> This program and the accompanying materials are licensed and made available under the terms and conditions of the BSD License that accompanies this distribution. The full text of the license may be found at http://opensource.org/licenses/bsd-license.php.  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.    @par Revision Reference:   This PPI is introduced in PI Version 1.0.  **/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__SEC_PLATFORM_INFORMATION_PPI_H__
end_ifndef

begin_define
define|#
directive|define
name|__SEC_PLATFORM_INFORMATION_PPI_H__
end_define

begin_include
include|#
directive|include
file|<Pi/PiPeiCis.h>
end_include

begin_define
define|#
directive|define
name|EFI_SEC_PLATFORM_INFORMATION_GUID
define|\
value|{ \     0x6f8c2b35, 0xfef4, 0x448d, {0x82, 0x56, 0xe1, 0x1b, 0x19, 0xd6, 0x10, 0x77 } \   }
end_define

begin_typedef
typedef|typedef
name|struct
name|_EFI_SEC_PLATFORM_INFORMATION_PPI
name|EFI_SEC_PLATFORM_INFORMATION_PPI
typedef|;
end_typedef

begin_comment
comment|///
end_comment

begin_comment
comment|/// EFI_HEALTH_FLAGS
end_comment

begin_comment
comment|/// Contains information generated by microcode, hardware, and/or the Itanium
end_comment

begin_comment
comment|/// processor PAL code about the state of the processor upon reset.
end_comment

begin_comment
comment|///
end_comment

begin_typedef
typedef|typedef
union|union
block|{
struct|struct
block|{
comment|///
comment|/// A 2-bit field indicating self-test state after reset.
comment|///
name|UINT32
name|Status
range|:
literal|2
decl_stmt|;
comment|///
comment|/// A 1-bit field indicating whether testing has occurred.
comment|/// If this field is zero, the processor has not been tested,
comment|/// and no further fields in the self-test State parameter are valid.
comment|///
name|UINT32
name|Tested
range|:
literal|1
decl_stmt|;
comment|///
comment|/// Reserved 13 bits.
comment|///
name|UINT32
name|Reserved1
range|:
literal|13
decl_stmt|;
comment|///
comment|/// A 1-bit field. If set to 1, this indicates that virtual
comment|/// memory features are not available.
comment|///
name|UINT32
name|VirtualMemoryUnavailable
range|:
literal|1
decl_stmt|;
comment|///
comment|/// A 1-bit field. If set to 1, this indicates that IA-32 execution
comment|/// is not available.
comment|///
name|UINT32
name|Ia32ExecutionUnavailable
range|:
literal|1
decl_stmt|;
comment|///
comment|/// A 1-bit field. If set to 1, this indicates that the floating
comment|/// point unit is not available.
comment|///
name|UINT32
name|FloatingPointUnavailable
range|:
literal|1
decl_stmt|;
comment|///
comment|/// A 1-bit field. If set to 1, this indicates miscellaneous
comment|/// functional failure other than vm, ia, or fp.
comment|/// The test status field provides additional information on
comment|/// test failures when the State field returns a value of
comment|/// performance restricted or functionally restricted.
comment|/// The value returned is implementation dependent.
comment|///
name|UINT32
name|MiscFeaturesUnavailable
range|:
literal|1
decl_stmt|;
comment|///
comment|/// Reserved 12 bits.
comment|///
name|UINT32
name|Reserved2
range|:
literal|12
decl_stmt|;
block|}
name|Bits
struct|;
name|UINT32
name|Uint32
decl_stmt|;
block|}
name|EFI_HEALTH_FLAGS
typedef|;
end_typedef

begin_define
define|#
directive|define
name|NORMAL_BOOT_CALL
value|0x0
end_define

begin_define
define|#
directive|define
name|RECOVERY_CHECK_CALL
value|0x3
end_define

begin_typedef
typedef|typedef
name|EFI_HEALTH_FLAGS
name|X64_HANDOFF_STATUS
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|EFI_HEALTH_FLAGS
name|IA32_HANDOFF_STATUS
typedef|;
end_typedef

begin_comment
comment|///
end_comment

begin_comment
comment|/// The hand-off status structure for Itanium architecture.
end_comment

begin_comment
comment|///
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
comment|///
comment|/// SALE_ENTRY state : 3 = Recovery_Check
comment|/// and 0 = RESET or Normal_Boot phase.
comment|///
name|UINT8
name|BootPhase
decl_stmt|;
comment|///
comment|/// Firmware status on entry to SALE.
comment|///
name|UINT8
name|FWStatus
decl_stmt|;
name|UINT16
name|Reserved1
decl_stmt|;
name|UINT32
name|Reserved2
decl_stmt|;
comment|///
comment|/// Geographically significant unique processor ID assigned by PAL.
comment|///
name|UINT16
name|ProcId
decl_stmt|;
name|UINT16
name|Reserved3
decl_stmt|;
name|UINT8
name|IdMask
decl_stmt|;
name|UINT8
name|EidMask
decl_stmt|;
name|UINT16
name|Reserved4
decl_stmt|;
comment|///
comment|/// Address to make PAL calls.
comment|///
name|UINT64
name|PalCallAddress
decl_stmt|;
comment|///
comment|/// If the entry state is RECOVERY_CHECK, this contains the PAL_RESET
comment|/// return address, and if entry state is RESET, this contains
comment|/// address for PAL_authentication call.
comment|///
name|UINT64
name|PalSpecialAddress
decl_stmt|;
comment|///
comment|/// GR35 from PALE_EXIT state.
comment|///
name|UINT64
name|SelfTestStatus
decl_stmt|;
comment|///
comment|/// GR37 from PALE_EXIT state.
comment|///
name|UINT64
name|SelfTestControl
decl_stmt|;
name|UINT64
name|MemoryBufferRequired
decl_stmt|;
block|}
name|ITANIUM_HANDOFF_STATUS
typedef|;
end_typedef

begin_comment
comment|///
end_comment

begin_comment
comment|/// EFI_SEC_PLATFORM_INFORMATION_RECORD.
end_comment

begin_comment
comment|///
end_comment

begin_typedef
typedef|typedef
union|union
block|{
name|IA32_HANDOFF_STATUS
name|IA32HealthFlags
decl_stmt|;
name|X64_HANDOFF_STATUS
name|x64HealthFlags
decl_stmt|;
name|ITANIUM_HANDOFF_STATUS
name|ItaniumHealthFlags
decl_stmt|;
block|}
name|EFI_SEC_PLATFORM_INFORMATION_RECORD
typedef|;
end_typedef

begin_comment
comment|/**   This interface conveys state information out of the Security (SEC) phase into PEI.    This service is published by the SEC phase. The SEC phase handoff has an optional   EFI_PEI_PPI_DESCRIPTOR list as its final argument when control is passed from SEC into the   PEI Foundation. As such, if the platform supports the built-in self test (BIST) on IA-32 Intel   architecture or the PAL-A handoff state for Itanium architecture, this information is encapsulated   into the data structure abstracted by this service. This information is collected for the boot-strap   processor (BSP) on IA-32. For Itanium architecture, it is available on all processors that execute   the PEI Foundation.    @param  PeiServices               The pointer to the PEI Services Table.   @param  StructureSize             The pointer to the variable describing size of the input buffer.   @param  PlatformInformationRecord The pointer to the EFI_SEC_PLATFORM_INFORMATION_RECORD.    @retval EFI_SUCCESS               The data was successfully returned.   @retval EFI_BUFFER_TOO_SMALL      The buffer was too small. The current buffer size needed to                                     hold the record is returned in StructureSize.  **/
end_comment

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_SEC_PLATFORM_INFORMATION
function_decl|)
parameter_list|(
name|IN
name|CONST
name|EFI_PEI_SERVICES
modifier|*
modifier|*
name|PeiServices
parameter_list|,
name|IN
name|OUT
name|UINT64
modifier|*
name|StructureSize
parameter_list|,
name|OUT
name|EFI_SEC_PLATFORM_INFORMATION_RECORD
modifier|*
name|PlatformInformationRecord
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|///
end_comment

begin_comment
comment|/// This service abstracts platform-specific information. It is necessary
end_comment

begin_comment
comment|/// to convey this information to the PEI Foundation so that it can
end_comment

begin_comment
comment|/// discover where to begin dispatching PEIMs.
end_comment

begin_comment
comment|///
end_comment

begin_struct
struct|struct
name|_EFI_SEC_PLATFORM_INFORMATION_PPI
block|{
name|EFI_SEC_PLATFORM_INFORMATION
name|PlatformInformation
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|EFI_GUID
name|gEfiSecPlatformInformationPpiGuid
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

