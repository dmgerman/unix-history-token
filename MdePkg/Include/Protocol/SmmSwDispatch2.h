begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/** @file   SMM Software Dispatch Protocol introduced from PI 1.2 Specification   Volume 4 System Management Mode Core Interface.    This protocol provides the parent dispatch service for a given SMI source generator.    Copyright (c) 2009 - 2016, Intel Corporation. All rights reserved.<BR>   This program and the accompanying materials   are licensed and made available under the terms and conditions of the BSD License   which accompanies this distribution.  The full text of the license may be found at   http://opensource.org/licenses/bsd-license.php    THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,   WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.  **/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SMM_SW_DISPATCH2_H_
end_ifndef

begin_define
define|#
directive|define
name|_SMM_SW_DISPATCH2_H_
end_define

begin_include
include|#
directive|include
file|<Pi/PiSmmCis.h>
end_include

begin_define
define|#
directive|define
name|EFI_SMM_SW_DISPATCH2_PROTOCOL_GUID
define|\
value|{ \     0x18a3c6dc, 0x5eea, 0x48c8, {0xa1, 0xc1, 0xb5, 0x33, 0x89, 0xf9, 0x89, 0x99 } \   }
end_define

begin_comment
comment|///
end_comment

begin_comment
comment|/// A particular chipset may not support all possible software SMI input values.
end_comment

begin_comment
comment|/// For example, the ICH supports only values 00h to 0FFh.  The parent only allows a single
end_comment

begin_comment
comment|/// child registration for each SwSmiInputValue.
end_comment

begin_comment
comment|///
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|UINTN
name|SwSmiInputValue
decl_stmt|;
block|}
name|EFI_SMM_SW_REGISTER_CONTEXT
typedef|;
end_typedef

begin_comment
comment|///
end_comment

begin_comment
comment|/// The DispatchFunction will be called with Context set to the same value as was passed into
end_comment

begin_comment
comment|/// this function in RegisterContext and with CommBuffer (and CommBufferSize) pointing
end_comment

begin_comment
comment|/// to an instance of EFI_SMM_SW_CONTEXT indicating the index of the CPU which generated the
end_comment

begin_comment
comment|/// software SMI.
end_comment

begin_comment
comment|///
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
comment|///
comment|/// The 0-based index of the CPU which generated the software SMI.
comment|///
name|UINTN
name|SwSmiCpuIndex
decl_stmt|;
comment|///
comment|/// This value corresponds directly to the CommandPort parameter used in the call to Trigger().
comment|///
name|UINT8
name|CommandPort
decl_stmt|;
comment|///
comment|/// This value corresponds directly to the DataPort parameter used in the call to Trigger().
comment|///
name|UINT8
name|DataPort
decl_stmt|;
block|}
name|EFI_SMM_SW_CONTEXT
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|_EFI_SMM_SW_DISPATCH2_PROTOCOL
name|EFI_SMM_SW_DISPATCH2_PROTOCOL
typedef|;
end_typedef

begin_comment
comment|/**   Register a child SMI source dispatch function for the specified software SMI.    This service registers a function (DispatchFunction) which will be called when the software    SMI source specified by RegisterContext->SwSmiCpuIndex is detected. On return,    DispatchHandle contains a unique handle which may be used later to unregister the function    using UnRegister().    @param[in]  This                 Pointer to the EFI_SMM_SW_DISPATCH2_PROTOCOL instance.   @param[in]  DispatchFunction     Function to register for handler when the specified software                                     SMI is generated.    @param[in, out] RegisterContext  Pointer to the dispatch function's context.                                    The caller fills this context in before calling                                    the register function to indicate to the register                                    function which Software SMI input value the                                    dispatch function should be invoked for.   @param[out] DispatchHandle       Handle generated by the dispatcher to track the                                    function instance.    @retval EFI_SUCCESS            The dispatch function has been successfully                                  registered and the SMI source has been enabled.   @retval EFI_DEVICE_ERROR       The SW driver was unable to enable the SMI source.   @retval EFI_INVALID_PARAMETER  RegisterContext is invalid. The SW SMI input value                                  is not within a valid range or is already in use.   @retval EFI_OUT_OF_RESOURCES   There is not enough memory (system or SMM) to manage this                                  child.   @retval EFI_OUT_OF_RESOURCES   A unique software SMI value could not be assigned                                  for this dispatch. **/
end_comment

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_SMM_SW_REGISTER2
function_decl|)
parameter_list|(
name|IN
name|CONST
name|EFI_SMM_SW_DISPATCH2_PROTOCOL
modifier|*
name|This
parameter_list|,
name|IN
name|EFI_SMM_HANDLER_ENTRY_POINT2
name|DispatchFunction
parameter_list|,
name|IN
name|OUT
name|EFI_SMM_SW_REGISTER_CONTEXT
modifier|*
name|RegisterContext
parameter_list|,
name|OUT
name|EFI_HANDLE
modifier|*
name|DispatchHandle
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/**   Unregister a child SMI source dispatch function for the specified software SMI.    This service removes the handler associated with DispatchHandle so that it will no longer be    called in response to a software SMI.    @param[in] This                Pointer to the EFI_SMM_SW_DISPATCH2_PROTOCOL instance.   @param[in] DispatchHandle      Handle of dispatch function to deregister.    @retval EFI_SUCCESS            The dispatch function has been successfully unregistered.   @retval EFI_INVALID_PARAMETER  The DispatchHandle was not valid. **/
end_comment

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_SMM_SW_UNREGISTER2
function_decl|)
parameter_list|(
name|IN
name|CONST
name|EFI_SMM_SW_DISPATCH2_PROTOCOL
modifier|*
name|This
parameter_list|,
name|IN
name|EFI_HANDLE
name|DispatchHandle
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|///
end_comment

begin_comment
comment|/// Interface structure for the SMM Software SMI Dispatch Protocol.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// The EFI_SMM_SW_DISPATCH2_PROTOCOL provides the ability to install child handlers for the
end_comment

begin_comment
comment|/// given software.  These handlers will respond to software interrupts, and the maximum software
end_comment

begin_comment
comment|/// interrupt in the EFI_SMM_SW_REGISTER_CONTEXT is denoted by MaximumSwiValue.
end_comment

begin_comment
comment|///
end_comment

begin_struct
struct|struct
name|_EFI_SMM_SW_DISPATCH2_PROTOCOL
block|{
name|EFI_SMM_SW_REGISTER2
name|Register
decl_stmt|;
name|EFI_SMM_SW_UNREGISTER2
name|UnRegister
decl_stmt|;
comment|///
comment|/// A read-only field that describes the maximum value that can be used in the
comment|/// EFI_SMM_SW_DISPATCH2_PROTOCOL.Register() service.
comment|///
name|UINTN
name|MaximumSwiValue
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|EFI_GUID
name|gEfiSmmSwDispatch2ProtocolGuid
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

