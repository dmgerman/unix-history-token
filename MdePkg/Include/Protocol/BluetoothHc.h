begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/** @file   EFI Bluetooth Host Controller Protocol as defined in UEFI 2.5.   This protocol abstracts the Bluetooth host controller layer message transmit and receive.    Copyright (c) 2015, Intel Corporation. All rights reserved.<BR>   This program and the accompanying materials are licensed and made available under    the terms and conditions of the BSD License that accompanies this distribution.     The full text of the license may be found at   http://opensource.org/licenses/bsd-license.php.                                                  THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,                        WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.    @par Revision Reference:             This Protocol is introduced in UEFI Specification 2.5  **/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__EFI_BLUETOOTH_HC_PROTOCOL_H__
end_ifndef

begin_define
define|#
directive|define
name|__EFI_BLUETOOTH_HC_PROTOCOL_H__
end_define

begin_define
define|#
directive|define
name|EFI_BLUETOOTH_HC_PROTOCOL_GUID
define|\
value|{ \     0xb3930571, 0xbeba, 0x4fc5, { 0x92, 0x3, 0x94, 0x27, 0x24, 0x2e, 0x6a, 0x43 } \   }
end_define

begin_typedef
typedef|typedef
name|struct
name|_EFI_BLUETOOTH_HC_PROTOCOL
name|EFI_BLUETOOTH_HC_PROTOCOL
typedef|;
end_typedef

begin_comment
comment|/**   Send HCI command packet.    @param  This          Pointer to the EFI_BLUETOOTH_HC_PROTOCOL instance.   @param  BufferSize    On input, indicates the size, in bytes, of the data buffer specified by Buffer.                          On output, indicates the amount of data actually transferred.   @param  Buffer        A pointer to the buffer of data that will be transmitted to Bluetooth host                          controller.   @param  Timeout       Indicating the transfer should be completed within this time frame. The units are                          in milliseconds. If Timeout is 0, then the caller must wait for the function to                          be completed until EFI_SUCCESS or EFI_DEVICE_ERROR is returned.    @retval EFI_SUCCESS           The HCI command packet is sent successfully.   @retval EFI_INVALID_PARAMETER One or more of the following conditions is TRUE:                                 - BufferSize is NULL.                                 - *BufferSize is 0.                                 - Buffer is NULL.   @retval EFI_TIMEOUT           Sending HCI command packet fail due to timeout.   @retval EFI_DEVICE_ERROR      Sending HCI command packet fail due to host controller or device error.  **/
end_comment

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_BLUETOOTH_HC_SEND_COMMAND
function_decl|)
parameter_list|(
name|IN
name|EFI_BLUETOOTH_HC_PROTOCOL
modifier|*
name|This
parameter_list|,
name|IN
name|OUT
name|UINTN
modifier|*
name|BufferSize
parameter_list|,
name|IN
name|VOID
modifier|*
name|Buffer
parameter_list|,
name|IN
name|UINTN
name|Timeout
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/**   Receive HCI event packet.    @param  This          Pointer to the EFI_BLUETOOTH_HC_PROTOCOL instance.   @param  BufferSize    On input, indicates the size, in bytes, of the data buffer specified by Buffer.                          On output, indicates the amount of data actually transferred.   @param  Buffer        A pointer to the buffer of data that will be received from Bluetooth host controller.   @param  Timeout       Indicating the transfer should be completed within this time frame. The units are                          in milliseconds. If Timeout is 0, then the caller must wait for the function to                          be completed until EFI_SUCCESS or EFI_DEVICE_ERROR is returned.    @retval EFI_SUCCESS           The HCI event packet is received successfully.   @retval EFI_INVALID_PARAMETER One or more of the following conditions is TRUE:                                 - BufferSize is NULL.                                 - *BufferSize is 0.                                 - Buffer is NULL.   @retval EFI_TIMEOUT           Receiving HCI event packet fail due to timeout.   @retval EFI_DEVICE_ERROR      Receiving HCI event packet fail due to host controller or device error.  **/
end_comment

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_BLUETOOTH_HC_RECEIVE_EVENT
function_decl|)
parameter_list|(
name|IN
name|EFI_BLUETOOTH_HC_PROTOCOL
modifier|*
name|This
parameter_list|,
name|IN
name|OUT
name|UINTN
modifier|*
name|BufferSize
parameter_list|,
name|OUT
name|VOID
modifier|*
name|Buffer
parameter_list|,
name|IN
name|UINTN
name|Timeout
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/**   Callback function, it is called when asynchronous transfer is completed.    @param  Data              Pointer to the EFI_BLUETOOTH_HC_PROTOCOL instance.   @param  DataLength        Specifies the length, in bytes, of the data to be received.   @param  Context           Data passed into Callback function. This is optional parameter and may be NULL.    @retval EFI_SUCCESS             The callback function complete successfully.  **/
end_comment

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_BLUETOOTH_HC_ASYNC_FUNC_CALLBACK
function_decl|)
parameter_list|(
name|IN
name|VOID
modifier|*
name|Data
parameter_list|,
name|IN
name|UINTN
name|DataLength
parameter_list|,
name|IN
name|VOID
modifier|*
name|Context
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/**   Receive HCI event packet in non-blocking way.    @param  This              Pointer to the EFI_BLUETOOTH_HC_PROTOCOL instance.   @param  IsNewTransfer     If TRUE, a new transfer will be submitted. If FALSE, the request is deleted.   @param  PollingInterval   Indicates the periodic rate, in milliseconds, that the transfer is to be executed.   @param  DataLength        Specifies the length, in bytes, of the data to be received.   @param  Callback          The callback function. This function is called if the asynchronous transfer is                              completed.   @param  Context           Data passed into Callback function. This is optional parameter and may be NULL.    @retval EFI_SUCCESS           The HCI asynchronous receive request is submitted successfully.   @retval EFI_INVALID_PARAMETER One or more of the following conditions is TRUE:                                 - DataLength is 0.                                 - If IsNewTransfer is TRUE, and an asynchronous receive request already exists.  **/
end_comment

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_BLUETOOTH_HC_ASYNC_RECEIVE_EVENT
function_decl|)
parameter_list|(
name|IN
name|EFI_BLUETOOTH_HC_PROTOCOL
modifier|*
name|This
parameter_list|,
name|IN
name|BOOLEAN
name|IsNewTransfer
parameter_list|,
name|IN
name|UINTN
name|PollingInterval
parameter_list|,
name|IN
name|UINTN
name|DataLength
parameter_list|,
name|IN
name|EFI_BLUETOOTH_HC_ASYNC_FUNC_CALLBACK
name|Callback
parameter_list|,
name|IN
name|VOID
modifier|*
name|Context
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/**   Send HCI ACL data packet.    @param  This          Pointer to the EFI_BLUETOOTH_HC_PROTOCOL instance.   @param  BufferSize    On input, indicates the size, in bytes, of the data buffer specified by Buffer.                          On output, indicates the amount of data actually transferred.   @param  Buffer        A pointer to the buffer of data that will be transmitted to Bluetooth host                          controller.   @param  Timeout       Indicating the transfer should be completed within this time frame. The units are                          in milliseconds. If Timeout is 0, then the caller must wait for the function to                          be completed until EFI_SUCCESS or EFI_DEVICE_ERROR is returned.    @retval EFI_SUCCESS           The HCI ACL data packet is sent successfully.   @retval EFI_INVALID_PARAMETER One or more of the following conditions is TRUE:                                 - BufferSize is NULL.                                 - *BufferSize is 0.                                 - Buffer is NULL.   @retval EFI_TIMEOUT           Sending HCI ACL data packet fail due to timeout.   @retval EFI_DEVICE_ERROR      Sending HCI ACL data packet fail due to host controller or device error.  **/
end_comment

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_BLUETOOTH_HC_SEND_ACL_DATA
function_decl|)
parameter_list|(
name|IN
name|EFI_BLUETOOTH_HC_PROTOCOL
modifier|*
name|This
parameter_list|,
name|IN
name|OUT
name|UINTN
modifier|*
name|BufferSize
parameter_list|,
name|IN
name|VOID
modifier|*
name|Buffer
parameter_list|,
name|IN
name|UINTN
name|Timeout
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/**   Receive HCI ACL data packet.    @param  This          Pointer to the EFI_BLUETOOTH_HC_PROTOCOL instance.   @param  BufferSize    On input, indicates the size, in bytes, of the data buffer specified by Buffer.                          On output, indicates the amount of data actually transferred.   @param  Buffer        A pointer to the buffer of data that will be received from Bluetooth host controller.   @param  Timeout       Indicating the transfer should be completed within this time frame. The units are                          in milliseconds. If Timeout is 0, then the caller must wait for the function to                          be completed until EFI_SUCCESS or EFI_DEVICE_ERROR is returned.    @retval EFI_SUCCESS           The HCI ACL data packet is received successfully.   @retval EFI_INVALID_PARAMETER One or more of the following conditions is TRUE:                                 - BufferSize is NULL.                                 - *BufferSize is 0.                                 - Buffer is NULL.   @retval EFI_TIMEOUT           Receiving HCI ACL data packet fail due to timeout.   @retval EFI_DEVICE_ERROR      Receiving HCI ACL data packet fail due to host controller or device error.  **/
end_comment

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_BLUETOOTH_HC_RECEIVE_ACL_DATA
function_decl|)
parameter_list|(
name|IN
name|EFI_BLUETOOTH_HC_PROTOCOL
modifier|*
name|This
parameter_list|,
name|IN
name|OUT
name|UINTN
modifier|*
name|BufferSize
parameter_list|,
name|OUT
name|VOID
modifier|*
name|Buffer
parameter_list|,
name|IN
name|UINTN
name|Timeout
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/**   Receive HCI ACL data packet in non-blocking way.    @param  This              Pointer to the EFI_BLUETOOTH_HC_PROTOCOL instance.   @param  IsNewTransfer     If TRUE, a new transfer will be submitted. If FALSE, the request is deleted.   @param  PollingInterval   Indicates the periodic rate, in milliseconds, that the transfer is to be executed.   @param  DataLength        Specifies the length, in bytes, of the data to be received.   @param  Callback          The callback function. This function is called if the asynchronous transfer is                              completed.   @param  Context           Data passed into Callback function. This is optional parameter and may be NULL.    @retval EFI_SUCCESS           The HCI asynchronous receive request is submitted successfully.   @retval EFI_INVALID_PARAMETER One or more of the following conditions is TRUE:                                 - DataLength is 0.                                 - If IsNewTransfer is TRUE, and an asynchronous receive request already exists.  **/
end_comment

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_BLUETOOTH_HC_ASYNC_RECEIVE_ACL_DATA
function_decl|)
parameter_list|(
name|IN
name|EFI_BLUETOOTH_HC_PROTOCOL
modifier|*
name|This
parameter_list|,
name|IN
name|BOOLEAN
name|IsNewTransfer
parameter_list|,
name|IN
name|UINTN
name|PollingInterval
parameter_list|,
name|IN
name|UINTN
name|DataLength
parameter_list|,
name|IN
name|EFI_BLUETOOTH_HC_ASYNC_FUNC_CALLBACK
name|Callback
parameter_list|,
name|IN
name|VOID
modifier|*
name|Context
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/**   Send HCI SCO data packet.    @param  This          Pointer to the EFI_BLUETOOTH_HC_PROTOCOL instance.   @param  BufferSize    On input, indicates the size, in bytes, of the data buffer specified by Buffer.                          On output, indicates the amount of data actually transferred.   @param  Buffer        A pointer to the buffer of data that will be transmitted to Bluetooth host                          controller.   @param  Timeout       Indicating the transfer should be completed within this time frame. The units are                          in milliseconds. If Timeout is 0, then the caller must wait for the function to                          be completed until EFI_SUCCESS or EFI_DEVICE_ERROR is returned.    @retval EFI_SUCCESS           The HCI SCO data packet is sent successfully.   @retval EFI_UNSUPPORTED       The implementation does not support HCI SCO transfer.   @retval EFI_INVALID_PARAMETER One or more of the following conditions is TRUE:                                 - BufferSize is NULL.                                 - *BufferSize is 0.                                 - Buffer is NULL.   @retval EFI_TIMEOUT           Sending HCI SCO data packet fail due to timeout.   @retval EFI_DEVICE_ERROR      Sending HCI SCO data packet fail due to host controller or device error.  **/
end_comment

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_BLUETOOTH_HC_SEND_SCO_DATA
function_decl|)
parameter_list|(
name|IN
name|EFI_BLUETOOTH_HC_PROTOCOL
modifier|*
name|This
parameter_list|,
name|IN
name|OUT
name|UINTN
modifier|*
name|BufferSize
parameter_list|,
name|IN
name|VOID
modifier|*
name|Buffer
parameter_list|,
name|IN
name|UINTN
name|Timeout
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/**   Receive HCI SCO data packet.    @param  This          Pointer to the EFI_BLUETOOTH_HC_PROTOCOL instance.   @param  BufferSize    On input, indicates the size, in bytes, of the data buffer specified by Buffer.                          On output, indicates the amount of data actually transferred.   @param  Buffer        A pointer to the buffer of data that will be received from Bluetooth host controller.   @param  Timeout       Indicating the transfer should be completed within this time frame. The units are                          in milliseconds. If Timeout is 0, then the caller must wait for the function to                          be completed until EFI_SUCCESS or EFI_DEVICE_ERROR is returned.    @retval EFI_SUCCESS           The HCI SCO data packet is received successfully.   @retval EFI_INVALID_PARAMETER One or more of the following conditions is TRUE:                                 - BufferSize is NULL.                                 - *BufferSize is 0.                                 - Buffer is NULL.   @retval EFI_TIMEOUT           Receiving HCI SCO data packet fail due to timeout   @retval EFI_DEVICE_ERROR      Receiving HCI SCO data packet fail due to host controller or device error.  **/
end_comment

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_BLUETOOTH_HC_RECEIVE_SCO_DATA
function_decl|)
parameter_list|(
name|IN
name|EFI_BLUETOOTH_HC_PROTOCOL
modifier|*
name|This
parameter_list|,
name|IN
name|OUT
name|UINTN
modifier|*
name|BufferSize
parameter_list|,
name|OUT
name|VOID
modifier|*
name|Buffer
parameter_list|,
name|IN
name|UINTN
name|Timeout
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/**   Receive HCI SCO data packet in non-blocking way.    @param  This              Pointer to the EFI_BLUETOOTH_HC_PROTOCOL instance.   @param  IsNewTransfer     If TRUE, a new transfer will be submitted. If FALSE, the request is deleted.   @param  PollingInterval   Indicates the periodic rate, in milliseconds, that the transfer is to be executed.   @param  DataLength        Specifies the length, in bytes, of the data to be received.   @param  Callback          The callback function. This function is called if the asynchronous transfer is                              completed.   @param  Context           Data passed into Callback function. This is optional parameter and may be NULL.    @retval EFI_SUCCESS           The HCI asynchronous receive request is submitted successfully.   @retval EFI_INVALID_PARAMETER One or more of the following conditions is TRUE:                                 - DataLength is 0.                                 - If IsNewTransfer is TRUE, and an asynchronous receive request already exists.  **/
end_comment

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_BLUETOOTH_HC_ASYNC_RECEIVE_SCO_DATA
function_decl|)
parameter_list|(
name|IN
name|EFI_BLUETOOTH_HC_PROTOCOL
modifier|*
name|This
parameter_list|,
name|IN
name|BOOLEAN
name|IsNewTransfer
parameter_list|,
name|IN
name|UINTN
name|PollingInterval
parameter_list|,
name|IN
name|UINTN
name|DataLength
parameter_list|,
name|IN
name|EFI_BLUETOOTH_HC_ASYNC_FUNC_CALLBACK
name|Callback
parameter_list|,
name|IN
name|VOID
modifier|*
name|Context
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|///
end_comment

begin_comment
comment|/// This protocol abstracts the Bluetooth host controller layer message transmit and receive.
end_comment

begin_comment
comment|///
end_comment

begin_struct
struct|struct
name|_EFI_BLUETOOTH_HC_PROTOCOL
block|{
name|EFI_BLUETOOTH_HC_SEND_COMMAND
name|SendCommand
decl_stmt|;
name|EFI_BLUETOOTH_HC_RECEIVE_EVENT
name|ReceiveEvent
decl_stmt|;
name|EFI_BLUETOOTH_HC_ASYNC_RECEIVE_EVENT
name|AsyncReceiveEvent
decl_stmt|;
name|EFI_BLUETOOTH_HC_SEND_ACL_DATA
name|SendACLData
decl_stmt|;
name|EFI_BLUETOOTH_HC_RECEIVE_ACL_DATA
name|ReceiveACLData
decl_stmt|;
name|EFI_BLUETOOTH_HC_ASYNC_RECEIVE_ACL_DATA
name|AsyncReceiveACLData
decl_stmt|;
name|EFI_BLUETOOTH_HC_SEND_SCO_DATA
name|SendSCOData
decl_stmt|;
name|EFI_BLUETOOTH_HC_RECEIVE_SCO_DATA
name|ReceiveSCOData
decl_stmt|;
name|EFI_BLUETOOTH_HC_ASYNC_RECEIVE_SCO_DATA
name|AsyncReceiveSCOData
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|EFI_GUID
name|gEfiBluetoothHcProtocolGuid
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

