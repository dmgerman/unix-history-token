begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/** @file   DebugSupport protocol and supporting definitions as defined in the UEFI2.4   specification.    The DebugSupport protocol is used by source level debuggers to abstract the   processor and handle context save and restore operations.  Copyright (c) 2006 - 2010, Intel Corporation. All rights reserved.<BR> Portions copyright (c) 2011 - 2013, ARM Ltd. All rights reserved.<BR>  This program and the accompanying materials are licensed and made available under  the terms and conditions of the BSD License that accompanies this distribution.   The full text of the license may be found at http://opensource.org/licenses/bsd-license.php.                                                THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,                      WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.               **/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__DEBUG_SUPPORT_H__
end_ifndef

begin_define
define|#
directive|define
name|__DEBUG_SUPPORT_H__
end_define

begin_include
include|#
directive|include
file|<IndustryStandard/PeImage.h>
end_include

begin_typedef
typedef|typedef
name|struct
name|_EFI_DEBUG_SUPPORT_PROTOCOL
name|EFI_DEBUG_SUPPORT_PROTOCOL
typedef|;
end_typedef

begin_comment
comment|///
end_comment

begin_comment
comment|/// Debug Support protocol {2755590C-6F3C-42FA-9EA4-A3BA543CDA25}.
end_comment

begin_comment
comment|///
end_comment

begin_define
define|#
directive|define
name|EFI_DEBUG_SUPPORT_PROTOCOL_GUID
define|\
value|{ \     0x2755590C, 0x6F3C, 0x42FA, {0x9E, 0xA4, 0xA3, 0xBA, 0x54, 0x3C, 0xDA, 0x25 } \   }
end_define

begin_comment
comment|///
end_comment

begin_comment
comment|/// Processor exception to be hooked.
end_comment

begin_comment
comment|/// All exception types for IA32, X64, Itanium and EBC processors are defined.
end_comment

begin_comment
comment|///
end_comment

begin_typedef
typedef|typedef
name|INTN
name|EFI_EXCEPTION_TYPE
typedef|;
end_typedef

begin_comment
comment|///
end_comment

begin_comment
comment|///  IA-32 processor exception types.
end_comment

begin_comment
comment|///
end_comment

begin_define
define|#
directive|define
name|EXCEPT_IA32_DIVIDE_ERROR
value|0
end_define

begin_define
define|#
directive|define
name|EXCEPT_IA32_DEBUG
value|1
end_define

begin_define
define|#
directive|define
name|EXCEPT_IA32_NMI
value|2
end_define

begin_define
define|#
directive|define
name|EXCEPT_IA32_BREAKPOINT
value|3
end_define

begin_define
define|#
directive|define
name|EXCEPT_IA32_OVERFLOW
value|4
end_define

begin_define
define|#
directive|define
name|EXCEPT_IA32_BOUND
value|5
end_define

begin_define
define|#
directive|define
name|EXCEPT_IA32_INVALID_OPCODE
value|6
end_define

begin_define
define|#
directive|define
name|EXCEPT_IA32_DOUBLE_FAULT
value|8
end_define

begin_define
define|#
directive|define
name|EXCEPT_IA32_INVALID_TSS
value|10
end_define

begin_define
define|#
directive|define
name|EXCEPT_IA32_SEG_NOT_PRESENT
value|11
end_define

begin_define
define|#
directive|define
name|EXCEPT_IA32_STACK_FAULT
value|12
end_define

begin_define
define|#
directive|define
name|EXCEPT_IA32_GP_FAULT
value|13
end_define

begin_define
define|#
directive|define
name|EXCEPT_IA32_PAGE_FAULT
value|14
end_define

begin_define
define|#
directive|define
name|EXCEPT_IA32_FP_ERROR
value|16
end_define

begin_define
define|#
directive|define
name|EXCEPT_IA32_ALIGNMENT_CHECK
value|17
end_define

begin_define
define|#
directive|define
name|EXCEPT_IA32_MACHINE_CHECK
value|18
end_define

begin_define
define|#
directive|define
name|EXCEPT_IA32_SIMD
value|19
end_define

begin_comment
comment|///
end_comment

begin_comment
comment|/// FXSAVE_STATE.
end_comment

begin_comment
comment|/// FP / MMX / XMM registers (see fxrstor instruction definition).
end_comment

begin_comment
comment|///
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|UINT16
name|Fcw
decl_stmt|;
name|UINT16
name|Fsw
decl_stmt|;
name|UINT16
name|Ftw
decl_stmt|;
name|UINT16
name|Opcode
decl_stmt|;
name|UINT32
name|Eip
decl_stmt|;
name|UINT16
name|Cs
decl_stmt|;
name|UINT16
name|Reserved1
decl_stmt|;
name|UINT32
name|DataOffset
decl_stmt|;
name|UINT16
name|Ds
decl_stmt|;
name|UINT8
name|Reserved2
index|[
literal|10
index|]
decl_stmt|;
name|UINT8
name|St0Mm0
index|[
literal|10
index|]
decl_stmt|,
name|Reserved3
index|[
literal|6
index|]
decl_stmt|;
name|UINT8
name|St1Mm1
index|[
literal|10
index|]
decl_stmt|,
name|Reserved4
index|[
literal|6
index|]
decl_stmt|;
name|UINT8
name|St2Mm2
index|[
literal|10
index|]
decl_stmt|,
name|Reserved5
index|[
literal|6
index|]
decl_stmt|;
name|UINT8
name|St3Mm3
index|[
literal|10
index|]
decl_stmt|,
name|Reserved6
index|[
literal|6
index|]
decl_stmt|;
name|UINT8
name|St4Mm4
index|[
literal|10
index|]
decl_stmt|,
name|Reserved7
index|[
literal|6
index|]
decl_stmt|;
name|UINT8
name|St5Mm5
index|[
literal|10
index|]
decl_stmt|,
name|Reserved8
index|[
literal|6
index|]
decl_stmt|;
name|UINT8
name|St6Mm6
index|[
literal|10
index|]
decl_stmt|,
name|Reserved9
index|[
literal|6
index|]
decl_stmt|;
name|UINT8
name|St7Mm7
index|[
literal|10
index|]
decl_stmt|,
name|Reserved10
index|[
literal|6
index|]
decl_stmt|;
name|UINT8
name|Xmm0
index|[
literal|16
index|]
decl_stmt|;
name|UINT8
name|Xmm1
index|[
literal|16
index|]
decl_stmt|;
name|UINT8
name|Xmm2
index|[
literal|16
index|]
decl_stmt|;
name|UINT8
name|Xmm3
index|[
literal|16
index|]
decl_stmt|;
name|UINT8
name|Xmm4
index|[
literal|16
index|]
decl_stmt|;
name|UINT8
name|Xmm5
index|[
literal|16
index|]
decl_stmt|;
name|UINT8
name|Xmm6
index|[
literal|16
index|]
decl_stmt|;
name|UINT8
name|Xmm7
index|[
literal|16
index|]
decl_stmt|;
name|UINT8
name|Reserved11
index|[
literal|14
operator|*
literal|16
index|]
decl_stmt|;
block|}
name|EFI_FX_SAVE_STATE_IA32
typedef|;
end_typedef

begin_comment
comment|///
end_comment

begin_comment
comment|///  IA-32 processor context definition.
end_comment

begin_comment
comment|///
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|UINT32
name|ExceptionData
decl_stmt|;
name|EFI_FX_SAVE_STATE_IA32
name|FxSaveState
decl_stmt|;
name|UINT32
name|Dr0
decl_stmt|;
name|UINT32
name|Dr1
decl_stmt|;
name|UINT32
name|Dr2
decl_stmt|;
name|UINT32
name|Dr3
decl_stmt|;
name|UINT32
name|Dr6
decl_stmt|;
name|UINT32
name|Dr7
decl_stmt|;
name|UINT32
name|Cr0
decl_stmt|;
name|UINT32
name|Cr1
decl_stmt|;
comment|/* Reserved */
name|UINT32
name|Cr2
decl_stmt|;
name|UINT32
name|Cr3
decl_stmt|;
name|UINT32
name|Cr4
decl_stmt|;
name|UINT32
name|Eflags
decl_stmt|;
name|UINT32
name|Ldtr
decl_stmt|;
name|UINT32
name|Tr
decl_stmt|;
name|UINT32
name|Gdtr
index|[
literal|2
index|]
decl_stmt|;
name|UINT32
name|Idtr
index|[
literal|2
index|]
decl_stmt|;
name|UINT32
name|Eip
decl_stmt|;
name|UINT32
name|Gs
decl_stmt|;
name|UINT32
name|Fs
decl_stmt|;
name|UINT32
name|Es
decl_stmt|;
name|UINT32
name|Ds
decl_stmt|;
name|UINT32
name|Cs
decl_stmt|;
name|UINT32
name|Ss
decl_stmt|;
name|UINT32
name|Edi
decl_stmt|;
name|UINT32
name|Esi
decl_stmt|;
name|UINT32
name|Ebp
decl_stmt|;
name|UINT32
name|Esp
decl_stmt|;
name|UINT32
name|Ebx
decl_stmt|;
name|UINT32
name|Edx
decl_stmt|;
name|UINT32
name|Ecx
decl_stmt|;
name|UINT32
name|Eax
decl_stmt|;
block|}
name|EFI_SYSTEM_CONTEXT_IA32
typedef|;
end_typedef

begin_comment
comment|///
end_comment

begin_comment
comment|///  x64 processor exception types.
end_comment

begin_comment
comment|///
end_comment

begin_define
define|#
directive|define
name|EXCEPT_X64_DIVIDE_ERROR
value|0
end_define

begin_define
define|#
directive|define
name|EXCEPT_X64_DEBUG
value|1
end_define

begin_define
define|#
directive|define
name|EXCEPT_X64_NMI
value|2
end_define

begin_define
define|#
directive|define
name|EXCEPT_X64_BREAKPOINT
value|3
end_define

begin_define
define|#
directive|define
name|EXCEPT_X64_OVERFLOW
value|4
end_define

begin_define
define|#
directive|define
name|EXCEPT_X64_BOUND
value|5
end_define

begin_define
define|#
directive|define
name|EXCEPT_X64_INVALID_OPCODE
value|6
end_define

begin_define
define|#
directive|define
name|EXCEPT_X64_DOUBLE_FAULT
value|8
end_define

begin_define
define|#
directive|define
name|EXCEPT_X64_INVALID_TSS
value|10
end_define

begin_define
define|#
directive|define
name|EXCEPT_X64_SEG_NOT_PRESENT
value|11
end_define

begin_define
define|#
directive|define
name|EXCEPT_X64_STACK_FAULT
value|12
end_define

begin_define
define|#
directive|define
name|EXCEPT_X64_GP_FAULT
value|13
end_define

begin_define
define|#
directive|define
name|EXCEPT_X64_PAGE_FAULT
value|14
end_define

begin_define
define|#
directive|define
name|EXCEPT_X64_FP_ERROR
value|16
end_define

begin_define
define|#
directive|define
name|EXCEPT_X64_ALIGNMENT_CHECK
value|17
end_define

begin_define
define|#
directive|define
name|EXCEPT_X64_MACHINE_CHECK
value|18
end_define

begin_define
define|#
directive|define
name|EXCEPT_X64_SIMD
value|19
end_define

begin_comment
comment|///
end_comment

begin_comment
comment|/// FXSAVE_STATE.
end_comment

begin_comment
comment|/// FP / MMX / XMM registers (see fxrstor instruction definition).
end_comment

begin_comment
comment|///
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|UINT16
name|Fcw
decl_stmt|;
name|UINT16
name|Fsw
decl_stmt|;
name|UINT16
name|Ftw
decl_stmt|;
name|UINT16
name|Opcode
decl_stmt|;
name|UINT64
name|Rip
decl_stmt|;
name|UINT64
name|DataOffset
decl_stmt|;
name|UINT8
name|Reserved1
index|[
literal|8
index|]
decl_stmt|;
name|UINT8
name|St0Mm0
index|[
literal|10
index|]
decl_stmt|,
name|Reserved2
index|[
literal|6
index|]
decl_stmt|;
name|UINT8
name|St1Mm1
index|[
literal|10
index|]
decl_stmt|,
name|Reserved3
index|[
literal|6
index|]
decl_stmt|;
name|UINT8
name|St2Mm2
index|[
literal|10
index|]
decl_stmt|,
name|Reserved4
index|[
literal|6
index|]
decl_stmt|;
name|UINT8
name|St3Mm3
index|[
literal|10
index|]
decl_stmt|,
name|Reserved5
index|[
literal|6
index|]
decl_stmt|;
name|UINT8
name|St4Mm4
index|[
literal|10
index|]
decl_stmt|,
name|Reserved6
index|[
literal|6
index|]
decl_stmt|;
name|UINT8
name|St5Mm5
index|[
literal|10
index|]
decl_stmt|,
name|Reserved7
index|[
literal|6
index|]
decl_stmt|;
name|UINT8
name|St6Mm6
index|[
literal|10
index|]
decl_stmt|,
name|Reserved8
index|[
literal|6
index|]
decl_stmt|;
name|UINT8
name|St7Mm7
index|[
literal|10
index|]
decl_stmt|,
name|Reserved9
index|[
literal|6
index|]
decl_stmt|;
name|UINT8
name|Xmm0
index|[
literal|16
index|]
decl_stmt|;
name|UINT8
name|Xmm1
index|[
literal|16
index|]
decl_stmt|;
name|UINT8
name|Xmm2
index|[
literal|16
index|]
decl_stmt|;
name|UINT8
name|Xmm3
index|[
literal|16
index|]
decl_stmt|;
name|UINT8
name|Xmm4
index|[
literal|16
index|]
decl_stmt|;
name|UINT8
name|Xmm5
index|[
literal|16
index|]
decl_stmt|;
name|UINT8
name|Xmm6
index|[
literal|16
index|]
decl_stmt|;
name|UINT8
name|Xmm7
index|[
literal|16
index|]
decl_stmt|;
comment|//
comment|// NOTE: UEFI 2.0 spec definition as follows.
comment|//
name|UINT8
name|Reserved11
index|[
literal|14
operator|*
literal|16
index|]
decl_stmt|;
block|}
name|EFI_FX_SAVE_STATE_X64
typedef|;
end_typedef

begin_comment
comment|///
end_comment

begin_comment
comment|///  x64 processor context definition.
end_comment

begin_comment
comment|///
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|UINT64
name|ExceptionData
decl_stmt|;
name|EFI_FX_SAVE_STATE_X64
name|FxSaveState
decl_stmt|;
name|UINT64
name|Dr0
decl_stmt|;
name|UINT64
name|Dr1
decl_stmt|;
name|UINT64
name|Dr2
decl_stmt|;
name|UINT64
name|Dr3
decl_stmt|;
name|UINT64
name|Dr6
decl_stmt|;
name|UINT64
name|Dr7
decl_stmt|;
name|UINT64
name|Cr0
decl_stmt|;
name|UINT64
name|Cr1
decl_stmt|;
comment|/* Reserved */
name|UINT64
name|Cr2
decl_stmt|;
name|UINT64
name|Cr3
decl_stmt|;
name|UINT64
name|Cr4
decl_stmt|;
name|UINT64
name|Cr8
decl_stmt|;
name|UINT64
name|Rflags
decl_stmt|;
name|UINT64
name|Ldtr
decl_stmt|;
name|UINT64
name|Tr
decl_stmt|;
name|UINT64
name|Gdtr
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|Idtr
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|Rip
decl_stmt|;
name|UINT64
name|Gs
decl_stmt|;
name|UINT64
name|Fs
decl_stmt|;
name|UINT64
name|Es
decl_stmt|;
name|UINT64
name|Ds
decl_stmt|;
name|UINT64
name|Cs
decl_stmt|;
name|UINT64
name|Ss
decl_stmt|;
name|UINT64
name|Rdi
decl_stmt|;
name|UINT64
name|Rsi
decl_stmt|;
name|UINT64
name|Rbp
decl_stmt|;
name|UINT64
name|Rsp
decl_stmt|;
name|UINT64
name|Rbx
decl_stmt|;
name|UINT64
name|Rdx
decl_stmt|;
name|UINT64
name|Rcx
decl_stmt|;
name|UINT64
name|Rax
decl_stmt|;
name|UINT64
name|R8
decl_stmt|;
name|UINT64
name|R9
decl_stmt|;
name|UINT64
name|R10
decl_stmt|;
name|UINT64
name|R11
decl_stmt|;
name|UINT64
name|R12
decl_stmt|;
name|UINT64
name|R13
decl_stmt|;
name|UINT64
name|R14
decl_stmt|;
name|UINT64
name|R15
decl_stmt|;
block|}
name|EFI_SYSTEM_CONTEXT_X64
typedef|;
end_typedef

begin_comment
comment|///
end_comment

begin_comment
comment|///  Itanium Processor Family Exception types.
end_comment

begin_comment
comment|///
end_comment

begin_define
define|#
directive|define
name|EXCEPT_IPF_VHTP_TRANSLATION
value|0
end_define

begin_define
define|#
directive|define
name|EXCEPT_IPF_INSTRUCTION_TLB
value|1
end_define

begin_define
define|#
directive|define
name|EXCEPT_IPF_DATA_TLB
value|2
end_define

begin_define
define|#
directive|define
name|EXCEPT_IPF_ALT_INSTRUCTION_TLB
value|3
end_define

begin_define
define|#
directive|define
name|EXCEPT_IPF_ALT_DATA_TLB
value|4
end_define

begin_define
define|#
directive|define
name|EXCEPT_IPF_DATA_NESTED_TLB
value|5
end_define

begin_define
define|#
directive|define
name|EXCEPT_IPF_INSTRUCTION_KEY_MISSED
value|6
end_define

begin_define
define|#
directive|define
name|EXCEPT_IPF_DATA_KEY_MISSED
value|7
end_define

begin_define
define|#
directive|define
name|EXCEPT_IPF_DIRTY_BIT
value|8
end_define

begin_define
define|#
directive|define
name|EXCEPT_IPF_INSTRUCTION_ACCESS_BIT
value|9
end_define

begin_define
define|#
directive|define
name|EXCEPT_IPF_DATA_ACCESS_BIT
value|10
end_define

begin_define
define|#
directive|define
name|EXCEPT_IPF_BREAKPOINT
value|11
end_define

begin_define
define|#
directive|define
name|EXCEPT_IPF_EXTERNAL_INTERRUPT
value|12
end_define

begin_comment
comment|//
end_comment

begin_comment
comment|// 13 - 19 reserved
end_comment

begin_comment
comment|//
end_comment

begin_define
define|#
directive|define
name|EXCEPT_IPF_PAGE_NOT_PRESENT
value|20
end_define

begin_define
define|#
directive|define
name|EXCEPT_IPF_KEY_PERMISSION
value|21
end_define

begin_define
define|#
directive|define
name|EXCEPT_IPF_INSTRUCTION_ACCESS_RIGHTS
value|22
end_define

begin_define
define|#
directive|define
name|EXCEPT_IPF_DATA_ACCESS_RIGHTS
value|23
end_define

begin_define
define|#
directive|define
name|EXCEPT_IPF_GENERAL_EXCEPTION
value|24
end_define

begin_define
define|#
directive|define
name|EXCEPT_IPF_DISABLED_FP_REGISTER
value|25
end_define

begin_define
define|#
directive|define
name|EXCEPT_IPF_NAT_CONSUMPTION
value|26
end_define

begin_define
define|#
directive|define
name|EXCEPT_IPF_SPECULATION
value|27
end_define

begin_comment
comment|//
end_comment

begin_comment
comment|// 28 reserved
end_comment

begin_comment
comment|//
end_comment

begin_define
define|#
directive|define
name|EXCEPT_IPF_DEBUG
value|29
end_define

begin_define
define|#
directive|define
name|EXCEPT_IPF_UNALIGNED_REFERENCE
value|30
end_define

begin_define
define|#
directive|define
name|EXCEPT_IPF_UNSUPPORTED_DATA_REFERENCE
value|31
end_define

begin_define
define|#
directive|define
name|EXCEPT_IPF_FP_FAULT
value|32
end_define

begin_define
define|#
directive|define
name|EXCEPT_IPF_FP_TRAP
value|33
end_define

begin_define
define|#
directive|define
name|EXCEPT_IPF_LOWER_PRIVILEGE_TRANSFER_TRAP
value|34
end_define

begin_define
define|#
directive|define
name|EXCEPT_IPF_TAKEN_BRANCH
value|35
end_define

begin_define
define|#
directive|define
name|EXCEPT_IPF_SINGLE_STEP
value|36
end_define

begin_comment
comment|//
end_comment

begin_comment
comment|// 37 - 44 reserved
end_comment

begin_comment
comment|//
end_comment

begin_define
define|#
directive|define
name|EXCEPT_IPF_IA32_EXCEPTION
value|45
end_define

begin_define
define|#
directive|define
name|EXCEPT_IPF_IA32_INTERCEPT
value|46
end_define

begin_define
define|#
directive|define
name|EXCEPT_IPF_IA32_INTERRUPT
value|47
end_define

begin_comment
comment|///
end_comment

begin_comment
comment|///  IPF processor context definition.
end_comment

begin_comment
comment|///
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
comment|//
comment|// The first reserved field is necessary to preserve alignment for the correct
comment|// bits in UNAT and to insure F2 is 16 byte aligned.
comment|//
name|UINT64
name|Reserved
decl_stmt|;
name|UINT64
name|R1
decl_stmt|;
name|UINT64
name|R2
decl_stmt|;
name|UINT64
name|R3
decl_stmt|;
name|UINT64
name|R4
decl_stmt|;
name|UINT64
name|R5
decl_stmt|;
name|UINT64
name|R6
decl_stmt|;
name|UINT64
name|R7
decl_stmt|;
name|UINT64
name|R8
decl_stmt|;
name|UINT64
name|R9
decl_stmt|;
name|UINT64
name|R10
decl_stmt|;
name|UINT64
name|R11
decl_stmt|;
name|UINT64
name|R12
decl_stmt|;
name|UINT64
name|R13
decl_stmt|;
name|UINT64
name|R14
decl_stmt|;
name|UINT64
name|R15
decl_stmt|;
name|UINT64
name|R16
decl_stmt|;
name|UINT64
name|R17
decl_stmt|;
name|UINT64
name|R18
decl_stmt|;
name|UINT64
name|R19
decl_stmt|;
name|UINT64
name|R20
decl_stmt|;
name|UINT64
name|R21
decl_stmt|;
name|UINT64
name|R22
decl_stmt|;
name|UINT64
name|R23
decl_stmt|;
name|UINT64
name|R24
decl_stmt|;
name|UINT64
name|R25
decl_stmt|;
name|UINT64
name|R26
decl_stmt|;
name|UINT64
name|R27
decl_stmt|;
name|UINT64
name|R28
decl_stmt|;
name|UINT64
name|R29
decl_stmt|;
name|UINT64
name|R30
decl_stmt|;
name|UINT64
name|R31
decl_stmt|;
name|UINT64
name|F2
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|F3
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|F4
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|F5
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|F6
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|F7
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|F8
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|F9
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|F10
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|F11
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|F12
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|F13
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|F14
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|F15
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|F16
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|F17
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|F18
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|F19
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|F20
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|F21
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|F22
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|F23
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|F24
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|F25
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|F26
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|F27
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|F28
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|F29
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|F30
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|F31
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|Pr
decl_stmt|;
name|UINT64
name|B0
decl_stmt|;
name|UINT64
name|B1
decl_stmt|;
name|UINT64
name|B2
decl_stmt|;
name|UINT64
name|B3
decl_stmt|;
name|UINT64
name|B4
decl_stmt|;
name|UINT64
name|B5
decl_stmt|;
name|UINT64
name|B6
decl_stmt|;
name|UINT64
name|B7
decl_stmt|;
comment|//
comment|// application registers
comment|//
name|UINT64
name|ArRsc
decl_stmt|;
name|UINT64
name|ArBsp
decl_stmt|;
name|UINT64
name|ArBspstore
decl_stmt|;
name|UINT64
name|ArRnat
decl_stmt|;
name|UINT64
name|ArFcr
decl_stmt|;
name|UINT64
name|ArEflag
decl_stmt|;
name|UINT64
name|ArCsd
decl_stmt|;
name|UINT64
name|ArSsd
decl_stmt|;
name|UINT64
name|ArCflg
decl_stmt|;
name|UINT64
name|ArFsr
decl_stmt|;
name|UINT64
name|ArFir
decl_stmt|;
name|UINT64
name|ArFdr
decl_stmt|;
name|UINT64
name|ArCcv
decl_stmt|;
name|UINT64
name|ArUnat
decl_stmt|;
name|UINT64
name|ArFpsr
decl_stmt|;
name|UINT64
name|ArPfs
decl_stmt|;
name|UINT64
name|ArLc
decl_stmt|;
name|UINT64
name|ArEc
decl_stmt|;
comment|//
comment|// control registers
comment|//
name|UINT64
name|CrDcr
decl_stmt|;
name|UINT64
name|CrItm
decl_stmt|;
name|UINT64
name|CrIva
decl_stmt|;
name|UINT64
name|CrPta
decl_stmt|;
name|UINT64
name|CrIpsr
decl_stmt|;
name|UINT64
name|CrIsr
decl_stmt|;
name|UINT64
name|CrIip
decl_stmt|;
name|UINT64
name|CrIfa
decl_stmt|;
name|UINT64
name|CrItir
decl_stmt|;
name|UINT64
name|CrIipa
decl_stmt|;
name|UINT64
name|CrIfs
decl_stmt|;
name|UINT64
name|CrIim
decl_stmt|;
name|UINT64
name|CrIha
decl_stmt|;
comment|//
comment|// debug registers
comment|//
name|UINT64
name|Dbr0
decl_stmt|;
name|UINT64
name|Dbr1
decl_stmt|;
name|UINT64
name|Dbr2
decl_stmt|;
name|UINT64
name|Dbr3
decl_stmt|;
name|UINT64
name|Dbr4
decl_stmt|;
name|UINT64
name|Dbr5
decl_stmt|;
name|UINT64
name|Dbr6
decl_stmt|;
name|UINT64
name|Dbr7
decl_stmt|;
name|UINT64
name|Ibr0
decl_stmt|;
name|UINT64
name|Ibr1
decl_stmt|;
name|UINT64
name|Ibr2
decl_stmt|;
name|UINT64
name|Ibr3
decl_stmt|;
name|UINT64
name|Ibr4
decl_stmt|;
name|UINT64
name|Ibr5
decl_stmt|;
name|UINT64
name|Ibr6
decl_stmt|;
name|UINT64
name|Ibr7
decl_stmt|;
comment|//
comment|// virtual registers - nat bits for R1-R31
comment|//
name|UINT64
name|IntNat
decl_stmt|;
block|}
name|EFI_SYSTEM_CONTEXT_IPF
typedef|;
end_typedef

begin_comment
comment|///
end_comment

begin_comment
comment|///  EBC processor exception types.
end_comment

begin_comment
comment|///
end_comment

begin_define
define|#
directive|define
name|EXCEPT_EBC_UNDEFINED
value|0
end_define

begin_define
define|#
directive|define
name|EXCEPT_EBC_DIVIDE_ERROR
value|1
end_define

begin_define
define|#
directive|define
name|EXCEPT_EBC_DEBUG
value|2
end_define

begin_define
define|#
directive|define
name|EXCEPT_EBC_BREAKPOINT
value|3
end_define

begin_define
define|#
directive|define
name|EXCEPT_EBC_OVERFLOW
value|4
end_define

begin_define
define|#
directive|define
name|EXCEPT_EBC_INVALID_OPCODE
value|5
end_define

begin_comment
comment|///< Opcode out of range.
end_comment

begin_define
define|#
directive|define
name|EXCEPT_EBC_STACK_FAULT
value|6
end_define

begin_define
define|#
directive|define
name|EXCEPT_EBC_ALIGNMENT_CHECK
value|7
end_define

begin_define
define|#
directive|define
name|EXCEPT_EBC_INSTRUCTION_ENCODING
value|8
end_define

begin_comment
comment|///< Malformed instruction.
end_comment

begin_define
define|#
directive|define
name|EXCEPT_EBC_BAD_BREAK
value|9
end_define

begin_comment
comment|///< BREAK 0 or undefined BREAK.
end_comment

begin_define
define|#
directive|define
name|EXCEPT_EBC_STEP
value|10
end_define

begin_comment
comment|///< To support debug stepping.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// For coding convenience, define the maximum valid EBC exception.
end_comment

begin_comment
comment|///
end_comment

begin_define
define|#
directive|define
name|MAX_EBC_EXCEPTION
value|EXCEPT_EBC_STEP
end_define

begin_comment
comment|///
end_comment

begin_comment
comment|///  EBC processor context definition.
end_comment

begin_comment
comment|///
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|UINT64
name|R0
decl_stmt|;
name|UINT64
name|R1
decl_stmt|;
name|UINT64
name|R2
decl_stmt|;
name|UINT64
name|R3
decl_stmt|;
name|UINT64
name|R4
decl_stmt|;
name|UINT64
name|R5
decl_stmt|;
name|UINT64
name|R6
decl_stmt|;
name|UINT64
name|R7
decl_stmt|;
name|UINT64
name|Flags
decl_stmt|;
name|UINT64
name|ControlFlags
decl_stmt|;
name|UINT64
name|Ip
decl_stmt|;
block|}
name|EFI_SYSTEM_CONTEXT_EBC
typedef|;
end_typedef

begin_comment
comment|///
end_comment

begin_comment
comment|///  ARM processor exception types.
end_comment

begin_comment
comment|///
end_comment

begin_define
define|#
directive|define
name|EXCEPT_ARM_RESET
value|0
end_define

begin_define
define|#
directive|define
name|EXCEPT_ARM_UNDEFINED_INSTRUCTION
value|1
end_define

begin_define
define|#
directive|define
name|EXCEPT_ARM_SOFTWARE_INTERRUPT
value|2
end_define

begin_define
define|#
directive|define
name|EXCEPT_ARM_PREFETCH_ABORT
value|3
end_define

begin_define
define|#
directive|define
name|EXCEPT_ARM_DATA_ABORT
value|4
end_define

begin_define
define|#
directive|define
name|EXCEPT_ARM_RESERVED
value|5
end_define

begin_define
define|#
directive|define
name|EXCEPT_ARM_IRQ
value|6
end_define

begin_define
define|#
directive|define
name|EXCEPT_ARM_FIQ
value|7
end_define

begin_comment
comment|///
end_comment

begin_comment
comment|/// For coding convenience, define the maximum valid ARM exception.
end_comment

begin_comment
comment|///
end_comment

begin_define
define|#
directive|define
name|MAX_ARM_EXCEPTION
value|EXCEPT_ARM_FIQ
end_define

begin_comment
comment|///
end_comment

begin_comment
comment|///  ARM processor context definition.
end_comment

begin_comment
comment|///
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|UINT32
name|R0
decl_stmt|;
name|UINT32
name|R1
decl_stmt|;
name|UINT32
name|R2
decl_stmt|;
name|UINT32
name|R3
decl_stmt|;
name|UINT32
name|R4
decl_stmt|;
name|UINT32
name|R5
decl_stmt|;
name|UINT32
name|R6
decl_stmt|;
name|UINT32
name|R7
decl_stmt|;
name|UINT32
name|R8
decl_stmt|;
name|UINT32
name|R9
decl_stmt|;
name|UINT32
name|R10
decl_stmt|;
name|UINT32
name|R11
decl_stmt|;
name|UINT32
name|R12
decl_stmt|;
name|UINT32
name|SP
decl_stmt|;
name|UINT32
name|LR
decl_stmt|;
name|UINT32
name|PC
decl_stmt|;
name|UINT32
name|CPSR
decl_stmt|;
name|UINT32
name|DFSR
decl_stmt|;
name|UINT32
name|DFAR
decl_stmt|;
name|UINT32
name|IFSR
decl_stmt|;
name|UINT32
name|IFAR
decl_stmt|;
block|}
name|EFI_SYSTEM_CONTEXT_ARM
typedef|;
end_typedef

begin_comment
comment|///
end_comment

begin_comment
comment|///  AARCH64 processor exception types.
end_comment

begin_comment
comment|///
end_comment

begin_define
define|#
directive|define
name|EXCEPT_AARCH64_SYNCHRONOUS_EXCEPTIONS
value|0
end_define

begin_define
define|#
directive|define
name|EXCEPT_AARCH64_IRQ
value|1
end_define

begin_define
define|#
directive|define
name|EXCEPT_AARCH64_FIQ
value|2
end_define

begin_define
define|#
directive|define
name|EXCEPT_AARCH64_SERROR
value|3
end_define

begin_comment
comment|///
end_comment

begin_comment
comment|/// For coding convenience, define the maximum valid ARM exception.
end_comment

begin_comment
comment|///
end_comment

begin_define
define|#
directive|define
name|MAX_AARCH64_EXCEPTION
value|EXCEPT_AARCH64_SERROR
end_define

begin_typedef
typedef|typedef
struct|struct
block|{
comment|// General Purpose Registers
name|UINT64
name|X0
decl_stmt|;
name|UINT64
name|X1
decl_stmt|;
name|UINT64
name|X2
decl_stmt|;
name|UINT64
name|X3
decl_stmt|;
name|UINT64
name|X4
decl_stmt|;
name|UINT64
name|X5
decl_stmt|;
name|UINT64
name|X6
decl_stmt|;
name|UINT64
name|X7
decl_stmt|;
name|UINT64
name|X8
decl_stmt|;
name|UINT64
name|X9
decl_stmt|;
name|UINT64
name|X10
decl_stmt|;
name|UINT64
name|X11
decl_stmt|;
name|UINT64
name|X12
decl_stmt|;
name|UINT64
name|X13
decl_stmt|;
name|UINT64
name|X14
decl_stmt|;
name|UINT64
name|X15
decl_stmt|;
name|UINT64
name|X16
decl_stmt|;
name|UINT64
name|X17
decl_stmt|;
name|UINT64
name|X18
decl_stmt|;
name|UINT64
name|X19
decl_stmt|;
name|UINT64
name|X20
decl_stmt|;
name|UINT64
name|X21
decl_stmt|;
name|UINT64
name|X22
decl_stmt|;
name|UINT64
name|X23
decl_stmt|;
name|UINT64
name|X24
decl_stmt|;
name|UINT64
name|X25
decl_stmt|;
name|UINT64
name|X26
decl_stmt|;
name|UINT64
name|X27
decl_stmt|;
name|UINT64
name|X28
decl_stmt|;
name|UINT64
name|FP
decl_stmt|;
comment|// x29 - Frame pointer
name|UINT64
name|LR
decl_stmt|;
comment|// x30 - Link Register
name|UINT64
name|SP
decl_stmt|;
comment|// x31 - Stack pointer
comment|// FP/SIMD Registers
name|UINT64
name|V0
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|V1
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|V2
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|V3
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|V4
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|V5
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|V6
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|V7
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|V8
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|V9
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|V10
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|V11
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|V12
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|V13
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|V14
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|V15
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|V16
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|V17
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|V18
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|V19
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|V20
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|V21
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|V22
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|V23
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|V24
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|V25
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|V26
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|V27
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|V28
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|V29
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|V30
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|V31
index|[
literal|2
index|]
decl_stmt|;
name|UINT64
name|ELR
decl_stmt|;
comment|// Exception Link Register
name|UINT64
name|SPSR
decl_stmt|;
comment|// Saved Processor Status Register
name|UINT64
name|FPSR
decl_stmt|;
comment|// Floating Point Status Register
name|UINT64
name|ESR
decl_stmt|;
comment|// Exception syndrome register
name|UINT64
name|FAR
decl_stmt|;
comment|// Fault Address Register
block|}
name|EFI_SYSTEM_CONTEXT_AARCH64
typedef|;
end_typedef

begin_comment
comment|///
end_comment

begin_comment
comment|/// Universal EFI_SYSTEM_CONTEXT definition.
end_comment

begin_comment
comment|///
end_comment

begin_typedef
typedef|typedef
union|union
block|{
name|EFI_SYSTEM_CONTEXT_EBC
modifier|*
name|SystemContextEbc
decl_stmt|;
name|EFI_SYSTEM_CONTEXT_IA32
modifier|*
name|SystemContextIa32
decl_stmt|;
name|EFI_SYSTEM_CONTEXT_X64
modifier|*
name|SystemContextX64
decl_stmt|;
name|EFI_SYSTEM_CONTEXT_IPF
modifier|*
name|SystemContextIpf
decl_stmt|;
name|EFI_SYSTEM_CONTEXT_ARM
modifier|*
name|SystemContextArm
decl_stmt|;
name|EFI_SYSTEM_CONTEXT_AARCH64
modifier|*
name|SystemContextAArch64
decl_stmt|;
block|}
name|EFI_SYSTEM_CONTEXT
typedef|;
end_typedef

begin_comment
comment|//
end_comment

begin_comment
comment|// DebugSupport callback function prototypes
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|/**                                                                    Registers and enables an exception callback function for the specified exception.        @param  ExceptionType         Exception types in EBC, IA-32, x64, or IPF.   @param  SystemContext         Exception content.                                     **/
end_comment

begin_typedef
typedef|typedef
name|VOID
function_decl|(
name|EFIAPI
modifier|*
name|EFI_EXCEPTION_CALLBACK
function_decl|)
parameter_list|(
name|IN
name|EFI_EXCEPTION_TYPE
name|ExceptionType
parameter_list|,
name|IN
name|OUT
name|EFI_SYSTEM_CONTEXT
name|SystemContext
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/**                                                                    Registers and enables the on-target debug agent's periodic entry point.          @param  SystemContext         Exception content.                                     **/
end_comment

begin_typedef
typedef|typedef
name|VOID
function_decl|(
name|EFIAPI
modifier|*
name|EFI_PERIODIC_CALLBACK
function_decl|)
parameter_list|(
name|IN
name|OUT
name|EFI_SYSTEM_CONTEXT
name|SystemContext
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|///
end_comment

begin_comment
comment|/// Machine type definition
end_comment

begin_comment
comment|///
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|IsaIa32
init|=
name|IMAGE_FILE_MACHINE_I386
block|,
comment|///< 0x014C
name|IsaX64
init|=
name|IMAGE_FILE_MACHINE_X64
block|,
comment|///< 0x8664
name|IsaIpf
init|=
name|IMAGE_FILE_MACHINE_IA64
block|,
comment|///< 0x0200
name|IsaEbc
init|=
name|IMAGE_FILE_MACHINE_EBC
block|,
comment|///< 0x0EBC
name|IsaArm
init|=
name|IMAGE_FILE_MACHINE_ARMTHUMB_MIXED
block|,
comment|///< 0x01c2
name|IsaAArch64
init|=
name|IMAGE_FILE_MACHINE_ARM64
comment|///< 0xAA64
block|}
name|EFI_INSTRUCTION_SET_ARCHITECTURE
typedef|;
end_typedef

begin_comment
comment|//
end_comment

begin_comment
comment|// DebugSupport member function definitions
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|/**                                                                    Returns the maximum value that may be used for the ProcessorIndex parameter in   RegisterPeriodicCallback() and RegisterExceptionCallback().                           @param  This                  A pointer to the EFI_DEBUG_SUPPORT_PROTOCOL instance.   @param  MaxProcessorIndex     Pointer to a caller-allocated UINTN in which the maximum supported                                 processor index is returned.                                                                          @retval EFI_SUCCESS           The function completed successfully.                                       **/
end_comment

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_GET_MAXIMUM_PROCESSOR_INDEX
function_decl|)
parameter_list|(
name|IN
name|EFI_DEBUG_SUPPORT_PROTOCOL
modifier|*
name|This
parameter_list|,
name|OUT
name|UINTN
modifier|*
name|MaxProcessorIndex
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/**                                                                    Registers a function to be called back periodically in interrupt context.        @param  This                  A pointer to the EFI_DEBUG_SUPPORT_PROTOCOL instance.   @param  ProcessorIndex        Specifies which processor the callback function applies to.   @param  PeriodicCallback      A pointer to a function of type PERIODIC_CALLBACK that is the main                                 periodic entry point of the debug agent.                                    @retval EFI_SUCCESS           The function completed successfully.     @retval EFI_ALREADY_STARTED   Non-NULL PeriodicCallback parameter when a callback                                 function was previously registered.                   @retval EFI_OUT_OF_RESOURCES  System has insufficient memory resources to register new callback                                                                function.                                                                                             **/
end_comment

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_REGISTER_PERIODIC_CALLBACK
function_decl|)
parameter_list|(
name|IN
name|EFI_DEBUG_SUPPORT_PROTOCOL
modifier|*
name|This
parameter_list|,
name|IN
name|UINTN
name|ProcessorIndex
parameter_list|,
name|IN
name|EFI_PERIODIC_CALLBACK
name|PeriodicCallback
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/**                                                                    Registers a function to be called when a given processor exception occurs.        @param  This                  A pointer to the EFI_DEBUG_SUPPORT_PROTOCOL instance.   @param  ProcessorIndex        Specifies which processor the callback function applies to.   @param  ExceptionCallback     A pointer to a function of type EXCEPTION_CALLBACK that is called                                 when the processor exception specified by ExceptionType occurs.     @param  ExceptionType         Specifies which processor exception to hook.                                                           @retval EFI_SUCCESS           The function completed successfully.     @retval EFI_ALREADY_STARTED   Non-NULL PeriodicCallback parameter when a callback                                 function was previously registered.                   @retval EFI_OUT_OF_RESOURCES  System has insufficient memory resources to register new callback                                                                function.                                                                                             **/
end_comment

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_REGISTER_EXCEPTION_CALLBACK
function_decl|)
parameter_list|(
name|IN
name|EFI_DEBUG_SUPPORT_PROTOCOL
modifier|*
name|This
parameter_list|,
name|IN
name|UINTN
name|ProcessorIndex
parameter_list|,
name|IN
name|EFI_EXCEPTION_CALLBACK
name|ExceptionCallback
parameter_list|,
name|IN
name|EFI_EXCEPTION_TYPE
name|ExceptionType
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/**                                                                    Invalidates processor instruction cache for a memory range. Subsequent execution in this range   causes a fresh memory fetch to retrieve code to be executed.                                          @param  This                  A pointer to the EFI_DEBUG_SUPPORT_PROTOCOL instance.   @param  ProcessorIndex        Specifies which processor's instruction cache is to be invalidated.   @param  Start                 Specifies the physical base of the memory range to be invalidated.                                   @param  Length                Specifies the minimum number of bytes in the processor's instruction                                 cache to invalidate.                                                                                     @retval EFI_SUCCESS           The function completed successfully.                                    **/
end_comment

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_INVALIDATE_INSTRUCTION_CACHE
function_decl|)
parameter_list|(
name|IN
name|EFI_DEBUG_SUPPORT_PROTOCOL
modifier|*
name|This
parameter_list|,
name|IN
name|UINTN
name|ProcessorIndex
parameter_list|,
name|IN
name|VOID
modifier|*
name|Start
parameter_list|,
name|IN
name|UINT64
name|Length
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|///
end_comment

begin_comment
comment|/// This protocol provides the services to allow the debug agent to register
end_comment

begin_comment
comment|/// callback functions that are called either periodically or when specific
end_comment

begin_comment
comment|/// processor exceptions occur.
end_comment

begin_comment
comment|///
end_comment

begin_struct
struct|struct
name|_EFI_DEBUG_SUPPORT_PROTOCOL
block|{
comment|///
comment|/// Declares the processor architecture for this instance of the EFI Debug Support protocol.
comment|///
name|EFI_INSTRUCTION_SET_ARCHITECTURE
name|Isa
decl_stmt|;
name|EFI_GET_MAXIMUM_PROCESSOR_INDEX
name|GetMaximumProcessorIndex
decl_stmt|;
name|EFI_REGISTER_PERIODIC_CALLBACK
name|RegisterPeriodicCallback
decl_stmt|;
name|EFI_REGISTER_EXCEPTION_CALLBACK
name|RegisterExceptionCallback
decl_stmt|;
name|EFI_INVALIDATE_INSTRUCTION_CACHE
name|InvalidateInstructionCache
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|EFI_GUID
name|gEfiDebugSupportProtocolGuid
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

