begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/** @file   UGA IO protocol from the EFI 1.10 specification.    Abstraction of a very simple graphics device.      Copyright (c) 2006 - 2008, Intel Corporation. All rights reserved.<BR>   This program and the accompanying materials                             are licensed and made available under the terms and conditions of the BSD License            which accompanies this distribution.  The full text of the license may be found at           http://opensource.org/licenses/bsd-license.php                                                THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,                        WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.               **/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__UGA_IO_H__
end_ifndef

begin_define
define|#
directive|define
name|__UGA_IO_H__
end_define

begin_define
define|#
directive|define
name|EFI_UGA_IO_PROTOCOL_GUID
define|\
value|{ 0x61a4d49e, 0x6f68, 0x4f1b, { 0xb9, 0x22, 0xa8, 0x6e, 0xed, 0xb, 0x7, 0xa2 } }
end_define

begin_typedef
typedef|typedef
name|struct
name|_EFI_UGA_IO_PROTOCOL
name|EFI_UGA_IO_PROTOCOL
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|UINT32
name|UGA_STATUS
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|UgaDtParentBus
init|=
literal|1
block|,
name|UgaDtGraphicsController
block|,
name|UgaDtOutputController
block|,
name|UgaDtOutputPort
block|,
name|UgaDtOther
block|}
name|UGA_DEVICE_TYPE
operator|,
typedef|*
name|PUGA_DEVICE_TYPE
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|UINT32
name|UGA_DEVICE_ID
typedef|,
modifier|*
name|PUGA_DEVICE_ID
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|UGA_DEVICE_TYPE
name|deviceType
decl_stmt|;
name|UGA_DEVICE_ID
name|deviceId
decl_stmt|;
name|UINT32
name|ui32DeviceContextSize
decl_stmt|;
name|UINT32
name|ui32SharedContextSize
decl_stmt|;
block|}
name|UGA_DEVICE_DATA
operator|,
typedef|*
name|PUGA_DEVICE_DATA
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_UGA_DEVICE
block|{
name|VOID
modifier|*
name|pvDeviceContext
decl_stmt|;
name|VOID
modifier|*
name|pvSharedContext
decl_stmt|;
name|VOID
modifier|*
name|pvRunTimeContext
decl_stmt|;
name|struct
name|_UGA_DEVICE
modifier|*
name|pParentDevice
decl_stmt|;
name|VOID
modifier|*
name|pvBusIoServices
decl_stmt|;
name|VOID
modifier|*
name|pvStdIoServices
decl_stmt|;
name|UGA_DEVICE_DATA
name|deviceData
decl_stmt|;
block|}
name|UGA_DEVICE
operator|,
typedef|*
name|PUGA_DEVICE
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|UgaIoGetVersion
init|=
literal|1
block|,
name|UgaIoGetChildDevice
block|,
name|UgaIoStartDevice
block|,
name|UgaIoStopDevice
block|,
name|UgaIoFlushDevice
block|,
name|UgaIoResetDevice
block|,
name|UgaIoGetDeviceState
block|,
name|UgaIoSetDeviceState
block|,
name|UgaIoSetPowerState
block|,
name|UgaIoGetMemoryConfiguration
block|,
name|UgaIoSetVideoMode
block|,
name|UgaIoCopyRectangle
block|,
name|UgaIoGetEdidSegment
block|,
name|UgaIoDeviceChannelOpen
block|,
name|UgaIoDeviceChannelClose
block|,
name|UgaIoDeviceChannelRead
block|,
name|UgaIoDeviceChannelWrite
block|,
name|UgaIoGetPersistentDataSize
block|,
name|UgaIoGetPersistentData
block|,
name|UgaIoSetPersistentData
block|,
name|UgaIoGetDevicePropertySize
block|,
name|UgaIoGetDeviceProperty
block|,
name|UgaIoBtPrivateInterface
block|}
name|UGA_IO_REQUEST_CODE
operator|,
typedef|*
name|PUGA_IO_REQUEST_CODE
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|IN
name|UGA_IO_REQUEST_CODE
name|ioRequestCode
decl_stmt|;
name|IN
name|VOID
modifier|*
name|pvInBuffer
decl_stmt|;
name|IN
name|UINT64
name|ui64InBufferSize
decl_stmt|;
name|OUT
name|VOID
modifier|*
name|pvOutBuffer
decl_stmt|;
name|IN
name|UINT64
name|ui64OutBufferSize
decl_stmt|;
name|OUT
name|UINT64
name|ui64BytesReturned
decl_stmt|;
block|}
name|UGA_IO_REQUEST
operator|,
typedef|*
name|PUGA_IO_REQUEST
typedef|;
end_typedef

begin_comment
comment|/**   Dynamically allocate storage for a child UGA_DEVICE.    @param[in]     This            The EFI_UGA_IO_PROTOCOL instance.    @param[in]     ParentDevice    ParentDevice specifies a pointer to the parent device of Device.   @param[in]     DeviceData      A pointer to UGA_DEVICE_DATA returned from a call to DispatchService()                                  with a UGA_DEVICE of Parent and an IoRequest of type UgaIoGetChildDevice.         @param[in]     RunTimeContext  Context to associate with Device.     @param[out]    Device          The Device returns a dynamically allocated child UGA_DEVICE object                                  for ParentDevice. The caller is responsible for deleting Device.                                      @retval  EFI_SUCCESS           Device was returned.   @retval  EFI_INVALID_PARAMETER One of the arguments was not valid.   @retval  EFI_DEVICE_ERROR      The device had an error and could not complete the request.  **/
end_comment

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_UGA_IO_PROTOCOL_CREATE_DEVICE
function_decl|)
parameter_list|(
name|IN
name|EFI_UGA_IO_PROTOCOL
modifier|*
name|This
parameter_list|,
name|IN
name|UGA_DEVICE
modifier|*
name|ParentDevice
parameter_list|,
name|IN
name|UGA_DEVICE_DATA
modifier|*
name|DeviceData
parameter_list|,
name|IN
name|VOID
modifier|*
name|RunTimeContext
parameter_list|,
name|OUT
name|UGA_DEVICE
modifier|*
modifier|*
name|Device
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/**   Delete a dynamically allocated child UGA_DEVICE object that was allocated via CreateDevice().    @param[in]     This            The EFI_UGA_IO_PROTOCOL instance. Type EFI_UGA_IO_PROTOCOL is                                   defined in Section 10.7.   @param[in]     Device          The Device points to a UGA_DEVICE object that was dynamically                                  allocated via a CreateDevice() call.                                      @retval  EFI_SUCCESS           Device was returned.   @retval  EFI_INVALID_PARAMETER The Device was not allocated via CreateDevice().  **/
end_comment

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_UGA_IO_PROTOCOL_DELETE_DEVICE
function_decl|)
parameter_list|(
name|IN
name|EFI_UGA_IO_PROTOCOL
modifier|*
name|This
parameter_list|,
name|IN
name|UGA_DEVICE
modifier|*
name|Device
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/**   This is the main UGA service dispatch routine for all UGA_IO_REQUEST s.    @param pDevice pDevice specifies a pointer to a device object associated with a                   device enumerated by a pIoRequest->ioRequestCode of type                   UgaIoGetChildDevice. The root device for the EFI_UGA_IO_PROTOCOL                   is represented by pDevice being set to NULL.    @param pIoRequest                   pIoRequest points to a caller allocated buffer that contains data                  defined by pIoRequest->ioRequestCode. See Related Definitions for                  a definition of UGA_IO_REQUEST_CODE s and their associated data                   structures.    @return UGA_STATUS  **/
end_comment

begin_typedef
typedef|typedef
name|UGA_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|PUGA_FW_SERVICE_DISPATCH
function_decl|)
parameter_list|(
name|IN
name|PUGA_DEVICE
name|pDevice
parameter_list|,
name|IN
name|OUT
name|PUGA_IO_REQUEST
name|pIoRequest
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|///
end_comment

begin_comment
comment|/// Provides a basic abstraction to send I/O requests to the graphics device and any of its children.
end_comment

begin_comment
comment|///
end_comment

begin_struct
struct|struct
name|_EFI_UGA_IO_PROTOCOL
block|{
name|EFI_UGA_IO_PROTOCOL_CREATE_DEVICE
name|CreateDevice
decl_stmt|;
name|EFI_UGA_IO_PROTOCOL_DELETE_DEVICE
name|DeleteDevice
decl_stmt|;
name|PUGA_FW_SERVICE_DISPATCH
name|DispatchService
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|EFI_GUID
name|gEfiUgaIoProtocolGuid
decl_stmt|;
end_decl_stmt

begin_comment
comment|//
end_comment

begin_comment
comment|// Data structure that is stored in the EFI Configuration Table with the
end_comment

begin_comment
comment|// EFI_UGA_IO_PROTOCOL_GUID.  The option ROMs listed in this table may have
end_comment

begin_comment
comment|// EBC UGA drivers.
end_comment

begin_comment
comment|//
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|UINT32
name|Version
decl_stmt|;
name|UINT32
name|HeaderSize
decl_stmt|;
name|UINT32
name|SizeOfEntries
decl_stmt|;
name|UINT32
name|NumberOfEntries
decl_stmt|;
block|}
name|EFI_DRIVER_OS_HANDOFF_HEADER
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|EfiUgaDriverFromPciRom
block|,
name|EfiUgaDriverFromSystem
block|,
name|EfiDriverHandoffMax
block|}
name|EFI_DRIVER_HANOFF_ENUM
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|EFI_DRIVER_HANOFF_ENUM
name|Type
decl_stmt|;
name|EFI_DEVICE_PATH_PROTOCOL
modifier|*
name|DevicePath
decl_stmt|;
name|VOID
modifier|*
name|PciRomImage
decl_stmt|;
name|UINT64
name|PciRomSize
decl_stmt|;
block|}
name|EFI_DRIVER_OS_HANDOFF
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

end_unit

