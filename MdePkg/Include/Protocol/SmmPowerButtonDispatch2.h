begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/** @file   SMM Power Button Dispatch2 Protocol as defined in PI 1.1 Specification   Volume 4 System Management Mode Core Interface.    This protocol provides the parent dispatch service for the power button SMI source generator.    Copyright (c) 2009 - 2010, Intel Corporation. All rights reserved.<BR>   This program and the accompanying materials   are licensed and made available under the terms and conditions of the BSD License   which accompanies this distribution.  The full text of the license may be found at   http://opensource.org/licenses/bsd-license.php    THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,   WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.    @par Revision Reference:   This protocol is from PI Version 1.1.  **/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SMM_POWER_BUTTON_DISPATCH2_H_
end_ifndef

begin_define
define|#
directive|define
name|_SMM_POWER_BUTTON_DISPATCH2_H_
end_define

begin_include
include|#
directive|include
file|<Pi/PiSmmCis.h>
end_include

begin_define
define|#
directive|define
name|EFI_SMM_POWER_BUTTON_DISPATCH2_PROTOCOL_GUID
define|\
value|{ \     0x1b1183fa, 0x1823, 0x46a7, {0x88, 0x72, 0x9c, 0x57, 0x87, 0x55, 0x40, 0x9d } \   }
end_define

begin_comment
comment|///
end_comment

begin_comment
comment|/// Power Button phases.
end_comment

begin_comment
comment|///
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|EfiPowerButtonEntry
block|,
name|EfiPowerButtonExit
block|,
name|EfiPowerButtonMax
block|}
name|EFI_POWER_BUTTON_PHASE
typedef|;
end_typedef

begin_comment
comment|///
end_comment

begin_comment
comment|/// The dispatch function's context.
end_comment

begin_comment
comment|///
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
comment|///
comment|/// Designates whether this handler should be invoked upon entry or exit.
comment|///
name|EFI_POWER_BUTTON_PHASE
name|Phase
decl_stmt|;
block|}
name|EFI_SMM_POWER_BUTTON_REGISTER_CONTEXT
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|_EFI_SMM_POWER_BUTTON_DISPATCH2_PROTOCOL
name|EFI_SMM_POWER_BUTTON_DISPATCH2_PROTOCOL
typedef|;
end_typedef

begin_comment
comment|/**   Provides the parent dispatch service for a power button event.    This service registers a function (DispatchFunction) which will be called when an SMI is    generated because the power button was pressed or released, as specified by RegisterContext.    On return, DispatchHandle contains a unique handle which may be used later to unregister the    function using UnRegister().   The DispatchFunction will be called with Context set to the same value as was passed into    this function in RegisterContext and with CommBuffer and CommBufferSize set to NULL.    @param[in]  This               Pointer to the EFI_SMM_POWER_BUTTON_DISPATCH2_PROTOCOL instance.   @param[in]  DispatchFunction   Function to register for handler when power button is pressed or released.   @param[in]  RegisterContext    Pointer to the dispatch function's context. The caller fills in this context                                  before calling the Register() function to indicate to the Register() function                                  the power button SMI phase for which the dispatch function should be invoked.   @param[out] DispatchHandle     Handle generated by the dispatcher to track the function instance.     @retval EFI_SUCCESS            The dispatch function has been successfully                                  registered and the SMI source has been enabled.   @retval EFI_DEVICE_ERROR       The driver was unable to enable the SMI source.   @retval EFI_INVALID_PARAMETER  RegisterContext is invalid. The power button input value                                  is not within valid range.   @retval EFI_OUT_OF_RESOURCES   There is not enough memory (system or SMM) to manage this child. **/
end_comment

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_SMM_POWER_BUTTON_REGISTER2
function_decl|)
parameter_list|(
name|IN
name|CONST
name|EFI_SMM_POWER_BUTTON_DISPATCH2_PROTOCOL
modifier|*
name|This
parameter_list|,
name|IN
name|EFI_SMM_HANDLER_ENTRY_POINT2
name|DispatchFunction
parameter_list|,
name|IN
name|EFI_SMM_POWER_BUTTON_REGISTER_CONTEXT
modifier|*
name|RegisterContext
parameter_list|,
name|OUT
name|EFI_HANDLE
modifier|*
name|DispatchHandle
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/**   Unregisters a power-button service.    This service removes the handler associated with DispatchHandle so that it will no longer be    called when the standby button is pressed or released.     @param[in] This                Pointer to the EFI_SMM_POWER_BUTTON_DISPATCH2_PROTOCOL instance.   @param[in] DispatchHandle      Handle of the service to remove.    @retval EFI_SUCCESS            The service has been successfully removed.   @retval EFI_INVALID_PARAMETER  The DispatchHandle was not valid. **/
end_comment

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_SMM_POWER_BUTTON_UNREGISTER2
function_decl|)
parameter_list|(
name|IN
name|CONST
name|EFI_SMM_POWER_BUTTON_DISPATCH2_PROTOCOL
modifier|*
name|This
parameter_list|,
name|IN
name|EFI_HANDLE
name|DispatchHandle
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|///
end_comment

begin_comment
comment|/// Interface structure for the SMM Power Button Dispatch2 Protocol.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// This protocol provides the parent dispatch service for the power button SMI source generator.
end_comment

begin_comment
comment|///
end_comment

begin_struct
struct|struct
name|_EFI_SMM_POWER_BUTTON_DISPATCH2_PROTOCOL
block|{
name|EFI_SMM_POWER_BUTTON_REGISTER2
name|Register
decl_stmt|;
name|EFI_SMM_POWER_BUTTON_UNREGISTER2
name|UnRegister
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|EFI_GUID
name|gEfiSmmPowerButtonDispatch2ProtocolGuid
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

