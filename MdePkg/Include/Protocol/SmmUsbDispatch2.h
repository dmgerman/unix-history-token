begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/** @file   SMM USB Dispatch2 Protocol as defined in PI 1.1 Specification   Volume 4 System Management Mode Core Interface.    Provides the parent dispatch service for the USB SMI source generator.    Copyright (c) 2009 - 2010, Intel Corporation. All rights reserved.<BR>   This program and the accompanying materials   are licensed and made available under the terms and conditions of the BSD License   which accompanies this distribution.  The full text of the license may be found at   http://opensource.org/licenses/bsd-license.php    THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,   WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.    @par Revision Reference:   This protocol is from PI Version 1.1.  **/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SMM_USB_DISPATCH2_H_
end_ifndef

begin_define
define|#
directive|define
name|_SMM_USB_DISPATCH2_H_
end_define

begin_include
include|#
directive|include
file|<Pi/PiSmmCis.h>
end_include

begin_define
define|#
directive|define
name|EFI_SMM_USB_DISPATCH2_PROTOCOL_GUID
define|\
value|{ \     0xee9b8d90, 0xc5a6, 0x40a2, {0xbd, 0xe2, 0x52, 0x55, 0x8d, 0x33, 0xcc, 0xa1 } \   }
end_define

begin_comment
comment|///
end_comment

begin_comment
comment|/// USB SMI event types
end_comment

begin_comment
comment|///
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|UsbLegacy
block|,
name|UsbWake
block|}
name|EFI_USB_SMI_TYPE
typedef|;
end_typedef

begin_comment
comment|///
end_comment

begin_comment
comment|/// The dispatch function's context.
end_comment

begin_comment
comment|///
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
comment|///
comment|/// Describes whether this child handler will be invoked in response to a USB legacy
comment|/// emulation event, such as port-trap on the PS/2* keyboard control registers, or to a
comment|/// USB wake event, such as resumption from a sleep state.
comment|///
name|EFI_USB_SMI_TYPE
name|Type
decl_stmt|;
comment|///
comment|/// The device path is part of the context structure and describes the location of the
comment|/// particular USB host controller in the system for which this register event will occur.
comment|/// This location is important because of the possible integration of several USB host
comment|/// controllers in a system.
comment|///
name|EFI_DEVICE_PATH_PROTOCOL
modifier|*
name|Device
decl_stmt|;
block|}
name|EFI_SMM_USB_REGISTER_CONTEXT
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|_EFI_SMM_USB_DISPATCH2_PROTOCOL
name|EFI_SMM_USB_DISPATCH2_PROTOCOL
typedef|;
end_typedef

begin_comment
comment|/**   Provides the parent dispatch service for the USB SMI source generator.    This service registers a function (DispatchFunction) which will be called when the USB-   related SMI specified by RegisterContext has occurred. On return, DispatchHandle    contains a unique handle which may be used later to unregister the function using UnRegister().   The DispatchFunction will be called with Context set to the same value as was passed into    this function in RegisterContext and with CommBuffer containing NULL and    CommBufferSize containing zero.    @param[in]  This               Pointer to the EFI_SMM_USB_DISPATCH2_PROTOCOL instance.   @param[in]  DispatchFunction   Function to register for handler when a USB-related SMI occurs.    @param[in]  RegisterContext    Pointer to the dispatch function's context.                                  The caller fills this context in before calling                                  the register function to indicate to the register                                  function the USB SMI types for which the dispatch                                  function should be invoked.   @param[out] DispatchHandle     Handle generated by the dispatcher to track the function instance.    @retval EFI_SUCCESS            The dispatch function has been successfully                                  registered and the SMI source has been enabled.   @retval EFI_DEVICE_ERROR       The driver was unable to enable the SMI source.   @retval EFI_INVALID_PARAMETER  RegisterContext is invalid. The USB SMI type                                  is not within valid range.   @retval EFI_OUT_OF_RESOURCES   There is not enough memory (system or SMM) to manage this child. **/
end_comment

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_SMM_USB_REGISTER2
function_decl|)
parameter_list|(
name|IN
name|CONST
name|EFI_SMM_USB_DISPATCH2_PROTOCOL
modifier|*
name|This
parameter_list|,
name|IN
name|EFI_SMM_HANDLER_ENTRY_POINT2
name|DispatchFunction
parameter_list|,
name|IN
name|CONST
name|EFI_SMM_USB_REGISTER_CONTEXT
modifier|*
name|RegisterContext
parameter_list|,
name|OUT
name|EFI_HANDLE
modifier|*
name|DispatchHandle
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/**   Unregisters a USB service.    This service removes the handler associated with DispatchHandle so that it will no longer be    called when the USB event occurs.    @param[in]  This               Pointer to the EFI_SMM_USB_DISPATCH2_PROTOCOL instance.   @param[in]  DispatchHandle     Handle of the service to remove.     @retval EFI_SUCCESS            The dispatch function has been successfully                                  unregistered and the SMI source has been disabled                                  if there are no other registered child dispatch                                  functions for this SMI source.   @retval EFI_INVALID_PARAMETER  The DispatchHandle was not valid. **/
end_comment

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_SMM_USB_UNREGISTER2
function_decl|)
parameter_list|(
name|IN
name|CONST
name|EFI_SMM_USB_DISPATCH2_PROTOCOL
modifier|*
name|This
parameter_list|,
name|IN
name|EFI_HANDLE
name|DispatchHandle
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|///
end_comment

begin_comment
comment|/// Interface structure for the SMM USB SMI Dispatch2 Protocol
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// This protocol provides the parent dispatch service for the USB SMI source generator.
end_comment

begin_comment
comment|///
end_comment

begin_struct
struct|struct
name|_EFI_SMM_USB_DISPATCH2_PROTOCOL
block|{
name|EFI_SMM_USB_REGISTER2
name|Register
decl_stmt|;
name|EFI_SMM_USB_UNREGISTER2
name|UnRegister
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|EFI_GUID
name|gEfiSmmUsbDispatch2ProtocolGuid
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

