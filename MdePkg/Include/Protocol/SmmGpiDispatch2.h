begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/** @file   SMM General Purpose Input (GPI) Dispatch2 Protocol as defined in PI 1.1 Specification   Volume 4 System Management Mode Core Interface.    This protocol provides the parent dispatch service for the General Purpose Input    (GPI) SMI source generator.    The EFI_SMM_GPI_DISPATCH2_PROTOCOL provides the ability to install child handlers for the    given event types.  Several inputs can be enabled.  This purpose of this interface is to generate an    SMI in response to any of these inputs having a true value provided.    Copyright (c) 2009 - 2015, Intel Corporation. All rights reserved.<BR>   This program and the accompanying materials   are licensed and made available under the terms and conditions of the BSD License   which accompanies this distribution.  The full text of the license may be found at   http://opensource.org/licenses/bsd-license.php    THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,   WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.    @par Revision Reference:   This protocol is from PI Version 1.1.  **/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SMM_GPI_DISPATCH2_H_
end_ifndef

begin_define
define|#
directive|define
name|_SMM_GPI_DISPATCH2_H_
end_define

begin_include
include|#
directive|include
file|<Pi/PiSmmCis.h>
end_include

begin_define
define|#
directive|define
name|EFI_SMM_GPI_DISPATCH2_PROTOCOL_GUID
define|\
value|{ \     0x25566b03, 0xb577, 0x4cbf, {0x95, 0x8c, 0xed, 0x66, 0x3e, 0xa2, 0x43, 0x80 } \   }
end_define

begin_comment
comment|///
end_comment

begin_comment
comment|/// The dispatch function's context.
end_comment

begin_comment
comment|///
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
comment|///
comment|/// A number from one of 2^64 possible GPIs that can generate an SMI. A
comment|/// 0 corresponds to logical GPI[0]; 1 corresponds to logical GPI[1]; and
comment|/// GpiNum of N corresponds to GPI[N], where N can span from 0 to 2^64-1.
comment|///
name|UINT64
name|GpiNum
decl_stmt|;
block|}
name|EFI_SMM_GPI_REGISTER_CONTEXT
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|_EFI_SMM_GPI_DISPATCH2_PROTOCOL
name|EFI_SMM_GPI_DISPATCH2_PROTOCOL
typedef|;
end_typedef

begin_comment
comment|/**   Registers a child SMI source dispatch function with a parent SMM driver.    This service registers a function (DispatchFunction) which will be called when an SMI is    generated because of one or more of the GPIs specified by RegisterContext. On return,    DispatchHandle contains a unique handle which may be used later to unregister the function    using UnRegister().   The DispatchFunction will be called with Context set to the same value as was passed into    this function in RegisterContext and with CommBuffer pointing to another instance of    EFI_SMM_GPI_REGISTER_CONTEXT describing the GPIs which actually caused the SMI and    CommBufferSize pointing to the size of the structure.    @param[in]  This               Pointer to the EFI_SMM_GPI_DISPATCH2_PROTOCOL instance.   @param[in]  DispatchFunction   Function to register for handler when the specified GPI causes an SMI.   @param[in]  RegisterContext    Pointer to the dispatch function's context.                                  The caller fills this context in before calling                                  the register function to indicate to the register                                  function the GPI(s) for which the dispatch function                                  should be invoked.   @param[out] DispatchHandle     Handle generated by the dispatcher to track the                                  function instance.    @retval EFI_SUCCESS            The dispatch function has been successfully                                  registered and the SMI source has been enabled.   @retval EFI_DEVICE_ERROR       The driver was unable to enable the SMI source.   @retval EFI_INVALID_PARAMETER  RegisterContext is invalid. The GPI input value                                  is not within valid range.   @retval EFI_OUT_OF_RESOURCES   There is not enough memory (system or SMM) to manage this child. **/
end_comment

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_SMM_GPI_REGISTER2
function_decl|)
parameter_list|(
name|IN
name|CONST
name|EFI_SMM_GPI_DISPATCH2_PROTOCOL
modifier|*
name|This
parameter_list|,
name|IN
name|EFI_SMM_HANDLER_ENTRY_POINT2
name|DispatchFunction
parameter_list|,
name|IN
name|CONST
name|EFI_SMM_GPI_REGISTER_CONTEXT
modifier|*
name|RegisterContext
parameter_list|,
name|OUT
name|EFI_HANDLE
modifier|*
name|DispatchHandle
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/**   Unregisters a General Purpose Input (GPI) service.    This service removes the handler associated with DispatchHandle so that it will no longer be    called when the GPI triggers an SMI.     @param[in]  This               Pointer to the EFI_SMM_GPI_DISPATCH2_PROTOCOL instance.   @param[in]  DispatchHandle     Handle of the service to remove.    @retval EFI_SUCCESS            Handle of the service to remove.   @retval EFI_INVALID_PARAMETER  The DispatchHandle was not valid. **/
end_comment

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_SMM_GPI_UNREGISTER2
function_decl|)
parameter_list|(
name|IN
name|CONST
name|EFI_SMM_GPI_DISPATCH2_PROTOCOL
modifier|*
name|This
parameter_list|,
name|IN
name|EFI_HANDLE
name|DispatchHandle
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|///
end_comment

begin_comment
comment|/// Interface structure for the SMM GPI SMI Dispatch Protocol
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// The SMM GPI SMI Dispatch Protocol provides the parent dispatch service
end_comment

begin_comment
comment|/// for the General Purpose Input (GPI) SMI source generator.
end_comment

begin_comment
comment|///
end_comment

begin_struct
struct|struct
name|_EFI_SMM_GPI_DISPATCH2_PROTOCOL
block|{
name|EFI_SMM_GPI_REGISTER2
name|Register
decl_stmt|;
name|EFI_SMM_GPI_UNREGISTER2
name|UnRegister
decl_stmt|;
comment|///
comment|/// Denotes the maximum value of inputs that can have handlers attached.
comment|///
name|UINTN
name|NumSupportedGpis
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|EFI_GUID
name|gEfiSmmGpiDispatch2ProtocolGuid
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

