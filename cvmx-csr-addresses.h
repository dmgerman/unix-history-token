begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/***********************license start***************  *  Copyright (c) 2003-2009 Cavium Networks (support@cavium.com). All rights  *  reserved.  *  *  *  Redistribution and use in source and binary forms, with or without  *  modification, are permitted provided that the following conditions are  *  met:  *  *      * Redistributions of source code must retain the above copyright  *        notice, this list of conditions and the following disclaimer.  *  *      * Redistributions in binary form must reproduce the above  *        copyright notice, this list of conditions and the following  *        disclaimer in the documentation and/or other materials provided  *        with the distribution.  *  *      * Neither the name of Cavium Networks nor the names of  *        its contributors may be used to endorse or promote products  *        derived from this software without specific prior written  *        permission.  *  *  TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"  *  AND WITH ALL FAULTS AND CAVIUM NETWORKS MAKES NO PROMISES, REPRESENTATIONS  *  OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH  *  RESPECT TO THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY  *  REPRESENTATION OR DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT  *  DEFECTS, AND CAVIUM SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES  *  OF TITLE, MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR  *  PURPOSE, LACK OF VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET  *  POSSESSION OR CORRESPONDENCE TO DESCRIPTION.  THE ENTIRE RISK ARISING OUT  *  OF USE OR PERFORMANCE OF THE SOFTWARE LIES WITH YOU.  *  *  *  For any questions regarding licensing please contact marketing@caviumnetworks.com  *  ***********************license end**************************************/
end_comment

begin_comment
comment|/**  * @file  *  * Configuration and status register (CSR) address and for  * Octeon. Include cvmx-csr.h instead of this file directly.  *  * This file is auto generated. Do not edit.  *  *<hr>$Revision: 41586 $<hr>  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CVMX_CSR_ADDRESSES_H__
end_ifndef

begin_define
define|#
directive|define
name|__CVMX_CSR_ADDRESSES_H__
end_define

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_include
include|#
directive|include
file|"cvmx-warn.h"
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|CVMX_AGL_GMX_BAD_REG
value|CVMX_AGL_GMX_BAD_REG_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_BAD_REG_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_BAD_REG not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000518ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_AGL_GMX_BIST
value|CVMX_AGL_GMX_BIST_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_BIST_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_BIST not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000400ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_AGL_GMX_DRV_CTL
value|CVMX_AGL_GMX_DRV_CTL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_DRV_CTL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_DRV_CTL not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E00007F0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_AGL_GMX_INF_MODE
value|CVMX_AGL_GMX_INF_MODE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_INF_MODE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_INF_MODE not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E00007F8ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_PRTX_CFG
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_PRTX_CFG(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000010ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_RXX_ADR_CAM0
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_RXX_ADR_CAM0(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000180ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_RXX_ADR_CAM1
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_RXX_ADR_CAM1(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000188ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_RXX_ADR_CAM2
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_RXX_ADR_CAM2(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000190ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_RXX_ADR_CAM3
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_RXX_ADR_CAM3(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000198ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_RXX_ADR_CAM4
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_RXX_ADR_CAM4(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E00001A0ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_RXX_ADR_CAM5
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_RXX_ADR_CAM5(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E00001A8ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_RXX_ADR_CAM_EN
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_RXX_ADR_CAM_EN(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000108ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_RXX_ADR_CTL
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_RXX_ADR_CTL(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000100ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_RXX_DECISION
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_RXX_DECISION(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000040ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_RXX_FRM_CHK
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_RXX_FRM_CHK(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000020ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_RXX_FRM_CTL
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_RXX_FRM_CTL(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000018ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_RXX_FRM_MAX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_RXX_FRM_MAX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000030ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_RXX_FRM_MIN
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_RXX_FRM_MIN(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000028ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_RXX_IFG
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_RXX_IFG(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000058ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_RXX_INT_EN
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_RXX_INT_EN(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000008ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_RXX_INT_REG
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_RXX_INT_REG(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000000ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_RXX_JABBER
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_RXX_JABBER(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000038ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_RXX_PAUSE_DROP_TIME
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_RXX_PAUSE_DROP_TIME(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000068ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_RXX_STATS_CTL
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_RXX_STATS_CTL(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000050ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_RXX_STATS_OCTS
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_RXX_STATS_OCTS(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000088ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_RXX_STATS_OCTS_CTL
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_RXX_STATS_OCTS_CTL(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000098ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_RXX_STATS_OCTS_DMAC
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_RXX_STATS_OCTS_DMAC(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E00000A8ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_RXX_STATS_OCTS_DRP
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_RXX_STATS_OCTS_DRP(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E00000B8ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_RXX_STATS_PKTS
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_RXX_STATS_PKTS(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000080ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_RXX_STATS_PKTS_BAD
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_RXX_STATS_PKTS_BAD(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E00000C0ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_RXX_STATS_PKTS_CTL
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_RXX_STATS_PKTS_CTL(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000090ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_RXX_STATS_PKTS_DMAC
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_RXX_STATS_PKTS_DMAC(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E00000A0ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_RXX_STATS_PKTS_DRP
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_RXX_STATS_PKTS_DRP(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E00000B0ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_RXX_UDD_SKP
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_RXX_UDD_SKP(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000048ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_RX_BP_DROPX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_RX_BP_DROPX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000420ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_RX_BP_OFFX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_RX_BP_OFFX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000460ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_RX_BP_ONX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_RX_BP_ONX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000440ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_AGL_GMX_RX_PRT_INFO
value|CVMX_AGL_GMX_RX_PRT_INFO_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_RX_PRT_INFO_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_RX_PRT_INFO not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E00004E8ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_AGL_GMX_RX_TX_STATUS
value|CVMX_AGL_GMX_RX_TX_STATUS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_RX_TX_STATUS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_RX_TX_STATUS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E00007E8ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_SMACX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_SMACX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000230ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_AGL_GMX_STAT_BP
value|CVMX_AGL_GMX_STAT_BP_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_STAT_BP_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_STAT_BP not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000520ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_TXX_APPEND
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_TXX_APPEND(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000218ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_TXX_CTL
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_TXX_CTL(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000270ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_TXX_MIN_PKT
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_TXX_MIN_PKT(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000240ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_TXX_PAUSE_PKT_INTERVAL
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_TXX_PAUSE_PKT_INTERVAL(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000248ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_TXX_PAUSE_PKT_TIME
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_TXX_PAUSE_PKT_TIME(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000238ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_TXX_PAUSE_TOGO
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_TXX_PAUSE_TOGO(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000258ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_TXX_PAUSE_ZERO
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_TXX_PAUSE_ZERO(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000260ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_TXX_SOFT_PAUSE
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_TXX_SOFT_PAUSE(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000250ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_TXX_STAT0
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_TXX_STAT0(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000280ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_TXX_STAT1
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_TXX_STAT1(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000288ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_TXX_STAT2
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_TXX_STAT2(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000290ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_TXX_STAT3
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_TXX_STAT3(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000298ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_TXX_STAT4
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_TXX_STAT4(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E00002A0ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_TXX_STAT5
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_TXX_STAT5(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E00002A8ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_TXX_STAT6
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_TXX_STAT6(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E00002B0ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_TXX_STAT7
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_TXX_STAT7(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E00002B8ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_TXX_STAT8
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_TXX_STAT8(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E00002C0ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_TXX_STAT9
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_TXX_STAT9(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E00002C8ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_TXX_STATS_CTL
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_TXX_STATS_CTL(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000268ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_TXX_THRESH
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_TXX_THRESH(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000210ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_AGL_GMX_TX_BP
value|CVMX_AGL_GMX_TX_BP_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_TX_BP_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_TX_BP not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E00004D0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_AGL_GMX_TX_COL_ATTEMPT
value|CVMX_AGL_GMX_TX_COL_ATTEMPT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_TX_COL_ATTEMPT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_TX_COL_ATTEMPT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000498ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_AGL_GMX_TX_IFG
value|CVMX_AGL_GMX_TX_IFG_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_TX_IFG_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_TX_IFG not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000488ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_AGL_GMX_TX_INT_EN
value|CVMX_AGL_GMX_TX_INT_EN_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_TX_INT_EN_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_TX_INT_EN not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000508ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_AGL_GMX_TX_INT_REG
value|CVMX_AGL_GMX_TX_INT_REG_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_TX_INT_REG_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_TX_INT_REG not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000500ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_AGL_GMX_TX_JAM
value|CVMX_AGL_GMX_TX_JAM_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_TX_JAM_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_TX_JAM not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E0000490ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_AGL_GMX_TX_LFSR
value|CVMX_AGL_GMX_TX_LFSR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_TX_LFSR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_TX_LFSR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E00004F8ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_AGL_GMX_TX_OVR_BP
value|CVMX_AGL_GMX_TX_OVR_BP_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_TX_OVR_BP_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_TX_OVR_BP not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E00004C8ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_AGL_GMX_TX_PAUSE_PKT_DMAC
value|CVMX_AGL_GMX_TX_PAUSE_PKT_DMAC_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_TX_PAUSE_PKT_DMAC_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_TX_PAUSE_PKT_DMAC not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E00004A0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_AGL_GMX_TX_PAUSE_PKT_TYPE
value|CVMX_AGL_GMX_TX_PAUSE_PKT_TYPE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_AGL_GMX_TX_PAUSE_PKT_TYPE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_AGL_GMX_TX_PAUSE_PKT_TYPE not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800E00004A8ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_ASX0_DBG_DATA_DRV
value|CVMX_ASX0_DBG_DATA_DRV_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ASX0_DBG_DATA_DRV_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ASX0_DBG_DATA_DRV not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000208ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_ASX0_DBG_DATA_ENABLE
value|CVMX_ASX0_DBG_DATA_ENABLE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ASX0_DBG_DATA_ENABLE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ASX0_DBG_DATA_ENABLE not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000200ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ASXX_GMII_RX_CLK_SET
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ASXX_GMII_RX_CLK_SET(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000180ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|0
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ASXX_GMII_RX_DAT_SET
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ASXX_GMII_RX_DAT_SET(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000188ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|0
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ASXX_INT_EN
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ASXX_INT_EN(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000018ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ASXX_INT_REG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ASXX_INT_REG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000010ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ASXX_MII_RX_DAT_SET
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ASXX_MII_RX_DAT_SET(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000190ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|0
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ASXX_PRT_LOOP
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ASXX_PRT_LOOP(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000040ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ASXX_RLD_BYPASS
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ASXX_RLD_BYPASS(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000248ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ASXX_RLD_BYPASS_SETTING
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ASXX_RLD_BYPASS_SETTING(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000250ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ASXX_RLD_COMP
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ASXX_RLD_COMP(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000220ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ASXX_RLD_DATA_DRV
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ASXX_RLD_DATA_DRV(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000218ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ASXX_RLD_FCRAM_MODE
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ASXX_RLD_FCRAM_MODE(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000210ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ASXX_RLD_NCTL_STRONG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ASXX_RLD_NCTL_STRONG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000230ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ASXX_RLD_NCTL_WEAK
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ASXX_RLD_NCTL_WEAK(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000240ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ASXX_RLD_PCTL_STRONG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ASXX_RLD_PCTL_STRONG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000228ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ASXX_RLD_PCTL_WEAK
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ASXX_RLD_PCTL_WEAK(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000238ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ASXX_RLD_SETTING
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ASXX_RLD_SETTING(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000258ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ASXX_RX_CLK_SETX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ASXX_RX_CLK_SETX(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000020ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x1000000ull
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ASXX_RX_PRT_EN
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ASXX_RX_PRT_EN(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000000ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ASXX_RX_WOL
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ASXX_RX_WOL(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000100ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ASXX_RX_WOL_MSK
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ASXX_RX_WOL_MSK(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000108ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ASXX_RX_WOL_POWOK
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ASXX_RX_WOL_POWOK(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000118ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ASXX_RX_WOL_SIG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ASXX_RX_WOL_SIG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000110ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ASXX_TX_CLK_SETX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ASXX_TX_CLK_SETX(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000048ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x1000000ull
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ASXX_TX_COMP_BYP
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ASXX_TX_COMP_BYP(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000068ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ASXX_TX_HI_WATERX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ASXX_TX_HI_WATERX(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000080ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x1000000ull
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ASXX_TX_PRT_EN
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ASXX_TX_PRT_EN(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000008ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_CIU_BIST
value|CVMX_CIU_BIST_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_BIST_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000730ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_CIU_DINT
value|CVMX_CIU_DINT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_DINT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000720ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_CIU_FUSE
value|CVMX_CIU_FUSE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_FUSE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000728ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_CIU_GSTOP
value|CVMX_CIU_GSTOP_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_GSTOP_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000710ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_INTX_EN0
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|23
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_INTX_EN0(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000200ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|63
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_INTX_EN0_W1C
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|23
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|32
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_INTX_EN0_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000002200ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|63
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_INTX_EN0_W1S
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|23
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|32
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_INTX_EN0_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000006200ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|63
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_INTX_EN1
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|23
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_INTX_EN1(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000208ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|63
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_INTX_EN1_W1C
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|23
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|32
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_INTX_EN1_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000002208ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|63
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_INTX_EN1_W1S
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|23
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|32
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_INTX_EN1_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000006208ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|63
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_INTX_EN4_0
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|11
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_INTX_EN4_0(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000C80ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|15
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_INTX_EN4_0_W1C
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|11
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_INTX_EN4_0_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000002C80ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|15
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_INTX_EN4_0_W1S
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|11
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_INTX_EN4_0_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000006C80ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|15
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_INTX_EN4_1
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|11
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_INTX_EN4_1(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000C88ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|15
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_INTX_EN4_1_W1C
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|11
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_INTX_EN4_1_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000002C88ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|15
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_INTX_EN4_1_W1S
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|11
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_INTX_EN4_1_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000006C88ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|15
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_INTX_SUM0
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|23
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_INTX_SUM0(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000000ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|63
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_INTX_SUM4
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|11
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_INTX_SUM4(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000C00ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_CIU_INT_SUM1
value|CVMX_CIU_INT_SUM1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_INT_SUM1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000108ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_MBOX_CLRX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|11
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_MBOX_CLRX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000680ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_MBOX_SETX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|11
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_MBOX_SETX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000600ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_CIU_NMI
value|CVMX_CIU_NMI_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_NMI_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000718ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_CIU_PCI_INTA
value|CVMX_CIU_PCI_INTA_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_PCI_INTA_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000750ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_CIU_PP_DBG
value|CVMX_CIU_PP_DBG_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_PP_DBG_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000708ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_PP_POKEX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|11
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_PP_POKEX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000580ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_CIU_PP_RST
value|CVMX_CIU_PP_RST_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_PP_RST_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000700ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_CIU_QLM_DCOK
value|CVMX_CIU_QLM_DCOK_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_QLM_DCOK_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_QLM_DCOK not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000760ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_CIU_QLM_JTGC
value|CVMX_CIU_QLM_JTGC_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_QLM_JTGC_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_QLM_JTGC not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000768ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_CIU_QLM_JTGD
value|CVMX_CIU_QLM_JTGD_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_QLM_JTGD_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_QLM_JTGD not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000770ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_CIU_SOFT_BIST
value|CVMX_CIU_SOFT_BIST_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_SOFT_BIST_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000738ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_CIU_SOFT_PRST
value|CVMX_CIU_SOFT_PRST_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_SOFT_PRST_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000748ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_CIU_SOFT_PRST1
value|CVMX_CIU_SOFT_PRST1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_SOFT_PRST1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_SOFT_PRST1 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000758ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_CIU_SOFT_RST
value|CVMX_CIU_SOFT_RST_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_SOFT_RST_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000740ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_TIMX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_TIMX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000480ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_WDOGX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|11
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_WDOGX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000500ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_DBG_DATA
value|CVMX_DBG_DATA_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_DBG_DATA_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_DBG_DATA not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000001E8ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_DFA_BST0
value|CVMX_DFA_BST0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_DFA_BST0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_DFA_BST0 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800300007F0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_DFA_BST1
value|CVMX_DFA_BST1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_DFA_BST1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_DFA_BST1 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800300007F8ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_DFA_CFG
value|CVMX_DFA_CFG_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_DFA_CFG_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_DFA_CFG not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180030000000ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_DFA_DBELL
value|CVMX_DFA_DBELL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_DFA_DBELL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_DFA_DBELL not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001370000000000ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_DFA_DDR2_ADDR
value|CVMX_DFA_DDR2_ADDR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_DFA_DDR2_ADDR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_DFA_DDR2_ADDR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180030000210ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_DFA_DDR2_BUS
value|CVMX_DFA_DDR2_BUS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_DFA_DDR2_BUS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_DFA_DDR2_BUS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180030000080ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_DFA_DDR2_CFG
value|CVMX_DFA_DDR2_CFG_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_DFA_DDR2_CFG_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_DFA_DDR2_CFG not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180030000208ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_DFA_DDR2_COMP
value|CVMX_DFA_DDR2_COMP_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_DFA_DDR2_COMP_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_DFA_DDR2_COMP not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180030000090ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_DFA_DDR2_EMRS
value|CVMX_DFA_DDR2_EMRS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_DFA_DDR2_EMRS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_DFA_DDR2_EMRS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180030000268ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_DFA_DDR2_FCNT
value|CVMX_DFA_DDR2_FCNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_DFA_DDR2_FCNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_DFA_DDR2_FCNT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180030000078ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_DFA_DDR2_MRS
value|CVMX_DFA_DDR2_MRS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_DFA_DDR2_MRS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_DFA_DDR2_MRS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180030000260ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_DFA_DDR2_OPT
value|CVMX_DFA_DDR2_OPT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_DFA_DDR2_OPT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_DFA_DDR2_OPT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180030000070ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_DFA_DDR2_PLL
value|CVMX_DFA_DDR2_PLL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_DFA_DDR2_PLL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_DFA_DDR2_PLL not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180030000088ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_DFA_DDR2_TMG
value|CVMX_DFA_DDR2_TMG_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_DFA_DDR2_TMG_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_DFA_DDR2_TMG not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180030000218ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_DFA_DIFCTL
value|CVMX_DFA_DIFCTL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_DFA_DIFCTL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_DFA_DIFCTL not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001370600000000ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_DFA_DIFRDPTR
value|CVMX_DFA_DIFRDPTR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_DFA_DIFRDPTR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_DFA_DIFRDPTR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001370200000000ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_DFA_ECLKCFG
value|CVMX_DFA_ECLKCFG_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_DFA_ECLKCFG_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_DFA_ECLKCFG not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180030000200ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_DFA_ERR
value|CVMX_DFA_ERR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_DFA_ERR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_DFA_ERR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180030000028ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_DFA_MEMCFG0
value|CVMX_DFA_MEMCFG0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_DFA_MEMCFG0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_DFA_MEMCFG0 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180030000008ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_DFA_MEMCFG1
value|CVMX_DFA_MEMCFG1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_DFA_MEMCFG1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_DFA_MEMCFG1 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180030000010ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_DFA_MEMCFG2
value|CVMX_DFA_MEMCFG2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_DFA_MEMCFG2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_DFA_MEMCFG2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180030000060ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_DFA_MEMFADR
value|CVMX_DFA_MEMFADR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_DFA_MEMFADR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_DFA_MEMFADR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180030000030ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_DFA_MEMFCR
value|CVMX_DFA_MEMFCR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_DFA_MEMFCR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_DFA_MEMFCR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180030000038ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_DFA_MEMRLD
value|CVMX_DFA_MEMRLD_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_DFA_MEMRLD_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_DFA_MEMRLD not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180030000018ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_DFA_NCBCTL
value|CVMX_DFA_NCBCTL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_DFA_NCBCTL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_DFA_NCBCTL not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180030000020ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_DFA_RODT_COMP_CTL
value|CVMX_DFA_RODT_COMP_CTL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_DFA_RODT_COMP_CTL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_DFA_RODT_COMP_CTL not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180030000068ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_DFA_SBD_DBG0
value|CVMX_DFA_SBD_DBG0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_DFA_SBD_DBG0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_DFA_SBD_DBG0 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180030000040ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_DFA_SBD_DBG1
value|CVMX_DFA_SBD_DBG1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_DFA_SBD_DBG1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_DFA_SBD_DBG1 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180030000048ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_DFA_SBD_DBG2
value|CVMX_DFA_SBD_DBG2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_DFA_SBD_DBG2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_DFA_SBD_DBG2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180030000050ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_DFA_SBD_DBG3
value|CVMX_DFA_SBD_DBG3_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_DFA_SBD_DBG3_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_DFA_SBD_DBG3 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180030000058ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_FPA_BIST_STATUS
value|CVMX_FPA_BIST_STATUS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_FPA_BIST_STATUS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800280000E8ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_FPA_CTL_STATUS
value|CVMX_FPA_CTL_STATUS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_FPA_CTL_STATUS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180028000050ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_FPA_FPF0_MARKS
value|CVMX_FPA_FPF0_MARKS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_FPA_FPF0_MARKS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_FPA_FPF0_MARKS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180028000000ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_FPA_FPF0_SIZE
value|CVMX_FPA_FPF0_SIZE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_FPA_FPF0_SIZE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_FPA_FPF0_SIZE not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180028000058ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_FPA_FPF1_MARKS
value|CVMX_FPA_FPFX_MARKS(1)
end_define

begin_define
define|#
directive|define
name|CVMX_FPA_FPF2_MARKS
value|CVMX_FPA_FPFX_MARKS(2)
end_define

begin_define
define|#
directive|define
name|CVMX_FPA_FPF3_MARKS
value|CVMX_FPA_FPFX_MARKS(3)
end_define

begin_define
define|#
directive|define
name|CVMX_FPA_FPF4_MARKS
value|CVMX_FPA_FPFX_MARKS(4)
end_define

begin_define
define|#
directive|define
name|CVMX_FPA_FPF5_MARKS
value|CVMX_FPA_FPFX_MARKS(5)
end_define

begin_define
define|#
directive|define
name|CVMX_FPA_FPF6_MARKS
value|CVMX_FPA_FPFX_MARKS(6)
end_define

begin_define
define|#
directive|define
name|CVMX_FPA_FPF7_MARKS
value|CVMX_FPA_FPFX_MARKS(7)
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_FPA_FPFX_MARKS
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|>=
literal|1
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|>=
literal|1
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|>=
literal|1
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_FPA_FPFX_MARKS(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180028000008ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|7
operator|)
operator|*
literal|8
operator|-
literal|8
operator|*
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_FPA_FPFX_SIZE
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|>=
literal|1
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|>=
literal|1
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|>=
literal|1
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_FPA_FPFX_SIZE(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180028000060ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|7
operator|)
operator|*
literal|8
operator|-
literal|8
operator|*
literal|1
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_FPA_INT_ENB
value|CVMX_FPA_INT_ENB_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_FPA_INT_ENB_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180028000048ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_FPA_INT_SUM
value|CVMX_FPA_INT_SUM_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_FPA_INT_SUM_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180028000040ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_FPA_QUE0_PAGE_INDEX
value|CVMX_FPA_QUEX_PAGE_INDEX(0)
end_define

begin_define
define|#
directive|define
name|CVMX_FPA_QUE1_PAGE_INDEX
value|CVMX_FPA_QUEX_PAGE_INDEX(1)
end_define

begin_define
define|#
directive|define
name|CVMX_FPA_QUE2_PAGE_INDEX
value|CVMX_FPA_QUEX_PAGE_INDEX(2)
end_define

begin_define
define|#
directive|define
name|CVMX_FPA_QUE3_PAGE_INDEX
value|CVMX_FPA_QUEX_PAGE_INDEX(3)
end_define

begin_define
define|#
directive|define
name|CVMX_FPA_QUE4_PAGE_INDEX
value|CVMX_FPA_QUEX_PAGE_INDEX(4)
end_define

begin_define
define|#
directive|define
name|CVMX_FPA_QUE5_PAGE_INDEX
value|CVMX_FPA_QUEX_PAGE_INDEX(5)
end_define

begin_define
define|#
directive|define
name|CVMX_FPA_QUE6_PAGE_INDEX
value|CVMX_FPA_QUEX_PAGE_INDEX(6)
end_define

begin_define
define|#
directive|define
name|CVMX_FPA_QUE7_PAGE_INDEX
value|CVMX_FPA_QUEX_PAGE_INDEX(7)
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_FPA_QUEX_AVAILABLE
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_FPA_QUEX_AVAILABLE(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180028000098ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|7
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_FPA_QUEX_PAGE_INDEX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_FPA_QUEX_PAGE_INDEX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800280000F0ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|7
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_FPA_QUE_ACT
value|CVMX_FPA_QUE_ACT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_FPA_QUE_ACT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180028000138ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_FPA_QUE_EXP
value|CVMX_FPA_QUE_EXP_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_FPA_QUE_EXP_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180028000130ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_FPA_WART_CTL
value|CVMX_FPA_WART_CTL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_FPA_WART_CTL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800280000D8ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_FPA_WART_STATUS
value|CVMX_FPA_WART_STATUS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_FPA_WART_STATUS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800280000E0ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_BAD_REG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_BAD_REG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000518ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_BIST
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_BIST(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000400ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_CLK_EN
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_CLK_EN(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800080007F0ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_HG2_CONTROL
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_HG2_CONTROL(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000550ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_INF_MODE
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_INF_MODE(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800080007F8ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_NXA_ADR
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_NXA_ADR(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000510ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_PRTX_CBFC_CTL
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_PRTX_CBFC_CTL(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000580ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|0
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x1000000ull
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_PRTX_CFG
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_PRTX_CFG(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000010ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RXX_ADR_CAM0
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RXX_ADR_CAM0(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000180ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RXX_ADR_CAM1
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RXX_ADR_CAM1(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000188ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RXX_ADR_CAM2
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RXX_ADR_CAM2(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000190ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RXX_ADR_CAM3
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RXX_ADR_CAM3(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000198ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RXX_ADR_CAM4
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RXX_ADR_CAM4(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800080001A0ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RXX_ADR_CAM5
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RXX_ADR_CAM5(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800080001A8ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RXX_ADR_CAM_EN
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RXX_ADR_CAM_EN(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000108ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RXX_ADR_CTL
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RXX_ADR_CTL(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000100ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RXX_DECISION
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RXX_DECISION(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000040ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RXX_FRM_CHK
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RXX_FRM_CHK(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000020ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RXX_FRM_CTL
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RXX_FRM_CTL(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000018ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RXX_FRM_MAX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RXX_FRM_MAX(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000030ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RXX_FRM_MIN
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RXX_FRM_MIN(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000028ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RXX_IFG
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RXX_IFG(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000058ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RXX_INT_EN
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RXX_INT_EN(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000008ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RXX_INT_REG
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RXX_INT_REG(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000000ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RXX_JABBER
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RXX_JABBER(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000038ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RXX_PAUSE_DROP_TIME
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RXX_PAUSE_DROP_TIME(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000068ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RXX_RX_INBND
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RXX_RX_INBND(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000060ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RXX_STATS_CTL
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RXX_STATS_CTL(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000050ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RXX_STATS_OCTS
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RXX_STATS_OCTS(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000088ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RXX_STATS_OCTS_CTL
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RXX_STATS_OCTS_CTL(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000098ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RXX_STATS_OCTS_DMAC
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RXX_STATS_OCTS_DMAC(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800080000A8ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RXX_STATS_OCTS_DRP
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RXX_STATS_OCTS_DRP(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800080000B8ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RXX_STATS_PKTS
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RXX_STATS_PKTS(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000080ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RXX_STATS_PKTS_BAD
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RXX_STATS_PKTS_BAD(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800080000C0ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RXX_STATS_PKTS_CTL
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RXX_STATS_PKTS_CTL(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000090ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RXX_STATS_PKTS_DMAC
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RXX_STATS_PKTS_DMAC(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800080000A0ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RXX_STATS_PKTS_DRP
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RXX_STATS_PKTS_DRP(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800080000B0ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RXX_UDD_SKP
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RXX_UDD_SKP(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000048ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RX_BP_DROPX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RX_BP_DROPX(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000420ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x1000000ull
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RX_BP_OFFX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RX_BP_OFFX(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000460ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x1000000ull
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RX_BP_ONX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RX_BP_ONX(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000440ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x1000000ull
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RX_HG2_STATUS
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RX_HG2_STATUS(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000548ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RX_PASS_EN
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RX_PASS_EN(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800080005F8ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RX_PASS_MAPX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RX_PASS_MAPX(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000600ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|15
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x1000000ull
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RX_PRTS
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RX_PRTS(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000410ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RX_PRT_INFO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RX_PRT_INFO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800080004E8ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RX_TX_STATUS
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RX_TX_STATUS(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800080007E8ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|0
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RX_XAUI_BAD_COL
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RX_XAUI_BAD_COL(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000538ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_RX_XAUI_CTL
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_RX_XAUI_CTL(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000530ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_SMACX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_SMACX(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000230ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_STAT_BP
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_STAT_BP(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000520ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TXX_APPEND
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TXX_APPEND(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000218ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TXX_BURST
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TXX_BURST(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000228ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TXX_CBFC_XOFF
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TXX_CBFC_XOFF(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800080005A0ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|0
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x1000000ull
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TXX_CBFC_XON
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TXX_CBFC_XON(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800080005C0ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|0
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x1000000ull
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TXX_CLK
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TXX_CLK(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000208ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TXX_CTL
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TXX_CTL(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000270ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TXX_MIN_PKT
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TXX_MIN_PKT(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000240ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TXX_PAUSE_PKT_INTERVAL
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TXX_PAUSE_PKT_INTERVAL(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000248ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TXX_PAUSE_PKT_TIME
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TXX_PAUSE_PKT_TIME(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000238ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TXX_PAUSE_TOGO
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TXX_PAUSE_TOGO(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000258ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TXX_PAUSE_ZERO
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TXX_PAUSE_ZERO(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000260ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TXX_SGMII_CTL
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TXX_SGMII_CTL(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000300ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TXX_SLOT
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TXX_SLOT(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000220ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TXX_SOFT_PAUSE
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TXX_SOFT_PAUSE(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000250ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TXX_STAT0
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TXX_STAT0(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000280ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TXX_STAT1
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TXX_STAT1(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000288ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TXX_STAT2
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TXX_STAT2(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000290ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TXX_STAT3
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TXX_STAT3(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000298ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TXX_STAT4
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TXX_STAT4(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800080002A0ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TXX_STAT5
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TXX_STAT5(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800080002A8ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TXX_STAT6
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TXX_STAT6(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800080002B0ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TXX_STAT7
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TXX_STAT7(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800080002B8ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TXX_STAT8
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TXX_STAT8(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800080002C0ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TXX_STAT9
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TXX_STAT9(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800080002C8ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TXX_STATS_CTL
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TXX_STATS_CTL(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000268ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TXX_THRESH
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TXX_THRESH(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000210ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000ull
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TX_BP
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TX_BP(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800080004D0ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TX_CLK_MSKX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TX_CLK_MSKX(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000780ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|1
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|0
operator|)
operator|*
literal|0x0ull
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TX_COL_ATTEMPT
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TX_COL_ATTEMPT(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000498ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TX_CORRUPT
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TX_CORRUPT(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800080004D8ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TX_HG2_REG1
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TX_HG2_REG1(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000558ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TX_HG2_REG2
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TX_HG2_REG2(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000560ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TX_IFG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TX_IFG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000488ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TX_INT_EN
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TX_INT_EN(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000508ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TX_INT_REG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TX_INT_REG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000500ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TX_JAM
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TX_JAM(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000490ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TX_LFSR
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TX_LFSR(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800080004F8ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TX_OVR_BP
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TX_OVR_BP(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800080004C8ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TX_PAUSE_PKT_DMAC
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TX_PAUSE_PKT_DMAC(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800080004A0ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TX_PAUSE_PKT_TYPE
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TX_PAUSE_PKT_TYPE(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800080004A8ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TX_PRTS
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TX_PRTS(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000480ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TX_SPI_CTL
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TX_SPI_CTL(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800080004C0ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TX_SPI_DRAIN
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TX_SPI_DRAIN(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800080004E0ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TX_SPI_MAX
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TX_SPI_MAX(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800080004B0ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TX_SPI_ROUNDX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TX_SPI_ROUNDX(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000680ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|31
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x1000000ull
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TX_SPI_THRESH
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TX_SPI_THRESH(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800080004B8ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_TX_XAUI_CTL
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_TX_XAUI_CTL(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000528ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GMXX_XAUI_EXT_LOOPBACK
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GMXX_XAUI_EXT_LOOPBACK(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180008000540ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GPIO_BIT_CFGX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GPIO_BIT_CFGX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000800ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_GPIO_BOOT_ENA
value|CVMX_GPIO_BOOT_ENA_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GPIO_BOOT_ENA_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GPIO_BOOT_ENA not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010700000008A8ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GPIO_CLK_GENX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GPIO_CLK_GENX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010700000008C0ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_GPIO_DBG_ENA
value|CVMX_GPIO_DBG_ENA_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GPIO_DBG_ENA_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GPIO_DBG_ENA not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010700000008A0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_GPIO_INT_CLR
value|CVMX_GPIO_INT_CLR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GPIO_INT_CLR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000898ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_GPIO_RX_DAT
value|CVMX_GPIO_RX_DAT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GPIO_RX_DAT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000880ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_GPIO_TX_CLR
value|CVMX_GPIO_TX_CLR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GPIO_TX_CLR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000890ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_GPIO_TX_SET
value|CVMX_GPIO_TX_SET_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GPIO_TX_SET_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000888ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_GPIO_XBIT_CFGX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|>=
literal|16
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|23
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|>=
literal|16
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|23
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|>=
literal|16
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|23
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_GPIO_XBIT_CFGX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000900ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|31
operator|)
operator|*
literal|8
operator|-
literal|8
operator|*
literal|16
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IOB_BIST_STATUS
value|CVMX_IOB_BIST_STATUS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_BIST_STATUS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F00007F8ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IOB_CTL_STATUS
value|CVMX_IOB_CTL_STATUS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_CTL_STATUS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0000050ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IOB_DWB_PRI_CNT
value|CVMX_IOB_DWB_PRI_CNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_DWB_PRI_CNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IOB_DWB_PRI_CNT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0000028ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IOB_FAU_TIMEOUT
value|CVMX_IOB_FAU_TIMEOUT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_FAU_TIMEOUT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0000000ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IOB_I2C_PRI_CNT
value|CVMX_IOB_I2C_PRI_CNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_I2C_PRI_CNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IOB_I2C_PRI_CNT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0000010ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IOB_INB_CONTROL_MATCH
value|CVMX_IOB_INB_CONTROL_MATCH_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_INB_CONTROL_MATCH_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0000078ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IOB_INB_CONTROL_MATCH_ENB
value|CVMX_IOB_INB_CONTROL_MATCH_ENB_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_INB_CONTROL_MATCH_ENB_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0000088ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IOB_INB_DATA_MATCH
value|CVMX_IOB_INB_DATA_MATCH_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_INB_DATA_MATCH_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0000070ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IOB_INB_DATA_MATCH_ENB
value|CVMX_IOB_INB_DATA_MATCH_ENB_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_INB_DATA_MATCH_ENB_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0000080ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IOB_INT_ENB
value|CVMX_IOB_INT_ENB_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_INT_ENB_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0000060ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IOB_INT_SUM
value|CVMX_IOB_INT_SUM_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_INT_SUM_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0000058ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IOB_N2C_L2C_PRI_CNT
value|CVMX_IOB_N2C_L2C_PRI_CNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_N2C_L2C_PRI_CNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IOB_N2C_L2C_PRI_CNT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0000020ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IOB_N2C_RSP_PRI_CNT
value|CVMX_IOB_N2C_RSP_PRI_CNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_N2C_RSP_PRI_CNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IOB_N2C_RSP_PRI_CNT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0000008ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IOB_OUTB_COM_PRI_CNT
value|CVMX_IOB_OUTB_COM_PRI_CNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_OUTB_COM_PRI_CNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IOB_OUTB_COM_PRI_CNT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0000040ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IOB_OUTB_CONTROL_MATCH
value|CVMX_IOB_OUTB_CONTROL_MATCH_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_OUTB_CONTROL_MATCH_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0000098ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IOB_OUTB_CONTROL_MATCH_ENB
value|CVMX_IOB_OUTB_CONTROL_MATCH_ENB_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_OUTB_CONTROL_MATCH_ENB_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F00000A8ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IOB_OUTB_DATA_MATCH
value|CVMX_IOB_OUTB_DATA_MATCH_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_OUTB_DATA_MATCH_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0000090ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IOB_OUTB_DATA_MATCH_ENB
value|CVMX_IOB_OUTB_DATA_MATCH_ENB_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_OUTB_DATA_MATCH_ENB_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F00000A0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IOB_OUTB_FPA_PRI_CNT
value|CVMX_IOB_OUTB_FPA_PRI_CNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_OUTB_FPA_PRI_CNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IOB_OUTB_FPA_PRI_CNT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0000048ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IOB_OUTB_REQ_PRI_CNT
value|CVMX_IOB_OUTB_REQ_PRI_CNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_OUTB_REQ_PRI_CNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IOB_OUTB_REQ_PRI_CNT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0000038ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IOB_P2C_REQ_PRI_CNT
value|CVMX_IOB_P2C_REQ_PRI_CNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_P2C_REQ_PRI_CNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IOB_P2C_REQ_PRI_CNT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0000018ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IOB_PKT_ERR
value|CVMX_IOB_PKT_ERR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_PKT_ERR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0000068ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IOB_TO_CMB_CREDITS
value|CVMX_IOB_TO_CMB_CREDITS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_TO_CMB_CREDITS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IOB_TO_CMB_CREDITS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F00000B0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IPD_1ST_MBUFF_SKIP
value|CVMX_IPD_1ST_MBUFF_SKIP_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IPD_1ST_MBUFF_SKIP_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00014F0000000000ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IPD_1st_NEXT_PTR_BACK
value|CVMX_IPD_1st_NEXT_PTR_BACK_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IPD_1st_NEXT_PTR_BACK_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00014F0000000150ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IPD_2nd_NEXT_PTR_BACK
value|CVMX_IPD_2nd_NEXT_PTR_BACK_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IPD_2nd_NEXT_PTR_BACK_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00014F0000000158ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IPD_BIST_STATUS
value|CVMX_IPD_BIST_STATUS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IPD_BIST_STATUS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00014F00000007F8ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IPD_BP_PRT_RED_END
value|CVMX_IPD_BP_PRT_RED_END_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IPD_BP_PRT_RED_END_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00014F0000000328ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IPD_CLK_COUNT
value|CVMX_IPD_CLK_COUNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IPD_CLK_COUNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00014F0000000338ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IPD_CTL_STATUS
value|CVMX_IPD_CTL_STATUS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IPD_CTL_STATUS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00014F0000000018ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IPD_INT_ENB
value|CVMX_IPD_INT_ENB_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IPD_INT_ENB_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00014F0000000160ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IPD_INT_SUM
value|CVMX_IPD_INT_SUM_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IPD_INT_SUM_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00014F0000000168ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IPD_NOT_1ST_MBUFF_SKIP
value|CVMX_IPD_NOT_1ST_MBUFF_SKIP_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IPD_NOT_1ST_MBUFF_SKIP_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00014F0000000008ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IPD_PACKET_MBUFF_SIZE
value|CVMX_IPD_PACKET_MBUFF_SIZE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IPD_PACKET_MBUFF_SIZE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00014F0000000010ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IPD_PKT_PTR_VALID
value|CVMX_IPD_PKT_PTR_VALID_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IPD_PKT_PTR_VALID_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00014F0000000358ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IPD_PORTX_BP_PAGE_CNT
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|16
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|19
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IPD_PORTX_BP_PAGE_CNT(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00014F0000000028ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|63
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IPD_PORTX_BP_PAGE_CNT2
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|>=
literal|36
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|39
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|>=
literal|36
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|39
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IPD_PORTX_BP_PAGE_CNT2(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00014F0000000368ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|63
operator|)
operator|*
literal|8
operator|-
literal|8
operator|*
literal|36
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IPD_PORT_BP_COUNTERS2_PAIRX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|>=
literal|36
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|39
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|>=
literal|36
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|39
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IPD_PORT_BP_COUNTERS2_PAIRX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00014F0000000388ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|63
operator|)
operator|*
literal|8
operator|-
literal|8
operator|*
literal|36
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IPD_PORT_BP_COUNTERS_PAIRX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|16
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|19
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IPD_PORT_BP_COUNTERS_PAIRX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00014F00000001B8ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|63
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IPD_PORT_QOS_INTX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|||
operator|(
name|offset
operator|==
literal|2
operator|)
operator|||
operator|(
name|offset
operator|==
literal|4
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|||
operator|(
name|offset
operator|==
literal|4
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IPD_PORT_QOS_INTX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00014F0000000808ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|7
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IPD_PORT_QOS_INT_ENBX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|||
operator|(
name|offset
operator|==
literal|2
operator|)
operator|||
operator|(
name|offset
operator|==
literal|4
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|||
operator|(
name|offset
operator|==
literal|4
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IPD_PORT_QOS_INT_ENBX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00014F0000000848ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|7
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IPD_PORT_QOS_X_CNT
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|128
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|159
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|256
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|319
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|256
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|319
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IPD_PORT_QOS_X_CNT(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00014F0000000888ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|511
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IPD_PRC_HOLD_PTR_FIFO_CTL
value|CVMX_IPD_PRC_HOLD_PTR_FIFO_CTL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IPD_PRC_HOLD_PTR_FIFO_CTL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00014F0000000348ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IPD_PRC_PORT_PTR_FIFO_CTL
value|CVMX_IPD_PRC_PORT_PTR_FIFO_CTL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IPD_PRC_PORT_PTR_FIFO_CTL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00014F0000000350ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IPD_PTR_COUNT
value|CVMX_IPD_PTR_COUNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IPD_PTR_COUNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00014F0000000320ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IPD_PWP_PTR_FIFO_CTL
value|CVMX_IPD_PWP_PTR_FIFO_CTL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IPD_PWP_PTR_FIFO_CTL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00014F0000000340ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IPD_QOS0_RED_MARKS
value|CVMX_IPD_QOSX_RED_MARKS(0)
end_define

begin_define
define|#
directive|define
name|CVMX_IPD_QOS1_RED_MARKS
value|CVMX_IPD_QOSX_RED_MARKS(1)
end_define

begin_define
define|#
directive|define
name|CVMX_IPD_QOS2_RED_MARKS
value|CVMX_IPD_QOSX_RED_MARKS(2)
end_define

begin_define
define|#
directive|define
name|CVMX_IPD_QOS3_RED_MARKS
value|CVMX_IPD_QOSX_RED_MARKS(3)
end_define

begin_define
define|#
directive|define
name|CVMX_IPD_QOS4_RED_MARKS
value|CVMX_IPD_QOSX_RED_MARKS(4)
end_define

begin_define
define|#
directive|define
name|CVMX_IPD_QOS5_RED_MARKS
value|CVMX_IPD_QOSX_RED_MARKS(5)
end_define

begin_define
define|#
directive|define
name|CVMX_IPD_QOS6_RED_MARKS
value|CVMX_IPD_QOSX_RED_MARKS(6)
end_define

begin_define
define|#
directive|define
name|CVMX_IPD_QOS7_RED_MARKS
value|CVMX_IPD_QOSX_RED_MARKS(7)
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IPD_QOSX_RED_MARKS
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IPD_QOSX_RED_MARKS(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00014F0000000178ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|7
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IPD_QUE0_FREE_PAGE_CNT
value|CVMX_IPD_QUE0_FREE_PAGE_CNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IPD_QUE0_FREE_PAGE_CNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00014F0000000330ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IPD_RED_PORT_ENABLE
value|CVMX_IPD_RED_PORT_ENABLE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IPD_RED_PORT_ENABLE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00014F00000002D8ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IPD_RED_PORT_ENABLE2
value|CVMX_IPD_RED_PORT_ENABLE2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IPD_RED_PORT_ENABLE2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IPD_RED_PORT_ENABLE2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00014F00000003A8ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IPD_RED_QUE0_PARAM
value|CVMX_IPD_RED_QUEX_PARAM(0)
end_define

begin_define
define|#
directive|define
name|CVMX_IPD_RED_QUE1_PARAM
value|CVMX_IPD_RED_QUEX_PARAM(1)
end_define

begin_define
define|#
directive|define
name|CVMX_IPD_RED_QUE2_PARAM
value|CVMX_IPD_RED_QUEX_PARAM(2)
end_define

begin_define
define|#
directive|define
name|CVMX_IPD_RED_QUE3_PARAM
value|CVMX_IPD_RED_QUEX_PARAM(3)
end_define

begin_define
define|#
directive|define
name|CVMX_IPD_RED_QUE4_PARAM
value|CVMX_IPD_RED_QUEX_PARAM(4)
end_define

begin_define
define|#
directive|define
name|CVMX_IPD_RED_QUE5_PARAM
value|CVMX_IPD_RED_QUEX_PARAM(5)
end_define

begin_define
define|#
directive|define
name|CVMX_IPD_RED_QUE6_PARAM
value|CVMX_IPD_RED_QUEX_PARAM(6)
end_define

begin_define
define|#
directive|define
name|CVMX_IPD_RED_QUE7_PARAM
value|CVMX_IPD_RED_QUEX_PARAM(7)
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IPD_RED_QUEX_PARAM
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IPD_RED_QUEX_PARAM(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00014F00000002E0ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|7
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IPD_SUB_PORT_BP_PAGE_CNT
value|CVMX_IPD_SUB_PORT_BP_PAGE_CNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IPD_SUB_PORT_BP_PAGE_CNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00014F0000000148ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IPD_SUB_PORT_FCS
value|CVMX_IPD_SUB_PORT_FCS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IPD_SUB_PORT_FCS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00014F0000000170ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IPD_SUB_PORT_QOS_CNT
value|CVMX_IPD_SUB_PORT_QOS_CNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IPD_SUB_PORT_QOS_CNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IPD_SUB_PORT_QOS_CNT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00014F0000000800ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IPD_WQE_FPA_QUEUE
value|CVMX_IPD_WQE_FPA_QUEUE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IPD_WQE_FPA_QUEUE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00014F0000000020ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_IPD_WQE_PTR_VALID
value|CVMX_IPD_WQE_PTR_VALID_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IPD_WQE_PTR_VALID_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00014F0000000360ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_KEY_BIST_REG
value|CVMX_KEY_BIST_REG_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_KEY_BIST_REG_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_KEY_BIST_REG not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180020000018ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_KEY_CTL_STATUS
value|CVMX_KEY_CTL_STATUS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_KEY_CTL_STATUS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_KEY_CTL_STATUS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180020000010ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_KEY_INT_ENB
value|CVMX_KEY_INT_ENB_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_KEY_INT_ENB_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_KEY_INT_ENB not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180020000008ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_KEY_INT_SUM
value|CVMX_KEY_INT_SUM_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_KEY_INT_SUM_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_KEY_INT_SUM not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180020000000ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2C_BST0
value|CVMX_L2C_BST0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2C_BST0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800800007F8ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2C_BST1
value|CVMX_L2C_BST1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2C_BST1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800800007F0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2C_BST2
value|CVMX_L2C_BST2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2C_BST2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800800007E8ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2C_CFG
value|CVMX_L2C_CFG_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2C_CFG_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180080000000ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2C_DBG
value|CVMX_L2C_DBG_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2C_DBG_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180080000030ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2C_DUT
value|CVMX_L2C_DUT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2C_DUT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180080000050ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2C_GRPWRR0
value|CVMX_L2C_GRPWRR0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2C_GRPWRR0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_L2C_GRPWRR0 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800800000C8ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2C_GRPWRR1
value|CVMX_L2C_GRPWRR1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2C_GRPWRR1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_L2C_GRPWRR1 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800800000D0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2C_INT_EN
value|CVMX_L2C_INT_EN_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2C_INT_EN_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_L2C_INT_EN not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180080000100ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2C_INT_STAT
value|CVMX_L2C_INT_STAT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2C_INT_STAT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_L2C_INT_STAT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800800000F8ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2C_LCKBASE
value|CVMX_L2C_LCKBASE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2C_LCKBASE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180080000058ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2C_LCKOFF
value|CVMX_L2C_LCKOFF_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2C_LCKOFF_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180080000060ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2C_LFB0
value|CVMX_L2C_LFB0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2C_LFB0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180080000038ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2C_LFB1
value|CVMX_L2C_LFB1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2C_LFB1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180080000040ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2C_LFB2
value|CVMX_L2C_LFB2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2C_LFB2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180080000048ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2C_LFB3
value|CVMX_L2C_LFB3_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2C_LFB3_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800800000B8ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2C_OOB
value|CVMX_L2C_OOB_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2C_OOB_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_L2C_OOB not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800800000D8ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2C_OOB1
value|CVMX_L2C_OOB1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2C_OOB1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_L2C_OOB1 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800800000E0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2C_OOB2
value|CVMX_L2C_OOB2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2C_OOB2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_L2C_OOB2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800800000E8ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2C_OOB3
value|CVMX_L2C_OOB3_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2C_OOB3_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_L2C_OOB3 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800800000F0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2C_PFC0
value|CVMX_L2C_PFCX(0)
end_define

begin_define
define|#
directive|define
name|CVMX_L2C_PFC1
value|CVMX_L2C_PFCX(1)
end_define

begin_define
define|#
directive|define
name|CVMX_L2C_PFC2
value|CVMX_L2C_PFCX(2)
end_define

begin_define
define|#
directive|define
name|CVMX_L2C_PFC3
value|CVMX_L2C_PFCX(3)
end_define

begin_define
define|#
directive|define
name|CVMX_L2C_PFCTL
value|CVMX_L2C_PFCTL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2C_PFCTL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180080000090ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2C_PFCX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_L2C_PFCX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180080000098ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2C_PPGRP
value|CVMX_L2C_PPGRP_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2C_PPGRP_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_L2C_PPGRP not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800800000C0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2C_SPAR0
value|CVMX_L2C_SPAR0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2C_SPAR0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180080000068ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2C_SPAR1
value|CVMX_L2C_SPAR1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2C_SPAR1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_L2C_SPAR1 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180080000070ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2C_SPAR2
value|CVMX_L2C_SPAR2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2C_SPAR2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_L2C_SPAR2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180080000078ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2C_SPAR3
value|CVMX_L2C_SPAR3_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2C_SPAR3_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_L2C_SPAR3 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180080000080ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2C_SPAR4
value|CVMX_L2C_SPAR4_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2C_SPAR4_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180080000088ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2D_BST0
value|CVMX_L2D_BST0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2D_BST0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180080000780ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2D_BST1
value|CVMX_L2D_BST1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2D_BST1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180080000788ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2D_BST2
value|CVMX_L2D_BST2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2D_BST2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180080000790ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2D_BST3
value|CVMX_L2D_BST3_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2D_BST3_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180080000798ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2D_ERR
value|CVMX_L2D_ERR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2D_ERR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180080000010ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2D_FADR
value|CVMX_L2D_FADR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2D_FADR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180080000018ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2D_FSYN0
value|CVMX_L2D_FSYN0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2D_FSYN0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180080000020ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2D_FSYN1
value|CVMX_L2D_FSYN1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2D_FSYN1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180080000028ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2D_FUS0
value|CVMX_L2D_FUS0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2D_FUS0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800800007A0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2D_FUS1
value|CVMX_L2D_FUS1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2D_FUS1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800800007A8ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2D_FUS2
value|CVMX_L2D_FUS2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2D_FUS2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800800007B0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2D_FUS3
value|CVMX_L2D_FUS3_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2D_FUS3_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800800007B8ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_L2T_ERR
value|CVMX_L2T_ERR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_L2T_ERR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180080000008ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_LED_BLINK
value|CVMX_LED_BLINK_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LED_BLINK_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LED_BLINK not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001A48ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_LED_CLK_PHASE
value|CVMX_LED_CLK_PHASE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LED_CLK_PHASE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LED_CLK_PHASE not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001A08ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_LED_CYLON
value|CVMX_LED_CYLON_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LED_CYLON_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LED_CYLON not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001AF8ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_LED_DBG
value|CVMX_LED_DBG_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LED_DBG_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LED_DBG not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001A18ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_LED_EN
value|CVMX_LED_EN_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LED_EN_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LED_EN not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001A00ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_LED_POLARITY
value|CVMX_LED_POLARITY_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LED_POLARITY_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LED_POLARITY not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001A50ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_LED_PRT
value|CVMX_LED_PRT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LED_PRT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LED_PRT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001A10ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_LED_PRT_FMT
value|CVMX_LED_PRT_FMT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LED_PRT_FMT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LED_PRT_FMT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001A30ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LED_PRT_STATUSX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LED_PRT_STATUSX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001A80ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|7
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LED_UDD_CNTX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LED_UDD_CNTX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001A20ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LED_UDD_DATX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LED_UDD_DATX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001A38ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LED_UDD_DAT_CLRX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LED_UDD_DAT_CLRX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001AC8ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LED_UDD_DAT_SETX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LED_UDD_DAT_SETX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001AC0ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LMCX_BIST_CTL
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LMCX_BIST_CTL(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800880000F0ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x60000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LMCX_BIST_RESULT
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LMCX_BIST_RESULT(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800880000F8ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x60000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LMCX_COMP_CTL
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LMCX_COMP_CTL(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180088000028ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x60000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LMCX_CTL
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LMCX_CTL(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180088000010ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x60000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LMCX_CTL1
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LMCX_CTL1(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180088000090ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x60000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LMCX_DCLK_CNT_HI
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LMCX_DCLK_CNT_HI(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180088000070ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x60000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LMCX_DCLK_CNT_LO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LMCX_DCLK_CNT_LO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180088000068ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x60000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LMCX_DCLK_CTL
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LMCX_DCLK_CTL(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800880000B8ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x60000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LMCX_DDR2_CTL
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LMCX_DDR2_CTL(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180088000018ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x60000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LMCX_DELAY_CFG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LMCX_DELAY_CFG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180088000088ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x60000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LMCX_DLL_CTL
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LMCX_DLL_CTL(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800880000C0ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x60000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LMCX_DUAL_MEMCFG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LMCX_DUAL_MEMCFG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180088000098ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x60000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LMCX_ECC_SYND
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LMCX_ECC_SYND(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180088000038ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x60000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LMCX_FADR
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LMCX_FADR(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180088000020ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x60000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LMCX_IFB_CNT_HI
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LMCX_IFB_CNT_HI(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180088000050ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x60000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LMCX_IFB_CNT_LO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LMCX_IFB_CNT_LO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180088000048ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x60000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LMCX_MEM_CFG0
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LMCX_MEM_CFG0(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180088000000ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x60000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LMCX_MEM_CFG1
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LMCX_MEM_CFG1(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180088000008ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x60000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LMCX_NXM
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LMCX_NXM(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800880000C8ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x60000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LMCX_OPS_CNT_HI
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LMCX_OPS_CNT_HI(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180088000060ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x60000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LMCX_OPS_CNT_LO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LMCX_OPS_CNT_LO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180088000058ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x60000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LMCX_PLL_BWCTL
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LMCX_PLL_BWCTL(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180088000040ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|0
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LMCX_PLL_CTL
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LMCX_PLL_CTL(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800880000A8ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x60000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LMCX_PLL_STATUS
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LMCX_PLL_STATUS(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800880000B0ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x60000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LMCX_READ_LEVEL_CTL
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LMCX_READ_LEVEL_CTL(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180088000140ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x60000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LMCX_READ_LEVEL_DBG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LMCX_READ_LEVEL_DBG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180088000148ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x60000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LMCX_READ_LEVEL_RANKX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LMCX_READ_LEVEL_RANKX(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180088000100ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0xC000000ull
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LMCX_RODT_COMP_CTL
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LMCX_RODT_COMP_CTL(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800880000A0ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x60000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LMCX_RODT_CTL
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LMCX_RODT_CTL(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180088000078ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x60000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LMCX_WODT_CTL0
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LMCX_WODT_CTL0(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180088000030ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x60000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_LMCX_WODT_CTL1
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_LMCX_WODT_CTL1(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180088000080ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x60000000ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_BOOT_BIST_STAT
value|CVMX_MIO_BOOT_BIST_STAT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_BOOT_BIST_STAT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800000000F8ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_BOOT_COMP
value|CVMX_MIO_BOOT_COMP_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_BOOT_COMP_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_BOOT_COMP not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800000000B8ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_BOOT_DMA_CFGX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_BOOT_DMA_CFGX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000100ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_BOOT_DMA_INTX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_BOOT_DMA_INTX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000138ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_BOOT_DMA_INT_ENX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_BOOT_DMA_INT_ENX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000150ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_BOOT_DMA_TIMX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_BOOT_DMA_TIMX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000120ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_BOOT_ERR
value|CVMX_MIO_BOOT_ERR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_BOOT_ERR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800000000A0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_BOOT_INT
value|CVMX_MIO_BOOT_INT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_BOOT_INT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800000000A8ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_BOOT_LOC_ADR
value|CVMX_MIO_BOOT_LOC_ADR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_BOOT_LOC_ADR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000090ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_BOOT_LOC_CFGX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_BOOT_LOC_CFGX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000080ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_BOOT_LOC_DAT
value|CVMX_MIO_BOOT_LOC_DAT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_BOOT_LOC_DAT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000098ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_BOOT_PIN_DEFS
value|CVMX_MIO_BOOT_PIN_DEFS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_BOOT_PIN_DEFS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_BOOT_PIN_DEFS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800000000C0ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_BOOT_REG_CFGX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_BOOT_REG_CFGX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000000ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|7
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_BOOT_REG_TIMX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_BOOT_REG_TIMX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000040ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|7
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_BOOT_THR
value|CVMX_MIO_BOOT_THR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_BOOT_THR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800000000B0ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_FUS_BNK_DATX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_FUS_BNK_DATX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001520ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_FUS_DAT0
value|CVMX_MIO_FUS_DAT0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_FUS_DAT0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001400ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_FUS_DAT1
value|CVMX_MIO_FUS_DAT1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_FUS_DAT1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001408ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_FUS_DAT2
value|CVMX_MIO_FUS_DAT2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_FUS_DAT2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001410ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_FUS_DAT3
value|CVMX_MIO_FUS_DAT3_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_FUS_DAT3_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001418ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_FUS_EMA
value|CVMX_MIO_FUS_EMA_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_FUS_EMA_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|!
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_FUS_EMA not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001550ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_FUS_PDF
value|CVMX_MIO_FUS_PDF_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_FUS_PDF_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|!
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_FUS_PDF not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001420ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_FUS_PLL
value|CVMX_MIO_FUS_PLL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_FUS_PLL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|!
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_FUS_PLL not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001580ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_FUS_PROG
value|CVMX_MIO_FUS_PROG_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_FUS_PROG_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001510ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_FUS_PROG_TIMES
value|CVMX_MIO_FUS_PROG_TIMES_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_FUS_PROG_TIMES_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|!
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_FUS_PROG_TIMES not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001518ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_FUS_RCMD
value|CVMX_MIO_FUS_RCMD_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_FUS_RCMD_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001500ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_FUS_SPR_REPAIR_RES
value|CVMX_MIO_FUS_SPR_REPAIR_RES_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_FUS_SPR_REPAIR_RES_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001548ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_FUS_SPR_REPAIR_SUM
value|CVMX_MIO_FUS_SPR_REPAIR_SUM_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_FUS_SPR_REPAIR_SUM_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001540ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_FUS_UNLOCK
value|CVMX_MIO_FUS_UNLOCK_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_FUS_UNLOCK_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_FUS_UNLOCK not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001578ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_FUS_WADR
value|CVMX_MIO_FUS_WADR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_FUS_WADR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001508ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_NDF_DMA_CFG
value|CVMX_MIO_NDF_DMA_CFG_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_NDF_DMA_CFG_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_NDF_DMA_CFG not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000168ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_NDF_DMA_INT
value|CVMX_MIO_NDF_DMA_INT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_NDF_DMA_INT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_NDF_DMA_INT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000170ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_NDF_DMA_INT_EN
value|CVMX_MIO_NDF_DMA_INT_EN_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_NDF_DMA_INT_EN_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_NDF_DMA_INT_EN not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000178ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_PLL_CTL
value|CVMX_MIO_PLL_CTL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_PLL_CTL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_PLL_CTL not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001448ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_PLL_SETTING
value|CVMX_MIO_PLL_SETTING_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_PLL_SETTING_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_PLL_SETTING not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001440ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_TWSX_INT
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_TWSX_INT(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001010ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|512
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_TWSX_SW_TWSI
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_TWSX_SW_TWSI(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001000ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|512
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_TWSX_SW_TWSI_EXT
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_TWSX_SW_TWSI_EXT(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001018ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|512
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_TWSX_TWSI_SW
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_TWSX_TWSI_SW(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001008ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|512
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_UART2_DLH
value|CVMX_MIO_UART2_DLH_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UART2_DLH_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UART2_DLH not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000488ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_UART2_DLL
value|CVMX_MIO_UART2_DLL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UART2_DLL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UART2_DLL not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000480ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_UART2_FAR
value|CVMX_MIO_UART2_FAR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UART2_FAR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UART2_FAR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000520ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_UART2_FCR
value|CVMX_MIO_UART2_FCR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UART2_FCR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UART2_FCR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000450ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_UART2_HTX
value|CVMX_MIO_UART2_HTX_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UART2_HTX_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UART2_HTX not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000708ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_UART2_IER
value|CVMX_MIO_UART2_IER_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UART2_IER_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UART2_IER not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000408ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_UART2_IIR
value|CVMX_MIO_UART2_IIR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UART2_IIR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UART2_IIR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000410ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_UART2_LCR
value|CVMX_MIO_UART2_LCR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UART2_LCR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UART2_LCR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000418ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_UART2_LSR
value|CVMX_MIO_UART2_LSR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UART2_LSR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UART2_LSR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000428ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_UART2_MCR
value|CVMX_MIO_UART2_MCR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UART2_MCR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UART2_MCR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000420ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_UART2_MSR
value|CVMX_MIO_UART2_MSR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UART2_MSR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UART2_MSR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000430ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_UART2_RBR
value|CVMX_MIO_UART2_RBR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UART2_RBR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UART2_RBR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000400ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_UART2_RFL
value|CVMX_MIO_UART2_RFL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UART2_RFL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UART2_RFL not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000608ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_UART2_RFW
value|CVMX_MIO_UART2_RFW_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UART2_RFW_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UART2_RFW not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000530ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_UART2_SBCR
value|CVMX_MIO_UART2_SBCR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UART2_SBCR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UART2_SBCR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000620ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_UART2_SCR
value|CVMX_MIO_UART2_SCR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UART2_SCR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UART2_SCR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000438ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_UART2_SFE
value|CVMX_MIO_UART2_SFE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UART2_SFE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UART2_SFE not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000630ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_UART2_SRR
value|CVMX_MIO_UART2_SRR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UART2_SRR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UART2_SRR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000610ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_UART2_SRT
value|CVMX_MIO_UART2_SRT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UART2_SRT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UART2_SRT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000638ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_UART2_SRTS
value|CVMX_MIO_UART2_SRTS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UART2_SRTS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UART2_SRTS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000618ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_UART2_STT
value|CVMX_MIO_UART2_STT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UART2_STT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UART2_STT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000700ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_UART2_TFL
value|CVMX_MIO_UART2_TFL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UART2_TFL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UART2_TFL not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000600ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_UART2_TFR
value|CVMX_MIO_UART2_TFR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UART2_TFR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UART2_TFR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000528ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_UART2_THR
value|CVMX_MIO_UART2_THR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UART2_THR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UART2_THR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000440ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MIO_UART2_USR
value|CVMX_MIO_UART2_USR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UART2_USR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UART2_USR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000538ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UARTX_DLH
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UARTX_DLH(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000888ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UARTX_DLL
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UARTX_DLL(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000880ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UARTX_FAR
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UARTX_FAR(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000920ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UARTX_FCR
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UARTX_FCR(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000850ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UARTX_HTX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UARTX_HTX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000B08ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UARTX_IER
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UARTX_IER(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000808ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UARTX_IIR
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UARTX_IIR(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000810ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UARTX_LCR
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UARTX_LCR(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000818ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UARTX_LSR
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UARTX_LSR(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000828ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UARTX_MCR
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UARTX_MCR(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000820ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UARTX_MSR
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UARTX_MSR(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000830ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UARTX_RBR
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UARTX_RBR(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000800ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UARTX_RFL
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UARTX_RFL(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000A08ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UARTX_RFW
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UARTX_RFW(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000930ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UARTX_SBCR
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UARTX_SBCR(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000A20ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UARTX_SCR
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UARTX_SCR(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000838ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UARTX_SFE
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UARTX_SFE(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000A30ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UARTX_SRR
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UARTX_SRR(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000A10ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UARTX_SRT
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UARTX_SRT(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000A38ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UARTX_SRTS
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UARTX_SRTS(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000A18ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UARTX_STT
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UARTX_STT(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000B00ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UARTX_TFL
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UARTX_TFL(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000A00ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UARTX_TFR
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UARTX_TFR(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000928ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UARTX_THR
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UARTX_THR(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000840ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIO_UARTX_USR
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIO_UARTX_USR(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000000938ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIXX_BIST
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIXX_BIST(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000100078ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIXX_CTL
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIXX_CTL(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000100020ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIXX_INTENA
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIXX_INTENA(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000100050ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIXX_IRCNT
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIXX_IRCNT(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000100030ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIXX_IRHWM
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIXX_IRHWM(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000100028ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIXX_IRING1
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIXX_IRING1(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000100010ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIXX_IRING2
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIXX_IRING2(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000100018ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIXX_ISR
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIXX_ISR(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000100048ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIXX_ORCNT
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIXX_ORCNT(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000100040ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIXX_ORHWM
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIXX_ORHWM(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000100038ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIXX_ORING1
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIXX_ORING1(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000100000ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIXX_ORING2
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIXX_ORING2(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000100008ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MIXX_REMCNT
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MIXX_REMCNT(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000100058ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|2048
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MPI_CFG
value|CVMX_MPI_CFG_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MPI_CFG_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MPI_CFG not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000001000ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MPI_DATX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|8
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|8
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|8
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MPI_DATX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000001080ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MPI_STS
value|CVMX_MPI_STS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MPI_STS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MPI_STS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000001008ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_MPI_TX
value|CVMX_MPI_TX_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_MPI_TX_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_MPI_TX not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000001010ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NDF_BT_PG_INFO
value|CVMX_NDF_BT_PG_INFO_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NDF_BT_PG_INFO_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NDF_BT_PG_INFO not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070001000018ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NDF_CMD
value|CVMX_NDF_CMD_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NDF_CMD_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NDF_CMD not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070001000000ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NDF_DRBELL
value|CVMX_NDF_DRBELL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NDF_DRBELL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NDF_DRBELL not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070001000030ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NDF_ECC_CNT
value|CVMX_NDF_ECC_CNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NDF_ECC_CNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NDF_ECC_CNT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070001000010ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NDF_INT
value|CVMX_NDF_INT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NDF_INT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NDF_INT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070001000020ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NDF_INT_EN
value|CVMX_NDF_INT_EN_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NDF_INT_EN_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NDF_INT_EN not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070001000028ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NDF_MISC
value|CVMX_NDF_MISC_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NDF_MISC_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NDF_MISC not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070001000008ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NDF_ST_REG
value|CVMX_NDF_ST_REG_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NDF_ST_REG_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NDF_ST_REG not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070001000038ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_BAR1_INDEXX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_BAR1_INDEXX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000000ull
operator|+
operator|(
name|offset
operator|&
literal|31
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_BIST_STATUS
value|CVMX_NPEI_BIST_STATUS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_BIST_STATUS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_BIST_STATUS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000580ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_BIST_STATUS2
value|CVMX_NPEI_BIST_STATUS2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_BIST_STATUS2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_BIST_STATUS2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000680ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_CTL_PORT0
value|CVMX_NPEI_CTL_PORT0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_CTL_PORT0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_CTL_PORT0 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000250ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_CTL_PORT1
value|CVMX_NPEI_CTL_PORT1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_CTL_PORT1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_CTL_PORT1 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000260ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_CTL_STATUS
value|CVMX_NPEI_CTL_STATUS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_CTL_STATUS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_CTL_STATUS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000570ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_CTL_STATUS2
value|CVMX_NPEI_CTL_STATUS2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_CTL_STATUS2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_CTL_STATUS2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000003C00ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_DATA_OUT_CNT
value|CVMX_NPEI_DATA_OUT_CNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_DATA_OUT_CNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_DATA_OUT_CNT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000005F0ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_DBG_DATA
value|CVMX_NPEI_DBG_DATA_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_DBG_DATA_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_DBG_DATA not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000510ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_DBG_SELECT
value|CVMX_NPEI_DBG_SELECT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_DBG_SELECT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_DBG_SELECT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000500ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_DMA0_INT_LEVEL
value|CVMX_NPEI_DMA0_INT_LEVEL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_DMA0_INT_LEVEL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_DMA0_INT_LEVEL not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000005C0ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_DMA1_INT_LEVEL
value|CVMX_NPEI_DMA1_INT_LEVEL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_DMA1_INT_LEVEL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_DMA1_INT_LEVEL not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000005D0ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_DMAX_COUNTS
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_DMAX_COUNTS(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000450ull
operator|+
operator|(
name|offset
operator|&
literal|7
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_DMAX_DBELL
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_DMAX_DBELL(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000003B0ull
operator|+
operator|(
name|offset
operator|&
literal|7
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_DMAX_IBUFF_SADDR
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_DMAX_IBUFF_SADDR(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000400ull
operator|+
operator|(
name|offset
operator|&
literal|7
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_DMAX_NADDR
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_DMAX_NADDR(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000004A0ull
operator|+
operator|(
name|offset
operator|&
literal|7
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_DMA_CNTS
value|CVMX_NPEI_DMA_CNTS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_DMA_CNTS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_DMA_CNTS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000005E0ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_DMA_CONTROL
value|CVMX_NPEI_DMA_CONTROL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_DMA_CONTROL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_DMA_CONTROL not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000003A0ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_DMA_PCIE_REQ_NUM
value|CVMX_NPEI_DMA_PCIE_REQ_NUM_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_DMA_PCIE_REQ_NUM_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_DMA_PCIE_REQ_NUM not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000005B0ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_DMA_STATE1
value|CVMX_NPEI_DMA_STATE1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_DMA_STATE1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_DMA_STATE1 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000006C0ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_DMA_STATE1_P1
value|CVMX_NPEI_DMA_STATE1_P1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_DMA_STATE1_P1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
literal|0x0000000000000680ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_DMA_STATE2
value|CVMX_NPEI_DMA_STATE2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_DMA_STATE2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_DMA_STATE2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000006D0ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_DMA_STATE2_P1
value|CVMX_NPEI_DMA_STATE2_P1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_DMA_STATE2_P1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
literal|0x0000000000000690ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_DMA_STATE3_P1
value|CVMX_NPEI_DMA_STATE3_P1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_DMA_STATE3_P1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
literal|0x00000000000006A0ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_DMA_STATE4_P1
value|CVMX_NPEI_DMA_STATE4_P1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_DMA_STATE4_P1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
literal|0x00000000000006B0ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_DMA_STATE5_P1
value|CVMX_NPEI_DMA_STATE5_P1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_DMA_STATE5_P1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
literal|0x00000000000006C0ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_INT_A_ENB
value|CVMX_NPEI_INT_A_ENB_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_INT_A_ENB_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_INT_A_ENB not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000560ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_INT_A_ENB2
value|CVMX_NPEI_INT_A_ENB2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_INT_A_ENB2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_INT_A_ENB2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000003CE0ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_INT_A_SUM
value|CVMX_NPEI_INT_A_SUM_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_INT_A_SUM_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_INT_A_SUM not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000550ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_INT_ENB
value|CVMX_NPEI_INT_ENB_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_INT_ENB_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_INT_ENB not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000540ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_INT_ENB2
value|CVMX_NPEI_INT_ENB2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_INT_ENB2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_INT_ENB2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000003CD0ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_INT_INFO
value|CVMX_NPEI_INT_INFO_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_INT_INFO_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_INT_INFO not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000590ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_INT_SUM
value|CVMX_NPEI_INT_SUM_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_INT_SUM_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_INT_SUM not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000530ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_INT_SUM2
value|CVMX_NPEI_INT_SUM2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_INT_SUM2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_INT_SUM2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000003CC0ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_LAST_WIN_RDATA0
value|CVMX_NPEI_LAST_WIN_RDATA0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_LAST_WIN_RDATA0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_LAST_WIN_RDATA0 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000600ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_LAST_WIN_RDATA1
value|CVMX_NPEI_LAST_WIN_RDATA1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_LAST_WIN_RDATA1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_LAST_WIN_RDATA1 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000610ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_MEM_ACCESS_CTL
value|CVMX_NPEI_MEM_ACCESS_CTL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_MEM_ACCESS_CTL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_MEM_ACCESS_CTL not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000004F0ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_MEM_ACCESS_SUBIDX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|>=
literal|12
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|27
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|>=
literal|12
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|27
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_MEM_ACCESS_SUBIDX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000340ull
operator|+
operator|(
name|offset
operator|&
literal|31
operator|)
operator|*
literal|16
operator|-
literal|16
operator|*
literal|12
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_MSI_ENB0
value|CVMX_NPEI_MSI_ENB0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_MSI_ENB0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_MSI_ENB0 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000003C50ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_MSI_ENB1
value|CVMX_NPEI_MSI_ENB1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_MSI_ENB1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_MSI_ENB1 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000003C60ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_MSI_ENB2
value|CVMX_NPEI_MSI_ENB2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_MSI_ENB2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_MSI_ENB2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000003C70ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_MSI_ENB3
value|CVMX_NPEI_MSI_ENB3_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_MSI_ENB3_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_MSI_ENB3 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000003C80ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_MSI_RCV0
value|CVMX_NPEI_MSI_RCV0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_MSI_RCV0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_MSI_RCV0 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000003C10ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_MSI_RCV1
value|CVMX_NPEI_MSI_RCV1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_MSI_RCV1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_MSI_RCV1 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000003C20ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_MSI_RCV2
value|CVMX_NPEI_MSI_RCV2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_MSI_RCV2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_MSI_RCV2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000003C30ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_MSI_RCV3
value|CVMX_NPEI_MSI_RCV3_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_MSI_RCV3_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_MSI_RCV3 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000003C40ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_MSI_RD_MAP
value|CVMX_NPEI_MSI_RD_MAP_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_MSI_RD_MAP_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_MSI_RD_MAP not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000003CA0ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_MSI_W1C_ENB0
value|CVMX_NPEI_MSI_W1C_ENB0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_MSI_W1C_ENB0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_MSI_W1C_ENB0 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000003CF0ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_MSI_W1C_ENB1
value|CVMX_NPEI_MSI_W1C_ENB1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_MSI_W1C_ENB1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_MSI_W1C_ENB1 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000003D00ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_MSI_W1C_ENB2
value|CVMX_NPEI_MSI_W1C_ENB2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_MSI_W1C_ENB2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_MSI_W1C_ENB2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000003D10ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_MSI_W1C_ENB3
value|CVMX_NPEI_MSI_W1C_ENB3_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_MSI_W1C_ENB3_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_MSI_W1C_ENB3 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000003D20ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_MSI_W1S_ENB0
value|CVMX_NPEI_MSI_W1S_ENB0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_MSI_W1S_ENB0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_MSI_W1S_ENB0 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000003D30ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_MSI_W1S_ENB1
value|CVMX_NPEI_MSI_W1S_ENB1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_MSI_W1S_ENB1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_MSI_W1S_ENB1 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000003D40ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_MSI_W1S_ENB2
value|CVMX_NPEI_MSI_W1S_ENB2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_MSI_W1S_ENB2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_MSI_W1S_ENB2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000003D50ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_MSI_W1S_ENB3
value|CVMX_NPEI_MSI_W1S_ENB3_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_MSI_W1S_ENB3_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_MSI_W1S_ENB3 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000003D60ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_MSI_WR_MAP
value|CVMX_NPEI_MSI_WR_MAP_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_MSI_WR_MAP_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_MSI_WR_MAP not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000003C90ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_PCIE_CREDIT_CNT
value|CVMX_NPEI_PCIE_CREDIT_CNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PCIE_CREDIT_CNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PCIE_CREDIT_CNT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000003D70ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_PCIE_MSI_RCV
value|CVMX_NPEI_PCIE_MSI_RCV_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PCIE_MSI_RCV_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PCIE_MSI_RCV not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000003CB0ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_PCIE_MSI_RCV_B1
value|CVMX_NPEI_PCIE_MSI_RCV_B1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PCIE_MSI_RCV_B1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PCIE_MSI_RCV_B1 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000650ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_PCIE_MSI_RCV_B2
value|CVMX_NPEI_PCIE_MSI_RCV_B2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PCIE_MSI_RCV_B2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PCIE_MSI_RCV_B2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000660ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_PCIE_MSI_RCV_B3
value|CVMX_NPEI_PCIE_MSI_RCV_B3_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PCIE_MSI_RCV_B3_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PCIE_MSI_RCV_B3 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000670ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PKTX_CNTS
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PKTX_CNTS(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000002400ull
operator|+
operator|(
name|offset
operator|&
literal|31
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PKTX_INSTR_BADDR
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PKTX_INSTR_BADDR(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000002800ull
operator|+
operator|(
name|offset
operator|&
literal|31
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PKTX_INSTR_BAOFF_DBELL
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PKTX_INSTR_BAOFF_DBELL(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000002C00ull
operator|+
operator|(
name|offset
operator|&
literal|31
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PKTX_INSTR_FIFO_RSIZE
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PKTX_INSTR_FIFO_RSIZE(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000003000ull
operator|+
operator|(
name|offset
operator|&
literal|31
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PKTX_INSTR_HEADER
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PKTX_INSTR_HEADER(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000003400ull
operator|+
operator|(
name|offset
operator|&
literal|31
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PKTX_IN_BP
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PKTX_IN_BP(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000003800ull
operator|+
operator|(
name|offset
operator|&
literal|31
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PKTX_SLIST_BADDR
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PKTX_SLIST_BADDR(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000001400ull
operator|+
operator|(
name|offset
operator|&
literal|31
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PKTX_SLIST_BAOFF_DBELL
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PKTX_SLIST_BAOFF_DBELL(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000001800ull
operator|+
operator|(
name|offset
operator|&
literal|31
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PKTX_SLIST_FIFO_RSIZE
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PKTX_SLIST_FIFO_RSIZE(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000001C00ull
operator|+
operator|(
name|offset
operator|&
literal|31
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_PKT_CNT_INT
value|CVMX_NPEI_PKT_CNT_INT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PKT_CNT_INT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PKT_CNT_INT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000001110ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_PKT_CNT_INT_ENB
value|CVMX_NPEI_PKT_CNT_INT_ENB_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PKT_CNT_INT_ENB_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PKT_CNT_INT_ENB not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000001130ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_PKT_DATA_OUT_ES
value|CVMX_NPEI_PKT_DATA_OUT_ES_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PKT_DATA_OUT_ES_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PKT_DATA_OUT_ES not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000010B0ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_PKT_DATA_OUT_NS
value|CVMX_NPEI_PKT_DATA_OUT_NS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PKT_DATA_OUT_NS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PKT_DATA_OUT_NS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000010A0ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_PKT_DATA_OUT_ROR
value|CVMX_NPEI_PKT_DATA_OUT_ROR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PKT_DATA_OUT_ROR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PKT_DATA_OUT_ROR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000001090ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_PKT_DPADDR
value|CVMX_NPEI_PKT_DPADDR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PKT_DPADDR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PKT_DPADDR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000001080ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_PKT_INPUT_CONTROL
value|CVMX_NPEI_PKT_INPUT_CONTROL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PKT_INPUT_CONTROL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PKT_INPUT_CONTROL not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000001150ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_PKT_INSTR_ENB
value|CVMX_NPEI_PKT_INSTR_ENB_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PKT_INSTR_ENB_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PKT_INSTR_ENB not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000001000ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_PKT_INSTR_RD_SIZE
value|CVMX_NPEI_PKT_INSTR_RD_SIZE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PKT_INSTR_RD_SIZE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PKT_INSTR_RD_SIZE not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000001190ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_PKT_INSTR_SIZE
value|CVMX_NPEI_PKT_INSTR_SIZE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PKT_INSTR_SIZE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PKT_INSTR_SIZE not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000001020ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_PKT_INT_LEVELS
value|CVMX_NPEI_PKT_INT_LEVELS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PKT_INT_LEVELS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PKT_INT_LEVELS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000001100ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_PKT_IN_BP
value|CVMX_NPEI_PKT_IN_BP_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PKT_IN_BP_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PKT_IN_BP not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000006B0ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PKT_IN_DONEX_CNTS
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PKT_IN_DONEX_CNTS(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000002000ull
operator|+
operator|(
name|offset
operator|&
literal|31
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_PKT_IN_INSTR_COUNTS
value|CVMX_NPEI_PKT_IN_INSTR_COUNTS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PKT_IN_INSTR_COUNTS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PKT_IN_INSTR_COUNTS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000006A0ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_PKT_IN_PCIE_PORT
value|CVMX_NPEI_PKT_IN_PCIE_PORT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PKT_IN_PCIE_PORT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PKT_IN_PCIE_PORT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000011A0ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_PKT_IPTR
value|CVMX_NPEI_PKT_IPTR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PKT_IPTR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PKT_IPTR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000001070ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_PKT_OUTPUT_WMARK
value|CVMX_NPEI_PKT_OUTPUT_WMARK_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PKT_OUTPUT_WMARK_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PKT_OUTPUT_WMARK not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000001160ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_PKT_OUT_BMODE
value|CVMX_NPEI_PKT_OUT_BMODE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PKT_OUT_BMODE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PKT_OUT_BMODE not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000010D0ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_PKT_OUT_ENB
value|CVMX_NPEI_PKT_OUT_ENB_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PKT_OUT_ENB_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PKT_OUT_ENB not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000001010ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_PKT_PCIE_PORT
value|CVMX_NPEI_PKT_PCIE_PORT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PKT_PCIE_PORT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PKT_PCIE_PORT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000010E0ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_PKT_PORT_IN_RST
value|CVMX_NPEI_PKT_PORT_IN_RST_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PKT_PORT_IN_RST_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PKT_PORT_IN_RST not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000690ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_PKT_SLIST_ES
value|CVMX_NPEI_PKT_SLIST_ES_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PKT_SLIST_ES_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PKT_SLIST_ES not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000001050ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_PKT_SLIST_ID_SIZE
value|CVMX_NPEI_PKT_SLIST_ID_SIZE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PKT_SLIST_ID_SIZE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PKT_SLIST_ID_SIZE not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000001180ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_PKT_SLIST_NS
value|CVMX_NPEI_PKT_SLIST_NS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PKT_SLIST_NS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PKT_SLIST_NS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000001040ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_PKT_SLIST_ROR
value|CVMX_NPEI_PKT_SLIST_ROR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PKT_SLIST_ROR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PKT_SLIST_ROR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000001030ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_PKT_TIME_INT
value|CVMX_NPEI_PKT_TIME_INT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PKT_TIME_INT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PKT_TIME_INT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000001120ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_PKT_TIME_INT_ENB
value|CVMX_NPEI_PKT_TIME_INT_ENB_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_PKT_TIME_INT_ENB_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_PKT_TIME_INT_ENB not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000001140ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_RSL_INT_BLOCKS
value|CVMX_NPEI_RSL_INT_BLOCKS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_RSL_INT_BLOCKS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_RSL_INT_BLOCKS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000520ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_SCRATCH_1
value|CVMX_NPEI_SCRATCH_1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_SCRATCH_1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_SCRATCH_1 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000270ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_STATE1
value|CVMX_NPEI_STATE1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_STATE1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_STATE1 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000620ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_STATE2
value|CVMX_NPEI_STATE2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_STATE2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_STATE2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000630ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_STATE3
value|CVMX_NPEI_STATE3_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_STATE3_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_STATE3 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000640ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_WINDOW_CTL
value|CVMX_NPEI_WINDOW_CTL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_WINDOW_CTL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_WINDOW_CTL not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000380ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_WIN_RD_ADDR
value|CVMX_NPEI_WIN_RD_ADDR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_WIN_RD_ADDR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_WIN_RD_ADDR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000210ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_WIN_RD_DATA
value|CVMX_NPEI_WIN_RD_DATA_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_WIN_RD_DATA_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_WIN_RD_DATA not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000240ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_WIN_WR_ADDR
value|CVMX_NPEI_WIN_WR_ADDR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_WIN_WR_ADDR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_WIN_WR_ADDR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000200ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_WIN_WR_DATA
value|CVMX_NPEI_WIN_WR_DATA_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_WIN_WR_DATA_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_WIN_WR_DATA not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000220ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPEI_WIN_WR_MASK
value|CVMX_NPEI_WIN_WR_MASK_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPEI_WIN_WR_MASK_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPEI_WIN_WR_MASK not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000230ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_BASE_ADDR_INPUT0
value|CVMX_NPI_BASE_ADDR_INPUTX(0)
end_define

begin_define
define|#
directive|define
name|CVMX_NPI_BASE_ADDR_INPUT1
value|CVMX_NPI_BASE_ADDR_INPUTX(1)
end_define

begin_define
define|#
directive|define
name|CVMX_NPI_BASE_ADDR_INPUT2
value|CVMX_NPI_BASE_ADDR_INPUTX(2)
end_define

begin_define
define|#
directive|define
name|CVMX_NPI_BASE_ADDR_INPUT3
value|CVMX_NPI_BASE_ADDR_INPUTX(3)
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_BASE_ADDR_INPUTX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_BASE_ADDR_INPUTX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000000070ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_BASE_ADDR_OUTPUT0
value|CVMX_NPI_BASE_ADDR_OUTPUTX(0)
end_define

begin_define
define|#
directive|define
name|CVMX_NPI_BASE_ADDR_OUTPUT1
value|CVMX_NPI_BASE_ADDR_OUTPUTX(1)
end_define

begin_define
define|#
directive|define
name|CVMX_NPI_BASE_ADDR_OUTPUT2
value|CVMX_NPI_BASE_ADDR_OUTPUTX(2)
end_define

begin_define
define|#
directive|define
name|CVMX_NPI_BASE_ADDR_OUTPUT3
value|CVMX_NPI_BASE_ADDR_OUTPUTX(3)
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_BASE_ADDR_OUTPUTX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_BASE_ADDR_OUTPUTX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000000B8ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_BIST_STATUS
value|CVMX_NPI_BIST_STATUS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_BIST_STATUS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_BIST_STATUS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000003F8ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_BUFF_SIZE_OUTPUT0
value|CVMX_NPI_BUFF_SIZE_OUTPUTX(0)
end_define

begin_define
define|#
directive|define
name|CVMX_NPI_BUFF_SIZE_OUTPUT1
value|CVMX_NPI_BUFF_SIZE_OUTPUTX(1)
end_define

begin_define
define|#
directive|define
name|CVMX_NPI_BUFF_SIZE_OUTPUT2
value|CVMX_NPI_BUFF_SIZE_OUTPUTX(2)
end_define

begin_define
define|#
directive|define
name|CVMX_NPI_BUFF_SIZE_OUTPUT3
value|CVMX_NPI_BUFF_SIZE_OUTPUTX(3)
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_BUFF_SIZE_OUTPUTX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_BUFF_SIZE_OUTPUTX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000000E0ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_COMP_CTL
value|CVMX_NPI_COMP_CTL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_COMP_CTL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_COMP_CTL not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000000218ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_CTL_STATUS
value|CVMX_NPI_CTL_STATUS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_CTL_STATUS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_CTL_STATUS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000000010ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_DBG_SELECT
value|CVMX_NPI_DBG_SELECT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_DBG_SELECT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_DBG_SELECT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000000008ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_DMA_CONTROL
value|CVMX_NPI_DMA_CONTROL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_DMA_CONTROL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_DMA_CONTROL not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000000128ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_DMA_HIGHP_COUNTS
value|CVMX_NPI_DMA_HIGHP_COUNTS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_DMA_HIGHP_COUNTS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_DMA_HIGHP_COUNTS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000000148ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_DMA_HIGHP_NADDR
value|CVMX_NPI_DMA_HIGHP_NADDR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_DMA_HIGHP_NADDR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_DMA_HIGHP_NADDR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000000158ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_DMA_LOWP_COUNTS
value|CVMX_NPI_DMA_LOWP_COUNTS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_DMA_LOWP_COUNTS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_DMA_LOWP_COUNTS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000000140ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_DMA_LOWP_NADDR
value|CVMX_NPI_DMA_LOWP_NADDR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_DMA_LOWP_NADDR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_DMA_LOWP_NADDR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000000150ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_HIGHP_DBELL
value|CVMX_NPI_HIGHP_DBELL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_HIGHP_DBELL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_HIGHP_DBELL not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000000120ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_HIGHP_IBUFF_SADDR
value|CVMX_NPI_HIGHP_IBUFF_SADDR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_HIGHP_IBUFF_SADDR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_HIGHP_IBUFF_SADDR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000000110ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_INPUT_CONTROL
value|CVMX_NPI_INPUT_CONTROL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_INPUT_CONTROL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_INPUT_CONTROL not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000000138ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_INT_ENB
value|CVMX_NPI_INT_ENB_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_INT_ENB_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_INT_ENB not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000000020ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_INT_SUM
value|CVMX_NPI_INT_SUM_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_INT_SUM_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_INT_SUM not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000000018ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_LOWP_DBELL
value|CVMX_NPI_LOWP_DBELL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_LOWP_DBELL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_LOWP_DBELL not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000000118ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_LOWP_IBUFF_SADDR
value|CVMX_NPI_LOWP_IBUFF_SADDR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_LOWP_IBUFF_SADDR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_LOWP_IBUFF_SADDR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000000108ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_MEM_ACCESS_SUBID3
value|CVMX_NPI_MEM_ACCESS_SUBIDX(3)
end_define

begin_define
define|#
directive|define
name|CVMX_NPI_MEM_ACCESS_SUBID4
value|CVMX_NPI_MEM_ACCESS_SUBIDX(4)
end_define

begin_define
define|#
directive|define
name|CVMX_NPI_MEM_ACCESS_SUBID5
value|CVMX_NPI_MEM_ACCESS_SUBIDX(5)
end_define

begin_define
define|#
directive|define
name|CVMX_NPI_MEM_ACCESS_SUBID6
value|CVMX_NPI_MEM_ACCESS_SUBIDX(6)
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_MEM_ACCESS_SUBIDX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|>=
literal|3
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|6
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|>=
literal|3
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|6
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|>=
literal|3
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|6
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|>=
literal|3
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|6
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|>=
literal|3
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|6
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_MEM_ACCESS_SUBIDX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000000028ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|7
operator|)
operator|*
literal|8
operator|-
literal|8
operator|*
literal|3
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_MSI_RCV
value|CVMX_NPI_MSI_RCV_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_MSI_RCV_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_MSI_RCV not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000190ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_NPI_MSI_RCV
value|CVMX_NPI_NPI_MSI_RCV_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_NPI_MSI_RCV_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_NPI_MSI_RCV not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000001190ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_NUM_DESC_OUTPUT0
value|CVMX_NPI_NUM_DESC_OUTPUTX(0)
end_define

begin_define
define|#
directive|define
name|CVMX_NPI_NUM_DESC_OUTPUT1
value|CVMX_NPI_NUM_DESC_OUTPUTX(1)
end_define

begin_define
define|#
directive|define
name|CVMX_NPI_NUM_DESC_OUTPUT2
value|CVMX_NPI_NUM_DESC_OUTPUTX(2)
end_define

begin_define
define|#
directive|define
name|CVMX_NPI_NUM_DESC_OUTPUT3
value|CVMX_NPI_NUM_DESC_OUTPUTX(3)
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_NUM_DESC_OUTPUTX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_NUM_DESC_OUTPUTX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000000050ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_OUTPUT_CONTROL
value|CVMX_NPI_OUTPUT_CONTROL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_OUTPUT_CONTROL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_OUTPUT_CONTROL not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000000100ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_P0_DBPAIR_ADDR
value|CVMX_NPI_PX_DBPAIR_ADDR(0)
end_define

begin_define
define|#
directive|define
name|CVMX_NPI_P0_INSTR_ADDR
value|CVMX_NPI_PX_INSTR_ADDR(0)
end_define

begin_define
define|#
directive|define
name|CVMX_NPI_P0_INSTR_CNTS
value|CVMX_NPI_PX_INSTR_CNTS(0)
end_define

begin_define
define|#
directive|define
name|CVMX_NPI_P0_PAIR_CNTS
value|CVMX_NPI_PX_PAIR_CNTS(0)
end_define

begin_define
define|#
directive|define
name|CVMX_NPI_P1_DBPAIR_ADDR
value|CVMX_NPI_PX_DBPAIR_ADDR(1)
end_define

begin_define
define|#
directive|define
name|CVMX_NPI_P1_INSTR_ADDR
value|CVMX_NPI_PX_INSTR_ADDR(1)
end_define

begin_define
define|#
directive|define
name|CVMX_NPI_P1_INSTR_CNTS
value|CVMX_NPI_PX_INSTR_CNTS(1)
end_define

begin_define
define|#
directive|define
name|CVMX_NPI_P1_PAIR_CNTS
value|CVMX_NPI_PX_PAIR_CNTS(1)
end_define

begin_define
define|#
directive|define
name|CVMX_NPI_P2_DBPAIR_ADDR
value|CVMX_NPI_PX_DBPAIR_ADDR(2)
end_define

begin_define
define|#
directive|define
name|CVMX_NPI_P2_INSTR_ADDR
value|CVMX_NPI_PX_INSTR_ADDR(2)
end_define

begin_define
define|#
directive|define
name|CVMX_NPI_P2_INSTR_CNTS
value|CVMX_NPI_PX_INSTR_CNTS(2)
end_define

begin_define
define|#
directive|define
name|CVMX_NPI_P2_PAIR_CNTS
value|CVMX_NPI_PX_PAIR_CNTS(2)
end_define

begin_define
define|#
directive|define
name|CVMX_NPI_P3_DBPAIR_ADDR
value|CVMX_NPI_PX_DBPAIR_ADDR(3)
end_define

begin_define
define|#
directive|define
name|CVMX_NPI_P3_INSTR_ADDR
value|CVMX_NPI_PX_INSTR_ADDR(3)
end_define

begin_define
define|#
directive|define
name|CVMX_NPI_P3_INSTR_CNTS
value|CVMX_NPI_PX_INSTR_CNTS(3)
end_define

begin_define
define|#
directive|define
name|CVMX_NPI_P3_PAIR_CNTS
value|CVMX_NPI_PX_PAIR_CNTS(3)
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_BAR1_INDEXX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_BAR1_INDEXX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000001100ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|31
operator|)
operator|*
literal|4
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_BIST_REG
value|CVMX_NPI_PCI_BIST_REG_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_BIST_REG_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_BIST_REG not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000011C0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_BURST_SIZE
value|CVMX_NPI_PCI_BURST_SIZE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_BURST_SIZE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_BURST_SIZE not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000000D8ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_CFG00
value|CVMX_NPI_PCI_CFG00_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_CFG00_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_CFG00 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000001800ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_CFG01
value|CVMX_NPI_PCI_CFG01_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_CFG01_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_CFG01 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000001804ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_CFG02
value|CVMX_NPI_PCI_CFG02_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_CFG02_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_CFG02 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000001808ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_CFG03
value|CVMX_NPI_PCI_CFG03_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_CFG03_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_CFG03 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F000000180Cull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_CFG04
value|CVMX_NPI_PCI_CFG04_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_CFG04_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_CFG04 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000001810ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_CFG05
value|CVMX_NPI_PCI_CFG05_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_CFG05_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_CFG05 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000001814ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_CFG06
value|CVMX_NPI_PCI_CFG06_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_CFG06_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_CFG06 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000001818ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_CFG07
value|CVMX_NPI_PCI_CFG07_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_CFG07_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_CFG07 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F000000181Cull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_CFG08
value|CVMX_NPI_PCI_CFG08_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_CFG08_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_CFG08 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000001820ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_CFG09
value|CVMX_NPI_PCI_CFG09_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_CFG09_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_CFG09 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000001824ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_CFG10
value|CVMX_NPI_PCI_CFG10_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_CFG10_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_CFG10 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000001828ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_CFG11
value|CVMX_NPI_PCI_CFG11_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_CFG11_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_CFG11 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F000000182Cull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_CFG12
value|CVMX_NPI_PCI_CFG12_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_CFG12_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_CFG12 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000001830ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_CFG13
value|CVMX_NPI_PCI_CFG13_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_CFG13_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_CFG13 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000001834ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_CFG15
value|CVMX_NPI_PCI_CFG15_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_CFG15_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_CFG15 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F000000183Cull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_CFG16
value|CVMX_NPI_PCI_CFG16_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_CFG16_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_CFG16 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000001840ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_CFG17
value|CVMX_NPI_PCI_CFG17_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_CFG17_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_CFG17 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000001844ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_CFG18
value|CVMX_NPI_PCI_CFG18_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_CFG18_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_CFG18 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000001848ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_CFG19
value|CVMX_NPI_PCI_CFG19_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_CFG19_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_CFG19 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F000000184Cull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_CFG20
value|CVMX_NPI_PCI_CFG20_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_CFG20_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_CFG20 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000001850ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_CFG21
value|CVMX_NPI_PCI_CFG21_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_CFG21_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_CFG21 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000001854ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_CFG22
value|CVMX_NPI_PCI_CFG22_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_CFG22_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_CFG22 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000001858ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_CFG56
value|CVMX_NPI_PCI_CFG56_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_CFG56_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_CFG56 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000018E0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_CFG57
value|CVMX_NPI_PCI_CFG57_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_CFG57_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_CFG57 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000018E4ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_CFG58
value|CVMX_NPI_PCI_CFG58_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_CFG58_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_CFG58 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000018E8ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_CFG59
value|CVMX_NPI_PCI_CFG59_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_CFG59_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_CFG59 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000018ECull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_CFG60
value|CVMX_NPI_PCI_CFG60_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_CFG60_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_CFG60 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000018F0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_CFG61
value|CVMX_NPI_PCI_CFG61_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_CFG61_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_CFG61 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000018F4ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_CFG62
value|CVMX_NPI_PCI_CFG62_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_CFG62_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_CFG62 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000018F8ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_CFG63
value|CVMX_NPI_PCI_CFG63_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_CFG63_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_CFG63 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000018FCull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_CNT_REG
value|CVMX_NPI_PCI_CNT_REG_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_CNT_REG_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_CNT_REG not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000011B8ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_CTL_STATUS_2
value|CVMX_NPI_PCI_CTL_STATUS_2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_CTL_STATUS_2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_CTL_STATUS_2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F000000118Cull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_INT_ARB_CFG
value|CVMX_NPI_PCI_INT_ARB_CFG_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_INT_ARB_CFG_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_INT_ARB_CFG not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000000130ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_INT_ENB2
value|CVMX_NPI_PCI_INT_ENB2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_INT_ENB2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_INT_ENB2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000011A0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_INT_SUM2
value|CVMX_NPI_PCI_INT_SUM2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_INT_SUM2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_INT_SUM2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000001198ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_READ_CMD
value|CVMX_NPI_PCI_READ_CMD_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_READ_CMD_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_READ_CMD not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000000048ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_READ_CMD_6
value|CVMX_NPI_PCI_READ_CMD_6_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_READ_CMD_6_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_READ_CMD_6 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000001180ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_READ_CMD_C
value|CVMX_NPI_PCI_READ_CMD_C_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_READ_CMD_C_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_READ_CMD_C not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000001184ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_READ_CMD_E
value|CVMX_NPI_PCI_READ_CMD_E_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_READ_CMD_E_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_READ_CMD_E not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000001188ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_SCM_REG
value|CVMX_NPI_PCI_SCM_REG_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_SCM_REG_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_SCM_REG not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000011A8ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PCI_TSR_REG
value|CVMX_NPI_PCI_TSR_REG_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PCI_TSR_REG_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PCI_TSR_REG not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000011B0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PORT32_INSTR_HDR
value|CVMX_NPI_PORT32_INSTR_HDR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PORT32_INSTR_HDR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PORT32_INSTR_HDR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000001F8ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PORT33_INSTR_HDR
value|CVMX_NPI_PORT33_INSTR_HDR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PORT33_INSTR_HDR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PORT33_INSTR_HDR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000000200ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PORT34_INSTR_HDR
value|CVMX_NPI_PORT34_INSTR_HDR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PORT34_INSTR_HDR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PORT34_INSTR_HDR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000000208ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PORT35_INSTR_HDR
value|CVMX_NPI_PORT35_INSTR_HDR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PORT35_INSTR_HDR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PORT35_INSTR_HDR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000000210ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_PORT_BP_CONTROL
value|CVMX_NPI_PORT_BP_CONTROL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PORT_BP_CONTROL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PORT_BP_CONTROL not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000001F0ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PX_DBPAIR_ADDR
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PX_DBPAIR_ADDR(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000000180ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PX_INSTR_ADDR
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PX_INSTR_ADDR(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000001C0ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PX_INSTR_CNTS
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PX_INSTR_CNTS(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000001A0ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_PX_PAIR_CNTS
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_PX_PAIR_CNTS(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000000160ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_RSL_INT_BLOCKS
value|CVMX_NPI_RSL_INT_BLOCKS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_RSL_INT_BLOCKS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_RSL_INT_BLOCKS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000000000ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_SIZE_INPUT0
value|CVMX_NPI_SIZE_INPUTX(0)
end_define

begin_define
define|#
directive|define
name|CVMX_NPI_SIZE_INPUT1
value|CVMX_NPI_SIZE_INPUTX(1)
end_define

begin_define
define|#
directive|define
name|CVMX_NPI_SIZE_INPUT2
value|CVMX_NPI_SIZE_INPUTX(2)
end_define

begin_define
define|#
directive|define
name|CVMX_NPI_SIZE_INPUT3
value|CVMX_NPI_SIZE_INPUTX(3)
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_SIZE_INPUTX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_SIZE_INPUTX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000000078ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_NPI_WIN_READ_TO
value|CVMX_NPI_WIN_READ_TO_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_NPI_WIN_READ_TO_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_NPI_WIN_READ_TO not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000001E0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG000
value|CVMX_PCIEEP_CFG000_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG000_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG000 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000000ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG001
value|CVMX_PCIEEP_CFG001_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG001_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG001 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000004ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG002
value|CVMX_PCIEEP_CFG002_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG002_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG002 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000008ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG003
value|CVMX_PCIEEP_CFG003_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG003_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG003 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000000000000Cull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG004
value|CVMX_PCIEEP_CFG004_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG004_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG004 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000010ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG004_MASK
value|CVMX_PCIEEP_CFG004_MASK_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG004_MASK_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG004_MASK not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000080000010ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG005
value|CVMX_PCIEEP_CFG005_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG005_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG005 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000014ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG005_MASK
value|CVMX_PCIEEP_CFG005_MASK_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG005_MASK_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG005_MASK not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000080000014ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG006
value|CVMX_PCIEEP_CFG006_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG006_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG006 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000018ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG006_MASK
value|CVMX_PCIEEP_CFG006_MASK_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG006_MASK_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG006_MASK not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000080000018ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG007
value|CVMX_PCIEEP_CFG007_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG007_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG007 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000000000001Cull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG007_MASK
value|CVMX_PCIEEP_CFG007_MASK_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG007_MASK_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG007_MASK not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000008000001Cull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG008
value|CVMX_PCIEEP_CFG008_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG008_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG008 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000020ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG008_MASK
value|CVMX_PCIEEP_CFG008_MASK_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG008_MASK_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG008_MASK not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000080000020ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG009
value|CVMX_PCIEEP_CFG009_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG009_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG009 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000024ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG009_MASK
value|CVMX_PCIEEP_CFG009_MASK_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG009_MASK_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG009_MASK not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000080000024ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG010
value|CVMX_PCIEEP_CFG010_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG010_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG010 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000028ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG011
value|CVMX_PCIEEP_CFG011_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG011_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG011 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000000000002Cull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG012
value|CVMX_PCIEEP_CFG012_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG012_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG012 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000030ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG012_MASK
value|CVMX_PCIEEP_CFG012_MASK_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG012_MASK_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG012_MASK not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000080000030ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG013
value|CVMX_PCIEEP_CFG013_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG013_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG013 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000034ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG015
value|CVMX_PCIEEP_CFG015_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG015_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG015 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000000000003Cull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG016
value|CVMX_PCIEEP_CFG016_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG016_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG016 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000040ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG017
value|CVMX_PCIEEP_CFG017_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG017_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG017 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000044ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG020
value|CVMX_PCIEEP_CFG020_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG020_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG020 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000050ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG021
value|CVMX_PCIEEP_CFG021_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG021_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG021 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000054ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG022
value|CVMX_PCIEEP_CFG022_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG022_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG022 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000058ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG023
value|CVMX_PCIEEP_CFG023_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG023_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG023 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000000000005Cull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG028
value|CVMX_PCIEEP_CFG028_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG028_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG028 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000070ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG029
value|CVMX_PCIEEP_CFG029_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG029_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG029 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000074ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG030
value|CVMX_PCIEEP_CFG030_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG030_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG030 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000078ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG031
value|CVMX_PCIEEP_CFG031_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG031_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG031 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000000000007Cull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG032
value|CVMX_PCIEEP_CFG032_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG032_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG032 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000080ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG033
value|CVMX_PCIEEP_CFG033_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG033_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG033 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000084ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG034
value|CVMX_PCIEEP_CFG034_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG034_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG034 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000088ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG037
value|CVMX_PCIEEP_CFG037_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG037_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG037 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000094ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG038
value|CVMX_PCIEEP_CFG038_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG038_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG038 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000098ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG039
value|CVMX_PCIEEP_CFG039_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG039_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG039 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000000000009Cull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG040
value|CVMX_PCIEEP_CFG040_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG040_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG040 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000000A0ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG041
value|CVMX_PCIEEP_CFG041_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG041_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG041 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000000A4ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG042
value|CVMX_PCIEEP_CFG042_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG042_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG042 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000000A8ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG064
value|CVMX_PCIEEP_CFG064_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG064_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG064 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000100ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG065
value|CVMX_PCIEEP_CFG065_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG065_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG065 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000104ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG066
value|CVMX_PCIEEP_CFG066_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG066_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG066 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000108ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG067
value|CVMX_PCIEEP_CFG067_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG067_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG067 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000000000010Cull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG068
value|CVMX_PCIEEP_CFG068_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG068_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG068 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000110ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG069
value|CVMX_PCIEEP_CFG069_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG069_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG069 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000114ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG070
value|CVMX_PCIEEP_CFG070_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG070_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG070 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000118ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG071
value|CVMX_PCIEEP_CFG071_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG071_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG071 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000000000011Cull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG072
value|CVMX_PCIEEP_CFG072_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG072_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG072 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000120ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG073
value|CVMX_PCIEEP_CFG073_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG073_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG073 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000124ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG074
value|CVMX_PCIEEP_CFG074_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG074_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG074 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000128ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG448
value|CVMX_PCIEEP_CFG448_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG448_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG448 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000700ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG449
value|CVMX_PCIEEP_CFG449_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG449_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG449 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000704ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG450
value|CVMX_PCIEEP_CFG450_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG450_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG450 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000708ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG451
value|CVMX_PCIEEP_CFG451_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG451_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG451 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000000000070Cull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG452
value|CVMX_PCIEEP_CFG452_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG452_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG452 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000710ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG453
value|CVMX_PCIEEP_CFG453_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG453_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG453 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000714ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG454
value|CVMX_PCIEEP_CFG454_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG454_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG454 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000718ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG455
value|CVMX_PCIEEP_CFG455_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG455_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG455 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000000000071Cull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG456
value|CVMX_PCIEEP_CFG456_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG456_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG456 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000720ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG458
value|CVMX_PCIEEP_CFG458_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG458_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG458 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000728ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG459
value|CVMX_PCIEEP_CFG459_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG459_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG459 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000000000072Cull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG460
value|CVMX_PCIEEP_CFG460_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG460_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG460 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000730ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG461
value|CVMX_PCIEEP_CFG461_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG461_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG461 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000734ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG462
value|CVMX_PCIEEP_CFG462_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG462_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG462 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000738ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG463
value|CVMX_PCIEEP_CFG463_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG463_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG463 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000000000073Cull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG464
value|CVMX_PCIEEP_CFG464_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG464_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG464 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000740ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG465
value|CVMX_PCIEEP_CFG465_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG465_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG465 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000744ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG466
value|CVMX_PCIEEP_CFG466_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG466_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG466 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000748ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG467
value|CVMX_PCIEEP_CFG467_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG467_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG467 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000000000074Cull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG468
value|CVMX_PCIEEP_CFG468_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG468_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG468 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000750ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG490
value|CVMX_PCIEEP_CFG490_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG490_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG490 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000007A8ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG491
value|CVMX_PCIEEP_CFG491_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG491_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG491 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000007ACull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG492
value|CVMX_PCIEEP_CFG492_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG492_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG492 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000007B0ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG516
value|CVMX_PCIEEP_CFG516_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG516_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG516 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000810ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCIEEP_CFG517
value|CVMX_PCIEEP_CFG517_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIEEP_CFG517_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIEEP_CFG517 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000814ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG000
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG000(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000000ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG001
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG001(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000004ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG002
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG002(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000008ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG003
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG003(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000000000000Cull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG004
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG004(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000010ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG005
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG005(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000014ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG006
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG006(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000018ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG007
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG007(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000000000001Cull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG008
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG008(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000020ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG009
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG009(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000024ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG010
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG010(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000028ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG011
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG011(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000000000002Cull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG012
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG012(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000030ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG013
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG013(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000034ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG014
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG014(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000038ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG015
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG015(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000000000003Cull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG016
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG016(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000040ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG017
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG017(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000044ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG020
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG020(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000050ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG021
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG021(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000054ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG022
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG022(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000058ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG023
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG023(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000000000005Cull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG028
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG028(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000070ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG029
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG029(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000074ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG030
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG030(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000078ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG031
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG031(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000000000007Cull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG032
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG032(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000080ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG033
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG033(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000084ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG034
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG034(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000088ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG035
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG035(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000000000008Cull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG036
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG036(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000090ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG037
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG037(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000094ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG038
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG038(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000098ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG039
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG039(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000000000009Cull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG040
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG040(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000000A0ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG041
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG041(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000000A4ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG042
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG042(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000000A8ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG064
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG064(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000100ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG065
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG065(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000104ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG066
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG066(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000108ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG067
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG067(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000000000010Cull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG068
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG068(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000110ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG069
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG069(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000114ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG070
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG070(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000118ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG071
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG071(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000000000011Cull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG072
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG072(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000120ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG073
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG073(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000124ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG074
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG074(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000128ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG075
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG075(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000000000012Cull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG076
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG076(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000130ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG077
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG077(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000134ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG448
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG448(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000700ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG449
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG449(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000704ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG450
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG450(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000708ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG451
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG451(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000000000070Cull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG452
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG452(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000710ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG453
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG453(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000714ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG454
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG454(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000718ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG455
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG455(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000000000071Cull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG456
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG456(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000720ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG458
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG458(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000728ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG459
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG459(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000000000072Cull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG460
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG460(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000730ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG461
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG461(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000734ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG462
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG462(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000738ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG463
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG463(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000000000073Cull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG464
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG464(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000740ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG465
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG465(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000744ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG466
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG466(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000748ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG467
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG467(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000000000074Cull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG468
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG468(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000750ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG490
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG490(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000007A8ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG491
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG491(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000007ACull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG492
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG492(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000007B0ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG516
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG516(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000810ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCIERCX_CFG517
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCIERCX_CFG517(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000814ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_BAR1_INDEXX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_BAR1_INDEXX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000100ull
operator|+
operator|(
name|offset
operator|&
literal|31
operator|)
operator|*
literal|4
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_BIST_REG
value|CVMX_PCI_BIST_REG_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_BIST_REG_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_BIST_REG not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000001C0ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_CFG00
value|CVMX_PCI_CFG00_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_CFG00_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_CFG00 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000000ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_CFG01
value|CVMX_PCI_CFG01_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_CFG01_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_CFG01 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000004ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_CFG02
value|CVMX_PCI_CFG02_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_CFG02_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_CFG02 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000008ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_CFG03
value|CVMX_PCI_CFG03_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_CFG03_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_CFG03 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000000000000Cull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_CFG04
value|CVMX_PCI_CFG04_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_CFG04_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_CFG04 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000010ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_CFG05
value|CVMX_PCI_CFG05_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_CFG05_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_CFG05 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000014ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_CFG06
value|CVMX_PCI_CFG06_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_CFG06_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_CFG06 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000018ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_CFG07
value|CVMX_PCI_CFG07_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_CFG07_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_CFG07 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000000000001Cull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_CFG08
value|CVMX_PCI_CFG08_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_CFG08_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_CFG08 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000020ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_CFG09
value|CVMX_PCI_CFG09_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_CFG09_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_CFG09 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000024ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_CFG10
value|CVMX_PCI_CFG10_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_CFG10_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_CFG10 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000028ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_CFG11
value|CVMX_PCI_CFG11_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_CFG11_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_CFG11 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000000000002Cull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_CFG12
value|CVMX_PCI_CFG12_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_CFG12_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_CFG12 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000030ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_CFG13
value|CVMX_PCI_CFG13_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_CFG13_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_CFG13 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000034ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_CFG15
value|CVMX_PCI_CFG15_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_CFG15_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_CFG15 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000000000003Cull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_CFG16
value|CVMX_PCI_CFG16_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_CFG16_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_CFG16 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000040ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_CFG17
value|CVMX_PCI_CFG17_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_CFG17_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_CFG17 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000044ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_CFG18
value|CVMX_PCI_CFG18_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_CFG18_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_CFG18 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000048ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_CFG19
value|CVMX_PCI_CFG19_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_CFG19_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_CFG19 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000000000004Cull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_CFG20
value|CVMX_PCI_CFG20_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_CFG20_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_CFG20 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000050ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_CFG21
value|CVMX_PCI_CFG21_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_CFG21_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_CFG21 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000054ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_CFG22
value|CVMX_PCI_CFG22_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_CFG22_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_CFG22 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000058ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_CFG56
value|CVMX_PCI_CFG56_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_CFG56_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_CFG56 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000000E0ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_CFG57
value|CVMX_PCI_CFG57_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_CFG57_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_CFG57 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000000E4ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_CFG58
value|CVMX_PCI_CFG58_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_CFG58_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_CFG58 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000000E8ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_CFG59
value|CVMX_PCI_CFG59_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_CFG59_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_CFG59 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000000ECull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_CFG60
value|CVMX_PCI_CFG60_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_CFG60_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_CFG60 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000000F0ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_CFG61
value|CVMX_PCI_CFG61_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_CFG61_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_CFG61 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000000F4ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_CFG62
value|CVMX_PCI_CFG62_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_CFG62_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_CFG62 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000000F8ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_CFG63
value|CVMX_PCI_CFG63_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_CFG63_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_CFG63 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000000FCull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_CNT_REG
value|CVMX_PCI_CNT_REG_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_CNT_REG_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_CNT_REG not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000001B8ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_CTL_STATUS_2
value|CVMX_PCI_CTL_STATUS_2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_CTL_STATUS_2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_CTL_STATUS_2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000000000018Cull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_DBELL_X
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_DBELL_X(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000080ull
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_DMA_CNT0
value|CVMX_PCI_DMA_CNTX(0)
end_define

begin_define
define|#
directive|define
name|CVMX_PCI_DMA_CNT1
value|CVMX_PCI_DMA_CNTX(1)
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_DMA_CNTX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_DMA_CNTX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000000A0ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_DMA_INT_LEV0
value|CVMX_PCI_DMA_INT_LEVX(0)
end_define

begin_define
define|#
directive|define
name|CVMX_PCI_DMA_INT_LEV1
value|CVMX_PCI_DMA_INT_LEVX(1)
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_DMA_INT_LEVX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_DMA_INT_LEVX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000000A4ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_DMA_TIME0
value|CVMX_PCI_DMA_TIMEX(0)
end_define

begin_define
define|#
directive|define
name|CVMX_PCI_DMA_TIME1
value|CVMX_PCI_DMA_TIMEX(1)
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_DMA_TIMEX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_DMA_TIMEX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000000B0ull
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|4
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_INSTR_COUNT0
value|CVMX_PCI_INSTR_COUNTX(0)
end_define

begin_define
define|#
directive|define
name|CVMX_PCI_INSTR_COUNT1
value|CVMX_PCI_INSTR_COUNTX(1)
end_define

begin_define
define|#
directive|define
name|CVMX_PCI_INSTR_COUNT2
value|CVMX_PCI_INSTR_COUNTX(2)
end_define

begin_define
define|#
directive|define
name|CVMX_PCI_INSTR_COUNT3
value|CVMX_PCI_INSTR_COUNTX(3)
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_INSTR_COUNTX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_INSTR_COUNTX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000084ull
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_INT_ENB
value|CVMX_PCI_INT_ENB_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_INT_ENB_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_INT_ENB not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000038ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_INT_ENB2
value|CVMX_PCI_INT_ENB2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_INT_ENB2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_INT_ENB2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000001A0ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_INT_SUM
value|CVMX_PCI_INT_SUM_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_INT_SUM_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_INT_SUM not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000030ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_INT_SUM2
value|CVMX_PCI_INT_SUM2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_INT_SUM2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_INT_SUM2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000198ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_MSI_RCV
value|CVMX_PCI_MSI_RCV_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_MSI_RCV_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_MSI_RCV not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000000F0ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_PKTS_SENT0
value|CVMX_PCI_PKTS_SENTX(0)
end_define

begin_define
define|#
directive|define
name|CVMX_PCI_PKTS_SENT1
value|CVMX_PCI_PKTS_SENTX(1)
end_define

begin_define
define|#
directive|define
name|CVMX_PCI_PKTS_SENT2
value|CVMX_PCI_PKTS_SENTX(2)
end_define

begin_define
define|#
directive|define
name|CVMX_PCI_PKTS_SENT3
value|CVMX_PCI_PKTS_SENTX(3)
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_PKTS_SENTX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_PKTS_SENTX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000040ull
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_PKTS_SENT_INT_LEV0
value|CVMX_PCI_PKTS_SENT_INT_LEVX(0)
end_define

begin_define
define|#
directive|define
name|CVMX_PCI_PKTS_SENT_INT_LEV1
value|CVMX_PCI_PKTS_SENT_INT_LEVX(1)
end_define

begin_define
define|#
directive|define
name|CVMX_PCI_PKTS_SENT_INT_LEV2
value|CVMX_PCI_PKTS_SENT_INT_LEVX(2)
end_define

begin_define
define|#
directive|define
name|CVMX_PCI_PKTS_SENT_INT_LEV3
value|CVMX_PCI_PKTS_SENT_INT_LEVX(3)
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_PKTS_SENT_INT_LEVX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_PKTS_SENT_INT_LEVX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000048ull
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_PKTS_SENT_TIME0
value|CVMX_PCI_PKTS_SENT_TIMEX(0)
end_define

begin_define
define|#
directive|define
name|CVMX_PCI_PKTS_SENT_TIME1
value|CVMX_PCI_PKTS_SENT_TIMEX(1)
end_define

begin_define
define|#
directive|define
name|CVMX_PCI_PKTS_SENT_TIME2
value|CVMX_PCI_PKTS_SENT_TIMEX(2)
end_define

begin_define
define|#
directive|define
name|CVMX_PCI_PKTS_SENT_TIME3
value|CVMX_PCI_PKTS_SENT_TIMEX(3)
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_PKTS_SENT_TIMEX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_PKTS_SENT_TIMEX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x000000000000004Cull
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_PKT_CREDITS0
value|CVMX_PCI_PKT_CREDITSX(0)
end_define

begin_define
define|#
directive|define
name|CVMX_PCI_PKT_CREDITS1
value|CVMX_PCI_PKT_CREDITSX(1)
end_define

begin_define
define|#
directive|define
name|CVMX_PCI_PKT_CREDITS2
value|CVMX_PCI_PKT_CREDITSX(2)
end_define

begin_define
define|#
directive|define
name|CVMX_PCI_PKT_CREDITS3
value|CVMX_PCI_PKT_CREDITSX(3)
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_PKT_CREDITSX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_PKT_CREDITSX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000044ull
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_READ_CMD_6
value|CVMX_PCI_READ_CMD_6_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_READ_CMD_6_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_READ_CMD_6 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000180ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_READ_CMD_C
value|CVMX_PCI_READ_CMD_C_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_READ_CMD_C_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_READ_CMD_C not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000184ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_READ_CMD_E
value|CVMX_PCI_READ_CMD_E_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_READ_CMD_E_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_READ_CMD_E not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000188ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_READ_TIMEOUT
value|CVMX_PCI_READ_TIMEOUT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_READ_TIMEOUT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_READ_TIMEOUT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000000B0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_SCM_REG
value|CVMX_PCI_SCM_REG_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_SCM_REG_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_SCM_REG not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000001A8ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_TSR_REG
value|CVMX_PCI_TSR_REG_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_TSR_REG_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_TSR_REG not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x00000000000001B0ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_WIN_RD_ADDR
value|CVMX_PCI_WIN_RD_ADDR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_WIN_RD_ADDR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_WIN_RD_ADDR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000008ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_WIN_RD_DATA
value|CVMX_PCI_WIN_RD_DATA_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_WIN_RD_DATA_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_WIN_RD_DATA not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000020ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_WIN_WR_ADDR
value|CVMX_PCI_WIN_WR_ADDR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_WIN_WR_ADDR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_WIN_WR_ADDR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000000ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_WIN_WR_DATA
value|CVMX_PCI_WIN_WR_DATA_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_WIN_WR_DATA_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_WIN_WR_DATA not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000010ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PCI_WIN_WR_MASK
value|CVMX_PCI_WIN_WR_MASK_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCI_WIN_WR_MASK_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCI_WIN_WR_MASK not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0x0000000000000018ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCMX_DMA_CFG
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCMX_DMA_CFG(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000010018ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|16384
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCMX_INT_ENA
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCMX_INT_ENA(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000010020ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|16384
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCMX_INT_SUM
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCMX_INT_SUM(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000010028ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|16384
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCMX_RXADDR
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCMX_RXADDR(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000010068ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|16384
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCMX_RXCNT
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCMX_RXCNT(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000010060ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|16384
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCMX_RXMSK0
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCMX_RXMSK0(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010700000100C0ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|16384
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCMX_RXMSK1
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCMX_RXMSK1(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010700000100C8ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|16384
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCMX_RXMSK2
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCMX_RXMSK2(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010700000100D0ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|16384
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCMX_RXMSK3
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCMX_RXMSK3(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010700000100D8ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|16384
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCMX_RXMSK4
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCMX_RXMSK4(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010700000100E0ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|16384
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCMX_RXMSK5
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCMX_RXMSK5(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010700000100E8ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|16384
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCMX_RXMSK6
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCMX_RXMSK6(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010700000100F0ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|16384
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCMX_RXMSK7
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCMX_RXMSK7(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010700000100F8ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|16384
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCMX_RXSTART
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCMX_RXSTART(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000010058ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|16384
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCMX_TDM_CFG
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCMX_TDM_CFG(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000010010ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|16384
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCMX_TDM_DBG
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCMX_TDM_DBG(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000010030ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|16384
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCMX_TXADDR
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCMX_TXADDR(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000010050ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|16384
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCMX_TXCNT
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCMX_TXCNT(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000010048ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|16384
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCMX_TXMSK0
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCMX_TXMSK0(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000010080ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|16384
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCMX_TXMSK1
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCMX_TXMSK1(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000010088ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|16384
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCMX_TXMSK2
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCMX_TXMSK2(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000010090ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|16384
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCMX_TXMSK3
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCMX_TXMSK3(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000010098ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|16384
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCMX_TXMSK4
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCMX_TXMSK4(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010700000100A0ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|16384
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCMX_TXMSK5
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCMX_TXMSK5(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010700000100A8ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|16384
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCMX_TXMSK6
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCMX_TXMSK6(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010700000100B0ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|16384
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCMX_TXMSK7
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCMX_TXMSK7(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010700000100B8ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|16384
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCMX_TXSTART
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCMX_TXSTART(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000010040ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|16384
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCM_CLKX_CFG
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCM_CLKX_CFG(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000010000ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|16384
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCM_CLKX_DBG
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCM_CLKX_DBG(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000010038ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|16384
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCM_CLKX_GEN
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCM_CLKX_GEN(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000010008ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|16384
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCSXX_10GBX_STATUS_REG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCSXX_10GBX_STATUS_REG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000828ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCSXX_BIST_STATUS_REG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCSXX_BIST_STATUS_REG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000870ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCSXX_BIT_LOCK_STATUS_REG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCSXX_BIT_LOCK_STATUS_REG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000850ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCSXX_CONTROL1_REG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCSXX_CONTROL1_REG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000800ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCSXX_CONTROL2_REG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCSXX_CONTROL2_REG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000818ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCSXX_INT_EN_REG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCSXX_INT_EN_REG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000860ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCSXX_INT_REG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCSXX_INT_REG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000858ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCSXX_LOG_ANL_REG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCSXX_LOG_ANL_REG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000868ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCSXX_MISC_CTL_REG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCSXX_MISC_CTL_REG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000848ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCSXX_RX_SYNC_STATES_REG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCSXX_RX_SYNC_STATES_REG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000838ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCSXX_SPD_ABIL_REG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCSXX_SPD_ABIL_REG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000810ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCSXX_STATUS1_REG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCSXX_STATUS1_REG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000808ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCSXX_STATUS2_REG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCSXX_STATUS2_REG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000820ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCSXX_TX_RX_POLARITY_REG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCSXX_TX_RX_POLARITY_REG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000840ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCSXX_TX_RX_STATES_REG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCSXX_TX_RX_STATES_REG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0000830ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCSX_ANX_ADV_REG
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCSX_ANX_ADV_REG(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0001010ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x20000ull
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCSX_ANX_EXT_ST_REG
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCSX_ANX_EXT_ST_REG(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0001028ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x20000ull
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCSX_ANX_LP_ABIL_REG
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCSX_ANX_LP_ABIL_REG(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0001018ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x20000ull
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCSX_ANX_RESULTS_REG
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCSX_ANX_RESULTS_REG(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0001020ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x20000ull
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCSX_INTX_EN_REG
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCSX_INTX_EN_REG(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0001088ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x20000ull
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCSX_INTX_REG
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCSX_INTX_REG(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0001080ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x20000ull
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCSX_LINKX_TIMER_COUNT_REG
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCSX_LINKX_TIMER_COUNT_REG(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0001040ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x20000ull
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCSX_LOG_ANLX_REG
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCSX_LOG_ANLX_REG(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0001090ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x20000ull
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCSX_MISCX_CTL_REG
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCSX_MISCX_CTL_REG(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0001078ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x20000ull
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCSX_MRX_CONTROL_REG
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCSX_MRX_CONTROL_REG(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0001000ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x20000ull
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCSX_MRX_STATUS_REG
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCSX_MRX_STATUS_REG(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0001008ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x20000ull
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCSX_RXX_STATES_REG
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCSX_RXX_STATES_REG(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0001058ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x20000ull
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCSX_RXX_SYNC_REG
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCSX_RXX_SYNC_REG(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0001050ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x20000ull
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCSX_SGMX_AN_ADV_REG
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCSX_SGMX_AN_ADV_REG(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0001068ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x20000ull
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCSX_SGMX_LP_ADV_REG
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCSX_SGMX_LP_ADV_REG(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0001070ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x20000ull
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCSX_TXX_STATES_REG
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCSX_TXX_STATES_REG(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0001060ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x20000ull
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCSX_TX_RXX_POLARITY_REG
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCSX_TX_RXX_POLARITY_REG(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800B0001048ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x20000ull
operator|)
operator|*
literal|1024
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PESCX_BIST_STATUS
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PESCX_BIST_STATUS(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800C8000018ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PESCX_BIST_STATUS2
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PESCX_BIST_STATUS2(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800C8000418ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PESCX_CFG_RD
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PESCX_CFG_RD(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800C8000030ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PESCX_CFG_WR
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PESCX_CFG_WR(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800C8000028ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PESCX_CPL_LUT_VALID
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PESCX_CPL_LUT_VALID(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800C8000098ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PESCX_CTL_STATUS
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PESCX_CTL_STATUS(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800C8000000ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PESCX_CTL_STATUS2
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PESCX_CTL_STATUS2(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800C8000400ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PESCX_DBG_INFO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PESCX_DBG_INFO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800C8000008ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PESCX_DBG_INFO_EN
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PESCX_DBG_INFO_EN(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800C80000A0ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PESCX_DIAG_STATUS
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PESCX_DIAG_STATUS(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800C8000020ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PESCX_P2N_BAR0_START
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PESCX_P2N_BAR0_START(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800C8000080ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PESCX_P2N_BAR1_START
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PESCX_P2N_BAR1_START(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800C8000088ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PESCX_P2N_BAR2_START
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PESCX_P2N_BAR2_START(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800C8000090ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PESCX_P2P_BARX_END
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PESCX_P2P_BARX_END(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800C8000048ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x800000ull
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PESCX_P2P_BARX_START
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PESCX_P2P_BARX_START(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800C8000040ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|3
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x800000ull
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PESCX_TLP_CREDITS
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PESCX_TLP_CREDITS(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800C8000038ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_BAR1_INDEXX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_BAR1_INDEXX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000008000ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|31
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_BIST_STATUS
value|CVMX_PEXP_NPEI_BIST_STATUS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_BIST_STATUS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_BIST_STATUS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000008580ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_BIST_STATUS2
value|CVMX_PEXP_NPEI_BIST_STATUS2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_BIST_STATUS2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_BIST_STATUS2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000008680ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_CTL_PORT0
value|CVMX_PEXP_NPEI_CTL_PORT0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_CTL_PORT0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_CTL_PORT0 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000008250ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_CTL_PORT1
value|CVMX_PEXP_NPEI_CTL_PORT1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_CTL_PORT1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_CTL_PORT1 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000008260ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_CTL_STATUS
value|CVMX_PEXP_NPEI_CTL_STATUS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_CTL_STATUS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_CTL_STATUS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000008570ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_CTL_STATUS2
value|CVMX_PEXP_NPEI_CTL_STATUS2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_CTL_STATUS2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_CTL_STATUS2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F000000BC00ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_DATA_OUT_CNT
value|CVMX_PEXP_NPEI_DATA_OUT_CNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_DATA_OUT_CNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_DATA_OUT_CNT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000085F0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_DBG_DATA
value|CVMX_PEXP_NPEI_DBG_DATA_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_DBG_DATA_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_DBG_DATA not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000008510ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_DBG_SELECT
value|CVMX_PEXP_NPEI_DBG_SELECT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_DBG_SELECT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_DBG_SELECT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000008500ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_DMA0_INT_LEVEL
value|CVMX_PEXP_NPEI_DMA0_INT_LEVEL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_DMA0_INT_LEVEL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_DMA0_INT_LEVEL not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000085C0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_DMA1_INT_LEVEL
value|CVMX_PEXP_NPEI_DMA1_INT_LEVEL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_DMA1_INT_LEVEL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_DMA1_INT_LEVEL not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000085D0ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_DMAX_COUNTS
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_DMAX_COUNTS(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000008450ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|7
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_DMAX_DBELL
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_DMAX_DBELL(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000083B0ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|7
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_DMAX_IBUFF_SADDR
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_DMAX_IBUFF_SADDR(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000008400ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|7
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_DMAX_NADDR
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_DMAX_NADDR(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000084A0ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|7
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_DMA_CNTS
value|CVMX_PEXP_NPEI_DMA_CNTS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_DMA_CNTS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_DMA_CNTS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000085E0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_DMA_CONTROL
value|CVMX_PEXP_NPEI_DMA_CONTROL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_DMA_CONTROL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_DMA_CONTROL not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000083A0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_DMA_PCIE_REQ_NUM
value|CVMX_PEXP_NPEI_DMA_PCIE_REQ_NUM_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_DMA_PCIE_REQ_NUM_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_DMA_PCIE_REQ_NUM not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000085B0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_DMA_STATE1
value|CVMX_PEXP_NPEI_DMA_STATE1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_DMA_STATE1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_DMA_STATE1 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000086C0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_DMA_STATE1_P1
value|CVMX_PEXP_NPEI_DMA_STATE1_P1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_DMA_STATE1_P1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000008680ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_DMA_STATE2
value|CVMX_PEXP_NPEI_DMA_STATE2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_DMA_STATE2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_DMA_STATE2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000086D0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_DMA_STATE2_P1
value|CVMX_PEXP_NPEI_DMA_STATE2_P1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_DMA_STATE2_P1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000008690ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_DMA_STATE3_P1
value|CVMX_PEXP_NPEI_DMA_STATE3_P1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_DMA_STATE3_P1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000086A0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_DMA_STATE4_P1
value|CVMX_PEXP_NPEI_DMA_STATE4_P1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_DMA_STATE4_P1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000086B0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_DMA_STATE5_P1
value|CVMX_PEXP_NPEI_DMA_STATE5_P1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_DMA_STATE5_P1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000086C0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_INT_A_ENB
value|CVMX_PEXP_NPEI_INT_A_ENB_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_INT_A_ENB_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_INT_A_ENB not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000008560ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_INT_A_ENB2
value|CVMX_PEXP_NPEI_INT_A_ENB2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_INT_A_ENB2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_INT_A_ENB2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F000000BCE0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_INT_A_SUM
value|CVMX_PEXP_NPEI_INT_A_SUM_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_INT_A_SUM_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_INT_A_SUM not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000008550ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_INT_ENB
value|CVMX_PEXP_NPEI_INT_ENB_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_INT_ENB_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_INT_ENB not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000008540ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_INT_ENB2
value|CVMX_PEXP_NPEI_INT_ENB2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_INT_ENB2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_INT_ENB2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F000000BCD0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_INT_INFO
value|CVMX_PEXP_NPEI_INT_INFO_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_INT_INFO_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_INT_INFO not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000008590ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_INT_SUM
value|CVMX_PEXP_NPEI_INT_SUM_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_INT_SUM_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_INT_SUM not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000008530ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_INT_SUM2
value|CVMX_PEXP_NPEI_INT_SUM2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_INT_SUM2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_INT_SUM2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F000000BCC0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_LAST_WIN_RDATA0
value|CVMX_PEXP_NPEI_LAST_WIN_RDATA0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_LAST_WIN_RDATA0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_LAST_WIN_RDATA0 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000008600ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_LAST_WIN_RDATA1
value|CVMX_PEXP_NPEI_LAST_WIN_RDATA1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_LAST_WIN_RDATA1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_LAST_WIN_RDATA1 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000008610ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_MEM_ACCESS_CTL
value|CVMX_PEXP_NPEI_MEM_ACCESS_CTL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_MEM_ACCESS_CTL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_MEM_ACCESS_CTL not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000084F0ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_MEM_ACCESS_SUBIDX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|>=
literal|12
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|27
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|>=
literal|12
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|27
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_MEM_ACCESS_SUBIDX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000008280ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|31
operator|)
operator|*
literal|16
operator|-
literal|16
operator|*
literal|12
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_MSI_ENB0
value|CVMX_PEXP_NPEI_MSI_ENB0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_MSI_ENB0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_MSI_ENB0 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F000000BC50ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_MSI_ENB1
value|CVMX_PEXP_NPEI_MSI_ENB1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_MSI_ENB1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_MSI_ENB1 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F000000BC60ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_MSI_ENB2
value|CVMX_PEXP_NPEI_MSI_ENB2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_MSI_ENB2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_MSI_ENB2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F000000BC70ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_MSI_ENB3
value|CVMX_PEXP_NPEI_MSI_ENB3_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_MSI_ENB3_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_MSI_ENB3 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F000000BC80ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_MSI_RCV0
value|CVMX_PEXP_NPEI_MSI_RCV0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_MSI_RCV0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_MSI_RCV0 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F000000BC10ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_MSI_RCV1
value|CVMX_PEXP_NPEI_MSI_RCV1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_MSI_RCV1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_MSI_RCV1 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F000000BC20ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_MSI_RCV2
value|CVMX_PEXP_NPEI_MSI_RCV2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_MSI_RCV2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_MSI_RCV2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F000000BC30ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_MSI_RCV3
value|CVMX_PEXP_NPEI_MSI_RCV3_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_MSI_RCV3_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_MSI_RCV3 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F000000BC40ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_MSI_RD_MAP
value|CVMX_PEXP_NPEI_MSI_RD_MAP_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_MSI_RD_MAP_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_MSI_RD_MAP not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F000000BCA0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_MSI_W1C_ENB0
value|CVMX_PEXP_NPEI_MSI_W1C_ENB0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_MSI_W1C_ENB0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_MSI_W1C_ENB0 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F000000BCF0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_MSI_W1C_ENB1
value|CVMX_PEXP_NPEI_MSI_W1C_ENB1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_MSI_W1C_ENB1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_MSI_W1C_ENB1 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F000000BD00ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_MSI_W1C_ENB2
value|CVMX_PEXP_NPEI_MSI_W1C_ENB2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_MSI_W1C_ENB2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_MSI_W1C_ENB2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F000000BD10ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_MSI_W1C_ENB3
value|CVMX_PEXP_NPEI_MSI_W1C_ENB3_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_MSI_W1C_ENB3_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_MSI_W1C_ENB3 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F000000BD20ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_MSI_W1S_ENB0
value|CVMX_PEXP_NPEI_MSI_W1S_ENB0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_MSI_W1S_ENB0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_MSI_W1S_ENB0 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F000000BD30ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_MSI_W1S_ENB1
value|CVMX_PEXP_NPEI_MSI_W1S_ENB1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_MSI_W1S_ENB1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_MSI_W1S_ENB1 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F000000BD40ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_MSI_W1S_ENB2
value|CVMX_PEXP_NPEI_MSI_W1S_ENB2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_MSI_W1S_ENB2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_MSI_W1S_ENB2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F000000BD50ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_MSI_W1S_ENB3
value|CVMX_PEXP_NPEI_MSI_W1S_ENB3_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_MSI_W1S_ENB3_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_MSI_W1S_ENB3 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F000000BD60ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_MSI_WR_MAP
value|CVMX_PEXP_NPEI_MSI_WR_MAP_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_MSI_WR_MAP_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_MSI_WR_MAP not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F000000BC90ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_PCIE_CREDIT_CNT
value|CVMX_PEXP_NPEI_PCIE_CREDIT_CNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PCIE_CREDIT_CNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PCIE_CREDIT_CNT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F000000BD70ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_PCIE_MSI_RCV
value|CVMX_PEXP_NPEI_PCIE_MSI_RCV_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PCIE_MSI_RCV_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PCIE_MSI_RCV not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F000000BCB0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_PCIE_MSI_RCV_B1
value|CVMX_PEXP_NPEI_PCIE_MSI_RCV_B1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PCIE_MSI_RCV_B1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PCIE_MSI_RCV_B1 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000008650ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_PCIE_MSI_RCV_B2
value|CVMX_PEXP_NPEI_PCIE_MSI_RCV_B2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PCIE_MSI_RCV_B2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PCIE_MSI_RCV_B2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000008660ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_PCIE_MSI_RCV_B3
value|CVMX_PEXP_NPEI_PCIE_MSI_RCV_B3_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PCIE_MSI_RCV_B3_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PCIE_MSI_RCV_B3 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000008670ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PKTX_CNTS
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PKTX_CNTS(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F000000A400ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|31
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PKTX_INSTR_BADDR
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PKTX_INSTR_BADDR(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F000000A800ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|31
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PKTX_INSTR_BAOFF_DBELL
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PKTX_INSTR_BAOFF_DBELL(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F000000AC00ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|31
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PKTX_INSTR_FIFO_RSIZE
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PKTX_INSTR_FIFO_RSIZE(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F000000B000ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|31
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PKTX_INSTR_HEADER
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PKTX_INSTR_HEADER(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F000000B400ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|31
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PKTX_IN_BP
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PKTX_IN_BP(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F000000B800ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|31
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PKTX_SLIST_BADDR
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PKTX_SLIST_BADDR(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000009400ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|31
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PKTX_SLIST_BAOFF_DBELL
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PKTX_SLIST_BAOFF_DBELL(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000009800ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|31
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PKTX_SLIST_FIFO_RSIZE
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PKTX_SLIST_FIFO_RSIZE(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000009C00ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|31
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_PKT_CNT_INT
value|CVMX_PEXP_NPEI_PKT_CNT_INT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PKT_CNT_INT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PKT_CNT_INT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000009110ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_PKT_CNT_INT_ENB
value|CVMX_PEXP_NPEI_PKT_CNT_INT_ENB_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PKT_CNT_INT_ENB_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PKT_CNT_INT_ENB not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000009130ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_PKT_DATA_OUT_ES
value|CVMX_PEXP_NPEI_PKT_DATA_OUT_ES_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PKT_DATA_OUT_ES_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PKT_DATA_OUT_ES not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000090B0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_PKT_DATA_OUT_NS
value|CVMX_PEXP_NPEI_PKT_DATA_OUT_NS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PKT_DATA_OUT_NS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PKT_DATA_OUT_NS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000090A0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_PKT_DATA_OUT_ROR
value|CVMX_PEXP_NPEI_PKT_DATA_OUT_ROR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PKT_DATA_OUT_ROR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PKT_DATA_OUT_ROR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000009090ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_PKT_DPADDR
value|CVMX_PEXP_NPEI_PKT_DPADDR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PKT_DPADDR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PKT_DPADDR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000009080ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_PKT_INPUT_CONTROL
value|CVMX_PEXP_NPEI_PKT_INPUT_CONTROL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PKT_INPUT_CONTROL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PKT_INPUT_CONTROL not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000009150ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_PKT_INSTR_ENB
value|CVMX_PEXP_NPEI_PKT_INSTR_ENB_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PKT_INSTR_ENB_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PKT_INSTR_ENB not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000009000ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_PKT_INSTR_RD_SIZE
value|CVMX_PEXP_NPEI_PKT_INSTR_RD_SIZE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PKT_INSTR_RD_SIZE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PKT_INSTR_RD_SIZE not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000009190ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_PKT_INSTR_SIZE
value|CVMX_PEXP_NPEI_PKT_INSTR_SIZE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PKT_INSTR_SIZE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PKT_INSTR_SIZE not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000009020ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_PKT_INT_LEVELS
value|CVMX_PEXP_NPEI_PKT_INT_LEVELS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PKT_INT_LEVELS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PKT_INT_LEVELS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000009100ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_PKT_IN_BP
value|CVMX_PEXP_NPEI_PKT_IN_BP_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PKT_IN_BP_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PKT_IN_BP not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000086B0ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PKT_IN_DONEX_CNTS
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PKT_IN_DONEX_CNTS(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F000000A000ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|31
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_PKT_IN_INSTR_COUNTS
value|CVMX_PEXP_NPEI_PKT_IN_INSTR_COUNTS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PKT_IN_INSTR_COUNTS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PKT_IN_INSTR_COUNTS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000086A0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_PKT_IN_PCIE_PORT
value|CVMX_PEXP_NPEI_PKT_IN_PCIE_PORT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PKT_IN_PCIE_PORT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PKT_IN_PCIE_PORT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000091A0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_PKT_IPTR
value|CVMX_PEXP_NPEI_PKT_IPTR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PKT_IPTR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PKT_IPTR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000009070ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_PKT_OUTPUT_WMARK
value|CVMX_PEXP_NPEI_PKT_OUTPUT_WMARK_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PKT_OUTPUT_WMARK_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PKT_OUTPUT_WMARK not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000009160ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_PKT_OUT_BMODE
value|CVMX_PEXP_NPEI_PKT_OUT_BMODE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PKT_OUT_BMODE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PKT_OUT_BMODE not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000090D0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_PKT_OUT_ENB
value|CVMX_PEXP_NPEI_PKT_OUT_ENB_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PKT_OUT_ENB_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PKT_OUT_ENB not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000009010ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_PKT_PCIE_PORT
value|CVMX_PEXP_NPEI_PKT_PCIE_PORT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PKT_PCIE_PORT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PKT_PCIE_PORT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F00000090E0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_PKT_PORT_IN_RST
value|CVMX_PEXP_NPEI_PKT_PORT_IN_RST_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PKT_PORT_IN_RST_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PKT_PORT_IN_RST not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000008690ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_PKT_SLIST_ES
value|CVMX_PEXP_NPEI_PKT_SLIST_ES_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PKT_SLIST_ES_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PKT_SLIST_ES not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000009050ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_PKT_SLIST_ID_SIZE
value|CVMX_PEXP_NPEI_PKT_SLIST_ID_SIZE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PKT_SLIST_ID_SIZE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PKT_SLIST_ID_SIZE not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000009180ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_PKT_SLIST_NS
value|CVMX_PEXP_NPEI_PKT_SLIST_NS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PKT_SLIST_NS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PKT_SLIST_NS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000009040ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_PKT_SLIST_ROR
value|CVMX_PEXP_NPEI_PKT_SLIST_ROR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PKT_SLIST_ROR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PKT_SLIST_ROR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000009030ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_PKT_TIME_INT
value|CVMX_PEXP_NPEI_PKT_TIME_INT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PKT_TIME_INT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PKT_TIME_INT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000009120ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_PKT_TIME_INT_ENB
value|CVMX_PEXP_NPEI_PKT_TIME_INT_ENB_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_PKT_TIME_INT_ENB_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_PKT_TIME_INT_ENB not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000009140ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_RSL_INT_BLOCKS
value|CVMX_PEXP_NPEI_RSL_INT_BLOCKS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_RSL_INT_BLOCKS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_RSL_INT_BLOCKS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000008520ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_SCRATCH_1
value|CVMX_PEXP_NPEI_SCRATCH_1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_SCRATCH_1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_SCRATCH_1 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000008270ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_STATE1
value|CVMX_PEXP_NPEI_STATE1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_STATE1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_STATE1 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000008620ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_STATE2
value|CVMX_PEXP_NPEI_STATE2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_STATE2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_STATE2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000008630ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_STATE3
value|CVMX_PEXP_NPEI_STATE3_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_STATE3_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_STATE3 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000008640ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PEXP_NPEI_WINDOW_CTL
value|CVMX_PEXP_NPEI_WINDOW_CTL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PEXP_NPEI_WINDOW_CTL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PEXP_NPEI_WINDOW_CTL not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011F0000008380ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PIP_BCK_PRS
value|CVMX_PIP_BCK_PRS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_BCK_PRS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PIP_BCK_PRS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A0000038ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PIP_BIST_STATUS
value|CVMX_PIP_BIST_STATUS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_BIST_STATUS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A0000000ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_CRC_CTLX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PIP_CRC_CTLX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A0000040ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_CRC_IVX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PIP_CRC_IVX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A0000050ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_DEC_IPSECX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PIP_DEC_IPSECX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A0000080ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|3
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PIP_DSA_SRC_GRP
value|CVMX_PIP_DSA_SRC_GRP_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_DSA_SRC_GRP_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PIP_DSA_SRC_GRP not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A0000190ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PIP_DSA_VID_GRP
value|CVMX_PIP_DSA_VID_GRP_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_DSA_VID_GRP_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PIP_DSA_VID_GRP not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A0000198ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_FRM_LEN_CHKX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PIP_FRM_LEN_CHKX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A0000180ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PIP_GBL_CFG
value|CVMX_PIP_GBL_CFG_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_GBL_CFG_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A0000028ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PIP_GBL_CTL
value|CVMX_PIP_GBL_CTL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_GBL_CTL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A0000020ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PIP_HG_PRI_QOS
value|CVMX_PIP_HG_PRI_QOS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_HG_PRI_QOS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PIP_HG_PRI_QOS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A00001A0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PIP_INT_EN
value|CVMX_PIP_INT_EN_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_INT_EN_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A0000010ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PIP_INT_REG
value|CVMX_PIP_INT_REG_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_INT_REG_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A0000008ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PIP_IP_OFFSET
value|CVMX_PIP_IP_OFFSET_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_IP_OFFSET_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A0000060ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_PRT_CFGX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|16
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|19
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|36
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|39
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|36
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|39
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PIP_PRT_CFGX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A0000200ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|63
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_PRT_TAGX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|16
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|19
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|36
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|39
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|36
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|39
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PIP_PRT_TAGX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A0000400ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|63
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_QOS_DIFFX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|63
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|63
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|63
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|63
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|63
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|63
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|63
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PIP_QOS_DIFFX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A0000600ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|63
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_QOS_VLANX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PIP_QOS_VLANX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A00000C0ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|7
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_QOS_WATCHX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PIP_QOS_WATCHX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A0000100ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|7
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PIP_RAW_WORD
value|CVMX_PIP_RAW_WORD_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_RAW_WORD_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A00000B0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PIP_SFT_RST
value|CVMX_PIP_SFT_RST_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_SFT_RST_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A0000030ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_STAT0_PRTX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|16
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|19
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|36
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|39
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|36
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|39
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PIP_STAT0_PRTX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A0000800ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|63
operator|)
operator|*
literal|80
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_STAT1_PRTX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|16
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|19
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|36
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|39
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|36
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|39
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PIP_STAT1_PRTX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A0000808ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|63
operator|)
operator|*
literal|80
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_STAT2_PRTX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|16
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|19
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|36
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|39
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|36
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|39
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PIP_STAT2_PRTX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A0000810ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|63
operator|)
operator|*
literal|80
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_STAT3_PRTX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|16
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|19
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|36
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|39
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|36
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|39
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PIP_STAT3_PRTX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A0000818ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|63
operator|)
operator|*
literal|80
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_STAT4_PRTX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|16
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|19
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|36
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|39
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|36
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|39
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PIP_STAT4_PRTX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A0000820ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|63
operator|)
operator|*
literal|80
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_STAT5_PRTX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|16
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|19
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|36
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|39
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|36
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|39
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PIP_STAT5_PRTX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A0000828ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|63
operator|)
operator|*
literal|80
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_STAT6_PRTX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|16
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|19
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|36
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|39
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|36
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|39
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PIP_STAT6_PRTX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A0000830ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|63
operator|)
operator|*
literal|80
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_STAT7_PRTX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|16
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|19
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|36
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|39
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|36
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|39
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PIP_STAT7_PRTX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A0000838ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|63
operator|)
operator|*
literal|80
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_STAT8_PRTX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|16
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|19
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|36
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|39
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|36
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|39
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PIP_STAT8_PRTX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A0000840ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|63
operator|)
operator|*
literal|80
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_STAT9_PRTX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|16
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|19
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|36
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|39
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|36
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|39
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PIP_STAT9_PRTX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A0000848ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|63
operator|)
operator|*
literal|80
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PIP_STAT_CTL
value|CVMX_PIP_STAT_CTL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_STAT_CTL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A0000018ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_STAT_INB_ERRSX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|16
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|19
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|36
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|39
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|36
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|39
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PIP_STAT_INB_ERRSX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A0001A10ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|63
operator|)
operator|*
literal|32
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_STAT_INB_OCTSX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|16
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|19
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|36
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|39
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|36
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|39
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PIP_STAT_INB_OCTSX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A0001A08ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|63
operator|)
operator|*
literal|32
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_STAT_INB_PKTSX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|16
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|19
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|36
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|39
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|2
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|35
operator|)
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|36
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|39
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PIP_STAT_INB_PKTSX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A0001A00ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|63
operator|)
operator|*
literal|32
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_TAG_INCX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|63
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|63
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|63
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|63
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|63
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|63
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|63
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PIP_TAG_INCX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A0001800ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|63
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PIP_TAG_MASK
value|CVMX_PIP_TAG_MASK_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_TAG_MASK_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A0000070ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PIP_TAG_SECRET
value|CVMX_PIP_TAG_SECRET_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_TAG_SECRET_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A0000068ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PIP_TODO_ENTRY
value|CVMX_PIP_TODO_ENTRY_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PIP_TODO_ENTRY_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A0000078ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_COUNT0
value|CVMX_PKO_MEM_COUNT0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_MEM_COUNT0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050001080ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_COUNT1
value|CVMX_PKO_MEM_COUNT1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_MEM_COUNT1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050001088ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_DEBUG0
value|CVMX_PKO_MEM_DEBUG0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_MEM_DEBUG0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050001100ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_DEBUG1
value|CVMX_PKO_MEM_DEBUG1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_MEM_DEBUG1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050001108ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_DEBUG10
value|CVMX_PKO_MEM_DEBUG10_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_MEM_DEBUG10_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050001150ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_DEBUG11
value|CVMX_PKO_MEM_DEBUG11_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_MEM_DEBUG11_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050001158ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_DEBUG12
value|CVMX_PKO_MEM_DEBUG12_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_MEM_DEBUG12_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050001160ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_DEBUG13
value|CVMX_PKO_MEM_DEBUG13_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_MEM_DEBUG13_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050001168ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_DEBUG14
value|CVMX_PKO_MEM_DEBUG14_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_MEM_DEBUG14_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_MEM_DEBUG14 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050001170ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_DEBUG2
value|CVMX_PKO_MEM_DEBUG2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_MEM_DEBUG2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050001110ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_DEBUG3
value|CVMX_PKO_MEM_DEBUG3_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_MEM_DEBUG3_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050001118ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_DEBUG4
value|CVMX_PKO_MEM_DEBUG4_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_MEM_DEBUG4_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050001120ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_DEBUG5
value|CVMX_PKO_MEM_DEBUG5_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_MEM_DEBUG5_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050001128ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_DEBUG6
value|CVMX_PKO_MEM_DEBUG6_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_MEM_DEBUG6_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050001130ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_DEBUG7
value|CVMX_PKO_MEM_DEBUG7_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_MEM_DEBUG7_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050001138ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_DEBUG8
value|CVMX_PKO_MEM_DEBUG8_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_MEM_DEBUG8_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050001140ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_DEBUG9
value|CVMX_PKO_MEM_DEBUG9_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_MEM_DEBUG9_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050001148ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_PORT_PTRS
value|CVMX_PKO_MEM_PORT_PTRS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_MEM_PORT_PTRS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_MEM_PORT_PTRS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050001010ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_PORT_QOS
value|CVMX_PKO_MEM_PORT_QOS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_MEM_PORT_QOS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_MEM_PORT_QOS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050001018ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_PORT_RATE0
value|CVMX_PKO_MEM_PORT_RATE0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_MEM_PORT_RATE0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_MEM_PORT_RATE0 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050001020ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_PORT_RATE1
value|CVMX_PKO_MEM_PORT_RATE1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_MEM_PORT_RATE1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_MEM_PORT_RATE1 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050001028ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_QUEUE_PTRS
value|CVMX_PKO_MEM_QUEUE_PTRS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_MEM_QUEUE_PTRS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050001000ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_QUEUE_QOS
value|CVMX_PKO_MEM_QUEUE_QOS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_MEM_QUEUE_QOS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050001008ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_REG_BIST_RESULT
value|CVMX_PKO_REG_BIST_RESULT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_BIST_RESULT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050000080ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_REG_CMD_BUF
value|CVMX_PKO_REG_CMD_BUF_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_CMD_BUF_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050000010ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_CRC_CTLX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_REG_CRC_CTLX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050000028ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_REG_CRC_ENABLE
value|CVMX_PKO_REG_CRC_ENABLE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_CRC_ENABLE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_REG_CRC_ENABLE not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050000020ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_CRC_IVX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_REG_CRC_IVX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050000038ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_REG_DEBUG0
value|CVMX_PKO_REG_DEBUG0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_DEBUG0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050000098ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_REG_DEBUG1
value|CVMX_PKO_REG_DEBUG1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_DEBUG1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|!
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_REG_DEBUG1 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800500000A0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_REG_DEBUG2
value|CVMX_PKO_REG_DEBUG2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_DEBUG2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|!
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_REG_DEBUG2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800500000A8ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_REG_DEBUG3
value|CVMX_PKO_REG_DEBUG3_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_DEBUG3_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|!
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_REG_DEBUG3 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800500000B0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_REG_ENGINE_INFLIGHT
value|CVMX_PKO_REG_ENGINE_INFLIGHT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_ENGINE_INFLIGHT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_REG_ENGINE_INFLIGHT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050000050ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_REG_ENGINE_THRESH
value|CVMX_PKO_REG_ENGINE_THRESH_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_ENGINE_THRESH_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_REG_ENGINE_THRESH not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050000058ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_REG_ERROR
value|CVMX_PKO_REG_ERROR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_ERROR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050000088ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_REG_FLAGS
value|CVMX_PKO_REG_FLAGS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_FLAGS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050000000ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_REG_GMX_PORT_MODE
value|CVMX_PKO_REG_GMX_PORT_MODE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_GMX_PORT_MODE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050000018ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_REG_INT_MASK
value|CVMX_PKO_REG_INT_MASK_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_INT_MASK_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050000090ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_REG_QUEUE_MODE
value|CVMX_PKO_REG_QUEUE_MODE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_QUEUE_MODE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050000048ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_REG_QUEUE_PTRS1
value|CVMX_PKO_REG_QUEUE_PTRS1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_QUEUE_PTRS1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|!
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_REG_QUEUE_PTRS1 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050000100ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_PKO_REG_READ_IDX
value|CVMX_PKO_REG_READ_IDX_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_READ_IDX_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050000008ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_POW_BIST_STAT
value|CVMX_POW_BIST_STAT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_POW_BIST_STAT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016700000003F8ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_POW_DS_PC
value|CVMX_POW_DS_PC_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_POW_DS_PC_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001670000000398ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_POW_ECC_ERR
value|CVMX_POW_ECC_ERR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_POW_ECC_ERR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001670000000218ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_POW_INT_CTL
value|CVMX_POW_INT_CTL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_POW_INT_CTL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001670000000220ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_POW_IQ_CNTX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_POW_IQ_CNTX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001670000000340ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|7
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_POW_IQ_COM_CNT
value|CVMX_POW_IQ_COM_CNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_POW_IQ_COM_CNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001670000000388ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_POW_IQ_INT
value|CVMX_POW_IQ_INT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_POW_IQ_INT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_POW_IQ_INT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001670000000238ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_POW_IQ_INT_EN
value|CVMX_POW_IQ_INT_EN_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_POW_IQ_INT_EN_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_POW_IQ_INT_EN not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001670000000240ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_POW_IQ_THRX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_POW_IQ_THRX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016700000003A0ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|7
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_POW_NOS_CNT
value|CVMX_POW_NOS_CNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_POW_NOS_CNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001670000000228ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_POW_NW_TIM
value|CVMX_POW_NW_TIM_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_POW_NW_TIM_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001670000000210ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_POW_PF_RST_MSK
value|CVMX_POW_PF_RST_MSK_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_POW_PF_RST_MSK_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|!
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_POW_PF_RST_MSK not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001670000000230ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_POW_PP_GRP_MSKX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|11
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_POW_PP_GRP_MSKX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001670000000000ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_POW_QOS_RNDX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_POW_QOS_RNDX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016700000001C0ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|7
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_POW_QOS_THRX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_POW_QOS_THRX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001670000000180ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|7
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_POW_TS_PC
value|CVMX_POW_TS_PC_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_POW_TS_PC_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001670000000390ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_POW_WA_COM_PC
value|CVMX_POW_WA_COM_PC_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_POW_WA_COM_PC_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001670000000380ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_POW_WA_PCX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_POW_WA_PCX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001670000000300ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|7
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_POW_WQ_INT
value|CVMX_POW_WQ_INT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_POW_WQ_INT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001670000000200ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_POW_WQ_INT_CNTX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_POW_WQ_INT_CNTX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001670000000100ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_POW_WQ_INT_PC
value|CVMX_POW_WQ_INT_PC_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_POW_WQ_INT_PC_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001670000000208ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_POW_WQ_INT_THRX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_POW_WQ_INT_THRX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001670000000080ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_POW_WS_PCX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_POW_WS_PCX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001670000000280ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_RAD_MEM_DEBUG0
value|CVMX_RAD_MEM_DEBUG0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_MEM_DEBUG0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_MEM_DEBUG0 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070001000ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_RAD_MEM_DEBUG1
value|CVMX_RAD_MEM_DEBUG1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_MEM_DEBUG1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_MEM_DEBUG1 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070001008ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_RAD_MEM_DEBUG2
value|CVMX_RAD_MEM_DEBUG2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_MEM_DEBUG2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_MEM_DEBUG2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070001010ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_RAD_REG_BIST_RESULT
value|CVMX_RAD_REG_BIST_RESULT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_BIST_RESULT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_BIST_RESULT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000080ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_RAD_REG_CMD_BUF
value|CVMX_RAD_REG_CMD_BUF_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_CMD_BUF_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_CMD_BUF not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000008ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_RAD_REG_CTL
value|CVMX_RAD_REG_CTL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_CTL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_CTL not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000000ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG0
value|CVMX_RAD_REG_DEBUG0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_DEBUG0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_DEBUG0 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000100ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG1
value|CVMX_RAD_REG_DEBUG1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_DEBUG1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_DEBUG1 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000108ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG10
value|CVMX_RAD_REG_DEBUG10_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_DEBUG10_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_DEBUG10 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000150ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG11
value|CVMX_RAD_REG_DEBUG11_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_DEBUG11_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_DEBUG11 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000158ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG12
value|CVMX_RAD_REG_DEBUG12_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_DEBUG12_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_DEBUG12 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000160ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG2
value|CVMX_RAD_REG_DEBUG2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_DEBUG2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_DEBUG2 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000110ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG3
value|CVMX_RAD_REG_DEBUG3_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_DEBUG3_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_DEBUG3 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000118ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG4
value|CVMX_RAD_REG_DEBUG4_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_DEBUG4_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_DEBUG4 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000120ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG5
value|CVMX_RAD_REG_DEBUG5_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_DEBUG5_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_DEBUG5 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000128ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG6
value|CVMX_RAD_REG_DEBUG6_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_DEBUG6_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_DEBUG6 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000130ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG7
value|CVMX_RAD_REG_DEBUG7_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_DEBUG7_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_DEBUG7 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000138ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG8
value|CVMX_RAD_REG_DEBUG8_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_DEBUG8_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_DEBUG8 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000140ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG9
value|CVMX_RAD_REG_DEBUG9_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_DEBUG9_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_DEBUG9 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000148ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_RAD_REG_ERROR
value|CVMX_RAD_REG_ERROR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_ERROR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_ERROR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000088ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_RAD_REG_INT_MASK
value|CVMX_RAD_REG_INT_MASK_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_INT_MASK_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_INT_MASK not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000090ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_RAD_REG_POLYNOMIAL
value|CVMX_RAD_REG_POLYNOMIAL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_POLYNOMIAL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_POLYNOMIAL not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000010ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_RAD_REG_READ_IDX
value|CVMX_RAD_REG_READ_IDX_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_READ_IDX_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_READ_IDX not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000018ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_RNM_BIST_STATUS
value|CVMX_RNM_BIST_STATUS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RNM_BIST_STATUS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180040000008ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_RNM_CTL_STATUS
value|CVMX_RNM_CTL_STATUS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RNM_CTL_STATUS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180040000000ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_SMIX_CLK
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_SMIX_CLK(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001818ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|256
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_SMIX_CMD
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_SMIX_CMD(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001800ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|256
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_SMIX_EN
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_SMIX_EN(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001820ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|256
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_SMIX_RD_DAT
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_SMIX_RD_DAT(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001810ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|256
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_SMIX_WR_DAT
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_SMIX_WR_DAT(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180000001808ull
argument_list|)
operator|+
operator|(
name|offset
operator|&
literal|1
operator|)
operator|*
literal|256
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_SPX0_PLL_BW_CTL
value|CVMX_SPX0_PLL_BW_CTL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_SPX0_PLL_BW_CTL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_SPX0_PLL_BW_CTL not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180090000388ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_SPX0_PLL_SETTING
value|CVMX_SPX0_PLL_SETTING_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_SPX0_PLL_SETTING_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_SPX0_PLL_SETTING not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180090000380ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_SPXX_BCKPRS_CNT
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_SPXX_BCKPRS_CNT(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180090000340ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_SPXX_BIST_STAT
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_SPXX_BIST_STAT(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800900007F8ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_SPXX_CLK_CTL
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_SPXX_CLK_CTL(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180090000348ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_SPXX_CLK_STAT
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_SPXX_CLK_STAT(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180090000350ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_SPXX_DBG_DESKEW_CTL
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_SPXX_DBG_DESKEW_CTL(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180090000368ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_SPXX_DBG_DESKEW_STATE
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_SPXX_DBG_DESKEW_STATE(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180090000370ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_SPXX_DRV_CTL
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_SPXX_DRV_CTL(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180090000358ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_SPXX_ERR_CTL
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_SPXX_ERR_CTL(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180090000320ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_SPXX_INT_DAT
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_SPXX_INT_DAT(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180090000318ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_SPXX_INT_MSK
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_SPXX_INT_MSK(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180090000308ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_SPXX_INT_REG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_SPXX_INT_REG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180090000300ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_SPXX_INT_SYNC
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_SPXX_INT_SYNC(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180090000310ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_SPXX_TPA_ACC
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_SPXX_TPA_ACC(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180090000338ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_SPXX_TPA_MAX
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_SPXX_TPA_MAX(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180090000330ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_SPXX_TPA_SEL
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_SPXX_TPA_SEL(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180090000328ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_SPXX_TRN4_CTL
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_SPXX_TRN4_CTL(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180090000360ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_SRXX_COM_CTL
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_SRXX_COM_CTL(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180090000200ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_SRXX_IGN_RX_FULL
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_SRXX_IGN_RX_FULL(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180090000218ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_SRXX_SPI4_CALX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_SRXX_SPI4_CALX(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180090000000ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|31
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x1000000ull
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_SRXX_SPI4_STAT
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_SRXX_SPI4_STAT(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180090000208ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_SRXX_SW_TICK_CTL
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_SRXX_SW_TICK_CTL(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180090000220ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_SRXX_SW_TICK_DAT
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_SRXX_SW_TICK_DAT(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180090000228ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_STXX_ARB_CTL
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_STXX_ARB_CTL(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180090000608ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_STXX_BCKPRS_CNT
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_STXX_BCKPRS_CNT(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180090000688ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_STXX_COM_CTL
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_STXX_COM_CTL(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180090000600ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_STXX_DIP_CNT
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_STXX_DIP_CNT(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180090000690ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_STXX_IGN_CAL
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_STXX_IGN_CAL(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180090000610ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_STXX_INT_MSK
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_STXX_INT_MSK(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800900006A0ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_STXX_INT_REG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_STXX_INT_REG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180090000698ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_STXX_INT_SYNC
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_STXX_INT_SYNC(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800900006A8ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_STXX_MIN_BST
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_STXX_MIN_BST(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180090000618ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_STXX_SPI4_CALX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_STXX_SPI4_CALX(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180090000400ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|31
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x1000000ull
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_STXX_SPI4_DAT
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_STXX_SPI4_DAT(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180090000628ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_STXX_SPI4_STAT
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_STXX_SPI4_STAT(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180090000630ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_STXX_STAT_BYTES_HI
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_STXX_STAT_BYTES_HI(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180090000648ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_STXX_STAT_BYTES_LO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_STXX_STAT_BYTES_LO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180090000680ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_STXX_STAT_CTL
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_STXX_STAT_CTL(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180090000638ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_STXX_STAT_PKT_XMT
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_STXX_STAT_PKT_XMT(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180090000640ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_TIM_MEM_DEBUG0
value|CVMX_TIM_MEM_DEBUG0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TIM_MEM_DEBUG0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180058001100ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_TIM_MEM_DEBUG1
value|CVMX_TIM_MEM_DEBUG1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TIM_MEM_DEBUG1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180058001108ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_TIM_MEM_DEBUG2
value|CVMX_TIM_MEM_DEBUG2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TIM_MEM_DEBUG2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180058001110ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_TIM_MEM_RING0
value|CVMX_TIM_MEM_RING0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TIM_MEM_RING0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180058001000ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_TIM_MEM_RING1
value|CVMX_TIM_MEM_RING1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TIM_MEM_RING1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180058001008ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_TIM_REG_BIST_RESULT
value|CVMX_TIM_REG_BIST_RESULT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TIM_REG_BIST_RESULT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180058000080ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_TIM_REG_ERROR
value|CVMX_TIM_REG_ERROR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TIM_REG_ERROR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180058000088ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_TIM_REG_FLAGS
value|CVMX_TIM_REG_FLAGS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TIM_REG_FLAGS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180058000000ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_TIM_REG_INT_MASK
value|CVMX_TIM_REG_INT_MASK_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TIM_REG_INT_MASK_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180058000090ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_TIM_REG_READ_IDX
value|CVMX_TIM_REG_READ_IDX_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TIM_REG_READ_IDX_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180058000008ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_TRA_BIST_STATUS
value|CVMX_TRA_BIST_STATUS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRA_BIST_STATUS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRA_BIST_STATUS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A8000010ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_TRA_CTL
value|CVMX_TRA_CTL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRA_CTL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRA_CTL not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A8000000ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_TRA_CYCLES_SINCE
value|CVMX_TRA_CYCLES_SINCE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRA_CYCLES_SINCE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRA_CYCLES_SINCE not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A8000018ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_TRA_CYCLES_SINCE1
value|CVMX_TRA_CYCLES_SINCE1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRA_CYCLES_SINCE1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRA_CYCLES_SINCE1 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A8000028ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_TRA_FILT_ADR_ADR
value|CVMX_TRA_FILT_ADR_ADR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRA_FILT_ADR_ADR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRA_FILT_ADR_ADR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A8000058ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_TRA_FILT_ADR_MSK
value|CVMX_TRA_FILT_ADR_MSK_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRA_FILT_ADR_MSK_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRA_FILT_ADR_MSK not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A8000060ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_TRA_FILT_CMD
value|CVMX_TRA_FILT_CMD_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRA_FILT_CMD_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRA_FILT_CMD not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A8000040ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_TRA_FILT_DID
value|CVMX_TRA_FILT_DID_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRA_FILT_DID_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRA_FILT_DID not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A8000050ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_TRA_FILT_SID
value|CVMX_TRA_FILT_SID_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRA_FILT_SID_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRA_FILT_SID not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A8000048ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_TRA_INT_STATUS
value|CVMX_TRA_INT_STATUS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRA_INT_STATUS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRA_INT_STATUS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A8000008ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_TRA_READ_DAT
value|CVMX_TRA_READ_DAT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRA_READ_DAT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRA_READ_DAT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A8000020ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_TRA_TRIG0_ADR_ADR
value|CVMX_TRA_TRIG0_ADR_ADR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRA_TRIG0_ADR_ADR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRA_TRIG0_ADR_ADR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A8000098ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_TRA_TRIG0_ADR_MSK
value|CVMX_TRA_TRIG0_ADR_MSK_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRA_TRIG0_ADR_MSK_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRA_TRIG0_ADR_MSK not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A80000A0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_TRA_TRIG0_CMD
value|CVMX_TRA_TRIG0_CMD_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRA_TRIG0_CMD_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRA_TRIG0_CMD not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A8000080ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_TRA_TRIG0_DID
value|CVMX_TRA_TRIG0_DID_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRA_TRIG0_DID_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRA_TRIG0_DID not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A8000090ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_TRA_TRIG0_SID
value|CVMX_TRA_TRIG0_SID_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRA_TRIG0_SID_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRA_TRIG0_SID not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A8000088ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_TRA_TRIG1_ADR_ADR
value|CVMX_TRA_TRIG1_ADR_ADR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRA_TRIG1_ADR_ADR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRA_TRIG1_ADR_ADR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A80000D8ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_TRA_TRIG1_ADR_MSK
value|CVMX_TRA_TRIG1_ADR_MSK_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRA_TRIG1_ADR_MSK_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRA_TRIG1_ADR_MSK not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A80000E0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_TRA_TRIG1_CMD
value|CVMX_TRA_TRIG1_CMD_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRA_TRIG1_CMD_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRA_TRIG1_CMD not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A80000C0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_TRA_TRIG1_DID
value|CVMX_TRA_TRIG1_DID_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRA_TRIG1_DID_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRA_TRIG1_DID not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A80000D0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_TRA_TRIG1_SID
value|CVMX_TRA_TRIG1_SID_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRA_TRIG1_SID_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRA_TRIG1_SID not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A80000C8ull
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_DAINT
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_DAINT(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000818ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_DAINTMSK
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_DAINTMSK(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F001000081Cull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_DCFG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_DCFG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000800ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_DCTL
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_DCTL(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000804ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_DIEPCTLX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_DIEPCTLX(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000900ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|7
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000000ull
operator|)
operator|*
literal|32
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_DIEPINTX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_DIEPINTX(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000908ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|7
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000000ull
operator|)
operator|*
literal|32
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_DIEPMSK
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_DIEPMSK(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000810ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_DIEPTSIZX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_DIEPTSIZX(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000910ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|7
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000000ull
operator|)
operator|*
literal|32
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_DOEPCTLX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_DOEPCTLX(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000B00ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|7
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000000ull
operator|)
operator|*
literal|32
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_DOEPINTX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_DOEPINTX(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000B08ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|7
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000000ull
operator|)
operator|*
literal|32
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_DOEPMSK
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_DOEPMSK(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000814ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_DOEPTSIZX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_DOEPTSIZX(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000B10ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|7
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000000ull
operator|)
operator|*
literal|32
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_DPTXFSIZX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
operator|(
name|offset
operator|>=
literal|1
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
operator|(
name|offset
operator|>=
literal|1
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
operator|(
name|offset
operator|>=
literal|1
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
operator|(
name|offset
operator|>=
literal|1
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
operator|(
name|offset
operator|>=
literal|1
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|4
operator|)
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_DPTXFSIZX(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000100ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|7
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x40000000000ull
operator|)
operator|*
literal|4
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_DSTS
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_DSTS(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000808ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_DTKNQR1
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_DTKNQR1(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000820ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_DTKNQR2
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_DTKNQR2(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000824ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_DTKNQR3
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_DTKNQR3(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000830ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_DTKNQR4
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_DTKNQR4(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000834ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_GAHBCFG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_GAHBCFG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000008ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_GHWCFG1
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_GHWCFG1(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000044ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_GHWCFG2
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_GHWCFG2(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000048ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_GHWCFG3
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_GHWCFG3(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F001000004Cull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_GHWCFG4
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_GHWCFG4(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000050ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_GINTMSK
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_GINTMSK(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000018ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_GINTSTS
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_GINTSTS(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000014ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_GNPTXFSIZ
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_GNPTXFSIZ(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000028ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_GNPTXSTS
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_GNPTXSTS(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F001000002Cull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_GOTGCTL
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_GOTGCTL(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000000ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_GOTGINT
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_GOTGINT(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000004ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_GRSTCTL
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_GRSTCTL(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000010ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_GRXFSIZ
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_GRXFSIZ(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000024ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_GRXSTSPD
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_GRXSTSPD(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010040020ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_GRXSTSPH
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_GRXSTSPH(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000020ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_GRXSTSRD
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_GRXSTSRD(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F001004001Cull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_GRXSTSRH
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_GRXSTSRH(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F001000001Cull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_GSNPSID
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_GSNPSID(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000040ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_GUSBCFG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_GUSBCFG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F001000000Cull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_HAINT
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_HAINT(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000414ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_HAINTMSK
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_HAINTMSK(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000418ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_HCCHARX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_HCCHARX(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000500ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|7
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000000ull
operator|)
operator|*
literal|32
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_HCFG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_HCFG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000400ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_HCINTMSKX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_HCINTMSKX(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F001000050Cull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|7
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000000ull
operator|)
operator|*
literal|32
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_HCINTX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_HCINTX(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000508ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|7
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000000ull
operator|)
operator|*
literal|32
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_HCSPLTX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_HCSPLTX(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000504ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|7
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000000ull
operator|)
operator|*
literal|32
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_HCTSIZX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_HCTSIZX(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000510ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|7
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x8000000000ull
operator|)
operator|*
literal|32
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_HFIR
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_HFIR(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000404ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_HFNUM
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_HFNUM(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000408ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_HPRT
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_HPRT(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000440ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_HPTXFSIZ
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_HPTXFSIZ(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000100ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_HPTXSTS
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_HPTXSTS(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000410ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_NPTXDFIFOX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_NPTXDFIFOX(%lu,%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010001000ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|&
literal|7
operator|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000ull
operator|)
operator|*
literal|4096
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBCX_PCGCCTL
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBCX_PCGCCTL(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0010000E00ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBNX_BIST_STATUS
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBNX_BIST_STATUS(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800680007F8ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBNX_CLK_CTL
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBNX_CLK_CTL(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180068000010ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBNX_CTL_STATUS
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBNX_CTL_STATUS(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0000000800ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBNX_DMA0_INB_CHN0
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBNX_DMA0_INB_CHN0(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0000000818ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBNX_DMA0_INB_CHN1
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBNX_DMA0_INB_CHN1(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0000000820ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBNX_DMA0_INB_CHN2
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBNX_DMA0_INB_CHN2(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0000000828ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBNX_DMA0_INB_CHN3
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBNX_DMA0_INB_CHN3(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0000000830ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBNX_DMA0_INB_CHN4
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBNX_DMA0_INB_CHN4(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0000000838ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBNX_DMA0_INB_CHN5
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBNX_DMA0_INB_CHN5(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0000000840ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBNX_DMA0_INB_CHN6
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBNX_DMA0_INB_CHN6(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0000000848ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBNX_DMA0_INB_CHN7
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBNX_DMA0_INB_CHN7(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0000000850ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBNX_DMA0_OUTB_CHN0
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBNX_DMA0_OUTB_CHN0(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0000000858ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBNX_DMA0_OUTB_CHN1
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBNX_DMA0_OUTB_CHN1(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0000000860ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBNX_DMA0_OUTB_CHN2
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBNX_DMA0_OUTB_CHN2(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0000000868ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBNX_DMA0_OUTB_CHN3
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBNX_DMA0_OUTB_CHN3(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0000000870ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBNX_DMA0_OUTB_CHN4
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBNX_DMA0_OUTB_CHN4(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0000000878ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBNX_DMA0_OUTB_CHN5
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBNX_DMA0_OUTB_CHN5(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0000000880ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBNX_DMA0_OUTB_CHN6
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBNX_DMA0_OUTB_CHN6(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0000000888ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBNX_DMA0_OUTB_CHN7
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBNX_DMA0_OUTB_CHN7(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0000000890ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBNX_DMA_TEST
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBNX_DMA_TEST(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00016F0000000808ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x100000000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBNX_INT_ENB
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBNX_INT_ENB(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180068000008ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBNX_INT_SUM
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBNX_INT_SUM(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180068000000ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000000ull
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_USBNX_USBP_CTL_STATUS
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_USBNX_USBP_CTL_STATUS(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180068000018ull
argument_list|)
operator|+
operator|(
name|block_id
operator|&
literal|1
operator|)
operator|*
literal|0x10000000ull
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_ZIP_CMD_BIST_RESULT
value|CVMX_ZIP_CMD_BIST_RESULT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ZIP_CMD_BIST_RESULT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ZIP_CMD_BIST_RESULT not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180038000080ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_ZIP_CMD_BUF
value|CVMX_ZIP_CMD_BUF_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ZIP_CMD_BUF_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ZIP_CMD_BUF not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180038000008ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_ZIP_CMD_CTL
value|CVMX_ZIP_CMD_CTL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ZIP_CMD_CTL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ZIP_CMD_CTL not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180038000000ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_ZIP_CONSTANTS
value|CVMX_ZIP_CONSTANTS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ZIP_CONSTANTS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ZIP_CONSTANTS not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800380000A0ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_ZIP_DEBUG0
value|CVMX_ZIP_DEBUG0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ZIP_DEBUG0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ZIP_DEBUG0 not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180038000098ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_ZIP_ERROR
value|CVMX_ZIP_ERROR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ZIP_ERROR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ZIP_ERROR not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180038000088ull
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_ZIP_INT_MASK
value|CVMX_ZIP_INT_MASK_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ZIP_INT_MASK_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ZIP_INT_MASK not supported on this chip\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180038000090ull
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __CVMX_CSR_ADDRESSES_H__ */
end_comment

end_unit

