begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* e_os2.h */
end_comment

begin_comment
comment|/* ====================================================================  * Copyright (c) 1998-2000 The OpenSSL Project.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. All advertising materials mentioning features or use of this  *    software must display the following acknowledgment:  *    "This product includes software developed by the OpenSSL Project  *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"  *  * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to  *    endorse or promote products derived from this software without  *    prior written permission. For written permission, please contact  *    openssl-core@openssl.org.  *  * 5. Products derived from this software may not be called "OpenSSL"  *    nor may "OpenSSL" appear in their names without prior written  *    permission of the OpenSSL Project.  *  * 6. Redistributions of any form whatsoever must retain the following  *    acknowledgment:  *    "This product includes software developed by the OpenSSL Project  *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"  *  * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY  * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED  * OF THE POSSIBILITY OF SUCH DAMAGE.  * ====================================================================  *  * This product includes cryptographic software written by Eric Young  * (eay@cryptsoft.com).  This product includes software written by Tim  * Hudson (tjh@cryptsoft.com).  *  */
end_comment

begin_include
include|#
directive|include
file|<openssl/opensslconf.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|HEADER_E_OS2_H
end_ifndef

begin_define
define|#
directive|define
name|HEADER_E_OS2_H
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/******************************************************************************  * Detect operating systems.  This probably needs completing.  * The result is that at least one OPENSSL_SYS_os macro should be defined.  * However, if none is defined, Unix is assumed.  **/
define|#
directive|define
name|OPENSSL_SYS_UNIX
comment|/* ---------------------- Macintosh, before MacOS X ----------------------- */
if|#
directive|if
name|defined
argument_list|(
name|__MWERKS__
argument_list|)
operator|&&
name|defined
argument_list|(
name|macintosh
argument_list|)
operator|||
name|defined
argument_list|(
name|OPENSSL_SYSNAME_MAC
argument_list|)
undef|#
directive|undef
name|OPENSSL_SYS_UNIX
define|#
directive|define
name|OPENSSL_SYS_MACINTOSH_CLASSIC
endif|#
directive|endif
comment|/* ---------------------- NetWare ----------------------------------------- */
if|#
directive|if
name|defined
argument_list|(
name|NETWARE
argument_list|)
operator|||
name|defined
argument_list|(
name|OPENSSL_SYSNAME_NETWARE
argument_list|)
undef|#
directive|undef
name|OPENSSL_SYS_UNIX
define|#
directive|define
name|OPENSSL_SYS_NETWARE
endif|#
directive|endif
comment|/* --------------------- Microsoft operating systems ---------------------- */
comment|/*  * Note that MSDOS actually denotes 32-bit environments running on top of  * MS-DOS, such as DJGPP one.  */
if|#
directive|if
name|defined
argument_list|(
name|OPENSSL_SYSNAME_MSDOS
argument_list|)
undef|#
directive|undef
name|OPENSSL_SYS_UNIX
define|#
directive|define
name|OPENSSL_SYS_MSDOS
endif|#
directive|endif
comment|/*  * For 32 bit environment, there seems to be the CygWin environment and then  * all the others that try to do the same thing Microsoft does...  */
if|#
directive|if
name|defined
argument_list|(
name|OPENSSL_SYSNAME_UWIN
argument_list|)
undef|#
directive|undef
name|OPENSSL_SYS_UNIX
define|#
directive|define
name|OPENSSL_SYS_WIN32_UWIN
else|#
directive|else
if|#
directive|if
name|defined
argument_list|(
name|__CYGWIN__
argument_list|)
operator|||
name|defined
argument_list|(
name|OPENSSL_SYSNAME_CYGWIN
argument_list|)
undef|#
directive|undef
name|OPENSSL_SYS_UNIX
define|#
directive|define
name|OPENSSL_SYS_WIN32_CYGWIN
else|#
directive|else
if|#
directive|if
name|defined
argument_list|(
name|_WIN32
argument_list|)
operator|||
name|defined
argument_list|(
name|OPENSSL_SYSNAME_WIN32
argument_list|)
undef|#
directive|undef
name|OPENSSL_SYS_UNIX
define|#
directive|define
name|OPENSSL_SYS_WIN32
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|_WIN64
argument_list|)
operator|||
name|defined
argument_list|(
name|OPENSSL_SYSNAME_WIN64
argument_list|)
undef|#
directive|undef
name|OPENSSL_SYS_UNIX
if|#
directive|if
operator|!
name|defined
argument_list|(
name|OPENSSL_SYS_WIN64
argument_list|)
define|#
directive|define
name|OPENSSL_SYS_WIN64
endif|#
directive|endif
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|OPENSSL_SYSNAME_WINNT
argument_list|)
undef|#
directive|undef
name|OPENSSL_SYS_UNIX
define|#
directive|define
name|OPENSSL_SYS_WINNT
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|OPENSSL_SYSNAME_WINCE
argument_list|)
undef|#
directive|undef
name|OPENSSL_SYS_UNIX
define|#
directive|define
name|OPENSSL_SYS_WINCE
endif|#
directive|endif
endif|#
directive|endif
endif|#
directive|endif
comment|/* Anything that tries to look like Microsoft is "Windows" */
if|#
directive|if
name|defined
argument_list|(
name|OPENSSL_SYS_WIN32
argument_list|)
operator|||
name|defined
argument_list|(
name|OPENSSL_SYS_WIN64
argument_list|)
operator|||
name|defined
argument_list|(
name|OPENSSL_SYS_WINNT
argument_list|)
operator|||
name|defined
argument_list|(
name|OPENSSL_SYS_WINCE
argument_list|)
undef|#
directive|undef
name|OPENSSL_SYS_UNIX
define|#
directive|define
name|OPENSSL_SYS_WINDOWS
ifndef|#
directive|ifndef
name|OPENSSL_SYS_MSDOS
define|#
directive|define
name|OPENSSL_SYS_MSDOS
endif|#
directive|endif
endif|#
directive|endif
comment|/*  * DLL settings.  This part is a bit tough, because it's up to the  * application implementor how he or she will link the application, so it  * requires some macro to be used.  */
ifdef|#
directive|ifdef
name|OPENSSL_SYS_WINDOWS
ifndef|#
directive|ifndef
name|OPENSSL_OPT_WINDLL
if|#
directive|if
name|defined
argument_list|(
name|_WINDLL
argument_list|)
comment|/* This is used when building OpenSSL to                                  * indicate that DLL linkage should be used */
define|#
directive|define
name|OPENSSL_OPT_WINDLL
endif|#
directive|endif
endif|#
directive|endif
endif|#
directive|endif
comment|/* ------------------------------- OpenVMS -------------------------------- */
if|#
directive|if
name|defined
argument_list|(
name|__VMS
argument_list|)
operator|||
name|defined
argument_list|(
name|VMS
argument_list|)
operator|||
name|defined
argument_list|(
name|OPENSSL_SYSNAME_VMS
argument_list|)
undef|#
directive|undef
name|OPENSSL_SYS_UNIX
define|#
directive|define
name|OPENSSL_SYS_VMS
if|#
directive|if
name|defined
argument_list|(
name|__DECC
argument_list|)
define|#
directive|define
name|OPENSSL_SYS_VMS_DECC
elif|#
directive|elif
name|defined
argument_list|(
name|__DECCXX
argument_list|)
define|#
directive|define
name|OPENSSL_SYS_VMS_DECC
define|#
directive|define
name|OPENSSL_SYS_VMS_DECCXX
else|#
directive|else
define|#
directive|define
name|OPENSSL_SYS_VMS_NODECC
endif|#
directive|endif
endif|#
directive|endif
comment|/* -------------------------------- OS/2 ---------------------------------- */
if|#
directive|if
name|defined
argument_list|(
name|__EMX__
argument_list|)
operator|||
name|defined
argument_list|(
name|__OS2__
argument_list|)
undef|#
directive|undef
name|OPENSSL_SYS_UNIX
define|#
directive|define
name|OPENSSL_SYS_OS2
endif|#
directive|endif
comment|/* -------------------------------- Unix ---------------------------------- */
ifdef|#
directive|ifdef
name|OPENSSL_SYS_UNIX
if|#
directive|if
name|defined
argument_list|(
name|linux
argument_list|)
operator|||
name|defined
argument_list|(
name|__linux__
argument_list|)
operator|||
name|defined
argument_list|(
name|OPENSSL_SYSNAME_LINUX
argument_list|)
define|#
directive|define
name|OPENSSL_SYS_LINUX
endif|#
directive|endif
ifdef|#
directive|ifdef
name|OPENSSL_SYSNAME_MPE
define|#
directive|define
name|OPENSSL_SYS_MPE
endif|#
directive|endif
ifdef|#
directive|ifdef
name|OPENSSL_SYSNAME_SNI
define|#
directive|define
name|OPENSSL_SYS_SNI
endif|#
directive|endif
ifdef|#
directive|ifdef
name|OPENSSL_SYSNAME_ULTRASPARC
define|#
directive|define
name|OPENSSL_SYS_ULTRASPARC
endif|#
directive|endif
ifdef|#
directive|ifdef
name|OPENSSL_SYSNAME_NEWS4
define|#
directive|define
name|OPENSSL_SYS_NEWS4
endif|#
directive|endif
ifdef|#
directive|ifdef
name|OPENSSL_SYSNAME_MACOSX
define|#
directive|define
name|OPENSSL_SYS_MACOSX
endif|#
directive|endif
ifdef|#
directive|ifdef
name|OPENSSL_SYSNAME_MACOSX_RHAPSODY
define|#
directive|define
name|OPENSSL_SYS_MACOSX_RHAPSODY
define|#
directive|define
name|OPENSSL_SYS_MACOSX
endif|#
directive|endif
ifdef|#
directive|ifdef
name|OPENSSL_SYSNAME_SUNOS
define|#
directive|define
name|OPENSSL_SYS_SUNOS
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|_CRAY
argument_list|)
operator|||
name|defined
argument_list|(
name|OPENSSL_SYSNAME_CRAY
argument_list|)
define|#
directive|define
name|OPENSSL_SYS_CRAY
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|_AIX
argument_list|)
operator|||
name|defined
argument_list|(
name|OPENSSL_SYSNAME_AIX
argument_list|)
define|#
directive|define
name|OPENSSL_SYS_AIX
endif|#
directive|endif
endif|#
directive|endif
comment|/* -------------------------------- VOS ----------------------------------- */
if|#
directive|if
name|defined
argument_list|(
name|__VOS__
argument_list|)
operator|||
name|defined
argument_list|(
name|OPENSSL_SYSNAME_VOS
argument_list|)
define|#
directive|define
name|OPENSSL_SYS_VOS
ifdef|#
directive|ifdef
name|__HPPA__
define|#
directive|define
name|OPENSSL_SYS_VOS_HPPA
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__IA32__
define|#
directive|define
name|OPENSSL_SYS_VOS_IA32
endif|#
directive|endif
endif|#
directive|endif
comment|/* ------------------------------ VxWorks --------------------------------- */
ifdef|#
directive|ifdef
name|OPENSSL_SYSNAME_VXWORKS
define|#
directive|define
name|OPENSSL_SYS_VXWORKS
endif|#
directive|endif
comment|/* -------------------------------- BeOS ---------------------------------- */
if|#
directive|if
name|defined
argument_list|(
name|__BEOS__
argument_list|)
define|#
directive|define
name|OPENSSL_SYS_BEOS
include|#
directive|include
file|<sys/socket.h>
if|#
directive|if
name|defined
argument_list|(
name|BONE_VERSION
argument_list|)
define|#
directive|define
name|OPENSSL_SYS_BEOS_BONE
else|#
directive|else
define|#
directive|define
name|OPENSSL_SYS_BEOS_R5
endif|#
directive|endif
endif|#
directive|endif
comment|/**  * That's it for OS-specific stuff  *****************************************************************************/
comment|/* Specials for I/O an exit */
ifdef|#
directive|ifdef
name|OPENSSL_SYS_MSDOS
define|#
directive|define
name|OPENSSL_UNISTD_IO
value|<io.h>
define|#
directive|define
name|OPENSSL_DECLARE_EXIT
value|extern void exit(int);
else|#
directive|else
define|#
directive|define
name|OPENSSL_UNISTD_IO
value|OPENSSL_UNISTD
define|#
directive|define
name|OPENSSL_DECLARE_EXIT
comment|/* declared in unistd.h */
endif|#
directive|endif
comment|/*-  * Definitions of OPENSSL_GLOBAL and OPENSSL_EXTERN, to define and declare  * certain global symbols that, with some compilers under VMS, have to be  * defined and declared explicitely with globaldef and globalref.  * Definitions of OPENSSL_EXPORT and OPENSSL_IMPORT, to define and declare  * DLL exports and imports for compilers under Win32.  These are a little  * more complicated to use.  Basically, for any library that exports some  * global variables, the following code must be present in the header file  * that declares them, before OPENSSL_EXTERN is used:  *  * #ifdef SOME_BUILD_FLAG_MACRO  * # undef OPENSSL_EXTERN  * # define OPENSSL_EXTERN OPENSSL_EXPORT  * #endif  *  * The default is to have OPENSSL_EXPORT, OPENSSL_IMPORT and OPENSSL_GLOBAL  * have some generally sensible values, and for OPENSSL_EXTERN to have the  * value OPENSSL_IMPORT.  */
if|#
directive|if
name|defined
argument_list|(
name|OPENSSL_SYS_VMS_NODECC
argument_list|)
define|#
directive|define
name|OPENSSL_EXPORT
value|globalref
define|#
directive|define
name|OPENSSL_IMPORT
value|globalref
define|#
directive|define
name|OPENSSL_GLOBAL
value|globaldef
elif|#
directive|elif
name|defined
argument_list|(
name|OPENSSL_SYS_WINDOWS
argument_list|)
operator|&&
name|defined
argument_list|(
name|OPENSSL_OPT_WINDLL
argument_list|)
define|#
directive|define
name|OPENSSL_EXPORT
value|extern __declspec(dllexport)
define|#
directive|define
name|OPENSSL_IMPORT
value|extern __declspec(dllimport)
define|#
directive|define
name|OPENSSL_GLOBAL
else|#
directive|else
define|#
directive|define
name|OPENSSL_EXPORT
value|extern
define|#
directive|define
name|OPENSSL_IMPORT
value|extern
define|#
directive|define
name|OPENSSL_GLOBAL
endif|#
directive|endif
define|#
directive|define
name|OPENSSL_EXTERN
value|OPENSSL_IMPORT
comment|/*-  * Macros to allow global variables to be reached through function calls when  * required (if a shared library version requires it, for example.  * The way it's done allows definitions like this:  *  *      // in foobar.c  *      OPENSSL_IMPLEMENT_GLOBAL(int,foobar,0)  *      // in foobar.h  *      OPENSSL_DECLARE_GLOBAL(int,foobar);  *      #define foobar OPENSSL_GLOBAL_REF(foobar)  */
ifdef|#
directive|ifdef
name|OPENSSL_EXPORT_VAR_AS_FUNCTION
define|#
directive|define
name|OPENSSL_IMPLEMENT_GLOBAL
parameter_list|(
name|type
parameter_list|,
name|name
parameter_list|,
name|value
parameter_list|)
define|\
value|type *_shadow_##name(void)                                      \         { static type _hide_##name=value; return&_hide_##name; }
define|#
directive|define
name|OPENSSL_DECLARE_GLOBAL
parameter_list|(
name|type
parameter_list|,
name|name
parameter_list|)
value|type *_shadow_##name(void)
define|#
directive|define
name|OPENSSL_GLOBAL_REF
parameter_list|(
name|name
parameter_list|)
value|(*(_shadow_##name()))
else|#
directive|else
define|#
directive|define
name|OPENSSL_IMPLEMENT_GLOBAL
parameter_list|(
name|type
parameter_list|,
name|name
parameter_list|,
name|value
parameter_list|)
value|OPENSSL_GLOBAL type _shadow_##name=value;
define|#
directive|define
name|OPENSSL_DECLARE_GLOBAL
parameter_list|(
name|type
parameter_list|,
name|name
parameter_list|)
value|OPENSSL_EXPORT type _shadow_##name
define|#
directive|define
name|OPENSSL_GLOBAL_REF
parameter_list|(
name|name
parameter_list|)
value|_shadow_##name
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|OPENSSL_SYS_MACINTOSH_CLASSIC
argument_list|)
operator|&&
name|macintosh
operator|==
literal|1
operator|&&
operator|!
name|defined
argument_list|(
name|MAC_OS_GUSI_SOURCE
argument_list|)
define|#
directive|define
name|ossl_ssize_t
value|long
endif|#
directive|endif
ifdef|#
directive|ifdef
name|OPENSSL_SYS_MSDOS
define|#
directive|define
name|ossl_ssize_t
value|long
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|NeXT
argument_list|)
operator|||
name|defined
argument_list|(
name|OPENSSL_SYS_NEWS4
argument_list|)
operator|||
name|defined
argument_list|(
name|OPENSSL_SYS_SUNOS
argument_list|)
define|#
directive|define
name|ssize_t
value|int
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__ultrix
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|ssize_t
argument_list|)
define|#
directive|define
name|ossl_ssize_t
value|int
endif|#
directive|endif
ifndef|#
directive|ifndef
name|ossl_ssize_t
define|#
directive|define
name|ossl_ssize_t
value|ssize_t
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

