begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_comment
comment|/* libunwind - a platform-independent unwind library    Copyright (C) 2003 Hewlett-Packard Co 	Contributed by David Mosberger-Tang<davidm@hpl.hp.com>  This file is part of libunwind.  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_UNWIND_H
end_ifndef

begin_define
define|#
directive|define
name|_UNWIND_H
end_define

begin_include
include|#
directive|include
file|<sys/_types.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* Minimal interface as per C++ ABI draft standard:  	http://www.codesourcery.com/cxx-abi/abi-eh.html */
typedef|typedef
enum|enum
block|{
name|_URC_NO_REASON
init|=
literal|0
block|,
name|_URC_FOREIGN_EXCEPTION_CAUGHT
init|=
literal|1
block|,
name|_URC_FATAL_PHASE2_ERROR
init|=
literal|2
block|,
name|_URC_FATAL_PHASE1_ERROR
init|=
literal|3
block|,
name|_URC_NORMAL_STOP
init|=
literal|4
block|,
name|_URC_END_OF_STACK
init|=
literal|5
block|,
name|_URC_HANDLER_FOUND
init|=
literal|6
block|,
name|_URC_INSTALL_CONTEXT
init|=
literal|7
block|,
name|_URC_CONTINUE_UNWIND
init|=
literal|8
block|}
name|_Unwind_Reason_Code
typedef|;
typedef|typedef
name|int
name|_Unwind_Action
typedef|;
define|#
directive|define
name|_UA_SEARCH_PHASE
value|1
define|#
directive|define
name|_UA_CLEANUP_PHASE
value|2
define|#
directive|define
name|_UA_HANDLER_FRAME
value|4
define|#
directive|define
name|_UA_FORCE_UNWIND
value|8
struct_decl|struct
name|_Unwind_Context
struct_decl|;
comment|/* opaque data-structure */
struct_decl|struct
name|_Unwind_Exception
struct_decl|;
comment|/* forward-declaration */
typedef|typedef
name|void
function_decl|(
modifier|*
name|_Unwind_Exception_Cleanup_Fn
function_decl|)
parameter_list|(
name|_Unwind_Reason_Code
parameter_list|,
name|struct
name|_Unwind_Exception
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|_Unwind_Reason_Code
function_decl|(
modifier|*
name|_Unwind_Stop_Fn
function_decl|)
parameter_list|(
name|int
parameter_list|,
name|_Unwind_Action
parameter_list|,
name|unsigned
name|long
parameter_list|,
name|struct
name|_Unwind_Exception
modifier|*
parameter_list|,
name|struct
name|_Unwind_Context
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/* The C++ ABI requires exception_class, private_1, and private_2 to    be of type uint64 and the entire structure to be    double-word-aligned, but that seems a bit overly IA-64-specific.    Using "unsigned long" instead should give us the desired effect on    IA-64, while being more general.  */
struct|struct
name|_Unwind_Exception
block|{
name|__int64_t
name|exception_class
decl_stmt|;
name|_Unwind_Exception_Cleanup_Fn
name|exception_cleanup
decl_stmt|;
name|unsigned
name|long
name|private_1
decl_stmt|;
name|unsigned
name|long
name|private_2
decl_stmt|;
block|}
struct|;
specifier|extern
name|_Unwind_Reason_Code
name|_Unwind_RaiseException
parameter_list|(
name|struct
name|_Unwind_Exception
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|_Unwind_Reason_Code
name|_Unwind_ForcedUnwind
parameter_list|(
name|struct
name|_Unwind_Exception
modifier|*
parameter_list|,
name|_Unwind_Stop_Fn
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|_Unwind_Resume
parameter_list|(
name|struct
name|_Unwind_Exception
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|_Unwind_DeleteException
parameter_list|(
name|struct
name|_Unwind_Exception
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|unsigned
name|long
name|_Unwind_GetGR
parameter_list|(
name|struct
name|_Unwind_Context
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|void
name|_Unwind_SetGR
parameter_list|(
name|struct
name|_Unwind_Context
modifier|*
parameter_list|,
name|int
parameter_list|,
name|unsigned
name|long
parameter_list|)
function_decl|;
specifier|extern
name|unsigned
name|long
name|_Unwind_GetIP
parameter_list|(
name|struct
name|_Unwind_Context
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|unsigned
name|long
name|_Unwind_GetIPInfo
parameter_list|(
name|struct
name|_Unwind_Context
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|_Unwind_SetIP
parameter_list|(
name|struct
name|_Unwind_Context
modifier|*
parameter_list|,
name|unsigned
name|long
parameter_list|)
function_decl|;
specifier|extern
name|unsigned
name|long
name|_Unwind_GetLanguageSpecificData
parameter_list|(
name|struct
name|_Unwind_Context
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|unsigned
name|long
name|_Unwind_GetRegionStart
parameter_list|(
name|struct
name|_Unwind_Context
modifier|*
parameter_list|)
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|_GNU_SOURCE
argument_list|)
operator|||
name|defined
argument_list|(
name|_BSD_SOURCE
argument_list|)
comment|/* Callback for _Unwind_Backtrace().  The backtrace stops immediately    if the callback returns any value other than _URC_NO_REASON. */
typedef|typedef
name|_Unwind_Reason_Code
function_decl|(
modifier|*
name|_Unwind_Trace_Fn
function_decl|)
parameter_list|(
name|struct
name|_Unwind_Context
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/* See http://gcc.gnu.org/ml/gcc-patches/2001-09/msg00082.html for why    _UA_END_OF_STACK exists.  */
define|#
directive|define
name|_UA_END_OF_STACK
value|16
comment|/* If the unwind was initiated due to a forced unwind, resume that    operation, else re-raise the exception.  This is used by    __cxa_rethrow().  */
specifier|extern
name|_Unwind_Reason_Code
name|_Unwind_Resume_or_Rethrow
parameter_list|(
name|struct
name|_Unwind_Exception
modifier|*
parameter_list|)
function_decl|;
comment|/* See http://gcc.gnu.org/ml/gcc-patches/2003-09/msg00154.html for why    _Unwind_GetBSP() exists.  */
specifier|extern
name|unsigned
name|long
name|_Unwind_GetBSP
parameter_list|(
name|struct
name|_Unwind_Context
modifier|*
parameter_list|)
function_decl|;
comment|/* Return the "canonical frame address" for the given context.    This is used by NPTL... */
specifier|extern
name|unsigned
name|long
name|_Unwind_GetCFA
parameter_list|(
name|struct
name|_Unwind_Context
modifier|*
parameter_list|)
function_decl|;
comment|/* Return the base-address for data references.  */
specifier|extern
name|unsigned
name|long
name|_Unwind_GetDataRelBase
parameter_list|(
name|struct
name|_Unwind_Context
modifier|*
parameter_list|)
function_decl|;
comment|/* Return the base-address for text references.  */
specifier|extern
name|unsigned
name|long
name|_Unwind_GetTextRelBase
parameter_list|(
name|struct
name|_Unwind_Context
modifier|*
parameter_list|)
function_decl|;
comment|/* Call _Unwind_Trace_Fn once for each stack-frame, without doing any    cleanup.  The first frame for which the callback is invoked is the    one for the caller of _Unwind_Backtrace().  _Unwind_Backtrace()    returns _URC_END_OF_STACK when the backtrace stopped due to    reaching the end of the call-chain or _URC_FATAL_PHASE1_ERROR if it    stops for any other reason.  */
specifier|extern
name|_Unwind_Reason_Code
name|_Unwind_Backtrace
parameter_list|(
name|_Unwind_Trace_Fn
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/* Find the start-address of the procedure containing the specified IP    or NULL if it cannot be found (e.g., because the function has no    unwind info).  Note: there is not necessarily a one-to-one    correspondence between source-level functions and procedures: some    functions don't have unwind-info and others are split into multiple    procedures.  */
specifier|extern
name|void
modifier|*
name|_Unwind_FindEnclosingFunction
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/* See also Linux Standard Base Spec:     http://www.linuxbase.org/spec/refspecs/LSB_1.3.0/gLSB/gLSB/libgcc-s.html */
endif|#
directive|endif
comment|/* _GNU_SOURCE || _BSD_SOURCE */
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _UNWIND_H */
end_comment

end_unit

