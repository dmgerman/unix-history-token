begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2011-2015 Samy Al Bahra.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CK_RWLOCK_H
end_ifndef

begin_define
define|#
directive|define
name|CK_RWLOCK_H
end_define

begin_include
include|#
directive|include
file|<ck_elide.h>
end_include

begin_include
include|#
directive|include
file|<ck_pr.h>
end_include

begin_include
include|#
directive|include
file|<ck_stdbool.h>
end_include

begin_include
include|#
directive|include
file|<ck_stddef.h>
end_include

begin_struct
struct|struct
name|ck_rwlock
block|{
name|unsigned
name|int
name|writer
decl_stmt|;
name|unsigned
name|int
name|n_readers
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|ck_rwlock
name|ck_rwlock_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CK_RWLOCK_INITIALIZER
value|{0, 0}
end_define

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_rwlock_init
parameter_list|(
name|struct
name|ck_rwlock
modifier|*
name|rw
parameter_list|)
block|{
name|rw
operator|->
name|writer
operator|=
literal|0
expr_stmt|;
name|rw
operator|->
name|n_readers
operator|=
literal|0
expr_stmt|;
name|ck_pr_barrier
argument_list|()
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_rwlock_write_unlock
parameter_list|(
name|ck_rwlock_t
modifier|*
name|rw
parameter_list|)
block|{
name|ck_pr_fence_unlock
argument_list|()
expr_stmt|;
name|ck_pr_store_uint
argument_list|(
operator|&
name|rw
operator|->
name|writer
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_rwlock_locked_writer
parameter_list|(
name|ck_rwlock_t
modifier|*
name|rw
parameter_list|)
block|{
name|bool
name|r
decl_stmt|;
name|r
operator|=
name|ck_pr_load_uint
argument_list|(
operator|&
name|rw
operator|->
name|writer
argument_list|)
expr_stmt|;
name|ck_pr_fence_acquire
argument_list|()
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_rwlock_write_downgrade
parameter_list|(
name|ck_rwlock_t
modifier|*
name|rw
parameter_list|)
block|{
name|ck_pr_inc_uint
argument_list|(
operator|&
name|rw
operator|->
name|n_readers
argument_list|)
expr_stmt|;
name|ck_rwlock_write_unlock
argument_list|(
name|rw
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_rwlock_locked
parameter_list|(
name|ck_rwlock_t
modifier|*
name|rw
parameter_list|)
block|{
name|bool
name|l
decl_stmt|;
name|l
operator|=
name|ck_pr_load_uint
argument_list|(
operator|&
name|rw
operator|->
name|n_readers
argument_list|)
operator||
name|ck_pr_load_uint
argument_list|(
operator|&
name|rw
operator|->
name|writer
argument_list|)
expr_stmt|;
name|ck_pr_fence_acquire
argument_list|()
expr_stmt|;
return|return
name|l
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_rwlock_write_trylock
parameter_list|(
name|ck_rwlock_t
modifier|*
name|rw
parameter_list|)
block|{
if|if
condition|(
name|ck_pr_fas_uint
argument_list|(
operator|&
name|rw
operator|->
name|writer
argument_list|,
literal|1
argument_list|)
operator|!=
literal|0
condition|)
return|return
name|false
return|;
name|ck_pr_fence_atomic_load
argument_list|()
expr_stmt|;
if|if
condition|(
name|ck_pr_load_uint
argument_list|(
operator|&
name|rw
operator|->
name|n_readers
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|ck_rwlock_write_unlock
argument_list|(
name|rw
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
name|ck_pr_fence_lock
argument_list|()
expr_stmt|;
return|return
name|true
return|;
block|}
end_function

begin_macro
name|CK_ELIDE_TRYLOCK_PROTOTYPE
argument_list|(
argument|ck_rwlock_write
argument_list|,
argument|ck_rwlock_t
argument_list|,
argument|ck_rwlock_locked
argument_list|,
argument|ck_rwlock_write_trylock
argument_list|)
end_macro

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_rwlock_write_lock
parameter_list|(
name|ck_rwlock_t
modifier|*
name|rw
parameter_list|)
block|{
while|while
condition|(
name|ck_pr_fas_uint
argument_list|(
operator|&
name|rw
operator|->
name|writer
argument_list|,
literal|1
argument_list|)
operator|!=
literal|0
condition|)
name|ck_pr_stall
argument_list|()
expr_stmt|;
name|ck_pr_fence_atomic_load
argument_list|()
expr_stmt|;
while|while
condition|(
name|ck_pr_load_uint
argument_list|(
operator|&
name|rw
operator|->
name|n_readers
argument_list|)
operator|!=
literal|0
condition|)
name|ck_pr_stall
argument_list|()
expr_stmt|;
name|ck_pr_fence_lock
argument_list|()
expr_stmt|;
return|return;
block|}
end_function

begin_macro
name|CK_ELIDE_PROTOTYPE
argument_list|(
argument|ck_rwlock_write
argument_list|,
argument|ck_rwlock_t
argument_list|,
argument|ck_rwlock_locked
argument_list|,
argument|ck_rwlock_write_lock
argument_list|,
argument|ck_rwlock_locked_writer
argument_list|,
argument|ck_rwlock_write_unlock
argument_list|)
end_macro

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_rwlock_read_trylock
parameter_list|(
name|ck_rwlock_t
modifier|*
name|rw
parameter_list|)
block|{
if|if
condition|(
name|ck_pr_load_uint
argument_list|(
operator|&
name|rw
operator|->
name|writer
argument_list|)
operator|!=
literal|0
condition|)
return|return
name|false
return|;
name|ck_pr_inc_uint
argument_list|(
operator|&
name|rw
operator|->
name|n_readers
argument_list|)
expr_stmt|;
comment|/* 	 * Serialize with respect to concurrent write 	 * lock operation. 	 */
name|ck_pr_fence_atomic_load
argument_list|()
expr_stmt|;
if|if
condition|(
name|ck_pr_load_uint
argument_list|(
operator|&
name|rw
operator|->
name|writer
argument_list|)
operator|==
literal|0
condition|)
block|{
name|ck_pr_fence_lock
argument_list|()
expr_stmt|;
return|return
name|true
return|;
block|}
name|ck_pr_dec_uint
argument_list|(
operator|&
name|rw
operator|->
name|n_readers
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
end_function

begin_macro
name|CK_ELIDE_TRYLOCK_PROTOTYPE
argument_list|(
argument|ck_rwlock_read
argument_list|,
argument|ck_rwlock_t
argument_list|,
argument|ck_rwlock_locked_writer
argument_list|,
argument|ck_rwlock_read_trylock
argument_list|)
end_macro

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_rwlock_read_lock
parameter_list|(
name|ck_rwlock_t
modifier|*
name|rw
parameter_list|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
while|while
condition|(
name|ck_pr_load_uint
argument_list|(
operator|&
name|rw
operator|->
name|writer
argument_list|)
operator|!=
literal|0
condition|)
name|ck_pr_stall
argument_list|()
expr_stmt|;
name|ck_pr_inc_uint
argument_list|(
operator|&
name|rw
operator|->
name|n_readers
argument_list|)
expr_stmt|;
comment|/* 		 * Serialize with respect to concurrent write 		 * lock operation. 		 */
name|ck_pr_fence_atomic_load
argument_list|()
expr_stmt|;
if|if
condition|(
name|ck_pr_load_uint
argument_list|(
operator|&
name|rw
operator|->
name|writer
argument_list|)
operator|==
literal|0
condition|)
break|break;
name|ck_pr_dec_uint
argument_list|(
operator|&
name|rw
operator|->
name|n_readers
argument_list|)
expr_stmt|;
block|}
comment|/* Acquire semantics are necessary. */
name|ck_pr_fence_load
argument_list|()
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_rwlock_locked_reader
parameter_list|(
name|ck_rwlock_t
modifier|*
name|rw
parameter_list|)
block|{
name|ck_pr_fence_load
argument_list|()
expr_stmt|;
return|return
name|ck_pr_load_uint
argument_list|(
operator|&
name|rw
operator|->
name|n_readers
argument_list|)
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_rwlock_read_unlock
parameter_list|(
name|ck_rwlock_t
modifier|*
name|rw
parameter_list|)
block|{
name|ck_pr_fence_load_atomic
argument_list|()
expr_stmt|;
name|ck_pr_dec_uint
argument_list|(
operator|&
name|rw
operator|->
name|n_readers
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_macro
name|CK_ELIDE_PROTOTYPE
argument_list|(
argument|ck_rwlock_read
argument_list|,
argument|ck_rwlock_t
argument_list|,
argument|ck_rwlock_locked_writer
argument_list|,
argument|ck_rwlock_read_lock
argument_list|,
argument|ck_rwlock_locked_reader
argument_list|,
argument|ck_rwlock_read_unlock
argument_list|)
end_macro

begin_comment
comment|/*  * Recursive writer reader-writer lock implementation.  */
end_comment

begin_struct
struct|struct
name|ck_rwlock_recursive
block|{
name|struct
name|ck_rwlock
name|rw
decl_stmt|;
name|unsigned
name|int
name|wc
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|ck_rwlock_recursive
name|ck_rwlock_recursive_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CK_RWLOCK_RECURSIVE_INITIALIZER
value|{CK_RWLOCK_INITIALIZER, 0}
end_define

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_rwlock_recursive_write_lock
parameter_list|(
name|ck_rwlock_recursive_t
modifier|*
name|rw
parameter_list|,
name|unsigned
name|int
name|tid
parameter_list|)
block|{
name|unsigned
name|int
name|o
decl_stmt|;
name|o
operator|=
name|ck_pr_load_uint
argument_list|(
operator|&
name|rw
operator|->
name|rw
operator|.
name|writer
argument_list|)
expr_stmt|;
if|if
condition|(
name|o
operator|==
name|tid
condition|)
goto|goto
name|leave
goto|;
while|while
condition|(
name|ck_pr_cas_uint
argument_list|(
operator|&
name|rw
operator|->
name|rw
operator|.
name|writer
argument_list|,
literal|0
argument_list|,
name|tid
argument_list|)
operator|==
name|false
condition|)
name|ck_pr_stall
argument_list|()
expr_stmt|;
name|ck_pr_fence_atomic_load
argument_list|()
expr_stmt|;
while|while
condition|(
name|ck_pr_load_uint
argument_list|(
operator|&
name|rw
operator|->
name|rw
operator|.
name|n_readers
argument_list|)
operator|!=
literal|0
condition|)
name|ck_pr_stall
argument_list|()
expr_stmt|;
name|ck_pr_fence_lock
argument_list|()
expr_stmt|;
name|leave
label|:
name|rw
operator|->
name|wc
operator|++
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_rwlock_recursive_write_trylock
parameter_list|(
name|ck_rwlock_recursive_t
modifier|*
name|rw
parameter_list|,
name|unsigned
name|int
name|tid
parameter_list|)
block|{
name|unsigned
name|int
name|o
decl_stmt|;
name|o
operator|=
name|ck_pr_load_uint
argument_list|(
operator|&
name|rw
operator|->
name|rw
operator|.
name|writer
argument_list|)
expr_stmt|;
if|if
condition|(
name|o
operator|==
name|tid
condition|)
goto|goto
name|leave
goto|;
if|if
condition|(
name|ck_pr_cas_uint
argument_list|(
operator|&
name|rw
operator|->
name|rw
operator|.
name|writer
argument_list|,
literal|0
argument_list|,
name|tid
argument_list|)
operator|==
name|false
condition|)
return|return
name|false
return|;
name|ck_pr_fence_atomic_load
argument_list|()
expr_stmt|;
if|if
condition|(
name|ck_pr_load_uint
argument_list|(
operator|&
name|rw
operator|->
name|rw
operator|.
name|n_readers
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|ck_pr_store_uint
argument_list|(
operator|&
name|rw
operator|->
name|rw
operator|.
name|writer
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
name|ck_pr_fence_lock
argument_list|()
expr_stmt|;
name|leave
label|:
name|rw
operator|->
name|wc
operator|++
expr_stmt|;
return|return
name|true
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_rwlock_recursive_write_unlock
parameter_list|(
name|ck_rwlock_recursive_t
modifier|*
name|rw
parameter_list|)
block|{
if|if
condition|(
operator|--
name|rw
operator|->
name|wc
operator|==
literal|0
condition|)
block|{
name|ck_pr_fence_unlock
argument_list|()
expr_stmt|;
name|ck_pr_store_uint
argument_list|(
operator|&
name|rw
operator|->
name|rw
operator|.
name|writer
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_rwlock_recursive_read_lock
parameter_list|(
name|ck_rwlock_recursive_t
modifier|*
name|rw
parameter_list|)
block|{
name|ck_rwlock_read_lock
argument_list|(
operator|&
name|rw
operator|->
name|rw
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_rwlock_recursive_read_trylock
parameter_list|(
name|ck_rwlock_recursive_t
modifier|*
name|rw
parameter_list|)
block|{
return|return
name|ck_rwlock_read_trylock
argument_list|(
operator|&
name|rw
operator|->
name|rw
argument_list|)
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_rwlock_recursive_read_unlock
parameter_list|(
name|ck_rwlock_recursive_t
modifier|*
name|rw
parameter_list|)
block|{
name|ck_rwlock_read_unlock
argument_list|(
operator|&
name|rw
operator|->
name|rw
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CK_RWLOCK_H */
end_comment

end_unit

