begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010-2015 Samy Al Bahra.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CK_SPINLOCK_MCS_H
end_ifndef

begin_define
define|#
directive|define
name|CK_SPINLOCK_MCS_H
end_define

begin_include
include|#
directive|include
file|<ck_cc.h>
end_include

begin_include
include|#
directive|include
file|<ck_pr.h>
end_include

begin_include
include|#
directive|include
file|<ck_stdbool.h>
end_include

begin_include
include|#
directive|include
file|<ck_stddef.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|CK_F_SPINLOCK_MCS
end_ifndef

begin_define
define|#
directive|define
name|CK_F_SPINLOCK_MCS
end_define

begin_struct
struct|struct
name|ck_spinlock_mcs
block|{
name|unsigned
name|int
name|locked
decl_stmt|;
name|struct
name|ck_spinlock_mcs
modifier|*
name|next
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|ck_spinlock_mcs
modifier|*
name|ck_spinlock_mcs_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|ck_spinlock_mcs
name|ck_spinlock_mcs_context_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CK_SPINLOCK_MCS_INITIALIZER
value|(NULL)
end_define

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_spinlock_mcs_init
parameter_list|(
name|struct
name|ck_spinlock_mcs
modifier|*
modifier|*
name|queue
parameter_list|)
block|{
operator|*
name|queue
operator|=
name|NULL
expr_stmt|;
name|ck_pr_barrier
argument_list|()
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_spinlock_mcs_trylock
parameter_list|(
name|struct
name|ck_spinlock_mcs
modifier|*
modifier|*
name|queue
parameter_list|,
name|struct
name|ck_spinlock_mcs
modifier|*
name|node
parameter_list|)
block|{
name|bool
name|r
decl_stmt|;
name|node
operator|->
name|locked
operator|=
name|true
expr_stmt|;
name|node
operator|->
name|next
operator|=
name|NULL
expr_stmt|;
name|ck_pr_fence_store_atomic
argument_list|()
expr_stmt|;
name|r
operator|=
name|ck_pr_cas_ptr
argument_list|(
name|queue
argument_list|,
name|NULL
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|ck_pr_fence_lock
argument_list|()
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_spinlock_mcs_locked
parameter_list|(
name|struct
name|ck_spinlock_mcs
modifier|*
modifier|*
name|queue
parameter_list|)
block|{
name|bool
name|r
decl_stmt|;
name|r
operator|=
name|ck_pr_load_ptr
argument_list|(
name|queue
argument_list|)
operator|!=
name|NULL
expr_stmt|;
name|ck_pr_fence_acquire
argument_list|()
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_spinlock_mcs_lock
parameter_list|(
name|struct
name|ck_spinlock_mcs
modifier|*
modifier|*
name|queue
parameter_list|,
name|struct
name|ck_spinlock_mcs
modifier|*
name|node
parameter_list|)
block|{
name|struct
name|ck_spinlock_mcs
modifier|*
name|previous
decl_stmt|;
comment|/* 	 * In the case that there is a successor, let them know they must 	 * wait for us to unlock. 	 */
name|node
operator|->
name|locked
operator|=
name|true
expr_stmt|;
name|node
operator|->
name|next
operator|=
name|NULL
expr_stmt|;
name|ck_pr_fence_store_atomic
argument_list|()
expr_stmt|;
comment|/* 	 * Swap current tail with current lock request. If the swap operation 	 * returns NULL, it means the queue was empty. If the queue was empty, 	 * then the operation is complete. 	 */
name|previous
operator|=
name|ck_pr_fas_ptr
argument_list|(
name|queue
argument_list|,
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
name|previous
operator|!=
name|NULL
condition|)
block|{
comment|/* 		 * Let the previous lock holder know that we are waiting on 		 * them. 		 */
name|ck_pr_store_ptr
argument_list|(
operator|&
name|previous
operator|->
name|next
argument_list|,
name|node
argument_list|)
expr_stmt|;
while|while
condition|(
name|ck_pr_load_uint
argument_list|(
operator|&
name|node
operator|->
name|locked
argument_list|)
operator|==
name|true
condition|)
name|ck_pr_stall
argument_list|()
expr_stmt|;
block|}
name|ck_pr_fence_lock
argument_list|()
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_spinlock_mcs_unlock
parameter_list|(
name|struct
name|ck_spinlock_mcs
modifier|*
modifier|*
name|queue
parameter_list|,
name|struct
name|ck_spinlock_mcs
modifier|*
name|node
parameter_list|)
block|{
name|struct
name|ck_spinlock_mcs
modifier|*
name|next
decl_stmt|;
name|ck_pr_fence_unlock
argument_list|()
expr_stmt|;
name|next
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|node
operator|->
name|next
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
operator|==
name|NULL
condition|)
block|{
comment|/* 		 * If there is no request following us then it is a possibilty 		 * that we are the current tail. In this case, we may just 		 * mark the spinlock queue as empty. 		 */
if|if
condition|(
name|ck_pr_load_ptr
argument_list|(
name|queue
argument_list|)
operator|==
name|node
operator|&&
name|ck_pr_cas_ptr
argument_list|(
name|queue
argument_list|,
name|node
argument_list|,
name|NULL
argument_list|)
operator|==
name|true
condition|)
block|{
return|return;
block|}
comment|/* 		 * If the node is not the current tail then a lock operation 		 * is in-progress. In this case, busy-wait until the queue is 		 * in a consistent state to wake up the incoming lock 		 * request. 		 */
for|for
control|(
init|;
condition|;
control|)
block|{
name|next
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|node
operator|->
name|next
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
operator|!=
name|NULL
condition|)
break|break;
name|ck_pr_stall
argument_list|()
expr_stmt|;
block|}
block|}
comment|/* Allow the next lock operation to complete. */
name|ck_pr_store_uint
argument_list|(
operator|&
name|next
operator|->
name|locked
argument_list|,
name|false
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CK_F_SPINLOCK_MCS */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CK_SPINLOCK_MCS_H */
end_comment

end_unit

