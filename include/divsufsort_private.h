begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * divsufsort_private.h for libdivsufsort  * Copyright (c) 2003-2008 Yuta Mori All Rights Reserved.  *  * Permission is hereby granted, free of charge, to any person  * obtaining a copy of this software and associated documentation  * files (the "Software"), to deal in the Software without  * restriction, including without limitation the rights to use,  * copy, modify, merge, publish, distribute, sublicense, and/or sell  * copies of the Software, and to permit persons to whom the  * Software is furnished to do so, subject to the following  * conditions:  *  * The above copyright notice and this permission notice shall be  * included in all copies or substantial portions of the Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES  * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT  * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,  * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR  * OTHER DEALINGS IN THE SOFTWARE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_DIVSUFSORT_PRIVATE_H
end_ifndef

begin_define
define|#
directive|define
name|_DIVSUFSORT_PRIVATE_H
value|1
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* __cplusplus */
if|#
directive|if
name|HAVE_CONFIG_H
include|#
directive|include
file|"config.h"
endif|#
directive|endif
include|#
directive|include
file|<assert.h>
include|#
directive|include
file|<stdio.h>
if|#
directive|if
name|HAVE_STRING_H
include|#
directive|include
file|<string.h>
endif|#
directive|endif
if|#
directive|if
name|HAVE_STDLIB_H
include|#
directive|include
file|<stdlib.h>
endif|#
directive|endif
if|#
directive|if
name|HAVE_MEMORY_H
include|#
directive|include
file|<memory.h>
endif|#
directive|endif
if|#
directive|if
name|HAVE_STDDEF_H
include|#
directive|include
file|<stddef.h>
endif|#
directive|endif
if|#
directive|if
name|HAVE_STRINGS_H
include|#
directive|include
file|<strings.h>
endif|#
directive|endif
if|#
directive|if
name|HAVE_INTTYPES_H
include|#
directive|include
file|<inttypes.h>
else|#
directive|else
if|#
directive|if
name|HAVE_STDINT_H
include|#
directive|include
file|<stdint.h>
endif|#
directive|endif
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|BUILD_DIVSUFSORT64
argument_list|)
include|#
directive|include
file|"divsufsort64.h"
ifndef|#
directive|ifndef
name|SAIDX_T
define|#
directive|define
name|SAIDX_T
define|#
directive|define
name|saidx_t
value|saidx64_t
endif|#
directive|endif
comment|/* SAIDX_T */
ifndef|#
directive|ifndef
name|PRIdSAIDX_T
define|#
directive|define
name|PRIdSAIDX_T
value|PRIdSAIDX64_T
endif|#
directive|endif
comment|/* PRIdSAIDX_T */
define|#
directive|define
name|divsufsort
value|divsufsort64
define|#
directive|define
name|divbwt
value|divbwt64
define|#
directive|define
name|divsufsort_version
value|divsufsort64_version
define|#
directive|define
name|bw_transform
value|bw_transform64
define|#
directive|define
name|inverse_bw_transform
value|inverse_bw_transform64
define|#
directive|define
name|sufcheck
value|sufcheck64
define|#
directive|define
name|sa_search
value|sa_search64
define|#
directive|define
name|sa_simplesearch
value|sa_simplesearch64
define|#
directive|define
name|sssort
value|sssort64
define|#
directive|define
name|trsort
value|trsort64
else|#
directive|else
include|#
directive|include
file|"divsufsort.h"
endif|#
directive|endif
comment|/*- Constants -*/
if|#
directive|if
operator|!
name|defined
argument_list|(
name|UINT8_MAX
argument_list|)
define|#
directive|define
name|UINT8_MAX
value|(255)
endif|#
directive|endif
comment|/* UINT8_MAX */
if|#
directive|if
name|defined
argument_list|(
name|ALPHABET_SIZE
argument_list|)
operator|&&
operator|(
name|ALPHABET_SIZE
operator|<
literal|1
operator|)
undef|#
directive|undef
name|ALPHABET_SIZE
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|ALPHABET_SIZE
argument_list|)
define|#
directive|define
name|ALPHABET_SIZE
value|(UINT8_MAX + 1)
endif|#
directive|endif
comment|/* for divsufsort.c */
define|#
directive|define
name|BUCKET_A_SIZE
value|(ALPHABET_SIZE)
define|#
directive|define
name|BUCKET_B_SIZE
value|(ALPHABET_SIZE * ALPHABET_SIZE)
comment|/* for sssort.c */
if|#
directive|if
name|defined
argument_list|(
name|SS_INSERTIONSORT_THRESHOLD
argument_list|)
if|#
directive|if
name|SS_INSERTIONSORT_THRESHOLD
operator|<
literal|1
undef|#
directive|undef
name|SS_INSERTIONSORT_THRESHOLD
define|#
directive|define
name|SS_INSERTIONSORT_THRESHOLD
value|(1)
endif|#
directive|endif
else|#
directive|else
define|#
directive|define
name|SS_INSERTIONSORT_THRESHOLD
value|(8)
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|SS_BLOCKSIZE
argument_list|)
if|#
directive|if
name|SS_BLOCKSIZE
operator|<
literal|0
undef|#
directive|undef
name|SS_BLOCKSIZE
define|#
directive|define
name|SS_BLOCKSIZE
value|(0)
elif|#
directive|elif
literal|32768
operator|<=
name|SS_BLOCKSIZE
undef|#
directive|undef
name|SS_BLOCKSIZE
define|#
directive|define
name|SS_BLOCKSIZE
value|(32767)
endif|#
directive|endif
else|#
directive|else
define|#
directive|define
name|SS_BLOCKSIZE
value|(1024)
endif|#
directive|endif
comment|/* minstacksize = log(SS_BLOCKSIZE) / log(3) * 2 */
if|#
directive|if
name|SS_BLOCKSIZE
operator|==
literal|0
if|#
directive|if
name|defined
argument_list|(
name|BUILD_DIVSUFSORT64
argument_list|)
define|#
directive|define
name|SS_MISORT_STACKSIZE
value|(96)
else|#
directive|else
define|#
directive|define
name|SS_MISORT_STACKSIZE
value|(64)
endif|#
directive|endif
elif|#
directive|elif
name|SS_BLOCKSIZE
operator|<=
literal|4096
define|#
directive|define
name|SS_MISORT_STACKSIZE
value|(16)
else|#
directive|else
define|#
directive|define
name|SS_MISORT_STACKSIZE
value|(24)
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|BUILD_DIVSUFSORT64
argument_list|)
define|#
directive|define
name|SS_SMERGE_STACKSIZE
value|(64)
else|#
directive|else
define|#
directive|define
name|SS_SMERGE_STACKSIZE
value|(32)
endif|#
directive|endif
comment|/* for trsort.c */
define|#
directive|define
name|TR_INSERTIONSORT_THRESHOLD
value|(8)
if|#
directive|if
name|defined
argument_list|(
name|BUILD_DIVSUFSORT64
argument_list|)
define|#
directive|define
name|TR_STACKSIZE
value|(96)
else|#
directive|else
define|#
directive|define
name|TR_STACKSIZE
value|(64)
endif|#
directive|endif
comment|/*- Macros -*/
ifndef|#
directive|ifndef
name|SWAP
define|#
directive|define
name|SWAP
parameter_list|(
name|_a
parameter_list|,
name|_b
parameter_list|)
value|do { t = (_a); (_a) = (_b); (_b) = t; } while(0)
endif|#
directive|endif
comment|/* SWAP */
ifndef|#
directive|ifndef
name|MIN
define|#
directive|define
name|MIN
parameter_list|(
name|_a
parameter_list|,
name|_b
parameter_list|)
value|(((_a)< (_b)) ? (_a) : (_b))
endif|#
directive|endif
comment|/* MIN */
ifndef|#
directive|ifndef
name|MAX
define|#
directive|define
name|MAX
parameter_list|(
name|_a
parameter_list|,
name|_b
parameter_list|)
value|(((_a)> (_b)) ? (_a) : (_b))
endif|#
directive|endif
comment|/* MAX */
define|#
directive|define
name|STACK_PUSH
parameter_list|(
name|_a
parameter_list|,
name|_b
parameter_list|,
name|_c
parameter_list|,
name|_d
parameter_list|)
define|\
value|do {\     assert(ssize< STACK_SIZE);\     stack[ssize].a = (_a), stack[ssize].b = (_b),\     stack[ssize].c = (_c), stack[ssize++].d = (_d);\   } while(0)
define|#
directive|define
name|STACK_PUSH5
parameter_list|(
name|_a
parameter_list|,
name|_b
parameter_list|,
name|_c
parameter_list|,
name|_d
parameter_list|,
name|_e
parameter_list|)
define|\
value|do {\     assert(ssize< STACK_SIZE);\     stack[ssize].a = (_a), stack[ssize].b = (_b),\     stack[ssize].c = (_c), stack[ssize].d = (_d), stack[ssize++].e = (_e);\   } while(0)
define|#
directive|define
name|STACK_POP
parameter_list|(
name|_a
parameter_list|,
name|_b
parameter_list|,
name|_c
parameter_list|,
name|_d
parameter_list|)
define|\
value|do {\     assert(0<= ssize);\     if(ssize == 0) { return; }\     (_a) = stack[--ssize].a, (_b) = stack[ssize].b,\     (_c) = stack[ssize].c, (_d) = stack[ssize].d;\   } while(0)
define|#
directive|define
name|STACK_POP5
parameter_list|(
name|_a
parameter_list|,
name|_b
parameter_list|,
name|_c
parameter_list|,
name|_d
parameter_list|,
name|_e
parameter_list|)
define|\
value|do {\     assert(0<= ssize);\     if(ssize == 0) { return; }\     (_a) = stack[--ssize].a, (_b) = stack[ssize].b,\     (_c) = stack[ssize].c, (_d) = stack[ssize].d, (_e) = stack[ssize].e;\   } while(0)
comment|/* for divsufsort.c */
define|#
directive|define
name|BUCKET_A
parameter_list|(
name|_c0
parameter_list|)
value|bucket_A[(_c0)]
if|#
directive|if
name|ALPHABET_SIZE
operator|==
literal|256
define|#
directive|define
name|BUCKET_B
parameter_list|(
name|_c0
parameter_list|,
name|_c1
parameter_list|)
value|(bucket_B[((_c1)<< 8) | (_c0)])
define|#
directive|define
name|BUCKET_BSTAR
parameter_list|(
name|_c0
parameter_list|,
name|_c1
parameter_list|)
value|(bucket_B[((_c0)<< 8) | (_c1)])
else|#
directive|else
define|#
directive|define
name|BUCKET_B
parameter_list|(
name|_c0
parameter_list|,
name|_c1
parameter_list|)
value|(bucket_B[(_c1) * ALPHABET_SIZE + (_c0)])
define|#
directive|define
name|BUCKET_BSTAR
parameter_list|(
name|_c0
parameter_list|,
name|_c1
parameter_list|)
value|(bucket_B[(_c0) * ALPHABET_SIZE + (_c1)])
endif|#
directive|endif
comment|/*- Private Prototypes -*/
comment|/* sssort.c */
name|void
name|sssort
parameter_list|(
specifier|const
name|sauchar_t
modifier|*
name|Td
parameter_list|,
specifier|const
name|saidx_t
modifier|*
name|PA
parameter_list|,
name|saidx_t
modifier|*
name|first
parameter_list|,
name|saidx_t
modifier|*
name|last
parameter_list|,
name|saidx_t
modifier|*
name|buf
parameter_list|,
name|saidx_t
name|bufsize
parameter_list|,
name|saidx_t
name|depth
parameter_list|,
name|saidx_t
name|n
parameter_list|,
name|saint_t
name|lastsuffix
parameter_list|)
function_decl|;
comment|/* trsort.c */
name|void
name|trsort
parameter_list|(
name|saidx_t
modifier|*
name|ISA
parameter_list|,
name|saidx_t
modifier|*
name|SA
parameter_list|,
name|saidx_t
name|n
parameter_list|,
name|saidx_t
name|depth
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_comment
comment|/* extern "C" */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _DIVSUFSORT_PRIVATE_H */
end_comment

end_unit

