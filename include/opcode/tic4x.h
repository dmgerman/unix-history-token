begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Table of opcodes for the Texas Instruments TMS320C[34]X family.     Copyright (C) 2002, 2003 Free Software Foundation.       Contributed by Michael P. Hayes (m.hayes@elec.canterbury.ac.nz)        This program is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 2 of the License, or    (at your option) any later version.     This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.     You should have received a copy of the GNU General Public License    along with this program; if not, write to the Free Software    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. */
end_comment

begin_define
define|#
directive|define
name|IS_CPU_TIC3X
parameter_list|(
name|v
parameter_list|)
value|((v) == 30 || (v) == 31 || (v) == 32 || (v) == 33)
end_define

begin_define
define|#
directive|define
name|IS_CPU_TIC4X
parameter_list|(
name|v
parameter_list|)
value|((v) ==  0 || (v) == 40 || (v) == 44)
end_define

begin_comment
comment|/* Define some bitfield extraction/insertion macros.  */
end_comment

begin_define
define|#
directive|define
name|EXTR
parameter_list|(
name|inst
parameter_list|,
name|m
parameter_list|,
name|l
parameter_list|)
value|((inst)<< (31 - (m))>> (31 - ((m) - (l))))
end_define

begin_define
define|#
directive|define
name|EXTRU
parameter_list|(
name|inst
parameter_list|,
name|m
parameter_list|,
name|l
parameter_list|)
value|EXTR ((unsigned long)(inst), (m), (l))
end_define

begin_define
define|#
directive|define
name|EXTRS
parameter_list|(
name|inst
parameter_list|,
name|m
parameter_list|,
name|l
parameter_list|)
value|EXTR ((long)(inst), (m), (l))
end_define

begin_define
define|#
directive|define
name|INSERTU
parameter_list|(
name|inst
parameter_list|,
name|val
parameter_list|,
name|m
parameter_list|,
name|l
parameter_list|)
value|(inst |= ((val)<< (l)))
end_define

begin_define
define|#
directive|define
name|INSERTS
parameter_list|(
name|inst
parameter_list|,
name|val
parameter_list|,
name|m
parameter_list|,
name|l
parameter_list|)
value|INSERTU (inst, ((val)& ((1<< ((m) - (l) + 1)) - 1)), m, l)
end_define

begin_comment
comment|/* Define register numbers.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|REG_R0
block|,
name|REG_R1
block|,
name|REG_R2
block|,
name|REG_R3
block|,
name|REG_R4
block|,
name|REG_R5
block|,
name|REG_R6
block|,
name|REG_R7
block|,
name|REG_AR0
block|,
name|REG_AR1
block|,
name|REG_AR2
block|,
name|REG_AR3
block|,
name|REG_AR4
block|,
name|REG_AR5
block|,
name|REG_AR6
block|,
name|REG_AR7
block|,
name|REG_DP
block|,
name|REG_IR0
block|,
name|REG_IR1
block|,
name|REG_BK
block|,
name|REG_SP
block|,
name|REG_ST
block|,
name|REG_DIE
block|,
name|REG_IIE
block|,
name|REG_IIF
block|,
name|REG_RS
block|,
name|REG_RE
block|,
name|REG_RC
block|,
name|REG_R8
block|,
name|REG_R9
block|,
name|REG_R10
block|,
name|REG_R11
block|,
name|REG_IVTP
block|,
name|REG_TVTP
block|}
name|c4x_reg_t
typedef|;
end_typedef

begin_comment
comment|/* Note that the actual register numbers for IVTP is 0 and TVTP is 1.  */
end_comment

begin_define
define|#
directive|define
name|REG_IE
value|REG_DIE
end_define

begin_comment
comment|/* C3x only */
end_comment

begin_define
define|#
directive|define
name|REG_IF
value|REG_IIE
end_define

begin_comment
comment|/* C3x only */
end_comment

begin_define
define|#
directive|define
name|REG_IOF
value|REG_IIF
end_define

begin_comment
comment|/* C3x only */
end_comment

begin_define
define|#
directive|define
name|TIC3X_REG_MAX
value|REG_RC
end_define

begin_define
define|#
directive|define
name|TIC4X_REG_MAX
value|REG_TVTP
end_define

begin_comment
comment|/* Register table size including C4x expansion regs.  */
end_comment

begin_define
define|#
directive|define
name|REG_TABLE_SIZE
value|(TIC4X_REG_MAX + 1)
end_define

begin_struct
struct|struct
name|tic4x_register
block|{
name|char
modifier|*
name|name
decl_stmt|;
name|unsigned
name|long
name|regno
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|tic4x_register
name|tic4x_register_t
typedef|;
end_typedef

begin_comment
comment|/* We could store register synonyms here.  */
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|tic4x_register_t
name|tic3x_registers
index|[]
init|=
block|{
block|{
literal|"f0"
block|,
name|REG_R0
block|}
block|,
block|{
literal|"r0"
block|,
name|REG_R0
block|}
block|,
block|{
literal|"f1"
block|,
name|REG_R1
block|}
block|,
block|{
literal|"r1"
block|,
name|REG_R1
block|}
block|,
block|{
literal|"f2"
block|,
name|REG_R2
block|}
block|,
block|{
literal|"r2"
block|,
name|REG_R2
block|}
block|,
block|{
literal|"f3"
block|,
name|REG_R3
block|}
block|,
block|{
literal|"r3"
block|,
name|REG_R3
block|}
block|,
block|{
literal|"f4"
block|,
name|REG_R4
block|}
block|,
block|{
literal|"r4"
block|,
name|REG_R4
block|}
block|,
block|{
literal|"f5"
block|,
name|REG_R5
block|}
block|,
block|{
literal|"r5"
block|,
name|REG_R5
block|}
block|,
block|{
literal|"f6"
block|,
name|REG_R6
block|}
block|,
block|{
literal|"r6"
block|,
name|REG_R6
block|}
block|,
block|{
literal|"f7"
block|,
name|REG_R7
block|}
block|,
block|{
literal|"r7"
block|,
name|REG_R7
block|}
block|,
block|{
literal|"ar0"
block|,
name|REG_AR0
block|}
block|,
block|{
literal|"ar1"
block|,
name|REG_AR1
block|}
block|,
block|{
literal|"ar2"
block|,
name|REG_AR2
block|}
block|,
block|{
literal|"ar3"
block|,
name|REG_AR3
block|}
block|,
block|{
literal|"ar4"
block|,
name|REG_AR4
block|}
block|,
block|{
literal|"ar5"
block|,
name|REG_AR5
block|}
block|,
block|{
literal|"ar6"
block|,
name|REG_AR6
block|}
block|,
block|{
literal|"ar7"
block|,
name|REG_AR7
block|}
block|,
block|{
literal|"dp"
block|,
name|REG_DP
block|}
block|,
block|{
literal|"ir0"
block|,
name|REG_IR0
block|}
block|,
block|{
literal|"ir1"
block|,
name|REG_IR1
block|}
block|,
block|{
literal|"bk"
block|,
name|REG_BK
block|}
block|,
block|{
literal|"sp"
block|,
name|REG_SP
block|}
block|,
block|{
literal|"st"
block|,
name|REG_ST
block|}
block|,
block|{
literal|"ie"
block|,
name|REG_IE
block|}
block|,
block|{
literal|"if"
block|,
name|REG_IF
block|}
block|,
block|{
literal|"iof"
block|,
name|REG_IOF
block|}
block|,
block|{
literal|"rs"
block|,
name|REG_RS
block|}
block|,
block|{
literal|"re"
block|,
name|REG_RE
block|}
block|,
block|{
literal|"rc"
block|,
name|REG_RC
block|}
block|,
block|{
literal|""
block|,
literal|0
block|}
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|unsigned
name|int
name|tic3x_num_registers
init|=
operator|(
operator|(
operator|(
sizeof|sizeof
name|tic3x_registers
operator|)
operator|/
operator|(
sizeof|sizeof
name|tic3x_registers
index|[
literal|0
index|]
operator|)
operator|)
operator|-
literal|1
operator|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Define C4x registers in addition to C3x registers.  */
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|tic4x_register_t
name|tic4x_registers
index|[]
init|=
block|{
block|{
literal|"die"
block|,
name|REG_DIE
block|}
block|,
comment|/* Clobbers C3x REG_IE */
block|{
literal|"iie"
block|,
name|REG_IIE
block|}
block|,
comment|/* Clobbers C3x REG_IF */
block|{
literal|"iif"
block|,
name|REG_IIF
block|}
block|,
comment|/* Clobbers C3x REG_IOF */
block|{
literal|"f8"
block|,
name|REG_R8
block|}
block|,
block|{
literal|"r8"
block|,
name|REG_R8
block|}
block|,
block|{
literal|"f9"
block|,
name|REG_R9
block|}
block|,
block|{
literal|"r9"
block|,
name|REG_R9
block|}
block|,
block|{
literal|"f10"
block|,
name|REG_R10
block|}
block|,
block|{
literal|"r10"
block|,
name|REG_R10
block|}
block|,
block|{
literal|"f11"
block|,
name|REG_R11
block|}
block|,
block|{
literal|"r11"
block|,
name|REG_R11
block|}
block|,
block|{
literal|"ivtp"
block|,
name|REG_IVTP
block|}
block|,
block|{
literal|"tvtp"
block|,
name|REG_TVTP
block|}
block|,
block|{
literal|""
block|,
literal|0
block|}
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|unsigned
name|int
name|tic4x_num_registers
init|=
operator|(
operator|(
operator|(
sizeof|sizeof
name|tic4x_registers
operator|)
operator|/
operator|(
sizeof|sizeof
name|tic4x_registers
index|[
literal|0
index|]
operator|)
operator|)
operator|-
literal|1
operator|)
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|tic4x_cond
block|{
name|char
modifier|*
name|name
decl_stmt|;
name|unsigned
name|long
name|cond
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|tic4x_cond
name|tic4x_cond_t
typedef|;
end_typedef

begin_comment
comment|/* Define conditional branch/load suffixes.  Put desired form for    disassembler last.  */
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|tic4x_cond_t
name|tic4x_conds
index|[]
init|=
block|{
block|{
literal|"u"
block|,
literal|0x00
block|}
block|,
block|{
literal|"c"
block|,
literal|0x01
block|}
block|,
block|{
literal|"lo"
block|,
literal|0x01
block|}
block|,
block|{
literal|"ls"
block|,
literal|0x02
block|}
block|,
block|{
literal|"hi"
block|,
literal|0x03
block|}
block|,
block|{
literal|"nc"
block|,
literal|0x04
block|}
block|,
block|{
literal|"hs"
block|,
literal|0x04
block|}
block|,
block|{
literal|"z"
block|,
literal|0x05
block|}
block|,
block|{
literal|"eq"
block|,
literal|0x05
block|}
block|,
block|{
literal|"nz"
block|,
literal|0x06
block|}
block|,
block|{
literal|"ne"
block|,
literal|0x06
block|}
block|,
block|{
literal|"n"
block|,
literal|0x07
block|}
block|,
block|{
literal|"l"
block|,
literal|0x07
block|}
block|,
block|{
literal|"lt"
block|,
literal|0x07
block|}
block|,
block|{
literal|"le"
block|,
literal|0x08
block|}
block|,
block|{
literal|"p"
block|,
literal|0x09
block|}
block|,
block|{
literal|"gt"
block|,
literal|0x09
block|}
block|,
block|{
literal|"nn"
block|,
literal|0x0a
block|}
block|,
block|{
literal|"ge"
block|,
literal|0x0a
block|}
block|,
block|{
literal|"nv"
block|,
literal|0x0c
block|}
block|,
block|{
literal|"v"
block|,
literal|0x0d
block|}
block|,
block|{
literal|"nuf"
block|,
literal|0x0e
block|}
block|,
block|{
literal|"uf"
block|,
literal|0x0f
block|}
block|,
block|{
literal|"nlv"
block|,
literal|0x10
block|}
block|,
block|{
literal|"lv"
block|,
literal|0x11
block|}
block|,
block|{
literal|"nluf"
block|,
literal|0x12
block|}
block|,
block|{
literal|"luf"
block|,
literal|0x13
block|}
block|,
block|{
literal|"zuf"
block|,
literal|0x14
block|}
block|,
comment|/* Dummy entry, not included in num_conds.  This      lets code examine entry i+1 without checking      if we've run off the end of the table.  */
block|{
literal|""
block|,
literal|0x0
block|}
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|unsigned
name|int
name|tic4x_num_conds
init|=
operator|(
operator|(
operator|(
sizeof|sizeof
name|tic4x_conds
operator|)
operator|/
operator|(
sizeof|sizeof
name|tic4x_conds
index|[
literal|0
index|]
operator|)
operator|)
operator|-
literal|1
operator|)
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|tic4x_indirect
block|{
name|char
modifier|*
name|name
decl_stmt|;
name|unsigned
name|long
name|modn
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|tic4x_indirect
name|tic4x_indirect_t
typedef|;
end_typedef

begin_comment
comment|/* Define indirect addressing modes where:    d displacement (signed)    y ir0    z ir1  */
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|tic4x_indirect_t
name|tic4x_indirects
index|[]
init|=
block|{
block|{
literal|"*+a(d)"
block|,
literal|0x00
block|}
block|,
block|{
literal|"*-a(d)"
block|,
literal|0x01
block|}
block|,
block|{
literal|"*++a(d)"
block|,
literal|0x02
block|}
block|,
block|{
literal|"*--a(d)"
block|,
literal|0x03
block|}
block|,
block|{
literal|"*a++(d)"
block|,
literal|0x04
block|}
block|,
block|{
literal|"*a--(d)"
block|,
literal|0x05
block|}
block|,
block|{
literal|"*a++(d)%"
block|,
literal|0x06
block|}
block|,
block|{
literal|"*a--(d)%"
block|,
literal|0x07
block|}
block|,
block|{
literal|"*+a(y)"
block|,
literal|0x08
block|}
block|,
block|{
literal|"*-a(y)"
block|,
literal|0x09
block|}
block|,
block|{
literal|"*++a(y)"
block|,
literal|0x0a
block|}
block|,
block|{
literal|"*--a(y)"
block|,
literal|0x0b
block|}
block|,
block|{
literal|"*a++(y)"
block|,
literal|0x0c
block|}
block|,
block|{
literal|"*a--(y)"
block|,
literal|0x0d
block|}
block|,
block|{
literal|"*a++(y)%"
block|,
literal|0x0e
block|}
block|,
block|{
literal|"*a--(y)%"
block|,
literal|0x0f
block|}
block|,
block|{
literal|"*+a(z)"
block|,
literal|0x10
block|}
block|,
block|{
literal|"*-a(z)"
block|,
literal|0x11
block|}
block|,
block|{
literal|"*++a(z)"
block|,
literal|0x12
block|}
block|,
block|{
literal|"*--a(z)"
block|,
literal|0x13
block|}
block|,
block|{
literal|"*a++(z)"
block|,
literal|0x14
block|}
block|,
block|{
literal|"*a--(z)"
block|,
literal|0x15
block|}
block|,
block|{
literal|"*a++(z)%"
block|,
literal|0x16
block|}
block|,
block|{
literal|"*a--(z)%"
block|,
literal|0x17
block|}
block|,
block|{
literal|"*a"
block|,
literal|0x18
block|}
block|,
block|{
literal|"*a++(y)b"
block|,
literal|0x19
block|}
block|,
comment|/* Dummy entry, not included in num_indirects.  This      lets code examine entry i+1 without checking      if we've run off the end of the table.  */
block|{
literal|""
block|,
literal|0x0
block|}
block|}
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|TIC3X_MODN_MAX
value|0x19
end_define

begin_decl_stmt
specifier|const
name|unsigned
name|int
name|tic4x_num_indirects
init|=
operator|(
operator|(
operator|(
sizeof|sizeof
name|tic4x_indirects
operator|)
operator|/
operator|(
sizeof|sizeof
name|tic4x_indirects
index|[
literal|0
index|]
operator|)
operator|)
operator|-
literal|1
operator|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Instruction template.  */
end_comment

begin_struct
struct|struct
name|tic4x_inst
block|{
name|char
modifier|*
name|name
decl_stmt|;
name|unsigned
name|long
name|opcode
decl_stmt|;
name|unsigned
name|long
name|opmask
decl_stmt|;
name|char
modifier|*
name|args
decl_stmt|;
name|unsigned
name|long
name|oplevel
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|tic4x_inst
name|tic4x_inst_t
typedef|;
end_typedef

begin_comment
comment|/* Opcode infix    B  condition              16--20   U,C,Z,LO,HI, etc.    C  condition              23--27   U,C,Z,LO,HI, etc.     Arguments    ,  required arg follows    ;  optional arg follows     Argument types             bits    [classes] - example    -----------------------------------------------------------    *  indirect (all)          0--15   [A,AB,AU,AF,A2,A3,A6,A7,AY,B,BA,BB,BI,B6,B7] - *+AR0(5), *++AR0(IR0)    #  direct (for LDP)        0--15   [Z] - @start, start    @  direct                  0--15   [A,AB,AU,AF,A3,A6,A7,AY,B,BA,BB,BI,B6,B7] - @start, start    A  address register       22--24   [D] - AR0, AR7    B  unsigned integer        0--23   [I,I2] - @start, start  (absolute on C3x, relative on C4x)    C  indirect (disp - C4x)   0--7    [S,SC,S2,T,TC,T2,T2C] - *+AR0(5)    E  register (all)          0--7    [T,TC,T2,T2C] - R0, R7, R11, AR0, DP    e  register (0-11)         0--7    [S,SC,S2] - R0, R7, R11    F  short float immediate   0--15   [AF,B,BA,BB] - 3.5, 0e-3.5e-1    G  register (all)          8--15   [T,TC,T2,T2C] - R0, R7, R11, AR0, DP    g  register (0-11)         0--7    [S,SC,S2] - R0, R7, R11    H  register (0-7)         18--16   [LS,M,P,Q] - R0, R7    I  indirect (no disp)      0--7    [S,SC,S2,T,TC,T2,T2C] - *+AR0(1), *+AR0(IR0)    i  indirect (enhanced)     0--7    [LL,LS,M,P,Q,QC] - *+AR0(1), R5    J  indirect (no disp)      8--15   [LL,LS,P,Q,QC,S,SC,S2,T,TC,T2,T2C] - *+AR0(1), *+AR0(IR0)    j  indirect (enhanced)     8--15   [M] - *+AR0(1), R5    K  register               19--21   [LL,M,Q,QC] - R0, R7    L  register               22--24   [LL,LS,P,Q,QC] - R0, R7    M  register (R2,R3)       22--22   [M] R2, R3    N  register (R0,R1)       23--23   [M] R0, R1    O  indirect(disp - C4x)    8--15   [S,SC,S2,T,TC,T2] - *+AR0(5)    P  displacement (PC Rel)   0--15   [D,J,JS] - @start, start    Q  register (all)          0--15   [A,AB,AU,A2,A3,AY,BA,BI,D,I2,J,JS] - R0, AR0, DP, SP    q  register (0-11)         0--15   [AF,B,BB] - R0, R7, R11    R  register (all)         16--20   [A,AB,AU,AF,A6,A7,R,T,TC] - R0, AR0, DP, SP    r  register (0-11)        16--20   [B,BA,BB,BI,B6,B7,RF,S,SC] - R0, R1, R11    S  short int immediate     0--15   [A,AB,AY,BI] - -5, 5    T  integer (C4x)          16--20   [Z] - -5, 12    U  unsigned integer        0--15   [AU,A3] - 0, 65535    V  vector (C4x: 0--8)      0--4    [Z] - 25, 7    W  short int (C4x)         0--7    [T,TC,T2,T2C] - -3, 5    X  expansion reg (C4x)     0--4    [Z] - IVTP, TVTP    Y  address reg (C4x)      16--20   [Z] - AR0, DP, SP, IR0    Z  expansion reg (C4x)    16--20   [Z] - IVTP, TVTP */
end_comment

begin_define
define|#
directive|define
name|TIC4X_OPERANDS_MAX
value|7
end_define

begin_comment
comment|/* Max number of operands for an inst.  */
end_comment

begin_define
define|#
directive|define
name|TIC4X_NAME_MAX
value|16
end_define

begin_comment
comment|/* Max number of chars in parallel name.  */
end_comment

begin_comment
comment|/* Define the instruction level */
end_comment

begin_define
define|#
directive|define
name|OP_C3X
value|0x1
end_define

begin_comment
comment|/* C30 support - supported by all */
end_comment

begin_define
define|#
directive|define
name|OP_C4X
value|0x2
end_define

begin_comment
comment|/* C40 support - C40, C44 */
end_comment

begin_define
define|#
directive|define
name|OP_ENH
value|0x4
end_define

begin_comment
comment|/* Class LL,LS,M,P,Q,QC enhancements. Argument type                           I and J is enhanced in these classes - C31>=6.0,                           C32>=2.0, C33 */
end_comment

begin_define
define|#
directive|define
name|OP_LPWR
value|0x8
end_define

begin_comment
comment|/* Low power support (LOPOWER, MAXSPEED) - C30>=7.0,                           LC31, C31>=5.0, C32 */
end_comment

begin_define
define|#
directive|define
name|OP_IDLE2
value|0x10
end_define

begin_comment
comment|/* Idle2 support (IDLE2) - C30>=7.0, LC31, C31>=5.0,                           C32, C33, C40>=5.0, C44 */
end_comment

begin_comment
comment|/* The following class definition is a classification scheme for    putting instructions with similar type of arguments together. It    simplifies the op-code definitions significantly, as we then only    need to use the class macroes for 95% of the DSP's opcodes. */
end_comment

begin_comment
comment|/* A: General 2-operand integer operations    Syntax:<i> src, dst       src = Register (Q), Direct (@), Indirect (*), Signed immediate (S)       dst = Register (R)    Instr: 15/8 - ABSI, ADDC, ADDI, ASH, CMPI, LDI, LSH, MPYI, NEGB, NEGI,                 SUBB, SUBC, SUBI, SUBRB, SUBRI, C4x: LBn, LHn, LWLn, LWRn,                 MBn, MHn, MPYSHI, MPYUHI */
end_comment

begin_define
define|#
directive|define
name|A_CLASS_INSN
parameter_list|(
name|name
parameter_list|,
name|opcode
parameter_list|,
name|level
parameter_list|)
define|\
value|{ name, opcode|0x00000000, 0xffe00000, "Q;R", level }, \   { name, opcode|0x00200000, 0xffe00000, "@,R", level }, \   { name, opcode|0x00400000, 0xffe00000, "*,R", level }, \   { name, opcode|0x00600000, 0xffe00000, "S,R", level }
end_define

begin_comment
comment|/* AB: General 2-operand integer operation with condition    Syntax:<i>c src, dst        c   = Condition        src = Register (Q), Direct (@), Indirect (*), Signed immediate (S)        dst = Register (R)    Instr: 1/0 - LDIc */
end_comment

begin_define
define|#
directive|define
name|AB_CLASS_INSN
parameter_list|(
name|name
parameter_list|,
name|opcode
parameter_list|,
name|level
parameter_list|)
define|\
value|{ name, opcode|0x40000000, 0xf0600000, "Q;R", level }, \   { name, opcode|0x40200000, 0xf0600000, "@,R", level }, \   { name, opcode|0x40400000, 0xf0600000, "*,R", level }, \   { name, opcode|0x40600000, 0xf0600000, "S,R", level }
end_define

begin_comment
comment|/* AU: General 2-operand unsigned integer operation    Syntax:<i> src, dst         src = Register (Q), Direct (@), Indirect (*), Unsigned immediate (U)         dst = Register (R)    Instr: 6/2 - AND, ANDN, NOT, OR, TSTB, XOR, C4x: LBUn, LHUn */
end_comment

begin_define
define|#
directive|define
name|AU_CLASS_INSN
parameter_list|(
name|name
parameter_list|,
name|opcode
parameter_list|,
name|level
parameter_list|)
define|\
value|{ name, opcode|0x00000000, 0xffe00000, "Q;R", level }, \   { name, opcode|0x00200000, 0xffe00000, "@,R", level }, \   { name, opcode|0x00400000, 0xffe00000, "*,R", level }, \   { name, opcode|0x00600000, 0xffe00000, "U,R", level }
end_define

begin_comment
comment|/* AF: General 2-operand float to integer operation    Syntax:<i> src, dst         src = Register 0-11 (q), Direct (@), Indirect (*), Float immediate (F)         dst = Register (R)    Instr: 1/0 - FIX */
end_comment

begin_define
define|#
directive|define
name|AF_CLASS_INSN
parameter_list|(
name|name
parameter_list|,
name|opcode
parameter_list|,
name|level
parameter_list|)
define|\
value|{ name, opcode|0x00000000, 0xffe00000, "q;R", level }, \   { name, opcode|0x00200000, 0xffe00000, "@,R", level }, \   { name, opcode|0x00400000, 0xffe00000, "*,R", level }, \   { name, opcode|0x00600000, 0xffe00000, "F,R", level }
end_define

begin_comment
comment|/* A2: Limited 1-operand (integer) operation    Syntax:<i> src        src = Register (Q), Indirect (*), None    Instr: 1/0 - NOP */
end_comment

begin_define
define|#
directive|define
name|A2_CLASS_INSN
parameter_list|(
name|name
parameter_list|,
name|opcode
parameter_list|,
name|level
parameter_list|)
define|\
value|{ name, opcode|0x00000000, 0xffe00000, "Q", level }, \   { name, opcode|0x00400000, 0xffe00000, "*", level }, \   { name, opcode|0x00000000, 0xffe00000, "" , level }
end_define

begin_comment
comment|/* A3: General 1-operand unsigned integer operation    Syntax:<i> src         src = Register (Q), Direct (@), Indirect (*), Unsigned immediate (U)    Instr: 1/0 - RPTS */
end_comment

begin_define
define|#
directive|define
name|A3_CLASS_INSN
parameter_list|(
name|name
parameter_list|,
name|opcode
parameter_list|,
name|level
parameter_list|)
define|\
value|{ name, opcode|0x00000000, 0xffff0000, "Q", level }, \   { name, opcode|0x00200000, 0xffff0000, "@", level }, \   { name, opcode|0x00400000, 0xffff0000, "*", level }, \   { name, opcode|0x00600000, 0xffff0000, "U", level }
end_define

begin_comment
comment|/* A6: Limited 2-operand integer operation    Syntax:<i> src, dst        src = Direct (@), Indirect (*)        dst = Register (R)    Instr: 1/1 - LDII, C4x: SIGI */
end_comment

begin_define
define|#
directive|define
name|A6_CLASS_INSN
parameter_list|(
name|name
parameter_list|,
name|opcode
parameter_list|,
name|level
parameter_list|)
define|\
value|{ name, opcode|0x00200000, 0xffe00000, "@,R", level }, \   { name, opcode|0x00400000, 0xffe00000, "*,R", level }
end_define

begin_comment
comment|/* A7: Limited 2-operand integer store operation    Syntax:<i> src, dst        src = Register (R)        dst = Direct (@), Indirect (*)    Instr: 2/0 - STI, STII */
end_comment

begin_define
define|#
directive|define
name|A7_CLASS_INSN
parameter_list|(
name|name
parameter_list|,
name|opcode
parameter_list|,
name|level
parameter_list|)
define|\
value|{ name, opcode|0x00200000, 0xffe00000, "R,@", level }, \   { name, opcode|0x00400000, 0xffe00000, "R,*", level }
end_define

begin_comment
comment|/* AY: General 2-operand signed address load operation    Syntax:<i> src, dst         src = Register (Q), Direct (@), Indirect (*), Signed immediate (S)         dst = Address register - ARx, IRx, DP, BK, SP (Y)    Instr: 0/1 - C4x: LDA    Note: Q and Y should *never* be the same register */
end_comment

begin_define
define|#
directive|define
name|AY_CLASS_INSN
parameter_list|(
name|name
parameter_list|,
name|opcode
parameter_list|,
name|level
parameter_list|)
define|\
value|{ name, opcode|0x00000000, 0xffe00000, "Q,Y", level }, \   { name, opcode|0x00200000, 0xffe00000, "@,Y", level }, \   { name, opcode|0x00400000, 0xffe00000, "*,Y", level }, \   { name, opcode|0x00600000, 0xffe00000, "S,Y", level }
end_define

begin_comment
comment|/* B: General 2-operand float operation    Syntax:<i> src, dst        src = Register 0-11 (q), Direct (@), Indirect (*), Float immediate (F)        dst = Register 0-11 (r)    Instr: 12/2 - ABSF, ADDF, CMPF, LDE, LDF, LDM, MPYF, NEGF, NORM, RND,                  SUBF, SUBRF, C4x: RSQRF, TOIEEE */
end_comment

begin_define
define|#
directive|define
name|B_CLASS_INSN
parameter_list|(
name|name
parameter_list|,
name|opcode
parameter_list|,
name|level
parameter_list|)
define|\
value|{ name, opcode|0x00000000, 0xffe00000, "q;r", level }, \   { name, opcode|0x00200000, 0xffe00000, "@,r", level }, \   { name, opcode|0x00400000, 0xffe00000, "*,r", level }, \   { name, opcode|0x00600000, 0xffe00000, "F,r", level }
end_define

begin_comment
comment|/* BA: General 2-operand integer to float operation    Syntax:<i> src, dst        src = Register (Q), Direct (@), Indirect (*), Float immediate (F)        dst = Register 0-11 (r)    Instr: 0/1 - C4x: CRCPF */
end_comment

begin_define
define|#
directive|define
name|BA_CLASS_INSN
parameter_list|(
name|name
parameter_list|,
name|opcode
parameter_list|,
name|level
parameter_list|)
define|\
value|{ name, opcode|0x00000000, 0xffe00000, "Q;r", level }, \   { name, opcode|0x00200000, 0xffe00000, "@,r", level }, \   { name, opcode|0x00400000, 0xffe00000, "*,r", level }, \   { name, opcode|0x00600000, 0xffe00000, "F,r", level }
end_define

begin_comment
comment|/* BB: General 2-operand conditional float operation    Syntax:<i>c src, dst        c   = Condition        src = Register 0-11 (q), Direct (@), Indirect (*), Float immediate (F)        dst = Register 0-11 (r)    Instr: 1/0 - LDFc */
end_comment

begin_define
define|#
directive|define
name|BB_CLASS_INSN
parameter_list|(
name|name
parameter_list|,
name|opcode
parameter_list|,
name|level
parameter_list|)
define|\
value|{ name, opcode|0x40000000, 0xf0600000, "q;r", level }, \   { name, opcode|0x40200000, 0xf0600000, "@,r", level }, \   { name, opcode|0x40400000, 0xf0600000, "*,r", level }, \   { name, opcode|0x40600000, 0xf0600000, "F,r", level }
end_define

begin_comment
comment|/* BI: General 2-operand integer to float operation (yet different to BA)    Syntax:<i> src, dst        src = Register (Q), Direct (@), Indirect (*), Signed immediate (S)        dst = Register 0-11 (r)    Instr: 1/0 - FLOAT */
end_comment

begin_define
define|#
directive|define
name|BI_CLASS_INSN
parameter_list|(
name|name
parameter_list|,
name|opcode
parameter_list|,
name|level
parameter_list|)
define|\
value|{ name, opcode|0x00000000, 0xffe00000, "Q;r", level }, \   { name, opcode|0x00200000, 0xffe00000, "@,r", level }, \   { name, opcode|0x00400000, 0xffe00000, "*,r", level }, \   { name, opcode|0x00600000, 0xffe00000, "S,r", level }
end_define

begin_comment
comment|/* B6: Limited 2-operand float operation     Syntax:<i> src, dst        src = Direct (@), Indirect (*)        dst = Register 0-11 (r)    Instr: 1/1 - LDFI, C4x: FRIEEE */
end_comment

begin_define
define|#
directive|define
name|B6_CLASS_INSN
parameter_list|(
name|name
parameter_list|,
name|opcode
parameter_list|,
name|level
parameter_list|)
define|\
value|{ name, opcode|0x00200000, 0xffe00000, "@,r", level }, \   { name, opcode|0x00400000, 0xffe00000, "*,r", level }
end_define

begin_comment
comment|/* B7: Limited 2-operand float store operation    Syntax:<i> src, dst        src = Register 0-11 (r)        dst = Direct (@), Indirect (*)    Instr: 2/0 - STF, STFI */
end_comment

begin_define
define|#
directive|define
name|B7_CLASS_INSN
parameter_list|(
name|name
parameter_list|,
name|opcode
parameter_list|,
name|level
parameter_list|)
define|\
value|{ name, opcode|0x00200000, 0xffe00000, "r,@", level }, \   { name, opcode|0x00400000, 0xffe00000, "r,*", level }
end_define

begin_comment
comment|/* D: Decrement and brach operations    Syntax:<i>c ARn, dst        c   = condition        ARn = AR register 0-7 (A)        dst = Register (Q), PC-relative (P)    Instr: 2/0 - DBc, DBcD    Alias:<name1><name2> */
end_comment

begin_define
define|#
directive|define
name|D_CLASS_INSN
parameter_list|(
name|name1
parameter_list|,
name|name2
parameter_list|,
name|opcode
parameter_list|,
name|level
parameter_list|)
define|\
value|{ name1, opcode|0x00000000, 0xfe200000, "A,Q", level }, \   { name1, opcode|0x02000000, 0xfe200000, "A,P", level }, \   { name2, opcode|0x00000000, 0xfe200000, "A,Q", level }, \   { name2, opcode|0x02000000, 0xfe200000, "A,P", level }
end_define

begin_comment
comment|/* I: General branch operations    Syntax:<i> dst        dst = Address (B)    Instr: 3/1 - BR, BRD, CALL, C4x: LAJ */
end_comment

begin_comment
comment|/* I2: General branch operations (C4x addition)    Syntax:<i> dst        dst = Address (B), C4x: Register (Q)    Instr: 2/0 - RPTB, RPTBD */
end_comment

begin_comment
comment|/* J: General conditional branch operations    Syntax:<i>c dst        c   = Condition        dst = Register (Q), PC-relative (P)    Instr: 2/3 - Bc, BcD, C4x: BcAF, BcAT, LAJc    Alias:<name1><name2> */
end_comment

begin_define
define|#
directive|define
name|J_CLASS_INSN
parameter_list|(
name|name1
parameter_list|,
name|name2
parameter_list|,
name|opcode
parameter_list|,
name|level
parameter_list|)
define|\
value|{ name1, opcode|0x00000000, 0xffe00000, "Q", level }, \   { name1, opcode|0x02000000, 0xffe00000, "P", level }, \   { name2, opcode|0x00000000, 0xffe00000, "Q", level }, \   { name2, opcode|0x02000000, 0xffe00000, "P", level }
end_define

begin_comment
comment|/* JS: General conditional branch operations    Syntax:<i>c dst        c   = Condition        dst = Register (Q), PC-relative (P)    Instr: 1/1 - CALLc, C4X: LAJc */
end_comment

begin_comment
comment|/* LL: Load-load parallell operation    Syntax:<i> src2, dst2 ||<i> src1, dst1        src1 = Indirect 0,1,IR0,IR1 (J)        dst1 = Register 0-7 (K)        src2 = Indirect 0,1,IR0,IR1, ENH: Register (i)        dst2 = Register 0-7 (L)    Instr: 2/0 - LDF||LDF, LDI||LDI    Alias: i||i, i1||i2, i2||i1 */
end_comment

begin_define
define|#
directive|define
name|LL_CLASS_INSN
parameter_list|(
name|name
parameter_list|,
name|opcode
parameter_list|,
name|level
parameter_list|)
define|\
value|{ name "_"  name    , opcode, 0xfe000000, "i;L|J,K", level }, \   { name "2_" name "1", opcode, 0xfe000000, "i;L|J,K", level }, \   { name "1_" name "2", opcode, 0xfe000000, "J,K|i;L", level }
end_define

begin_comment
comment|/* LS: Store-store parallell operation    Syntax:<i> src2, dst2 ||<i> src1, dst1        src1 = Register 0-7 (H)        dst1 = Indirect 0,1,IR0,IR1 (J)        src2 = Register 0-7 (L)        dst2 = Indirect 0,1,IR0,IR1, ENH: register (i)    Instr: 2/0 - STF||STF, STI||STI    Alias: i||i, i1||i2, i2||i1. */
end_comment

begin_define
define|#
directive|define
name|LS_CLASS_INSN
parameter_list|(
name|name
parameter_list|,
name|opcode
parameter_list|,
name|level
parameter_list|)
define|\
value|{ name "_"  name    , opcode, 0xfe000000, "L;i|H,J", level }, \   { name "2_" name "1", opcode, 0xfe000000, "L;i|H,J", level }, \   { name "1_" name "2", opcode, 0xfe000000, "H,J|L;i", level }
end_define

begin_comment
comment|/* M: General multiply and add/sub operations    Syntax:<ia> src3,src4,dst1 ||<ib> src2,src1,dst2 [00] - Manual<ia> src3,src1,dst1 ||<ib> src2,src4,dst2 [01] - Manual<ia> src1,src3,dst1 ||<ib> src2,src4,dst2 [01]<ia> src1,src2,dst1 ||<ib> src4,src3,dst2 [02] - Manual<ia> src3,src1,dst1 ||<ib> src4,src2,dst2 [03] - Manual<ia> src1,src3,dst1 ||<ib> src4,src2,dst2 [03]        src1 = Register 0-7 (K)        src2 = Register 0-7 (H)        src3 = Indirect 0,1,IR0,IR1, ENH: register (j)        src4 = Indirect 0,1,IR0,IR1, ENH: register (i)        dst1 = Register 0-1 (N)        dst2 = Register 2-3 (M)    Instr: 4/0 - MPYF3||ADDF3, MPYF3||SUBF3, MPYI3||ADDI3, MPYI3||SUBI3    Alias: a||b, a3||n, a||b3, a3||b3, b||a, b3||a, b||a3, b3||a3 */
end_comment

begin_define
define|#
directive|define
name|M_CLASS_INSN
parameter_list|(
name|namea
parameter_list|,
name|nameb
parameter_list|,
name|opcode
parameter_list|,
name|level
parameter_list|)
define|\
value|{ namea "_" nameb, opcode|0x00000000, 0xff000000, "i;j;N|H;K;M", level }, \   { namea "_" nameb, opcode|0x01000000, 0xff000000, "j;K;N|H;i;M", level }, \   { namea "_" nameb, opcode|0x01000000, 0xff000000, "K;j;N|H;i;M", level }, \   { namea "_" nameb, opcode|0x02000000, 0xff000000, "H;K;N|i;j;M", level }, \   { namea "_" nameb, opcode|0x03000000, 0xff000000, "j;K;N|i;H;M", level }, \   { namea "_" nameb, opcode|0x03000000, 0xff000000, "K;j;N|i;H;M", level }, \   { namea "3_" nameb, opcode|0x00000000, 0xff000000, "i;j;N|H;K;M", level }, \   { namea "3_" nameb, opcode|0x01000000, 0xff000000, "j;K;N|H;i;M", level }, \   { namea "3_" nameb, opcode|0x01000000, 0xff000000, "K;j;N|H;i;M", level }, \   { namea "3_" nameb, opcode|0x02000000, 0xff000000, "H;K;N|i;j;M", level }, \   { namea "3_" nameb, opcode|0x03000000, 0xff000000, "j;K;N|i;H;M", level }, \   { namea "3_" nameb, opcode|0x03000000, 0xff000000, "K;j;N|i;H;M", level }, \   { namea "_" nameb "3", opcode|0x00000000, 0xff000000, "i;j;N|H;K;M", level }, \   { namea "_" nameb "3", opcode|0x01000000, 0xff000000, "j;K;N|H;i;M", level }, \   { namea "_" nameb "3", opcode|0x01000000, 0xff000000, "K;j;N|H;i;M", level }, \   { namea "_" nameb "3", opcode|0x02000000, 0xff000000, "H;K;N|i;j;M", level }, \   { namea "_" nameb "3", opcode|0x03000000, 0xff000000, "j;K;N|i;H;M", level }, \   { namea "_" nameb "3", opcode|0x03000000, 0xff000000, "K;j;N|i;H;M", level }, \   { namea "3_" nameb "3", opcode|0x00000000, 0xff000000, "i;j;N|H;K;M", level }, \   { namea "3_" nameb "3", opcode|0x01000000, 0xff000000, "j;K;N|H;i;M", level }, \   { namea "3_" nameb "3", opcode|0x01000000, 0xff000000, "K;j;N|H;i;M", level }, \   { namea "3_" nameb "3", opcode|0x02000000, 0xff000000, "H;K;N|i;j;M", level }, \   { namea "3_" nameb "3", opcode|0x03000000, 0xff000000, "j;K;N|i;H;M", level }, \   { namea "3_" nameb "3", opcode|0x03000000, 0xff000000, "K;j;N|i;H;M", level }, \   { nameb "_" namea, opcode|0x00000000, 0xff000000, "H;K;M|i;j;N", level }, \   { nameb "_" namea, opcode|0x01000000, 0xff000000, "H;i;M|j;K;N", level }, \   { nameb "_" namea, opcode|0x01000000, 0xff000000, "H;i;M|K;j;N", level }, \   { nameb "_" namea, opcode|0x02000000, 0xff000000, "i;j;M|H;K;N", level }, \   { nameb "_" namea, opcode|0x03000000, 0xff000000, "i;H;M|j;K;N", level }, \   { nameb "_" namea, opcode|0x03000000, 0xff000000, "i;H;M|K;j;N", level }, \   { nameb "3_" namea, opcode|0x00000000, 0xff000000, "H;K;M|i;j;N", level }, \   { nameb "3_" namea, opcode|0x01000000, 0xff000000, "H;i;M|j;K;N", level }, \   { nameb "3_" namea, opcode|0x01000000, 0xff000000, "H;i;M|K;j;N", level }, \   { nameb "3_" namea, opcode|0x02000000, 0xff000000, "i;j;M|H;K;N", level }, \   { nameb "3_" namea, opcode|0x03000000, 0xff000000, "i;H;M|j;K;N", level }, \   { nameb "3_" namea, opcode|0x03000000, 0xff000000, "i;H;M|K;j;N", level }, \   { nameb "_" namea "3", opcode|0x00000000, 0xff000000, "H;K;M|i;j;N", level }, \   { nameb "_" namea "3", opcode|0x01000000, 0xff000000, "H;i;M|j;K;N", level }, \   { nameb "_" namea "3", opcode|0x01000000, 0xff000000, "H;i;M|K;j;N", level }, \   { nameb "_" namea "3", opcode|0x02000000, 0xff000000, "i;j;M|H;K;N", level }, \   { nameb "_" namea "3", opcode|0x03000000, 0xff000000, "i;H;M|j;K;N", level }, \   { nameb "_" namea "3", opcode|0x03000000, 0xff000000, "i;H;M|K;j;N", level }, \   { nameb "3_" namea "3", opcode|0x00000000, 0xff000000, "H;K;M|i;j;N", level }, \   { nameb "3_" namea "3", opcode|0x01000000, 0xff000000, "H;i;M|j;K;N", level }, \   { nameb "3_" namea "3", opcode|0x01000000, 0xff000000, "H;i;M|K;j;N", level }, \   { nameb "3_" namea "3", opcode|0x02000000, 0xff000000, "i;j;M|H;K;N", level }, \   { nameb "3_" namea "3", opcode|0x03000000, 0xff000000, "i;H;M|j;K;N", level }, \   { nameb "3_" namea "3", opcode|0x03000000, 0xff000000, "i;H;M|K;j;N", level }
end_define

begin_comment
comment|/* P: General 2-operand operation with parallell store    Syntax:<ia> src2, dst1 ||<ib> src3, dst2        src2 = Indirect 0,1,IR0,IR1, ENH: register (i)        dst1 = Register 0-7 (L)        src3 = Register 0-7 (H)        dst2 = Indirect 0,1,IR0,IR1 (J)    Instr: 9/2 - ABSF||STF, ABSI||STI, FIX||STI, FLOAT||STF, LDF||STF,                 LDI||STI, NEGF||STF, NEGI||STI, NOT||STI, C4x: FRIEEE||STF,                 TOIEEE||STF    Alias: a||b, b||a */
end_comment

begin_define
define|#
directive|define
name|P_CLASS_INSN
parameter_list|(
name|namea
parameter_list|,
name|nameb
parameter_list|,
name|opcode
parameter_list|,
name|level
parameter_list|)
define|\
value|{ namea "_" nameb, opcode, 0xfe000000, "i;L|H,J", level }, \   { nameb "_" namea, opcode, 0xfe000000, "H,J|i;L", level }
end_define

begin_comment
comment|/* Q: General 3-operand operation with parallell store    Syntax:<ia> src1, src2, dst1 ||<ib> src3, dst2        src1 = Register 0-7 (K)        src2 = Indirect 0,1,IR0,IR1, ENH: register (i)        dst1 = Register 0-7 (L)        src3 = Register 0-7 (H)        dst2 = Indirect 0,1,IR0,IR1 (J)    Instr: 4/0 - ASH3||STI, LSH3||STI, SUBF3||STF, SUBI3||STI    Alias: a||b, b||a, a3||b, b||a3 */
end_comment

begin_define
define|#
directive|define
name|Q_CLASS_INSN
parameter_list|(
name|namea
parameter_list|,
name|nameb
parameter_list|,
name|opcode
parameter_list|,
name|level
parameter_list|)
define|\
value|{ namea "_"  nameb    , opcode, 0xfe000000, "K,i;L|H,J", level }, \   { nameb "_"  namea    , opcode, 0xfe000000, "H,J|K,i;L", level }, \   { namea "3_" nameb    , opcode, 0xfe000000, "K,i;L|H,J", level }, \   { nameb "_"  namea "3", opcode, 0xfe000000, "H,J|K,i;L", level }
end_define

begin_comment
comment|/* QC: General commutative 3-operand operation with parallell store    Syntax:<ia> src2, src1, dst1 ||<ib> src3, dst2<ia> src1, src2, dst1 ||<ib> src3, dst2 - Manual        src1 = Register 0-7 (K)        src2 = Indirect 0,1,IR0,IR1, ENH: register (i)        dst1 = Register 0-7 (L)        src3 = Register 0-7 (H)        dst2 = Indirect 0,1,IR0,IR1 (J)    Instr: 7/0 - ADDF3||STF, ADDI3||STI, AND3||STI, MPYF3||STF, MPYI3||STI,                 OR3||STI, XOR3||STI    Alias: a||b, b||a, a3||b, b||a3 */
end_comment

begin_define
define|#
directive|define
name|QC_CLASS_INSN
parameter_list|(
name|namea
parameter_list|,
name|nameb
parameter_list|,
name|opcode
parameter_list|,
name|level
parameter_list|)
define|\
value|{ namea "_"  nameb    , opcode, 0xfe000000, "i;K;L|H,J", level }, \   { namea "_"  nameb    , opcode, 0xfe000000, "K;i;L|H,J", level }, \   { nameb "_"  namea    , opcode, 0xfe000000, "H,J|i;K;L", level }, \   { nameb "_"  namea    , opcode, 0xfe000000, "H,J|K;i;L", level }, \   { namea "3_" nameb    , opcode, 0xfe000000, "i;K;L|H,J", level }, \   { namea "3_" nameb    , opcode, 0xfe000000, "K;i;L|H,J", level }, \   { nameb "_"  namea "3", opcode, 0xfe000000, "H,J|i;K;L", level }, \   { nameb "_"  namea "3", opcode, 0xfe000000, "H,J|K;i;L", level }
end_define

begin_comment
comment|/* R: General register integer operation    Syntax:<i> dst        dst = Register (R)    Instr: 6/0 - POP, PUSH, ROL, ROLC, ROR, RORC */
end_comment

begin_define
define|#
directive|define
name|R_CLASS_INSN
parameter_list|(
name|name
parameter_list|,
name|opcode
parameter_list|,
name|level
parameter_list|)
define|\
value|{ name, opcode, 0xffe0ffff, "R", level }
end_define

begin_comment
comment|/* RF: General register float operation    Syntax:<i> dst        dst = Register 0-11 (r)    Instr: 2/0 - POPF, PUSHF */
end_comment

begin_define
define|#
directive|define
name|RF_CLASS_INSN
parameter_list|(
name|name
parameter_list|,
name|opcode
parameter_list|,
name|level
parameter_list|)
define|\
value|{ name, opcode, 0xffe0ffff, "r", level }
end_define

begin_comment
comment|/* S: General 3-operand float operation    Syntax:<i> src2, src1, dst        src2 = Register 0-11 (e), Indirect 0,1,IR0,IR1 (I), C4x T2: Indirect (C)        src1 = Register 0-11 (g), Indirect 0,1,IR0,IR1 (J), C4x T2: Indirect (O)        dst  = Register 0-11 (r)    Instr: 1/0 - SUBF3    Alias: i, i3 */
end_comment

begin_define
define|#
directive|define
name|S_CLASS_INSN
parameter_list|(
name|name
parameter_list|,
name|opcode
parameter_list|,
name|level
parameter_list|)
define|\
value|{ name, opcode|0x20000000, 0xffe00000, "e,g;r", level  }, \   { name, opcode|0x20200000, 0xffe00000, "e,J,r", level  }, \   { name, opcode|0x20400000, 0xffe00000, "I,g;r", level  }, \   { name, opcode|0x20600000, 0xffe00000, "I,J,r", level  }, \   { name, opcode|0x30200000, 0xffe00000, "C,g;r", OP_C4X }, \   { name, opcode|0x30600000, 0xffe00000, "C,O,r", OP_C4X }, \   { name "3", opcode|0x20000000, 0xffe00000, "e,g;r", level  }, \   { name "3", opcode|0x20200000, 0xffe00000, "e,J,r", level  }, \   { name "3", opcode|0x20400000, 0xffe00000, "I,g;r", level  }, \   { name "3", opcode|0x20600000, 0xffe00000, "I,J,r", level  }, \   { name "3", opcode|0x30200000, 0xffe00000, "C,g;r", OP_C4X }, \   { name "3", opcode|0x30600000, 0xffe00000, "C,O,r", OP_C4X }
end_define

begin_comment
comment|/* SC: General commutative 3-operand float operation    Syntax:<i> src2, src1, dst - Manual<i> src1, src2, dst        src2 = Register 0-11 (e), Indirect 0,1,IR0,IR1 (I), C4x T2: Indirect (C)        src1 = Register 0-11 (g), Indirect 0,1,IR0,IR1 (J), C4x T2: Indirect (O)        dst  = Register 0-11 (r)    Instr: 2/0 - ADDF3, MPYF3    Alias: i, i3 */
end_comment

begin_define
define|#
directive|define
name|SC_CLASS_INSN
parameter_list|(
name|name
parameter_list|,
name|opcode
parameter_list|,
name|level
parameter_list|)
define|\
value|{ name, opcode|0x20000000, 0xffe00000, "e,g;r", level  }, \   { name, opcode|0x20200000, 0xffe00000, "e,J,r", level  }, \   { name, opcode|0x20400000, 0xffe00000, "I,g;r", level  }, \   { name, opcode|0x20600000, 0xffe00000, "I,J,r", level  }, \   { name, opcode|0x30200000, 0xffe00000, "C,g;r", OP_C4X }, \   { name, opcode|0x30200000, 0xffe00000, "g,C,r", OP_C4X }, \   { name, opcode|0x30600000, 0xffe00000, "C,O,r", OP_C4X }, \   { name "3", opcode|0x20000000, 0xffe00000, "e,g;r", level  }, \   { name "3", opcode|0x20200000, 0xffe00000, "e,J,r", level  }, \   { name "3", opcode|0x20400000, 0xffe00000, "I,g;r", level  }, \   { name "3", opcode|0x20600000, 0xffe00000, "I,J,r", level  }, \   { name "3", opcode|0x30200000, 0xffe00000, "g,C,r", OP_C4X }, \   { name "3", opcode|0x30200000, 0xffe00000, "C,g;r", OP_C4X }, \   { name "3", opcode|0x30600000, 0xffe00000, "C,O,r", OP_C4X }
end_define

begin_comment
comment|/* S2: General 3-operand float operation with 2 args    Syntax:<i> src2, src1        src2 = Register 0-11 (e), Indirect 0,1,IR0,IR1 (I), C4x T2: Indirect (C)        src1 = Register 0-11 (g), Indirect 0,1,IR0,IR1 (J), C4x T2: Indirect (O)    Instr: 1/0 - CMPF3    Alias: i, i3 */
end_comment

begin_define
define|#
directive|define
name|S2_CLASS_INSN
parameter_list|(
name|name
parameter_list|,
name|opcode
parameter_list|,
name|level
parameter_list|)
define|\
value|{ name, opcode|0x20000000, 0xffe00000, "e,g", level  }, \   { name, opcode|0x20200000, 0xffe00000, "e,J", level  }, \   { name, opcode|0x20400000, 0xffe00000, "I,g", level  }, \   { name, opcode|0x20600000, 0xffe00000, "I,J", level  }, \   { name, opcode|0x30200000, 0xffe00000, "C,g", OP_C4X }, \   { name, opcode|0x30600000, 0xffe00000, "C,O", OP_C4X }, \   { name "3", opcode|0x20000000, 0xffe00000, "e,g", level  }, \   { name "3", opcode|0x20200000, 0xffe00000, "e,J", level  }, \   { name "3", opcode|0x20400000, 0xffe00000, "I,g", level  }, \   { name "3", opcode|0x20600000, 0xffe00000, "I,J", level  }, \   { name "3", opcode|0x30200000, 0xffe00000, "C,g", OP_C4X }, \   { name "3", opcode|0x30600000, 0xffe00000, "C,O", OP_C4X }
end_define

begin_comment
comment|/* T: General 3-operand integer operand    Syntax:<i> src2, src1, dst        src2 = Register (E), Indirect 0,1,IR0,IR1 (I), C4x T2: Indirect (C), Immediate (W)        src1 = Register (G), Indirect 0,1,IR0,IR1 (J), C4x T2: Indirect (O)        dst  = Register (R)    Instr: 5/0 - ANDN3, ASH3, LSH3, SUBB3, SUBI3    Alias: i, i3 */
end_comment

begin_define
define|#
directive|define
name|T_CLASS_INSN
parameter_list|(
name|name
parameter_list|,
name|opcode
parameter_list|,
name|level
parameter_list|)
define|\
value|{ name, opcode|0x20000000, 0xffe00000, "E,G;R", level  }, \   { name, opcode|0x20200000, 0xffe00000, "E,J,R", level  }, \   { name, opcode|0x20400000, 0xffe00000, "I,G;R", level  }, \   { name, opcode|0x20600000, 0xffe00000, "I,J,R", level  }, \   { name, opcode|0x30000000, 0xffe00000, "W,G;R", OP_C4X }, \   { name, opcode|0x30200000, 0xffe00000, "C,G;R", OP_C4X }, \   { name, opcode|0x30400000, 0xffe00000, "W,O,R", OP_C4X }, \   { name, opcode|0x30600000, 0xffe00000, "C,O,R", OP_C4X }, \   { name "3", opcode|0x20000000, 0xffe00000, "E,G;R", level  }, \   { name "3", opcode|0x20200000, 0xffe00000, "E,J,R", level  }, \   { name "3", opcode|0x20400000, 0xffe00000, "I,G;R", level  }, \   { name "3", opcode|0x20600000, 0xffe00000, "I,J,R", level  }, \   { name "3", opcode|0x30000000, 0xffe00000, "W,G;R", OP_C4X }, \   { name "3", opcode|0x30200000, 0xffe00000, "C,G;R", OP_C4X }, \   { name "3", opcode|0x30400000, 0xffe00000, "W,O,R", OP_C4X }, \   { name "3", opcode|0x30600000, 0xffe00000, "C,O,R", OP_C4X }
end_define

begin_comment
comment|/* TC: General commutative 3-operand integer operation    Syntax:<i> src2, src1, dst<i> src1, src2, dst        src2 = Register (E), Indirect 0,1,IR0,IR1 (I), C4x T2: Indirect (C), Immediate (W)        src1 = Register (G), Indirect 0,1,IR0,IR1 (J), C4x T2: Indirect (O)        dst  = Register (R)    Instr: 6/2 - ADDC3, ADDI3, AND3, MPYI3, OR3, XOR3, C4x: MPYSHI, MPYUHI    Alias: i, i3 */
end_comment

begin_define
define|#
directive|define
name|TC_CLASS_INSN
parameter_list|(
name|name
parameter_list|,
name|opcode
parameter_list|,
name|level
parameter_list|)
define|\
value|{ name, opcode|0x20000000, 0xffe00000, "E,G;R", level  }, \   { name, opcode|0x20200000, 0xffe00000, "E,J,R", level  }, \   { name, opcode|0x20400000, 0xffe00000, "I,G;R", level  }, \   { name, opcode|0x20600000, 0xffe00000, "I,J,R", level  }, \   { name, opcode|0x30000000, 0xffe00000, "W,G;R", OP_C4X }, \   { name, opcode|0x30000000, 0xffe00000, "G,W,R", OP_C4X }, \   { name, opcode|0x30200000, 0xffe00000, "C,G;R", OP_C4X }, \   { name, opcode|0x30200000, 0xffe00000, "G,C,R", OP_C4X }, \   { name, opcode|0x30400000, 0xffe00000, "W,O,R", OP_C4X }, \   { name, opcode|0x30400000, 0xffe00000, "O,W,R", OP_C4X }, \   { name, opcode|0x30600000, 0xffe00000, "C,O,R", OP_C4X }, \   { name "3", opcode|0x20000000, 0xffe00000, "E,G;R", level  }, \   { name "3", opcode|0x20200000, 0xffe00000, "E,J,R", level  }, \   { name "3", opcode|0x20400000, 0xffe00000, "I,G;R", level  }, \   { name "3", opcode|0x20600000, 0xffe00000, "I,J,R", level  }, \   { name "3", opcode|0x30000000, 0xffe00000, "W,G;R", OP_C4X }, \   { name "3", opcode|0x30000000, 0xffe00000, "G,W,R", OP_C4X }, \   { name "3", opcode|0x30200000, 0xffe00000, "C,G;R", OP_C4X }, \   { name "3", opcode|0x30200000, 0xffe00000, "G,C,R", OP_C4X }, \   { name "3", opcode|0x30400000, 0xffe00000, "W,O,R", OP_C4X }, \   { name "3", opcode|0x30400000, 0xffe00000, "O,W,R", OP_C4X }, \   { name "3", opcode|0x30600000, 0xffe00000, "C,O,R", OP_C4X }
end_define

begin_comment
comment|/* T2: General 3-operand integer operation with 2 args    Syntax:<i> src2, src1        src2 = Register (E), Indirect 0,1,IR0,IR1 (I), C4x T2: Indirect (C), Immediate (W)        src1 = Register (G), Indirect 0,1,IR0,IR1 (J), C4x T2: Indirect (O)    Instr: 1/0 - CMPI3    Alias: i, i3 */
end_comment

begin_define
define|#
directive|define
name|T2_CLASS_INSN
parameter_list|(
name|name
parameter_list|,
name|opcode
parameter_list|,
name|level
parameter_list|)
define|\
value|{ name, opcode|0x20000000, 0xffe00000, "E,G", level  }, \   { name, opcode|0x20200000, 0xffe00000, "E,J", level  }, \   { name, opcode|0x20400000, 0xffe00000, "I,G", level  }, \   { name, opcode|0x20600000, 0xffe00000, "I,J", level  }, \   { name, opcode|0x30000000, 0xffe00000, "W,G", OP_C4X }, \   { name, opcode|0x30200000, 0xffe00000, "C,G", OP_C4X }, \   { name, opcode|0x30400000, 0xffe00000, "W,O", OP_C4X }, \   { name, opcode|0x30600000, 0xffe00000, "C,O", OP_C4X }, \   { name "3", opcode|0x20000000, 0xffe00000, "E,G", level  }, \   { name "3", opcode|0x20200000, 0xffe00000, "E,J", level  }, \   { name "3", opcode|0x20400000, 0xffe00000, "I,G", level  }, \   { name "3", opcode|0x20600000, 0xffe00000, "I,J", level  }, \   { name "3", opcode|0x30000000, 0xffe00000, "W,G", OP_C4X }, \   { name "3", opcode|0x30200000, 0xffe00000, "C,G", OP_C4X }, \   { name "3", opcode|0x30400000, 0xffe00000, "W,O", OP_C4X }, \   { name "3", opcode|0x30600000, 0xffe00000, "C,O", OP_C4X }
end_define

begin_comment
comment|/* T2C: General commutative 3-operand integer operation with 2 args     Syntax:<i> src2, src1 - Manual<i> src1, src2         src2 = Register (E), Indirect 0,1,IR0,IR1 (I), C4x T2: Indirect (C), Immediate (W)        src1 = Register (G), Indirect 0,1,IR0,IR1 (J), C4x T2: Indirect (0)    Instr: 1/0 - TSTB3    Alias: i, i3 */
end_comment

begin_define
define|#
directive|define
name|T2C_CLASS_INSN
parameter_list|(
name|name
parameter_list|,
name|opcode
parameter_list|,
name|level
parameter_list|)
define|\
value|{ name, opcode|0x20000000, 0xffe00000, "E,G", level  }, \   { name, opcode|0x20200000, 0xffe00000, "E,J", level  }, \   { name, opcode|0x20400000, 0xffe00000, "I,G", level  }, \   { name, opcode|0x20600000, 0xffe00000, "I,J", level  }, \   { name, opcode|0x30000000, 0xffe00000, "W,G", OP_C4X }, \   { name, opcode|0x30000000, 0xffe00000, "G,W", OP_C4X }, \   { name, opcode|0x30200000, 0xffe00000, "C,G", OP_C4X }, \   { name, opcode|0x30200000, 0xffe00000, "G,C", OP_C4X }, \   { name, opcode|0x30400000, 0xffe00000, "W,O", OP_C4X }, \   { name, opcode|0x30400000, 0xffe00000, "O,W", OP_C4X }, \   { name, opcode|0x30600000, 0xffe00000, "C,O", OP_C4X }, \   { name "3", opcode|0x20000000, 0xffe00000, "E,G", level  }, \   { name "3", opcode|0x20200000, 0xffe00000, "E,J", level  }, \   { name "3", opcode|0x20400000, 0xffe00000, "I,G", level  }, \   { name "3", opcode|0x20600000, 0xffe00000, "I,J", level  }, \   { name "3", opcode|0x30000000, 0xffe00000, "W,G", OP_C4X }, \   { name "3", opcode|0x30000000, 0xffe00000, "G,W", OP_C4X }, \   { name "3", opcode|0x30200000, 0xffe00000, "C,G", OP_C4X }, \   { name "3", opcode|0x30200000, 0xffe00000, "G,C", OP_C4X }, \   { name "3", opcode|0x30400000, 0xffe00000, "W,O", OP_C4X }, \   { name "3", opcode|0x30400000, 0xffe00000, "O,W", OP_C4X }, \   { name "3", opcode|0x30600000, 0xffe00000, "C,O", OP_C4X }
end_define

begin_comment
comment|/* Z: Misc operations with or without arguments    Syntax:<i><arg1>,...    Instr: 16 - RETIc, RETSc, SIGI(c3X), SWI, IDLE, IDLE2, RETIcD,                 TRAPc, LATc, LDEP, LDEHI, LDEPE, LDPK, STIK, LDP, IACK */
end_comment

begin_comment
comment|/* Define tic4x opcodes for assembler and disassembler.  */
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|tic4x_inst_t
name|tic4x_insts
index|[]
init|=
block|{
comment|/* Put synonyms after the desired forms in table so that they get      overwritten in the lookup table.  The disassembler will thus      print the `proper' mnemonics.  Note that the disassembler      only decodes the 11 MSBs, so instructions like ldp @0x500 will      be printed as ldiu 5, dp.  Note that with parallel instructions,      the second part is executed before the first part, unless      the sti1||sti2 form is used.  We also allow sti2||sti1      which is equivalent to the default sti||sti form.   */
name|B_CLASS_INSN
argument_list|(
literal|"absf"
argument_list|,
literal|0x00000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|P_CLASS_INSN
argument_list|(
literal|"absf"
argument_list|,
literal|"stf"
argument_list|,
literal|0xc8000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|A_CLASS_INSN
argument_list|(
literal|"absi"
argument_list|,
literal|0x00800000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|P_CLASS_INSN
argument_list|(
literal|"absi"
argument_list|,
literal|"sti"
argument_list|,
literal|0xca000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|A_CLASS_INSN
argument_list|(
literal|"addc"
argument_list|,
literal|0x01000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|TC_CLASS_INSN
argument_list|(
literal|"addc"
argument_list|,
literal|0x00000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|B_CLASS_INSN
argument_list|(
literal|"addf"
argument_list|,
literal|0x01800000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|SC_CLASS_INSN
argument_list|(
literal|"addf"
argument_list|,
literal|0x00800000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|QC_CLASS_INSN
argument_list|(
literal|"addf"
argument_list|,
literal|"stf"
argument_list|,
literal|0xcc000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|A_CLASS_INSN
argument_list|(
literal|"addi"
argument_list|,
literal|0x02000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|TC_CLASS_INSN
argument_list|(
literal|"addi"
argument_list|,
literal|0x01000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|QC_CLASS_INSN
argument_list|(
literal|"addi"
argument_list|,
literal|"sti"
argument_list|,
literal|0xce000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|AU_CLASS_INSN
argument_list|(
literal|"and"
argument_list|,
literal|0x02800000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|TC_CLASS_INSN
argument_list|(
literal|"and"
argument_list|,
literal|0x01800000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|QC_CLASS_INSN
argument_list|(
literal|"and"
argument_list|,
literal|"sti"
argument_list|,
literal|0xd0000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|AU_CLASS_INSN
argument_list|(
literal|"andn"
argument_list|,
literal|0x03000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|T_CLASS_INSN
argument_list|(
literal|"andn"
argument_list|,
literal|0x02000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|A_CLASS_INSN
argument_list|(
literal|"ash"
argument_list|,
literal|0x03800000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|T_CLASS_INSN
argument_list|(
literal|"ash"
argument_list|,
literal|0x02800000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|Q_CLASS_INSN
argument_list|(
literal|"ash"
argument_list|,
literal|"sti"
argument_list|,
literal|0xd2000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|J_CLASS_INSN
argument_list|(
literal|"bB"
argument_list|,
literal|"b"
argument_list|,
literal|0x68000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|J_CLASS_INSN
argument_list|(
literal|"bBd"
argument_list|,
literal|"bd"
argument_list|,
literal|0x68200000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|J_CLASS_INSN
argument_list|(
literal|"bBaf"
argument_list|,
literal|"baf"
argument_list|,
literal|0x68a00000
argument_list|,
name|OP_C4X
argument_list|)
block|,
name|J_CLASS_INSN
argument_list|(
literal|"bBat"
argument_list|,
literal|"bat"
argument_list|,
literal|0x68600000
argument_list|,
name|OP_C4X
argument_list|)
block|,
block|{
literal|"br"
block|,
literal|0x60000000
block|,
literal|0xff000000
block|,
literal|"B"
block|,
name|OP_C3X
block|}
block|,
comment|/* I_CLASS */
block|{
literal|"brd"
block|,
literal|0x61000000
block|,
literal|0xff000000
block|,
literal|"B"
block|,
name|OP_C3X
block|}
block|,
comment|/* I_CLASS */
block|{
literal|"call"
block|,
literal|0x62000000
block|,
literal|0xff000000
block|,
literal|"B"
block|,
name|OP_C3X
block|}
block|,
comment|/* I_CLASS */
block|{
literal|"callB"
block|,
literal|0x70000000
block|,
literal|0xffe00000
block|,
literal|"Q"
block|,
name|OP_C3X
block|}
block|,
comment|/* JS_CLASS */
block|{
literal|"callB"
block|,
literal|0x72000000
block|,
literal|0xffe00000
block|,
literal|"P"
block|,
name|OP_C3X
block|}
block|,
comment|/* JS_CLASS */
name|B_CLASS_INSN
argument_list|(
literal|"cmpf"
argument_list|,
literal|0x04000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|S2_CLASS_INSN
argument_list|(
literal|"cmpf"
argument_list|,
literal|0x03000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|A_CLASS_INSN
argument_list|(
literal|"cmpi"
argument_list|,
literal|0x04800000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|T2_CLASS_INSN
argument_list|(
literal|"cmpi"
argument_list|,
literal|0x03800000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|D_CLASS_INSN
argument_list|(
literal|"dbB"
argument_list|,
literal|"db"
argument_list|,
literal|0x6c000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|D_CLASS_INSN
argument_list|(
literal|"dbBd"
argument_list|,
literal|"dbd"
argument_list|,
literal|0x6c200000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|AF_CLASS_INSN
argument_list|(
literal|"fix"
argument_list|,
literal|0x05000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|P_CLASS_INSN
argument_list|(
literal|"fix"
argument_list|,
literal|"sti"
argument_list|,
literal|0xd4000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|BI_CLASS_INSN
argument_list|(
literal|"float"
argument_list|,
literal|0x05800000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|P_CLASS_INSN
argument_list|(
literal|"float"
argument_list|,
literal|"stf"
argument_list|,
literal|0xd6000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|B6_CLASS_INSN
argument_list|(
literal|"frieee"
argument_list|,
literal|0x1c000000
argument_list|,
name|OP_C4X
argument_list|)
block|,
name|P_CLASS_INSN
argument_list|(
literal|"frieee"
argument_list|,
literal|"stf"
argument_list|,
literal|0xf2000000
argument_list|,
name|OP_C4X
argument_list|)
block|,
block|{
literal|"iack"
block|,
literal|0x1b200000
block|,
literal|0xffe00000
block|,
literal|"@"
block|,
name|OP_C3X
block|}
block|,
comment|/* Z_CLASS */
block|{
literal|"iack"
block|,
literal|0x1b400000
block|,
literal|0xffe00000
block|,
literal|"*"
block|,
name|OP_C3X
block|}
block|,
comment|/* Z_CLASS */
block|{
literal|"idle"
block|,
literal|0x06000000
block|,
literal|0xffffffff
block|,
literal|""
block|,
name|OP_C3X
block|}
block|,
comment|/* Z_CLASS */
block|{
literal|"idlez"
block|,
literal|0x06000000
block|,
literal|0xffffffff
block|,
literal|""
block|,
name|OP_C3X
block|}
block|,
comment|/* Z_CLASS */
block|{
literal|"idle2"
block|,
literal|0x06000001
block|,
literal|0xffffffff
block|,
literal|""
block|,
name|OP_IDLE2
block|}
block|,
comment|/* Z_CLASS */
block|{
literal|"laj"
block|,
literal|0x63000000
block|,
literal|0xff000000
block|,
literal|"B"
block|,
name|OP_C4X
block|}
block|,
comment|/* I_CLASS */
block|{
literal|"lajB"
block|,
literal|0x70200000
block|,
literal|0xffe00000
block|,
literal|"Q"
block|,
name|OP_C4X
block|}
block|,
comment|/* JS_CLASS */
block|{
literal|"lajB"
block|,
literal|0x72200000
block|,
literal|0xffe00000
block|,
literal|"P"
block|,
name|OP_C4X
block|}
block|,
comment|/* JS_CLASS */
block|{
literal|"latB"
block|,
literal|0x74800000
block|,
literal|0xffe00000
block|,
literal|"V"
block|,
name|OP_C4X
block|}
block|,
comment|/* Z_CLASS */
name|A_CLASS_INSN
argument_list|(
literal|"lb0"
argument_list|,
literal|0xb0000000
argument_list|,
name|OP_C4X
argument_list|)
block|,
name|A_CLASS_INSN
argument_list|(
literal|"lb1"
argument_list|,
literal|0xb0800000
argument_list|,
name|OP_C4X
argument_list|)
block|,
name|A_CLASS_INSN
argument_list|(
literal|"lb2"
argument_list|,
literal|0xb1000000
argument_list|,
name|OP_C4X
argument_list|)
block|,
name|A_CLASS_INSN
argument_list|(
literal|"lb3"
argument_list|,
literal|0xb1800000
argument_list|,
name|OP_C4X
argument_list|)
block|,
name|AU_CLASS_INSN
argument_list|(
literal|"lbu0"
argument_list|,
literal|0xb2000000
argument_list|,
name|OP_C4X
argument_list|)
block|,
name|AU_CLASS_INSN
argument_list|(
literal|"lbu1"
argument_list|,
literal|0xb2800000
argument_list|,
name|OP_C4X
argument_list|)
block|,
name|AU_CLASS_INSN
argument_list|(
literal|"lbu2"
argument_list|,
literal|0xb3000000
argument_list|,
name|OP_C4X
argument_list|)
block|,
name|AU_CLASS_INSN
argument_list|(
literal|"lbu3"
argument_list|,
literal|0xb3800000
argument_list|,
name|OP_C4X
argument_list|)
block|,
name|AY_CLASS_INSN
argument_list|(
literal|"lda"
argument_list|,
literal|0x1e800000
argument_list|,
name|OP_C4X
argument_list|)
block|,
name|B_CLASS_INSN
argument_list|(
literal|"lde"
argument_list|,
literal|0x06800000
argument_list|,
name|OP_C3X
argument_list|)
block|,
block|{
literal|"ldep"
block|,
literal|0x76000000
block|,
literal|0xffe00000
block|,
literal|"X,R"
block|,
name|OP_C4X
block|}
block|,
comment|/* Z_CLASS */
name|B_CLASS_INSN
argument_list|(
literal|"ldf"
argument_list|,
literal|0x07000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|LL_CLASS_INSN
argument_list|(
literal|"ldf"
argument_list|,
literal|0xc4000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|P_CLASS_INSN
argument_list|(
literal|"ldf"
argument_list|,
literal|"stf"
argument_list|,
literal|0xd8000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|BB_CLASS_INSN
argument_list|(
literal|"ldfC"
argument_list|,
literal|0x00000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|B6_CLASS_INSN
argument_list|(
literal|"ldfi"
argument_list|,
literal|0x07800000
argument_list|,
name|OP_C3X
argument_list|)
block|,
block|{
literal|"ldhi"
block|,
literal|0x1fe00000
block|,
literal|0xffe00000
block|,
literal|"U,R"
block|,
name|OP_C4X
block|}
block|,
comment|/* Z_CLASS */
block|{
literal|"ldhi"
block|,
literal|0x1fe00000
block|,
literal|0xffe00000
block|,
literal|"#,R"
block|,
name|OP_C4X
block|}
block|,
comment|/* Z_CLASS */
name|A_CLASS_INSN
argument_list|(
literal|"ldi"
argument_list|,
literal|0x08000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|LL_CLASS_INSN
argument_list|(
literal|"ldi"
argument_list|,
literal|0xc6000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|P_CLASS_INSN
argument_list|(
literal|"ldi"
argument_list|,
literal|"sti"
argument_list|,
literal|0xda000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|AB_CLASS_INSN
argument_list|(
literal|"ldiC"
argument_list|,
literal|0x10000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|A6_CLASS_INSN
argument_list|(
literal|"ldii"
argument_list|,
literal|0x08800000
argument_list|,
name|OP_C3X
argument_list|)
block|,
block|{
literal|"ldp"
block|,
literal|0x50700000
block|,
literal|0xffff0000
block|,
literal|"#"
block|,
name|OP_C3X
block|}
block|,
comment|/* Z_CLASS - synonym for ldiu #,dp */
name|B_CLASS_INSN
argument_list|(
literal|"ldm"
argument_list|,
literal|0x09000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
block|{
literal|"ldpe"
block|,
literal|0x76800000
block|,
literal|0xffe00000
block|,
literal|"Q,Z"
block|,
name|OP_C4X
block|}
block|,
comment|/* Z_CLASS */
block|{
literal|"ldpk"
block|,
literal|0x1F700000
block|,
literal|0xffff0000
block|,
literal|"#"
block|,
name|OP_C4X
block|}
block|,
comment|/* Z_CLASS */
name|A_CLASS_INSN
argument_list|(
literal|"lh0"
argument_list|,
literal|0xba000000
argument_list|,
name|OP_C4X
argument_list|)
block|,
name|A_CLASS_INSN
argument_list|(
literal|"lh1"
argument_list|,
literal|0xba800000
argument_list|,
name|OP_C4X
argument_list|)
block|,
name|AU_CLASS_INSN
argument_list|(
literal|"lhu0"
argument_list|,
literal|0xbb000000
argument_list|,
name|OP_C4X
argument_list|)
block|,
name|AU_CLASS_INSN
argument_list|(
literal|"lhu1"
argument_list|,
literal|0xbb800000
argument_list|,
name|OP_C4X
argument_list|)
block|,
block|{
literal|"lopower"
block|,
literal|0x10800001
block|,
literal|0xffffffff
block|,
literal|""
block|,
name|OP_LPWR
block|}
block|,
comment|/* Z_CLASS */
name|A_CLASS_INSN
argument_list|(
literal|"lsh"
argument_list|,
literal|0x09800000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|T_CLASS_INSN
argument_list|(
literal|"lsh"
argument_list|,
literal|0x04000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|Q_CLASS_INSN
argument_list|(
literal|"lsh"
argument_list|,
literal|"sti"
argument_list|,
literal|0xdc000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|A_CLASS_INSN
argument_list|(
literal|"lwl0"
argument_list|,
literal|0xb4000000
argument_list|,
name|OP_C4X
argument_list|)
block|,
name|A_CLASS_INSN
argument_list|(
literal|"lwl1"
argument_list|,
literal|0xb4800000
argument_list|,
name|OP_C4X
argument_list|)
block|,
name|A_CLASS_INSN
argument_list|(
literal|"lwl2"
argument_list|,
literal|0xb5000000
argument_list|,
name|OP_C4X
argument_list|)
block|,
name|A_CLASS_INSN
argument_list|(
literal|"lwl3"
argument_list|,
literal|0xb5800000
argument_list|,
name|OP_C4X
argument_list|)
block|,
name|A_CLASS_INSN
argument_list|(
literal|"lwr0"
argument_list|,
literal|0xb6000000
argument_list|,
name|OP_C4X
argument_list|)
block|,
name|A_CLASS_INSN
argument_list|(
literal|"lwr1"
argument_list|,
literal|0xb6800000
argument_list|,
name|OP_C4X
argument_list|)
block|,
name|A_CLASS_INSN
argument_list|(
literal|"lwr2"
argument_list|,
literal|0xb7000000
argument_list|,
name|OP_C4X
argument_list|)
block|,
name|A_CLASS_INSN
argument_list|(
literal|"lwr3"
argument_list|,
literal|0xb7800000
argument_list|,
name|OP_C4X
argument_list|)
block|,
block|{
literal|"maxspeed"
block|,
literal|0x10800000
block|,
literal|0xffffffff
block|,
literal|""
block|,
name|OP_LPWR
block|}
block|,
comment|/* Z_CLASS */
name|A_CLASS_INSN
argument_list|(
literal|"mb0"
argument_list|,
literal|0xb8000000
argument_list|,
name|OP_C4X
argument_list|)
block|,
name|A_CLASS_INSN
argument_list|(
literal|"mb1"
argument_list|,
literal|0xb8800000
argument_list|,
name|OP_C4X
argument_list|)
block|,
name|A_CLASS_INSN
argument_list|(
literal|"mb2"
argument_list|,
literal|0xb9000000
argument_list|,
name|OP_C4X
argument_list|)
block|,
name|A_CLASS_INSN
argument_list|(
literal|"mb3"
argument_list|,
literal|0xb9800000
argument_list|,
name|OP_C4X
argument_list|)
block|,
name|A_CLASS_INSN
argument_list|(
literal|"mh0"
argument_list|,
literal|0xbc000000
argument_list|,
name|OP_C4X
argument_list|)
block|,
name|A_CLASS_INSN
argument_list|(
literal|"mh1"
argument_list|,
literal|0xbc800000
argument_list|,
name|OP_C4X
argument_list|)
block|,
name|A_CLASS_INSN
argument_list|(
literal|"mh2"
argument_list|,
literal|0xbd000000
argument_list|,
name|OP_C4X
argument_list|)
block|,
name|A_CLASS_INSN
argument_list|(
literal|"mh3"
argument_list|,
literal|0xbd800000
argument_list|,
name|OP_C4X
argument_list|)
block|,
name|B_CLASS_INSN
argument_list|(
literal|"mpyf"
argument_list|,
literal|0x0a000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|SC_CLASS_INSN
argument_list|(
literal|"mpyf"
argument_list|,
literal|0x04800000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|M_CLASS_INSN
argument_list|(
literal|"mpyf"
argument_list|,
literal|"addf"
argument_list|,
literal|0x80000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|QC_CLASS_INSN
argument_list|(
literal|"mpyf"
argument_list|,
literal|"stf"
argument_list|,
literal|0xde000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|M_CLASS_INSN
argument_list|(
literal|"mpyf"
argument_list|,
literal|"subf"
argument_list|,
literal|0x84000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|A_CLASS_INSN
argument_list|(
literal|"mpyi"
argument_list|,
literal|0x0a800000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|TC_CLASS_INSN
argument_list|(
literal|"mpyi"
argument_list|,
literal|0x05000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|M_CLASS_INSN
argument_list|(
literal|"mpyi"
argument_list|,
literal|"addi"
argument_list|,
literal|0x88000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|QC_CLASS_INSN
argument_list|(
literal|"mpyi"
argument_list|,
literal|"sti"
argument_list|,
literal|0xe0000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|M_CLASS_INSN
argument_list|(
literal|"mpyi"
argument_list|,
literal|"subi"
argument_list|,
literal|0x8c000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|A_CLASS_INSN
argument_list|(
literal|"mpyshi"
argument_list|,
literal|0x1d800000
argument_list|,
name|OP_C4X
argument_list|)
block|,
name|TC_CLASS_INSN
argument_list|(
literal|"mpyshi"
argument_list|,
literal|0x28800000
argument_list|,
name|OP_C4X
argument_list|)
block|,
name|A_CLASS_INSN
argument_list|(
literal|"mpyuhi"
argument_list|,
literal|0x1e000000
argument_list|,
name|OP_C4X
argument_list|)
block|,
name|TC_CLASS_INSN
argument_list|(
literal|"mpyuhi"
argument_list|,
literal|0x29000000
argument_list|,
name|OP_C4X
argument_list|)
block|,
name|A_CLASS_INSN
argument_list|(
literal|"negb"
argument_list|,
literal|0x0b000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|B_CLASS_INSN
argument_list|(
literal|"negf"
argument_list|,
literal|0x0b800000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|P_CLASS_INSN
argument_list|(
literal|"negf"
argument_list|,
literal|"stf"
argument_list|,
literal|0xe2000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|A_CLASS_INSN
argument_list|(
literal|"negi"
argument_list|,
literal|0x0c000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|P_CLASS_INSN
argument_list|(
literal|"negi"
argument_list|,
literal|"sti"
argument_list|,
literal|0xe4000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|A2_CLASS_INSN
argument_list|(
literal|"nop"
argument_list|,
literal|0x0c800000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|B_CLASS_INSN
argument_list|(
literal|"norm"
argument_list|,
literal|0x0d000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|AU_CLASS_INSN
argument_list|(
literal|"not"
argument_list|,
literal|0x0d800000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|P_CLASS_INSN
argument_list|(
literal|"not"
argument_list|,
literal|"sti"
argument_list|,
literal|0xe6000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|AU_CLASS_INSN
argument_list|(
literal|"or"
argument_list|,
literal|0x10000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|TC_CLASS_INSN
argument_list|(
literal|"or"
argument_list|,
literal|0x05800000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|QC_CLASS_INSN
argument_list|(
literal|"or"
argument_list|,
literal|"sti"
argument_list|,
literal|0xe8000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|R_CLASS_INSN
argument_list|(
literal|"pop"
argument_list|,
literal|0x0e200000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|RF_CLASS_INSN
argument_list|(
literal|"popf"
argument_list|,
literal|0x0ea00000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|R_CLASS_INSN
argument_list|(
literal|"push"
argument_list|,
literal|0x0f200000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|RF_CLASS_INSN
argument_list|(
literal|"pushf"
argument_list|,
literal|0x0fa00000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|BA_CLASS_INSN
argument_list|(
literal|"rcpf"
argument_list|,
literal|0x1d000000
argument_list|,
name|OP_C4X
argument_list|)
block|,
block|{
literal|"retiB"
block|,
literal|0x78000000
block|,
literal|0xffe00000
block|,
literal|""
block|,
name|OP_C3X
block|}
block|,
comment|/* Z_CLASS */
block|{
literal|"reti"
block|,
literal|0x78000000
block|,
literal|0xffe00000
block|,
literal|""
block|,
name|OP_C3X
block|}
block|,
comment|/* Z_CLASS  - Alias for retiu */
block|{
literal|"retiBd"
block|,
literal|0x78200000
block|,
literal|0xffe00000
block|,
literal|""
block|,
name|OP_C4X
block|}
block|,
comment|/* Z_CLASS */
block|{
literal|"retid"
block|,
literal|0x78200000
block|,
literal|0xffe00000
block|,
literal|""
block|,
name|OP_C4X
block|}
block|,
comment|/* Z_CLASS - Alias for retiud */
block|{
literal|"retsB"
block|,
literal|0x78800000
block|,
literal|0xffe00000
block|,
literal|""
block|,
name|OP_C3X
block|}
block|,
comment|/* Z_CLASS */
block|{
literal|"rets"
block|,
literal|0x78800000
block|,
literal|0xffe00000
block|,
literal|""
block|,
name|OP_C3X
block|}
block|,
comment|/* Z_CLASS  - Alias for retsu */
name|B_CLASS_INSN
argument_list|(
literal|"rnd"
argument_list|,
literal|0x11000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|R_CLASS_INSN
argument_list|(
literal|"rol"
argument_list|,
literal|0x11e00001
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|R_CLASS_INSN
argument_list|(
literal|"rolc"
argument_list|,
literal|0x12600001
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|R_CLASS_INSN
argument_list|(
literal|"ror"
argument_list|,
literal|0x12e0ffff
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|R_CLASS_INSN
argument_list|(
literal|"rorc"
argument_list|,
literal|0x1360ffff
argument_list|,
name|OP_C3X
argument_list|)
block|,
block|{
literal|"rptb"
block|,
literal|0x64000000
block|,
literal|0xff000000
block|,
literal|"B"
block|,
name|OP_C3X
block|}
block|,
comment|/* I2_CLASS */
block|{
literal|"rptb"
block|,
literal|0x79000000
block|,
literal|0xff000000
block|,
literal|"Q"
block|,
name|OP_C4X
block|}
block|,
comment|/* I2_CLASS */
block|{
literal|"rptbd"
block|,
literal|0x65000000
block|,
literal|0xff000000
block|,
literal|"B"
block|,
name|OP_C4X
block|}
block|,
comment|/* I2_CLASS */
block|{
literal|"rptbd"
block|,
literal|0x79800000
block|,
literal|0xff000000
block|,
literal|"Q"
block|,
name|OP_C4X
block|}
block|,
comment|/* I2_CLASS */
name|A3_CLASS_INSN
argument_list|(
literal|"rpts"
argument_list|,
literal|0x139b0000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|B_CLASS_INSN
argument_list|(
literal|"rsqrf"
argument_list|,
literal|0x1c800000
argument_list|,
name|OP_C4X
argument_list|)
block|,
block|{
literal|"sigi"
block|,
literal|0x16000000
block|,
literal|0xffe00000
block|,
literal|""
block|,
name|OP_C3X
block|}
block|,
comment|/* Z_CLASS */
name|A6_CLASS_INSN
argument_list|(
literal|"sigi"
argument_list|,
literal|0x16000000
argument_list|,
name|OP_C4X
argument_list|)
block|,
name|B7_CLASS_INSN
argument_list|(
literal|"stf"
argument_list|,
literal|0x14000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|LS_CLASS_INSN
argument_list|(
literal|"stf"
argument_list|,
literal|0xc0000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|B7_CLASS_INSN
argument_list|(
literal|"stfi"
argument_list|,
literal|0x14800000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|A7_CLASS_INSN
argument_list|(
literal|"sti"
argument_list|,
literal|0x15000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
block|{
literal|"sti"
block|,
literal|0x15000000
block|,
literal|0xffe00000
block|,
literal|"T,@"
block|,
name|OP_C4X
block|}
block|,
comment|/* Class A7 - Alias for stik */
block|{
literal|"sti"
block|,
literal|0x15600000
block|,
literal|0xffe00000
block|,
literal|"T,*"
block|,
name|OP_C4X
block|}
block|,
comment|/* Class A7 */
name|LS_CLASS_INSN
argument_list|(
literal|"sti"
argument_list|,
literal|0xc2000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|A7_CLASS_INSN
argument_list|(
literal|"stii"
argument_list|,
literal|0x15800000
argument_list|,
name|OP_C3X
argument_list|)
block|,
block|{
literal|"stik"
block|,
literal|0x15000000
block|,
literal|0xffe00000
block|,
literal|"T,@"
block|,
name|OP_C4X
block|}
block|,
comment|/* Z_CLASS */
block|{
literal|"stik"
block|,
literal|0x15600000
block|,
literal|0xffe00000
block|,
literal|"T,*"
block|,
name|OP_C4X
block|}
block|,
comment|/* Z_CLASS */
name|A_CLASS_INSN
argument_list|(
literal|"subb"
argument_list|,
literal|0x16800000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|T_CLASS_INSN
argument_list|(
literal|"subb"
argument_list|,
literal|0x06000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|A_CLASS_INSN
argument_list|(
literal|"subc"
argument_list|,
literal|0x17000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|B_CLASS_INSN
argument_list|(
literal|"subf"
argument_list|,
literal|0x17800000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|S_CLASS_INSN
argument_list|(
literal|"subf"
argument_list|,
literal|0x06800000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|Q_CLASS_INSN
argument_list|(
literal|"subf"
argument_list|,
literal|"stf"
argument_list|,
literal|0xea000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|A_CLASS_INSN
argument_list|(
literal|"subi"
argument_list|,
literal|0x18000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|T_CLASS_INSN
argument_list|(
literal|"subi"
argument_list|,
literal|0x07000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|Q_CLASS_INSN
argument_list|(
literal|"subi"
argument_list|,
literal|"sti"
argument_list|,
literal|0xec000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|A_CLASS_INSN
argument_list|(
literal|"subrb"
argument_list|,
literal|0x18800000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|B_CLASS_INSN
argument_list|(
literal|"subrf"
argument_list|,
literal|0x19000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|A_CLASS_INSN
argument_list|(
literal|"subri"
argument_list|,
literal|0x19800000
argument_list|,
name|OP_C3X
argument_list|)
block|,
block|{
literal|"swi"
block|,
literal|0x66000000
block|,
literal|0xffffffff
block|,
literal|""
block|,
name|OP_C3X
block|}
block|,
comment|/* Z_CLASS */
name|B_CLASS_INSN
argument_list|(
literal|"toieee"
argument_list|,
literal|0x1b800000
argument_list|,
name|OP_C4X
argument_list|)
block|,
name|P_CLASS_INSN
argument_list|(
literal|"toieee"
argument_list|,
literal|"stf"
argument_list|,
literal|0xf0000000
argument_list|,
name|OP_C4X
argument_list|)
block|,
block|{
literal|"trapB"
block|,
literal|0x74000000
block|,
literal|0xffe00000
block|,
literal|"V"
block|,
name|OP_C3X
block|}
block|,
comment|/* Z_CLASS */
block|{
literal|"trap"
block|,
literal|0x74000000
block|,
literal|0xffe00000
block|,
literal|"V"
block|,
name|OP_C3X
block|}
block|,
comment|/* Z_CLASS - Alias for trapu */
name|AU_CLASS_INSN
argument_list|(
literal|"tstb"
argument_list|,
literal|0x1a000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|T2C_CLASS_INSN
argument_list|(
literal|"tstb"
argument_list|,
literal|0x07800000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|AU_CLASS_INSN
argument_list|(
literal|"xor"
argument_list|,
literal|0x1a800000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|TC_CLASS_INSN
argument_list|(
literal|"xor"
argument_list|,
literal|0x08000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
name|QC_CLASS_INSN
argument_list|(
literal|"xor"
argument_list|,
literal|"sti"
argument_list|,
literal|0xee000000
argument_list|,
name|OP_C3X
argument_list|)
block|,
comment|/* Dummy entry, not included in tic4x_num_insts.  This      lets code examine entry i + 1 without checking      if we've run off the end of the table.  */
block|{
literal|""
block|,
literal|0x0
block|,
literal|0x00
block|,
literal|""
block|,
literal|0
block|}
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|unsigned
name|int
name|tic4x_num_insts
init|=
operator|(
operator|(
operator|(
sizeof|sizeof
name|tic4x_insts
operator|)
operator|/
operator|(
sizeof|sizeof
name|tic4x_insts
index|[
literal|0
index|]
operator|)
operator|)
operator|-
literal|1
operator|)
decl_stmt|;
end_decl_stmt

end_unit

