begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Opcode table for the Atmel AVR micro controllers.     Copyright 2000 Free Software Foundation, Inc.    Contributed by Denis Chertykov<denisc@overta.ru>        This program is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 2, or (at your option)    any later version.     This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.     You should have received a copy of the GNU General Public License    along with this program; if not, write to the Free Software    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
end_comment

begin_define
define|#
directive|define
name|AVR_ISA_1200
value|0x0001
end_define

begin_comment
comment|/* in the beginning there was ... */
end_comment

begin_define
define|#
directive|define
name|AVR_ISA_LPM
value|0x0002
end_define

begin_comment
comment|/* device has LPM */
end_comment

begin_define
define|#
directive|define
name|AVR_ISA_LPMX
value|0x0004
end_define

begin_comment
comment|/* device has LPM Rd,Z[+] */
end_comment

begin_define
define|#
directive|define
name|AVR_ISA_SRAM
value|0x0008
end_define

begin_comment
comment|/* device has SRAM (LD, ST, PUSH, POP, ...) */
end_comment

begin_define
define|#
directive|define
name|AVR_ISA_MEGA
value|0x0020
end_define

begin_comment
comment|/* device has>8K program memory (JMP and CALL 				supported, no 8K wrap on RJMP and RCALL) */
end_comment

begin_define
define|#
directive|define
name|AVR_ISA_MUL
value|0x0040
end_define

begin_comment
comment|/* device has new core (MUL, MOVW, ...) */
end_comment

begin_define
define|#
directive|define
name|AVR_ISA_ELPM
value|0x0080
end_define

begin_comment
comment|/* device has>64K program memory (ELPM) */
end_comment

begin_define
define|#
directive|define
name|AVR_ISA_ELPMX
value|0x0100
end_define

begin_comment
comment|/* device has ELPM Rd,Z[+] */
end_comment

begin_define
define|#
directive|define
name|AVR_ISA_SPM
value|0x0200
end_define

begin_comment
comment|/* device can program itself */
end_comment

begin_define
define|#
directive|define
name|AVR_ISA_BRK
value|0x0400
end_define

begin_comment
comment|/* device has BREAK (on-chip debug) */
end_comment

begin_define
define|#
directive|define
name|AVR_ISA_EIND
value|0x0800
end_define

begin_comment
comment|/* device has>128K program memory (none yet) */
end_comment

begin_define
define|#
directive|define
name|AVR_ISA_TINY1
value|(AVR_ISA_1200 | AVR_ISA_LPM)
end_define

begin_define
define|#
directive|define
name|AVR_ISA_2xxx
value|(AVR_ISA_TINY1 | AVR_ISA_SRAM)
end_define

begin_define
define|#
directive|define
name|AVR_ISA_M8
value|(AVR_ISA_2xxx | AVR_ISA_MUL | AVR_ISA_LPMX | AVR_ISA_SPM)
end_define

begin_define
define|#
directive|define
name|AVR_ISA_M603
value|(AVR_ISA_2xxx | AVR_ISA_MEGA)
end_define

begin_define
define|#
directive|define
name|AVR_ISA_M103
value|(AVR_ISA_M603 | AVR_ISA_ELPM)
end_define

begin_define
define|#
directive|define
name|AVR_ISA_M161
value|(AVR_ISA_M603 | AVR_ISA_MUL | AVR_ISA_LPMX | AVR_ISA_SPM)
end_define

begin_define
define|#
directive|define
name|AVR_ISA_94K
value|(AVR_ISA_M603 | AVR_ISA_MUL | AVR_ISA_LPMX)
end_define

begin_define
define|#
directive|define
name|AVR_ISA_M323
value|(AVR_ISA_M161 | AVR_ISA_BRK)
end_define

begin_define
define|#
directive|define
name|AVR_ISA_M128
value|(AVR_ISA_M323 | AVR_ISA_ELPM | AVR_ISA_ELPMX)
end_define

begin_define
define|#
directive|define
name|AVR_ISA_ALL
value|0xFFFF
end_define

begin_define
define|#
directive|define
name|REGISTER_P
parameter_list|(
name|x
parameter_list|)
value|((x) == 'r'		\ 		       || (x) == 'd'		\ 		       || (x) == 'w'		\ 		       || (x) == 'a'		\ 		       || (x) == 'v')
end_define

begin_comment
comment|/* Undefined combination of operands - does the register    operand overlap with pre-decremented or post-incremented    pointer register (like ld r31,Z+)?  */
end_comment

begin_define
define|#
directive|define
name|AVR_UNDEF_P
parameter_list|(
name|x
parameter_list|)
value|(((x)& 0xFFED) == 0x91E5 ||		\   ((x)& 0xFDEF) == 0x91AD || ((x)& 0xFDEF) == 0x91AE ||	\   ((x)& 0xFDEF) == 0x91C9 || ((x)& 0xFDEF) == 0x91CA ||	\   ((x)& 0xFDEF) == 0x91E1 || ((x)& 0xFDEF) == 0x91E2)
end_define

begin_comment
comment|/* Is this a skip instruction {cpse,sbic,sbis,sbrc,sbrs}?  */
end_comment

begin_define
define|#
directive|define
name|AVR_SKIP_P
parameter_list|(
name|x
parameter_list|)
value|(((x)& 0xFC00) == 0x1000 ||		\   ((x)& 0xFD00) == 0x9900 || ((x)& 0xFC08) == 0xFC00)
end_define

begin_comment
comment|/* Is this `ldd r,b+0' or `std b+0,r' (b={Y,Z}, disassembled as    `ld r,b' or `st b,r' respectively - next opcode entry)?  */
end_comment

begin_define
define|#
directive|define
name|AVR_DISP0_P
parameter_list|(
name|x
parameter_list|)
value|(((x)& 0xFC07) == 0x8000)
end_define

begin_comment
comment|/* constraint letters    r - any register    d - `ldi' register (r16-r31)    v - `movw' even register (r0, r2, ..., r28, r30)    a - `fmul' register (r16-r23)    w - `adiw' register (r24,r26,r28,r30)    e - pointer registers (X,Y,Z)    b - base pointer register and displacement ([YZ]+disp)    z - Z pointer register (for [e]lpm Rd,Z[+])    M - immediate value from 0 to 255    n - immediate value from 0 to 255 ( n = ~M ). Relocation impossible    s - immediate value from 0 to 7    P - Port address value from 0 to 63. (in, out)    p - Port address value from 0 to 31. (cbi, sbi, sbic, sbis)    K - immediate value from 0 to 63 (used in `adiw', `sbiw')    i - immediate value    l - signed pc relative offset from -64 to 63    L - signed pc relative offset from -2048 to 2047    h - absolute code address (call, jmp)    S - immediate value from 0 to 7 (S = s<< 4)    ? - use this opcode entry if no parameters, else use next opcode entry     Order is important - some binary opcodes have more than one name,    the disassembler will only see the first match.     Remaining undefined opcodes (1699 total - some of them might work    as normal instructions if not all of the bits are decoded):      0x0001...0x00ff    (255) (known to be decoded as `nop' by the old core)    "100100xxxxxxx011"  (128) 0x9[0-3][0-9a-f][3b]    "100100xxxxxx1000"   (64) 0x9[0-3][0-9a-f]8    "1001001xxxxx01xx"  (128) 0x9[23][0-9a-f][4-7]    "1001010xxxxx0100"   (32) 0x9[45][0-9a-f]4    "1001010x001x1001"    (4) 0x9[45][23]9    "1001010x01xx1001"    (8) 0x9[45][4-7]9    "1001010x1xxx1001"   (16) 0x9[45][8-9a-f]9    "1001010xxxxx1011"   (32) 0x9[45][0-9a-f]b    "10010101001x1000"    (2) 0x95[23]8    "1001010101xx1000"    (4) 0x95[4-7]8    "1001010110111000"    (1) 0x95b8    "1001010111111000"    (1) 0x95f8 (`espm' removed in databook update)    "11111xxxxxxx1xxx" (1024) 0xf[8-9a-f][0-9a-f][8-9a-f]  */
end_comment

begin_macro
name|AVR_INSN
argument_list|(
argument|clc
argument_list|,
literal|""
argument_list|,
literal|"1001010010001000"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x9488
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|clh
argument_list|,
literal|""
argument_list|,
literal|"1001010011011000"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x94d8
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|cli
argument_list|,
literal|""
argument_list|,
literal|"1001010011111000"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x94f8
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|cln
argument_list|,
literal|""
argument_list|,
literal|"1001010010101000"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x94a8
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|cls
argument_list|,
literal|""
argument_list|,
literal|"1001010011001000"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x94c8
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|clt
argument_list|,
literal|""
argument_list|,
literal|"1001010011101000"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x94e8
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|clv
argument_list|,
literal|""
argument_list|,
literal|"1001010010111000"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x94b8
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|clz
argument_list|,
literal|""
argument_list|,
literal|"1001010010011000"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x9498
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|sec
argument_list|,
literal|""
argument_list|,
literal|"1001010000001000"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x9408
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|seh
argument_list|,
literal|""
argument_list|,
literal|"1001010001011000"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x9458
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|sei
argument_list|,
literal|""
argument_list|,
literal|"1001010001111000"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x9478
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|sen
argument_list|,
literal|""
argument_list|,
literal|"1001010000101000"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x9428
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|ses
argument_list|,
literal|""
argument_list|,
literal|"1001010001001000"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x9448
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|set
argument_list|,
literal|""
argument_list|,
literal|"1001010001101000"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x9468
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|sev
argument_list|,
literal|""
argument_list|,
literal|"1001010000111000"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x9438
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|sez
argument_list|,
literal|""
argument_list|,
literal|"1001010000011000"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x9418
argument_list|)
end_macro

begin_comment
comment|/* Same as {cl,se}[chinstvz] above.  */
end_comment

begin_macro
name|AVR_INSN
argument_list|(
argument|bclr
argument_list|,
literal|"S"
argument_list|,
literal|"100101001SSS1000"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x9488
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|bset
argument_list|,
literal|"S"
argument_list|,
literal|"100101000SSS1000"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x9408
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|icall
argument_list|,
literal|""
argument_list|,
literal|"1001010100001001"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_2xxx
argument_list|,
literal|0x9509
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|ijmp
argument_list|,
literal|""
argument_list|,
literal|"1001010000001001"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_2xxx
argument_list|,
literal|0x9409
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|lpm
argument_list|,
literal|"?"
argument_list|,
literal|"1001010111001000"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_TINY1
argument_list|,
literal|0x95c8
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|lpm
argument_list|,
literal|"r,z"
argument_list|,
literal|"1001000ddddd010+"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_LPMX
argument_list|,
literal|0x9004
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|elpm
argument_list|,
literal|"?"
argument_list|,
literal|"1001010111011000"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_ELPM
argument_list|,
literal|0x95d8
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|elpm
argument_list|,
literal|"r,z"
argument_list|,
literal|"1001000ddddd011+"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_ELPMX
argument_list|,
literal|0x9006
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|nop
argument_list|,
literal|""
argument_list|,
literal|"0000000000000000"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x0000
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|ret
argument_list|,
literal|""
argument_list|,
literal|"1001010100001000"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x9508
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|reti
argument_list|,
literal|""
argument_list|,
literal|"1001010100011000"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x9518
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|sleep
argument_list|,
literal|""
argument_list|,
literal|"1001010110001000"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x9588
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|break
argument_list|,
literal|""
argument_list|,
literal|"1001010110011000"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_BRK
argument_list|,
literal|0x9598
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|wdr
argument_list|,
literal|""
argument_list|,
literal|"1001010110101000"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x95a8
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|spm
argument_list|,
literal|""
argument_list|,
literal|"1001010111101000"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_SPM
argument_list|,
literal|0x95e8
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|adc
argument_list|,
literal|"r,r"
argument_list|,
literal|"000111rdddddrrrr"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x1c00
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|add
argument_list|,
literal|"r,r"
argument_list|,
literal|"000011rdddddrrrr"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x0c00
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|and
argument_list|,
literal|"r,r"
argument_list|,
literal|"001000rdddddrrrr"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x2000
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|cp
argument_list|,
literal|"r,r"
argument_list|,
literal|"000101rdddddrrrr"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x1400
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|cpc
argument_list|,
literal|"r,r"
argument_list|,
literal|"000001rdddddrrrr"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x0400
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|cpse
argument_list|,
literal|"r,r"
argument_list|,
literal|"000100rdddddrrrr"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x1000
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|eor
argument_list|,
literal|"r,r"
argument_list|,
literal|"001001rdddddrrrr"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x2400
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|mov
argument_list|,
literal|"r,r"
argument_list|,
literal|"001011rdddddrrrr"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x2c00
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|mul
argument_list|,
literal|"r,r"
argument_list|,
literal|"100111rdddddrrrr"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_MUL
argument_list|,
literal|0x9c00
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|or
argument_list|,
literal|"r,r"
argument_list|,
literal|"001010rdddddrrrr"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x2800
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|sbc
argument_list|,
literal|"r,r"
argument_list|,
literal|"000010rdddddrrrr"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x0800
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|sub
argument_list|,
literal|"r,r"
argument_list|,
literal|"000110rdddddrrrr"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x1800
argument_list|)
end_macro

begin_comment
comment|/* Shorthand for {eor,add,adc,and} r,r above.  */
end_comment

begin_macro
name|AVR_INSN
argument_list|(
argument|clr
argument_list|,
literal|"r=r"
argument_list|,
literal|"001001rdddddrrrr"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x2400
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|lsl
argument_list|,
literal|"r=r"
argument_list|,
literal|"000011rdddddrrrr"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x0c00
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|rol
argument_list|,
literal|"r=r"
argument_list|,
literal|"000111rdddddrrrr"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x1c00
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|tst
argument_list|,
literal|"r=r"
argument_list|,
literal|"001000rdddddrrrr"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x2000
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|andi
argument_list|,
literal|"d,M"
argument_list|,
literal|"0111KKKKddddKKKK"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x7000
argument_list|)
end_macro

begin_comment
comment|/*XXX special case*/
end_comment

begin_macro
name|AVR_INSN
argument_list|(
argument|cbr
argument_list|,
literal|"d,n"
argument_list|,
literal|"0111KKKKddddKKKK"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x7000
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|ldi
argument_list|,
literal|"d,M"
argument_list|,
literal|"1110KKKKddddKKKK"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0xe000
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|ser
argument_list|,
literal|"d"
argument_list|,
literal|"11101111dddd1111"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0xef0f
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|ori
argument_list|,
literal|"d,M"
argument_list|,
literal|"0110KKKKddddKKKK"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x6000
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|sbr
argument_list|,
literal|"d,M"
argument_list|,
literal|"0110KKKKddddKKKK"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x6000
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|cpi
argument_list|,
literal|"d,M"
argument_list|,
literal|"0011KKKKddddKKKK"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x3000
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|sbci
argument_list|,
literal|"d,M"
argument_list|,
literal|"0100KKKKddddKKKK"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x4000
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|subi
argument_list|,
literal|"d,M"
argument_list|,
literal|"0101KKKKddddKKKK"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x5000
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|sbrc
argument_list|,
literal|"r,s"
argument_list|,
literal|"1111110rrrrr0sss"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0xfc00
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|sbrs
argument_list|,
literal|"r,s"
argument_list|,
literal|"1111111rrrrr0sss"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0xfe00
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|bld
argument_list|,
literal|"r,s"
argument_list|,
literal|"1111100ddddd0sss"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0xf800
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|bst
argument_list|,
literal|"r,s"
argument_list|,
literal|"1111101ddddd0sss"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0xfa00
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|in
argument_list|,
literal|"r,P"
argument_list|,
literal|"10110PPdddddPPPP"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0xb000
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|out
argument_list|,
literal|"P,r"
argument_list|,
literal|"10111PPrrrrrPPPP"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0xb800
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|adiw
argument_list|,
literal|"w,K"
argument_list|,
literal|"10010110KKddKKKK"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_2xxx
argument_list|,
literal|0x9600
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|sbiw
argument_list|,
literal|"w,K"
argument_list|,
literal|"10010111KKddKKKK"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_2xxx
argument_list|,
literal|0x9700
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|cbi
argument_list|,
literal|"p,s"
argument_list|,
literal|"10011000pppppsss"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x9800
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|sbi
argument_list|,
literal|"p,s"
argument_list|,
literal|"10011010pppppsss"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x9a00
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|sbic
argument_list|,
literal|"p,s"
argument_list|,
literal|"10011001pppppsss"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x9900
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|sbis
argument_list|,
literal|"p,s"
argument_list|,
literal|"10011011pppppsss"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x9b00
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|brcc
argument_list|,
literal|"l"
argument_list|,
literal|"111101lllllll000"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0xf400
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|brcs
argument_list|,
literal|"l"
argument_list|,
literal|"111100lllllll000"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0xf000
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|breq
argument_list|,
literal|"l"
argument_list|,
literal|"111100lllllll001"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0xf001
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|brge
argument_list|,
literal|"l"
argument_list|,
literal|"111101lllllll100"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0xf404
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|brhc
argument_list|,
literal|"l"
argument_list|,
literal|"111101lllllll101"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0xf405
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|brhs
argument_list|,
literal|"l"
argument_list|,
literal|"111100lllllll101"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0xf005
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|brid
argument_list|,
literal|"l"
argument_list|,
literal|"111101lllllll111"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0xf407
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|brie
argument_list|,
literal|"l"
argument_list|,
literal|"111100lllllll111"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0xf007
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|brlo
argument_list|,
literal|"l"
argument_list|,
literal|"111100lllllll000"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0xf000
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|brlt
argument_list|,
literal|"l"
argument_list|,
literal|"111100lllllll100"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0xf004
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|brmi
argument_list|,
literal|"l"
argument_list|,
literal|"111100lllllll010"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0xf002
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|brne
argument_list|,
literal|"l"
argument_list|,
literal|"111101lllllll001"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0xf401
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|brpl
argument_list|,
literal|"l"
argument_list|,
literal|"111101lllllll010"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0xf402
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|brsh
argument_list|,
literal|"l"
argument_list|,
literal|"111101lllllll000"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0xf400
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|brtc
argument_list|,
literal|"l"
argument_list|,
literal|"111101lllllll110"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0xf406
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|brts
argument_list|,
literal|"l"
argument_list|,
literal|"111100lllllll110"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0xf006
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|brvc
argument_list|,
literal|"l"
argument_list|,
literal|"111101lllllll011"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0xf403
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|brvs
argument_list|,
literal|"l"
argument_list|,
literal|"111100lllllll011"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0xf003
argument_list|)
end_macro

begin_comment
comment|/* Same as br?? above.  */
end_comment

begin_macro
name|AVR_INSN
argument_list|(
argument|brbc
argument_list|,
literal|"s,l"
argument_list|,
literal|"111101lllllllsss"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0xf400
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|brbs
argument_list|,
literal|"s,l"
argument_list|,
literal|"111100lllllllsss"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0xf000
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|rcall
argument_list|,
literal|"L"
argument_list|,
literal|"1101LLLLLLLLLLLL"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0xd000
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|rjmp
argument_list|,
literal|"L"
argument_list|,
literal|"1100LLLLLLLLLLLL"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0xc000
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|call
argument_list|,
literal|"h"
argument_list|,
literal|"1001010hhhhh111h"
argument_list|,
literal|2
argument_list|,
argument|AVR_ISA_MEGA
argument_list|,
literal|0x940e
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|jmp
argument_list|,
literal|"h"
argument_list|,
literal|"1001010hhhhh110h"
argument_list|,
literal|2
argument_list|,
argument|AVR_ISA_MEGA
argument_list|,
literal|0x940c
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|asr
argument_list|,
literal|"r"
argument_list|,
literal|"1001010rrrrr0101"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x9405
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|com
argument_list|,
literal|"r"
argument_list|,
literal|"1001010rrrrr0000"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x9400
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|dec
argument_list|,
literal|"r"
argument_list|,
literal|"1001010rrrrr1010"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x940a
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|inc
argument_list|,
literal|"r"
argument_list|,
literal|"1001010rrrrr0011"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x9403
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|lsr
argument_list|,
literal|"r"
argument_list|,
literal|"1001010rrrrr0110"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x9406
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|neg
argument_list|,
literal|"r"
argument_list|,
literal|"1001010rrrrr0001"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x9401
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|pop
argument_list|,
literal|"r"
argument_list|,
literal|"1001000rrrrr1111"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_2xxx
argument_list|,
literal|0x900f
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|push
argument_list|,
literal|"r"
argument_list|,
literal|"1001001rrrrr1111"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_2xxx
argument_list|,
literal|0x920f
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|ror
argument_list|,
literal|"r"
argument_list|,
literal|"1001010rrrrr0111"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x9407
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|swap
argument_list|,
literal|"r"
argument_list|,
literal|"1001010rrrrr0010"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x9402
argument_list|)
end_macro

begin_comment
comment|/* Known to be decoded as `nop' by the old core.  */
end_comment

begin_macro
name|AVR_INSN
argument_list|(
argument|movw
argument_list|,
literal|"v,v"
argument_list|,
literal|"00000001ddddrrrr"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_MUL
argument_list|,
literal|0x0100
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|muls
argument_list|,
literal|"d,d"
argument_list|,
literal|"00000010ddddrrrr"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_MUL
argument_list|,
literal|0x0200
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|mulsu
argument_list|,
literal|"a,a"
argument_list|,
literal|"000000110ddd0rrr"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_MUL
argument_list|,
literal|0x0300
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|fmul
argument_list|,
literal|"a,a"
argument_list|,
literal|"000000110ddd1rrr"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_MUL
argument_list|,
literal|0x0308
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|fmuls
argument_list|,
literal|"a,a"
argument_list|,
literal|"000000111ddd0rrr"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_MUL
argument_list|,
literal|0x0380
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|fmulsu
argument_list|,
literal|"a,a"
argument_list|,
literal|"000000111ddd1rrr"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_MUL
argument_list|,
literal|0x0388
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|sts
argument_list|,
literal|"i,r"
argument_list|,
literal|"1001001ddddd0000"
argument_list|,
literal|2
argument_list|,
argument|AVR_ISA_2xxx
argument_list|,
literal|0x9200
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|lds
argument_list|,
literal|"r,i"
argument_list|,
literal|"1001000ddddd0000"
argument_list|,
literal|2
argument_list|,
argument|AVR_ISA_2xxx
argument_list|,
literal|0x9000
argument_list|)
end_macro

begin_comment
comment|/* Special case for b+0, `e' must be next entry after `b',       b={Y=1,Z=0}, ee={X=11,Y=10,Z=00}, !=1 if -e or e+ or X.  */
end_comment

begin_macro
name|AVR_INSN
argument_list|(
argument|ldd
argument_list|,
literal|"r,b"
argument_list|,
literal|"10o0oo0dddddbooo"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_2xxx
argument_list|,
literal|0x8000
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|ld
argument_list|,
literal|"r,e"
argument_list|,
literal|"100!000dddddee-+"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x8000
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|std
argument_list|,
literal|"b,r"
argument_list|,
literal|"10o0oo1rrrrrbooo"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_2xxx
argument_list|,
literal|0x8200
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|st
argument_list|,
literal|"e,r"
argument_list|,
literal|"100!001rrrrree-+"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_1200
argument_list|,
literal|0x8200
argument_list|)
end_macro

begin_comment
comment|/* These are for devices that don't exist yet       (>128K program memory, PC = EIND:Z).  */
end_comment

begin_macro
name|AVR_INSN
argument_list|(
argument|eicall
argument_list|,
literal|""
argument_list|,
literal|"1001010100011001"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_EIND
argument_list|,
literal|0x9519
argument_list|)
end_macro

begin_macro
name|AVR_INSN
argument_list|(
argument|eijmp
argument_list|,
literal|""
argument_list|,
literal|"1001010000011001"
argument_list|,
literal|1
argument_list|,
argument|AVR_ISA_EIND
argument_list|,
literal|0x9419
argument_list|)
end_macro

end_unit

