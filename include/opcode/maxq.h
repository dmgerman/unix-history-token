begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* maxq.h -- Header file for MAXQ opcode table.     Copyright (C) 2004 Free Software Foundation, Inc.     This file is part of GDB, GAS, and the GNU binutils.     Written by Vineet Sharma(vineets@noida.hcltech.com)    Inderpreet Singh (inderpreetb@noida.hcltech.com)     GDB, GAS, and the GNU binutils are free software; you can redistribute    them and/or modify them under the terms of the GNU General Public License    as published by the Free Software Foundation; either version 2, or (at    your option) any later version.     GDB, GAS, and the GNU binutils are distributed in the hope that they will    be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General    Public License for more details.     You should have received a copy of the GNU General Public License along    with this file; see the file COPYING.  If not, write to the Free Software    Foundation, 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_MAXQ20_H_
end_ifndef

begin_define
define|#
directive|define
name|_MAXQ20_H_
end_define

begin_comment
comment|/* This file contains the opcode table for the MAXQ10/20 processor. The table    has been designed on the lines of the SH processor with the following     fields:    (1) Instruction Name    (2) Instruction arguments description    (3) Description of the breakup of the opcode (1+7+8|8+8|1+4+4|1+7+1+3+4        |1+3+4+1+3+4|1+3+4+8|1+1+2+4+8)      (4) Architecture supported     The Register table is also defined. It contains the following fields    (1) Register name    (2) Module Number    (3) Module Index    (4) Opcode    (5) Regtype     The Memory access table is defined containing the various opcodes for     memory access containing the following fields    (1) Memory access Operand Name    (2) Memory access Operand opcode.  */
end_comment

begin_define
define|#
directive|define
name|MAXQ10
value|0x0001
end_define

begin_define
define|#
directive|define
name|MAXQ20
value|0x0002
end_define

begin_define
define|#
directive|define
name|MAX
value|(MAXQ10 | MAXQ20)
end_define

begin_comment
comment|/* This is for the NOP instruction Specify : 1st bit : NOP_FMT 1st byte:    NOP_DST 2nd byte: NOP_SRC.  */
end_comment

begin_define
define|#
directive|define
name|NOP_FMT
value|1
end_define

begin_define
define|#
directive|define
name|NOP_SRC
value|0x3A
end_define

begin_define
define|#
directive|define
name|NOP_DST
value|0x5A
end_define

begin_typedef
typedef|typedef
enum|enum
block|{
name|ZEROBIT
init|=
literal|0x1
block|,
comment|/* A zero followed by 3 bits.  */
name|ONEBIT
init|=
literal|0x2
block|,
comment|/* A one followed by 3 bits.  */
name|REG
init|=
literal|0x4
block|,
comment|/* Register.  */
name|MEM
init|=
literal|0x8
block|,
comment|/* Memory access.  */
name|IMM
init|=
literal|0x10
block|,
comment|/* Immediate value.  */
name|DISP
init|=
literal|0x20
block|,
comment|/* Displacement value.  */
name|BIT
init|=
literal|0x40
block|,
comment|/* Bit value.  */
name|FMT
init|=
literal|0x80
block|,
comment|/* The format bit.  */
name|IMMBIT
init|=
literal|0x100
block|,
comment|/* An immediate bit.  */
name|FLAG
init|=
literal|0x200
block|,
comment|/* A Flag.  */
name|DATA
init|=
literal|0x400
block|,
comment|/* Symbol in the data section.  */
name|BIT_BUCKET
init|=
literal|0x800
block|,
comment|/* FOr BIT BUCKET.  */
block|}
name|UNKNOWN_OP
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|NO_ARG
init|=
literal|0
block|,
name|A_IMM
init|=
literal|0x01
block|,
comment|/* An 8 bit immediate value.  */
name|A_REG
init|=
literal|0x2
block|,
comment|/* An 8 bit source register.  */
name|A_MEM
init|=
literal|0x4
block|,
comment|/* A 7 bit destination register.  */
name|FLAG_C
init|=
literal|0x8
block|,
comment|/* Carry Flag.  */
name|FLAG_NC
init|=
literal|0x10
block|,
comment|/* No Carry (~C) flag.  */
name|FLAG_Z
init|=
literal|0x20
block|,
comment|/* Zero Flag.  */
name|FLAG_NZ
init|=
literal|0x40
block|,
comment|/* Not Zero Flag.  */
name|FLAG_S
init|=
literal|0x80
block|,
comment|/* Sign Flag.  */
name|FLAG_E
init|=
literal|0x100
block|,
comment|/* Equals Flag.  */
name|FLAG_NE
init|=
literal|0x200
block|,
comment|/* Not Equal Flag.  */
name|ACC_BIT
init|=
literal|0x400
block|,
comment|/* One of the 16 accumulator bits of the form Acc.<b>.  */
name|DST_BIT
init|=
literal|0x800
block|,
comment|/* One of the 8 bits of the specified SRC.  */
name|SRC_BIT
init|=
literal|0x1000
block|,
comment|/* One of the 8 bits of the specified source register.  */
name|A_BIT_0
init|=
literal|0x2000
block|,
comment|/* #0.  */
name|A_BIT_1
init|=
literal|0x4000
block|,
comment|/* #1.  */
name|A_DISP
init|=
literal|0x8000
block|,
comment|/* Displacement Operand.  */
name|A_DATA
init|=
literal|0x10000
block|,
comment|/* Data in the data section.  */
name|A_BIT_BUCKET
init|=
literal|0x200000
block|, }
name|MAX_ARG_TYPE
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|char
modifier|*
name|name
decl_stmt|;
comment|/* Name of the instruction.  */
name|unsigned
name|int
name|op_number
decl_stmt|;
comment|/* Operand Number or the number of operands.  */
name|MAX_ARG_TYPE
name|arg
index|[
literal|2
index|]
decl_stmt|;
comment|/* Types of operands.  */
name|int
name|format
decl_stmt|;
comment|/* Format bit.  */
name|int
name|dst
index|[
literal|2
index|]
decl_stmt|;
comment|/* Destination in the move instruction.  */
name|int
name|src
index|[
literal|2
index|]
decl_stmt|;
comment|/* Source in the move instruction.  */
name|int
name|arch
decl_stmt|;
comment|/* The Machine architecture.  */
name|unsigned
name|int
name|instr_id
decl_stmt|;
comment|/* Added for decode and dissassembly.  */
block|}
name|MAXQ20_OPCODE_INFO
typedef|;
end_typedef

begin_comment
comment|/* Structure for holding opcodes of the same name.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
specifier|const
name|MAXQ20_OPCODE_INFO
modifier|*
name|start
decl_stmt|;
comment|/* The first opcode.  */
specifier|const
name|MAXQ20_OPCODE_INFO
modifier|*
name|end
decl_stmt|;
comment|/* The last opcode.  */
block|}
name|MAXQ20_OPCODES
typedef|;
end_typedef

begin_comment
comment|/* The entry into the hash table will be of the type MAXX_OPCODES.  */
end_comment

begin_comment
comment|/* The definition of the table.  */
end_comment

begin_decl_stmt
specifier|const
name|MAXQ20_OPCODE_INFO
name|op_table
index|[]
init|=
block|{
comment|/* LOGICAL OPERATIONS */
comment|/* AND src : f001 1010 ssss ssss */
block|{
literal|"AND"
block|,
literal|1
block|,
block|{
name|A_IMM
operator||
name|A_REG
operator||
name|A_MEM
operator||
name|A_DISP
block|,
literal|0
block|}
block|,
name|FMT
block|,
block|{
literal|0x1a
block|,
literal|0
block|}
block|,
block|{
name|REG
operator||
name|MEM
operator||
name|IMM
operator||
name|DISP
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x11
block|}
block|,
comment|/* AND Acc.<b> : 1111 1010 bbbb 1010 */
block|{
literal|"AND"
block|,
literal|1
block|,
block|{
name|ACC_BIT
block|,
literal|0
block|}
block|,
literal|1
block|,
block|{
literal|0x1a
block|,
literal|0
block|}
block|,
block|{
name|BIT
block|,
literal|0xa
block|}
block|,
name|MAX
block|,
literal|0x39
block|}
block|,
comment|/* OR src : f010 1010 ssss ssss */
block|{
literal|"OR"
block|,
literal|1
block|,
block|{
name|A_IMM
operator||
name|A_REG
operator||
name|A_MEM
operator||
name|A_DISP
block|,
literal|0
block|}
block|,
name|FMT
block|,
block|{
literal|0x2a
block|,
literal|0
block|}
block|,
block|{
name|REG
operator||
name|MEM
operator||
name|IMM
operator||
name|DISP
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x12
block|}
block|,
comment|/* OR Acc.<b> : 1010 1010 bbbb 1010 */
block|{
literal|"OR"
block|,
literal|1
block|,
block|{
name|ACC_BIT
block|,
literal|0
block|}
block|,
literal|1
block|,
block|{
literal|0x2a
block|,
literal|0
block|}
block|,
block|{
name|BIT
block|,
literal|0xa
block|}
block|,
name|MAX
block|,
literal|0x3A
block|}
block|,
comment|/* XOR src : f011 1010 ssss ssss */
block|{
literal|"XOR"
block|,
literal|1
block|,
block|{
name|A_IMM
operator||
name|A_REG
operator||
name|A_MEM
operator||
name|A_DISP
block|,
literal|0
block|}
block|,
name|FMT
block|,
block|{
literal|0x3a
block|,
literal|0
block|}
block|,
block|{
name|REG
operator||
name|MEM
operator||
name|IMM
operator||
name|DISP
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x13
block|}
block|,
comment|/* XOR Acc.<b> : 1011 1010 bbbb 1010 */
block|{
literal|"XOR"
block|,
literal|1
block|,
block|{
name|ACC_BIT
block|,
literal|0
block|}
block|,
literal|1
block|,
block|{
literal|0x3a
block|,
literal|0
block|}
block|,
block|{
name|BIT
block|,
literal|0xa
block|}
block|,
name|MAX
block|,
literal|0x3B
block|}
block|,
comment|/* LOGICAL OPERATIONS INVOLVING ONLY THE ACCUMULATOR */
comment|/* CPL : 1000 1010 0001 1010 */
block|{
literal|"CPL"
block|,
literal|0
block|,
block|{
literal|0
block|,
literal|0
block|}
block|,
literal|1
block|,
block|{
literal|0x0a
block|,
literal|0
block|}
block|,
block|{
literal|0x1a
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x21
block|}
block|,
comment|/* CPL C : 1101 1010 0010 1010 */
block|{
literal|"CPL"
block|,
literal|1
block|,
block|{
name|FLAG_C
block|,
literal|0
block|}
block|,
literal|1
block|,
block|{
literal|0x5a
block|,
literal|0
block|}
block|,
block|{
literal|0x2a
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x3D
block|}
block|,
comment|/* NEG : 1000 1010 1001 1010 */
block|{
literal|"NEG"
block|,
literal|0
block|,
block|{
literal|0
block|,
literal|0
block|}
block|,
literal|1
block|,
block|{
literal|0x0a
block|,
literal|0
block|}
block|,
block|{
literal|0x9a
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x29
block|}
block|,
comment|/* SLA : 1000 1010 0010 1010 */
block|{
literal|"SLA"
block|,
literal|0
block|,
block|{
literal|0
block|,
literal|0
block|}
block|,
literal|1
block|,
block|{
literal|0x0a
block|,
literal|0
block|}
block|,
block|{
literal|0x2a
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x22
block|}
block|,
comment|/* SLA2: 1000 1010 0011 1010 */
block|{
literal|"SLA2"
block|,
literal|0
block|,
block|{
literal|0
block|,
literal|0
block|}
block|,
literal|1
block|,
block|{
literal|0x0a
block|,
literal|0
block|}
block|,
block|{
literal|0x3a
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x23
block|}
block|,
comment|/* SLA4: 1000 1010 0110 1010 */
block|{
literal|"SLA4"
block|,
literal|0
block|,
block|{
literal|0
block|,
literal|0
block|}
block|,
literal|1
block|,
block|{
literal|0x0a
block|,
literal|0
block|}
block|,
block|{
literal|0x6a
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x26
block|}
block|,
comment|/* RL : 1000 1010 0100 1010 */
block|{
literal|"RL"
block|,
literal|0
block|,
block|{
literal|0
block|,
literal|0
block|}
block|,
literal|1
block|,
block|{
literal|0x0a
block|,
literal|0
block|}
block|,
block|{
literal|0x4a
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x24
block|}
block|,
comment|/* RLC : 1000 1010 0101 1010 */
block|{
literal|"RLC"
block|,
literal|0
block|,
block|{
literal|0
block|,
literal|0
block|}
block|,
literal|1
block|,
block|{
literal|0x0a
block|,
literal|0
block|}
block|,
block|{
literal|0x5a
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x25
block|}
block|,
comment|/* SRA : 1000 1010 1111 1010 */
block|{
literal|"SRA"
block|,
literal|0
block|,
block|{
literal|0
block|,
literal|0
block|}
block|,
literal|1
block|,
block|{
literal|0x0a
block|,
literal|0
block|}
block|,
block|{
literal|0xfa
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x2F
block|}
block|,
comment|/* SRA2: 1000 1010 1110 1010 */
block|{
literal|"SRA2"
block|,
literal|0
block|,
block|{
literal|0
block|,
literal|0
block|}
block|,
literal|1
block|,
block|{
literal|0x0a
block|,
literal|0
block|}
block|,
block|{
literal|0xea
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x2E
block|}
block|,
comment|/* SRA4: 1000 1010 1011 1010 */
block|{
literal|"SRA4"
block|,
literal|0
block|,
block|{
literal|0
block|,
literal|0
block|}
block|,
literal|1
block|,
block|{
literal|0x0a
block|,
literal|0
block|}
block|,
block|{
literal|0xba
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x2B
block|}
block|,
comment|/* SR : 1000 1010 1010 1010 */
block|{
literal|"SR"
block|,
literal|0
block|,
block|{
literal|0
block|,
literal|0
block|}
block|,
literal|1
block|,
block|{
literal|0x0a
block|,
literal|0
block|}
block|,
block|{
literal|0xaa
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x2A
block|}
block|,
comment|/* RR : 1000 1010 1100 1010 */
block|{
literal|"RR"
block|,
literal|0
block|,
block|{
literal|0
block|,
literal|0
block|}
block|,
literal|1
block|,
block|{
literal|0x0a
block|,
literal|0
block|}
block|,
block|{
literal|0xca
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x2C
block|}
block|,
comment|/* RRC : 1000 1010 1101 1010 */
block|{
literal|"RRC"
block|,
literal|0
block|,
block|{
literal|0
block|,
literal|0
block|}
block|,
literal|1
block|,
block|{
literal|0x0a
block|,
literal|0
block|}
block|,
block|{
literal|0xda
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x2D
block|}
block|,
comment|/* MATH OPERATIONS */
comment|/* ADD src : f100 1010 ssss ssss */
block|{
literal|"ADD"
block|,
literal|1
block|,
block|{
name|A_IMM
operator||
name|A_REG
operator||
name|A_MEM
operator||
name|A_DISP
block|,
literal|0
block|}
block|,
name|FMT
block|,
block|{
literal|0x4a
block|,
literal|0
block|}
block|,
block|{
name|IMM
operator||
name|REG
operator||
name|MEM
operator||
name|DISP
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x14
block|}
block|,
comment|/* ADDC src : f110 1010 ssss ssss */
block|{
literal|"ADDC"
block|,
literal|1
block|,
block|{
name|A_IMM
operator||
name|A_REG
operator||
name|A_MEM
operator||
name|A_DISP
block|,
literal|0
block|}
block|,
name|FMT
block|,
block|{
literal|0x6a
block|,
literal|0
block|}
block|,
block|{
name|IMM
operator||
name|REG
operator||
name|MEM
operator||
name|DISP
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x16
block|}
block|,
comment|/* SUB src : f101 1010 ssss ssss */
block|{
literal|"SUB"
block|,
literal|1
block|,
block|{
name|A_IMM
operator||
name|A_REG
operator||
name|A_MEM
operator||
name|A_DISP
block|,
literal|0
block|}
block|,
name|FMT
block|,
block|{
literal|0x5a
block|,
literal|0
block|}
block|,
block|{
name|IMM
operator||
name|REG
operator||
name|MEM
operator||
name|DISP
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x15
block|}
block|,
comment|/* SUBB src : f111 1010 ssss ssss */
block|{
literal|"SUBB"
block|,
literal|1
block|,
block|{
name|A_IMM
operator||
name|A_REG
operator||
name|A_MEM
operator||
name|A_DISP
block|,
literal|0
block|}
block|,
name|FMT
block|,
block|{
literal|0x7a
block|,
literal|0
block|}
block|,
block|{
name|IMM
operator||
name|REG
operator||
name|MEM
operator||
name|DISP
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x17
block|}
block|,
comment|/* BRANCHING OPERATIONS */
comment|/* DJNZ LC[0] src: f100 1101 ssss ssss */
block|{
literal|"DJNZ"
block|,
literal|2
block|,
block|{
name|A_REG
block|,
name|A_IMM
operator||
name|A_REG
operator||
name|A_MEM
operator||
name|A_DISP
block|}
block|,
name|FMT
block|,
block|{
literal|0x4d
block|,
literal|0
block|}
block|,
block|{
name|IMM
operator||
name|REG
operator||
name|MEM
operator||
name|DISP
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0xA4
block|}
block|,
comment|/* DJNZ LC[1] src: f101 1101 ssss ssss */
block|{
literal|"DJNZ"
block|,
literal|2
block|,
block|{
name|A_REG
block|,
name|A_IMM
operator||
name|A_REG
operator||
name|A_MEM
operator||
name|A_DISP
block|}
block|,
name|FMT
block|,
block|{
literal|0x5d
block|,
literal|0
block|}
block|,
block|{
name|IMM
operator||
name|REG
operator||
name|MEM
operator||
name|DISP
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0xA5
block|}
block|,
comment|/* CALL src : f011 1101 ssss ssss */
block|{
literal|"CALL"
block|,
literal|1
block|,
block|{
name|A_IMM
operator||
name|A_REG
operator||
name|A_MEM
operator||
name|A_DISP
block|,
literal|0
block|}
block|,
name|FMT
block|,
block|{
literal|0x3d
block|,
literal|0
block|}
block|,
block|{
name|IMM
operator||
name|REG
operator||
name|MEM
operator||
name|DISP
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0xA3
block|}
block|,
comment|/* JUMP src : f000 1100 ssss ssss */
block|{
literal|"JUMP"
block|,
literal|1
block|,
block|{
name|A_IMM
operator||
name|A_REG
operator||
name|A_MEM
operator||
name|A_DISP
block|,
literal|0
block|}
block|,
name|FMT
block|,
block|{
literal|0x0c
block|,
literal|0
block|}
block|,
block|{
name|IMM
operator||
name|REG
operator||
name|MEM
operator||
name|DISP
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x50
block|}
block|,
comment|/* JUMP C,src : f010 1100 ssss ssss */
block|{
literal|"JUMP"
block|,
literal|2
block|,
block|{
name|FLAG_C
block|,
name|A_IMM
operator||
name|A_REG
operator||
name|A_MEM
operator||
name|A_DISP
block|}
block|,
name|FMT
block|,
block|{
literal|0x2c
block|,
literal|0
block|}
block|,
block|{
name|IMM
operator||
name|REG
operator||
name|MEM
operator||
name|DISP
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x52
block|}
block|,
comment|/* JUMP NC,src: f110 1100 ssss ssss */
block|{
literal|"JUMP"
block|,
literal|2
block|,
block|{
name|FLAG_NC
block|,
name|A_IMM
operator||
name|A_REG
operator||
name|A_MEM
operator||
name|A_DISP
block|}
block|,
name|FMT
block|,
block|{
literal|0x6c
block|,
literal|0
block|}
block|,
block|{
name|IMM
operator||
name|REG
operator||
name|MEM
operator||
name|DISP
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x56
block|}
block|,
comment|/* JUMP Z,src : f001 1100 ssss ssss */
block|{
literal|"JUMP"
block|,
literal|2
block|,
block|{
name|FLAG_Z
block|,
name|A_IMM
operator||
name|A_REG
operator||
name|A_MEM
operator||
name|A_DISP
block|}
block|,
name|FMT
block|,
block|{
literal|0x1c
block|,
literal|0
block|}
block|,
block|{
name|IMM
operator||
name|REG
operator||
name|MEM
operator||
name|DISP
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x51
block|}
block|,
comment|/* JUMP NZ,src: f101 1100 ssss ssss */
block|{
literal|"JUMP"
block|,
literal|2
block|,
block|{
name|FLAG_NZ
block|,
name|A_IMM
operator||
name|A_REG
operator||
name|A_MEM
operator||
name|A_DISP
block|}
block|,
name|FMT
block|,
block|{
literal|0x5c
block|,
literal|0
block|}
block|,
block|{
name|IMM
operator||
name|REG
operator||
name|MEM
operator||
name|DISP
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x55
block|}
block|,
comment|/* JUMP E,src : 0011 1100 ssss ssss */
block|{
literal|"JUMP"
block|,
literal|2
block|,
block|{
name|FLAG_E
block|,
name|A_IMM
operator||
name|A_DISP
block|}
block|,
literal|0
block|,
block|{
literal|0x3c
block|,
literal|0
block|}
block|,
block|{
name|IMM
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x53
block|}
block|,
comment|/* JUMP NE,src: 0111 1100 ssss ssss */
block|{
literal|"JUMP"
block|,
literal|2
block|,
block|{
name|FLAG_NE
block|,
name|A_IMM
operator||
name|A_DISP
block|}
block|,
literal|0
block|,
block|{
literal|0x7c
block|,
literal|0
block|}
block|,
block|{
name|IMM
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x57
block|}
block|,
comment|/* JUMP S,src : f100 1100 ssss ssss */
block|{
literal|"JUMP"
block|,
literal|2
block|,
block|{
name|FLAG_S
block|,
name|A_IMM
operator||
name|A_REG
operator||
name|A_MEM
operator||
name|A_DISP
block|}
block|,
name|FMT
block|,
block|{
literal|0x4c
block|,
literal|0
block|}
block|,
block|{
name|IMM
operator||
name|REG
operator||
name|MEM
operator||
name|DISP
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x54
block|}
block|,
comment|/* RET : 1000 1100 0000 1101 */
block|{
literal|"RET"
block|,
literal|0
block|,
block|{
literal|0
block|,
literal|0
block|}
block|,
literal|1
block|,
block|{
literal|0x0c
block|,
literal|0
block|}
block|,
block|{
literal|0x0d
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x68
block|}
block|,
comment|/* RET C : 1010 1100 0000 1101 */
block|{
literal|"RET"
block|,
literal|1
block|,
block|{
name|FLAG_C
block|,
literal|0
block|}
block|,
literal|1
block|,
block|{
literal|0x2c
block|,
literal|0
block|}
block|,
block|{
literal|0x0d
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x6A
block|}
block|,
comment|/* RET NC : 1110 1100 0000 1101 */
block|{
literal|"RET"
block|,
literal|1
block|,
block|{
name|FLAG_NC
block|,
literal|0
block|}
block|,
literal|1
block|,
block|{
literal|0x6c
block|,
literal|0
block|}
block|,
block|{
literal|0x0d
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x6E
block|}
block|,
comment|/* RET Z : 1001 1100 0000 1101 */
block|{
literal|"RET"
block|,
literal|1
block|,
block|{
name|FLAG_Z
block|,
literal|0
block|}
block|,
literal|1
block|,
block|{
literal|0x1c
block|,
literal|0
block|}
block|,
block|{
literal|0x0d
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x69
block|}
block|,
comment|/* RET NZ : 1101 1100 0000 1101 */
block|{
literal|"RET"
block|,
literal|1
block|,
block|{
name|FLAG_NZ
block|,
literal|0
block|}
block|,
literal|1
block|,
block|{
literal|0x5c
block|,
literal|0
block|}
block|,
block|{
literal|0x0d
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x6D
block|}
block|,
comment|/* RET S : 1100 1100 0000 1101 */
block|{
literal|"RET"
block|,
literal|1
block|,
block|{
name|FLAG_S
block|,
literal|0
block|}
block|,
literal|1
block|,
block|{
literal|0x4c
block|,
literal|0
block|}
block|,
block|{
literal|0x0d
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x6C
block|}
block|,
comment|/* RETI : 1000 1100 1000 1101 */
block|{
literal|"RETI"
block|,
literal|0
block|,
block|{
literal|0
block|,
literal|0
block|}
block|,
literal|1
block|,
block|{
literal|0x0c
block|,
literal|0
block|}
block|,
block|{
literal|0x8d
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x78
block|}
block|,
comment|/* ADDED ACCORDING TO NEW SPECIFICATION */
comment|/* RETI C : 1010 1100 1000 1101 */
block|{
literal|"RETI"
block|,
literal|1
block|,
block|{
name|FLAG_C
block|,
literal|0
block|}
block|,
literal|1
block|,
block|{
literal|0x2c
block|,
literal|0
block|}
block|,
block|{
literal|0x8d
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x7A
block|}
block|,
comment|/* RETI NC : 1110 1100 1000 1101 */
block|{
literal|"RETI"
block|,
literal|1
block|,
block|{
name|FLAG_NC
block|,
literal|0
block|}
block|,
literal|1
block|,
block|{
literal|0x6c
block|,
literal|0
block|}
block|,
block|{
literal|0x8d
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x7E
block|}
block|,
comment|/* RETI Z : 1001 1100 1000 1101 */
block|{
literal|"RETI"
block|,
literal|1
block|,
block|{
name|FLAG_Z
block|,
literal|0
block|}
block|,
literal|1
block|,
block|{
literal|0x1c
block|,
literal|0
block|}
block|,
block|{
literal|0x8d
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x79
block|}
block|,
comment|/* RETI NZ : 1101 1100 1000 1101 */
block|{
literal|"RETI"
block|,
literal|1
block|,
block|{
name|FLAG_NZ
block|,
literal|0
block|}
block|,
literal|1
block|,
block|{
literal|0x5c
block|,
literal|0
block|}
block|,
block|{
literal|0x8d
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x7D
block|}
block|,
comment|/* RETI S : 1100 1100 1000 1101 */
block|{
literal|"RETI"
block|,
literal|1
block|,
block|{
name|FLAG_S
block|,
literal|0
block|}
block|,
literal|1
block|,
block|{
literal|0x4c
block|,
literal|0
block|}
block|,
block|{
literal|0x8d
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x7C
block|}
block|,
comment|/* MISCELLANEOUS INSTRUCTIONS */
comment|/* CMP src : f111 1000 ssss ssss */
block|{
literal|"CMP"
block|,
literal|1
block|,
block|{
name|A_REG
operator||
name|A_IMM
operator||
name|A_MEM
operator||
name|A_DISP
block|,
literal|0
block|}
block|,
name|FMT
block|,
block|{
literal|0x78
block|,
literal|0
block|}
block|,
block|{
name|REG
operator||
name|MEM
operator||
name|IMM
operator||
name|DISP
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0xD7
block|}
block|,
comment|/* DATA TRANSFER OPERATIONS */
comment|/* XCH : 1000 1010 1000 1010 */
block|{
literal|"XCH"
block|,
literal|0
block|,
block|{
literal|0
block|,
literal|0
block|}
block|,
literal|1
block|,
block|{
literal|0x0a
block|,
literal|0
block|}
block|,
block|{
literal|0x8a
block|,
literal|0
block|}
block|,
name|MAXQ20
block|,
literal|0x28
block|}
block|,
comment|/* XCHN : 1000 1010 0111 1010 */
block|{
literal|"XCHN"
block|,
literal|0
block|,
block|{
literal|0
block|,
literal|0
block|}
block|,
literal|1
block|,
block|{
literal|0x0a
block|,
literal|0
block|}
block|,
block|{
literal|0x7a
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x27
block|}
block|,
comment|/* PUSH src : f000 1101 ssss ssss */
block|{
literal|"PUSH"
block|,
literal|1
block|,
block|{
name|A_REG
operator||
name|A_IMM
operator||
name|A_MEM
operator||
name|A_DISP
block|,
literal|0
block|}
block|,
name|FMT
block|,
block|{
literal|0x0d
block|,
literal|0
block|}
block|,
block|{
name|IMM
operator||
name|REG
operator||
name|MEM
operator||
name|DISP
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0xA0
block|}
block|,
comment|/* POP dst : 1ddd dddd 0000 1101 */
block|{
literal|"POP"
block|,
literal|1
block|,
block|{
name|A_REG
block|,
literal|0
block|}
block|,
literal|1
block|,
block|{
name|REG
block|,
literal|0
block|}
block|,
block|{
literal|0x0d
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0xB0
block|}
block|,
comment|/* Added according to new spec */
comment|/* POPI dst : 1ddd dddd 1000 1101 */
block|{
literal|"POPI"
block|,
literal|1
block|,
block|{
name|A_REG
block|,
literal|0
block|}
block|,
literal|1
block|,
block|{
name|REG
block|,
literal|0
block|}
block|,
block|{
literal|0x8d
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0xC0
block|}
block|,
comment|/* MOVE dst,src: fddd dddd ssss ssss */
block|{
literal|"MOVE"
block|,
literal|2
block|,
block|{
name|A_REG
operator||
name|A_MEM
block|,
name|A_REG
operator||
name|A_IMM
operator||
name|A_MEM
operator||
name|A_DATA
operator||
name|A_DISP
block|}
block|,
name|FMT
block|,
block|{
name|REG
operator||
name|MEM
block|,
literal|0
block|}
block|,
block|{
name|REG
operator||
name|IMM
operator||
name|MEM
operator||
name|DATA
operator||
name|A_DISP
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x80
block|}
block|,
comment|/* BIT OPERATIONS */
comment|/* MOVE C,Acc.<b> : 1110 1010 bbbb 1010 */
block|{
literal|"MOVE"
block|,
literal|2
block|,
block|{
name|FLAG_C
block|,
name|ACC_BIT
block|}
block|,
literal|1
block|,
block|{
literal|0x6a
block|,
literal|0
block|}
block|,
block|{
name|BIT
block|,
literal|0xa
block|}
block|,
name|MAX
block|,
literal|0x3E
block|}
block|,
comment|/* MOVE C,#0 : 1101 1010 0000 1010 */
block|{
literal|"MOVE"
block|,
literal|2
block|,
block|{
name|FLAG_C
block|,
name|A_BIT_0
block|}
block|,
literal|1
block|,
block|{
literal|0x5a
block|,
literal|0
block|}
block|,
block|{
literal|0x0a
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x3D
block|}
block|,
comment|/* MOVE C,#1 : 1101 1010 0001 1010 */
block|{
literal|"MOVE"
block|,
literal|2
block|,
block|{
name|FLAG_C
block|,
name|A_BIT_1
block|}
block|,
literal|1
block|,
block|{
literal|0x5a
block|,
literal|0
block|}
block|,
block|{
literal|0x1a
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x3D
block|}
block|,
comment|/* MOVE Acc.<b>,C : 1111 1010 bbbb 1010 */
block|{
literal|"MOVE"
block|,
literal|2
block|,
block|{
name|ACC_BIT
block|,
name|FLAG_C
block|}
block|,
literal|1
block|,
block|{
literal|0x7a
block|,
literal|0
block|}
block|,
block|{
name|BIT
block|,
literal|0xa
block|}
block|,
name|MAX
block|,
literal|0x3F
block|}
block|,
comment|/* MOVE dst.<b>,#0 : 1ddd dddd 0bbb 0111 */
block|{
literal|"MOVE"
block|,
literal|2
block|,
block|{
name|DST_BIT
block|,
name|A_BIT_0
block|}
block|,
literal|1
block|,
block|{
name|REG
block|,
literal|0
block|}
block|,
block|{
name|ZEROBIT
block|,
literal|0x7
block|}
block|,
name|MAX
block|,
literal|0x40
block|}
block|,
comment|/* MOVE dst.<b>,#1 : 1ddd dddd 1bbb 0111 */
block|{
literal|"MOVE"
block|,
literal|2
block|,
block|{
name|DST_BIT
block|,
name|A_BIT_1
block|}
block|,
literal|1
block|,
block|{
name|REG
block|,
literal|0
block|}
block|,
block|{
name|ONEBIT
block|,
literal|0x7
block|}
block|,
name|MAX
block|,
literal|0x41
block|}
block|,
comment|/* MOVE C,src.<b> : fbbb 0111 ssss ssss */
block|{
literal|"MOVE"
block|,
literal|2
block|,
block|{
name|FLAG_C
block|,
name|SRC_BIT
block|}
block|,
name|FMT
block|,
block|{
name|BIT
block|,
literal|0x7
block|}
block|,
block|{
name|REG
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x97
block|}
block|,
comment|/* NOP : 1101 1010 0011 1010 */
block|{
literal|"NOP"
block|,
literal|0
block|,
block|{
literal|0
block|,
literal|0
block|}
block|,
name|NOP_FMT
block|,
block|{
name|NOP_DST
block|,
literal|0
block|}
block|,
block|{
name|NOP_SRC
block|,
literal|0
block|}
block|,
name|MAX
block|,
literal|0x3D
block|}
block|,
block|{
name|NULL
block|,
literal|0
block|,
block|{
literal|0
block|,
literal|0
block|}
block|,
literal|0
block|,
block|{
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|0
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0x00
block|}
block|}
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* All the modules.  */
end_comment

begin_define
define|#
directive|define
name|MOD0
value|0x0
end_define

begin_define
define|#
directive|define
name|MOD1
value|0x1
end_define

begin_define
define|#
directive|define
name|MOD2
value|0x2
end_define

begin_define
define|#
directive|define
name|MOD3
value|0x3
end_define

begin_define
define|#
directive|define
name|MOD4
value|0x4
end_define

begin_define
define|#
directive|define
name|MOD5
value|0x5
end_define

begin_define
define|#
directive|define
name|MOD6
value|0x6
end_define

begin_define
define|#
directive|define
name|MOD7
value|0x7
end_define

begin_define
define|#
directive|define
name|MOD8
value|0x8
end_define

begin_define
define|#
directive|define
name|MOD9
value|0x9
end_define

begin_define
define|#
directive|define
name|MODA
value|0xa
end_define

begin_define
define|#
directive|define
name|MODB
value|0xb
end_define

begin_define
define|#
directive|define
name|MODC
value|0xc
end_define

begin_define
define|#
directive|define
name|MODD
value|0xd
end_define

begin_define
define|#
directive|define
name|MODE
value|0xe
end_define

begin_define
define|#
directive|define
name|MODF
value|0xf
end_define

begin_comment
comment|/* Added according to new specification.  */
end_comment

begin_define
define|#
directive|define
name|MOD10
value|0x10
end_define

begin_define
define|#
directive|define
name|MOD11
value|0x11
end_define

begin_define
define|#
directive|define
name|MOD12
value|0x12
end_define

begin_define
define|#
directive|define
name|MOD13
value|0x13
end_define

begin_define
define|#
directive|define
name|MOD14
value|0x14
end_define

begin_define
define|#
directive|define
name|MOD15
value|0x15
end_define

begin_define
define|#
directive|define
name|MOD16
value|0x16
end_define

begin_define
define|#
directive|define
name|MOD17
value|0x17
end_define

begin_define
define|#
directive|define
name|MOD18
value|0x18
end_define

begin_define
define|#
directive|define
name|MOD19
value|0x19
end_define

begin_define
define|#
directive|define
name|MOD1A
value|0x1a
end_define

begin_define
define|#
directive|define
name|MOD1B
value|0x1b
end_define

begin_define
define|#
directive|define
name|MOD1C
value|0x1c
end_define

begin_define
define|#
directive|define
name|MOD1D
value|0x1d
end_define

begin_define
define|#
directive|define
name|MOD1E
value|0x1e
end_define

begin_define
define|#
directive|define
name|MOD1F
value|0x1f
end_define

begin_comment
comment|/* - Peripheral Register Modules - */
end_comment

begin_comment
comment|/* Serial Register Modules.  */
end_comment

begin_define
define|#
directive|define
name|CTRL
value|MOD8
end_define

begin_comment
comment|/* For the module containing the control registers.  */
end_comment

begin_define
define|#
directive|define
name|ACC
value|MOD9
end_define

begin_comment
comment|/* For the module containing the 16 accumulators.  */
end_comment

begin_define
define|#
directive|define
name|Act_ACC
value|MODA
end_define

begin_comment
comment|/* For the module containing the active accumulator.  */
end_comment

begin_define
define|#
directive|define
name|PFX
value|MODB
end_define

begin_comment
comment|/* For the module containing the prefix registers.  */
end_comment

begin_define
define|#
directive|define
name|IP
value|MODC
end_define

begin_comment
comment|/* For the module containing the instruction pointer register.  */
end_comment

begin_define
define|#
directive|define
name|SPIV
value|MODD
end_define

begin_comment
comment|/* For the module containing the stack pointer and the interrupt vector.  */
end_comment

begin_define
define|#
directive|define
name|LC
value|MODD
end_define

begin_comment
comment|/* For the module containing the loop counters and HILO registers.  */
end_comment

begin_define
define|#
directive|define
name|DP
value|MODF
end_define

begin_comment
comment|/* For the module containig the data pointer registers.  */
end_comment

begin_comment
comment|/* Register Types.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|_Reg_type
block|{
name|Reg_8R
block|,
comment|/* 8 bit register. read only.  */
name|Reg_16R
block|,
comment|/* 16 bit register, read only.  */
name|Reg_8W
block|,
comment|/* 8 bit register, both read and write.  */
name|Reg_16W
comment|/* 16 bit register, both read and write.  */
block|}
name|Reg_type
typedef|;
end_typedef

begin_comment
comment|/* Register Structure.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|reg
block|{
name|char
modifier|*
name|reg_name
decl_stmt|;
comment|/* Register name.  */
name|short
name|int
name|Mod_name
decl_stmt|;
comment|/* The module name.  */
name|short
name|int
name|Mod_index
decl_stmt|;
comment|/* The module index.  */
name|int
name|opcode
decl_stmt|;
comment|/* The opcode of the register.  */
name|Reg_type
name|rtype
decl_stmt|;
comment|/* 8 bit/16 bit and read only/read write.  */
name|int
name|arch
decl_stmt|;
comment|/* The Machine architecture.  */
block|}
name|reg_entry
typedef|;
end_typedef

begin_decl_stmt
name|reg_entry
modifier|*
name|new_reg_table
init|=
name|NULL
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|num_of_reg
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_typedef
typedef|typedef
struct|struct
block|{
name|char
modifier|*
name|rname
decl_stmt|;
name|int
name|rindex
decl_stmt|;
block|}
name|reg_index
typedef|;
end_typedef

begin_comment
comment|/* Register Table description.  */
end_comment

begin_decl_stmt
name|reg_entry
name|system_reg_table
index|[]
init|=
block|{
comment|/* Serial Registers */
comment|/* MODULE 8 Registers : I call them the control registers.  */
comment|/* Accumulator Pointer CTRL[0h] */
block|{
literal|"AP"
block|,
name|CTRL
block|,
literal|0x0
block|,
literal|0x00
operator||
name|CTRL
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
comment|/* Accumulator Pointer Control Register : CTRL[1h] */
block|{
literal|"APC"
block|,
name|CTRL
block|,
literal|0x1
block|,
literal|0x10
operator||
name|CTRL
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
comment|/* Processor Status Flag Register CTRL[4h] Note: Bits 6 and 7 read only */
block|{
literal|"PSF"
block|,
name|CTRL
block|,
literal|0x4
block|,
literal|0x40
operator||
name|CTRL
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
comment|/* Interrupt and Control Register : CTRL[5h] */
block|{
literal|"IC"
block|,
name|CTRL
block|,
literal|0x5
block|,
literal|0x50
operator||
name|CTRL
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
comment|/* Interrupt Mask Register : CTRL[6h] */
block|{
literal|"IMR"
block|,
name|CTRL
block|,
literal|0x6
block|,
literal|0x60
operator||
name|CTRL
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
comment|/* Interrupt System Control : CTRL[8h] */
block|{
literal|"SC"
block|,
name|CTRL
block|,
literal|0x8
block|,
literal|0x80
operator||
name|CTRL
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
comment|/* Interrupt Identification Register : CTRL[Bh] */
block|{
literal|"IIR"
block|,
name|CTRL
block|,
literal|0xb
block|,
literal|0xb0
operator||
name|CTRL
block|,
name|Reg_8R
block|,
name|MAX
block|}
block|,
comment|/* System Clock Control Register : CTRL[Eh] Note: Bit 5 is read only */
block|{
literal|"CKCN"
block|,
name|CTRL
block|,
literal|0xe
block|,
literal|0xe0
operator||
name|CTRL
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
comment|/* Watchdog Control Register : CTRL[Fh] */
block|{
literal|"WDCN"
block|,
name|CTRL
block|,
literal|0xf
block|,
literal|0xf0
operator||
name|CTRL
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
comment|/* The 16 accumulator registers : ACC[0h-Fh] */
block|{
literal|"A[0]"
block|,
name|ACC
block|,
literal|0x0
block|,
literal|0x00
operator||
name|ACC
block|,
name|Reg_16W
block|,
name|MAXQ20
block|}
block|,
block|{
literal|"A[1]"
block|,
name|ACC
block|,
literal|0x1
block|,
literal|0x10
operator||
name|ACC
block|,
name|Reg_16W
block|,
name|MAXQ20
block|}
block|,
block|{
literal|"A[2]"
block|,
name|ACC
block|,
literal|0x2
block|,
literal|0x20
operator||
name|ACC
block|,
name|Reg_16W
block|,
name|MAXQ20
block|}
block|,
block|{
literal|"A[3]"
block|,
name|ACC
block|,
literal|0x3
block|,
literal|0x30
operator||
name|ACC
block|,
name|Reg_16W
block|,
name|MAXQ20
block|}
block|,
block|{
literal|"A[4]"
block|,
name|ACC
block|,
literal|0x4
block|,
literal|0x40
operator||
name|ACC
block|,
name|Reg_16W
block|,
name|MAXQ20
block|}
block|,
block|{
literal|"A[5]"
block|,
name|ACC
block|,
literal|0x5
block|,
literal|0x50
operator||
name|ACC
block|,
name|Reg_16W
block|,
name|MAXQ20
block|}
block|,
block|{
literal|"A[6]"
block|,
name|ACC
block|,
literal|0x6
block|,
literal|0x60
operator||
name|ACC
block|,
name|Reg_16W
block|,
name|MAXQ20
block|}
block|,
block|{
literal|"A[7]"
block|,
name|ACC
block|,
literal|0x7
block|,
literal|0x70
operator||
name|ACC
block|,
name|Reg_16W
block|,
name|MAXQ20
block|}
block|,
block|{
literal|"A[8]"
block|,
name|ACC
block|,
literal|0x8
block|,
literal|0x80
operator||
name|ACC
block|,
name|Reg_16W
block|,
name|MAXQ20
block|}
block|,
block|{
literal|"A[9]"
block|,
name|ACC
block|,
literal|0x9
block|,
literal|0x90
operator||
name|ACC
block|,
name|Reg_16W
block|,
name|MAXQ20
block|}
block|,
block|{
literal|"A[10]"
block|,
name|ACC
block|,
literal|0xa
block|,
literal|0xa0
operator||
name|ACC
block|,
name|Reg_16W
block|,
name|MAXQ20
block|}
block|,
block|{
literal|"A[11]"
block|,
name|ACC
block|,
literal|0xb
block|,
literal|0xb0
operator||
name|ACC
block|,
name|Reg_16W
block|,
name|MAXQ20
block|}
block|,
block|{
literal|"A[12]"
block|,
name|ACC
block|,
literal|0xc
block|,
literal|0xc0
operator||
name|ACC
block|,
name|Reg_16W
block|,
name|MAXQ20
block|}
block|,
block|{
literal|"A[13]"
block|,
name|ACC
block|,
literal|0xd
block|,
literal|0xd0
operator||
name|ACC
block|,
name|Reg_16W
block|,
name|MAXQ20
block|}
block|,
block|{
literal|"A[14]"
block|,
name|ACC
block|,
literal|0xe
block|,
literal|0xe0
operator||
name|ACC
block|,
name|Reg_16W
block|,
name|MAXQ20
block|}
block|,
block|{
literal|"A[15]"
block|,
name|ACC
block|,
literal|0xf
block|,
literal|0xf0
operator||
name|ACC
block|,
name|Reg_16W
block|,
name|MAXQ20
block|}
block|,
comment|/* The Active Accumulators : Act_Acc[0h-1h] */
block|{
literal|"ACC"
block|,
name|Act_ACC
block|,
literal|0x0
block|,
literal|0x00
operator||
name|Act_ACC
block|,
name|Reg_16W
block|,
name|MAXQ20
block|}
block|,
block|{
literal|"A[AP]"
block|,
name|Act_ACC
block|,
literal|0x1
block|,
literal|0x10
operator||
name|Act_ACC
block|,
name|Reg_16W
block|,
name|MAXQ20
block|}
block|,
comment|/* The 16 accumulator registers : ACC[0h-Fh] */
block|{
literal|"A[0]"
block|,
name|ACC
block|,
literal|0x0
block|,
literal|0x00
operator||
name|ACC
block|,
name|Reg_8W
block|,
name|MAXQ10
block|}
block|,
block|{
literal|"A[1]"
block|,
name|ACC
block|,
literal|0x1
block|,
literal|0x10
operator||
name|ACC
block|,
name|Reg_8W
block|,
name|MAXQ10
block|}
block|,
block|{
literal|"A[2]"
block|,
name|ACC
block|,
literal|0x2
block|,
literal|0x20
operator||
name|ACC
block|,
name|Reg_8W
block|,
name|MAXQ10
block|}
block|,
block|{
literal|"A[3]"
block|,
name|ACC
block|,
literal|0x3
block|,
literal|0x30
operator||
name|ACC
block|,
name|Reg_8W
block|,
name|MAXQ10
block|}
block|,
block|{
literal|"A[4]"
block|,
name|ACC
block|,
literal|0x4
block|,
literal|0x40
operator||
name|ACC
block|,
name|Reg_8W
block|,
name|MAXQ10
block|}
block|,
block|{
literal|"A[5]"
block|,
name|ACC
block|,
literal|0x5
block|,
literal|0x50
operator||
name|ACC
block|,
name|Reg_8W
block|,
name|MAXQ10
block|}
block|,
block|{
literal|"A[6]"
block|,
name|ACC
block|,
literal|0x6
block|,
literal|0x60
operator||
name|ACC
block|,
name|Reg_8W
block|,
name|MAXQ10
block|}
block|,
block|{
literal|"A[7]"
block|,
name|ACC
block|,
literal|0x7
block|,
literal|0x70
operator||
name|ACC
block|,
name|Reg_8W
block|,
name|MAXQ10
block|}
block|,
block|{
literal|"A[8]"
block|,
name|ACC
block|,
literal|0x8
block|,
literal|0x80
operator||
name|ACC
block|,
name|Reg_8W
block|,
name|MAXQ10
block|}
block|,
block|{
literal|"A[9]"
block|,
name|ACC
block|,
literal|0x9
block|,
literal|0x90
operator||
name|ACC
block|,
name|Reg_8W
block|,
name|MAXQ10
block|}
block|,
block|{
literal|"A[10]"
block|,
name|ACC
block|,
literal|0xa
block|,
literal|0xa0
operator||
name|ACC
block|,
name|Reg_8W
block|,
name|MAXQ10
block|}
block|,
block|{
literal|"A[11]"
block|,
name|ACC
block|,
literal|0xb
block|,
literal|0xb0
operator||
name|ACC
block|,
name|Reg_8W
block|,
name|MAXQ10
block|}
block|,
block|{
literal|"A[12]"
block|,
name|ACC
block|,
literal|0xc
block|,
literal|0xc0
operator||
name|ACC
block|,
name|Reg_8W
block|,
name|MAXQ10
block|}
block|,
block|{
literal|"A[13]"
block|,
name|ACC
block|,
literal|0xd
block|,
literal|0xd0
operator||
name|ACC
block|,
name|Reg_8W
block|,
name|MAXQ10
block|}
block|,
block|{
literal|"A[14]"
block|,
name|ACC
block|,
literal|0xe
block|,
literal|0xe0
operator||
name|ACC
block|,
name|Reg_8W
block|,
name|MAXQ10
block|}
block|,
block|{
literal|"A[15]"
block|,
name|ACC
block|,
literal|0xf
block|,
literal|0xf0
operator||
name|ACC
block|,
name|Reg_8W
block|,
name|MAXQ10
block|}
block|,
comment|/* The Active Accumulators : Act_Acc[0h-1h] */
block|{
literal|"A[AP]"
block|,
name|Act_ACC
block|,
literal|0x1
block|,
literal|0x10
operator||
name|Act_ACC
block|,
name|Reg_8W
block|,
name|MAXQ10
block|}
block|,
comment|/* The Active Accumulators : Act_Acc[0h-1h] */
block|{
literal|"ACC"
block|,
name|Act_ACC
block|,
literal|0x0
block|,
literal|0x00
operator||
name|Act_ACC
block|,
name|Reg_8W
block|,
name|MAXQ10
block|}
block|,
comment|/* The Prefix Registers : PFX[0h,2h] */
block|{
literal|"PFX[0]"
block|,
name|PFX
block|,
literal|0x0
block|,
literal|0x00
operator||
name|PFX
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
block|{
literal|"PFX[1]"
block|,
name|PFX
block|,
literal|0x1
block|,
literal|0x10
operator||
name|PFX
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
block|{
literal|"PFX[2]"
block|,
name|PFX
block|,
literal|0x2
block|,
literal|0x20
operator||
name|PFX
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
block|{
literal|"PFX[3]"
block|,
name|PFX
block|,
literal|0x3
block|,
literal|0x30
operator||
name|PFX
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
block|{
literal|"PFX[4]"
block|,
name|PFX
block|,
literal|0x4
block|,
literal|0x40
operator||
name|PFX
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
block|{
literal|"PFX[5]"
block|,
name|PFX
block|,
literal|0x5
block|,
literal|0x50
operator||
name|PFX
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
block|{
literal|"PFX[6]"
block|,
name|PFX
block|,
literal|0x6
block|,
literal|0x60
operator||
name|PFX
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
block|{
literal|"PFX[7]"
block|,
name|PFX
block|,
literal|0x7
block|,
literal|0x70
operator||
name|PFX
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
comment|/* The Instruction Pointer Registers : IP[0h,8h] */
block|{
literal|"IP"
block|,
name|IP
block|,
literal|0x0
block|,
literal|0x00
operator||
name|IP
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
comment|/* The Stack Pointer Registers : SPIV[1h,9h] */
block|{
literal|"SP"
block|,
name|SPIV
block|,
literal|0x1
block|,
literal|0x10
operator||
name|SPIV
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
comment|/* The Interrupt Vector Registers : SPIV[2h,Ah] */
block|{
literal|"IV"
block|,
name|SPIV
block|,
literal|0x2
block|,
literal|0x20
operator||
name|SPIV
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
comment|/* ADDED for New Specification */
comment|/* The Loop Counter Registers : LCHILO[0h-4h,8h-Bh] */
block|{
literal|"LC[0]"
block|,
name|LC
block|,
literal|0x6
block|,
literal|0x60
operator||
name|LC
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
block|{
literal|"LC[1]"
block|,
name|LC
block|,
literal|0x7
block|,
literal|0x70
operator||
name|LC
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
comment|/* MODULE Eh Whole Column has changed */
block|{
literal|"OFFS"
block|,
name|MODE
block|,
literal|0x3
block|,
literal|0x30
operator||
name|MODE
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"DPC"
block|,
name|MODE
block|,
literal|0x4
block|,
literal|0x40
operator||
name|MODE
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
block|{
literal|"GR"
block|,
name|MODE
block|,
literal|0x5
block|,
literal|0x50
operator||
name|MODE
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
block|{
literal|"GRL"
block|,
name|MODE
block|,
literal|0x6
block|,
literal|0x60
operator||
name|MODE
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"BP"
block|,
name|MODE
block|,
literal|0x7
block|,
literal|0x70
operator||
name|MODE
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
block|{
literal|"GRS"
block|,
name|MODE
block|,
literal|0x8
block|,
literal|0x80
operator||
name|MODE
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
block|{
literal|"GRH"
block|,
name|MODE
block|,
literal|0x9
block|,
literal|0x90
operator||
name|MODE
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"GRXL"
block|,
name|MODE
block|,
literal|0xA
block|,
literal|0xA0
operator||
name|MODE
block|,
name|Reg_8R
block|,
name|MAX
block|}
block|,
block|{
literal|"FP"
block|,
name|MODE
block|,
literal|0xB
block|,
literal|0xB0
operator||
name|MODE
block|,
name|Reg_16R
block|,
name|MAX
block|}
block|,
comment|/* The Data Pointer registers : DP[3h,7h,Bh,Fh] */
block|{
literal|"DP[0]"
block|,
name|DP
block|,
literal|0x3
block|,
literal|0x30
operator||
name|DP
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
block|{
literal|"DP[1]"
block|,
name|DP
block|,
literal|0x7
block|,
literal|0x70
operator||
name|DP
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|, }
decl_stmt|;
end_decl_stmt

begin_typedef
typedef|typedef
struct|struct
block|{
name|char
modifier|*
name|name
decl_stmt|;
name|int
name|type
decl_stmt|;
block|}
name|match_table
typedef|;
end_typedef

begin_define
define|#
directive|define
name|GPIO0
value|0x00
end_define

begin_comment
comment|/* Gerneral Purpose I/O Module 0.  */
end_comment

begin_define
define|#
directive|define
name|GPIO1
value|0x01
end_define

begin_comment
comment|/* Gerneral Purpose I/O Module 1.  */
end_comment

begin_define
define|#
directive|define
name|RTC
value|0x00
end_define

begin_comment
comment|/* Real Time Clock Module.  */
end_comment

begin_define
define|#
directive|define
name|MAC
value|0x02
end_define

begin_comment
comment|/* Hardware Multiplier Module.  */
end_comment

begin_define
define|#
directive|define
name|SER0
value|0x02
end_define

begin_comment
comment|/* Contains the UART Registers.  */
end_comment

begin_define
define|#
directive|define
name|SPI
value|0x03
end_define

begin_comment
comment|/* Serial Pheripheral Interface Module.  */
end_comment

begin_define
define|#
directive|define
name|OWBM
value|0x03
end_define

begin_comment
comment|/* One Wire Bus Module.  */
end_comment

begin_define
define|#
directive|define
name|SER1
value|0x03
end_define

begin_comment
comment|/* Contains the UART Registers.  */
end_comment

begin_define
define|#
directive|define
name|TIMER20
value|0x03
end_define

begin_comment
comment|/* Timer Counter Module 2.  */
end_comment

begin_define
define|#
directive|define
name|TIMER21
value|0x04
end_define

begin_comment
comment|/* Timer Counter Module 2.  */
end_comment

begin_define
define|#
directive|define
name|JTAGD
value|0x03
end_define

begin_comment
comment|/* In-Circuit Debugging Support.  */
end_comment

begin_define
define|#
directive|define
name|LCD
value|0x03
end_define

begin_comment
comment|/* LCD register Modules.  */
end_comment

begin_comment
comment|/* Plugable modules register table f.  */
end_comment

begin_decl_stmt
name|reg_entry
name|peripheral_reg_table
index|[]
init|=
block|{
comment|/* -------- The GPIO Module Registers -------- */
comment|/* Port n Output Registers : GPIO[0h-4h] */
block|{
literal|"PO0"
block|,
name|GPIO0
block|,
literal|0x0
block|,
literal|0x00
operator||
name|MOD0
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"PO1"
block|,
name|GPIO0
block|,
literal|0x1
block|,
literal|0x10
operator||
name|MOD0
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"PO2"
block|,
name|GPIO0
block|,
literal|0x2
block|,
literal|0x20
operator||
name|MOD0
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"PO3"
block|,
name|GPIO0
block|,
literal|0x3
block|,
literal|0x30
operator||
name|MOD0
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
comment|/* External Interrupt Flag Register : GPIO[6h] */
block|{
literal|"EIF0"
block|,
name|GPIO0
block|,
literal|0x6
block|,
literal|0x60
operator||
name|MOD0
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
comment|/* External Interrupt Enable Register : GPIO[7h] */
block|{
literal|"EIE0"
block|,
name|GPIO0
block|,
literal|0x7
block|,
literal|0x70
operator||
name|MOD0
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
comment|/* Port n Input Registers : GPIO[8h-Bh] */
block|{
literal|"PI0"
block|,
name|GPIO0
block|,
literal|0x8
block|,
literal|0x80
operator||
name|MOD0
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"PI1"
block|,
name|GPIO0
block|,
literal|0x9
block|,
literal|0x90
operator||
name|MOD0
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"PI2"
block|,
name|GPIO0
block|,
literal|0xa
block|,
literal|0xa0
operator||
name|MOD0
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"PI3"
block|,
name|GPIO0
block|,
literal|0xb
block|,
literal|0xb0
operator||
name|MOD0
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"EIES0"
block|,
name|GPIO0
block|,
literal|0xc
block|,
literal|0xc0
operator||
name|MOD0
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
comment|/* Port n Direction Registers : GPIO[Ch-Fh] */
block|{
literal|"PD0"
block|,
name|GPIO0
block|,
literal|0x10
block|,
literal|0x10
operator||
name|MOD0
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"PD1"
block|,
name|GPIO0
block|,
literal|0x11
block|,
literal|0x11
operator||
name|MOD0
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"PD2"
block|,
name|GPIO0
block|,
literal|0x12
block|,
literal|0x12
operator||
name|MOD0
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"PD3"
block|,
name|GPIO0
block|,
literal|0x13
block|,
literal|0x13
operator||
name|MOD0
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
comment|/* -------- Real Time Counter Module RTC -------- */
comment|/* RTC Control Register : [01h] */
block|{
literal|"RCNT"
block|,
name|RTC
block|,
literal|0x19
block|,
literal|0x19
operator||
name|MOD0
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
comment|/* RTC Seconds High [02h] */
block|{
literal|"RTSS"
block|,
name|RTC
block|,
literal|0x1A
block|,
literal|0x1A
operator||
name|MOD0
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
comment|/* RTC Seconds Low [03h] */
block|{
literal|"RTSH"
block|,
name|RTC
block|,
literal|0x1b
block|,
literal|0x1b
operator||
name|MOD0
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
comment|/* RTC Subsecond Register [04h] */
block|{
literal|"RTSL"
block|,
name|RTC
block|,
literal|0x1C
block|,
literal|0x1C
operator||
name|MOD0
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
comment|/* RTC Alarm seconds high [05h] */
block|{
literal|"RSSA"
block|,
name|RTC
block|,
literal|0x1D
block|,
literal|0x1D
operator||
name|MOD0
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
comment|/* RTC Alarm seconds high [06h] */
block|{
literal|"RASH"
block|,
name|RTC
block|,
literal|0x1E
block|,
literal|0x1E
operator||
name|MOD0
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
comment|/* RTC Subsecond Alarm Register [07h] */
block|{
literal|"RASL"
block|,
name|RTC
block|,
literal|0x1F
block|,
literal|0x1F
operator||
name|MOD0
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
comment|/* -------- The GPIO Module Registers -------- */
comment|/* Port n Output Registers : GPIO[0h-4h] */
block|{
literal|"PO4"
block|,
name|GPIO1
block|,
literal|0x0
block|,
literal|0x00
operator||
name|MOD1
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"PO5"
block|,
name|GPIO1
block|,
literal|0x1
block|,
literal|0x10
operator||
name|MOD1
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"PO6"
block|,
name|GPIO1
block|,
literal|0x2
block|,
literal|0x20
operator||
name|MOD1
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"PO7"
block|,
name|GPIO1
block|,
literal|0x3
block|,
literal|0x30
operator||
name|MOD1
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
comment|/* External Interrupt Flag Register : GPIO[6h] */
block|{
literal|"EIF1"
block|,
name|GPIO0
block|,
literal|0x6
block|,
literal|0x60
operator||
name|MOD1
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
comment|/* External Interrupt Enable Register : GPIO[7h] */
block|{
literal|"EIE1"
block|,
name|GPIO0
block|,
literal|0x7
block|,
literal|0x70
operator||
name|MOD1
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
comment|/* Port n Input Registers : GPIO[8h-Bh] */
block|{
literal|"PI4"
block|,
name|GPIO1
block|,
literal|0x8
block|,
literal|0x80
operator||
name|MOD1
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"PI5"
block|,
name|GPIO1
block|,
literal|0x9
block|,
literal|0x90
operator||
name|MOD1
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"PI6"
block|,
name|GPIO1
block|,
literal|0xa
block|,
literal|0xa0
operator||
name|MOD1
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"PI7"
block|,
name|GPIO1
block|,
literal|0xb
block|,
literal|0xb0
operator||
name|MOD1
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"EIES1"
block|,
name|GPIO1
block|,
literal|0xc
block|,
literal|0xc0
operator||
name|MOD1
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
comment|/* Port n Direction Registers : GPIO[Ch-Fh] */
block|{
literal|"PD4"
block|,
name|GPIO1
block|,
literal|0x10
block|,
literal|0x10
operator||
name|MOD1
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"PD5"
block|,
name|GPIO1
block|,
literal|0x11
block|,
literal|0x11
operator||
name|MOD1
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"PD6"
block|,
name|GPIO1
block|,
literal|0x12
block|,
literal|0x12
operator||
name|MOD1
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"PD7"
block|,
name|GPIO1
block|,
literal|0x13
block|,
literal|0x13
operator||
name|MOD1
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
if|#
directive|if
literal|0
comment|/* Supply Boltage Check Register */
block|{    "SVS", GPIO1, 0x1e, 0x1e | GPIO1, Reg_8W, MAX},
comment|/* Wake up output register */
block|{    "WK0", GPIO1, 0x1f, 0x1f | GPIO1, Reg_8W, MAX},
endif|#
directive|endif
comment|/* */
comment|/* -------- MAC Hardware multiplier module -------- */
comment|/* MAC Hardware Multiplier control register: [01h] */
block|{
literal|"MCNT"
block|,
name|MAC
block|,
literal|0x1
block|,
literal|0x10
operator||
name|MOD2
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
comment|/* MAC Multiplier Operand A Register [02h] */
block|{
literal|"MA"
block|,
name|MAC
block|,
literal|0x2
block|,
literal|0x20
operator||
name|MOD2
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
comment|/* MAC Multiplier Operand B Register [03h] */
block|{
literal|"MB"
block|,
name|MAC
block|,
literal|0x3
block|,
literal|0x30
operator||
name|MOD2
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
comment|/* MAC Multiplier Accumulator 2 Register [04h] */
block|{
literal|"MC2"
block|,
name|MAC
block|,
literal|0x4
block|,
literal|0x40
operator||
name|MOD2
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
comment|/* MAC Multiplier Accumulator 1 Register [05h] */
block|{
literal|"MC1"
block|,
name|MAC
block|,
literal|0x5
block|,
literal|0x50
operator||
name|MOD2
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
comment|/* MAC Multiplier Accumulator 0 Register [06h] */
block|{
literal|"MC0"
block|,
name|MAC
block|,
literal|0x6
block|,
literal|0x60
operator||
name|MOD2
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
comment|/* -------- The Serial I/O module SER -------- */
comment|/* UART registers */
comment|/* Serial Port Control Register : SER[6h] */
block|{
literal|"SCON0"
block|,
name|SER0
block|,
literal|0x6
block|,
literal|0x60
operator||
name|MOD2
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
comment|/* Serial Data Buffer Register : SER[7h] */
block|{
literal|"SBUF0"
block|,
name|SER0
block|,
literal|0x7
block|,
literal|0x70
operator||
name|MOD2
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
comment|/* Serial Port Mode Register : SER[4h] */
block|{
literal|"SMD0"
block|,
name|SER0
block|,
literal|0x8
block|,
literal|0x80
operator||
name|MOD2
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
comment|/* Serial Port Phase Register : SER[4h] */
block|{
literal|"PR0"
block|,
name|SER1
block|,
literal|0x9
block|,
literal|0x90
operator||
name|MOD2
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
comment|/* ------ LCD Display Module ---------- */
block|{
literal|"LCRA"
block|,
name|LCD
block|,
literal|0xd
block|,
literal|0xd0
operator||
name|MOD2
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
block|{
literal|"LCFG"
block|,
name|LCD
block|,
literal|0xe
block|,
literal|0xe0
operator||
name|MOD2
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"LCD16"
block|,
name|LCD
block|,
literal|0xf
block|,
literal|0xf0
operator||
name|MOD2
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"LCD0"
block|,
name|LCD
block|,
literal|0x10
block|,
literal|0x10
operator||
name|MOD2
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"LCD1"
block|,
name|LCD
block|,
literal|0x11
block|,
literal|0x11
operator||
name|MOD2
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"LCD2"
block|,
name|LCD
block|,
literal|0x12
block|,
literal|0x12
operator||
name|MOD2
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"LCD3"
block|,
name|LCD
block|,
literal|0x13
block|,
literal|0x13
operator||
name|MOD2
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"LCD4"
block|,
name|LCD
block|,
literal|0x14
block|,
literal|0x14
operator||
name|MOD2
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"LCD5"
block|,
name|LCD
block|,
literal|0x15
block|,
literal|0x15
operator||
name|MOD2
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"LCD6"
block|,
name|LCD
block|,
literal|0x16
block|,
literal|0x16
operator||
name|MOD2
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"LCD7"
block|,
name|LCD
block|,
literal|0x17
block|,
literal|0x17
operator||
name|MOD2
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"LCD8"
block|,
name|LCD
block|,
literal|0x18
block|,
literal|0x18
operator||
name|MOD2
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"LCD9"
block|,
name|LCD
block|,
literal|0x19
block|,
literal|0x19
operator||
name|MOD2
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"LCD10"
block|,
name|LCD
block|,
literal|0x1a
block|,
literal|0x1a
operator||
name|MOD2
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"LCD11"
block|,
name|LCD
block|,
literal|0x1b
block|,
literal|0x1b
operator||
name|MOD2
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"LCD12"
block|,
name|LCD
block|,
literal|0x1c
block|,
literal|0x1c
operator||
name|MOD2
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"LCD13"
block|,
name|LCD
block|,
literal|0x1d
block|,
literal|0x1d
operator||
name|MOD2
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"LCD14"
block|,
name|LCD
block|,
literal|0x1e
block|,
literal|0x1e
operator||
name|MOD2
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"LCD15"
block|,
name|LCD
block|,
literal|0x1f
block|,
literal|0x1f
operator||
name|MOD2
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
comment|/* -------- SPI registers -------- */
comment|/* SPI data buffer Register : SER[7h] */
block|{
literal|"SPIB"
block|,
name|SPI
block|,
literal|0x5
block|,
literal|0x50
operator||
name|MOD3
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
comment|/* SPI Control Register : SER[8h] Note : Bit 7 is a read only bit */
block|{
literal|"SPICN"
block|,
name|SPI
block|,
literal|0x15
block|,
literal|0x15
operator||
name|MOD3
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
comment|/* SPI Configuration Register : SER[9h] Note : Bits 4,3 and 2 are read      only.  */
block|{
literal|"SPICF"
block|,
name|SPI
block|,
literal|0x16
block|,
literal|0x16
operator||
name|MOD3
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
comment|/* SPI Clock Register : SER[Ah] */
block|{
literal|"SPICK"
block|,
name|SPI
block|,
literal|0x17
block|,
literal|0x17
operator||
name|MOD3
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
comment|/* -------- One Wire Bus Master OWBM -------- */
comment|/* OWBM One Wire address Register register: [01h] */
block|{
literal|"OWA"
block|,
name|OWBM
block|,
literal|0x13
block|,
literal|0x13
operator||
name|MOD3
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
comment|/* OWBM One Wire Data register: [02h] */
block|{
literal|"OWD"
block|,
name|OWBM
block|,
literal|0x14
block|,
literal|0x14
operator||
name|MOD3
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
comment|/* -------- The Serial I/O module SER -------- */
comment|/* UART registers */
comment|/* Serial Port Control Register : SER[6h] */
block|{
literal|"SCON1"
block|,
name|SER1
block|,
literal|0x6
block|,
literal|0x60
operator||
name|MOD3
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
comment|/* Serial Data Buffer Register : SER[7h] */
block|{
literal|"SBUF1"
block|,
name|SER1
block|,
literal|0x7
block|,
literal|0x70
operator||
name|MOD3
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
comment|/* Serial Port Mode Register : SER[4h] */
block|{
literal|"SMD1"
block|,
name|SER1
block|,
literal|0x8
block|,
literal|0x80
operator||
name|MOD3
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
comment|/* Serial Port Phase Register : SER[4h] */
block|{
literal|"PR1"
block|,
name|SER1
block|,
literal|0x9
block|,
literal|0x90
operator||
name|MOD3
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
comment|/* -------- Timer/Counter 2 Module -------- */
comment|/* Timer 2 configuration Register : TC[3h] */
block|{
literal|"T2CNA0"
block|,
name|TIMER20
block|,
literal|0x0
block|,
literal|0x00
operator||
name|MOD3
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"T2H0"
block|,
name|TIMER20
block|,
literal|0x1
block|,
literal|0x10
operator||
name|MOD3
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"T2RH0"
block|,
name|TIMER20
block|,
literal|0x2
block|,
literal|0x20
operator||
name|MOD3
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"T2CH0"
block|,
name|TIMER20
block|,
literal|0x3
block|,
literal|0x30
operator||
name|MOD3
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"T2CNB0"
block|,
name|TIMER20
block|,
literal|0xc
block|,
literal|0xc0
operator||
name|MOD3
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"T2V0"
block|,
name|TIMER20
block|,
literal|0xd
block|,
literal|0xd0
operator||
name|MOD3
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
block|{
literal|"T2R0"
block|,
name|TIMER20
block|,
literal|0xe
block|,
literal|0xe0
operator||
name|MOD3
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
block|{
literal|"T2C0"
block|,
name|TIMER20
block|,
literal|0xf
block|,
literal|0xf0
operator||
name|MOD3
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
block|{
literal|"T2CFG0"
block|,
name|TIMER20
block|,
literal|0x10
block|,
literal|0x10
operator||
name|MOD3
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
comment|/* Timer 2-1 configuration Register : TC[4h] */
block|{
literal|"T2CNA1"
block|,
name|TIMER21
block|,
literal|0x0
block|,
literal|0x00
operator||
name|MOD4
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"T2H1"
block|,
name|TIMER21
block|,
literal|0x1
block|,
literal|0x10
operator||
name|MOD4
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"T2RH1"
block|,
name|TIMER21
block|,
literal|0x2
block|,
literal|0x20
operator||
name|MOD4
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"T2CH1"
block|,
name|TIMER21
block|,
literal|0x3
block|,
literal|0x30
operator||
name|MOD4
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"T2CNA2"
block|,
name|TIMER21
block|,
literal|0x4
block|,
literal|0x40
operator||
name|MOD4
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"T2H2"
block|,
name|TIMER21
block|,
literal|0x5
block|,
literal|0x50
operator||
name|MOD4
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"T2RH2"
block|,
name|TIMER21
block|,
literal|0x6
block|,
literal|0x60
operator||
name|MOD4
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"T2CH2"
block|,
name|TIMER21
block|,
literal|0x7
block|,
literal|0x70
operator||
name|MOD4
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"T2CNB1"
block|,
name|TIMER21
block|,
literal|0x8
block|,
literal|0x80
operator||
name|MOD4
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"T2V1"
block|,
name|TIMER21
block|,
literal|0x9
block|,
literal|0x90
operator||
name|MOD4
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
block|{
literal|"T2R1"
block|,
name|TIMER21
block|,
literal|0xa
block|,
literal|0xa0
operator||
name|MOD4
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
block|{
literal|"T2C1"
block|,
name|TIMER21
block|,
literal|0xb
block|,
literal|0xb0
operator||
name|MOD4
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
block|{
literal|"T2CNB2"
block|,
name|TIMER21
block|,
literal|0xc
block|,
literal|0xc0
operator||
name|MOD4
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"T2V2"
block|,
name|TIMER21
block|,
literal|0xd
block|,
literal|0xd0
operator||
name|MOD4
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
block|{
literal|"T2R2"
block|,
name|TIMER21
block|,
literal|0xe
block|,
literal|0xe0
operator||
name|MOD4
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
block|{
literal|"T2C2"
block|,
name|TIMER21
block|,
literal|0xf
block|,
literal|0xf0
operator||
name|MOD4
block|,
name|Reg_16W
block|,
name|MAX
block|}
block|,
block|{
literal|"T2CFG1"
block|,
name|TIMER21
block|,
literal|0x10
block|,
literal|0x10
operator||
name|MOD4
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
literal|"T2CFG2"
block|,
name|TIMER21
block|,
literal|0x11
block|,
literal|0x11
operator||
name|MOD4
block|,
name|Reg_8W
block|,
name|MAX
block|}
block|,
block|{
name|NULL
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Memory access argument.  */
end_comment

begin_struct
struct|struct
name|mem_access
block|{
name|char
modifier|*
name|name
decl_stmt|;
comment|/* Name of the Memory access operand.  */
name|int
name|opcode
decl_stmt|;
comment|/* Its corresponding opcode.  */
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|mem_access
name|mem_access
typedef|;
end_typedef

begin_comment
comment|/* The Memory table for accessing the data memory through particular registers.  */
end_comment

begin_decl_stmt
name|struct
name|mem_access
name|mem_table
index|[]
init|=
block|{
comment|/* The Pop Operation on the stack.  */
block|{
literal|"@SP--"
block|,
literal|0x0d
block|}
block|,
comment|/* Data Pointer 0 */
block|{
literal|"@DP[0]"
block|,
literal|0x0f
block|}
block|,
comment|/* Data Ponter 1 */
block|{
literal|"@DP[1]"
block|,
literal|0x4f
block|}
block|,
comment|/* Data Pointer 0 post increment */
block|{
literal|"@DP[0]++"
block|,
literal|0x1f
block|}
block|,
comment|/* Data Pointer 1 post increment */
block|{
literal|"@DP[1]++"
block|,
literal|0x5f
block|}
block|,
comment|/* Data Pointer 0 post decrement */
block|{
literal|"@DP[0]--"
block|,
literal|0x2f
block|}
block|,
comment|/* Data Pointer 1 post decrement */
block|{
literal|"@DP[1]--"
block|,
literal|0x6f
block|}
block|,
comment|/* ADDED According to New Specification.  */
block|{
literal|"@BP[OFFS]"
block|,
literal|0x0E
block|}
block|,
block|{
literal|"@BP[OFFS++]"
block|,
literal|0x1E
block|}
block|,
block|{
literal|"@BP[OFFS--]"
block|,
literal|0x2E
block|}
block|,
block|{
literal|"NUL"
block|,
literal|0x76
block|}
block|,
block|{
literal|"@++SP"
block|,
literal|0x0D
block|}
block|,
block|{
literal|"@BP[++OFFS]"
block|,
literal|0x1E
block|}
block|,
block|{
literal|"@BP[--OFFS]"
block|,
literal|0x2E
block|}
block|,
block|{
literal|"@++DP[0]"
block|,
literal|0x1F
block|}
block|,
block|{
literal|"@++DP[1]"
block|,
literal|0x5F
block|}
block|,
block|{
literal|"@--DP[0]"
block|,
literal|0x2F
block|}
block|,
block|{
literal|"@--DP[1]"
block|,
literal|0x6F
block|}
block|}
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Register bit argument.  */
end_comment

begin_struct
struct|struct
name|reg_bit
block|{
name|reg_entry
modifier|*
name|reg
decl_stmt|;
name|int
name|bit
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|reg_bit
name|reg_bit
typedef|;
end_typedef

begin_comment
comment|/* There are certain names given to particular bits of some registers.    These will be taken care of here.  */
end_comment

begin_struct
struct|struct
name|bit_name
block|{
name|char
modifier|*
name|name
decl_stmt|;
name|char
modifier|*
name|reg_bit
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|bit_name
name|bit_name
typedef|;
end_typedef

begin_decl_stmt
name|bit_name
name|bit_table
index|[]
init|=
block|{
block|{
literal|"RI"
block|,
literal|"SCON.0"
block|}
block|,
comment|/* FOr APC */
block|{
literal|"MOD0"
block|,
literal|"APC.0"
block|}
block|,
block|{
literal|"MOD1"
block|,
literal|"APC.1"
block|}
block|,
block|{
literal|"MOD2"
block|,
literal|"APC.2"
block|}
block|,
block|{
literal|"IDS"
block|,
literal|"APC.6"
block|}
block|,
block|{
literal|"CLR"
block|,
literal|"APC.6"
block|}
block|,
comment|/* For PSF */
block|{
literal|"E"
block|,
literal|"PSF.0"
block|}
block|,
block|{
literal|"C"
block|,
literal|"PSF.1"
block|}
block|,
block|{
literal|"OV"
block|,
literal|"PSF.2"
block|}
block|,
block|{
literal|"S"
block|,
literal|"PSF.6"
block|}
block|,
block|{
literal|"Z"
block|,
literal|"PSF.7"
block|}
block|,
comment|/* For IC */
block|{
literal|"IGE"
block|,
literal|"IC.0"
block|}
block|,
block|{
literal|"INS"
block|,
literal|"IC.1"
block|}
block|,
block|{
literal|"CGDS"
block|,
literal|"IC.5"
block|}
block|,
comment|/* For IMR */
block|{
literal|"IM0"
block|,
literal|"IMR.0"
block|}
block|,
block|{
literal|"IM1"
block|,
literal|"IMR.1"
block|}
block|,
block|{
literal|"IM2"
block|,
literal|"IMR.2"
block|}
block|,
block|{
literal|"IM3"
block|,
literal|"IMR.3"
block|}
block|,
block|{
literal|"IM4"
block|,
literal|"IMR.4"
block|}
block|,
block|{
literal|"IM5"
block|,
literal|"IMR.5"
block|}
block|,
block|{
literal|"IMS"
block|,
literal|"IMR.7"
block|}
block|,
comment|/* For SC */
block|{
literal|"PWL"
block|,
literal|"SC.1"
block|}
block|,
block|{
literal|"ROD"
block|,
literal|"SC.2"
block|}
block|,
block|{
literal|"UPA"
block|,
literal|"SC.3"
block|}
block|,
block|{
literal|"CDA0"
block|,
literal|"SC.4"
block|}
block|,
block|{
literal|"CDA1"
block|,
literal|"SC.5"
block|}
block|,
comment|/* For IIR */
block|{
literal|"II0"
block|,
literal|"IIR.0"
block|}
block|,
block|{
literal|"II1"
block|,
literal|"IIR.1"
block|}
block|,
block|{
literal|"II2"
block|,
literal|"IIR.2"
block|}
block|,
block|{
literal|"II3"
block|,
literal|"IIR.3"
block|}
block|,
block|{
literal|"II4"
block|,
literal|"IIR.4"
block|}
block|,
block|{
literal|"II5"
block|,
literal|"IIR.5"
block|}
block|,
block|{
literal|"IIS"
block|,
literal|"IIR.7"
block|}
block|,
comment|/* For CKCN */
block|{
literal|"CD0"
block|,
literal|"CKCN.0"
block|}
block|,
block|{
literal|"CD1"
block|,
literal|"CKCN.1"
block|}
block|,
block|{
literal|"PMME"
block|,
literal|"CKCN.2"
block|}
block|,
block|{
literal|"SWB"
block|,
literal|"CKCN.3"
block|}
block|,
block|{
literal|"STOP"
block|,
literal|"CKCN.4"
block|}
block|,
block|{
literal|"RGMD"
block|,
literal|"CKCN.5"
block|}
block|,
block|{
literal|"RGSL"
block|,
literal|"CKCN.6"
block|}
block|,
comment|/* For WDCN */
block|{
literal|"RWT"
block|,
literal|"WDCN.0"
block|}
block|,
block|{
literal|"EWT"
block|,
literal|"WDCN.1"
block|}
block|,
block|{
literal|"WTRF"
block|,
literal|"WDCN.2"
block|}
block|,
block|{
literal|"WDIF"
block|,
literal|"WDCN.3"
block|}
block|,
block|{
literal|"WD0"
block|,
literal|"WDCN.4"
block|}
block|,
block|{
literal|"WD1"
block|,
literal|"WDCN.5"
block|}
block|,
block|{
literal|"EWDI"
block|,
literal|"WDCN.6"
block|}
block|,
block|{
literal|"POR"
block|,
literal|"WDCN.7"
block|}
block|,
comment|/* For DPC */
block|{
literal|"DPS0"
block|,
literal|"DPC.0"
block|}
block|,
block|{
literal|"DPS1"
block|,
literal|"DPC.1"
block|}
block|,
block|{
literal|"WBS0"
block|,
literal|"DPC.2"
block|}
block|,
block|{
literal|"WBS1"
block|,
literal|"DPC.3"
block|}
block|,
block|{
literal|"WBS2"
block|,
literal|"DPC.4"
block|}
block|,
comment|/* For SCON */
block|{
literal|"TI"
block|,
literal|"SCON.1"
block|}
block|,
block|{
literal|"RB8"
block|,
literal|"SCON.2"
block|}
block|,
block|{
literal|"TB8"
block|,
literal|"SCON.3"
block|}
block|,
block|{
literal|"REN"
block|,
literal|"SCON.4"
block|}
block|,
block|{
literal|"SM2"
block|,
literal|"SCON.5"
block|}
block|,
block|{
literal|"SM1"
block|,
literal|"SCON.6"
block|}
block|,
block|{
literal|"SM0"
block|,
literal|"SCON.7"
block|}
block|,
block|{
literal|"FE"
block|,
literal|"SCON.7"
block|}
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|char
modifier|*
name|LSInstr
index|[]
init|=
block|{
literal|"LJUMP"
block|,
literal|"SJUMP"
block|,
literal|"LDJNZ"
block|,
literal|"SDJNZ"
block|,
literal|"LCALL"
block|,
literal|"SCALL"
block|,
literal|"JUMP"
block|,
literal|"DJNZ"
block|,
literal|"CALL"
block|,
name|NULL
block|}
decl_stmt|;
end_decl_stmt

begin_typedef
typedef|typedef
enum|enum
block|{
name|DST
block|,
name|SRC
block|,
name|BOTH
block|, }
name|type1
typedef|;
end_typedef

begin_struct
struct|struct
name|mem_access_syntax
block|{
name|char
name|name
index|[
literal|12
index|]
decl_stmt|;
comment|/* Name of the Memory access operand.  */
name|type1
name|type
decl_stmt|;
name|char
modifier|*
name|invalid_op
index|[
literal|5
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|mem_access_syntax
name|mem_access_syntax
typedef|;
end_typedef

begin_comment
comment|/* The Memory Access table for accessing the data memory through particular    registers.  */
end_comment

begin_decl_stmt
specifier|const
name|mem_access_syntax
name|mem_access_syntax_table
index|[]
init|=
block|{
block|{
literal|"@SP--"
block|,
name|SRC
block|,
block|{
name|NULL
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|}
block|}
block|,
comment|/* Data Pointer 0 */
block|{
literal|"@DP[0]"
block|,
name|BOTH
block|,
block|{
literal|"@DP[0]--"
block|,
literal|"@DP[0]++"
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|}
block|}
block|,
comment|/* Data Ponter 1 */
block|{
literal|"@DP[1]"
block|,
name|BOTH
block|,
block|{
literal|"@DP[1]--"
block|,
literal|"@DP[1]++"
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|}
block|}
block|,
comment|/* Data Pointer 0 post increment */
block|{
literal|"@DP[0]++"
block|,
name|SRC
block|,
block|{
name|NULL
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|}
block|}
block|,
comment|/* Data Pointer 1 post increment */
block|{
literal|"@DP[1]++"
block|,
name|SRC
block|,
block|{
name|NULL
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|}
block|}
block|,
comment|/* Data Pointer 0 post decrement */
block|{
literal|"@DP[0]--"
block|,
name|SRC
block|,
block|{
name|NULL
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|}
block|}
block|,
comment|/* Data Pointer 1 post decrement */
block|{
literal|"@DP[1]--"
block|,
name|SRC
block|,
block|{
name|NULL
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|}
block|}
block|,
comment|/* ADDED According to New Specification */
block|{
literal|"@BP[OFFS]"
block|,
name|BOTH
block|,
block|{
literal|"@BP[OFFS++]"
block|,
literal|"@BP[OFFS--]"
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|}
block|}
block|,
block|{
literal|"@BP[OFFS++]"
block|,
name|SRC
block|,
block|{
name|NULL
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|}
block|}
block|,
block|{
literal|"@BP[OFFS--]"
block|,
name|SRC
block|,
block|{
name|NULL
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|}
block|}
block|,
block|{
literal|"NUL"
block|,
name|DST
block|,
block|{
name|NULL
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|}
block|}
block|,
block|{
literal|"@++SP"
block|,
name|DST
block|,
block|{
name|NULL
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|}
block|}
block|,
block|{
literal|"@BP[++OFFS]"
block|,
name|DST
block|,
block|{
literal|"@BP[OFFS--]"
block|,
literal|"@BP[OFFS++]"
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|}
block|}
block|,
block|{
literal|"@BP[--OFFS]"
block|,
name|DST
block|,
block|{
literal|"@BP[OFFS--]"
block|,
literal|"@BP[OFFS++]"
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|}
block|}
block|,
block|{
literal|"@++DP[0]"
block|,
name|DST
block|,
block|{
literal|"@DP[0]--"
block|,
literal|"@DP[0]++"
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|}
block|}
block|,
block|{
literal|"@++DP[1]"
block|,
name|DST
block|,
block|{
literal|"@DP[1]--"
block|,
literal|"@DP[1]++"
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|}
block|}
block|,
block|{
literal|"@--DP[0]"
block|,
name|DST
block|,
block|{
literal|"@DP[0]++"
block|,
literal|"@DP[0]--"
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|}
block|}
block|,
block|{
literal|"@--DP[1]"
block|,
name|DST
block|,
block|{
literal|"@DP[1]++"
block|,
literal|"@DP[1]--"
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|}
block|}
block|}
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

