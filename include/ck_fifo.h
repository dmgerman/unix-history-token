begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010-2015 Samy Al Bahra.  * Copyright 2011 David Joseph.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CK_FIFO_H
end_ifndef

begin_define
define|#
directive|define
name|CK_FIFO_H
end_define

begin_include
include|#
directive|include
file|<ck_cc.h>
end_include

begin_include
include|#
directive|include
file|<ck_md.h>
end_include

begin_include
include|#
directive|include
file|<ck_pr.h>
end_include

begin_include
include|#
directive|include
file|<ck_spinlock.h>
end_include

begin_include
include|#
directive|include
file|<ck_stddef.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|CK_F_FIFO_SPSC
end_ifndef

begin_define
define|#
directive|define
name|CK_F_FIFO_SPSC
end_define

begin_struct
struct|struct
name|ck_fifo_spsc_entry
block|{
name|void
modifier|*
name|value
decl_stmt|;
name|struct
name|ck_fifo_spsc_entry
modifier|*
name|next
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|ck_fifo_spsc_entry
name|ck_fifo_spsc_entry_t
typedef|;
end_typedef

begin_struct
struct|struct
name|ck_fifo_spsc
block|{
name|ck_spinlock_t
name|m_head
decl_stmt|;
name|struct
name|ck_fifo_spsc_entry
modifier|*
name|head
decl_stmt|;
name|char
name|pad
index|[
name|CK_MD_CACHELINE
operator|-
sizeof|sizeof
argument_list|(
expr|struct
name|ck_fifo_spsc_entry
operator|*
argument_list|)
operator|-
sizeof|sizeof
argument_list|(
name|ck_spinlock_t
argument_list|)
index|]
decl_stmt|;
name|ck_spinlock_t
name|m_tail
decl_stmt|;
name|struct
name|ck_fifo_spsc_entry
modifier|*
name|tail
decl_stmt|;
name|struct
name|ck_fifo_spsc_entry
modifier|*
name|head_snapshot
decl_stmt|;
name|struct
name|ck_fifo_spsc_entry
modifier|*
name|garbage
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|ck_fifo_spsc
name|ck_fifo_spsc_t
typedef|;
end_typedef

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_fifo_spsc_enqueue_trylock
parameter_list|(
name|struct
name|ck_fifo_spsc
modifier|*
name|fifo
parameter_list|)
block|{
return|return
name|ck_spinlock_trylock
argument_list|(
operator|&
name|fifo
operator|->
name|m_tail
argument_list|)
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_fifo_spsc_enqueue_lock
parameter_list|(
name|struct
name|ck_fifo_spsc
modifier|*
name|fifo
parameter_list|)
block|{
name|ck_spinlock_lock
argument_list|(
operator|&
name|fifo
operator|->
name|m_tail
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_fifo_spsc_enqueue_unlock
parameter_list|(
name|struct
name|ck_fifo_spsc
modifier|*
name|fifo
parameter_list|)
block|{
name|ck_spinlock_unlock
argument_list|(
operator|&
name|fifo
operator|->
name|m_tail
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_fifo_spsc_dequeue_trylock
parameter_list|(
name|struct
name|ck_fifo_spsc
modifier|*
name|fifo
parameter_list|)
block|{
return|return
name|ck_spinlock_trylock
argument_list|(
operator|&
name|fifo
operator|->
name|m_head
argument_list|)
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_fifo_spsc_dequeue_lock
parameter_list|(
name|struct
name|ck_fifo_spsc
modifier|*
name|fifo
parameter_list|)
block|{
name|ck_spinlock_lock
argument_list|(
operator|&
name|fifo
operator|->
name|m_head
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_fifo_spsc_dequeue_unlock
parameter_list|(
name|struct
name|ck_fifo_spsc
modifier|*
name|fifo
parameter_list|)
block|{
name|ck_spinlock_unlock
argument_list|(
operator|&
name|fifo
operator|->
name|m_head
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_fifo_spsc_init
parameter_list|(
name|struct
name|ck_fifo_spsc
modifier|*
name|fifo
parameter_list|,
name|struct
name|ck_fifo_spsc_entry
modifier|*
name|stub
parameter_list|)
block|{
name|ck_spinlock_init
argument_list|(
operator|&
name|fifo
operator|->
name|m_head
argument_list|)
expr_stmt|;
name|ck_spinlock_init
argument_list|(
operator|&
name|fifo
operator|->
name|m_tail
argument_list|)
expr_stmt|;
name|stub
operator|->
name|next
operator|=
name|NULL
expr_stmt|;
name|fifo
operator|->
name|head
operator|=
name|fifo
operator|->
name|tail
operator|=
name|fifo
operator|->
name|head_snapshot
operator|=
name|fifo
operator|->
name|garbage
operator|=
name|stub
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_fifo_spsc_deinit
parameter_list|(
name|struct
name|ck_fifo_spsc
modifier|*
name|fifo
parameter_list|,
name|struct
name|ck_fifo_spsc_entry
modifier|*
modifier|*
name|garbage
parameter_list|)
block|{
operator|*
name|garbage
operator|=
name|fifo
operator|->
name|head
expr_stmt|;
name|fifo
operator|->
name|head
operator|=
name|fifo
operator|->
name|tail
operator|=
name|NULL
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_fifo_spsc_enqueue
parameter_list|(
name|struct
name|ck_fifo_spsc
modifier|*
name|fifo
parameter_list|,
name|struct
name|ck_fifo_spsc_entry
modifier|*
name|entry
parameter_list|,
name|void
modifier|*
name|value
parameter_list|)
block|{
name|entry
operator|->
name|value
operator|=
name|value
expr_stmt|;
name|entry
operator|->
name|next
operator|=
name|NULL
expr_stmt|;
comment|/* If stub->next is visible, guarantee that entry is consistent. */
name|ck_pr_fence_store
argument_list|()
expr_stmt|;
name|ck_pr_store_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|tail
operator|->
name|next
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|fifo
operator|->
name|tail
operator|=
name|entry
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_fifo_spsc_dequeue
parameter_list|(
name|struct
name|ck_fifo_spsc
modifier|*
name|fifo
parameter_list|,
name|void
modifier|*
name|value
parameter_list|)
block|{
name|struct
name|ck_fifo_spsc_entry
modifier|*
name|entry
decl_stmt|;
comment|/* 	 * The head pointer is guaranteed to always point to a stub entry. 	 * If the stub entry does not point to an entry, then the queue is 	 * empty. 	 */
name|entry
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|head
operator|->
name|next
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|==
name|NULL
condition|)
return|return
name|false
return|;
comment|/* If entry is visible, guarantee store to value is visible. */
name|ck_pr_store_ptr_unsafe
argument_list|(
name|value
argument_list|,
name|entry
operator|->
name|value
argument_list|)
expr_stmt|;
name|ck_pr_fence_store
argument_list|()
expr_stmt|;
name|ck_pr_store_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|head
argument_list|,
name|entry
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
end_function

begin_comment
comment|/*  * Recycle a node. This technique for recycling nodes is based on  * Dmitriy Vyukov's work.  */
end_comment

begin_expr_stmt
name|CK_CC_INLINE
specifier|static
expr|struct
name|ck_fifo_spsc_entry
operator|*
name|ck_fifo_spsc_recycle
argument_list|(
argument|struct ck_fifo_spsc *fifo
argument_list|)
block|{ 	struct
name|ck_fifo_spsc_entry
operator|*
name|garbage
block|;
if|if
condition|(
name|fifo
operator|->
name|head_snapshot
operator|==
name|fifo
operator|->
name|garbage
condition|)
block|{
name|fifo
operator|->
name|head_snapshot
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|head
argument_list|)
expr_stmt|;
if|if
condition|(
name|fifo
operator|->
name|head_snapshot
operator|==
name|fifo
operator|->
name|garbage
condition|)
return|return
name|NULL
return|;
block|}
name|garbage
operator|=
name|fifo
operator|->
name|garbage
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|fifo
operator|->
name|garbage
operator|=
name|garbage
operator|->
name|next
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|garbage
return|;
end_return

begin_function
unit|}  CK_CC_INLINE
specifier|static
name|bool
name|ck_fifo_spsc_isempty
parameter_list|(
name|struct
name|ck_fifo_spsc
modifier|*
name|fifo
parameter_list|)
block|{
name|struct
name|ck_fifo_spsc_entry
modifier|*
name|head
init|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|head
argument_list|)
decl_stmt|;
return|return
name|ck_pr_load_ptr
argument_list|(
operator|&
name|head
operator|->
name|next
argument_list|)
operator|==
name|NULL
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CK_FIFO_SPSC_ISEMPTY
parameter_list|(
name|f
parameter_list|)
value|((f)->head->next == NULL)
end_define

begin_define
define|#
directive|define
name|CK_FIFO_SPSC_FIRST
parameter_list|(
name|f
parameter_list|)
value|((f)->head->next)
end_define

begin_define
define|#
directive|define
name|CK_FIFO_SPSC_NEXT
parameter_list|(
name|m
parameter_list|)
value|((m)->next)
end_define

begin_define
define|#
directive|define
name|CK_FIFO_SPSC_SPARE
parameter_list|(
name|f
parameter_list|)
value|((f)->head)
end_define

begin_define
define|#
directive|define
name|CK_FIFO_SPSC_FOREACH
parameter_list|(
name|fifo
parameter_list|,
name|entry
parameter_list|)
define|\
value|for ((entry) = CK_FIFO_SPSC_FIRST(fifo);		\ 	     (entry) != NULL;					\ 	     (entry) = CK_FIFO_SPSC_NEXT(entry))
end_define

begin_define
define|#
directive|define
name|CK_FIFO_SPSC_FOREACH_SAFE
parameter_list|(
name|fifo
parameter_list|,
name|entry
parameter_list|,
name|T
parameter_list|)
define|\
value|for ((entry) = CK_FIFO_SPSC_FIRST(fifo);		\ 	     (entry) != NULL&& ((T) = (entry)->next, 1);	\ 	     (entry) = (T))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CK_F_FIFO_SPSC */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|CK_F_PR_CAS_PTR_2
end_ifdef

begin_ifndef
ifndef|#
directive|ifndef
name|CK_F_FIFO_MPMC
end_ifndef

begin_define
define|#
directive|define
name|CK_F_FIFO_MPMC
end_define

begin_struct_decl
struct_decl|struct
name|ck_fifo_mpmc_entry
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|ck_fifo_mpmc_pointer
block|{
name|struct
name|ck_fifo_mpmc_entry
modifier|*
name|pointer
decl_stmt|;
name|char
modifier|*
name|generation
name|CK_CC_PACKED
decl_stmt|;
block|}
name|CK_CC_ALIGN
argument_list|(
literal|16
argument_list|)
struct|;
end_struct

begin_struct
struct|struct
name|ck_fifo_mpmc_entry
block|{
name|void
modifier|*
name|value
decl_stmt|;
name|struct
name|ck_fifo_mpmc_pointer
name|next
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|ck_fifo_mpmc_entry
name|ck_fifo_mpmc_entry_t
typedef|;
end_typedef

begin_struct
struct|struct
name|ck_fifo_mpmc
block|{
name|struct
name|ck_fifo_mpmc_pointer
name|head
decl_stmt|;
name|char
name|pad
index|[
name|CK_MD_CACHELINE
operator|-
sizeof|sizeof
argument_list|(
expr|struct
name|ck_fifo_mpmc_pointer
argument_list|)
index|]
decl_stmt|;
name|struct
name|ck_fifo_mpmc_pointer
name|tail
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|ck_fifo_mpmc
name|ck_fifo_mpmc_t
typedef|;
end_typedef

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_fifo_mpmc_init
parameter_list|(
name|struct
name|ck_fifo_mpmc
modifier|*
name|fifo
parameter_list|,
name|struct
name|ck_fifo_mpmc_entry
modifier|*
name|stub
parameter_list|)
block|{
name|stub
operator|->
name|next
operator|.
name|pointer
operator|=
name|NULL
expr_stmt|;
name|stub
operator|->
name|next
operator|.
name|generation
operator|=
name|NULL
expr_stmt|;
name|fifo
operator|->
name|head
operator|.
name|pointer
operator|=
name|fifo
operator|->
name|tail
operator|.
name|pointer
operator|=
name|stub
expr_stmt|;
name|fifo
operator|->
name|head
operator|.
name|generation
operator|=
name|fifo
operator|->
name|tail
operator|.
name|generation
operator|=
name|NULL
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_fifo_mpmc_deinit
parameter_list|(
name|struct
name|ck_fifo_mpmc
modifier|*
name|fifo
parameter_list|,
name|struct
name|ck_fifo_mpmc_entry
modifier|*
modifier|*
name|garbage
parameter_list|)
block|{
operator|*
name|garbage
operator|=
name|fifo
operator|->
name|head
operator|.
name|pointer
expr_stmt|;
name|fifo
operator|->
name|head
operator|.
name|pointer
operator|=
name|fifo
operator|->
name|tail
operator|.
name|pointer
operator|=
name|NULL
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_fifo_mpmc_enqueue
parameter_list|(
name|struct
name|ck_fifo_mpmc
modifier|*
name|fifo
parameter_list|,
name|struct
name|ck_fifo_mpmc_entry
modifier|*
name|entry
parameter_list|,
name|void
modifier|*
name|value
parameter_list|)
block|{
name|struct
name|ck_fifo_mpmc_pointer
name|tail
decl_stmt|,
name|next
decl_stmt|,
name|update
decl_stmt|;
comment|/* 	 * Prepare the upcoming node and make sure to commit the updates 	 * before publishing. 	 */
name|entry
operator|->
name|value
operator|=
name|value
expr_stmt|;
name|entry
operator|->
name|next
operator|.
name|pointer
operator|=
name|NULL
expr_stmt|;
name|entry
operator|->
name|next
operator|.
name|generation
operator|=
literal|0
expr_stmt|;
name|ck_pr_fence_store_atomic
argument_list|()
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|tail
operator|.
name|generation
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|tail
operator|.
name|generation
argument_list|)
expr_stmt|;
name|ck_pr_fence_load
argument_list|()
expr_stmt|;
name|tail
operator|.
name|pointer
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|tail
operator|.
name|pointer
argument_list|)
expr_stmt|;
name|next
operator|.
name|generation
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|tail
operator|.
name|pointer
operator|->
name|next
operator|.
name|generation
argument_list|)
expr_stmt|;
name|ck_pr_fence_load
argument_list|()
expr_stmt|;
name|next
operator|.
name|pointer
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|tail
operator|.
name|pointer
operator|->
name|next
operator|.
name|pointer
argument_list|)
expr_stmt|;
if|if
condition|(
name|ck_pr_load_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|tail
operator|.
name|generation
argument_list|)
operator|!=
name|tail
operator|.
name|generation
condition|)
continue|continue;
if|if
condition|(
name|next
operator|.
name|pointer
operator|!=
name|NULL
condition|)
block|{
comment|/* 			 * If the tail pointer has an entry following it then 			 * it needs to be forwarded to the next entry. This 			 * helps us guarantee we are always operating on the 			 * last entry. 			 */
name|update
operator|.
name|pointer
operator|=
name|next
operator|.
name|pointer
expr_stmt|;
name|update
operator|.
name|generation
operator|=
name|tail
operator|.
name|generation
operator|+
literal|1
expr_stmt|;
name|ck_pr_cas_ptr_2
argument_list|(
operator|&
name|fifo
operator|->
name|tail
argument_list|,
operator|&
name|tail
argument_list|,
operator|&
name|update
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|/* 			 * Attempt to commit new entry to the end of the 			 * current tail. 			 */
name|update
operator|.
name|pointer
operator|=
name|entry
expr_stmt|;
name|update
operator|.
name|generation
operator|=
name|next
operator|.
name|generation
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|ck_pr_cas_ptr_2
argument_list|(
operator|&
name|tail
operator|.
name|pointer
operator|->
name|next
argument_list|,
operator|&
name|next
argument_list|,
operator|&
name|update
argument_list|)
operator|==
name|true
condition|)
break|break;
block|}
block|}
name|ck_pr_fence_atomic
argument_list|()
expr_stmt|;
comment|/* After a successful insert, forward the tail to the new entry. */
name|update
operator|.
name|generation
operator|=
name|tail
operator|.
name|generation
operator|+
literal|1
expr_stmt|;
name|ck_pr_cas_ptr_2
argument_list|(
operator|&
name|fifo
operator|->
name|tail
argument_list|,
operator|&
name|tail
argument_list|,
operator|&
name|update
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_fifo_mpmc_tryenqueue
parameter_list|(
name|struct
name|ck_fifo_mpmc
modifier|*
name|fifo
parameter_list|,
name|struct
name|ck_fifo_mpmc_entry
modifier|*
name|entry
parameter_list|,
name|void
modifier|*
name|value
parameter_list|)
block|{
name|struct
name|ck_fifo_mpmc_pointer
name|tail
decl_stmt|,
name|next
decl_stmt|,
name|update
decl_stmt|;
name|entry
operator|->
name|value
operator|=
name|value
expr_stmt|;
name|entry
operator|->
name|next
operator|.
name|pointer
operator|=
name|NULL
expr_stmt|;
name|entry
operator|->
name|next
operator|.
name|generation
operator|=
literal|0
expr_stmt|;
name|ck_pr_fence_store_atomic
argument_list|()
expr_stmt|;
name|tail
operator|.
name|generation
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|tail
operator|.
name|generation
argument_list|)
expr_stmt|;
name|ck_pr_fence_load
argument_list|()
expr_stmt|;
name|tail
operator|.
name|pointer
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|tail
operator|.
name|pointer
argument_list|)
expr_stmt|;
name|next
operator|.
name|generation
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|tail
operator|.
name|pointer
operator|->
name|next
operator|.
name|generation
argument_list|)
expr_stmt|;
name|ck_pr_fence_load
argument_list|()
expr_stmt|;
name|next
operator|.
name|pointer
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|tail
operator|.
name|pointer
operator|->
name|next
operator|.
name|pointer
argument_list|)
expr_stmt|;
if|if
condition|(
name|ck_pr_load_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|tail
operator|.
name|generation
argument_list|)
operator|!=
name|tail
operator|.
name|generation
condition|)
return|return
name|false
return|;
if|if
condition|(
name|next
operator|.
name|pointer
operator|!=
name|NULL
condition|)
block|{
comment|/* 		 * If the tail pointer has an entry following it then 		 * it needs to be forwarded to the next entry. This 		 * helps us guarantee we are always operating on the 		 * last entry. 		 */
name|update
operator|.
name|pointer
operator|=
name|next
operator|.
name|pointer
expr_stmt|;
name|update
operator|.
name|generation
operator|=
name|tail
operator|.
name|generation
operator|+
literal|1
expr_stmt|;
name|ck_pr_cas_ptr_2
argument_list|(
operator|&
name|fifo
operator|->
name|tail
argument_list|,
operator|&
name|tail
argument_list|,
operator|&
name|update
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
else|else
block|{
comment|/* 		 * Attempt to commit new entry to the end of the 		 * current tail. 		 */
name|update
operator|.
name|pointer
operator|=
name|entry
expr_stmt|;
name|update
operator|.
name|generation
operator|=
name|next
operator|.
name|generation
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|ck_pr_cas_ptr_2
argument_list|(
operator|&
name|tail
operator|.
name|pointer
operator|->
name|next
argument_list|,
operator|&
name|next
argument_list|,
operator|&
name|update
argument_list|)
operator|==
name|false
condition|)
return|return
name|false
return|;
block|}
name|ck_pr_fence_atomic
argument_list|()
expr_stmt|;
comment|/* After a successful insert, forward the tail to the new entry. */
name|update
operator|.
name|generation
operator|=
name|tail
operator|.
name|generation
operator|+
literal|1
expr_stmt|;
name|ck_pr_cas_ptr_2
argument_list|(
operator|&
name|fifo
operator|->
name|tail
argument_list|,
operator|&
name|tail
argument_list|,
operator|&
name|update
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_fifo_mpmc_dequeue
parameter_list|(
name|struct
name|ck_fifo_mpmc
modifier|*
name|fifo
parameter_list|,
name|void
modifier|*
name|value
parameter_list|,
name|struct
name|ck_fifo_mpmc_entry
modifier|*
modifier|*
name|garbage
parameter_list|)
block|{
name|struct
name|ck_fifo_mpmc_pointer
name|head
decl_stmt|,
name|tail
decl_stmt|,
name|next
decl_stmt|,
name|update
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|head
operator|.
name|generation
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|head
operator|.
name|generation
argument_list|)
expr_stmt|;
name|ck_pr_fence_load
argument_list|()
expr_stmt|;
name|head
operator|.
name|pointer
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|head
operator|.
name|pointer
argument_list|)
expr_stmt|;
name|tail
operator|.
name|generation
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|tail
operator|.
name|generation
argument_list|)
expr_stmt|;
name|ck_pr_fence_load
argument_list|()
expr_stmt|;
name|tail
operator|.
name|pointer
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|tail
operator|.
name|pointer
argument_list|)
expr_stmt|;
name|next
operator|.
name|generation
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|head
operator|.
name|pointer
operator|->
name|next
operator|.
name|generation
argument_list|)
expr_stmt|;
name|ck_pr_fence_load
argument_list|()
expr_stmt|;
name|next
operator|.
name|pointer
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|head
operator|.
name|pointer
operator|->
name|next
operator|.
name|pointer
argument_list|)
expr_stmt|;
name|update
operator|.
name|pointer
operator|=
name|next
operator|.
name|pointer
expr_stmt|;
if|if
condition|(
name|head
operator|.
name|pointer
operator|==
name|tail
operator|.
name|pointer
condition|)
block|{
comment|/* 			 * The head is guaranteed to always point at a stub 			 * entry. If the stub entry has no references then the 			 * queue is empty. 			 */
if|if
condition|(
name|next
operator|.
name|pointer
operator|==
name|NULL
condition|)
return|return
name|false
return|;
comment|/* Forward the tail pointer if necessary. */
name|update
operator|.
name|generation
operator|=
name|tail
operator|.
name|generation
operator|+
literal|1
expr_stmt|;
name|ck_pr_cas_ptr_2
argument_list|(
operator|&
name|fifo
operator|->
name|tail
argument_list|,
operator|&
name|tail
argument_list|,
operator|&
name|update
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|/* 			 * It is possible for head snapshot to have been 			 * re-used. Avoid deferencing during enqueue 			 * re-use. 			 */
if|if
condition|(
name|next
operator|.
name|pointer
operator|==
name|NULL
condition|)
continue|continue;
comment|/* Save value before commit. */
operator|*
operator|(
name|void
operator|*
operator|*
operator|)
name|value
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|next
operator|.
name|pointer
operator|->
name|value
argument_list|)
expr_stmt|;
comment|/* Forward the head pointer to the next entry. */
name|update
operator|.
name|generation
operator|=
name|head
operator|.
name|generation
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|ck_pr_cas_ptr_2
argument_list|(
operator|&
name|fifo
operator|->
name|head
argument_list|,
operator|&
name|head
argument_list|,
operator|&
name|update
argument_list|)
operator|==
name|true
condition|)
break|break;
block|}
block|}
operator|*
name|garbage
operator|=
name|head
operator|.
name|pointer
expr_stmt|;
return|return
name|true
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_fifo_mpmc_trydequeue
parameter_list|(
name|struct
name|ck_fifo_mpmc
modifier|*
name|fifo
parameter_list|,
name|void
modifier|*
name|value
parameter_list|,
name|struct
name|ck_fifo_mpmc_entry
modifier|*
modifier|*
name|garbage
parameter_list|)
block|{
name|struct
name|ck_fifo_mpmc_pointer
name|head
decl_stmt|,
name|tail
decl_stmt|,
name|next
decl_stmt|,
name|update
decl_stmt|;
name|head
operator|.
name|generation
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|head
operator|.
name|generation
argument_list|)
expr_stmt|;
name|ck_pr_fence_load
argument_list|()
expr_stmt|;
name|head
operator|.
name|pointer
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|head
operator|.
name|pointer
argument_list|)
expr_stmt|;
name|tail
operator|.
name|generation
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|tail
operator|.
name|generation
argument_list|)
expr_stmt|;
name|ck_pr_fence_load
argument_list|()
expr_stmt|;
name|tail
operator|.
name|pointer
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|tail
operator|.
name|pointer
argument_list|)
expr_stmt|;
name|next
operator|.
name|generation
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|head
operator|.
name|pointer
operator|->
name|next
operator|.
name|generation
argument_list|)
expr_stmt|;
name|ck_pr_fence_load
argument_list|()
expr_stmt|;
name|next
operator|.
name|pointer
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|head
operator|.
name|pointer
operator|->
name|next
operator|.
name|pointer
argument_list|)
expr_stmt|;
name|update
operator|.
name|pointer
operator|=
name|next
operator|.
name|pointer
expr_stmt|;
if|if
condition|(
name|head
operator|.
name|pointer
operator|==
name|tail
operator|.
name|pointer
condition|)
block|{
comment|/* 		 * The head is guaranteed to always point at a stub 		 * entry. If the stub entry has no references then the 		 * queue is empty. 		 */
if|if
condition|(
name|next
operator|.
name|pointer
operator|==
name|NULL
condition|)
return|return
name|false
return|;
comment|/* Forward the tail pointer if necessary. */
name|update
operator|.
name|generation
operator|=
name|tail
operator|.
name|generation
operator|+
literal|1
expr_stmt|;
name|ck_pr_cas_ptr_2
argument_list|(
operator|&
name|fifo
operator|->
name|tail
argument_list|,
operator|&
name|tail
argument_list|,
operator|&
name|update
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
else|else
block|{
comment|/* 		 * It is possible for head snapshot to have been 		 * re-used. Avoid deferencing during enqueue. 		 */
if|if
condition|(
name|next
operator|.
name|pointer
operator|==
name|NULL
condition|)
return|return
name|false
return|;
comment|/* Save value before commit. */
operator|*
operator|(
name|void
operator|*
operator|*
operator|)
name|value
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|next
operator|.
name|pointer
operator|->
name|value
argument_list|)
expr_stmt|;
comment|/* Forward the head pointer to the next entry. */
name|update
operator|.
name|generation
operator|=
name|head
operator|.
name|generation
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|ck_pr_cas_ptr_2
argument_list|(
operator|&
name|fifo
operator|->
name|head
argument_list|,
operator|&
name|head
argument_list|,
operator|&
name|update
argument_list|)
operator|==
name|false
condition|)
return|return
name|false
return|;
block|}
operator|*
name|garbage
operator|=
name|head
operator|.
name|pointer
expr_stmt|;
return|return
name|true
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CK_FIFO_MPMC_ISEMPTY
parameter_list|(
name|f
parameter_list|)
value|((f)->head.pointer->next.pointer == NULL)
end_define

begin_define
define|#
directive|define
name|CK_FIFO_MPMC_FIRST
parameter_list|(
name|f
parameter_list|)
value|((f)->head.pointer->next.pointer)
end_define

begin_define
define|#
directive|define
name|CK_FIFO_MPMC_NEXT
parameter_list|(
name|m
parameter_list|)
value|((m)->next.pointer)
end_define

begin_define
define|#
directive|define
name|CK_FIFO_MPMC_FOREACH
parameter_list|(
name|fifo
parameter_list|,
name|entry
parameter_list|)
define|\
value|for ((entry) = CK_FIFO_MPMC_FIRST(fifo);			\ 	     (entry) != NULL;						\ 	     (entry) = CK_FIFO_MPMC_NEXT(entry))
end_define

begin_define
define|#
directive|define
name|CK_FIFO_MPMC_FOREACH_SAFE
parameter_list|(
name|fifo
parameter_list|,
name|entry
parameter_list|,
name|T
parameter_list|)
define|\
value|for ((entry) = CK_FIFO_MPMC_FIRST(fifo);			\ 	     (entry) != NULL&& ((T) = (entry)->next.pointer, 1);	\ 	     (entry) = (T))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CK_F_FIFO_MPMC */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CK_F_PR_CAS_PTR_2 */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CK_FIFO_H */
end_comment

end_unit

