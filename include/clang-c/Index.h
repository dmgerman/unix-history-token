begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*===-- clang-c/Index.h - Indexing Public C Interface -------------*- C -*-===*\ |*                                                                            *| |*                     The LLVM Compiler Infrastructure                       *| |*                                                                            *| |* This file is distributed under the University of Illinois Open Source      *| |* License. See LICENSE.TXT for details.                                      *| |*                                                                            *| |*===----------------------------------------------------------------------===*| |*                                                                            *| |* This header provides a public inferface to a Clang library for extracting  *| |* high-level symbol information from source files without exposing the full  *| |* Clang C++ API.                                                             *| |*                                                                            *| \*===----------------------------------------------------------------------===*/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CLANG_C_INDEX_H
end_ifndef

begin_define
define|#
directive|define
name|CLANG_C_INDEX_H
end_define

begin_include
include|#
directive|include
file|<sys/stat.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* MSVC DLL import/export. */
ifdef|#
directive|ifdef
name|_MSC_VER
ifdef|#
directive|ifdef
name|_CINDEX_LIB_
define|#
directive|define
name|CINDEX_LINKAGE
value|__declspec(dllexport)
else|#
directive|else
define|#
directive|define
name|CINDEX_LINKAGE
value|__declspec(dllimport)
endif|#
directive|endif
else|#
directive|else
define|#
directive|define
name|CINDEX_LINKAGE
endif|#
directive|endif
comment|/*    Clang indeX abstractions. The backing store for the following API's will be     clangs AST file (currently based on PCH). AST files are created as follows:        "clang -emit-ast<sourcefile.langsuffix> -o<sourcefile.ast>".         Naming Conventions: To avoid namespace pollution, data types are prefixed     with "CX" and functions are prefixed with "clang_". */
typedef|typedef
name|void
modifier|*
name|CXIndex
typedef|;
comment|/* An indexing instance. */
typedef|typedef
name|void
modifier|*
name|CXTranslationUnit
typedef|;
comment|/* A translation unit instance. */
typedef|typedef
name|void
modifier|*
name|CXFile
typedef|;
comment|/* A source file */
typedef|typedef
name|void
modifier|*
name|CXDecl
typedef|;
comment|/* A specific declaration within a translation unit. */
typedef|typedef
name|void
modifier|*
name|CXStmt
typedef|;
comment|/* A specific statement within a function/method */
comment|/* Cursors represent declarations, definitions, and references. */
enum|enum
name|CXCursorKind
block|{
comment|/* Declarations */
name|CXCursor_FirstDecl
init|=
literal|1
block|,
name|CXCursor_TypedefDecl
init|=
literal|2
block|,
name|CXCursor_StructDecl
init|=
literal|3
block|,
name|CXCursor_UnionDecl
init|=
literal|4
block|,
name|CXCursor_ClassDecl
init|=
literal|5
block|,
name|CXCursor_EnumDecl
init|=
literal|6
block|,
name|CXCursor_FieldDecl
init|=
literal|7
block|,
name|CXCursor_EnumConstantDecl
init|=
literal|8
block|,
name|CXCursor_FunctionDecl
init|=
literal|9
block|,
name|CXCursor_VarDecl
init|=
literal|10
block|,
name|CXCursor_ParmDecl
init|=
literal|11
block|,
name|CXCursor_ObjCInterfaceDecl
init|=
literal|12
block|,
name|CXCursor_ObjCCategoryDecl
init|=
literal|13
block|,
name|CXCursor_ObjCProtocolDecl
init|=
literal|14
block|,
name|CXCursor_ObjCPropertyDecl
init|=
literal|15
block|,
name|CXCursor_ObjCIvarDecl
init|=
literal|16
block|,
name|CXCursor_ObjCInstanceMethodDecl
init|=
literal|17
block|,
name|CXCursor_ObjCClassMethodDecl
init|=
literal|18
block|,
name|CXCursor_LastDecl
init|=
literal|18
block|,
comment|/* Definitions */
name|CXCursor_FirstDefn
init|=
literal|32
block|,
name|CXCursor_FunctionDefn
init|=
literal|32
block|,
name|CXCursor_ObjCClassDefn
init|=
literal|33
block|,
name|CXCursor_ObjCCategoryDefn
init|=
literal|34
block|,
name|CXCursor_ObjCInstanceMethodDefn
init|=
literal|35
block|,
name|CXCursor_ObjCClassMethodDefn
init|=
literal|36
block|,
name|CXCursor_LastDefn
init|=
literal|36
block|,
comment|/* References */
name|CXCursor_FirstRef
init|=
literal|40
block|,
comment|/* Decl references */
name|CXCursor_ObjCSuperClassRef
init|=
literal|40
block|,
name|CXCursor_ObjCProtocolRef
init|=
literal|41
block|,
name|CXCursor_ObjCClassRef
init|=
literal|42
block|,
name|CXCursor_ObjCSelectorRef
init|=
literal|43
block|,
comment|/* Expression references */
name|CXCursor_ObjCIvarRef
init|=
literal|44
block|,
name|CXCursor_VarRef
init|=
literal|45
block|,
name|CXCursor_FunctionRef
init|=
literal|46
block|,
name|CXCursor_EnumConstantRef
init|=
literal|47
block|,
name|CXCursor_MemberRef
init|=
literal|48
block|,
name|CXCursor_LastRef
init|=
literal|48
block|,
comment|/* Error conditions */
name|CXCursor_FirstInvalid
init|=
literal|70
block|,
name|CXCursor_InvalidFile
init|=
literal|70
block|,
name|CXCursor_NoDeclFound
init|=
literal|71
block|,
name|CXCursor_NotImplemented
init|=
literal|72
block|,
name|CXCursor_LastInvalid
init|=
literal|72
block|}
enum|;
comment|/* A cursor into the CXTranslationUnit. */
typedef|typedef
struct|struct
block|{
name|enum
name|CXCursorKind
name|kind
decl_stmt|;
name|CXDecl
name|decl
decl_stmt|;
name|CXStmt
name|stmt
decl_stmt|;
comment|/* expression reference */
block|}
name|CXCursor
typedef|;
comment|/* A unique token for looking up "visible" CXDecls from a CXTranslationUnit. */
typedef|typedef
name|void
modifier|*
name|CXEntity
typedef|;
comment|/**    * \brief clang_createIndex() provides a shared context for creating  * translation units. It provides two options:  *  * - excludeDeclarationsFromPCH: When non-zero, allows enumeration of "local"  * declarations (when loading any new translation units). A "local" declaration  * is one that belongs in the translation unit itself and not in a precompiled   * header that was used by the translation unit. If zero, all declarations  * will be enumerated.  *  * - displayDiagnostics: when non-zero, diagnostics will be output. If zero,  * diagnostics will be ignored.  *  * Here is an example:  *  *   // excludeDeclsFromPCH = 1, displayDiagnostics = 1  *   Idx = clang_createIndex(1, 1);  *  *   // IndexTest.pch was produced with the following command:  *   // "clang -x c IndexTest.h -emit-ast -o IndexTest.pch"  *   TU = clang_createTranslationUnit(Idx, "IndexTest.pch");  *  *   // This will load all the symbols from 'IndexTest.pch'  *   clang_loadTranslationUnit(TU, TranslationUnitVisitor, 0);  *   clang_disposeTranslationUnit(TU);  *  *   // This will load all the symbols from 'IndexTest.c', excluding symbols  *   // from 'IndexTest.pch'.  *   char *args[] = { "-Xclang", "-include-pch=IndexTest.pch", 0 };  *   TU = clang_createTranslationUnitFromSourceFile(Idx, "IndexTest.c", 2, args);  *   clang_loadTranslationUnit(TU, TranslationUnitVisitor, 0);  *   clang_disposeTranslationUnit(TU);  *  * This process of creating the 'pch', loading it separately, and using it (via  * -include-pch) allows 'excludeDeclsFromPCH' to remove redundant callbacks  * (which gives the indexer the same performance benefit as the compiler).  */
name|CINDEX_LINKAGE
name|CXIndex
name|clang_createIndex
parameter_list|(
name|int
name|excludeDeclarationsFromPCH
parameter_list|,
name|int
name|displayDiagnostics
parameter_list|)
function_decl|;
name|CINDEX_LINKAGE
name|void
name|clang_disposeIndex
parameter_list|(
name|CXIndex
parameter_list|)
function_decl|;
name|CINDEX_LINKAGE
specifier|const
name|char
modifier|*
name|clang_getTranslationUnitSpelling
parameter_list|(
name|CXTranslationUnit
name|CTUnit
parameter_list|)
function_decl|;
comment|/*   * \brief Create a translation unit from an AST file (-emit-ast).  */
name|CINDEX_LINKAGE
name|CXTranslationUnit
name|clang_createTranslationUnit
parameter_list|(
name|CXIndex
parameter_list|,
specifier|const
name|char
modifier|*
name|ast_filename
parameter_list|)
function_decl|;
comment|/**  * \brief Destroy the specified CXTranslationUnit object.  */
name|CINDEX_LINKAGE
name|void
name|clang_disposeTranslationUnit
parameter_list|(
name|CXTranslationUnit
parameter_list|)
function_decl|;
comment|/**  * \brief Return the CXTranslationUnit for a given source file and the provided  * command line arguments one would pass to the compiler.  *  * Note: The 'source_filename' argument is optional.  If the caller provides a NULL pointer,  *  the name of the source file is expected to reside in the specified command line arguments.  *  * Note: When encountered in 'clang_command_line_args', the following options are ignored:  *  *   '-c'  *   '-emit-ast'  *   '-fsyntax-only'  *   '-o<output file>'  (both '-o' and '<output file>' are ignored)  *  */
name|CINDEX_LINKAGE
name|CXTranslationUnit
name|clang_createTranslationUnitFromSourceFile
parameter_list|(
name|CXIndex
name|CIdx
parameter_list|,
specifier|const
name|char
modifier|*
name|source_filename
comment|/* specify NULL if the source file is in clang_command_line_args */
parameter_list|,
name|int
name|num_clang_command_line_args
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|clang_command_line_args
parameter_list|)
function_decl|;
comment|/*    Usage: clang_loadTranslationUnit(). Will load the toplevel declarations    within a translation unit, issuing a 'callback' for each one.     void printObjCInterfaceNames(CXTranslationUnit X, CXCursor C) {      if (clang_getCursorKind(C) == Cursor_Declaration) {        CXDecl D = clang_getCursorDecl(C);        if (clang_getDeclKind(D) == CXDecl_ObjC_interface)          printf("@interface %s in file %s on line %d column %d\n",                 clang_getDeclSpelling(D), clang_getCursorSource(C),                 clang_getCursorLine(C), clang_getCursorColumn(C));      }    }    static void usage {      clang_loadTranslationUnit(CXTranslationUnit, printObjCInterfaceNames);    } */
typedef|typedef
name|void
modifier|*
name|CXClientData
typedef|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|CXTranslationUnitIterator
function_decl|)
parameter_list|(
name|CXTranslationUnit
parameter_list|,
name|CXCursor
parameter_list|,
name|CXClientData
parameter_list|)
function_decl|;
name|CINDEX_LINKAGE
name|void
name|clang_loadTranslationUnit
parameter_list|(
name|CXTranslationUnit
parameter_list|,
name|CXTranslationUnitIterator
parameter_list|,
name|CXClientData
parameter_list|)
function_decl|;
comment|/*    Usage: clang_loadDeclaration(). Will load the declaration, issuing a     'callback' for each declaration/reference within the respective declaration.        For interface declarations, this will index the super class, protocols,     ivars, methods, etc. For structure declarations, this will index the fields.    For functions, this will index the parameters (and body, for function     definitions), local declarations/references.     void getInterfaceDetails(CXDecl X, CXCursor C) {      switch (clang_getCursorKind(C)) {        case Cursor_ObjC_ClassRef:          CXDecl SuperClass = clang_getCursorDecl(C);        case Cursor_ObjC_ProtocolRef:          CXDecl AdoptsProtocol = clang_getCursorDecl(C);        case Cursor_Declaration:          CXDecl AnIvarOrMethod = clang_getCursorDecl(C);      }    }    static void usage() {      if (clang_getDeclKind(D) == CXDecl_ObjC_interface) {        clang_loadDeclaration(D, getInterfaceDetails);      }    } */
typedef|typedef
name|void
function_decl|(
modifier|*
name|CXDeclIterator
function_decl|)
parameter_list|(
name|CXDecl
parameter_list|,
name|CXCursor
parameter_list|,
name|CXClientData
parameter_list|)
function_decl|;
name|CINDEX_LINKAGE
name|void
name|clang_loadDeclaration
parameter_list|(
name|CXDecl
parameter_list|,
name|CXDeclIterator
parameter_list|,
name|CXClientData
parameter_list|)
function_decl|;
comment|/*  * CXFile Operations.  */
name|CINDEX_LINKAGE
specifier|const
name|char
modifier|*
name|clang_getFileName
parameter_list|(
name|CXFile
name|SFile
parameter_list|)
function_decl|;
name|CINDEX_LINKAGE
name|time_t
name|clang_getFileTime
parameter_list|(
name|CXFile
name|SFile
parameter_list|)
function_decl|;
comment|/*  * CXEntity Operations.  */
name|CINDEX_LINKAGE
specifier|const
name|char
modifier|*
name|clang_getDeclarationName
parameter_list|(
name|CXEntity
parameter_list|)
function_decl|;
name|CINDEX_LINKAGE
specifier|const
name|char
modifier|*
name|clang_getURI
parameter_list|(
name|CXEntity
parameter_list|)
function_decl|;
name|CINDEX_LINKAGE
name|CXEntity
name|clang_getEntity
parameter_list|(
specifier|const
name|char
modifier|*
name|URI
parameter_list|)
function_decl|;
comment|/*  * CXDecl Operations.  */
name|CINDEX_LINKAGE
name|CXCursor
name|clang_getCursorFromDecl
parameter_list|(
name|CXDecl
parameter_list|)
function_decl|;
name|CINDEX_LINKAGE
name|CXEntity
name|clang_getEntityFromDecl
parameter_list|(
name|CXDecl
parameter_list|)
function_decl|;
name|CINDEX_LINKAGE
specifier|const
name|char
modifier|*
name|clang_getDeclSpelling
parameter_list|(
name|CXDecl
parameter_list|)
function_decl|;
name|CINDEX_LINKAGE
name|unsigned
name|clang_getDeclLine
parameter_list|(
name|CXDecl
parameter_list|)
function_decl|;
name|CINDEX_LINKAGE
name|unsigned
name|clang_getDeclColumn
parameter_list|(
name|CXDecl
parameter_list|)
function_decl|;
name|CINDEX_LINKAGE
specifier|const
name|char
modifier|*
name|clang_getDeclSource
parameter_list|(
name|CXDecl
parameter_list|)
function_decl|;
comment|/* deprecate */
name|CINDEX_LINKAGE
name|CXFile
name|clang_getDeclSourceFile
parameter_list|(
name|CXDecl
parameter_list|)
function_decl|;
comment|/*  * CXCursor Operations.  */
comment|/**    Usage: clang_getCursor() will translate a source/line/column position    into an AST cursor (to derive semantic information from the source code).  */
name|CINDEX_LINKAGE
name|CXCursor
name|clang_getCursor
parameter_list|(
name|CXTranslationUnit
parameter_list|,
specifier|const
name|char
modifier|*
name|source_name
parameter_list|,
name|unsigned
name|line
parameter_list|,
name|unsigned
name|column
parameter_list|)
function_decl|;
name|CINDEX_LINKAGE
name|enum
name|CXCursorKind
name|clang_getCursorKind
parameter_list|(
name|CXCursor
parameter_list|)
function_decl|;
name|CINDEX_LINKAGE
name|unsigned
name|clang_isDeclaration
parameter_list|(
name|enum
name|CXCursorKind
parameter_list|)
function_decl|;
name|CINDEX_LINKAGE
name|unsigned
name|clang_isReference
parameter_list|(
name|enum
name|CXCursorKind
parameter_list|)
function_decl|;
name|CINDEX_LINKAGE
name|unsigned
name|clang_isDefinition
parameter_list|(
name|enum
name|CXCursorKind
parameter_list|)
function_decl|;
name|CINDEX_LINKAGE
name|unsigned
name|clang_isInvalid
parameter_list|(
name|enum
name|CXCursorKind
parameter_list|)
function_decl|;
name|CINDEX_LINKAGE
name|unsigned
name|clang_getCursorLine
parameter_list|(
name|CXCursor
parameter_list|)
function_decl|;
name|CINDEX_LINKAGE
name|unsigned
name|clang_getCursorColumn
parameter_list|(
name|CXCursor
parameter_list|)
function_decl|;
name|CINDEX_LINKAGE
specifier|const
name|char
modifier|*
name|clang_getCursorSpelling
parameter_list|(
name|CXCursor
parameter_list|)
function_decl|;
name|CINDEX_LINKAGE
specifier|const
name|char
modifier|*
name|clang_getCursorSource
parameter_list|(
name|CXCursor
parameter_list|)
function_decl|;
comment|/* deprecate */
name|CINDEX_LINKAGE
name|CXFile
name|clang_getCursorSourceFile
parameter_list|(
name|CXCursor
parameter_list|)
function_decl|;
comment|/* for debug/testing */
name|CINDEX_LINKAGE
specifier|const
name|char
modifier|*
name|clang_getCursorKindSpelling
parameter_list|(
name|enum
name|CXCursorKind
name|Kind
parameter_list|)
function_decl|;
name|CINDEX_LINKAGE
name|void
name|clang_getDefinitionSpellingAndExtent
parameter_list|(
name|CXCursor
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|startBuf
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|endBuf
parameter_list|,
name|unsigned
modifier|*
name|startLine
parameter_list|,
name|unsigned
modifier|*
name|startColumn
parameter_list|,
name|unsigned
modifier|*
name|endLine
parameter_list|,
name|unsigned
modifier|*
name|endColumn
parameter_list|)
function_decl|;
comment|/*  * If CXCursorKind == Cursor_Reference, then this will return the referenced  * declaration.  * If CXCursorKind == Cursor_Declaration, then this will return the declaration.  */
name|CINDEX_LINKAGE
name|CXDecl
name|clang_getCursorDecl
parameter_list|(
name|CXCursor
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

