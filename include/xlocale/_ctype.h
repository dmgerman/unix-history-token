begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2011 The FreeBSD Foundation  * All rights reserved.  *  * This software was developed by David Chisnall under sponsorship from  * the FreeBSD Foundation.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_if
if|#
directive|if
operator|(
name|defined
argument_list|(
name|_XLOCALE_WCTYPES
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|_XLOCALE_WCTYPE_H
argument_list|)
operator|)
operator|||
expr|\
operator|(
operator|!
name|defined
argument_list|(
name|_XLOCALE_WCTYPES
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|_XLOCALE_CTYPE_H
argument_list|)
operator|)
end_if

begin_ifdef
ifdef|#
directive|ifdef
name|_XLOCALE_WCTYPES
end_ifdef

begin_define
define|#
directive|define
name|_XLOCALE_WCTYPE_H
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|_XLOCALE_CTYPE_H
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|_LOCALE_T_DEFINED
end_ifndef

begin_define
define|#
directive|define
name|_LOCALE_T_DEFINED
end_define

begin_typedef
typedef|typedef
name|struct
name|_xlocale
modifier|*
name|locale_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|_XLOCALE_RUN_FUNCTIONS_DEFINED
end_ifndef

begin_define
define|#
directive|define
name|_XLOCALE_RUN_FUNCTIONS_DEFINED
value|1
end_define

begin_decl_stmt
name|unsigned
name|long
name|___runetype_l
argument_list|(
name|__ct_rune_t
argument_list|,
name|locale_t
argument_list|)
name|__pure
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|__ct_rune_t
name|___tolower_l
argument_list|(
name|__ct_rune_t
argument_list|,
name|locale_t
argument_list|)
name|__pure
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|__ct_rune_t
name|___toupper_l
argument_list|(
name|__ct_rune_t
argument_list|,
name|locale_t
argument_list|)
name|__pure
decl_stmt|;
end_decl_stmt

begin_function_decl
name|_RuneLocale
modifier|*
name|__runes_for_locale
parameter_list|(
name|locale_t
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|_XLOCALE_INLINE
end_ifndef

begin_if
if|#
directive|if
name|__GNUC__
operator|&&
operator|!
name|__GNUC_STDC_INLINE__
end_if

begin_comment
comment|/* GNU89 inline has nonstandard semantics. */
end_comment

begin_define
define|#
directive|define
name|_XLOCALE_INLINE
value|extern __inline
end_define

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* Hack to work around people who define inline away */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|inline
end_ifdef

begin_define
define|#
directive|define
name|_XLOCALE_INLINE
value|static __inline
end_define

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* Define with C++ / C99 compatible semantics */
end_comment

begin_define
define|#
directive|define
name|_XLOCALE_INLINE
value|inline
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _XLOCALE_INLINE */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|_XLOCALE_WCTYPES
end_ifdef

begin_function
name|_XLOCALE_INLINE
name|int
name|__maskrune_l
parameter_list|(
name|__ct_rune_t
name|__c
parameter_list|,
name|unsigned
name|long
name|__f
parameter_list|,
name|locale_t
name|__loc
parameter_list|)
block|{
name|int
name|__limit
decl_stmt|;
name|_RuneLocale
modifier|*
name|runes
init|=
name|__runes_for_locale
argument_list|(
name|__loc
argument_list|,
operator|&
name|__limit
argument_list|)
decl_stmt|;
return|return
operator|(
name|__c
operator|<
literal|0
operator|||
name|__c
operator|>=
name|_CACHED_RUNES
operator|)
condition|?
name|___runetype_l
argument_list|(
name|__c
argument_list|,
name|__loc
argument_list|)
else|:
name|runes
operator|->
name|__runetype
index|[
name|__c
index|]
operator|&
name|__f
return|;
block|}
end_function

begin_function
name|_XLOCALE_INLINE
name|__inline
name|int
name|__istype_l
parameter_list|(
name|__ct_rune_t
name|__c
parameter_list|,
name|unsigned
name|long
name|__f
parameter_list|,
name|locale_t
name|__loc
parameter_list|)
block|{
return|return
operator|(
operator|!
operator|!
name|__maskrune_l
argument_list|(
name|__c
argument_list|,
name|__f
argument_list|,
name|__loc
argument_list|)
operator|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|XLOCALE_ISCTYPE
parameter_list|(
name|fname
parameter_list|,
name|cat
parameter_list|)
define|\
value|_XLOCALE_INLINE int isw##fname##_l(int, locale_t);\ 		_XLOCALE_INLINE int isw##fname##_l(int __c, locale_t __l)\ 		{ return __istype_l(__c, cat, __l); }
end_define

begin_else
else|#
directive|else
end_else

begin_function
name|_XLOCALE_INLINE
name|int
name|__sbmaskrune_l
parameter_list|(
name|__ct_rune_t
name|__c
parameter_list|,
name|unsigned
name|long
name|__f
parameter_list|,
name|locale_t
name|__loc
parameter_list|)
block|{
name|int
name|__limit
decl_stmt|;
name|_RuneLocale
modifier|*
name|runes
init|=
name|__runes_for_locale
argument_list|(
name|__loc
argument_list|,
operator|&
name|__limit
argument_list|)
decl_stmt|;
return|return
operator|(
name|__c
operator|<
literal|0
operator|||
name|__c
operator|>=
name|__limit
operator|)
condition|?
literal|0
else|:
name|runes
operator|->
name|__runetype
index|[
name|__c
index|]
operator|&
name|__f
return|;
block|}
end_function

begin_function
name|_XLOCALE_INLINE
name|int
name|__sbistype_l
parameter_list|(
name|__ct_rune_t
name|__c
parameter_list|,
name|unsigned
name|long
name|__f
parameter_list|,
name|locale_t
name|__loc
parameter_list|)
block|{
return|return
operator|(
operator|!
operator|!
name|__sbmaskrune_l
argument_list|(
name|__c
argument_list|,
name|__f
argument_list|,
name|__loc
argument_list|)
operator|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|XLOCALE_ISCTYPE
parameter_list|(
name|__fname
parameter_list|,
name|__cat
parameter_list|)
define|\
value|_XLOCALE_INLINE int is##__fname##_l(int, locale_t); \ 		_XLOCALE_INLINE int is##__fname##_l(int __c, locale_t __l)\ 		{ return __sbistype_l(__c, __cat, __l); }
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_macro
name|XLOCALE_ISCTYPE
argument_list|(
argument|alnum
argument_list|,
argument|_CTYPE_A|_CTYPE_D
argument_list|)
end_macro

begin_macro
name|XLOCALE_ISCTYPE
argument_list|(
argument|alpha
argument_list|,
argument|_CTYPE_A
argument_list|)
end_macro

begin_macro
name|XLOCALE_ISCTYPE
argument_list|(
argument|blank
argument_list|,
argument|_CTYPE_B
argument_list|)
end_macro

begin_macro
name|XLOCALE_ISCTYPE
argument_list|(
argument|cntrl
argument_list|,
argument|_CTYPE_C
argument_list|)
end_macro

begin_macro
name|XLOCALE_ISCTYPE
argument_list|(
argument|digit
argument_list|,
argument|_CTYPE_D
argument_list|)
end_macro

begin_macro
name|XLOCALE_ISCTYPE
argument_list|(
argument|graph
argument_list|,
argument|_CTYPE_G
argument_list|)
end_macro

begin_macro
name|XLOCALE_ISCTYPE
argument_list|(
argument|hexnumber
argument_list|,
argument|_CTYPE_X
argument_list|)
end_macro

begin_macro
name|XLOCALE_ISCTYPE
argument_list|(
argument|ideogram
argument_list|,
argument|_CTYPE_I
argument_list|)
end_macro

begin_macro
name|XLOCALE_ISCTYPE
argument_list|(
argument|lower
argument_list|,
argument|_CTYPE_L
argument_list|)
end_macro

begin_macro
name|XLOCALE_ISCTYPE
argument_list|(
argument|number
argument_list|,
argument|_CTYPE_D
argument_list|)
end_macro

begin_macro
name|XLOCALE_ISCTYPE
argument_list|(
argument|phonogram
argument_list|,
argument|_CTYPE_Q
argument_list|)
end_macro

begin_macro
name|XLOCALE_ISCTYPE
argument_list|(
argument|print
argument_list|,
argument|_CTYPE_R
argument_list|)
end_macro

begin_macro
name|XLOCALE_ISCTYPE
argument_list|(
argument|punct
argument_list|,
argument|_CTYPE_P
argument_list|)
end_macro

begin_macro
name|XLOCALE_ISCTYPE
argument_list|(
argument|rune
argument_list|,
literal|0xFFFFFF00L
argument_list|)
end_macro

begin_macro
name|XLOCALE_ISCTYPE
argument_list|(
argument|space
argument_list|,
argument|_CTYPE_S
argument_list|)
end_macro

begin_macro
name|XLOCALE_ISCTYPE
argument_list|(
argument|special
argument_list|,
argument|_CTYPE_T
argument_list|)
end_macro

begin_macro
name|XLOCALE_ISCTYPE
argument_list|(
argument|upper
argument_list|,
argument|_CTYPE_U
argument_list|)
end_macro

begin_macro
name|XLOCALE_ISCTYPE
argument_list|(
argument|xdigit
argument_list|,
argument|_CTYPE_X
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|XLOCALE_ISCTYPE
end_undef

begin_ifdef
ifdef|#
directive|ifdef
name|_XLOCALE_WCTYPES
end_ifdef

begin_function_decl
name|_XLOCALE_INLINE
name|int
name|towlower_l
parameter_list|(
name|int
parameter_list|,
name|locale_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|_XLOCALE_INLINE
name|int
name|__wcwidth_l
parameter_list|(
name|__ct_rune_t
parameter_list|,
name|locale_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|_XLOCALE_INLINE
name|int
name|towupper_l
parameter_list|(
name|int
parameter_list|,
name|locale_t
parameter_list|)
function_decl|;
end_function_decl

begin_function
name|_XLOCALE_INLINE
name|int
name|towlower_l
parameter_list|(
name|int
name|__c
parameter_list|,
name|locale_t
name|__l
parameter_list|)
block|{
name|int
name|__limit
decl_stmt|;
name|_RuneLocale
modifier|*
name|__runes
init|=
name|__runes_for_locale
argument_list|(
name|__l
argument_list|,
operator|&
name|__limit
argument_list|)
decl_stmt|;
return|return
operator|(
name|__c
operator|<
literal|0
operator|||
name|__c
operator|>=
name|_CACHED_RUNES
operator|)
condition|?
name|___tolower_l
argument_list|(
name|__c
argument_list|,
name|__l
argument_list|)
else|:
name|__runes
operator|->
name|__maplower
index|[
name|__c
index|]
return|;
block|}
end_function

begin_function
name|_XLOCALE_INLINE
name|int
name|towupper_l
parameter_list|(
name|int
name|__c
parameter_list|,
name|locale_t
name|__l
parameter_list|)
block|{
name|int
name|__limit
decl_stmt|;
name|_RuneLocale
modifier|*
name|__runes
init|=
name|__runes_for_locale
argument_list|(
name|__l
argument_list|,
operator|&
name|__limit
argument_list|)
decl_stmt|;
return|return
operator|(
name|__c
operator|<
literal|0
operator|||
name|__c
operator|>=
name|_CACHED_RUNES
operator|)
condition|?
name|___toupper_l
argument_list|(
name|__c
argument_list|,
name|__l
argument_list|)
else|:
name|__runes
operator|->
name|__mapupper
index|[
name|__c
index|]
return|;
block|}
end_function

begin_function
name|_XLOCALE_INLINE
name|int
name|__wcwidth_l
parameter_list|(
name|__ct_rune_t
name|_c
parameter_list|,
name|locale_t
name|__l
parameter_list|)
block|{
name|unsigned
name|int
name|_x
decl_stmt|;
if|if
condition|(
name|_c
operator|==
literal|0
condition|)
return|return
operator|(
literal|0
operator|)
return|;
name|_x
operator|=
operator|(
name|unsigned
name|int
operator|)
name|__maskrune_l
argument_list|(
name|_c
argument_list|,
name|_CTYPE_SWM
operator||
name|_CTYPE_R
argument_list|,
name|__l
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|_x
operator|&
name|_CTYPE_SWM
operator|)
operator|!=
literal|0
condition|)
return|return
operator|(
operator|(
name|_x
operator|&
name|_CTYPE_SWM
operator|)
operator|>>
name|_CTYPE_SWS
operator|)
return|;
return|return
operator|(
operator|(
name|_x
operator|&
name|_CTYPE_R
operator|)
operator|!=
literal|0
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
return|;
block|}
end_function

begin_function_decl
name|int
name|iswctype_l
parameter_list|(
name|wint_t
name|__wc
parameter_list|,
name|wctype_t
name|__charclass
parameter_list|,
name|locale_t
name|__l
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|wctype_t
name|wctype_l
parameter_list|(
specifier|const
name|char
modifier|*
name|property
parameter_list|,
name|locale_t
name|__l
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|wint_t
name|towctrans_l
parameter_list|(
name|wint_t
name|__wc
parameter_list|,
name|wctrans_t
name|desc
parameter_list|,
name|locale_t
name|__l
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|wint_t
name|nextwctype_l
parameter_list|(
name|wint_t
name|__wc
parameter_list|,
name|wctype_t
name|wct
parameter_list|,
name|locale_t
name|__l
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|wctrans_t
name|wctrans_l
parameter_list|(
specifier|const
name|char
modifier|*
name|__charclass
parameter_list|,
name|locale_t
name|__l
parameter_list|)
function_decl|;
end_function_decl

begin_undef
undef|#
directive|undef
name|_XLOCALE_WCTYPES
end_undef

begin_else
else|#
directive|else
end_else

begin_function_decl
name|_XLOCALE_INLINE
name|int
name|digittoint_l
parameter_list|(
name|int
parameter_list|,
name|locale_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|_XLOCALE_INLINE
name|int
name|tolower_l
parameter_list|(
name|int
parameter_list|,
name|locale_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|_XLOCALE_INLINE
name|int
name|toupper_l
parameter_list|(
name|int
parameter_list|,
name|locale_t
parameter_list|)
function_decl|;
end_function_decl

begin_function
name|_XLOCALE_INLINE
name|int
name|digittoint_l
parameter_list|(
name|int
name|__c
parameter_list|,
name|locale_t
name|__l
parameter_list|)
block|{
return|return
name|__sbmaskrune_l
argument_list|(
operator|(
name|__c
operator|)
argument_list|,
literal|0xFF
argument_list|,
name|__l
argument_list|)
return|;
block|}
end_function

begin_function
name|_XLOCALE_INLINE
name|int
name|tolower_l
parameter_list|(
name|int
name|__c
parameter_list|,
name|locale_t
name|__l
parameter_list|)
block|{
name|int
name|__limit
decl_stmt|;
name|_RuneLocale
modifier|*
name|__runes
init|=
name|__runes_for_locale
argument_list|(
name|__l
argument_list|,
operator|&
name|__limit
argument_list|)
decl_stmt|;
return|return
operator|(
name|__c
operator|<
literal|0
operator|||
name|__c
operator|>=
name|__limit
operator|)
condition|?
name|__c
else|:
name|__runes
operator|->
name|__maplower
index|[
name|__c
index|]
return|;
block|}
end_function

begin_function
name|_XLOCALE_INLINE
name|int
name|toupper_l
parameter_list|(
name|int
name|__c
parameter_list|,
name|locale_t
name|__l
parameter_list|)
block|{
name|int
name|__limit
decl_stmt|;
name|_RuneLocale
modifier|*
name|__runes
init|=
name|__runes_for_locale
argument_list|(
name|__l
argument_list|,
operator|&
name|__limit
argument_list|)
decl_stmt|;
return|return
operator|(
name|__c
operator|<
literal|0
operator|||
name|__c
operator|>=
name|__limit
operator|)
condition|?
name|__c
else|:
name|__runes
operator|->
name|__mapupper
index|[
name|__c
index|]
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* (defined(_XLOCALE_WCTYPES)&& !defined(_XLOCALE_WCTYPE_H)) || \ 	(!defined(_XLOCALE_WCTYPES)&& !defined(_XLOCALE_CTYPE_H)) */
end_comment

end_unit

