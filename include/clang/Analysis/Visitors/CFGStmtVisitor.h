begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- CFGStmtVisitor.h - Visitor for Stmts in a CFG ----------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines the CFGStmtVisitor interface, which extends
end_comment

begin_comment
comment|//  StmtVisitor.  This interface is useful for visiting statements in a CFG
end_comment

begin_comment
comment|//  where some statements have implicit control-flow and thus should
end_comment

begin_comment
comment|//  be treated specially.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_ANALYSIS_CFGSTMTVISITOR_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_ANALYSIS_CFGSTMTVISITOR_H
end_define

begin_include
include|#
directive|include
file|"clang/AST/StmtVisitor.h"
end_include

begin_include
include|#
directive|include
file|"clang/Analysis/CFG.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
define|#
directive|define
name|DISPATCH_CASE
parameter_list|(
name|CLASS
parameter_list|)
define|\
value|case Stmt::CLASS ## Class: return \ static_cast<ImplClass*>(this)->BlockStmt_Visit ## CLASS(static_cast<CLASS*>(S));
define|#
directive|define
name|DEFAULT_BLOCKSTMT_VISIT
parameter_list|(
name|CLASS
parameter_list|)
value|RetTy BlockStmt_Visit ## CLASS(CLASS *S)\ { return\   static_cast<ImplClass*>(this)->BlockStmt_VisitImplicitControlFlowExpr(\   cast<Expr>(S)); }
name|template
operator|<
name|typename
name|ImplClass
operator|,
name|typename
name|RetTy
operator|=
name|void
operator|>
name|class
name|CFGStmtVisitor
operator|:
name|public
name|StmtVisitor
operator|<
name|ImplClass
operator|,
name|RetTy
operator|>
block|{
name|Stmt
operator|*
name|CurrentBlkStmt
block|;    struct
name|NullifyStmt
block|{
name|Stmt
operator|*
operator|&
name|S
block|;
name|NullifyStmt
argument_list|(
name|Stmt
operator|*
operator|&
name|s
argument_list|)
operator|:
name|S
argument_list|(
argument|s
argument_list|)
block|{}
operator|~
name|NullifyStmt
argument_list|()
block|{
name|S
operator|=
name|NULL
block|; }
block|}
block|;
name|public
operator|:
name|CFGStmtVisitor
argument_list|()
operator|:
name|CurrentBlkStmt
argument_list|(
argument|NULL
argument_list|)
block|{}
name|Stmt
operator|*
name|getCurrentBlkStmt
argument_list|()
specifier|const
block|{
return|return
name|CurrentBlkStmt
return|;
block|}
name|RetTy
name|Visit
argument_list|(
argument|Stmt* S
argument_list|)
block|{
if|if
condition|(
name|S
operator|==
name|CurrentBlkStmt
operator|||
operator|!
name|static_cast
operator|<
name|ImplClass
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|getCFG
argument_list|()
operator|.
name|isBlkExpr
argument_list|(
name|S
argument_list|)
condition|)
return|return
name|StmtVisitor
operator|<
name|ImplClass
operator|,
name|RetTy
operator|>
operator|::
name|Visit
argument_list|(
name|S
argument_list|)
return|;
else|else
return|return
name|RetTy
argument_list|()
return|;
block|}
comment|/// VisitConditionVariableInit - Handle the initialization of condition
comment|///  variables at branches.  Valid statements include IfStmt, ForStmt,
comment|///  WhileStmt, and SwitchStmt.
name|RetTy
name|VisitConditionVariableInit
argument_list|(
argument|Stmt *S
argument_list|)
block|{
return|return
name|RetTy
argument_list|()
return|;
block|}
comment|/// BlockVisit_XXX - Visitor methods for visiting the "root" statements in
comment|/// CFGBlocks.  Root statements are the statements that appear explicitly in
comment|/// the list of statements in a CFGBlock.  For substatements, or when there
comment|/// is no implementation provided for a BlockStmt_XXX method, we default
comment|/// to using StmtVisitor's Visit method.
name|RetTy
name|BlockStmt_Visit
argument_list|(
argument|Stmt* S
argument_list|)
block|{
name|CurrentBlkStmt
operator|=
name|S
block|;
name|NullifyStmt
name|cleanup
argument_list|(
name|CurrentBlkStmt
argument_list|)
block|;
switch|switch
condition|(
name|S
operator|->
name|getStmtClass
argument_list|()
condition|)
block|{
case|case
name|Stmt
operator|::
name|IfStmtClass
case|:
case|case
name|Stmt
operator|::
name|ForStmtClass
case|:
case|case
name|Stmt
operator|::
name|WhileStmtClass
case|:
case|case
name|Stmt
operator|::
name|SwitchStmtClass
case|:
return|return
name|static_cast
operator|<
name|ImplClass
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|VisitConditionVariableInit
argument_list|(
name|S
argument_list|)
return|;
name|DISPATCH_CASE
argument_list|(
argument|StmtExpr
argument_list|)
name|DISPATCH_CASE
argument_list|(
argument|ConditionalOperator
argument_list|)
name|DISPATCH_CASE
argument_list|(
argument|BinaryConditionalOperator
argument_list|)
name|DISPATCH_CASE
argument_list|(
argument|ObjCForCollectionStmt
argument_list|)
case|case
name|Stmt
operator|::
name|BinaryOperatorClass
case|:
block|{
name|BinaryOperator
modifier|*
name|B
init|=
name|cast
operator|<
name|BinaryOperator
operator|>
operator|(
name|S
operator|)
decl_stmt|;
if|if
condition|(
name|B
operator|->
name|isLogicalOp
argument_list|()
condition|)
return|return
name|static_cast
operator|<
name|ImplClass
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|BlockStmt_VisitLogicalOp
argument_list|(
name|B
argument_list|)
return|;
elseif|else
if|if
condition|(
name|B
operator|->
name|getOpcode
argument_list|()
operator|==
name|BO_Comma
condition|)
return|return
name|static_cast
operator|<
name|ImplClass
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|BlockStmt_VisitComma
argument_list|(
name|B
argument_list|)
return|;
comment|// Fall through.
block|}
default|default:
if|if
condition|(
name|isa
operator|<
name|Expr
operator|>
operator|(
name|S
operator|)
condition|)
return|return
name|static_cast
operator|<
name|ImplClass
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|BlockStmt_VisitExpr
argument_list|(
name|cast
operator|<
name|Expr
operator|>
operator|(
name|S
operator|)
argument_list|)
return|;
else|else
return|return
name|static_cast
operator|<
name|ImplClass
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|BlockStmt_VisitStmt
argument_list|(
name|S
argument_list|)
return|;
block|}
expr|}
name|DEFAULT_BLOCKSTMT_VISIT
argument_list|(
argument|StmtExpr
argument_list|)
name|DEFAULT_BLOCKSTMT_VISIT
argument_list|(
argument|ConditionalOperator
argument_list|)
name|DEFAULT_BLOCKSTMT_VISIT
argument_list|(
argument|BinaryConditionalOperator
argument_list|)
name|RetTy
name|BlockStmt_VisitObjCForCollectionStmt
argument_list|(
argument|ObjCForCollectionStmt* S
argument_list|)
block|{
return|return
name|static_cast
operator|<
name|ImplClass
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|BlockStmt_VisitStmt
argument_list|(
name|S
argument_list|)
return|;
block|}
name|RetTy
name|BlockStmt_VisitImplicitControlFlowExpr
argument_list|(
argument|Expr* E
argument_list|)
block|{
return|return
name|static_cast
operator|<
name|ImplClass
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|BlockStmt_VisitExpr
argument_list|(
name|E
argument_list|)
return|;
block|}
name|RetTy
name|BlockStmt_VisitExpr
argument_list|(
argument|Expr* E
argument_list|)
block|{
return|return
name|static_cast
operator|<
name|ImplClass
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|BlockStmt_VisitStmt
argument_list|(
name|E
argument_list|)
return|;
block|}
name|RetTy
name|BlockStmt_VisitStmt
argument_list|(
argument|Stmt* S
argument_list|)
block|{
return|return
name|static_cast
operator|<
name|ImplClass
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|Visit
argument_list|(
name|S
argument_list|)
return|;
block|}
name|RetTy
name|BlockStmt_VisitLogicalOp
argument_list|(
argument|BinaryOperator* B
argument_list|)
block|{
return|return
name|static_cast
operator|<
name|ImplClass
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|BlockStmt_VisitImplicitControlFlowExpr
argument_list|(
name|B
argument_list|)
return|;
block|}
name|RetTy
name|BlockStmt_VisitComma
argument_list|(
argument|BinaryOperator* B
argument_list|)
block|{
return|return
name|static_cast
operator|<
name|ImplClass
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|BlockStmt_VisitImplicitControlFlowExpr
argument_list|(
name|B
argument_list|)
return|;
block|}
comment|//===--------------------------------------------------------------------===//
comment|// Utility methods.  Not called by default (but subclasses may use them).
comment|//===--------------------------------------------------------------------===//
comment|/// VisitChildren: Call "Visit" on each child of S.
name|void
name|VisitChildren
argument_list|(
argument|Stmt* S
argument_list|)
block|{
switch|switch
condition|(
name|S
operator|->
name|getStmtClass
argument_list|()
condition|)
block|{
default|default:
break|break;
case|case
name|Stmt
operator|::
name|StmtExprClass
case|:
block|{
name|CompoundStmt
modifier|*
name|CS
init|=
name|cast
operator|<
name|StmtExpr
operator|>
operator|(
name|S
operator|)
operator|->
name|getSubStmt
argument_list|()
decl_stmt|;
if|if
condition|(
name|CS
operator|->
name|body_empty
argument_list|()
condition|)
return|return;
name|static_cast
operator|<
name|ImplClass
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|Visit
argument_list|(
name|CS
operator|->
name|body_back
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|Stmt
operator|::
name|BinaryOperatorClass
case|:
block|{
name|BinaryOperator
modifier|*
name|B
init|=
name|cast
operator|<
name|BinaryOperator
operator|>
operator|(
name|S
operator|)
decl_stmt|;
if|if
condition|(
name|B
operator|->
name|getOpcode
argument_list|()
operator|!=
name|BO_Comma
condition|)
break|break;
name|static_cast
operator|<
name|ImplClass
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|Visit
argument_list|(
name|B
operator|->
name|getRHS
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
for|for
control|(
name|Stmt
operator|::
name|child_range
name|I
operator|=
name|S
operator|->
name|children
argument_list|()
init|;
name|I
condition|;
operator|++
name|I
control|)
if|if
condition|(
operator|*
name|I
condition|)
name|static_cast
operator|<
name|ImplClass
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|Visit
argument_list|(
operator|*
name|I
argument_list|)
expr_stmt|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_undef
undef|#
directive|undef
name|DEFAULT_BLOCKSTMT_VISIT
end_undef

begin_undef
undef|#
directive|undef
name|DISPATCH_CASE
end_undef

begin_comment
unit|}
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

