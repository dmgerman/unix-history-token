begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- CFG.h - Classes for representing and building CFGs------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines the CFG and CFGBuilder classes for representing and
end_comment

begin_comment
comment|//  building Control-Flow Graphs (CFGs) from ASTs.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_CFG_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_CFG_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/GraphTraits.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Allocator.h"
end_include

begin_include
include|#
directive|include
file|"clang/Analysis/Support/BumpVector.h"
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|raw_ostream
decl_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|Stmt
decl_stmt|;
name|class
name|Expr
decl_stmt|;
name|class
name|CFG
decl_stmt|;
name|class
name|PrinterHelper
decl_stmt|;
name|class
name|LangOptions
decl_stmt|;
name|class
name|ASTContext
decl_stmt|;
comment|/// CFGBlock - Represents a single basic block in a source-level CFG.
comment|///  It consists of:
comment|///
comment|///  (1) A set of statements/expressions (which may contain subexpressions).
comment|///  (2) A "terminator" statement (not in the set of statements).
comment|///  (3) A list of successors and predecessors.
comment|///
comment|/// Terminator: The terminator represents the type of control-flow that occurs
comment|/// at the end of the basic block.  The terminator is a Stmt* referring to an
comment|/// AST node that has control-flow: if-statements, breaks, loops, etc.
comment|/// If the control-flow is conditional, the condition expression will appear
comment|/// within the set of statements in the block (usually the last statement).
comment|///
comment|/// Predecessors: the order in the set of predecessors is arbitrary.
comment|///
comment|/// Successors: the order in the set of successors is NOT arbitrary.  We
comment|///  currently have the following orderings based on the terminator:
comment|///
comment|///     Terminator       Successor Ordering
comment|///  -----------------------------------------------------
comment|///       if            Then Block;  Else Block
comment|///     ? operator      LHS expression;  RHS expression
comment|///&&, ||          expression that uses result of&& or ||, RHS
comment|///
name|class
name|CFGBlock
block|{
name|class
name|StatementList
block|{
typedef|typedef
name|BumpVector
operator|<
name|Stmt
operator|*
operator|>
name|ImplTy
expr_stmt|;
name|ImplTy
name|Impl
decl_stmt|;
name|public
label|:
name|StatementList
argument_list|(
name|BumpVectorContext
operator|&
name|C
argument_list|)
operator|:
name|Impl
argument_list|(
argument|C
argument_list|,
literal|4
argument_list|)
block|{}
typedef|typedef
name|std
operator|::
name|reverse_iterator
operator|<
name|ImplTy
operator|::
name|iterator
operator|>
name|iterator
expr_stmt|;
typedef|typedef
name|std
operator|::
name|reverse_iterator
operator|<
name|ImplTy
operator|::
name|const_iterator
operator|>
name|const_iterator
expr_stmt|;
typedef|typedef
name|ImplTy
operator|::
name|iterator
name|reverse_iterator
expr_stmt|;
typedef|typedef
name|ImplTy
operator|::
name|const_iterator
name|const_reverse_iterator
expr_stmt|;
name|void
name|push_back
parameter_list|(
name|Stmt
modifier|*
name|s
parameter_list|,
name|BumpVectorContext
modifier|&
name|C
parameter_list|)
block|{
name|Impl
operator|.
name|push_back
argument_list|(
name|s
argument_list|,
name|C
argument_list|)
expr_stmt|;
block|}
name|Stmt
operator|*
name|front
argument_list|()
specifier|const
block|{
return|return
name|Impl
operator|.
name|back
argument_list|()
return|;
block|}
name|Stmt
operator|*
name|back
argument_list|()
specifier|const
block|{
return|return
name|Impl
operator|.
name|front
argument_list|()
return|;
block|}
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|Impl
operator|.
name|rbegin
argument_list|()
return|;
block|}
name|iterator
name|end
parameter_list|()
block|{
return|return
name|Impl
operator|.
name|rend
argument_list|()
return|;
block|}
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|Impl
operator|.
name|rbegin
argument_list|()
return|;
block|}
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|Impl
operator|.
name|rend
argument_list|()
return|;
block|}
name|reverse_iterator
name|rbegin
parameter_list|()
block|{
return|return
name|Impl
operator|.
name|begin
argument_list|()
return|;
block|}
name|reverse_iterator
name|rend
parameter_list|()
block|{
return|return
name|Impl
operator|.
name|end
argument_list|()
return|;
block|}
name|const_reverse_iterator
name|rbegin
argument_list|()
specifier|const
block|{
return|return
name|Impl
operator|.
name|begin
argument_list|()
return|;
block|}
name|const_reverse_iterator
name|rend
argument_list|()
specifier|const
block|{
return|return
name|Impl
operator|.
name|end
argument_list|()
return|;
block|}
name|Stmt
modifier|*
name|operator
index|[]
argument_list|(
name|size_t
name|i
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|i
operator|<
name|Impl
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Impl
index|[
name|Impl
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|-
name|i
index|]
return|;
block|}
name|size_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|Impl
operator|.
name|size
argument_list|()
return|;
block|}
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|Impl
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
empty_stmt|;
comment|/// Stmts - The set of statements in the basic block.
name|StatementList
name|Stmts
decl_stmt|;
comment|/// Label - An (optional) label that prefixes the executable
comment|///  statements in the block.  When this variable is non-NULL, it is
comment|///  either an instance of LabelStmt or SwitchCase.
name|Stmt
modifier|*
name|Label
decl_stmt|;
comment|/// Terminator - The terminator for a basic block that
comment|///  indicates the type of control-flow that occurs between a block
comment|///  and its successors.
name|Stmt
modifier|*
name|Terminator
decl_stmt|;
comment|/// LoopTarget - Some blocks are used to represent the "loop edge" to
comment|///  the start of a loop from within the loop body.  This Stmt* will be
comment|///  refer to the loop statement for such blocks (and be null otherwise).
specifier|const
name|Stmt
modifier|*
name|LoopTarget
decl_stmt|;
comment|/// BlockID - A numerical ID assigned to a CFGBlock during construction
comment|///   of the CFG.
name|unsigned
name|BlockID
decl_stmt|;
comment|/// Predecessors/Successors - Keep track of the predecessor / successor
comment|/// CFG blocks.
typedef|typedef
name|BumpVector
operator|<
name|CFGBlock
operator|*
operator|>
name|AdjacentBlocks
expr_stmt|;
name|AdjacentBlocks
name|Preds
decl_stmt|;
name|AdjacentBlocks
name|Succs
decl_stmt|;
name|public
label|:
name|explicit
name|CFGBlock
argument_list|(
argument|unsigned blockid
argument_list|,
argument|BumpVectorContext&C
argument_list|)
block|:
name|Stmts
argument_list|(
name|C
argument_list|)
operator|,
name|Label
argument_list|(
name|NULL
argument_list|)
operator|,
name|Terminator
argument_list|(
name|NULL
argument_list|)
operator|,
name|LoopTarget
argument_list|(
name|NULL
argument_list|)
operator|,
name|BlockID
argument_list|(
name|blockid
argument_list|)
operator|,
name|Preds
argument_list|(
name|C
argument_list|,
literal|1
argument_list|)
operator|,
name|Succs
argument_list|(
argument|C
argument_list|,
literal|1
argument_list|)
block|{}
operator|~
name|CFGBlock
argument_list|()
block|{}
expr_stmt|;
comment|// Statement iterators
typedef|typedef
name|StatementList
operator|::
name|iterator
name|iterator
expr_stmt|;
typedef|typedef
name|StatementList
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
typedef|typedef
name|StatementList
operator|::
name|reverse_iterator
name|reverse_iterator
expr_stmt|;
typedef|typedef
name|StatementList
operator|::
name|const_reverse_iterator
name|const_reverse_iterator
expr_stmt|;
name|Stmt
operator|*
name|front
argument_list|()
specifier|const
block|{
return|return
name|Stmts
operator|.
name|front
argument_list|()
return|;
block|}
name|Stmt
operator|*
name|back
argument_list|()
specifier|const
block|{
return|return
name|Stmts
operator|.
name|back
argument_list|()
return|;
block|}
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|Stmts
operator|.
name|begin
argument_list|()
return|;
block|}
name|iterator
name|end
parameter_list|()
block|{
return|return
name|Stmts
operator|.
name|end
argument_list|()
return|;
block|}
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|Stmts
operator|.
name|begin
argument_list|()
return|;
block|}
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|Stmts
operator|.
name|end
argument_list|()
return|;
block|}
name|reverse_iterator
name|rbegin
parameter_list|()
block|{
return|return
name|Stmts
operator|.
name|rbegin
argument_list|()
return|;
block|}
name|reverse_iterator
name|rend
parameter_list|()
block|{
return|return
name|Stmts
operator|.
name|rend
argument_list|()
return|;
block|}
name|const_reverse_iterator
name|rbegin
argument_list|()
specifier|const
block|{
return|return
name|Stmts
operator|.
name|rbegin
argument_list|()
return|;
block|}
name|const_reverse_iterator
name|rend
argument_list|()
specifier|const
block|{
return|return
name|Stmts
operator|.
name|rend
argument_list|()
return|;
block|}
name|unsigned
name|size
argument_list|()
specifier|const
block|{
return|return
name|Stmts
operator|.
name|size
argument_list|()
return|;
block|}
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|Stmts
operator|.
name|empty
argument_list|()
return|;
block|}
name|Stmt
modifier|*
name|operator
index|[]
argument_list|(
name|size_t
name|i
argument_list|)
decl|const
block|{
return|return
name|Stmts
index|[
name|i
index|]
return|;
block|}
comment|// CFG iterators
typedef|typedef
name|AdjacentBlocks
operator|::
name|iterator
name|pred_iterator
expr_stmt|;
typedef|typedef
name|AdjacentBlocks
operator|::
name|const_iterator
name|const_pred_iterator
expr_stmt|;
typedef|typedef
name|AdjacentBlocks
operator|::
name|reverse_iterator
name|pred_reverse_iterator
expr_stmt|;
typedef|typedef
name|AdjacentBlocks
operator|::
name|const_reverse_iterator
name|const_pred_reverse_iterator
expr_stmt|;
typedef|typedef
name|AdjacentBlocks
operator|::
name|iterator
name|succ_iterator
expr_stmt|;
typedef|typedef
name|AdjacentBlocks
operator|::
name|const_iterator
name|const_succ_iterator
expr_stmt|;
typedef|typedef
name|AdjacentBlocks
operator|::
name|reverse_iterator
name|succ_reverse_iterator
expr_stmt|;
typedef|typedef
name|AdjacentBlocks
operator|::
name|const_reverse_iterator
name|const_succ_reverse_iterator
expr_stmt|;
name|pred_iterator
name|pred_begin
parameter_list|()
block|{
return|return
name|Preds
operator|.
name|begin
argument_list|()
return|;
block|}
name|pred_iterator
name|pred_end
parameter_list|()
block|{
return|return
name|Preds
operator|.
name|end
argument_list|()
return|;
block|}
name|const_pred_iterator
name|pred_begin
argument_list|()
specifier|const
block|{
return|return
name|Preds
operator|.
name|begin
argument_list|()
return|;
block|}
name|const_pred_iterator
name|pred_end
argument_list|()
specifier|const
block|{
return|return
name|Preds
operator|.
name|end
argument_list|()
return|;
block|}
name|pred_reverse_iterator
name|pred_rbegin
parameter_list|()
block|{
return|return
name|Preds
operator|.
name|rbegin
argument_list|()
return|;
block|}
name|pred_reverse_iterator
name|pred_rend
parameter_list|()
block|{
return|return
name|Preds
operator|.
name|rend
argument_list|()
return|;
block|}
name|const_pred_reverse_iterator
name|pred_rbegin
argument_list|()
specifier|const
block|{
return|return
name|Preds
operator|.
name|rbegin
argument_list|()
return|;
block|}
name|const_pred_reverse_iterator
name|pred_rend
argument_list|()
specifier|const
block|{
return|return
name|Preds
operator|.
name|rend
argument_list|()
return|;
block|}
name|succ_iterator
name|succ_begin
parameter_list|()
block|{
return|return
name|Succs
operator|.
name|begin
argument_list|()
return|;
block|}
name|succ_iterator
name|succ_end
parameter_list|()
block|{
return|return
name|Succs
operator|.
name|end
argument_list|()
return|;
block|}
name|const_succ_iterator
name|succ_begin
argument_list|()
specifier|const
block|{
return|return
name|Succs
operator|.
name|begin
argument_list|()
return|;
block|}
name|const_succ_iterator
name|succ_end
argument_list|()
specifier|const
block|{
return|return
name|Succs
operator|.
name|end
argument_list|()
return|;
block|}
name|succ_reverse_iterator
name|succ_rbegin
parameter_list|()
block|{
return|return
name|Succs
operator|.
name|rbegin
argument_list|()
return|;
block|}
name|succ_reverse_iterator
name|succ_rend
parameter_list|()
block|{
return|return
name|Succs
operator|.
name|rend
argument_list|()
return|;
block|}
name|const_succ_reverse_iterator
name|succ_rbegin
argument_list|()
specifier|const
block|{
return|return
name|Succs
operator|.
name|rbegin
argument_list|()
return|;
block|}
name|const_succ_reverse_iterator
name|succ_rend
argument_list|()
specifier|const
block|{
return|return
name|Succs
operator|.
name|rend
argument_list|()
return|;
block|}
name|unsigned
name|succ_size
argument_list|()
specifier|const
block|{
return|return
name|Succs
operator|.
name|size
argument_list|()
return|;
block|}
name|bool
name|succ_empty
argument_list|()
specifier|const
block|{
return|return
name|Succs
operator|.
name|empty
argument_list|()
return|;
block|}
name|unsigned
name|pred_size
argument_list|()
specifier|const
block|{
return|return
name|Preds
operator|.
name|size
argument_list|()
return|;
block|}
name|bool
name|pred_empty
argument_list|()
specifier|const
block|{
return|return
name|Preds
operator|.
name|empty
argument_list|()
return|;
block|}
comment|// Manipulation of block contents
name|void
name|setTerminator
parameter_list|(
name|Stmt
modifier|*
name|Statement
parameter_list|)
block|{
name|Terminator
operator|=
name|Statement
expr_stmt|;
block|}
name|void
name|setLabel
parameter_list|(
name|Stmt
modifier|*
name|Statement
parameter_list|)
block|{
name|Label
operator|=
name|Statement
expr_stmt|;
block|}
name|void
name|setLoopTarget
parameter_list|(
specifier|const
name|Stmt
modifier|*
name|loopTarget
parameter_list|)
block|{
name|LoopTarget
operator|=
name|loopTarget
expr_stmt|;
block|}
name|Stmt
modifier|*
name|getTerminator
parameter_list|()
block|{
return|return
name|Terminator
return|;
block|}
specifier|const
name|Stmt
operator|*
name|getTerminator
argument_list|()
specifier|const
block|{
return|return
name|Terminator
return|;
block|}
name|Stmt
modifier|*
name|getTerminatorCondition
parameter_list|()
function_decl|;
specifier|const
name|Stmt
operator|*
name|getTerminatorCondition
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|CFGBlock
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|getTerminatorCondition
argument_list|()
return|;
block|}
specifier|const
name|Stmt
operator|*
name|getLoopTarget
argument_list|()
specifier|const
block|{
return|return
name|LoopTarget
return|;
block|}
name|bool
name|hasBinaryBranchTerminator
argument_list|()
specifier|const
expr_stmt|;
name|Stmt
modifier|*
name|getLabel
parameter_list|()
block|{
return|return
name|Label
return|;
block|}
specifier|const
name|Stmt
operator|*
name|getLabel
argument_list|()
specifier|const
block|{
return|return
name|Label
return|;
block|}
name|void
name|reverseStmts
parameter_list|()
function_decl|;
name|unsigned
name|getBlockID
argument_list|()
specifier|const
block|{
return|return
name|BlockID
return|;
block|}
name|void
name|dump
argument_list|(
specifier|const
name|CFG
operator|*
name|cfg
argument_list|,
specifier|const
name|LangOptions
operator|&
name|LO
argument_list|)
decl|const
decl_stmt|;
name|void
name|print
argument_list|(
name|llvm
operator|::
name|raw_ostream
operator|&
name|OS
argument_list|,
specifier|const
name|CFG
operator|*
name|cfg
argument_list|,
specifier|const
name|LangOptions
operator|&
name|LO
argument_list|)
decl|const
decl_stmt|;
name|void
name|printTerminator
argument_list|(
name|llvm
operator|::
name|raw_ostream
operator|&
name|OS
argument_list|,
specifier|const
name|LangOptions
operator|&
name|LO
argument_list|)
decl|const
decl_stmt|;
name|void
name|addSuccessor
parameter_list|(
name|CFGBlock
modifier|*
name|Block
parameter_list|,
name|BumpVectorContext
modifier|&
name|C
parameter_list|)
block|{
if|if
condition|(
name|Block
condition|)
name|Block
operator|->
name|Preds
operator|.
name|push_back
argument_list|(
name|this
argument_list|,
name|C
argument_list|)
expr_stmt|;
name|Succs
operator|.
name|push_back
argument_list|(
name|Block
argument_list|,
name|C
argument_list|)
expr_stmt|;
block|}
name|void
name|appendStmt
parameter_list|(
name|Stmt
modifier|*
name|Statement
parameter_list|,
name|BumpVectorContext
modifier|&
name|C
parameter_list|)
block|{
name|Stmts
operator|.
name|push_back
argument_list|(
name|Statement
argument_list|,
name|C
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
comment|/// CFG - Represents a source-level, intra-procedural CFG that represents the
comment|///  control-flow of a Stmt.  The Stmt can represent an entire function body,
comment|///  or a single expression.  A CFG will always contain one empty block that
comment|///  represents the Exit point of the CFG.  A CFG will also contain a designated
comment|///  Entry block.  The CFG solely represents control-flow; it consists of
comment|///  CFGBlocks which are simply containers of Stmt*'s in the AST the CFG
comment|///  was constructed from.
name|class
name|CFG
block|{
name|public
label|:
comment|//===--------------------------------------------------------------------===//
comment|// CFG Construction& Manipulation.
comment|//===--------------------------------------------------------------------===//
comment|/// buildCFG - Builds a CFG from an AST.  The responsibility to free the
comment|///   constructed CFG belongs to the caller.
specifier|static
name|CFG
modifier|*
name|buildCFG
parameter_list|(
name|Stmt
modifier|*
name|AST
parameter_list|,
name|ASTContext
modifier|*
name|C
parameter_list|)
function_decl|;
comment|/// createBlock - Create a new block in the CFG.  The CFG owns the block;
comment|///  the caller should not directly free it.
name|CFGBlock
modifier|*
name|createBlock
parameter_list|()
function_decl|;
comment|/// setEntry - Set the entry block of the CFG.  This is typically used
comment|///  only during CFG construction.  Most CFG clients expect that the
comment|///  entry block has no predecessors and contains no statements.
name|void
name|setEntry
parameter_list|(
name|CFGBlock
modifier|*
name|B
parameter_list|)
block|{
name|Entry
operator|=
name|B
expr_stmt|;
block|}
comment|/// setIndirectGotoBlock - Set the block used for indirect goto jumps.
comment|///  This is typically used only during CFG construction.
name|void
name|setIndirectGotoBlock
parameter_list|(
name|CFGBlock
modifier|*
name|B
parameter_list|)
block|{
name|IndirectGotoBlock
operator|=
name|B
expr_stmt|;
block|}
comment|//===--------------------------------------------------------------------===//
comment|// Block Iterators
comment|//===--------------------------------------------------------------------===//
typedef|typedef
name|BumpVector
operator|<
name|CFGBlock
operator|*
operator|>
name|CFGBlockListTy
expr_stmt|;
typedef|typedef
name|CFGBlockListTy
operator|::
name|iterator
name|iterator
expr_stmt|;
typedef|typedef
name|CFGBlockListTy
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
typedef|typedef
name|std
operator|::
name|reverse_iterator
operator|<
name|iterator
operator|>
name|reverse_iterator
expr_stmt|;
typedef|typedef
name|std
operator|::
name|reverse_iterator
operator|<
name|const_iterator
operator|>
name|const_reverse_iterator
expr_stmt|;
name|CFGBlock
modifier|&
name|front
parameter_list|()
block|{
return|return
operator|*
name|Blocks
operator|.
name|front
argument_list|()
return|;
block|}
name|CFGBlock
modifier|&
name|back
parameter_list|()
block|{
return|return
operator|*
name|Blocks
operator|.
name|back
argument_list|()
return|;
block|}
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|Blocks
operator|.
name|begin
argument_list|()
return|;
block|}
name|iterator
name|end
parameter_list|()
block|{
return|return
name|Blocks
operator|.
name|end
argument_list|()
return|;
block|}
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|Blocks
operator|.
name|begin
argument_list|()
return|;
block|}
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|Blocks
operator|.
name|end
argument_list|()
return|;
block|}
name|reverse_iterator
name|rbegin
parameter_list|()
block|{
return|return
name|Blocks
operator|.
name|rbegin
argument_list|()
return|;
block|}
name|reverse_iterator
name|rend
parameter_list|()
block|{
return|return
name|Blocks
operator|.
name|rend
argument_list|()
return|;
block|}
name|const_reverse_iterator
name|rbegin
argument_list|()
specifier|const
block|{
return|return
name|Blocks
operator|.
name|rbegin
argument_list|()
return|;
block|}
name|const_reverse_iterator
name|rend
argument_list|()
specifier|const
block|{
return|return
name|Blocks
operator|.
name|rend
argument_list|()
return|;
block|}
name|CFGBlock
modifier|&
name|getEntry
parameter_list|()
block|{
return|return
operator|*
name|Entry
return|;
block|}
specifier|const
name|CFGBlock
operator|&
name|getEntry
argument_list|()
specifier|const
block|{
return|return
operator|*
name|Entry
return|;
block|}
name|CFGBlock
modifier|&
name|getExit
parameter_list|()
block|{
return|return
operator|*
name|Exit
return|;
block|}
specifier|const
name|CFGBlock
operator|&
name|getExit
argument_list|()
specifier|const
block|{
return|return
operator|*
name|Exit
return|;
block|}
name|CFGBlock
modifier|*
name|getIndirectGotoBlock
parameter_list|()
block|{
return|return
name|IndirectGotoBlock
return|;
block|}
specifier|const
name|CFGBlock
operator|*
name|getIndirectGotoBlock
argument_list|()
specifier|const
block|{
return|return
name|IndirectGotoBlock
return|;
block|}
comment|//===--------------------------------------------------------------------===//
comment|// Member templates useful for various batch operations over CFGs.
comment|//===--------------------------------------------------------------------===//
name|template
operator|<
name|typename
name|CALLBACK
operator|>
name|void
name|VisitBlockStmts
argument_list|(
argument|CALLBACK& O
argument_list|)
specifier|const
block|{
for|for
control|(
name|const_iterator
name|I
init|=
name|begin
argument_list|()
init|,
name|E
init|=
name|end
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
for|for
control|(
name|CFGBlock
operator|::
name|const_iterator
name|BI
operator|=
operator|(
operator|*
name|I
operator|)
operator|->
name|begin
argument_list|()
operator|,
name|BE
operator|=
operator|(
operator|*
name|I
operator|)
operator|->
name|end
argument_list|()
init|;
name|BI
operator|!=
name|BE
condition|;
operator|++
name|BI
control|)
name|O
argument_list|(
operator|*
name|BI
argument_list|)
expr_stmt|;
block|}
comment|//===--------------------------------------------------------------------===//
comment|// CFG Introspection.
comment|//===--------------------------------------------------------------------===//
struct|struct
name|BlkExprNumTy
block|{
specifier|const
name|signed
name|Idx
decl_stmt|;
name|explicit
name|BlkExprNumTy
argument_list|(
argument|signed idx
argument_list|)
block|:
name|Idx
argument_list|(
argument|idx
argument_list|)
block|{}
name|explicit
name|BlkExprNumTy
argument_list|()
operator|:
name|Idx
argument_list|(
argument|-
literal|1
argument_list|)
block|{}
name|operator
name|bool
argument_list|()
specifier|const
block|{
return|return
name|Idx
operator|>=
literal|0
return|;
block|}
name|operator
name|unsigned
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|Idx
operator|>=
literal|0
argument_list|)
block|;
return|return
operator|(
name|unsigned
operator|)
name|Idx
return|;
block|}
block|}
struct|;
name|bool
name|isBlkExpr
parameter_list|(
specifier|const
name|Stmt
modifier|*
name|S
parameter_list|)
block|{
return|return
name|getBlkExprNum
argument_list|(
name|S
argument_list|)
return|;
block|}
name|BlkExprNumTy
name|getBlkExprNum
parameter_list|(
specifier|const
name|Stmt
modifier|*
name|S
parameter_list|)
function_decl|;
name|unsigned
name|getNumBlkExprs
parameter_list|()
function_decl|;
comment|/// getNumBlockIDs - Returns the total number of BlockIDs allocated (which
comment|/// start at 0).
name|unsigned
name|getNumBlockIDs
argument_list|()
specifier|const
block|{
return|return
name|NumBlockIDs
return|;
block|}
comment|//===--------------------------------------------------------------------===//
comment|// CFG Debugging: Pretty-Printing and Visualization.
comment|//===--------------------------------------------------------------------===//
name|void
name|viewCFG
argument_list|(
specifier|const
name|LangOptions
operator|&
name|LO
argument_list|)
decl|const
decl_stmt|;
name|void
name|print
argument_list|(
name|llvm
operator|::
name|raw_ostream
operator|&
name|OS
argument_list|,
specifier|const
name|LangOptions
operator|&
name|LO
argument_list|)
decl|const
decl_stmt|;
name|void
name|dump
argument_list|(
argument|const LangOptions&LO
argument_list|)
specifier|const
decl_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|// Internal: constructors and data.
comment|//===--------------------------------------------------------------------===//
name|CFG
argument_list|()
operator|:
name|Entry
argument_list|(
name|NULL
argument_list|)
operator|,
name|Exit
argument_list|(
name|NULL
argument_list|)
operator|,
name|IndirectGotoBlock
argument_list|(
name|NULL
argument_list|)
operator|,
name|NumBlockIDs
argument_list|(
literal|0
argument_list|)
operator|,
name|BlkExprMap
argument_list|(
name|NULL
argument_list|)
operator|,
name|Blocks
argument_list|(
argument|BlkBVC
argument_list|,
literal|10
argument_list|)
block|{}
expr_stmt|;
operator|~
name|CFG
argument_list|()
expr_stmt|;
name|llvm
operator|::
name|BumpPtrAllocator
operator|&
name|getAllocator
argument_list|()
block|{
return|return
name|BlkBVC
operator|.
name|getAllocator
argument_list|()
return|;
block|}
name|BumpVectorContext
modifier|&
name|getBumpVectorContext
parameter_list|()
block|{
return|return
name|BlkBVC
return|;
block|}
name|private
label|:
name|CFGBlock
modifier|*
name|Entry
decl_stmt|;
name|CFGBlock
modifier|*
name|Exit
decl_stmt|;
name|CFGBlock
modifier|*
name|IndirectGotoBlock
decl_stmt|;
comment|// Special block to contain collective dispatch
comment|// for indirect gotos
name|unsigned
name|NumBlockIDs
decl_stmt|;
comment|// BlkExprMap - An opaque pointer to prevent inclusion of DenseMap.h.
comment|//  It represents a map from Expr* to integers to record the set of
comment|//  block-level expressions and their "statement number" in the CFG.
name|void
modifier|*
name|BlkExprMap
decl_stmt|;
name|BumpVectorContext
name|BlkBVC
decl_stmt|;
name|CFGBlockListTy
name|Blocks
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace clang
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|// GraphTraits specializations for CFG basic block graphs (source-level CFGs)
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|// Traits for: CFGBlock
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
name|clang
operator|::
name|CFGBlock
operator|*
operator|>
block|{
typedef|typedef
name|clang
operator|::
name|CFGBlock
name|NodeType
expr_stmt|;
typedef|typedef
name|clang
operator|::
name|CFGBlock
operator|::
name|succ_iterator
name|ChildIteratorType
expr_stmt|;
specifier|static
name|NodeType
modifier|*
name|getEntryNode
argument_list|(
name|clang
operator|::
name|CFGBlock
operator|*
name|BB
argument_list|)
block|{
return|return
name|BB
return|;
block|}
specifier|static
specifier|inline
name|ChildIteratorType
name|child_begin
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
return|return
name|N
operator|->
name|succ_begin
argument_list|()
return|;
block|}
specifier|static
specifier|inline
name|ChildIteratorType
name|child_end
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
return|return
name|N
operator|->
name|succ_end
argument_list|()
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
specifier|const
name|clang
operator|::
name|CFGBlock
operator|*
operator|>
block|{
typedef|typedef
specifier|const
name|clang
operator|::
name|CFGBlock
name|NodeType
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|clang
operator|::
name|CFGBlock
operator|::
name|const_succ_iterator
name|ChildIteratorType
expr_stmt|;
end_typedef

begin_decl_stmt
specifier|static
name|NodeType
modifier|*
name|getEntryNode
argument_list|(
specifier|const
name|clang
operator|::
name|CFGBlock
operator|*
name|BB
argument_list|)
block|{
return|return
name|BB
return|;
block|}
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|ChildIteratorType
name|child_begin
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
return|return
name|N
operator|->
name|succ_begin
argument_list|()
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|ChildIteratorType
name|child_end
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
return|return
name|N
operator|->
name|succ_end
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
unit|};
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
name|Inverse
operator|<
specifier|const
name|clang
operator|::
name|CFGBlock
operator|*
operator|>
expr|>
block|{
typedef|typedef
specifier|const
name|clang
operator|::
name|CFGBlock
name|NodeType
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|clang
operator|::
name|CFGBlock
operator|::
name|const_pred_iterator
name|ChildIteratorType
expr_stmt|;
end_typedef

begin_decl_stmt
specifier|static
name|NodeType
modifier|*
name|getEntryNode
argument_list|(
name|Inverse
operator|<
specifier|const
name|clang
operator|::
name|CFGBlock
operator|*
operator|>
name|G
argument_list|)
block|{
return|return
name|G
operator|.
name|Graph
return|;
block|}
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|ChildIteratorType
name|child_begin
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
return|return
name|N
operator|->
name|pred_begin
argument_list|()
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|ChildIteratorType
name|child_end
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
return|return
name|N
operator|->
name|pred_end
argument_list|()
return|;
block|}
end_function

begin_comment
unit|};
comment|// Traits for: CFG
end_comment

begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
name|clang
operator|::
name|CFG
operator|*
operator|>
operator|:
name|public
name|GraphTraits
operator|<
name|clang
operator|::
name|CFGBlock
operator|*
operator|>
block|{
typedef|typedef
name|clang
operator|::
name|CFG
operator|::
name|iterator
name|nodes_iterator
expr_stmt|;
specifier|static
name|NodeType
operator|*
name|getEntryNode
argument_list|(
argument|clang::CFG* F
argument_list|)
block|{
return|return
operator|&
name|F
operator|->
name|getEntry
argument_list|()
return|;
block|}
specifier|static
name|nodes_iterator
name|nodes_begin
argument_list|(
argument|clang::CFG* F
argument_list|)
block|{
return|return
name|F
operator|->
name|begin
argument_list|()
return|;
block|}
specifier|static
name|nodes_iterator
name|nodes_end
argument_list|(
argument|clang::CFG* F
argument_list|)
block|{
return|return
name|F
operator|->
name|end
argument_list|()
return|;
block|}
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
specifier|const
name|clang
operator|::
name|CFG
operator|*
operator|>
operator|:
name|public
name|GraphTraits
operator|<
specifier|const
name|clang
operator|::
name|CFGBlock
operator|*
operator|>
block|{
typedef|typedef
name|clang
operator|::
name|CFG
operator|::
name|const_iterator
name|nodes_iterator
expr_stmt|;
specifier|static
name|NodeType
operator|*
name|getEntryNode
argument_list|(
argument|const clang::CFG* F
argument_list|)
block|{
return|return
operator|&
name|F
operator|->
name|getEntry
argument_list|()
return|;
block|}
specifier|static
name|nodes_iterator
name|nodes_begin
argument_list|(
argument|const clang::CFG* F
argument_list|)
block|{
return|return
name|F
operator|->
name|begin
argument_list|()
return|;
block|}
specifier|static
name|nodes_iterator
name|nodes_end
argument_list|(
argument|const clang::CFG* F
argument_list|)
block|{
return|return
name|F
operator|->
name|end
argument_list|()
return|;
block|}
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
name|Inverse
operator|<
specifier|const
name|clang
operator|::
name|CFG
operator|*
operator|>
expr|>
operator|:
name|public
name|GraphTraits
operator|<
name|Inverse
operator|<
specifier|const
name|clang
operator|::
name|CFGBlock
operator|*
operator|>
expr|>
block|{
typedef|typedef
name|clang
operator|::
name|CFG
operator|::
name|const_iterator
name|nodes_iterator
expr_stmt|;
specifier|static
name|NodeType
operator|*
name|getEntryNode
argument_list|(
argument|const clang::CFG* F
argument_list|)
block|{
return|return
operator|&
name|F
operator|->
name|getExit
argument_list|()
return|;
block|}
specifier|static
name|nodes_iterator
name|nodes_begin
argument_list|(
argument|const clang::CFG* F
argument_list|)
block|{
return|return
name|F
operator|->
name|begin
argument_list|()
return|;
block|}
specifier|static
name|nodes_iterator
name|nodes_end
argument_list|(
argument|const clang::CFG* F
argument_list|)
block|{
return|return
name|F
operator|->
name|end
argument_list|()
return|;
block|}
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// end llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

