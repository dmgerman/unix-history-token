begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//==- ProgramPoint.h - Program Points for Path-Sensitive Analysis --*- C++ -*-//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines the interface ProgramPoint, which identifies a
end_comment

begin_comment
comment|//  distinct location in a function.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_ANALYSIS_PROGRAM_POINT
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_ANALYSIS_PROGRAM_POINT
end_define

begin_include
include|#
directive|include
file|"clang/Analysis/AnalysisContext.h"
end_include

begin_include
include|#
directive|include
file|"clang/Analysis/CFG.h"
end_include

begin_include
include|#
directive|include
file|"llvm/System/DataTypes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/FoldingSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Casting.h"
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<utility>
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|LocationContext
decl_stmt|;
name|class
name|AnalysisContext
decl_stmt|;
name|class
name|FunctionDecl
decl_stmt|;
name|class
name|ProgramPoint
block|{
name|public
label|:
enum|enum
name|Kind
block|{
name|BlockEdgeKind
block|,
name|BlockEntranceKind
block|,
name|BlockExitKind
block|,
name|PreStmtKind
block|,
name|PostStmtKind
block|,
name|PreLoadKind
block|,
name|PostLoadKind
block|,
name|PreStoreKind
block|,
name|PostStoreKind
block|,
name|PostPurgeDeadSymbolsKind
block|,
name|PostStmtCustomKind
block|,
name|PostLValueKind
block|,
name|CallEnterKind
block|,
name|CallExitKind
block|,
name|MinPostStmtKind
init|=
name|PostStmtKind
block|,
name|MaxPostStmtKind
init|=
name|CallExitKind
block|}
enum|;
name|private
label|:
name|std
operator|::
name|pair
operator|<
specifier|const
name|void
operator|*
operator|,
specifier|const
name|void
operator|*
operator|>
name|Data
expr_stmt|;
name|Kind
name|K
decl_stmt|;
comment|// The LocationContext could be NULL to allow ProgramPoint to be used in
comment|// context insensitive analysis.
specifier|const
name|LocationContext
modifier|*
name|L
decl_stmt|;
specifier|const
name|void
modifier|*
name|Tag
decl_stmt|;
name|protected
label|:
name|ProgramPoint
argument_list|(
argument|const void* P
argument_list|,
argument|Kind k
argument_list|,
argument|const LocationContext *l
argument_list|,
argument|const void *tag =
literal|0
argument_list|)
block|:
name|Data
argument_list|(
name|P
argument_list|,
name|static_cast
operator|<
specifier|const
name|void
operator|*
operator|>
operator|(
name|NULL
operator|)
argument_list|)
operator|,
name|K
argument_list|(
name|k
argument_list|)
operator|,
name|L
argument_list|(
name|l
argument_list|)
operator|,
name|Tag
argument_list|(
argument|tag
argument_list|)
block|{}
name|ProgramPoint
argument_list|(
argument|const void* P1
argument_list|,
argument|const void* P2
argument_list|,
argument|Kind k
argument_list|,
argument|const LocationContext *l
argument_list|,
argument|const void *tag =
literal|0
argument_list|)
operator|:
name|Data
argument_list|(
name|P1
argument_list|,
name|P2
argument_list|)
operator|,
name|K
argument_list|(
name|k
argument_list|)
operator|,
name|L
argument_list|(
name|l
argument_list|)
operator|,
name|Tag
argument_list|(
argument|tag
argument_list|)
block|{}
name|protected
operator|:
specifier|const
name|void
operator|*
name|getData1
argument_list|()
specifier|const
block|{
return|return
name|Data
operator|.
name|first
return|;
block|}
specifier|const
name|void
operator|*
name|getData2
argument_list|()
specifier|const
block|{
return|return
name|Data
operator|.
name|second
return|;
block|}
specifier|const
name|void
operator|*
name|getTag
argument_list|()
specifier|const
block|{
return|return
name|Tag
return|;
block|}
name|public
label|:
name|Kind
name|getKind
argument_list|()
specifier|const
block|{
return|return
name|K
return|;
block|}
specifier|const
name|LocationContext
operator|*
name|getLocationContext
argument_list|()
specifier|const
block|{
return|return
name|L
return|;
block|}
comment|// For use with DenseMap.  This hash is probably slow.
name|unsigned
name|getHashValue
argument_list|()
specifier|const
block|{
name|llvm
operator|::
name|FoldingSetNodeID
name|ID
block|;
name|Profile
argument_list|(
name|ID
argument_list|)
block|;
return|return
name|ID
operator|.
name|ComputeHash
argument_list|()
return|;
block|}
specifier|static
name|bool
name|classof
parameter_list|(
specifier|const
name|ProgramPoint
modifier|*
parameter_list|)
block|{
return|return
name|true
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|ProgramPoint
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|K
operator|==
name|RHS
operator|.
name|K
operator|&&
name|Data
operator|==
name|RHS
operator|.
name|Data
operator|&&
name|L
operator|==
name|RHS
operator|.
name|L
operator|&&
name|Tag
operator|==
name|RHS
operator|.
name|Tag
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|ProgramPoint
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|K
operator|!=
name|RHS
operator|.
name|K
operator|||
name|Data
operator|!=
name|RHS
operator|.
name|Data
operator|||
name|L
operator|!=
name|RHS
operator|.
name|L
operator|||
name|Tag
operator|!=
name|RHS
operator|.
name|Tag
return|;
block|}
name|void
name|Profile
argument_list|(
name|llvm
operator|::
name|FoldingSetNodeID
operator|&
name|ID
argument_list|)
decl|const
block|{
name|ID
operator|.
name|AddInteger
argument_list|(
operator|(
name|unsigned
operator|)
name|K
argument_list|)
expr_stmt|;
name|ID
operator|.
name|AddPointer
argument_list|(
name|Data
operator|.
name|first
argument_list|)
expr_stmt|;
name|ID
operator|.
name|AddPointer
argument_list|(
name|Data
operator|.
name|second
argument_list|)
expr_stmt|;
name|ID
operator|.
name|AddPointer
argument_list|(
name|L
argument_list|)
expr_stmt|;
name|ID
operator|.
name|AddPointer
argument_list|(
name|Tag
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
name|class
name|BlockEntrance
range|:
name|public
name|ProgramPoint
block|{
name|public
operator|:
name|BlockEntrance
argument_list|(
specifier|const
name|CFGBlock
operator|*
name|B
argument_list|,
specifier|const
name|LocationContext
operator|*
name|L
argument_list|,
specifier|const
name|void
operator|*
name|tag
operator|=
literal|0
argument_list|)
operator|:
name|ProgramPoint
argument_list|(
argument|B
argument_list|,
argument|BlockEntranceKind
argument_list|,
argument|L
argument_list|,
argument|tag
argument_list|)
block|{}
specifier|const
name|CFGBlock
operator|*
name|getBlock
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|CFGBlock
operator|*
operator|>
operator|(
name|getData1
argument_list|()
operator|)
return|;
block|}
specifier|const
name|CFGElement
name|getFirstElement
argument_list|()
specifier|const
block|{
specifier|const
name|CFGBlock
operator|*
name|B
operator|=
name|getBlock
argument_list|()
block|;
return|return
name|B
operator|->
name|empty
argument_list|()
condition|?
name|CFGElement
argument_list|()
else|:
name|B
operator|->
name|front
argument_list|()
return|;
block|}
specifier|const
name|Stmt
operator|*
name|getFirstStmt
argument_list|()
specifier|const
block|{
return|return
name|getFirstElement
argument_list|()
operator|.
name|getStmt
argument_list|()
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const ProgramPoint* Location
argument_list|)
block|{
return|return
name|Location
operator|->
name|getKind
argument_list|()
operator|==
name|BlockEntranceKind
return|;
block|}
expr|}
block|;
name|class
name|BlockExit
operator|:
name|public
name|ProgramPoint
block|{
name|public
operator|:
name|BlockExit
argument_list|(
specifier|const
name|CFGBlock
operator|*
name|B
argument_list|,
specifier|const
name|LocationContext
operator|*
name|L
argument_list|)
operator|:
name|ProgramPoint
argument_list|(
argument|B
argument_list|,
argument|BlockExitKind
argument_list|,
argument|L
argument_list|)
block|{}
specifier|const
name|CFGBlock
operator|*
name|getBlock
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|CFGBlock
operator|*
operator|>
operator|(
name|getData1
argument_list|()
operator|)
return|;
block|}
specifier|const
name|Stmt
operator|*
name|getLastStmt
argument_list|()
specifier|const
block|{
specifier|const
name|CFGBlock
operator|*
name|B
operator|=
name|getBlock
argument_list|()
block|;
return|return
name|B
operator|->
name|empty
argument_list|()
condition|?
name|CFGElement
argument_list|()
else|:
name|B
operator|->
name|back
argument_list|()
return|;
block|}
specifier|const
name|Stmt
operator|*
name|getTerminator
argument_list|()
specifier|const
block|{
return|return
name|getBlock
argument_list|()
operator|->
name|getTerminator
argument_list|()
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const ProgramPoint* Location
argument_list|)
block|{
return|return
name|Location
operator|->
name|getKind
argument_list|()
operator|==
name|BlockExitKind
return|;
block|}
expr|}
block|;
name|class
name|StmtPoint
operator|:
name|public
name|ProgramPoint
block|{
name|public
operator|:
name|StmtPoint
argument_list|(
argument|const Stmt *S
argument_list|,
argument|const void *p2
argument_list|,
argument|Kind k
argument_list|,
argument|const LocationContext *L
argument_list|,
argument|const void *tag
argument_list|)
operator|:
name|ProgramPoint
argument_list|(
argument|S
argument_list|,
argument|p2
argument_list|,
argument|k
argument_list|,
argument|L
argument_list|,
argument|tag
argument_list|)
block|{}
specifier|const
name|Stmt
operator|*
name|getStmt
argument_list|()
specifier|const
block|{
return|return
operator|(
specifier|const
name|Stmt
operator|*
operator|)
name|getData1
argument_list|()
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
specifier|const
name|T
operator|*
name|getStmtAs
argument_list|()
specifier|const
block|{
return|return
name|llvm
operator|::
name|dyn_cast
operator|<
name|T
operator|>
operator|(
name|getStmt
argument_list|()
operator|)
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const ProgramPoint* Location
argument_list|)
block|{
name|unsigned
name|k
operator|=
name|Location
operator|->
name|getKind
argument_list|()
block|;
return|return
name|k
operator|>=
name|PreStmtKind
operator|&&
name|k
operator|<=
name|MaxPostStmtKind
return|;
block|}
expr|}
block|;
name|class
name|PreStmt
operator|:
name|public
name|StmtPoint
block|{
name|public
operator|:
name|PreStmt
argument_list|(
specifier|const
name|Stmt
operator|*
name|S
argument_list|,
specifier|const
name|LocationContext
operator|*
name|L
argument_list|,
specifier|const
name|void
operator|*
name|tag
argument_list|,
specifier|const
name|Stmt
operator|*
name|SubStmt
operator|=
literal|0
argument_list|)
operator|:
name|StmtPoint
argument_list|(
argument|S
argument_list|,
argument|SubStmt
argument_list|,
argument|PreStmtKind
argument_list|,
argument|L
argument_list|,
argument|tag
argument_list|)
block|{}
specifier|const
name|Stmt
operator|*
name|getSubStmt
argument_list|()
specifier|const
block|{
return|return
operator|(
specifier|const
name|Stmt
operator|*
operator|)
name|getData2
argument_list|()
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const ProgramPoint* Location
argument_list|)
block|{
return|return
name|Location
operator|->
name|getKind
argument_list|()
operator|==
name|PreStmtKind
return|;
block|}
expr|}
block|;
name|class
name|PostStmt
operator|:
name|public
name|StmtPoint
block|{
name|protected
operator|:
name|PostStmt
argument_list|(
argument|const Stmt* S
argument_list|,
argument|Kind k
argument_list|,
argument|const LocationContext *L
argument_list|,
argument|const void *tag =
literal|0
argument_list|)
operator|:
name|StmtPoint
argument_list|(
argument|S
argument_list|,
argument|NULL
argument_list|,
argument|k
argument_list|,
argument|L
argument_list|,
argument|tag
argument_list|)
block|{}
name|PostStmt
argument_list|(
argument|const Stmt* S
argument_list|,
argument|const void* data
argument_list|,
argument|Kind k
argument_list|,
argument|const LocationContext *L
argument_list|,
argument|const void *tag =
literal|0
argument_list|)
operator|:
name|StmtPoint
argument_list|(
argument|S
argument_list|,
argument|data
argument_list|,
argument|k
argument_list|,
argument|L
argument_list|,
argument|tag
argument_list|)
block|{}
name|public
operator|:
name|explicit
name|PostStmt
argument_list|(
specifier|const
name|Stmt
operator|*
name|S
argument_list|,
specifier|const
name|LocationContext
operator|*
name|L
argument_list|,
specifier|const
name|void
operator|*
name|tag
operator|=
literal|0
argument_list|)
operator|:
name|StmtPoint
argument_list|(
argument|S
argument_list|,
argument|NULL
argument_list|,
argument|PostStmtKind
argument_list|,
argument|L
argument_list|,
argument|tag
argument_list|)
block|{}
specifier|static
name|bool
name|classof
argument_list|(
argument|const ProgramPoint* Location
argument_list|)
block|{
name|unsigned
name|k
operator|=
name|Location
operator|->
name|getKind
argument_list|()
block|;
return|return
name|k
operator|>=
name|MinPostStmtKind
operator|&&
name|k
operator|<=
name|MaxPostStmtKind
return|;
block|}
expr|}
block|;
name|class
name|PostStmtCustom
operator|:
name|public
name|PostStmt
block|{
name|public
operator|:
name|PostStmtCustom
argument_list|(
specifier|const
name|Stmt
operator|*
name|S
argument_list|,
specifier|const
name|std
operator|::
name|pair
operator|<
specifier|const
name|void
operator|*
argument_list|,
specifier|const
name|void
operator|*
operator|>
operator|*
name|TaggedData
argument_list|,\
specifier|const
name|LocationContext
operator|*
name|L
argument_list|)
operator|:
name|PostStmt
argument_list|(
argument|S
argument_list|,
argument|TaggedData
argument_list|,
argument|PostStmtCustomKind
argument_list|,
argument|L
argument_list|)
block|{}
specifier|const
name|std
operator|::
name|pair
operator|<
specifier|const
name|void
operator|*
block|,
specifier|const
name|void
operator|*
operator|>
operator|&
name|getTaggedPair
argument_list|()
specifier|const
block|{
return|return
operator|*
name|reinterpret_cast
operator|<
specifier|const
name|std
operator|::
name|pair
operator|<
specifier|const
name|void
operator|*
operator|,
specifier|const
name|void
operator|*
operator|>
operator|*
operator|>
operator|(
name|getData2
argument_list|()
operator|)
return|;
block|}
specifier|const
name|void
operator|*
name|getTag
argument_list|()
specifier|const
block|{
return|return
name|getTaggedPair
argument_list|()
operator|.
name|first
return|;
block|}
specifier|const
name|void
operator|*
name|getTaggedData
argument_list|()
specifier|const
block|{
return|return
name|getTaggedPair
argument_list|()
operator|.
name|second
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const ProgramPoint* Location
argument_list|)
block|{
return|return
name|Location
operator|->
name|getKind
argument_list|()
operator|==
name|PostStmtCustomKind
return|;
block|}
expr|}
block|;
name|class
name|LocationCheck
operator|:
name|public
name|StmtPoint
block|{
name|protected
operator|:
name|LocationCheck
argument_list|(
argument|const Stmt *S
argument_list|,
argument|const LocationContext *L
argument_list|,
argument|ProgramPoint::Kind K
argument_list|,
argument|const void *tag
argument_list|)
operator|:
name|StmtPoint
argument_list|(
argument|S
argument_list|,
argument|NULL
argument_list|,
argument|K
argument_list|,
argument|L
argument_list|,
argument|tag
argument_list|)
block|{}
specifier|static
name|bool
name|classof
argument_list|(
argument|const ProgramPoint *location
argument_list|)
block|{
name|unsigned
name|k
operator|=
name|location
operator|->
name|getKind
argument_list|()
block|;
return|return
name|k
operator|==
name|PreLoadKind
operator|||
name|k
operator|==
name|PreStoreKind
return|;
block|}
expr|}
block|;
name|class
name|PreLoad
operator|:
name|public
name|LocationCheck
block|{
name|public
operator|:
name|PreLoad
argument_list|(
specifier|const
name|Stmt
operator|*
name|S
argument_list|,
specifier|const
name|LocationContext
operator|*
name|L
argument_list|,
specifier|const
name|void
operator|*
name|tag
operator|=
literal|0
argument_list|)
operator|:
name|LocationCheck
argument_list|(
argument|S
argument_list|,
argument|L
argument_list|,
argument|PreLoadKind
argument_list|,
argument|tag
argument_list|)
block|{}
specifier|static
name|bool
name|classof
argument_list|(
argument|const ProgramPoint *location
argument_list|)
block|{
return|return
name|location
operator|->
name|getKind
argument_list|()
operator|==
name|PreLoadKind
return|;
block|}
expr|}
block|;
name|class
name|PreStore
operator|:
name|public
name|LocationCheck
block|{
name|public
operator|:
name|PreStore
argument_list|(
specifier|const
name|Stmt
operator|*
name|S
argument_list|,
specifier|const
name|LocationContext
operator|*
name|L
argument_list|,
specifier|const
name|void
operator|*
name|tag
operator|=
literal|0
argument_list|)
operator|:
name|LocationCheck
argument_list|(
argument|S
argument_list|,
argument|L
argument_list|,
argument|PreStoreKind
argument_list|,
argument|tag
argument_list|)
block|{}
specifier|static
name|bool
name|classof
argument_list|(
argument|const ProgramPoint *location
argument_list|)
block|{
return|return
name|location
operator|->
name|getKind
argument_list|()
operator|==
name|PreStoreKind
return|;
block|}
expr|}
block|;
name|class
name|PostLoad
operator|:
name|public
name|PostStmt
block|{
name|public
operator|:
name|PostLoad
argument_list|(
specifier|const
name|Stmt
operator|*
name|S
argument_list|,
specifier|const
name|LocationContext
operator|*
name|L
argument_list|,
specifier|const
name|void
operator|*
name|tag
operator|=
literal|0
argument_list|)
operator|:
name|PostStmt
argument_list|(
argument|S
argument_list|,
argument|PostLoadKind
argument_list|,
argument|L
argument_list|,
argument|tag
argument_list|)
block|{}
specifier|static
name|bool
name|classof
argument_list|(
argument|const ProgramPoint* Location
argument_list|)
block|{
return|return
name|Location
operator|->
name|getKind
argument_list|()
operator|==
name|PostLoadKind
return|;
block|}
expr|}
block|;
name|class
name|PostStore
operator|:
name|public
name|PostStmt
block|{
name|public
operator|:
name|PostStore
argument_list|(
specifier|const
name|Stmt
operator|*
name|S
argument_list|,
specifier|const
name|LocationContext
operator|*
name|L
argument_list|,
specifier|const
name|void
operator|*
name|tag
operator|=
literal|0
argument_list|)
operator|:
name|PostStmt
argument_list|(
argument|S
argument_list|,
argument|PostStoreKind
argument_list|,
argument|L
argument_list|,
argument|tag
argument_list|)
block|{}
specifier|static
name|bool
name|classof
argument_list|(
argument|const ProgramPoint* Location
argument_list|)
block|{
return|return
name|Location
operator|->
name|getKind
argument_list|()
operator|==
name|PostStoreKind
return|;
block|}
expr|}
block|;
name|class
name|PostLValue
operator|:
name|public
name|PostStmt
block|{
name|public
operator|:
name|PostLValue
argument_list|(
specifier|const
name|Stmt
operator|*
name|S
argument_list|,
specifier|const
name|LocationContext
operator|*
name|L
argument_list|,
specifier|const
name|void
operator|*
name|tag
operator|=
literal|0
argument_list|)
operator|:
name|PostStmt
argument_list|(
argument|S
argument_list|,
argument|PostLValueKind
argument_list|,
argument|L
argument_list|,
argument|tag
argument_list|)
block|{}
specifier|static
name|bool
name|classof
argument_list|(
argument|const ProgramPoint* Location
argument_list|)
block|{
return|return
name|Location
operator|->
name|getKind
argument_list|()
operator|==
name|PostLValueKind
return|;
block|}
expr|}
block|;
name|class
name|PostPurgeDeadSymbols
operator|:
name|public
name|PostStmt
block|{
name|public
operator|:
name|PostPurgeDeadSymbols
argument_list|(
specifier|const
name|Stmt
operator|*
name|S
argument_list|,
specifier|const
name|LocationContext
operator|*
name|L
argument_list|,
specifier|const
name|void
operator|*
name|tag
operator|=
literal|0
argument_list|)
operator|:
name|PostStmt
argument_list|(
argument|S
argument_list|,
argument|PostPurgeDeadSymbolsKind
argument_list|,
argument|L
argument_list|,
argument|tag
argument_list|)
block|{}
specifier|static
name|bool
name|classof
argument_list|(
argument|const ProgramPoint* Location
argument_list|)
block|{
return|return
name|Location
operator|->
name|getKind
argument_list|()
operator|==
name|PostPurgeDeadSymbolsKind
return|;
block|}
expr|}
block|;
name|class
name|BlockEdge
operator|:
name|public
name|ProgramPoint
block|{
name|public
operator|:
name|BlockEdge
argument_list|(
specifier|const
name|CFGBlock
operator|*
name|B1
argument_list|,
specifier|const
name|CFGBlock
operator|*
name|B2
argument_list|,
specifier|const
name|LocationContext
operator|*
name|L
argument_list|)
operator|:
name|ProgramPoint
argument_list|(
argument|B1
argument_list|,
argument|B2
argument_list|,
argument|BlockEdgeKind
argument_list|,
argument|L
argument_list|)
block|{}
specifier|const
name|CFGBlock
operator|*
name|getSrc
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
specifier|const
name|CFGBlock
operator|*
operator|>
operator|(
name|getData1
argument_list|()
operator|)
return|;
block|}
specifier|const
name|CFGBlock
operator|*
name|getDst
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
specifier|const
name|CFGBlock
operator|*
operator|>
operator|(
name|getData2
argument_list|()
operator|)
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const ProgramPoint* Location
argument_list|)
block|{
return|return
name|Location
operator|->
name|getKind
argument_list|()
operator|==
name|BlockEdgeKind
return|;
block|}
expr|}
block|;
name|class
name|CallEnter
operator|:
name|public
name|StmtPoint
block|{
name|public
operator|:
comment|// L is caller's location context. AC is callee's AnalysisContext.
name|CallEnter
argument_list|(
specifier|const
name|Stmt
operator|*
name|S
argument_list|,
specifier|const
name|AnalysisContext
operator|*
name|AC
argument_list|,
specifier|const
name|LocationContext
operator|*
name|L
argument_list|)
operator|:
name|StmtPoint
argument_list|(
argument|S
argument_list|,
argument|AC
argument_list|,
argument|CallEnterKind
argument_list|,
argument|L
argument_list|,
literal|0
argument_list|)
block|{}
specifier|const
name|Stmt
operator|*
name|getCallExpr
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
specifier|const
name|Stmt
operator|*
operator|>
operator|(
name|getData1
argument_list|()
operator|)
return|;
block|}
name|AnalysisContext
operator|*
name|getCalleeContext
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|AnalysisContext
operator|*
operator|>
operator|(
name|static_cast
operator|<
specifier|const
name|AnalysisContext
operator|*
operator|>
operator|(
name|getData2
argument_list|()
operator|)
operator|)
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const ProgramPoint *Location
argument_list|)
block|{
return|return
name|Location
operator|->
name|getKind
argument_list|()
operator|==
name|CallEnterKind
return|;
block|}
expr|}
block|;
name|class
name|CallExit
operator|:
name|public
name|StmtPoint
block|{
name|public
operator|:
comment|// CallExit uses the callee's location context.
name|CallExit
argument_list|(
specifier|const
name|Stmt
operator|*
name|S
argument_list|,
specifier|const
name|LocationContext
operator|*
name|L
argument_list|)
operator|:
name|StmtPoint
argument_list|(
argument|S
argument_list|,
literal|0
argument_list|,
argument|CallExitKind
argument_list|,
argument|L
argument_list|,
literal|0
argument_list|)
block|{}
specifier|static
name|bool
name|classof
argument_list|(
argument|const ProgramPoint *Location
argument_list|)
block|{
return|return
name|Location
operator|->
name|getKind
argument_list|()
operator|==
name|CallExitKind
return|;
block|}
expr|}
block|;   }
comment|// end namespace clang
name|namespace
name|llvm
block|{
comment|// Traits specialization for DenseMap
name|template
operator|<
operator|>
expr|struct
name|DenseMapInfo
operator|<
name|clang
operator|::
name|ProgramPoint
operator|>
block|{
specifier|static
specifier|inline
name|clang
operator|::
name|ProgramPoint
name|getEmptyKey
argument_list|()
block|{
name|uintptr_t
name|x
operator|=
name|reinterpret_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|DenseMapInfo
operator|<
name|void
operator|*
operator|>
operator|::
name|getEmptyKey
argument_list|()
operator|)
operator|&
operator|~
literal|0x7
block|;
return|return
name|clang
operator|::
name|BlockEntrance
argument_list|(
name|reinterpret_cast
operator|<
name|clang
operator|::
name|CFGBlock
operator|*
operator|>
operator|(
name|x
operator|)
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|clang
operator|::
name|ProgramPoint
name|getTombstoneKey
argument_list|()
block|{
name|uintptr_t
name|x
operator|=
name|reinterpret_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|DenseMapInfo
operator|<
name|void
operator|*
operator|>
operator|::
name|getTombstoneKey
argument_list|()
operator|)
operator|&
operator|~
literal|0x7
block|;
return|return
name|clang
operator|::
name|BlockEntrance
argument_list|(
name|reinterpret_cast
operator|<
name|clang
operator|::
name|CFGBlock
operator|*
operator|>
operator|(
name|x
operator|)
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|static
name|unsigned
name|getHashValue
argument_list|(
argument|const clang::ProgramPoint& Loc
argument_list|)
block|{
return|return
name|Loc
operator|.
name|getHashValue
argument_list|()
return|;
block|}
specifier|static
name|bool
name|isEqual
argument_list|(
argument|const clang::ProgramPoint& L
argument_list|,
argument|const clang::ProgramPoint& R
argument_list|)
block|{
return|return
name|L
operator|==
name|R
return|;
block|}
expr|}
block|;
name|template
operator|<
operator|>
expr|struct
name|isPodLike
operator|<
name|clang
operator|::
name|ProgramPoint
operator|>
block|{
specifier|static
specifier|const
name|bool
name|value
operator|=
name|true
block|; }
block|;  }
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

