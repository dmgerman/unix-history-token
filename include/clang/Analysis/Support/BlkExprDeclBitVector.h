begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// BlkExprDeclBitVector.h - Dataflow types for Bitvector Analysis --*- C++ --*--
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file provides definition of dataflow types used by analyses such
end_comment

begin_comment
comment|// as LiveVariables and UninitializedValues.  The underlying dataflow values
end_comment

begin_comment
comment|// are implemented as bitvectors, but the definitions in this file include
end_comment

begin_comment
comment|// the necessary boilerplate to use with our dataflow framework.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_STMTDECLBVDVAL_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_STMTDECLBVDVAL_H
end_define

begin_include
include|#
directive|include
file|"clang/AST/CFG.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/Decl.h"
end_include

begin_comment
comment|// for Decl* -> NamedDecl* conversion
end_comment

begin_include
include|#
directive|include
file|"llvm/ADT/BitVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|Stmt
decl_stmt|;
name|class
name|ASTContext
decl_stmt|;
struct|struct
name|DeclBitVector_Types
block|{
name|class
name|Idx
block|{
name|unsigned
name|I
decl_stmt|;
name|public
label|:
name|explicit
name|Idx
argument_list|(
argument|unsigned i
argument_list|)
block|:
name|I
argument_list|(
argument|i
argument_list|)
block|{}
name|Idx
argument_list|()
operator|:
name|I
argument_list|(
argument|~
literal|0U
argument_list|)
block|{}
name|bool
name|isValid
argument_list|()
specifier|const
block|{
return|return
name|I
operator|!=
operator|~
literal|0U
return|;
block|}
name|operator
name|unsigned
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isValid
argument_list|()
argument_list|)
block|;
return|return
name|I
return|;
block|}
block|}
empty_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|// AnalysisDataTy - Whole-function meta data.
comment|//===--------------------------------------------------------------------===//
name|class
name|AnalysisDataTy
block|{
name|public
label|:
typedef|typedef
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|NamedDecl
operator|*
operator|,
name|unsigned
operator|>
name|DMapTy
expr_stmt|;
typedef|typedef
name|DMapTy
operator|::
name|const_iterator
name|decl_iterator
expr_stmt|;
name|protected
label|:
name|DMapTy
name|DMap
decl_stmt|;
name|unsigned
name|NDecls
decl_stmt|;
name|public
label|:
name|AnalysisDataTy
argument_list|()
operator|:
name|NDecls
argument_list|(
literal|0
argument_list|)
block|{}
name|virtual
operator|~
name|AnalysisDataTy
argument_list|()
block|{}
name|bool
name|isTracked
argument_list|(
argument|const NamedDecl* SD
argument_list|)
block|{
return|return
name|DMap
operator|.
name|find
argument_list|(
name|SD
argument_list|)
operator|!=
name|DMap
operator|.
name|end
argument_list|()
return|;
block|}
name|Idx
name|getIdx
argument_list|(
specifier|const
name|NamedDecl
operator|*
name|SD
argument_list|)
decl|const
block|{
name|DMapTy
operator|::
name|const_iterator
name|I
operator|=
name|DMap
operator|.
name|find
argument_list|(
name|SD
argument_list|)
expr_stmt|;
return|return
name|I
operator|==
name|DMap
operator|.
name|end
argument_list|()
condition|?
name|Idx
argument_list|()
else|:
name|Idx
argument_list|(
name|I
operator|->
name|second
argument_list|)
return|;
block|}
name|unsigned
name|getNumDecls
argument_list|()
specifier|const
block|{
return|return
name|NDecls
return|;
block|}
name|void
name|Register
parameter_list|(
specifier|const
name|NamedDecl
modifier|*
name|SD
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isTracked
argument_list|(
name|SD
argument_list|)
condition|)
name|DMap
index|[
name|SD
index|]
operator|=
name|NDecls
operator|++
expr_stmt|;
block|}
name|decl_iterator
name|begin_decl
argument_list|()
specifier|const
block|{
return|return
name|DMap
operator|.
name|begin
argument_list|()
return|;
block|}
name|decl_iterator
name|end_decl
argument_list|()
specifier|const
block|{
return|return
name|DMap
operator|.
name|end
argument_list|()
return|;
block|}
block|}
empty_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|// ValTy - Dataflow value.
comment|//===--------------------------------------------------------------------===//
name|class
name|ValTy
block|{
name|llvm
operator|::
name|BitVector
name|DeclBV
expr_stmt|;
name|public
label|:
name|void
name|resetDeclValues
parameter_list|(
name|AnalysisDataTy
modifier|&
name|AD
parameter_list|)
block|{
name|DeclBV
operator|.
name|resize
argument_list|(
name|AD
operator|.
name|getNumDecls
argument_list|()
argument_list|)
expr_stmt|;
name|DeclBV
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|void
name|setDeclValues
parameter_list|(
name|AnalysisDataTy
modifier|&
name|AD
parameter_list|)
block|{
name|DeclBV
operator|.
name|resize
argument_list|(
name|AD
operator|.
name|getNumDecls
argument_list|()
argument_list|)
expr_stmt|;
name|DeclBV
operator|.
name|set
argument_list|()
expr_stmt|;
block|}
name|void
name|resetValues
parameter_list|(
name|AnalysisDataTy
modifier|&
name|AD
parameter_list|)
block|{
name|resetDeclValues
argument_list|(
name|AD
argument_list|)
expr_stmt|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|ValTy
operator|&
name|RHS
operator|)
specifier|const
block|{
name|assert
argument_list|(
name|sizesEqual
argument_list|(
name|RHS
argument_list|)
argument_list|)
block|;
return|return
name|DeclBV
operator|==
name|RHS
operator|.
name|DeclBV
return|;
block|}
name|void
name|copyValues
parameter_list|(
specifier|const
name|ValTy
modifier|&
name|RHS
parameter_list|)
block|{
name|DeclBV
operator|=
name|RHS
operator|.
name|DeclBV
expr_stmt|;
block|}
name|llvm
operator|::
name|BitVector
operator|::
name|reference
name|getBit
argument_list|(
argument|unsigned i
argument_list|)
block|{
return|return
name|DeclBV
index|[
name|i
index|]
return|;
block|}
name|bool
name|getBit
argument_list|(
name|unsigned
name|i
argument_list|)
decl|const
block|{
return|return
name|DeclBV
index|[
name|i
index|]
return|;
block|}
name|llvm
operator|::
name|BitVector
operator|::
name|reference
name|operator
argument_list|()
operator|(
specifier|const
name|NamedDecl
operator|*
name|ND
operator|,
specifier|const
name|AnalysisDataTy
operator|&
name|AD
operator|)
block|{
return|return
name|getBit
argument_list|(
name|AD
operator|.
name|getIdx
argument_list|(
name|ND
argument_list|)
argument_list|)
return|;
block|}
name|bool
name|operator
argument_list|()
operator|(
specifier|const
name|NamedDecl
operator|*
name|ND
operator|,
specifier|const
name|AnalysisDataTy
operator|&
name|AD
operator|)
specifier|const
block|{
return|return
name|getBit
argument_list|(
name|AD
operator|.
name|getIdx
argument_list|(
name|ND
argument_list|)
argument_list|)
return|;
block|}
name|llvm
operator|::
name|BitVector
operator|::
name|reference
name|getDeclBit
argument_list|(
argument|unsigned i
argument_list|)
block|{
return|return
name|DeclBV
index|[
name|i
index|]
return|;
block|}
specifier|const
name|llvm
operator|::
name|BitVector
operator|::
name|reference
name|getDeclBit
argument_list|(
argument|unsigned i
argument_list|)
specifier|const
block|{
return|return
name|const_cast
operator|<
name|llvm
operator|::
name|BitVector
operator|&
operator|>
operator|(
name|DeclBV
operator|)
index|[
name|i
index|]
return|;
block|}
name|ValTy
operator|&
name|operator
operator||=
operator|(
specifier|const
name|ValTy
operator|&
name|RHS
operator|)
block|{
name|assert
argument_list|(
name|sizesEqual
argument_list|(
name|RHS
argument_list|)
argument_list|)
block|;
name|DeclBV
operator||=
name|RHS
operator|.
name|DeclBV
block|;
return|return
operator|*
name|this
return|;
block|}
name|ValTy
operator|&
name|operator
operator|&=
operator|(
specifier|const
name|ValTy
operator|&
name|RHS
operator|)
block|{
name|assert
argument_list|(
name|sizesEqual
argument_list|(
name|RHS
argument_list|)
argument_list|)
block|;
name|DeclBV
operator|&=
name|RHS
operator|.
name|DeclBV
block|;
return|return
operator|*
name|this
return|;
block|}
name|ValTy
modifier|&
name|OrDeclBits
parameter_list|(
specifier|const
name|ValTy
modifier|&
name|RHS
parameter_list|)
block|{
return|return
name|operator
operator||=
operator|(
name|RHS
operator|)
return|;
block|}
name|ValTy
modifier|&
name|AndDeclBits
parameter_list|(
specifier|const
name|ValTy
modifier|&
name|RHS
parameter_list|)
block|{
return|return
name|operator
operator|&=
operator|(
name|RHS
operator|)
return|;
block|}
name|bool
name|sizesEqual
argument_list|(
specifier|const
name|ValTy
operator|&
name|RHS
argument_list|)
decl|const
block|{
return|return
name|DeclBV
operator|.
name|size
argument_list|()
operator|==
name|RHS
operator|.
name|DeclBV
operator|.
name|size
argument_list|()
return|;
block|}
block|}
empty_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|// Some useful merge operations.
comment|//===--------------------------------------------------------------------===//
struct|struct
name|Union
block|{
name|void
name|operator
argument_list|()
operator|(
name|ValTy
operator|&
name|Dst
operator|,
name|ValTy
operator|&
name|Src
operator|)
block|{
name|Dst
operator||=
name|Src
block|; }
block|}
struct|;
struct|struct
name|Intersect
block|{
name|void
name|operator
argument_list|()
operator|(
name|ValTy
operator|&
name|Dst
operator|,
name|ValTy
operator|&
name|Src
operator|)
block|{
name|Dst
operator|&=
name|Src
block|; }
block|}
struct|;
block|}
struct|;
struct|struct
name|StmtDeclBitVector_Types
block|{
comment|//===--------------------------------------------------------------------===//
comment|// AnalysisDataTy - Whole-function meta data.
comment|//===--------------------------------------------------------------------===//
name|class
name|AnalysisDataTy
range|:
name|public
name|DeclBitVector_Types
operator|::
name|AnalysisDataTy
block|{
name|ASTContext
operator|*
name|ctx
block|;
name|CFG
operator|*
name|cfg
block|;
name|public
operator|:
name|AnalysisDataTy
argument_list|()
operator|:
name|ctx
argument_list|(
literal|0
argument_list|)
block|,
name|cfg
argument_list|(
literal|0
argument_list|)
block|{}
name|virtual
operator|~
name|AnalysisDataTy
argument_list|()
block|{}
name|void
name|setContext
argument_list|(
argument|ASTContext& c
argument_list|)
block|{
name|ctx
operator|=
operator|&
name|c
block|; }
name|ASTContext
operator|&
name|getContext
argument_list|()
block|{
name|assert
argument_list|(
name|ctx
operator|&&
literal|"ASTContext should not be NULL."
argument_list|)
block|;
return|return
operator|*
name|ctx
return|;
block|}
name|void
name|setCFG
argument_list|(
argument|CFG& c
argument_list|)
block|{
name|cfg
operator|=
operator|&
name|c
block|; }
name|CFG
operator|&
name|getCFG
argument_list|()
block|{
name|assert
argument_list|(
name|cfg
operator|&&
literal|"CFG should not be NULL."
argument_list|)
block|;
return|return
operator|*
name|cfg
return|;
block|}
name|bool
name|isTracked
argument_list|(
argument|const Stmt* S
argument_list|)
block|{
return|return
name|cfg
operator|->
name|isBlkExpr
argument_list|(
name|S
argument_list|)
return|;
block|}
name|using
name|DeclBitVector_Types
operator|::
name|AnalysisDataTy
operator|::
name|isTracked
block|;
name|unsigned
name|getIdx
argument_list|(
argument|const Stmt* S
argument_list|)
specifier|const
block|{
name|CFG
operator|::
name|BlkExprNumTy
name|I
operator|=
name|cfg
operator|->
name|getBlkExprNum
argument_list|(
name|S
argument_list|)
block|;
name|assert
argument_list|(
name|I
operator|&&
literal|"Stmtession not tracked for bitvector."
argument_list|)
block|;
return|return
name|I
return|;
block|}
name|using
name|DeclBitVector_Types
operator|::
name|AnalysisDataTy
operator|::
name|getIdx
block|;
name|unsigned
name|getNumBlkExprs
argument_list|()
specifier|const
block|{
return|return
name|cfg
operator|->
name|getNumBlkExprs
argument_list|()
return|;
block|}
expr|}
block|;
comment|//===--------------------------------------------------------------------===//
comment|// ValTy - Dataflow value.
comment|//===--------------------------------------------------------------------===//
name|class
name|ValTy
operator|:
name|public
name|DeclBitVector_Types
operator|::
name|ValTy
block|{
name|llvm
operator|::
name|BitVector
name|BlkExprBV
block|;
typedef|typedef
name|DeclBitVector_Types
operator|::
name|ValTy
name|ParentTy
expr_stmt|;
specifier|static
specifier|inline
name|ParentTy
operator|&
name|ParentRef
argument_list|(
argument|ValTy& X
argument_list|)
block|{
return|return
name|static_cast
operator|<
name|ParentTy
operator|&
operator|>
operator|(
name|X
operator|)
return|;
block|}
specifier|static
specifier|inline
specifier|const
name|ParentTy
operator|&
name|ParentRef
argument_list|(
argument|const ValTy& X
argument_list|)
block|{
return|return
name|static_cast
operator|<
specifier|const
name|ParentTy
operator|&
operator|>
operator|(
name|X
operator|)
return|;
block|}
name|public
operator|:
name|void
name|resetBlkExprValues
argument_list|(
argument|AnalysisDataTy& AD
argument_list|)
block|{
name|BlkExprBV
operator|.
name|resize
argument_list|(
name|AD
operator|.
name|getNumBlkExprs
argument_list|()
argument_list|)
block|;
name|BlkExprBV
operator|.
name|reset
argument_list|()
block|;     }
name|void
name|setBlkExprValues
argument_list|(
argument|AnalysisDataTy& AD
argument_list|)
block|{
name|BlkExprBV
operator|.
name|resize
argument_list|(
name|AD
operator|.
name|getNumBlkExprs
argument_list|()
argument_list|)
block|;
name|BlkExprBV
operator|.
name|set
argument_list|()
block|;     }
name|void
name|resetValues
argument_list|(
argument|AnalysisDataTy& AD
argument_list|)
block|{
name|resetDeclValues
argument_list|(
name|AD
argument_list|)
block|;
name|resetBlkExprValues
argument_list|(
name|AD
argument_list|)
block|;     }
name|void
name|setValues
argument_list|(
argument|AnalysisDataTy& AD
argument_list|)
block|{
name|setDeclValues
argument_list|(
name|AD
argument_list|)
block|;
name|setBlkExprValues
argument_list|(
name|AD
argument_list|)
block|;     }
name|bool
name|operator
operator|==
operator|(
specifier|const
name|ValTy
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|ParentRef
argument_list|(
operator|*
name|this
argument_list|)
operator|==
name|ParentRef
argument_list|(
name|RHS
argument_list|)
operator|&&
name|BlkExprBV
operator|==
name|RHS
operator|.
name|BlkExprBV
return|;
block|}
name|void
name|copyValues
argument_list|(
argument|const ValTy& RHS
argument_list|)
block|{
name|ParentRef
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|copyValues
argument_list|(
name|ParentRef
argument_list|(
name|RHS
argument_list|)
argument_list|)
block|;
name|BlkExprBV
operator|=
name|RHS
operator|.
name|BlkExprBV
block|;     }
name|llvm
operator|::
name|BitVector
operator|::
name|reference
name|operator
argument_list|()
operator|(
specifier|const
name|Stmt
operator|*
name|S
expr|,
specifier|const
name|AnalysisDataTy
operator|&
name|AD
operator|)
block|{
return|return
name|BlkExprBV
index|[
name|AD
operator|.
name|getIdx
argument_list|(
name|S
argument_list|)
index|]
return|;
block|}
specifier|const
name|llvm
operator|::
name|BitVector
operator|::
name|reference
name|operator
argument_list|()
operator|(
specifier|const
name|Stmt
operator|*
name|S
expr|,
specifier|const
name|AnalysisDataTy
operator|&
name|AD
operator|)
specifier|const
block|{
return|return
name|const_cast
operator|<
name|ValTy
operator|&
operator|>
call|(
modifier|*
name|this
call|)
argument_list|(
name|S
argument_list|,
name|AD
argument_list|)
return|;
block|}
name|using
name|DeclBitVector_Types
operator|::
name|ValTy
operator|::
name|operator
argument_list|()
block|;
name|llvm
operator|::
name|BitVector
operator|::
name|reference
name|getStmtBit
argument_list|(
argument|unsigned i
argument_list|)
block|{
return|return
name|BlkExprBV
index|[
name|i
index|]
return|;
block|}
specifier|const
name|llvm
operator|::
name|BitVector
operator|::
name|reference
name|getStmtBit
argument_list|(
argument|unsigned i
argument_list|)
specifier|const
block|{
return|return
name|const_cast
operator|<
name|llvm
operator|::
name|BitVector
operator|&
operator|>
operator|(
name|BlkExprBV
operator|)
index|[
name|i
index|]
return|;
block|}
name|ValTy
operator|&
name|OrBlkExprBits
argument_list|(
argument|const ValTy& RHS
argument_list|)
block|{
name|BlkExprBV
operator||=
name|RHS
operator|.
name|BlkExprBV
block|;
return|return
operator|*
name|this
return|;
block|}
name|ValTy
operator|&
name|AndBlkExprBits
argument_list|(
argument|const ValTy& RHS
argument_list|)
block|{
name|BlkExprBV
operator|&=
name|RHS
operator|.
name|BlkExprBV
block|;
return|return
operator|*
name|this
return|;
block|}
name|ValTy
operator|&
name|operator
operator||=
operator|(
specifier|const
name|ValTy
operator|&
name|RHS
operator|)
block|{
name|assert
argument_list|(
name|sizesEqual
argument_list|(
name|RHS
argument_list|)
argument_list|)
block|;
name|ParentRef
argument_list|(
operator|*
name|this
argument_list|)
operator||=
name|ParentRef
argument_list|(
name|RHS
argument_list|)
block|;
name|BlkExprBV
operator||=
name|RHS
operator|.
name|BlkExprBV
block|;
return|return
operator|*
name|this
return|;
block|}
name|ValTy
operator|&
name|operator
operator|&=
operator|(
specifier|const
name|ValTy
operator|&
name|RHS
operator|)
block|{
name|assert
argument_list|(
name|sizesEqual
argument_list|(
name|RHS
argument_list|)
argument_list|)
block|;
name|ParentRef
argument_list|(
operator|*
name|this
argument_list|)
operator|&=
name|ParentRef
argument_list|(
name|RHS
argument_list|)
block|;
name|BlkExprBV
operator|&=
name|RHS
operator|.
name|BlkExprBV
block|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|sizesEqual
argument_list|(
argument|const ValTy& RHS
argument_list|)
specifier|const
block|{
return|return
name|ParentRef
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|sizesEqual
argument_list|(
name|ParentRef
argument_list|(
name|RHS
argument_list|)
argument_list|)
operator|&&
name|BlkExprBV
operator|.
name|size
argument_list|()
operator|==
name|RHS
operator|.
name|BlkExprBV
operator|.
name|size
argument_list|()
return|;
block|}
expr|}
block|;
comment|//===--------------------------------------------------------------------===//
comment|// Some useful merge operations.
comment|//===--------------------------------------------------------------------===//
block|struct
name|Union
block|{
name|void
name|operator
argument_list|()
operator|(
name|ValTy
operator|&
name|Dst
expr|,
name|ValTy
operator|&
name|Src
operator|)
block|{
name|Dst
operator||=
name|Src
block|; }
block|}
block|;   struct
name|Intersect
block|{
name|void
name|operator
argument_list|()
operator|(
name|ValTy
operator|&
name|Dst
expr|,
name|ValTy
operator|&
name|Src
operator|)
block|{
name|Dst
operator|&=
name|Src
block|; }
block|}
block|;    }
decl_stmt|;
block|}
comment|// end namespace clang
endif|#
directive|endif
end_decl_stmt

end_unit

