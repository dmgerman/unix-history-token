begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//== GRTransferFuncs.h - Path-Sens. Transfer Functions Interface -*- C++ -*--=//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines GRTransferFuncs, which provides a base-class that
end_comment

begin_comment
comment|//  defines an interface for transfer functions used by GRExprEngine.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_ANALYSIS_GRTF
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_ANALYSIS_GRTF
end_define

begin_include
include|#
directive|include
file|"clang/Analysis/PathSensitive/SVals.h"
end_include

begin_include
include|#
directive|include
file|"clang/Analysis/PathSensitive/GRCoreEngine.h"
end_include

begin_include
include|#
directive|include
file|"clang/Analysis/PathSensitive/GRState.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|GRExprEngine
decl_stmt|;
name|class
name|BugReporter
decl_stmt|;
name|class
name|ObjCMessageExpr
decl_stmt|;
name|class
name|GRStmtNodeBuilderRef
decl_stmt|;
name|class
name|GRTransferFuncs
block|{
name|friend
name|class
name|GRExprEngine
decl_stmt|;
name|protected
label|:
name|virtual
name|SVal
name|DetermEvalBinOpNN
argument_list|(
name|GRExprEngine
operator|&
name|Eng
argument_list|,
name|BinaryOperator
operator|::
name|Opcode
name|Op
argument_list|,
name|NonLoc
name|L
argument_list|,
name|NonLoc
name|R
argument_list|,
name|QualType
name|T
argument_list|)
block|{
return|return
name|UnknownVal
argument_list|()
return|;
block|}
name|public
label|:
name|GRTransferFuncs
argument_list|()
block|{}
name|virtual
operator|~
name|GRTransferFuncs
argument_list|()
block|{}
name|virtual
name|void
name|RegisterPrinters
argument_list|(
argument|std::vector<GRState::Printer*>& Printers
argument_list|)
block|{}
name|virtual
name|void
name|RegisterChecks
argument_list|(
argument|BugReporter& BR
argument_list|)
block|{}
comment|// Casts.
name|virtual
name|SVal
name|EvalCast
argument_list|(
argument|GRExprEngine& Engine
argument_list|,
argument|NonLoc V
argument_list|,
argument|QualType CastT
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|SVal
name|EvalCast
parameter_list|(
name|GRExprEngine
modifier|&
name|Engine
parameter_list|,
name|Loc
name|V
parameter_list|,
name|QualType
name|CastT
parameter_list|)
init|=
literal|0
function_decl|;
comment|// Unary Operators.
name|virtual
name|SVal
name|EvalMinus
parameter_list|(
name|GRExprEngine
modifier|&
name|Engine
parameter_list|,
name|UnaryOperator
modifier|*
name|U
parameter_list|,
name|NonLoc
name|X
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|SVal
name|EvalComplement
parameter_list|(
name|GRExprEngine
modifier|&
name|Engine
parameter_list|,
name|NonLoc
name|X
parameter_list|)
init|=
literal|0
function_decl|;
comment|// Binary Operators.
comment|// FIXME: We're moving back towards using GREXprEngine directly.  No need
comment|// for OStates
name|virtual
name|void
name|EvalBinOpNN
argument_list|(
name|GRStateSet
operator|&
name|OStates
argument_list|,
name|GRExprEngine
operator|&
name|Eng
argument_list|,
specifier|const
name|GRState
operator|*
name|St
argument_list|,
name|Expr
operator|*
name|Ex
argument_list|,
name|BinaryOperator
operator|::
name|Opcode
name|Op
argument_list|,
name|NonLoc
name|L
argument_list|,
name|NonLoc
name|R
argument_list|,
name|QualType
name|T
argument_list|)
decl_stmt|;
name|virtual
name|SVal
name|EvalBinOp
argument_list|(
name|GRExprEngine
operator|&
name|Engine
argument_list|,
name|BinaryOperator
operator|::
name|Opcode
name|Op
argument_list|,
name|Loc
name|L
argument_list|,
name|Loc
name|R
argument_list|)
init|=
literal|0
decl_stmt|;
comment|// Pointer arithmetic.
name|virtual
name|SVal
name|EvalBinOp
argument_list|(
name|GRExprEngine
operator|&
name|Engine
argument_list|,
specifier|const
name|GRState
operator|*
name|state
argument_list|,
name|BinaryOperator
operator|::
name|Opcode
name|Op
argument_list|,
name|Loc
name|L
argument_list|,
name|NonLoc
name|R
argument_list|)
init|=
literal|0
decl_stmt|;
comment|// Calls.
name|virtual
name|void
name|EvalCall
argument_list|(
name|ExplodedNodeSet
operator|<
name|GRState
operator|>
operator|&
name|Dst
argument_list|,
name|GRExprEngine
operator|&
name|Engine
argument_list|,
name|GRStmtNodeBuilder
operator|<
name|GRState
operator|>
operator|&
name|Builder
argument_list|,
name|CallExpr
operator|*
name|CE
argument_list|,
name|SVal
name|L
argument_list|,
name|ExplodedNode
operator|<
name|GRState
operator|>
operator|*
name|Pred
argument_list|)
block|{}
name|virtual
name|void
name|EvalObjCMessageExpr
argument_list|(
name|ExplodedNodeSet
operator|<
name|GRState
operator|>
operator|&
name|Dst
argument_list|,
name|GRExprEngine
operator|&
name|Engine
argument_list|,
name|GRStmtNodeBuilder
operator|<
name|GRState
operator|>
operator|&
name|Builder
argument_list|,
name|ObjCMessageExpr
operator|*
name|ME
argument_list|,
name|ExplodedNode
operator|<
name|GRState
operator|>
operator|*
name|Pred
argument_list|)
block|{}
comment|// Stores.
name|virtual
name|void
name|EvalBind
parameter_list|(
name|GRStmtNodeBuilderRef
modifier|&
name|B
parameter_list|,
name|SVal
name|location
parameter_list|,
name|SVal
name|val
parameter_list|)
block|{}
comment|// End-of-path and dead symbol notification.
name|virtual
name|void
name|EvalEndPath
argument_list|(
name|GRExprEngine
operator|&
name|Engine
argument_list|,
name|GREndPathNodeBuilder
operator|<
name|GRState
operator|>
operator|&
name|Builder
argument_list|)
block|{}
name|virtual
name|void
name|EvalDeadSymbols
argument_list|(
name|ExplodedNodeSet
operator|<
name|GRState
operator|>
operator|&
name|Dst
argument_list|,
name|GRExprEngine
operator|&
name|Engine
argument_list|,
name|GRStmtNodeBuilder
operator|<
name|GRState
operator|>
operator|&
name|Builder
argument_list|,
name|ExplodedNode
operator|<
name|GRState
operator|>
operator|*
name|Pred
argument_list|,
name|Stmt
operator|*
name|S
argument_list|,
specifier|const
name|GRState
operator|*
name|state
argument_list|,
name|SymbolReaper
operator|&
name|SymReaper
argument_list|)
block|{}
comment|// Return statements.
name|virtual
name|void
name|EvalReturn
argument_list|(
name|ExplodedNodeSet
operator|<
name|GRState
operator|>
operator|&
name|Dst
argument_list|,
name|GRExprEngine
operator|&
name|Engine
argument_list|,
name|GRStmtNodeBuilder
operator|<
name|GRState
operator|>
operator|&
name|Builder
argument_list|,
name|ReturnStmt
operator|*
name|S
argument_list|,
name|ExplodedNode
operator|<
name|GRState
operator|>
operator|*
name|Pred
argument_list|)
block|{}
comment|// Assumptions.
name|virtual
specifier|const
name|GRState
modifier|*
name|EvalAssume
parameter_list|(
name|GRStateManager
modifier|&
name|VMgr
parameter_list|,
specifier|const
name|GRState
modifier|*
name|St
parameter_list|,
name|SVal
name|Cond
parameter_list|,
name|bool
name|Assumption
parameter_list|,
name|bool
modifier|&
name|isFeasible
parameter_list|)
block|{
return|return
name|St
return|;
block|}
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end clang namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

