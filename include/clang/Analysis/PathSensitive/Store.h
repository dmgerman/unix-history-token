begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//== Store.h - Interface for maps from Locations to Values ------*- C++ -*--==//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defined the types Store and StoreManager.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_ANALYSIS_STORE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_ANALYSIS_STORE_H
end_define

begin_include
include|#
directive|include
file|"clang/Analysis/PathSensitive/SVals.h"
end_include

begin_include
include|#
directive|include
file|"clang/Analysis/PathSensitive/MemRegion.h"
end_include

begin_include
include|#
directive|include
file|"clang/Analysis/PathSensitive/ValueManager.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallPtrSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|<iosfwd>
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
typedef|typedef
specifier|const
name|void
modifier|*
name|Store
typedef|;
name|class
name|GRState
decl_stmt|;
name|class
name|GRStateManager
decl_stmt|;
name|class
name|Stmt
decl_stmt|;
name|class
name|Expr
decl_stmt|;
name|class
name|ObjCIvarDecl
decl_stmt|;
name|class
name|SubRegionMap
decl_stmt|;
name|class
name|StoreManager
block|{
name|protected
label|:
name|ValueManager
modifier|&
name|ValMgr
decl_stmt|;
name|GRStateManager
modifier|&
name|StateMgr
decl_stmt|;
comment|/// MRMgr - Manages region objects associated with this StoreManager.
name|MemRegionManager
modifier|&
name|MRMgr
decl_stmt|;
name|StoreManager
argument_list|(
name|GRStateManager
operator|&
name|stateMgr
argument_list|)
expr_stmt|;
name|protected
label|:
name|virtual
specifier|const
name|GRState
modifier|*
name|AddRegionView
parameter_list|(
specifier|const
name|GRState
modifier|*
name|St
parameter_list|,
specifier|const
name|MemRegion
modifier|*
name|View
parameter_list|,
specifier|const
name|MemRegion
modifier|*
name|Base
parameter_list|)
block|{
return|return
name|St
return|;
block|}
name|public
label|:
name|virtual
operator|~
name|StoreManager
argument_list|()
block|{}
comment|/// Return the value bound to specified location in a given state.
comment|/// \param[in] state The analysis state.
comment|/// \param[in] loc The symbolic memory location.
comment|/// \param[in] T An optional type that provides a hint indicating the
comment|///   expected type of the returned value.  This is used if the value is
comment|///   lazily computed.
comment|/// \return The value bound to the location \c loc.
name|virtual
name|SVal
name|Retrieve
argument_list|(
argument|const GRState* state
argument_list|,
argument|Loc loc
argument_list|,
argument|QualType T = QualType()
argument_list|)
operator|=
literal|0
expr_stmt|;
comment|/// Return a state with the specified value bound to the given location.
comment|/// \param[in] state The analysis state.
comment|/// \param[in] loc The symbolic memory location.
comment|/// \param[in] val The value to bind to location \c loc.
comment|/// \return A pointer to a GRState object that contains the same bindings as
comment|///   \c state with the addition of having the value specified by \c val bound
comment|///   to the location given for \c loc.
name|virtual
specifier|const
name|GRState
modifier|*
name|Bind
parameter_list|(
specifier|const
name|GRState
modifier|*
name|state
parameter_list|,
name|Loc
name|loc
parameter_list|,
name|SVal
name|val
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|Store
name|Remove
parameter_list|(
name|Store
name|St
parameter_list|,
name|Loc
name|L
parameter_list|)
init|=
literal|0
function_decl|;
comment|/// BindCompoundLiteral - Return the store that has the bindings currently
comment|///  in 'store' plus the bindings for the CompoundLiteral.  'R' is the region
comment|///  for the compound literal and 'BegInit' and 'EndInit' represent an
comment|///  array of initializer values.
name|virtual
specifier|const
name|GRState
modifier|*
name|BindCompoundLiteral
parameter_list|(
specifier|const
name|GRState
modifier|*
name|St
parameter_list|,
specifier|const
name|CompoundLiteralExpr
modifier|*
name|CL
parameter_list|,
name|SVal
name|V
parameter_list|)
init|=
literal|0
function_decl|;
comment|/// getInitialStore - Returns the initial "empty" store representing the
comment|///  value bindings upon entry to an analyzed function.
name|virtual
name|Store
name|getInitialStore
parameter_list|()
init|=
literal|0
function_decl|;
comment|/// getRegionManager - Returns the internal RegionManager object that is
comment|///  used to query and manipulate MemRegion objects.
name|MemRegionManager
modifier|&
name|getRegionManager
parameter_list|()
block|{
return|return
name|MRMgr
return|;
block|}
comment|/// getSubRegionMap - Returns an opaque map object that clients can query
comment|///  to get the subregions of a given MemRegion object.  It is the
comment|//   caller's responsibility to 'delete' the returned map.
name|virtual
name|SubRegionMap
modifier|*
name|getSubRegionMap
parameter_list|(
specifier|const
name|GRState
modifier|*
name|state
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|SVal
name|getLValueVar
parameter_list|(
specifier|const
name|GRState
modifier|*
name|St
parameter_list|,
specifier|const
name|VarDecl
modifier|*
name|VD
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|SVal
name|getLValueString
parameter_list|(
specifier|const
name|GRState
modifier|*
name|St
parameter_list|,
specifier|const
name|StringLiteral
modifier|*
name|S
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|SVal
name|getLValueCompoundLiteral
parameter_list|(
specifier|const
name|GRState
modifier|*
name|St
parameter_list|,
specifier|const
name|CompoundLiteralExpr
modifier|*
name|CL
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|SVal
name|getLValueIvar
parameter_list|(
specifier|const
name|GRState
modifier|*
name|St
parameter_list|,
specifier|const
name|ObjCIvarDecl
modifier|*
name|D
parameter_list|,
name|SVal
name|Base
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|SVal
name|getLValueField
parameter_list|(
specifier|const
name|GRState
modifier|*
name|St
parameter_list|,
name|SVal
name|Base
parameter_list|,
specifier|const
name|FieldDecl
modifier|*
name|D
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|SVal
name|getLValueElement
parameter_list|(
specifier|const
name|GRState
modifier|*
name|St
parameter_list|,
name|QualType
name|elementType
parameter_list|,
name|SVal
name|Base
parameter_list|,
name|SVal
name|Offset
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|SVal
name|getSizeInElements
parameter_list|(
specifier|const
name|GRState
modifier|*
name|St
parameter_list|,
specifier|const
name|MemRegion
modifier|*
name|R
parameter_list|)
block|{
return|return
name|UnknownVal
argument_list|()
return|;
block|}
comment|/// ArrayToPointer - Used by GRExprEngine::VistCast to handle implicit
comment|///  conversions between arrays and pointers.
name|virtual
name|SVal
name|ArrayToPointer
parameter_list|(
name|Loc
name|Array
parameter_list|)
init|=
literal|0
function_decl|;
name|class
name|CastResult
block|{
specifier|const
name|GRState
modifier|*
name|State
decl_stmt|;
specifier|const
name|MemRegion
modifier|*
name|R
decl_stmt|;
name|public
label|:
specifier|const
name|GRState
operator|*
name|getState
argument_list|()
specifier|const
block|{
return|return
name|State
return|;
block|}
specifier|const
name|MemRegion
operator|*
name|getRegion
argument_list|()
specifier|const
block|{
return|return
name|R
return|;
block|}
name|CastResult
argument_list|(
specifier|const
name|GRState
operator|*
name|s
argument_list|,
specifier|const
name|MemRegion
operator|*
name|r
operator|=
literal|0
argument_list|)
operator|:
name|State
argument_list|(
name|s
argument_list|)
operator|,
name|R
argument_list|(
argument|r
argument_list|)
block|{}
block|}
empty_stmt|;
comment|/// CastRegion - Used by GRExprEngine::VisitCast to handle casts from
comment|///  a MemRegion* to a specific location type.  'R' is the region being
comment|///  casted and 'CastToTy' the result type of the cast.
name|virtual
name|CastResult
name|CastRegion
parameter_list|(
specifier|const
name|GRState
modifier|*
name|state
parameter_list|,
specifier|const
name|MemRegion
modifier|*
name|R
parameter_list|,
name|QualType
name|CastToTy
parameter_list|)
function_decl|;
comment|/// EvalBinOp - Perform pointer arithmetic.
name|virtual
name|SVal
name|EvalBinOp
argument_list|(
specifier|const
name|GRState
operator|*
name|state
argument_list|,
name|BinaryOperator
operator|::
name|Opcode
name|Op
argument_list|,
name|Loc
name|L
argument_list|,
name|NonLoc
name|R
argument_list|)
block|{
return|return
name|UnknownVal
argument_list|()
return|;
block|}
comment|/// getSelfRegion - Returns the region for the 'self' (Objective-C) or
comment|///  'this' object (C++).  When used when analyzing a normal function this
comment|///  method returns NULL.
name|virtual
specifier|const
name|MemRegion
modifier|*
name|getSelfRegion
parameter_list|(
name|Store
name|store
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|Store
name|RemoveDeadBindings
argument_list|(
specifier|const
name|GRState
operator|*
name|state
argument_list|,
name|Stmt
operator|*
name|Loc
argument_list|,
name|SymbolReaper
operator|&
name|SymReaper
argument_list|,
name|llvm
operator|::
name|SmallVectorImpl
operator|<
specifier|const
name|MemRegion
operator|*
operator|>
operator|&
name|RegionRoots
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
specifier|const
name|GRState
modifier|*
name|BindDecl
parameter_list|(
specifier|const
name|GRState
modifier|*
name|St
parameter_list|,
specifier|const
name|VarDecl
modifier|*
name|VD
parameter_list|,
name|SVal
name|InitVal
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
specifier|const
name|GRState
modifier|*
name|BindDeclWithNoInit
parameter_list|(
specifier|const
name|GRState
modifier|*
name|St
parameter_list|,
specifier|const
name|VarDecl
modifier|*
name|VD
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
specifier|const
name|GRState
modifier|*
name|setExtent
parameter_list|(
specifier|const
name|GRState
modifier|*
name|St
parameter_list|,
specifier|const
name|MemRegion
modifier|*
name|R
parameter_list|,
name|SVal
name|Extent
parameter_list|)
block|{
return|return
name|St
return|;
block|}
name|virtual
specifier|const
name|GRState
modifier|*
name|setDefaultValue
parameter_list|(
specifier|const
name|GRState
modifier|*
name|St
parameter_list|,
specifier|const
name|MemRegion
modifier|*
name|R
parameter_list|,
name|SVal
name|V
parameter_list|)
block|{
return|return
name|St
return|;
block|}
name|virtual
name|void
name|print
argument_list|(
name|Store
name|store
argument_list|,
name|std
operator|::
name|ostream
operator|&
name|Out
argument_list|,
specifier|const
name|char
operator|*
name|nl
argument_list|,
specifier|const
name|char
operator|*
name|sep
argument_list|)
init|=
literal|0
decl_stmt|;
name|class
name|BindingsHandler
block|{
name|public
label|:
name|virtual
operator|~
name|BindingsHandler
argument_list|()
expr_stmt|;
name|virtual
name|bool
name|HandleBinding
parameter_list|(
name|StoreManager
modifier|&
name|SMgr
parameter_list|,
name|Store
name|store
parameter_list|,
specifier|const
name|MemRegion
modifier|*
name|R
parameter_list|,
name|SVal
name|val
parameter_list|)
init|=
literal|0
function_decl|;
block|}
empty_stmt|;
comment|/// iterBindings - Iterate over the bindings in the Store.
name|virtual
name|void
name|iterBindings
parameter_list|(
name|Store
name|store
parameter_list|,
name|BindingsHandler
modifier|&
name|f
parameter_list|)
init|=
literal|0
function_decl|;
block|}
empty_stmt|;
comment|/// SubRegionMap - An abstract interface that represents a queryable map
comment|///  between MemRegion objects and their subregions.
name|class
name|SubRegionMap
block|{
name|public
label|:
name|virtual
operator|~
name|SubRegionMap
argument_list|()
block|{}
name|class
name|Visitor
block|{
name|public
operator|:
name|virtual
operator|~
name|Visitor
argument_list|()
block|{}
block|;
name|virtual
name|bool
name|Visit
argument_list|(
specifier|const
name|MemRegion
operator|*
name|Parent
argument_list|,
specifier|const
name|MemRegion
operator|*
name|SubRegion
argument_list|)
operator|=
literal|0
block|;   }
expr_stmt|;
name|virtual
name|bool
name|iterSubRegions
argument_list|(
specifier|const
name|MemRegion
operator|*
name|R
argument_list|,
name|Visitor
operator|&
name|V
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
block|}
empty_stmt|;
name|StoreManager
modifier|*
name|CreateBasicStoreManager
parameter_list|(
name|GRStateManager
modifier|&
name|StMgr
parameter_list|)
function_decl|;
name|StoreManager
modifier|*
name|CreateRegionStoreManager
parameter_list|(
name|GRStateManager
modifier|&
name|StMgr
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_comment
comment|// end clang namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

