begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- GRExprEngine.h - Path-Sensitive Expression-Level Dataflow ---*- C++ -*-=
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines a meta-engine for path-sensitive dataflow analysis that
end_comment

begin_comment
comment|//  is built on GRCoreEngine, but provides the boilerplate to execute transfer
end_comment

begin_comment
comment|//  functions and build the ExplodedGraph at the expression level.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_ANALYSIS_GREXPRENGINE
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_ANALYSIS_GREXPRENGINE
end_define

begin_include
include|#
directive|include
file|"clang/Analysis/PathSensitive/AnalysisManager.h"
end_include

begin_include
include|#
directive|include
file|"clang/Analysis/PathSensitive/GRSubEngine.h"
end_include

begin_include
include|#
directive|include
file|"clang/Analysis/PathSensitive/GRCoreEngine.h"
end_include

begin_include
include|#
directive|include
file|"clang/Analysis/PathSensitive/GRState.h"
end_include

begin_include
include|#
directive|include
file|"clang/Analysis/PathSensitive/GRSimpleAPICheck.h"
end_include

begin_include
include|#
directive|include
file|"clang/Analysis/PathSensitive/GRTransferFuncs.h"
end_include

begin_include
include|#
directive|include
file|"clang/Analysis/PathSensitive/BugReporter.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/Type.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/ExprObjC.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|PathDiagnosticClient
decl_stmt|;
name|class
name|Diagnostic
decl_stmt|;
name|class
name|ObjCForCollectionStmt
decl_stmt|;
name|class
name|Checker
decl_stmt|;
name|class
name|GRExprEngine
range|:
name|public
name|GRSubEngine
block|{
name|AnalysisManager
operator|&
name|AMgr
block|;
name|GRCoreEngine
name|CoreEngine
block|;
comment|/// G - the simulation graph.
name|ExplodedGraph
operator|&
name|G
block|;
comment|/// Builder - The current GRStmtNodeBuilder which is used when building the
comment|///  nodes for a given statement.
name|GRStmtNodeBuilder
operator|*
name|Builder
block|;
comment|/// StateMgr - Object that manages the data for all created states.
name|GRStateManager
name|StateMgr
block|;
comment|/// SymMgr - Object that manages the symbol information.
name|SymbolManager
operator|&
name|SymMgr
block|;
comment|/// ValMgr - Object that manages/creates SVals.
name|ValueManager
operator|&
name|ValMgr
block|;
comment|/// SVator - SValuator object that creates SVals from expressions.
name|SValuator
operator|&
name|SVator
block|;
comment|/// EntryNode - The immediate predecessor node.
name|ExplodedNode
operator|*
name|EntryNode
block|;
comment|/// CleanedState - The state for EntryNode "cleaned" of all dead
comment|///  variables and symbols (as determined by a liveness analysis).
specifier|const
name|GRState
operator|*
name|CleanedState
block|;
comment|/// CurrentStmt - The current block-level statement.
name|Stmt
operator|*
name|CurrentStmt
block|;
comment|// Obj-C Class Identifiers.
name|IdentifierInfo
operator|*
name|NSExceptionII
block|;
comment|// Obj-C Selectors.
name|Selector
operator|*
name|NSExceptionInstanceRaiseSelectors
block|;
name|Selector
name|RaiseSel
block|;
name|llvm
operator|::
name|OwningPtr
operator|<
name|GRSimpleAPICheck
operator|>
name|BatchAuditor
block|;
typedef|typedef
name|llvm
operator|::
name|DenseMap
operator|<
name|void
operator|*
operator|,
name|unsigned
operator|>
name|CheckerMap
expr_stmt|;
name|CheckerMap
name|CheckerM
decl_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|pair
operator|<
name|void
operator|*
operator|,
name|Checker
operator|*
operator|>
expr|>
name|CheckersOrdered
expr_stmt|;
name|CheckersOrdered
name|Checkers
decl_stmt|;
comment|/// BR - The BugReporter associated with this engine.  It is important that
comment|//   this object be placed at the very end of member variables so that its
comment|//   destructor is called before the rest of the GRExprEngine is destroyed.
name|GRBugReporter
name|BR
decl_stmt|;
name|public
label|:
typedef|typedef
name|llvm
operator|::
name|SmallPtrSet
operator|<
name|ExplodedNode
operator|*
operator|,
literal|2
operator|>
name|ErrorNodes
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|DenseMap
operator|<
name|ExplodedNode
operator|*
operator|,
name|Expr
operator|*
operator|>
name|UndefArgsTy
expr_stmt|;
comment|/// NilReceiverStructRetExplicit - Nodes in the ExplodedGraph that resulted
comment|///  from [x ...] with 'x' definitely being nil and the result was a 'struct'
comment|//  (an undefined value).
name|ErrorNodes
name|NilReceiverStructRetExplicit
decl_stmt|;
comment|/// NilReceiverStructRetImplicit - Nodes in the ExplodedGraph that resulted
comment|///  from [x ...] with 'x' possibly being nil and the result was a 'struct'
comment|//  (an undefined value).
name|ErrorNodes
name|NilReceiverStructRetImplicit
decl_stmt|;
comment|/// NilReceiverLargerThanVoidPtrRetExplicit - Nodes in the ExplodedGraph that
comment|/// resulted from [x ...] with 'x' definitely being nil and the result's size
comment|// was larger than sizeof(void *) (an undefined value).
name|ErrorNodes
name|NilReceiverLargerThanVoidPtrRetExplicit
decl_stmt|;
comment|/// NilReceiverLargerThanVoidPtrRetImplicit - Nodes in the ExplodedGraph that
comment|/// resulted from [x ...] with 'x' possibly being nil and the result's size
comment|// was larger than sizeof(void *) (an undefined value).
name|ErrorNodes
name|NilReceiverLargerThanVoidPtrRetImplicit
decl_stmt|;
comment|/// RetsStackAddr - Nodes in the ExplodedGraph that result from returning
comment|///  the address of a stack variable.
name|ErrorNodes
name|RetsStackAddr
decl_stmt|;
comment|/// RetsUndef - Nodes in the ExplodedGraph that result from returning
comment|///  an undefined value.
name|ErrorNodes
name|RetsUndef
decl_stmt|;
comment|/// UndefBranches - Nodes in the ExplodedGraph that result from
comment|///  taking a branch based on an undefined value.
name|ErrorNodes
name|UndefBranches
decl_stmt|;
comment|/// UndefStores - Sinks in the ExplodedGraph that result from
comment|///  making a store to an undefined lvalue.
name|ErrorNodes
name|UndefStores
decl_stmt|;
comment|/// NoReturnCalls - Sinks in the ExplodedGraph that result from
comment|//  calling a function with the attribute "noreturn".
name|ErrorNodes
name|NoReturnCalls
decl_stmt|;
comment|/// ImplicitBadSizedVLA - Nodes in the ExplodedGraph that result from
comment|///  constructing a zero-sized VLA where the size may be zero.
name|ErrorNodes
name|ImplicitBadSizedVLA
decl_stmt|;
comment|/// ExplicitBadSizedVLA - Nodes in the ExplodedGraph that result from
comment|///  constructing a zero-sized VLA where the size must be zero.
name|ErrorNodes
name|ExplicitBadSizedVLA
decl_stmt|;
comment|/// UndefResults - Nodes in the ExplodedGraph where the operands are defined
comment|///  by the result is not.  Excludes divide-by-zero errors.
name|ErrorNodes
name|UndefResults
decl_stmt|;
comment|/// BadCalls - Nodes in the ExplodedGraph resulting from calls to function
comment|///  pointers that are NULL (or other constants) or Undefined.
name|ErrorNodes
name|BadCalls
decl_stmt|;
comment|/// UndefReceiver - Nodes in the ExplodedGraph resulting from message
comment|///  ObjC message expressions where the receiver is undefined (uninitialized).
name|ErrorNodes
name|UndefReceivers
decl_stmt|;
comment|/// MsgExprUndefArgs - Nodes in the ExplodedGraph resulting from
comment|///   message expressions where a pass-by-value argument has an undefined
comment|///  value.
name|UndefArgsTy
name|MsgExprUndefArgs
decl_stmt|;
comment|/// OutOfBoundMemAccesses - Nodes in the ExplodedGraph resulting from
comment|/// out-of-bound memory accesses where the index MAY be out-of-bound.
name|ErrorNodes
name|ImplicitOOBMemAccesses
decl_stmt|;
comment|/// OutOfBoundMemAccesses - Nodes in the ExplodedGraph resulting from
comment|/// out-of-bound memory accesses where the index MUST be out-of-bound.
name|ErrorNodes
name|ExplicitOOBMemAccesses
decl_stmt|;
name|public
label|:
name|GRExprEngine
argument_list|(
name|AnalysisManager
operator|&
name|mgr
argument_list|)
expr_stmt|;
operator|~
name|GRExprEngine
argument_list|()
expr_stmt|;
name|void
name|ExecuteWorkList
parameter_list|(
specifier|const
name|LocationContext
modifier|*
name|L
parameter_list|,
name|unsigned
name|Steps
init|=
literal|150000
parameter_list|)
block|{
name|CoreEngine
operator|.
name|ExecuteWorkList
argument_list|(
name|L
argument_list|,
name|Steps
argument_list|)
expr_stmt|;
block|}
comment|/// getContext - Return the ASTContext associated with this analysis.
name|ASTContext
operator|&
name|getContext
argument_list|()
specifier|const
block|{
return|return
name|G
operator|.
name|getContext
argument_list|()
return|;
block|}
name|AnalysisManager
operator|&
name|getAnalysisManager
argument_list|()
specifier|const
block|{
return|return
name|AMgr
return|;
block|}
name|SValuator
modifier|&
name|getSValuator
parameter_list|()
block|{
return|return
name|SVator
return|;
block|}
name|GRTransferFuncs
modifier|&
name|getTF
parameter_list|()
block|{
return|return
operator|*
name|StateMgr
operator|.
name|TF
return|;
block|}
name|BugReporter
modifier|&
name|getBugReporter
parameter_list|()
block|{
return|return
name|BR
return|;
block|}
name|GRStmtNodeBuilder
modifier|&
name|getBuilder
parameter_list|()
block|{
name|assert
argument_list|(
name|Builder
argument_list|)
expr_stmt|;
return|return
operator|*
name|Builder
return|;
block|}
comment|/// setTransferFunctions
name|void
name|setTransferFunctions
parameter_list|(
name|GRTransferFuncs
modifier|*
name|tf
parameter_list|)
function_decl|;
name|void
name|setTransferFunctions
parameter_list|(
name|GRTransferFuncs
modifier|&
name|tf
parameter_list|)
block|{
name|setTransferFunctions
argument_list|(
operator|&
name|tf
argument_list|)
expr_stmt|;
block|}
comment|/// ViewGraph - Visualize the ExplodedGraph created by executing the
comment|///  simulation.
name|void
name|ViewGraph
parameter_list|(
name|bool
name|trim
init|=
name|false
parameter_list|)
function_decl|;
name|void
name|ViewGraph
parameter_list|(
name|ExplodedNode
modifier|*
modifier|*
name|Beg
parameter_list|,
name|ExplodedNode
modifier|*
modifier|*
name|End
parameter_list|)
function_decl|;
comment|/// getInitialState - Return the initial state used for the root vertex
comment|///  in the ExplodedGraph.
specifier|const
name|GRState
modifier|*
name|getInitialState
parameter_list|(
specifier|const
name|LocationContext
modifier|*
name|InitLoc
parameter_list|)
function_decl|;
name|ExplodedGraph
modifier|&
name|getGraph
parameter_list|()
block|{
return|return
name|G
return|;
block|}
specifier|const
name|ExplodedGraph
operator|&
name|getGraph
argument_list|()
specifier|const
block|{
return|return
name|G
return|;
block|}
name|void
name|RegisterInternalChecks
parameter_list|()
function_decl|;
name|template
operator|<
name|typename
name|CHECKER
operator|>
name|void
name|registerCheck
argument_list|(
argument|CHECKER *check
argument_list|)
block|{
name|unsigned
name|entry
operator|=
name|Checkers
operator|.
name|size
argument_list|()
block|;
name|void
operator|*
name|tag
operator|=
name|CHECKER
operator|::
name|getTag
argument_list|()
block|;
name|Checkers
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|tag
argument_list|,
name|check
argument_list|)
argument_list|)
block|;
name|CheckerM
index|[
name|tag
index|]
operator|=
name|entry
block|;   }
name|Checker
operator|*
name|lookupChecker
argument_list|(
argument|void *tag
argument_list|)
specifier|const
expr_stmt|;
name|template
operator|<
name|typename
name|CHECKER
operator|>
name|CHECKER
operator|*
name|getChecker
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|CHECKER
operator|*
operator|>
operator|(
name|lookupChecker
argument_list|(
name|CHECKER
operator|::
name|getTag
argument_list|()
argument_list|)
operator|)
return|;
block|}
name|bool
name|isRetStackAddr
argument_list|(
specifier|const
name|ExplodedNode
operator|*
name|N
argument_list|)
decl|const
block|{
return|return
name|N
operator|->
name|isSink
argument_list|()
operator|&&
name|RetsStackAddr
operator|.
name|count
argument_list|(
name|const_cast
operator|<
name|ExplodedNode
operator|*
operator|>
operator|(
name|N
operator|)
argument_list|)
operator|!=
literal|0
return|;
block|}
name|bool
name|isUndefControlFlow
argument_list|(
specifier|const
name|ExplodedNode
operator|*
name|N
argument_list|)
decl|const
block|{
return|return
name|N
operator|->
name|isSink
argument_list|()
operator|&&
name|UndefBranches
operator|.
name|count
argument_list|(
name|const_cast
operator|<
name|ExplodedNode
operator|*
operator|>
operator|(
name|N
operator|)
argument_list|)
operator|!=
literal|0
return|;
block|}
name|bool
name|isUndefStore
argument_list|(
specifier|const
name|ExplodedNode
operator|*
name|N
argument_list|)
decl|const
block|{
return|return
name|N
operator|->
name|isSink
argument_list|()
operator|&&
name|UndefStores
operator|.
name|count
argument_list|(
name|const_cast
operator|<
name|ExplodedNode
operator|*
operator|>
operator|(
name|N
operator|)
argument_list|)
operator|!=
literal|0
return|;
block|}
name|bool
name|isImplicitNullDeref
argument_list|(
specifier|const
name|ExplodedNode
operator|*
name|N
argument_list|)
decl|const
block|{
return|return
name|false
return|;
block|}
name|bool
name|isExplicitNullDeref
argument_list|(
specifier|const
name|ExplodedNode
operator|*
name|N
argument_list|)
decl|const
block|{
return|return
name|false
return|;
block|}
name|bool
name|isUndefDeref
argument_list|(
specifier|const
name|ExplodedNode
operator|*
name|N
argument_list|)
decl|const
block|{
return|return
name|false
return|;
block|}
name|bool
name|isNoReturnCall
argument_list|(
specifier|const
name|ExplodedNode
operator|*
name|N
argument_list|)
decl|const
block|{
return|return
name|N
operator|->
name|isSink
argument_list|()
operator|&&
name|NoReturnCalls
operator|.
name|count
argument_list|(
name|const_cast
operator|<
name|ExplodedNode
operator|*
operator|>
operator|(
name|N
operator|)
argument_list|)
operator|!=
literal|0
return|;
block|}
name|bool
name|isUndefResult
argument_list|(
specifier|const
name|ExplodedNode
operator|*
name|N
argument_list|)
decl|const
block|{
return|return
name|N
operator|->
name|isSink
argument_list|()
operator|&&
name|UndefResults
operator|.
name|count
argument_list|(
name|const_cast
operator|<
name|ExplodedNode
operator|*
operator|>
operator|(
name|N
operator|)
argument_list|)
operator|!=
literal|0
return|;
block|}
name|bool
name|isBadCall
argument_list|(
specifier|const
name|ExplodedNode
operator|*
name|N
argument_list|)
decl|const
block|{
return|return
name|false
return|;
block|}
name|bool
name|isUndefArg
argument_list|(
specifier|const
name|ExplodedNode
operator|*
name|N
argument_list|)
decl|const
block|{
return|return
name|false
return|;
block|}
name|bool
name|isUndefReceiver
argument_list|(
specifier|const
name|ExplodedNode
operator|*
name|N
argument_list|)
decl|const
block|{
return|return
name|N
operator|->
name|isSink
argument_list|()
operator|&&
name|UndefReceivers
operator|.
name|count
argument_list|(
name|const_cast
operator|<
name|ExplodedNode
operator|*
operator|>
operator|(
name|N
operator|)
argument_list|)
operator|!=
literal|0
return|;
block|}
typedef|typedef
name|ErrorNodes
operator|::
name|iterator
name|ret_stackaddr_iterator
expr_stmt|;
name|ret_stackaddr_iterator
name|ret_stackaddr_begin
parameter_list|()
block|{
return|return
name|RetsStackAddr
operator|.
name|begin
argument_list|()
return|;
block|}
name|ret_stackaddr_iterator
name|ret_stackaddr_end
parameter_list|()
block|{
return|return
name|RetsStackAddr
operator|.
name|end
argument_list|()
return|;
block|}
typedef|typedef
name|ErrorNodes
operator|::
name|iterator
name|ret_undef_iterator
expr_stmt|;
name|ret_undef_iterator
name|ret_undef_begin
parameter_list|()
block|{
return|return
name|RetsUndef
operator|.
name|begin
argument_list|()
return|;
block|}
name|ret_undef_iterator
name|ret_undef_end
parameter_list|()
block|{
return|return
name|RetsUndef
operator|.
name|end
argument_list|()
return|;
block|}
typedef|typedef
name|ErrorNodes
operator|::
name|iterator
name|undef_branch_iterator
expr_stmt|;
name|undef_branch_iterator
name|undef_branches_begin
parameter_list|()
block|{
return|return
name|UndefBranches
operator|.
name|begin
argument_list|()
return|;
block|}
name|undef_branch_iterator
name|undef_branches_end
parameter_list|()
block|{
return|return
name|UndefBranches
operator|.
name|end
argument_list|()
return|;
block|}
typedef|typedef
name|ErrorNodes
operator|::
name|iterator
name|nil_receiver_struct_ret_iterator
expr_stmt|;
name|nil_receiver_struct_ret_iterator
name|nil_receiver_struct_ret_begin
parameter_list|()
block|{
return|return
name|NilReceiverStructRetExplicit
operator|.
name|begin
argument_list|()
return|;
block|}
name|nil_receiver_struct_ret_iterator
name|nil_receiver_struct_ret_end
parameter_list|()
block|{
return|return
name|NilReceiverStructRetExplicit
operator|.
name|end
argument_list|()
return|;
block|}
typedef|typedef
name|ErrorNodes
operator|::
name|iterator
name|nil_receiver_larger_than_voidptr_ret_iterator
expr_stmt|;
name|nil_receiver_larger_than_voidptr_ret_iterator
name|nil_receiver_larger_than_voidptr_ret_begin
parameter_list|()
block|{
return|return
name|NilReceiverLargerThanVoidPtrRetExplicit
operator|.
name|begin
argument_list|()
return|;
block|}
name|nil_receiver_larger_than_voidptr_ret_iterator
name|nil_receiver_larger_than_voidptr_ret_end
parameter_list|()
block|{
return|return
name|NilReceiverLargerThanVoidPtrRetExplicit
operator|.
name|end
argument_list|()
return|;
block|}
typedef|typedef
name|ErrorNodes
operator|::
name|iterator
name|undef_result_iterator
expr_stmt|;
name|undef_result_iterator
name|undef_results_begin
parameter_list|()
block|{
return|return
name|UndefResults
operator|.
name|begin
argument_list|()
return|;
block|}
name|undef_result_iterator
name|undef_results_end
parameter_list|()
block|{
return|return
name|UndefResults
operator|.
name|end
argument_list|()
return|;
block|}
typedef|typedef
name|ErrorNodes
operator|::
name|iterator
name|bad_calls_iterator
expr_stmt|;
name|bad_calls_iterator
name|bad_calls_begin
parameter_list|()
block|{
return|return
name|BadCalls
operator|.
name|begin
argument_list|()
return|;
block|}
name|bad_calls_iterator
name|bad_calls_end
parameter_list|()
block|{
return|return
name|BadCalls
operator|.
name|end
argument_list|()
return|;
block|}
typedef|typedef
name|UndefArgsTy
operator|::
name|iterator
name|undef_arg_iterator
expr_stmt|;
name|undef_arg_iterator
name|msg_expr_undef_arg_begin
parameter_list|()
block|{
return|return
name|MsgExprUndefArgs
operator|.
name|begin
argument_list|()
return|;
block|}
name|undef_arg_iterator
name|msg_expr_undef_arg_end
parameter_list|()
block|{
return|return
name|MsgExprUndefArgs
operator|.
name|end
argument_list|()
return|;
block|}
typedef|typedef
name|ErrorNodes
operator|::
name|iterator
name|undef_receivers_iterator
expr_stmt|;
name|undef_receivers_iterator
name|undef_receivers_begin
parameter_list|()
block|{
return|return
name|UndefReceivers
operator|.
name|begin
argument_list|()
return|;
block|}
name|undef_receivers_iterator
name|undef_receivers_end
parameter_list|()
block|{
return|return
name|UndefReceivers
operator|.
name|end
argument_list|()
return|;
block|}
typedef|typedef
name|ErrorNodes
operator|::
name|iterator
name|oob_memacc_iterator
expr_stmt|;
name|oob_memacc_iterator
name|implicit_oob_memacc_begin
parameter_list|()
block|{
return|return
name|ImplicitOOBMemAccesses
operator|.
name|begin
argument_list|()
return|;
block|}
name|oob_memacc_iterator
name|implicit_oob_memacc_end
parameter_list|()
block|{
return|return
name|ImplicitOOBMemAccesses
operator|.
name|end
argument_list|()
return|;
block|}
name|oob_memacc_iterator
name|explicit_oob_memacc_begin
parameter_list|()
block|{
return|return
name|ExplicitOOBMemAccesses
operator|.
name|begin
argument_list|()
return|;
block|}
name|oob_memacc_iterator
name|explicit_oob_memacc_end
parameter_list|()
block|{
return|return
name|ExplicitOOBMemAccesses
operator|.
name|end
argument_list|()
return|;
block|}
name|void
name|AddCheck
argument_list|(
name|GRSimpleAPICheck
operator|*
name|A
argument_list|,
name|Stmt
operator|::
name|StmtClass
name|C
argument_list|)
decl_stmt|;
name|void
name|AddCheck
parameter_list|(
name|GRSimpleAPICheck
modifier|*
name|A
parameter_list|)
function_decl|;
comment|/// ProcessStmt - Called by GRCoreEngine. Used to generate new successor
comment|///  nodes by processing the 'effects' of a block-level statement.
name|void
name|ProcessStmt
parameter_list|(
name|Stmt
modifier|*
name|S
parameter_list|,
name|GRStmtNodeBuilder
modifier|&
name|builder
parameter_list|)
function_decl|;
comment|/// ProcessBlockEntrance - Called by GRCoreEngine when start processing
comment|///  a CFGBlock.  This method returns true if the analysis should continue
comment|///  exploring the given path, and false otherwise.
name|bool
name|ProcessBlockEntrance
parameter_list|(
name|CFGBlock
modifier|*
name|B
parameter_list|,
specifier|const
name|GRState
modifier|*
name|St
parameter_list|,
name|GRBlockCounter
name|BC
parameter_list|)
function_decl|;
comment|/// ProcessBranch - Called by GRCoreEngine.  Used to generate successor
comment|///  nodes by processing the 'effects' of a branch condition.
name|void
name|ProcessBranch
parameter_list|(
name|Stmt
modifier|*
name|Condition
parameter_list|,
name|Stmt
modifier|*
name|Term
parameter_list|,
name|GRBranchNodeBuilder
modifier|&
name|builder
parameter_list|)
function_decl|;
comment|/// ProcessIndirectGoto - Called by GRCoreEngine.  Used to generate successor
comment|///  nodes by processing the 'effects' of a computed goto jump.
name|void
name|ProcessIndirectGoto
parameter_list|(
name|GRIndirectGotoNodeBuilder
modifier|&
name|builder
parameter_list|)
function_decl|;
comment|/// ProcessSwitch - Called by GRCoreEngine.  Used to generate successor
comment|///  nodes by processing the 'effects' of a switch statement.
name|void
name|ProcessSwitch
parameter_list|(
name|GRSwitchNodeBuilder
modifier|&
name|builder
parameter_list|)
function_decl|;
comment|/// ProcessEndPath - Called by GRCoreEngine.  Used to generate end-of-path
comment|///  nodes when the control reaches the end of a function.
name|void
name|ProcessEndPath
parameter_list|(
name|GREndPathNodeBuilder
modifier|&
name|builder
parameter_list|)
block|{
name|getTF
argument_list|()
operator|.
name|EvalEndPath
argument_list|(
operator|*
name|this
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|StateMgr
operator|.
name|EndPath
argument_list|(
name|builder
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|GRStateManager
modifier|&
name|getStateManager
parameter_list|()
block|{
return|return
name|StateMgr
return|;
block|}
specifier|const
name|GRStateManager
operator|&
name|getStateManager
argument_list|()
specifier|const
block|{
return|return
name|StateMgr
return|;
block|}
name|StoreManager
modifier|&
name|getStoreManager
parameter_list|()
block|{
return|return
name|StateMgr
operator|.
name|getStoreManager
argument_list|()
return|;
block|}
name|ConstraintManager
modifier|&
name|getConstraintManager
parameter_list|()
block|{
return|return
name|StateMgr
operator|.
name|getConstraintManager
argument_list|()
return|;
block|}
comment|// FIXME: Remove when we migrate over to just using ValueManager.
name|BasicValueFactory
modifier|&
name|getBasicVals
parameter_list|()
block|{
return|return
name|StateMgr
operator|.
name|getBasicVals
argument_list|()
return|;
block|}
specifier|const
name|BasicValueFactory
operator|&
name|getBasicVals
argument_list|()
specifier|const
block|{
return|return
name|StateMgr
operator|.
name|getBasicVals
argument_list|()
return|;
block|}
name|ValueManager
modifier|&
name|getValueManager
parameter_list|()
block|{
return|return
name|ValMgr
return|;
block|}
specifier|const
name|ValueManager
operator|&
name|getValueManager
argument_list|()
specifier|const
block|{
return|return
name|ValMgr
return|;
block|}
comment|// FIXME: Remove when we migrate over to just using ValueManager.
name|SymbolManager
modifier|&
name|getSymbolManager
parameter_list|()
block|{
return|return
name|SymMgr
return|;
block|}
specifier|const
name|SymbolManager
operator|&
name|getSymbolManager
argument_list|()
specifier|const
block|{
return|return
name|SymMgr
return|;
block|}
name|protected
label|:
specifier|const
name|GRState
modifier|*
name|GetState
parameter_list|(
name|ExplodedNode
modifier|*
name|N
parameter_list|)
block|{
return|return
name|N
operator|==
name|EntryNode
condition|?
name|CleanedState
else|:
name|N
operator|->
name|getState
argument_list|()
return|;
block|}
name|public
label|:
name|ExplodedNode
modifier|*
name|MakeNode
argument_list|(
name|ExplodedNodeSet
operator|&
name|Dst
argument_list|,
name|Stmt
operator|*
name|S
argument_list|,
name|ExplodedNode
operator|*
name|Pred
argument_list|,
specifier|const
name|GRState
operator|*
name|St
argument_list|,
name|ProgramPoint
operator|::
name|Kind
name|K
operator|=
name|ProgramPoint
operator|::
name|PostStmtKind
argument_list|,
specifier|const
name|void
operator|*
name|tag
operator|=
literal|0
argument_list|)
decl_stmt|;
name|protected
label|:
comment|/// CheckerVisit - Dispatcher for performing checker-specific logic
comment|///  at specific statements.
name|void
name|CheckerVisit
parameter_list|(
name|Stmt
modifier|*
name|S
parameter_list|,
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|,
name|ExplodedNodeSet
modifier|&
name|Src
parameter_list|,
name|bool
name|isPrevisit
parameter_list|)
function_decl|;
name|void
name|CheckerVisitBind
parameter_list|(
specifier|const
name|Stmt
modifier|*
name|AssignE
parameter_list|,
specifier|const
name|Stmt
modifier|*
name|StoreE
parameter_list|,
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|,
name|ExplodedNodeSet
modifier|&
name|Src
parameter_list|,
name|SVal
name|location
parameter_list|,
name|SVal
name|val
parameter_list|,
name|bool
name|isPrevisit
parameter_list|)
function_decl|;
comment|/// Visit - Transfer function logic for all statements.  Dispatches to
comment|///  other functions that handle specific kinds of statements.
name|void
name|Visit
parameter_list|(
name|Stmt
modifier|*
name|S
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|)
function_decl|;
comment|/// VisitLValue - Evaluate the lvalue of the expression. For example, if Ex is
comment|/// a DeclRefExpr, it evaluates to the MemRegionVal which represents its
comment|/// storage location. Note that not all kinds of expressions has lvalue.
name|void
name|VisitLValue
parameter_list|(
name|Expr
modifier|*
name|Ex
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|)
function_decl|;
comment|/// VisitArraySubscriptExpr - Transfer function for array accesses.
name|void
name|VisitArraySubscriptExpr
parameter_list|(
name|ArraySubscriptExpr
modifier|*
name|Ex
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|,
name|bool
name|asLValue
parameter_list|)
function_decl|;
comment|/// VisitAsmStmt - Transfer function logic for inline asm.
name|void
name|VisitAsmStmt
parameter_list|(
name|AsmStmt
modifier|*
name|A
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|)
function_decl|;
name|void
name|VisitAsmStmtHelperOutputs
argument_list|(
name|AsmStmt
operator|*
name|A
argument_list|,
name|AsmStmt
operator|::
name|outputs_iterator
name|I
argument_list|,
name|AsmStmt
operator|::
name|outputs_iterator
name|E
argument_list|,
name|ExplodedNode
operator|*
name|Pred
argument_list|,
name|ExplodedNodeSet
operator|&
name|Dst
argument_list|)
decl_stmt|;
name|void
name|VisitAsmStmtHelperInputs
argument_list|(
name|AsmStmt
operator|*
name|A
argument_list|,
name|AsmStmt
operator|::
name|inputs_iterator
name|I
argument_list|,
name|AsmStmt
operator|::
name|inputs_iterator
name|E
argument_list|,
name|ExplodedNode
operator|*
name|Pred
argument_list|,
name|ExplodedNodeSet
operator|&
name|Dst
argument_list|)
decl_stmt|;
comment|/// VisitBinaryOperator - Transfer function logic for binary operators.
name|void
name|VisitBinaryOperator
parameter_list|(
name|BinaryOperator
modifier|*
name|B
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|,
name|bool
name|asLValue
parameter_list|)
function_decl|;
comment|/// VisitCall - Transfer function for function calls.
name|void
name|VisitCall
argument_list|(
name|CallExpr
operator|*
name|CE
argument_list|,
name|ExplodedNode
operator|*
name|Pred
argument_list|,
name|CallExpr
operator|::
name|arg_iterator
name|AI
argument_list|,
name|CallExpr
operator|::
name|arg_iterator
name|AE
argument_list|,
name|ExplodedNodeSet
operator|&
name|Dst
argument_list|)
decl_stmt|;
name|void
name|VisitCallRec
argument_list|(
name|CallExpr
operator|*
name|CE
argument_list|,
name|ExplodedNode
operator|*
name|Pred
argument_list|,
name|CallExpr
operator|::
name|arg_iterator
name|AI
argument_list|,
name|CallExpr
operator|::
name|arg_iterator
name|AE
argument_list|,
name|ExplodedNodeSet
operator|&
name|Dst
argument_list|,
specifier|const
name|FunctionProtoType
operator|*
argument_list|,
name|unsigned
name|ParamIdx
operator|=
literal|0
argument_list|)
decl_stmt|;
comment|/// VisitCast - Transfer function logic for all casts (implicit and explicit).
name|void
name|VisitCast
parameter_list|(
name|Expr
modifier|*
name|CastE
parameter_list|,
name|Expr
modifier|*
name|Ex
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|)
function_decl|;
comment|/// VisitCompoundLiteralExpr - Transfer function logic for compound literals.
name|void
name|VisitCompoundLiteralExpr
parameter_list|(
name|CompoundLiteralExpr
modifier|*
name|CL
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|,
name|bool
name|asLValue
parameter_list|)
function_decl|;
comment|/// VisitDeclRefExpr - Transfer function logic for DeclRefExprs.
name|void
name|VisitDeclRefExpr
parameter_list|(
name|DeclRefExpr
modifier|*
name|DR
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|,
name|bool
name|asLValue
parameter_list|)
function_decl|;
comment|/// VisitDeclStmt - Transfer function logic for DeclStmts.
name|void
name|VisitDeclStmt
parameter_list|(
name|DeclStmt
modifier|*
name|DS
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|)
function_decl|;
comment|/// VisitGuardedExpr - Transfer function logic for ?, __builtin_choose
name|void
name|VisitGuardedExpr
parameter_list|(
name|Expr
modifier|*
name|Ex
parameter_list|,
name|Expr
modifier|*
name|L
parameter_list|,
name|Expr
modifier|*
name|R
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|)
function_decl|;
name|void
name|VisitInitListExpr
parameter_list|(
name|InitListExpr
modifier|*
name|E
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|)
function_decl|;
comment|/// VisitLogicalExpr - Transfer function logic for '&&', '||'
name|void
name|VisitLogicalExpr
parameter_list|(
name|BinaryOperator
modifier|*
name|B
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|)
function_decl|;
comment|/// VisitMemberExpr - Transfer function for member expressions.
name|void
name|VisitMemberExpr
parameter_list|(
name|MemberExpr
modifier|*
name|M
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|,
name|bool
name|asLValue
parameter_list|)
function_decl|;
comment|/// VisitObjCIvarRefExpr - Transfer function logic for ObjCIvarRefExprs.
name|void
name|VisitObjCIvarRefExpr
parameter_list|(
name|ObjCIvarRefExpr
modifier|*
name|DR
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|,
name|bool
name|asLValue
parameter_list|)
function_decl|;
comment|/// VisitObjCForCollectionStmt - Transfer function logic for
comment|///  ObjCForCollectionStmt.
name|void
name|VisitObjCForCollectionStmt
parameter_list|(
name|ObjCForCollectionStmt
modifier|*
name|S
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|)
function_decl|;
name|void
name|VisitObjCForCollectionStmtAux
parameter_list|(
name|ObjCForCollectionStmt
modifier|*
name|S
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|,
name|SVal
name|ElementV
parameter_list|)
function_decl|;
comment|/// VisitObjCMessageExpr - Transfer function for ObjC message expressions.
name|void
name|VisitObjCMessageExpr
parameter_list|(
name|ObjCMessageExpr
modifier|*
name|ME
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|)
function_decl|;
name|void
name|VisitObjCMessageExprArgHelper
argument_list|(
name|ObjCMessageExpr
operator|*
name|ME
argument_list|,
name|ObjCMessageExpr
operator|::
name|arg_iterator
name|I
argument_list|,
name|ObjCMessageExpr
operator|::
name|arg_iterator
name|E
argument_list|,
name|ExplodedNode
operator|*
name|Pred
argument_list|,
name|ExplodedNodeSet
operator|&
name|Dst
argument_list|)
decl_stmt|;
name|void
name|VisitObjCMessageExprDispatchHelper
parameter_list|(
name|ObjCMessageExpr
modifier|*
name|ME
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|)
function_decl|;
comment|/// VisitReturnStmt - Transfer function logic for return statements.
name|void
name|VisitReturnStmt
parameter_list|(
name|ReturnStmt
modifier|*
name|R
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|)
function_decl|;
comment|/// VisitSizeOfAlignOfExpr - Transfer function for sizeof.
name|void
name|VisitSizeOfAlignOfExpr
parameter_list|(
name|SizeOfAlignOfExpr
modifier|*
name|Ex
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|)
function_decl|;
comment|/// VisitUnaryOperator - Transfer function logic for unary operators.
name|void
name|VisitUnaryOperator
parameter_list|(
name|UnaryOperator
modifier|*
name|B
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|,
name|bool
name|asLValue
parameter_list|)
function_decl|;
specifier|const
name|GRState
modifier|*
name|CheckDivideZero
parameter_list|(
name|Expr
modifier|*
name|Ex
parameter_list|,
specifier|const
name|GRState
modifier|*
name|St
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
name|SVal
name|Denom
parameter_list|)
function_decl|;
comment|/// EvalEagerlyAssume - Given the nodes in 'Src', eagerly assume symbolic
comment|///  expressions of the form 'x != 0' and generate new nodes (stored in Dst)
comment|///  with those assumptions.
name|void
name|EvalEagerlyAssume
parameter_list|(
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|,
name|ExplodedNodeSet
modifier|&
name|Src
parameter_list|,
name|Expr
modifier|*
name|Ex
parameter_list|)
function_decl|;
name|SVal
name|EvalMinus
parameter_list|(
name|SVal
name|X
parameter_list|)
block|{
return|return
name|X
operator|.
name|isValid
argument_list|()
condition|?
name|SVator
operator|.
name|EvalMinus
argument_list|(
name|cast
operator|<
name|NonLoc
operator|>
operator|(
name|X
operator|)
argument_list|)
else|:
name|X
return|;
block|}
name|SVal
name|EvalComplement
parameter_list|(
name|SVal
name|X
parameter_list|)
block|{
return|return
name|X
operator|.
name|isValid
argument_list|()
condition|?
name|SVator
operator|.
name|EvalComplement
argument_list|(
name|cast
operator|<
name|NonLoc
operator|>
operator|(
name|X
operator|)
argument_list|)
else|:
name|X
return|;
block|}
name|bool
name|EvalBuiltinFunction
parameter_list|(
specifier|const
name|FunctionDecl
modifier|*
name|FD
parameter_list|,
name|CallExpr
modifier|*
name|CE
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|)
function_decl|;
name|public
label|:
name|SVal
name|EvalBinOp
argument_list|(
specifier|const
name|GRState
operator|*
name|state
argument_list|,
name|BinaryOperator
operator|::
name|Opcode
name|op
argument_list|,
name|NonLoc
name|L
argument_list|,
name|NonLoc
name|R
argument_list|,
name|QualType
name|T
argument_list|)
block|{
return|return
name|SVator
operator|.
name|EvalBinOpNN
argument_list|(
name|state
argument_list|,
name|op
argument_list|,
name|L
argument_list|,
name|R
argument_list|,
name|T
argument_list|)
return|;
block|}
name|SVal
name|EvalBinOp
argument_list|(
specifier|const
name|GRState
operator|*
name|state
argument_list|,
name|BinaryOperator
operator|::
name|Opcode
name|op
argument_list|,
name|NonLoc
name|L
argument_list|,
name|SVal
name|R
argument_list|,
name|QualType
name|T
argument_list|)
block|{
return|return
name|R
operator|.
name|isValid
argument_list|()
condition|?
name|SVator
operator|.
name|EvalBinOpNN
argument_list|(
name|state
argument_list|,
name|op
argument_list|,
name|L
argument_list|,
name|cast
operator|<
name|NonLoc
operator|>
operator|(
name|R
operator|)
argument_list|,
name|T
argument_list|)
else|:
name|R
return|;
block|}
name|SVal
name|EvalBinOp
argument_list|(
specifier|const
name|GRState
operator|*
name|ST
argument_list|,
name|BinaryOperator
operator|::
name|Opcode
name|Op
argument_list|,
name|SVal
name|LHS
argument_list|,
name|SVal
name|RHS
argument_list|,
name|QualType
name|T
argument_list|)
block|{
return|return
name|SVator
operator|.
name|EvalBinOp
argument_list|(
name|ST
argument_list|,
name|Op
argument_list|,
name|LHS
argument_list|,
name|RHS
argument_list|,
name|T
argument_list|)
return|;
block|}
name|protected
label|:
name|void
name|EvalCall
parameter_list|(
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|,
name|CallExpr
modifier|*
name|CE
parameter_list|,
name|SVal
name|L
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|)
function_decl|;
name|void
name|EvalObjCMessageExpr
parameter_list|(
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|,
name|ObjCMessageExpr
modifier|*
name|ME
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|)
block|{
name|assert
argument_list|(
name|Builder
operator|&&
literal|"GRStmtNodeBuilder must be defined."
argument_list|)
expr_stmt|;
name|getTF
argument_list|()
operator|.
name|EvalObjCMessageExpr
argument_list|(
name|Dst
argument_list|,
operator|*
name|this
argument_list|,
operator|*
name|Builder
argument_list|,
name|ME
argument_list|,
name|Pred
argument_list|)
expr_stmt|;
block|}
name|void
name|EvalReturn
parameter_list|(
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|,
name|ReturnStmt
modifier|*
name|s
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|)
function_decl|;
specifier|const
name|GRState
modifier|*
name|MarkBranch
parameter_list|(
specifier|const
name|GRState
modifier|*
name|St
parameter_list|,
name|Stmt
modifier|*
name|Terminator
parameter_list|,
name|bool
name|branchTaken
parameter_list|)
function_decl|;
comment|/// EvalBind - Handle the semantics of binding a value to a specific location.
comment|///  This method is used by EvalStore, VisitDeclStmt, and others.
name|void
name|EvalBind
parameter_list|(
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|,
name|Stmt
modifier|*
name|AssignE
parameter_list|,
name|Stmt
modifier|*
name|StoreE
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
specifier|const
name|GRState
modifier|*
name|St
parameter_list|,
name|SVal
name|location
parameter_list|,
name|SVal
name|Val
parameter_list|,
name|bool
name|atDeclInit
init|=
name|false
parameter_list|)
function_decl|;
name|public
label|:
name|void
name|EvalLoad
parameter_list|(
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|,
name|Expr
modifier|*
name|Ex
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
specifier|const
name|GRState
modifier|*
name|St
parameter_list|,
name|SVal
name|location
parameter_list|,
specifier|const
name|void
modifier|*
name|tag
init|=
literal|0
parameter_list|)
function_decl|;
name|ExplodedNode
modifier|*
name|EvalLocation
parameter_list|(
name|Stmt
modifier|*
name|Ex
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
specifier|const
name|GRState
modifier|*
name|St
parameter_list|,
name|SVal
name|location
parameter_list|,
specifier|const
name|void
modifier|*
name|tag
init|=
literal|0
parameter_list|)
function_decl|;
name|void
name|EvalStore
parameter_list|(
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|,
name|Expr
modifier|*
name|AssignE
parameter_list|,
name|Expr
modifier|*
name|StoreE
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
specifier|const
name|GRState
modifier|*
name|St
parameter_list|,
name|SVal
name|TargetLV
parameter_list|,
name|SVal
name|Val
parameter_list|,
specifier|const
name|void
modifier|*
name|tag
init|=
literal|0
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// end clang namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

