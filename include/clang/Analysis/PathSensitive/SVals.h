begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//== SVals.h - Abstract Values for Static Analysis ---------*- C++ -*--==//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines SVal, Loc, and NonLoc, classes that represent
end_comment

begin_comment
comment|//  abstract r-values for use with path-sensitive value tracking.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_ANALYSIS_RVALUE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_ANALYSIS_RVALUE_H
end_define

begin_include
include|#
directive|include
file|"clang/Analysis/PathSensitive/SymbolManager.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Casting.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/ImmutableList.h"
end_include

begin_comment
comment|//==------------------------------------------------------------------------==//
end_comment

begin_comment
comment|//  Base SVal types.
end_comment

begin_comment
comment|//==------------------------------------------------------------------------==//
end_comment

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|CompoundValData
decl_stmt|;
name|class
name|BasicValueFactory
decl_stmt|;
name|class
name|MemRegion
decl_stmt|;
name|class
name|MemRegionManager
decl_stmt|;
name|class
name|GRStateManager
decl_stmt|;
name|class
name|SVal
block|{
name|public
label|:
enum|enum
name|BaseKind
block|{
name|UndefinedKind
block|,
name|UnknownKind
block|,
name|LocKind
block|,
name|NonLocKind
block|}
enum|;
enum|enum
block|{
name|BaseBits
init|=
literal|2
block|,
name|BaseMask
init|=
literal|0x3
block|}
enum|;
name|protected
label|:
name|void
modifier|*
name|Data
decl_stmt|;
name|unsigned
name|Kind
decl_stmt|;
name|protected
label|:
name|SVal
argument_list|(
argument|const void* d
argument_list|,
argument|bool isLoc
argument_list|,
argument|unsigned ValKind
argument_list|)
block|:
name|Data
argument_list|(
name|const_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|d
operator|)
argument_list|)
operator|,
name|Kind
argument_list|(
argument|(isLoc ? LocKind : NonLocKind) | (ValKind<< BaseBits)
argument_list|)
block|{}
name|explicit
name|SVal
argument_list|(
argument|BaseKind k
argument_list|,
argument|void* D = NULL
argument_list|)
operator|:
name|Data
argument_list|(
name|D
argument_list|)
operator|,
name|Kind
argument_list|(
argument|k
argument_list|)
block|{}
name|public
operator|:
name|SVal
argument_list|()
operator|:
name|Data
argument_list|(
literal|0
argument_list|)
operator|,
name|Kind
argument_list|(
literal|0
argument_list|)
block|{}
operator|~
name|SVal
argument_list|()
block|{}
expr_stmt|;
comment|/// BufferTy - A temporary buffer to hold a set of SVals.
typedef|typedef
name|llvm
operator|::
name|SmallVector
operator|<
name|SVal
operator|,
literal|5
operator|>
name|BufferTy
expr_stmt|;
specifier|inline
name|unsigned
name|getRawKind
argument_list|()
specifier|const
block|{
return|return
name|Kind
return|;
block|}
specifier|inline
name|BaseKind
name|getBaseKind
argument_list|()
specifier|const
block|{
return|return
call|(
name|BaseKind
call|)
argument_list|(
name|Kind
operator|&
name|BaseMask
argument_list|)
return|;
block|}
specifier|inline
name|unsigned
name|getSubKind
argument_list|()
specifier|const
block|{
return|return
operator|(
name|Kind
operator|&
operator|~
name|BaseMask
operator|)
operator|>>
name|BaseBits
return|;
block|}
specifier|inline
name|void
name|Profile
argument_list|(
name|llvm
operator|::
name|FoldingSetNodeID
operator|&
name|ID
argument_list|)
decl|const
block|{
name|ID
operator|.
name|AddInteger
argument_list|(
operator|(
name|unsigned
operator|)
name|getRawKind
argument_list|()
argument_list|)
expr_stmt|;
name|ID
operator|.
name|AddPointer
argument_list|(
name|reinterpret_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|Data
operator|)
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|SVal
operator|&
name|R
operator|)
specifier|const
block|{
return|return
name|getRawKind
argument_list|()
operator|==
name|R
operator|.
name|getRawKind
argument_list|()
operator|&&
name|Data
operator|==
name|R
operator|.
name|Data
return|;
block|}
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|SVal
operator|&
name|R
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|R
operator|)
return|;
block|}
specifier|inline
name|bool
name|isUnknown
argument_list|()
specifier|const
block|{
return|return
name|getRawKind
argument_list|()
operator|==
name|UnknownKind
return|;
block|}
specifier|inline
name|bool
name|isUndef
argument_list|()
specifier|const
block|{
return|return
name|getRawKind
argument_list|()
operator|==
name|UndefinedKind
return|;
block|}
specifier|inline
name|bool
name|isUnknownOrUndef
argument_list|()
specifier|const
block|{
return|return
name|getRawKind
argument_list|()
operator|<=
name|UnknownKind
return|;
block|}
specifier|inline
name|bool
name|isValid
argument_list|()
specifier|const
block|{
return|return
name|getRawKind
argument_list|()
operator|>
name|UnknownKind
return|;
block|}
name|bool
name|isZeroConstant
argument_list|()
specifier|const
expr_stmt|;
comment|/// hasConjuredSymbol - If this SVal wraps a conjured symbol, return true;
name|bool
name|hasConjuredSymbol
argument_list|()
specifier|const
expr_stmt|;
comment|/// getAsFunctionDecl - If this SVal is a MemRegionVal and wraps a
comment|/// CodeTextRegion wrapping a FunctionDecl, return that FunctionDecl.
comment|/// Otherwise return 0.
specifier|const
name|FunctionDecl
operator|*
name|getAsFunctionDecl
argument_list|()
specifier|const
expr_stmt|;
comment|/// getAsLocSymbol - If this SVal is a location (subclasses Loc) and
comment|///  wraps a symbol, return that SymbolRef.  Otherwise return a SymbolData*
name|SymbolRef
name|getAsLocSymbol
argument_list|()
specifier|const
expr_stmt|;
comment|/// getAsSymbol - If this Sval wraps a symbol return that SymbolRef.
comment|///  Otherwise return a SymbolRef where 'isValid()' returns false.
name|SymbolRef
name|getAsSymbol
argument_list|()
specifier|const
expr_stmt|;
comment|/// getAsSymbolicExpression - If this Sval wraps a symbolic expression then
comment|///  return that expression.  Otherwise return NULL.
specifier|const
name|SymExpr
operator|*
name|getAsSymbolicExpression
argument_list|()
specifier|const
expr_stmt|;
name|void
name|print
argument_list|(
name|std
operator|::
name|ostream
operator|&
name|OS
argument_list|)
decl|const
decl_stmt|;
name|void
name|print
argument_list|(
name|llvm
operator|::
name|raw_ostream
operator|&
name|OS
argument_list|)
decl|const
decl_stmt|;
name|void
name|printStdErr
parameter_list|()
function|const;
comment|// Iterators.
name|class
name|symbol_iterator
block|{
name|llvm
operator|::
name|SmallVector
operator|<
specifier|const
name|SymExpr
operator|*
operator|,
literal|5
operator|>
name|itr
expr_stmt|;
name|void
name|expand
parameter_list|()
function_decl|;
name|public
label|:
name|symbol_iterator
argument_list|()
block|{}
name|symbol_iterator
argument_list|(
specifier|const
name|SymExpr
operator|*
name|SE
argument_list|)
expr_stmt|;
name|symbol_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
expr_stmt|;
name|SymbolRef
name|operator
modifier|*
parameter_list|()
function_decl|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|symbol_iterator
operator|&
name|X
operator|)
specifier|const
expr_stmt|;
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|symbol_iterator
operator|&
name|X
operator|)
specifier|const
expr_stmt|;
block|}
empty_stmt|;
name|symbol_iterator
name|symbol_begin
argument_list|()
specifier|const
block|{
specifier|const
name|SymExpr
operator|*
name|SE
operator|=
name|getAsSymbolicExpression
argument_list|()
block|;
if|if
condition|(
name|SE
condition|)
return|return
name|symbol_iterator
argument_list|(
name|SE
argument_list|)
return|;
else|else
return|return
name|symbol_iterator
argument_list|()
return|;
block|}
name|symbol_iterator
name|symbol_end
argument_list|()
specifier|const
block|{
return|return
name|symbol_iterator
argument_list|()
return|;
block|}
comment|// Implement isa<T> support.
specifier|static
specifier|inline
name|bool
name|classof
parameter_list|(
specifier|const
name|SVal
modifier|*
parameter_list|)
block|{
return|return
name|true
return|;
block|}
block|}
empty_stmt|;
name|class
name|UnknownVal
range|:
name|public
name|SVal
block|{
name|public
operator|:
name|UnknownVal
argument_list|()
operator|:
name|SVal
argument_list|(
argument|UnknownKind
argument_list|)
block|{}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const SVal* V
argument_list|)
block|{
return|return
name|V
operator|->
name|getBaseKind
argument_list|()
operator|==
name|UnknownKind
return|;
block|}
expr|}
block|;
name|class
name|UndefinedVal
operator|:
name|public
name|SVal
block|{
name|public
operator|:
name|UndefinedVal
argument_list|()
operator|:
name|SVal
argument_list|(
argument|UndefinedKind
argument_list|)
block|{}
name|UndefinedVal
argument_list|(
name|void
operator|*
name|D
argument_list|)
operator|:
name|SVal
argument_list|(
argument|UndefinedKind
argument_list|,
argument|D
argument_list|)
block|{}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const SVal* V
argument_list|)
block|{
return|return
name|V
operator|->
name|getBaseKind
argument_list|()
operator|==
name|UndefinedKind
return|;
block|}
name|void
operator|*
name|getData
argument_list|()
specifier|const
block|{
return|return
name|Data
return|;
block|}
expr|}
block|;
name|class
name|NonLoc
operator|:
name|public
name|SVal
block|{
name|protected
operator|:
name|NonLoc
argument_list|(
argument|unsigned SubKind
argument_list|,
argument|const void* d
argument_list|)
operator|:
name|SVal
argument_list|(
argument|d
argument_list|,
argument|false
argument_list|,
argument|SubKind
argument_list|)
block|{}
name|public
operator|:
name|void
name|print
argument_list|(
argument|llvm::raw_ostream& Out
argument_list|)
specifier|const
block|;
comment|// Utility methods to create NonLocs.
specifier|static
name|NonLoc
name|MakeIntVal
argument_list|(
argument|BasicValueFactory& BasicVals
argument_list|,
argument|uint64_t X
argument_list|,
argument|bool isUnsigned
argument_list|)
block|;
specifier|static
name|NonLoc
name|MakeVal
argument_list|(
argument|BasicValueFactory& BasicVals
argument_list|,
argument|uint64_t X
argument_list|,
argument|unsigned BitWidth
argument_list|,
argument|bool isUnsigned
argument_list|)
block|;
specifier|static
name|NonLoc
name|MakeVal
argument_list|(
argument|BasicValueFactory& BasicVals
argument_list|,
argument|uint64_t X
argument_list|,
argument|QualType T
argument_list|)
block|;
specifier|static
name|NonLoc
name|MakeVal
argument_list|(
name|BasicValueFactory
operator|&
name|BasicVals
argument_list|,
name|IntegerLiteral
operator|*
name|I
argument_list|)
block|;
specifier|static
name|NonLoc
name|MakeVal
argument_list|(
argument|BasicValueFactory& BasicVals
argument_list|,
argument|const llvm::APInt& I
argument_list|,
argument|bool isUnsigned
argument_list|)
block|;
specifier|static
name|NonLoc
name|MakeVal
argument_list|(
name|BasicValueFactory
operator|&
name|BasicVals
argument_list|,
specifier|const
name|llvm
operator|::
name|APSInt
operator|&
name|I
argument_list|)
block|;
specifier|static
name|NonLoc
name|MakeIntTruthVal
argument_list|(
argument|BasicValueFactory& BasicVals
argument_list|,
argument|bool b
argument_list|)
block|;
specifier|static
name|NonLoc
name|MakeCompoundVal
argument_list|(
argument|QualType T
argument_list|,
argument|llvm::ImmutableList<SVal> Vals
argument_list|,
argument|BasicValueFactory& BasicVals
argument_list|)
block|;
comment|// Implement isa<T> support.
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const SVal* V
argument_list|)
block|{
return|return
name|V
operator|->
name|getBaseKind
argument_list|()
operator|==
name|NonLocKind
return|;
block|}
expr|}
block|;
name|class
name|Loc
operator|:
name|public
name|SVal
block|{
name|protected
operator|:
name|Loc
argument_list|(
argument|unsigned SubKind
argument_list|,
argument|const void* D
argument_list|)
operator|:
name|SVal
argument_list|(
argument|const_cast<void*>(D)
argument_list|,
argument|true
argument_list|,
argument|SubKind
argument_list|)
block|{}
name|public
operator|:
name|void
name|print
argument_list|(
argument|llvm::raw_ostream& Out
argument_list|)
specifier|const
block|;
name|Loc
argument_list|(
specifier|const
name|Loc
operator|&
name|X
argument_list|)
operator|:
name|SVal
argument_list|(
argument|X.Data
argument_list|,
argument|true
argument_list|,
argument|X.getSubKind()
argument_list|)
block|{}
name|Loc
operator|&
name|operator
operator|=
operator|(
specifier|const
name|Loc
operator|&
name|X
operator|)
block|{
name|memcpy
argument_list|(
name|this
argument_list|,
operator|&
name|X
argument_list|,
sizeof|sizeof
argument_list|(
name|Loc
argument_list|)
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
specifier|static
name|Loc
name|MakeVal
argument_list|(
specifier|const
name|MemRegion
operator|*
name|R
argument_list|)
block|;
specifier|static
name|Loc
name|MakeVal
argument_list|(
name|AddrLabelExpr
operator|*
name|E
argument_list|)
block|;
specifier|static
name|Loc
name|MakeNull
argument_list|(
name|BasicValueFactory
operator|&
name|BasicVals
argument_list|)
block|;
comment|// Implement isa<T> support.
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const SVal* V
argument_list|)
block|{
return|return
name|V
operator|->
name|getBaseKind
argument_list|()
operator|==
name|LocKind
return|;
block|}
specifier|static
specifier|inline
name|bool
name|IsLocType
argument_list|(
argument|QualType T
argument_list|)
block|{
return|return
name|T
operator|->
name|isPointerType
argument_list|()
operator|||
name|T
operator|->
name|isObjCQualifiedIdType
argument_list|()
operator|||
name|T
operator|->
name|isBlockPointerType
argument_list|()
return|;
block|}
expr|}
block|;
comment|//==------------------------------------------------------------------------==//
comment|//  Subclasses of NonLoc.
comment|//==------------------------------------------------------------------------==//
name|namespace
name|nonloc
block|{    enum
name|Kind
block|{
name|ConcreteIntKind
block|,
name|SymbolValKind
block|,
name|SymExprValKind
block|,
name|LocAsIntegerKind
block|,
name|CompoundValKind
block|}
block|;
name|class
name|SymbolVal
operator|:
name|public
name|NonLoc
block|{
name|public
operator|:
name|SymbolVal
argument_list|(
argument|SymbolRef sym
argument_list|)
operator|:
name|NonLoc
argument_list|(
argument|SymbolValKind
argument_list|,
argument|sym
argument_list|)
block|{}
name|SymbolRef
name|getSymbol
argument_list|()
specifier|const
block|{
return|return
operator|(
specifier|const
name|SymbolData
operator|*
operator|)
name|Data
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const SVal* V
argument_list|)
block|{
return|return
name|V
operator|->
name|getBaseKind
argument_list|()
operator|==
name|NonLocKind
operator|&&
name|V
operator|->
name|getSubKind
argument_list|()
operator|==
name|SymbolValKind
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const NonLoc* V
argument_list|)
block|{
return|return
name|V
operator|->
name|getSubKind
argument_list|()
operator|==
name|SymbolValKind
return|;
block|}
expr|}
block|;
name|class
name|SymExprVal
operator|:
name|public
name|NonLoc
block|{
name|public
operator|:
name|SymExprVal
argument_list|(
specifier|const
name|SymExpr
operator|*
name|SE
argument_list|)
operator|:
name|NonLoc
argument_list|(
argument|SymExprValKind
argument_list|,
argument|reinterpret_cast<const void*>(SE)
argument_list|)
block|{}
specifier|const
name|SymExpr
operator|*
name|getSymbolicExpression
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
name|SymExpr
operator|*
operator|>
operator|(
name|Data
operator|)
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const SVal* V
argument_list|)
block|{
return|return
name|V
operator|->
name|getBaseKind
argument_list|()
operator|==
name|NonLocKind
operator|&&
name|V
operator|->
name|getSubKind
argument_list|()
operator|==
name|SymExprValKind
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const NonLoc* V
argument_list|)
block|{
return|return
name|V
operator|->
name|getSubKind
argument_list|()
operator|==
name|SymExprValKind
return|;
block|}
expr|}
block|;
name|class
name|ConcreteInt
operator|:
name|public
name|NonLoc
block|{
name|public
operator|:
name|ConcreteInt
argument_list|(
specifier|const
name|llvm
operator|::
name|APSInt
operator|&
name|V
argument_list|)
operator|:
name|NonLoc
argument_list|(
argument|ConcreteIntKind
argument_list|,
argument|&V
argument_list|)
block|{}
specifier|const
name|llvm
operator|::
name|APSInt
operator|&
name|getValue
argument_list|()
specifier|const
block|{
return|return
operator|*
name|static_cast
operator|<
name|llvm
operator|::
name|APSInt
operator|*
operator|>
operator|(
name|Data
operator|)
return|;
block|}
comment|// Transfer functions for binary/unary operations on ConcreteInts.
name|SVal
name|EvalBinOp
argument_list|(
argument|BasicValueFactory& BasicVals
argument_list|,
argument|BinaryOperator::Opcode Op
argument_list|,
argument|const ConcreteInt& R
argument_list|)
specifier|const
block|;
name|ConcreteInt
name|EvalComplement
argument_list|(
argument|BasicValueFactory& BasicVals
argument_list|)
specifier|const
block|;
name|ConcreteInt
name|EvalMinus
argument_list|(
argument|BasicValueFactory& BasicVals
argument_list|,
argument|UnaryOperator* U
argument_list|)
specifier|const
block|;
comment|// Implement isa<T> support.
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const SVal* V
argument_list|)
block|{
return|return
name|V
operator|->
name|getBaseKind
argument_list|()
operator|==
name|NonLocKind
operator|&&
name|V
operator|->
name|getSubKind
argument_list|()
operator|==
name|ConcreteIntKind
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const NonLoc* V
argument_list|)
block|{
return|return
name|V
operator|->
name|getSubKind
argument_list|()
operator|==
name|ConcreteIntKind
return|;
block|}
expr|}
block|;
name|class
name|LocAsInteger
operator|:
name|public
name|NonLoc
block|{
name|LocAsInteger
argument_list|(
specifier|const
name|std
operator|::
name|pair
operator|<
name|SVal
argument_list|,
name|uintptr_t
operator|>
operator|&
name|data
argument_list|)
operator|:
name|NonLoc
argument_list|(
argument|LocAsIntegerKind
argument_list|,
argument|&data
argument_list|)
block|{
name|assert
argument_list|(
name|isa
operator|<
name|Loc
operator|>
operator|(
name|data
operator|.
name|first
operator|)
argument_list|)
block|;     }
name|public
operator|:
name|Loc
name|getLoc
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|Loc
operator|>
operator|(
operator|(
operator|(
name|std
operator|::
name|pair
operator|<
name|SVal
expr|,
name|uintptr_t
operator|>
operator|*
operator|)
name|Data
operator|)
operator|->
name|first
operator|)
return|;
block|}
specifier|const
name|Loc
operator|&
name|getPersistentLoc
argument_list|()
specifier|const
block|{
specifier|const
name|SVal
operator|&
name|V
operator|=
operator|(
operator|(
name|std
operator|::
name|pair
operator|<
name|SVal
expr|,
name|uintptr_t
operator|>
operator|*
operator|)
name|Data
operator|)
operator|->
name|first
block|;
return|return
name|cast
operator|<
name|Loc
operator|>
operator|(
name|V
operator|)
return|;
block|}
name|unsigned
name|getNumBits
argument_list|()
specifier|const
block|{
return|return
operator|(
operator|(
name|std
operator|::
name|pair
operator|<
name|SVal
expr|,
name|unsigned
operator|>
operator|*
operator|)
name|Data
operator|)
operator|->
name|second
return|;
block|}
comment|// Implement isa<T> support.
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const SVal* V
argument_list|)
block|{
return|return
name|V
operator|->
name|getBaseKind
argument_list|()
operator|==
name|NonLocKind
operator|&&
name|V
operator|->
name|getSubKind
argument_list|()
operator|==
name|LocAsIntegerKind
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const NonLoc* V
argument_list|)
block|{
return|return
name|V
operator|->
name|getSubKind
argument_list|()
operator|==
name|LocAsIntegerKind
return|;
block|}
specifier|static
name|LocAsInteger
name|Make
argument_list|(
argument|BasicValueFactory& Vals
argument_list|,
argument|Loc V
argument_list|,
argument|unsigned Bits
argument_list|)
block|; }
block|;
name|class
name|CompoundVal
operator|:
name|public
name|NonLoc
block|{
name|friend
name|class
name|NonLoc
block|;
name|CompoundVal
argument_list|(
specifier|const
name|CompoundValData
operator|*
name|D
argument_list|)
operator|:
name|NonLoc
argument_list|(
argument|CompoundValKind
argument_list|,
argument|D
argument_list|)
block|{}
name|public
operator|:
specifier|const
name|CompoundValData
operator|*
name|getValue
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|CompoundValData
operator|*
operator|>
operator|(
name|Data
operator|)
return|;
block|}
typedef|typedef
name|llvm
operator|::
name|ImmutableList
operator|<
name|SVal
operator|>
operator|::
name|iterator
name|iterator
expr_stmt|;
name|iterator
name|begin
argument_list|()
specifier|const
block|;
name|iterator
name|end
argument_list|()
specifier|const
block|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const SVal* V
argument_list|)
block|{
return|return
name|V
operator|->
name|getBaseKind
argument_list|()
operator|==
name|NonLocKind
operator|&&
name|V
operator|->
name|getSubKind
argument_list|()
operator|==
name|CompoundValKind
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const NonLoc* V
argument_list|)
block|{
return|return
name|V
operator|->
name|getSubKind
argument_list|()
operator|==
name|CompoundValKind
return|;
block|}
expr|}
block|;    }
comment|// end namespace clang::nonloc
comment|//==------------------------------------------------------------------------==//
comment|//  Subclasses of Loc.
comment|//==------------------------------------------------------------------------==//
name|namespace
name|loc
block|{    enum
name|Kind
block|{
name|GotoLabelKind
block|,
name|MemRegionKind
block|,
name|ConcreteIntKind
block|}
block|;
name|class
name|GotoLabel
operator|:
name|public
name|Loc
block|{
name|public
operator|:
name|GotoLabel
argument_list|(
name|LabelStmt
operator|*
name|Label
argument_list|)
operator|:
name|Loc
argument_list|(
argument|GotoLabelKind
argument_list|,
argument|Label
argument_list|)
block|{}
name|LabelStmt
operator|*
name|getLabel
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|LabelStmt
operator|*
operator|>
operator|(
name|Data
operator|)
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const SVal* V
argument_list|)
block|{
return|return
name|V
operator|->
name|getBaseKind
argument_list|()
operator|==
name|LocKind
operator|&&
name|V
operator|->
name|getSubKind
argument_list|()
operator|==
name|GotoLabelKind
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Loc* V
argument_list|)
block|{
return|return
name|V
operator|->
name|getSubKind
argument_list|()
operator|==
name|GotoLabelKind
return|;
block|}
expr|}
block|;
name|class
name|MemRegionVal
operator|:
name|public
name|Loc
block|{
name|public
operator|:
name|MemRegionVal
argument_list|(
specifier|const
name|MemRegion
operator|*
name|r
argument_list|)
operator|:
name|Loc
argument_list|(
argument|MemRegionKind
argument_list|,
argument|r
argument_list|)
block|{}
specifier|const
name|MemRegion
operator|*
name|getRegion
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|MemRegion
operator|*
operator|>
operator|(
name|Data
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|REGION
operator|>
specifier|const
name|REGION
operator|*
name|getRegionAs
argument_list|()
specifier|const
block|{
return|return
name|llvm
operator|::
name|dyn_cast
operator|<
name|REGION
operator|>
operator|(
name|getRegion
argument_list|()
operator|)
return|;
block|}
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|MemRegionVal
operator|&
name|R
operator|)
specifier|const
block|{
return|return
name|getRegion
argument_list|()
operator|==
name|R
operator|.
name|getRegion
argument_list|()
return|;
block|}
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|MemRegionVal
operator|&
name|R
operator|)
specifier|const
block|{
return|return
name|getRegion
argument_list|()
operator|!=
name|R
operator|.
name|getRegion
argument_list|()
return|;
block|}
comment|// Implement isa<T> support.
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const SVal* V
argument_list|)
block|{
return|return
name|V
operator|->
name|getBaseKind
argument_list|()
operator|==
name|LocKind
operator|&&
name|V
operator|->
name|getSubKind
argument_list|()
operator|==
name|MemRegionKind
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Loc* V
argument_list|)
block|{
return|return
name|V
operator|->
name|getSubKind
argument_list|()
operator|==
name|MemRegionKind
return|;
block|}
expr|}
block|;
name|class
name|ConcreteInt
operator|:
name|public
name|Loc
block|{
name|public
operator|:
name|ConcreteInt
argument_list|(
specifier|const
name|llvm
operator|::
name|APSInt
operator|&
name|V
argument_list|)
operator|:
name|Loc
argument_list|(
argument|ConcreteIntKind
argument_list|,
argument|&V
argument_list|)
block|{}
specifier|const
name|llvm
operator|::
name|APSInt
operator|&
name|getValue
argument_list|()
specifier|const
block|{
return|return
operator|*
name|static_cast
operator|<
name|llvm
operator|::
name|APSInt
operator|*
operator|>
operator|(
name|Data
operator|)
return|;
block|}
comment|// Transfer functions for binary/unary operations on ConcreteInts.
name|SVal
name|EvalBinOp
argument_list|(
argument|BasicValueFactory& BasicVals
argument_list|,
argument|BinaryOperator::Opcode Op
argument_list|,
argument|const ConcreteInt& R
argument_list|)
specifier|const
block|;
comment|// Implement isa<T> support.
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const SVal* V
argument_list|)
block|{
return|return
name|V
operator|->
name|getBaseKind
argument_list|()
operator|==
name|LocKind
operator|&&
name|V
operator|->
name|getSubKind
argument_list|()
operator|==
name|ConcreteIntKind
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Loc* V
argument_list|)
block|{
return|return
name|V
operator|->
name|getSubKind
argument_list|()
operator|==
name|ConcreteIntKind
return|;
block|}
expr|}
block|;    }
comment|// end clang::loc namespace
block|}
end_decl_stmt

begin_comment
comment|// end clang namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

