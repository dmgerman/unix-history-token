begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//== ValueManager.h - Aggregate manager of symbols and SVals ----*- C++ -*--==//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines ValueManager, a class that manages symbolic values
end_comment

begin_comment
comment|//  and SVals created for use by GRExprEngine and related classes.  It
end_comment

begin_comment
comment|//  wraps SymbolManager, MemRegionManager, and BasicValueFactory.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_ANALYSIS_AGGREGATE_VALUE_MANAGER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_ANALYSIS_AGGREGATE_VALUE_MANAGER_H
end_define

begin_include
include|#
directive|include
file|"clang/Analysis/PathSensitive/MemRegion.h"
end_include

begin_include
include|#
directive|include
file|"clang/Analysis/PathSensitive/SVals.h"
end_include

begin_include
include|#
directive|include
file|"clang/Analysis/PathSensitive/BasicValueFactory.h"
end_include

begin_include
include|#
directive|include
file|"clang/Analysis/PathSensitive/SymbolManager.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|BumpPtrAllocator
decl_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|ValueManager
block|{
name|ASTContext
modifier|&
name|Context
decl_stmt|;
name|BasicValueFactory
name|BasicVals
decl_stmt|;
comment|/// SymMgr - Object that manages the symbol information.
name|SymbolManager
name|SymMgr
decl_stmt|;
name|MemRegionManager
name|MemMgr
decl_stmt|;
name|public
label|:
name|ValueManager
argument_list|(
name|llvm
operator|::
name|BumpPtrAllocator
operator|&
name|alloc
argument_list|,
name|ASTContext
operator|&
name|context
argument_list|)
operator|:
name|Context
argument_list|(
name|context
argument_list|)
operator|,
name|BasicVals
argument_list|(
name|Context
argument_list|,
name|alloc
argument_list|)
operator|,
name|SymMgr
argument_list|(
name|Context
argument_list|,
name|BasicVals
argument_list|,
name|alloc
argument_list|)
operator|,
name|MemMgr
argument_list|(
argument|alloc
argument_list|)
block|{}
comment|// Accessors to submanagers.
name|ASTContext
operator|&
name|getContext
argument_list|()
block|{
return|return
name|Context
return|;
block|}
specifier|const
name|ASTContext
operator|&
name|getContext
argument_list|()
specifier|const
block|{
return|return
name|Context
return|;
block|}
name|BasicValueFactory
modifier|&
name|getBasicValueFactory
parameter_list|()
block|{
return|return
name|BasicVals
return|;
block|}
specifier|const
name|BasicValueFactory
operator|&
name|getBasicValueFactory
argument_list|()
specifier|const
block|{
return|return
name|BasicVals
return|;
block|}
name|SymbolManager
modifier|&
name|getSymbolManager
parameter_list|()
block|{
return|return
name|SymMgr
return|;
block|}
specifier|const
name|SymbolManager
operator|&
name|getSymbolManager
argument_list|()
specifier|const
block|{
return|return
name|SymMgr
return|;
block|}
name|MemRegionManager
modifier|&
name|getRegionManager
parameter_list|()
block|{
return|return
name|MemMgr
return|;
block|}
specifier|const
name|MemRegionManager
operator|&
name|getRegionManager
argument_list|()
specifier|const
block|{
return|return
name|MemMgr
return|;
block|}
comment|// Forwarding methods to SymbolManager.
specifier|const
name|SymbolConjured
modifier|*
name|getConjuredSymbol
parameter_list|(
specifier|const
name|Stmt
modifier|*
name|E
parameter_list|,
name|QualType
name|T
parameter_list|,
name|unsigned
name|VisitCount
parameter_list|,
specifier|const
name|void
modifier|*
name|SymbolTag
init|=
literal|0
parameter_list|)
block|{
return|return
name|SymMgr
operator|.
name|getConjuredSymbol
argument_list|(
name|E
argument_list|,
name|T
argument_list|,
name|VisitCount
argument_list|,
name|SymbolTag
argument_list|)
return|;
block|}
specifier|const
name|SymbolConjured
modifier|*
name|getConjuredSymbol
parameter_list|(
specifier|const
name|Expr
modifier|*
name|E
parameter_list|,
name|unsigned
name|VisitCount
parameter_list|,
specifier|const
name|void
modifier|*
name|SymbolTag
init|=
literal|0
parameter_list|)
block|{
return|return
name|SymMgr
operator|.
name|getConjuredSymbol
argument_list|(
name|E
argument_list|,
name|VisitCount
argument_list|,
name|SymbolTag
argument_list|)
return|;
block|}
comment|// Aggregation methods that use multiple submanagers.
name|Loc
name|makeRegionVal
parameter_list|(
name|SymbolRef
name|Sym
parameter_list|)
block|{
return|return
name|Loc
operator|::
name|MakeVal
argument_list|(
name|MemMgr
operator|.
name|getSymbolicRegion
argument_list|(
name|Sym
argument_list|)
argument_list|)
return|;
block|}
comment|/// makeZeroVal - Construct an SVal representing '0' for the specified type.
name|SVal
name|makeZeroVal
parameter_list|(
name|QualType
name|T
parameter_list|)
function_decl|;
comment|/// makeZeroArrayIndex - Construct an SVal representing '0' index for array
comment|/// elements.
name|SVal
name|makeZeroArrayIndex
parameter_list|()
function_decl|;
comment|/// GetRegionValueSymbolVal - make a unique symbol for value of R.
name|SVal
name|getRegionValueSymbolVal
parameter_list|(
specifier|const
name|MemRegion
modifier|*
name|R
parameter_list|)
function_decl|;
name|SVal
name|getConjuredSymbolVal
parameter_list|(
specifier|const
name|Expr
modifier|*
name|E
parameter_list|,
name|unsigned
name|Count
parameter_list|)
function_decl|;
name|SVal
name|getConjuredSymbolVal
parameter_list|(
specifier|const
name|Expr
modifier|*
name|E
parameter_list|,
name|QualType
name|T
parameter_list|,
name|unsigned
name|Count
parameter_list|)
function_decl|;
name|SVal
name|getFunctionPointer
parameter_list|(
specifier|const
name|FunctionDecl
modifier|*
name|FD
parameter_list|)
function_decl|;
name|NonLoc
name|makeNonLoc
parameter_list|(
name|SymbolRef
name|sym
parameter_list|)
function_decl|;
name|NonLoc
name|makeNonLoc
argument_list|(
specifier|const
name|SymExpr
operator|*
name|lhs
argument_list|,
name|BinaryOperator
operator|::
name|Opcode
name|op
argument_list|,
specifier|const
name|llvm
operator|::
name|APSInt
operator|&
name|rhs
argument_list|,
name|QualType
name|T
argument_list|)
decl_stmt|;
name|NonLoc
name|makeNonLoc
argument_list|(
specifier|const
name|SymExpr
operator|*
name|lhs
argument_list|,
name|BinaryOperator
operator|::
name|Opcode
name|op
argument_list|,
specifier|const
name|SymExpr
operator|*
name|rhs
argument_list|,
name|QualType
name|T
argument_list|)
decl_stmt|;
name|NonLoc
name|makeTruthVal
parameter_list|(
name|bool
name|b
parameter_list|,
name|QualType
name|T
parameter_list|)
function_decl|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end clang namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

