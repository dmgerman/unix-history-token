begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//==- GRCoreEngine.h - Path-Sensitive Dataflow Engine ------------------*- C++ -*-//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines a generic engine for intraprocedural, path-sensitive,
end_comment

begin_comment
comment|//  dataflow analysis via graph reachability.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_ANALYSIS_GRENGINE
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_ANALYSIS_GRENGINE
end_define

begin_include
include|#
directive|include
file|"clang/AST/Expr.h"
end_include

begin_include
include|#
directive|include
file|"clang/Analysis/PathSensitive/ExplodedGraph.h"
end_include

begin_include
include|#
directive|include
file|"clang/Analysis/PathSensitive/GRWorkList.h"
end_include

begin_include
include|#
directive|include
file|"clang/Analysis/PathSensitive/GRBlockCounter.h"
end_include

begin_include
include|#
directive|include
file|"clang/Analysis/PathSensitive/GRAuditor.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/OwningPtr.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|GRStmtNodeBuilderImpl
decl_stmt|;
name|class
name|GRBranchNodeBuilderImpl
decl_stmt|;
name|class
name|GRIndirectGotoNodeBuilderImpl
decl_stmt|;
name|class
name|GRSwitchNodeBuilderImpl
decl_stmt|;
name|class
name|GREndPathNodeBuilderImpl
decl_stmt|;
name|class
name|GRWorkList
decl_stmt|;
comment|//===----------------------------------------------------------------------===//
comment|/// GRCoreEngineImpl - Implements the core logic of the graph-reachability
comment|///   analysis. It traverses the CFG and generates the ExplodedGraph.
comment|///   Program "states" are treated as opaque void pointers.
comment|///   The template class GRCoreEngine (which subclasses GRCoreEngineImpl)
comment|///   provides the matching component to the engine that knows the actual types
comment|///   for states.  Note that this engine only dispatches to transfer functions
comment|///   at the statement and block-level.  The analyses themselves must implement
comment|///   any transfer function logic and the sub-expression level (if any).
name|class
name|GRCoreEngineImpl
block|{
name|protected
label|:
name|friend
name|class
name|GRStmtNodeBuilderImpl
decl_stmt|;
name|friend
name|class
name|GRBranchNodeBuilderImpl
decl_stmt|;
name|friend
name|class
name|GRIndirectGotoNodeBuilderImpl
decl_stmt|;
name|friend
name|class
name|GRSwitchNodeBuilderImpl
decl_stmt|;
name|friend
name|class
name|GREndPathNodeBuilderImpl
decl_stmt|;
comment|/// G - The simulation graph.  Each node is a (location,state) pair.
name|llvm
operator|::
name|OwningPtr
operator|<
name|ExplodedGraphImpl
operator|>
name|G
expr_stmt|;
comment|/// WList - A set of queued nodes that need to be processed by the
comment|///  worklist algorithm.  It is up to the implementation of WList to decide
comment|///  the order that nodes are processed.
name|GRWorkList
modifier|*
name|WList
decl_stmt|;
comment|/// BCounterFactory - A factory object for created GRBlockCounter objects.
comment|///   These are used to record for key nodes in the ExplodedGraph the
comment|///   number of times different CFGBlocks have been visited along a path.
name|GRBlockCounter
operator|::
name|Factory
name|BCounterFactory
expr_stmt|;
name|void
name|GenerateNode
parameter_list|(
specifier|const
name|ProgramPoint
modifier|&
name|Loc
parameter_list|,
specifier|const
name|void
modifier|*
name|State
parameter_list|,
name|ExplodedNodeImpl
modifier|*
name|Pred
parameter_list|)
function_decl|;
comment|/// getInitialState - Gets the void* representing the initial 'state'
comment|///  of the analysis.  This is simply a wrapper (implemented
comment|///  in GRCoreEngine) that performs type erasure on the initial
comment|///  state returned by the checker object.
name|virtual
specifier|const
name|void
modifier|*
name|getInitialState
parameter_list|()
init|=
literal|0
function_decl|;
name|void
name|HandleBlockEdge
parameter_list|(
specifier|const
name|BlockEdge
modifier|&
name|E
parameter_list|,
name|ExplodedNodeImpl
modifier|*
name|Pred
parameter_list|)
function_decl|;
name|void
name|HandleBlockEntrance
parameter_list|(
specifier|const
name|BlockEntrance
modifier|&
name|E
parameter_list|,
name|ExplodedNodeImpl
modifier|*
name|Pred
parameter_list|)
function_decl|;
name|void
name|HandleBlockExit
parameter_list|(
name|CFGBlock
modifier|*
name|B
parameter_list|,
name|ExplodedNodeImpl
modifier|*
name|Pred
parameter_list|)
function_decl|;
name|void
name|HandlePostStmt
parameter_list|(
specifier|const
name|PostStmt
modifier|&
name|S
parameter_list|,
name|CFGBlock
modifier|*
name|B
parameter_list|,
name|unsigned
name|StmtIdx
parameter_list|,
name|ExplodedNodeImpl
modifier|*
name|Pred
parameter_list|)
function_decl|;
name|void
name|HandleBranch
parameter_list|(
name|Stmt
modifier|*
name|Cond
parameter_list|,
name|Stmt
modifier|*
name|Term
parameter_list|,
name|CFGBlock
modifier|*
name|B
parameter_list|,
name|ExplodedNodeImpl
modifier|*
name|Pred
parameter_list|)
function_decl|;
name|virtual
name|void
name|ProcessEndPath
parameter_list|(
name|GREndPathNodeBuilderImpl
modifier|&
name|Builder
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|ProcessBlockEntrance
parameter_list|(
name|CFGBlock
modifier|*
name|Blk
parameter_list|,
specifier|const
name|void
modifier|*
name|State
parameter_list|,
name|GRBlockCounter
name|BC
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|ProcessStmt
parameter_list|(
name|Stmt
modifier|*
name|S
parameter_list|,
name|GRStmtNodeBuilderImpl
modifier|&
name|Builder
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|ProcessBranch
parameter_list|(
name|Stmt
modifier|*
name|Condition
parameter_list|,
name|Stmt
modifier|*
name|Terminator
parameter_list|,
name|GRBranchNodeBuilderImpl
modifier|&
name|Builder
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|ProcessIndirectGoto
parameter_list|(
name|GRIndirectGotoNodeBuilderImpl
modifier|&
name|Builder
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|ProcessSwitch
parameter_list|(
name|GRSwitchNodeBuilderImpl
modifier|&
name|Builder
parameter_list|)
init|=
literal|0
function_decl|;
name|private
label|:
name|GRCoreEngineImpl
argument_list|(
specifier|const
name|GRCoreEngineImpl
operator|&
argument_list|)
expr_stmt|;
comment|// Do not implement.
name|GRCoreEngineImpl
modifier|&
name|operator
init|=
operator|(
specifier|const
name|GRCoreEngineImpl
operator|&
operator|)
decl_stmt|;
name|protected
label|:
name|GRCoreEngineImpl
argument_list|(
name|ExplodedGraphImpl
operator|*
name|g
argument_list|,
name|GRWorkList
operator|*
name|wl
argument_list|)
operator|:
name|G
argument_list|(
name|g
argument_list|)
operator|,
name|WList
argument_list|(
name|wl
argument_list|)
operator|,
name|BCounterFactory
argument_list|(
argument|g->getAllocator()
argument_list|)
block|{}
name|public
operator|:
comment|/// ExecuteWorkList - Run the worklist algorithm for a maximum number of
comment|///  steps.  Returns true if there is still simulation state on the worklist.
name|bool
name|ExecuteWorkList
argument_list|(
argument|unsigned Steps
argument_list|)
expr_stmt|;
name|virtual
operator|~
name|GRCoreEngineImpl
argument_list|()
expr_stmt|;
name|CFG
modifier|&
name|getCFG
parameter_list|()
block|{
return|return
name|G
operator|->
name|getCFG
argument_list|()
return|;
block|}
block|}
empty_stmt|;
name|class
name|GRStmtNodeBuilderImpl
block|{
name|GRCoreEngineImpl
modifier|&
name|Eng
decl_stmt|;
name|CFGBlock
modifier|&
name|B
decl_stmt|;
specifier|const
name|unsigned
name|Idx
decl_stmt|;
name|ExplodedNodeImpl
modifier|*
name|Pred
decl_stmt|;
name|ExplodedNodeImpl
modifier|*
name|LastNode
decl_stmt|;
typedef|typedef
name|llvm
operator|::
name|SmallPtrSet
operator|<
name|ExplodedNodeImpl
operator|*
operator|,
literal|5
operator|>
name|DeferredTy
expr_stmt|;
name|DeferredTy
name|Deferred
decl_stmt|;
name|void
name|GenerateAutoTransition
parameter_list|(
name|ExplodedNodeImpl
modifier|*
name|N
parameter_list|)
function_decl|;
name|public
label|:
name|GRStmtNodeBuilderImpl
argument_list|(
argument|CFGBlock* b
argument_list|,
argument|unsigned idx
argument_list|,
argument|ExplodedNodeImpl* N
argument_list|,
argument|GRCoreEngineImpl* e
argument_list|)
empty_stmt|;
operator|~
name|GRStmtNodeBuilderImpl
argument_list|()
expr_stmt|;
name|ExplodedNodeImpl
operator|*
name|getBasePredecessor
argument_list|()
specifier|const
block|{
return|return
name|Pred
return|;
block|}
name|ExplodedNodeImpl
operator|*
name|getLastNode
argument_list|()
specifier|const
block|{
return|return
name|LastNode
operator|?
operator|(
name|LastNode
operator|->
name|isSink
argument_list|()
operator|?
name|NULL
operator|:
name|LastNode
operator|)
operator|:
name|NULL
return|;
block|}
name|GRBlockCounter
name|getBlockCounter
argument_list|()
specifier|const
block|{
return|return
name|Eng
operator|.
name|WList
operator|->
name|getBlockCounter
argument_list|()
return|;
block|}
name|unsigned
name|getCurrentBlockCount
argument_list|()
specifier|const
block|{
return|return
name|getBlockCounter
argument_list|()
operator|.
name|getNumVisited
argument_list|(
name|B
operator|.
name|getBlockID
argument_list|()
argument_list|)
return|;
block|}
name|ExplodedNodeImpl
modifier|*
name|generateNodeImpl
parameter_list|(
name|PostStmt
name|PP
parameter_list|,
specifier|const
name|void
modifier|*
name|State
parameter_list|,
name|ExplodedNodeImpl
modifier|*
name|Pred
parameter_list|)
function_decl|;
name|ExplodedNodeImpl
modifier|*
name|generateNodeImpl
argument_list|(
name|Stmt
operator|*
name|S
argument_list|,
specifier|const
name|void
operator|*
name|State
argument_list|,
name|ExplodedNodeImpl
operator|*
name|Pred
argument_list|,
name|ProgramPoint
operator|::
name|Kind
name|K
operator|=
name|ProgramPoint
operator|::
name|PostStmtKind
argument_list|,
specifier|const
name|void
operator|*
name|tag
operator|=
literal|0
argument_list|)
decl_stmt|;
name|ExplodedNodeImpl
modifier|*
name|generateNodeImpl
argument_list|(
name|Stmt
operator|*
name|S
argument_list|,
specifier|const
name|void
operator|*
name|State
argument_list|,
name|ProgramPoint
operator|::
name|Kind
name|K
operator|=
name|ProgramPoint
operator|::
name|PostStmtKind
argument_list|,
specifier|const
name|void
operator|*
name|tag
operator|=
literal|0
argument_list|)
block|{
name|ExplodedNodeImpl
modifier|*
name|N
init|=
name|getLastNode
argument_list|()
decl_stmt|;
name|assert
argument_list|(
name|N
operator|&&
literal|"Predecessor of new node is infeasible."
argument_list|)
expr_stmt|;
return|return
name|generateNodeImpl
argument_list|(
name|S
argument_list|,
name|State
argument_list|,
name|N
argument_list|,
name|K
argument_list|,
name|tag
argument_list|)
return|;
block|}
name|ExplodedNodeImpl
modifier|*
name|generateNodeImpl
parameter_list|(
name|Stmt
modifier|*
name|S
parameter_list|,
specifier|const
name|void
modifier|*
name|State
parameter_list|,
specifier|const
name|void
modifier|*
name|tag
init|=
literal|0
parameter_list|)
block|{
name|ExplodedNodeImpl
modifier|*
name|N
init|=
name|getLastNode
argument_list|()
decl_stmt|;
name|assert
argument_list|(
name|N
operator|&&
literal|"Predecessor of new node is infeasible."
argument_list|)
expr_stmt|;
return|return
name|generateNodeImpl
argument_list|(
name|S
argument_list|,
name|State
argument_list|,
name|N
argument_list|,
name|ProgramPoint
operator|::
name|PostStmtKind
argument_list|,
name|tag
argument_list|)
return|;
block|}
comment|/// getStmt - Return the current block-level expression associated with
comment|///  this builder.
name|Stmt
operator|*
name|getStmt
argument_list|()
specifier|const
block|{
return|return
name|B
index|[
name|Idx
index|]
return|;
block|}
comment|/// getBlock - Return the CFGBlock associated with the block-level expression
comment|///  of this builder.
name|CFGBlock
operator|*
name|getBlock
argument_list|()
specifier|const
block|{
return|return
operator|&
name|B
return|;
block|}
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|STATE
operator|>
name|class
name|GRStmtNodeBuilder
block|{
name|public
operator|:
typedef|typedef
name|STATE
name|StateTy
typedef|;
typedef|typedef
name|typename
name|StateTy
operator|::
name|ManagerTy
name|StateManagerTy
expr_stmt|;
typedef|typedef
name|ExplodedNode
operator|<
name|StateTy
operator|>
name|NodeTy
expr_stmt|;
name|private
label|:
name|GRStmtNodeBuilderImpl
modifier|&
name|NB
decl_stmt|;
name|StateManagerTy
modifier|&
name|Mgr
decl_stmt|;
specifier|const
name|StateTy
modifier|*
name|CleanedState
decl_stmt|;
name|GRAuditor
operator|<
name|StateTy
operator|>
operator|*
name|Auditor
expr_stmt|;
name|public
label|:
name|GRStmtNodeBuilder
argument_list|(
name|GRStmtNodeBuilderImpl
operator|&
name|nb
argument_list|,
name|StateManagerTy
operator|&
name|mgr
argument_list|)
operator|:
name|NB
argument_list|(
name|nb
argument_list|)
operator|,
name|Mgr
argument_list|(
name|mgr
argument_list|)
operator|,
name|Auditor
argument_list|(
literal|0
argument_list|)
operator|,
name|PurgingDeadSymbols
argument_list|(
name|false
argument_list|)
operator|,
name|BuildSinks
argument_list|(
name|false
argument_list|)
operator|,
name|HasGeneratedNode
argument_list|(
name|false
argument_list|)
operator|,
name|PointKind
argument_list|(
name|ProgramPoint
operator|::
name|PostStmtKind
argument_list|)
operator|,
name|Tag
argument_list|(
literal|0
argument_list|)
block|{
name|CleanedState
operator|=
name|getLastNode
argument_list|()
operator|->
name|getState
argument_list|()
block|;   }
name|void
name|setAuditor
argument_list|(
argument|GRAuditor<StateTy>* A
argument_list|)
block|{
name|Auditor
operator|=
name|A
block|;   }
name|NodeTy
operator|*
name|getLastNode
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|NodeTy
operator|*
operator|>
operator|(
name|NB
operator|.
name|getLastNode
argument_list|()
operator|)
return|;
block|}
name|NodeTy
modifier|*
name|generateNode
parameter_list|(
name|PostStmt
name|PP
parameter_list|,
specifier|const
name|StateTy
modifier|*
name|St
parameter_list|,
name|NodeTy
modifier|*
name|Pred
parameter_list|)
block|{
name|HasGeneratedNode
operator|=
name|true
expr_stmt|;
return|return
name|static_cast
operator|<
name|NodeTy
operator|*
operator|>
operator|(
name|NB
operator|.
name|generateNodeImpl
argument_list|(
name|PP
argument_list|,
name|St
argument_list|,
name|Pred
argument_list|)
operator|)
return|;
block|}
name|NodeTy
modifier|*
name|generateNode
argument_list|(
name|Stmt
operator|*
name|S
argument_list|,
specifier|const
name|StateTy
operator|*
name|St
argument_list|,
name|NodeTy
operator|*
name|Pred
argument_list|,
name|ProgramPoint
operator|::
name|Kind
name|K
argument_list|)
block|{
name|HasGeneratedNode
operator|=
name|true
expr_stmt|;
if|if
condition|(
name|PurgingDeadSymbols
condition|)
name|K
operator|=
name|ProgramPoint
operator|::
name|PostPurgeDeadSymbolsKind
expr_stmt|;
return|return
name|static_cast
operator|<
name|NodeTy
operator|*
operator|>
operator|(
name|NB
operator|.
name|generateNodeImpl
argument_list|(
name|S
argument_list|,
name|St
argument_list|,
name|Pred
argument_list|,
name|K
argument_list|,
name|Tag
argument_list|)
operator|)
return|;
block|}
name|NodeTy
modifier|*
name|generateNode
parameter_list|(
name|Stmt
modifier|*
name|S
parameter_list|,
specifier|const
name|StateTy
modifier|*
name|St
parameter_list|,
name|NodeTy
modifier|*
name|Pred
parameter_list|)
block|{
return|return
name|generateNode
argument_list|(
name|S
argument_list|,
name|St
argument_list|,
name|Pred
argument_list|,
name|PointKind
argument_list|)
return|;
block|}
name|NodeTy
modifier|*
name|generateNode
argument_list|(
name|Stmt
operator|*
name|S
argument_list|,
specifier|const
name|StateTy
operator|*
name|St
argument_list|,
name|ProgramPoint
operator|::
name|Kind
name|K
argument_list|)
block|{
name|HasGeneratedNode
operator|=
name|true
expr_stmt|;
if|if
condition|(
name|PurgingDeadSymbols
condition|)
name|K
operator|=
name|ProgramPoint
operator|::
name|PostPurgeDeadSymbolsKind
expr_stmt|;
return|return
name|static_cast
operator|<
name|NodeTy
operator|*
operator|>
operator|(
name|NB
operator|.
name|generateNodeImpl
argument_list|(
name|S
argument_list|,
name|St
argument_list|,
name|K
argument_list|,
name|Tag
argument_list|)
operator|)
return|;
block|}
name|NodeTy
modifier|*
name|generateNode
parameter_list|(
name|Stmt
modifier|*
name|S
parameter_list|,
specifier|const
name|StateTy
modifier|*
name|St
parameter_list|)
block|{
return|return
name|generateNode
argument_list|(
name|S
argument_list|,
name|St
argument_list|,
name|PointKind
argument_list|)
return|;
block|}
name|GRBlockCounter
name|getBlockCounter
argument_list|()
specifier|const
block|{
return|return
name|NB
operator|.
name|getBlockCounter
argument_list|()
return|;
block|}
name|unsigned
name|getCurrentBlockCount
argument_list|()
specifier|const
block|{
return|return
name|NB
operator|.
name|getCurrentBlockCount
argument_list|()
return|;
block|}
specifier|const
name|StateTy
modifier|*
name|GetState
argument_list|(
name|NodeTy
operator|*
name|Pred
argument_list|)
decl|const
block|{
if|if
condition|(
operator|(
name|ExplodedNodeImpl
operator|*
operator|)
name|Pred
operator|==
name|NB
operator|.
name|getBasePredecessor
argument_list|()
condition|)
return|return
name|CleanedState
return|;
else|else
return|return
name|Pred
operator|->
name|getState
argument_list|()
return|;
block|}
name|void
name|SetCleanedState
parameter_list|(
specifier|const
name|StateTy
modifier|*
name|St
parameter_list|)
block|{
name|CleanedState
operator|=
name|St
expr_stmt|;
block|}
name|NodeTy
modifier|*
name|MakeNode
argument_list|(
name|ExplodedNodeSet
operator|<
name|StateTy
operator|>
operator|&
name|Dst
argument_list|,
name|Stmt
operator|*
name|S
argument_list|,
name|NodeTy
operator|*
name|Pred
argument_list|,
specifier|const
name|StateTy
operator|*
name|St
argument_list|)
block|{
return|return
name|MakeNode
argument_list|(
name|Dst
argument_list|,
name|S
argument_list|,
name|Pred
argument_list|,
name|St
argument_list|,
name|PointKind
argument_list|)
return|;
block|}
name|NodeTy
modifier|*
name|MakeNode
argument_list|(
name|ExplodedNodeSet
operator|<
name|StateTy
operator|>
operator|&
name|Dst
argument_list|,
name|Stmt
operator|*
name|S
argument_list|,
name|NodeTy
operator|*
name|Pred
argument_list|,
specifier|const
name|StateTy
operator|*
name|St
argument_list|,
name|ProgramPoint
operator|::
name|Kind
name|K
argument_list|)
block|{
specifier|const
name|StateTy
modifier|*
name|PredState
init|=
name|GetState
argument_list|(
name|Pred
argument_list|)
decl_stmt|;
comment|// If the state hasn't changed, don't generate a new node.
if|if
condition|(
operator|!
name|BuildSinks
operator|&&
name|St
operator|==
name|PredState
operator|&&
name|Auditor
operator|==
literal|0
condition|)
block|{
name|Dst
operator|.
name|Add
argument_list|(
name|Pred
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
name|NodeTy
modifier|*
name|N
init|=
name|generateNode
argument_list|(
name|S
argument_list|,
name|St
argument_list|,
name|Pred
argument_list|,
name|K
argument_list|)
decl_stmt|;
if|if
condition|(
name|N
condition|)
block|{
if|if
condition|(
name|BuildSinks
condition|)
name|N
operator|->
name|markAsSink
argument_list|()
expr_stmt|;
else|else
block|{
if|if
condition|(
name|Auditor
operator|&&
name|Auditor
operator|->
name|Audit
argument_list|(
name|N
argument_list|,
name|Mgr
argument_list|)
condition|)
name|N
operator|->
name|markAsSink
argument_list|()
expr_stmt|;
name|Dst
operator|.
name|Add
argument_list|(
name|N
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|N
return|;
block|}
name|NodeTy
modifier|*
name|MakeSinkNode
argument_list|(
name|ExplodedNodeSet
operator|<
name|StateTy
operator|>
operator|&
name|Dst
argument_list|,
name|Stmt
operator|*
name|S
argument_list|,
name|NodeTy
operator|*
name|Pred
argument_list|,
specifier|const
name|StateTy
operator|*
name|St
argument_list|)
block|{
name|bool
name|Tmp
init|=
name|BuildSinks
decl_stmt|;
name|BuildSinks
operator|=
name|true
expr_stmt|;
name|NodeTy
modifier|*
name|N
init|=
name|MakeNode
argument_list|(
name|Dst
argument_list|,
name|S
argument_list|,
name|Pred
argument_list|,
name|St
argument_list|)
decl_stmt|;
name|BuildSinks
operator|=
name|Tmp
expr_stmt|;
return|return
name|N
return|;
block|}
name|bool
name|PurgingDeadSymbols
decl_stmt|;
name|bool
name|BuildSinks
decl_stmt|;
name|bool
name|HasGeneratedNode
decl_stmt|;
name|ProgramPoint
operator|::
name|Kind
name|PointKind
expr_stmt|;
specifier|const
name|void
modifier|*
name|Tag
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|GRBranchNodeBuilderImpl
block|{
name|GRCoreEngineImpl
modifier|&
name|Eng
decl_stmt|;
name|CFGBlock
modifier|*
name|Src
decl_stmt|;
name|CFGBlock
modifier|*
name|DstT
decl_stmt|;
name|CFGBlock
modifier|*
name|DstF
decl_stmt|;
name|ExplodedNodeImpl
modifier|*
name|Pred
decl_stmt|;
typedef|typedef
name|llvm
operator|::
name|SmallVector
operator|<
name|ExplodedNodeImpl
operator|*
operator|,
literal|3
operator|>
name|DeferredTy
expr_stmt|;
name|DeferredTy
name|Deferred
decl_stmt|;
name|bool
name|GeneratedTrue
decl_stmt|;
name|bool
name|GeneratedFalse
decl_stmt|;
name|public
label|:
name|GRBranchNodeBuilderImpl
argument_list|(
name|CFGBlock
operator|*
name|src
argument_list|,
name|CFGBlock
operator|*
name|dstT
argument_list|,
name|CFGBlock
operator|*
name|dstF
argument_list|,
name|ExplodedNodeImpl
operator|*
name|pred
argument_list|,
name|GRCoreEngineImpl
operator|*
name|e
argument_list|)
operator|:
name|Eng
argument_list|(
operator|*
name|e
argument_list|)
operator|,
name|Src
argument_list|(
name|src
argument_list|)
operator|,
name|DstT
argument_list|(
name|dstT
argument_list|)
operator|,
name|DstF
argument_list|(
name|dstF
argument_list|)
operator|,
name|Pred
argument_list|(
name|pred
argument_list|)
operator|,
name|GeneratedTrue
argument_list|(
name|false
argument_list|)
operator|,
name|GeneratedFalse
argument_list|(
argument|false
argument_list|)
block|{}
operator|~
name|GRBranchNodeBuilderImpl
argument_list|()
expr_stmt|;
name|ExplodedNodeImpl
operator|*
name|getPredecessor
argument_list|()
specifier|const
block|{
return|return
name|Pred
return|;
block|}
specifier|const
name|ExplodedGraphImpl
operator|&
name|getGraph
argument_list|()
specifier|const
block|{
return|return
operator|*
name|Eng
operator|.
name|G
return|;
block|}
name|GRBlockCounter
name|getBlockCounter
argument_list|()
specifier|const
block|{
return|return
name|Eng
operator|.
name|WList
operator|->
name|getBlockCounter
argument_list|()
return|;
block|}
name|ExplodedNodeImpl
modifier|*
name|generateNodeImpl
parameter_list|(
specifier|const
name|void
modifier|*
name|State
parameter_list|,
name|bool
name|branch
parameter_list|)
function_decl|;
name|CFGBlock
modifier|*
name|getTargetBlock
argument_list|(
name|bool
name|branch
argument_list|)
decl|const
block|{
return|return
name|branch
condition|?
name|DstT
else|:
name|DstF
return|;
block|}
name|void
name|markInfeasible
parameter_list|(
name|bool
name|branch
parameter_list|)
block|{
if|if
condition|(
name|branch
condition|)
name|GeneratedTrue
operator|=
name|true
expr_stmt|;
else|else
name|GeneratedFalse
operator|=
name|true
expr_stmt|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|STATE
operator|>
name|class
name|GRBranchNodeBuilder
block|{
typedef|typedef
name|STATE
name|StateTy
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|ExplodedGraph
operator|<
name|StateTy
operator|>
name|GraphTy
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|GraphTy
operator|::
name|NodeTy
name|NodeTy
expr_stmt|;
end_typedef

begin_decl_stmt
name|GRBranchNodeBuilderImpl
modifier|&
name|NB
decl_stmt|;
end_decl_stmt

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|GRBranchNodeBuilder
argument_list|(
name|GRBranchNodeBuilderImpl
operator|&
name|nb
argument_list|)
operator|:
name|NB
argument_list|(
argument|nb
argument_list|)
block|{}
specifier|const
name|GraphTy
operator|&
name|getGraph
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
specifier|const
name|GraphTy
operator|&
operator|>
operator|(
name|NB
operator|.
name|getGraph
argument_list|()
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|NodeTy
operator|*
name|getPredecessor
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|NodeTy
operator|*
operator|>
operator|(
name|NB
operator|.
name|getPredecessor
argument_list|()
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|const
name|StateTy
operator|*
name|getState
argument_list|()
specifier|const
block|{
return|return
name|getPredecessor
argument_list|()
operator|->
name|getState
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|NodeTy
modifier|*
name|generateNode
parameter_list|(
specifier|const
name|StateTy
modifier|*
name|St
parameter_list|,
name|bool
name|branch
parameter_list|)
block|{
return|return
name|static_cast
operator|<
name|NodeTy
operator|*
operator|>
operator|(
name|NB
operator|.
name|generateNodeImpl
argument_list|(
name|St
argument_list|,
name|branch
argument_list|)
operator|)
return|;
block|}
end_function

begin_expr_stmt
name|GRBlockCounter
name|getBlockCounter
argument_list|()
specifier|const
block|{
return|return
name|NB
operator|.
name|getBlockCounter
argument_list|()
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|CFGBlock
modifier|*
name|getTargetBlock
argument_list|(
name|bool
name|branch
argument_list|)
decl|const
block|{
return|return
name|NB
operator|.
name|getTargetBlock
argument_list|(
name|branch
argument_list|)
return|;
block|}
end_decl_stmt

begin_function
name|void
name|markInfeasible
parameter_list|(
name|bool
name|branch
parameter_list|)
block|{
name|NB
operator|.
name|markInfeasible
argument_list|(
name|branch
argument_list|)
expr_stmt|;
block|}
end_function

begin_decl_stmt
unit|};
name|class
name|GRIndirectGotoNodeBuilderImpl
block|{
name|GRCoreEngineImpl
modifier|&
name|Eng
decl_stmt|;
name|CFGBlock
modifier|*
name|Src
decl_stmt|;
name|CFGBlock
modifier|&
name|DispatchBlock
decl_stmt|;
name|Expr
modifier|*
name|E
decl_stmt|;
name|ExplodedNodeImpl
modifier|*
name|Pred
decl_stmt|;
name|public
label|:
name|GRIndirectGotoNodeBuilderImpl
argument_list|(
name|ExplodedNodeImpl
operator|*
name|pred
argument_list|,
name|CFGBlock
operator|*
name|src
argument_list|,
name|Expr
operator|*
name|e
argument_list|,
name|CFGBlock
operator|*
name|dispatch
argument_list|,
name|GRCoreEngineImpl
operator|*
name|eng
argument_list|)
operator|:
name|Eng
argument_list|(
operator|*
name|eng
argument_list|)
operator|,
name|Src
argument_list|(
name|src
argument_list|)
operator|,
name|DispatchBlock
argument_list|(
operator|*
name|dispatch
argument_list|)
operator|,
name|E
argument_list|(
name|e
argument_list|)
operator|,
name|Pred
argument_list|(
argument|pred
argument_list|)
block|{}
name|class
name|Iterator
block|{
name|CFGBlock
operator|::
name|succ_iterator
name|I
block|;
name|friend
name|class
name|GRIndirectGotoNodeBuilderImpl
block|;
name|Iterator
argument_list|(
argument|CFGBlock::succ_iterator i
argument_list|)
operator|:
name|I
argument_list|(
argument|i
argument_list|)
block|{}
name|public
operator|:
name|Iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|I
block|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|Iterator
operator|&
name|X
operator|)
specifier|const
block|{
return|return
name|I
operator|!=
name|X
operator|.
name|I
return|;
block|}
name|LabelStmt
operator|*
name|getLabel
argument_list|()
specifier|const
block|{
return|return
name|llvm
operator|::
name|cast
operator|<
name|LabelStmt
operator|>
operator|(
operator|(
operator|*
name|I
operator|)
operator|->
name|getLabel
argument_list|()
operator|)
return|;
block|}
name|CFGBlock
operator|*
name|getBlock
argument_list|()
specifier|const
block|{
return|return
operator|*
name|I
return|;
block|}
expr|}
block|;
name|Iterator
name|begin
argument_list|()
block|{
return|return
name|Iterator
argument_list|(
name|DispatchBlock
operator|.
name|succ_begin
argument_list|()
argument_list|)
return|;
block|}
name|Iterator
name|end
argument_list|()
block|{
return|return
name|Iterator
argument_list|(
name|DispatchBlock
operator|.
name|succ_end
argument_list|()
argument_list|)
return|;
block|}
name|ExplodedNodeImpl
operator|*
name|generateNodeImpl
argument_list|(
argument|const Iterator& I
argument_list|,
argument|const void* State
argument_list|,
argument|bool isSink
argument_list|)
block|;
name|Expr
operator|*
name|getTarget
argument_list|()
specifier|const
block|{
return|return
name|E
return|;
block|}
specifier|const
name|void
operator|*
name|getState
argument_list|()
specifier|const
block|{
return|return
name|Pred
operator|->
name|State
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|STATE
operator|>
name|class
name|GRIndirectGotoNodeBuilder
block|{
typedef|typedef
name|STATE
name|StateTy
typedef|;
typedef|typedef
name|ExplodedGraph
operator|<
name|StateTy
operator|>
name|GraphTy
expr_stmt|;
typedef|typedef
name|typename
name|GraphTy
operator|::
name|NodeTy
name|NodeTy
expr_stmt|;
name|GRIndirectGotoNodeBuilderImpl
modifier|&
name|NB
decl_stmt|;
name|public
label|:
name|GRIndirectGotoNodeBuilder
argument_list|(
name|GRIndirectGotoNodeBuilderImpl
operator|&
name|nb
argument_list|)
operator|:
name|NB
argument_list|(
argument|nb
argument_list|)
block|{}
typedef|typedef
name|GRIndirectGotoNodeBuilderImpl
operator|::
name|Iterator
name|iterator
expr_stmt|;
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|NB
operator|.
name|begin
argument_list|()
return|;
block|}
name|iterator
name|end
parameter_list|()
block|{
return|return
name|NB
operator|.
name|end
argument_list|()
return|;
block|}
name|Expr
operator|*
name|getTarget
argument_list|()
specifier|const
block|{
return|return
name|NB
operator|.
name|getTarget
argument_list|()
return|;
block|}
name|NodeTy
modifier|*
name|generateNode
parameter_list|(
specifier|const
name|iterator
modifier|&
name|I
parameter_list|,
specifier|const
name|StateTy
modifier|*
name|St
parameter_list|,
name|bool
name|isSink
init|=
name|false
parameter_list|)
block|{
return|return
name|static_cast
operator|<
name|NodeTy
operator|*
operator|>
operator|(
name|NB
operator|.
name|generateNodeImpl
argument_list|(
name|I
argument_list|,
name|St
argument_list|,
name|isSink
argument_list|)
operator|)
return|;
block|}
specifier|const
name|StateTy
operator|*
name|getState
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
specifier|const
name|StateTy
operator|*
operator|>
operator|(
name|NB
operator|.
name|getState
argument_list|()
operator|)
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|GRSwitchNodeBuilderImpl
block|{
name|GRCoreEngineImpl
modifier|&
name|Eng
decl_stmt|;
name|CFGBlock
modifier|*
name|Src
decl_stmt|;
name|Expr
modifier|*
name|Condition
decl_stmt|;
name|ExplodedNodeImpl
modifier|*
name|Pred
decl_stmt|;
name|public
label|:
name|GRSwitchNodeBuilderImpl
argument_list|(
name|ExplodedNodeImpl
operator|*
name|pred
argument_list|,
name|CFGBlock
operator|*
name|src
argument_list|,
name|Expr
operator|*
name|condition
argument_list|,
name|GRCoreEngineImpl
operator|*
name|eng
argument_list|)
operator|:
name|Eng
argument_list|(
operator|*
name|eng
argument_list|)
operator|,
name|Src
argument_list|(
name|src
argument_list|)
operator|,
name|Condition
argument_list|(
name|condition
argument_list|)
operator|,
name|Pred
argument_list|(
argument|pred
argument_list|)
block|{}
name|class
name|Iterator
block|{
name|CFGBlock
operator|::
name|succ_reverse_iterator
name|I
block|;
name|friend
name|class
name|GRSwitchNodeBuilderImpl
block|;
name|Iterator
argument_list|(
argument|CFGBlock::succ_reverse_iterator i
argument_list|)
operator|:
name|I
argument_list|(
argument|i
argument_list|)
block|{}
name|public
operator|:
name|Iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|I
block|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|Iterator
operator|&
name|X
operator|)
specifier|const
block|{
return|return
name|I
operator|!=
name|X
operator|.
name|I
return|;
block|}
name|CaseStmt
operator|*
name|getCase
argument_list|()
specifier|const
block|{
return|return
name|llvm
operator|::
name|cast
operator|<
name|CaseStmt
operator|>
operator|(
operator|(
operator|*
name|I
operator|)
operator|->
name|getLabel
argument_list|()
operator|)
return|;
block|}
name|CFGBlock
operator|*
name|getBlock
argument_list|()
specifier|const
block|{
return|return
operator|*
name|I
return|;
block|}
expr|}
block|;
name|Iterator
name|begin
argument_list|()
block|{
return|return
name|Iterator
argument_list|(
name|Src
operator|->
name|succ_rbegin
argument_list|()
operator|+
literal|1
argument_list|)
return|;
block|}
name|Iterator
name|end
argument_list|()
block|{
return|return
name|Iterator
argument_list|(
name|Src
operator|->
name|succ_rend
argument_list|()
argument_list|)
return|;
block|}
name|ExplodedNodeImpl
operator|*
name|generateCaseStmtNodeImpl
argument_list|(
specifier|const
name|Iterator
operator|&
name|I
argument_list|,
specifier|const
name|void
operator|*
name|State
argument_list|)
block|;
name|ExplodedNodeImpl
operator|*
name|generateDefaultCaseNodeImpl
argument_list|(
argument|const void* State
argument_list|,
argument|bool isSink
argument_list|)
block|;
name|Expr
operator|*
name|getCondition
argument_list|()
specifier|const
block|{
return|return
name|Condition
return|;
block|}
specifier|const
name|void
operator|*
name|getState
argument_list|()
specifier|const
block|{
return|return
name|Pred
operator|->
name|State
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|STATE
operator|>
name|class
name|GRSwitchNodeBuilder
block|{
typedef|typedef
name|STATE
name|StateTy
typedef|;
typedef|typedef
name|ExplodedGraph
operator|<
name|StateTy
operator|>
name|GraphTy
expr_stmt|;
typedef|typedef
name|typename
name|GraphTy
operator|::
name|NodeTy
name|NodeTy
expr_stmt|;
name|GRSwitchNodeBuilderImpl
modifier|&
name|NB
decl_stmt|;
name|public
label|:
name|GRSwitchNodeBuilder
argument_list|(
name|GRSwitchNodeBuilderImpl
operator|&
name|nb
argument_list|)
operator|:
name|NB
argument_list|(
argument|nb
argument_list|)
block|{}
typedef|typedef
name|GRSwitchNodeBuilderImpl
operator|::
name|Iterator
name|iterator
expr_stmt|;
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|NB
operator|.
name|begin
argument_list|()
return|;
block|}
name|iterator
name|end
parameter_list|()
block|{
return|return
name|NB
operator|.
name|end
argument_list|()
return|;
block|}
name|Expr
operator|*
name|getCondition
argument_list|()
specifier|const
block|{
return|return
name|NB
operator|.
name|getCondition
argument_list|()
return|;
block|}
name|NodeTy
modifier|*
name|generateCaseStmtNode
parameter_list|(
specifier|const
name|iterator
modifier|&
name|I
parameter_list|,
specifier|const
name|StateTy
modifier|*
name|St
parameter_list|)
block|{
return|return
name|static_cast
operator|<
name|NodeTy
operator|*
operator|>
operator|(
name|NB
operator|.
name|generateCaseStmtNodeImpl
argument_list|(
name|I
argument_list|,
name|St
argument_list|)
operator|)
return|;
block|}
name|NodeTy
modifier|*
name|generateDefaultCaseNode
parameter_list|(
specifier|const
name|StateTy
modifier|*
name|St
parameter_list|,
name|bool
name|isSink
init|=
name|false
parameter_list|)
block|{
return|return
name|static_cast
operator|<
name|NodeTy
operator|*
operator|>
operator|(
name|NB
operator|.
name|generateDefaultCaseNodeImpl
argument_list|(
name|St
argument_list|,
name|isSink
argument_list|)
operator|)
return|;
block|}
specifier|const
name|StateTy
operator|*
name|getState
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
specifier|const
name|StateTy
operator|*
operator|>
operator|(
name|NB
operator|.
name|getState
argument_list|()
operator|)
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|GREndPathNodeBuilderImpl
block|{
name|GRCoreEngineImpl
modifier|&
name|Eng
decl_stmt|;
name|CFGBlock
modifier|&
name|B
decl_stmt|;
name|ExplodedNodeImpl
modifier|*
name|Pred
decl_stmt|;
name|bool
name|HasGeneratedNode
decl_stmt|;
name|public
label|:
name|GREndPathNodeBuilderImpl
argument_list|(
name|CFGBlock
operator|*
name|b
argument_list|,
name|ExplodedNodeImpl
operator|*
name|N
argument_list|,
name|GRCoreEngineImpl
operator|*
name|e
argument_list|)
operator|:
name|Eng
argument_list|(
operator|*
name|e
argument_list|)
operator|,
name|B
argument_list|(
operator|*
name|b
argument_list|)
operator|,
name|Pred
argument_list|(
name|N
argument_list|)
operator|,
name|HasGeneratedNode
argument_list|(
argument|false
argument_list|)
block|{}
operator|~
name|GREndPathNodeBuilderImpl
argument_list|()
expr_stmt|;
name|ExplodedNodeImpl
operator|*
name|getPredecessor
argument_list|()
specifier|const
block|{
return|return
name|Pred
return|;
block|}
name|GRBlockCounter
name|getBlockCounter
argument_list|()
specifier|const
block|{
return|return
name|Eng
operator|.
name|WList
operator|->
name|getBlockCounter
argument_list|()
return|;
block|}
name|unsigned
name|getCurrentBlockCount
argument_list|()
specifier|const
block|{
return|return
name|getBlockCounter
argument_list|()
operator|.
name|getNumVisited
argument_list|(
name|B
operator|.
name|getBlockID
argument_list|()
argument_list|)
return|;
block|}
name|ExplodedNodeImpl
modifier|*
name|generateNodeImpl
parameter_list|(
specifier|const
name|void
modifier|*
name|State
parameter_list|,
specifier|const
name|void
modifier|*
name|tag
init|=
literal|0
parameter_list|,
name|ExplodedNodeImpl
modifier|*
name|P
init|=
literal|0
parameter_list|)
function_decl|;
name|CFGBlock
operator|*
name|getBlock
argument_list|()
specifier|const
block|{
return|return
operator|&
name|B
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|STATE
operator|>
name|class
name|GREndPathNodeBuilder
block|{
typedef|typedef
name|STATE
name|StateTy
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|ExplodedNode
operator|<
name|StateTy
operator|>
name|NodeTy
expr_stmt|;
end_typedef

begin_decl_stmt
name|GREndPathNodeBuilderImpl
modifier|&
name|NB
decl_stmt|;
end_decl_stmt

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|GREndPathNodeBuilder
argument_list|(
name|GREndPathNodeBuilderImpl
operator|&
name|nb
argument_list|)
operator|:
name|NB
argument_list|(
argument|nb
argument_list|)
block|{}
name|NodeTy
operator|*
name|getPredecessor
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|NodeTy
operator|*
operator|>
operator|(
name|NB
operator|.
name|getPredecessor
argument_list|()
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|GRBlockCounter
name|getBlockCounter
argument_list|()
specifier|const
block|{
return|return
name|NB
operator|.
name|getBlockCounter
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|unsigned
name|getCurrentBlockCount
argument_list|()
specifier|const
block|{
return|return
name|NB
operator|.
name|getCurrentBlockCount
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|const
name|StateTy
operator|*
name|getState
argument_list|()
specifier|const
block|{
return|return
name|getPredecessor
argument_list|()
operator|->
name|getState
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|NodeTy
modifier|*
name|MakeNode
parameter_list|(
specifier|const
name|StateTy
modifier|*
name|St
parameter_list|,
specifier|const
name|void
modifier|*
name|tag
init|=
literal|0
parameter_list|)
block|{
return|return
name|static_cast
operator|<
name|NodeTy
operator|*
operator|>
operator|(
name|NB
operator|.
name|generateNodeImpl
argument_list|(
name|St
argument_list|,
name|tag
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
name|NodeTy
modifier|*
name|generateNode
parameter_list|(
specifier|const
name|StateTy
modifier|*
name|St
parameter_list|,
name|NodeTy
modifier|*
name|Pred
parameter_list|,
specifier|const
name|void
modifier|*
name|tag
init|=
literal|0
parameter_list|)
block|{
return|return
name|static_cast
operator|<
name|NodeTy
operator|*
operator|>
operator|(
name|NB
operator|.
name|generateNodeImpl
argument_list|(
name|St
argument_list|,
name|tag
argument_list|,
name|Pred
argument_list|)
operator|)
return|;
block|}
end_function

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|SUBENGINE
operator|>
name|class
name|GRCoreEngine
operator|:
name|public
name|GRCoreEngineImpl
block|{
name|public
operator|:
typedef|typedef
name|SUBENGINE
name|SubEngineTy
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|SubEngineTy
operator|::
name|StateTy
name|StateTy
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|StateTy
operator|::
name|ManagerTy
name|StateManagerTy
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|ExplodedGraph
operator|<
name|StateTy
operator|>
name|GraphTy
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|GraphTy
operator|::
name|NodeTy
name|NodeTy
expr_stmt|;
end_typedef

begin_label
name|protected
label|:
end_label

begin_decl_stmt
name|SubEngineTy
modifier|&
name|SubEngine
decl_stmt|;
end_decl_stmt

begin_function
name|virtual
specifier|const
name|void
modifier|*
name|getInitialState
parameter_list|()
block|{
return|return
name|SubEngine
operator|.
name|getInitialState
argument_list|()
return|;
block|}
end_function

begin_function
name|virtual
name|void
name|ProcessEndPath
parameter_list|(
name|GREndPathNodeBuilderImpl
modifier|&
name|BuilderImpl
parameter_list|)
block|{
name|GREndPathNodeBuilder
operator|<
name|StateTy
operator|>
name|Builder
argument_list|(
name|BuilderImpl
argument_list|)
expr_stmt|;
name|SubEngine
operator|.
name|ProcessEndPath
argument_list|(
name|Builder
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|virtual
name|void
name|ProcessStmt
parameter_list|(
name|Stmt
modifier|*
name|S
parameter_list|,
name|GRStmtNodeBuilderImpl
modifier|&
name|BuilderImpl
parameter_list|)
block|{
name|GRStmtNodeBuilder
operator|<
name|StateTy
operator|>
name|Builder
argument_list|(
name|BuilderImpl
argument_list|,
name|SubEngine
operator|.
name|getStateManager
argument_list|()
argument_list|)
expr_stmt|;
name|SubEngine
operator|.
name|ProcessStmt
argument_list|(
name|S
argument_list|,
name|Builder
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|virtual
name|bool
name|ProcessBlockEntrance
parameter_list|(
name|CFGBlock
modifier|*
name|Blk
parameter_list|,
specifier|const
name|void
modifier|*
name|State
parameter_list|,
name|GRBlockCounter
name|BC
parameter_list|)
block|{
return|return
name|SubEngine
operator|.
name|ProcessBlockEntrance
argument_list|(
name|Blk
argument_list|,
name|static_cast
operator|<
specifier|const
name|StateTy
operator|*
operator|>
operator|(
name|State
operator|)
argument_list|,
name|BC
argument_list|)
return|;
block|}
end_function

begin_function
name|virtual
name|void
name|ProcessBranch
parameter_list|(
name|Stmt
modifier|*
name|Condition
parameter_list|,
name|Stmt
modifier|*
name|Terminator
parameter_list|,
name|GRBranchNodeBuilderImpl
modifier|&
name|BuilderImpl
parameter_list|)
block|{
name|GRBranchNodeBuilder
operator|<
name|StateTy
operator|>
name|Builder
argument_list|(
name|BuilderImpl
argument_list|)
expr_stmt|;
name|SubEngine
operator|.
name|ProcessBranch
argument_list|(
name|Condition
argument_list|,
name|Terminator
argument_list|,
name|Builder
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|virtual
name|void
name|ProcessIndirectGoto
parameter_list|(
name|GRIndirectGotoNodeBuilderImpl
modifier|&
name|BuilderImpl
parameter_list|)
block|{
name|GRIndirectGotoNodeBuilder
operator|<
name|StateTy
operator|>
name|Builder
argument_list|(
name|BuilderImpl
argument_list|)
expr_stmt|;
name|SubEngine
operator|.
name|ProcessIndirectGoto
argument_list|(
name|Builder
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|virtual
name|void
name|ProcessSwitch
parameter_list|(
name|GRSwitchNodeBuilderImpl
modifier|&
name|BuilderImpl
parameter_list|)
block|{
name|GRSwitchNodeBuilder
operator|<
name|StateTy
operator|>
name|Builder
argument_list|(
name|BuilderImpl
argument_list|)
expr_stmt|;
name|SubEngine
operator|.
name|ProcessSwitch
argument_list|(
name|Builder
argument_list|)
expr_stmt|;
block|}
end_function

begin_label
name|public
label|:
end_label

begin_comment
comment|/// Construct a GRCoreEngine object to analyze the provided CFG using
end_comment

begin_comment
comment|///  a DFS exploration of the exploded graph.
end_comment

begin_expr_stmt
name|GRCoreEngine
argument_list|(
name|CFG
operator|&
name|cfg
argument_list|,
name|Decl
operator|&
name|cd
argument_list|,
name|ASTContext
operator|&
name|ctx
argument_list|,
name|SubEngineTy
operator|&
name|subengine
argument_list|)
operator|:
name|GRCoreEngineImpl
argument_list|(
argument|new GraphTy(cfg, cd, ctx)
argument_list|,
argument|GRWorkList::MakeBFS()
argument_list|)
operator|,
name|SubEngine
argument_list|(
argument|subengine
argument_list|)
block|{}
comment|/// Construct a GRCoreEngine object to analyze the provided CFG and to
comment|///  use the provided worklist object to execute the worklist algorithm.
comment|///  The GRCoreEngine object assumes ownership of 'wlist'.
name|GRCoreEngine
argument_list|(
name|CFG
operator|&
name|cfg
argument_list|,
name|Decl
operator|&
name|cd
argument_list|,
name|ASTContext
operator|&
name|ctx
argument_list|,
name|GRWorkList
operator|*
name|wlist
argument_list|,
name|SubEngineTy
operator|&
name|subengine
argument_list|)
operator|:
name|GRCoreEngineImpl
argument_list|(
argument|new GraphTy(cfg, cd, ctx)
argument_list|,
argument|wlist
argument_list|)
operator|,
name|SubEngine
argument_list|(
argument|subengine
argument_list|)
block|{}
name|virtual
operator|~
name|GRCoreEngine
argument_list|()
block|{}
comment|/// getGraph - Returns the exploded graph.
name|GraphTy
operator|&
name|getGraph
argument_list|()
block|{
return|return
operator|*
name|static_cast
operator|<
name|GraphTy
operator|*
operator|>
operator|(
name|G
operator|.
name|get
argument_list|()
operator|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/// takeGraph - Returns the exploded graph.  Ownership of the graph is
end_comment

begin_comment
comment|///  transfered to the caller.
end_comment

begin_function
name|GraphTy
modifier|*
name|takeGraph
parameter_list|()
block|{
return|return
name|static_cast
operator|<
name|GraphTy
operator|*
operator|>
operator|(
name|G
operator|.
name|take
argument_list|()
operator|)
return|;
block|}
end_function

begin_comment
unit|};  }
comment|// end clang namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

