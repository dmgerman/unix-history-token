begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//== Environment.h - Map from Stmt* to Locations/Values ---------*- C++ -*--==//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defined the Environment and EnvironmentManager classes.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_ANALYSIS_ENVIRONMENT_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_ANALYSIS_ENVIRONMENT_H
end_define

begin_comment
comment|// For using typedefs in StoreManager. Should find a better place for these
end_comment

begin_comment
comment|// typedefs.
end_comment

begin_include
include|#
directive|include
file|"clang/Analysis/PathSensitive/Store.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/ImmutableMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"clang/Analysis/PathSensitive/SVals.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Allocator.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/FoldingSet.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|EnvironmentManager
decl_stmt|;
name|class
name|BasicValueFactory
decl_stmt|;
name|class
name|LiveVariables
decl_stmt|;
name|class
name|Environment
range|:
name|public
name|llvm
operator|::
name|FoldingSetNode
block|{
name|private
operator|:
name|friend
name|class
name|EnvironmentManager
block|;
comment|// Type definitions.
typedef|typedef
name|llvm
operator|::
name|ImmutableMap
operator|<
name|Stmt
operator|*
operator|,
name|SVal
operator|>
name|BindingsTy
expr_stmt|;
comment|// Data.
name|BindingsTy
name|SubExprBindings
decl_stmt|;
name|BindingsTy
name|BlkExprBindings
decl_stmt|;
name|Environment
argument_list|(
argument|BindingsTy seb
argument_list|,
argument|BindingsTy beb
argument_list|)
block|:
name|SubExprBindings
argument_list|(
name|seb
argument_list|)
operator|,
name|BlkExprBindings
argument_list|(
argument|beb
argument_list|)
block|{}
name|public
operator|:
typedef|typedef
name|BindingsTy
operator|::
name|iterator
name|seb_iterator
expr_stmt|;
name|seb_iterator
name|seb_begin
argument_list|()
specifier|const
block|{
return|return
name|SubExprBindings
operator|.
name|begin
argument_list|()
return|;
block|}
name|seb_iterator
name|seb_end
argument_list|()
specifier|const
block|{
return|return
name|SubExprBindings
operator|.
name|end
argument_list|()
return|;
block|}
typedef|typedef
name|BindingsTy
operator|::
name|iterator
name|beb_iterator
expr_stmt|;
name|beb_iterator
name|beb_begin
argument_list|()
specifier|const
block|{
return|return
name|BlkExprBindings
operator|.
name|begin
argument_list|()
return|;
block|}
name|beb_iterator
name|beb_end
argument_list|()
specifier|const
block|{
return|return
name|BlkExprBindings
operator|.
name|end
argument_list|()
return|;
block|}
name|SVal
name|LookupSubExpr
argument_list|(
name|Stmt
operator|*
name|E
argument_list|)
decl|const
block|{
specifier|const
name|SVal
modifier|*
name|X
init|=
name|SubExprBindings
operator|.
name|lookup
argument_list|(
name|cast
operator|<
name|Expr
operator|>
operator|(
name|E
operator|)
argument_list|)
decl_stmt|;
return|return
name|X
condition|?
operator|*
name|X
else|:
name|UnknownVal
argument_list|()
return|;
block|}
name|SVal
name|LookupBlkExpr
argument_list|(
name|Stmt
operator|*
name|E
argument_list|)
decl|const
block|{
specifier|const
name|SVal
modifier|*
name|X
init|=
name|BlkExprBindings
operator|.
name|lookup
argument_list|(
name|E
argument_list|)
decl_stmt|;
return|return
name|X
condition|?
operator|*
name|X
else|:
name|UnknownVal
argument_list|()
return|;
block|}
name|SVal
name|LookupExpr
argument_list|(
name|Stmt
operator|*
name|E
argument_list|)
decl|const
block|{
specifier|const
name|SVal
modifier|*
name|X
init|=
name|SubExprBindings
operator|.
name|lookup
argument_list|(
name|E
argument_list|)
decl_stmt|;
if|if
condition|(
name|X
condition|)
return|return
operator|*
name|X
return|;
name|X
operator|=
name|BlkExprBindings
operator|.
name|lookup
argument_list|(
name|E
argument_list|)
expr_stmt|;
return|return
name|X
condition|?
operator|*
name|X
else|:
name|UnknownVal
argument_list|()
return|;
block|}
name|SVal
name|GetSVal
argument_list|(
name|Stmt
operator|*
name|Ex
argument_list|,
name|BasicValueFactory
operator|&
name|BasicVals
argument_list|)
decl|const
decl_stmt|;
name|SVal
name|GetBlkExprSVal
argument_list|(
name|Stmt
operator|*
name|Ex
argument_list|,
name|BasicValueFactory
operator|&
name|BasicVals
argument_list|)
decl|const
decl_stmt|;
comment|/// Profile - Profile the contents of an Environment object for use
comment|///  in a FoldingSet.
specifier|static
name|void
name|Profile
argument_list|(
name|llvm
operator|::
name|FoldingSetNodeID
operator|&
name|ID
argument_list|,
specifier|const
name|Environment
operator|*
name|E
argument_list|)
block|{
name|E
operator|->
name|SubExprBindings
operator|.
name|Profile
argument_list|(
name|ID
argument_list|)
expr_stmt|;
name|E
operator|->
name|BlkExprBindings
operator|.
name|Profile
argument_list|(
name|ID
argument_list|)
expr_stmt|;
block|}
comment|/// Profile - Used to profile the contents of this object for inclusion
comment|///  in a FoldingSet.
name|void
name|Profile
argument_list|(
name|llvm
operator|::
name|FoldingSetNodeID
operator|&
name|ID
argument_list|)
decl|const
block|{
name|Profile
argument_list|(
name|ID
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|Environment
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|SubExprBindings
operator|==
name|RHS
operator|.
name|SubExprBindings
operator|&&
name|BlkExprBindings
operator|==
name|RHS
operator|.
name|BlkExprBindings
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|EnvironmentManager
block|{
name|private
label|:
typedef|typedef
name|Environment
operator|::
name|BindingsTy
operator|::
name|Factory
name|FactoryTy
expr_stmt|;
name|FactoryTy
name|F
decl_stmt|;
name|public
label|:
name|EnvironmentManager
argument_list|(
name|llvm
operator|::
name|BumpPtrAllocator
operator|&
name|Allocator
argument_list|)
operator|:
name|F
argument_list|(
argument|Allocator
argument_list|)
block|{}
operator|~
name|EnvironmentManager
argument_list|()
block|{}
comment|/// RemoveBlkExpr - Return a new environment object with the same bindings as
comment|///  the provided environment except with any bindings for the provided Stmt*
comment|///  removed.  This method only removes bindings for block-level expressions.
comment|///  Using this method on a non-block level expression will return the
comment|///  same environment object.
name|Environment
name|RemoveBlkExpr
argument_list|(
argument|const Environment& Env
argument_list|,
argument|Stmt* E
argument_list|)
block|{
return|return
name|Environment
argument_list|(
name|Env
operator|.
name|SubExprBindings
argument_list|,
name|F
operator|.
name|Remove
argument_list|(
name|Env
operator|.
name|BlkExprBindings
argument_list|,
name|E
argument_list|)
argument_list|)
return|;
block|}
name|Environment
name|RemoveSubExpr
parameter_list|(
specifier|const
name|Environment
modifier|&
name|Env
parameter_list|,
name|Stmt
modifier|*
name|E
parameter_list|)
block|{
return|return
name|Environment
argument_list|(
name|F
operator|.
name|Remove
argument_list|(
name|Env
operator|.
name|SubExprBindings
argument_list|,
name|E
argument_list|)
argument_list|,
name|Env
operator|.
name|BlkExprBindings
argument_list|)
return|;
block|}
name|Environment
name|AddBlkExpr
parameter_list|(
specifier|const
name|Environment
modifier|&
name|Env
parameter_list|,
name|Stmt
modifier|*
name|E
parameter_list|,
name|SVal
name|V
parameter_list|)
block|{
return|return
name|Environment
argument_list|(
name|Env
operator|.
name|SubExprBindings
argument_list|,
name|F
operator|.
name|Add
argument_list|(
name|Env
operator|.
name|BlkExprBindings
argument_list|,
name|E
argument_list|,
name|V
argument_list|)
argument_list|)
return|;
block|}
name|Environment
name|AddSubExpr
parameter_list|(
specifier|const
name|Environment
modifier|&
name|Env
parameter_list|,
name|Stmt
modifier|*
name|E
parameter_list|,
name|SVal
name|V
parameter_list|)
block|{
return|return
name|Environment
argument_list|(
name|F
operator|.
name|Add
argument_list|(
name|Env
operator|.
name|SubExprBindings
argument_list|,
name|E
argument_list|,
name|V
argument_list|)
argument_list|,
name|Env
operator|.
name|BlkExprBindings
argument_list|)
return|;
block|}
comment|/// RemoveSubExprBindings - Return a new environment object with
comment|///  the same bindings as the provided environment except with all the
comment|///  subexpression bindings removed.
name|Environment
name|RemoveSubExprBindings
parameter_list|(
specifier|const
name|Environment
modifier|&
name|Env
parameter_list|)
block|{
return|return
name|Environment
argument_list|(
name|F
operator|.
name|GetEmptyMap
argument_list|()
argument_list|,
name|Env
operator|.
name|BlkExprBindings
argument_list|)
return|;
block|}
name|Environment
name|getInitialEnvironment
parameter_list|()
block|{
return|return
name|Environment
argument_list|(
name|F
operator|.
name|GetEmptyMap
argument_list|()
argument_list|,
name|F
operator|.
name|GetEmptyMap
argument_list|()
argument_list|)
return|;
block|}
name|Environment
name|BindExpr
parameter_list|(
specifier|const
name|Environment
modifier|&
name|Env
parameter_list|,
name|Stmt
modifier|*
name|E
parameter_list|,
name|SVal
name|V
parameter_list|,
name|bool
name|isBlkExpr
parameter_list|,
name|bool
name|Invalidate
parameter_list|)
function_decl|;
name|Environment
name|RemoveDeadBindings
argument_list|(
name|Environment
name|Env
argument_list|,
name|Stmt
operator|*
name|Loc
argument_list|,
name|SymbolReaper
operator|&
name|SymReaper
argument_list|,
name|GRStateManager
operator|&
name|StateMgr
argument_list|,
specifier|const
name|GRState
operator|*
name|state
argument_list|,
name|llvm
operator|::
name|SmallVectorImpl
operator|<
specifier|const
name|MemRegion
operator|*
operator|>
operator|&
name|DRoots
argument_list|)
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// end clang namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

