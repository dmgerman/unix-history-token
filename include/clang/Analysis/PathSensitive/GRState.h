begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//== GRState*h - Path-Sens. "State" for tracking valuues -----*- C++ -*--==//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines SymbolRef, ExprBindKey, and GRState*
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_ANALYSIS_VALUESTATE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_ANALYSIS_VALUESTATE_H
end_define

begin_comment
comment|// FIXME: Reduce the number of includes.
end_comment

begin_include
include|#
directive|include
file|"clang/Analysis/PathSensitive/Environment.h"
end_include

begin_include
include|#
directive|include
file|"clang/Analysis/PathSensitive/Store.h"
end_include

begin_include
include|#
directive|include
file|"clang/Analysis/PathSensitive/ConstraintManager.h"
end_include

begin_include
include|#
directive|include
file|"clang/Analysis/PathSensitive/ValueManager.h"
end_include

begin_include
include|#
directive|include
file|"clang/Analysis/PathSensitive/GRCoreEngine.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/Expr.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/Decl.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/ASTContext.h"
end_include

begin_include
include|#
directive|include
file|"clang/Analysis/Analyses/LiveVariables.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Casting.h"
end_include

begin_include
include|#
directive|include
file|"llvm/System/DataTypes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/APSInt.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/FoldingSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/ImmutableMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Allocator.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/raw_ostream.h"
end_include

begin_include
include|#
directive|include
file|<functional>
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|GRStateManager
decl_stmt|;
name|class
name|GRTransferFuncs
decl_stmt|;
typedef|typedef
name|ConstraintManager
modifier|*
function_decl|(
modifier|*
name|ConstraintManagerCreator
function_decl|)
parameter_list|(
name|GRStateManager
modifier|&
parameter_list|)
function_decl|;
typedef|typedef
name|StoreManager
modifier|*
function_decl|(
modifier|*
name|StoreManagerCreator
function_decl|)
parameter_list|(
name|GRStateManager
modifier|&
parameter_list|)
function_decl|;
comment|//===----------------------------------------------------------------------===//
comment|// GRStateTrait - Traits used by the Generic Data Map of a GRState.
comment|//===----------------------------------------------------------------------===//
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|GRStatePartialTrait
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|GRStateTrait
block|{
typedef|typedef
name|typename
name|T
operator|::
name|data_type
name|data_type
expr_stmt|;
specifier|static
specifier|inline
name|void
operator|*
name|GDMIndex
argument_list|()
block|{
return|return
operator|&
name|T
operator|::
name|TagInt
return|;
block|}
specifier|static
specifier|inline
name|void
operator|*
name|MakeVoidPtr
argument_list|(
argument|data_type D
argument_list|)
block|{
return|return
operator|(
name|void
operator|*
operator|)
name|D
return|;
block|}
specifier|static
specifier|inline
name|data_type
name|MakeData
argument_list|(
argument|void* const* P
argument_list|)
block|{
return|return
name|P
operator|?
operator|(
name|data_type
operator|)
operator|*
name|P
operator|:
operator|(
name|data_type
operator|)
literal|0
return|;
block|}
block|}
empty_stmt|;
comment|//===----------------------------------------------------------------------===//
comment|// GRState- An ImmutableMap type Stmt*/Decl*/Symbols to SVals.
comment|//===----------------------------------------------------------------------===//
name|class
name|GRStateManager
decl_stmt|;
comment|/// GRState - This class encapsulates the actual data values for
comment|///  for a "state" in our symbolic value tracking.  It is intended to be
comment|///  used as a functional object; that is once it is created and made
comment|///  "persistent" in a FoldingSet its values will never change.
name|class
name|GRState
range|:
name|public
name|llvm
operator|::
name|FoldingSetNode
block|{
name|public
operator|:
typedef|typedef
name|llvm
operator|::
name|ImmutableSet
operator|<
name|llvm
operator|::
name|APSInt
operator|*
operator|>
name|IntSetTy
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|ImmutableMap
operator|<
name|void
operator|*
operator|,
name|void
operator|*
operator|>
name|GenericDataMap
expr_stmt|;
name|private
label|:
name|void
name|operator
init|=
operator|(
specifier|const
name|GRState
operator|&
name|R
operator|)
specifier|const
decl_stmt|;
name|friend
name|class
name|GRStateManager
decl_stmt|;
name|GRStateManager
modifier|*
name|StateMgr
decl_stmt|;
name|Environment
name|Env
decl_stmt|;
name|Store
name|St
decl_stmt|;
comment|// FIXME: Make these private.
name|public
label|:
name|GenericDataMap
name|GDM
decl_stmt|;
name|public
label|:
comment|/// This ctor is used when creating the first GRState object.
name|GRState
argument_list|(
argument|GRStateManager *mgr
argument_list|,
argument|const Environment& env
argument_list|,
argument|Store st
argument_list|,
argument|GenericDataMap gdm
argument_list|)
block|:
name|StateMgr
argument_list|(
name|mgr
argument_list|)
operator|,
name|Env
argument_list|(
name|env
argument_list|)
operator|,
name|St
argument_list|(
name|st
argument_list|)
operator|,
name|GDM
argument_list|(
argument|gdm
argument_list|)
block|{}
comment|/// Copy ctor - We must explicitly define this or else the "Next" ptr
comment|///  in FoldingSetNode will also get copied.
name|GRState
argument_list|(
specifier|const
name|GRState
operator|&
name|RHS
argument_list|)
operator|:
name|llvm
operator|::
name|FoldingSetNode
argument_list|()
operator|,
name|StateMgr
argument_list|(
name|RHS
operator|.
name|StateMgr
argument_list|)
operator|,
name|Env
argument_list|(
name|RHS
operator|.
name|Env
argument_list|)
operator|,
name|St
argument_list|(
name|RHS
operator|.
name|St
argument_list|)
operator|,
name|GDM
argument_list|(
argument|RHS.GDM
argument_list|)
block|{}
comment|/// getStateManager - Return the GRStateManager associated with this state.
name|GRStateManager
operator|&
name|getStateManager
argument_list|()
specifier|const
block|{
return|return
operator|*
name|StateMgr
return|;
block|}
comment|/// getAnalysisContext - Return the AnalysisContext associated with this
comment|/// state.
name|AnalysisContext
operator|&
name|getAnalysisContext
argument_list|()
specifier|const
block|{
return|return
name|Env
operator|.
name|getAnalysisContext
argument_list|()
return|;
block|}
comment|/// getEnvironment - Return the environment associated with this state.
comment|///  The environment is the mapping from expressions to values.
specifier|const
name|Environment
operator|&
name|getEnvironment
argument_list|()
specifier|const
block|{
return|return
name|Env
return|;
block|}
comment|/// getStore - Return the store associated with this state.  The store
comment|///  is a mapping from locations to values.
name|Store
name|getStore
argument_list|()
specifier|const
block|{
return|return
name|St
return|;
block|}
name|void
name|setStore
parameter_list|(
name|Store
name|s
parameter_list|)
block|{
name|St
operator|=
name|s
expr_stmt|;
block|}
comment|/// getGDM - Return the generic data map associated with this state.
name|GenericDataMap
name|getGDM
argument_list|()
specifier|const
block|{
return|return
name|GDM
return|;
block|}
name|void
name|setGDM
parameter_list|(
name|GenericDataMap
name|gdm
parameter_list|)
block|{
name|GDM
operator|=
name|gdm
expr_stmt|;
block|}
comment|/// Profile - Profile the contents of a GRState object for use
comment|///  in a FoldingSet.
specifier|static
name|void
name|Profile
argument_list|(
name|llvm
operator|::
name|FoldingSetNodeID
operator|&
name|ID
argument_list|,
specifier|const
name|GRState
operator|*
name|V
argument_list|)
block|{
comment|// FIXME: Do we need to include the AnalysisContext in the profile?
name|V
operator|->
name|Env
operator|.
name|Profile
argument_list|(
name|ID
argument_list|)
expr_stmt|;
name|ID
operator|.
name|AddPointer
argument_list|(
name|V
operator|->
name|St
argument_list|)
expr_stmt|;
name|V
operator|->
name|GDM
operator|.
name|Profile
argument_list|(
name|ID
argument_list|)
expr_stmt|;
block|}
comment|/// Profile - Used to profile the contents of this object for inclusion
comment|///  in a FoldingSet.
name|void
name|Profile
argument_list|(
name|llvm
operator|::
name|FoldingSetNodeID
operator|&
name|ID
argument_list|)
decl|const
block|{
name|Profile
argument_list|(
name|ID
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
name|SVal
name|LookupExpr
argument_list|(
name|Expr
operator|*
name|E
argument_list|)
decl|const
block|{
return|return
name|Env
operator|.
name|LookupExpr
argument_list|(
name|E
argument_list|)
return|;
block|}
comment|/// makeWithStore - Return a GRState with the same values as the current
comment|/// state with the exception of using the specified Store.
specifier|const
name|GRState
modifier|*
name|makeWithStore
argument_list|(
name|Store
name|store
argument_list|)
decl|const
decl_stmt|;
name|BasicValueFactory
operator|&
name|getBasicVals
argument_list|()
specifier|const
expr_stmt|;
name|SymbolManager
operator|&
name|getSymbolManager
argument_list|()
specifier|const
expr_stmt|;
name|GRTransferFuncs
operator|&
name|getTransferFuncs
argument_list|()
specifier|const
expr_stmt|;
comment|//==---------------------------------------------------------------------==//
comment|// Constraints on values.
comment|//==---------------------------------------------------------------------==//
comment|//
comment|// Each GRState records constraints on symbolic values.  These constraints
comment|// are managed using the ConstraintManager associated with a GRStateManager.
comment|// As constraints gradually accrue on symbolic values, added constraints
comment|// may conflict and indicate that a state is infeasible (as no real values
comment|// could satisfy all the constraints).  This is the principal mechanism
comment|// for modeling path-sensitivity in GRExprEngine/GRState.
comment|//
comment|// Various "Assume" methods form the interface for adding constraints to
comment|// symbolic values.  A call to "Assume" indicates an assumption being placed
comment|// on one or symbolic values.  Assume methods take the following inputs:
comment|//
comment|//  (1) A GRState object representing the current state.
comment|//
comment|//  (2) The assumed constraint (which is specific to a given "Assume" method).
comment|//
comment|//  (3) A binary value "Assumption" that indicates whether the constraint is
comment|//      assumed to be true or false.
comment|//
comment|// The output of "Assume" are two values:
comment|//
comment|//  (a) "isFeasible" is set to true or false to indicate whether or not
comment|//      the assumption is feasible.
comment|//
comment|//  (b) A new GRState object with the added constraints.
comment|//
comment|// FIXME: (a) should probably disappear since it is redundant with (b).
comment|//  (i.e., (b) could just be set to NULL).
comment|//
specifier|const
name|GRState
modifier|*
name|Assume
argument_list|(
name|DefinedOrUnknownSVal
name|cond
argument_list|,
name|bool
name|assumption
argument_list|)
decl|const
decl_stmt|;
name|std
operator|::
name|pair
operator|<
specifier|const
name|GRState
operator|*
operator|,
specifier|const
name|GRState
operator|*
operator|>
name|Assume
argument_list|(
argument|DefinedOrUnknownSVal cond
argument_list|)
specifier|const
expr_stmt|;
specifier|const
name|GRState
modifier|*
name|AssumeInBound
argument_list|(
name|DefinedOrUnknownSVal
name|idx
argument_list|,
name|DefinedOrUnknownSVal
name|upperBound
argument_list|,
name|bool
name|assumption
argument_list|)
decl|const
decl_stmt|;
comment|//==---------------------------------------------------------------------==//
comment|// Utility methods for getting regions.
comment|//==---------------------------------------------------------------------==//
specifier|const
name|VarRegion
modifier|*
name|getRegion
argument_list|(
specifier|const
name|VarDecl
operator|*
name|D
argument_list|,
specifier|const
name|LocationContext
operator|*
name|LC
argument_list|)
decl|const
decl_stmt|;
comment|//==---------------------------------------------------------------------==//
comment|// Binding and retrieving values to/from the environment and symbolic store.
comment|//==---------------------------------------------------------------------==//
comment|/// BindCompoundLiteral - Return the state that has the bindings currently
comment|///  in 'state' plus the bindings for the CompoundLiteral.  'R' is the region
comment|///  for the compound literal and 'BegInit' and 'EndInit' represent an
comment|///  array of initializer values.
specifier|const
name|GRState
modifier|*
name|bindCompoundLiteral
argument_list|(
specifier|const
name|CompoundLiteralExpr
operator|*
name|CL
argument_list|,
specifier|const
name|LocationContext
operator|*
name|LC
argument_list|,
name|SVal
name|V
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|GRState
modifier|*
name|BindExpr
argument_list|(
specifier|const
name|Stmt
operator|*
name|S
argument_list|,
name|SVal
name|V
argument_list|,
name|bool
name|Invalidate
operator|=
name|true
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|GRState
modifier|*
name|bindDecl
argument_list|(
specifier|const
name|VarRegion
operator|*
name|VR
argument_list|,
name|SVal
name|V
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|GRState
modifier|*
name|bindDeclWithNoInit
argument_list|(
specifier|const
name|VarRegion
operator|*
name|VR
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|GRState
modifier|*
name|bindLoc
argument_list|(
name|Loc
name|location
argument_list|,
name|SVal
name|V
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|GRState
modifier|*
name|bindLoc
argument_list|(
name|SVal
name|location
argument_list|,
name|SVal
name|V
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|GRState
modifier|*
name|unbindLoc
argument_list|(
name|Loc
name|LV
argument_list|)
decl|const
decl_stmt|;
comment|/// Get the lvalue for a variable reference.
name|SVal
name|getLValue
argument_list|(
specifier|const
name|VarDecl
operator|*
name|D
argument_list|,
specifier|const
name|LocationContext
operator|*
name|LC
argument_list|)
decl|const
decl_stmt|;
comment|/// Get the lvalue for a StringLiteral.
name|SVal
name|getLValue
argument_list|(
specifier|const
name|StringLiteral
operator|*
name|literal
argument_list|)
decl|const
decl_stmt|;
name|SVal
name|getLValue
argument_list|(
specifier|const
name|CompoundLiteralExpr
operator|*
name|literal
argument_list|,
specifier|const
name|LocationContext
operator|*
name|LC
argument_list|)
decl|const
decl_stmt|;
comment|/// Get the lvalue for an ivar reference.
name|SVal
name|getLValue
argument_list|(
specifier|const
name|ObjCIvarDecl
operator|*
name|decl
argument_list|,
name|SVal
name|base
argument_list|)
decl|const
decl_stmt|;
comment|/// Get the lvalue for a field reference.
name|SVal
name|getLValue
argument_list|(
specifier|const
name|FieldDecl
operator|*
name|decl
argument_list|,
name|SVal
name|Base
argument_list|)
decl|const
decl_stmt|;
comment|/// Get the lvalue for an array index.
name|SVal
name|getLValue
argument_list|(
name|QualType
name|ElementType
argument_list|,
name|SVal
name|Idx
argument_list|,
name|SVal
name|Base
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|llvm
operator|::
name|APSInt
operator|*
name|getSymVal
argument_list|(
argument|SymbolRef sym
argument_list|)
specifier|const
expr_stmt|;
name|SVal
name|getSVal
argument_list|(
specifier|const
name|Stmt
operator|*
name|Ex
argument_list|)
decl|const
decl_stmt|;
name|SVal
name|getSValAsScalarOrLoc
argument_list|(
specifier|const
name|Stmt
operator|*
name|Ex
argument_list|)
decl|const
decl_stmt|;
name|SVal
name|getSVal
argument_list|(
name|Loc
name|LV
argument_list|,
name|QualType
name|T
operator|=
name|QualType
argument_list|()
argument_list|)
decl|const
decl_stmt|;
name|SVal
name|getSVal
argument_list|(
specifier|const
name|MemRegion
operator|*
name|R
argument_list|)
decl|const
decl_stmt|;
name|SVal
name|getSValAsScalarOrLoc
argument_list|(
specifier|const
name|MemRegion
operator|*
name|R
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|llvm
operator|::
name|APSInt
operator|*
name|getSymVal
argument_list|(
argument|SymbolRef sym
argument_list|)
expr_stmt|;
name|bool
name|scanReachableSymbols
argument_list|(
name|SVal
name|val
argument_list|,
name|SymbolVisitor
operator|&
name|visitor
argument_list|)
decl|const
decl_stmt|;
name|bool
name|scanReachableSymbols
argument_list|(
specifier|const
name|SVal
operator|*
name|I
argument_list|,
specifier|const
name|SVal
operator|*
name|E
argument_list|,
name|SymbolVisitor
operator|&
name|visitor
argument_list|)
decl|const
decl_stmt|;
name|bool
name|scanReachableSymbols
argument_list|(
specifier|const
name|MemRegion
operator|*
specifier|const
operator|*
name|I
argument_list|,
specifier|const
name|MemRegion
operator|*
specifier|const
operator|*
name|E
argument_list|,
name|SymbolVisitor
operator|&
name|visitor
argument_list|)
decl|const
decl_stmt|;
name|template
operator|<
name|typename
name|CB
operator|>
name|CB
name|scanReachableSymbols
argument_list|(
argument|SVal val
argument_list|)
specifier|const
expr_stmt|;
name|template
operator|<
name|typename
name|CB
operator|>
name|CB
name|scanReachableSymbols
argument_list|(
argument|const SVal *beg
argument_list|,
argument|const SVal *end
argument_list|)
specifier|const
expr_stmt|;
name|template
operator|<
name|typename
name|CB
operator|>
name|CB
name|scanReachableSymbols
argument_list|(
argument|const MemRegion * const *beg
argument_list|,
argument|const MemRegion * const *end
argument_list|)
specifier|const
expr_stmt|;
comment|//==---------------------------------------------------------------------==//
comment|// Accessing the Generic Data Map (GDM).
comment|//==---------------------------------------------------------------------==//
name|void
modifier|*
specifier|const
modifier|*
name|FindGDM
argument_list|(
name|void
operator|*
name|K
argument_list|)
decl|const
decl_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
specifier|const
name|GRState
operator|*
name|add
argument_list|(
argument|typename GRStateTrait<T>::key_type K
argument_list|)
specifier|const
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
name|typename
name|GRStateTrait
operator|<
name|T
operator|>
operator|::
name|data_type
name|get
argument_list|()
specifier|const
block|{
return|return
name|GRStateTrait
operator|<
name|T
operator|>
operator|::
name|MakeData
argument_list|(
name|FindGDM
argument_list|(
name|GRStateTrait
operator|<
name|T
operator|>
operator|::
name|GDMIndex
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|typename
name|GRStateTrait
operator|<
name|T
operator|>
operator|::
name|lookup_type
name|get
argument_list|(
argument|typename GRStateTrait<T>::key_type key
argument_list|)
specifier|const
block|{
name|void
operator|*
specifier|const
operator|*
name|d
operator|=
name|FindGDM
argument_list|(
name|GRStateTrait
operator|<
name|T
operator|>
operator|::
name|GDMIndex
argument_list|()
argument_list|)
block|;
return|return
name|GRStateTrait
operator|<
name|T
operator|>
operator|::
name|Lookup
argument_list|(
name|GRStateTrait
operator|<
name|T
operator|>
operator|::
name|MakeData
argument_list|(
name|d
argument_list|)
argument_list|,
name|key
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|typename
name|GRStateTrait
operator|<
name|T
operator|>
operator|::
name|context_type
name|get_context
argument_list|()
specifier|const
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
specifier|const
name|GRState
operator|*
name|remove
argument_list|(
argument|typename GRStateTrait<T>::key_type K
argument_list|)
specifier|const
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
specifier|const
name|GRState
operator|*
name|remove
argument_list|(
argument|typename GRStateTrait<T>::key_type K
argument_list|,
argument|typename GRStateTrait<T>::context_type C
argument_list|)
specifier|const
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
specifier|const
name|GRState
operator|*
name|set
argument_list|(
argument|typename GRStateTrait<T>::data_type D
argument_list|)
specifier|const
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
specifier|const
name|GRState
operator|*
name|set
argument_list|(
argument|typename GRStateTrait<T>::key_type K
argument_list|,
argument|typename GRStateTrait<T>::value_type E
argument_list|)
specifier|const
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
specifier|const
name|GRState
operator|*
name|set
argument_list|(
argument|typename GRStateTrait<T>::key_type K
argument_list|,
argument|typename GRStateTrait<T>::value_type E
argument_list|,
argument|typename GRStateTrait<T>::context_type C
argument_list|)
specifier|const
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
name|bool
name|contains
argument_list|(
argument|typename GRStateTrait<T>::key_type key
argument_list|)
specifier|const
block|{
name|void
operator|*
specifier|const
operator|*
name|d
operator|=
name|FindGDM
argument_list|(
name|GRStateTrait
operator|<
name|T
operator|>
operator|::
name|GDMIndex
argument_list|()
argument_list|)
block|;
return|return
name|GRStateTrait
operator|<
name|T
operator|>
operator|::
name|Contains
argument_list|(
name|GRStateTrait
operator|<
name|T
operator|>
operator|::
name|MakeData
argument_list|(
name|d
argument_list|)
argument_list|,
name|key
argument_list|)
return|;
block|}
comment|// State pretty-printing.
name|class
name|Printer
block|{
name|public
label|:
name|virtual
operator|~
name|Printer
argument_list|()
block|{}
name|virtual
name|void
name|Print
argument_list|(
name|llvm
operator|::
name|raw_ostream
operator|&
name|Out
argument_list|,
specifier|const
name|GRState
operator|*
name|state
argument_list|,
specifier|const
name|char
operator|*
name|nl
argument_list|,
specifier|const
name|char
operator|*
name|sep
argument_list|)
operator|=
literal|0
expr_stmt|;
block|}
empty_stmt|;
comment|// Pretty-printing.
name|void
name|print
argument_list|(
name|llvm
operator|::
name|raw_ostream
operator|&
name|Out
argument_list|,
specifier|const
name|char
operator|*
name|nl
operator|=
literal|"\n"
argument_list|,
specifier|const
name|char
operator|*
name|sep
operator|=
literal|""
argument_list|)
decl|const
decl_stmt|;
name|void
name|printStdErr
argument_list|()
specifier|const
expr_stmt|;
name|void
name|printDOT
argument_list|(
name|llvm
operator|::
name|raw_ostream
operator|&
name|Out
argument_list|)
decl|const
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|GRStateSet
block|{
typedef|typedef
name|llvm
operator|::
name|SmallPtrSet
operator|<
specifier|const
name|GRState
operator|*
operator|,
literal|5
operator|>
name|ImplTy
expr_stmt|;
name|ImplTy
name|Impl
decl_stmt|;
name|public
label|:
name|GRStateSet
argument_list|()
block|{}
specifier|inline
name|void
name|Add
parameter_list|(
specifier|const
name|GRState
modifier|*
name|St
parameter_list|)
block|{
name|Impl
operator|.
name|insert
argument_list|(
name|St
argument_list|)
expr_stmt|;
block|}
typedef|typedef
name|ImplTy
operator|::
name|const_iterator
name|iterator
expr_stmt|;
specifier|inline
name|unsigned
name|size
argument_list|()
specifier|const
block|{
return|return
name|Impl
operator|.
name|size
argument_list|()
return|;
block|}
specifier|inline
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|Impl
operator|.
name|empty
argument_list|()
return|;
block|}
specifier|inline
name|iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|Impl
operator|.
name|begin
argument_list|()
return|;
block|}
specifier|inline
name|iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|Impl
operator|.
name|end
argument_list|()
return|;
block|}
name|class
name|AutoPopulate
block|{
name|GRStateSet
modifier|&
name|S
decl_stmt|;
name|unsigned
name|StartSize
decl_stmt|;
specifier|const
name|GRState
modifier|*
name|St
decl_stmt|;
name|public
label|:
name|AutoPopulate
argument_list|(
name|GRStateSet
operator|&
name|s
argument_list|,
specifier|const
name|GRState
operator|*
name|st
argument_list|)
operator|:
name|S
argument_list|(
name|s
argument_list|)
operator|,
name|StartSize
argument_list|(
name|S
operator|.
name|size
argument_list|()
argument_list|)
operator|,
name|St
argument_list|(
argument|st
argument_list|)
block|{}
operator|~
name|AutoPopulate
argument_list|()
block|{
if|if
condition|(
name|StartSize
operator|==
name|S
operator|.
name|size
argument_list|()
condition|)
name|S
operator|.
name|Add
argument_list|(
name|St
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|// GRStateManager - Factory object for GRStates.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_decl_stmt
name|class
name|GRStateManager
block|{
name|friend
name|class
name|GRExprEngine
decl_stmt|;
name|friend
name|class
name|GRState
decl_stmt|;
name|private
label|:
name|EnvironmentManager
name|EnvMgr
decl_stmt|;
name|llvm
operator|::
name|OwningPtr
operator|<
name|StoreManager
operator|>
name|StoreMgr
expr_stmt|;
name|llvm
operator|::
name|OwningPtr
operator|<
name|ConstraintManager
operator|>
name|ConstraintMgr
expr_stmt|;
name|GRState
operator|::
name|GenericDataMap
operator|::
name|Factory
name|GDMFactory
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|DenseMap
operator|<
name|void
operator|*
operator|,
name|std
operator|::
name|pair
operator|<
name|void
operator|*
operator|,
name|void
argument_list|(
operator|*
argument_list|)
argument_list|(
name|void
operator|*
argument_list|)
operator|>
expr|>
name|GDMContextsTy
expr_stmt|;
name|GDMContextsTy
name|GDMContexts
decl_stmt|;
comment|/// Printers - A set of printer objects used for pretty-printing a GRState.
comment|///  GRStateManager owns these objects.
name|std
operator|::
name|vector
operator|<
name|GRState
operator|::
name|Printer
operator|*
operator|>
name|Printers
expr_stmt|;
comment|/// StateSet - FoldingSet containing all the states created for analyzing
comment|///  a particular function.  This is used to unique states.
name|llvm
operator|::
name|FoldingSet
operator|<
name|GRState
operator|>
name|StateSet
expr_stmt|;
comment|/// ValueMgr - Object that manages the data for all created SVals.
name|ValueManager
name|ValueMgr
decl_stmt|;
comment|/// Alloc - A BumpPtrAllocator to allocate states.
name|llvm
operator|::
name|BumpPtrAllocator
operator|&
name|Alloc
expr_stmt|;
comment|/// TF - Object that represents a bundle of transfer functions
comment|///  for manipulating and creating SVals.
name|GRTransferFuncs
modifier|*
name|TF
decl_stmt|;
name|public
label|:
name|GRStateManager
argument_list|(
argument|ASTContext& Ctx
argument_list|,
argument|StoreManagerCreator CreateStoreManager
argument_list|,
argument|ConstraintManagerCreator CreateConstraintManager
argument_list|,
argument|llvm::BumpPtrAllocator& alloc
argument_list|)
block|:
name|EnvMgr
argument_list|(
name|alloc
argument_list|)
operator|,
name|GDMFactory
argument_list|(
name|alloc
argument_list|)
operator|,
name|ValueMgr
argument_list|(
name|alloc
argument_list|,
name|Ctx
argument_list|,
operator|*
name|this
argument_list|)
operator|,
name|Alloc
argument_list|(
argument|alloc
argument_list|)
block|{
name|StoreMgr
operator|.
name|reset
argument_list|(
call|(
modifier|*
name|CreateStoreManager
call|)
argument_list|(
operator|*
name|this
argument_list|)
argument_list|)
block|;
name|ConstraintMgr
operator|.
name|reset
argument_list|(
call|(
modifier|*
name|CreateConstraintManager
call|)
argument_list|(
operator|*
name|this
argument_list|)
argument_list|)
block|;   }
operator|~
name|GRStateManager
argument_list|()
expr_stmt|;
specifier|const
name|GRState
modifier|*
name|getInitialState
parameter_list|(
specifier|const
name|LocationContext
modifier|*
name|InitLoc
parameter_list|)
function_decl|;
name|ASTContext
modifier|&
name|getContext
parameter_list|()
block|{
return|return
name|ValueMgr
operator|.
name|getContext
argument_list|()
return|;
block|}
specifier|const
name|ASTContext
operator|&
name|getContext
argument_list|()
specifier|const
block|{
return|return
name|ValueMgr
operator|.
name|getContext
argument_list|()
return|;
block|}
name|GRTransferFuncs
modifier|&
name|getTransferFuncs
parameter_list|()
block|{
return|return
operator|*
name|TF
return|;
block|}
name|BasicValueFactory
modifier|&
name|getBasicVals
parameter_list|()
block|{
return|return
name|ValueMgr
operator|.
name|getBasicValueFactory
argument_list|()
return|;
block|}
specifier|const
name|BasicValueFactory
operator|&
name|getBasicVals
argument_list|()
specifier|const
block|{
return|return
name|ValueMgr
operator|.
name|getBasicValueFactory
argument_list|()
return|;
block|}
name|SymbolManager
modifier|&
name|getSymbolManager
parameter_list|()
block|{
return|return
name|ValueMgr
operator|.
name|getSymbolManager
argument_list|()
return|;
block|}
specifier|const
name|SymbolManager
operator|&
name|getSymbolManager
argument_list|()
specifier|const
block|{
return|return
name|ValueMgr
operator|.
name|getSymbolManager
argument_list|()
return|;
block|}
name|ValueManager
modifier|&
name|getValueManager
parameter_list|()
block|{
return|return
name|ValueMgr
return|;
block|}
specifier|const
name|ValueManager
operator|&
name|getValueManager
argument_list|()
specifier|const
block|{
return|return
name|ValueMgr
return|;
block|}
name|llvm
operator|::
name|BumpPtrAllocator
operator|&
name|getAllocator
argument_list|()
block|{
return|return
name|Alloc
return|;
block|}
name|MemRegionManager
modifier|&
name|getRegionManager
parameter_list|()
block|{
return|return
name|ValueMgr
operator|.
name|getRegionManager
argument_list|()
return|;
block|}
specifier|const
name|MemRegionManager
operator|&
name|getRegionManager
argument_list|()
specifier|const
block|{
return|return
name|ValueMgr
operator|.
name|getRegionManager
argument_list|()
return|;
block|}
name|StoreManager
modifier|&
name|getStoreManager
parameter_list|()
block|{
return|return
operator|*
name|StoreMgr
return|;
block|}
name|ConstraintManager
modifier|&
name|getConstraintManager
parameter_list|()
block|{
return|return
operator|*
name|ConstraintMgr
return|;
block|}
specifier|const
name|GRState
modifier|*
name|RemoveDeadBindings
parameter_list|(
specifier|const
name|GRState
modifier|*
name|St
parameter_list|,
name|Stmt
modifier|*
name|Loc
parameter_list|,
name|SymbolReaper
modifier|&
name|SymReaper
parameter_list|)
function_decl|;
name|public
label|:
name|SVal
name|ArrayToPointer
parameter_list|(
name|Loc
name|Array
parameter_list|)
block|{
return|return
name|StoreMgr
operator|->
name|ArrayToPointer
argument_list|(
name|Array
argument_list|)
return|;
block|}
comment|// Methods that manipulate the GDM.
specifier|const
name|GRState
modifier|*
name|addGDM
parameter_list|(
specifier|const
name|GRState
modifier|*
name|St
parameter_list|,
name|void
modifier|*
name|Key
parameter_list|,
name|void
modifier|*
name|Data
parameter_list|)
function_decl|;
comment|// Methods that query& manipulate the Store.
name|void
name|iterBindings
argument_list|(
specifier|const
name|GRState
operator|*
name|state
argument_list|,
name|StoreManager
operator|::
name|BindingsHandler
operator|&
name|F
argument_list|)
block|{
name|StoreMgr
operator|->
name|iterBindings
argument_list|(
name|state
operator|->
name|getStore
argument_list|()
argument_list|,
name|F
argument_list|)
expr_stmt|;
block|}
specifier|const
name|GRState
modifier|*
name|getPersistentState
parameter_list|(
name|GRState
modifier|&
name|Impl
parameter_list|)
function_decl|;
name|bool
name|isEqual
argument_list|(
specifier|const
name|GRState
operator|*
name|state
argument_list|,
specifier|const
name|Expr
operator|*
name|Ex
argument_list|,
specifier|const
name|llvm
operator|::
name|APSInt
operator|&
name|V
argument_list|)
decl_stmt|;
name|bool
name|isEqual
parameter_list|(
specifier|const
name|GRState
modifier|*
name|state
parameter_list|,
specifier|const
name|Expr
modifier|*
name|Ex
parameter_list|,
name|uint64_t
parameter_list|)
function_decl|;
comment|//==---------------------------------------------------------------------==//
comment|// Generic Data Map methods.
comment|//==---------------------------------------------------------------------==//
comment|//
comment|// GRStateManager and GRState support a "generic data map" that allows
comment|// different clients of GRState objects to embed arbitrary data within a
comment|// GRState object.  The generic data map is essentially an immutable map
comment|// from a "tag" (that acts as the "key" for a client) and opaque values.
comment|// Tags/keys and values are simply void* values.  The typical way that clients
comment|// generate unique tags are by taking the address of a static variable.
comment|// Clients are responsible for ensuring that data values referred to by a
comment|// the data pointer are immutable (and thus are essentially purely functional
comment|// data).
comment|//
comment|// The templated methods below use the GRStateTrait<T> class
comment|// to resolve keys into the GDM and to return data values to clients.
comment|//
comment|// Trait based GDM dispatch.
name|template
operator|<
name|typename
name|T
operator|>
specifier|const
name|GRState
operator|*
name|set
argument_list|(
argument|const GRState* st
argument_list|,
argument|typename GRStateTrait<T>::data_type D
argument_list|)
block|{
return|return
name|addGDM
argument_list|(
name|st
argument_list|,
name|GRStateTrait
operator|<
name|T
operator|>
operator|::
name|GDMIndex
argument_list|()
argument_list|,
name|GRStateTrait
operator|<
name|T
operator|>
operator|::
name|MakeVoidPtr
argument_list|(
name|D
argument_list|)
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
specifier|const
name|GRState
operator|*
name|set
argument_list|(
argument|const GRState* st
argument_list|,
argument|typename GRStateTrait<T>::key_type K
argument_list|,
argument|typename GRStateTrait<T>::value_type V
argument_list|,
argument|typename GRStateTrait<T>::context_type C
argument_list|)
block|{
return|return
name|addGDM
argument_list|(
name|st
argument_list|,
name|GRStateTrait
operator|<
name|T
operator|>
operator|::
name|GDMIndex
argument_list|()
argument_list|,
name|GRStateTrait
operator|<
name|T
operator|>
operator|::
name|MakeVoidPtr
argument_list|(
name|GRStateTrait
operator|<
name|T
operator|>
operator|::
name|Set
argument_list|(
name|st
operator|->
name|get
operator|<
name|T
operator|>
operator|(
operator|)
argument_list|,
name|K
argument_list|,
name|V
argument_list|,
name|C
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
specifier|const
name|GRState
operator|*
name|add
argument_list|(
argument|const GRState* st
argument_list|,
argument|typename GRStateTrait<T>::key_type K
argument_list|,
argument|typename GRStateTrait<T>::context_type C
argument_list|)
block|{
return|return
name|addGDM
argument_list|(
name|st
argument_list|,
name|GRStateTrait
operator|<
name|T
operator|>
operator|::
name|GDMIndex
argument_list|()
argument_list|,
name|GRStateTrait
operator|<
name|T
operator|>
operator|::
name|MakeVoidPtr
argument_list|(
name|GRStateTrait
operator|<
name|T
operator|>
operator|::
name|Add
argument_list|(
name|st
operator|->
name|get
operator|<
name|T
operator|>
operator|(
operator|)
argument_list|,
name|K
argument_list|,
name|C
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
specifier|const
name|GRState
operator|*
name|remove
argument_list|(
argument|const GRState* st
argument_list|,
argument|typename GRStateTrait<T>::key_type K
argument_list|,
argument|typename GRStateTrait<T>::context_type C
argument_list|)
block|{
return|return
name|addGDM
argument_list|(
name|st
argument_list|,
name|GRStateTrait
operator|<
name|T
operator|>
operator|::
name|GDMIndex
argument_list|()
argument_list|,
name|GRStateTrait
operator|<
name|T
operator|>
operator|::
name|MakeVoidPtr
argument_list|(
name|GRStateTrait
operator|<
name|T
operator|>
operator|::
name|Remove
argument_list|(
name|st
operator|->
name|get
operator|<
name|T
operator|>
operator|(
operator|)
argument_list|,
name|K
argument_list|,
name|C
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
name|void
modifier|*
name|FindGDMContext
argument_list|(
name|void
operator|*
name|index
argument_list|,
name|void
operator|*
call|(
modifier|*
name|CreateContext
call|)
argument_list|(
name|llvm
operator|::
name|BumpPtrAllocator
operator|&
argument_list|)
argument_list|,
name|void
argument_list|(
operator|*
name|DeleteContext
argument_list|)
argument_list|(
name|void
operator|*
argument_list|)
argument_list|)
decl_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
name|typename
name|GRStateTrait
operator|<
name|T
operator|>
operator|::
name|context_type
name|get_context
argument_list|()
block|{
name|void
operator|*
name|p
operator|=
name|FindGDMContext
argument_list|(
name|GRStateTrait
operator|<
name|T
operator|>
operator|::
name|GDMIndex
argument_list|()
argument_list|,
name|GRStateTrait
operator|<
name|T
operator|>
operator|::
name|CreateContext
argument_list|,
name|GRStateTrait
operator|<
name|T
operator|>
operator|::
name|DeleteContext
argument_list|)
block|;
return|return
name|GRStateTrait
operator|<
name|T
operator|>
operator|::
name|MakeContext
argument_list|(
name|p
argument_list|)
return|;
block|}
specifier|const
name|llvm
operator|::
name|APSInt
operator|*
name|getSymVal
argument_list|(
argument|const GRState* St
argument_list|,
argument|SymbolRef sym
argument_list|)
block|{
return|return
name|ConstraintMgr
operator|->
name|getSymVal
argument_list|(
name|St
argument_list|,
name|sym
argument_list|)
return|;
block|}
name|void
name|EndPath
parameter_list|(
specifier|const
name|GRState
modifier|*
name|St
parameter_list|)
block|{
name|ConstraintMgr
operator|->
name|EndPath
argument_list|(
name|St
argument_list|)
expr_stmt|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|// Out-of-line method definitions for GRState.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_expr_stmt
specifier|inline
specifier|const
name|llvm
operator|::
name|APSInt
operator|*
name|GRState
operator|::
name|getSymVal
argument_list|(
argument|SymbolRef sym
argument_list|)
block|{
return|return
name|getStateManager
argument_list|()
operator|.
name|getSymVal
argument_list|(
name|this
argument_list|,
name|sym
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
specifier|const
name|VarRegion
operator|*
name|GRState
operator|::
name|getRegion
argument_list|(
argument|const VarDecl *D
argument_list|,
argument|const LocationContext *LC
argument_list|)
specifier|const
block|{
return|return
name|getStateManager
argument_list|()
operator|.
name|getRegionManager
argument_list|()
operator|.
name|getVarRegion
argument_list|(
name|D
argument_list|,
name|LC
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
specifier|const
name|GRState
operator|*
name|GRState
operator|::
name|Assume
argument_list|(
argument|DefinedOrUnknownSVal Cond
argument_list|,
argument|bool Assumption
argument_list|)
specifier|const
block|{
if|if
condition|(
name|Cond
operator|.
name|isUnknown
argument_list|()
condition|)
return|return
name|this
return|;
end_expr_stmt

begin_return
return|return
name|getStateManager
argument_list|()
operator|.
name|ConstraintMgr
operator|->
name|Assume
argument_list|(
name|this
argument_list|,
name|cast
operator|<
name|DefinedSVal
operator|>
operator|(
name|Cond
operator|)
argument_list|,
name|Assumption
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}    inline
name|std
operator|::
name|pair
operator|<
specifier|const
name|GRState
operator|*
operator|,
specifier|const
name|GRState
operator|*
operator|>
name|GRState
operator|::
name|Assume
argument_list|(
argument|DefinedOrUnknownSVal Cond
argument_list|)
specifier|const
block|{
if|if
condition|(
name|Cond
operator|.
name|isUnknown
argument_list|()
condition|)
return|return
name|std
operator|::
name|make_pair
argument_list|(
name|this
argument_list|,
name|this
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
name|getStateManager
argument_list|()
operator|.
name|ConstraintMgr
operator|->
name|AssumeDual
argument_list|(
name|this
argument_list|,
name|cast
operator|<
name|DefinedSVal
operator|>
operator|(
name|Cond
operator|)
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  inline
specifier|const
name|GRState
operator|*
name|GRState
operator|::
name|AssumeInBound
argument_list|(
argument|DefinedOrUnknownSVal Idx
argument_list|,
argument|DefinedOrUnknownSVal UpperBound
argument_list|,
argument|bool Assumption
argument_list|)
specifier|const
block|{
if|if
condition|(
name|Idx
operator|.
name|isUnknown
argument_list|()
operator|||
name|UpperBound
operator|.
name|isUnknown
argument_list|()
condition|)
return|return
name|this
return|;
name|ConstraintManager
operator|&
name|CM
operator|=
operator|*
name|getStateManager
argument_list|()
operator|.
name|ConstraintMgr
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|CM
operator|.
name|AssumeInBound
argument_list|(
name|this
argument_list|,
name|cast
operator|<
name|DefinedSVal
operator|>
operator|(
name|Idx
operator|)
argument_list|,
name|cast
operator|<
name|DefinedSVal
operator|>
operator|(
name|UpperBound
operator|)
argument_list|,
name|Assumption
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  inline
specifier|const
name|GRState
operator|*
name|GRState
operator|::
name|bindCompoundLiteral
argument_list|(
argument|const CompoundLiteralExpr* CL
argument_list|,
argument|const LocationContext *LC
argument_list|,
argument|SVal V
argument_list|)
specifier|const
block|{
return|return
name|getStateManager
argument_list|()
operator|.
name|StoreMgr
operator|->
name|BindCompoundLiteral
argument_list|(
name|this
argument_list|,
name|CL
argument_list|,
name|LC
argument_list|,
name|V
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
specifier|const
name|GRState
operator|*
name|GRState
operator|::
name|bindDecl
argument_list|(
argument|const VarRegion* VR
argument_list|,
argument|SVal IVal
argument_list|)
specifier|const
block|{
return|return
name|getStateManager
argument_list|()
operator|.
name|StoreMgr
operator|->
name|BindDecl
argument_list|(
name|this
argument_list|,
name|VR
argument_list|,
name|IVal
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
specifier|const
name|GRState
operator|*
name|GRState
operator|::
name|bindDeclWithNoInit
argument_list|(
argument|const VarRegion* VR
argument_list|)
specifier|const
block|{
return|return
name|getStateManager
argument_list|()
operator|.
name|StoreMgr
operator|->
name|BindDeclWithNoInit
argument_list|(
name|this
argument_list|,
name|VR
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
specifier|const
name|GRState
operator|*
name|GRState
operator|::
name|bindLoc
argument_list|(
argument|Loc LV
argument_list|,
argument|SVal V
argument_list|)
specifier|const
block|{
return|return
name|getStateManager
argument_list|()
operator|.
name|StoreMgr
operator|->
name|Bind
argument_list|(
name|this
argument_list|,
name|LV
argument_list|,
name|V
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
specifier|const
name|GRState
operator|*
name|GRState
operator|::
name|bindLoc
argument_list|(
argument|SVal LV
argument_list|,
argument|SVal V
argument_list|)
specifier|const
block|{
return|return
operator|!
name|isa
operator|<
name|Loc
operator|>
operator|(
name|LV
operator|)
operator|?
name|this
operator|:
name|bindLoc
argument_list|(
name|cast
operator|<
name|Loc
operator|>
operator|(
name|LV
operator|)
argument_list|,
name|V
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|SVal
name|GRState
operator|::
name|getLValue
argument_list|(
argument|const VarDecl* VD
argument_list|,
argument|const LocationContext *LC
argument_list|)
specifier|const
block|{
return|return
name|getStateManager
argument_list|()
operator|.
name|StoreMgr
operator|->
name|getLValueVar
argument_list|(
name|VD
argument_list|,
name|LC
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|SVal
name|GRState
operator|::
name|getLValue
argument_list|(
argument|const StringLiteral *literal
argument_list|)
specifier|const
block|{
return|return
name|getStateManager
argument_list|()
operator|.
name|StoreMgr
operator|->
name|getLValueString
argument_list|(
name|literal
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|SVal
name|GRState
operator|::
name|getLValue
argument_list|(
argument|const CompoundLiteralExpr *literal
argument_list|,
argument|const LocationContext *LC
argument_list|)
specifier|const
block|{
return|return
name|getStateManager
argument_list|()
operator|.
name|StoreMgr
operator|->
name|getLValueCompoundLiteral
argument_list|(
name|literal
argument_list|,
name|LC
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|SVal
name|GRState
operator|::
name|getLValue
argument_list|(
argument|const ObjCIvarDecl *D
argument_list|,
argument|SVal Base
argument_list|)
specifier|const
block|{
return|return
name|getStateManager
argument_list|()
operator|.
name|StoreMgr
operator|->
name|getLValueIvar
argument_list|(
name|D
argument_list|,
name|Base
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|SVal
name|GRState
operator|::
name|getLValue
argument_list|(
argument|const FieldDecl* D
argument_list|,
argument|SVal Base
argument_list|)
specifier|const
block|{
return|return
name|getStateManager
argument_list|()
operator|.
name|StoreMgr
operator|->
name|getLValueField
argument_list|(
name|D
argument_list|,
name|Base
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|SVal
name|GRState
operator|::
name|getLValue
argument_list|(
argument|QualType ElementType
argument_list|,
argument|SVal Idx
argument_list|,
argument|SVal Base
argument_list|)
specifier|const
block|{
return|return
name|getStateManager
argument_list|()
operator|.
name|StoreMgr
operator|->
name|getLValueElement
argument_list|(
name|ElementType
argument_list|,
name|Idx
argument_list|,
name|Base
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
specifier|const
name|llvm
operator|::
name|APSInt
operator|*
name|GRState
operator|::
name|getSymVal
argument_list|(
argument|SymbolRef sym
argument_list|)
specifier|const
block|{
return|return
name|getStateManager
argument_list|()
operator|.
name|getSymVal
argument_list|(
name|this
argument_list|,
name|sym
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|SVal
name|GRState
operator|::
name|getSVal
argument_list|(
argument|const Stmt* Ex
argument_list|)
specifier|const
block|{
return|return
name|Env
operator|.
name|GetSVal
argument_list|(
name|Ex
argument_list|,
name|getStateManager
argument_list|()
operator|.
name|ValueMgr
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|SVal
name|GRState
operator|::
name|getSValAsScalarOrLoc
argument_list|(
argument|const Stmt *S
argument_list|)
specifier|const
block|{
if|if
condition|(
specifier|const
name|Expr
modifier|*
name|Ex
init|=
name|dyn_cast
operator|<
name|Expr
operator|>
operator|(
name|S
operator|)
condition|)
block|{
name|QualType
name|T
init|=
name|Ex
operator|->
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|Loc
operator|::
name|IsLocType
argument_list|(
name|T
argument_list|)
operator|||
name|T
operator|->
name|isIntegerType
argument_list|()
condition|)
return|return
name|getSVal
argument_list|(
name|S
argument_list|)
return|;
block|}
end_expr_stmt

begin_return
return|return
name|UnknownVal
argument_list|()
return|;
end_return

begin_expr_stmt
unit|}  inline
name|SVal
name|GRState
operator|::
name|getSVal
argument_list|(
argument|Loc LV
argument_list|,
argument|QualType T
argument_list|)
specifier|const
block|{
return|return
name|getStateManager
argument_list|()
operator|.
name|StoreMgr
operator|->
name|Retrieve
argument_list|(
name|this
argument_list|,
name|LV
argument_list|,
name|T
argument_list|)
operator|.
name|getSVal
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|SVal
name|GRState
operator|::
name|getSVal
argument_list|(
argument|const MemRegion* R
argument_list|)
specifier|const
block|{
return|return
name|getStateManager
argument_list|()
operator|.
name|StoreMgr
operator|->
name|Retrieve
argument_list|(
name|this
argument_list|,
name|loc
operator|::
name|MemRegionVal
argument_list|(
name|R
argument_list|)
argument_list|)
operator|.
name|getSVal
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|BasicValueFactory
operator|&
name|GRState
operator|::
name|getBasicVals
argument_list|()
specifier|const
block|{
return|return
name|getStateManager
argument_list|()
operator|.
name|getBasicVals
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|SymbolManager
operator|&
name|GRState
operator|::
name|getSymbolManager
argument_list|()
specifier|const
block|{
return|return
name|getStateManager
argument_list|()
operator|.
name|getSymbolManager
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|GRTransferFuncs
operator|&
name|GRState
operator|::
name|getTransferFuncs
argument_list|()
specifier|const
block|{
return|return
name|getStateManager
argument_list|()
operator|.
name|getTransferFuncs
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|const
name|GRState
operator|*
name|GRState
operator|::
name|add
argument_list|(
argument|typename GRStateTrait<T>::key_type K
argument_list|)
specifier|const
block|{
return|return
name|getStateManager
argument_list|()
operator|.
name|add
operator|<
name|T
operator|>
operator|(
name|this
operator|,
name|K
operator|,
name|get_context
operator|<
name|T
operator|>
operator|(
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|typename
name|GRStateTrait
operator|<
name|T
operator|>
operator|::
name|context_type
name|GRState
operator|::
name|get_context
argument_list|()
specifier|const
block|{
return|return
name|getStateManager
argument_list|()
operator|.
name|get_context
operator|<
name|T
operator|>
operator|(
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|const
name|GRState
operator|*
name|GRState
operator|::
name|remove
argument_list|(
argument|typename GRStateTrait<T>::key_type K
argument_list|)
specifier|const
block|{
return|return
name|getStateManager
argument_list|()
operator|.
name|remove
operator|<
name|T
operator|>
operator|(
name|this
operator|,
name|K
operator|,
name|get_context
operator|<
name|T
operator|>
operator|(
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|const
name|GRState
operator|*
name|GRState
operator|::
name|remove
argument_list|(
argument|typename GRStateTrait<T>::key_type K
argument_list|,
argument|typename GRStateTrait<T>::context_type C
argument_list|)
specifier|const
block|{
return|return
name|getStateManager
argument_list|()
operator|.
name|remove
operator|<
name|T
operator|>
operator|(
name|this
operator|,
name|K
operator|,
name|C
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|const
name|GRState
operator|*
name|GRState
operator|::
name|set
argument_list|(
argument|typename GRStateTrait<T>::data_type D
argument_list|)
specifier|const
block|{
return|return
name|getStateManager
argument_list|()
operator|.
name|set
operator|<
name|T
operator|>
operator|(
name|this
operator|,
name|D
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|const
name|GRState
operator|*
name|GRState
operator|::
name|set
argument_list|(
argument|typename GRStateTrait<T>::key_type K
argument_list|,
argument|typename GRStateTrait<T>::value_type E
argument_list|)
specifier|const
block|{
return|return
name|getStateManager
argument_list|()
operator|.
name|set
operator|<
name|T
operator|>
operator|(
name|this
operator|,
name|K
operator|,
name|E
operator|,
name|get_context
operator|<
name|T
operator|>
operator|(
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|const
name|GRState
operator|*
name|GRState
operator|::
name|set
argument_list|(
argument|typename GRStateTrait<T>::key_type K
argument_list|,
argument|typename GRStateTrait<T>::value_type E
argument_list|,
argument|typename GRStateTrait<T>::context_type C
argument_list|)
specifier|const
block|{
return|return
name|getStateManager
argument_list|()
operator|.
name|set
operator|<
name|T
operator|>
operator|(
name|this
operator|,
name|K
operator|,
name|E
operator|,
name|C
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|CB
operator|>
name|CB
name|GRState
operator|::
name|scanReachableSymbols
argument_list|(
argument|SVal val
argument_list|)
specifier|const
block|{
name|CB
name|cb
argument_list|(
name|this
argument_list|)
block|;
name|scanReachableSymbols
argument_list|(
name|val
argument_list|,
name|cb
argument_list|)
block|;
return|return
name|cb
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|CB
operator|>
name|CB
name|GRState
operator|::
name|scanReachableSymbols
argument_list|(
argument|const SVal *beg
argument_list|,
argument|const SVal *end
argument_list|)
specifier|const
block|{
name|CB
name|cb
argument_list|(
name|this
argument_list|)
block|;
name|scanReachableSymbols
argument_list|(
name|beg
argument_list|,
name|end
argument_list|,
name|cb
argument_list|)
block|;
return|return
name|cb
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|CB
operator|>
name|CB
name|GRState
operator|::
name|scanReachableSymbols
argument_list|(
argument|const MemRegion * const *beg
argument_list|,
argument|const MemRegion * const *end
argument_list|)
specifier|const
block|{
name|CB
name|cb
argument_list|(
name|this
argument_list|)
block|;
name|scanReachableSymbols
argument_list|(
name|beg
argument_list|,
name|end
argument_list|,
name|cb
argument_list|)
block|;
return|return
name|cb
return|;
block|}
end_expr_stmt

begin_comment
unit|}
comment|// end clang namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

