begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- PartialDiagnostic.h - Diagnostic "closures" ------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file implements a partial diagnostic that can be emitted anwyhere
end_comment

begin_comment
comment|//  in a DiagnosticBuilder stream.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_PARTIALDIAGNOSTIC_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_PARTIALDIAGNOSTIC_H
end_define

begin_include
include|#
directive|include
file|"clang/Basic/Diagnostic.h"
end_include

begin_include
include|#
directive|include
file|"clang/Basic/SourceLocation.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/STLExtras.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/DataTypes.h"
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|PartialDiagnostic
block|{
name|public
label|:
struct|struct
name|Storage
block|{
name|Storage
argument_list|()
operator|:
name|NumDiagArgs
argument_list|(
literal|0
argument_list|)
operator|,
name|NumDiagRanges
argument_list|(
literal|0
argument_list|)
operator|,
name|NumFixItHints
argument_list|(
literal|0
argument_list|)
block|{ }
expr|enum
block|{
comment|/// MaxArguments - The maximum number of arguments we can hold. We
comment|/// currently only support up to 10 arguments (%0-%9).
comment|/// A single diagnostic with more than that almost certainly has to
comment|/// be simplified anyway.
name|MaxArguments
operator|=
literal|10
block|}
expr_stmt|;
comment|/// NumDiagArgs - This contains the number of entries in Arguments.
name|unsigned
name|char
name|NumDiagArgs
decl_stmt|;
comment|/// NumDiagRanges - This is the number of ranges in the DiagRanges array.
name|unsigned
name|char
name|NumDiagRanges
decl_stmt|;
comment|/// \brief The number of code modifications hints in the
comment|/// FixItHints array.
name|unsigned
name|char
name|NumFixItHints
decl_stmt|;
comment|/// DiagArgumentsKind - This is an array of ArgumentKind::ArgumentKind enum
comment|/// values, with one for each argument.  This specifies whether the argument
comment|/// is in DiagArgumentsStr or in DiagArguments.
name|unsigned
name|char
name|DiagArgumentsKind
index|[
name|MaxArguments
index|]
decl_stmt|;
comment|/// DiagArgumentsVal - The values for the various substitution positions.
comment|/// This is used when the argument is not an std::string. The specific value
comment|/// is mangled into an intptr_t and the intepretation depends on exactly
comment|/// what sort of argument kind it is.
name|intptr_t
name|DiagArgumentsVal
index|[
name|MaxArguments
index|]
decl_stmt|;
comment|/// \brief The values for the various substitution positions that have
comment|/// string arguments.
name|std
operator|::
name|string
name|DiagArgumentsStr
index|[
name|MaxArguments
index|]
expr_stmt|;
comment|/// DiagRanges - The list of ranges added to this diagnostic.  It currently
comment|/// only support 10 ranges, could easily be extended if needed.
name|CharSourceRange
name|DiagRanges
index|[
literal|10
index|]
decl_stmt|;
enum|enum
block|{
name|MaxFixItHints
init|=
literal|3
block|}
enum|;
comment|/// FixItHints - If valid, provides a hint with some code
comment|/// to insert, remove, or modify at a particular position.
name|FixItHint
name|FixItHints
index|[
name|MaxFixItHints
index|]
decl_stmt|;
block|}
struct|;
comment|/// \brief An allocator for Storage objects, which uses a small cache to
comment|/// objects, used to reduce malloc()/free() traffic for partial diagnostics.
name|class
name|StorageAllocator
block|{
specifier|static
specifier|const
name|unsigned
name|NumCached
init|=
literal|4
decl_stmt|;
name|Storage
name|Cached
index|[
name|NumCached
index|]
decl_stmt|;
name|Storage
modifier|*
name|FreeList
index|[
name|NumCached
index|]
decl_stmt|;
name|unsigned
name|NumFreeListEntries
decl_stmt|;
name|public
label|:
name|StorageAllocator
argument_list|()
expr_stmt|;
operator|~
name|StorageAllocator
argument_list|()
expr_stmt|;
comment|/// \brief Allocate new storage.
name|Storage
modifier|*
name|Allocate
parameter_list|()
block|{
if|if
condition|(
name|NumFreeListEntries
operator|==
literal|0
condition|)
return|return
name|new
name|Storage
return|;
name|Storage
modifier|*
name|Result
init|=
name|FreeList
index|[
operator|--
name|NumFreeListEntries
index|]
decl_stmt|;
name|Result
operator|->
name|NumDiagArgs
operator|=
literal|0
expr_stmt|;
name|Result
operator|->
name|NumDiagRanges
operator|=
literal|0
expr_stmt|;
name|Result
operator|->
name|NumFixItHints
operator|=
literal|0
expr_stmt|;
return|return
name|Result
return|;
block|}
comment|/// \brief Free the given storage object.
name|void
name|Deallocate
parameter_list|(
name|Storage
modifier|*
name|S
parameter_list|)
block|{
if|if
condition|(
name|S
operator|>=
name|Cached
operator|&&
name|S
operator|<=
name|Cached
operator|+
name|NumCached
condition|)
block|{
name|FreeList
index|[
name|NumFreeListEntries
operator|++
index|]
operator|=
name|S
expr_stmt|;
return|return;
block|}
name|delete
name|S
decl_stmt|;
block|}
block|}
empty_stmt|;
name|private
label|:
comment|// NOTE: Sema assumes that PartialDiagnostic is location-invariant
comment|// in the sense that its bits can be safely memcpy'ed and destructed
comment|// in the new location.
comment|/// DiagID - The diagnostic ID.
name|mutable
name|unsigned
name|DiagID
decl_stmt|;
comment|/// DiagStorage - Storage for args and ranges.
name|mutable
name|Storage
modifier|*
name|DiagStorage
decl_stmt|;
comment|/// \brief Allocator used to allocate storage for this diagnostic.
name|StorageAllocator
modifier|*
name|Allocator
decl_stmt|;
comment|/// \brief Retrieve storage for this particular diagnostic.
name|Storage
operator|*
name|getStorage
argument_list|()
specifier|const
block|{
if|if
condition|(
name|DiagStorage
condition|)
return|return
name|DiagStorage
return|;
if|if
condition|(
name|Allocator
condition|)
name|DiagStorage
operator|=
name|Allocator
operator|->
name|Allocate
argument_list|()
expr_stmt|;
else|else
block|{
name|assert
argument_list|(
name|Allocator
operator|!=
name|reinterpret_cast
operator|<
name|StorageAllocator
operator|*
operator|>
operator|(
operator|~
name|uintptr_t
argument_list|(
literal|0
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|DiagStorage
operator|=
name|new
name|Storage
expr_stmt|;
block|}
return|return
name|DiagStorage
return|;
block|}
name|void
name|freeStorage
parameter_list|()
block|{
if|if
condition|(
operator|!
name|DiagStorage
condition|)
return|return;
if|if
condition|(
name|Allocator
condition|)
name|Allocator
operator|->
name|Deallocate
argument_list|(
name|DiagStorage
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|Allocator
operator|!=
name|reinterpret_cast
operator|<
name|StorageAllocator
operator|*
operator|>
operator|(
operator|~
name|uintptr_t
argument_list|(
literal|0
argument_list|)
operator|)
condition|)
name|delete
name|DiagStorage
decl_stmt|;
name|DiagStorage
operator|=
literal|0
expr_stmt|;
block|}
name|void
name|AddSourceRange
argument_list|(
specifier|const
name|CharSourceRange
operator|&
name|R
argument_list|)
decl|const
block|{
if|if
condition|(
operator|!
name|DiagStorage
condition|)
name|DiagStorage
operator|=
name|getStorage
argument_list|()
expr_stmt|;
name|assert
argument_list|(
name|DiagStorage
operator|->
name|NumDiagRanges
operator|<
name|llvm
operator|::
name|array_lengthof
argument_list|(
name|DiagStorage
operator|->
name|DiagRanges
argument_list|)
operator|&&
literal|"Too many arguments to diagnostic!"
argument_list|)
expr_stmt|;
name|DiagStorage
operator|->
name|DiagRanges
index|[
name|DiagStorage
operator|->
name|NumDiagRanges
operator|++
index|]
operator|=
name|R
expr_stmt|;
block|}
name|void
name|AddFixItHint
argument_list|(
specifier|const
name|FixItHint
operator|&
name|Hint
argument_list|)
decl|const
block|{
if|if
condition|(
name|Hint
operator|.
name|isNull
argument_list|()
condition|)
return|return;
if|if
condition|(
operator|!
name|DiagStorage
condition|)
name|DiagStorage
operator|=
name|getStorage
argument_list|()
expr_stmt|;
name|assert
argument_list|(
name|DiagStorage
operator|->
name|NumFixItHints
operator|<
name|Storage
operator|::
name|MaxFixItHints
operator|&&
literal|"Too many code modification hints!"
argument_list|)
expr_stmt|;
name|DiagStorage
operator|->
name|FixItHints
index|[
name|DiagStorage
operator|->
name|NumFixItHints
operator|++
index|]
operator|=
name|Hint
expr_stmt|;
block|}
name|public
label|:
name|PartialDiagnostic
argument_list|(
argument|unsigned DiagID
argument_list|,
argument|StorageAllocator&Allocator
argument_list|)
block|:
name|DiagID
argument_list|(
name|DiagID
argument_list|)
operator|,
name|DiagStorage
argument_list|(
literal|0
argument_list|)
operator|,
name|Allocator
argument_list|(
argument|&Allocator
argument_list|)
block|{ }
name|PartialDiagnostic
argument_list|(
specifier|const
name|PartialDiagnostic
operator|&
name|Other
argument_list|)
operator|:
name|DiagID
argument_list|(
name|Other
operator|.
name|DiagID
argument_list|)
operator|,
name|DiagStorage
argument_list|(
literal|0
argument_list|)
operator|,
name|Allocator
argument_list|(
argument|Other.Allocator
argument_list|)
block|{
if|if
condition|(
name|Other
operator|.
name|DiagStorage
condition|)
block|{
name|DiagStorage
operator|=
name|getStorage
argument_list|()
expr_stmt|;
operator|*
name|DiagStorage
operator|=
operator|*
name|Other
operator|.
name|DiagStorage
expr_stmt|;
block|}
block|}
name|PartialDiagnostic
argument_list|(
specifier|const
name|PartialDiagnostic
operator|&
name|Other
argument_list|,
name|Storage
operator|*
name|DiagStorage
argument_list|)
operator|:
name|DiagID
argument_list|(
name|Other
operator|.
name|DiagID
argument_list|)
operator|,
name|DiagStorage
argument_list|(
name|DiagStorage
argument_list|)
operator|,
name|Allocator
argument_list|(
argument|reinterpret_cast<StorageAllocator *>(~uintptr_t(
literal|0
argument|))
argument_list|)
block|{
if|if
condition|(
name|Other
operator|.
name|DiagStorage
condition|)
operator|*
name|this
operator|->
name|DiagStorage
operator|=
operator|*
name|Other
operator|.
name|DiagStorage
expr_stmt|;
block|}
name|PartialDiagnostic
argument_list|(
specifier|const
name|DiagnosticInfo
operator|&
name|Other
argument_list|,
name|StorageAllocator
operator|&
name|Allocator
argument_list|)
operator|:
name|DiagID
argument_list|(
name|Other
operator|.
name|getID
argument_list|()
argument_list|)
operator|,
name|DiagStorage
argument_list|(
literal|0
argument_list|)
operator|,
name|Allocator
argument_list|(
argument|&Allocator
argument_list|)
block|{
comment|// Copy arguments.
for|for
control|(
name|unsigned
name|I
init|=
literal|0
init|,
name|N
init|=
name|Other
operator|.
name|getNumArgs
argument_list|()
init|;
name|I
operator|!=
name|N
condition|;
operator|++
name|I
control|)
block|{
if|if
condition|(
name|Other
operator|.
name|getArgKind
argument_list|(
name|I
argument_list|)
operator|==
name|Diagnostic
operator|::
name|ak_std_string
condition|)
name|AddString
argument_list|(
name|Other
operator|.
name|getArgStdStr
argument_list|(
name|I
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|AddTaggedVal
argument_list|(
name|Other
operator|.
name|getRawArg
argument_list|(
name|I
argument_list|)
argument_list|,
name|Other
operator|.
name|getArgKind
argument_list|(
name|I
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Copy source ranges.
for|for
control|(
name|unsigned
name|I
init|=
literal|0
init|,
name|N
init|=
name|Other
operator|.
name|getNumRanges
argument_list|()
init|;
name|I
operator|!=
name|N
condition|;
operator|++
name|I
control|)
name|AddSourceRange
argument_list|(
name|Other
operator|.
name|getRange
argument_list|(
name|I
argument_list|)
argument_list|)
expr_stmt|;
comment|// Copy fix-its.
for|for
control|(
name|unsigned
name|I
init|=
literal|0
init|,
name|N
init|=
name|Other
operator|.
name|getNumFixItHints
argument_list|()
init|;
name|I
operator|!=
name|N
condition|;
operator|++
name|I
control|)
name|AddFixItHint
argument_list|(
name|Other
operator|.
name|getFixItHint
argument_list|(
name|I
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|PartialDiagnostic
modifier|&
name|operator
init|=
operator|(
specifier|const
name|PartialDiagnostic
operator|&
name|Other
operator|)
block|{
name|DiagID
operator|=
name|Other
operator|.
name|DiagID
block|;
if|if
condition|(
name|Other
operator|.
name|DiagStorage
condition|)
block|{
if|if
condition|(
operator|!
name|DiagStorage
condition|)
name|DiagStorage
operator|=
name|getStorage
argument_list|()
expr_stmt|;
operator|*
name|DiagStorage
operator|=
operator|*
name|Other
operator|.
name|DiagStorage
expr_stmt|;
block|}
else|else
block|{
name|freeStorage
argument_list|()
expr_stmt|;
block|}
return|return
operator|*
name|this
return|;
block|}
end_decl_stmt

begin_expr_stmt
operator|~
name|PartialDiagnostic
argument_list|()
block|{
name|freeStorage
argument_list|()
block|;   }
name|unsigned
name|getDiagID
argument_list|()
specifier|const
block|{
return|return
name|DiagID
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|void
name|AddTaggedVal
argument_list|(
name|intptr_t
name|V
argument_list|,
name|Diagnostic
operator|::
name|ArgumentKind
name|Kind
argument_list|)
decl|const
block|{
if|if
condition|(
operator|!
name|DiagStorage
condition|)
name|DiagStorage
operator|=
name|getStorage
argument_list|()
expr_stmt|;
name|assert
argument_list|(
name|DiagStorage
operator|->
name|NumDiagArgs
operator|<
name|Storage
operator|::
name|MaxArguments
operator|&&
literal|"Too many arguments to diagnostic!"
argument_list|)
expr_stmt|;
name|DiagStorage
operator|->
name|DiagArgumentsKind
index|[
name|DiagStorage
operator|->
name|NumDiagArgs
index|]
operator|=
name|Kind
expr_stmt|;
name|DiagStorage
operator|->
name|DiagArgumentsVal
index|[
name|DiagStorage
operator|->
name|NumDiagArgs
operator|++
index|]
operator|=
name|V
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|void
name|AddString
argument_list|(
name|llvm
operator|::
name|StringRef
name|V
argument_list|)
decl|const
block|{
if|if
condition|(
operator|!
name|DiagStorage
condition|)
name|DiagStorage
operator|=
name|getStorage
argument_list|()
expr_stmt|;
name|assert
argument_list|(
name|DiagStorage
operator|->
name|NumDiagArgs
operator|<
name|Storage
operator|::
name|MaxArguments
operator|&&
literal|"Too many arguments to diagnostic!"
argument_list|)
expr_stmt|;
name|DiagStorage
operator|->
name|DiagArgumentsKind
index|[
name|DiagStorage
operator|->
name|NumDiagArgs
index|]
operator|=
name|Diagnostic
operator|::
name|ak_std_string
expr_stmt|;
name|DiagStorage
operator|->
name|DiagArgumentsStr
index|[
name|DiagStorage
operator|->
name|NumDiagArgs
operator|++
index|]
operator|=
name|V
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|void
name|Emit
argument_list|(
specifier|const
name|DiagnosticBuilder
operator|&
name|DB
argument_list|)
decl|const
block|{
if|if
condition|(
operator|!
name|DiagStorage
condition|)
return|return;
comment|// Add all arguments.
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|,
name|e
init|=
name|DiagStorage
operator|->
name|NumDiagArgs
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|(
name|Diagnostic
operator|::
name|ArgumentKind
operator|)
name|DiagStorage
operator|->
name|DiagArgumentsKind
index|[
name|i
index|]
operator|==
name|Diagnostic
operator|::
name|ak_std_string
condition|)
name|DB
operator|.
name|AddString
argument_list|(
name|DiagStorage
operator|->
name|DiagArgumentsStr
index|[
name|i
index|]
argument_list|)
expr_stmt|;
else|else
name|DB
operator|.
name|AddTaggedVal
argument_list|(
name|DiagStorage
operator|->
name|DiagArgumentsVal
index|[
name|i
index|]
argument_list|,
operator|(
name|Diagnostic
operator|::
name|ArgumentKind
operator|)
name|DiagStorage
operator|->
name|DiagArgumentsKind
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Add all ranges.
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|,
name|e
init|=
name|DiagStorage
operator|->
name|NumDiagRanges
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
name|DB
operator|.
name|AddSourceRange
argument_list|(
name|DiagStorage
operator|->
name|DiagRanges
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|// Add all fix-its.
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|,
name|e
init|=
name|DiagStorage
operator|->
name|NumFixItHints
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
name|DB
operator|.
name|AddFixItHint
argument_list|(
name|DiagStorage
operator|->
name|FixItHints
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|/// \brief Clear out this partial diagnostic, giving it a new diagnostic ID
end_comment

begin_comment
comment|/// and removing all of its arguments, ranges, and fix-it hints.
end_comment

begin_function
name|void
name|Reset
parameter_list|(
name|unsigned
name|DiagID
init|=
literal|0
parameter_list|)
block|{
name|this
operator|->
name|DiagID
operator|=
name|DiagID
expr_stmt|;
name|freeStorage
argument_list|()
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|bool
name|hasStorage
argument_list|()
specifier|const
block|{
return|return
name|DiagStorage
operator|!=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
specifier|const
name|PartialDiagnostic
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|PartialDiagnostic
operator|&
name|PD
operator|,
name|unsigned
name|I
operator|)
block|{
name|PD
operator|.
name|AddTaggedVal
argument_list|(
name|I
argument_list|,
name|Diagnostic
operator|::
name|ak_uint
argument_list|)
block|;
return|return
name|PD
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
specifier|const
name|PartialDiagnostic
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|PartialDiagnostic
operator|&
name|PD
operator|,
name|int
name|I
operator|)
block|{
name|PD
operator|.
name|AddTaggedVal
argument_list|(
name|I
argument_list|,
name|Diagnostic
operator|::
name|ak_sint
argument_list|)
block|;
return|return
name|PD
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
specifier|inline
specifier|const
name|PartialDiagnostic
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|PartialDiagnostic
operator|&
name|PD
operator|,
specifier|const
name|char
operator|*
name|S
operator|)
block|{
name|PD
operator|.
name|AddTaggedVal
argument_list|(
name|reinterpret_cast
operator|<
name|intptr_t
operator|>
operator|(
name|S
operator|)
argument_list|,
name|Diagnostic
operator|::
name|ak_c_string
argument_list|)
block|;
return|return
name|PD
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
specifier|inline
specifier|const
name|PartialDiagnostic
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|PartialDiagnostic
operator|&
name|PD
operator|,
name|llvm
operator|::
name|StringRef
name|S
operator|)
block|{
name|PD
operator|.
name|AddString
argument_list|(
name|S
argument_list|)
block|;
return|return
name|PD
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
specifier|inline
specifier|const
name|PartialDiagnostic
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|PartialDiagnostic
operator|&
name|PD
operator|,
specifier|const
name|SourceRange
operator|&
name|R
operator|)
block|{
name|PD
operator|.
name|AddSourceRange
argument_list|(
name|CharSourceRange
operator|::
name|getTokenRange
argument_list|(
name|R
argument_list|)
argument_list|)
block|;
return|return
name|PD
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
specifier|inline
specifier|const
name|PartialDiagnostic
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|PartialDiagnostic
operator|&
name|PD
operator|,
specifier|const
name|CharSourceRange
operator|&
name|R
operator|)
block|{
name|PD
operator|.
name|AddSourceRange
argument_list|(
name|R
argument_list|)
block|;
return|return
name|PD
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
specifier|const
name|PartialDiagnostic
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|PartialDiagnostic
operator|&
name|PD
operator|,
specifier|const
name|FixItHint
operator|&
name|Hint
operator|)
block|{
name|PD
operator|.
name|AddFixItHint
argument_list|(
name|Hint
argument_list|)
block|;
return|return
name|PD
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
specifier|inline
specifier|const
name|DiagnosticBuilder
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|DiagnosticBuilder
operator|&
name|DB
operator|,
specifier|const
name|PartialDiagnostic
operator|&
name|PD
operator|)
block|{
name|PD
operator|.
name|Emit
argument_list|(
name|DB
argument_list|)
block|;
return|return
name|DB
return|;
block|}
end_expr_stmt

begin_comment
comment|/// \brief A partial diagnostic along with the source location where this
end_comment

begin_comment
comment|/// diagnostic occurs.
end_comment

begin_typedef
typedef|typedef
name|std
operator|::
name|pair
operator|<
name|SourceLocation
operator|,
name|PartialDiagnostic
operator|>
name|PartialDiagnosticAt
expr_stmt|;
end_typedef

begin_comment
unit|}
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

