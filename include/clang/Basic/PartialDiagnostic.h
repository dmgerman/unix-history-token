begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- PartialDiagnostic.h - Diagnostic "closures" ----------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file implements a partial diagnostic that can be emitted anwyhere
end_comment

begin_comment
comment|//  in a DiagnosticBuilder stream.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_PARTIALDIAGNOSTIC_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_PARTIALDIAGNOSTIC_H
end_define

begin_include
include|#
directive|include
file|"clang/AST/Type.h"
end_include

begin_include
include|#
directive|include
file|"clang/Basic/Diagnostic.h"
end_include

begin_include
include|#
directive|include
file|"clang/Basic/SourceLocation.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/STLExtras.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|DeclarationName
decl_stmt|;
name|class
name|PartialDiagnostic
block|{
struct|struct
name|Storage
block|{
name|Storage
argument_list|()
operator|:
name|NumDiagArgs
argument_list|(
literal|0
argument_list|)
operator|,
name|NumDiagRanges
argument_list|(
literal|0
argument_list|)
block|{ }
expr|enum
block|{
comment|/// MaxArguments - The maximum number of arguments we can hold. We
comment|/// currently only support up to 10 arguments (%0-%9).
comment|/// A single diagnostic with more than that almost certainly has to
comment|/// be simplified anyway.
name|MaxArguments
operator|=
literal|10
block|}
expr_stmt|;
comment|/// NumDiagArgs - This contains the number of entries in Arguments.
name|unsigned
name|char
name|NumDiagArgs
decl_stmt|;
comment|/// NumDiagRanges - This is the number of ranges in the DiagRanges array.
name|unsigned
name|char
name|NumDiagRanges
decl_stmt|;
comment|/// DiagArgumentsKind - This is an array of ArgumentKind::ArgumentKind enum
comment|/// values, with one for each argument.  This specifies whether the argument
comment|/// is in DiagArgumentsStr or in DiagArguments.
name|unsigned
name|char
name|DiagArgumentsKind
index|[
name|MaxArguments
index|]
decl_stmt|;
comment|/// DiagArgumentsVal - The values for the various substitution positions.
comment|/// This is used when the argument is not an std::string. The specific value
comment|/// is mangled into an intptr_t and the intepretation depends on exactly
comment|/// what sort of argument kind it is.
name|mutable
name|intptr_t
name|DiagArgumentsVal
index|[
name|MaxArguments
index|]
decl_stmt|;
comment|/// DiagRanges - The list of ranges added to this diagnostic.  It currently
comment|/// only support 10 ranges, could easily be extended if needed.
name|mutable
specifier|const
name|SourceRange
modifier|*
name|DiagRanges
index|[
literal|10
index|]
decl_stmt|;
block|}
struct|;
comment|/// DiagID - The diagnostic ID.
name|mutable
name|unsigned
name|DiagID
decl_stmt|;
comment|/// DiagStorare - Storge for args and ranges.
name|mutable
name|Storage
modifier|*
name|DiagStorage
decl_stmt|;
name|void
name|AddTaggedVal
argument_list|(
name|intptr_t
name|V
argument_list|,
name|Diagnostic
operator|::
name|ArgumentKind
name|Kind
argument_list|)
decl|const
block|{
if|if
condition|(
operator|!
name|DiagStorage
condition|)
name|DiagStorage
operator|=
name|new
name|Storage
expr_stmt|;
name|assert
argument_list|(
name|DiagStorage
operator|->
name|NumDiagArgs
operator|<
name|Storage
operator|::
name|MaxArguments
operator|&&
literal|"Too many arguments to diagnostic!"
argument_list|)
expr_stmt|;
name|DiagStorage
operator|->
name|DiagArgumentsKind
index|[
name|DiagStorage
operator|->
name|NumDiagArgs
index|]
operator|=
name|Kind
expr_stmt|;
name|DiagStorage
operator|->
name|DiagArgumentsVal
index|[
name|DiagStorage
operator|->
name|NumDiagArgs
operator|++
index|]
operator|=
name|V
expr_stmt|;
block|}
name|void
name|AddSourceRange
argument_list|(
specifier|const
name|SourceRange
operator|&
name|R
argument_list|)
decl|const
block|{
if|if
condition|(
operator|!
name|DiagStorage
condition|)
name|DiagStorage
operator|=
name|new
name|Storage
expr_stmt|;
name|assert
argument_list|(
name|DiagStorage
operator|->
name|NumDiagRanges
operator|<
name|llvm
operator|::
name|array_lengthof
argument_list|(
name|DiagStorage
operator|->
name|DiagRanges
argument_list|)
operator|&&
literal|"Too many arguments to diagnostic!"
argument_list|)
expr_stmt|;
name|DiagStorage
operator|->
name|DiagRanges
index|[
name|DiagStorage
operator|->
name|NumDiagRanges
operator|++
index|]
operator|=
operator|&
name|R
expr_stmt|;
block|}
name|void
name|operator
init|=
operator|(
specifier|const
name|PartialDiagnostic
operator|&
operator|)
decl_stmt|;
comment|// DO NOT IMPLEMENT
name|public
label|:
name|PartialDiagnostic
argument_list|(
argument|unsigned DiagID
argument_list|)
block|:
name|DiagID
argument_list|(
name|DiagID
argument_list|)
operator|,
name|DiagStorage
argument_list|(
literal|0
argument_list|)
block|{ }
name|PartialDiagnostic
argument_list|(
specifier|const
name|PartialDiagnostic
operator|&
name|Other
argument_list|)
operator|:
name|DiagID
argument_list|(
name|Other
operator|.
name|DiagID
argument_list|)
operator|,
name|DiagStorage
argument_list|(
argument|Other.DiagStorage
argument_list|)
block|{
name|Other
operator|.
name|DiagID
operator|=
literal|0
block|;
name|Other
operator|.
name|DiagStorage
operator|=
literal|0
block|;   }
operator|~
name|PartialDiagnostic
argument_list|()
block|{
name|delete
name|DiagStorage
block|;   }
name|unsigned
name|getDiagID
argument_list|()
specifier|const
block|{
return|return
name|DiagID
return|;
block|}
name|void
name|Emit
argument_list|(
specifier|const
name|DiagnosticBuilder
operator|&
name|DB
argument_list|)
decl|const
block|{
if|if
condition|(
operator|!
name|DiagStorage
condition|)
return|return;
comment|// Add all arguments.
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|,
name|e
init|=
name|DiagStorage
operator|->
name|NumDiagArgs
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
block|{
name|DB
operator|.
name|AddTaggedVal
argument_list|(
name|DiagStorage
operator|->
name|DiagArgumentsVal
index|[
name|i
index|]
argument_list|,
operator|(
name|Diagnostic
operator|::
name|ArgumentKind
operator|)
name|DiagStorage
operator|->
name|DiagArgumentsKind
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Add all ranges.
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|,
name|e
init|=
name|DiagStorage
operator|->
name|NumDiagRanges
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
name|DB
operator|.
name|AddSourceRange
argument_list|(
operator|*
name|DiagStorage
operator|->
name|DiagRanges
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|friend
specifier|const
name|PartialDiagnostic
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|PartialDiagnostic
operator|&
name|PD
operator|,
name|QualType
name|T
operator|)
block|{
name|PD
operator|.
name|AddTaggedVal
argument_list|(
name|reinterpret_cast
operator|<
name|intptr_t
operator|>
operator|(
name|T
operator|.
name|getAsOpaquePtr
argument_list|()
operator|)
argument_list|,
name|Diagnostic
operator|::
name|ak_qualtype
argument_list|)
block|;
return|return
name|PD
return|;
block|}
name|friend
specifier|const
name|PartialDiagnostic
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|PartialDiagnostic
operator|&
name|PD
operator|,
name|unsigned
name|I
operator|)
block|{
name|PD
operator|.
name|AddTaggedVal
argument_list|(
name|I
argument_list|,
name|Diagnostic
operator|::
name|ak_uint
argument_list|)
block|;
return|return
name|PD
return|;
block|}
name|friend
specifier|const
name|PartialDiagnostic
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|PartialDiagnostic
operator|&
name|PD
operator|,
name|int
name|I
operator|)
block|{
name|PD
operator|.
name|AddTaggedVal
argument_list|(
name|I
argument_list|,
name|Diagnostic
operator|::
name|ak_sint
argument_list|)
block|;
return|return
name|PD
return|;
block|}
name|friend
specifier|inline
specifier|const
name|PartialDiagnostic
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|PartialDiagnostic
operator|&
name|PD
operator|,
specifier|const
name|char
operator|*
name|S
operator|)
block|{
name|PD
operator|.
name|AddTaggedVal
argument_list|(
name|reinterpret_cast
operator|<
name|intptr_t
operator|>
operator|(
name|S
operator|)
argument_list|,
name|Diagnostic
operator|::
name|ak_c_string
argument_list|)
block|;
return|return
name|PD
return|;
block|}
name|friend
specifier|inline
specifier|const
name|PartialDiagnostic
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|PartialDiagnostic
operator|&
name|PD
operator|,
specifier|const
name|SourceRange
operator|&
name|R
operator|)
block|{
name|PD
operator|.
name|AddSourceRange
argument_list|(
name|R
argument_list|)
block|;
return|return
name|PD
return|;
block|}
name|friend
specifier|const
name|PartialDiagnostic
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|PartialDiagnostic
operator|&
name|PD
operator|,
name|DeclarationName
name|N
operator|)
expr_stmt|;
block|}
empty_stmt|;
specifier|inline
name|PartialDiagnostic
name|PDiag
parameter_list|(
name|unsigned
name|DiagID
init|=
literal|0
parameter_list|)
block|{
return|return
name|PartialDiagnostic
argument_list|(
name|DiagID
argument_list|)
return|;
block|}
specifier|inline
specifier|const
name|DiagnosticBuilder
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|DiagnosticBuilder
operator|&
name|DB
operator|,
specifier|const
name|PartialDiagnostic
operator|&
name|PD
operator|)
block|{
name|PD
operator|.
name|Emit
argument_list|(
name|DB
argument_list|)
block|;
return|return
name|DB
return|;
block|}
block|}
end_decl_stmt

begin_comment
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

