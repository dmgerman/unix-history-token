begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- SourceLocation.h - Compact identifier for Source Files -*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines the SourceLocation class.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_SOURCELOCATION_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_SOURCELOCATION_H
end_define

begin_include
include|#
directive|include
file|<utility>
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MemoryBuffer
decl_stmt|;
name|class
name|raw_ostream
decl_stmt|;
name|class
name|StringRef
decl_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|DenseMapInfo
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|isPodLike
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|SourceManager
decl_stmt|;
comment|/// FileID - This is an opaque identifier used by SourceManager which refers to
comment|/// a source file (MemoryBuffer) along with its #include path and #line data.
comment|///
name|class
name|FileID
block|{
comment|/// ID - Opaque identifier, 0 is "invalid".
name|unsigned
name|ID
decl_stmt|;
name|public
label|:
name|FileID
argument_list|()
operator|:
name|ID
argument_list|(
literal|0
argument_list|)
block|{}
name|bool
name|isInvalid
argument_list|()
specifier|const
block|{
return|return
name|ID
operator|==
literal|0
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|FileID
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|ID
operator|==
name|RHS
operator|.
name|ID
return|;
block|}
name|bool
name|operator
operator|<
operator|(
specifier|const
name|FileID
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|ID
operator|<
name|RHS
operator|.
name|ID
return|;
block|}
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|FileID
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|ID
operator|<=
name|RHS
operator|.
name|ID
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|FileID
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|RHS
operator|)
return|;
block|}
name|bool
name|operator
operator|>
operator|(
specifier|const
name|FileID
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|RHS
operator|<
operator|*
name|this
return|;
block|}
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|FileID
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|RHS
operator|<=
operator|*
name|this
return|;
block|}
specifier|static
name|FileID
name|getSentinel
parameter_list|()
block|{
return|return
name|get
argument_list|(
operator|~
literal|0U
argument_list|)
return|;
block|}
name|unsigned
name|getHashValue
argument_list|()
specifier|const
block|{
return|return
name|ID
return|;
block|}
name|private
label|:
name|friend
name|class
name|SourceManager
decl_stmt|;
specifier|static
name|FileID
name|get
parameter_list|(
name|unsigned
name|V
parameter_list|)
block|{
name|FileID
name|F
decl_stmt|;
name|F
operator|.
name|ID
operator|=
name|V
expr_stmt|;
return|return
name|F
return|;
block|}
name|unsigned
name|getOpaqueValue
argument_list|()
specifier|const
block|{
return|return
name|ID
return|;
block|}
block|}
empty_stmt|;
comment|/// SourceLocation - This is a carefully crafted 32-bit identifier that encodes
comment|/// a full include stack, line and column number information for a position in
comment|/// an input translation unit.
name|class
name|SourceLocation
block|{
name|unsigned
name|ID
decl_stmt|;
name|friend
name|class
name|SourceManager
decl_stmt|;
enum|enum
block|{
name|MacroIDBit
init|=
literal|1U
operator|<<
literal|31
block|}
enum|;
name|public
label|:
name|SourceLocation
argument_list|()
operator|:
name|ID
argument_list|(
literal|0
argument_list|)
block|{}
comment|// 0 is an invalid FileID.
name|bool
name|isFileID
argument_list|()
specifier|const
block|{
return|return
operator|(
name|ID
operator|&
name|MacroIDBit
operator|)
operator|==
literal|0
return|;
block|}
name|bool
name|isMacroID
argument_list|()
specifier|const
block|{
return|return
operator|(
name|ID
operator|&
name|MacroIDBit
operator|)
operator|!=
literal|0
return|;
block|}
comment|/// isValid - Return true if this is a valid SourceLocation object.  Invalid
comment|/// SourceLocations are often used when events have no corresponding location
comment|/// in the source (e.g. a diagnostic is required for a command line option).
comment|///
name|bool
name|isValid
argument_list|()
specifier|const
block|{
return|return
name|ID
operator|!=
literal|0
return|;
block|}
name|bool
name|isInvalid
argument_list|()
specifier|const
block|{
return|return
name|ID
operator|==
literal|0
return|;
block|}
name|private
label|:
comment|/// getOffset - Return the index for SourceManager's SLocEntryTable table,
comment|/// note that this is not an index *into* it though.
name|unsigned
name|getOffset
argument_list|()
specifier|const
block|{
return|return
name|ID
operator|&
operator|~
name|MacroIDBit
return|;
block|}
specifier|static
name|SourceLocation
name|getFileLoc
parameter_list|(
name|unsigned
name|ID
parameter_list|)
block|{
name|assert
argument_list|(
operator|(
name|ID
operator|&
name|MacroIDBit
operator|)
operator|==
literal|0
operator|&&
literal|"Ran out of source locations!"
argument_list|)
expr_stmt|;
name|SourceLocation
name|L
decl_stmt|;
name|L
operator|.
name|ID
operator|=
name|ID
expr_stmt|;
return|return
name|L
return|;
block|}
specifier|static
name|SourceLocation
name|getMacroLoc
parameter_list|(
name|unsigned
name|ID
parameter_list|)
block|{
name|assert
argument_list|(
operator|(
name|ID
operator|&
name|MacroIDBit
operator|)
operator|==
literal|0
operator|&&
literal|"Ran out of source locations!"
argument_list|)
expr_stmt|;
name|SourceLocation
name|L
decl_stmt|;
name|L
operator|.
name|ID
operator|=
name|MacroIDBit
operator||
name|ID
expr_stmt|;
return|return
name|L
return|;
block|}
name|public
label|:
comment|/// getFileLocWithOffset - Return a source location with the specified offset
comment|/// from this file SourceLocation.
name|SourceLocation
name|getFileLocWithOffset
argument_list|(
name|int
name|Offset
argument_list|)
decl|const
block|{
name|assert
argument_list|(
operator|(
operator|(
name|getOffset
argument_list|()
operator|+
name|Offset
operator|)
operator|&
name|MacroIDBit
operator|)
operator|==
literal|0
operator|&&
literal|"invalid location"
argument_list|)
expr_stmt|;
name|SourceLocation
name|L
decl_stmt|;
name|L
operator|.
name|ID
operator|=
name|ID
operator|+
name|Offset
expr_stmt|;
return|return
name|L
return|;
block|}
comment|/// getRawEncoding - When a SourceLocation itself cannot be used, this returns
comment|/// an (opaque) 32-bit integer encoding for it.  This should only be passed
comment|/// to SourceLocation::getFromRawEncoding, it should not be inspected
comment|/// directly.
name|unsigned
name|getRawEncoding
argument_list|()
specifier|const
block|{
return|return
name|ID
return|;
block|}
comment|/// getFromRawEncoding - Turn a raw encoding of a SourceLocation object into
comment|/// a real SourceLocation.
specifier|static
name|SourceLocation
name|getFromRawEncoding
parameter_list|(
name|unsigned
name|Encoding
parameter_list|)
block|{
name|SourceLocation
name|X
decl_stmt|;
name|X
operator|.
name|ID
operator|=
name|Encoding
expr_stmt|;
return|return
name|X
return|;
block|}
name|void
name|print
argument_list|(
name|llvm
operator|::
name|raw_ostream
operator|&
name|OS
argument_list|,
specifier|const
name|SourceManager
operator|&
name|SM
argument_list|)
decl|const
decl_stmt|;
name|void
name|dump
argument_list|(
specifier|const
name|SourceManager
operator|&
name|SM
argument_list|)
decl|const
decl_stmt|;
block|}
empty_stmt|;
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|SourceLocation
operator|&
name|LHS
operator|,
specifier|const
name|SourceLocation
operator|&
name|RHS
operator|)
block|{
return|return
name|LHS
operator|.
name|getRawEncoding
argument_list|()
operator|==
name|RHS
operator|.
name|getRawEncoding
argument_list|()
return|;
block|}
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|SourceLocation
operator|&
name|LHS
operator|,
specifier|const
name|SourceLocation
operator|&
name|RHS
operator|)
block|{
return|return
operator|!
operator|(
name|LHS
operator|==
name|RHS
operator|)
return|;
block|}
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|SourceLocation
operator|&
name|LHS
operator|,
specifier|const
name|SourceLocation
operator|&
name|RHS
operator|)
block|{
return|return
name|LHS
operator|.
name|getRawEncoding
argument_list|()
operator|<
name|RHS
operator|.
name|getRawEncoding
argument_list|()
return|;
block|}
comment|/// SourceRange - a trival tuple used to represent a source range.
name|class
name|SourceRange
block|{
name|SourceLocation
name|B
decl_stmt|;
name|SourceLocation
name|E
decl_stmt|;
name|public
label|:
name|SourceRange
argument_list|()
operator|:
name|B
argument_list|(
name|SourceLocation
argument_list|()
argument_list|)
operator|,
name|E
argument_list|(
argument|SourceLocation()
argument_list|)
block|{}
name|SourceRange
argument_list|(
argument|SourceLocation loc
argument_list|)
operator|:
name|B
argument_list|(
name|loc
argument_list|)
operator|,
name|E
argument_list|(
argument|loc
argument_list|)
block|{}
name|SourceRange
argument_list|(
argument|SourceLocation begin
argument_list|,
argument|SourceLocation end
argument_list|)
operator|:
name|B
argument_list|(
name|begin
argument_list|)
operator|,
name|E
argument_list|(
argument|end
argument_list|)
block|{}
name|SourceLocation
name|getBegin
argument_list|()
specifier|const
block|{
return|return
name|B
return|;
block|}
name|SourceLocation
name|getEnd
argument_list|()
specifier|const
block|{
return|return
name|E
return|;
block|}
name|void
name|setBegin
parameter_list|(
name|SourceLocation
name|b
parameter_list|)
block|{
name|B
operator|=
name|b
expr_stmt|;
block|}
name|void
name|setEnd
parameter_list|(
name|SourceLocation
name|e
parameter_list|)
block|{
name|E
operator|=
name|e
expr_stmt|;
block|}
name|bool
name|isValid
argument_list|()
specifier|const
block|{
return|return
name|B
operator|.
name|isValid
argument_list|()
operator|&&
name|E
operator|.
name|isValid
argument_list|()
return|;
block|}
name|bool
name|isInvalid
argument_list|()
specifier|const
block|{
return|return
operator|!
name|isValid
argument_list|()
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|SourceRange
operator|&
name|X
operator|)
specifier|const
block|{
return|return
name|B
operator|==
name|X
operator|.
name|B
operator|&&
name|E
operator|==
name|X
operator|.
name|E
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|SourceRange
operator|&
name|X
operator|)
specifier|const
block|{
return|return
name|B
operator|!=
name|X
operator|.
name|B
operator|||
name|E
operator|!=
name|X
operator|.
name|E
return|;
block|}
block|}
empty_stmt|;
comment|/// FullSourceLoc - A SourceLocation and its associated SourceManager.  Useful
comment|/// for argument passing to functions that expect both objects.
name|class
name|FullSourceLoc
range|:
name|public
name|SourceLocation
block|{
name|SourceManager
operator|*
name|SrcMgr
block|;
name|public
operator|:
comment|/// Creates a FullSourceLoc where isValid() returns false.
name|explicit
name|FullSourceLoc
argument_list|()
operator|:
name|SrcMgr
argument_list|(
argument|(SourceManager*)
literal|0
argument_list|)
block|{}
name|explicit
name|FullSourceLoc
argument_list|(
argument|SourceLocation Loc
argument_list|,
argument|SourceManager&SM
argument_list|)
operator|:
name|SourceLocation
argument_list|(
name|Loc
argument_list|)
block|,
name|SrcMgr
argument_list|(
argument|&SM
argument_list|)
block|{}
name|SourceManager
operator|&
name|getManager
argument_list|()
block|{
name|assert
argument_list|(
name|SrcMgr
operator|&&
literal|"SourceManager is NULL."
argument_list|)
block|;
return|return
operator|*
name|SrcMgr
return|;
block|}
specifier|const
name|SourceManager
operator|&
name|getManager
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|SrcMgr
operator|&&
literal|"SourceManager is NULL."
argument_list|)
block|;
return|return
operator|*
name|SrcMgr
return|;
block|}
name|FileID
name|getFileID
argument_list|()
specifier|const
block|;
name|FullSourceLoc
name|getInstantiationLoc
argument_list|()
specifier|const
block|;
name|FullSourceLoc
name|getSpellingLoc
argument_list|()
specifier|const
block|;
name|unsigned
name|getInstantiationLineNumber
argument_list|(
argument|bool *Invalid =
literal|0
argument_list|)
specifier|const
block|;
name|unsigned
name|getInstantiationColumnNumber
argument_list|(
argument|bool *Invalid =
literal|0
argument_list|)
specifier|const
block|;
name|unsigned
name|getSpellingLineNumber
argument_list|(
argument|bool *Invalid =
literal|0
argument_list|)
specifier|const
block|;
name|unsigned
name|getSpellingColumnNumber
argument_list|(
argument|bool *Invalid =
literal|0
argument_list|)
specifier|const
block|;
specifier|const
name|char
operator|*
name|getCharacterData
argument_list|(
argument|bool *Invalid =
literal|0
argument_list|)
specifier|const
block|;
specifier|const
name|llvm
operator|::
name|MemoryBuffer
operator|*
name|getBuffer
argument_list|(
argument|bool *Invalid =
literal|0
argument_list|)
specifier|const
block|;
comment|/// getBufferData - Return a StringRef to the source buffer data for the
comment|/// specified FileID.
name|llvm
operator|::
name|StringRef
name|getBufferData
argument_list|(
argument|bool *Invalid =
literal|0
argument_list|)
specifier|const
block|;
comment|/// getDecomposedLoc - Decompose the specified location into a raw FileID +
comment|/// Offset pair.  The first element is the FileID, the second is the
comment|/// offset from the start of the buffer of the location.
name|std
operator|::
name|pair
operator|<
name|FileID
block|,
name|unsigned
operator|>
name|getDecomposedLoc
argument_list|()
specifier|const
block|;
name|bool
name|isInSystemHeader
argument_list|()
specifier|const
block|;
comment|/// Prints information about this FullSourceLoc to stderr. Useful for
comment|///  debugging.
name|void
name|dump
argument_list|()
specifier|const
block|{
name|SourceLocation
operator|::
name|dump
argument_list|(
operator|*
name|SrcMgr
argument_list|)
block|; }
name|friend
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|FullSourceLoc
operator|&
name|LHS
expr|,
specifier|const
name|FullSourceLoc
operator|&
name|RHS
operator|)
block|{
return|return
name|LHS
operator|.
name|getRawEncoding
argument_list|()
operator|==
name|RHS
operator|.
name|getRawEncoding
argument_list|()
operator|&&
name|LHS
operator|.
name|SrcMgr
operator|==
name|RHS
operator|.
name|SrcMgr
return|;
block|}
name|friend
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|FullSourceLoc
operator|&
name|LHS
expr|,
specifier|const
name|FullSourceLoc
operator|&
name|RHS
operator|)
block|{
return|return
operator|!
operator|(
name|LHS
operator|==
name|RHS
operator|)
return|;
block|}
expr|}
block|;
comment|/// PresumedLoc - This class represents an unpacked "presumed" location which
comment|/// can be presented to the user.  A 'presumed' location can be modified by
comment|/// #line and GNU line marker directives and is always the instantiation point
comment|/// of a normal location.
comment|///
comment|/// You can get a PresumedLoc from a SourceLocation with SourceManager.
name|class
name|PresumedLoc
block|{
specifier|const
name|char
operator|*
name|Filename
block|;
name|unsigned
name|Line
block|,
name|Col
block|;
name|SourceLocation
name|IncludeLoc
block|;
name|public
operator|:
name|PresumedLoc
argument_list|()
operator|:
name|Filename
argument_list|(
literal|0
argument_list|)
block|{}
name|PresumedLoc
argument_list|(
argument|const char *FN
argument_list|,
argument|unsigned Ln
argument_list|,
argument|unsigned Co
argument_list|,
argument|SourceLocation IL
argument_list|)
operator|:
name|Filename
argument_list|(
name|FN
argument_list|)
block|,
name|Line
argument_list|(
name|Ln
argument_list|)
block|,
name|Col
argument_list|(
name|Co
argument_list|)
block|,
name|IncludeLoc
argument_list|(
argument|IL
argument_list|)
block|{   }
comment|/// isInvalid - Return true if this object is invalid or uninitialized. This
comment|/// occurs when created with invalid source locations or when walking off
comment|/// the top of a #include stack.
name|bool
name|isInvalid
argument_list|()
specifier|const
block|{
return|return
name|Filename
operator|==
literal|0
return|;
block|}
name|bool
name|isValid
argument_list|()
specifier|const
block|{
return|return
name|Filename
operator|!=
literal|0
return|;
block|}
comment|/// getFilename - Return the presumed filename of this location.  This can be
comment|/// affected by #line etc.
specifier|const
name|char
operator|*
name|getFilename
argument_list|()
specifier|const
block|{
return|return
name|Filename
return|;
block|}
comment|/// getLine - Return the presumed line number of this location.  This can be
comment|/// affected by #line etc.
name|unsigned
name|getLine
argument_list|()
specifier|const
block|{
return|return
name|Line
return|;
block|}
comment|/// getColumn - Return the presumed column number of this location.  This can
comment|/// not be affected by #line, but is packaged here for convenience.
name|unsigned
name|getColumn
argument_list|()
specifier|const
block|{
return|return
name|Col
return|;
block|}
comment|/// getIncludeLoc - Return the presumed include location of this location.
comment|/// This can be affected by GNU linemarker directives.
name|SourceLocation
name|getIncludeLoc
argument_list|()
specifier|const
block|{
return|return
name|IncludeLoc
return|;
block|}
expr|}
block|;   }
comment|// end namespace clang
name|namespace
name|llvm
block|{
comment|/// Define DenseMapInfo so that FileID's can be used as keys in DenseMap and
comment|/// DenseSets.
name|template
operator|<
operator|>
expr|struct
name|DenseMapInfo
operator|<
name|clang
operator|::
name|FileID
operator|>
block|{
specifier|static
specifier|inline
name|clang
operator|::
name|FileID
name|getEmptyKey
argument_list|()
block|{
return|return
name|clang
operator|::
name|FileID
argument_list|()
return|;
block|}
specifier|static
specifier|inline
name|clang
operator|::
name|FileID
name|getTombstoneKey
argument_list|()
block|{
return|return
name|clang
operator|::
name|FileID
operator|::
name|getSentinel
argument_list|()
return|;
block|}
specifier|static
name|unsigned
name|getHashValue
argument_list|(
argument|clang::FileID S
argument_list|)
block|{
return|return
name|S
operator|.
name|getHashValue
argument_list|()
return|;
block|}
specifier|static
name|bool
name|isEqual
argument_list|(
argument|clang::FileID LHS
argument_list|,
argument|clang::FileID RHS
argument_list|)
block|{
return|return
name|LHS
operator|==
name|RHS
return|;
block|}
expr|}
block|;
name|template
operator|<
operator|>
expr|struct
name|isPodLike
operator|<
name|clang
operator|::
name|SourceLocation
operator|>
block|{
specifier|static
specifier|const
name|bool
name|value
operator|=
name|true
block|; }
block|;
name|template
operator|<
operator|>
expr|struct
name|isPodLike
operator|<
name|clang
operator|::
name|FileID
operator|>
block|{
specifier|static
specifier|const
name|bool
name|value
operator|=
name|true
block|; }
block|;  }
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

