begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- TargetInfo.h - Expose information about the target -----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines the TargetInfo interface.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_BASIC_TARGETINFO_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_BASIC_TARGETINFO_H
end_define

begin_comment
comment|// FIXME: Daniel isn't smart enough to use a prototype for this.
end_comment

begin_include
include|#
directive|include
file|"llvm/ADT/StringMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/DataTypes.h"
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
struct_decl|struct
name|fltSemantics
struct_decl|;
block|}
end_decl_stmt

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|Diagnostic
decl_stmt|;
name|class
name|SourceManager
decl_stmt|;
name|class
name|LangOptions
decl_stmt|;
name|namespace
name|Builtin
block|{
struct_decl|struct
name|Info
struct_decl|;
block|}
comment|/// TargetInfo - This class exposes information about the current target.
comment|///
name|class
name|TargetInfo
block|{
name|std
operator|::
name|string
name|Triple
expr_stmt|;
name|protected
label|:
comment|// Target values set by the ctor of the actual target implementation.  Default
comment|// values are specified by the TargetInfo constructor.
name|bool
name|CharIsSigned
decl_stmt|;
name|bool
name|TLSSupported
decl_stmt|;
name|unsigned
name|char
name|PointerWidth
decl_stmt|,
name|PointerAlign
decl_stmt|;
name|unsigned
name|char
name|WCharWidth
decl_stmt|,
name|WCharAlign
decl_stmt|;
name|unsigned
name|char
name|IntWidth
decl_stmt|,
name|IntAlign
decl_stmt|;
name|unsigned
name|char
name|FloatWidth
decl_stmt|,
name|FloatAlign
decl_stmt|;
name|unsigned
name|char
name|DoubleWidth
decl_stmt|,
name|DoubleAlign
decl_stmt|;
name|unsigned
name|char
name|LongDoubleWidth
decl_stmt|,
name|LongDoubleAlign
decl_stmt|;
name|unsigned
name|char
name|LongWidth
decl_stmt|,
name|LongAlign
decl_stmt|;
name|unsigned
name|char
name|LongLongWidth
decl_stmt|,
name|LongLongAlign
decl_stmt|;
name|unsigned
name|char
name|IntMaxTWidth
decl_stmt|;
specifier|const
name|char
modifier|*
name|DescriptionString
decl_stmt|;
specifier|const
name|char
modifier|*
name|UserLabelPrefix
decl_stmt|;
specifier|const
name|llvm
operator|::
name|fltSemantics
operator|*
name|FloatFormat
operator|,
operator|*
name|DoubleFormat
operator|,
operator|*
name|LongDoubleFormat
expr_stmt|;
name|unsigned
name|char
name|RegParmMax
decl_stmt|,
name|SSERegParmMax
decl_stmt|;
comment|// TargetInfo Constructor.  Default initializes all fields.
name|TargetInfo
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|T
argument_list|)
expr_stmt|;
name|public
label|:
comment|/// CreateTargetInfo - Return the target info object for the specified target
comment|/// triple.
specifier|static
name|TargetInfo
modifier|*
name|CreateTargetInfo
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Triple
argument_list|)
decl_stmt|;
name|virtual
operator|~
name|TargetInfo
argument_list|()
expr_stmt|;
comment|///===---- Target Data Type Query Methods -------------------------------===//
enum|enum
name|IntType
block|{
name|NoInt
init|=
literal|0
block|,
name|SignedShort
block|,
name|UnsignedShort
block|,
name|SignedInt
block|,
name|UnsignedInt
block|,
name|SignedLong
block|,
name|UnsignedLong
block|,
name|SignedLongLong
block|,
name|UnsignedLongLong
block|}
enum|;
name|protected
label|:
name|IntType
name|SizeType
decl_stmt|,
name|IntMaxType
decl_stmt|,
name|UIntMaxType
decl_stmt|,
name|PtrDiffType
decl_stmt|,
name|IntPtrType
decl_stmt|,
name|WCharType
decl_stmt|;
name|public
label|:
name|IntType
name|getSizeType
argument_list|()
specifier|const
block|{
return|return
name|SizeType
return|;
block|}
name|IntType
name|getIntMaxType
argument_list|()
specifier|const
block|{
return|return
name|IntMaxType
return|;
block|}
name|IntType
name|getUIntMaxType
argument_list|()
specifier|const
block|{
return|return
name|UIntMaxType
return|;
block|}
name|IntType
name|getPtrDiffType
argument_list|(
name|unsigned
name|AddrSpace
argument_list|)
decl|const
block|{
return|return
name|AddrSpace
operator|==
literal|0
condition|?
name|PtrDiffType
else|:
name|getPtrDiffTypeV
argument_list|(
name|AddrSpace
argument_list|)
return|;
block|}
name|IntType
name|getIntPtrType
argument_list|()
specifier|const
block|{
return|return
name|IntPtrType
return|;
block|}
name|IntType
name|getWCharType
argument_list|()
specifier|const
block|{
return|return
name|WCharType
return|;
block|}
comment|/// isCharSigned - Return true if 'char' is 'signed char' or false if it is
comment|/// treated as 'unsigned char'.  This is implementation defined according to
comment|/// C99 6.2.5p15.  In our implementation, this is target-specific.
name|bool
name|isCharSigned
argument_list|()
specifier|const
block|{
return|return
name|CharIsSigned
return|;
block|}
comment|/// getPointerWidth - Return the width of pointers on this target, for the
comment|/// specified address space.
name|uint64_t
name|getPointerWidth
argument_list|(
name|unsigned
name|AddrSpace
argument_list|)
decl|const
block|{
return|return
name|AddrSpace
operator|==
literal|0
condition|?
name|PointerWidth
else|:
name|getPointerWidthV
argument_list|(
name|AddrSpace
argument_list|)
return|;
block|}
name|uint64_t
name|getPointerAlign
argument_list|(
name|unsigned
name|AddrSpace
argument_list|)
decl|const
block|{
return|return
name|AddrSpace
operator|==
literal|0
condition|?
name|PointerAlign
else|:
name|getPointerAlignV
argument_list|(
name|AddrSpace
argument_list|)
return|;
block|}
comment|/// getBoolWidth/Align - Return the size of '_Bool' and C++ 'bool' for this
comment|/// target, in bits.
name|unsigned
name|getBoolWidth
argument_list|(
name|bool
name|isWide
operator|=
name|false
argument_list|)
decl|const
block|{
return|return
literal|8
return|;
block|}
comment|// FIXME
name|unsigned
name|getBoolAlign
argument_list|(
name|bool
name|isWide
operator|=
name|false
argument_list|)
decl|const
block|{
return|return
literal|8
return|;
block|}
comment|// FIXME
name|unsigned
name|getCharWidth
argument_list|(
name|bool
name|isWide
operator|=
name|false
argument_list|)
decl|const
block|{
return|return
name|isWide
condition|?
name|getWCharWidth
argument_list|()
else|:
literal|8
return|;
comment|// FIXME
block|}
name|unsigned
name|getCharAlign
argument_list|(
name|bool
name|isWide
operator|=
name|false
argument_list|)
decl|const
block|{
return|return
name|isWide
condition|?
name|getWCharAlign
argument_list|()
else|:
literal|8
return|;
comment|// FIXME
block|}
comment|/// getShortWidth/Align - Return the size of 'signed short' and
comment|/// 'unsigned short' for this target, in bits.
name|unsigned
name|getShortWidth
argument_list|()
specifier|const
block|{
return|return
literal|16
return|;
block|}
comment|// FIXME
name|unsigned
name|getShortAlign
argument_list|()
specifier|const
block|{
return|return
literal|16
return|;
block|}
comment|// FIXME
comment|/// getIntWidth/Align - Return the size of 'signed int' and 'unsigned int' for
comment|/// this target, in bits.
name|unsigned
name|getIntWidth
argument_list|()
specifier|const
block|{
return|return
name|IntWidth
return|;
block|}
name|unsigned
name|getIntAlign
argument_list|()
specifier|const
block|{
return|return
name|IntAlign
return|;
block|}
comment|/// getLongWidth/Align - Return the size of 'signed long' and 'unsigned long'
comment|/// for this target, in bits.
name|unsigned
name|getLongWidth
argument_list|()
specifier|const
block|{
return|return
name|LongWidth
return|;
block|}
name|unsigned
name|getLongAlign
argument_list|()
specifier|const
block|{
return|return
name|LongAlign
return|;
block|}
comment|/// getLongLongWidth/Align - Return the size of 'signed long long' and
comment|/// 'unsigned long long' for this target, in bits.
name|unsigned
name|getLongLongWidth
argument_list|()
specifier|const
block|{
return|return
name|LongLongWidth
return|;
block|}
name|unsigned
name|getLongLongAlign
argument_list|()
specifier|const
block|{
return|return
name|LongLongAlign
return|;
block|}
comment|/// getWcharWidth/Align - Return the size of 'wchar_t' for this target, in
comment|/// bits.
name|unsigned
name|getWCharWidth
argument_list|()
specifier|const
block|{
return|return
name|WCharWidth
return|;
block|}
name|unsigned
name|getWCharAlign
argument_list|()
specifier|const
block|{
return|return
name|WCharAlign
return|;
block|}
comment|/// getFloatWidth/Align/Format - Return the size/align/format of 'float'.
name|unsigned
name|getFloatWidth
argument_list|()
specifier|const
block|{
return|return
name|FloatWidth
return|;
block|}
name|unsigned
name|getFloatAlign
argument_list|()
specifier|const
block|{
return|return
name|FloatAlign
return|;
block|}
specifier|const
name|llvm
operator|::
name|fltSemantics
operator|&
name|getFloatFormat
argument_list|()
specifier|const
block|{
return|return
operator|*
name|FloatFormat
return|;
block|}
comment|/// getDoubleWidth/Align/Format - Return the size/align/format of 'double'.
name|unsigned
name|getDoubleWidth
argument_list|()
specifier|const
block|{
return|return
name|DoubleWidth
return|;
block|}
name|unsigned
name|getDoubleAlign
argument_list|()
specifier|const
block|{
return|return
name|DoubleAlign
return|;
block|}
specifier|const
name|llvm
operator|::
name|fltSemantics
operator|&
name|getDoubleFormat
argument_list|()
specifier|const
block|{
return|return
operator|*
name|DoubleFormat
return|;
block|}
comment|/// getLongDoubleWidth/Align/Format - Return the size/align/format of 'long
comment|/// double'.
name|unsigned
name|getLongDoubleWidth
argument_list|()
specifier|const
block|{
return|return
name|LongDoubleWidth
return|;
block|}
name|unsigned
name|getLongDoubleAlign
argument_list|()
specifier|const
block|{
return|return
name|LongDoubleAlign
return|;
block|}
specifier|const
name|llvm
operator|::
name|fltSemantics
operator|&
name|getLongDoubleFormat
argument_list|()
specifier|const
block|{
return|return
operator|*
name|LongDoubleFormat
return|;
block|}
comment|/// getIntMaxTWidth - Return the size of intmax_t and uintmax_t for this
comment|/// target, in bits.
name|unsigned
name|getIntMaxTWidth
argument_list|()
specifier|const
block|{
return|return
name|IntMaxTWidth
return|;
block|}
comment|/// getUserLabelPrefix - This returns the default value of the
comment|/// __USER_LABEL_PREFIX__ macro, which is the prefix given to user symbols by
comment|/// default.  On most platforms this is "_", but it is "" on some, and "." on
comment|/// others.
specifier|const
name|char
operator|*
name|getUserLabelPrefix
argument_list|()
specifier|const
block|{
return|return
name|UserLabelPrefix
return|;
block|}
comment|/// getTypeName - Return the user string for the specified integer type enum.
comment|/// For example, SignedShort -> "short".
specifier|static
specifier|const
name|char
modifier|*
name|getTypeName
parameter_list|(
name|IntType
name|T
parameter_list|)
function_decl|;
comment|///===---- Other target property query methods --------------------------===//
comment|/// getTargetDefines - Appends the target-specific #define values for this
comment|/// target set to the specified buffer.
name|virtual
name|void
name|getTargetDefines
argument_list|(
specifier|const
name|LangOptions
operator|&
name|Opts
argument_list|,
name|std
operator|::
name|vector
operator|<
name|char
operator|>
operator|&
name|DefineBuffer
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
comment|/// getTargetBuiltins - Return information about target-specific builtins for
comment|/// the current primary target, and info about which builtins are non-portable
comment|/// across the current set of primary and secondary targets.
name|virtual
name|void
name|getTargetBuiltins
argument_list|(
specifier|const
name|Builtin
operator|::
name|Info
operator|*
operator|&
name|Records
argument_list|,
name|unsigned
operator|&
name|NumRecords
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
comment|/// getVAListDeclaration - Return the declaration to use for
comment|/// __builtin_va_list, which is target-specific.
name|virtual
specifier|const
name|char
operator|*
name|getVAListDeclaration
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
comment|/// isValidGCCRegisterName - Returns whether the passed in string
comment|/// is a valid register name according to GCC. This is used by Sema for
comment|/// inline asm statements.
name|bool
name|isValidGCCRegisterName
argument_list|(
specifier|const
name|char
operator|*
name|Name
argument_list|)
decl|const
decl_stmt|;
comment|// getNormalizedGCCRegisterName - Returns the "normalized" GCC register name.
comment|// For example, on x86 it will return "ax" when "eax" is passed in.
specifier|const
name|char
modifier|*
name|getNormalizedGCCRegisterName
argument_list|(
specifier|const
name|char
operator|*
name|Name
argument_list|)
decl|const
decl_stmt|;
struct|struct
name|ConstraintInfo
block|{
enum|enum
block|{
name|CI_None
init|=
literal|0x00
block|,
name|CI_AllowsMemory
init|=
literal|0x01
block|,
name|CI_AllowsRegister
init|=
literal|0x02
block|,
name|CI_ReadWrite
init|=
literal|0x04
block|,
comment|// "+r" output constraint (read and write).
name|CI_HasMatchingInput
init|=
literal|0x08
comment|// This output operand has a matching input.
block|}
enum|;
name|unsigned
name|Flags
decl_stmt|;
name|int
name|TiedOperand
decl_stmt|;
name|std
operator|::
name|string
name|ConstraintStr
expr_stmt|;
comment|// constraint: "=rm"
name|std
operator|::
name|string
name|Name
expr_stmt|;
comment|// Operand name: [foo] with no []'s.
name|public
label|:
name|ConstraintInfo
argument_list|(
argument|const char *str
argument_list|,
argument|unsigned strlen
argument_list|,
argument|const std::string&name
argument_list|)
block|:
name|Flags
argument_list|(
literal|0
argument_list|)
operator|,
name|TiedOperand
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|ConstraintStr
argument_list|(
name|str
argument_list|,
name|str
operator|+
name|strlen
argument_list|)
operator|,
name|Name
argument_list|(
argument|name
argument_list|)
block|{}
name|explicit
name|ConstraintInfo
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Str
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|name
argument_list|)
operator|:
name|Flags
argument_list|(
literal|0
argument_list|)
operator|,
name|TiedOperand
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|ConstraintStr
argument_list|(
name|Str
argument_list|)
operator|,
name|Name
argument_list|(
argument|name
argument_list|)
block|{}
specifier|const
name|std
operator|::
name|string
operator|&
name|getConstraintStr
argument_list|()
specifier|const
block|{
return|return
name|ConstraintStr
return|;
block|}
specifier|const
name|std
operator|::
name|string
operator|&
name|getName
argument_list|()
specifier|const
block|{
return|return
name|Name
return|;
block|}
name|bool
name|isReadWrite
argument_list|()
specifier|const
block|{
return|return
operator|(
name|Flags
operator|&
name|CI_ReadWrite
operator|)
operator|!=
literal|0
return|;
block|}
name|bool
name|allowsRegister
argument_list|()
specifier|const
block|{
return|return
operator|(
name|Flags
operator|&
name|CI_AllowsRegister
operator|)
operator|!=
literal|0
return|;
block|}
name|bool
name|allowsMemory
argument_list|()
specifier|const
block|{
return|return
operator|(
name|Flags
operator|&
name|CI_AllowsMemory
operator|)
operator|!=
literal|0
return|;
block|}
comment|/// hasMatchingInput - Return true if this output operand has a matching
comment|/// (tied) input operand.
name|bool
name|hasMatchingInput
argument_list|()
specifier|const
block|{
return|return
operator|(
name|Flags
operator|&
name|CI_HasMatchingInput
operator|)
operator|!=
literal|0
return|;
block|}
comment|/// hasTiedOperand() - Return true if this input operand is a matching
comment|/// constraint that ties it to an output operand.  If this returns true,
comment|/// then getTiedOperand will indicate which output operand this is tied to.
name|bool
name|hasTiedOperand
argument_list|()
specifier|const
block|{
return|return
name|TiedOperand
operator|!=
operator|-
literal|1
return|;
block|}
name|unsigned
name|getTiedOperand
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|hasTiedOperand
argument_list|()
operator|&&
literal|"Has no tied operand!"
argument_list|)
block|;
return|return
operator|(
name|unsigned
operator|)
name|TiedOperand
return|;
block|}
name|void
name|setIsReadWrite
parameter_list|()
block|{
name|Flags
operator||=
name|CI_ReadWrite
expr_stmt|;
block|}
name|void
name|setAllowsMemory
parameter_list|()
block|{
name|Flags
operator||=
name|CI_AllowsMemory
expr_stmt|;
block|}
name|void
name|setAllowsRegister
parameter_list|()
block|{
name|Flags
operator||=
name|CI_AllowsRegister
expr_stmt|;
block|}
name|void
name|setHasMatchingInput
parameter_list|()
block|{
name|Flags
operator||=
name|CI_HasMatchingInput
expr_stmt|;
block|}
comment|/// setTiedOperand - Indicate that this is an input operand that is tied to
comment|/// the specified output operand.  Copy over the various constraint
comment|/// information from the output.
name|void
name|setTiedOperand
parameter_list|(
name|unsigned
name|N
parameter_list|,
name|ConstraintInfo
modifier|&
name|Output
parameter_list|)
block|{
name|Output
operator|.
name|setHasMatchingInput
argument_list|()
expr_stmt|;
name|Flags
operator|=
name|Output
operator|.
name|Flags
expr_stmt|;
name|TiedOperand
operator|=
name|N
expr_stmt|;
comment|// Don't copy Name or constraint string.
block|}
block|}
struct|;
comment|// validateOutputConstraint, validateInputConstraint - Checks that
comment|// a constraint is valid and provides information about it.
comment|// FIXME: These should return a real error instead of just true/false.
name|bool
name|validateOutputConstraint
argument_list|(
name|ConstraintInfo
operator|&
name|Info
argument_list|)
decl|const
decl_stmt|;
name|bool
name|validateInputConstraint
argument_list|(
name|ConstraintInfo
operator|*
name|OutputConstraints
argument_list|,
name|unsigned
name|NumOutputs
argument_list|,
name|ConstraintInfo
operator|&
name|info
argument_list|)
decl|const
decl_stmt|;
name|bool
name|resolveSymbolicName
argument_list|(
specifier|const
name|char
operator|*
operator|&
name|Name
argument_list|,
name|ConstraintInfo
operator|*
name|OutputConstraints
argument_list|,
name|unsigned
name|NumOutputs
argument_list|,
name|unsigned
operator|&
name|Index
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|std
operator|::
name|string
name|convertConstraint
argument_list|(
argument|const char Constraint
argument_list|)
specifier|const
block|{
return|return
name|std
operator|::
name|string
argument_list|(
literal|1
argument_list|,
name|Constraint
argument_list|)
return|;
block|}
comment|// Returns a string of target-specific clobbers, in LLVM format.
name|virtual
specifier|const
name|char
operator|*
name|getClobbers
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
comment|/// getTargetPrefix - Return the target prefix used for identifying
comment|/// llvm intrinsics.
name|virtual
specifier|const
name|char
operator|*
name|getTargetPrefix
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
comment|/// getTargetTriple - Return the target triple of the primary target.
specifier|const
name|char
operator|*
name|getTargetTriple
argument_list|()
specifier|const
block|{
return|return
name|Triple
operator|.
name|c_str
argument_list|()
return|;
block|}
specifier|const
name|char
operator|*
name|getTargetDescription
argument_list|()
specifier|const
block|{
return|return
name|DescriptionString
return|;
block|}
struct|struct
name|GCCRegAlias
block|{
specifier|const
name|char
modifier|*
specifier|const
name|Aliases
index|[
literal|5
index|]
decl_stmt|;
specifier|const
name|char
modifier|*
specifier|const
name|Register
decl_stmt|;
block|}
struct|;
name|virtual
name|bool
name|useGlobalsForAutomaticVariables
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
comment|/// getStringSymbolPrefix - Get the default symbol prefix to
comment|/// use for string literals.
name|virtual
specifier|const
name|char
modifier|*
name|getStringSymbolPrefix
argument_list|(
name|bool
name|IsConstant
argument_list|)
decl|const
block|{
return|return
literal|".str"
return|;
block|}
comment|/// getCFStringSymbolPrefix - Get the default symbol prefix
comment|/// to use for CFString literals.
name|virtual
specifier|const
name|char
operator|*
name|getCFStringSymbolPrefix
argument_list|()
specifier|const
block|{
return|return
literal|""
return|;
block|}
comment|/// getUnicodeStringSymbolPrefix - Get the default symbol prefix to
comment|/// use for string literals.
name|virtual
specifier|const
name|char
operator|*
name|getUnicodeStringSymbolPrefix
argument_list|()
specifier|const
block|{
return|return
literal|".str"
return|;
block|}
comment|/// getUnicodeStringSection - Return the section to use for unicode
comment|/// string literals, or 0 if no special section is used.
name|virtual
specifier|const
name|char
operator|*
name|getUnicodeStringSection
argument_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
comment|/// getCFStringSection - Return the section to use for CFString
comment|/// literals, or 0 if no special section is used.
name|virtual
specifier|const
name|char
operator|*
name|getCFStringSection
argument_list|()
specifier|const
block|{
return|return
literal|"__DATA,__cfstring"
return|;
block|}
comment|/// getCFStringDataSection - Return the section to use for the
comment|/// constant string data associated with a CFString literal, or 0 if
comment|/// no special section is used.
name|virtual
specifier|const
name|char
operator|*
name|getCFStringDataSection
argument_list|()
specifier|const
block|{
return|return
literal|"__TEXT,__cstring,cstring_literals"
return|;
block|}
comment|/// getDefaultLangOptions - Allow the target to specify default settings for
comment|/// various language options.  These may be overridden by command line
comment|/// options.
name|virtual
name|void
name|getDefaultLangOptions
parameter_list|(
name|LangOptions
modifier|&
name|Opts
parameter_list|)
block|{}
comment|/// getDefaultFeatures - Get the default set of target features for
comment|/// the \args CPU; this should include all legal feature strings on
comment|/// the target.
name|virtual
name|void
name|getDefaultFeatures
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|CPU
argument_list|,
name|llvm
operator|::
name|StringMap
operator|<
name|bool
operator|>
operator|&
name|Features
argument_list|)
decl|const
block|{   }
comment|/// setFeatureEnabled - Enable or disable a specific target feature,
comment|/// the feature name must be valid.
comment|///
comment|/// \return - False on error (invalid feature name).
name|virtual
name|bool
name|setFeatureEnabled
argument_list|(
name|llvm
operator|::
name|StringMap
operator|<
name|bool
operator|>
operator|&
name|Features
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
argument_list|,
name|bool
name|Enabled
argument_list|)
decl|const
block|{
return|return
name|false
return|;
block|}
comment|/// HandleTargetOptions - Perform initialization based on the user
comment|/// configured set of features.
name|virtual
name|void
name|HandleTargetFeatures
argument_list|(
specifier|const
name|llvm
operator|::
name|StringMap
operator|<
name|bool
operator|>
operator|&
name|Features
argument_list|)
block|{   }
comment|// getRegParmMax - Returns maximal number of args passed in registers.
name|unsigned
name|getRegParmMax
argument_list|()
specifier|const
block|{
return|return
name|RegParmMax
return|;
block|}
comment|// isTLSSupported - Whether the target supports thread-local storage
name|unsigned
name|isTLSSupported
argument_list|()
specifier|const
block|{
return|return
name|TLSSupported
return|;
block|}
name|protected
label|:
name|virtual
name|uint64_t
name|getPointerWidthV
argument_list|(
name|unsigned
name|AddrSpace
argument_list|)
decl|const
block|{
return|return
name|PointerWidth
return|;
block|}
name|virtual
name|uint64_t
name|getPointerAlignV
argument_list|(
name|unsigned
name|AddrSpace
argument_list|)
decl|const
block|{
return|return
name|PointerAlign
return|;
block|}
name|virtual
name|enum
name|IntType
name|getPtrDiffTypeV
argument_list|(
name|unsigned
name|AddrSpace
argument_list|)
decl|const
block|{
return|return
name|PtrDiffType
return|;
block|}
name|virtual
name|void
name|getGCCRegNames
argument_list|(
specifier|const
name|char
operator|*
specifier|const
operator|*
operator|&
name|Names
argument_list|,
name|unsigned
operator|&
name|NumNames
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|virtual
name|void
name|getGCCRegAliases
argument_list|(
specifier|const
name|GCCRegAlias
operator|*
operator|&
name|Aliases
argument_list|,
name|unsigned
operator|&
name|NumAliases
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|virtual
name|bool
name|validateAsmConstraint
argument_list|(
specifier|const
name|char
operator|*
operator|&
name|Name
argument_list|,
name|TargetInfo
operator|::
name|ConstraintInfo
operator|&
name|info
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

