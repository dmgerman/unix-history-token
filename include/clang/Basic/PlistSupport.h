begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===---------- PlistSupport.h - Plist Output Utilities ---------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_BASIC_PLISTSUPPORT_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_BASIC_PLISTSUPPORT_H
end_define

begin_include
include|#
directive|include
file|"clang/Basic/SourceManager.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/raw_ostream.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|markup
block|{
typedef|typedef
name|llvm
operator|::
name|DenseMap
operator|<
name|FileID
operator|,
name|unsigned
operator|>
name|FIDMap
expr_stmt|;
specifier|inline
name|void
name|AddFID
argument_list|(
name|FIDMap
operator|&
name|FIDs
argument_list|,
name|SmallVectorImpl
operator|<
name|FileID
operator|>
operator|&
name|V
argument_list|,
specifier|const
name|SourceManager
operator|&
name|SM
argument_list|,
name|SourceLocation
name|L
argument_list|)
block|{
name|FileID
name|FID
init|=
name|SM
operator|.
name|getFileID
argument_list|(
name|SM
operator|.
name|getExpansionLoc
argument_list|(
name|L
argument_list|)
argument_list|)
decl_stmt|;
name|FIDMap
operator|::
name|iterator
name|I
operator|=
name|FIDs
operator|.
name|find
argument_list|(
name|FID
argument_list|)
expr_stmt|;
if|if
condition|(
name|I
operator|!=
name|FIDs
operator|.
name|end
argument_list|()
condition|)
return|return;
name|FIDs
index|[
name|FID
index|]
operator|=
name|V
operator|.
name|size
argument_list|()
expr_stmt|;
name|V
operator|.
name|push_back
argument_list|(
name|FID
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|unsigned
name|GetFID
parameter_list|(
specifier|const
name|FIDMap
modifier|&
name|FIDs
parameter_list|,
specifier|const
name|SourceManager
modifier|&
name|SM
parameter_list|,
name|SourceLocation
name|L
parameter_list|)
block|{
name|FileID
name|FID
init|=
name|SM
operator|.
name|getFileID
argument_list|(
name|SM
operator|.
name|getExpansionLoc
argument_list|(
name|L
argument_list|)
argument_list|)
decl_stmt|;
name|FIDMap
operator|::
name|const_iterator
name|I
operator|=
name|FIDs
operator|.
name|find
argument_list|(
name|FID
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|I
operator|!=
name|FIDs
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|I
operator|->
name|second
return|;
block|}
specifier|inline
name|raw_ostream
modifier|&
name|Indent
parameter_list|(
name|raw_ostream
modifier|&
name|o
parameter_list|,
specifier|const
name|unsigned
name|indent
parameter_list|)
block|{
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indent
condition|;
operator|++
name|i
control|)
name|o
operator|<<
literal|' '
expr_stmt|;
return|return
name|o
return|;
block|}
specifier|inline
name|raw_ostream
modifier|&
name|EmitPlistHeader
parameter_list|(
name|raw_ostream
modifier|&
name|o
parameter_list|)
block|{
specifier|static
specifier|const
name|char
modifier|*
name|PlistHeader
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
literal|"<!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" "
literal|"\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n"
literal|"<plist version=\"1.0\">\n"
decl_stmt|;
return|return
name|o
operator|<<
name|PlistHeader
return|;
block|}
specifier|inline
name|raw_ostream
modifier|&
name|EmitInteger
parameter_list|(
name|raw_ostream
modifier|&
name|o
parameter_list|,
name|int64_t
name|value
parameter_list|)
block|{
name|o
operator|<<
literal|"<integer>"
expr_stmt|;
name|o
operator|<<
name|value
expr_stmt|;
name|o
operator|<<
literal|"</integer>"
expr_stmt|;
return|return
name|o
return|;
block|}
specifier|inline
name|raw_ostream
modifier|&
name|EmitString
parameter_list|(
name|raw_ostream
modifier|&
name|o
parameter_list|,
name|StringRef
name|s
parameter_list|)
block|{
name|o
operator|<<
literal|"<string>"
expr_stmt|;
for|for
control|(
name|StringRef
operator|::
name|const_iterator
name|I
operator|=
name|s
operator|.
name|begin
argument_list|()
operator|,
name|E
operator|=
name|s
operator|.
name|end
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
block|{
name|char
name|c
init|=
operator|*
name|I
decl_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
default|default:
name|o
operator|<<
name|c
expr_stmt|;
break|break;
case|case
literal|'&'
case|:
name|o
operator|<<
literal|"&amp;"
expr_stmt|;
break|break;
case|case
literal|'<'
case|:
name|o
operator|<<
literal|"&lt;"
expr_stmt|;
break|break;
case|case
literal|'>'
case|:
name|o
operator|<<
literal|"&gt;"
expr_stmt|;
break|break;
case|case
literal|'\''
case|:
name|o
operator|<<
literal|"&apos;"
expr_stmt|;
break|break;
case|case
literal|'\"'
case|:
name|o
operator|<<
literal|"&quot;"
expr_stmt|;
break|break;
block|}
block|}
name|o
operator|<<
literal|"</string>"
expr_stmt|;
return|return
name|o
return|;
block|}
specifier|inline
name|void
name|EmitLocation
parameter_list|(
name|raw_ostream
modifier|&
name|o
parameter_list|,
specifier|const
name|SourceManager
modifier|&
name|SM
parameter_list|,
name|SourceLocation
name|L
parameter_list|,
specifier|const
name|FIDMap
modifier|&
name|FM
parameter_list|,
name|unsigned
name|indent
parameter_list|)
block|{
if|if
condition|(
name|L
operator|.
name|isInvalid
argument_list|()
condition|)
return|return;
name|FullSourceLoc
name|Loc
argument_list|(
name|SM
operator|.
name|getExpansionLoc
argument_list|(
name|L
argument_list|)
argument_list|,
name|const_cast
operator|<
name|SourceManager
operator|&
operator|>
operator|(
name|SM
operator|)
argument_list|)
decl_stmt|;
name|Indent
argument_list|(
name|o
argument_list|,
name|indent
argument_list|)
operator|<<
literal|"<dict>\n"
expr_stmt|;
name|Indent
argument_list|(
name|o
argument_list|,
name|indent
argument_list|)
operator|<<
literal|"<key>line</key>"
expr_stmt|;
name|EmitInteger
argument_list|(
name|o
argument_list|,
name|Loc
operator|.
name|getExpansionLineNumber
argument_list|()
argument_list|)
operator|<<
literal|'\n'
expr_stmt|;
name|Indent
argument_list|(
name|o
argument_list|,
name|indent
argument_list|)
operator|<<
literal|"<key>col</key>"
expr_stmt|;
name|EmitInteger
argument_list|(
name|o
argument_list|,
name|Loc
operator|.
name|getExpansionColumnNumber
argument_list|()
argument_list|)
operator|<<
literal|'\n'
expr_stmt|;
name|Indent
argument_list|(
name|o
argument_list|,
name|indent
argument_list|)
operator|<<
literal|"<key>file</key>"
expr_stmt|;
name|EmitInteger
argument_list|(
name|o
argument_list|,
name|GetFID
argument_list|(
name|FM
argument_list|,
name|SM
argument_list|,
name|Loc
argument_list|)
argument_list|)
operator|<<
literal|'\n'
expr_stmt|;
name|Indent
argument_list|(
name|o
argument_list|,
name|indent
argument_list|)
operator|<<
literal|"</dict>\n"
expr_stmt|;
block|}
specifier|inline
name|void
name|EmitRange
parameter_list|(
name|raw_ostream
modifier|&
name|o
parameter_list|,
specifier|const
name|SourceManager
modifier|&
name|SM
parameter_list|,
name|CharSourceRange
name|R
parameter_list|,
specifier|const
name|FIDMap
modifier|&
name|FM
parameter_list|,
name|unsigned
name|indent
parameter_list|)
block|{
if|if
condition|(
name|R
operator|.
name|isInvalid
argument_list|()
condition|)
return|return;
name|assert
argument_list|(
name|R
operator|.
name|isCharRange
argument_list|()
operator|&&
literal|"cannot handle a token range"
argument_list|)
expr_stmt|;
name|Indent
argument_list|(
name|o
argument_list|,
name|indent
argument_list|)
operator|<<
literal|"<array>\n"
expr_stmt|;
name|EmitLocation
argument_list|(
name|o
argument_list|,
name|SM
argument_list|,
name|R
operator|.
name|getBegin
argument_list|()
argument_list|,
name|FM
argument_list|,
name|indent
operator|+
literal|1
argument_list|)
expr_stmt|;
name|EmitLocation
argument_list|(
name|o
argument_list|,
name|SM
argument_list|,
name|R
operator|.
name|getEnd
argument_list|()
argument_list|,
name|FM
argument_list|,
name|indent
operator|+
literal|1
argument_list|)
expr_stmt|;
name|Indent
argument_list|(
name|o
argument_list|,
name|indent
argument_list|)
operator|<<
literal|"</array>\n"
expr_stmt|;
block|}
block|}
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

