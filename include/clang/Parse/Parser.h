begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- Parser.h - C Language Parser ---------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines the Parser interface.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_PARSE_PARSER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_PARSE_PARSER_H
end_define

begin_include
include|#
directive|include
file|"clang/Basic/Specifiers.h"
end_include

begin_include
include|#
directive|include
file|"clang/Lex/Preprocessor.h"
end_include

begin_include
include|#
directive|include
file|"clang/Parse/Action.h"
end_include

begin_include
include|#
directive|include
file|"clang/Parse/DeclSpec.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/OwningPtr.h"
end_include

begin_include
include|#
directive|include
file|<stack>
end_include

begin_include
include|#
directive|include
file|<list>
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|AttributeList
decl_stmt|;
struct_decl|struct
name|CXX0XAttributeList
struct_decl|;
name|class
name|PragmaHandler
decl_stmt|;
name|class
name|Scope
decl_stmt|;
name|class
name|DiagnosticBuilder
decl_stmt|;
name|class
name|Parser
decl_stmt|;
name|class
name|PragmaUnusedHandler
decl_stmt|;
name|class
name|ColonProtectionRAIIObject
decl_stmt|;
comment|/// PrettyStackTraceParserEntry - If a crash happens while the parser is active,
comment|/// an entry is printed for it.
name|class
name|PrettyStackTraceParserEntry
range|:
name|public
name|llvm
operator|::
name|PrettyStackTraceEntry
block|{
specifier|const
name|Parser
operator|&
name|P
block|;
name|public
operator|:
name|PrettyStackTraceParserEntry
argument_list|(
specifier|const
name|Parser
operator|&
name|p
argument_list|)
operator|:
name|P
argument_list|(
argument|p
argument_list|)
block|{}
name|virtual
name|void
name|print
argument_list|(
argument|llvm::raw_ostream&OS
argument_list|)
specifier|const
block|; }
decl_stmt|;
comment|/// Parser - This implements a parser for the C family of languages.  After
comment|/// parsing units of the grammar, productions are invoked to handle whatever has
comment|/// been read.
comment|///
name|class
name|Parser
block|{
name|friend
name|class
name|PragmaUnusedHandler
decl_stmt|;
name|friend
name|class
name|ColonProtectionRAIIObject
decl_stmt|;
name|PrettyStackTraceParserEntry
name|CrashInfo
decl_stmt|;
name|Preprocessor
modifier|&
name|PP
decl_stmt|;
comment|/// Tok - The current token we are peeking ahead.  All parsing methods assume
comment|/// that this is valid.
name|Token
name|Tok
decl_stmt|;
comment|// PrevTokLocation - The location of the token we previously
comment|// consumed. This token is used for diagnostics where we expected to
comment|// see a token following another token (e.g., the ';' at the end of
comment|// a statement).
name|SourceLocation
name|PrevTokLocation
decl_stmt|;
name|unsigned
name|short
name|ParenCount
decl_stmt|,
name|BracketCount
decl_stmt|,
name|BraceCount
decl_stmt|;
comment|/// Actions - These are the callbacks we invoke as we parse various constructs
comment|/// in the file.  This refers to the common base class between MinimalActions
comment|/// and SemaActions for those uses that don't matter.
name|Action
modifier|&
name|Actions
decl_stmt|;
name|Scope
modifier|*
name|CurScope
decl_stmt|;
name|Diagnostic
modifier|&
name|Diags
decl_stmt|;
comment|/// ScopeCache - Cache scopes to reduce malloc traffic.
enum|enum
block|{
name|ScopeCacheSize
init|=
literal|16
block|}
enum|;
name|unsigned
name|NumCachedScopes
decl_stmt|;
name|Scope
modifier|*
name|ScopeCache
index|[
name|ScopeCacheSize
index|]
decl_stmt|;
comment|/// Ident_super - IdentifierInfo for "super", to support fast
comment|/// comparison.
name|IdentifierInfo
modifier|*
name|Ident_super
decl_stmt|;
comment|/// Ident_vector and Ident_pixel - cached IdentifierInfo's for
comment|/// "vector" and "pixel" fast comparison.  Only present if
comment|/// AltiVec enabled.
name|IdentifierInfo
modifier|*
name|Ident_vector
decl_stmt|;
name|IdentifierInfo
modifier|*
name|Ident_pixel
decl_stmt|;
name|llvm
operator|::
name|OwningPtr
operator|<
name|PragmaHandler
operator|>
name|PackHandler
expr_stmt|;
name|llvm
operator|::
name|OwningPtr
operator|<
name|PragmaHandler
operator|>
name|UnusedHandler
expr_stmt|;
name|llvm
operator|::
name|OwningPtr
operator|<
name|PragmaHandler
operator|>
name|WeakHandler
expr_stmt|;
name|llvm
operator|::
name|OwningPtr
operator|<
name|clang
operator|::
name|CommentHandler
operator|>
name|CommentHandler
expr_stmt|;
comment|/// Whether the '>' token acts as an operator or not. This will be
comment|/// true except when we are parsing an expression within a C++
comment|/// template argument list, where the '>' closes the template
comment|/// argument list.
name|bool
name|GreaterThanIsOperator
decl_stmt|;
comment|/// ColonIsSacred - When this is false, we aggressively try to recover from
comment|/// code like "foo : bar" as if it were a typo for "foo :: bar".  This is not
comment|/// safe in case statements and a few other things.  This is managed by the
comment|/// ColonProtectionRAIIObject RAII object.
name|bool
name|ColonIsSacred
decl_stmt|;
comment|/// The "depth" of the template parameters currently being parsed.
name|unsigned
name|TemplateParameterDepth
decl_stmt|;
name|public
label|:
name|Parser
argument_list|(
name|Preprocessor
operator|&
name|PP
argument_list|,
name|Action
operator|&
name|Actions
argument_list|)
expr_stmt|;
operator|~
name|Parser
argument_list|()
expr_stmt|;
specifier|const
name|LangOptions
operator|&
name|getLang
argument_list|()
specifier|const
block|{
return|return
name|PP
operator|.
name|getLangOptions
argument_list|()
return|;
block|}
specifier|const
name|TargetInfo
operator|&
name|getTargetInfo
argument_list|()
specifier|const
block|{
return|return
name|PP
operator|.
name|getTargetInfo
argument_list|()
return|;
block|}
name|Preprocessor
operator|&
name|getPreprocessor
argument_list|()
specifier|const
block|{
return|return
name|PP
return|;
block|}
name|Action
operator|&
name|getActions
argument_list|()
specifier|const
block|{
return|return
name|Actions
return|;
block|}
specifier|const
name|Token
operator|&
name|getCurToken
argument_list|()
specifier|const
block|{
return|return
name|Tok
return|;
block|}
comment|// Type forwarding.  All of these are statically 'void*', but they may all be
comment|// different actual classes based on the actions in place.
typedef|typedef
name|Action
operator|::
name|ExprTy
name|ExprTy
expr_stmt|;
typedef|typedef
name|Action
operator|::
name|StmtTy
name|StmtTy
expr_stmt|;
typedef|typedef
name|Action
operator|::
name|DeclPtrTy
name|DeclPtrTy
expr_stmt|;
typedef|typedef
name|Action
operator|::
name|DeclGroupPtrTy
name|DeclGroupPtrTy
expr_stmt|;
typedef|typedef
name|Action
operator|::
name|TypeTy
name|TypeTy
expr_stmt|;
typedef|typedef
name|Action
operator|::
name|BaseTy
name|BaseTy
expr_stmt|;
typedef|typedef
name|Action
operator|::
name|MemInitTy
name|MemInitTy
expr_stmt|;
typedef|typedef
name|Action
operator|::
name|CXXScopeTy
name|CXXScopeTy
expr_stmt|;
typedef|typedef
name|Action
operator|::
name|TemplateParamsTy
name|TemplateParamsTy
expr_stmt|;
typedef|typedef
name|Action
operator|::
name|TemplateTy
name|TemplateTy
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|SmallVector
operator|<
name|TemplateParamsTy
operator|*
operator|,
literal|4
operator|>
name|TemplateParameterLists
expr_stmt|;
typedef|typedef
name|Action
operator|::
name|ExprResult
name|ExprResult
expr_stmt|;
typedef|typedef
name|Action
operator|::
name|StmtResult
name|StmtResult
expr_stmt|;
typedef|typedef
name|Action
operator|::
name|BaseResult
name|BaseResult
expr_stmt|;
typedef|typedef
name|Action
operator|::
name|MemInitResult
name|MemInitResult
expr_stmt|;
typedef|typedef
name|Action
operator|::
name|TypeResult
name|TypeResult
expr_stmt|;
typedef|typedef
name|Action
operator|::
name|OwningExprResult
name|OwningExprResult
expr_stmt|;
typedef|typedef
name|Action
operator|::
name|OwningStmtResult
name|OwningStmtResult
expr_stmt|;
typedef|typedef
name|Action
operator|::
name|ExprArg
name|ExprArg
expr_stmt|;
typedef|typedef
name|Action
operator|::
name|MultiStmtArg
name|MultiStmtArg
expr_stmt|;
typedef|typedef
name|Action
operator|::
name|FullExprArg
name|FullExprArg
expr_stmt|;
comment|/// Adorns a ExprResult with Actions to make it an OwningExprResult
name|OwningExprResult
name|Owned
parameter_list|(
name|ExprResult
name|res
parameter_list|)
block|{
return|return
name|OwningExprResult
argument_list|(
name|Actions
argument_list|,
name|res
argument_list|)
return|;
block|}
comment|/// Adorns a StmtResult with Actions to make it an OwningStmtResult
name|OwningStmtResult
name|Owned
parameter_list|(
name|StmtResult
name|res
parameter_list|)
block|{
return|return
name|OwningStmtResult
argument_list|(
name|Actions
argument_list|,
name|res
argument_list|)
return|;
block|}
name|OwningExprResult
name|ExprError
parameter_list|()
block|{
return|return
name|OwningExprResult
argument_list|(
name|Actions
argument_list|,
name|true
argument_list|)
return|;
block|}
name|OwningStmtResult
name|StmtError
parameter_list|()
block|{
return|return
name|OwningStmtResult
argument_list|(
name|Actions
argument_list|,
name|true
argument_list|)
return|;
block|}
name|OwningExprResult
name|ExprError
parameter_list|(
specifier|const
name|DiagnosticBuilder
modifier|&
parameter_list|)
block|{
return|return
name|ExprError
argument_list|()
return|;
block|}
name|OwningStmtResult
name|StmtError
parameter_list|(
specifier|const
name|DiagnosticBuilder
modifier|&
parameter_list|)
block|{
return|return
name|StmtError
argument_list|()
return|;
block|}
name|OwningExprResult
name|ExprEmpty
parameter_list|()
block|{
return|return
name|OwningExprResult
argument_list|(
name|Actions
argument_list|,
name|false
argument_list|)
return|;
block|}
comment|// Parsing methods.
comment|/// ParseTranslationUnit - All in one method that initializes parses, and
comment|/// shuts down the parser.
name|void
name|ParseTranslationUnit
parameter_list|()
function_decl|;
comment|/// Initialize - Warm up the parser.
comment|///
name|void
name|Initialize
parameter_list|()
function_decl|;
comment|/// ParseTopLevelDecl - Parse one top-level declaration. Returns true if
comment|/// the EOF was encountered.
name|bool
name|ParseTopLevelDecl
parameter_list|(
name|DeclGroupPtrTy
modifier|&
name|Result
parameter_list|)
function_decl|;
name|DeclGroupPtrTy
name|RetrievePendingObjCImpDecl
parameter_list|()
function_decl|;
name|private
label|:
comment|//===--------------------------------------------------------------------===//
comment|// Low-Level token peeking and consumption methods.
comment|//
comment|/// isTokenParen - Return true if the cur token is '(' or ')'.
name|bool
name|isTokenParen
argument_list|()
specifier|const
block|{
return|return
name|Tok
operator|.
name|getKind
argument_list|()
operator|==
name|tok
operator|::
name|l_paren
operator|||
name|Tok
operator|.
name|getKind
argument_list|()
operator|==
name|tok
operator|::
name|r_paren
return|;
block|}
comment|/// isTokenBracket - Return true if the cur token is '[' or ']'.
name|bool
name|isTokenBracket
argument_list|()
specifier|const
block|{
return|return
name|Tok
operator|.
name|getKind
argument_list|()
operator|==
name|tok
operator|::
name|l_square
operator|||
name|Tok
operator|.
name|getKind
argument_list|()
operator|==
name|tok
operator|::
name|r_square
return|;
block|}
comment|/// isTokenBrace - Return true if the cur token is '{' or '}'.
name|bool
name|isTokenBrace
argument_list|()
specifier|const
block|{
return|return
name|Tok
operator|.
name|getKind
argument_list|()
operator|==
name|tok
operator|::
name|l_brace
operator|||
name|Tok
operator|.
name|getKind
argument_list|()
operator|==
name|tok
operator|::
name|r_brace
return|;
block|}
comment|/// isTokenStringLiteral - True if this token is a string-literal.
comment|///
name|bool
name|isTokenStringLiteral
argument_list|()
specifier|const
block|{
return|return
name|Tok
operator|.
name|getKind
argument_list|()
operator|==
name|tok
operator|::
name|string_literal
operator|||
name|Tok
operator|.
name|getKind
argument_list|()
operator|==
name|tok
operator|::
name|wide_string_literal
return|;
block|}
comment|/// ConsumeToken - Consume the current 'peek token' and lex the next one.
comment|/// This does not work with all kinds of tokens: strings and specific other
comment|/// tokens must be consumed with custom methods below.  This returns the
comment|/// location of the consumed token.
name|SourceLocation
name|ConsumeToken
parameter_list|()
block|{
name|assert
argument_list|(
operator|!
name|isTokenStringLiteral
argument_list|()
operator|&&
operator|!
name|isTokenParen
argument_list|()
operator|&&
operator|!
name|isTokenBracket
argument_list|()
operator|&&
operator|!
name|isTokenBrace
argument_list|()
operator|&&
literal|"Should consume special tokens with Consume*Token"
argument_list|)
expr_stmt|;
name|PrevTokLocation
operator|=
name|Tok
operator|.
name|getLocation
argument_list|()
expr_stmt|;
name|PP
operator|.
name|Lex
argument_list|(
name|Tok
argument_list|)
expr_stmt|;
return|return
name|PrevTokLocation
return|;
block|}
comment|/// ConsumeAnyToken - Dispatch to the right Consume* method based on the
comment|/// current token type.  This should only be used in cases where the type of
comment|/// the token really isn't known, e.g. in error recovery.
name|SourceLocation
name|ConsumeAnyToken
parameter_list|()
block|{
if|if
condition|(
name|isTokenParen
argument_list|()
condition|)
return|return
name|ConsumeParen
argument_list|()
return|;
elseif|else
if|if
condition|(
name|isTokenBracket
argument_list|()
condition|)
return|return
name|ConsumeBracket
argument_list|()
return|;
elseif|else
if|if
condition|(
name|isTokenBrace
argument_list|()
condition|)
return|return
name|ConsumeBrace
argument_list|()
return|;
elseif|else
if|if
condition|(
name|isTokenStringLiteral
argument_list|()
condition|)
return|return
name|ConsumeStringToken
argument_list|()
return|;
else|else
return|return
name|ConsumeToken
argument_list|()
return|;
block|}
comment|/// ConsumeParen - This consume method keeps the paren count up-to-date.
comment|///
name|SourceLocation
name|ConsumeParen
parameter_list|()
block|{
name|assert
argument_list|(
name|isTokenParen
argument_list|()
operator|&&
literal|"wrong consume method"
argument_list|)
expr_stmt|;
if|if
condition|(
name|Tok
operator|.
name|getKind
argument_list|()
operator|==
name|tok
operator|::
name|l_paren
condition|)
operator|++
name|ParenCount
expr_stmt|;
elseif|else
if|if
condition|(
name|ParenCount
condition|)
operator|--
name|ParenCount
expr_stmt|;
comment|// Don't let unbalanced )'s drive the count negative.
name|PrevTokLocation
operator|=
name|Tok
operator|.
name|getLocation
argument_list|()
expr_stmt|;
name|PP
operator|.
name|Lex
argument_list|(
name|Tok
argument_list|)
expr_stmt|;
return|return
name|PrevTokLocation
return|;
block|}
comment|/// ConsumeBracket - This consume method keeps the bracket count up-to-date.
comment|///
name|SourceLocation
name|ConsumeBracket
parameter_list|()
block|{
name|assert
argument_list|(
name|isTokenBracket
argument_list|()
operator|&&
literal|"wrong consume method"
argument_list|)
expr_stmt|;
if|if
condition|(
name|Tok
operator|.
name|getKind
argument_list|()
operator|==
name|tok
operator|::
name|l_square
condition|)
operator|++
name|BracketCount
expr_stmt|;
elseif|else
if|if
condition|(
name|BracketCount
condition|)
operator|--
name|BracketCount
expr_stmt|;
comment|// Don't let unbalanced ]'s drive the count negative.
name|PrevTokLocation
operator|=
name|Tok
operator|.
name|getLocation
argument_list|()
expr_stmt|;
name|PP
operator|.
name|Lex
argument_list|(
name|Tok
argument_list|)
expr_stmt|;
return|return
name|PrevTokLocation
return|;
block|}
comment|/// ConsumeBrace - This consume method keeps the brace count up-to-date.
comment|///
name|SourceLocation
name|ConsumeBrace
parameter_list|()
block|{
name|assert
argument_list|(
name|isTokenBrace
argument_list|()
operator|&&
literal|"wrong consume method"
argument_list|)
expr_stmt|;
if|if
condition|(
name|Tok
operator|.
name|getKind
argument_list|()
operator|==
name|tok
operator|::
name|l_brace
condition|)
operator|++
name|BraceCount
expr_stmt|;
elseif|else
if|if
condition|(
name|BraceCount
condition|)
operator|--
name|BraceCount
expr_stmt|;
comment|// Don't let unbalanced }'s drive the count negative.
name|PrevTokLocation
operator|=
name|Tok
operator|.
name|getLocation
argument_list|()
expr_stmt|;
name|PP
operator|.
name|Lex
argument_list|(
name|Tok
argument_list|)
expr_stmt|;
return|return
name|PrevTokLocation
return|;
block|}
comment|/// ConsumeStringToken - Consume the current 'peek token', lexing a new one
comment|/// and returning the token kind.  This method is specific to strings, as it
comment|/// handles string literal concatenation, as per C99 5.1.1.2, translation
comment|/// phase #6.
name|SourceLocation
name|ConsumeStringToken
parameter_list|()
block|{
name|assert
argument_list|(
name|isTokenStringLiteral
argument_list|()
operator|&&
literal|"Should only consume string literals with this method"
argument_list|)
expr_stmt|;
name|PrevTokLocation
operator|=
name|Tok
operator|.
name|getLocation
argument_list|()
expr_stmt|;
name|PP
operator|.
name|Lex
argument_list|(
name|Tok
argument_list|)
expr_stmt|;
return|return
name|PrevTokLocation
return|;
block|}
comment|/// GetLookAheadToken - This peeks ahead N tokens and returns that token
comment|/// without consuming any tokens.  LookAhead(0) returns 'Tok', LookAhead(1)
comment|/// returns the token after Tok, etc.
comment|///
comment|/// Note that this differs from the Preprocessor's LookAhead method, because
comment|/// the Parser always has one token lexed that the preprocessor doesn't.
comment|///
specifier|const
name|Token
modifier|&
name|GetLookAheadToken
parameter_list|(
name|unsigned
name|N
parameter_list|)
block|{
if|if
condition|(
name|N
operator|==
literal|0
operator|||
name|Tok
operator|.
name|is
argument_list|(
name|tok
operator|::
name|eof
argument_list|)
condition|)
return|return
name|Tok
return|;
return|return
name|PP
operator|.
name|LookAhead
argument_list|(
name|N
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/// NextToken - This peeks ahead one token and returns it without
comment|/// consuming it.
specifier|const
name|Token
modifier|&
name|NextToken
parameter_list|()
block|{
return|return
name|PP
operator|.
name|LookAhead
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/// TryAnnotateTypeOrScopeToken - If the current token position is on a
comment|/// typename (possibly qualified in C++) or a C++ scope specifier not followed
comment|/// by a typename, TryAnnotateTypeOrScopeToken will replace one or more tokens
comment|/// with a single annotation token representing the typename or C++ scope
comment|/// respectively.
comment|/// This simplifies handling of C++ scope specifiers and allows efficient
comment|/// backtracking without the need to re-parse and resolve nested-names and
comment|/// typenames.
comment|/// It will mainly be called when we expect to treat identifiers as typenames
comment|/// (if they are typenames). For example, in C we do not expect identifiers
comment|/// inside expressions to be treated as typenames so it will not be called
comment|/// for expressions in C.
comment|///
comment|/// This returns true if the token was annotated.
name|bool
name|TryAnnotateTypeOrScopeToken
parameter_list|(
name|bool
name|EnteringContext
init|=
name|false
parameter_list|)
function_decl|;
comment|/// TryAnnotateCXXScopeToken - Like TryAnnotateTypeOrScopeToken but only
comment|/// annotates C++ scope specifiers.  This returns true if the token was
comment|/// annotated.
name|bool
name|TryAnnotateCXXScopeToken
parameter_list|(
name|bool
name|EnteringContext
init|=
name|false
parameter_list|)
function_decl|;
comment|/// TryAltiVecToken - Check for context-sensitive AltiVec identifier tokens,
comment|/// replacing them with the non-context-sensitive keywords.  This returns
comment|/// true if the token was replaced.
name|bool
name|TryAltiVecToken
parameter_list|(
name|DeclSpec
modifier|&
name|DS
parameter_list|,
name|SourceLocation
name|Loc
parameter_list|,
specifier|const
name|char
modifier|*
modifier|&
name|PrevSpec
parameter_list|,
name|unsigned
modifier|&
name|DiagID
parameter_list|,
name|bool
modifier|&
name|isInvalid
parameter_list|)
block|{
if|if
condition|(
name|getLang
argument_list|()
operator|.
name|AltiVec
condition|)
block|{
if|if
condition|(
name|Tok
operator|.
name|getIdentifierInfo
argument_list|()
operator|==
name|Ident_vector
condition|)
block|{
specifier|const
name|Token
name|nextToken
init|=
name|NextToken
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|nextToken
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|tok
operator|::
name|kw_short
case|:
case|case
name|tok
operator|::
name|kw_long
case|:
case|case
name|tok
operator|::
name|kw_signed
case|:
case|case
name|tok
operator|::
name|kw_unsigned
case|:
case|case
name|tok
operator|::
name|kw_void
case|:
case|case
name|tok
operator|::
name|kw_char
case|:
case|case
name|tok
operator|::
name|kw_int
case|:
case|case
name|tok
operator|::
name|kw_float
case|:
case|case
name|tok
operator|::
name|kw_double
case|:
case|case
name|tok
operator|::
name|kw_bool
case|:
case|case
name|tok
operator|::
name|kw___pixel
case|:
name|isInvalid
operator|=
name|DS
operator|.
name|SetTypeAltiVecVector
argument_list|(
name|true
argument_list|,
name|Loc
argument_list|,
name|PrevSpec
argument_list|,
name|DiagID
argument_list|)
expr_stmt|;
return|return
name|true
return|;
case|case
name|tok
operator|::
name|identifier
case|:
if|if
condition|(
name|nextToken
operator|.
name|getIdentifierInfo
argument_list|()
operator|==
name|Ident_pixel
condition|)
block|{
name|isInvalid
operator|=
name|DS
operator|.
name|SetTypeAltiVecVector
argument_list|(
name|true
argument_list|,
name|Loc
argument_list|,
name|PrevSpec
argument_list|,
name|DiagID
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
break|break;
default|default:
break|break;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|Tok
operator|.
name|getIdentifierInfo
argument_list|()
operator|==
name|Ident_pixel
operator|)
operator|&&
name|DS
operator|.
name|isTypeAltiVecVector
argument_list|()
condition|)
block|{
name|isInvalid
operator|=
name|DS
operator|.
name|SetTypeAltiVecPixel
argument_list|(
name|true
argument_list|,
name|Loc
argument_list|,
name|PrevSpec
argument_list|,
name|DiagID
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
block|}
return|return
name|false
return|;
block|}
comment|/// TryAltiVecVectorToken - Check for context-sensitive AltiVec vector
comment|/// identifier token, replacing it with the non-context-sensitive __vector.
comment|/// This returns true if the token was replaced.
name|bool
name|TryAltiVecVectorToken
parameter_list|()
block|{
if|if
condition|(
name|getLang
argument_list|()
operator|.
name|AltiVec
condition|)
block|{
if|if
condition|(
name|Tok
operator|.
name|getIdentifierInfo
argument_list|()
operator|==
name|Ident_vector
condition|)
block|{
specifier|const
name|Token
name|nextToken
init|=
name|NextToken
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|nextToken
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|tok
operator|::
name|kw_short
case|:
case|case
name|tok
operator|::
name|kw_long
case|:
case|case
name|tok
operator|::
name|kw_signed
case|:
case|case
name|tok
operator|::
name|kw_unsigned
case|:
case|case
name|tok
operator|::
name|kw_void
case|:
case|case
name|tok
operator|::
name|kw_char
case|:
case|case
name|tok
operator|::
name|kw_int
case|:
case|case
name|tok
operator|::
name|kw_float
case|:
case|case
name|tok
operator|::
name|kw_double
case|:
case|case
name|tok
operator|::
name|kw_bool
case|:
case|case
name|tok
operator|::
name|kw___pixel
case|:
name|Tok
operator|.
name|setKind
argument_list|(
name|tok
operator|::
name|kw___vector
argument_list|)
expr_stmt|;
return|return
name|true
return|;
case|case
name|tok
operator|::
name|identifier
case|:
if|if
condition|(
name|nextToken
operator|.
name|getIdentifierInfo
argument_list|()
operator|==
name|Ident_pixel
condition|)
block|{
name|Tok
operator|.
name|setKind
argument_list|(
name|tok
operator|::
name|kw___vector
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
break|break;
default|default:
break|break;
block|}
block|}
block|}
return|return
name|false
return|;
block|}
comment|/// TentativeParsingAction - An object that is used as a kind of "tentative
comment|/// parsing transaction". It gets instantiated to mark the token position and
comment|/// after the token consumption is done, Commit() or Revert() is called to
comment|/// either "commit the consumed tokens" or revert to the previously marked
comment|/// token position. Example:
comment|///
comment|///   TentativeParsingAction TPA(*this);
comment|///   ConsumeToken();
comment|///   ....
comment|///   TPA.Revert();
comment|///
name|class
name|TentativeParsingAction
block|{
name|Parser
modifier|&
name|P
decl_stmt|;
name|Token
name|PrevTok
decl_stmt|;
name|bool
name|isActive
decl_stmt|;
name|public
label|:
name|explicit
name|TentativeParsingAction
argument_list|(
name|Parser
operator|&
name|p
argument_list|)
operator|:
name|P
argument_list|(
argument|p
argument_list|)
block|{
name|PrevTok
operator|=
name|P
operator|.
name|Tok
block|;
name|P
operator|.
name|PP
operator|.
name|EnableBacktrackAtThisPos
argument_list|()
block|;
name|isActive
operator|=
name|true
block|;     }
name|void
name|Commit
argument_list|()
block|{
name|assert
argument_list|(
name|isActive
operator|&&
literal|"Parsing action was finished!"
argument_list|)
block|;
name|P
operator|.
name|PP
operator|.
name|CommitBacktrackedTokens
argument_list|()
block|;
name|isActive
operator|=
name|false
block|;     }
name|void
name|Revert
argument_list|()
block|{
name|assert
argument_list|(
name|isActive
operator|&&
literal|"Parsing action was finished!"
argument_list|)
block|;
name|P
operator|.
name|PP
operator|.
name|Backtrack
argument_list|()
block|;
name|P
operator|.
name|Tok
operator|=
name|PrevTok
block|;
name|isActive
operator|=
name|false
block|;     }
operator|~
name|TentativeParsingAction
argument_list|()
block|{
name|assert
argument_list|(
operator|!
name|isActive
operator|&&
literal|"Forgot to call Commit or Revert!"
argument_list|)
block|;     }
block|}
empty_stmt|;
comment|/// MatchRHSPunctuation - For punctuation with a LHS and RHS (e.g. '['/']'),
comment|/// this helper function matches and consumes the specified RHS token if
comment|/// present.  If not present, it emits the specified diagnostic indicating
comment|/// that the parser failed to match the RHS of the token at LHSLoc.  LHSName
comment|/// should be the name of the unmatched LHS token.  This returns the location
comment|/// of the consumed token.
name|SourceLocation
name|MatchRHSPunctuation
argument_list|(
name|tok
operator|::
name|TokenKind
name|RHSTok
argument_list|,
name|SourceLocation
name|LHSLoc
argument_list|)
decl_stmt|;
comment|/// ExpectAndConsume - The parser expects that 'ExpectedTok' is next in the
comment|/// input.  If so, it is consumed and false is returned.
comment|///
comment|/// If the input is malformed, this emits the specified diagnostic.  Next, if
comment|/// SkipToTok is specified, it calls SkipUntil(SkipToTok).  Finally, true is
comment|/// returned.
name|bool
name|ExpectAndConsume
argument_list|(
name|tok
operator|::
name|TokenKind
name|ExpectedTok
argument_list|,
name|unsigned
name|Diag
argument_list|,
specifier|const
name|char
operator|*
name|DiagMsg
operator|=
literal|""
argument_list|,
name|tok
operator|::
name|TokenKind
name|SkipToTok
operator|=
name|tok
operator|::
name|unknown
argument_list|)
decl_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|// Scope manipulation
comment|/// ParseScope - Introduces a new scope for parsing. The kind of
comment|/// scope is determined by ScopeFlags. Objects of this type should
comment|/// be created on the stack to coincide with the position where the
comment|/// parser enters the new scope, and this object's constructor will
comment|/// create that new scope. Similarly, once the object is destroyed
comment|/// the parser will exit the scope.
name|class
name|ParseScope
block|{
name|Parser
modifier|*
name|Self
decl_stmt|;
name|ParseScope
argument_list|(
specifier|const
name|ParseScope
operator|&
argument_list|)
expr_stmt|;
comment|// do not implement
name|ParseScope
modifier|&
name|operator
init|=
operator|(
specifier|const
name|ParseScope
operator|&
operator|)
decl_stmt|;
comment|// do not implement
name|public
label|:
comment|// ParseScope - Construct a new object to manage a scope in the
comment|// parser Self where the new Scope is created with the flags
comment|// ScopeFlags, but only when ManageScope is true (the default). If
comment|// ManageScope is false, this object does nothing.
name|ParseScope
argument_list|(
argument|Parser *Self
argument_list|,
argument|unsigned ScopeFlags
argument_list|,
argument|bool ManageScope = true
argument_list|)
block|:
name|Self
argument_list|(
argument|Self
argument_list|)
block|{
if|if
condition|(
name|ManageScope
condition|)
name|Self
operator|->
name|EnterScope
argument_list|(
name|ScopeFlags
argument_list|)
expr_stmt|;
else|else
name|this
operator|->
name|Self
operator|=
literal|0
expr_stmt|;
block|}
comment|// Exit - Exit the scope associated with this object now, rather
comment|// than waiting until the object is destroyed.
name|void
name|Exit
parameter_list|()
block|{
if|if
condition|(
name|Self
condition|)
block|{
name|Self
operator|->
name|ExitScope
argument_list|()
expr_stmt|;
name|Self
operator|=
literal|0
expr_stmt|;
block|}
block|}
operator|~
name|ParseScope
argument_list|()
block|{
name|Exit
argument_list|()
block|;     }
block|}
empty_stmt|;
comment|/// EnterScope - Start a new scope.
name|void
name|EnterScope
parameter_list|(
name|unsigned
name|ScopeFlags
parameter_list|)
function_decl|;
comment|/// ExitScope - Pop a scope off the scope stack.
name|void
name|ExitScope
parameter_list|()
function_decl|;
comment|//===--------------------------------------------------------------------===//
comment|// Diagnostic Emission and Error recovery.
name|DiagnosticBuilder
name|Diag
parameter_list|(
name|SourceLocation
name|Loc
parameter_list|,
name|unsigned
name|DiagID
parameter_list|)
function_decl|;
name|DiagnosticBuilder
name|Diag
parameter_list|(
specifier|const
name|Token
modifier|&
name|Tok
parameter_list|,
name|unsigned
name|DiagID
parameter_list|)
function_decl|;
name|void
name|SuggestParentheses
parameter_list|(
name|SourceLocation
name|Loc
parameter_list|,
name|unsigned
name|DK
parameter_list|,
name|SourceRange
name|ParenRange
parameter_list|)
function_decl|;
comment|/// SkipUntil - Read tokens until we get to the specified token, then consume
comment|/// it (unless DontConsume is true).  Because we cannot guarantee that the
comment|/// token will ever occur, this skips to the next token, or to some likely
comment|/// good stopping point.  If StopAtSemi is true, skipping will stop at a ';'
comment|/// character.
comment|///
comment|/// If SkipUntil finds the specified token, it returns true, otherwise it
comment|/// returns false.
name|bool
name|SkipUntil
argument_list|(
name|tok
operator|::
name|TokenKind
name|T
argument_list|,
name|bool
name|StopAtSemi
operator|=
name|true
argument_list|,
name|bool
name|DontConsume
operator|=
name|false
argument_list|)
block|{
return|return
name|SkipUntil
argument_list|(
operator|&
name|T
argument_list|,
literal|1
argument_list|,
name|StopAtSemi
argument_list|,
name|DontConsume
argument_list|)
return|;
block|}
name|bool
name|SkipUntil
argument_list|(
name|tok
operator|::
name|TokenKind
name|T1
argument_list|,
name|tok
operator|::
name|TokenKind
name|T2
argument_list|,
name|bool
name|StopAtSemi
operator|=
name|true
argument_list|,
name|bool
name|DontConsume
operator|=
name|false
argument_list|)
block|{
name|tok
operator|::
name|TokenKind
name|TokArray
index|[]
operator|=
block|{
name|T1
block|,
name|T2
block|}
expr_stmt|;
return|return
name|SkipUntil
argument_list|(
name|TokArray
argument_list|,
literal|2
argument_list|,
name|StopAtSemi
argument_list|,
name|DontConsume
argument_list|)
return|;
block|}
name|bool
name|SkipUntil
argument_list|(
specifier|const
name|tok
operator|::
name|TokenKind
operator|*
name|Toks
argument_list|,
name|unsigned
name|NumToks
argument_list|,
name|bool
name|StopAtSemi
operator|=
name|true
argument_list|,
name|bool
name|DontConsume
operator|=
name|false
argument_list|)
decl_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|// Lexing and parsing of C++ inline methods.
struct|struct
name|LexedMethod
block|{
name|Action
operator|::
name|DeclPtrTy
name|D
expr_stmt|;
name|CachedTokens
name|Toks
decl_stmt|;
comment|/// \brief Whether this member function had an associated template
comment|/// scope. When true, D is a template declaration.
comment|/// othewise, it is a member function declaration.
name|bool
name|TemplateScope
decl_stmt|;
name|explicit
name|LexedMethod
argument_list|(
name|Action
operator|::
name|DeclPtrTy
name|MD
argument_list|)
range|:
name|D
argument_list|(
name|MD
argument_list|)
decl_stmt|,
name|TemplateScope
argument_list|(
name|false
argument_list|)
block|{}
block|}
struct|;
comment|/// LateParsedDefaultArgument - Keeps track of a parameter that may
comment|/// have a default argument that cannot be parsed yet because it
comment|/// occurs within a member function declaration inside the class
comment|/// (C++ [class.mem]p2).
struct|struct
name|LateParsedDefaultArgument
block|{
name|explicit
name|LateParsedDefaultArgument
argument_list|(
name|Action
operator|::
name|DeclPtrTy
name|P
argument_list|,
name|CachedTokens
operator|*
name|Toks
operator|=
literal|0
argument_list|)
range|:
name|Param
argument_list|(
name|P
argument_list|)
decl_stmt|,
name|Toks
argument_list|(
name|Toks
argument_list|)
block|{ }
comment|/// Param - The parameter declaration for this parameter.
name|Action
operator|::
name|DeclPtrTy
name|Param
expr_stmt|;
comment|/// Toks - The sequence of tokens that comprises the default
comment|/// argument expression, not including the '=' or the terminating
comment|/// ')' or ','. This will be NULL for parameters that have no
comment|/// default argument.
name|CachedTokens
modifier|*
name|Toks
decl_stmt|;
block|}
struct|;
comment|/// LateParsedMethodDeclaration - A method declaration inside a class that
comment|/// contains at least one entity whose parsing needs to be delayed
comment|/// until the class itself is completely-defined, such as a default
comment|/// argument (C++ [class.mem]p2).
struct|struct
name|LateParsedMethodDeclaration
block|{
name|explicit
name|LateParsedMethodDeclaration
argument_list|(
name|Action
operator|::
name|DeclPtrTy
name|M
argument_list|)
range|:
name|Method
argument_list|(
name|M
argument_list|)
decl_stmt|,
name|TemplateScope
argument_list|(
name|false
argument_list|)
block|{ }
comment|/// Method - The method declaration.
name|Action
operator|::
name|DeclPtrTy
name|Method
expr_stmt|;
comment|/// \brief Whether this member function had an associated template
comment|/// scope. When true, D is a template declaration.
comment|/// othewise, it is a member function declaration.
name|bool
name|TemplateScope
decl_stmt|;
comment|/// DefaultArgs - Contains the parameters of the function and
comment|/// their default arguments. At least one of the parameters will
comment|/// have a default argument, but all of the parameters of the
comment|/// method will be stored so that they can be reintroduced into
comment|/// scope at the appropriate times.
name|llvm
operator|::
name|SmallVector
operator|<
name|LateParsedDefaultArgument
operator|,
literal|8
operator|>
name|DefaultArgs
expr_stmt|;
block|}
struct|;
comment|/// LateParsedMethodDecls - During parsing of a top (non-nested) C++
comment|/// class, its method declarations that contain parts that won't be
comment|/// parsed until after the definiton is completed (C++ [class.mem]p2),
comment|/// the method declarations will be stored here with the tokens that
comment|/// will be parsed to create those entities.
typedef|typedef
name|std
operator|::
name|list
operator|<
name|LateParsedMethodDeclaration
operator|>
name|LateParsedMethodDecls
expr_stmt|;
comment|/// LexedMethodsForTopClass - During parsing of a top (non-nested) C++ class,
comment|/// its inline method definitions and the inline method definitions of its
comment|/// nested classes are lexed and stored here.
typedef|typedef
name|std
operator|::
name|list
operator|<
name|LexedMethod
operator|>
name|LexedMethodsForTopClass
expr_stmt|;
comment|/// \brief Representation of a class that has been parsed, including
comment|/// any member function declarations or definitions that need to be
comment|/// parsed after the corresponding top-level class is complete.
struct|struct
name|ParsingClass
block|{
name|ParsingClass
argument_list|(
argument|DeclPtrTy TagOrTemplate
argument_list|,
argument|bool TopLevelClass
argument_list|)
block|:
name|TopLevelClass
argument_list|(
name|TopLevelClass
argument_list|)
operator|,
name|TemplateScope
argument_list|(
name|false
argument_list|)
operator|,
name|TagOrTemplate
argument_list|(
argument|TagOrTemplate
argument_list|)
block|{ }
comment|/// \brief Whether this is a "top-level" class, meaning that it is
comment|/// not nested within another class.
name|bool
name|TopLevelClass
operator|:
literal|1
expr_stmt|;
comment|/// \brief Whether this class had an associated template
comment|/// scope. When true, TagOrTemplate is a template declaration;
comment|/// othewise, it is a tag declaration.
name|bool
name|TemplateScope
range|:
literal|1
decl_stmt|;
comment|/// \brief The class or class template whose definition we are parsing.
name|DeclPtrTy
name|TagOrTemplate
decl_stmt|;
comment|/// MethodDecls - Method declarations that contain pieces whose
comment|/// parsing will be delayed until the class is fully defined.
name|LateParsedMethodDecls
name|MethodDecls
decl_stmt|;
comment|/// MethodDefs - Methods whose definitions will be parsed once the
comment|/// class has been fully defined.
name|LexedMethodsForTopClass
name|MethodDefs
decl_stmt|;
comment|/// \brief Nested classes inside this class.
name|llvm
operator|::
name|SmallVector
operator|<
name|ParsingClass
operator|*
operator|,
literal|4
operator|>
name|NestedClasses
expr_stmt|;
block|}
struct|;
comment|/// \brief The stack of classes that is currently being
comment|/// parsed. Nested and local classes will be pushed onto this stack
comment|/// when they are parsed, and removed afterward.
name|std
operator|::
name|stack
operator|<
name|ParsingClass
operator|*
operator|>
name|ClassStack
expr_stmt|;
name|ParsingClass
modifier|&
name|getCurrentClass
parameter_list|()
block|{
name|assert
argument_list|(
operator|!
name|ClassStack
operator|.
name|empty
argument_list|()
operator|&&
literal|"No lexed method stacks!"
argument_list|)
expr_stmt|;
return|return
operator|*
name|ClassStack
operator|.
name|top
argument_list|()
return|;
block|}
comment|/// \brief RAII object used to inform the actions that we're
comment|/// currently parsing a declaration.  This is active when parsing a
comment|/// variable's initializer, but not when parsing the body of a
comment|/// class or function definition.
name|class
name|ParsingDeclRAIIObject
block|{
name|Action
modifier|&
name|Actions
decl_stmt|;
name|Action
operator|::
name|ParsingDeclStackState
name|State
expr_stmt|;
name|bool
name|Popped
decl_stmt|;
name|public
label|:
name|ParsingDeclRAIIObject
argument_list|(
name|Parser
operator|&
name|P
argument_list|)
operator|:
name|Actions
argument_list|(
argument|P.Actions
argument_list|)
block|{
name|push
argument_list|()
block|;     }
operator|~
name|ParsingDeclRAIIObject
argument_list|()
block|{
name|abort
argument_list|()
block|;     }
comment|/// Resets the RAII object for a new declaration.
name|void
name|reset
argument_list|()
block|{
name|abort
argument_list|()
block|;
name|push
argument_list|()
block|;     }
comment|/// Signals that the context was completed without an appropriate
comment|/// declaration being parsed.
name|void
name|abort
argument_list|()
block|{
name|pop
argument_list|(
name|DeclPtrTy
argument_list|()
argument_list|)
block|;     }
name|void
name|complete
argument_list|(
argument|DeclPtrTy D
argument_list|)
block|{
name|assert
argument_list|(
operator|!
name|Popped
operator|&&
literal|"ParsingDeclaration has already been popped!"
argument_list|)
block|;
name|pop
argument_list|(
name|D
argument_list|)
block|;     }
name|private
operator|:
name|void
name|push
argument_list|()
block|{
name|State
operator|=
name|Actions
operator|.
name|PushParsingDeclaration
argument_list|()
block|;
name|Popped
operator|=
name|false
block|;     }
name|void
name|pop
argument_list|(
argument|DeclPtrTy D
argument_list|)
block|{
if|if
condition|(
operator|!
name|Popped
condition|)
block|{
name|Actions
operator|.
name|PopParsingDeclaration
argument_list|(
name|State
argument_list|,
name|D
argument_list|)
expr_stmt|;
name|Popped
operator|=
name|true
expr_stmt|;
block|}
block|}
block|}
empty_stmt|;
comment|/// A class for parsing a DeclSpec.
name|class
name|ParsingDeclSpec
range|:
name|public
name|DeclSpec
block|{
name|ParsingDeclRAIIObject
name|ParsingRAII
block|;
name|public
operator|:
name|ParsingDeclSpec
argument_list|(
name|Parser
operator|&
name|P
argument_list|)
operator|:
name|ParsingRAII
argument_list|(
argument|P
argument_list|)
block|{     }
name|void
name|complete
argument_list|(
argument|DeclPtrTy D
argument_list|)
block|{
name|ParsingRAII
operator|.
name|complete
argument_list|(
name|D
argument_list|)
block|;     }
name|void
name|abort
argument_list|()
block|{
name|ParsingRAII
operator|.
name|abort
argument_list|()
block|;     }
block|}
decl_stmt|;
comment|/// A class for parsing a declarator.
name|class
name|ParsingDeclarator
range|:
name|public
name|Declarator
block|{
name|ParsingDeclRAIIObject
name|ParsingRAII
block|;
name|public
operator|:
name|ParsingDeclarator
argument_list|(
argument|Parser&P
argument_list|,
argument|const ParsingDeclSpec&DS
argument_list|,
argument|TheContext C
argument_list|)
operator|:
name|Declarator
argument_list|(
name|DS
argument_list|,
name|C
argument_list|)
block|,
name|ParsingRAII
argument_list|(
argument|P
argument_list|)
block|{     }
specifier|const
name|ParsingDeclSpec
operator|&
name|getDeclSpec
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
specifier|const
name|ParsingDeclSpec
operator|&
operator|>
operator|(
name|Declarator
operator|::
name|getDeclSpec
argument_list|()
operator|)
return|;
block|}
name|ParsingDeclSpec
operator|&
name|getMutableDeclSpec
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|ParsingDeclSpec
operator|&
operator|>
operator|(
name|getDeclSpec
argument_list|()
operator|)
return|;
block|}
name|void
name|clear
argument_list|()
block|{
name|Declarator
operator|::
name|clear
argument_list|()
block|;
name|ParsingRAII
operator|.
name|reset
argument_list|()
block|;     }
name|void
name|complete
argument_list|(
argument|DeclPtrTy D
argument_list|)
block|{
name|ParsingRAII
operator|.
name|complete
argument_list|(
name|D
argument_list|)
block|;     }
expr|}
block|;
comment|/// \brief RAII object used to
name|class
name|ParsingClassDefinition
block|{
name|Parser
operator|&
name|P
block|;
name|bool
name|Popped
block|;
name|public
operator|:
name|ParsingClassDefinition
argument_list|(
argument|Parser&P
argument_list|,
argument|DeclPtrTy TagOrTemplate
argument_list|,
argument|bool TopLevelClass
argument_list|)
operator|:
name|P
argument_list|(
name|P
argument_list|)
block|,
name|Popped
argument_list|(
argument|false
argument_list|)
block|{
name|P
operator|.
name|PushParsingClass
argument_list|(
name|TagOrTemplate
argument_list|,
name|TopLevelClass
argument_list|)
block|;     }
comment|/// \brief Pop this class of the stack.
name|void
name|Pop
argument_list|()
block|{
name|assert
argument_list|(
operator|!
name|Popped
operator|&&
literal|"Nested class has already been popped"
argument_list|)
block|;
name|Popped
operator|=
name|true
block|;
name|P
operator|.
name|PopParsingClass
argument_list|()
block|;     }
operator|~
name|ParsingClassDefinition
argument_list|()
block|{
if|if
condition|(
operator|!
name|Popped
condition|)
name|P
operator|.
name|PopParsingClass
argument_list|()
expr_stmt|;
block|}
expr|}
block|;
comment|/// \brief Contains information about any template-specific
comment|/// information that has been parsed prior to parsing declaration
comment|/// specifiers.
block|struct
name|ParsedTemplateInfo
block|{
name|ParsedTemplateInfo
argument_list|()
operator|:
name|Kind
argument_list|(
name|NonTemplate
argument_list|)
block|,
name|TemplateParams
argument_list|(
literal|0
argument_list|)
block|,
name|TemplateLoc
argument_list|()
block|{ }
name|ParsedTemplateInfo
argument_list|(
argument|TemplateParameterLists *TemplateParams
argument_list|,
argument|bool isSpecialization
argument_list|,
argument|bool lastParameterListWasEmpty = false
argument_list|)
operator|:
name|Kind
argument_list|(
name|isSpecialization
operator|?
name|ExplicitSpecialization
operator|:
name|Template
argument_list|)
block|,
name|TemplateParams
argument_list|(
name|TemplateParams
argument_list|)
block|,
name|LastParameterListWasEmpty
argument_list|(
argument|lastParameterListWasEmpty
argument_list|)
block|{ }
name|explicit
name|ParsedTemplateInfo
argument_list|(
argument|SourceLocation ExternLoc
argument_list|,
argument|SourceLocation TemplateLoc
argument_list|)
operator|:
name|Kind
argument_list|(
name|ExplicitInstantiation
argument_list|)
block|,
name|TemplateParams
argument_list|(
literal|0
argument_list|)
block|,
name|ExternLoc
argument_list|(
name|ExternLoc
argument_list|)
block|,
name|TemplateLoc
argument_list|(
name|TemplateLoc
argument_list|)
block|,
name|LastParameterListWasEmpty
argument_list|(
argument|false
argument_list|)
block|{ }
comment|/// \brief The kind of template we are parsing.
expr|enum
block|{
comment|/// \brief We are not parsing a template at all.
name|NonTemplate
operator|=
literal|0
block|,
comment|/// \brief We are parsing a template declaration.
name|Template
block|,
comment|/// \brief We are parsing an explicit specialization.
name|ExplicitSpecialization
block|,
comment|/// \brief We are parsing an explicit instantiation.
name|ExplicitInstantiation
block|}
name|Kind
block|;
comment|/// \brief The template parameter lists, for template declarations
comment|/// and explicit specializations.
name|TemplateParameterLists
operator|*
name|TemplateParams
block|;
comment|/// \brief The location of the 'extern' keyword, if any, for an explicit
comment|/// instantiation
name|SourceLocation
name|ExternLoc
block|;
comment|/// \brief The location of the 'template' keyword, for an explicit
comment|/// instantiation.
name|SourceLocation
name|TemplateLoc
block|;
comment|/// \brief Whether the last template parameter list was empty.
name|bool
name|LastParameterListWasEmpty
block|;   }
block|;
name|void
name|PushParsingClass
argument_list|(
argument|DeclPtrTy TagOrTemplate
argument_list|,
argument|bool TopLevelClass
argument_list|)
block|;
name|void
name|DeallocateParsedClasses
argument_list|(
name|ParsingClass
operator|*
name|Class
argument_list|)
block|;
name|void
name|PopParsingClass
argument_list|()
block|;
name|DeclPtrTy
name|ParseCXXInlineMethodDef
argument_list|(
argument|AccessSpecifier AS
argument_list|,
argument|Declarator&D
argument_list|,
argument|const ParsedTemplateInfo&TemplateInfo
argument_list|)
block|;
name|void
name|ParseLexedMethodDeclarations
argument_list|(
name|ParsingClass
operator|&
name|Class
argument_list|)
block|;
name|void
name|ParseLexedMethodDefs
argument_list|(
name|ParsingClass
operator|&
name|Class
argument_list|)
block|;
name|bool
name|ConsumeAndStoreUntil
argument_list|(
argument|tok::TokenKind T1
argument_list|,
argument|tok::TokenKind T2
argument_list|,
argument|CachedTokens&Toks
argument_list|,
argument|tok::TokenKind EarlyAbortIf = tok::unknown
argument_list|,
argument|bool ConsumeFinalToken = true
argument_list|)
block|;
comment|//===--------------------------------------------------------------------===//
comment|// C99 6.9: External Definitions.
name|DeclGroupPtrTy
name|ParseExternalDeclaration
argument_list|(
argument|CXX0XAttributeList Attr
argument_list|)
block|;
name|bool
name|isDeclarationAfterDeclarator
argument_list|()
block|;
name|bool
name|isStartOfFunctionDefinition
argument_list|()
block|;
name|DeclGroupPtrTy
name|ParseDeclarationOrFunctionDefinition
argument_list|(
argument|AttributeList *Attr
argument_list|,
argument|AccessSpecifier AS = AS_none
argument_list|)
block|;
name|DeclGroupPtrTy
name|ParseDeclarationOrFunctionDefinition
argument_list|(
argument|ParsingDeclSpec&DS
argument_list|,
argument|AttributeList *Attr
argument_list|,
argument|AccessSpecifier AS = AS_none
argument_list|)
block|;
name|DeclPtrTy
name|ParseFunctionDefinition
argument_list|(
name|ParsingDeclarator
operator|&
name|D
argument_list|,
specifier|const
name|ParsedTemplateInfo
operator|&
name|TemplateInfo
operator|=
name|ParsedTemplateInfo
argument_list|()
argument_list|)
block|;
name|void
name|ParseKNRParamDeclarations
argument_list|(
name|Declarator
operator|&
name|D
argument_list|)
block|;
comment|// EndLoc, if non-NULL, is filled with the location of the last token of
comment|// the simple-asm.
name|OwningExprResult
name|ParseSimpleAsm
argument_list|(
name|SourceLocation
operator|*
name|EndLoc
operator|=
literal|0
argument_list|)
block|;
name|OwningExprResult
name|ParseAsmStringLiteral
argument_list|()
block|;
comment|// Objective-C External Declarations
name|DeclPtrTy
name|ParseObjCAtDirectives
argument_list|()
block|;
name|DeclPtrTy
name|ParseObjCAtClassDeclaration
argument_list|(
argument|SourceLocation atLoc
argument_list|)
block|;
name|DeclPtrTy
name|ParseObjCAtInterfaceDeclaration
argument_list|(
argument|SourceLocation atLoc
argument_list|,
argument|AttributeList *prefixAttrs =
literal|0
argument_list|)
block|;
name|void
name|ParseObjCClassInstanceVariables
argument_list|(
argument|DeclPtrTy interfaceDecl
argument_list|,
argument|SourceLocation atLoc
argument_list|)
block|;
name|bool
name|ParseObjCProtocolReferences
argument_list|(
argument|llvm::SmallVectorImpl<Action::DeclPtrTy>&P
argument_list|,
argument|llvm::SmallVectorImpl<SourceLocation>&PLocs
argument_list|,
argument|bool WarnOnDeclarations
argument_list|,
argument|SourceLocation&LAngleLoc
argument_list|,
argument|SourceLocation&EndProtoLoc
argument_list|)
block|;
name|void
name|ParseObjCInterfaceDeclList
argument_list|(
argument|DeclPtrTy interfaceDecl
argument_list|,
argument|tok::ObjCKeywordKind contextKey
argument_list|)
block|;
name|DeclPtrTy
name|ParseObjCAtProtocolDeclaration
argument_list|(
argument|SourceLocation atLoc
argument_list|,
argument|AttributeList *prefixAttrs =
literal|0
argument_list|)
block|;
name|DeclPtrTy
name|ObjCImpDecl
block|;
name|llvm
operator|::
name|SmallVector
operator|<
name|DeclPtrTy
block|,
literal|4
operator|>
name|PendingObjCImpDecl
block|;
name|DeclPtrTy
name|ParseObjCAtImplementationDeclaration
argument_list|(
argument|SourceLocation atLoc
argument_list|)
block|;
name|DeclPtrTy
name|ParseObjCAtEndDeclaration
argument_list|(
argument|SourceRange atEnd
argument_list|)
block|;
name|DeclPtrTy
name|ParseObjCAtAliasDeclaration
argument_list|(
argument|SourceLocation atLoc
argument_list|)
block|;
name|DeclPtrTy
name|ParseObjCPropertySynthesize
argument_list|(
argument|SourceLocation atLoc
argument_list|)
block|;
name|DeclPtrTy
name|ParseObjCPropertyDynamic
argument_list|(
argument|SourceLocation atLoc
argument_list|)
block|;
name|IdentifierInfo
operator|*
name|ParseObjCSelectorPiece
argument_list|(
name|SourceLocation
operator|&
name|MethodLocation
argument_list|)
block|;
comment|// Definitions for Objective-c context sensitive keywords recognition.
block|enum
name|ObjCTypeQual
block|{
name|objc_in
operator|=
literal|0
block|,
name|objc_out
block|,
name|objc_inout
block|,
name|objc_oneway
block|,
name|objc_bycopy
block|,
name|objc_byref
block|,
name|objc_NumQuals
block|}
block|;
name|IdentifierInfo
operator|*
name|ObjCTypeQuals
index|[
name|objc_NumQuals
index|]
block|;
name|bool
name|isTokIdentifier_in
argument_list|()
specifier|const
block|;
name|TypeTy
operator|*
name|ParseObjCTypeName
argument_list|(
name|ObjCDeclSpec
operator|&
name|DS
argument_list|)
block|;
name|void
name|ParseObjCMethodRequirement
argument_list|()
block|;
name|DeclPtrTy
name|ParseObjCMethodPrototype
argument_list|(
argument|DeclPtrTy classOrCat
argument_list|,
argument|tok::ObjCKeywordKind MethodImplKind = tok::objc_not_keyword
argument_list|)
block|;
name|DeclPtrTy
name|ParseObjCMethodDecl
argument_list|(
argument|SourceLocation mLoc
argument_list|,
argument|tok::TokenKind mType
argument_list|,
argument|DeclPtrTy classDecl
argument_list|,
argument|tok::ObjCKeywordKind MethodImplKind = tok::objc_not_keyword
argument_list|)
block|;
name|void
name|ParseObjCPropertyAttribute
argument_list|(
argument|ObjCDeclSpec&DS
argument_list|,
argument|DeclPtrTy ClassDecl
argument_list|,
argument|DeclPtrTy *Methods
argument_list|,
argument|unsigned NumMethods
argument_list|)
block|;
name|DeclPtrTy
name|ParseObjCMethodDefinition
argument_list|()
block|;
comment|//===--------------------------------------------------------------------===//
comment|// C99 6.5: Expressions.
name|OwningExprResult
name|ParseExpression
argument_list|()
block|;
name|OwningExprResult
name|ParseConstantExpression
argument_list|()
block|;
comment|// Expr that doesn't include commas.
name|OwningExprResult
name|ParseAssignmentExpression
argument_list|()
block|;
name|OwningExprResult
name|ParseExpressionWithLeadingAt
argument_list|(
argument|SourceLocation AtLoc
argument_list|)
block|;
name|OwningExprResult
name|ParseExpressionWithLeadingExtension
argument_list|(
argument|SourceLocation ExtLoc
argument_list|)
block|;
name|OwningExprResult
name|ParseRHSOfBinaryExpression
argument_list|(
argument|OwningExprResult LHS
argument_list|,
argument|unsigned MinPrec
argument_list|)
block|;
name|OwningExprResult
name|ParseCastExpression
argument_list|(
argument|bool isUnaryExpression
argument_list|,
argument|bool isAddressOfOperand
argument_list|,
argument|bool&NotCastExpr
argument_list|,
argument|TypeTy *TypeOfCast
argument_list|)
block|;
name|OwningExprResult
name|ParseCastExpression
argument_list|(
argument|bool isUnaryExpression
argument_list|,
argument|bool isAddressOfOperand = false
argument_list|,
argument|TypeTy *TypeOfCast =
literal|0
argument_list|)
block|;
name|OwningExprResult
name|ParsePostfixExpressionSuffix
argument_list|(
argument|OwningExprResult LHS
argument_list|)
block|;
name|OwningExprResult
name|ParseSizeofAlignofExpression
argument_list|()
block|;
name|OwningExprResult
name|ParseBuiltinPrimaryExpression
argument_list|()
block|;
name|OwningExprResult
name|ParseExprAfterTypeofSizeofAlignof
argument_list|(
specifier|const
name|Token
operator|&
name|OpTok
argument_list|,
name|bool
operator|&
name|isCastExpr
argument_list|,
name|TypeTy
operator|*
operator|&
name|CastTy
argument_list|,
name|SourceRange
operator|&
name|CastRange
argument_list|)
block|;
specifier|static
specifier|const
name|unsigned
name|ExprListSize
operator|=
literal|12
block|;
typedef|typedef
name|llvm
operator|::
name|SmallVector
operator|<
name|ExprTy
operator|*
operator|,
name|ExprListSize
operator|>
name|ExprListTy
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|SmallVector
operator|<
name|SourceLocation
operator|,
name|ExprListSize
operator|>
name|CommaLocsTy
expr_stmt|;
comment|/// ParseExpressionList - Used for C/C++ (argument-)expression-list.
name|bool
name|ParseExpressionList
argument_list|(
name|ExprListTy
operator|&
name|Exprs
argument_list|,
name|CommaLocsTy
operator|&
name|CommaLocs
argument_list|,
name|void
argument_list|(
argument|Action::*Completer
argument_list|)
operator|(
name|Scope
operator|*
name|S
expr|,
name|void
operator|*
name|Data
expr|,
name|ExprTy
operator|*
operator|*
name|Args
expr|,
name|unsigned
name|NumArgs
operator|)
operator|=
literal|0
argument_list|,
name|void
operator|*
name|Data
operator|=
literal|0
argument_list|)
decl_stmt|;
comment|/// ParenParseOption - Control what ParseParenExpression will parse.
enum|enum
name|ParenParseOption
block|{
name|SimpleExpr
block|,
comment|// Only parse '(' expression ')'
name|CompoundStmt
block|,
comment|// Also allow '(' compound-statement ')'
name|CompoundLiteral
block|,
comment|// Also allow '(' type-name ')' '{' ... '}'
name|CastExpr
comment|// Also allow '(' type-name ')'<anything>
block|}
enum|;
name|OwningExprResult
name|ParseParenExpression
parameter_list|(
name|ParenParseOption
modifier|&
name|ExprType
parameter_list|,
name|bool
name|stopIfCastExpr
parameter_list|,
name|TypeTy
modifier|*
name|TypeOfCast
parameter_list|,
name|TypeTy
modifier|*
modifier|&
name|CastTy
parameter_list|,
name|SourceLocation
modifier|&
name|RParenLoc
parameter_list|)
function_decl|;
name|OwningExprResult
name|ParseCXXAmbiguousParenExpression
parameter_list|(
name|ParenParseOption
modifier|&
name|ExprType
parameter_list|,
name|TypeTy
modifier|*
modifier|&
name|CastTy
parameter_list|,
name|SourceLocation
name|LParenLoc
parameter_list|,
name|SourceLocation
modifier|&
name|RParenLoc
parameter_list|)
function_decl|;
name|OwningExprResult
name|ParseCompoundLiteralExpression
parameter_list|(
name|TypeTy
modifier|*
name|Ty
parameter_list|,
name|SourceLocation
name|LParenLoc
parameter_list|,
name|SourceLocation
name|RParenLoc
parameter_list|)
function_decl|;
name|OwningExprResult
name|ParseStringLiteralExpression
parameter_list|()
function_decl|;
comment|//===--------------------------------------------------------------------===//
comment|// C++ Expressions
name|OwningExprResult
name|ParseCXXIdExpression
parameter_list|(
name|bool
name|isAddressOfOperand
init|=
name|false
parameter_list|)
function_decl|;
name|bool
name|ParseOptionalCXXScopeSpecifier
parameter_list|(
name|CXXScopeSpec
modifier|&
name|SS
parameter_list|,
name|TypeTy
modifier|*
name|ObjectType
parameter_list|,
name|bool
name|EnteringContext
parameter_list|)
function_decl|;
comment|//===--------------------------------------------------------------------===//
comment|// C++ 5.2p1: C++ Casts
name|OwningExprResult
name|ParseCXXCasts
parameter_list|()
function_decl|;
comment|//===--------------------------------------------------------------------===//
comment|// C++ 5.2p1: C++ Type Identification
name|OwningExprResult
name|ParseCXXTypeid
parameter_list|()
function_decl|;
comment|//===--------------------------------------------------------------------===//
comment|// C++ 9.3.2: C++ 'this' pointer
name|OwningExprResult
name|ParseCXXThis
parameter_list|()
function_decl|;
comment|//===--------------------------------------------------------------------===//
comment|// C++ 15: C++ Throw Expression
name|OwningExprResult
name|ParseThrowExpression
parameter_list|()
function_decl|;
comment|// EndLoc is filled with the location of the last token of the specification.
name|bool
name|ParseExceptionSpecification
argument_list|(
name|SourceLocation
operator|&
name|EndLoc
argument_list|,
name|llvm
operator|::
name|SmallVector
operator|<
name|TypeTy
operator|*
argument_list|,
literal|2
operator|>
operator|&
name|Exceptions
argument_list|,
name|llvm
operator|::
name|SmallVector
operator|<
name|SourceRange
argument_list|,
literal|2
operator|>
operator|&
name|Ranges
argument_list|,
name|bool
operator|&
name|hasAnyExceptionSpec
argument_list|)
decl_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|// C++ 2.13.5: C++ Boolean Literals
name|OwningExprResult
name|ParseCXXBoolLiteral
parameter_list|()
function_decl|;
comment|//===--------------------------------------------------------------------===//
comment|// C++ 5.2.3: Explicit type conversion (functional notation)
name|OwningExprResult
name|ParseCXXTypeConstructExpression
parameter_list|(
specifier|const
name|DeclSpec
modifier|&
name|DS
parameter_list|)
function_decl|;
comment|/// ParseCXXSimpleTypeSpecifier - [C++ 7.1.5.2] Simple type specifiers.
comment|/// This should only be called when the current token is known to be part of
comment|/// simple-type-specifier.
name|void
name|ParseCXXSimpleTypeSpecifier
parameter_list|(
name|DeclSpec
modifier|&
name|DS
parameter_list|)
function_decl|;
name|bool
name|ParseCXXTypeSpecifierSeq
parameter_list|(
name|DeclSpec
modifier|&
name|DS
parameter_list|)
function_decl|;
comment|//===--------------------------------------------------------------------===//
comment|// C++ 5.3.4 and 5.3.5: C++ new and delete
name|bool
name|ParseExpressionListOrTypeId
parameter_list|(
name|ExprListTy
modifier|&
name|Exprs
parameter_list|,
name|Declarator
modifier|&
name|D
parameter_list|)
function_decl|;
name|void
name|ParseDirectNewDeclarator
parameter_list|(
name|Declarator
modifier|&
name|D
parameter_list|)
function_decl|;
name|OwningExprResult
name|ParseCXXNewExpression
parameter_list|(
name|bool
name|UseGlobal
parameter_list|,
name|SourceLocation
name|Start
parameter_list|)
function_decl|;
name|OwningExprResult
name|ParseCXXDeleteExpression
parameter_list|(
name|bool
name|UseGlobal
parameter_list|,
name|SourceLocation
name|Start
parameter_list|)
function_decl|;
comment|//===--------------------------------------------------------------------===//
comment|// C++ if/switch/while condition expression.
name|bool
name|ParseCXXCondition
parameter_list|(
name|OwningExprResult
modifier|&
name|ExprResult
parameter_list|,
name|DeclPtrTy
modifier|&
name|DeclResult
parameter_list|)
function_decl|;
comment|//===--------------------------------------------------------------------===//
comment|// C++ types
comment|//===--------------------------------------------------------------------===//
comment|// C99 6.7.8: Initialization.
comment|/// ParseInitializer
comment|///       initializer: [C99 6.7.8]
comment|///         assignment-expression
comment|///         '{' ...
name|OwningExprResult
name|ParseInitializer
parameter_list|()
block|{
if|if
condition|(
name|Tok
operator|.
name|isNot
argument_list|(
name|tok
operator|::
name|l_brace
argument_list|)
condition|)
return|return
name|ParseAssignmentExpression
argument_list|()
return|;
return|return
name|ParseBraceInitializer
argument_list|()
return|;
block|}
name|OwningExprResult
name|ParseBraceInitializer
parameter_list|()
function_decl|;
name|OwningExprResult
name|ParseInitializerWithPotentialDesignator
parameter_list|()
function_decl|;
comment|//===--------------------------------------------------------------------===//
comment|// clang Expressions
name|OwningExprResult
name|ParseBlockLiteralExpression
parameter_list|()
function_decl|;
comment|// ^{...}
comment|//===--------------------------------------------------------------------===//
comment|// Objective-C Expressions
name|bool
name|isTokObjCMessageIdentifierReceiver
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|Tok
operator|.
name|is
argument_list|(
name|tok
operator|::
name|identifier
argument_list|)
condition|)
return|return
name|false
return|;
name|IdentifierInfo
operator|*
name|II
operator|=
name|Tok
operator|.
name|getIdentifierInfo
argument_list|()
expr_stmt|;
if|if
condition|(
name|Actions
operator|.
name|getTypeName
argument_list|(
operator|*
name|II
argument_list|,
name|Tok
operator|.
name|getLocation
argument_list|()
argument_list|,
name|CurScope
argument_list|)
condition|)
return|return
name|true
return|;
return|return
name|II
operator|==
name|Ident_super
return|;
block|}
name|OwningExprResult
name|ParseObjCAtExpression
parameter_list|(
name|SourceLocation
name|AtLocation
parameter_list|)
function_decl|;
name|OwningExprResult
name|ParseObjCStringLiteral
parameter_list|(
name|SourceLocation
name|AtLoc
parameter_list|)
function_decl|;
name|OwningExprResult
name|ParseObjCEncodeExpression
parameter_list|(
name|SourceLocation
name|AtLoc
parameter_list|)
function_decl|;
name|OwningExprResult
name|ParseObjCSelectorExpression
parameter_list|(
name|SourceLocation
name|AtLoc
parameter_list|)
function_decl|;
name|OwningExprResult
name|ParseObjCProtocolExpression
parameter_list|(
name|SourceLocation
name|AtLoc
parameter_list|)
function_decl|;
name|OwningExprResult
name|ParseObjCMessageExpression
parameter_list|()
function_decl|;
name|OwningExprResult
name|ParseObjCMessageExpressionBody
parameter_list|(
name|SourceLocation
name|LBracloc
parameter_list|,
name|SourceLocation
name|NameLoc
parameter_list|,
name|IdentifierInfo
modifier|*
name|ReceiverName
parameter_list|,
name|ExprArg
name|ReceiverExpr
parameter_list|)
function_decl|;
name|OwningExprResult
name|ParseAssignmentExprWithObjCMessageExprStart
parameter_list|(
name|SourceLocation
name|LBracloc
parameter_list|,
name|SourceLocation
name|NameLoc
parameter_list|,
name|IdentifierInfo
modifier|*
name|ReceiverName
parameter_list|,
name|ExprArg
name|ReceiverExpr
parameter_list|)
function_decl|;
comment|//===--------------------------------------------------------------------===//
comment|// C99 6.8: Statements and Blocks.
name|OwningStmtResult
name|ParseStatement
parameter_list|()
block|{
return|return
name|ParseStatementOrDeclaration
argument_list|(
name|true
argument_list|)
return|;
block|}
name|OwningStmtResult
name|ParseStatementOrDeclaration
parameter_list|(
name|bool
name|OnlyStatement
init|=
name|false
parameter_list|)
function_decl|;
name|OwningStmtResult
name|ParseLabeledStatement
parameter_list|(
name|AttributeList
modifier|*
name|Attr
parameter_list|)
function_decl|;
name|OwningStmtResult
name|ParseCaseStatement
parameter_list|(
name|AttributeList
modifier|*
name|Attr
parameter_list|)
function_decl|;
name|OwningStmtResult
name|ParseDefaultStatement
parameter_list|(
name|AttributeList
modifier|*
name|Attr
parameter_list|)
function_decl|;
name|OwningStmtResult
name|ParseCompoundStatement
parameter_list|(
name|AttributeList
modifier|*
name|Attr
parameter_list|,
name|bool
name|isStmtExpr
init|=
name|false
parameter_list|)
function_decl|;
name|OwningStmtResult
name|ParseCompoundStatementBody
parameter_list|(
name|bool
name|isStmtExpr
init|=
name|false
parameter_list|)
function_decl|;
name|bool
name|ParseParenExprOrCondition
parameter_list|(
name|OwningExprResult
modifier|&
name|ExprResult
parameter_list|,
name|DeclPtrTy
modifier|&
name|DeclResult
parameter_list|)
function_decl|;
name|OwningStmtResult
name|ParseIfStatement
parameter_list|(
name|AttributeList
modifier|*
name|Attr
parameter_list|)
function_decl|;
name|OwningStmtResult
name|ParseSwitchStatement
parameter_list|(
name|AttributeList
modifier|*
name|Attr
parameter_list|)
function_decl|;
name|OwningStmtResult
name|ParseWhileStatement
parameter_list|(
name|AttributeList
modifier|*
name|Attr
parameter_list|)
function_decl|;
name|OwningStmtResult
name|ParseDoStatement
parameter_list|(
name|AttributeList
modifier|*
name|Attr
parameter_list|)
function_decl|;
name|OwningStmtResult
name|ParseForStatement
parameter_list|(
name|AttributeList
modifier|*
name|Attr
parameter_list|)
function_decl|;
name|OwningStmtResult
name|ParseGotoStatement
parameter_list|(
name|AttributeList
modifier|*
name|Attr
parameter_list|)
function_decl|;
name|OwningStmtResult
name|ParseContinueStatement
parameter_list|(
name|AttributeList
modifier|*
name|Attr
parameter_list|)
function_decl|;
name|OwningStmtResult
name|ParseBreakStatement
parameter_list|(
name|AttributeList
modifier|*
name|Attr
parameter_list|)
function_decl|;
name|OwningStmtResult
name|ParseReturnStatement
parameter_list|(
name|AttributeList
modifier|*
name|Attr
parameter_list|)
function_decl|;
name|OwningStmtResult
name|ParseAsmStatement
parameter_list|(
name|bool
modifier|&
name|msAsm
parameter_list|)
function_decl|;
name|OwningStmtResult
name|FuzzyParseMicrosoftAsmStatement
parameter_list|()
function_decl|;
name|bool
name|ParseAsmOperandsOpt
argument_list|(
name|llvm
operator|::
name|SmallVectorImpl
operator|<
name|IdentifierInfo
operator|*
operator|>
operator|&
name|Names
argument_list|,
name|llvm
operator|::
name|SmallVectorImpl
operator|<
name|ExprTy
operator|*
operator|>
operator|&
name|Constraints
argument_list|,
name|llvm
operator|::
name|SmallVectorImpl
operator|<
name|ExprTy
operator|*
operator|>
operator|&
name|Exprs
argument_list|)
decl_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|// C++ 6: Statements and Blocks
name|OwningStmtResult
name|ParseCXXTryBlock
parameter_list|(
name|AttributeList
modifier|*
name|Attr
parameter_list|)
function_decl|;
name|OwningStmtResult
name|ParseCXXTryBlockCommon
parameter_list|(
name|SourceLocation
name|TryLoc
parameter_list|)
function_decl|;
name|OwningStmtResult
name|ParseCXXCatchBlock
parameter_list|()
function_decl|;
comment|//===--------------------------------------------------------------------===//
comment|// Objective-C Statements
name|OwningStmtResult
name|ParseObjCAtStatement
parameter_list|(
name|SourceLocation
name|atLoc
parameter_list|)
function_decl|;
name|OwningStmtResult
name|ParseObjCTryStmt
parameter_list|(
name|SourceLocation
name|atLoc
parameter_list|)
function_decl|;
name|OwningStmtResult
name|ParseObjCThrowStmt
parameter_list|(
name|SourceLocation
name|atLoc
parameter_list|)
function_decl|;
name|OwningStmtResult
name|ParseObjCSynchronizedStmt
parameter_list|(
name|SourceLocation
name|atLoc
parameter_list|)
function_decl|;
comment|//===--------------------------------------------------------------------===//
comment|// C99 6.7: Declarations.
comment|/// A context for parsing declaration specifiers.  TODO: flesh this
comment|/// out, there are other significant restrictions on specifiers than
comment|/// would be best implemented in the parser.
enum|enum
name|DeclSpecContext
block|{
name|DSC_normal
block|,
comment|// normal context
name|DSC_class
block|,
comment|// class context, enables 'friend'
name|DSC_top_level
comment|// top-level/namespace declaration context
block|}
enum|;
name|DeclGroupPtrTy
name|ParseDeclaration
parameter_list|(
name|unsigned
name|Context
parameter_list|,
name|SourceLocation
modifier|&
name|DeclEnd
parameter_list|,
name|CXX0XAttributeList
name|Attr
parameter_list|)
function_decl|;
name|DeclGroupPtrTy
name|ParseSimpleDeclaration
parameter_list|(
name|unsigned
name|Context
parameter_list|,
name|SourceLocation
modifier|&
name|DeclEnd
parameter_list|,
name|AttributeList
modifier|*
name|Attr
parameter_list|)
function_decl|;
name|DeclGroupPtrTy
name|ParseDeclGroup
parameter_list|(
name|ParsingDeclSpec
modifier|&
name|DS
parameter_list|,
name|unsigned
name|Context
parameter_list|,
name|bool
name|AllowFunctionDefinitions
parameter_list|,
name|SourceLocation
modifier|*
name|DeclEnd
init|=
literal|0
parameter_list|)
function_decl|;
name|DeclPtrTy
name|ParseDeclarationAfterDeclarator
parameter_list|(
name|Declarator
modifier|&
name|D
parameter_list|,
specifier|const
name|ParsedTemplateInfo
modifier|&
name|TemplateInfo
init|=
name|ParsedTemplateInfo
argument_list|()
parameter_list|)
function_decl|;
name|DeclPtrTy
name|ParseFunctionStatementBody
parameter_list|(
name|DeclPtrTy
name|Decl
parameter_list|)
function_decl|;
name|DeclPtrTy
name|ParseFunctionTryBlock
parameter_list|(
name|DeclPtrTy
name|Decl
parameter_list|)
function_decl|;
name|bool
name|ParseImplicitInt
parameter_list|(
name|DeclSpec
modifier|&
name|DS
parameter_list|,
name|CXXScopeSpec
modifier|*
name|SS
parameter_list|,
specifier|const
name|ParsedTemplateInfo
modifier|&
name|TemplateInfo
parameter_list|,
name|AccessSpecifier
name|AS
parameter_list|)
function_decl|;
name|DeclSpecContext
name|getDeclSpecContextFromDeclaratorContext
parameter_list|(
name|unsigned
name|Context
parameter_list|)
function_decl|;
name|void
name|ParseDeclarationSpecifiers
parameter_list|(
name|DeclSpec
modifier|&
name|DS
parameter_list|,
specifier|const
name|ParsedTemplateInfo
modifier|&
name|TemplateInfo
init|=
name|ParsedTemplateInfo
argument_list|()
parameter_list|,
name|AccessSpecifier
name|AS
init|=
name|AS_none
parameter_list|,
name|DeclSpecContext
name|DSC
init|=
name|DSC_normal
parameter_list|)
function_decl|;
name|bool
name|ParseOptionalTypeSpecifier
parameter_list|(
name|DeclSpec
modifier|&
name|DS
parameter_list|,
name|bool
modifier|&
name|isInvalid
parameter_list|,
specifier|const
name|char
modifier|*
modifier|&
name|PrevSpec
parameter_list|,
name|unsigned
modifier|&
name|DiagID
parameter_list|,
specifier|const
name|ParsedTemplateInfo
modifier|&
name|TemplateInfo
init|=
name|ParsedTemplateInfo
argument_list|()
parameter_list|,
name|bool
name|SuppressDeclarations
init|=
name|false
parameter_list|)
function_decl|;
name|void
name|ParseSpecifierQualifierList
parameter_list|(
name|DeclSpec
modifier|&
name|DS
parameter_list|)
function_decl|;
name|void
name|ParseObjCTypeQualifierList
parameter_list|(
name|ObjCDeclSpec
modifier|&
name|DS
parameter_list|)
function_decl|;
name|void
name|ParseEnumSpecifier
parameter_list|(
name|SourceLocation
name|TagLoc
parameter_list|,
name|DeclSpec
modifier|&
name|DS
parameter_list|,
name|AccessSpecifier
name|AS
init|=
name|AS_none
parameter_list|)
function_decl|;
name|void
name|ParseEnumBody
parameter_list|(
name|SourceLocation
name|StartLoc
parameter_list|,
name|DeclPtrTy
name|TagDecl
parameter_list|)
function_decl|;
name|void
name|ParseStructUnionBody
parameter_list|(
name|SourceLocation
name|StartLoc
parameter_list|,
name|unsigned
name|TagType
parameter_list|,
name|DeclPtrTy
name|TagDecl
parameter_list|)
function_decl|;
struct|struct
name|FieldCallback
block|{
name|virtual
name|DeclPtrTy
name|invoke
parameter_list|(
name|FieldDeclarator
modifier|&
name|Field
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
operator|~
name|FieldCallback
argument_list|()
block|{}
name|private
operator|:
name|virtual
name|void
name|_anchor
argument_list|()
expr_stmt|;
block|}
struct|;
struct_decl|struct
name|ObjCPropertyCallback
struct_decl|;
name|void
name|ParseStructDeclaration
parameter_list|(
name|DeclSpec
modifier|&
name|DS
parameter_list|,
name|FieldCallback
modifier|&
name|Callback
parameter_list|)
function_decl|;
name|bool
name|isDeclarationSpecifier
parameter_list|()
function_decl|;
name|bool
name|isTypeSpecifierQualifier
parameter_list|()
function_decl|;
name|bool
name|isTypeQualifier
argument_list|()
specifier|const
expr_stmt|;
comment|/// isDeclarationStatement - Disambiguates between a declaration or an
comment|/// expression statement, when parsing function bodies.
comment|/// Returns true for declaration, false for expression.
name|bool
name|isDeclarationStatement
parameter_list|()
block|{
if|if
condition|(
name|getLang
argument_list|()
operator|.
name|CPlusPlus
condition|)
return|return
name|isCXXDeclarationStatement
argument_list|()
return|;
return|return
name|isDeclarationSpecifier
argument_list|()
return|;
block|}
comment|/// isSimpleDeclaration - Disambiguates between a declaration or an
comment|/// expression, mainly used for the C 'clause-1' or the C++
comment|// 'for-init-statement' part of a 'for' statement.
comment|/// Returns true for declaration, false for expression.
name|bool
name|isSimpleDeclaration
parameter_list|()
block|{
if|if
condition|(
name|getLang
argument_list|()
operator|.
name|CPlusPlus
condition|)
return|return
name|isCXXSimpleDeclaration
argument_list|()
return|;
return|return
name|isDeclarationSpecifier
argument_list|()
return|;
block|}
comment|/// \brief Starting with a scope specifier, identifier, or
comment|/// template-id that refers to the current class, determine whether
comment|/// this is a constructor declarator.
name|bool
name|isConstructorDeclarator
parameter_list|()
function_decl|;
comment|/// \brief Specifies the context in which type-id/expression
comment|/// disambiguation will occur.
enum|enum
name|TentativeCXXTypeIdContext
block|{
name|TypeIdInParens
block|,
name|TypeIdAsTemplateArgument
block|}
enum|;
comment|/// isTypeIdInParens - Assumes that a '(' was parsed and now we want to know
comment|/// whether the parens contain an expression or a type-id.
comment|/// Returns true for a type-id and false for an expression.
name|bool
name|isTypeIdInParens
parameter_list|(
name|bool
modifier|&
name|isAmbiguous
parameter_list|)
block|{
if|if
condition|(
name|getLang
argument_list|()
operator|.
name|CPlusPlus
condition|)
return|return
name|isCXXTypeId
argument_list|(
name|TypeIdInParens
argument_list|,
name|isAmbiguous
argument_list|)
return|;
name|isAmbiguous
operator|=
name|false
expr_stmt|;
return|return
name|isTypeSpecifierQualifier
argument_list|()
return|;
block|}
name|bool
name|isTypeIdInParens
parameter_list|()
block|{
name|bool
name|isAmbiguous
decl_stmt|;
return|return
name|isTypeIdInParens
argument_list|(
name|isAmbiguous
argument_list|)
return|;
block|}
comment|/// isCXXDeclarationStatement - C++-specialized function that disambiguates
comment|/// between a declaration or an expression statement, when parsing function
comment|/// bodies. Returns true for declaration, false for expression.
name|bool
name|isCXXDeclarationStatement
parameter_list|()
function_decl|;
comment|/// isCXXSimpleDeclaration - C++-specialized function that disambiguates
comment|/// between a simple-declaration or an expression-statement.
comment|/// If during the disambiguation process a parsing error is encountered,
comment|/// the function returns true to let the declaration parsing code handle it.
comment|/// Returns false if the statement is disambiguated as expression.
name|bool
name|isCXXSimpleDeclaration
parameter_list|()
function_decl|;
comment|/// isCXXFunctionDeclarator - Disambiguates between a function declarator or
comment|/// a constructor-style initializer, when parsing declaration statements.
comment|/// Returns true for function declarator and false for constructor-style
comment|/// initializer. If 'warnIfAmbiguous' is true a warning will be emitted to
comment|/// indicate that the parens were disambiguated as function declarator.
comment|/// If during the disambiguation process a parsing error is encountered,
comment|/// the function returns true to let the declaration parsing code handle it.
name|bool
name|isCXXFunctionDeclarator
parameter_list|(
name|bool
name|warnIfAmbiguous
parameter_list|)
function_decl|;
comment|/// isCXXConditionDeclaration - Disambiguates between a declaration or an
comment|/// expression for a condition of a if/switch/while/for statement.
comment|/// If during the disambiguation process a parsing error is encountered,
comment|/// the function returns true to let the declaration parsing code handle it.
name|bool
name|isCXXConditionDeclaration
parameter_list|()
function_decl|;
name|bool
name|isCXXTypeId
parameter_list|(
name|TentativeCXXTypeIdContext
name|Context
parameter_list|,
name|bool
modifier|&
name|isAmbiguous
parameter_list|)
function_decl|;
name|bool
name|isCXXTypeId
parameter_list|(
name|TentativeCXXTypeIdContext
name|Context
parameter_list|)
block|{
name|bool
name|isAmbiguous
decl_stmt|;
return|return
name|isCXXTypeId
argument_list|(
name|Context
argument_list|,
name|isAmbiguous
argument_list|)
return|;
block|}
comment|/// TPResult - Used as the result value for functions whose purpose is to
comment|/// disambiguate C++ constructs by "tentatively parsing" them.
comment|/// This is a class instead of a simple enum because the implicit enum-to-bool
comment|/// conversions may cause subtle bugs.
name|class
name|TPResult
block|{
enum|enum
name|Result
block|{
name|TPR_true
block|,
name|TPR_false
block|,
name|TPR_ambiguous
block|,
name|TPR_error
block|}
enum|;
name|Result
name|Res
decl_stmt|;
name|TPResult
argument_list|(
argument|Result result
argument_list|)
block|:
name|Res
argument_list|(
argument|result
argument_list|)
block|{}
name|public
label|:
specifier|static
name|TPResult
name|True
parameter_list|()
block|{
return|return
name|TPR_true
return|;
block|}
specifier|static
name|TPResult
name|False
parameter_list|()
block|{
return|return
name|TPR_false
return|;
block|}
specifier|static
name|TPResult
name|Ambiguous
parameter_list|()
block|{
return|return
name|TPR_ambiguous
return|;
block|}
specifier|static
name|TPResult
name|Error
parameter_list|()
block|{
return|return
name|TPR_error
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|TPResult
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|Res
operator|==
name|RHS
operator|.
name|Res
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|TPResult
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|Res
operator|!=
name|RHS
operator|.
name|Res
return|;
block|}
block|}
empty_stmt|;
comment|/// isCXXDeclarationSpecifier - Returns TPResult::True() if it is a
comment|/// declaration specifier, TPResult::False() if it is not,
comment|/// TPResult::Ambiguous() if it could be either a decl-specifier or a
comment|/// function-style cast, and TPResult::Error() if a parsing error was
comment|/// encountered.
comment|/// Doesn't consume tokens.
name|TPResult
name|isCXXDeclarationSpecifier
parameter_list|()
function_decl|;
comment|// "Tentative parsing" functions, used for disambiguation. If a parsing error
comment|// is encountered they will return TPResult::Error().
comment|// Returning TPResult::True()/False() indicates that the ambiguity was
comment|// resolved and tentative parsing may stop. TPResult::Ambiguous() indicates
comment|// that more tentative parsing is necessary for disambiguation.
comment|// They all consume tokens, so backtracking should be used after calling them.
name|TPResult
name|TryParseDeclarationSpecifier
parameter_list|()
function_decl|;
name|TPResult
name|TryParseSimpleDeclaration
parameter_list|()
function_decl|;
name|TPResult
name|TryParseTypeofSpecifier
parameter_list|()
function_decl|;
name|TPResult
name|TryParseInitDeclaratorList
parameter_list|()
function_decl|;
name|TPResult
name|TryParseDeclarator
parameter_list|(
name|bool
name|mayBeAbstract
parameter_list|,
name|bool
name|mayHaveIdentifier
init|=
name|true
parameter_list|)
function_decl|;
name|TPResult
name|TryParseParameterDeclarationClause
parameter_list|()
function_decl|;
name|TPResult
name|TryParseFunctionDeclarator
parameter_list|()
function_decl|;
name|TPResult
name|TryParseBracketDeclarator
parameter_list|()
function_decl|;
name|TypeResult
name|ParseTypeName
parameter_list|(
name|SourceRange
modifier|*
name|Range
init|=
literal|0
parameter_list|)
function_decl|;
name|void
name|ParseBlockId
parameter_list|()
function_decl|;
comment|// EndLoc, if non-NULL, is filled with the location of the last token of
comment|// the attribute list.
name|CXX0XAttributeList
name|ParseCXX0XAttributes
parameter_list|(
name|SourceLocation
modifier|*
name|EndLoc
init|=
literal|0
parameter_list|)
function_decl|;
name|AttributeList
modifier|*
name|ParseGNUAttributes
parameter_list|(
name|SourceLocation
modifier|*
name|EndLoc
init|=
literal|0
parameter_list|)
function_decl|;
name|AttributeList
modifier|*
name|ParseMicrosoftDeclSpec
parameter_list|(
name|AttributeList
modifier|*
name|CurrAttr
init|=
literal|0
parameter_list|)
function_decl|;
name|AttributeList
modifier|*
name|ParseMicrosoftTypeAttributes
parameter_list|(
name|AttributeList
modifier|*
name|CurrAttr
init|=
literal|0
parameter_list|)
function_decl|;
name|void
name|ParseTypeofSpecifier
parameter_list|(
name|DeclSpec
modifier|&
name|DS
parameter_list|)
function_decl|;
name|void
name|ParseDecltypeSpecifier
parameter_list|(
name|DeclSpec
modifier|&
name|DS
parameter_list|)
function_decl|;
name|OwningExprResult
name|ParseCXX0XAlignArgument
parameter_list|(
name|SourceLocation
name|Start
parameter_list|)
function_decl|;
comment|/// DeclaratorScopeObj - RAII object used in Parser::ParseDirectDeclarator to
comment|/// enter a new C++ declarator scope and exit it when the function is
comment|/// finished.
name|class
name|DeclaratorScopeObj
block|{
name|Parser
modifier|&
name|P
decl_stmt|;
name|CXXScopeSpec
modifier|&
name|SS
decl_stmt|;
name|bool
name|EnteredScope
decl_stmt|;
name|bool
name|CreatedScope
decl_stmt|;
name|public
label|:
name|DeclaratorScopeObj
argument_list|(
name|Parser
operator|&
name|p
argument_list|,
name|CXXScopeSpec
operator|&
name|ss
argument_list|)
operator|:
name|P
argument_list|(
name|p
argument_list|)
operator|,
name|SS
argument_list|(
name|ss
argument_list|)
operator|,
name|EnteredScope
argument_list|(
name|false
argument_list|)
operator|,
name|CreatedScope
argument_list|(
argument|false
argument_list|)
block|{}
name|void
name|EnterDeclaratorScope
argument_list|()
block|{
name|assert
argument_list|(
operator|!
name|EnteredScope
operator|&&
literal|"Already entered the scope!"
argument_list|)
block|;
name|assert
argument_list|(
name|SS
operator|.
name|isSet
argument_list|()
operator|&&
literal|"C++ scope was not set!"
argument_list|)
block|;
name|CreatedScope
operator|=
name|true
block|;
name|P
operator|.
name|EnterScope
argument_list|(
literal|0
argument_list|)
block|;
comment|// Not a decl scope.
if|if
condition|(
operator|!
name|P
operator|.
name|Actions
operator|.
name|ActOnCXXEnterDeclaratorScope
argument_list|(
name|P
operator|.
name|CurScope
argument_list|,
name|SS
argument_list|)
condition|)
name|EnteredScope
operator|=
name|true
expr_stmt|;
block|}
operator|~
name|DeclaratorScopeObj
argument_list|()
block|{
if|if
condition|(
name|EnteredScope
condition|)
block|{
name|assert
argument_list|(
name|SS
operator|.
name|isSet
argument_list|()
operator|&&
literal|"C++ scope was cleared ?"
argument_list|)
expr_stmt|;
name|P
operator|.
name|Actions
operator|.
name|ActOnCXXExitDeclaratorScope
argument_list|(
name|P
operator|.
name|CurScope
argument_list|,
name|SS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|CreatedScope
condition|)
name|P
operator|.
name|ExitScope
argument_list|()
expr_stmt|;
block|}
block|}
empty_stmt|;
comment|/// ParseDeclarator - Parse and verify a newly-initialized declarator.
name|void
name|ParseDeclarator
parameter_list|(
name|Declarator
modifier|&
name|D
parameter_list|)
function_decl|;
comment|/// A function that parses a variant of direct-declarator.
typedef|typedef
name|void
argument_list|(
name|Parser
operator|::
operator|*
name|DirectDeclParseFunction
argument_list|)
argument_list|(
name|Declarator
operator|&
argument_list|)
expr_stmt|;
name|void
name|ParseDeclaratorInternal
parameter_list|(
name|Declarator
modifier|&
name|D
parameter_list|,
name|DirectDeclParseFunction
name|DirectDeclParser
parameter_list|)
function_decl|;
name|void
name|ParseTypeQualifierListOpt
parameter_list|(
name|DeclSpec
modifier|&
name|DS
parameter_list|,
name|bool
name|GNUAttributesAllowed
init|=
name|true
parameter_list|,
name|bool
name|CXX0XAttributesAllowed
init|=
name|true
parameter_list|)
function_decl|;
name|void
name|ParseDirectDeclarator
parameter_list|(
name|Declarator
modifier|&
name|D
parameter_list|)
function_decl|;
name|void
name|ParseParenDeclarator
parameter_list|(
name|Declarator
modifier|&
name|D
parameter_list|)
function_decl|;
name|void
name|ParseFunctionDeclarator
parameter_list|(
name|SourceLocation
name|LParenLoc
parameter_list|,
name|Declarator
modifier|&
name|D
parameter_list|,
name|AttributeList
modifier|*
name|AttrList
init|=
literal|0
parameter_list|,
name|bool
name|RequiresArg
init|=
name|false
parameter_list|)
function_decl|;
name|void
name|ParseFunctionDeclaratorIdentifierList
parameter_list|(
name|SourceLocation
name|LParenLoc
parameter_list|,
name|Declarator
modifier|&
name|D
parameter_list|)
function_decl|;
name|void
name|ParseBracketDeclarator
parameter_list|(
name|Declarator
modifier|&
name|D
parameter_list|)
function_decl|;
comment|//===--------------------------------------------------------------------===//
comment|// C++ 7: Declarations [dcl.dcl]
name|bool
name|isCXX0XAttributeSpecifier
argument_list|(
name|bool
name|FullLookahead
operator|=
name|false
argument_list|,
name|tok
operator|::
name|TokenKind
operator|*
name|After
operator|=
literal|0
argument_list|)
decl_stmt|;
name|DeclPtrTy
name|ParseNamespace
parameter_list|(
name|unsigned
name|Context
parameter_list|,
name|SourceLocation
modifier|&
name|DeclEnd
parameter_list|)
function_decl|;
name|DeclPtrTy
name|ParseLinkage
parameter_list|(
name|ParsingDeclSpec
modifier|&
name|DS
parameter_list|,
name|unsigned
name|Context
parameter_list|)
function_decl|;
name|DeclPtrTy
name|ParseUsingDirectiveOrDeclaration
parameter_list|(
name|unsigned
name|Context
parameter_list|,
name|SourceLocation
modifier|&
name|DeclEnd
parameter_list|,
name|CXX0XAttributeList
name|Attrs
parameter_list|)
function_decl|;
name|DeclPtrTy
name|ParseUsingDirective
parameter_list|(
name|unsigned
name|Context
parameter_list|,
name|SourceLocation
name|UsingLoc
parameter_list|,
name|SourceLocation
modifier|&
name|DeclEnd
parameter_list|,
name|AttributeList
modifier|*
name|Attr
parameter_list|)
function_decl|;
name|DeclPtrTy
name|ParseUsingDeclaration
parameter_list|(
name|unsigned
name|Context
parameter_list|,
name|SourceLocation
name|UsingLoc
parameter_list|,
name|SourceLocation
modifier|&
name|DeclEnd
parameter_list|,
name|AccessSpecifier
name|AS
init|=
name|AS_none
parameter_list|)
function_decl|;
name|DeclPtrTy
name|ParseStaticAssertDeclaration
parameter_list|(
name|SourceLocation
modifier|&
name|DeclEnd
parameter_list|)
function_decl|;
name|DeclPtrTy
name|ParseNamespaceAlias
parameter_list|(
name|SourceLocation
name|NamespaceLoc
parameter_list|,
name|SourceLocation
name|AliasLoc
parameter_list|,
name|IdentifierInfo
modifier|*
name|Alias
parameter_list|,
name|SourceLocation
modifier|&
name|DeclEnd
parameter_list|)
function_decl|;
comment|//===--------------------------------------------------------------------===//
comment|// C++ 9: classes [class] and C structs/unions.
name|TypeResult
name|ParseClassName
parameter_list|(
name|SourceLocation
modifier|&
name|EndLocation
parameter_list|,
specifier|const
name|CXXScopeSpec
modifier|*
name|SS
init|=
literal|0
parameter_list|,
name|bool
name|DestrExpected
init|=
name|false
parameter_list|)
function_decl|;
name|void
name|ParseClassSpecifier
argument_list|(
name|tok
operator|::
name|TokenKind
name|TagTokKind
argument_list|,
name|SourceLocation
name|TagLoc
argument_list|,
name|DeclSpec
operator|&
name|DS
argument_list|,
specifier|const
name|ParsedTemplateInfo
operator|&
name|TemplateInfo
operator|=
name|ParsedTemplateInfo
argument_list|()
argument_list|,
name|AccessSpecifier
name|AS
operator|=
name|AS_none
argument_list|,
name|bool
name|SuppressDeclarations
operator|=
name|false
argument_list|)
decl_stmt|;
name|void
name|ParseCXXMemberSpecification
parameter_list|(
name|SourceLocation
name|StartLoc
parameter_list|,
name|unsigned
name|TagType
parameter_list|,
name|DeclPtrTy
name|TagDecl
parameter_list|)
function_decl|;
name|void
name|ParseCXXClassMemberDeclaration
parameter_list|(
name|AccessSpecifier
name|AS
parameter_list|,
specifier|const
name|ParsedTemplateInfo
modifier|&
name|TemplateInfo
init|=
name|ParsedTemplateInfo
argument_list|()
parameter_list|)
function_decl|;
name|void
name|ParseConstructorInitializer
parameter_list|(
name|DeclPtrTy
name|ConstructorDecl
parameter_list|)
function_decl|;
name|MemInitResult
name|ParseMemInitializer
parameter_list|(
name|DeclPtrTy
name|ConstructorDecl
parameter_list|)
function_decl|;
name|void
name|HandleMemberFunctionDefaultArgs
parameter_list|(
name|Declarator
modifier|&
name|DeclaratorInfo
parameter_list|,
name|DeclPtrTy
name|ThisDecl
parameter_list|)
function_decl|;
comment|//===--------------------------------------------------------------------===//
comment|// C++ 10: Derived classes [class.derived]
name|void
name|ParseBaseClause
parameter_list|(
name|DeclPtrTy
name|ClassDecl
parameter_list|)
function_decl|;
name|BaseResult
name|ParseBaseSpecifier
parameter_list|(
name|DeclPtrTy
name|ClassDecl
parameter_list|)
function_decl|;
name|AccessSpecifier
name|getAccessSpecifierIfPresent
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|ParseUnqualifiedIdTemplateId
parameter_list|(
name|CXXScopeSpec
modifier|&
name|SS
parameter_list|,
name|IdentifierInfo
modifier|*
name|Name
parameter_list|,
name|SourceLocation
name|NameLoc
parameter_list|,
name|bool
name|EnteringContext
parameter_list|,
name|TypeTy
modifier|*
name|ObjectType
parameter_list|,
name|UnqualifiedId
modifier|&
name|Id
parameter_list|)
function_decl|;
name|bool
name|ParseUnqualifiedIdOperator
parameter_list|(
name|CXXScopeSpec
modifier|&
name|SS
parameter_list|,
name|bool
name|EnteringContext
parameter_list|,
name|TypeTy
modifier|*
name|ObjectType
parameter_list|,
name|UnqualifiedId
modifier|&
name|Result
parameter_list|)
function_decl|;
name|bool
name|ParseUnqualifiedId
parameter_list|(
name|CXXScopeSpec
modifier|&
name|SS
parameter_list|,
name|bool
name|EnteringContext
parameter_list|,
name|bool
name|AllowDestructorName
parameter_list|,
name|bool
name|AllowConstructorName
parameter_list|,
name|TypeTy
modifier|*
name|ObjectType
parameter_list|,
name|UnqualifiedId
modifier|&
name|Result
parameter_list|)
function_decl|;
comment|//===--------------------------------------------------------------------===//
comment|// C++ 14: Templates [temp]
typedef|typedef
name|llvm
operator|::
name|SmallVector
operator|<
name|DeclPtrTy
operator|,
literal|4
operator|>
name|TemplateParameterList
expr_stmt|;
comment|// C++ 14.1: Template Parameters [temp.param]
name|DeclPtrTy
name|ParseDeclarationStartingWithTemplate
parameter_list|(
name|unsigned
name|Context
parameter_list|,
name|SourceLocation
modifier|&
name|DeclEnd
parameter_list|,
name|AccessSpecifier
name|AS
init|=
name|AS_none
parameter_list|)
function_decl|;
name|DeclPtrTy
name|ParseTemplateDeclarationOrSpecialization
parameter_list|(
name|unsigned
name|Context
parameter_list|,
name|SourceLocation
modifier|&
name|DeclEnd
parameter_list|,
name|AccessSpecifier
name|AS
parameter_list|)
function_decl|;
name|DeclPtrTy
name|ParseSingleDeclarationAfterTemplate
parameter_list|(
name|unsigned
name|Context
parameter_list|,
specifier|const
name|ParsedTemplateInfo
modifier|&
name|TemplateInfo
parameter_list|,
name|SourceLocation
modifier|&
name|DeclEnd
parameter_list|,
name|AccessSpecifier
name|AS
init|=
name|AS_none
parameter_list|)
function_decl|;
name|bool
name|ParseTemplateParameters
parameter_list|(
name|unsigned
name|Depth
parameter_list|,
name|TemplateParameterList
modifier|&
name|TemplateParams
parameter_list|,
name|SourceLocation
modifier|&
name|LAngleLoc
parameter_list|,
name|SourceLocation
modifier|&
name|RAngleLoc
parameter_list|)
function_decl|;
name|bool
name|ParseTemplateParameterList
parameter_list|(
name|unsigned
name|Depth
parameter_list|,
name|TemplateParameterList
modifier|&
name|TemplateParams
parameter_list|)
function_decl|;
name|bool
name|isStartOfTemplateTypeParameter
parameter_list|()
function_decl|;
name|DeclPtrTy
name|ParseTemplateParameter
parameter_list|(
name|unsigned
name|Depth
parameter_list|,
name|unsigned
name|Position
parameter_list|)
function_decl|;
name|DeclPtrTy
name|ParseTypeParameter
parameter_list|(
name|unsigned
name|Depth
parameter_list|,
name|unsigned
name|Position
parameter_list|)
function_decl|;
name|DeclPtrTy
name|ParseTemplateTemplateParameter
parameter_list|(
name|unsigned
name|Depth
parameter_list|,
name|unsigned
name|Position
parameter_list|)
function_decl|;
name|DeclPtrTy
name|ParseNonTypeTemplateParameter
parameter_list|(
name|unsigned
name|Depth
parameter_list|,
name|unsigned
name|Position
parameter_list|)
function_decl|;
comment|// C++ 14.3: Template arguments [temp.arg]
typedef|typedef
name|llvm
operator|::
name|SmallVector
operator|<
name|ParsedTemplateArgument
operator|,
literal|16
operator|>
name|TemplateArgList
expr_stmt|;
name|bool
name|ParseTemplateIdAfterTemplateName
parameter_list|(
name|TemplateTy
name|Template
parameter_list|,
name|SourceLocation
name|TemplateNameLoc
parameter_list|,
specifier|const
name|CXXScopeSpec
modifier|*
name|SS
parameter_list|,
name|bool
name|ConsumeLastToken
parameter_list|,
name|SourceLocation
modifier|&
name|LAngleLoc
parameter_list|,
name|TemplateArgList
modifier|&
name|TemplateArgs
parameter_list|,
name|SourceLocation
modifier|&
name|RAngleLoc
parameter_list|)
function_decl|;
name|bool
name|AnnotateTemplateIdToken
parameter_list|(
name|TemplateTy
name|Template
parameter_list|,
name|TemplateNameKind
name|TNK
parameter_list|,
specifier|const
name|CXXScopeSpec
modifier|*
name|SS
parameter_list|,
name|UnqualifiedId
modifier|&
name|TemplateName
parameter_list|,
name|SourceLocation
name|TemplateKWLoc
init|=
name|SourceLocation
argument_list|()
parameter_list|,
name|bool
name|AllowTypeAnnotation
init|=
name|true
parameter_list|)
function_decl|;
name|void
name|AnnotateTemplateIdTokenAsType
parameter_list|(
specifier|const
name|CXXScopeSpec
modifier|*
name|SS
init|=
literal|0
parameter_list|)
function_decl|;
name|bool
name|ParseTemplateArgumentList
parameter_list|(
name|TemplateArgList
modifier|&
name|TemplateArgs
parameter_list|)
function_decl|;
name|ParsedTemplateArgument
name|ParseTemplateTemplateArgument
parameter_list|()
function_decl|;
name|ParsedTemplateArgument
name|ParseTemplateArgument
parameter_list|()
function_decl|;
name|DeclPtrTy
name|ParseExplicitInstantiation
parameter_list|(
name|SourceLocation
name|ExternLoc
parameter_list|,
name|SourceLocation
name|TemplateLoc
parameter_list|,
name|SourceLocation
modifier|&
name|DeclEnd
parameter_list|)
function_decl|;
comment|//===--------------------------------------------------------------------===//
comment|// GNU G++: Type Traits [Type-Traits.html in the GCC manual]
name|OwningExprResult
name|ParseUnaryTypeTrait
parameter_list|()
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

