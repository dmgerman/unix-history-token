begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- SanitizerArgs.h - Arguments for sanitizer tools  -------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_DRIVER_SANITIZERARGS_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_DRIVER_SANITIZERARGS_H
end_define

begin_include
include|#
directive|include
file|"clang/Basic/Sanitizers.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Option/Arg.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Option/ArgList.h"
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|driver
block|{
name|class
name|ToolChain
decl_stmt|;
name|class
name|SanitizerArgs
block|{
name|SanitizerSet
name|Sanitizers
decl_stmt|;
name|SanitizerSet
name|RecoverableSanitizers
decl_stmt|;
name|SanitizerSet
name|TrapSanitizers
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
name|BlacklistFiles
expr_stmt|;
name|int
name|CoverageFeatures
decl_stmt|;
name|int
name|MsanTrackOrigins
decl_stmt|;
name|int
name|AsanFieldPadding
decl_stmt|;
name|bool
name|AsanZeroBaseShadow
decl_stmt|;
name|bool
name|AsanSharedRuntime
decl_stmt|;
name|bool
name|LinkCXXRuntimes
decl_stmt|;
name|public
label|:
comment|/// Parses the sanitizer arguments from an argument list.
name|SanitizerArgs
argument_list|(
specifier|const
name|ToolChain
operator|&
name|TC
argument_list|,
specifier|const
name|llvm
operator|::
name|opt
operator|::
name|ArgList
operator|&
name|Args
argument_list|)
expr_stmt|;
name|bool
name|needsAsanRt
argument_list|()
specifier|const
block|{
return|return
name|Sanitizers
operator|.
name|has
argument_list|(
name|SanitizerKind
operator|::
name|Address
argument_list|)
return|;
block|}
name|bool
name|needsSharedAsanRt
argument_list|()
specifier|const
block|{
return|return
name|AsanSharedRuntime
return|;
block|}
name|bool
name|needsTsanRt
argument_list|()
specifier|const
block|{
return|return
name|Sanitizers
operator|.
name|has
argument_list|(
name|SanitizerKind
operator|::
name|Thread
argument_list|)
return|;
block|}
name|bool
name|needsMsanRt
argument_list|()
specifier|const
block|{
return|return
name|Sanitizers
operator|.
name|has
argument_list|(
name|SanitizerKind
operator|::
name|Memory
argument_list|)
return|;
block|}
name|bool
name|needsLsanRt
argument_list|()
specifier|const
block|{
return|return
name|Sanitizers
operator|.
name|has
argument_list|(
name|SanitizerKind
operator|::
name|Leak
argument_list|)
operator|&&
operator|!
name|Sanitizers
operator|.
name|has
argument_list|(
name|SanitizerKind
operator|::
name|Address
argument_list|)
return|;
block|}
name|bool
name|needsUbsanRt
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|needsDfsanRt
argument_list|()
specifier|const
block|{
return|return
name|Sanitizers
operator|.
name|has
argument_list|(
name|SanitizerKind
operator|::
name|DataFlow
argument_list|)
return|;
block|}
name|bool
name|needsSafeStackRt
argument_list|()
specifier|const
block|{
return|return
name|Sanitizers
operator|.
name|has
argument_list|(
name|SanitizerKind
operator|::
name|SafeStack
argument_list|)
return|;
block|}
name|bool
name|requiresPIE
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|needsUnwindTables
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|linkCXXRuntimes
argument_list|()
specifier|const
block|{
return|return
name|LinkCXXRuntimes
return|;
block|}
name|void
name|addArgs
argument_list|(
specifier|const
name|llvm
operator|::
name|opt
operator|::
name|ArgList
operator|&
name|Args
argument_list|,
name|llvm
operator|::
name|opt
operator|::
name|ArgStringList
operator|&
name|CmdArgs
argument_list|)
decl|const
decl_stmt|;
name|private
label|:
name|void
name|clear
parameter_list|()
function_decl|;
block|}
empty_stmt|;
block|}
comment|// namespace driver
block|}
end_decl_stmt

begin_comment
comment|// namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

