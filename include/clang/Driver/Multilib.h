begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- Multilib.h ---------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_DRIVER_MULTILIB_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_DRIVER_MULTILIB_H
end_define

begin_include
include|#
directive|include
file|"clang/Basic/LLVM.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/STLExtras.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/Triple.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Option/Option.h"
end_include

begin_include
include|#
directive|include
file|<functional>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|driver
block|{
comment|/// This corresponds to a single GCC Multilib, or a segment of one controlled
comment|/// by a command line flag
name|class
name|Multilib
block|{
name|public
label|:
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
name|flags_list
expr_stmt|;
name|private
label|:
name|std
operator|::
name|string
name|GCCSuffix
expr_stmt|;
name|std
operator|::
name|string
name|OSSuffix
expr_stmt|;
name|std
operator|::
name|string
name|IncludeSuffix
expr_stmt|;
name|flags_list
name|Flags
decl_stmt|;
name|public
label|:
name|Multilib
argument_list|(
argument|StringRef GCCSuffix =
literal|""
argument_list|,
argument|StringRef OSSuffix =
literal|""
argument_list|,
argument|StringRef IncludeSuffix =
literal|""
argument_list|)
empty_stmt|;
comment|/// \brief Get the detected GCC installation path suffix for the multi-arch
comment|/// target variant. Always starts with a '/', unless empty
specifier|const
name|std
operator|::
name|string
operator|&
name|gccSuffix
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|GCCSuffix
operator|.
name|empty
argument_list|()
operator|||
operator|(
name|StringRef
argument_list|(
name|GCCSuffix
argument_list|)
operator|.
name|front
argument_list|()
operator|==
literal|'/'
operator|&&
name|GCCSuffix
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|)
argument_list|)
block|;
return|return
name|GCCSuffix
return|;
block|}
comment|/// Set the GCC installation path suffix.
name|Multilib
modifier|&
name|gccSuffix
parameter_list|(
name|StringRef
name|S
parameter_list|)
function_decl|;
comment|/// \brief Get the detected os path suffix for the multi-arch
comment|/// target variant. Always starts with a '/', unless empty
specifier|const
name|std
operator|::
name|string
operator|&
name|osSuffix
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|OSSuffix
operator|.
name|empty
argument_list|()
operator|||
operator|(
name|StringRef
argument_list|(
name|OSSuffix
argument_list|)
operator|.
name|front
argument_list|()
operator|==
literal|'/'
operator|&&
name|OSSuffix
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|)
argument_list|)
block|;
return|return
name|OSSuffix
return|;
block|}
comment|/// Set the os path suffix.
name|Multilib
modifier|&
name|osSuffix
parameter_list|(
name|StringRef
name|S
parameter_list|)
function_decl|;
comment|/// \brief Get the include directory suffix. Always starts with a '/', unless
comment|/// empty
specifier|const
name|std
operator|::
name|string
operator|&
name|includeSuffix
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|IncludeSuffix
operator|.
name|empty
argument_list|()
operator|||
operator|(
name|StringRef
argument_list|(
name|IncludeSuffix
argument_list|)
operator|.
name|front
argument_list|()
operator|==
literal|'/'
operator|&&
name|IncludeSuffix
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|)
argument_list|)
block|;
return|return
name|IncludeSuffix
return|;
block|}
comment|/// Set the include directory suffix
name|Multilib
modifier|&
name|includeSuffix
parameter_list|(
name|StringRef
name|S
parameter_list|)
function_decl|;
comment|/// \brief Get the flags that indicate or contraindicate this multilib's use
comment|/// All elements begin with either '+' or '-'
specifier|const
name|flags_list
operator|&
name|flags
argument_list|()
specifier|const
block|{
return|return
name|Flags
return|;
block|}
name|flags_list
modifier|&
name|flags
parameter_list|()
block|{
return|return
name|Flags
return|;
block|}
comment|/// Add a flag to the flags list
name|Multilib
modifier|&
name|flag
parameter_list|(
name|StringRef
name|F
parameter_list|)
block|{
name|assert
argument_list|(
name|F
operator|.
name|front
argument_list|()
operator|==
literal|'+'
operator|||
name|F
operator|.
name|front
argument_list|()
operator|==
literal|'-'
argument_list|)
expr_stmt|;
name|Flags
operator|.
name|push_back
argument_list|(
name|F
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
comment|/// \brief print summary of the Multilib
name|void
name|print
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|)
decl|const
decl_stmt|;
comment|/// Check whether any of the 'against' flags contradict the 'for' flags.
name|bool
name|isValid
argument_list|()
specifier|const
expr_stmt|;
comment|/// Check whether the default is selected
name|bool
name|isDefault
argument_list|()
specifier|const
block|{
return|return
name|GCCSuffix
operator|.
name|empty
argument_list|()
operator|&&
name|OSSuffix
operator|.
name|empty
argument_list|()
operator|&&
name|IncludeSuffix
operator|.
name|empty
argument_list|()
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|Multilib
operator|&
name|Other
operator|)
specifier|const
expr_stmt|;
block|}
empty_stmt|;
name|raw_ostream
operator|&
name|operator
operator|<<
operator|(
name|raw_ostream
operator|&
name|OS
operator|,
specifier|const
name|Multilib
operator|&
name|M
operator|)
expr_stmt|;
name|class
name|MultilibSet
block|{
name|public
label|:
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|Multilib
operator|>
name|multilib_list
expr_stmt|;
typedef|typedef
name|multilib_list
operator|::
name|iterator
name|iterator
expr_stmt|;
typedef|typedef
name|multilib_list
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
typedef|typedef
name|std
operator|::
name|function
operator|<
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
operator|(
name|StringRef
name|InstallDir
operator|,
name|StringRef
name|Triple
operator|,
specifier|const
name|Multilib
operator|&
name|M
operator|)
operator|>
name|IncludeDirsFunc
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|function_ref
operator|<
name|bool
argument_list|(
specifier|const
name|Multilib
operator|&
argument_list|)
operator|>
name|FilterCallback
expr_stmt|;
name|private
label|:
name|multilib_list
name|Multilibs
decl_stmt|;
name|IncludeDirsFunc
name|IncludeCallback
decl_stmt|;
name|public
label|:
name|MultilibSet
argument_list|()
block|{}
comment|/// Add an optional Multilib segment
name|MultilibSet
modifier|&
name|Maybe
parameter_list|(
specifier|const
name|Multilib
modifier|&
name|M
parameter_list|)
function_decl|;
comment|/// Add a set of mutually incompatible Multilib segments
name|MultilibSet
modifier|&
name|Either
parameter_list|(
specifier|const
name|Multilib
modifier|&
name|M1
parameter_list|,
specifier|const
name|Multilib
modifier|&
name|M2
parameter_list|)
function_decl|;
name|MultilibSet
modifier|&
name|Either
parameter_list|(
specifier|const
name|Multilib
modifier|&
name|M1
parameter_list|,
specifier|const
name|Multilib
modifier|&
name|M2
parameter_list|,
specifier|const
name|Multilib
modifier|&
name|M3
parameter_list|)
function_decl|;
name|MultilibSet
modifier|&
name|Either
parameter_list|(
specifier|const
name|Multilib
modifier|&
name|M1
parameter_list|,
specifier|const
name|Multilib
modifier|&
name|M2
parameter_list|,
specifier|const
name|Multilib
modifier|&
name|M3
parameter_list|,
specifier|const
name|Multilib
modifier|&
name|M4
parameter_list|)
function_decl|;
name|MultilibSet
modifier|&
name|Either
parameter_list|(
specifier|const
name|Multilib
modifier|&
name|M1
parameter_list|,
specifier|const
name|Multilib
modifier|&
name|M2
parameter_list|,
specifier|const
name|Multilib
modifier|&
name|M3
parameter_list|,
specifier|const
name|Multilib
modifier|&
name|M4
parameter_list|,
specifier|const
name|Multilib
modifier|&
name|M5
parameter_list|)
function_decl|;
name|MultilibSet
modifier|&
name|Either
argument_list|(
name|ArrayRef
operator|<
name|Multilib
operator|>
name|Ms
argument_list|)
decl_stmt|;
comment|/// Filter out some subset of the Multilibs using a user defined callback
name|MultilibSet
modifier|&
name|FilterOut
parameter_list|(
name|FilterCallback
name|F
parameter_list|)
function_decl|;
comment|/// Filter out those Multilibs whose gccSuffix matches the given expression
name|MultilibSet
modifier|&
name|FilterOut
parameter_list|(
specifier|const
name|char
modifier|*
name|Regex
parameter_list|)
function_decl|;
comment|/// Add a completed Multilib to the set
name|void
name|push_back
parameter_list|(
specifier|const
name|Multilib
modifier|&
name|M
parameter_list|)
function_decl|;
comment|/// Union this set of multilibs with another
name|void
name|combineWith
parameter_list|(
specifier|const
name|MultilibSet
modifier|&
name|MS
parameter_list|)
function_decl|;
comment|/// Remove all of thie multilibs from the set
name|void
name|clear
parameter_list|()
block|{
name|Multilibs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|Multilibs
operator|.
name|begin
argument_list|()
return|;
block|}
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|Multilibs
operator|.
name|begin
argument_list|()
return|;
block|}
name|iterator
name|end
parameter_list|()
block|{
return|return
name|Multilibs
operator|.
name|end
argument_list|()
return|;
block|}
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|Multilibs
operator|.
name|end
argument_list|()
return|;
block|}
comment|/// Pick the best multilib in the set, \returns false if none are compatible
name|bool
name|select
argument_list|(
specifier|const
name|Multilib
operator|::
name|flags_list
operator|&
name|Flags
argument_list|,
name|Multilib
operator|&
name|M
argument_list|)
decl|const
decl_stmt|;
name|unsigned
name|size
argument_list|()
specifier|const
block|{
return|return
name|Multilibs
operator|.
name|size
argument_list|()
return|;
block|}
name|void
name|print
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|)
decl|const
decl_stmt|;
name|MultilibSet
modifier|&
name|setIncludeDirsCallback
parameter_list|(
name|IncludeDirsFunc
name|F
parameter_list|)
block|{
name|IncludeCallback
operator|=
name|std
operator|::
name|move
argument_list|(
name|F
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
specifier|const
name|IncludeDirsFunc
operator|&
name|includeDirsCallback
argument_list|()
specifier|const
block|{
return|return
name|IncludeCallback
return|;
block|}
name|private
label|:
comment|/// Apply the filter to Multilibs and return the subset that remains
specifier|static
name|multilib_list
name|filterCopy
parameter_list|(
name|FilterCallback
name|F
parameter_list|,
specifier|const
name|multilib_list
modifier|&
name|Ms
parameter_list|)
function_decl|;
comment|/// Apply the filter to the multilib_list, removing those that don't match
specifier|static
name|void
name|filterInPlace
parameter_list|(
name|FilterCallback
name|F
parameter_list|,
name|multilib_list
modifier|&
name|Ms
parameter_list|)
function_decl|;
block|}
empty_stmt|;
name|raw_ostream
operator|&
name|operator
operator|<<
operator|(
name|raw_ostream
operator|&
name|OS
operator|,
specifier|const
name|MultilibSet
operator|&
name|MS
operator|)
expr_stmt|;
block|}
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

