begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- CommandLineSourceLoc.h - Parsing for source locations-*- C++ -*---===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Command line parsing for source locations.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_FRONTEND_COMMANDLINESOURCELOC_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_FRONTEND_COMMANDLINESOURCELOC_H
end_define

begin_include
include|#
directive|include
file|"llvm/Support/CommandLine.h"
end_include

begin_include
include|#
directive|include
file|<cstdio>
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
comment|/// \brief A source location that has been parsed on the command line.
struct|struct
name|ParsedSourceLocation
block|{
name|std
operator|::
name|string
name|FileName
expr_stmt|;
name|unsigned
name|Line
decl_stmt|;
name|unsigned
name|Column
decl_stmt|;
block|}
struct|;
block|}
end_decl_stmt

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|cl
block|{
comment|/// \brief Command-line option parser that parses source locations.
comment|///
comment|/// Source locations are of the form filename:line:column.
name|template
operator|<
operator|>
name|class
name|parser
operator|<
name|clang
operator|::
name|ParsedSourceLocation
operator|>
operator|:
name|public
name|basic_parser
operator|<
name|clang
operator|::
name|ParsedSourceLocation
operator|>
block|{
name|public
operator|:
name|bool
name|parse
argument_list|(
name|Option
operator|&
name|O
argument_list|,
specifier|const
name|char
operator|*
name|ArgName
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|ArgValue
argument_list|,
name|clang
operator|::
name|ParsedSourceLocation
operator|&
name|Val
argument_list|)
block|;     }
expr_stmt|;
name|bool
name|parser
operator|<
name|clang
operator|::
name|ParsedSourceLocation
operator|>
operator|::
name|parse
argument_list|(
argument|Option&O
argument_list|,
argument|const char *ArgName
argument_list|,
argument|const std::string&ArgValue
argument_list|,
argument|clang::ParsedSourceLocation&Val
argument_list|)
block|{
name|using
name|namespace
name|clang
block|;
specifier|const
name|char
operator|*
name|ExpectedFormat
operator|=
literal|"source location must be of the form filename:line:column"
block|;
name|std
operator|::
name|string
operator|::
name|size_type
name|SecondColon
operator|=
name|ArgValue
operator|.
name|rfind
argument_list|(
literal|':'
argument_list|)
block|;
if|if
condition|(
name|SecondColon
operator|==
name|std
operator|::
name|string
operator|::
name|npos
condition|)
block|{
name|std
operator|::
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"%s\n"
argument_list|,
name|ExpectedFormat
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
name|char
modifier|*
name|EndPtr
decl_stmt|;
name|long
name|Column
operator|=
name|std
operator|::
name|strtol
argument_list|(
name|ArgValue
operator|.
name|c_str
argument_list|()
operator|+
name|SecondColon
operator|+
literal|1
argument_list|,
operator|&
name|EndPtr
argument_list|,
literal|10
argument_list|)
expr_stmt|;
if|if
condition|(
name|EndPtr
operator|!=
name|ArgValue
operator|.
name|c_str
argument_list|()
operator|+
name|ArgValue
operator|.
name|size
argument_list|()
condition|)
block|{
name|std
operator|::
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"%s\n"
argument_list|,
name|ExpectedFormat
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
name|std
operator|::
name|string
operator|::
name|size_type
name|FirstColon
operator|=
name|ArgValue
operator|.
name|rfind
argument_list|(
literal|':'
argument_list|,
name|SecondColon
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|FirstColon
operator|==
name|std
operator|::
name|string
operator|::
name|npos
condition|)
block|{
name|std
operator|::
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"%s\n"
argument_list|,
name|ExpectedFormat
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
name|long
name|Line
init|=
name|std
operator|::
name|strtol
argument_list|(
name|ArgValue
operator|.
name|c_str
argument_list|()
operator|+
name|FirstColon
operator|+
literal|1
argument_list|,
operator|&
name|EndPtr
argument_list|,
literal|10
argument_list|)
decl_stmt|;
if|if
condition|(
name|EndPtr
operator|!=
name|ArgValue
operator|.
name|c_str
argument_list|()
operator|+
name|SecondColon
condition|)
block|{
name|std
operator|::
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"%s\n"
argument_list|,
name|ExpectedFormat
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
name|Val
operator|.
name|FileName
operator|=
name|ArgValue
operator|.
name|substr
argument_list|(
literal|0
argument_list|,
name|FirstColon
argument_list|)
expr_stmt|;
name|Val
operator|.
name|Line
operator|=
name|Line
expr_stmt|;
name|Val
operator|.
name|Column
operator|=
name|Column
expr_stmt|;
return|return
name|false
return|;
block|}
block|}
end_decl_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

end_unit

