begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- AnalysisConsumer.h - Front-end Analysis Engine Hooks ---*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This header contains the functions necessary for a front-end to run various
end_comment

begin_comment
comment|// analyses.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_FRONTEND_ANALYSISCONSUMER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_FRONTEND_ANALYSISCONSUMER_H
end_define

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|ASTConsumer
decl_stmt|;
name|class
name|Diagnostic
decl_stmt|;
name|class
name|Preprocessor
decl_stmt|;
name|class
name|LangOptions
decl_stmt|;
comment|/// Analysis - Set of available source code analyses.
enum|enum
name|Analyses
block|{
define|#
directive|define
name|ANALYSIS
parameter_list|(
name|NAME
parameter_list|,
name|CMDFLAG
parameter_list|,
name|DESC
parameter_list|,
name|SCOPE
parameter_list|)
value|NAME,
include|#
directive|include
file|"clang/Frontend/Analyses.def"
name|NumAnalyses
block|}
enum|;
comment|/// AnalysisStores - Set of available analysis store models.
enum|enum
name|AnalysisStores
block|{
define|#
directive|define
name|ANALYSIS_STORE
parameter_list|(
name|NAME
parameter_list|,
name|CMDFLAG
parameter_list|,
name|DESC
parameter_list|,
name|CREATFN
parameter_list|)
value|NAME##Model,
include|#
directive|include
file|"clang/Frontend/Analyses.def"
name|NumStores
block|}
enum|;
comment|/// AnalysisConstraints - Set of available constraint models.
enum|enum
name|AnalysisConstraints
block|{
define|#
directive|define
name|ANALYSIS_CONSTRAINTS
parameter_list|(
name|NAME
parameter_list|,
name|CMDFLAG
parameter_list|,
name|DESC
parameter_list|,
name|CREATFN
parameter_list|)
value|NAME##Model,
include|#
directive|include
file|"clang/Frontend/Analyses.def"
name|NumConstraints
block|}
enum|;
comment|/// AnalysisDiagClients - Set of available diagnostic clients for rendering
comment|///  analysis results.
enum|enum
name|AnalysisDiagClients
block|{
define|#
directive|define
name|ANALYSIS_DIAGNOSTICS
parameter_list|(
name|NAME
parameter_list|,
name|CMDFLAG
parameter_list|,
name|DESC
parameter_list|,
name|CREATFN
parameter_list|,
name|AUTOCREAT
parameter_list|)
value|PD_##NAME,
include|#
directive|include
file|"clang/Frontend/Analyses.def"
name|NUM_ANALYSIS_DIAG_CLIENTS
block|}
enum|;
name|class
name|AnalyzerOptions
block|{
name|public
label|:
name|std
operator|::
name|vector
operator|<
name|Analyses
operator|>
name|AnalysisList
expr_stmt|;
name|AnalysisStores
name|AnalysisStoreOpt
decl_stmt|;
name|AnalysisConstraints
name|AnalysisConstraintsOpt
decl_stmt|;
name|AnalysisDiagClients
name|AnalysisDiagOpt
decl_stmt|;
name|std
operator|::
name|string
name|AnalyzeSpecificFunction
expr_stmt|;
name|unsigned
name|AnalyzeAll
range|:
literal|1
decl_stmt|;
name|unsigned
name|AnalyzerDisplayProgress
range|:
literal|1
decl_stmt|;
name|unsigned
name|AnalyzeNestedBlocks
range|:
literal|1
decl_stmt|;
name|unsigned
name|EagerlyAssume
range|:
literal|1
decl_stmt|;
name|unsigned
name|PurgeDead
range|:
literal|1
decl_stmt|;
name|unsigned
name|TrimGraph
range|:
literal|1
decl_stmt|;
name|unsigned
name|VisualizeEGDot
range|:
literal|1
decl_stmt|;
name|unsigned
name|VisualizeEGUbi
range|:
literal|1
decl_stmt|;
name|unsigned
name|EnableExperimentalChecks
range|:
literal|1
decl_stmt|;
name|unsigned
name|EnableExperimentalInternalChecks
range|:
literal|1
decl_stmt|;
name|public
label|:
name|AnalyzerOptions
argument_list|()
block|{
name|AnalysisStoreOpt
operator|=
name|BasicStoreModel
expr_stmt|;
name|AnalysisConstraintsOpt
operator|=
name|RangeConstraintsModel
expr_stmt|;
name|AnalysisDiagOpt
operator|=
name|PD_HTML
expr_stmt|;
name|AnalyzeAll
operator|=
literal|0
expr_stmt|;
name|AnalyzerDisplayProgress
operator|=
literal|0
expr_stmt|;
name|AnalyzeNestedBlocks
operator|=
literal|0
expr_stmt|;
name|EagerlyAssume
operator|=
literal|0
expr_stmt|;
name|PurgeDead
operator|=
literal|1
expr_stmt|;
name|TrimGraph
operator|=
literal|0
expr_stmt|;
name|VisualizeEGDot
operator|=
literal|0
expr_stmt|;
name|VisualizeEGUbi
operator|=
literal|0
expr_stmt|;
name|EnableExperimentalChecks
operator|=
literal|0
expr_stmt|;
name|EnableExperimentalInternalChecks
operator|=
literal|0
expr_stmt|;
block|}
block|}
empty_stmt|;
comment|/// CreateAnalysisConsumer - Creates an ASTConsumer to run various code
comment|/// analysis passes.  (The set of analyses run is controlled by command-line
comment|/// options.)
name|ASTConsumer
modifier|*
name|CreateAnalysisConsumer
argument_list|(
specifier|const
name|Preprocessor
operator|&
name|pp
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|output
argument_list|,
specifier|const
name|AnalyzerOptions
operator|&
name|Opts
argument_list|)
decl_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

