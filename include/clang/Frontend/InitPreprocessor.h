begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- InitPreprocessor.h - InitializePreprocessor function. --*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines the clang::InitializePreprocessor function.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_FRONTEND_INIT_PREPROCESSOR_H_
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_FRONTEND_INIT_PREPROCESSOR_H_
end_define

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|Preprocessor
decl_stmt|;
name|class
name|LangOptions
decl_stmt|;
comment|/// PreprocessorInitOptions - This class is used for passing the various
comment|/// options used in preprocessor initialization to InitializePreprocessor().
name|class
name|PreprocessorInitOptions
block|{
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|pair
operator|<
name|std
operator|::
name|string
operator|,
name|bool
comment|/*isUndef*/
operator|>
expr|>
name|Macros
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|pair
operator|<
name|std
operator|::
name|string
operator|,
name|bool
comment|/*isPTH*/
operator|>
expr|>
name|Includes
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
name|MacroIncludes
expr_stmt|;
name|public
label|:
name|void
name|addMacroDef
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
argument_list|)
block|{
name|Macros
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|Name
argument_list|,
name|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|addMacroUndef
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
argument_list|)
block|{
name|Macros
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|Name
argument_list|,
name|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|addInclude
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
argument_list|,
name|bool
name|isPTH
operator|=
name|false
argument_list|)
block|{
name|Includes
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|Name
argument_list|,
name|isPTH
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|addMacroInclude
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
argument_list|)
block|{
name|MacroIncludes
operator|.
name|push_back
argument_list|(
name|Name
argument_list|)
expr_stmt|;
block|}
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|pair
operator|<
name|std
operator|::
name|string
operator|,
name|bool
operator|>
expr|>
operator|::
name|const_iterator
name|macro_iterator
expr_stmt|;
name|macro_iterator
name|macro_begin
argument_list|()
specifier|const
block|{
return|return
name|Macros
operator|.
name|begin
argument_list|()
return|;
block|}
name|macro_iterator
name|macro_end
argument_list|()
specifier|const
block|{
return|return
name|Macros
operator|.
name|end
argument_list|()
return|;
block|}
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|pair
operator|<
name|std
operator|::
name|string
operator|,
name|bool
operator|>
expr|>
operator|::
name|const_iterator
name|include_iterator
expr_stmt|;
name|include_iterator
name|include_begin
argument_list|()
specifier|const
block|{
return|return
name|Includes
operator|.
name|begin
argument_list|()
return|;
block|}
name|include_iterator
name|include_end
argument_list|()
specifier|const
block|{
return|return
name|Includes
operator|.
name|end
argument_list|()
return|;
block|}
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
operator|::
name|const_iterator
name|imacro_iterator
expr_stmt|;
name|imacro_iterator
name|imacro_begin
argument_list|()
specifier|const
block|{
return|return
name|MacroIncludes
operator|.
name|begin
argument_list|()
return|;
block|}
name|imacro_iterator
name|imacro_end
argument_list|()
specifier|const
block|{
return|return
name|MacroIncludes
operator|.
name|end
argument_list|()
return|;
block|}
block|}
empty_stmt|;
comment|/// InitializePreprocessor - Initialize the preprocessor getting it and the
comment|/// environment ready to process a single file. This returns true on error.
comment|///
name|bool
name|InitializePreprocessor
parameter_list|(
name|Preprocessor
modifier|&
name|PP
parameter_list|,
specifier|const
name|PreprocessorInitOptions
modifier|&
name|InitOptions
parameter_list|,
name|bool
name|undef_macros
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

