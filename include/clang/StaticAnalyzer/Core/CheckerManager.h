begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- CheckerManager.h - Static Analyzer Checker Manager -----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Defines the Static Analyzer Checker Manager.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_SA_CORE_CHECKERMANAGER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_SA_CORE_CHECKERMANAGER_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|Decl
decl_stmt|;
name|namespace
name|ento
block|{
name|class
name|ExprEngine
decl_stmt|;
name|class
name|AnalysisManager
decl_stmt|;
name|class
name|BugReporter
decl_stmt|;
name|class
name|CheckerManager
block|{
name|public
label|:
operator|~
name|CheckerManager
argument_list|()
expr_stmt|;
typedef|typedef
name|void
modifier|*
name|CheckerRef
typedef|;
comment|//===----------------------------------------------------------------------===//
comment|// registerChecker
comment|//===----------------------------------------------------------------------===//
comment|/// \brief Used to register checkers.
name|template
operator|<
name|typename
name|CHECKER
operator|>
name|void
name|registerChecker
argument_list|()
block|{
name|CHECKER
operator|*
name|checker
operator|=
name|new
name|CHECKER
argument_list|()
block|;
name|Checkers
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|pair
operator|<
name|CheckerRef
argument_list|,
name|Dtor
operator|>
operator|(
name|checker
operator|,
name|destruct
operator|<
name|CHECKER
operator|>
operator|)
argument_list|)
block|;
name|CHECKER
operator|::
name|_register
argument_list|(
name|checker
argument_list|,
operator|*
name|this
argument_list|)
block|;   }
typedef|typedef
name|void
function_decl|(
modifier|*
name|RegisterToEngFunc
function_decl|)
parameter_list|(
name|ExprEngine
modifier|&
name|Eng
parameter_list|)
function_decl|;
name|void
name|addCheckerRegisterFunction
parameter_list|(
name|RegisterToEngFunc
name|fn
parameter_list|)
block|{
name|Funcs
operator|.
name|push_back
argument_list|(
name|fn
argument_list|)
expr_stmt|;
block|}
comment|//===----------------------------------------------------------------------===//
comment|// Functions for running checkers.
comment|//===----------------------------------------------------------------------===//
comment|/// \brief Run checkers handling Decls.
name|void
name|runCheckersOnASTDecl
parameter_list|(
specifier|const
name|Decl
modifier|*
name|D
parameter_list|,
name|AnalysisManager
modifier|&
name|mgr
parameter_list|,
name|BugReporter
modifier|&
name|BR
parameter_list|)
function_decl|;
comment|/// \brief Run checkers handling Decls containing a Stmt body.
name|void
name|runCheckersOnASTBody
parameter_list|(
specifier|const
name|Decl
modifier|*
name|D
parameter_list|,
name|AnalysisManager
modifier|&
name|mgr
parameter_list|,
name|BugReporter
modifier|&
name|BR
parameter_list|)
function_decl|;
comment|//===----------------------------------------------------------------------===//
comment|// Internal registration functions.
comment|//===----------------------------------------------------------------------===//
comment|// Functions used by the registration mechanism, checkers should not touch
comment|// these directly.
typedef|typedef
name|void
function_decl|(
modifier|*
name|CheckDeclFunc
function_decl|)
parameter_list|(
name|CheckerRef
name|checker
parameter_list|,
specifier|const
name|Decl
modifier|*
name|D
parameter_list|,
name|AnalysisManager
modifier|&
name|mgr
parameter_list|,
name|BugReporter
modifier|&
name|BR
parameter_list|)
function_decl|;
typedef|typedef
name|bool
function_decl|(
modifier|*
name|HandlesDeclFunc
function_decl|)
parameter_list|(
specifier|const
name|Decl
modifier|*
name|D
parameter_list|)
function_decl|;
name|void
name|_registerForDecl
parameter_list|(
name|CheckerRef
name|checker
parameter_list|,
name|CheckDeclFunc
name|checkfn
parameter_list|,
name|HandlesDeclFunc
name|isForDeclFn
parameter_list|)
function_decl|;
name|void
name|_registerForBody
parameter_list|(
name|CheckerRef
name|checker
parameter_list|,
name|CheckDeclFunc
name|checkfn
parameter_list|)
function_decl|;
name|void
name|registerCheckersToEngine
parameter_list|(
name|ExprEngine
modifier|&
name|eng
parameter_list|)
function_decl|;
name|private
label|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|destruct
argument_list|(
argument|void *obj
argument_list|)
block|{
name|delete
name|static_cast
operator|<
name|CHECKER
operator|*
operator|>
operator|(
name|obj
operator|)
block|; }
name|std
operator|::
name|vector
operator|<
name|RegisterToEngFunc
operator|>
name|Funcs
expr_stmt|;
struct|struct
name|DeclCheckerInfo
block|{
name|CheckerRef
name|Checker
decl_stmt|;
name|CheckDeclFunc
name|CheckFn
decl_stmt|;
name|HandlesDeclFunc
name|IsForDeclFn
decl_stmt|;
block|}
struct|;
name|std
operator|::
name|vector
operator|<
name|DeclCheckerInfo
operator|>
name|DeclCheckers
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|pair
operator|<
name|CheckerRef
operator|,
name|CheckDeclFunc
operator|>
expr|>
name|BodyCheckers
expr_stmt|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|Dtor
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|pair
operator|<
name|CheckerRef
operator|,
name|Dtor
operator|>
expr|>
name|Checkers
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|SmallVector
operator|<
name|std
operator|::
name|pair
operator|<
name|CheckerRef
operator|,
name|CheckDeclFunc
operator|>
operator|,
literal|4
operator|>
name|CachedDeclCheckers
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|DenseMap
operator|<
name|unsigned
operator|,
name|CachedDeclCheckers
operator|>
name|CachedDeclCheckersMapTy
expr_stmt|;
name|CachedDeclCheckersMapTy
name|CachedDeclCheckersMap
decl_stmt|;
block|}
empty_stmt|;
block|}
comment|// end ento namespace
block|}
end_decl_stmt

begin_comment
comment|// end clang namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

