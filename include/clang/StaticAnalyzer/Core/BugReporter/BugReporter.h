begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===---  BugReporter.h - Generate PathDiagnostics --------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines BugReporter, a utility class for generating
end_comment

begin_comment
comment|//  PathDiagnostics for analyses based on ProgramState.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_GR_BUGREPORTER
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_GR_BUGREPORTER
end_define

begin_include
include|#
directive|include
file|"clang/Basic/SourceLocation.h"
end_include

begin_include
include|#
directive|include
file|"clang/StaticAnalyzer/Core/BugReporter/BugReporterVisitor.h"
end_include

begin_include
include|#
directive|include
file|"clang/StaticAnalyzer/Core/BugReporter/PathDiagnostic.h"
end_include

begin_include
include|#
directive|include
file|"clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/FoldingSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/ImmutableList.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/ImmutableSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallSet.h"
end_include

begin_include
include|#
directive|include
file|<list>
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|ASTContext
decl_stmt|;
name|class
name|DiagnosticsEngine
decl_stmt|;
name|class
name|Stmt
decl_stmt|;
name|class
name|ParentMap
decl_stmt|;
name|namespace
name|ento
block|{
name|class
name|PathDiagnostic
decl_stmt|;
name|class
name|ExplodedNode
decl_stmt|;
name|class
name|ExplodedGraph
decl_stmt|;
name|class
name|BugReport
decl_stmt|;
name|class
name|BugReporter
decl_stmt|;
name|class
name|BugReporterContext
decl_stmt|;
name|class
name|ExprEngine
decl_stmt|;
name|class
name|BugType
decl_stmt|;
comment|//===----------------------------------------------------------------------===//
comment|// Interface for individual bug reports.
comment|//===----------------------------------------------------------------------===//
comment|/// This class provides an interface through which checkers can create
comment|/// individual bug reports.
name|class
name|BugReport
block|{
name|public
label|:
name|class
name|NodeResolver
block|{
name|public
label|:
name|virtual
operator|~
name|NodeResolver
argument_list|()
block|{}
name|virtual
specifier|const
name|ExplodedNode
operator|*
name|getOriginalNode
argument_list|(
specifier|const
name|ExplodedNode
operator|*
name|N
argument_list|)
operator|=
literal|0
expr_stmt|;
block|}
empty_stmt|;
typedef|typedef
specifier|const
name|SourceRange
modifier|*
name|ranges_iterator
typedef|;
typedef|typedef
name|llvm
operator|::
name|ImmutableList
operator|<
name|BugReporterVisitor
operator|*
operator|>
operator|::
name|iterator
name|visitor_iterator
expr_stmt|;
typedef|typedef
name|SmallVector
operator|<
name|StringRef
operator|,
literal|2
operator|>
name|ExtraTextList
expr_stmt|;
name|protected
label|:
name|friend
name|class
name|BugReporter
decl_stmt|;
name|friend
name|class
name|BugReportEquivClass
decl_stmt|;
name|BugType
modifier|&
name|BT
decl_stmt|;
name|std
operator|::
name|string
name|ShortDescription
expr_stmt|;
name|std
operator|::
name|string
name|Description
expr_stmt|;
name|PathDiagnosticLocation
name|Location
decl_stmt|;
specifier|const
name|ExplodedNode
modifier|*
name|ErrorNode
decl_stmt|;
name|SmallVector
operator|<
name|SourceRange
operator|,
literal|4
operator|>
name|Ranges
expr_stmt|;
name|ExtraTextList
name|ExtraText
decl_stmt|;
comment|// Not the most efficient data structure, but we use an ImmutableList for the
comment|// Callbacks because it is safe to make additions to list during iteration.
name|llvm
operator|::
name|ImmutableList
operator|<
name|BugReporterVisitor
operator|*
operator|>
operator|::
name|Factory
name|F
expr_stmt|;
name|llvm
operator|::
name|ImmutableList
operator|<
name|BugReporterVisitor
operator|*
operator|>
name|Callbacks
expr_stmt|;
name|llvm
operator|::
name|FoldingSet
operator|<
name|BugReporterVisitor
operator|>
name|CallbacksSet
expr_stmt|;
name|public
label|:
name|BugReport
argument_list|(
argument|BugType& bt
argument_list|,
argument|StringRef desc
argument_list|,
argument|const ExplodedNode *errornode
argument_list|)
block|:
name|BT
argument_list|(
name|bt
argument_list|)
operator|,
name|Description
argument_list|(
name|desc
argument_list|)
operator|,
name|ErrorNode
argument_list|(
name|errornode
argument_list|)
operator|,
name|Callbacks
argument_list|(
argument|F.getEmptyList()
argument_list|)
block|{}
name|BugReport
argument_list|(
argument|BugType& bt
argument_list|,
argument|StringRef shortDesc
argument_list|,
argument|StringRef desc
argument_list|,
argument|const ExplodedNode *errornode
argument_list|)
operator|:
name|BT
argument_list|(
name|bt
argument_list|)
operator|,
name|ShortDescription
argument_list|(
name|shortDesc
argument_list|)
operator|,
name|Description
argument_list|(
name|desc
argument_list|)
operator|,
name|ErrorNode
argument_list|(
name|errornode
argument_list|)
operator|,
name|Callbacks
argument_list|(
argument|F.getEmptyList()
argument_list|)
block|{}
name|BugReport
argument_list|(
argument|BugType& bt
argument_list|,
argument|StringRef desc
argument_list|,
argument|PathDiagnosticLocation l
argument_list|)
operator|:
name|BT
argument_list|(
name|bt
argument_list|)
operator|,
name|Description
argument_list|(
name|desc
argument_list|)
operator|,
name|Location
argument_list|(
name|l
argument_list|)
operator|,
name|ErrorNode
argument_list|(
literal|0
argument_list|)
operator|,
name|Callbacks
argument_list|(
argument|F.getEmptyList()
argument_list|)
block|{}
name|virtual
operator|~
name|BugReport
argument_list|()
expr_stmt|;
specifier|const
name|BugType
operator|&
name|getBugType
argument_list|()
specifier|const
block|{
return|return
name|BT
return|;
block|}
name|BugType
modifier|&
name|getBugType
parameter_list|()
block|{
return|return
name|BT
return|;
block|}
specifier|const
name|ExplodedNode
operator|*
name|getErrorNode
argument_list|()
specifier|const
block|{
return|return
name|ErrorNode
return|;
block|}
specifier|const
name|StringRef
name|getDescription
argument_list|()
specifier|const
block|{
return|return
name|Description
return|;
block|}
specifier|const
name|StringRef
name|getShortDescription
argument_list|()
specifier|const
block|{
return|return
name|ShortDescription
operator|.
name|empty
argument_list|()
operator|?
name|Description
operator|:
name|ShortDescription
return|;
block|}
comment|/// \brief This allows for addition of meta data to the diagnostic.
comment|///
comment|/// Currently, only the HTMLDiagnosticClient knows how to display it.
name|void
name|addExtraText
parameter_list|(
name|StringRef
name|S
parameter_list|)
block|{
name|ExtraText
operator|.
name|push_back
argument_list|(
name|S
argument_list|)
expr_stmt|;
block|}
name|virtual
specifier|const
name|ExtraTextList
modifier|&
name|getExtraText
parameter_list|()
block|{
return|return
name|ExtraText
return|;
block|}
comment|/// \brief Return the "definitive" location of the reported bug.
comment|///
comment|///  While a bug can span an entire path, usually there is a specific
comment|///  location that can be used to identify where the key issue occurred.
comment|///  This location is used by clients rendering diagnostics.
name|virtual
name|PathDiagnosticLocation
name|getLocation
argument_list|(
specifier|const
name|SourceManager
operator|&
name|SM
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|Stmt
operator|*
name|getStmt
argument_list|()
specifier|const
expr_stmt|;
comment|/// \brief Add a range to a bug report.
comment|///
comment|/// Ranges are used to highlight regions of interest in the source code.
comment|/// They should be at the same source code line as the BugReport location.
comment|/// By default, the source range of the statement corresponding to the error
comment|/// node will be used; add a single invalid range to specify absence of
comment|/// ranges.
name|void
name|addRange
parameter_list|(
name|SourceRange
name|R
parameter_list|)
block|{
name|assert
argument_list|(
operator|(
name|R
operator|.
name|isValid
argument_list|()
operator|||
name|Ranges
operator|.
name|empty
argument_list|()
operator|)
operator|&&
literal|"Invalid range can only be used "
literal|"to specify that the report does not have a range."
argument_list|)
expr_stmt|;
name|Ranges
operator|.
name|push_back
argument_list|(
name|R
argument_list|)
expr_stmt|;
block|}
comment|/// \brief Get the SourceRanges associated with the report.
name|virtual
name|std
operator|::
name|pair
operator|<
name|ranges_iterator
operator|,
name|ranges_iterator
operator|>
name|getRanges
argument_list|()
expr_stmt|;
comment|/// \brief Add custom or predefined bug report visitors to this report.
comment|///
comment|/// The visitors should be used when the default trace is not sufficient.
comment|/// For example, they allow constructing a more elaborate trace.
comment|/// \sa registerConditionVisitor(), registerTrackNullOrUndefValue(),
comment|/// registerFindLastStore(), registerNilReceiverVisitor(), and
comment|/// registerVarDeclsLastStore().
name|void
name|addVisitor
parameter_list|(
name|BugReporterVisitor
modifier|*
name|visitor
parameter_list|)
function_decl|;
comment|/// Iterators through the custom diagnostic visitors.
name|visitor_iterator
name|visitor_begin
parameter_list|()
block|{
return|return
name|Callbacks
operator|.
name|begin
argument_list|()
return|;
block|}
name|visitor_iterator
name|visitor_end
parameter_list|()
block|{
return|return
name|Callbacks
operator|.
name|end
argument_list|()
return|;
block|}
comment|/// Profile to identify equivalent bug reports for error report coalescing.
comment|/// Reports are uniqued to ensure that we do not emit multiple diagnostics
comment|/// for each bug.
name|virtual
name|void
name|Profile
argument_list|(
name|llvm
operator|::
name|FoldingSetNodeID
operator|&
name|hash
argument_list|)
decl|const
decl_stmt|;
block|}
empty_stmt|;
comment|//===----------------------------------------------------------------------===//
comment|// BugTypes (collections of related reports).
comment|//===----------------------------------------------------------------------===//
name|class
name|BugReportEquivClass
range|:
name|public
name|llvm
operator|::
name|FoldingSetNode
block|{
comment|/// List of *owned* BugReport objects.
name|std
operator|::
name|list
operator|<
name|BugReport
operator|*
operator|>
name|Reports
block|;
name|friend
name|class
name|BugReporter
block|;
name|void
name|AddReport
argument_list|(
argument|BugReport* R
argument_list|)
block|{
name|Reports
operator|.
name|push_back
argument_list|(
name|R
argument_list|)
block|; }
name|public
operator|:
name|BugReportEquivClass
argument_list|(
argument|BugReport* R
argument_list|)
block|{
name|Reports
operator|.
name|push_back
argument_list|(
name|R
argument_list|)
block|; }
operator|~
name|BugReportEquivClass
argument_list|()
block|;
name|void
name|Profile
argument_list|(
argument|llvm::FoldingSetNodeID& ID
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
operator|!
name|Reports
operator|.
name|empty
argument_list|()
argument_list|)
block|;
operator|(
operator|*
name|Reports
operator|.
name|begin
argument_list|()
operator|)
operator|->
name|Profile
argument_list|(
name|ID
argument_list|)
block|;   }
name|class
name|iterator
block|{
name|std
operator|::
name|list
operator|<
name|BugReport
operator|*
operator|>
operator|::
name|iterator
name|impl
block|;
name|public
operator|:
name|iterator
argument_list|(
argument|std::list<BugReport*>::iterator i
argument_list|)
operator|:
name|impl
argument_list|(
argument|i
argument_list|)
block|{}
name|iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|impl
block|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|iterator
operator|&
name|I
operator|)
specifier|const
block|{
return|return
name|I
operator|.
name|impl
operator|==
name|impl
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|iterator
operator|&
name|I
operator|)
specifier|const
block|{
return|return
name|I
operator|.
name|impl
operator|!=
name|impl
return|;
block|}
name|BugReport
operator|*
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|impl
return|;
block|}
name|BugReport
operator|*
name|operator
operator|->
expr|(
block|)
specifier|const
block|{
return|return
operator|*
name|impl
return|;
block|}
expr|}
block|;
name|class
name|const_iterator
block|{
name|std
operator|::
name|list
operator|<
name|BugReport
operator|*
operator|>
operator|::
name|const_iterator
name|impl
block|;
name|public
operator|:
name|const_iterator
argument_list|(
argument|std::list<BugReport*>::const_iterator i
argument_list|)
operator|:
name|impl
argument_list|(
argument|i
argument_list|)
block|{}
name|const_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|impl
block|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|const_iterator
operator|&
name|I
operator|)
specifier|const
block|{
return|return
name|I
operator|.
name|impl
operator|==
name|impl
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|const_iterator
operator|&
name|I
operator|)
specifier|const
block|{
return|return
name|I
operator|.
name|impl
operator|!=
name|impl
return|;
block|}
specifier|const
name|BugReport
operator|*
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|impl
return|;
block|}
specifier|const
name|BugReport
operator|*
name|operator
operator|->
expr|(
block|)
specifier|const
block|{
return|return
operator|*
name|impl
return|;
block|}
expr|}
block|;
name|iterator
name|begin
argument_list|()
block|{
return|return
name|iterator
argument_list|(
name|Reports
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
name|iterator
name|end
argument_list|()
block|{
return|return
name|iterator
argument_list|(
name|Reports
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|Reports
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|Reports
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
expr|}
block|;
comment|//===----------------------------------------------------------------------===//
comment|// BugReporter and friends.
comment|//===----------------------------------------------------------------------===//
name|class
name|BugReporterData
block|{
name|public
operator|:
name|virtual
operator|~
name|BugReporterData
argument_list|()
block|;
name|virtual
name|DiagnosticsEngine
operator|&
name|getDiagnostic
argument_list|()
operator|=
literal|0
block|;
name|virtual
name|PathDiagnosticConsumer
operator|*
name|getPathDiagnosticConsumer
argument_list|()
operator|=
literal|0
block|;
name|virtual
name|ASTContext
operator|&
name|getASTContext
argument_list|()
operator|=
literal|0
block|;
name|virtual
name|SourceManager
operator|&
name|getSourceManager
argument_list|()
operator|=
literal|0
block|; }
block|;
comment|/// BugReporter is a utility class for generating PathDiagnostics for analysis.
comment|/// It collects the BugReports and BugTypes and knows how to generate
comment|/// and flush the corresponding diagnostics.
name|class
name|BugReporter
block|{
name|public
operator|:
expr|enum
name|Kind
block|{
name|BaseBRKind
block|,
name|GRBugReporterKind
block|}
block|;
name|private
operator|:
typedef|typedef
name|llvm
operator|::
name|ImmutableSet
operator|<
name|BugType
operator|*
operator|>
name|BugTypesTy
expr_stmt|;
name|BugTypesTy
operator|::
name|Factory
name|F
block|;
name|BugTypesTy
name|BugTypes
block|;
specifier|const
name|Kind
name|kind
block|;
name|BugReporterData
operator|&
name|D
block|;
comment|/// Generate and flush the diagnostics for the given bug report.
name|void
name|FlushReport
argument_list|(
name|BugReportEquivClass
operator|&
name|EQ
argument_list|)
block|;
comment|/// The set of bug reports tracked by the BugReporter.
name|llvm
operator|::
name|FoldingSet
operator|<
name|BugReportEquivClass
operator|>
name|EQClasses
block|;
comment|/// A vector of BugReports for tracking the allocated pointers and cleanup.
name|std
operator|::
name|vector
operator|<
name|BugReportEquivClass
operator|*
operator|>
name|EQClassesVector
block|;
name|protected
operator|:
name|BugReporter
argument_list|(
argument|BugReporterData& d
argument_list|,
argument|Kind k
argument_list|)
operator|:
name|BugTypes
argument_list|(
name|F
operator|.
name|getEmptySet
argument_list|()
argument_list|)
block|,
name|kind
argument_list|(
name|k
argument_list|)
block|,
name|D
argument_list|(
argument|d
argument_list|)
block|{}
name|public
operator|:
name|BugReporter
argument_list|(
name|BugReporterData
operator|&
name|d
argument_list|)
operator|:
name|BugTypes
argument_list|(
name|F
operator|.
name|getEmptySet
argument_list|()
argument_list|)
block|,
name|kind
argument_list|(
name|BaseBRKind
argument_list|)
block|,
name|D
argument_list|(
argument|d
argument_list|)
block|{}
name|virtual
operator|~
name|BugReporter
argument_list|()
block|;
comment|/// \brief Generate and flush diagnostics for all bug reports.
name|void
name|FlushReports
argument_list|()
block|;
name|Kind
name|getKind
argument_list|()
specifier|const
block|{
return|return
name|kind
return|;
block|}
name|DiagnosticsEngine
operator|&
name|getDiagnostic
argument_list|()
block|{
return|return
name|D
operator|.
name|getDiagnostic
argument_list|()
return|;
block|}
name|PathDiagnosticConsumer
operator|*
name|getPathDiagnosticConsumer
argument_list|()
block|{
return|return
name|D
operator|.
name|getPathDiagnosticConsumer
argument_list|()
return|;
block|}
comment|/// \brief Iterator over the set of BugTypes tracked by the BugReporter.
typedef|typedef
name|BugTypesTy
operator|::
name|iterator
name|iterator
expr_stmt|;
name|iterator
name|begin
argument_list|()
block|{
return|return
name|BugTypes
operator|.
name|begin
argument_list|()
return|;
block|}
name|iterator
name|end
argument_list|()
block|{
return|return
name|BugTypes
operator|.
name|end
argument_list|()
return|;
block|}
comment|/// \brief Iterator over the set of BugReports tracked by the BugReporter.
typedef|typedef
name|llvm
operator|::
name|FoldingSet
operator|<
name|BugReportEquivClass
operator|>
operator|::
name|iterator
name|EQClasses_iterator
expr_stmt|;
name|EQClasses_iterator
name|EQClasses_begin
parameter_list|()
block|{
return|return
name|EQClasses
operator|.
name|begin
argument_list|()
return|;
block|}
name|EQClasses_iterator
name|EQClasses_end
parameter_list|()
block|{
return|return
name|EQClasses
operator|.
name|end
argument_list|()
return|;
block|}
name|ASTContext
modifier|&
name|getContext
parameter_list|()
block|{
return|return
name|D
operator|.
name|getASTContext
argument_list|()
return|;
block|}
name|SourceManager
modifier|&
name|getSourceManager
parameter_list|()
block|{
return|return
name|D
operator|.
name|getSourceManager
argument_list|()
return|;
block|}
name|virtual
name|void
name|GeneratePathDiagnostic
argument_list|(
name|PathDiagnostic
operator|&
name|pathDiagnostic
argument_list|,
name|SmallVectorImpl
operator|<
name|BugReport
operator|*
operator|>
operator|&
name|bugReports
argument_list|)
block|{}
name|void
name|Register
parameter_list|(
name|BugType
modifier|*
name|BT
parameter_list|)
function_decl|;
comment|/// \brief Add the given report to the set of reports tracked by BugReporter.
comment|///
comment|/// The reports are usually generated by the checkers. Further, they are
comment|/// folded based on the profile value, which is done to coalesce similar
comment|/// reports.
name|void
name|EmitReport
parameter_list|(
name|BugReport
modifier|*
name|R
parameter_list|)
function_decl|;
name|void
name|EmitBasicReport
parameter_list|(
name|StringRef
name|BugName
parameter_list|,
name|StringRef
name|BugStr
parameter_list|,
name|PathDiagnosticLocation
name|Loc
parameter_list|,
name|SourceRange
modifier|*
name|RangeBeg
parameter_list|,
name|unsigned
name|NumRanges
parameter_list|)
function_decl|;
name|void
name|EmitBasicReport
parameter_list|(
name|StringRef
name|BugName
parameter_list|,
name|StringRef
name|BugCategory
parameter_list|,
name|StringRef
name|BugStr
parameter_list|,
name|PathDiagnosticLocation
name|Loc
parameter_list|,
name|SourceRange
modifier|*
name|RangeBeg
parameter_list|,
name|unsigned
name|NumRanges
parameter_list|)
function_decl|;
name|void
name|EmitBasicReport
parameter_list|(
name|StringRef
name|BugName
parameter_list|,
name|StringRef
name|BugStr
parameter_list|,
name|PathDiagnosticLocation
name|Loc
parameter_list|)
block|{
name|EmitBasicReport
argument_list|(
name|BugName
argument_list|,
name|BugStr
argument_list|,
name|Loc
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|void
name|EmitBasicReport
parameter_list|(
name|StringRef
name|BugName
parameter_list|,
name|StringRef
name|BugCategory
parameter_list|,
name|StringRef
name|BugStr
parameter_list|,
name|PathDiagnosticLocation
name|Loc
parameter_list|)
block|{
name|EmitBasicReport
argument_list|(
name|BugName
argument_list|,
name|BugCategory
argument_list|,
name|BugStr
argument_list|,
name|Loc
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|void
name|EmitBasicReport
parameter_list|(
name|StringRef
name|BugName
parameter_list|,
name|StringRef
name|BugStr
parameter_list|,
name|PathDiagnosticLocation
name|Loc
parameter_list|,
name|SourceRange
name|R
parameter_list|)
block|{
name|EmitBasicReport
argument_list|(
name|BugName
argument_list|,
name|BugStr
argument_list|,
name|Loc
argument_list|,
operator|&
name|R
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|void
name|EmitBasicReport
parameter_list|(
name|StringRef
name|BugName
parameter_list|,
name|StringRef
name|Category
parameter_list|,
name|StringRef
name|BugStr
parameter_list|,
name|PathDiagnosticLocation
name|Loc
parameter_list|,
name|SourceRange
name|R
parameter_list|)
block|{
name|EmitBasicReport
argument_list|(
name|BugName
argument_list|,
name|Category
argument_list|,
name|BugStr
argument_list|,
name|Loc
argument_list|,
operator|&
name|R
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|static
name|bool
name|classof
parameter_list|(
specifier|const
name|BugReporter
modifier|*
name|R
parameter_list|)
block|{
return|return
name|true
return|;
block|}
name|private
label|:
name|llvm
operator|::
name|StringMap
operator|<
name|BugType
operator|*
operator|>
name|StrBugTypes
expr_stmt|;
comment|/// \brief Returns a BugType that is associated with the given name and
comment|/// category.
name|BugType
modifier|*
name|getBugTypeForName
parameter_list|(
name|StringRef
name|name
parameter_list|,
name|StringRef
name|category
parameter_list|)
function_decl|;
block|}
empty_stmt|;
comment|// FIXME: Get rid of GRBugReporter.  It's the wrong abstraction.
name|class
name|GRBugReporter
range|:
name|public
name|BugReporter
block|{
name|ExprEngine
operator|&
name|Eng
block|;
name|llvm
operator|::
name|SmallSet
operator|<
name|SymbolRef
block|,
literal|10
operator|>
name|NotableSymbols
block|;
name|public
operator|:
name|GRBugReporter
argument_list|(
name|BugReporterData
operator|&
name|d
argument_list|,
name|ExprEngine
operator|&
name|eng
argument_list|)
operator|:
name|BugReporter
argument_list|(
name|d
argument_list|,
name|GRBugReporterKind
argument_list|)
block|,
name|Eng
argument_list|(
argument|eng
argument_list|)
block|{}
name|virtual
operator|~
name|GRBugReporter
argument_list|()
block|;
comment|/// getEngine - Return the analysis engine used to analyze a given
comment|///  function or method.
name|ExprEngine
operator|&
name|getEngine
argument_list|()
block|{
return|return
name|Eng
return|;
block|}
comment|/// getGraph - Get the exploded graph created by the analysis engine
comment|///  for the analyzed method or function.
name|ExplodedGraph
operator|&
name|getGraph
argument_list|()
block|;
comment|/// getStateManager - Return the state manager used by the analysis
comment|///  engine.
name|ProgramStateManager
operator|&
name|getStateManager
argument_list|()
block|;
name|virtual
name|void
name|GeneratePathDiagnostic
argument_list|(
name|PathDiagnostic
operator|&
name|pathDiagnostic
argument_list|,
name|SmallVectorImpl
operator|<
name|BugReport
operator|*
operator|>
operator|&
name|bugReports
argument_list|)
block|;
name|void
name|addNotableSymbol
argument_list|(
argument|SymbolRef Sym
argument_list|)
block|{
name|NotableSymbols
operator|.
name|insert
argument_list|(
name|Sym
argument_list|)
block|;   }
name|bool
name|isNotable
argument_list|(
argument|SymbolRef Sym
argument_list|)
specifier|const
block|{
return|return
operator|(
name|bool
operator|)
name|NotableSymbols
operator|.
name|count
argument_list|(
name|Sym
argument_list|)
return|;
block|}
comment|/// classof - Used by isa<>, cast<>, and dyn_cast<>.
specifier|static
name|bool
name|classof
argument_list|(
argument|const BugReporter* R
argument_list|)
block|{
return|return
name|R
operator|->
name|getKind
argument_list|()
operator|==
name|GRBugReporterKind
return|;
block|}
expr|}
block|;
name|class
name|BugReporterContext
block|{
name|GRBugReporter
operator|&
name|BR
block|;
name|public
operator|:
name|BugReporterContext
argument_list|(
name|GRBugReporter
operator|&
name|br
argument_list|)
operator|:
name|BR
argument_list|(
argument|br
argument_list|)
block|{}
name|virtual
operator|~
name|BugReporterContext
argument_list|()
block|{}
name|GRBugReporter
operator|&
name|getBugReporter
argument_list|()
block|{
return|return
name|BR
return|;
block|}
name|ExplodedGraph
operator|&
name|getGraph
argument_list|()
block|{
return|return
name|BR
operator|.
name|getGraph
argument_list|()
return|;
block|}
name|void
name|addNotableSymbol
argument_list|(
argument|SymbolRef Sym
argument_list|)
block|{
comment|// FIXME: For now forward to GRBugReporter.
name|BR
operator|.
name|addNotableSymbol
argument_list|(
name|Sym
argument_list|)
block|;   }
name|bool
name|isNotable
argument_list|(
argument|SymbolRef Sym
argument_list|)
specifier|const
block|{
comment|// FIXME: For now forward to GRBugReporter.
return|return
name|BR
operator|.
name|isNotable
argument_list|(
name|Sym
argument_list|)
return|;
block|}
name|ProgramStateManager
operator|&
name|getStateManager
argument_list|()
block|{
return|return
name|BR
operator|.
name|getStateManager
argument_list|()
return|;
block|}
name|SValBuilder
operator|&
name|getSValBuilder
argument_list|()
block|{
return|return
name|getStateManager
argument_list|()
operator|.
name|getSValBuilder
argument_list|()
return|;
block|}
name|ASTContext
operator|&
name|getASTContext
argument_list|()
block|{
return|return
name|BR
operator|.
name|getContext
argument_list|()
return|;
block|}
name|SourceManager
operator|&
name|getSourceManager
argument_list|()
block|{
return|return
name|BR
operator|.
name|getSourceManager
argument_list|()
return|;
block|}
name|virtual
name|BugReport
operator|::
name|NodeResolver
operator|&
name|getNodeResolver
argument_list|()
operator|=
literal|0
block|; }
block|;  }
comment|// end GR namespace
block|}
end_decl_stmt

begin_comment
comment|// end clang namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

