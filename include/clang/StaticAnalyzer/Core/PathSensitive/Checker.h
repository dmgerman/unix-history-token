begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//== Checker.h - Abstract interface for checkers -----------------*- C++ -*--=//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines Checker and CheckerVisitor, classes used for creating
end_comment

begin_comment
comment|//  domain-specific checks.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_GR_CHECKER
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_GR_CHECKER
end_define

begin_include
include|#
directive|include
file|"clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h"
end_include

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|// Checker interface.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|ento
block|{
name|class
name|Checker
block|{
name|private
label|:
name|friend
name|class
name|ExprEngine
decl_stmt|;
comment|// FIXME: Remove the 'tag' option.
name|void
name|GR_Visit
parameter_list|(
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|,
name|StmtNodeBuilder
modifier|&
name|Builder
parameter_list|,
name|ExprEngine
modifier|&
name|Eng
parameter_list|,
specifier|const
name|Stmt
modifier|*
name|S
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|,
name|bool
name|isPrevisit
parameter_list|,
name|bool
modifier|&
name|respondsToCallback
parameter_list|)
block|{
name|CheckerContext
name|C
argument_list|(
name|Dst
argument_list|,
name|Builder
argument_list|,
name|Eng
argument_list|,
name|Pred
argument_list|,
name|tag
argument_list|,
name|isPrevisit
condition|?
name|ProgramPoint
operator|::
name|PreStmtKind
else|:
name|ProgramPoint
operator|::
name|PostStmtKind
argument_list|,
operator|&
name|respondsToCallback
argument_list|,
name|S
argument_list|)
decl_stmt|;
if|if
condition|(
name|isPrevisit
condition|)
name|_PreVisit
argument_list|(
name|C
argument_list|,
name|S
argument_list|)
expr_stmt|;
else|else
name|_PostVisit
argument_list|(
name|C
argument_list|,
name|S
argument_list|)
expr_stmt|;
block|}
name|void
name|GR_visitObjCMessage
parameter_list|(
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|,
name|StmtNodeBuilder
modifier|&
name|Builder
parameter_list|,
name|ExprEngine
modifier|&
name|Eng
parameter_list|,
specifier|const
name|ObjCMessage
modifier|&
name|msg
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|,
name|bool
name|isPrevisit
parameter_list|)
block|{
name|CheckerContext
name|C
argument_list|(
name|Dst
argument_list|,
name|Builder
argument_list|,
name|Eng
argument_list|,
name|Pred
argument_list|,
name|tag
argument_list|,
name|isPrevisit
condition|?
name|ProgramPoint
operator|::
name|PreStmtKind
else|:
name|ProgramPoint
operator|::
name|PostStmtKind
argument_list|,
literal|0
argument_list|,
name|msg
operator|.
name|getOriginExpr
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isPrevisit
condition|)
name|preVisitObjCMessage
argument_list|(
name|C
argument_list|,
name|msg
argument_list|)
expr_stmt|;
else|else
name|postVisitObjCMessage
argument_list|(
name|C
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
name|bool
name|GR_evalNilReceiver
parameter_list|(
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|,
name|StmtNodeBuilder
modifier|&
name|Builder
parameter_list|,
name|ExprEngine
modifier|&
name|Eng
parameter_list|,
specifier|const
name|ObjCMessage
modifier|&
name|msg
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
specifier|const
name|GRState
modifier|*
name|state
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|)
block|{
name|CheckerContext
name|C
argument_list|(
name|Dst
argument_list|,
name|Builder
argument_list|,
name|Eng
argument_list|,
name|Pred
argument_list|,
name|tag
argument_list|,
name|ProgramPoint
operator|::
name|PostStmtKind
argument_list|,
literal|0
argument_list|,
name|msg
operator|.
name|getOriginExpr
argument_list|()
argument_list|,
name|state
argument_list|)
decl_stmt|;
return|return
name|evalNilReceiver
argument_list|(
name|C
argument_list|,
name|msg
argument_list|)
return|;
block|}
name|bool
name|GR_evalCallExpr
parameter_list|(
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|,
name|StmtNodeBuilder
modifier|&
name|Builder
parameter_list|,
name|ExprEngine
modifier|&
name|Eng
parameter_list|,
specifier|const
name|CallExpr
modifier|*
name|CE
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|)
block|{
name|CheckerContext
name|C
argument_list|(
name|Dst
argument_list|,
name|Builder
argument_list|,
name|Eng
argument_list|,
name|Pred
argument_list|,
name|tag
argument_list|,
name|ProgramPoint
operator|::
name|PostStmtKind
argument_list|,
literal|0
argument_list|,
name|CE
argument_list|)
decl_stmt|;
return|return
name|evalCallExpr
argument_list|(
name|C
argument_list|,
name|CE
argument_list|)
return|;
block|}
comment|// FIXME: Remove the 'tag' option.
name|void
name|GR_VisitBind
parameter_list|(
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|,
name|StmtNodeBuilder
modifier|&
name|Builder
parameter_list|,
name|ExprEngine
modifier|&
name|Eng
parameter_list|,
specifier|const
name|Stmt
modifier|*
name|StoreE
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|,
name|SVal
name|location
parameter_list|,
name|SVal
name|val
parameter_list|,
name|bool
name|isPrevisit
parameter_list|)
block|{
name|CheckerContext
name|C
argument_list|(
name|Dst
argument_list|,
name|Builder
argument_list|,
name|Eng
argument_list|,
name|Pred
argument_list|,
name|tag
argument_list|,
name|isPrevisit
condition|?
name|ProgramPoint
operator|::
name|PreStmtKind
else|:
name|ProgramPoint
operator|::
name|PostStmtKind
argument_list|,
literal|0
argument_list|,
name|StoreE
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|isPrevisit
operator|&&
literal|"Only previsit supported for now."
argument_list|)
expr_stmt|;
name|PreVisitBind
argument_list|(
name|C
argument_list|,
name|StoreE
argument_list|,
name|location
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|// FIXME: Remove the 'tag' option.
name|void
name|GR_visitLocation
parameter_list|(
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|,
name|StmtNodeBuilder
modifier|&
name|Builder
parameter_list|,
name|ExprEngine
modifier|&
name|Eng
parameter_list|,
specifier|const
name|Stmt
modifier|*
name|S
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
specifier|const
name|GRState
modifier|*
name|state
parameter_list|,
name|SVal
name|location
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|,
name|bool
name|isLoad
parameter_list|)
block|{
name|CheckerContext
name|C
argument_list|(
name|Dst
argument_list|,
name|Builder
argument_list|,
name|Eng
argument_list|,
name|Pred
argument_list|,
name|tag
argument_list|,
name|isLoad
condition|?
name|ProgramPoint
operator|::
name|PreLoadKind
else|:
name|ProgramPoint
operator|::
name|PreStoreKind
argument_list|,
literal|0
argument_list|,
name|S
argument_list|,
name|state
argument_list|)
decl_stmt|;
name|visitLocation
argument_list|(
name|C
argument_list|,
name|S
argument_list|,
name|location
argument_list|,
name|isLoad
argument_list|)
expr_stmt|;
block|}
name|void
name|GR_evalDeadSymbols
parameter_list|(
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|,
name|StmtNodeBuilder
modifier|&
name|Builder
parameter_list|,
name|ExprEngine
modifier|&
name|Eng
parameter_list|,
specifier|const
name|Stmt
modifier|*
name|S
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
name|SymbolReaper
modifier|&
name|SymReaper
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|)
block|{
name|CheckerContext
name|C
argument_list|(
name|Dst
argument_list|,
name|Builder
argument_list|,
name|Eng
argument_list|,
name|Pred
argument_list|,
name|tag
argument_list|,
name|ProgramPoint
operator|::
name|PostPurgeDeadSymbolsKind
argument_list|,
literal|0
argument_list|,
name|S
argument_list|)
decl_stmt|;
name|evalDeadSymbols
argument_list|(
name|C
argument_list|,
name|SymReaper
argument_list|)
expr_stmt|;
block|}
name|public
label|:
name|virtual
operator|~
name|Checker
argument_list|()
expr_stmt|;
name|virtual
name|void
name|_PreVisit
parameter_list|(
name|CheckerContext
modifier|&
name|C
parameter_list|,
specifier|const
name|Stmt
modifier|*
name|S
parameter_list|)
block|{}
name|virtual
name|void
name|_PostVisit
parameter_list|(
name|CheckerContext
modifier|&
name|C
parameter_list|,
specifier|const
name|Stmt
modifier|*
name|S
parameter_list|)
block|{}
name|virtual
name|void
name|preVisitObjCMessage
parameter_list|(
name|CheckerContext
modifier|&
name|C
parameter_list|,
name|ObjCMessage
name|msg
parameter_list|)
block|{}
name|virtual
name|void
name|postVisitObjCMessage
parameter_list|(
name|CheckerContext
modifier|&
name|C
parameter_list|,
name|ObjCMessage
name|msg
parameter_list|)
block|{}
name|virtual
name|void
name|visitLocation
parameter_list|(
name|CheckerContext
modifier|&
name|C
parameter_list|,
specifier|const
name|Stmt
modifier|*
name|S
parameter_list|,
name|SVal
name|location
parameter_list|,
name|bool
name|isLoad
parameter_list|)
block|{}
name|virtual
name|void
name|PreVisitBind
parameter_list|(
name|CheckerContext
modifier|&
name|C
parameter_list|,
specifier|const
name|Stmt
modifier|*
name|StoreE
parameter_list|,
name|SVal
name|location
parameter_list|,
name|SVal
name|val
parameter_list|)
block|{}
name|virtual
name|void
name|evalDeadSymbols
parameter_list|(
name|CheckerContext
modifier|&
name|C
parameter_list|,
name|SymbolReaper
modifier|&
name|SymReaper
parameter_list|)
block|{}
name|virtual
name|void
name|evalEndPath
parameter_list|(
name|EndOfFunctionNodeBuilder
modifier|&
name|B
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|,
name|ExprEngine
modifier|&
name|Eng
parameter_list|)
block|{}
name|virtual
name|void
name|MarkLiveSymbols
parameter_list|(
specifier|const
name|GRState
modifier|*
name|state
parameter_list|,
name|SymbolReaper
modifier|&
name|SymReaper
parameter_list|)
block|{}
name|virtual
name|void
name|VisitBranchCondition
parameter_list|(
name|BranchNodeBuilder
modifier|&
name|Builder
parameter_list|,
name|ExprEngine
modifier|&
name|Eng
parameter_list|,
specifier|const
name|Stmt
modifier|*
name|Condition
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|)
block|{}
name|virtual
name|bool
name|evalNilReceiver
parameter_list|(
name|CheckerContext
modifier|&
name|C
parameter_list|,
name|ObjCMessage
name|msg
parameter_list|)
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|evalCallExpr
parameter_list|(
name|CheckerContext
modifier|&
name|C
parameter_list|,
specifier|const
name|CallExpr
modifier|*
name|CE
parameter_list|)
block|{
return|return
name|false
return|;
block|}
name|virtual
specifier|const
name|GRState
modifier|*
name|evalAssume
parameter_list|(
specifier|const
name|GRState
modifier|*
name|state
parameter_list|,
name|SVal
name|Cond
parameter_list|,
name|bool
name|Assumption
parameter_list|,
name|bool
modifier|*
name|respondsToCallback
parameter_list|)
block|{
operator|*
name|respondsToCallback
operator|=
name|false
expr_stmt|;
return|return
name|state
return|;
block|}
name|virtual
name|bool
name|wantsRegionChangeUpdate
parameter_list|(
specifier|const
name|GRState
modifier|*
name|state
parameter_list|)
block|{
return|return
name|false
return|;
block|}
name|virtual
specifier|const
name|GRState
modifier|*
name|EvalRegionChanges
parameter_list|(
specifier|const
name|GRState
modifier|*
name|state
parameter_list|,
specifier|const
name|MemRegion
modifier|*
specifier|const
modifier|*
name|Begin
parameter_list|,
specifier|const
name|MemRegion
modifier|*
specifier|const
modifier|*
name|End
parameter_list|,
name|bool
modifier|*
name|respondsToCallback
parameter_list|)
block|{
operator|*
name|respondsToCallback
operator|=
name|false
expr_stmt|;
return|return
name|state
return|;
block|}
name|virtual
name|void
name|VisitEndAnalysis
parameter_list|(
name|ExplodedGraph
modifier|&
name|G
parameter_list|,
name|BugReporter
modifier|&
name|B
parameter_list|,
name|ExprEngine
modifier|&
name|Eng
parameter_list|)
block|{}
block|}
empty_stmt|;
block|}
comment|// end GR namespace
block|}
end_decl_stmt

begin_comment
comment|// end clang namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

