begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//=-- ExplodedGraph.h - Local, Path-Sens. "Exploded Graph" -*- C++ -*-------==//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines the template classes ExplodedNode and ExplodedGraph,
end_comment

begin_comment
comment|//  which represent a path-sensitive, intra-procedural "exploded graph."
end_comment

begin_comment
comment|//  See "Precise interprocedural dataflow analysis via graph reachability"
end_comment

begin_comment
comment|//  by Reps, Horwitz, and Sagiv
end_comment

begin_comment
comment|//  (http://portal.acm.org/citation.cfm?id=199462) for the definition of an
end_comment

begin_comment
comment|//  exploded graph.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_EXPLODEDGRAPH_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_EXPLODEDGRAPH_H
end_define

begin_include
include|#
directive|include
file|"clang/AST/Decl.h"
end_include

begin_include
include|#
directive|include
file|"clang/Analysis/AnalysisContext.h"
end_include

begin_include
include|#
directive|include
file|"clang/Analysis/ProgramPoint.h"
end_include

begin_include
include|#
directive|include
file|"clang/Analysis/Support/BumpVector.h"
end_include

begin_include
include|#
directive|include
file|"clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DepthFirstIterator.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/FoldingSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/GraphTraits.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallPtrSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Allocator.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Casting.h"
end_include

begin_include
include|#
directive|include
file|<memory>
end_include

begin_include
include|#
directive|include
file|<utility>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|CFG
decl_stmt|;
name|namespace
name|ento
block|{
name|class
name|ExplodedGraph
decl_stmt|;
comment|//===----------------------------------------------------------------------===//
comment|// ExplodedGraph "implementation" classes.  These classes are not typed to
comment|// contain a specific kind of state.  Typed-specialized versions are defined
comment|// on top of these classes.
comment|//===----------------------------------------------------------------------===//
comment|// ExplodedNode is not constified all over the engine because we need to add
comment|// successors to it at any time after creating it.
name|class
name|ExplodedNode
range|:
name|public
name|llvm
operator|::
name|FoldingSetNode
block|{
name|friend
name|class
name|ExplodedGraph
block|;
name|friend
name|class
name|CoreEngine
block|;
name|friend
name|class
name|NodeBuilder
block|;
name|friend
name|class
name|BranchNodeBuilder
block|;
name|friend
name|class
name|IndirectGotoNodeBuilder
block|;
name|friend
name|class
name|SwitchNodeBuilder
block|;
name|friend
name|class
name|EndOfFunctionNodeBuilder
block|;
comment|/// Efficiently stores a list of ExplodedNodes, or an optional flag.
comment|///
comment|/// NodeGroup provides opaque storage for a list of ExplodedNodes, optimizing
comment|/// for the case when there is only one node in the group. This is a fairly
comment|/// common case in an ExplodedGraph, where most nodes have only one
comment|/// predecessor and many have only one successor. It can also be used to
comment|/// store a flag rather than a node list, which ExplodedNode uses to mark
comment|/// whether a node is a sink. If the flag is set, the group is implicitly
comment|/// empty and no nodes may be added.
name|class
name|NodeGroup
block|{
comment|// Conceptually a discriminated union. If the low bit is set, the node is
comment|// a sink. If the low bit is not set, the pointer refers to the storage
comment|// for the nodes in the group.
comment|// This is not a PointerIntPair in order to keep the storage type opaque.
name|uintptr_t
name|P
block|;
name|public
operator|:
name|NodeGroup
argument_list|(
argument|bool Flag = false
argument_list|)
operator|:
name|P
argument_list|(
argument|Flag
argument_list|)
block|{
name|assert
argument_list|(
name|getFlag
argument_list|()
operator|==
name|Flag
argument_list|)
block|;     }
name|ExplodedNode
operator|*
specifier|const
operator|*
name|begin
argument_list|()
specifier|const
block|;
name|ExplodedNode
operator|*
specifier|const
operator|*
name|end
argument_list|()
specifier|const
block|;
name|unsigned
name|size
argument_list|()
specifier|const
block|;
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|P
operator|==
literal|0
operator|||
name|getFlag
argument_list|()
operator|!=
literal|0
return|;
block|}
comment|/// Adds a node to the list.
comment|///
comment|/// The group must not have been created with its flag set.
name|void
name|addNode
argument_list|(
name|ExplodedNode
operator|*
name|N
argument_list|,
name|ExplodedGraph
operator|&
name|G
argument_list|)
block|;
comment|/// Replaces the single node in this group with a new node.
comment|///
comment|/// Note that this should only be used when you know the group was not
comment|/// created with its flag set, and that the group is empty or contains
comment|/// only a single node.
name|void
name|replaceNode
argument_list|(
name|ExplodedNode
operator|*
name|node
argument_list|)
block|;
comment|/// Returns whether this group was created with its flag set.
name|bool
name|getFlag
argument_list|()
specifier|const
block|{
return|return
operator|(
name|P
operator|&
literal|1
operator|)
return|;
block|}
expr|}
block|;
comment|/// Location - The program location (within a function body) associated
comment|///  with this node.
specifier|const
name|ProgramPoint
name|Location
block|;
comment|/// State - The state associated with this node.
name|ProgramStateRef
name|State
block|;
comment|/// Preds - The predecessors of this node.
name|NodeGroup
name|Preds
block|;
comment|/// Succs - The successors of this node.
name|NodeGroup
name|Succs
block|;
name|public
operator|:
name|explicit
name|ExplodedNode
argument_list|(
argument|const ProgramPoint&loc
argument_list|,
argument|ProgramStateRef state
argument_list|,
argument|bool IsSink
argument_list|)
operator|:
name|Location
argument_list|(
name|loc
argument_list|)
block|,
name|State
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|state
argument_list|)
argument_list|)
block|,
name|Succs
argument_list|(
argument|IsSink
argument_list|)
block|{
name|assert
argument_list|(
name|isSink
argument_list|()
operator|==
name|IsSink
argument_list|)
block|;   }
comment|/// getLocation - Returns the edge associated with the given node.
name|ProgramPoint
name|getLocation
argument_list|()
specifier|const
block|{
return|return
name|Location
return|;
block|}
specifier|const
name|LocationContext
operator|*
name|getLocationContext
argument_list|()
specifier|const
block|{
return|return
name|getLocation
argument_list|()
operator|.
name|getLocationContext
argument_list|()
return|;
block|}
specifier|const
name|StackFrameContext
operator|*
name|getStackFrame
argument_list|()
specifier|const
block|{
return|return
name|getLocationContext
argument_list|()
operator|->
name|getCurrentStackFrame
argument_list|()
return|;
block|}
specifier|const
name|Decl
operator|&
name|getCodeDecl
argument_list|()
specifier|const
block|{
return|return
operator|*
name|getLocationContext
argument_list|()
operator|->
name|getDecl
argument_list|()
return|;
block|}
name|CFG
operator|&
name|getCFG
argument_list|()
specifier|const
block|{
return|return
operator|*
name|getLocationContext
argument_list|()
operator|->
name|getCFG
argument_list|()
return|;
block|}
name|ParentMap
operator|&
name|getParentMap
argument_list|()
specifier|const
block|{
return|return
name|getLocationContext
argument_list|()
operator|->
name|getParentMap
argument_list|()
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|T
operator|&
name|getAnalysis
argument_list|()
specifier|const
block|{
return|return
operator|*
name|getLocationContext
argument_list|()
operator|->
name|getAnalysis
operator|<
name|T
operator|>
operator|(
operator|)
return|;
block|}
specifier|const
name|ProgramStateRef
operator|&
name|getState
argument_list|()
specifier|const
block|{
return|return
name|State
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|Optional
operator|<
name|T
operator|>
name|getLocationAs
argument_list|()
specifier|const
name|LLVM_LVALUE_FUNCTION
block|{
return|return
name|Location
operator|.
name|getAs
operator|<
name|T
operator|>
operator|(
operator|)
return|;
block|}
specifier|static
name|void
name|Profile
argument_list|(
argument|llvm::FoldingSetNodeID&ID
argument_list|,
argument|const ProgramPoint&Loc
argument_list|,
argument|const ProgramStateRef&state
argument_list|,
argument|bool IsSink
argument_list|)
block|{
name|ID
operator|.
name|Add
argument_list|(
name|Loc
argument_list|)
block|;
name|ID
operator|.
name|AddPointer
argument_list|(
name|state
operator|.
name|get
argument_list|()
argument_list|)
block|;
name|ID
operator|.
name|AddBoolean
argument_list|(
name|IsSink
argument_list|)
block|;   }
name|void
name|Profile
argument_list|(
argument|llvm::FoldingSetNodeID& ID
argument_list|)
specifier|const
block|{
comment|// We avoid copy constructors by not using accessors.
name|Profile
argument_list|(
name|ID
argument_list|,
name|Location
argument_list|,
name|State
argument_list|,
name|isSink
argument_list|()
argument_list|)
block|;   }
comment|/// addPredeccessor - Adds a predecessor to the current node, and
comment|///  in tandem add this node as a successor of the other node.
name|void
name|addPredecessor
argument_list|(
name|ExplodedNode
operator|*
name|V
argument_list|,
name|ExplodedGraph
operator|&
name|G
argument_list|)
block|;
name|unsigned
name|succ_size
argument_list|()
specifier|const
block|{
return|return
name|Succs
operator|.
name|size
argument_list|()
return|;
block|}
name|unsigned
name|pred_size
argument_list|()
specifier|const
block|{
return|return
name|Preds
operator|.
name|size
argument_list|()
return|;
block|}
name|bool
name|succ_empty
argument_list|()
specifier|const
block|{
return|return
name|Succs
operator|.
name|empty
argument_list|()
return|;
block|}
name|bool
name|pred_empty
argument_list|()
specifier|const
block|{
return|return
name|Preds
operator|.
name|empty
argument_list|()
return|;
block|}
name|bool
name|isSink
argument_list|()
specifier|const
block|{
return|return
name|Succs
operator|.
name|getFlag
argument_list|()
return|;
block|}
name|bool
name|hasSinglePred
argument_list|()
specifier|const
block|{
return|return
operator|(
name|pred_size
argument_list|()
operator|==
literal|1
operator|)
return|;
block|}
name|ExplodedNode
operator|*
name|getFirstPred
argument_list|()
block|{
return|return
name|pred_empty
argument_list|()
operator|?
name|nullptr
operator|:
operator|*
operator|(
name|pred_begin
argument_list|()
operator|)
return|;
block|}
specifier|const
name|ExplodedNode
operator|*
name|getFirstPred
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|ExplodedNode
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|getFirstPred
argument_list|()
return|;
block|}
specifier|const
name|ExplodedNode
operator|*
name|getFirstSucc
argument_list|()
specifier|const
block|{
return|return
name|succ_empty
argument_list|()
condition|?
name|nullptr
else|:
operator|*
operator|(
name|succ_begin
argument_list|()
operator|)
return|;
block|}
comment|// Iterators over successor and predecessor vertices.
typedef|typedef
name|ExplodedNode
modifier|*
specifier|const
modifier|*
name|succ_iterator
typedef|;
typedef|typedef
specifier|const
name|ExplodedNode
modifier|*
specifier|const
modifier|*
name|const_succ_iterator
typedef|;
typedef|typedef
name|ExplodedNode
modifier|*
specifier|const
modifier|*
name|pred_iterator
typedef|;
typedef|typedef
specifier|const
name|ExplodedNode
modifier|*
specifier|const
modifier|*
name|const_pred_iterator
typedef|;
name|pred_iterator
name|pred_begin
parameter_list|()
block|{
return|return
name|Preds
operator|.
name|begin
argument_list|()
return|;
block|}
name|pred_iterator
name|pred_end
parameter_list|()
block|{
return|return
name|Preds
operator|.
name|end
argument_list|()
return|;
block|}
name|const_pred_iterator
name|pred_begin
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|ExplodedNode
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|pred_begin
argument_list|()
return|;
block|}
name|const_pred_iterator
name|pred_end
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|ExplodedNode
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|pred_end
argument_list|()
return|;
block|}
name|succ_iterator
name|succ_begin
parameter_list|()
block|{
return|return
name|Succs
operator|.
name|begin
argument_list|()
return|;
block|}
name|succ_iterator
name|succ_end
parameter_list|()
block|{
return|return
name|Succs
operator|.
name|end
argument_list|()
return|;
block|}
name|const_succ_iterator
name|succ_begin
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|ExplodedNode
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|succ_begin
argument_list|()
return|;
block|}
name|const_succ_iterator
name|succ_end
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|ExplodedNode
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|succ_end
argument_list|()
return|;
block|}
comment|// For debugging.
name|public
label|:
name|class
name|Auditor
block|{
name|public
label|:
name|virtual
operator|~
name|Auditor
argument_list|()
expr_stmt|;
name|virtual
name|void
name|AddEdge
parameter_list|(
name|ExplodedNode
modifier|*
name|Src
parameter_list|,
name|ExplodedNode
modifier|*
name|Dst
parameter_list|)
init|=
literal|0
function_decl|;
block|}
empty_stmt|;
specifier|static
name|void
name|SetAuditor
parameter_list|(
name|Auditor
modifier|*
name|A
parameter_list|)
function_decl|;
name|private
label|:
name|void
name|replaceSuccessor
parameter_list|(
name|ExplodedNode
modifier|*
name|node
parameter_list|)
block|{
name|Succs
operator|.
name|replaceNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|void
name|replacePredecessor
parameter_list|(
name|ExplodedNode
modifier|*
name|node
parameter_list|)
block|{
name|Preds
operator|.
name|replaceNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
typedef|typedef
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|ExplodedNode
operator|*
operator|,
specifier|const
name|ExplodedNode
operator|*
operator|>
name|InterExplodedGraphMap
expr_stmt|;
name|class
name|ExplodedGraph
block|{
name|protected
label|:
name|friend
name|class
name|CoreEngine
decl_stmt|;
comment|// Type definitions.
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|ExplodedNode
operator|*
operator|>
name|NodeVector
expr_stmt|;
comment|/// The roots of the simulation graph. Usually there will be only
comment|/// one, but clients are free to establish multiple subgraphs within a single
comment|/// SimulGraph. Moreover, these subgraphs can often merge when paths from
comment|/// different roots reach the same state at the same program location.
name|NodeVector
name|Roots
decl_stmt|;
comment|/// The nodes in the simulation graph which have been
comment|/// specially marked as the endpoint of an abstract simulation path.
name|NodeVector
name|EndNodes
decl_stmt|;
comment|/// Nodes - The nodes in the graph.
name|llvm
operator|::
name|FoldingSet
operator|<
name|ExplodedNode
operator|>
name|Nodes
expr_stmt|;
comment|/// BVC - Allocator and context for allocating nodes and their predecessor
comment|/// and successor groups.
name|BumpVectorContext
name|BVC
decl_stmt|;
comment|/// NumNodes - The number of nodes in the graph.
name|unsigned
name|NumNodes
decl_stmt|;
comment|/// A list of recently allocated nodes that can potentially be recycled.
name|NodeVector
name|ChangedNodes
decl_stmt|;
comment|/// A list of nodes that can be reused.
name|NodeVector
name|FreeNodes
decl_stmt|;
comment|/// Determines how often nodes are reclaimed.
comment|///
comment|/// If this is 0, nodes will never be reclaimed.
name|unsigned
name|ReclaimNodeInterval
decl_stmt|;
comment|/// Counter to determine when to reclaim nodes.
name|unsigned
name|ReclaimCounter
decl_stmt|;
name|public
label|:
comment|/// \brief Retrieve the node associated with a (Location,State) pair,
comment|///  where the 'Location' is a ProgramPoint in the CFG.  If no node for
comment|///  this pair exists, it is created. IsNew is set to true if
comment|///  the node was freshly created.
name|ExplodedNode
modifier|*
name|getNode
parameter_list|(
specifier|const
name|ProgramPoint
modifier|&
name|L
parameter_list|,
name|ProgramStateRef
name|State
parameter_list|,
name|bool
name|IsSink
init|=
name|false
parameter_list|,
name|bool
modifier|*
name|IsNew
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|/// \brief Create a node for a (Location, State) pair,
comment|///  but don't store it for deduplication later.  This
comment|///  is useful when copying an already completed
comment|///  ExplodedGraph for further processing.
name|ExplodedNode
modifier|*
name|createUncachedNode
parameter_list|(
specifier|const
name|ProgramPoint
modifier|&
name|L
parameter_list|,
name|ProgramStateRef
name|State
parameter_list|,
name|bool
name|IsSink
init|=
name|false
parameter_list|)
function_decl|;
name|std
operator|::
name|unique_ptr
operator|<
name|ExplodedGraph
operator|>
name|MakeEmptyGraph
argument_list|()
specifier|const
block|{
return|return
name|llvm
operator|::
name|make_unique
operator|<
name|ExplodedGraph
operator|>
operator|(
operator|)
return|;
block|}
comment|/// addRoot - Add an untyped node to the set of roots.
name|ExplodedNode
modifier|*
name|addRoot
parameter_list|(
name|ExplodedNode
modifier|*
name|V
parameter_list|)
block|{
name|Roots
operator|.
name|push_back
argument_list|(
name|V
argument_list|)
expr_stmt|;
return|return
name|V
return|;
block|}
comment|/// addEndOfPath - Add an untyped node to the set of EOP nodes.
name|ExplodedNode
modifier|*
name|addEndOfPath
parameter_list|(
name|ExplodedNode
modifier|*
name|V
parameter_list|)
block|{
name|EndNodes
operator|.
name|push_back
argument_list|(
name|V
argument_list|)
expr_stmt|;
return|return
name|V
return|;
block|}
name|ExplodedGraph
argument_list|()
expr_stmt|;
operator|~
name|ExplodedGraph
argument_list|()
expr_stmt|;
name|unsigned
name|num_roots
argument_list|()
specifier|const
block|{
return|return
name|Roots
operator|.
name|size
argument_list|()
return|;
block|}
name|unsigned
name|num_eops
argument_list|()
specifier|const
block|{
return|return
name|EndNodes
operator|.
name|size
argument_list|()
return|;
block|}
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|NumNodes
operator|==
literal|0
return|;
block|}
name|unsigned
name|size
argument_list|()
specifier|const
block|{
return|return
name|NumNodes
return|;
block|}
name|void
name|reserve
parameter_list|(
name|unsigned
name|NodeCount
parameter_list|)
block|{
name|Nodes
operator|.
name|reserve
argument_list|(
name|NodeCount
argument_list|)
expr_stmt|;
block|}
comment|// Iterators.
typedef|typedef
name|ExplodedNode
name|NodeTy
typedef|;
typedef|typedef
name|llvm
operator|::
name|FoldingSet
operator|<
name|ExplodedNode
operator|>
name|AllNodesTy
expr_stmt|;
typedef|typedef
name|NodeVector
operator|::
name|iterator
name|roots_iterator
expr_stmt|;
typedef|typedef
name|NodeVector
operator|::
name|const_iterator
name|const_roots_iterator
expr_stmt|;
typedef|typedef
name|NodeVector
operator|::
name|iterator
name|eop_iterator
expr_stmt|;
typedef|typedef
name|NodeVector
operator|::
name|const_iterator
name|const_eop_iterator
expr_stmt|;
typedef|typedef
name|AllNodesTy
operator|::
name|iterator
name|node_iterator
expr_stmt|;
typedef|typedef
name|AllNodesTy
operator|::
name|const_iterator
name|const_node_iterator
expr_stmt|;
name|node_iterator
name|nodes_begin
parameter_list|()
block|{
return|return
name|Nodes
operator|.
name|begin
argument_list|()
return|;
block|}
name|node_iterator
name|nodes_end
parameter_list|()
block|{
return|return
name|Nodes
operator|.
name|end
argument_list|()
return|;
block|}
name|const_node_iterator
name|nodes_begin
argument_list|()
specifier|const
block|{
return|return
name|Nodes
operator|.
name|begin
argument_list|()
return|;
block|}
name|const_node_iterator
name|nodes_end
argument_list|()
specifier|const
block|{
return|return
name|Nodes
operator|.
name|end
argument_list|()
return|;
block|}
name|roots_iterator
name|roots_begin
parameter_list|()
block|{
return|return
name|Roots
operator|.
name|begin
argument_list|()
return|;
block|}
name|roots_iterator
name|roots_end
parameter_list|()
block|{
return|return
name|Roots
operator|.
name|end
argument_list|()
return|;
block|}
name|const_roots_iterator
name|roots_begin
argument_list|()
specifier|const
block|{
return|return
name|Roots
operator|.
name|begin
argument_list|()
return|;
block|}
name|const_roots_iterator
name|roots_end
argument_list|()
specifier|const
block|{
return|return
name|Roots
operator|.
name|end
argument_list|()
return|;
block|}
name|eop_iterator
name|eop_begin
parameter_list|()
block|{
return|return
name|EndNodes
operator|.
name|begin
argument_list|()
return|;
block|}
name|eop_iterator
name|eop_end
parameter_list|()
block|{
return|return
name|EndNodes
operator|.
name|end
argument_list|()
return|;
block|}
name|const_eop_iterator
name|eop_begin
argument_list|()
specifier|const
block|{
return|return
name|EndNodes
operator|.
name|begin
argument_list|()
return|;
block|}
name|const_eop_iterator
name|eop_end
argument_list|()
specifier|const
block|{
return|return
name|EndNodes
operator|.
name|end
argument_list|()
return|;
block|}
name|llvm
operator|::
name|BumpPtrAllocator
operator|&
name|getAllocator
argument_list|()
block|{
return|return
name|BVC
operator|.
name|getAllocator
argument_list|()
return|;
block|}
name|BumpVectorContext
modifier|&
name|getNodeAllocator
parameter_list|()
block|{
return|return
name|BVC
return|;
block|}
typedef|typedef
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|ExplodedNode
operator|*
operator|,
name|ExplodedNode
operator|*
operator|>
name|NodeMap
expr_stmt|;
comment|/// Creates a trimmed version of the graph that only contains paths leading
comment|/// to the given nodes.
comment|///
comment|/// \param Nodes The nodes which must appear in the final graph. Presumably
comment|///              these are end-of-path nodes (i.e. they have no successors).
comment|/// \param[out] ForwardMap A optional map from nodes in this graph to nodes in
comment|///                        the returned graph.
comment|/// \param[out] InverseMap An optional map from nodes in the returned graph to
comment|///                        nodes in this graph.
comment|/// \returns The trimmed graph
name|std
operator|::
name|unique_ptr
operator|<
name|ExplodedGraph
operator|>
name|trim
argument_list|(
argument|ArrayRef<const NodeTy *> Nodes
argument_list|,
argument|InterExplodedGraphMap *ForwardMap = nullptr
argument_list|,
argument|InterExplodedGraphMap *InverseMap = nullptr
argument_list|)
specifier|const
expr_stmt|;
comment|/// Enable tracking of recently allocated nodes for potential reclamation
comment|/// when calling reclaimRecentlyAllocatedNodes().
name|void
name|enableNodeReclamation
parameter_list|(
name|unsigned
name|Interval
parameter_list|)
block|{
name|ReclaimCounter
operator|=
name|ReclaimNodeInterval
operator|=
name|Interval
expr_stmt|;
block|}
comment|/// Reclaim "uninteresting" nodes created since the last time this method
comment|/// was called.
name|void
name|reclaimRecentlyAllocatedNodes
parameter_list|()
function_decl|;
comment|/// \brief Returns true if nodes for the given expression kind are always
comment|///        kept around.
specifier|static
name|bool
name|isInterestingLValueExpr
parameter_list|(
specifier|const
name|Expr
modifier|*
name|Ex
parameter_list|)
function_decl|;
name|private
label|:
name|bool
name|shouldCollect
parameter_list|(
specifier|const
name|ExplodedNode
modifier|*
name|node
parameter_list|)
function_decl|;
name|void
name|collectNode
parameter_list|(
name|ExplodedNode
modifier|*
name|node
parameter_list|)
function_decl|;
block|}
empty_stmt|;
name|class
name|ExplodedNodeSet
block|{
typedef|typedef
name|llvm
operator|::
name|SmallPtrSet
operator|<
name|ExplodedNode
operator|*
operator|,
literal|5
operator|>
name|ImplTy
expr_stmt|;
name|ImplTy
name|Impl
decl_stmt|;
name|public
label|:
name|ExplodedNodeSet
argument_list|(
argument|ExplodedNode *N
argument_list|)
block|{
name|assert
argument_list|(
name|N
operator|&&
operator|!
name|static_cast
operator|<
name|ExplodedNode
operator|*
operator|>
operator|(
name|N
operator|)
operator|->
name|isSink
argument_list|()
argument_list|)
expr_stmt|;
name|Impl
operator|.
name|insert
argument_list|(
name|N
argument_list|)
expr_stmt|;
block|}
name|ExplodedNodeSet
argument_list|()
block|{}
specifier|inline
name|void
name|Add
parameter_list|(
name|ExplodedNode
modifier|*
name|N
parameter_list|)
block|{
if|if
condition|(
name|N
operator|&&
operator|!
name|static_cast
operator|<
name|ExplodedNode
operator|*
operator|>
operator|(
name|N
operator|)
operator|->
name|isSink
argument_list|()
condition|)
name|Impl
operator|.
name|insert
argument_list|(
name|N
argument_list|)
expr_stmt|;
block|}
typedef|typedef
name|ImplTy
operator|::
name|iterator
name|iterator
expr_stmt|;
typedef|typedef
name|ImplTy
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
name|unsigned
name|size
argument_list|()
specifier|const
block|{
return|return
name|Impl
operator|.
name|size
argument_list|()
return|;
block|}
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|Impl
operator|.
name|empty
argument_list|()
return|;
block|}
name|bool
name|erase
parameter_list|(
name|ExplodedNode
modifier|*
name|N
parameter_list|)
block|{
return|return
name|Impl
operator|.
name|erase
argument_list|(
name|N
argument_list|)
return|;
block|}
name|void
name|clear
parameter_list|()
block|{
name|Impl
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|void
name|insert
parameter_list|(
specifier|const
name|ExplodedNodeSet
modifier|&
name|S
parameter_list|)
block|{
name|assert
argument_list|(
operator|&
name|S
operator|!=
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|empty
argument_list|()
condition|)
name|Impl
operator|=
name|S
operator|.
name|Impl
expr_stmt|;
else|else
name|Impl
operator|.
name|insert
argument_list|(
name|S
operator|.
name|begin
argument_list|()
argument_list|,
name|S
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|Impl
operator|.
name|begin
argument_list|()
return|;
block|}
specifier|inline
name|iterator
name|end
parameter_list|()
block|{
return|return
name|Impl
operator|.
name|end
argument_list|()
return|;
block|}
specifier|inline
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|Impl
operator|.
name|begin
argument_list|()
return|;
block|}
specifier|inline
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|Impl
operator|.
name|end
argument_list|()
return|;
block|}
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end GR namespace
end_comment

begin_comment
unit|}
comment|// end clang namespace
end_comment

begin_comment
comment|// GraphTraits
end_comment

begin_macro
unit|namespace
name|llvm
end_macro

begin_block
block|{
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
name|clang
operator|::
name|ento
operator|::
name|ExplodedNode
operator|*
operator|>
block|{
typedef|typedef
name|clang
operator|::
name|ento
operator|::
name|ExplodedNode
name|NodeType
expr_stmt|;
typedef|typedef
name|clang
operator|::
name|ento
operator|::
name|ExplodedNode
operator|*
name|NodeRef
expr_stmt|;
typedef|typedef
name|NodeType
operator|::
name|succ_iterator
name|ChildIteratorType
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|df_iterator
operator|<
name|NodeType
operator|*
operator|>
name|nodes_iterator
expr_stmt|;
specifier|static
specifier|inline
name|NodeType
modifier|*
name|getEntryNode
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
return|return
name|N
return|;
block|}
specifier|static
specifier|inline
name|ChildIteratorType
name|child_begin
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
return|return
name|N
operator|->
name|succ_begin
argument_list|()
return|;
block|}
specifier|static
specifier|inline
name|ChildIteratorType
name|child_end
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
return|return
name|N
operator|->
name|succ_end
argument_list|()
return|;
block|}
specifier|static
specifier|inline
name|nodes_iterator
name|nodes_begin
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
return|return
name|df_begin
argument_list|(
name|N
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|nodes_iterator
name|nodes_end
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
return|return
name|df_end
argument_list|(
name|N
argument_list|)
return|;
block|}
block|}
end_block

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
specifier|const
name|clang
operator|::
name|ento
operator|::
name|ExplodedNode
operator|*
operator|>
block|{
typedef|typedef
specifier|const
name|clang
operator|::
name|ento
operator|::
name|ExplodedNode
name|NodeType
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
specifier|const
name|clang
operator|::
name|ento
operator|::
name|ExplodedNode
operator|*
name|NodeRef
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|NodeType
operator|::
name|const_succ_iterator
name|ChildIteratorType
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|llvm
operator|::
name|df_iterator
operator|<
name|NodeType
operator|*
operator|>
name|nodes_iterator
expr_stmt|;
end_typedef

begin_function
specifier|static
specifier|inline
name|NodeType
modifier|*
name|getEntryNode
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
return|return
name|N
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|ChildIteratorType
name|child_begin
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
return|return
name|N
operator|->
name|succ_begin
argument_list|()
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|ChildIteratorType
name|child_end
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
return|return
name|N
operator|->
name|succ_end
argument_list|()
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|nodes_iterator
name|nodes_begin
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
return|return
name|df_begin
argument_list|(
name|N
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|nodes_iterator
name|nodes_end
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
return|return
name|df_end
argument_list|(
name|N
argument_list|)
return|;
block|}
end_function

begin_comment
unit|};  }
comment|// end llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

