begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//ProgramStateTrait.h - Partial implementations of ProgramStateTrait -*- C++ -*-
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines partial implementations of template specializations of
end_comment

begin_comment
comment|//  the class ProgramStateTrait<>.  ProgramStateTrait<> is used by ProgramState
end_comment

begin_comment
comment|//  to implement set/get methods for manipulating a ProgramState's
end_comment

begin_comment
comment|//  generic data map.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_PROGRAMSTATETRAIT_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_PROGRAMSTATETRAIT_H
end_define

begin_include
include|#
directive|include
file|"llvm/Support/Allocator.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/DataTypes.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|template
operator|<
name|typename
name|K
operator|,
name|typename
name|D
operator|,
name|typename
name|I
operator|>
name|class
name|ImmutableMap
expr_stmt|;
name|template
operator|<
name|typename
name|K
operator|,
name|typename
name|I
operator|>
name|class
name|ImmutableSet
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|ImmutableList
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|ImmutableListImpl
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|ento
block|{
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|ProgramStatePartialTrait
expr_stmt|;
comment|/// Declares a program state trait for type \p Type called \p Name, and
comment|/// introduce a typedef named \c NameTy.
comment|/// The macro should not be used inside namespaces, or for traits that must
comment|/// be accessible from more than one translation unit.
define|#
directive|define
name|REGISTER_TRAIT_WITH_PROGRAMSTATE
parameter_list|(
name|Name
parameter_list|,
name|Type
parameter_list|)
define|\
value|namespace { \       class Name {}; \       typedef Type Name ## Ty; \     } \     namespace clang { \     namespace ento { \       template<> \       struct ProgramStateTrait<Name> \         : public ProgramStatePartialTrait<Name ## Ty> { \         static void *GDMIndex() { static int Index; return&Index; } \       }; \     } \     }
comment|// Partial-specialization for ImmutableMap.
name|template
operator|<
name|typename
name|Key
operator|,
name|typename
name|Data
operator|,
name|typename
name|Info
operator|>
expr|struct
name|ProgramStatePartialTrait
operator|<
name|llvm
operator|::
name|ImmutableMap
operator|<
name|Key
operator|,
name|Data
operator|,
name|Info
operator|>
expr|>
block|{
typedef|typedef
name|llvm
operator|::
name|ImmutableMap
operator|<
name|Key
operator|,
name|Data
operator|,
name|Info
operator|>
name|data_type
expr_stmt|;
typedef|typedef
name|typename
name|data_type
operator|::
name|Factory
operator|&
name|context_type
expr_stmt|;
typedef|typedef
name|Key
name|key_type
typedef|;
typedef|typedef
name|Data
name|value_type
typedef|;
typedef|typedef
specifier|const
name|value_type
modifier|*
name|lookup_type
typedef|;
specifier|static
specifier|inline
name|data_type
name|MakeData
parameter_list|(
name|void
modifier|*
specifier|const
modifier|*
name|p
parameter_list|)
block|{
return|return
name|p
condition|?
name|data_type
argument_list|(
operator|(
name|typename
name|data_type
operator|::
name|TreeTy
operator|*
operator|)
operator|*
name|p
argument_list|)
else|:
name|data_type
argument_list|(
name|nullptr
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|void
modifier|*
name|MakeVoidPtr
parameter_list|(
name|data_type
name|B
parameter_list|)
block|{
return|return
name|B
operator|.
name|getRoot
argument_list|()
return|;
block|}
specifier|static
name|lookup_type
name|Lookup
parameter_list|(
name|data_type
name|B
parameter_list|,
name|key_type
name|K
parameter_list|)
block|{
return|return
name|B
operator|.
name|lookup
argument_list|(
name|K
argument_list|)
return|;
block|}
specifier|static
name|data_type
name|Set
parameter_list|(
name|data_type
name|B
parameter_list|,
name|key_type
name|K
parameter_list|,
name|value_type
name|E
parameter_list|,
name|context_type
name|F
parameter_list|)
block|{
return|return
name|F
operator|.
name|add
argument_list|(
name|B
argument_list|,
name|K
argument_list|,
name|E
argument_list|)
return|;
block|}
specifier|static
name|data_type
name|Remove
parameter_list|(
name|data_type
name|B
parameter_list|,
name|key_type
name|K
parameter_list|,
name|context_type
name|F
parameter_list|)
block|{
return|return
name|F
operator|.
name|remove
argument_list|(
name|B
argument_list|,
name|K
argument_list|)
return|;
block|}
specifier|static
name|bool
name|Contains
parameter_list|(
name|data_type
name|B
parameter_list|,
name|key_type
name|K
parameter_list|)
block|{
return|return
name|B
operator|.
name|contains
argument_list|(
name|K
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|context_type
name|MakeContext
parameter_list|(
name|void
modifier|*
name|p
parameter_list|)
block|{
return|return
operator|*
operator|(
operator|(
name|typename
name|data_type
operator|::
name|Factory
operator|*
operator|)
name|p
operator|)
return|;
block|}
specifier|static
name|void
modifier|*
name|CreateContext
argument_list|(
name|llvm
operator|::
name|BumpPtrAllocator
operator|&
name|Alloc
argument_list|)
block|{
return|return
name|new
name|typename
name|data_type
operator|::
name|Factory
argument_list|(
name|Alloc
argument_list|)
return|;
block|}
specifier|static
name|void
name|DeleteContext
parameter_list|(
name|void
modifier|*
name|Ctx
parameter_list|)
block|{
name|delete
argument_list|(
argument|typename data_type::Factory*
argument_list|)
name|Ctx
expr_stmt|;
block|}
block|}
empty_stmt|;
comment|/// Helper for registering a map trait.
comment|///
comment|/// If the map type were written directly in the invocation of
comment|/// REGISTER_TRAIT_WITH_PROGRAMSTATE, the comma in the template arguments
comment|/// would be treated as a macro argument separator, which is wrong.
comment|/// This allows the user to specify a map type in a way that the preprocessor
comment|/// can deal with.
define|#
directive|define
name|CLANG_ENTO_PROGRAMSTATE_MAP
parameter_list|(
name|Key
parameter_list|,
name|Value
parameter_list|)
value|llvm::ImmutableMap<Key, Value>
comment|// Partial-specialization for ImmutableSet.
name|template
operator|<
name|typename
name|Key
operator|,
name|typename
name|Info
operator|>
expr|struct
name|ProgramStatePartialTrait
operator|<
name|llvm
operator|::
name|ImmutableSet
operator|<
name|Key
operator|,
name|Info
operator|>
expr|>
block|{
typedef|typedef
name|llvm
operator|::
name|ImmutableSet
operator|<
name|Key
operator|,
name|Info
operator|>
name|data_type
expr_stmt|;
typedef|typedef
name|typename
name|data_type
operator|::
name|Factory
operator|&
name|context_type
expr_stmt|;
typedef|typedef
name|Key
name|key_type
typedef|;
specifier|static
specifier|inline
name|data_type
name|MakeData
parameter_list|(
name|void
modifier|*
specifier|const
modifier|*
name|p
parameter_list|)
block|{
return|return
name|p
condition|?
name|data_type
argument_list|(
operator|(
name|typename
name|data_type
operator|::
name|TreeTy
operator|*
operator|)
operator|*
name|p
argument_list|)
else|:
name|data_type
argument_list|(
name|nullptr
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|void
modifier|*
name|MakeVoidPtr
parameter_list|(
name|data_type
name|B
parameter_list|)
block|{
return|return
name|B
operator|.
name|getRoot
argument_list|()
return|;
block|}
specifier|static
name|data_type
name|Add
parameter_list|(
name|data_type
name|B
parameter_list|,
name|key_type
name|K
parameter_list|,
name|context_type
name|F
parameter_list|)
block|{
return|return
name|F
operator|.
name|add
argument_list|(
name|B
argument_list|,
name|K
argument_list|)
return|;
block|}
specifier|static
name|data_type
name|Remove
parameter_list|(
name|data_type
name|B
parameter_list|,
name|key_type
name|K
parameter_list|,
name|context_type
name|F
parameter_list|)
block|{
return|return
name|F
operator|.
name|remove
argument_list|(
name|B
argument_list|,
name|K
argument_list|)
return|;
block|}
specifier|static
name|bool
name|Contains
parameter_list|(
name|data_type
name|B
parameter_list|,
name|key_type
name|K
parameter_list|)
block|{
return|return
name|B
operator|.
name|contains
argument_list|(
name|K
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|context_type
name|MakeContext
parameter_list|(
name|void
modifier|*
name|p
parameter_list|)
block|{
return|return
operator|*
operator|(
operator|(
name|typename
name|data_type
operator|::
name|Factory
operator|*
operator|)
name|p
operator|)
return|;
block|}
specifier|static
name|void
modifier|*
name|CreateContext
argument_list|(
name|llvm
operator|::
name|BumpPtrAllocator
operator|&
name|Alloc
argument_list|)
block|{
return|return
name|new
name|typename
name|data_type
operator|::
name|Factory
argument_list|(
name|Alloc
argument_list|)
return|;
block|}
specifier|static
name|void
name|DeleteContext
parameter_list|(
name|void
modifier|*
name|Ctx
parameter_list|)
block|{
name|delete
argument_list|(
argument|typename data_type::Factory*
argument_list|)
name|Ctx
expr_stmt|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// Partial-specialization for ImmutableList.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|ProgramStatePartialTrait
operator|<
name|llvm
operator|::
name|ImmutableList
operator|<
name|T
operator|>
expr|>
block|{
typedef|typedef
name|llvm
operator|::
name|ImmutableList
operator|<
name|T
operator|>
name|data_type
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|T
name|key_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|data_type
operator|::
name|Factory
operator|&
name|context_type
expr_stmt|;
end_typedef

begin_function
specifier|static
name|data_type
name|Add
parameter_list|(
name|data_type
name|L
parameter_list|,
name|key_type
name|K
parameter_list|,
name|context_type
name|F
parameter_list|)
block|{
return|return
name|F
operator|.
name|add
argument_list|(
name|K
argument_list|,
name|L
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|bool
name|Contains
parameter_list|(
name|data_type
name|L
parameter_list|,
name|key_type
name|K
parameter_list|)
block|{
return|return
name|L
operator|.
name|contains
argument_list|(
name|K
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|data_type
name|MakeData
parameter_list|(
name|void
modifier|*
specifier|const
modifier|*
name|p
parameter_list|)
block|{
return|return
name|p
condition|?
name|data_type
argument_list|(
operator|(
specifier|const
name|llvm
operator|::
name|ImmutableListImpl
operator|<
name|T
operator|>
operator|*
operator|)
operator|*
name|p
argument_list|)
else|:
name|data_type
argument_list|(
name|nullptr
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|MakeVoidPtr
parameter_list|(
name|data_type
name|D
parameter_list|)
block|{
return|return
name|const_cast
operator|<
name|llvm
operator|::
name|ImmutableListImpl
operator|<
name|T
operator|>
operator|*
operator|>
operator|(
name|D
operator|.
name|getInternalPointer
argument_list|()
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|context_type
name|MakeContext
parameter_list|(
name|void
modifier|*
name|p
parameter_list|)
block|{
return|return
operator|*
operator|(
operator|(
name|typename
name|data_type
operator|::
name|Factory
operator|*
operator|)
name|p
operator|)
return|;
block|}
end_function

begin_decl_stmt
specifier|static
name|void
modifier|*
name|CreateContext
argument_list|(
name|llvm
operator|::
name|BumpPtrAllocator
operator|&
name|Alloc
argument_list|)
block|{
return|return
name|new
name|typename
name|data_type
operator|::
name|Factory
argument_list|(
name|Alloc
argument_list|)
return|;
block|}
end_decl_stmt

begin_function
specifier|static
name|void
name|DeleteContext
parameter_list|(
name|void
modifier|*
name|Ctx
parameter_list|)
block|{
name|delete
argument_list|(
argument|typename data_type::Factory*
argument_list|)
name|Ctx
expr_stmt|;
block|}
end_function

begin_comment
unit|};
comment|// Partial specialization for bool.
end_comment

begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|ProgramStatePartialTrait
operator|<
name|bool
operator|>
block|{
typedef|typedef
name|bool
name|data_type
typedef|;
specifier|static
specifier|inline
name|data_type
name|MakeData
argument_list|(
argument|void *const* p
argument_list|)
block|{
return|return
name|p
operator|?
call|(
name|data_type
call|)
argument_list|(
name|uintptr_t
argument_list|)
operator|*
name|p
operator|:
name|data_type
argument_list|()
return|;
block|}
specifier|static
specifier|inline
name|void
operator|*
name|MakeVoidPtr
argument_list|(
argument|data_type d
argument_list|)
block|{
return|return
operator|(
name|void
operator|*
operator|)
operator|(
name|uintptr_t
operator|)
name|d
return|;
block|}
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// Partial specialization for unsigned.
end_comment

begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|ProgramStatePartialTrait
operator|<
name|unsigned
operator|>
block|{
typedef|typedef
name|unsigned
name|data_type
typedef|;
specifier|static
specifier|inline
name|data_type
name|MakeData
argument_list|(
argument|void *const* p
argument_list|)
block|{
return|return
name|p
operator|?
call|(
name|data_type
call|)
argument_list|(
name|uintptr_t
argument_list|)
operator|*
name|p
operator|:
name|data_type
argument_list|()
return|;
block|}
specifier|static
specifier|inline
name|void
operator|*
name|MakeVoidPtr
argument_list|(
argument|data_type d
argument_list|)
block|{
return|return
operator|(
name|void
operator|*
operator|)
operator|(
name|uintptr_t
operator|)
name|d
return|;
block|}
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// Partial specialization for void*.
end_comment

begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|ProgramStatePartialTrait
operator|<
name|void
operator|*
operator|>
block|{
typedef|typedef
name|void
modifier|*
name|data_type
typedef|;
specifier|static
specifier|inline
name|data_type
name|MakeData
argument_list|(
argument|void *const* p
argument_list|)
block|{
return|return
name|p
operator|?
operator|*
name|p
operator|:
name|data_type
argument_list|()
return|;
block|}
specifier|static
specifier|inline
name|void
operator|*
name|MakeVoidPtr
argument_list|(
argument|data_type d
argument_list|)
block|{
return|return
name|d
return|;
block|}
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// Partial specialization for const void *.
end_comment

begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|ProgramStatePartialTrait
operator|<
specifier|const
name|void
operator|*
operator|>
block|{
typedef|typedef
specifier|const
name|void
modifier|*
name|data_type
typedef|;
specifier|static
specifier|inline
name|data_type
name|MakeData
argument_list|(
argument|void * const *p
argument_list|)
block|{
return|return
name|p
operator|?
operator|*
name|p
operator|:
name|data_type
argument_list|()
return|;
block|}
specifier|static
specifier|inline
name|void
operator|*
name|MakeVoidPtr
argument_list|(
argument|data_type d
argument_list|)
block|{
return|return
name|const_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|d
operator|)
return|;
block|}
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// end ento namespace
end_comment

begin_comment
unit|}
comment|// end clang namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

