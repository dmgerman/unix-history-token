begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//==- CoreEngine.h - Path-Sensitive Dataflow Engine ----------------*- C++ -*-//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines a generic engine for intraprocedural, path-sensitive,
end_comment

begin_comment
comment|//  dataflow analysis via graph reachability.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_GR_COREENGINE
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_GR_COREENGINE
end_define

begin_include
include|#
directive|include
file|"clang/AST/Expr.h"
end_include

begin_include
include|#
directive|include
file|"clang/StaticAnalyzer/Core/PathSensitive/ExplodedGraph.h"
end_include

begin_include
include|#
directive|include
file|"clang/StaticAnalyzer/Core/PathSensitive/WorkList.h"
end_include

begin_include
include|#
directive|include
file|"clang/StaticAnalyzer/Core/PathSensitive/BlockCounter.h"
end_include

begin_include
include|#
directive|include
file|"clang/StaticAnalyzer/Core/PathSensitive/SubEngine.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/OwningPtr.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|ento
block|{
comment|//===----------------------------------------------------------------------===//
comment|/// CoreEngine - Implements the core logic of the graph-reachability
comment|///   analysis. It traverses the CFG and generates the ExplodedGraph.
comment|///   Program "states" are treated as opaque void pointers.
comment|///   The template class CoreEngine (which subclasses CoreEngine)
comment|///   provides the matching component to the engine that knows the actual types
comment|///   for states.  Note that this engine only dispatches to transfer functions
comment|///   at the statement and block-level.  The analyses themselves must implement
comment|///   any transfer function logic and the sub-expression level (if any).
name|class
name|CoreEngine
block|{
name|friend
name|class
name|StmtNodeBuilder
decl_stmt|;
name|friend
name|class
name|GenericNodeBuilderImpl
decl_stmt|;
name|friend
name|class
name|BranchNodeBuilder
decl_stmt|;
name|friend
name|class
name|IndirectGotoNodeBuilder
decl_stmt|;
name|friend
name|class
name|SwitchNodeBuilder
decl_stmt|;
name|friend
name|class
name|EndOfFunctionNodeBuilder
decl_stmt|;
name|friend
name|class
name|CallEnterNodeBuilder
decl_stmt|;
name|friend
name|class
name|CallExitNodeBuilder
decl_stmt|;
name|public
label|:
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|pair
operator|<
name|BlockEdge
operator|,
specifier|const
name|ExplodedNode
operator|*
operator|>
expr|>
name|BlocksAborted
expr_stmt|;
name|private
label|:
name|SubEngine
modifier|&
name|SubEng
decl_stmt|;
comment|/// G - The simulation graph.  Each node is a (location,state) pair.
name|llvm
operator|::
name|OwningPtr
operator|<
name|ExplodedGraph
operator|>
name|G
expr_stmt|;
comment|/// WList - A set of queued nodes that need to be processed by the
comment|///  worklist algorithm.  It is up to the implementation of WList to decide
comment|///  the order that nodes are processed.
name|WorkList
modifier|*
name|WList
decl_stmt|;
comment|/// BCounterFactory - A factory object for created BlockCounter objects.
comment|///   These are used to record for key nodes in the ExplodedGraph the
comment|///   number of times different CFGBlocks have been visited along a path.
name|BlockCounter
operator|::
name|Factory
name|BCounterFactory
expr_stmt|;
comment|/// The locations where we stopped doing work because we visited a location
comment|///  too many times.
name|BlocksAborted
name|blocksAborted
decl_stmt|;
name|void
name|generateNode
parameter_list|(
specifier|const
name|ProgramPoint
modifier|&
name|Loc
parameter_list|,
specifier|const
name|GRState
modifier|*
name|State
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|)
function_decl|;
name|void
name|HandleBlockEdge
parameter_list|(
specifier|const
name|BlockEdge
modifier|&
name|E
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|)
function_decl|;
name|void
name|HandleBlockEntrance
parameter_list|(
specifier|const
name|BlockEntrance
modifier|&
name|E
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|)
function_decl|;
name|void
name|HandleBlockExit
parameter_list|(
specifier|const
name|CFGBlock
modifier|*
name|B
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|)
function_decl|;
name|void
name|HandlePostStmt
parameter_list|(
specifier|const
name|CFGBlock
modifier|*
name|B
parameter_list|,
name|unsigned
name|StmtIdx
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|)
function_decl|;
name|void
name|HandleBranch
parameter_list|(
specifier|const
name|Stmt
modifier|*
name|Cond
parameter_list|,
specifier|const
name|Stmt
modifier|*
name|Term
parameter_list|,
specifier|const
name|CFGBlock
modifier|*
name|B
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|)
function_decl|;
name|void
name|HandleCallEnter
parameter_list|(
specifier|const
name|CallEnter
modifier|&
name|L
parameter_list|,
specifier|const
name|CFGBlock
modifier|*
name|Block
parameter_list|,
name|unsigned
name|Index
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|)
function_decl|;
name|void
name|HandleCallExit
parameter_list|(
specifier|const
name|CallExit
modifier|&
name|L
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|)
function_decl|;
name|private
label|:
name|CoreEngine
argument_list|(
specifier|const
name|CoreEngine
operator|&
argument_list|)
expr_stmt|;
comment|// Do not implement.
name|CoreEngine
modifier|&
name|operator
init|=
operator|(
specifier|const
name|CoreEngine
operator|&
operator|)
decl_stmt|;
name|public
label|:
comment|/// Construct a CoreEngine object to analyze the provided CFG using
comment|///  a DFS exploration of the exploded graph.
name|CoreEngine
argument_list|(
name|SubEngine
operator|&
name|subengine
argument_list|)
operator|:
name|SubEng
argument_list|(
name|subengine
argument_list|)
operator|,
name|G
argument_list|(
argument|new ExplodedGraph()
argument_list|)
operator|,
name|WList
argument_list|(
name|WorkList
operator|::
name|makeBFS
argument_list|()
argument_list|)
operator|,
name|BCounterFactory
argument_list|(
argument|G->getAllocator()
argument_list|)
block|{}
comment|/// Construct a CoreEngine object to analyze the provided CFG and to
comment|///  use the provided worklist object to execute the worklist algorithm.
comment|///  The CoreEngine object assumes ownership of 'wlist'.
name|CoreEngine
argument_list|(
name|WorkList
operator|*
name|wlist
argument_list|,
name|SubEngine
operator|&
name|subengine
argument_list|)
operator|:
name|SubEng
argument_list|(
name|subengine
argument_list|)
operator|,
name|G
argument_list|(
argument|new ExplodedGraph()
argument_list|)
operator|,
name|WList
argument_list|(
name|wlist
argument_list|)
operator|,
name|BCounterFactory
argument_list|(
argument|G->getAllocator()
argument_list|)
block|{}
operator|~
name|CoreEngine
argument_list|()
block|{
name|delete
name|WList
block|;   }
comment|/// getGraph - Returns the exploded graph.
name|ExplodedGraph
operator|&
name|getGraph
argument_list|()
block|{
return|return
operator|*
name|G
operator|.
name|get
argument_list|()
return|;
block|}
comment|/// takeGraph - Returns the exploded graph.  Ownership of the graph is
comment|///  transfered to the caller.
name|ExplodedGraph
modifier|*
name|takeGraph
parameter_list|()
block|{
return|return
name|G
operator|.
name|take
argument_list|()
return|;
block|}
comment|/// ExecuteWorkList - Run the worklist algorithm for a maximum number of
comment|///  steps.  Returns true if there is still simulation state on the worklist.
name|bool
name|ExecuteWorkList
parameter_list|(
specifier|const
name|LocationContext
modifier|*
name|L
parameter_list|,
name|unsigned
name|Steps
parameter_list|,
specifier|const
name|GRState
modifier|*
name|InitState
parameter_list|)
function_decl|;
name|void
name|ExecuteWorkListWithInitialState
parameter_list|(
specifier|const
name|LocationContext
modifier|*
name|L
parameter_list|,
name|unsigned
name|Steps
parameter_list|,
specifier|const
name|GRState
modifier|*
name|InitState
parameter_list|,
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|)
function_decl|;
comment|// Functions for external checking of whether we have unfinished work
name|bool
name|wasBlockAborted
argument_list|()
specifier|const
block|{
return|return
operator|!
name|blocksAborted
operator|.
name|empty
argument_list|()
return|;
block|}
name|bool
name|hasWorkRemaining
argument_list|()
specifier|const
block|{
return|return
name|wasBlockAborted
argument_list|()
operator|||
name|WList
operator|->
name|hasWork
argument_list|()
return|;
block|}
name|WorkList
operator|*
name|getWorkList
argument_list|()
specifier|const
block|{
return|return
name|WList
return|;
block|}
name|BlocksAborted
operator|::
name|const_iterator
name|blocks_aborted_begin
argument_list|()
specifier|const
block|{
return|return
name|blocksAborted
operator|.
name|begin
argument_list|()
return|;
block|}
name|BlocksAborted
operator|::
name|const_iterator
name|blocks_aborted_end
argument_list|()
specifier|const
block|{
return|return
name|blocksAborted
operator|.
name|end
argument_list|()
return|;
block|}
block|}
empty_stmt|;
name|class
name|StmtNodeBuilder
block|{
name|CoreEngine
modifier|&
name|Eng
decl_stmt|;
specifier|const
name|CFGBlock
modifier|&
name|B
decl_stmt|;
specifier|const
name|unsigned
name|Idx
decl_stmt|;
name|ExplodedNode
modifier|*
name|Pred
decl_stmt|;
name|GRStateManager
modifier|&
name|Mgr
decl_stmt|;
name|public
label|:
name|bool
name|PurgingDeadSymbols
decl_stmt|;
name|bool
name|BuildSinks
decl_stmt|;
name|bool
name|hasGeneratedNode
decl_stmt|;
name|ProgramPoint
operator|::
name|Kind
name|PointKind
expr_stmt|;
specifier|const
name|void
modifier|*
name|Tag
decl_stmt|;
specifier|const
name|GRState
modifier|*
name|CleanedState
decl_stmt|;
typedef|typedef
name|llvm
operator|::
name|SmallPtrSet
operator|<
name|ExplodedNode
operator|*
operator|,
literal|5
operator|>
name|DeferredTy
expr_stmt|;
name|DeferredTy
name|Deferred
decl_stmt|;
name|void
name|GenerateAutoTransition
parameter_list|(
name|ExplodedNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|public
label|:
name|StmtNodeBuilder
argument_list|(
argument|const CFGBlock* b
argument_list|,
argument|unsigned idx
argument_list|,
argument|ExplodedNode* N
argument_list|,
argument|CoreEngine* e
argument_list|,
argument|GRStateManager&mgr
argument_list|)
empty_stmt|;
operator|~
name|StmtNodeBuilder
argument_list|()
expr_stmt|;
name|ExplodedNode
operator|*
name|getPredecessor
argument_list|()
specifier|const
block|{
return|return
name|Pred
return|;
block|}
comment|// FIXME: This should not be exposed.
name|WorkList
modifier|*
name|getWorkList
parameter_list|()
block|{
return|return
name|Eng
operator|.
name|WList
return|;
block|}
name|void
name|SetCleanedState
parameter_list|(
specifier|const
name|GRState
modifier|*
name|St
parameter_list|)
block|{
name|CleanedState
operator|=
name|St
expr_stmt|;
block|}
name|BlockCounter
name|getBlockCounter
argument_list|()
specifier|const
block|{
return|return
name|Eng
operator|.
name|WList
operator|->
name|getBlockCounter
argument_list|()
return|;
block|}
name|unsigned
name|getCurrentBlockCount
argument_list|()
specifier|const
block|{
return|return
name|getBlockCounter
argument_list|()
operator|.
name|getNumVisited
argument_list|(
name|Pred
operator|->
name|getLocationContext
argument_list|()
operator|->
name|getCurrentStackFrame
argument_list|()
argument_list|,
name|B
operator|.
name|getBlockID
argument_list|()
argument_list|)
return|;
block|}
name|ExplodedNode
modifier|*
name|generateNode
parameter_list|(
name|PostStmt
name|PP
parameter_list|,
specifier|const
name|GRState
modifier|*
name|St
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|)
block|{
name|hasGeneratedNode
operator|=
name|true
expr_stmt|;
return|return
name|generateNodeInternal
argument_list|(
name|PP
argument_list|,
name|St
argument_list|,
name|Pred
argument_list|)
return|;
block|}
name|ExplodedNode
modifier|*
name|generateNode
argument_list|(
specifier|const
name|Stmt
operator|*
name|S
argument_list|,
specifier|const
name|GRState
operator|*
name|St
argument_list|,
name|ExplodedNode
operator|*
name|Pred
argument_list|,
name|ProgramPoint
operator|::
name|Kind
name|K
argument_list|,
specifier|const
name|void
operator|*
name|tag
operator|=
literal|0
argument_list|)
block|{
name|hasGeneratedNode
operator|=
name|true
expr_stmt|;
if|if
condition|(
name|PurgingDeadSymbols
condition|)
name|K
operator|=
name|ProgramPoint
operator|::
name|PostPurgeDeadSymbolsKind
expr_stmt|;
return|return
name|generateNodeInternal
argument_list|(
name|S
argument_list|,
name|St
argument_list|,
name|Pred
argument_list|,
name|K
argument_list|,
name|tag
condition|?
name|tag
else|:
name|Tag
argument_list|)
return|;
block|}
name|ExplodedNode
modifier|*
name|generateNode
parameter_list|(
specifier|const
name|Stmt
modifier|*
name|S
parameter_list|,
specifier|const
name|GRState
modifier|*
name|St
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
specifier|const
name|void
modifier|*
name|tag
init|=
literal|0
parameter_list|)
block|{
return|return
name|generateNode
argument_list|(
name|S
argument_list|,
name|St
argument_list|,
name|Pred
argument_list|,
name|PointKind
argument_list|,
name|tag
argument_list|)
return|;
block|}
name|ExplodedNode
modifier|*
name|generateNode
parameter_list|(
specifier|const
name|ProgramPoint
modifier|&
name|PP
parameter_list|,
specifier|const
name|GRState
modifier|*
name|State
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|)
block|{
name|hasGeneratedNode
operator|=
name|true
expr_stmt|;
return|return
name|generateNodeInternal
argument_list|(
name|PP
argument_list|,
name|State
argument_list|,
name|Pred
argument_list|)
return|;
block|}
name|ExplodedNode
modifier|*
name|generateNodeInternal
parameter_list|(
specifier|const
name|ProgramPoint
modifier|&
name|PP
parameter_list|,
specifier|const
name|GRState
modifier|*
name|State
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|)
function_decl|;
name|ExplodedNode
modifier|*
name|generateNodeInternal
argument_list|(
specifier|const
name|Stmt
operator|*
name|S
argument_list|,
specifier|const
name|GRState
operator|*
name|State
argument_list|,
name|ExplodedNode
operator|*
name|Pred
argument_list|,
name|ProgramPoint
operator|::
name|Kind
name|K
operator|=
name|ProgramPoint
operator|::
name|PostStmtKind
argument_list|,
specifier|const
name|void
operator|*
name|tag
operator|=
literal|0
argument_list|)
decl_stmt|;
comment|/// getStmt - Return the current block-level expression associated with
comment|///  this builder.
specifier|const
name|Stmt
operator|*
name|getStmt
argument_list|()
specifier|const
block|{
name|CFGStmt
name|CS
operator|=
name|B
index|[
name|Idx
index|]
operator|.
name|getAs
operator|<
name|CFGStmt
operator|>
operator|(
operator|)
block|;
if|if
condition|(
name|CS
condition|)
return|return
name|CS
operator|.
name|getStmt
argument_list|()
return|;
else|else
return|return
literal|0
return|;
block|}
comment|/// getBlock - Return the CFGBlock associated with the block-level expression
comment|///  of this builder.
specifier|const
name|CFGBlock
operator|*
name|getBlock
argument_list|()
specifier|const
block|{
return|return
operator|&
name|B
return|;
block|}
name|unsigned
name|getIndex
argument_list|()
specifier|const
block|{
return|return
name|Idx
return|;
block|}
specifier|const
name|GRState
modifier|*
name|GetState
argument_list|(
name|ExplodedNode
operator|*
name|Pred
argument_list|)
decl|const
block|{
if|if
condition|(
name|Pred
operator|==
name|getPredecessor
argument_list|()
condition|)
return|return
name|CleanedState
return|;
else|else
return|return
name|Pred
operator|->
name|getState
argument_list|()
return|;
block|}
name|ExplodedNode
modifier|*
name|MakeNode
parameter_list|(
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|,
specifier|const
name|Stmt
modifier|*
name|S
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
specifier|const
name|GRState
modifier|*
name|St
parameter_list|)
block|{
return|return
name|MakeNode
argument_list|(
name|Dst
argument_list|,
name|S
argument_list|,
name|Pred
argument_list|,
name|St
argument_list|,
name|PointKind
argument_list|)
return|;
block|}
name|ExplodedNode
modifier|*
name|MakeNode
argument_list|(
name|ExplodedNodeSet
operator|&
name|Dst
argument_list|,
specifier|const
name|Stmt
operator|*
name|S
argument_list|,
name|ExplodedNode
operator|*
name|Pred
argument_list|,
specifier|const
name|GRState
operator|*
name|St
argument_list|,
name|ProgramPoint
operator|::
name|Kind
name|K
argument_list|)
decl_stmt|;
name|ExplodedNode
modifier|*
name|MakeSinkNode
parameter_list|(
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|,
specifier|const
name|Stmt
modifier|*
name|S
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
specifier|const
name|GRState
modifier|*
name|St
parameter_list|)
block|{
name|bool
name|Tmp
init|=
name|BuildSinks
decl_stmt|;
name|BuildSinks
operator|=
name|true
expr_stmt|;
name|ExplodedNode
modifier|*
name|N
init|=
name|MakeNode
argument_list|(
name|Dst
argument_list|,
name|S
argument_list|,
name|Pred
argument_list|,
name|St
argument_list|)
decl_stmt|;
name|BuildSinks
operator|=
name|Tmp
expr_stmt|;
return|return
name|N
return|;
block|}
block|}
empty_stmt|;
name|class
name|BranchNodeBuilder
block|{
name|CoreEngine
modifier|&
name|Eng
decl_stmt|;
specifier|const
name|CFGBlock
modifier|*
name|Src
decl_stmt|;
specifier|const
name|CFGBlock
modifier|*
name|DstT
decl_stmt|;
specifier|const
name|CFGBlock
modifier|*
name|DstF
decl_stmt|;
name|ExplodedNode
modifier|*
name|Pred
decl_stmt|;
typedef|typedef
name|llvm
operator|::
name|SmallVector
operator|<
name|ExplodedNode
operator|*
operator|,
literal|3
operator|>
name|DeferredTy
expr_stmt|;
name|DeferredTy
name|Deferred
decl_stmt|;
name|bool
name|GeneratedTrue
decl_stmt|;
name|bool
name|GeneratedFalse
decl_stmt|;
name|bool
name|InFeasibleTrue
decl_stmt|;
name|bool
name|InFeasibleFalse
decl_stmt|;
name|public
label|:
name|BranchNodeBuilder
argument_list|(
specifier|const
name|CFGBlock
operator|*
name|src
argument_list|,
specifier|const
name|CFGBlock
operator|*
name|dstT
argument_list|,
specifier|const
name|CFGBlock
operator|*
name|dstF
argument_list|,
name|ExplodedNode
operator|*
name|pred
argument_list|,
name|CoreEngine
operator|*
name|e
argument_list|)
operator|:
name|Eng
argument_list|(
operator|*
name|e
argument_list|)
operator|,
name|Src
argument_list|(
name|src
argument_list|)
operator|,
name|DstT
argument_list|(
name|dstT
argument_list|)
operator|,
name|DstF
argument_list|(
name|dstF
argument_list|)
operator|,
name|Pred
argument_list|(
name|pred
argument_list|)
operator|,
name|GeneratedTrue
argument_list|(
name|false
argument_list|)
operator|,
name|GeneratedFalse
argument_list|(
name|false
argument_list|)
operator|,
name|InFeasibleTrue
argument_list|(
operator|!
name|DstT
argument_list|)
operator|,
name|InFeasibleFalse
argument_list|(
argument|!DstF
argument_list|)
block|{}
operator|~
name|BranchNodeBuilder
argument_list|()
expr_stmt|;
name|ExplodedNode
operator|*
name|getPredecessor
argument_list|()
specifier|const
block|{
return|return
name|Pred
return|;
block|}
specifier|const
name|ExplodedGraph
operator|&
name|getGraph
argument_list|()
specifier|const
block|{
return|return
operator|*
name|Eng
operator|.
name|G
return|;
block|}
name|BlockCounter
name|getBlockCounter
argument_list|()
specifier|const
block|{
return|return
name|Eng
operator|.
name|WList
operator|->
name|getBlockCounter
argument_list|()
return|;
block|}
name|ExplodedNode
modifier|*
name|generateNode
parameter_list|(
specifier|const
name|GRState
modifier|*
name|State
parameter_list|,
name|bool
name|branch
parameter_list|)
function_decl|;
specifier|const
name|CFGBlock
modifier|*
name|getTargetBlock
argument_list|(
name|bool
name|branch
argument_list|)
decl|const
block|{
return|return
name|branch
condition|?
name|DstT
else|:
name|DstF
return|;
block|}
name|void
name|markInfeasible
parameter_list|(
name|bool
name|branch
parameter_list|)
block|{
if|if
condition|(
name|branch
condition|)
name|InFeasibleTrue
operator|=
name|GeneratedTrue
operator|=
name|true
expr_stmt|;
else|else
name|InFeasibleFalse
operator|=
name|GeneratedFalse
operator|=
name|true
expr_stmt|;
block|}
name|bool
name|isFeasible
parameter_list|(
name|bool
name|branch
parameter_list|)
block|{
return|return
name|branch
condition|?
operator|!
name|InFeasibleTrue
else|:
operator|!
name|InFeasibleFalse
return|;
block|}
specifier|const
name|GRState
operator|*
name|getState
argument_list|()
specifier|const
block|{
return|return
name|getPredecessor
argument_list|()
operator|->
name|getState
argument_list|()
return|;
block|}
block|}
empty_stmt|;
name|class
name|IndirectGotoNodeBuilder
block|{
name|CoreEngine
modifier|&
name|Eng
decl_stmt|;
specifier|const
name|CFGBlock
modifier|*
name|Src
decl_stmt|;
specifier|const
name|CFGBlock
modifier|&
name|DispatchBlock
decl_stmt|;
specifier|const
name|Expr
modifier|*
name|E
decl_stmt|;
name|ExplodedNode
modifier|*
name|Pred
decl_stmt|;
name|public
label|:
name|IndirectGotoNodeBuilder
argument_list|(
name|ExplodedNode
operator|*
name|pred
argument_list|,
specifier|const
name|CFGBlock
operator|*
name|src
argument_list|,
specifier|const
name|Expr
operator|*
name|e
argument_list|,
specifier|const
name|CFGBlock
operator|*
name|dispatch
argument_list|,
name|CoreEngine
operator|*
name|eng
argument_list|)
operator|:
name|Eng
argument_list|(
operator|*
name|eng
argument_list|)
operator|,
name|Src
argument_list|(
name|src
argument_list|)
operator|,
name|DispatchBlock
argument_list|(
operator|*
name|dispatch
argument_list|)
operator|,
name|E
argument_list|(
name|e
argument_list|)
operator|,
name|Pred
argument_list|(
argument|pred
argument_list|)
block|{}
name|class
name|iterator
block|{
name|CFGBlock
operator|::
name|const_succ_iterator
name|I
block|;
name|friend
name|class
name|IndirectGotoNodeBuilder
block|;
name|iterator
argument_list|(
argument|CFGBlock::const_succ_iterator i
argument_list|)
operator|:
name|I
argument_list|(
argument|i
argument_list|)
block|{}
name|public
operator|:
name|iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|I
block|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|iterator
operator|&
name|X
operator|)
specifier|const
block|{
return|return
name|I
operator|!=
name|X
operator|.
name|I
return|;
block|}
specifier|const
name|LabelDecl
operator|*
name|getLabel
argument_list|()
specifier|const
block|{
return|return
name|llvm
operator|::
name|cast
operator|<
name|LabelStmt
operator|>
operator|(
operator|(
operator|*
name|I
operator|)
operator|->
name|getLabel
argument_list|()
operator|)
operator|->
name|getDecl
argument_list|()
return|;
block|}
specifier|const
name|CFGBlock
operator|*
name|getBlock
argument_list|()
specifier|const
block|{
return|return
operator|*
name|I
return|;
block|}
expr|}
block|;
name|iterator
name|begin
argument_list|()
block|{
return|return
name|iterator
argument_list|(
name|DispatchBlock
operator|.
name|succ_begin
argument_list|()
argument_list|)
return|;
block|}
name|iterator
name|end
argument_list|()
block|{
return|return
name|iterator
argument_list|(
name|DispatchBlock
operator|.
name|succ_end
argument_list|()
argument_list|)
return|;
block|}
name|ExplodedNode
operator|*
name|generateNode
argument_list|(
argument|const iterator& I
argument_list|,
argument|const GRState* State
argument_list|,
argument|bool isSink = false
argument_list|)
block|;
specifier|const
name|Expr
operator|*
name|getTarget
argument_list|()
specifier|const
block|{
return|return
name|E
return|;
block|}
specifier|const
name|GRState
operator|*
name|getState
argument_list|()
specifier|const
block|{
return|return
name|Pred
operator|->
name|State
return|;
block|}
expr|}
block|;
name|class
name|SwitchNodeBuilder
block|{
name|CoreEngine
operator|&
name|Eng
block|;
specifier|const
name|CFGBlock
operator|*
name|Src
block|;
specifier|const
name|Expr
operator|*
name|Condition
block|;
name|ExplodedNode
operator|*
name|Pred
block|;
name|public
operator|:
name|SwitchNodeBuilder
argument_list|(
name|ExplodedNode
operator|*
name|pred
argument_list|,
specifier|const
name|CFGBlock
operator|*
name|src
argument_list|,
specifier|const
name|Expr
operator|*
name|condition
argument_list|,
name|CoreEngine
operator|*
name|eng
argument_list|)
operator|:
name|Eng
argument_list|(
operator|*
name|eng
argument_list|)
block|,
name|Src
argument_list|(
name|src
argument_list|)
block|,
name|Condition
argument_list|(
name|condition
argument_list|)
block|,
name|Pred
argument_list|(
argument|pred
argument_list|)
block|{}
name|class
name|iterator
block|{
name|CFGBlock
operator|::
name|const_succ_reverse_iterator
name|I
block|;
name|friend
name|class
name|SwitchNodeBuilder
block|;
name|iterator
argument_list|(
argument|CFGBlock::const_succ_reverse_iterator i
argument_list|)
operator|:
name|I
argument_list|(
argument|i
argument_list|)
block|{}
name|public
operator|:
name|iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|I
block|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|iterator
operator|&
name|X
operator|)
specifier|const
block|{
return|return
name|I
operator|!=
name|X
operator|.
name|I
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|iterator
operator|&
name|X
operator|)
specifier|const
block|{
return|return
name|I
operator|==
name|X
operator|.
name|I
return|;
block|}
specifier|const
name|CaseStmt
operator|*
name|getCase
argument_list|()
specifier|const
block|{
return|return
name|llvm
operator|::
name|cast
operator|<
name|CaseStmt
operator|>
operator|(
operator|(
operator|*
name|I
operator|)
operator|->
name|getLabel
argument_list|()
operator|)
return|;
block|}
specifier|const
name|CFGBlock
operator|*
name|getBlock
argument_list|()
specifier|const
block|{
return|return
operator|*
name|I
return|;
block|}
expr|}
block|;
name|iterator
name|begin
argument_list|()
block|{
return|return
name|iterator
argument_list|(
name|Src
operator|->
name|succ_rbegin
argument_list|()
operator|+
literal|1
argument_list|)
return|;
block|}
name|iterator
name|end
argument_list|()
block|{
return|return
name|iterator
argument_list|(
name|Src
operator|->
name|succ_rend
argument_list|()
argument_list|)
return|;
block|}
specifier|const
name|SwitchStmt
operator|*
name|getSwitch
argument_list|()
specifier|const
block|{
return|return
name|llvm
operator|::
name|cast
operator|<
name|SwitchStmt
operator|>
operator|(
name|Src
operator|->
name|getTerminator
argument_list|()
operator|)
return|;
block|}
name|ExplodedNode
operator|*
name|generateCaseStmtNode
argument_list|(
specifier|const
name|iterator
operator|&
name|I
argument_list|,
specifier|const
name|GRState
operator|*
name|State
argument_list|)
block|;
name|ExplodedNode
operator|*
name|generateDefaultCaseNode
argument_list|(
argument|const GRState* State
argument_list|,
argument|bool isSink = false
argument_list|)
block|;
specifier|const
name|Expr
operator|*
name|getCondition
argument_list|()
specifier|const
block|{
return|return
name|Condition
return|;
block|}
specifier|const
name|GRState
operator|*
name|getState
argument_list|()
specifier|const
block|{
return|return
name|Pred
operator|->
name|State
return|;
block|}
expr|}
block|;
name|class
name|GenericNodeBuilderImpl
block|{
name|protected
operator|:
name|CoreEngine
operator|&
name|engine
block|;
name|ExplodedNode
operator|*
name|pred
block|;
name|ProgramPoint
name|pp
block|;
name|llvm
operator|::
name|SmallVector
operator|<
name|ExplodedNode
operator|*
block|,
literal|2
operator|>
name|sinksGenerated
block|;
name|ExplodedNode
operator|*
name|generateNodeImpl
argument_list|(
argument|const GRState *state
argument_list|,
argument|ExplodedNode *pred
argument_list|,
argument|ProgramPoint programPoint
argument_list|,
argument|bool asSink
argument_list|)
block|;
name|GenericNodeBuilderImpl
argument_list|(
argument|CoreEngine&eng
argument_list|,
argument|ExplodedNode *pr
argument_list|,
argument|ProgramPoint p
argument_list|)
operator|:
name|engine
argument_list|(
name|eng
argument_list|)
block|,
name|pred
argument_list|(
name|pr
argument_list|)
block|,
name|pp
argument_list|(
name|p
argument_list|)
block|,
name|hasGeneratedNode
argument_list|(
argument|false
argument_list|)
block|{}
name|public
operator|:
name|bool
name|hasGeneratedNode
block|;
name|WorkList
operator|&
name|getWorkList
argument_list|()
block|{
return|return
operator|*
name|engine
operator|.
name|WList
return|;
block|}
name|ExplodedNode
operator|*
name|getPredecessor
argument_list|()
specifier|const
block|{
return|return
name|pred
return|;
block|}
name|BlockCounter
name|getBlockCounter
argument_list|()
specifier|const
block|{
return|return
name|engine
operator|.
name|WList
operator|->
name|getBlockCounter
argument_list|()
return|;
block|}
specifier|const
name|llvm
operator|::
name|SmallVectorImpl
operator|<
name|ExplodedNode
operator|*
operator|>
operator|&
name|sinks
argument_list|()
specifier|const
block|{
return|return
name|sinksGenerated
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|PP_T
operator|>
name|class
name|GenericNodeBuilder
operator|:
name|public
name|GenericNodeBuilderImpl
block|{
name|public
operator|:
name|GenericNodeBuilder
argument_list|(
name|CoreEngine
operator|&
name|eng
argument_list|,
name|ExplodedNode
operator|*
name|pr
argument_list|,
specifier|const
name|PP_T
operator|&
name|p
argument_list|)
operator|:
name|GenericNodeBuilderImpl
argument_list|(
argument|eng
argument_list|,
argument|pr
argument_list|,
argument|p
argument_list|)
block|{}
name|ExplodedNode
operator|*
name|generateNode
argument_list|(
argument|const GRState *state
argument_list|,
argument|ExplodedNode *pred
argument_list|,
argument|const void *tag
argument_list|,
argument|bool asSink
argument_list|)
block|{
return|return
name|generateNodeImpl
argument_list|(
name|state
argument_list|,
name|pred
argument_list|,
name|cast
operator|<
name|PP_T
operator|>
operator|(
name|pp
operator|)
operator|.
name|withTag
argument_list|(
name|tag
argument_list|)
argument_list|,
name|asSink
argument_list|)
return|;
block|}
specifier|const
name|PP_T
operator|&
name|getProgramPoint
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|PP_T
operator|>
operator|(
name|pp
operator|)
return|;
block|}
expr|}
block|;
name|class
name|EndOfFunctionNodeBuilder
block|{
name|CoreEngine
operator|&
name|Eng
block|;
specifier|const
name|CFGBlock
operator|&
name|B
block|;
name|ExplodedNode
operator|*
name|Pred
block|;
name|void
operator|*
name|Tag
block|;
name|public
operator|:
name|bool
name|hasGeneratedNode
block|;
name|public
operator|:
name|EndOfFunctionNodeBuilder
argument_list|(
specifier|const
name|CFGBlock
operator|*
name|b
argument_list|,
name|ExplodedNode
operator|*
name|N
argument_list|,
name|CoreEngine
operator|*
name|e
argument_list|,
name|void
operator|*
name|checkerTag
operator|=
literal|0
argument_list|)
operator|:
name|Eng
argument_list|(
operator|*
name|e
argument_list|)
block|,
name|B
argument_list|(
operator|*
name|b
argument_list|)
block|,
name|Pred
argument_list|(
name|N
argument_list|)
block|,
name|Tag
argument_list|(
name|checkerTag
argument_list|)
block|,
name|hasGeneratedNode
argument_list|(
argument|false
argument_list|)
block|{}
operator|~
name|EndOfFunctionNodeBuilder
argument_list|()
block|;
name|EndOfFunctionNodeBuilder
name|withCheckerTag
argument_list|(
argument|void *tag
argument_list|)
block|{
return|return
name|EndOfFunctionNodeBuilder
argument_list|(
operator|&
name|B
argument_list|,
name|Pred
argument_list|,
operator|&
name|Eng
argument_list|,
name|tag
argument_list|)
return|;
block|}
name|WorkList
operator|&
name|getWorkList
argument_list|()
block|{
return|return
operator|*
name|Eng
operator|.
name|WList
return|;
block|}
name|ExplodedNode
operator|*
name|getPredecessor
argument_list|()
specifier|const
block|{
return|return
name|Pred
return|;
block|}
name|BlockCounter
name|getBlockCounter
argument_list|()
specifier|const
block|{
return|return
name|Eng
operator|.
name|WList
operator|->
name|getBlockCounter
argument_list|()
return|;
block|}
name|unsigned
name|getCurrentBlockCount
argument_list|()
specifier|const
block|{
return|return
name|getBlockCounter
argument_list|()
operator|.
name|getNumVisited
argument_list|(
name|Pred
operator|->
name|getLocationContext
argument_list|()
operator|->
name|getCurrentStackFrame
argument_list|()
argument_list|,
name|B
operator|.
name|getBlockID
argument_list|()
argument_list|)
return|;
block|}
name|ExplodedNode
operator|*
name|generateNode
argument_list|(
specifier|const
name|GRState
operator|*
name|State
argument_list|,
name|ExplodedNode
operator|*
name|P
operator|=
literal|0
argument_list|,
specifier|const
name|void
operator|*
name|tag
operator|=
literal|0
argument_list|)
block|;
name|void
name|GenerateCallExitNode
argument_list|(
specifier|const
name|GRState
operator|*
name|state
argument_list|)
block|;
specifier|const
name|CFGBlock
operator|*
name|getBlock
argument_list|()
specifier|const
block|{
return|return
operator|&
name|B
return|;
block|}
specifier|const
name|GRState
operator|*
name|getState
argument_list|()
specifier|const
block|{
return|return
name|getPredecessor
argument_list|()
operator|->
name|getState
argument_list|()
return|;
block|}
expr|}
block|;
name|class
name|CallEnterNodeBuilder
block|{
name|CoreEngine
operator|&
name|Eng
block|;
specifier|const
name|ExplodedNode
operator|*
name|Pred
block|;
comment|// The call site. For implicit automatic object dtor, this is the trigger
comment|// statement.
specifier|const
name|Stmt
operator|*
name|CE
block|;
comment|// The context of the callee.
specifier|const
name|StackFrameContext
operator|*
name|CalleeCtx
block|;
comment|// The parent block of the CallExpr.
specifier|const
name|CFGBlock
operator|*
name|Block
block|;
comment|// The CFGBlock index of the CallExpr.
name|unsigned
name|Index
block|;
name|public
operator|:
name|CallEnterNodeBuilder
argument_list|(
argument|CoreEngine&eng
argument_list|,
argument|const ExplodedNode *pred
argument_list|,
argument|const Stmt *s
argument_list|,
argument|const StackFrameContext *callee
argument_list|,
argument|const CFGBlock *blk
argument_list|,
argument|unsigned idx
argument_list|)
operator|:
name|Eng
argument_list|(
name|eng
argument_list|)
block|,
name|Pred
argument_list|(
name|pred
argument_list|)
block|,
name|CE
argument_list|(
name|s
argument_list|)
block|,
name|CalleeCtx
argument_list|(
name|callee
argument_list|)
block|,
name|Block
argument_list|(
name|blk
argument_list|)
block|,
name|Index
argument_list|(
argument|idx
argument_list|)
block|{}
specifier|const
name|GRState
operator|*
name|getState
argument_list|()
specifier|const
block|{
return|return
name|Pred
operator|->
name|getState
argument_list|()
return|;
block|}
specifier|const
name|LocationContext
operator|*
name|getLocationContext
argument_list|()
specifier|const
block|{
return|return
name|Pred
operator|->
name|getLocationContext
argument_list|()
return|;
block|}
specifier|const
name|Stmt
operator|*
name|getCallExpr
argument_list|()
specifier|const
block|{
return|return
name|CE
return|;
block|}
specifier|const
name|StackFrameContext
operator|*
name|getCalleeContext
argument_list|()
specifier|const
block|{
return|return
name|CalleeCtx
return|;
block|}
specifier|const
name|CFGBlock
operator|*
name|getBlock
argument_list|()
specifier|const
block|{
return|return
name|Block
return|;
block|}
name|unsigned
name|getIndex
argument_list|()
specifier|const
block|{
return|return
name|Index
return|;
block|}
name|void
name|generateNode
argument_list|(
specifier|const
name|GRState
operator|*
name|state
argument_list|)
block|; }
block|;
name|class
name|CallExitNodeBuilder
block|{
name|CoreEngine
operator|&
name|Eng
block|;
specifier|const
name|ExplodedNode
operator|*
name|Pred
block|;
name|public
operator|:
name|CallExitNodeBuilder
argument_list|(
name|CoreEngine
operator|&
name|eng
argument_list|,
specifier|const
name|ExplodedNode
operator|*
name|pred
argument_list|)
operator|:
name|Eng
argument_list|(
name|eng
argument_list|)
block|,
name|Pred
argument_list|(
argument|pred
argument_list|)
block|{}
specifier|const
name|ExplodedNode
operator|*
name|getPredecessor
argument_list|()
specifier|const
block|{
return|return
name|Pred
return|;
block|}
specifier|const
name|GRState
operator|*
name|getState
argument_list|()
specifier|const
block|{
return|return
name|Pred
operator|->
name|getState
argument_list|()
return|;
block|}
name|void
name|generateNode
argument_list|(
specifier|const
name|GRState
operator|*
name|state
argument_list|)
block|; }
block|;   }
comment|// end GR namespace
block|}
end_decl_stmt

begin_comment
comment|// end clang namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

