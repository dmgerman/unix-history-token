begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//==-- CGFunctionInfo.h - Representation of function argument/return types -==//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Defines CGFunctionInfo and associated types used in representing the
end_comment

begin_comment
comment|// LLVM source types and ABI-coerced types for function arguments and
end_comment

begin_comment
comment|// return values.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_CODEGEN_CGFUNCTIONINFO_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_CODEGEN_CGFUNCTIONINFO_H
end_define

begin_include
include|#
directive|include
file|"clang/AST/Attr.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/CanonicalType.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/CharUnits.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/Decl.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/Type.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/DerivedTypes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/FoldingSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/TrailingObjects.h"
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|CodeGen
block|{
comment|/// ABIArgInfo - Helper class to encapsulate information about how a
comment|/// specific C type should be passed to or returned from a function.
name|class
name|ABIArgInfo
block|{
name|public
label|:
enum|enum
name|Kind
enum|:
name|uint8_t
block|{
comment|/// Direct - Pass the argument directly using the normal converted LLVM
comment|/// type, or by coercing to another specified type stored in
comment|/// 'CoerceToType').  If an offset is specified (in UIntData), then the
comment|/// argument passed is offset by some number of bytes in the memory
comment|/// representation. A dummy argument is emitted before the real argument
comment|/// if the specified type stored in "PaddingType" is not zero.
name|Direct
block|,
comment|/// Extend - Valid only for integer argument types. Same as 'direct'
comment|/// but also emit a zero/sign extension attribute.
name|Extend
block|,
comment|/// Indirect - Pass the argument indirectly via a hidden pointer
comment|/// with the specified alignment (0 indicates default alignment).
name|Indirect
block|,
comment|/// Ignore - Ignore the argument (treat as void). Useful for void and
comment|/// empty structs.
name|Ignore
block|,
comment|/// Expand - Only valid for aggregate argument types. The structure should
comment|/// be expanded into consecutive arguments for its constituent fields.
comment|/// Currently expand is only allowed on structures whose fields
comment|/// are all scalar types or are themselves expandable types.
name|Expand
block|,
comment|/// CoerceAndExpand - Only valid for aggregate argument types. The
comment|/// structure should be expanded into consecutive arguments corresponding
comment|/// to the non-array elements of the type stored in CoerceToType.
comment|/// Array elements in the type are assumed to be padding and skipped.
name|CoerceAndExpand
block|,
comment|/// InAlloca - Pass the argument directly using the LLVM inalloca attribute.
comment|/// This is similar to indirect with byval, except it only applies to
comment|/// arguments stored in memory and forbids any implicit copies.  When
comment|/// applied to a return type, it means the value is returned indirectly via
comment|/// an implicit sret parameter stored in the argument struct.
name|InAlloca
block|,
name|KindFirst
init|=
name|Direct
block|,
name|KindLast
init|=
name|InAlloca
block|}
enum|;
name|private
label|:
name|llvm
operator|::
name|Type
operator|*
name|TypeData
expr_stmt|;
comment|// canHaveCoerceToType()
union|union
block|{
name|llvm
operator|::
name|Type
operator|*
name|PaddingType
expr_stmt|;
comment|// canHavePaddingType()
name|llvm
operator|::
name|Type
operator|*
name|UnpaddedCoerceAndExpandType
expr_stmt|;
comment|// isCoerceAndExpand()
block|}
union|;
union|union
block|{
name|unsigned
name|DirectOffset
decl_stmt|;
comment|// isDirect() || isExtend()
name|unsigned
name|IndirectAlign
decl_stmt|;
comment|// isIndirect()
name|unsigned
name|AllocaFieldIndex
decl_stmt|;
comment|// isInAlloca()
block|}
union|;
name|Kind
name|TheKind
decl_stmt|;
name|bool
name|PaddingInReg
range|:
literal|1
decl_stmt|;
name|bool
name|InAllocaSRet
range|:
literal|1
decl_stmt|;
comment|// isInAlloca()
name|bool
name|IndirectByVal
range|:
literal|1
decl_stmt|;
comment|// isIndirect()
name|bool
name|IndirectRealign
range|:
literal|1
decl_stmt|;
comment|// isIndirect()
name|bool
name|SRetAfterThis
range|:
literal|1
decl_stmt|;
comment|// isIndirect()
name|bool
name|InReg
range|:
literal|1
decl_stmt|;
comment|// isDirect() || isExtend() || isIndirect()
name|bool
name|CanBeFlattened
range|:
literal|1
decl_stmt|;
comment|// isDirect()
name|bool
name|canHavePaddingType
argument_list|()
specifier|const
block|{
return|return
name|isDirect
argument_list|()
operator|||
name|isExtend
argument_list|()
operator|||
name|isIndirect
argument_list|()
operator|||
name|isExpand
argument_list|()
return|;
block|}
name|void
name|setPaddingType
argument_list|(
name|llvm
operator|::
name|Type
operator|*
name|T
argument_list|)
block|{
name|assert
argument_list|(
name|canHavePaddingType
argument_list|()
argument_list|)
expr_stmt|;
name|PaddingType
operator|=
name|T
expr_stmt|;
block|}
name|void
name|setUnpaddedCoerceToType
argument_list|(
name|llvm
operator|::
name|Type
operator|*
name|T
argument_list|)
block|{
name|assert
argument_list|(
name|isCoerceAndExpand
argument_list|()
argument_list|)
expr_stmt|;
name|UnpaddedCoerceAndExpandType
operator|=
name|T
expr_stmt|;
block|}
name|ABIArgInfo
argument_list|(
argument|Kind K
argument_list|)
block|:
name|TheKind
argument_list|(
name|K
argument_list|)
operator|,
name|PaddingInReg
argument_list|(
name|false
argument_list|)
operator|,
name|InReg
argument_list|(
argument|false
argument_list|)
block|{   }
name|public
operator|:
name|ABIArgInfo
argument_list|()
operator|:
name|TypeData
argument_list|(
name|nullptr
argument_list|)
operator|,
name|PaddingType
argument_list|(
name|nullptr
argument_list|)
operator|,
name|DirectOffset
argument_list|(
literal|0
argument_list|)
operator|,
name|TheKind
argument_list|(
name|Direct
argument_list|)
operator|,
name|PaddingInReg
argument_list|(
name|false
argument_list|)
operator|,
name|InReg
argument_list|(
argument|false
argument_list|)
block|{}
specifier|static
name|ABIArgInfo
name|getDirect
argument_list|(
argument|llvm::Type *T = nullptr
argument_list|,
argument|unsigned Offset =
literal|0
argument_list|,
argument|llvm::Type *Padding = nullptr
argument_list|,
argument|bool CanBeFlattened = true
argument_list|)
block|{
name|auto
name|AI
operator|=
name|ABIArgInfo
argument_list|(
name|Direct
argument_list|)
block|;
name|AI
operator|.
name|setCoerceToType
argument_list|(
name|T
argument_list|)
block|;
name|AI
operator|.
name|setPaddingType
argument_list|(
name|Padding
argument_list|)
block|;
name|AI
operator|.
name|setDirectOffset
argument_list|(
name|Offset
argument_list|)
block|;
name|AI
operator|.
name|setCanBeFlattened
argument_list|(
name|CanBeFlattened
argument_list|)
block|;
return|return
name|AI
return|;
block|}
specifier|static
name|ABIArgInfo
name|getDirectInReg
argument_list|(
name|llvm
operator|::
name|Type
operator|*
name|T
operator|=
name|nullptr
argument_list|)
block|{
name|auto
name|AI
init|=
name|getDirect
argument_list|(
name|T
argument_list|)
decl_stmt|;
name|AI
operator|.
name|setInReg
argument_list|(
name|true
argument_list|)
expr_stmt|;
return|return
name|AI
return|;
block|}
specifier|static
name|ABIArgInfo
name|getExtend
argument_list|(
name|llvm
operator|::
name|Type
operator|*
name|T
operator|=
name|nullptr
argument_list|)
block|{
name|auto
name|AI
init|=
name|ABIArgInfo
argument_list|(
name|Extend
argument_list|)
decl_stmt|;
name|AI
operator|.
name|setCoerceToType
argument_list|(
name|T
argument_list|)
expr_stmt|;
name|AI
operator|.
name|setPaddingType
argument_list|(
name|nullptr
argument_list|)
expr_stmt|;
name|AI
operator|.
name|setDirectOffset
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|AI
return|;
block|}
specifier|static
name|ABIArgInfo
name|getExtendInReg
argument_list|(
name|llvm
operator|::
name|Type
operator|*
name|T
operator|=
name|nullptr
argument_list|)
block|{
name|auto
name|AI
init|=
name|getExtend
argument_list|(
name|T
argument_list|)
decl_stmt|;
name|AI
operator|.
name|setInReg
argument_list|(
name|true
argument_list|)
expr_stmt|;
return|return
name|AI
return|;
block|}
specifier|static
name|ABIArgInfo
name|getIgnore
parameter_list|()
block|{
return|return
name|ABIArgInfo
argument_list|(
name|Ignore
argument_list|)
return|;
block|}
specifier|static
name|ABIArgInfo
name|getIndirect
argument_list|(
name|CharUnits
name|Alignment
argument_list|,
name|bool
name|ByVal
operator|=
name|true
argument_list|,
name|bool
name|Realign
operator|=
name|false
argument_list|,
name|llvm
operator|::
name|Type
operator|*
name|Padding
operator|=
name|nullptr
argument_list|)
block|{
name|auto
name|AI
init|=
name|ABIArgInfo
argument_list|(
name|Indirect
argument_list|)
decl_stmt|;
name|AI
operator|.
name|setIndirectAlign
argument_list|(
name|Alignment
argument_list|)
expr_stmt|;
name|AI
operator|.
name|setIndirectByVal
argument_list|(
name|ByVal
argument_list|)
expr_stmt|;
name|AI
operator|.
name|setIndirectRealign
argument_list|(
name|Realign
argument_list|)
expr_stmt|;
name|AI
operator|.
name|setSRetAfterThis
argument_list|(
name|false
argument_list|)
expr_stmt|;
name|AI
operator|.
name|setPaddingType
argument_list|(
name|Padding
argument_list|)
expr_stmt|;
return|return
name|AI
return|;
block|}
specifier|static
name|ABIArgInfo
name|getIndirectInReg
parameter_list|(
name|CharUnits
name|Alignment
parameter_list|,
name|bool
name|ByVal
init|=
name|true
parameter_list|,
name|bool
name|Realign
init|=
name|false
parameter_list|)
block|{
name|auto
name|AI
init|=
name|getIndirect
argument_list|(
name|Alignment
argument_list|,
name|ByVal
argument_list|,
name|Realign
argument_list|)
decl_stmt|;
name|AI
operator|.
name|setInReg
argument_list|(
name|true
argument_list|)
expr_stmt|;
return|return
name|AI
return|;
block|}
specifier|static
name|ABIArgInfo
name|getInAlloca
parameter_list|(
name|unsigned
name|FieldIndex
parameter_list|)
block|{
name|auto
name|AI
init|=
name|ABIArgInfo
argument_list|(
name|InAlloca
argument_list|)
decl_stmt|;
name|AI
operator|.
name|setInAllocaFieldIndex
argument_list|(
name|FieldIndex
argument_list|)
expr_stmt|;
return|return
name|AI
return|;
block|}
specifier|static
name|ABIArgInfo
name|getExpand
parameter_list|()
block|{
name|auto
name|AI
init|=
name|ABIArgInfo
argument_list|(
name|Expand
argument_list|)
decl_stmt|;
name|AI
operator|.
name|setPaddingType
argument_list|(
name|nullptr
argument_list|)
expr_stmt|;
return|return
name|AI
return|;
block|}
specifier|static
name|ABIArgInfo
name|getExpandWithPadding
argument_list|(
name|bool
name|PaddingInReg
argument_list|,
name|llvm
operator|::
name|Type
operator|*
name|Padding
argument_list|)
block|{
name|auto
name|AI
init|=
name|getExpand
argument_list|()
decl_stmt|;
name|AI
operator|.
name|setPaddingInReg
argument_list|(
name|PaddingInReg
argument_list|)
expr_stmt|;
name|AI
operator|.
name|setPaddingType
argument_list|(
name|Padding
argument_list|)
expr_stmt|;
return|return
name|AI
return|;
block|}
comment|/// \param unpaddedCoerceToType The coerce-to type with padding elements
comment|///   removed, canonicalized to a single element if it would otherwise
comment|///   have exactly one element.
specifier|static
name|ABIArgInfo
name|getCoerceAndExpand
argument_list|(
name|llvm
operator|::
name|StructType
operator|*
name|coerceToType
argument_list|,
name|llvm
operator|::
name|Type
operator|*
name|unpaddedCoerceToType
argument_list|)
block|{
ifndef|#
directive|ifndef
name|NDEBUG
comment|// Sanity checks on unpaddedCoerceToType.
comment|// Assert that we only have a struct type if there are multiple elements.
name|auto
name|unpaddedStruct
init|=
name|dyn_cast
operator|<
name|llvm
operator|::
name|StructType
operator|>
operator|(
name|unpaddedCoerceToType
operator|)
decl_stmt|;
name|assert
argument_list|(
operator|!
name|unpaddedStruct
operator|||
name|unpaddedStruct
operator|->
name|getNumElements
argument_list|()
operator|!=
literal|1
argument_list|)
expr_stmt|;
comment|// Assert that all the non-padding elements have a corresponding element
comment|// in the unpadded type.
name|unsigned
name|unpaddedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|auto
name|eltType
range|:
name|coerceToType
operator|->
name|elements
argument_list|()
control|)
block|{
if|if
condition|(
name|isPaddingForCoerceAndExpand
argument_list|(
name|eltType
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|unpaddedStruct
condition|)
block|{
name|assert
argument_list|(
name|unpaddedStruct
operator|->
name|getElementType
argument_list|(
name|unpaddedIndex
argument_list|)
operator|==
name|eltType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assert
argument_list|(
name|unpaddedIndex
operator|==
literal|0
operator|&&
name|unpaddedCoerceToType
operator|==
name|eltType
argument_list|)
expr_stmt|;
block|}
name|unpaddedIndex
operator|++
expr_stmt|;
block|}
comment|// Assert that there aren't extra elements in the unpadded type.
if|if
condition|(
name|unpaddedStruct
condition|)
block|{
name|assert
argument_list|(
name|unpaddedStruct
operator|->
name|getNumElements
argument_list|()
operator|==
name|unpaddedIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assert
argument_list|(
name|unpaddedIndex
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|auto
name|AI
init|=
name|ABIArgInfo
argument_list|(
name|CoerceAndExpand
argument_list|)
decl_stmt|;
name|AI
operator|.
name|setCoerceToType
argument_list|(
name|coerceToType
argument_list|)
expr_stmt|;
name|AI
operator|.
name|setUnpaddedCoerceToType
argument_list|(
name|unpaddedCoerceToType
argument_list|)
expr_stmt|;
return|return
name|AI
return|;
block|}
specifier|static
name|bool
name|isPaddingForCoerceAndExpand
argument_list|(
name|llvm
operator|::
name|Type
operator|*
name|eltType
argument_list|)
block|{
if|if
condition|(
name|eltType
operator|->
name|isArrayTy
argument_list|()
condition|)
block|{
name|assert
argument_list|(
name|eltType
operator|->
name|getArrayElementType
argument_list|()
operator|->
name|isIntegerTy
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
else|else
block|{
return|return
name|false
return|;
block|}
block|}
name|Kind
name|getKind
argument_list|()
specifier|const
block|{
return|return
name|TheKind
return|;
block|}
name|bool
name|isDirect
argument_list|()
specifier|const
block|{
return|return
name|TheKind
operator|==
name|Direct
return|;
block|}
name|bool
name|isInAlloca
argument_list|()
specifier|const
block|{
return|return
name|TheKind
operator|==
name|InAlloca
return|;
block|}
name|bool
name|isExtend
argument_list|()
specifier|const
block|{
return|return
name|TheKind
operator|==
name|Extend
return|;
block|}
name|bool
name|isIgnore
argument_list|()
specifier|const
block|{
return|return
name|TheKind
operator|==
name|Ignore
return|;
block|}
name|bool
name|isIndirect
argument_list|()
specifier|const
block|{
return|return
name|TheKind
operator|==
name|Indirect
return|;
block|}
name|bool
name|isExpand
argument_list|()
specifier|const
block|{
return|return
name|TheKind
operator|==
name|Expand
return|;
block|}
name|bool
name|isCoerceAndExpand
argument_list|()
specifier|const
block|{
return|return
name|TheKind
operator|==
name|CoerceAndExpand
return|;
block|}
name|bool
name|canHaveCoerceToType
argument_list|()
specifier|const
block|{
return|return
name|isDirect
argument_list|()
operator|||
name|isExtend
argument_list|()
operator|||
name|isCoerceAndExpand
argument_list|()
return|;
block|}
comment|// Direct/Extend accessors
name|unsigned
name|getDirectOffset
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
operator|(
name|isDirect
argument_list|()
operator|||
name|isExtend
argument_list|()
operator|)
operator|&&
literal|"Not a direct or extend kind"
argument_list|)
block|;
return|return
name|DirectOffset
return|;
block|}
name|void
name|setDirectOffset
parameter_list|(
name|unsigned
name|Offset
parameter_list|)
block|{
name|assert
argument_list|(
operator|(
name|isDirect
argument_list|()
operator|||
name|isExtend
argument_list|()
operator|)
operator|&&
literal|"Not a direct or extend kind"
argument_list|)
expr_stmt|;
name|DirectOffset
operator|=
name|Offset
expr_stmt|;
block|}
name|llvm
operator|::
name|Type
operator|*
name|getPaddingType
argument_list|()
specifier|const
block|{
return|return
operator|(
name|canHavePaddingType
argument_list|()
operator|?
name|PaddingType
operator|:
name|nullptr
operator|)
return|;
block|}
name|bool
name|getPaddingInReg
argument_list|()
specifier|const
block|{
return|return
name|PaddingInReg
return|;
block|}
name|void
name|setPaddingInReg
parameter_list|(
name|bool
name|PIR
parameter_list|)
block|{
name|PaddingInReg
operator|=
name|PIR
expr_stmt|;
block|}
name|llvm
operator|::
name|Type
operator|*
name|getCoerceToType
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|canHaveCoerceToType
argument_list|()
operator|&&
literal|"Invalid kind!"
argument_list|)
block|;
return|return
name|TypeData
return|;
block|}
name|void
name|setCoerceToType
argument_list|(
name|llvm
operator|::
name|Type
operator|*
name|T
argument_list|)
block|{
name|assert
argument_list|(
name|canHaveCoerceToType
argument_list|()
operator|&&
literal|"Invalid kind!"
argument_list|)
expr_stmt|;
name|TypeData
operator|=
name|T
expr_stmt|;
block|}
name|llvm
operator|::
name|StructType
operator|*
name|getCoerceAndExpandType
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isCoerceAndExpand
argument_list|()
argument_list|)
block|;
return|return
name|cast
operator|<
name|llvm
operator|::
name|StructType
operator|>
operator|(
name|TypeData
operator|)
return|;
block|}
name|llvm
operator|::
name|Type
operator|*
name|getUnpaddedCoerceAndExpandType
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isCoerceAndExpand
argument_list|()
argument_list|)
block|;
return|return
name|UnpaddedCoerceAndExpandType
return|;
block|}
name|ArrayRef
operator|<
name|llvm
operator|::
name|Type
operator|*
operator|>
name|getCoerceAndExpandTypeSequence
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isCoerceAndExpand
argument_list|()
argument_list|)
block|;
if|if
condition|(
name|auto
name|structTy
init|=
name|dyn_cast
operator|<
name|llvm
operator|::
name|StructType
operator|>
operator|(
name|UnpaddedCoerceAndExpandType
operator|)
condition|)
block|{
return|return
name|structTy
operator|->
name|elements
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|llvm
operator|::
name|makeArrayRef
argument_list|(
operator|&
name|UnpaddedCoerceAndExpandType
argument_list|,
literal|1
argument_list|)
return|;
block|}
block|}
name|bool
name|getInReg
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
operator|(
name|isDirect
argument_list|()
operator|||
name|isExtend
argument_list|()
operator|||
name|isIndirect
argument_list|()
operator|)
operator|&&
literal|"Invalid kind!"
argument_list|)
block|;
return|return
name|InReg
return|;
block|}
name|void
name|setInReg
parameter_list|(
name|bool
name|IR
parameter_list|)
block|{
name|assert
argument_list|(
operator|(
name|isDirect
argument_list|()
operator|||
name|isExtend
argument_list|()
operator|||
name|isIndirect
argument_list|()
operator|)
operator|&&
literal|"Invalid kind!"
argument_list|)
expr_stmt|;
name|InReg
operator|=
name|IR
expr_stmt|;
block|}
comment|// Indirect accessors
name|CharUnits
name|getIndirectAlign
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isIndirect
argument_list|()
operator|&&
literal|"Invalid kind!"
argument_list|)
block|;
return|return
name|CharUnits
operator|::
name|fromQuantity
argument_list|(
name|IndirectAlign
argument_list|)
return|;
block|}
name|void
name|setIndirectAlign
parameter_list|(
name|CharUnits
name|IA
parameter_list|)
block|{
name|assert
argument_list|(
name|isIndirect
argument_list|()
operator|&&
literal|"Invalid kind!"
argument_list|)
expr_stmt|;
name|IndirectAlign
operator|=
name|IA
operator|.
name|getQuantity
argument_list|()
expr_stmt|;
block|}
name|bool
name|getIndirectByVal
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isIndirect
argument_list|()
operator|&&
literal|"Invalid kind!"
argument_list|)
block|;
return|return
name|IndirectByVal
return|;
block|}
name|void
name|setIndirectByVal
parameter_list|(
name|bool
name|IBV
parameter_list|)
block|{
name|assert
argument_list|(
name|isIndirect
argument_list|()
operator|&&
literal|"Invalid kind!"
argument_list|)
expr_stmt|;
name|IndirectByVal
operator|=
name|IBV
expr_stmt|;
block|}
name|bool
name|getIndirectRealign
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isIndirect
argument_list|()
operator|&&
literal|"Invalid kind!"
argument_list|)
block|;
return|return
name|IndirectRealign
return|;
block|}
name|void
name|setIndirectRealign
parameter_list|(
name|bool
name|IR
parameter_list|)
block|{
name|assert
argument_list|(
name|isIndirect
argument_list|()
operator|&&
literal|"Invalid kind!"
argument_list|)
expr_stmt|;
name|IndirectRealign
operator|=
name|IR
expr_stmt|;
block|}
name|bool
name|isSRetAfterThis
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isIndirect
argument_list|()
operator|&&
literal|"Invalid kind!"
argument_list|)
block|;
return|return
name|SRetAfterThis
return|;
block|}
name|void
name|setSRetAfterThis
parameter_list|(
name|bool
name|AfterThis
parameter_list|)
block|{
name|assert
argument_list|(
name|isIndirect
argument_list|()
operator|&&
literal|"Invalid kind!"
argument_list|)
expr_stmt|;
name|SRetAfterThis
operator|=
name|AfterThis
expr_stmt|;
block|}
name|unsigned
name|getInAllocaFieldIndex
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isInAlloca
argument_list|()
operator|&&
literal|"Invalid kind!"
argument_list|)
block|;
return|return
name|AllocaFieldIndex
return|;
block|}
name|void
name|setInAllocaFieldIndex
parameter_list|(
name|unsigned
name|FieldIndex
parameter_list|)
block|{
name|assert
argument_list|(
name|isInAlloca
argument_list|()
operator|&&
literal|"Invalid kind!"
argument_list|)
expr_stmt|;
name|AllocaFieldIndex
operator|=
name|FieldIndex
expr_stmt|;
block|}
comment|/// \brief Return true if this field of an inalloca struct should be returned
comment|/// to implement a struct return calling convention.
name|bool
name|getInAllocaSRet
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isInAlloca
argument_list|()
operator|&&
literal|"Invalid kind!"
argument_list|)
block|;
return|return
name|InAllocaSRet
return|;
block|}
name|void
name|setInAllocaSRet
parameter_list|(
name|bool
name|SRet
parameter_list|)
block|{
name|assert
argument_list|(
name|isInAlloca
argument_list|()
operator|&&
literal|"Invalid kind!"
argument_list|)
expr_stmt|;
name|InAllocaSRet
operator|=
name|SRet
expr_stmt|;
block|}
name|bool
name|getCanBeFlattened
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isDirect
argument_list|()
operator|&&
literal|"Invalid kind!"
argument_list|)
block|;
return|return
name|CanBeFlattened
return|;
block|}
name|void
name|setCanBeFlattened
parameter_list|(
name|bool
name|Flatten
parameter_list|)
block|{
name|assert
argument_list|(
name|isDirect
argument_list|()
operator|&&
literal|"Invalid kind!"
argument_list|)
expr_stmt|;
name|CanBeFlattened
operator|=
name|Flatten
expr_stmt|;
block|}
name|void
name|dump
argument_list|()
specifier|const
expr_stmt|;
block|}
empty_stmt|;
comment|/// A class for recording the number of arguments that a function
comment|/// signature requires.
name|class
name|RequiredArgs
block|{
comment|/// The number of required arguments, or ~0 if the signature does
comment|/// not permit optional arguments.
name|unsigned
name|NumRequired
decl_stmt|;
name|public
label|:
enum|enum
name|All_t
block|{
name|All
block|}
enum|;
name|RequiredArgs
argument_list|(
argument|All_t _
argument_list|)
block|:
name|NumRequired
argument_list|(
argument|~
literal|0U
argument_list|)
block|{}
name|explicit
name|RequiredArgs
argument_list|(
argument|unsigned n
argument_list|)
block|:
name|NumRequired
argument_list|(
argument|n
argument_list|)
block|{
name|assert
argument_list|(
name|n
operator|!=
operator|~
literal|0U
argument_list|)
expr_stmt|;
block|}
comment|/// Compute the arguments required by the given formal prototype,
comment|/// given that there may be some additional, non-formal arguments
comment|/// in play.
comment|///
comment|/// If FD is not null, this will consider pass_object_size params in FD.
specifier|static
name|RequiredArgs
name|forPrototypePlus
parameter_list|(
specifier|const
name|FunctionProtoType
modifier|*
name|prototype
parameter_list|,
name|unsigned
name|additional
parameter_list|,
specifier|const
name|FunctionDecl
modifier|*
name|FD
parameter_list|)
block|{
if|if
condition|(
operator|!
name|prototype
operator|->
name|isVariadic
argument_list|()
condition|)
return|return
name|All
return|;
if|if
condition|(
name|FD
condition|)
name|additional
operator|+=
name|llvm
operator|::
name|count_if
argument_list|(
name|FD
operator|->
name|parameters
argument_list|()
argument_list|,
index|[]
operator|(
specifier|const
name|ParmVarDecl
operator|*
name|PVD
operator|)
block|{
return|return
name|PVD
operator|->
name|hasAttr
operator|<
name|PassObjectSizeAttr
operator|>
operator|(
operator|)
return|;
block|}
block|)
function|;
return|return
name|RequiredArgs
argument_list|(
name|prototype
operator|->
name|getNumParams
argument_list|()
operator|+
name|additional
argument_list|)
return|;
block|}
specifier|static
name|RequiredArgs
name|forPrototype
parameter_list|(
specifier|const
name|FunctionProtoType
modifier|*
name|prototype
parameter_list|,
specifier|const
name|FunctionDecl
modifier|*
name|FD
parameter_list|)
block|{
return|return
name|forPrototypePlus
argument_list|(
name|prototype
argument_list|,
literal|0
argument_list|,
name|FD
argument_list|)
return|;
block|}
specifier|static
name|RequiredArgs
name|forPrototype
argument_list|(
name|CanQual
operator|<
name|FunctionProtoType
operator|>
name|prototype
argument_list|,
specifier|const
name|FunctionDecl
operator|*
name|FD
argument_list|)
block|{
return|return
name|forPrototype
argument_list|(
name|prototype
operator|.
name|getTypePtr
argument_list|()
argument_list|,
name|FD
argument_list|)
return|;
block|}
specifier|static
name|RequiredArgs
name|forPrototypePlus
argument_list|(
name|CanQual
operator|<
name|FunctionProtoType
operator|>
name|prototype
argument_list|,
name|unsigned
name|additional
argument_list|,
specifier|const
name|FunctionDecl
operator|*
name|FD
argument_list|)
block|{
return|return
name|forPrototypePlus
argument_list|(
name|prototype
operator|.
name|getTypePtr
argument_list|()
argument_list|,
name|additional
argument_list|,
name|FD
argument_list|)
return|;
block|}
name|bool
name|allowsOptionalArgs
argument_list|()
specifier|const
block|{
return|return
name|NumRequired
operator|!=
operator|~
literal|0U
return|;
block|}
name|unsigned
name|getNumRequiredArgs
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|allowsOptionalArgs
argument_list|()
argument_list|)
block|;
return|return
name|NumRequired
return|;
block|}
name|unsigned
name|getOpaqueData
argument_list|()
specifier|const
block|{
return|return
name|NumRequired
return|;
block|}
specifier|static
name|RequiredArgs
name|getFromOpaqueData
parameter_list|(
name|unsigned
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
operator|~
literal|0U
condition|)
return|return
name|All
return|;
return|return
name|RequiredArgs
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
empty_stmt|;
comment|// Implementation detail of CGFunctionInfo, factored out so it can be named
comment|// in the TrailingObjects base class of CGFunctionInfo.
struct|struct
name|CGFunctionInfoArgInfo
block|{
name|CanQualType
name|type
decl_stmt|;
name|ABIArgInfo
name|info
decl_stmt|;
block|}
struct|;
comment|/// CGFunctionInfo - Class to encapsulate the information about a
comment|/// function definition.
name|class
name|CGFunctionInfo
name|final
range|:
name|public
name|llvm
operator|::
name|FoldingSetNode
decl_stmt|,
name|private
name|llvm
decl|::
name|TrailingObjects
decl|<
name|CGFunctionInfo
decl_stmt|,
name|CGFunctionInfoArgInfo
decl_stmt|,
name|FunctionProtoType
decl|::
name|ExtParameterInfo
decl|>
block|{
typedef|typedef
name|CGFunctionInfoArgInfo
name|ArgInfo
typedef|;
typedef|typedef
name|FunctionProtoType
operator|::
name|ExtParameterInfo
name|ExtParameterInfo
expr_stmt|;
comment|/// The LLVM::CallingConv to use for this function (as specified by the
comment|/// user).
name|unsigned
name|CallingConvention
range|:
literal|8
decl_stmt|;
comment|/// The LLVM::CallingConv to actually use for this function, which may
comment|/// depend on the ABI.
name|unsigned
name|EffectiveCallingConvention
range|:
literal|8
decl_stmt|;
comment|/// The clang::CallingConv that this was originally created with.
name|unsigned
name|ASTCallingConvention
range|:
literal|8
decl_stmt|;
comment|/// Whether this is an instance method.
name|unsigned
name|InstanceMethod
range|:
literal|1
decl_stmt|;
comment|/// Whether this is a chain call.
name|unsigned
name|ChainCall
range|:
literal|1
decl_stmt|;
comment|/// Whether this function is noreturn.
name|unsigned
name|NoReturn
range|:
literal|1
decl_stmt|;
comment|/// Whether this function is returns-retained.
name|unsigned
name|ReturnsRetained
range|:
literal|1
decl_stmt|;
comment|/// How many arguments to pass inreg.
name|unsigned
name|HasRegParm
range|:
literal|1
decl_stmt|;
name|unsigned
name|RegParm
range|:
literal|3
decl_stmt|;
name|RequiredArgs
name|Required
decl_stmt|;
comment|/// The struct representing all arguments passed in memory.  Only used when
comment|/// passing non-trivial types with inalloca.  Not part of the profile.
name|llvm
operator|::
name|StructType
operator|*
name|ArgStruct
expr_stmt|;
name|unsigned
name|ArgStructAlign
range|:
literal|31
decl_stmt|;
name|unsigned
name|HasExtParameterInfos
range|:
literal|1
decl_stmt|;
name|unsigned
name|NumArgs
decl_stmt|;
name|ArgInfo
modifier|*
name|getArgsBuffer
parameter_list|()
block|{
return|return
name|getTrailingObjects
operator|<
name|ArgInfo
operator|>
operator|(
operator|)
return|;
block|}
specifier|const
name|ArgInfo
operator|*
name|getArgsBuffer
argument_list|()
specifier|const
block|{
return|return
name|getTrailingObjects
operator|<
name|ArgInfo
operator|>
operator|(
operator|)
return|;
block|}
name|ExtParameterInfo
modifier|*
name|getExtParameterInfosBuffer
parameter_list|()
block|{
return|return
name|getTrailingObjects
operator|<
name|ExtParameterInfo
operator|>
operator|(
operator|)
return|;
block|}
specifier|const
name|ExtParameterInfo
operator|*
name|getExtParameterInfosBuffer
argument_list|()
specifier|const
block|{
return|return
name|getTrailingObjects
operator|<
name|ExtParameterInfo
operator|>
operator|(
operator|)
return|;
block|}
name|CGFunctionInfo
argument_list|()
operator|:
name|Required
argument_list|(
argument|RequiredArgs::All
argument_list|)
block|{}
name|public
operator|:
specifier|static
name|CGFunctionInfo
operator|*
name|create
argument_list|(
argument|unsigned llvmCC
argument_list|,
argument|bool instanceMethod
argument_list|,
argument|bool chainCall
argument_list|,
argument|const FunctionType::ExtInfo&extInfo
argument_list|,
argument|ArrayRef<ExtParameterInfo> paramInfos
argument_list|,
argument|CanQualType resultType
argument_list|,
argument|ArrayRef<CanQualType> argTypes
argument_list|,
argument|RequiredArgs required
argument_list|)
expr_stmt|;
name|void
name|operator
name|delete
parameter_list|(
name|void
modifier|*
name|p
parameter_list|)
block|{
operator|::
name|operator
name|delete
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
comment|// Friending class TrailingObjects is apparently not good enough for MSVC,
comment|// so these have to be public.
name|friend
name|class
name|TrailingObjects
decl_stmt|;
name|size_t
name|numTrailingObjects
argument_list|(
name|OverloadToken
operator|<
name|ArgInfo
operator|>
argument_list|)
decl|const
block|{
return|return
name|NumArgs
operator|+
literal|1
return|;
block|}
name|size_t
name|numTrailingObjects
argument_list|(
name|OverloadToken
operator|<
name|ExtParameterInfo
operator|>
argument_list|)
decl|const
block|{
return|return
operator|(
name|HasExtParameterInfos
condition|?
name|NumArgs
else|:
literal|0
operator|)
return|;
block|}
typedef|typedef
specifier|const
name|ArgInfo
modifier|*
name|const_arg_iterator
typedef|;
typedef|typedef
name|ArgInfo
modifier|*
name|arg_iterator
typedef|;
typedef|typedef
name|llvm
operator|::
name|iterator_range
operator|<
name|arg_iterator
operator|>
name|arg_range
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|iterator_range
operator|<
name|const_arg_iterator
operator|>
name|arg_const_range
expr_stmt|;
name|arg_range
name|arguments
parameter_list|()
block|{
return|return
name|arg_range
argument_list|(
name|arg_begin
argument_list|()
argument_list|,
name|arg_end
argument_list|()
argument_list|)
return|;
block|}
name|arg_const_range
name|arguments
argument_list|()
specifier|const
block|{
return|return
name|arg_const_range
argument_list|(
name|arg_begin
argument_list|()
argument_list|,
name|arg_end
argument_list|()
argument_list|)
return|;
block|}
name|const_arg_iterator
name|arg_begin
argument_list|()
specifier|const
block|{
return|return
name|getArgsBuffer
argument_list|()
operator|+
literal|1
return|;
block|}
name|const_arg_iterator
name|arg_end
argument_list|()
specifier|const
block|{
return|return
name|getArgsBuffer
argument_list|()
operator|+
literal|1
operator|+
name|NumArgs
return|;
block|}
name|arg_iterator
name|arg_begin
parameter_list|()
block|{
return|return
name|getArgsBuffer
argument_list|()
operator|+
literal|1
return|;
block|}
name|arg_iterator
name|arg_end
parameter_list|()
block|{
return|return
name|getArgsBuffer
argument_list|()
operator|+
literal|1
operator|+
name|NumArgs
return|;
block|}
name|unsigned
name|arg_size
argument_list|()
specifier|const
block|{
return|return
name|NumArgs
return|;
block|}
name|bool
name|isVariadic
argument_list|()
specifier|const
block|{
return|return
name|Required
operator|.
name|allowsOptionalArgs
argument_list|()
return|;
block|}
name|RequiredArgs
name|getRequiredArgs
argument_list|()
specifier|const
block|{
return|return
name|Required
return|;
block|}
name|unsigned
name|getNumRequiredArgs
argument_list|()
specifier|const
block|{
return|return
name|isVariadic
argument_list|()
operator|?
name|getRequiredArgs
argument_list|()
operator|.
name|getNumRequiredArgs
argument_list|()
operator|:
name|arg_size
argument_list|()
return|;
block|}
name|bool
name|isInstanceMethod
argument_list|()
specifier|const
block|{
return|return
name|InstanceMethod
return|;
block|}
name|bool
name|isChainCall
argument_list|()
specifier|const
block|{
return|return
name|ChainCall
return|;
block|}
name|bool
name|isNoReturn
argument_list|()
specifier|const
block|{
return|return
name|NoReturn
return|;
block|}
comment|/// In ARC, whether this function retains its return value.  This
comment|/// is not always reliable for call sites.
name|bool
name|isReturnsRetained
argument_list|()
specifier|const
block|{
return|return
name|ReturnsRetained
return|;
block|}
comment|/// getASTCallingConvention() - Return the AST-specified calling
comment|/// convention.
name|CallingConv
name|getASTCallingConvention
argument_list|()
specifier|const
block|{
return|return
name|CallingConv
argument_list|(
name|ASTCallingConvention
argument_list|)
return|;
block|}
comment|/// getCallingConvention - Return the user specified calling
comment|/// convention, which has been translated into an LLVM CC.
name|unsigned
name|getCallingConvention
argument_list|()
specifier|const
block|{
return|return
name|CallingConvention
return|;
block|}
comment|/// getEffectiveCallingConvention - Return the actual calling convention to
comment|/// use, which may depend on the ABI.
name|unsigned
name|getEffectiveCallingConvention
argument_list|()
specifier|const
block|{
return|return
name|EffectiveCallingConvention
return|;
block|}
name|void
name|setEffectiveCallingConvention
parameter_list|(
name|unsigned
name|Value
parameter_list|)
block|{
name|EffectiveCallingConvention
operator|=
name|Value
expr_stmt|;
block|}
name|bool
name|getHasRegParm
argument_list|()
specifier|const
block|{
return|return
name|HasRegParm
return|;
block|}
name|unsigned
name|getRegParm
argument_list|()
specifier|const
block|{
return|return
name|RegParm
return|;
block|}
name|FunctionType
operator|::
name|ExtInfo
name|getExtInfo
argument_list|()
specifier|const
block|{
return|return
name|FunctionType
operator|::
name|ExtInfo
argument_list|(
name|isNoReturn
argument_list|()
argument_list|,
name|getHasRegParm
argument_list|()
argument_list|,
name|getRegParm
argument_list|()
argument_list|,
name|getASTCallingConvention
argument_list|()
argument_list|,
name|isReturnsRetained
argument_list|()
argument_list|)
return|;
block|}
name|CanQualType
name|getReturnType
argument_list|()
specifier|const
block|{
return|return
name|getArgsBuffer
argument_list|()
index|[
literal|0
index|]
operator|.
name|type
return|;
block|}
name|ABIArgInfo
modifier|&
name|getReturnInfo
parameter_list|()
block|{
return|return
name|getArgsBuffer
argument_list|()
index|[
literal|0
index|]
operator|.
name|info
return|;
block|}
specifier|const
name|ABIArgInfo
operator|&
name|getReturnInfo
argument_list|()
specifier|const
block|{
return|return
name|getArgsBuffer
argument_list|()
index|[
literal|0
index|]
operator|.
name|info
return|;
block|}
name|ArrayRef
operator|<
name|ExtParameterInfo
operator|>
name|getExtParameterInfos
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|HasExtParameterInfos
condition|)
return|return
block|{}
return|;
return|return
name|llvm
operator|::
name|makeArrayRef
argument_list|(
name|getExtParameterInfosBuffer
argument_list|()
argument_list|,
name|NumArgs
argument_list|)
return|;
block|}
name|ExtParameterInfo
name|getExtParameterInfo
argument_list|(
name|unsigned
name|argIndex
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|argIndex
operator|<=
name|NumArgs
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|HasExtParameterInfos
condition|)
return|return
name|ExtParameterInfo
argument_list|()
return|;
return|return
name|getExtParameterInfos
argument_list|()
index|[
name|argIndex
index|]
return|;
block|}
comment|/// \brief Return true if this function uses inalloca arguments.
name|bool
name|usesInAlloca
argument_list|()
specifier|const
block|{
return|return
name|ArgStruct
return|;
block|}
comment|/// \brief Get the struct type used to represent all the arguments in memory.
name|llvm
operator|::
name|StructType
operator|*
name|getArgStruct
argument_list|()
specifier|const
block|{
return|return
name|ArgStruct
return|;
block|}
name|CharUnits
name|getArgStructAlignment
argument_list|()
specifier|const
block|{
return|return
name|CharUnits
operator|::
name|fromQuantity
argument_list|(
name|ArgStructAlign
argument_list|)
return|;
block|}
name|void
name|setArgStruct
argument_list|(
name|llvm
operator|::
name|StructType
operator|*
name|Ty
argument_list|,
name|CharUnits
name|Align
argument_list|)
block|{
name|ArgStruct
operator|=
name|Ty
expr_stmt|;
name|ArgStructAlign
operator|=
name|Align
operator|.
name|getQuantity
argument_list|()
expr_stmt|;
block|}
name|void
name|Profile
argument_list|(
name|llvm
operator|::
name|FoldingSetNodeID
operator|&
name|ID
argument_list|)
block|{
name|ID
operator|.
name|AddInteger
argument_list|(
name|getASTCallingConvention
argument_list|()
argument_list|)
expr_stmt|;
name|ID
operator|.
name|AddBoolean
argument_list|(
name|InstanceMethod
argument_list|)
expr_stmt|;
name|ID
operator|.
name|AddBoolean
argument_list|(
name|ChainCall
argument_list|)
expr_stmt|;
name|ID
operator|.
name|AddBoolean
argument_list|(
name|NoReturn
argument_list|)
expr_stmt|;
name|ID
operator|.
name|AddBoolean
argument_list|(
name|ReturnsRetained
argument_list|)
expr_stmt|;
name|ID
operator|.
name|AddBoolean
argument_list|(
name|HasRegParm
argument_list|)
expr_stmt|;
name|ID
operator|.
name|AddInteger
argument_list|(
name|RegParm
argument_list|)
expr_stmt|;
name|ID
operator|.
name|AddInteger
argument_list|(
name|Required
operator|.
name|getOpaqueData
argument_list|()
argument_list|)
expr_stmt|;
name|ID
operator|.
name|AddBoolean
argument_list|(
name|HasExtParameterInfos
argument_list|)
expr_stmt|;
if|if
condition|(
name|HasExtParameterInfos
condition|)
block|{
for|for
control|(
name|auto
name|paramInfo
range|:
name|getExtParameterInfos
argument_list|()
control|)
name|ID
operator|.
name|AddInteger
argument_list|(
name|paramInfo
operator|.
name|getOpaqueValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|getReturnType
argument_list|()
operator|.
name|Profile
argument_list|(
name|ID
argument_list|)
expr_stmt|;
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|I
range|:
name|arguments
argument_list|()
control|)
name|I
operator|.
name|type
operator|.
name|Profile
argument_list|(
name|ID
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|Profile
argument_list|(
name|llvm
operator|::
name|FoldingSetNodeID
operator|&
name|ID
argument_list|,
name|bool
name|InstanceMethod
argument_list|,
name|bool
name|ChainCall
argument_list|,
specifier|const
name|FunctionType
operator|::
name|ExtInfo
operator|&
name|info
argument_list|,
name|ArrayRef
operator|<
name|ExtParameterInfo
operator|>
name|paramInfos
argument_list|,
name|RequiredArgs
name|required
argument_list|,
name|CanQualType
name|resultType
argument_list|,
name|ArrayRef
operator|<
name|CanQualType
operator|>
name|argTypes
argument_list|)
block|{
name|ID
operator|.
name|AddInteger
argument_list|(
name|info
operator|.
name|getCC
argument_list|()
argument_list|)
expr_stmt|;
name|ID
operator|.
name|AddBoolean
argument_list|(
name|InstanceMethod
argument_list|)
expr_stmt|;
name|ID
operator|.
name|AddBoolean
argument_list|(
name|ChainCall
argument_list|)
expr_stmt|;
name|ID
operator|.
name|AddBoolean
argument_list|(
name|info
operator|.
name|getNoReturn
argument_list|()
argument_list|)
expr_stmt|;
name|ID
operator|.
name|AddBoolean
argument_list|(
name|info
operator|.
name|getProducesResult
argument_list|()
argument_list|)
expr_stmt|;
name|ID
operator|.
name|AddBoolean
argument_list|(
name|info
operator|.
name|getHasRegParm
argument_list|()
argument_list|)
expr_stmt|;
name|ID
operator|.
name|AddInteger
argument_list|(
name|info
operator|.
name|getRegParm
argument_list|()
argument_list|)
expr_stmt|;
name|ID
operator|.
name|AddInteger
argument_list|(
name|required
operator|.
name|getOpaqueData
argument_list|()
argument_list|)
expr_stmt|;
name|ID
operator|.
name|AddBoolean
argument_list|(
operator|!
name|paramInfos
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|paramInfos
operator|.
name|empty
argument_list|()
condition|)
block|{
for|for
control|(
name|auto
name|paramInfo
range|:
name|paramInfos
control|)
name|ID
operator|.
name|AddInteger
argument_list|(
name|paramInfo
operator|.
name|getOpaqueValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|resultType
operator|.
name|Profile
argument_list|(
name|ID
argument_list|)
expr_stmt|;
for|for
control|(
name|ArrayRef
operator|<
name|CanQualType
operator|>
operator|::
name|iterator
name|i
operator|=
name|argTypes
operator|.
name|begin
argument_list|()
operator|,
name|e
operator|=
name|argTypes
operator|.
name|end
argument_list|()
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
block|{
name|i
operator|->
name|Profile
argument_list|(
name|ID
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// end namespace CodeGen
end_comment

begin_comment
unit|}
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

