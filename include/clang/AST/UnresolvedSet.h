begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- UnresolvedSet.h - Unresolved sets of declarations  ------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines the UnresolvedSet class, which is used to store
end_comment

begin_comment
comment|//  collections of declarations in the AST.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_AST_UNRESOLVEDSET_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_AST_UNRESOLVEDSET_H
end_define

begin_include
include|#
directive|include
file|"clang/AST/DeclAccessPair.h"
end_include

begin_include
include|#
directive|include
file|"clang/Basic/LLVM.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/iterator.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
comment|/// The iterator over UnresolvedSets.  Serves as both the const and
comment|/// non-const iterator.
name|class
name|UnresolvedSetIterator
range|:
name|public
name|llvm
operator|::
name|iterator_adaptor_base
operator|<
name|UnresolvedSetIterator
decl_stmt|,
name|DeclAccessPair
modifier|*
decl_stmt|,
name|std
decl|::
name|random_access_iterator_tag
decl_stmt|,
name|NamedDecl
modifier|*
decl_stmt|,
name|std
decl|::
name|ptrdiff_t
decl_stmt|,
name|NamedDecl
modifier|*
decl_stmt|,
name|NamedDecl
modifier|*
decl|>
block|{
name|friend
name|class
name|UnresolvedSetImpl
decl_stmt|;
name|friend
name|class
name|ASTUnresolvedSet
decl_stmt|;
name|friend
name|class
name|OverloadExpr
decl_stmt|;
name|explicit
name|UnresolvedSetIterator
argument_list|(
name|DeclAccessPair
operator|*
name|Iter
argument_list|)
operator|:
name|iterator_adaptor_base
argument_list|(
argument|Iter
argument_list|)
block|{}
name|explicit
name|UnresolvedSetIterator
argument_list|(
specifier|const
name|DeclAccessPair
operator|*
name|Iter
argument_list|)
operator|:
name|iterator_adaptor_base
argument_list|(
argument|const_cast<DeclAccessPair *>(Iter)
argument_list|)
block|{}
name|public
operator|:
name|UnresolvedSetIterator
argument_list|()
block|{}
name|NamedDecl
operator|*
name|getDecl
argument_list|()
specifier|const
block|{
return|return
name|I
operator|->
name|getDecl
argument_list|()
return|;
block|}
name|void
name|setDecl
argument_list|(
name|NamedDecl
operator|*
name|ND
argument_list|)
decl|const
block|{
return|return
name|I
operator|->
name|setDecl
argument_list|(
name|ND
argument_list|)
return|;
block|}
name|AccessSpecifier
name|getAccess
argument_list|()
specifier|const
block|{
return|return
name|I
operator|->
name|getAccess
argument_list|()
return|;
block|}
name|void
name|setAccess
parameter_list|(
name|AccessSpecifier
name|AS
parameter_list|)
block|{
name|I
operator|->
name|setAccess
argument_list|(
name|AS
argument_list|)
expr_stmt|;
block|}
specifier|const
name|DeclAccessPair
operator|&
name|getPair
argument_list|()
specifier|const
block|{
return|return
operator|*
name|I
return|;
block|}
name|NamedDecl
operator|*
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|getDecl
argument_list|()
return|;
block|}
name|NamedDecl
operator|*
name|operator
operator|->
expr|(
block|)
decl|const
block|{
return|return
operator|*
operator|*
name|this
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/// \brief A set of unresolved declarations.
end_comment

begin_decl_stmt
name|class
name|UnresolvedSetImpl
block|{
typedef|typedef
name|SmallVectorImpl
operator|<
name|DeclAccessPair
operator|>
name|DeclsTy
expr_stmt|;
comment|// Don't allow direct construction, and only permit subclassing by
comment|// UnresolvedSet.
name|private
label|:
name|template
operator|<
name|unsigned
name|N
operator|>
name|friend
name|class
name|UnresolvedSet
expr_stmt|;
name|UnresolvedSetImpl
argument_list|()
operator|=
expr|default
expr_stmt|;
name|UnresolvedSetImpl
argument_list|(
specifier|const
name|UnresolvedSetImpl
operator|&
argument_list|)
operator|=
expr|default
expr_stmt|;
name|UnresolvedSetImpl
modifier|&
name|operator
init|=
operator|(
specifier|const
name|UnresolvedSetImpl
operator|&
operator|)
operator|=
expr|default
decl_stmt|;
comment|// FIXME: Switch these to "= default" once MSVC supports generating move ops
name|UnresolvedSetImpl
argument_list|(
argument|UnresolvedSetImpl&&
argument_list|)
block|{}
name|UnresolvedSetImpl
modifier|&
name|operator
init|=
operator|(
name|UnresolvedSetImpl
operator|&&
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
name|public
label|:
comment|// We don't currently support assignment through this iterator, so we might
comment|// as well use the same implementation twice.
typedef|typedef
name|UnresolvedSetIterator
name|iterator
typedef|;
typedef|typedef
name|UnresolvedSetIterator
name|const_iterator
typedef|;
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|iterator
argument_list|(
name|decls
argument_list|()
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
name|iterator
name|end
parameter_list|()
block|{
return|return
name|iterator
argument_list|(
name|decls
argument_list|()
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|decls
argument_list|()
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|decls
argument_list|()
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
name|void
name|addDecl
parameter_list|(
name|NamedDecl
modifier|*
name|D
parameter_list|)
block|{
name|addDecl
argument_list|(
name|D
argument_list|,
name|AS_none
argument_list|)
expr_stmt|;
block|}
name|void
name|addDecl
parameter_list|(
name|NamedDecl
modifier|*
name|D
parameter_list|,
name|AccessSpecifier
name|AS
parameter_list|)
block|{
name|decls
argument_list|()
operator|.
name|push_back
argument_list|(
name|DeclAccessPair
operator|::
name|make
argument_list|(
name|D
argument_list|,
name|AS
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/// Replaces the given declaration with the new one, once.
comment|///
comment|/// \return true if the set changed
name|bool
name|replace
parameter_list|(
specifier|const
name|NamedDecl
modifier|*
name|Old
parameter_list|,
name|NamedDecl
modifier|*
name|New
parameter_list|)
block|{
for|for
control|(
name|DeclsTy
operator|::
name|iterator
name|I
operator|=
name|decls
argument_list|()
operator|.
name|begin
argument_list|()
operator|,
name|E
operator|=
name|decls
argument_list|()
operator|.
name|end
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
if|if
condition|(
name|I
operator|->
name|getDecl
argument_list|()
operator|==
name|Old
condition|)
return|return
operator|(
name|I
operator|->
name|setDecl
argument_list|(
name|New
argument_list|)
operator|,
name|true
operator|)
return|;
return|return
name|false
return|;
block|}
comment|/// Replaces the declaration at the given iterator with the new one,
comment|/// preserving the original access bits.
name|void
name|replace
parameter_list|(
name|iterator
name|I
parameter_list|,
name|NamedDecl
modifier|*
name|New
parameter_list|)
block|{
name|I
operator|.
name|I
operator|->
name|setDecl
argument_list|(
name|New
argument_list|)
expr_stmt|;
block|}
name|void
name|replace
parameter_list|(
name|iterator
name|I
parameter_list|,
name|NamedDecl
modifier|*
name|New
parameter_list|,
name|AccessSpecifier
name|AS
parameter_list|)
block|{
name|I
operator|.
name|I
operator|->
name|set
argument_list|(
name|New
argument_list|,
name|AS
argument_list|)
expr_stmt|;
block|}
name|void
name|erase
parameter_list|(
name|unsigned
name|I
parameter_list|)
block|{
name|decls
argument_list|()
index|[
name|I
index|]
operator|=
name|decls
argument_list|()
operator|.
name|pop_back_val
argument_list|()
expr_stmt|;
block|}
name|void
name|erase
parameter_list|(
name|iterator
name|I
parameter_list|)
block|{
operator|*
name|I
operator|.
name|I
operator|=
name|decls
argument_list|()
operator|.
name|pop_back_val
argument_list|()
expr_stmt|;
block|}
name|void
name|setAccess
parameter_list|(
name|iterator
name|I
parameter_list|,
name|AccessSpecifier
name|AS
parameter_list|)
block|{
name|I
operator|.
name|I
operator|->
name|setAccess
argument_list|(
name|AS
argument_list|)
expr_stmt|;
block|}
name|void
name|clear
parameter_list|()
block|{
name|decls
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|void
name|set_size
parameter_list|(
name|unsigned
name|N
parameter_list|)
block|{
name|decls
argument_list|()
operator|.
name|set_size
argument_list|(
name|N
argument_list|)
expr_stmt|;
block|}
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|decls
argument_list|()
operator|.
name|empty
argument_list|()
return|;
block|}
name|unsigned
name|size
argument_list|()
specifier|const
block|{
return|return
name|decls
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
name|void
name|append
parameter_list|(
name|iterator
name|I
parameter_list|,
name|iterator
name|E
parameter_list|)
block|{
name|decls
argument_list|()
operator|.
name|append
argument_list|(
name|I
operator|.
name|I
argument_list|,
name|E
operator|.
name|I
argument_list|)
expr_stmt|;
block|}
name|DeclAccessPair
modifier|&
name|operator
function|[]
parameter_list|(
name|unsigned
name|I
parameter_list|)
block|{
return|return
name|decls
argument_list|()
index|[
name|I
index|]
return|;
block|}
specifier|const
name|DeclAccessPair
modifier|&
name|operator
index|[]
argument_list|(
name|unsigned
name|I
argument_list|)
decl|const
block|{
return|return
name|decls
argument_list|()
index|[
name|I
index|]
return|;
block|}
name|private
label|:
comment|// These work because the only permitted subclass is UnresolvedSetImpl
name|DeclsTy
modifier|&
name|decls
parameter_list|()
block|{
return|return
operator|*
name|reinterpret_cast
operator|<
name|DeclsTy
operator|*
operator|>
operator|(
name|this
operator|)
return|;
block|}
specifier|const
name|DeclsTy
operator|&
name|decls
argument_list|()
specifier|const
block|{
return|return
operator|*
name|reinterpret_cast
operator|<
specifier|const
name|DeclsTy
operator|*
operator|>
operator|(
name|this
operator|)
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/// \brief A set of unresolved declarations.
end_comment

begin_expr_stmt
name|template
operator|<
name|unsigned
name|InlineCapacity
operator|>
name|class
name|UnresolvedSet
operator|:
name|public
name|UnresolvedSetImpl
block|{
name|SmallVector
operator|<
name|DeclAccessPair
block|,
name|InlineCapacity
operator|>
name|Decls
block|; }
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|// namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

