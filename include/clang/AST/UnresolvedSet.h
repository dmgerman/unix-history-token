begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- UnresolvedSet.h - Unresolved sets of declarations  ------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines the UnresolvedSet class, which is used to store
end_comment

begin_comment
comment|//  collections of declarations in the AST.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_AST_UNRESOLVEDSET_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_AST_UNRESOLVEDSET_H
end_define

begin_include
include|#
directive|include
file|<iterator>
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"clang/Basic/Specifiers.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|NamedDecl
decl_stmt|;
comment|/// A POD class for pairing a NamedDecl* with an access specifier.
comment|/// Can be put into unions.
name|class
name|DeclAccessPair
block|{
name|NamedDecl
modifier|*
name|Ptr
decl_stmt|;
comment|// we'd use llvm::PointerUnion, but it isn't trivial
enum|enum
block|{
name|Mask
init|=
literal|0x3
block|}
enum|;
name|public
label|:
specifier|static
name|DeclAccessPair
name|make
parameter_list|(
name|NamedDecl
modifier|*
name|D
parameter_list|,
name|AccessSpecifier
name|AS
parameter_list|)
block|{
name|DeclAccessPair
name|p
decl_stmt|;
name|p
operator|.
name|set
argument_list|(
name|D
argument_list|,
name|AS
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
name|NamedDecl
operator|*
name|getDecl
argument_list|()
specifier|const
block|{
return|return
operator|(
name|NamedDecl
operator|*
operator|)
operator|(
operator|~
name|Mask
operator|&
operator|(
name|uintptr_t
operator|)
name|Ptr
operator|)
return|;
block|}
name|AccessSpecifier
name|getAccess
argument_list|()
specifier|const
block|{
return|return
name|AccessSpecifier
argument_list|(
name|Mask
operator|&
operator|(
name|uintptr_t
operator|)
name|Ptr
argument_list|)
return|;
block|}
name|void
name|setDecl
parameter_list|(
name|NamedDecl
modifier|*
name|D
parameter_list|)
block|{
name|set
argument_list|(
name|D
argument_list|,
name|getAccess
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|setAccess
parameter_list|(
name|AccessSpecifier
name|AS
parameter_list|)
block|{
name|set
argument_list|(
name|getDecl
argument_list|()
argument_list|,
name|AS
argument_list|)
expr_stmt|;
block|}
name|void
name|set
parameter_list|(
name|NamedDecl
modifier|*
name|D
parameter_list|,
name|AccessSpecifier
name|AS
parameter_list|)
block|{
name|Ptr
operator|=
name|reinterpret_cast
operator|<
name|NamedDecl
operator|*
operator|>
operator|(
name|uintptr_t
argument_list|(
name|AS
argument_list|)
operator||
name|reinterpret_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|D
operator|)
operator|)
expr_stmt|;
block|}
name|operator
name|NamedDecl
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|getDecl
argument_list|()
return|;
block|}
name|NamedDecl
operator|*
name|operator
operator|->
expr|(
block|)
decl|const
block|{
return|return
name|getDecl
argument_list|()
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// Take a moment to tell SmallVector that this is POD.
end_comment

begin_macro
unit|namespace
name|llvm
end_macro

begin_block
block|{
name|template
operator|<
name|typename
operator|>
expr|struct
name|isPodLike
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|isPodLike
operator|<
name|clang
operator|::
name|DeclAccessPair
operator|>
block|{
specifier|static
specifier|const
name|bool
name|value
operator|=
name|true
block|; }
expr_stmt|;
block|}
end_block

begin_decl_stmt
name|namespace
name|clang
block|{
comment|/// The iterator over UnresolvedSets.  Serves as both the const and
comment|/// non-const iterator.
name|class
name|UnresolvedSetIterator
block|{
name|private
label|:
typedef|typedef
name|llvm
operator|::
name|SmallVectorImpl
operator|<
name|DeclAccessPair
operator|>
name|DeclsTy
expr_stmt|;
typedef|typedef
name|DeclsTy
operator|::
name|iterator
name|IteratorTy
expr_stmt|;
name|IteratorTy
name|ir
decl_stmt|;
name|friend
name|class
name|UnresolvedSetImpl
decl_stmt|;
name|explicit
name|UnresolvedSetIterator
argument_list|(
name|DeclsTy
operator|::
name|iterator
name|ir
argument_list|)
range|:
name|ir
argument_list|(
argument|ir
argument_list|)
block|{}
name|explicit
name|UnresolvedSetIterator
argument_list|(
argument|DeclsTy::const_iterator ir
argument_list|)
operator|:
name|ir
argument_list|(
argument|const_cast<DeclsTy::iterator>(ir)
argument_list|)
block|{}
name|public
operator|:
name|UnresolvedSetIterator
argument_list|()
block|{}
typedef|typedef
name|std
operator|::
name|iterator_traits
operator|<
name|IteratorTy
operator|>
operator|::
name|difference_type
name|difference_type
expr_stmt|;
typedef|typedef
name|NamedDecl
modifier|*
name|value_type
typedef|;
typedef|typedef
name|NamedDecl
modifier|*
modifier|*
name|pointer
typedef|;
typedef|typedef
name|NamedDecl
modifier|*
name|reference
typedef|;
typedef|typedef
name|std
operator|::
name|iterator_traits
operator|<
name|IteratorTy
operator|>
operator|::
name|iterator_category
name|iterator_category
expr_stmt|;
name|NamedDecl
operator|*
name|getDecl
argument_list|()
specifier|const
block|{
return|return
name|ir
operator|->
name|getDecl
argument_list|()
return|;
block|}
name|AccessSpecifier
name|getAccess
argument_list|()
specifier|const
block|{
return|return
name|ir
operator|->
name|getAccess
argument_list|()
return|;
block|}
name|DeclAccessPair
name|getPair
argument_list|()
specifier|const
block|{
return|return
operator|*
name|ir
return|;
block|}
name|NamedDecl
operator|*
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|getDecl
argument_list|()
return|;
block|}
name|UnresolvedSetIterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|ir
block|;
return|return
operator|*
name|this
return|;
block|}
name|UnresolvedSetIterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
return|return
name|UnresolvedSetIterator
argument_list|(
name|ir
operator|++
argument_list|)
return|;
block|}
name|UnresolvedSetIterator
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
operator|--
name|ir
block|;
return|return
operator|*
name|this
return|;
block|}
name|UnresolvedSetIterator
name|operator
operator|--
operator|(
name|int
operator|)
block|{
return|return
name|UnresolvedSetIterator
argument_list|(
name|ir
operator|--
argument_list|)
return|;
block|}
name|UnresolvedSetIterator
operator|&
name|operator
operator|+=
operator|(
name|difference_type
name|d
operator|)
block|{
name|ir
operator|+=
name|d
block|;
return|return
operator|*
name|this
return|;
block|}
name|UnresolvedSetIterator
name|operator
operator|+
operator|(
name|difference_type
name|d
operator|)
specifier|const
block|{
return|return
name|UnresolvedSetIterator
argument_list|(
name|ir
operator|+
name|d
argument_list|)
return|;
block|}
name|UnresolvedSetIterator
operator|&
name|operator
operator|-=
operator|(
name|difference_type
name|d
operator|)
block|{
name|ir
operator|-=
name|d
block|;
return|return
operator|*
name|this
return|;
block|}
name|UnresolvedSetIterator
name|operator
operator|-
operator|(
name|difference_type
name|d
operator|)
specifier|const
block|{
return|return
name|UnresolvedSetIterator
argument_list|(
name|ir
operator|-
name|d
argument_list|)
return|;
block|}
name|value_type
name|operator
index|[]
argument_list|(
name|difference_type
name|d
argument_list|)
decl|const
block|{
return|return
operator|*
operator|(
operator|*
name|this
operator|+
name|d
operator|)
return|;
block|}
name|difference_type
name|operator
operator|-
operator|(
specifier|const
name|UnresolvedSetIterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|ir
operator|-
name|o
operator|.
name|ir
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|UnresolvedSetIterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|ir
operator|==
name|o
operator|.
name|ir
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|UnresolvedSetIterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|ir
operator|!=
name|o
operator|.
name|ir
return|;
block|}
name|bool
name|operator
operator|<
operator|(
specifier|const
name|UnresolvedSetIterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|ir
operator|<
name|o
operator|.
name|ir
return|;
block|}
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|UnresolvedSetIterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|ir
operator|<=
name|o
operator|.
name|ir
return|;
block|}
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|UnresolvedSetIterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|ir
operator|>=
name|o
operator|.
name|ir
return|;
block|}
name|bool
name|operator
operator|>
operator|(
specifier|const
name|UnresolvedSetIterator
operator|&
name|o
operator|)
specifier|const
block|{
return|return
name|ir
operator|>
name|o
operator|.
name|ir
return|;
block|}
block|}
empty_stmt|;
comment|/// UnresolvedSet - A set of unresolved declarations.  This is needed
comment|/// in a lot of places, but isn't really worth breaking into its own
comment|/// header right now.
name|class
name|UnresolvedSetImpl
block|{
typedef|typedef
name|UnresolvedSetIterator
operator|::
name|DeclsTy
name|DeclsTy
expr_stmt|;
comment|// Don't allow direct construction, and only permit subclassing by
comment|// UnresolvedSet.
name|private
label|:
name|template
operator|<
name|unsigned
name|N
operator|>
name|friend
name|class
name|UnresolvedSet
expr_stmt|;
name|UnresolvedSetImpl
argument_list|()
block|{}
name|UnresolvedSetImpl
argument_list|(
argument|const UnresolvedSetImpl&
argument_list|)
block|{}
name|public
label|:
comment|// We don't currently support assignment through this iterator, so we might
comment|// as well use the same implementation twice.
typedef|typedef
name|UnresolvedSetIterator
name|iterator
typedef|;
typedef|typedef
name|UnresolvedSetIterator
name|const_iterator
typedef|;
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|iterator
argument_list|(
name|decls
argument_list|()
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
name|iterator
name|end
parameter_list|()
block|{
return|return
name|iterator
argument_list|(
name|decls
argument_list|()
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|decls
argument_list|()
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|decls
argument_list|()
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
name|void
name|addDecl
parameter_list|(
name|NamedDecl
modifier|*
name|D
parameter_list|)
block|{
name|addDecl
argument_list|(
name|D
argument_list|,
name|AS_none
argument_list|)
expr_stmt|;
block|}
name|void
name|addDecl
parameter_list|(
name|NamedDecl
modifier|*
name|D
parameter_list|,
name|AccessSpecifier
name|AS
parameter_list|)
block|{
name|decls
argument_list|()
operator|.
name|push_back
argument_list|(
name|DeclAccessPair
operator|::
name|make
argument_list|(
name|D
argument_list|,
name|AS
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/// Replaces the given declaration with the new one, once.
comment|///
comment|/// \return true if the set changed
name|bool
name|replace
parameter_list|(
specifier|const
name|NamedDecl
modifier|*
name|Old
parameter_list|,
name|NamedDecl
modifier|*
name|New
parameter_list|)
block|{
for|for
control|(
name|DeclsTy
operator|::
name|iterator
name|I
operator|=
name|decls
argument_list|()
operator|.
name|begin
argument_list|()
operator|,
name|E
operator|=
name|decls
argument_list|()
operator|.
name|end
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
if|if
condition|(
name|I
operator|->
name|getDecl
argument_list|()
operator|==
name|Old
condition|)
return|return
operator|(
name|I
operator|->
name|setDecl
argument_list|(
name|New
argument_list|)
operator|,
name|true
operator|)
return|;
return|return
name|false
return|;
block|}
comment|/// Replaces the declaration at the given iterator with the new one,
comment|/// preserving the original access bits.
name|void
name|replace
parameter_list|(
name|iterator
name|I
parameter_list|,
name|NamedDecl
modifier|*
name|New
parameter_list|)
block|{
name|I
operator|.
name|ir
operator|->
name|setDecl
argument_list|(
name|New
argument_list|)
expr_stmt|;
block|}
name|void
name|replace
parameter_list|(
name|iterator
name|I
parameter_list|,
name|NamedDecl
modifier|*
name|New
parameter_list|,
name|AccessSpecifier
name|AS
parameter_list|)
block|{
name|I
operator|.
name|ir
operator|->
name|set
argument_list|(
name|New
argument_list|,
name|AS
argument_list|)
expr_stmt|;
block|}
name|void
name|erase
parameter_list|(
name|unsigned
name|I
parameter_list|)
block|{
name|decls
argument_list|()
index|[
name|I
index|]
operator|=
name|decls
argument_list|()
operator|.
name|back
argument_list|()
expr_stmt|;
name|decls
argument_list|()
operator|.
name|pop_back
argument_list|()
expr_stmt|;
block|}
name|void
name|erase
parameter_list|(
name|iterator
name|I
parameter_list|)
block|{
operator|*
name|I
operator|.
name|ir
operator|=
name|decls
argument_list|()
operator|.
name|back
argument_list|()
expr_stmt|;
name|decls
argument_list|()
operator|.
name|pop_back
argument_list|()
expr_stmt|;
block|}
name|void
name|setAccess
parameter_list|(
name|iterator
name|I
parameter_list|,
name|AccessSpecifier
name|AS
parameter_list|)
block|{
name|I
operator|.
name|ir
operator|->
name|setAccess
argument_list|(
name|AS
argument_list|)
expr_stmt|;
block|}
name|void
name|clear
parameter_list|()
block|{
name|decls
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|void
name|set_size
parameter_list|(
name|unsigned
name|N
parameter_list|)
block|{
name|decls
argument_list|()
operator|.
name|set_size
argument_list|(
name|N
argument_list|)
expr_stmt|;
block|}
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|decls
argument_list|()
operator|.
name|empty
argument_list|()
return|;
block|}
name|unsigned
name|size
argument_list|()
specifier|const
block|{
return|return
name|decls
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
name|void
name|append
parameter_list|(
name|iterator
name|I
parameter_list|,
name|iterator
name|E
parameter_list|)
block|{
name|decls
argument_list|()
operator|.
name|append
argument_list|(
name|I
operator|.
name|ir
argument_list|,
name|E
operator|.
name|ir
argument_list|)
expr_stmt|;
block|}
name|DeclAccessPair
modifier|&
name|operator
function|[]
parameter_list|(
name|unsigned
name|I
parameter_list|)
block|{
return|return
name|decls
argument_list|()
index|[
name|I
index|]
return|;
block|}
specifier|const
name|DeclAccessPair
modifier|&
name|operator
index|[]
argument_list|(
name|unsigned
name|I
argument_list|)
decl|const
block|{
return|return
name|decls
argument_list|()
index|[
name|I
index|]
return|;
block|}
name|private
label|:
comment|// These work because the only permitted subclass is UnresolvedSetImpl
name|DeclsTy
modifier|&
name|decls
parameter_list|()
block|{
return|return
operator|*
name|reinterpret_cast
operator|<
name|DeclsTy
operator|*
operator|>
operator|(
name|this
operator|)
return|;
block|}
specifier|const
name|DeclsTy
operator|&
name|decls
argument_list|()
specifier|const
block|{
return|return
operator|*
name|reinterpret_cast
operator|<
specifier|const
name|DeclsTy
operator|*
operator|>
operator|(
name|this
operator|)
return|;
block|}
block|}
empty_stmt|;
comment|/// A set of unresolved declarations
name|template
operator|<
name|unsigned
name|InlineCapacity
operator|>
name|class
name|UnresolvedSet
operator|:
name|public
name|UnresolvedSetImpl
block|{
name|llvm
operator|::
name|SmallVector
operator|<
name|DeclAccessPair
block|,
name|InlineCapacity
operator|>
name|Decls
block|; }
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

