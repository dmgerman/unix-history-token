begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- StmtObjC.h - Classes for representing ObjC statements --*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|/// \brief Defines the Objective-C statement AST node classes.
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_AST_STMTOBJC_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_AST_STMTOBJC_H
end_define

begin_include
include|#
directive|include
file|"clang/AST/Stmt.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Compiler.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
comment|/// \brief Represents Objective-C's collection statement.
comment|///
comment|/// This is represented as 'for (element 'in' collection-expression)' stmt.
name|class
name|ObjCForCollectionStmt
range|:
name|public
name|Stmt
block|{   enum
block|{
name|ELEM
block|,
name|COLLECTION
block|,
name|BODY
block|,
name|END_EXPR
block|}
block|;
name|Stmt
operator|*
name|SubExprs
index|[
name|END_EXPR
index|]
block|;
comment|// SubExprs[ELEM] is an expression or declstmt.
name|SourceLocation
name|ForLoc
block|;
name|SourceLocation
name|RParenLoc
block|;
name|public
operator|:
name|ObjCForCollectionStmt
argument_list|(
argument|Stmt *Elem
argument_list|,
argument|Expr *Collect
argument_list|,
argument|Stmt *Body
argument_list|,
argument|SourceLocation FCL
argument_list|,
argument|SourceLocation RPL
argument_list|)
block|;
name|explicit
name|ObjCForCollectionStmt
argument_list|(
argument|EmptyShell Empty
argument_list|)
operator|:
name|Stmt
argument_list|(
argument|ObjCForCollectionStmtClass
argument_list|,
argument|Empty
argument_list|)
block|{ }
name|Stmt
operator|*
name|getElement
argument_list|()
block|{
return|return
name|SubExprs
index|[
name|ELEM
index|]
return|;
block|}
name|Expr
operator|*
name|getCollection
argument_list|()
block|{
return|return
name|reinterpret_cast
operator|<
name|Expr
operator|*
operator|>
operator|(
name|SubExprs
index|[
name|COLLECTION
index|]
operator|)
return|;
block|}
name|Stmt
operator|*
name|getBody
argument_list|()
block|{
return|return
name|SubExprs
index|[
name|BODY
index|]
return|;
block|}
specifier|const
name|Stmt
operator|*
name|getElement
argument_list|()
specifier|const
block|{
return|return
name|SubExprs
index|[
name|ELEM
index|]
return|;
block|}
specifier|const
name|Expr
operator|*
name|getCollection
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
name|Expr
operator|*
operator|>
operator|(
name|SubExprs
index|[
name|COLLECTION
index|]
operator|)
return|;
block|}
specifier|const
name|Stmt
operator|*
name|getBody
argument_list|()
specifier|const
block|{
return|return
name|SubExprs
index|[
name|BODY
index|]
return|;
block|}
name|void
name|setElement
argument_list|(
argument|Stmt *S
argument_list|)
block|{
name|SubExprs
index|[
name|ELEM
index|]
operator|=
name|S
block|; }
name|void
name|setCollection
argument_list|(
argument|Expr *E
argument_list|)
block|{
name|SubExprs
index|[
name|COLLECTION
index|]
operator|=
name|reinterpret_cast
operator|<
name|Stmt
operator|*
operator|>
operator|(
name|E
operator|)
block|;   }
name|void
name|setBody
argument_list|(
argument|Stmt *S
argument_list|)
block|{
name|SubExprs
index|[
name|BODY
index|]
operator|=
name|S
block|; }
name|SourceLocation
name|getForLoc
argument_list|()
specifier|const
block|{
return|return
name|ForLoc
return|;
block|}
name|void
name|setForLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|ForLoc
operator|=
name|Loc
block|; }
name|SourceLocation
name|getRParenLoc
argument_list|()
specifier|const
block|{
return|return
name|RParenLoc
return|;
block|}
name|void
name|setRParenLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|RParenLoc
operator|=
name|Loc
block|; }
name|SourceRange
name|getSourceRange
argument_list|()
specifier|const
name|LLVM_READONLY
block|{
return|return
name|SourceRange
argument_list|(
name|ForLoc
argument_list|,
name|SubExprs
index|[
name|BODY
index|]
operator|->
name|getLocEnd
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const Stmt *T
argument_list|)
block|{
return|return
name|T
operator|->
name|getStmtClass
argument_list|()
operator|==
name|ObjCForCollectionStmtClass
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const ObjCForCollectionStmt *
argument_list|)
block|{
return|return
name|true
return|;
block|}
comment|// Iterators
name|child_range
name|children
argument_list|()
block|{
return|return
name|child_range
argument_list|(
operator|&
name|SubExprs
index|[
literal|0
index|]
argument_list|,
operator|&
name|SubExprs
index|[
name|END_EXPR
index|]
argument_list|)
return|;
block|}
expr|}
block|;
comment|/// \brief Represents Objective-C's \@catch statement.
name|class
name|ObjCAtCatchStmt
operator|:
name|public
name|Stmt
block|{
name|private
operator|:
name|VarDecl
operator|*
name|ExceptionDecl
block|;
name|Stmt
operator|*
name|Body
block|;
name|SourceLocation
name|AtCatchLoc
block|,
name|RParenLoc
block|;
name|public
operator|:
name|ObjCAtCatchStmt
argument_list|(
argument|SourceLocation atCatchLoc
argument_list|,
argument|SourceLocation rparenloc
argument_list|,
argument|VarDecl *catchVarDecl
argument_list|,
argument|Stmt *atCatchStmt
argument_list|)
operator|:
name|Stmt
argument_list|(
name|ObjCAtCatchStmtClass
argument_list|)
block|,
name|ExceptionDecl
argument_list|(
name|catchVarDecl
argument_list|)
block|,
name|Body
argument_list|(
name|atCatchStmt
argument_list|)
block|,
name|AtCatchLoc
argument_list|(
name|atCatchLoc
argument_list|)
block|,
name|RParenLoc
argument_list|(
argument|rparenloc
argument_list|)
block|{ }
name|explicit
name|ObjCAtCatchStmt
argument_list|(
argument|EmptyShell Empty
argument_list|)
operator|:
name|Stmt
argument_list|(
argument|ObjCAtCatchStmtClass
argument_list|,
argument|Empty
argument_list|)
block|{ }
specifier|const
name|Stmt
operator|*
name|getCatchBody
argument_list|()
specifier|const
block|{
return|return
name|Body
return|;
block|}
name|Stmt
operator|*
name|getCatchBody
argument_list|()
block|{
return|return
name|Body
return|;
block|}
name|void
name|setCatchBody
argument_list|(
argument|Stmt *S
argument_list|)
block|{
name|Body
operator|=
name|S
block|; }
specifier|const
name|VarDecl
operator|*
name|getCatchParamDecl
argument_list|()
specifier|const
block|{
return|return
name|ExceptionDecl
return|;
block|}
name|VarDecl
operator|*
name|getCatchParamDecl
argument_list|()
block|{
return|return
name|ExceptionDecl
return|;
block|}
name|void
name|setCatchParamDecl
argument_list|(
argument|VarDecl *D
argument_list|)
block|{
name|ExceptionDecl
operator|=
name|D
block|; }
name|SourceLocation
name|getAtCatchLoc
argument_list|()
specifier|const
block|{
return|return
name|AtCatchLoc
return|;
block|}
name|void
name|setAtCatchLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|AtCatchLoc
operator|=
name|Loc
block|; }
name|SourceLocation
name|getRParenLoc
argument_list|()
specifier|const
block|{
return|return
name|RParenLoc
return|;
block|}
name|void
name|setRParenLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|RParenLoc
operator|=
name|Loc
block|; }
name|SourceRange
name|getSourceRange
argument_list|()
specifier|const
name|LLVM_READONLY
block|{
return|return
name|SourceRange
argument_list|(
name|AtCatchLoc
argument_list|,
name|Body
operator|->
name|getLocEnd
argument_list|()
argument_list|)
return|;
block|}
name|bool
name|hasEllipsis
argument_list|()
specifier|const
block|{
return|return
name|getCatchParamDecl
argument_list|()
operator|==
literal|0
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const Stmt *T
argument_list|)
block|{
return|return
name|T
operator|->
name|getStmtClass
argument_list|()
operator|==
name|ObjCAtCatchStmtClass
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const ObjCAtCatchStmt *
argument_list|)
block|{
return|return
name|true
return|;
block|}
name|child_range
name|children
argument_list|()
block|{
return|return
name|child_range
argument_list|(
operator|&
name|Body
argument_list|,
operator|&
name|Body
operator|+
literal|1
argument_list|)
return|;
block|}
expr|}
block|;
comment|/// \brief Represents Objective-C's \@finally statement
name|class
name|ObjCAtFinallyStmt
operator|:
name|public
name|Stmt
block|{
name|Stmt
operator|*
name|AtFinallyStmt
block|;
name|SourceLocation
name|AtFinallyLoc
block|;
name|public
operator|:
name|ObjCAtFinallyStmt
argument_list|(
argument|SourceLocation atFinallyLoc
argument_list|,
argument|Stmt *atFinallyStmt
argument_list|)
operator|:
name|Stmt
argument_list|(
name|ObjCAtFinallyStmtClass
argument_list|)
block|,
name|AtFinallyStmt
argument_list|(
name|atFinallyStmt
argument_list|)
block|,
name|AtFinallyLoc
argument_list|(
argument|atFinallyLoc
argument_list|)
block|{}
name|explicit
name|ObjCAtFinallyStmt
argument_list|(
argument|EmptyShell Empty
argument_list|)
operator|:
name|Stmt
argument_list|(
argument|ObjCAtFinallyStmtClass
argument_list|,
argument|Empty
argument_list|)
block|{ }
specifier|const
name|Stmt
operator|*
name|getFinallyBody
argument_list|()
specifier|const
block|{
return|return
name|AtFinallyStmt
return|;
block|}
name|Stmt
operator|*
name|getFinallyBody
argument_list|()
block|{
return|return
name|AtFinallyStmt
return|;
block|}
name|void
name|setFinallyBody
argument_list|(
argument|Stmt *S
argument_list|)
block|{
name|AtFinallyStmt
operator|=
name|S
block|; }
name|SourceRange
name|getSourceRange
argument_list|()
specifier|const
name|LLVM_READONLY
block|{
return|return
name|SourceRange
argument_list|(
name|AtFinallyLoc
argument_list|,
name|AtFinallyStmt
operator|->
name|getLocEnd
argument_list|()
argument_list|)
return|;
block|}
name|SourceLocation
name|getAtFinallyLoc
argument_list|()
specifier|const
block|{
return|return
name|AtFinallyLoc
return|;
block|}
name|void
name|setAtFinallyLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|AtFinallyLoc
operator|=
name|Loc
block|; }
specifier|static
name|bool
name|classof
argument_list|(
argument|const Stmt *T
argument_list|)
block|{
return|return
name|T
operator|->
name|getStmtClass
argument_list|()
operator|==
name|ObjCAtFinallyStmtClass
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const ObjCAtFinallyStmt *
argument_list|)
block|{
return|return
name|true
return|;
block|}
name|child_range
name|children
argument_list|()
block|{
return|return
name|child_range
argument_list|(
operator|&
name|AtFinallyStmt
argument_list|,
operator|&
name|AtFinallyStmt
operator|+
literal|1
argument_list|)
return|;
block|}
expr|}
block|;
comment|/// \brief Represents Objective-C's \@try ... \@catch ... \@finally statement.
name|class
name|ObjCAtTryStmt
operator|:
name|public
name|Stmt
block|{
name|private
operator|:
comment|// The location of the @ in the \@try.
name|SourceLocation
name|AtTryLoc
block|;
comment|// The number of catch blocks in this statement.
name|unsigned
name|NumCatchStmts
operator|:
literal|16
block|;
comment|// Whether this statement has a \@finally statement.
name|bool
name|HasFinally
operator|:
literal|1
block|;
comment|/// \brief Retrieve the statements that are stored after this \@try statement.
comment|///
comment|/// The order of the statements in memory follows the order in the source,
comment|/// with the \@try body first, followed by the \@catch statements (if any)
comment|/// and, finally, the \@finally (if it exists).
name|Stmt
operator|*
operator|*
name|getStmts
argument_list|()
block|{
return|return
name|reinterpret_cast
operator|<
name|Stmt
operator|*
operator|*
operator|>
operator|(
name|this
operator|+
literal|1
operator|)
return|;
block|}
specifier|const
name|Stmt
operator|*
specifier|const
operator|*
name|getStmts
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|Stmt
operator|*
specifier|const
operator|*
operator|>
operator|(
name|this
operator|+
literal|1
operator|)
return|;
block|}
name|ObjCAtTryStmt
argument_list|(
argument|SourceLocation atTryLoc
argument_list|,
argument|Stmt *atTryStmt
argument_list|,
argument|Stmt **CatchStmts
argument_list|,
argument|unsigned NumCatchStmts
argument_list|,
argument|Stmt *atFinallyStmt
argument_list|)
block|;
name|explicit
name|ObjCAtTryStmt
argument_list|(
argument|EmptyShell Empty
argument_list|,
argument|unsigned NumCatchStmts
argument_list|,
argument|bool HasFinally
argument_list|)
operator|:
name|Stmt
argument_list|(
name|ObjCAtTryStmtClass
argument_list|,
name|Empty
argument_list|)
block|,
name|NumCatchStmts
argument_list|(
name|NumCatchStmts
argument_list|)
block|,
name|HasFinally
argument_list|(
argument|HasFinally
argument_list|)
block|{ }
name|public
operator|:
specifier|static
name|ObjCAtTryStmt
operator|*
name|Create
argument_list|(
argument|ASTContext&Context
argument_list|,
argument|SourceLocation atTryLoc
argument_list|,
argument|Stmt *atTryStmt
argument_list|,
argument|Stmt **CatchStmts
argument_list|,
argument|unsigned NumCatchStmts
argument_list|,
argument|Stmt *atFinallyStmt
argument_list|)
block|;
specifier|static
name|ObjCAtTryStmt
operator|*
name|CreateEmpty
argument_list|(
argument|ASTContext&Context
argument_list|,
argument|unsigned NumCatchStmts
argument_list|,
argument|bool HasFinally
argument_list|)
block|;
comment|/// \brief Retrieve the location of the @ in the \@try.
name|SourceLocation
name|getAtTryLoc
argument_list|()
specifier|const
block|{
return|return
name|AtTryLoc
return|;
block|}
name|void
name|setAtTryLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|AtTryLoc
operator|=
name|Loc
block|; }
comment|/// \brief Retrieve the \@try body.
specifier|const
name|Stmt
operator|*
name|getTryBody
argument_list|()
specifier|const
block|{
return|return
name|getStmts
argument_list|()
index|[
literal|0
index|]
return|;
block|}
name|Stmt
operator|*
name|getTryBody
argument_list|()
block|{
return|return
name|getStmts
argument_list|()
index|[
literal|0
index|]
return|;
block|}
name|void
name|setTryBody
argument_list|(
argument|Stmt *S
argument_list|)
block|{
name|getStmts
argument_list|()
index|[
literal|0
index|]
operator|=
name|S
block|; }
comment|/// \brief Retrieve the number of \@catch statements in this try-catch-finally
comment|/// block.
name|unsigned
name|getNumCatchStmts
argument_list|()
specifier|const
block|{
return|return
name|NumCatchStmts
return|;
block|}
comment|/// \brief Retrieve a \@catch statement.
specifier|const
name|ObjCAtCatchStmt
operator|*
name|getCatchStmt
argument_list|(
argument|unsigned I
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|I
operator|<
name|NumCatchStmts
operator|&&
literal|"Out-of-bounds @catch index"
argument_list|)
block|;
return|return
name|cast_or_null
operator|<
name|ObjCAtCatchStmt
operator|>
operator|(
name|getStmts
argument_list|()
index|[
name|I
operator|+
literal|1
index|]
operator|)
return|;
block|}
comment|/// \brief Retrieve a \@catch statement.
name|ObjCAtCatchStmt
operator|*
name|getCatchStmt
argument_list|(
argument|unsigned I
argument_list|)
block|{
name|assert
argument_list|(
name|I
operator|<
name|NumCatchStmts
operator|&&
literal|"Out-of-bounds @catch index"
argument_list|)
block|;
return|return
name|cast_or_null
operator|<
name|ObjCAtCatchStmt
operator|>
operator|(
name|getStmts
argument_list|()
index|[
name|I
operator|+
literal|1
index|]
operator|)
return|;
block|}
comment|/// \brief Set a particular catch statement.
name|void
name|setCatchStmt
argument_list|(
argument|unsigned I
argument_list|,
argument|ObjCAtCatchStmt *S
argument_list|)
block|{
name|assert
argument_list|(
name|I
operator|<
name|NumCatchStmts
operator|&&
literal|"Out-of-bounds @catch index"
argument_list|)
block|;
name|getStmts
argument_list|()
index|[
name|I
operator|+
literal|1
index|]
operator|=
name|S
block|;   }
comment|/// \brief Retrieve the \@finally statement, if any.
specifier|const
name|ObjCAtFinallyStmt
operator|*
name|getFinallyStmt
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|HasFinally
condition|)
return|return
literal|0
return|;
return|return
name|cast_or_null
operator|<
name|ObjCAtFinallyStmt
operator|>
operator|(
name|getStmts
argument_list|()
index|[
literal|1
operator|+
name|NumCatchStmts
index|]
operator|)
return|;
block|}
name|ObjCAtFinallyStmt
operator|*
name|getFinallyStmt
argument_list|()
block|{
if|if
condition|(
operator|!
name|HasFinally
condition|)
return|return
literal|0
return|;
return|return
name|cast_or_null
operator|<
name|ObjCAtFinallyStmt
operator|>
operator|(
name|getStmts
argument_list|()
index|[
literal|1
operator|+
name|NumCatchStmts
index|]
operator|)
return|;
block|}
name|void
name|setFinallyStmt
argument_list|(
argument|Stmt *S
argument_list|)
block|{
name|assert
argument_list|(
name|HasFinally
operator|&&
literal|"@try does not have a @finally slot!"
argument_list|)
block|;
name|getStmts
argument_list|()
index|[
literal|1
operator|+
name|NumCatchStmts
index|]
operator|=
name|S
block|;    }
name|SourceRange
name|getSourceRange
argument_list|()
specifier|const
name|LLVM_READONLY
block|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const Stmt *T
argument_list|)
block|{
return|return
name|T
operator|->
name|getStmtClass
argument_list|()
operator|==
name|ObjCAtTryStmtClass
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const ObjCAtTryStmt *
argument_list|)
block|{
return|return
name|true
return|;
block|}
name|child_range
name|children
argument_list|()
block|{
return|return
name|child_range
argument_list|(
name|getStmts
argument_list|()
argument_list|,
name|getStmts
argument_list|()
operator|+
literal|1
operator|+
name|NumCatchStmts
operator|+
name|HasFinally
argument_list|)
return|;
block|}
expr|}
block|;
comment|/// \brief Represents Objective-C's \@synchronized statement.
comment|///
comment|/// Example:
comment|/// \code
comment|///   @synchronized (sem) {
comment|///     do-something;
comment|///   }
comment|/// \endcode
name|class
name|ObjCAtSynchronizedStmt
operator|:
name|public
name|Stmt
block|{
name|private
operator|:
expr|enum
block|{
name|SYNC_EXPR
block|,
name|SYNC_BODY
block|,
name|END_EXPR
block|}
block|;
name|Stmt
operator|*
name|SubStmts
index|[
name|END_EXPR
index|]
block|;
name|SourceLocation
name|AtSynchronizedLoc
block|;
name|public
operator|:
name|ObjCAtSynchronizedStmt
argument_list|(
argument|SourceLocation atSynchronizedLoc
argument_list|,
argument|Stmt *synchExpr
argument_list|,
argument|Stmt *synchBody
argument_list|)
operator|:
name|Stmt
argument_list|(
argument|ObjCAtSynchronizedStmtClass
argument_list|)
block|{
name|SubStmts
index|[
name|SYNC_EXPR
index|]
operator|=
name|synchExpr
block|;
name|SubStmts
index|[
name|SYNC_BODY
index|]
operator|=
name|synchBody
block|;
name|AtSynchronizedLoc
operator|=
name|atSynchronizedLoc
block|;   }
name|explicit
name|ObjCAtSynchronizedStmt
argument_list|(
argument|EmptyShell Empty
argument_list|)
operator|:
name|Stmt
argument_list|(
argument|ObjCAtSynchronizedStmtClass
argument_list|,
argument|Empty
argument_list|)
block|{ }
name|SourceLocation
name|getAtSynchronizedLoc
argument_list|()
specifier|const
block|{
return|return
name|AtSynchronizedLoc
return|;
block|}
name|void
name|setAtSynchronizedLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|AtSynchronizedLoc
operator|=
name|Loc
block|; }
specifier|const
name|CompoundStmt
operator|*
name|getSynchBody
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
name|CompoundStmt
operator|*
operator|>
operator|(
name|SubStmts
index|[
name|SYNC_BODY
index|]
operator|)
return|;
block|}
name|CompoundStmt
operator|*
name|getSynchBody
argument_list|()
block|{
return|return
name|reinterpret_cast
operator|<
name|CompoundStmt
operator|*
operator|>
operator|(
name|SubStmts
index|[
name|SYNC_BODY
index|]
operator|)
return|;
block|}
name|void
name|setSynchBody
argument_list|(
argument|Stmt *S
argument_list|)
block|{
name|SubStmts
index|[
name|SYNC_BODY
index|]
operator|=
name|S
block|; }
specifier|const
name|Expr
operator|*
name|getSynchExpr
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
name|Expr
operator|*
operator|>
operator|(
name|SubStmts
index|[
name|SYNC_EXPR
index|]
operator|)
return|;
block|}
name|Expr
operator|*
name|getSynchExpr
argument_list|()
block|{
return|return
name|reinterpret_cast
operator|<
name|Expr
operator|*
operator|>
operator|(
name|SubStmts
index|[
name|SYNC_EXPR
index|]
operator|)
return|;
block|}
name|void
name|setSynchExpr
argument_list|(
argument|Stmt *S
argument_list|)
block|{
name|SubStmts
index|[
name|SYNC_EXPR
index|]
operator|=
name|S
block|; }
name|SourceRange
name|getSourceRange
argument_list|()
specifier|const
name|LLVM_READONLY
block|{
return|return
name|SourceRange
argument_list|(
name|AtSynchronizedLoc
argument_list|,
name|getSynchBody
argument_list|()
operator|->
name|getLocEnd
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const Stmt *T
argument_list|)
block|{
return|return
name|T
operator|->
name|getStmtClass
argument_list|()
operator|==
name|ObjCAtSynchronizedStmtClass
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const ObjCAtSynchronizedStmt *
argument_list|)
block|{
return|return
name|true
return|;
block|}
name|child_range
name|children
argument_list|()
block|{
return|return
name|child_range
argument_list|(
operator|&
name|SubStmts
index|[
literal|0
index|]
argument_list|,
operator|&
name|SubStmts
index|[
literal|0
index|]
operator|+
name|END_EXPR
argument_list|)
return|;
block|}
expr|}
block|;
comment|/// \brief Represents Objective-C's \@throw statement.
name|class
name|ObjCAtThrowStmt
operator|:
name|public
name|Stmt
block|{
name|Stmt
operator|*
name|Throw
block|;
name|SourceLocation
name|AtThrowLoc
block|;
name|public
operator|:
name|ObjCAtThrowStmt
argument_list|(
argument|SourceLocation atThrowLoc
argument_list|,
argument|Stmt *throwExpr
argument_list|)
operator|:
name|Stmt
argument_list|(
name|ObjCAtThrowStmtClass
argument_list|)
block|,
name|Throw
argument_list|(
argument|throwExpr
argument_list|)
block|{
name|AtThrowLoc
operator|=
name|atThrowLoc
block|;   }
name|explicit
name|ObjCAtThrowStmt
argument_list|(
argument|EmptyShell Empty
argument_list|)
operator|:
name|Stmt
argument_list|(
argument|ObjCAtThrowStmtClass
argument_list|,
argument|Empty
argument_list|)
block|{ }
specifier|const
name|Expr
operator|*
name|getThrowExpr
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
name|Expr
operator|*
operator|>
operator|(
name|Throw
operator|)
return|;
block|}
name|Expr
operator|*
name|getThrowExpr
argument_list|()
block|{
return|return
name|reinterpret_cast
operator|<
name|Expr
operator|*
operator|>
operator|(
name|Throw
operator|)
return|;
block|}
name|void
name|setThrowExpr
argument_list|(
argument|Stmt *S
argument_list|)
block|{
name|Throw
operator|=
name|S
block|; }
name|SourceLocation
name|getThrowLoc
argument_list|()
block|{
return|return
name|AtThrowLoc
return|;
block|}
name|void
name|setThrowLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|AtThrowLoc
operator|=
name|Loc
block|; }
name|SourceRange
name|getSourceRange
argument_list|()
specifier|const
name|LLVM_READONLY
block|{
if|if
condition|(
name|Throw
condition|)
return|return
name|SourceRange
argument_list|(
name|AtThrowLoc
argument_list|,
name|Throw
operator|->
name|getLocEnd
argument_list|()
argument_list|)
return|;
else|else
return|return
name|SourceRange
argument_list|(
name|AtThrowLoc
argument_list|)
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const Stmt *T
argument_list|)
block|{
return|return
name|T
operator|->
name|getStmtClass
argument_list|()
operator|==
name|ObjCAtThrowStmtClass
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const ObjCAtThrowStmt *
argument_list|)
block|{
return|return
name|true
return|;
block|}
name|child_range
name|children
argument_list|()
block|{
return|return
name|child_range
argument_list|(
operator|&
name|Throw
argument_list|,
operator|&
name|Throw
operator|+
literal|1
argument_list|)
return|;
block|}
expr|}
block|;
comment|/// \brief Represents Objective-C's \@autoreleasepool Statement
name|class
name|ObjCAutoreleasePoolStmt
operator|:
name|public
name|Stmt
block|{
name|Stmt
operator|*
name|SubStmt
block|;
name|SourceLocation
name|AtLoc
block|;
name|public
operator|:
name|ObjCAutoreleasePoolStmt
argument_list|(
argument|SourceLocation atLoc
argument_list|,
argument|Stmt *subStmt
argument_list|)
operator|:
name|Stmt
argument_list|(
name|ObjCAutoreleasePoolStmtClass
argument_list|)
block|,
name|SubStmt
argument_list|(
name|subStmt
argument_list|)
block|,
name|AtLoc
argument_list|(
argument|atLoc
argument_list|)
block|{}
name|explicit
name|ObjCAutoreleasePoolStmt
argument_list|(
argument|EmptyShell Empty
argument_list|)
operator|:
name|Stmt
argument_list|(
argument|ObjCAutoreleasePoolStmtClass
argument_list|,
argument|Empty
argument_list|)
block|{ }
specifier|const
name|Stmt
operator|*
name|getSubStmt
argument_list|()
specifier|const
block|{
return|return
name|SubStmt
return|;
block|}
name|Stmt
operator|*
name|getSubStmt
argument_list|()
block|{
return|return
name|SubStmt
return|;
block|}
name|void
name|setSubStmt
argument_list|(
argument|Stmt *S
argument_list|)
block|{
name|SubStmt
operator|=
name|S
block|; }
name|SourceRange
name|getSourceRange
argument_list|()
specifier|const
name|LLVM_READONLY
block|{
return|return
name|SourceRange
argument_list|(
name|AtLoc
argument_list|,
name|SubStmt
operator|->
name|getLocEnd
argument_list|()
argument_list|)
return|;
block|}
name|SourceLocation
name|getAtLoc
argument_list|()
specifier|const
block|{
return|return
name|AtLoc
return|;
block|}
name|void
name|setAtLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|AtLoc
operator|=
name|Loc
block|; }
specifier|static
name|bool
name|classof
argument_list|(
argument|const Stmt *T
argument_list|)
block|{
return|return
name|T
operator|->
name|getStmtClass
argument_list|()
operator|==
name|ObjCAutoreleasePoolStmtClass
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const ObjCAutoreleasePoolStmt *
argument_list|)
block|{
return|return
name|true
return|;
block|}
name|child_range
name|children
argument_list|()
block|{
return|return
name|child_range
argument_list|(
operator|&
name|SubStmt
argument_list|,
operator|&
name|SubStmt
operator|+
literal|1
argument_list|)
return|;
block|}
expr|}
block|;  }
end_decl_stmt

begin_comment
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

