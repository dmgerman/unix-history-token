begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- DependentDiagnostic.h - Dependently-generated diagnostics -*- C++ -*-=//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines interfaces for diagnostics which may or may
end_comment

begin_comment
comment|//  fire based on how a template is instantiated.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  At the moment, the only consumer of this interface is access
end_comment

begin_comment
comment|//  control.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_AST_DEPENDENT_DIAGNOSTIC_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_AST_DEPENDENT_DIAGNOSTIC_H
end_define

begin_include
include|#
directive|include
file|"clang/Basic/PartialDiagnostic.h"
end_include

begin_include
include|#
directive|include
file|"clang/Basic/SourceLocation.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/DeclBase.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/DeclContextInternals.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|ASTContext
decl_stmt|;
name|class
name|CXXRecordDecl
decl_stmt|;
name|class
name|NamedDecl
decl_stmt|;
comment|/// A dependently-generated diagnostic.
name|class
name|DependentDiagnostic
block|{
name|public
label|:
enum|enum
name|AccessNonce
block|{
name|Access
init|=
literal|0
block|}
enum|;
specifier|static
name|DependentDiagnostic
modifier|*
name|Create
parameter_list|(
name|ASTContext
modifier|&
name|Context
parameter_list|,
name|DeclContext
modifier|*
name|Parent
parameter_list|,
name|AccessNonce
name|_
parameter_list|,
name|SourceLocation
name|Loc
parameter_list|,
name|bool
name|IsMemberAccess
parameter_list|,
name|AccessSpecifier
name|AS
parameter_list|,
name|NamedDecl
modifier|*
name|TargetDecl
parameter_list|,
name|CXXRecordDecl
modifier|*
name|NamingClass
parameter_list|,
specifier|const
name|PartialDiagnostic
modifier|&
name|PDiag
parameter_list|)
block|{
name|DependentDiagnostic
modifier|*
name|DD
init|=
name|Create
argument_list|(
name|Context
argument_list|,
name|Parent
argument_list|,
name|PDiag
argument_list|)
decl_stmt|;
name|DD
operator|->
name|AccessData
operator|.
name|Loc
operator|=
name|Loc
operator|.
name|getRawEncoding
argument_list|()
expr_stmt|;
name|DD
operator|->
name|AccessData
operator|.
name|IsMember
operator|=
name|IsMemberAccess
expr_stmt|;
name|DD
operator|->
name|AccessData
operator|.
name|Access
operator|=
name|AS
expr_stmt|;
name|DD
operator|->
name|AccessData
operator|.
name|TargetDecl
operator|=
name|TargetDecl
expr_stmt|;
name|DD
operator|->
name|AccessData
operator|.
name|NamingClass
operator|=
name|NamingClass
expr_stmt|;
return|return
name|DD
return|;
block|}
name|unsigned
name|getKind
argument_list|()
specifier|const
block|{
return|return
name|Access
return|;
block|}
name|bool
name|isAccessToMember
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|getKind
argument_list|()
operator|==
name|Access
argument_list|)
block|;
return|return
name|AccessData
operator|.
name|IsMember
return|;
block|}
name|AccessSpecifier
name|getAccess
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|getKind
argument_list|()
operator|==
name|Access
argument_list|)
block|;
return|return
name|AccessSpecifier
argument_list|(
name|AccessData
operator|.
name|Access
argument_list|)
return|;
block|}
name|SourceLocation
name|getAccessLoc
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|getKind
argument_list|()
operator|==
name|Access
argument_list|)
block|;
return|return
name|SourceLocation
operator|::
name|getFromRawEncoding
argument_list|(
name|AccessData
operator|.
name|Loc
argument_list|)
return|;
block|}
name|NamedDecl
operator|*
name|getAccessTarget
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|getKind
argument_list|()
operator|==
name|Access
argument_list|)
block|;
return|return
name|AccessData
operator|.
name|TargetDecl
return|;
block|}
name|NamedDecl
operator|*
name|getAccessNamingClass
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|getKind
argument_list|()
operator|==
name|Access
argument_list|)
block|;
return|return
name|AccessData
operator|.
name|NamingClass
return|;
block|}
specifier|const
name|PartialDiagnostic
operator|&
name|getDiagnostic
argument_list|()
specifier|const
block|{
return|return
name|Diag
return|;
block|}
name|private
label|:
name|DependentDiagnostic
argument_list|(
specifier|const
name|PartialDiagnostic
operator|&
name|PDiag
argument_list|,
name|PartialDiagnostic
operator|::
name|Storage
operator|*
name|Storage
argument_list|)
operator|:
name|Diag
argument_list|(
argument|PDiag
argument_list|,
argument|Storage
argument_list|)
block|{}
specifier|static
name|DependentDiagnostic
operator|*
name|Create
argument_list|(
name|ASTContext
operator|&
name|Context
argument_list|,
name|DeclContext
operator|*
name|Parent
argument_list|,
specifier|const
name|PartialDiagnostic
operator|&
name|PDiag
argument_list|)
expr_stmt|;
name|friend
name|class
name|DependentStoredDeclsMap
decl_stmt|;
name|friend
name|class
name|DeclContext
operator|::
name|ddiag_iterator
expr_stmt|;
name|DependentDiagnostic
modifier|*
name|NextDiagnostic
decl_stmt|;
name|PartialDiagnostic
name|Diag
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|unsigned
name|Loc
decl_stmt|;
name|unsigned
name|Access
range|:
literal|2
decl_stmt|;
name|unsigned
name|IsMember
range|:
literal|1
decl_stmt|;
name|NamedDecl
modifier|*
name|TargetDecl
decl_stmt|;
name|CXXRecordDecl
modifier|*
name|NamingClass
decl_stmt|;
block|}
name|AccessData
struct|;
block|}
union|;
block|}
empty_stmt|;
comment|///
comment|/// An iterator over the dependent diagnostics in a dependent context.
name|class
name|DeclContext
operator|::
name|ddiag_iterator
block|{
name|public
operator|:
name|ddiag_iterator
argument_list|()
operator|:
name|Ptr
argument_list|(
literal|0
argument_list|)
block|{}
name|explicit
name|ddiag_iterator
argument_list|(
name|DependentDiagnostic
operator|*
name|Ptr
argument_list|)
operator|:
name|Ptr
argument_list|(
argument|Ptr
argument_list|)
block|{}
typedef|typedef
name|DependentDiagnostic
modifier|*
name|value_type
typedef|;
typedef|typedef
name|DependentDiagnostic
modifier|*
name|reference
typedef|;
typedef|typedef
name|DependentDiagnostic
modifier|*
name|pointer
typedef|;
typedef|typedef
name|int
name|difference_type
typedef|;
typedef|typedef
name|std
operator|::
name|forward_iterator_tag
name|iterator_category
expr_stmt|;
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|Ptr
return|;
block|}
name|ddiag_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|assert
argument_list|(
name|Ptr
operator|&&
literal|"attempt to increment past end of diag list"
argument_list|)
block|;
name|Ptr
operator|=
name|Ptr
operator|->
name|NextDiagnostic
block|;
return|return
operator|*
name|this
return|;
block|}
name|ddiag_iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|ddiag_iterator
name|tmp
operator|=
operator|*
name|this
block|;
operator|++
operator|*
name|this
block|;
return|return
name|tmp
return|;
block|}
name|bool
name|operator
operator|==
operator|(
name|ddiag_iterator
name|Other
operator|)
specifier|const
block|{
return|return
name|Ptr
operator|==
name|Other
operator|.
name|Ptr
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
name|ddiag_iterator
name|Other
operator|)
specifier|const
block|{
return|return
name|Ptr
operator|!=
name|Other
operator|.
name|Ptr
return|;
block|}
name|ddiag_iterator
operator|&
name|operator
operator|+=
operator|(
name|difference_type
name|N
operator|)
block|{
name|assert
argument_list|(
name|N
operator|>=
literal|0
operator|&&
literal|"cannot rewind a DeclContext::ddiag_iterator"
argument_list|)
block|;
while|while
condition|(
name|N
operator|--
condition|)
operator|++
operator|*
name|this
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|ddiag_iterator
name|operator
operator|+
operator|(
name|difference_type
name|N
operator|)
specifier|const
block|{
name|ddiag_iterator
name|tmp
operator|=
operator|*
name|this
block|;
name|tmp
operator|+=
name|N
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|DependentDiagnostic
modifier|*
name|Ptr
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
specifier|inline
name|DeclContext
operator|::
name|ddiag_iterator
name|DeclContext
operator|::
name|ddiag_begin
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isDependentContext
argument_list|()
operator|&&
literal|"cannot iterate dependent diagnostics of non-dependent context"
argument_list|)
block|;
specifier|const
name|DependentStoredDeclsMap
operator|*
name|Map
operator|=
name|static_cast
operator|<
name|DependentStoredDeclsMap
operator|*
operator|>
operator|(
name|getPrimaryContext
argument_list|()
operator|->
name|LookupPtr
operator|)
block|;
if|if
condition|(
operator|!
name|Map
condition|)
return|return
name|ddiag_iterator
argument_list|()
return|;
end_expr_stmt

begin_return
return|return
name|ddiag_iterator
argument_list|(
name|Map
operator|->
name|FirstDiagnostic
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  inline
name|DeclContext
operator|::
name|ddiag_iterator
name|DeclContext
operator|::
name|ddiag_end
argument_list|()
specifier|const
block|{
return|return
name|ddiag_iterator
argument_list|()
return|;
block|}
end_expr_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

end_unit

