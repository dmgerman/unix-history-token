begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- TypeLoc.h - Type Source Info Wrapper -------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines the TypeLoc interface and subclasses.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_AST_TYPELOC_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_AST_TYPELOC_H
end_define

begin_include
include|#
directive|include
file|"clang/AST/Type.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|ParmVarDecl
decl_stmt|;
name|class
name|TypeSpecLoc
decl_stmt|;
name|class
name|DeclaratorInfo
decl_stmt|;
name|class
name|UnqualTypeLoc
decl_stmt|;
comment|/// \brief Base wrapper for a particular "section" of type source info.
comment|///
comment|/// A client should use the TypeLoc subclasses through cast/dyn_cast in order to
comment|/// get at the actual information.
name|class
name|TypeLoc
block|{
name|protected
label|:
comment|// The correctness of this relies on the property that, for Type *Ty,
comment|//   QualType(Ty, 0).getAsOpaquePtr() == (void*) Ty
name|void
modifier|*
name|Ty
decl_stmt|;
name|void
modifier|*
name|Data
decl_stmt|;
name|public
label|:
name|TypeLoc
argument_list|()
operator|:
name|Ty
argument_list|(
literal|0
argument_list|)
operator|,
name|Data
argument_list|(
literal|0
argument_list|)
block|{ }
name|TypeLoc
argument_list|(
argument|QualType ty
argument_list|,
argument|void *opaqueData
argument_list|)
operator|:
name|Ty
argument_list|(
name|ty
operator|.
name|getAsOpaquePtr
argument_list|()
argument_list|)
operator|,
name|Data
argument_list|(
argument|opaqueData
argument_list|)
block|{ }
name|TypeLoc
argument_list|(
name|Type
operator|*
name|ty
argument_list|,
name|void
operator|*
name|opaqueData
argument_list|)
operator|:
name|Ty
argument_list|(
name|ty
argument_list|)
operator|,
name|Data
argument_list|(
argument|opaqueData
argument_list|)
block|{ }
name|bool
name|isNull
argument_list|()
specifier|const
block|{
return|return
operator|!
name|Ty
return|;
block|}
name|operator
name|bool
argument_list|()
specifier|const
block|{
return|return
name|Ty
return|;
block|}
comment|/// \brief Returns the size of type source info data block for the given type.
specifier|static
name|unsigned
name|getFullDataSizeForType
parameter_list|(
name|QualType
name|Ty
parameter_list|)
function_decl|;
comment|/// \brief Get the type for which this source info wrapper provides
comment|/// information.
name|QualType
name|getSourceType
argument_list|()
specifier|const
block|{
return|return
name|QualType
operator|::
name|getFromOpaquePtr
argument_list|(
name|Ty
argument_list|)
return|;
block|}
name|Type
operator|*
name|getSourceTypePtr
argument_list|()
specifier|const
block|{
return|return
name|QualType
operator|::
name|getFromOpaquePtr
argument_list|(
name|Ty
argument_list|)
operator|.
name|getTypePtr
argument_list|()
return|;
block|}
comment|/// \brief Get the pointer where source information is stored.
name|void
operator|*
name|getOpaqueData
argument_list|()
specifier|const
block|{
return|return
name|Data
return|;
block|}
name|SourceRange
name|getSourceRange
argument_list|()
specifier|const
expr_stmt|;
comment|/// \brief Find the TypeSpecLoc that is part of this TypeLoc.
name|TypeSpecLoc
name|getTypeSpecLoc
argument_list|()
specifier|const
expr_stmt|;
comment|/// \brief Find the TypeSpecLoc that is part of this TypeLoc and return its
comment|/// SourceRange.
name|SourceRange
name|getTypeSpecRange
argument_list|()
specifier|const
expr_stmt|;
comment|/// \brief Returns the size of the type source info data block.
name|unsigned
name|getFullDataSize
argument_list|()
specifier|const
block|{
return|return
name|getFullDataSizeForType
argument_list|(
name|getSourceType
argument_list|()
argument_list|)
return|;
block|}
comment|/// \brief Get the next TypeLoc pointed by this TypeLoc, e.g for "int*" the
comment|/// TypeLoc is a PointerLoc and next TypeLoc is for "int".
name|TypeLoc
name|getNextTypeLoc
argument_list|()
specifier|const
expr_stmt|;
comment|/// \brief Skips past any qualifiers, if this is qualified.
name|UnqualTypeLoc
name|getUnqualifiedLoc
argument_list|()
specifier|const
expr_stmt|;
name|friend
name|bool
name|operator
operator|==
operator|(
specifier|const
name|TypeLoc
operator|&
name|LHS
operator|,
specifier|const
name|TypeLoc
operator|&
name|RHS
operator|)
block|{
return|return
name|LHS
operator|.
name|Ty
operator|==
name|RHS
operator|.
name|Ty
operator|&&
name|LHS
operator|.
name|Data
operator|==
name|RHS
operator|.
name|Data
return|;
block|}
name|friend
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|TypeLoc
operator|&
name|LHS
operator|,
specifier|const
name|TypeLoc
operator|&
name|RHS
operator|)
block|{
return|return
operator|!
operator|(
name|LHS
operator|==
name|RHS
operator|)
return|;
block|}
specifier|static
name|bool
name|classof
parameter_list|(
specifier|const
name|TypeLoc
modifier|*
name|TL
parameter_list|)
block|{
return|return
name|true
return|;
block|}
block|}
empty_stmt|;
comment|/// \brief Wrapper of type source information for a type with
comment|/// no direct quqlaifiers.
name|class
name|UnqualTypeLoc
range|:
name|public
name|TypeLoc
block|{
name|public
operator|:
name|UnqualTypeLoc
argument_list|()
block|{}
name|UnqualTypeLoc
argument_list|(
name|Type
operator|*
name|Ty
argument_list|,
name|void
operator|*
name|Data
argument_list|)
operator|:
name|TypeLoc
argument_list|(
argument|Ty
argument_list|,
argument|Data
argument_list|)
block|{}
name|Type
operator|*
name|getSourceTypePtr
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
name|Type
operator|*
operator|>
operator|(
name|Ty
operator|)
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const TypeLoc *TL
argument_list|)
block|{
return|return
operator|!
name|TL
operator|->
name|getSourceType
argument_list|()
operator|.
name|hasQualifiers
argument_list|()
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const UnqualTypeLoc *TL
argument_list|)
block|{
return|return
name|true
return|;
block|}
expr|}
block|;
comment|/// \brief Wrapper of type source information for a type with
comment|/// non-trivial direct qualifiers.
comment|///
comment|/// Currently, we intentionally do not provide source location for
comment|/// type qualifiers.
name|class
name|QualifiedLoc
operator|:
name|public
name|TypeLoc
block|{
name|public
operator|:
name|SourceRange
name|getSourceRange
argument_list|()
specifier|const
block|{
return|return
name|SourceRange
argument_list|()
return|;
block|}
name|UnqualTypeLoc
name|getUnqualifiedLoc
argument_list|()
specifier|const
block|{
return|return
name|UnqualTypeLoc
argument_list|(
name|getSourceTypePtr
argument_list|()
argument_list|,
name|Data
argument_list|)
return|;
block|}
comment|/// \brief Returns the size of the type source info data block that is
comment|/// specific to this type.
name|unsigned
name|getLocalDataSize
argument_list|()
specifier|const
block|{
comment|// In fact, we don't currently preserve any location information
comment|// for qualifiers.
return|return
literal|0
return|;
block|}
comment|/// \brief Returns the size of the type source info data block.
name|unsigned
name|getFullDataSize
argument_list|()
specifier|const
block|{
return|return
name|getLocalDataSize
argument_list|()
operator|+
name|getFullDataSizeForType
argument_list|(
name|getSourceType
argument_list|()
operator|.
name|getUnqualifiedType
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const TypeLoc *TL
argument_list|)
block|{
return|return
name|TL
operator|->
name|getSourceType
argument_list|()
operator|.
name|hasQualifiers
argument_list|()
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const QualifiedLoc *TL
argument_list|)
block|{
return|return
name|true
return|;
block|}
expr|}
block|;
specifier|inline
name|UnqualTypeLoc
name|TypeLoc
operator|::
name|getUnqualifiedLoc
argument_list|()
specifier|const
block|{
if|if
condition|(
name|isa
operator|<
name|QualifiedLoc
operator|>
operator|(
name|this
operator|)
condition|)
return|return
name|cast
operator|<
name|QualifiedLoc
operator|>
operator|(
name|this
operator|)
operator|->
name|getUnqualifiedLoc
argument_list|()
return|;
return|return
name|cast
operator|<
name|UnqualTypeLoc
operator|>
operator|(
operator|*
name|this
operator|)
return|;
block|}
comment|/// \brief Base wrapper of type source info data for type-spec types.
name|class
name|TypeSpecLoc
operator|:
name|public
name|UnqualTypeLoc
block|{
name|public
operator|:
specifier|static
name|bool
name|classof
argument_list|(
argument|const TypeLoc *TL
argument_list|)
block|{
return|return
operator|(
name|UnqualTypeLoc
operator|::
name|classof
argument_list|(
name|TL
argument_list|)
operator|&&
name|classof
argument_list|(
name|static_cast
operator|<
specifier|const
name|UnqualTypeLoc
operator|*
operator|>
operator|(
name|TL
operator|)
argument_list|)
operator|)
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
specifier|const
name|UnqualTypeLoc
operator|*
name|TL
argument_list|)
block|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const TypeSpecLoc *TL
argument_list|)
block|{
return|return
name|true
return|;
block|}
expr|}
block|;
specifier|inline
name|SourceRange
name|TypeLoc
operator|::
name|getTypeSpecRange
argument_list|()
specifier|const
block|{
return|return
name|getTypeSpecLoc
argument_list|()
operator|.
name|getSourceRange
argument_list|()
return|;
block|}
comment|/// \brief Base wrapper of type source info data for types part of a declarator,
comment|/// excluding type-spec types.
name|class
name|DeclaratorLoc
operator|:
name|public
name|UnqualTypeLoc
block|{
name|public
operator|:
comment|/// \brief Find the TypeSpecLoc that is part of this DeclaratorLoc.
name|TypeSpecLoc
name|getTypeSpecLoc
argument_list|()
specifier|const
block|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const TypeLoc *TL
argument_list|)
block|{
return|return
operator|(
name|UnqualTypeLoc
operator|::
name|classof
argument_list|(
name|TL
argument_list|)
operator|&&
name|classof
argument_list|(
name|static_cast
operator|<
specifier|const
name|UnqualTypeLoc
operator|*
operator|>
operator|(
name|TL
operator|)
argument_list|)
operator|)
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
specifier|const
name|UnqualTypeLoc
operator|*
name|TL
argument_list|)
block|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const DeclaratorLoc *TL
argument_list|)
block|{
return|return
name|true
return|;
block|}
expr|}
block|;
comment|/// A metaprogramming base class for TypeLoc classes which correspond
comment|/// to a particular Type subclass.  It is accepted for a single
comment|/// TypeLoc class to correspond to multiple Type classes.
comment|///
comment|/// \param Base a class from which to derive
comment|/// \param Derived the class deriving from this one
comment|/// \param TypeClass the concrete Type subclass associated with this
comment|///   location type
comment|/// \param LocalData the structure type of local location data for
comment|///   this type
comment|///
comment|/// sizeof(LocalData) needs to be a multiple of sizeof(void*) or
comment|/// else the world will end.
comment|///
comment|/// TypeLocs with non-constant amounts of local data should override
comment|/// getExtraLocalDataSize(); getExtraLocalData() will then point to
comment|/// this extra memory.
comment|///
comment|/// TypeLocs with an inner type should override hasInnerType() and
comment|/// getInnerType(); getInnerTypeLoc() will then point to this inner
comment|/// type's location data.
name|template
operator|<
name|class
name|Base
block|,
name|class
name|Derived
block|,
name|class
name|TypeClass
block|,
name|class
name|LocalData
operator|>
name|class
name|ConcreteTypeLoc
operator|:
name|public
name|Base
block|{
specifier|const
name|Derived
operator|*
name|asDerived
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
specifier|const
name|Derived
operator|*
operator|>
operator|(
name|this
operator|)
return|;
block|}
name|public
operator|:
name|unsigned
name|getLocalDataSize
argument_list|()
specifier|const
block|{
return|return
sizeof|sizeof
argument_list|(
name|LocalData
argument_list|)
operator|+
name|asDerived
argument_list|()
operator|->
name|getExtraLocalDataSize
argument_list|()
return|;
block|}
comment|// Give a default implementation that's useful for leaf types.
name|unsigned
name|getFullDataSize
argument_list|()
specifier|const
block|{
return|return
name|asDerived
argument_list|()
operator|->
name|getLocalDataSize
argument_list|()
operator|+
name|getInnerTypeSize
argument_list|()
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const TypeLoc *TL
argument_list|)
block|{
return|return
name|Derived
operator|::
name|classofType
argument_list|(
name|TL
operator|->
name|getSourceTypePtr
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const UnqualTypeLoc *TL
argument_list|)
block|{
return|return
name|Derived
operator|::
name|classofType
argument_list|(
name|TL
operator|->
name|getSourceTypePtr
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const Derived *TL
argument_list|)
block|{
return|return
name|true
return|;
block|}
specifier|static
name|bool
name|classofType
argument_list|(
argument|const Type *Ty
argument_list|)
block|{
return|return
name|TypeClass
operator|::
name|classof
argument_list|(
name|Ty
argument_list|)
return|;
block|}
name|protected
operator|:
name|TypeClass
operator|*
name|getTypePtr
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|TypeClass
operator|>
operator|(
name|Base
operator|::
name|getSourceTypePtr
argument_list|()
operator|)
return|;
block|}
name|unsigned
name|getExtraLocalDataSize
argument_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
name|LocalData
operator|*
name|getLocalData
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|LocalData
operator|*
operator|>
operator|(
name|Base
operator|::
name|Data
operator|)
return|;
block|}
comment|/// Gets a pointer past the Info structure; useful for classes with
comment|/// local data that can't be captured in the Info (e.g. because it's
comment|/// of variable size).
name|void
operator|*
name|getExtraLocalData
argument_list|()
specifier|const
block|{
return|return
name|getLocalData
argument_list|()
operator|+
literal|1
return|;
block|}
name|void
operator|*
name|getNonLocalData
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|Base
operator|::
name|Data
operator|)
operator|+
name|asDerived
argument_list|()
operator|->
name|getLocalDataSize
argument_list|()
return|;
block|}
name|bool
name|hasInnerType
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|TypeLoc
name|getInnerTypeLoc
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|asDerived
argument_list|()
operator|->
name|hasInnerType
argument_list|()
argument_list|)
block|;
return|return
name|TypeLoc
argument_list|(
name|asDerived
argument_list|()
operator|->
name|getInnerType
argument_list|()
argument_list|,
name|getNonLocalData
argument_list|()
argument_list|)
return|;
block|}
name|private
operator|:
name|unsigned
name|getInnerTypeSize
argument_list|()
specifier|const
block|{
if|if
condition|(
name|asDerived
argument_list|()
operator|->
name|hasInnerType
argument_list|()
condition|)
return|return
name|getInnerTypeLoc
argument_list|()
operator|.
name|getFullDataSize
argument_list|()
return|;
return|return
literal|0
return|;
block|}
comment|// Required here because my metaprogramming is too weak to avoid it.
name|QualType
name|getInnerType
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
literal|0
operator|&&
literal|"getInnerType() not overridden"
argument_list|)
block|;
return|return
name|QualType
argument_list|()
return|;
block|}
expr|}
block|;   struct
name|DefaultTypeSpecLocInfo
block|{
name|SourceLocation
name|StartLoc
block|; }
block|;
comment|/// \brief The default wrapper for type-spec types that are not handled by
comment|/// another specific wrapper.
name|class
name|DefaultTypeSpecLoc
operator|:
name|public
name|ConcreteTypeLoc
operator|<
name|TypeSpecLoc
block|,
name|DefaultTypeSpecLoc
block|,
name|Type
block|,
name|DefaultTypeSpecLocInfo
operator|>
block|{
name|public
operator|:
name|SourceLocation
name|getStartLoc
argument_list|()
specifier|const
block|{
return|return
name|getLocalData
argument_list|()
operator|->
name|StartLoc
return|;
block|}
name|void
name|setStartLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|getLocalData
argument_list|()
operator|->
name|StartLoc
operator|=
name|Loc
block|;   }
name|SourceRange
name|getSourceRange
argument_list|()
specifier|const
block|{
return|return
name|SourceRange
argument_list|(
name|getStartLoc
argument_list|()
argument_list|,
name|getStartLoc
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|bool
name|classofType
argument_list|(
specifier|const
name|Type
operator|*
name|T
argument_list|)
block|; }
block|;   struct
name|TypedefLocInfo
block|{
name|SourceLocation
name|NameLoc
block|; }
block|;
comment|/// \brief Wrapper for source info for typedefs.
name|class
name|TypedefLoc
operator|:
name|public
name|ConcreteTypeLoc
operator|<
name|TypeSpecLoc
block|,
name|TypedefLoc
block|,
name|TypedefType
block|,
name|TypedefLocInfo
operator|>
block|{
name|public
operator|:
name|SourceLocation
name|getNameLoc
argument_list|()
specifier|const
block|{
return|return
name|getLocalData
argument_list|()
operator|->
name|NameLoc
return|;
block|}
name|void
name|setNameLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|getLocalData
argument_list|()
operator|->
name|NameLoc
operator|=
name|Loc
block|;   }
name|SourceRange
name|getSourceRange
argument_list|()
specifier|const
block|{
return|return
name|SourceRange
argument_list|(
name|getNameLoc
argument_list|()
argument_list|,
name|getNameLoc
argument_list|()
argument_list|)
return|;
block|}
name|TypedefDecl
operator|*
name|getTypedefDecl
argument_list|()
specifier|const
block|{
return|return
name|getTypePtr
argument_list|()
operator|->
name|getDecl
argument_list|()
return|;
block|}
expr|}
block|;   struct
name|ObjCInterfaceLocInfo
block|{
name|SourceLocation
name|NameLoc
block|; }
block|;
comment|/// \brief Wrapper for source info for ObjC interfaces.
name|class
name|ObjCInterfaceLoc
operator|:
name|public
name|ConcreteTypeLoc
operator|<
name|TypeSpecLoc
block|,
name|ObjCInterfaceLoc
block|,
name|ObjCInterfaceType
block|,
name|ObjCInterfaceLocInfo
operator|>
block|{
name|public
operator|:
name|SourceLocation
name|getNameLoc
argument_list|()
specifier|const
block|{
return|return
name|getLocalData
argument_list|()
operator|->
name|NameLoc
return|;
block|}
name|void
name|setNameLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|getLocalData
argument_list|()
operator|->
name|NameLoc
operator|=
name|Loc
block|;   }
name|SourceRange
name|getSourceRange
argument_list|()
specifier|const
block|{
return|return
name|SourceRange
argument_list|(
name|getNameLoc
argument_list|()
argument_list|,
name|getNameLoc
argument_list|()
argument_list|)
return|;
block|}
name|ObjCInterfaceDecl
operator|*
name|getIFaceDecl
argument_list|()
specifier|const
block|{
return|return
name|getTypePtr
argument_list|()
operator|->
name|getDecl
argument_list|()
return|;
block|}
expr|}
block|;   struct
name|ObjCProtocolListLocInfo
block|{
name|SourceLocation
name|LAngleLoc
block|,
name|RAngleLoc
block|; }
block|;
comment|/// \brief Wrapper for source info for ObjC protocol lists.
name|class
name|ObjCProtocolListLoc
operator|:
name|public
name|ConcreteTypeLoc
operator|<
name|TypeSpecLoc
block|,
name|ObjCProtocolListLoc
block|,
name|ObjCProtocolListType
block|,
name|ObjCProtocolListLocInfo
operator|>
block|{
comment|// SourceLocations are stored after Info, one for each Protocol.
name|SourceLocation
operator|*
name|getProtocolLocArray
argument_list|()
specifier|const
block|{
return|return
operator|(
name|SourceLocation
operator|*
operator|)
name|getExtraLocalData
argument_list|()
return|;
block|}
name|public
operator|:
name|SourceLocation
name|getLAngleLoc
argument_list|()
specifier|const
block|{
return|return
name|getLocalData
argument_list|()
operator|->
name|LAngleLoc
return|;
block|}
name|void
name|setLAngleLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|getLocalData
argument_list|()
operator|->
name|LAngleLoc
operator|=
name|Loc
block|;   }
name|SourceLocation
name|getRAngleLoc
argument_list|()
specifier|const
block|{
return|return
name|getLocalData
argument_list|()
operator|->
name|RAngleLoc
return|;
block|}
name|void
name|setRAngleLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|getLocalData
argument_list|()
operator|->
name|RAngleLoc
operator|=
name|Loc
block|;   }
name|unsigned
name|getNumProtocols
argument_list|()
specifier|const
block|{
return|return
name|getTypePtr
argument_list|()
operator|->
name|getNumProtocols
argument_list|()
return|;
block|}
name|SourceLocation
name|getProtocolLoc
argument_list|(
argument|unsigned i
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|i
operator|<
name|getNumProtocols
argument_list|()
operator|&&
literal|"Index is out of bounds!"
argument_list|)
block|;
return|return
name|getProtocolLocArray
argument_list|()
index|[
name|i
index|]
return|;
block|}
name|void
name|setProtocolLoc
argument_list|(
argument|unsigned i
argument_list|,
argument|SourceLocation Loc
argument_list|)
block|{
name|assert
argument_list|(
name|i
operator|<
name|getNumProtocols
argument_list|()
operator|&&
literal|"Index is out of bounds!"
argument_list|)
block|;
name|getProtocolLocArray
argument_list|()
index|[
name|i
index|]
operator|=
name|Loc
block|;   }
name|ObjCProtocolDecl
operator|*
name|getProtocol
argument_list|(
argument|unsigned i
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|i
operator|<
name|getNumProtocols
argument_list|()
operator|&&
literal|"Index is out of bounds!"
argument_list|)
block|;
return|return
operator|*
operator|(
name|getTypePtr
argument_list|()
operator|->
name|qual_begin
argument_list|()
operator|+
name|i
operator|)
return|;
block|}
name|TypeLoc
name|getBaseTypeLoc
argument_list|()
specifier|const
block|{
return|return
name|getInnerTypeLoc
argument_list|()
return|;
block|}
name|SourceRange
name|getSourceRange
argument_list|()
specifier|const
block|{
return|return
name|SourceRange
argument_list|(
name|getLAngleLoc
argument_list|()
argument_list|,
name|getRAngleLoc
argument_list|()
argument_list|)
return|;
block|}
comment|/// \brief Returns the size of the type source info data block that is
comment|/// specific to this type.
name|unsigned
name|getExtraLocalDataSize
argument_list|()
specifier|const
block|{
return|return
name|getNumProtocols
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|SourceLocation
argument_list|)
return|;
block|}
name|bool
name|hasInnerType
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|QualType
name|getInnerType
argument_list|()
specifier|const
block|{
return|return
name|getTypePtr
argument_list|()
operator|->
name|getBaseType
argument_list|()
return|;
block|}
expr|}
block|;   struct
name|PointerLocInfo
block|{
name|SourceLocation
name|StarLoc
block|; }
block|;
comment|/// \brief Wrapper for source info for pointers.
name|class
name|PointerLoc
operator|:
name|public
name|ConcreteTypeLoc
operator|<
name|DeclaratorLoc
block|,
name|PointerLoc
block|,
name|PointerType
block|,
name|PointerLocInfo
operator|>
block|{
name|public
operator|:
name|SourceLocation
name|getStarLoc
argument_list|()
specifier|const
block|{
return|return
name|getLocalData
argument_list|()
operator|->
name|StarLoc
return|;
block|}
name|void
name|setStarLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|getLocalData
argument_list|()
operator|->
name|StarLoc
operator|=
name|Loc
block|;   }
name|TypeLoc
name|getPointeeLoc
argument_list|()
specifier|const
block|{
return|return
name|getInnerTypeLoc
argument_list|()
return|;
block|}
comment|/// \brief Find the TypeSpecLoc that is part of this PointerLoc.
name|TypeSpecLoc
name|getTypeSpecLoc
argument_list|()
specifier|const
block|{
return|return
name|getPointeeLoc
argument_list|()
operator|.
name|getTypeSpecLoc
argument_list|()
return|;
block|}
name|SourceRange
name|getSourceRange
argument_list|()
specifier|const
block|{
return|return
name|SourceRange
argument_list|(
name|getStarLoc
argument_list|()
argument_list|,
name|getStarLoc
argument_list|()
argument_list|)
return|;
block|}
name|bool
name|hasInnerType
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|QualType
name|getInnerType
argument_list|()
specifier|const
block|{
return|return
name|getTypePtr
argument_list|()
operator|->
name|getPointeeType
argument_list|()
return|;
block|}
expr|}
block|;   struct
name|BlockPointerLocInfo
block|{
name|SourceLocation
name|CaretLoc
block|; }
block|;
comment|/// \brief Wrapper for source info for block pointers.
name|class
name|BlockPointerLoc
operator|:
name|public
name|ConcreteTypeLoc
operator|<
name|DeclaratorLoc
block|,
name|BlockPointerLoc
block|,
name|BlockPointerType
block|,
name|BlockPointerLocInfo
operator|>
block|{
name|public
operator|:
name|SourceLocation
name|getCaretLoc
argument_list|()
specifier|const
block|{
return|return
name|getLocalData
argument_list|()
operator|->
name|CaretLoc
return|;
block|}
name|void
name|setCaretLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|getLocalData
argument_list|()
operator|->
name|CaretLoc
operator|=
name|Loc
block|;   }
name|TypeLoc
name|getPointeeLoc
argument_list|()
specifier|const
block|{
return|return
name|getInnerTypeLoc
argument_list|()
return|;
block|}
comment|/// \brief Find the TypeSpecLoc that is part of this BlockPointerLoc.
name|TypeSpecLoc
name|getTypeSpecLoc
argument_list|()
specifier|const
block|{
return|return
name|getPointeeLoc
argument_list|()
operator|.
name|getTypeSpecLoc
argument_list|()
return|;
block|}
name|SourceRange
name|getSourceRange
argument_list|()
specifier|const
block|{
return|return
name|SourceRange
argument_list|(
name|getCaretLoc
argument_list|()
argument_list|,
name|getCaretLoc
argument_list|()
argument_list|)
return|;
block|}
name|bool
name|hasInnerType
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|QualType
name|getInnerType
argument_list|()
specifier|const
block|{
return|return
name|getTypePtr
argument_list|()
operator|->
name|getPointeeType
argument_list|()
return|;
block|}
expr|}
block|;   struct
name|MemberPointerLocInfo
block|{
name|SourceLocation
name|StarLoc
block|; }
block|;
comment|/// \brief Wrapper for source info for member pointers.
name|class
name|MemberPointerLoc
operator|:
name|public
name|ConcreteTypeLoc
operator|<
name|DeclaratorLoc
block|,
name|MemberPointerLoc
block|,
name|MemberPointerType
block|,
name|MemberPointerLocInfo
operator|>
block|{
name|public
operator|:
name|SourceLocation
name|getStarLoc
argument_list|()
specifier|const
block|{
return|return
name|getLocalData
argument_list|()
operator|->
name|StarLoc
return|;
block|}
name|void
name|setStarLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|getLocalData
argument_list|()
operator|->
name|StarLoc
operator|=
name|Loc
block|;   }
name|TypeLoc
name|getPointeeLoc
argument_list|()
specifier|const
block|{
return|return
name|getInnerTypeLoc
argument_list|()
return|;
block|}
comment|/// \brief Find the TypeSpecLoc that is part of this MemberPointerLoc.
name|TypeSpecLoc
name|getTypeSpecLoc
argument_list|()
specifier|const
block|{
return|return
name|getPointeeLoc
argument_list|()
operator|.
name|getTypeSpecLoc
argument_list|()
return|;
block|}
name|SourceRange
name|getSourceRange
argument_list|()
specifier|const
block|{
return|return
name|SourceRange
argument_list|(
name|getStarLoc
argument_list|()
argument_list|,
name|getStarLoc
argument_list|()
argument_list|)
return|;
block|}
name|bool
name|hasInnerType
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|QualType
name|getInnerType
argument_list|()
specifier|const
block|{
return|return
name|getTypePtr
argument_list|()
operator|->
name|getPointeeType
argument_list|()
return|;
block|}
expr|}
block|;   struct
name|ReferenceLocInfo
block|{
name|SourceLocation
name|AmpLoc
block|; }
block|;
comment|/// \brief Wrapper for source info for references.
name|class
name|ReferenceLoc
operator|:
name|public
name|ConcreteTypeLoc
operator|<
name|DeclaratorLoc
block|,
name|ReferenceLoc
block|,
name|ReferenceType
block|,
name|ReferenceLocInfo
operator|>
block|{
name|public
operator|:
name|SourceLocation
name|getAmpLoc
argument_list|()
specifier|const
block|{
return|return
name|getLocalData
argument_list|()
operator|->
name|AmpLoc
return|;
block|}
name|void
name|setAmpLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|getLocalData
argument_list|()
operator|->
name|AmpLoc
operator|=
name|Loc
block|;   }
name|TypeLoc
name|getPointeeLoc
argument_list|()
specifier|const
block|{
return|return
name|TypeLoc
argument_list|(
name|getTypePtr
argument_list|()
operator|->
name|getPointeeType
argument_list|()
argument_list|,
name|getNonLocalData
argument_list|()
argument_list|)
return|;
block|}
comment|/// \brief Find the TypeSpecLoc that is part of this ReferenceLoc.
name|TypeSpecLoc
name|getTypeSpecLoc
argument_list|()
specifier|const
block|{
return|return
name|getPointeeLoc
argument_list|()
operator|.
name|getTypeSpecLoc
argument_list|()
return|;
block|}
name|SourceRange
name|getSourceRange
argument_list|()
specifier|const
block|{
return|return
name|SourceRange
argument_list|(
name|getAmpLoc
argument_list|()
argument_list|,
name|getAmpLoc
argument_list|()
argument_list|)
return|;
block|}
name|bool
name|hasInnerType
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|QualType
name|getInnerType
argument_list|()
specifier|const
block|{
return|return
name|getTypePtr
argument_list|()
operator|->
name|getPointeeType
argument_list|()
return|;
block|}
expr|}
block|;   struct
name|FunctionLocInfo
block|{
name|SourceLocation
name|LParenLoc
block|,
name|RParenLoc
block|; }
block|;
comment|/// \brief Wrapper for source info for functions.
name|class
name|FunctionLoc
operator|:
name|public
name|ConcreteTypeLoc
operator|<
name|DeclaratorLoc
block|,
name|FunctionLoc
block|,
name|FunctionType
block|,
name|FunctionLocInfo
operator|>
block|{
comment|// ParmVarDecls* are stored after Info, one for each argument.
name|ParmVarDecl
operator|*
operator|*
name|getParmArray
argument_list|()
specifier|const
block|{
return|return
operator|(
name|ParmVarDecl
operator|*
operator|*
operator|)
name|getExtraLocalData
argument_list|()
return|;
block|}
name|public
operator|:
name|SourceLocation
name|getLParenLoc
argument_list|()
specifier|const
block|{
return|return
name|getLocalData
argument_list|()
operator|->
name|LParenLoc
return|;
block|}
name|void
name|setLParenLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|getLocalData
argument_list|()
operator|->
name|LParenLoc
operator|=
name|Loc
block|;   }
name|SourceLocation
name|getRParenLoc
argument_list|()
specifier|const
block|{
return|return
name|getLocalData
argument_list|()
operator|->
name|RParenLoc
return|;
block|}
name|void
name|setRParenLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|getLocalData
argument_list|()
operator|->
name|RParenLoc
operator|=
name|Loc
block|;   }
name|unsigned
name|getNumArgs
argument_list|()
specifier|const
block|{
if|if
condition|(
name|isa
operator|<
name|FunctionNoProtoType
operator|>
operator|(
name|getTypePtr
argument_list|()
operator|)
condition|)
return|return
literal|0
return|;
return|return
name|cast
operator|<
name|FunctionProtoType
operator|>
operator|(
name|getTypePtr
argument_list|()
operator|)
operator|->
name|getNumArgs
argument_list|()
return|;
block|}
name|ParmVarDecl
operator|*
name|getArg
argument_list|(
argument|unsigned i
argument_list|)
specifier|const
block|{
return|return
name|getParmArray
argument_list|()
index|[
name|i
index|]
return|;
block|}
name|void
name|setArg
argument_list|(
argument|unsigned i
argument_list|,
argument|ParmVarDecl *VD
argument_list|)
block|{
name|getParmArray
argument_list|()
index|[
name|i
index|]
operator|=
name|VD
block|; }
name|TypeLoc
name|getArgLoc
argument_list|(
argument|unsigned i
argument_list|)
specifier|const
block|;
name|TypeLoc
name|getResultLoc
argument_list|()
specifier|const
block|{
return|return
name|getInnerTypeLoc
argument_list|()
return|;
block|}
comment|/// \brief Find the TypeSpecLoc that is part of this FunctionLoc.
name|TypeSpecLoc
name|getTypeSpecLoc
argument_list|()
specifier|const
block|{
return|return
name|getResultLoc
argument_list|()
operator|.
name|getTypeSpecLoc
argument_list|()
return|;
block|}
name|SourceRange
name|getSourceRange
argument_list|()
specifier|const
block|{
return|return
name|SourceRange
argument_list|(
name|getLParenLoc
argument_list|()
argument_list|,
name|getRParenLoc
argument_list|()
argument_list|)
return|;
block|}
comment|/// \brief Returns the size of the type source info data block that is
comment|/// specific to this type.
name|unsigned
name|getExtraLocalDataSize
argument_list|()
specifier|const
block|{
return|return
name|getNumArgs
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|ParmVarDecl
operator|*
argument_list|)
return|;
block|}
name|bool
name|hasInnerType
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|QualType
name|getInnerType
argument_list|()
specifier|const
block|{
return|return
name|getTypePtr
argument_list|()
operator|->
name|getResultType
argument_list|()
return|;
block|}
expr|}
block|;   struct
name|ArrayLocInfo
block|{
name|SourceLocation
name|LBracketLoc
block|,
name|RBracketLoc
block|;
name|Expr
operator|*
name|Size
block|; }
block|;
comment|/// \brief Wrapper for source info for arrays.
name|class
name|ArrayLoc
operator|:
name|public
name|ConcreteTypeLoc
operator|<
name|DeclaratorLoc
block|,
name|ArrayLoc
block|,
name|ArrayType
block|,
name|ArrayLocInfo
operator|>
block|{
name|public
operator|:
name|SourceLocation
name|getLBracketLoc
argument_list|()
specifier|const
block|{
return|return
name|getLocalData
argument_list|()
operator|->
name|LBracketLoc
return|;
block|}
name|void
name|setLBracketLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|getLocalData
argument_list|()
operator|->
name|LBracketLoc
operator|=
name|Loc
block|;   }
name|SourceLocation
name|getRBracketLoc
argument_list|()
specifier|const
block|{
return|return
name|getLocalData
argument_list|()
operator|->
name|RBracketLoc
return|;
block|}
name|void
name|setRBracketLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|getLocalData
argument_list|()
operator|->
name|RBracketLoc
operator|=
name|Loc
block|;   }
name|Expr
operator|*
name|getSizeExpr
argument_list|()
specifier|const
block|{
return|return
name|getLocalData
argument_list|()
operator|->
name|Size
return|;
block|}
name|void
name|setSizeExpr
argument_list|(
argument|Expr *Size
argument_list|)
block|{
name|getLocalData
argument_list|()
operator|->
name|Size
operator|=
name|Size
block|;   }
name|TypeLoc
name|getElementLoc
argument_list|()
specifier|const
block|{
return|return
name|getInnerTypeLoc
argument_list|()
return|;
block|}
comment|/// \brief Find the TypeSpecLoc that is part of this ArrayLoc.
name|TypeSpecLoc
name|getTypeSpecLoc
argument_list|()
specifier|const
block|{
return|return
name|getElementLoc
argument_list|()
operator|.
name|getTypeSpecLoc
argument_list|()
return|;
block|}
name|SourceRange
name|getSourceRange
argument_list|()
specifier|const
block|{
return|return
name|SourceRange
argument_list|(
name|getLBracketLoc
argument_list|()
argument_list|,
name|getRBracketLoc
argument_list|()
argument_list|)
return|;
block|}
name|bool
name|hasInnerType
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|QualType
name|getInnerType
argument_list|()
specifier|const
block|{
return|return
name|getTypePtr
argument_list|()
operator|->
name|getElementType
argument_list|()
return|;
block|}
expr|}
block|;  }
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

