begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- PathDiagnostic.h - Path-Specific Diagnostic Handling ---*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines the PathDiagnostic-related interfaces.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_PATH_DIAGNOSTIC_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_PATH_DIAGNOSTIC_H
end_define

begin_include
include|#
directive|include
file|"clang/Basic/Diagnostic.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/FoldingSet.h"
end_include

begin_include
include|#
directive|include
file|<deque>
end_include

begin_include
include|#
directive|include
file|<iterator>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|Decl
decl_stmt|;
name|class
name|SourceManager
decl_stmt|;
name|class
name|Stmt
decl_stmt|;
comment|//===----------------------------------------------------------------------===//
comment|// High-level interface for handlers of path-sensitive diagnostics.
comment|//===----------------------------------------------------------------------===//
name|class
name|PathDiagnostic
decl_stmt|;
name|class
name|PathDiagnosticClient
range|:
name|public
name|DiagnosticClient
block|{
name|public
operator|:
name|PathDiagnosticClient
argument_list|()
block|{}
name|virtual
operator|~
name|PathDiagnosticClient
argument_list|()
block|{}
name|virtual
name|void
name|FlushDiagnostics
argument_list|(
name|llvm
operator|::
name|SmallVectorImpl
operator|<
name|std
operator|::
name|string
operator|>
operator|*
name|FilesMade
operator|=
literal|0
argument_list|)
operator|=
literal|0
block|;
name|void
name|FlushDiagnostics
argument_list|(
argument|llvm::SmallVectorImpl<std::string>&FilesMade
argument_list|)
block|{
name|FlushDiagnostics
argument_list|(
operator|&
name|FilesMade
argument_list|)
block|;   }
name|virtual
name|llvm
operator|::
name|StringRef
name|getName
argument_list|()
specifier|const
operator|=
literal|0
block|;
name|virtual
name|void
name|HandleDiagnostic
argument_list|(
argument|Diagnostic::Level DiagLevel
argument_list|,
argument|const DiagnosticInfo&Info
argument_list|)
block|;
name|virtual
name|void
name|HandlePathDiagnostic
argument_list|(
specifier|const
name|PathDiagnostic
operator|*
name|D
argument_list|)
operator|=
literal|0
block|;    enum
name|PathGenerationScheme
block|{
name|Minimal
block|,
name|Extensive
block|}
block|;
name|virtual
name|PathGenerationScheme
name|getGenerationScheme
argument_list|()
specifier|const
block|{
return|return
name|Minimal
return|;
block|}
name|virtual
name|bool
name|supportsLogicalOpControlFlow
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|supportsAllBlockEdges
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|useVerboseDescription
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
expr|}
block|;
comment|//===----------------------------------------------------------------------===//
comment|// Path-sensitive diagnostics.
comment|//===----------------------------------------------------------------------===//
name|class
name|PathDiagnosticRange
operator|:
name|public
name|SourceRange
block|{
name|public
operator|:
specifier|const
name|bool
name|isPoint
block|;
name|PathDiagnosticRange
argument_list|(
argument|const SourceRange&R
argument_list|,
argument|bool isP = false
argument_list|)
operator|:
name|SourceRange
argument_list|(
name|R
argument_list|)
block|,
name|isPoint
argument_list|(
argument|isP
argument_list|)
block|{}
block|}
block|;
name|class
name|PathDiagnosticLocation
block|{
name|private
operator|:
expr|enum
name|Kind
block|{
name|RangeK
block|,
name|SingleLocK
block|,
name|StmtK
block|,
name|DeclK
block|}
name|K
block|;
name|SourceRange
name|R
block|;
specifier|const
name|Stmt
operator|*
name|S
block|;
specifier|const
name|Decl
operator|*
name|D
block|;
specifier|const
name|SourceManager
operator|*
name|SM
block|;
name|public
operator|:
name|PathDiagnosticLocation
argument_list|()
operator|:
name|K
argument_list|(
name|SingleLocK
argument_list|)
block|,
name|S
argument_list|(
literal|0
argument_list|)
block|,
name|D
argument_list|(
literal|0
argument_list|)
block|,
name|SM
argument_list|(
literal|0
argument_list|)
block|{}
name|PathDiagnosticLocation
argument_list|(
argument|FullSourceLoc L
argument_list|)
operator|:
name|K
argument_list|(
name|SingleLocK
argument_list|)
block|,
name|R
argument_list|(
name|L
argument_list|,
name|L
argument_list|)
block|,
name|S
argument_list|(
literal|0
argument_list|)
block|,
name|D
argument_list|(
literal|0
argument_list|)
block|,
name|SM
argument_list|(
argument|&L.getManager()
argument_list|)
block|{}
name|PathDiagnosticLocation
argument_list|(
specifier|const
name|Stmt
operator|*
name|s
argument_list|,
specifier|const
name|SourceManager
operator|&
name|sm
argument_list|)
operator|:
name|K
argument_list|(
name|StmtK
argument_list|)
block|,
name|S
argument_list|(
name|s
argument_list|)
block|,
name|D
argument_list|(
literal|0
argument_list|)
block|,
name|SM
argument_list|(
argument|&sm
argument_list|)
block|{}
name|PathDiagnosticLocation
argument_list|(
argument|SourceRange r
argument_list|,
argument|const SourceManager&sm
argument_list|)
operator|:
name|K
argument_list|(
name|RangeK
argument_list|)
block|,
name|R
argument_list|(
name|r
argument_list|)
block|,
name|S
argument_list|(
literal|0
argument_list|)
block|,
name|D
argument_list|(
literal|0
argument_list|)
block|,
name|SM
argument_list|(
argument|&sm
argument_list|)
block|{}
name|PathDiagnosticLocation
argument_list|(
specifier|const
name|Decl
operator|*
name|d
argument_list|,
specifier|const
name|SourceManager
operator|&
name|sm
argument_list|)
operator|:
name|K
argument_list|(
name|DeclK
argument_list|)
block|,
name|S
argument_list|(
literal|0
argument_list|)
block|,
name|D
argument_list|(
name|d
argument_list|)
block|,
name|SM
argument_list|(
argument|&sm
argument_list|)
block|{}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|PathDiagnosticLocation
operator|&
name|X
operator|)
specifier|const
block|{
return|return
name|K
operator|==
name|X
operator|.
name|K
operator|&&
name|R
operator|==
name|X
operator|.
name|R
operator|&&
name|S
operator|==
name|X
operator|.
name|S
operator|&&
name|D
operator|==
name|X
operator|.
name|D
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|PathDiagnosticLocation
operator|&
name|X
operator|)
specifier|const
block|{
return|return
name|K
operator|!=
name|X
operator|.
name|K
operator|||
name|R
operator|!=
name|X
operator|.
name|R
operator|||
name|S
operator|!=
name|X
operator|.
name|S
operator|||
name|D
operator|!=
name|X
operator|.
name|D
return|;
block|;   }
name|PathDiagnosticLocation
operator|&
name|operator
operator|=
operator|(
specifier|const
name|PathDiagnosticLocation
operator|&
name|X
operator|)
block|{
name|K
operator|=
name|X
operator|.
name|K
block|;
name|R
operator|=
name|X
operator|.
name|R
block|;
name|S
operator|=
name|X
operator|.
name|S
block|;
name|D
operator|=
name|X
operator|.
name|D
block|;
name|SM
operator|=
name|X
operator|.
name|SM
block|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|isValid
argument_list|()
specifier|const
block|{
return|return
name|SM
operator|!=
literal|0
return|;
block|}
specifier|const
name|SourceManager
operator|&
name|getSourceManager
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isValid
argument_list|()
argument_list|)
block|;
return|return
operator|*
name|SM
return|;
block|}
name|FullSourceLoc
name|asLocation
argument_list|()
specifier|const
block|;
name|PathDiagnosticRange
name|asRange
argument_list|()
specifier|const
block|;
specifier|const
name|Stmt
operator|*
name|asStmt
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isValid
argument_list|()
argument_list|)
block|;
return|return
name|S
return|;
block|}
specifier|const
name|Decl
operator|*
name|asDecl
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isValid
argument_list|()
argument_list|)
block|;
return|return
name|D
return|;
block|}
name|bool
name|hasRange
argument_list|()
specifier|const
block|{
return|return
name|K
operator|==
name|StmtK
operator|||
name|K
operator|==
name|RangeK
operator|||
name|K
operator|==
name|DeclK
return|;
block|}
name|void
name|invalidate
argument_list|()
block|{
operator|*
name|this
operator|=
name|PathDiagnosticLocation
argument_list|()
block|;   }
name|void
name|flatten
argument_list|()
block|;
specifier|const
name|SourceManager
operator|&
name|getManager
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isValid
argument_list|()
argument_list|)
block|;
return|return
operator|*
name|SM
return|;
block|}
name|void
name|Profile
argument_list|(
argument|llvm::FoldingSetNodeID&ID
argument_list|)
specifier|const
block|; }
decl_stmt|;
name|class
name|PathDiagnosticLocationPair
block|{
name|private
label|:
name|PathDiagnosticLocation
name|Start
decl_stmt|,
name|End
decl_stmt|;
name|public
label|:
name|PathDiagnosticLocationPair
argument_list|(
specifier|const
name|PathDiagnosticLocation
operator|&
name|start
argument_list|,
specifier|const
name|PathDiagnosticLocation
operator|&
name|end
argument_list|)
operator|:
name|Start
argument_list|(
name|start
argument_list|)
operator|,
name|End
argument_list|(
argument|end
argument_list|)
block|{}
specifier|const
name|PathDiagnosticLocation
operator|&
name|getStart
argument_list|()
specifier|const
block|{
return|return
name|Start
return|;
block|}
specifier|const
name|PathDiagnosticLocation
operator|&
name|getEnd
argument_list|()
specifier|const
block|{
return|return
name|End
return|;
block|}
name|void
name|flatten
parameter_list|()
block|{
name|Start
operator|.
name|flatten
argument_list|()
expr_stmt|;
name|End
operator|.
name|flatten
argument_list|()
expr_stmt|;
block|}
name|void
name|Profile
argument_list|(
name|llvm
operator|::
name|FoldingSetNodeID
operator|&
name|ID
argument_list|)
decl|const
block|{
name|Start
operator|.
name|Profile
argument_list|(
name|ID
argument_list|)
expr_stmt|;
name|End
operator|.
name|Profile
argument_list|(
name|ID
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
comment|//===----------------------------------------------------------------------===//
comment|// Path "pieces" for path-sensitive diagnostics.
comment|//===----------------------------------------------------------------------===//
name|class
name|PathDiagnosticPiece
block|{
name|public
label|:
enum|enum
name|Kind
block|{
name|ControlFlow
block|,
name|Event
block|,
name|Macro
block|}
enum|;
enum|enum
name|DisplayHint
block|{
name|Above
block|,
name|Below
block|}
enum|;
name|private
label|:
specifier|const
name|std
operator|::
name|string
name|str
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|CodeModificationHint
operator|>
name|CodeModificationHints
expr_stmt|;
specifier|const
name|Kind
name|kind
decl_stmt|;
specifier|const
name|DisplayHint
name|Hint
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|SourceRange
operator|>
name|ranges
expr_stmt|;
comment|// Do not implement:
name|PathDiagnosticPiece
argument_list|()
expr_stmt|;
name|PathDiagnosticPiece
argument_list|(
specifier|const
name|PathDiagnosticPiece
operator|&
name|P
argument_list|)
expr_stmt|;
name|PathDiagnosticPiece
modifier|&
name|operator
init|=
operator|(
specifier|const
name|PathDiagnosticPiece
operator|&
name|P
operator|)
decl_stmt|;
name|protected
label|:
name|PathDiagnosticPiece
argument_list|(
argument|llvm::StringRef s
argument_list|,
argument|Kind k
argument_list|,
argument|DisplayHint hint = Below
argument_list|)
empty_stmt|;
name|PathDiagnosticPiece
argument_list|(
argument|Kind k
argument_list|,
argument|DisplayHint hint = Below
argument_list|)
empty_stmt|;
name|public
label|:
name|virtual
operator|~
name|PathDiagnosticPiece
argument_list|()
expr_stmt|;
specifier|const
name|std
operator|::
name|string
operator|&
name|getString
argument_list|()
specifier|const
block|{
return|return
name|str
return|;
block|}
comment|/// getDisplayHint - Return a hint indicating where the diagnostic should
comment|///  be displayed by the PathDiagnosticClient.
name|DisplayHint
name|getDisplayHint
argument_list|()
specifier|const
block|{
return|return
name|Hint
return|;
block|}
name|virtual
name|PathDiagnosticLocation
name|getLocation
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|void
name|flattenLocations
parameter_list|()
init|=
literal|0
function_decl|;
name|Kind
name|getKind
argument_list|()
specifier|const
block|{
return|return
name|kind
return|;
block|}
name|void
name|addRange
parameter_list|(
name|SourceRange
name|R
parameter_list|)
block|{
name|ranges
operator|.
name|push_back
argument_list|(
name|R
argument_list|)
expr_stmt|;
block|}
name|void
name|addRange
parameter_list|(
name|SourceLocation
name|B
parameter_list|,
name|SourceLocation
name|E
parameter_list|)
block|{
name|ranges
operator|.
name|push_back
argument_list|(
name|SourceRange
argument_list|(
name|B
argument_list|,
name|E
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|addCodeModificationHint
parameter_list|(
specifier|const
name|CodeModificationHint
modifier|&
name|Hint
parameter_list|)
block|{
name|CodeModificationHints
operator|.
name|push_back
argument_list|(
name|Hint
argument_list|)
expr_stmt|;
block|}
typedef|typedef
specifier|const
name|SourceRange
modifier|*
name|range_iterator
typedef|;
name|range_iterator
name|ranges_begin
argument_list|()
specifier|const
block|{
return|return
name|ranges
operator|.
name|empty
argument_list|()
operator|?
name|NULL
operator|:
operator|&
name|ranges
index|[
literal|0
index|]
return|;
block|}
name|range_iterator
name|ranges_end
argument_list|()
specifier|const
block|{
return|return
name|ranges_begin
argument_list|()
operator|+
name|ranges
operator|.
name|size
argument_list|()
return|;
block|}
typedef|typedef
specifier|const
name|CodeModificationHint
modifier|*
name|code_modifications_iterator
typedef|;
name|code_modifications_iterator
name|code_modifications_begin
argument_list|()
specifier|const
block|{
return|return
name|CodeModificationHints
operator|.
name|empty
argument_list|()
operator|?
literal|0
operator|:
operator|&
name|CodeModificationHints
index|[
literal|0
index|]
return|;
block|}
name|code_modifications_iterator
name|code_modifications_end
argument_list|()
specifier|const
block|{
return|return
name|CodeModificationHints
operator|.
name|empty
argument_list|()
operator|?
literal|0
operator|:
operator|&
name|CodeModificationHints
index|[
literal|0
index|]
operator|+
name|CodeModificationHints
operator|.
name|size
argument_list|()
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
parameter_list|(
specifier|const
name|PathDiagnosticPiece
modifier|*
name|P
parameter_list|)
block|{
return|return
name|true
return|;
block|}
name|virtual
name|void
name|Profile
argument_list|(
name|llvm
operator|::
name|FoldingSetNodeID
operator|&
name|ID
argument_list|)
decl|const
decl_stmt|;
block|}
empty_stmt|;
name|class
name|PathDiagnosticSpotPiece
range|:
name|public
name|PathDiagnosticPiece
block|{
name|private
operator|:
name|PathDiagnosticLocation
name|Pos
block|;
name|public
operator|:
name|PathDiagnosticSpotPiece
argument_list|(
argument|const PathDiagnosticLocation&pos
argument_list|,
argument|llvm::StringRef s
argument_list|,
argument|PathDiagnosticPiece::Kind k
argument_list|,
argument|bool addPosRange = true
argument_list|)
operator|:
name|PathDiagnosticPiece
argument_list|(
name|s
argument_list|,
name|k
argument_list|)
block|,
name|Pos
argument_list|(
argument|pos
argument_list|)
block|{
name|assert
argument_list|(
name|Pos
operator|.
name|asLocation
argument_list|()
operator|.
name|isValid
argument_list|()
operator|&&
literal|"PathDiagnosticSpotPiece's must have a valid location."
argument_list|)
block|;
if|if
condition|(
name|addPosRange
operator|&&
name|Pos
operator|.
name|hasRange
argument_list|()
condition|)
name|addRange
argument_list|(
name|Pos
operator|.
name|asRange
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|PathDiagnosticLocation
name|getLocation
argument_list|()
specifier|const
block|{
return|return
name|Pos
return|;
block|}
name|virtual
name|void
name|flattenLocations
argument_list|()
block|{
name|Pos
operator|.
name|flatten
argument_list|()
block|; }
name|virtual
name|void
name|Profile
argument_list|(
argument|llvm::FoldingSetNodeID&ID
argument_list|)
specifier|const
block|; }
decl_stmt|;
name|class
name|PathDiagnosticEventPiece
range|:
name|public
name|PathDiagnosticSpotPiece
block|{
name|public
operator|:
name|PathDiagnosticEventPiece
argument_list|(
argument|const PathDiagnosticLocation&pos
argument_list|,
argument|llvm::StringRef s
argument_list|,
argument|bool addPosRange = true
argument_list|)
operator|:
name|PathDiagnosticSpotPiece
argument_list|(
argument|pos
argument_list|,
argument|s
argument_list|,
argument|Event
argument_list|,
argument|addPosRange
argument_list|)
block|{}
operator|~
name|PathDiagnosticEventPiece
argument_list|()
block|;
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const PathDiagnosticPiece* P
argument_list|)
block|{
return|return
name|P
operator|->
name|getKind
argument_list|()
operator|==
name|Event
return|;
block|}
expr|}
block|;
name|class
name|PathDiagnosticControlFlowPiece
operator|:
name|public
name|PathDiagnosticPiece
block|{
name|std
operator|::
name|vector
operator|<
name|PathDiagnosticLocationPair
operator|>
name|LPairs
block|;
name|public
operator|:
name|PathDiagnosticControlFlowPiece
argument_list|(
argument|const PathDiagnosticLocation&startPos
argument_list|,
argument|const PathDiagnosticLocation&endPos
argument_list|,
argument|llvm::StringRef s
argument_list|)
operator|:
name|PathDiagnosticPiece
argument_list|(
argument|s
argument_list|,
argument|ControlFlow
argument_list|)
block|{
name|LPairs
operator|.
name|push_back
argument_list|(
name|PathDiagnosticLocationPair
argument_list|(
name|startPos
argument_list|,
name|endPos
argument_list|)
argument_list|)
block|;     }
name|PathDiagnosticControlFlowPiece
argument_list|(
specifier|const
name|PathDiagnosticLocation
operator|&
name|startPos
argument_list|,
specifier|const
name|PathDiagnosticLocation
operator|&
name|endPos
argument_list|)
operator|:
name|PathDiagnosticPiece
argument_list|(
argument|ControlFlow
argument_list|)
block|{
name|LPairs
operator|.
name|push_back
argument_list|(
name|PathDiagnosticLocationPair
argument_list|(
name|startPos
argument_list|,
name|endPos
argument_list|)
argument_list|)
block|;     }
operator|~
name|PathDiagnosticControlFlowPiece
argument_list|()
block|;
name|PathDiagnosticLocation
name|getStartLocation
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
operator|!
name|LPairs
operator|.
name|empty
argument_list|()
operator|&&
literal|"PathDiagnosticControlFlowPiece needs at least one location."
argument_list|)
block|;
return|return
name|LPairs
index|[
literal|0
index|]
operator|.
name|getStart
argument_list|()
return|;
block|}
name|PathDiagnosticLocation
name|getEndLocation
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
operator|!
name|LPairs
operator|.
name|empty
argument_list|()
operator|&&
literal|"PathDiagnosticControlFlowPiece needs at least one location."
argument_list|)
block|;
return|return
name|LPairs
index|[
literal|0
index|]
operator|.
name|getEnd
argument_list|()
return|;
block|}
name|void
name|push_back
argument_list|(
argument|const PathDiagnosticLocationPair&X
argument_list|)
block|{
name|LPairs
operator|.
name|push_back
argument_list|(
name|X
argument_list|)
block|; }
name|virtual
name|PathDiagnosticLocation
name|getLocation
argument_list|()
specifier|const
block|{
return|return
name|getStartLocation
argument_list|()
return|;
block|}
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|PathDiagnosticLocationPair
operator|>
operator|::
name|iterator
name|iterator
expr_stmt|;
name|iterator
name|begin
argument_list|()
block|{
return|return
name|LPairs
operator|.
name|begin
argument_list|()
return|;
block|}
name|iterator
name|end
argument_list|()
block|{
return|return
name|LPairs
operator|.
name|end
argument_list|()
return|;
block|}
name|virtual
name|void
name|flattenLocations
argument_list|()
block|{
for|for
control|(
name|iterator
name|I
init|=
name|begin
argument_list|()
init|,
name|E
init|=
name|end
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
name|I
operator|->
name|flatten
argument_list|()
expr_stmt|;
block|}
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|PathDiagnosticLocationPair
operator|>
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|LPairs
operator|.
name|begin
argument_list|()
return|;
block|}
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|LPairs
operator|.
name|end
argument_list|()
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const PathDiagnosticPiece* P
argument_list|)
block|{
return|return
name|P
operator|->
name|getKind
argument_list|()
operator|==
name|ControlFlow
return|;
block|}
name|virtual
name|void
name|Profile
argument_list|(
argument|llvm::FoldingSetNodeID&ID
argument_list|)
specifier|const
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|PathDiagnosticMacroPiece
range|:
name|public
name|PathDiagnosticSpotPiece
block|{
name|std
operator|::
name|vector
operator|<
name|PathDiagnosticPiece
operator|*
operator|>
name|SubPieces
block|;
name|public
operator|:
name|PathDiagnosticMacroPiece
argument_list|(
specifier|const
name|PathDiagnosticLocation
operator|&
name|pos
argument_list|)
operator|:
name|PathDiagnosticSpotPiece
argument_list|(
argument|pos
argument_list|,
literal|""
argument_list|,
argument|Macro
argument_list|)
block|{}
operator|~
name|PathDiagnosticMacroPiece
argument_list|()
block|;
name|bool
name|containsEvent
argument_list|()
specifier|const
block|;
name|void
name|push_back
argument_list|(
argument|PathDiagnosticPiece* P
argument_list|)
block|{
name|SubPieces
operator|.
name|push_back
argument_list|(
name|P
argument_list|)
block|; }
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|PathDiagnosticPiece
operator|*
operator|>
operator|::
name|iterator
name|iterator
expr_stmt|;
name|iterator
name|begin
argument_list|()
block|{
return|return
name|SubPieces
operator|.
name|begin
argument_list|()
return|;
block|}
name|iterator
name|end
argument_list|()
block|{
return|return
name|SubPieces
operator|.
name|end
argument_list|()
return|;
block|}
name|virtual
name|void
name|flattenLocations
argument_list|()
block|{
name|PathDiagnosticSpotPiece
operator|::
name|flattenLocations
argument_list|()
block|;
for|for
control|(
name|iterator
name|I
init|=
name|begin
argument_list|()
init|,
name|E
init|=
name|end
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
operator|(
operator|*
name|I
operator|)
operator|->
name|flattenLocations
argument_list|()
expr_stmt|;
block|}
end_decl_stmt

begin_typedef
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|PathDiagnosticPiece
operator|*
operator|>
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
end_typedef

begin_expr_stmt
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|SubPieces
operator|.
name|begin
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|SubPieces
operator|.
name|end
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
specifier|static
specifier|inline
name|bool
name|classof
parameter_list|(
specifier|const
name|PathDiagnosticPiece
modifier|*
name|P
parameter_list|)
block|{
return|return
name|P
operator|->
name|getKind
argument_list|()
operator|==
name|Macro
return|;
block|}
end_function

begin_decl_stmt
name|virtual
name|void
name|Profile
argument_list|(
name|llvm
operator|::
name|FoldingSetNodeID
operator|&
name|ID
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_comment
unit|};
comment|/// PathDiagnostic - PathDiagnostic objects represent a single path-sensitive
end_comment

begin_comment
comment|///  diagnostic.  It represents an ordered-collection of PathDiagnosticPieces,
end_comment

begin_comment
comment|///  each which represent the pieces of the path.
end_comment

begin_decl_stmt
name|class
name|PathDiagnostic
range|:
name|public
name|llvm
operator|::
name|FoldingSetNode
block|{
name|std
operator|::
name|deque
operator|<
name|PathDiagnosticPiece
operator|*
operator|>
name|path
block|;
name|unsigned
name|Size
block|;
name|std
operator|::
name|string
name|BugType
block|;
name|std
operator|::
name|string
name|Desc
block|;
name|std
operator|::
name|string
name|Category
block|;
name|std
operator|::
name|deque
operator|<
name|std
operator|::
name|string
operator|>
name|OtherDesc
block|;
name|public
operator|:
name|PathDiagnostic
argument_list|()
block|;
name|PathDiagnostic
argument_list|(
argument|llvm::StringRef bugtype
argument_list|,
argument|llvm::StringRef desc
argument_list|,
argument|llvm::StringRef category
argument_list|)
block|;
operator|~
name|PathDiagnostic
argument_list|()
block|;
name|llvm
operator|::
name|StringRef
name|getDescription
argument_list|()
specifier|const
block|{
return|return
name|Desc
return|;
block|}
name|llvm
operator|::
name|StringRef
name|getBugType
argument_list|()
specifier|const
block|{
return|return
name|BugType
return|;
block|}
name|llvm
operator|::
name|StringRef
name|getCategory
argument_list|()
specifier|const
block|{
return|return
name|Category
return|;
block|}
typedef|typedef
name|std
operator|::
name|deque
operator|<
name|std
operator|::
name|string
operator|>
operator|::
name|const_iterator
name|meta_iterator
expr_stmt|;
name|meta_iterator
name|meta_begin
argument_list|()
specifier|const
block|{
return|return
name|OtherDesc
operator|.
name|begin
argument_list|()
return|;
block|}
name|meta_iterator
name|meta_end
argument_list|()
specifier|const
block|{
return|return
name|OtherDesc
operator|.
name|end
argument_list|()
return|;
block|}
name|void
name|addMeta
argument_list|(
argument|llvm::StringRef s
argument_list|)
block|{
name|OtherDesc
operator|.
name|push_back
argument_list|(
name|s
argument_list|)
block|; }
name|PathDiagnosticLocation
name|getLocation
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|Size
operator|>
literal|0
operator|&&
literal|"getLocation() requires a non-empty PathDiagnostic."
argument_list|)
block|;
return|return
name|rbegin
argument_list|()
operator|->
name|getLocation
argument_list|()
return|;
block|}
end_decl_stmt

begin_function
name|void
name|push_front
parameter_list|(
name|PathDiagnosticPiece
modifier|*
name|piece
parameter_list|)
block|{
name|assert
argument_list|(
name|piece
argument_list|)
expr_stmt|;
name|path
operator|.
name|push_front
argument_list|(
name|piece
argument_list|)
expr_stmt|;
operator|++
name|Size
expr_stmt|;
block|}
end_function

begin_function
name|void
name|push_back
parameter_list|(
name|PathDiagnosticPiece
modifier|*
name|piece
parameter_list|)
block|{
name|assert
argument_list|(
name|piece
argument_list|)
expr_stmt|;
name|path
operator|.
name|push_back
argument_list|(
name|piece
argument_list|)
expr_stmt|;
operator|++
name|Size
expr_stmt|;
block|}
end_function

begin_function
name|PathDiagnosticPiece
modifier|*
name|back
parameter_list|()
block|{
return|return
name|path
operator|.
name|back
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
specifier|const
name|PathDiagnosticPiece
operator|*
name|back
argument_list|()
specifier|const
block|{
return|return
name|path
operator|.
name|back
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|unsigned
name|size
argument_list|()
specifier|const
block|{
return|return
name|Size
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|Size
operator|==
literal|0
return|;
block|}
end_expr_stmt

begin_function_decl
name|void
name|resetPath
parameter_list|(
name|bool
name|deletePieces
init|=
name|true
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|class
name|iterator
block|{
name|public
label|:
typedef|typedef
name|std
operator|::
name|deque
operator|<
name|PathDiagnosticPiece
operator|*
operator|>
operator|::
name|iterator
name|ImplTy
expr_stmt|;
typedef|typedef
name|PathDiagnosticPiece
name|value_type
typedef|;
typedef|typedef
name|value_type
modifier|&
name|reference
typedef|;
typedef|typedef
name|value_type
modifier|*
name|pointer
typedef|;
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
typedef|typedef
name|std
operator|::
name|bidirectional_iterator_tag
name|iterator_category
expr_stmt|;
name|private
label|:
name|ImplTy
name|I
decl_stmt|;
name|public
label|:
name|iterator
argument_list|(
specifier|const
name|ImplTy
operator|&
name|i
argument_list|)
operator|:
name|I
argument_list|(
argument|i
argument_list|)
block|{}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|iterator
operator|&
name|X
operator|)
specifier|const
block|{
return|return
name|I
operator|==
name|X
operator|.
name|I
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|iterator
operator|&
name|X
operator|)
specifier|const
block|{
return|return
name|I
operator|!=
name|X
operator|.
name|I
return|;
block|}
name|PathDiagnosticPiece
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
operator|*
name|I
return|;
block|}
name|PathDiagnosticPiece
operator|*
name|operator
operator|->
expr|(
block|)
decl|const
block|{
return|return
operator|*
name|I
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|I
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|iterator
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
operator|--
name|I
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_decl_stmt
unit|};
name|class
name|const_iterator
block|{
name|public
label|:
typedef|typedef
name|std
operator|::
name|deque
operator|<
name|PathDiagnosticPiece
operator|*
operator|>
operator|::
name|const_iterator
name|ImplTy
expr_stmt|;
typedef|typedef
specifier|const
name|PathDiagnosticPiece
name|value_type
typedef|;
typedef|typedef
name|value_type
modifier|&
name|reference
typedef|;
typedef|typedef
name|value_type
modifier|*
name|pointer
typedef|;
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
typedef|typedef
name|std
operator|::
name|bidirectional_iterator_tag
name|iterator_category
expr_stmt|;
name|private
label|:
name|ImplTy
name|I
decl_stmt|;
name|public
label|:
name|const_iterator
argument_list|(
specifier|const
name|ImplTy
operator|&
name|i
argument_list|)
operator|:
name|I
argument_list|(
argument|i
argument_list|)
block|{}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|const_iterator
operator|&
name|X
operator|)
specifier|const
block|{
return|return
name|I
operator|==
name|X
operator|.
name|I
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|const_iterator
operator|&
name|X
operator|)
specifier|const
block|{
return|return
name|I
operator|!=
name|X
operator|.
name|I
return|;
block|}
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
operator|*
name|I
return|;
block|}
name|pointer
name|operator
operator|->
expr|(
block|)
decl|const
block|{
return|return
operator|*
name|I
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|const_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|I
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_iterator
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
operator|--
name|I
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_typedef
unit|};
typedef|typedef
name|std
operator|::
name|reverse_iterator
operator|<
name|iterator
operator|>
name|reverse_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|std
operator|::
name|reverse_iterator
operator|<
name|const_iterator
operator|>
name|const_reverse_iterator
expr_stmt|;
end_typedef

begin_comment
comment|// forward iterator creation methods.
end_comment

begin_function
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|path
operator|.
name|begin
argument_list|()
return|;
block|}
end_function

begin_function
name|iterator
name|end
parameter_list|()
block|{
return|return
name|path
operator|.
name|end
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|path
operator|.
name|begin
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|path
operator|.
name|end
argument_list|()
return|;
block|}
end_expr_stmt

begin_comment
comment|// reverse iterator creation methods.
end_comment

begin_function
name|reverse_iterator
name|rbegin
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|end
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|const_reverse_iterator
name|rbegin
argument_list|()
specifier|const
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|reverse_iterator
name|rend
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|const_reverse_iterator
name|rend
argument_list|()
specifier|const
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|void
name|flattenLocations
parameter_list|()
block|{
for|for
control|(
name|iterator
name|I
init|=
name|begin
argument_list|()
init|,
name|E
init|=
name|end
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
name|I
operator|->
name|flattenLocations
argument_list|()
expr_stmt|;
block|}
end_function

begin_decl_stmt
name|void
name|Profile
argument_list|(
name|llvm
operator|::
name|FoldingSetNodeID
operator|&
name|ID
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_comment
unit|};   }
comment|//end clang namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

