begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===---  BugReporter.h - Generate PathDiagnostics --------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines BugReporter, a utility class for generating
end_comment

begin_comment
comment|//  PathDiagnostics for analyses based on GRState.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_ANALYSIS_BUGREPORTER
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_ANALYSIS_BUGREPORTER
end_define

begin_include
include|#
directive|include
file|"clang/Basic/Diagnostic.h"
end_include

begin_include
include|#
directive|include
file|"clang/Basic/SourceLocation.h"
end_include

begin_include
include|#
directive|include
file|"clang/Checker/BugReporter/BugType.h"
end_include

begin_include
include|#
directive|include
file|"clang/Checker/PathSensitive/ExplodedGraph.h"
end_include

begin_include
include|#
directive|include
file|"clang/Checker/PathSensitive/GRState.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/FoldingSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/ImmutableList.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/ImmutableSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallPtrSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallString.h"
end_include

begin_include
include|#
directive|include
file|<list>
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|PathDiagnostic
decl_stmt|;
name|class
name|PathDiagnosticPiece
decl_stmt|;
name|class
name|PathDiagnosticClient
decl_stmt|;
name|class
name|ASTContext
decl_stmt|;
name|class
name|Diagnostic
decl_stmt|;
name|class
name|BugReporter
decl_stmt|;
name|class
name|BugReporterContext
decl_stmt|;
name|class
name|GRExprEngine
decl_stmt|;
name|class
name|GRState
decl_stmt|;
name|class
name|Stmt
decl_stmt|;
name|class
name|BugType
decl_stmt|;
name|class
name|ParentMap
decl_stmt|;
comment|//===----------------------------------------------------------------------===//
comment|// Interface for individual bug reports.
comment|//===----------------------------------------------------------------------===//
name|class
name|BugReporterVisitor
range|:
name|public
name|llvm
operator|::
name|FoldingSetNode
block|{
name|public
operator|:
name|virtual
operator|~
name|BugReporterVisitor
argument_list|()
block|;
name|virtual
name|PathDiagnosticPiece
operator|*
name|VisitNode
argument_list|(
specifier|const
name|ExplodedNode
operator|*
name|N
argument_list|,
specifier|const
name|ExplodedNode
operator|*
name|PrevN
argument_list|,
name|BugReporterContext
operator|&
name|BRC
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|bool
name|isOwnedByReporterContext
argument_list|()
block|{
return|return
name|true
return|;
block|}
name|virtual
name|void
name|Profile
argument_list|(
argument|llvm::FoldingSetNodeID&ID
argument_list|)
specifier|const
operator|=
literal|0
block|; }
decl_stmt|;
comment|// FIXME: Combine this with RangedBugReport and remove RangedBugReport.
name|class
name|BugReport
range|:
name|public
name|BugReporterVisitor
block|{
name|protected
operator|:
name|BugType
operator|&
name|BT
block|;
name|std
operator|::
name|string
name|ShortDescription
block|;
name|std
operator|::
name|string
name|Description
block|;
specifier|const
name|ExplodedNode
operator|*
name|EndNode
block|;
name|SourceRange
name|R
block|;
name|protected
operator|:
name|friend
name|class
name|BugReporter
block|;
name|friend
name|class
name|BugReportEquivClass
block|;
name|virtual
name|void
name|Profile
argument_list|(
argument|llvm::FoldingSetNodeID& hash
argument_list|)
specifier|const
block|{
name|hash
operator|.
name|AddInteger
argument_list|(
name|getLocation
argument_list|()
operator|.
name|getRawEncoding
argument_list|()
argument_list|)
block|;   }
name|public
operator|:
name|class
name|NodeResolver
block|{
name|public
operator|:
name|virtual
operator|~
name|NodeResolver
argument_list|()
block|{}
name|virtual
specifier|const
name|ExplodedNode
operator|*
name|getOriginalNode
argument_list|(
specifier|const
name|ExplodedNode
operator|*
name|N
argument_list|)
operator|=
literal|0
block|;   }
block|;
name|BugReport
argument_list|(
argument|BugType& bt
argument_list|,
argument|llvm::StringRef desc
argument_list|,
argument|const ExplodedNode *n
argument_list|)
operator|:
name|BT
argument_list|(
name|bt
argument_list|)
block|,
name|Description
argument_list|(
name|desc
argument_list|)
block|,
name|EndNode
argument_list|(
argument|n
argument_list|)
block|{}
name|BugReport
argument_list|(
argument|BugType& bt
argument_list|,
argument|llvm::StringRef shortDesc
argument_list|,
argument|llvm::StringRef desc
argument_list|,
argument|const ExplodedNode *n
argument_list|)
operator|:
name|BT
argument_list|(
name|bt
argument_list|)
block|,
name|ShortDescription
argument_list|(
name|shortDesc
argument_list|)
block|,
name|Description
argument_list|(
name|desc
argument_list|)
block|,
name|EndNode
argument_list|(
argument|n
argument_list|)
block|{}
name|virtual
operator|~
name|BugReport
argument_list|()
block|;
name|virtual
name|bool
name|isOwnedByReporterContext
argument_list|()
block|{
return|return
name|false
return|;
block|}
specifier|const
name|BugType
operator|&
name|getBugType
argument_list|()
specifier|const
block|{
return|return
name|BT
return|;
block|}
name|BugType
operator|&
name|getBugType
argument_list|()
block|{
return|return
name|BT
return|;
block|}
comment|// FIXME: Perhaps this should be moved into a subclass?
specifier|const
name|ExplodedNode
operator|*
name|getEndNode
argument_list|()
specifier|const
block|{
return|return
name|EndNode
return|;
block|}
comment|// FIXME: Do we need this?  Maybe getLocation() should return a ProgramPoint
comment|// object.
comment|// FIXME: If we do need it, we can probably just make it private to
comment|// BugReporter.
specifier|const
name|Stmt
operator|*
name|getStmt
argument_list|()
specifier|const
block|;
specifier|const
name|llvm
operator|::
name|StringRef
name|getDescription
argument_list|()
specifier|const
block|{
return|return
name|Description
return|;
block|}
specifier|const
name|llvm
operator|::
name|StringRef
name|getShortDescription
argument_list|()
specifier|const
block|{
return|return
name|ShortDescription
operator|.
name|empty
argument_list|()
operator|?
name|Description
operator|:
name|ShortDescription
return|;
block|}
comment|// FIXME: Is this needed?
name|virtual
name|std
operator|::
name|pair
operator|<
specifier|const
name|char
operator|*
operator|*
block|,
specifier|const
name|char
operator|*
operator|*
operator|>
name|getExtraDescriptiveText
argument_list|()
block|{
return|return
name|std
operator|::
name|make_pair
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|*
operator|)
literal|0
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|*
operator|)
literal|0
argument_list|)
return|;
block|}
comment|// FIXME: Perhaps move this into a subclass.
name|virtual
name|PathDiagnosticPiece
operator|*
name|getEndPath
argument_list|(
name|BugReporterContext
operator|&
name|BRC
argument_list|,
specifier|const
name|ExplodedNode
operator|*
name|N
argument_list|)
block|;
comment|/// getLocation - Return the "definitive" location of the reported bug.
comment|///  While a bug can span an entire path, usually there is a specific
comment|///  location that can be used to identify where the key issue occured.
comment|///  This location is used by clients rendering diagnostics.
name|virtual
name|SourceLocation
name|getLocation
argument_list|()
specifier|const
block|;
comment|/// getRanges - Returns the source ranges associated with this bug.
name|virtual
name|void
name|getRanges
argument_list|(
specifier|const
name|SourceRange
operator|*
operator|&
name|beg
argument_list|,
specifier|const
name|SourceRange
operator|*
operator|&
name|end
argument_list|)
block|;
name|virtual
name|PathDiagnosticPiece
operator|*
name|VisitNode
argument_list|(
specifier|const
name|ExplodedNode
operator|*
name|N
argument_list|,
specifier|const
name|ExplodedNode
operator|*
name|PrevN
argument_list|,
name|BugReporterContext
operator|&
name|BR
argument_list|)
block|;
name|virtual
name|void
name|registerInitialVisitors
argument_list|(
argument|BugReporterContext& BRC
argument_list|,
argument|const ExplodedNode* N
argument_list|)
block|{}
block|}
decl_stmt|;
comment|//===----------------------------------------------------------------------===//
comment|// BugTypes (collections of related reports).
comment|//===----------------------------------------------------------------------===//
name|class
name|BugReportEquivClass
range|:
name|public
name|llvm
operator|::
name|FoldingSetNode
block|{
comment|// List of *owned* BugReport objects.
name|std
operator|::
name|list
operator|<
name|BugReport
operator|*
operator|>
name|Reports
block|;
name|friend
name|class
name|BugReporter
block|;
name|void
name|AddReport
argument_list|(
argument|BugReport* R
argument_list|)
block|{
name|Reports
operator|.
name|push_back
argument_list|(
name|R
argument_list|)
block|; }
name|public
operator|:
name|BugReportEquivClass
argument_list|(
argument|BugReport* R
argument_list|)
block|{
name|Reports
operator|.
name|push_back
argument_list|(
name|R
argument_list|)
block|; }
operator|~
name|BugReportEquivClass
argument_list|()
block|;
name|void
name|Profile
argument_list|(
argument|llvm::FoldingSetNodeID& ID
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
operator|!
name|Reports
operator|.
name|empty
argument_list|()
argument_list|)
block|;
operator|(
operator|*
name|Reports
operator|.
name|begin
argument_list|()
operator|)
operator|->
name|Profile
argument_list|(
name|ID
argument_list|)
block|;   }
name|class
name|iterator
block|{
name|std
operator|::
name|list
operator|<
name|BugReport
operator|*
operator|>
operator|::
name|iterator
name|impl
block|;
name|public
operator|:
name|iterator
argument_list|(
argument|std::list<BugReport*>::iterator i
argument_list|)
operator|:
name|impl
argument_list|(
argument|i
argument_list|)
block|{}
name|iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|impl
block|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|iterator
operator|&
name|I
operator|)
specifier|const
block|{
return|return
name|I
operator|.
name|impl
operator|==
name|impl
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|iterator
operator|&
name|I
operator|)
specifier|const
block|{
return|return
name|I
operator|.
name|impl
operator|!=
name|impl
return|;
block|}
name|BugReport
operator|*
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|impl
return|;
block|}
name|BugReport
operator|*
name|operator
operator|->
expr|(
block|)
specifier|const
block|{
return|return
operator|*
name|impl
return|;
block|}
expr|}
block|;
name|class
name|const_iterator
block|{
name|std
operator|::
name|list
operator|<
name|BugReport
operator|*
operator|>
operator|::
name|const_iterator
name|impl
block|;
name|public
operator|:
name|const_iterator
argument_list|(
argument|std::list<BugReport*>::const_iterator i
argument_list|)
operator|:
name|impl
argument_list|(
argument|i
argument_list|)
block|{}
name|const_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|impl
block|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|const_iterator
operator|&
name|I
operator|)
specifier|const
block|{
return|return
name|I
operator|.
name|impl
operator|==
name|impl
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|const_iterator
operator|&
name|I
operator|)
specifier|const
block|{
return|return
name|I
operator|.
name|impl
operator|!=
name|impl
return|;
block|}
specifier|const
name|BugReport
operator|*
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|impl
return|;
block|}
specifier|const
name|BugReport
operator|*
name|operator
operator|->
expr|(
block|)
specifier|const
block|{
return|return
operator|*
name|impl
return|;
block|}
expr|}
block|;
name|iterator
name|begin
argument_list|()
block|{
return|return
name|iterator
argument_list|(
name|Reports
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
name|iterator
name|end
argument_list|()
block|{
return|return
name|iterator
argument_list|(
name|Reports
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|Reports
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|Reports
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
expr|}
block|;
comment|//===----------------------------------------------------------------------===//
comment|// Specialized subclasses of BugReport.
comment|//===----------------------------------------------------------------------===//
comment|// FIXME: Collapse this with the default BugReport class.
name|class
name|RangedBugReport
operator|:
name|public
name|BugReport
block|{
name|std
operator|::
name|vector
operator|<
name|SourceRange
operator|>
name|Ranges
block|;
name|public
operator|:
name|RangedBugReport
argument_list|(
argument|BugType& D
argument_list|,
argument|llvm::StringRef description
argument_list|,
argument|ExplodedNode *n
argument_list|)
operator|:
name|BugReport
argument_list|(
argument|D
argument_list|,
argument|description
argument_list|,
argument|n
argument_list|)
block|{}
name|RangedBugReport
argument_list|(
argument|BugType& D
argument_list|,
argument|llvm::StringRef shortDescription
argument_list|,
argument|llvm::StringRef description
argument_list|,
argument|ExplodedNode *n
argument_list|)
operator|:
name|BugReport
argument_list|(
argument|D
argument_list|,
argument|shortDescription
argument_list|,
argument|description
argument_list|,
argument|n
argument_list|)
block|{}
operator|~
name|RangedBugReport
argument_list|()
block|;
comment|// FIXME: Move this out of line.
name|void
name|addRange
argument_list|(
argument|SourceRange R
argument_list|)
block|{
name|assert
argument_list|(
name|R
operator|.
name|isValid
argument_list|()
argument_list|)
block|;
name|Ranges
operator|.
name|push_back
argument_list|(
name|R
argument_list|)
block|;   }
comment|// FIXME: Move this out of line.
name|void
name|getRanges
argument_list|(
argument|const SourceRange*& beg
argument_list|,
argument|const SourceRange*& end
argument_list|)
block|{
if|if
condition|(
name|Ranges
operator|.
name|empty
argument_list|()
condition|)
block|{
name|beg
operator|=
name|NULL
expr_stmt|;
name|end
operator|=
name|NULL
expr_stmt|;
block|}
else|else
block|{
name|beg
operator|=
operator|&
name|Ranges
index|[
literal|0
index|]
expr_stmt|;
name|end
operator|=
name|beg
operator|+
name|Ranges
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|;
name|class
name|EnhancedBugReport
operator|:
name|public
name|RangedBugReport
block|{
name|public
operator|:
typedef|typedef
name|void
function_decl|(
modifier|*
name|VisitorCreator
function_decl|)
parameter_list|(
name|BugReporterContext
modifier|&
name|BRcC
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|,
specifier|const
name|ExplodedNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|private
operator|:
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|pair
operator|<
name|VisitorCreator
operator|,
specifier|const
name|void
operator|*
operator|>
expr|>
name|Creators
expr_stmt|;
name|Creators
name|creators
decl_stmt|;
name|public
label|:
name|EnhancedBugReport
argument_list|(
argument|BugType& D
argument_list|,
argument|llvm::StringRef description
argument_list|,
argument|ExplodedNode *n
argument_list|)
block|:
name|RangedBugReport
argument_list|(
argument|D
argument_list|,
argument|description
argument_list|,
argument|n
argument_list|)
block|{}
name|EnhancedBugReport
argument_list|(
argument|BugType& D
argument_list|,
argument|llvm::StringRef shortDescription
argument_list|,
argument|llvm::StringRef description
argument_list|,
argument|ExplodedNode *n
argument_list|)
block|:
name|RangedBugReport
argument_list|(
argument|D
argument_list|,
argument|shortDescription
argument_list|,
argument|description
argument_list|,
argument|n
argument_list|)
block|{}
operator|~
name|EnhancedBugReport
argument_list|()
block|{}
name|void
name|registerInitialVisitors
argument_list|(
argument|BugReporterContext& BRC
argument_list|,
argument|const ExplodedNode* N
argument_list|)
block|{
for|for
control|(
name|Creators
operator|::
name|iterator
name|I
operator|=
name|creators
operator|.
name|begin
argument_list|()
operator|,
name|E
operator|=
name|creators
operator|.
name|end
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
name|I
operator|->
name|first
argument_list|(
name|BRC
argument_list|,
name|I
operator|->
name|second
argument_list|,
name|N
argument_list|)
expr_stmt|;
block|}
name|void
name|addVisitorCreator
parameter_list|(
name|VisitorCreator
name|creator
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|)
block|{
name|creators
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|creator
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|// BugReporter and friends.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_decl_stmt
name|class
name|BugReporterData
block|{
name|public
label|:
name|virtual
operator|~
name|BugReporterData
argument_list|()
expr_stmt|;
name|virtual
name|Diagnostic
modifier|&
name|getDiagnostic
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|PathDiagnosticClient
modifier|*
name|getPathDiagnosticClient
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|ASTContext
modifier|&
name|getASTContext
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|SourceManager
modifier|&
name|getSourceManager
parameter_list|()
init|=
literal|0
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|BugReporter
block|{
name|public
label|:
enum|enum
name|Kind
block|{
name|BaseBRKind
block|,
name|GRBugReporterKind
block|}
enum|;
name|private
label|:
typedef|typedef
name|llvm
operator|::
name|ImmutableSet
operator|<
name|BugType
operator|*
operator|>
name|BugTypesTy
expr_stmt|;
name|BugTypesTy
operator|::
name|Factory
name|F
expr_stmt|;
name|BugTypesTy
name|BugTypes
decl_stmt|;
specifier|const
name|Kind
name|kind
decl_stmt|;
name|BugReporterData
modifier|&
name|D
decl_stmt|;
name|void
name|FlushReport
parameter_list|(
name|BugReportEquivClass
modifier|&
name|EQ
parameter_list|)
function_decl|;
name|protected
label|:
name|BugReporter
argument_list|(
argument|BugReporterData& d
argument_list|,
argument|Kind k
argument_list|)
block|:
name|BugTypes
argument_list|(
name|F
operator|.
name|GetEmptySet
argument_list|()
argument_list|)
operator|,
name|kind
argument_list|(
name|k
argument_list|)
operator|,
name|D
argument_list|(
argument|d
argument_list|)
block|{}
name|public
operator|:
name|BugReporter
argument_list|(
name|BugReporterData
operator|&
name|d
argument_list|)
operator|:
name|BugTypes
argument_list|(
name|F
operator|.
name|GetEmptySet
argument_list|()
argument_list|)
operator|,
name|kind
argument_list|(
name|BaseBRKind
argument_list|)
operator|,
name|D
argument_list|(
argument|d
argument_list|)
block|{}
name|virtual
operator|~
name|BugReporter
argument_list|()
expr_stmt|;
name|void
name|FlushReports
parameter_list|()
function_decl|;
name|Kind
name|getKind
argument_list|()
specifier|const
block|{
return|return
name|kind
return|;
block|}
name|Diagnostic
modifier|&
name|getDiagnostic
parameter_list|()
block|{
return|return
name|D
operator|.
name|getDiagnostic
argument_list|()
return|;
block|}
name|PathDiagnosticClient
modifier|*
name|getPathDiagnosticClient
parameter_list|()
block|{
return|return
name|D
operator|.
name|getPathDiagnosticClient
argument_list|()
return|;
block|}
typedef|typedef
name|BugTypesTy
operator|::
name|iterator
name|iterator
expr_stmt|;
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|BugTypes
operator|.
name|begin
argument_list|()
return|;
block|}
name|iterator
name|end
parameter_list|()
block|{
return|return
name|BugTypes
operator|.
name|end
argument_list|()
return|;
block|}
name|ASTContext
modifier|&
name|getContext
parameter_list|()
block|{
return|return
name|D
operator|.
name|getASTContext
argument_list|()
return|;
block|}
name|SourceManager
modifier|&
name|getSourceManager
parameter_list|()
block|{
return|return
name|D
operator|.
name|getSourceManager
argument_list|()
return|;
block|}
name|virtual
name|void
name|GeneratePathDiagnostic
parameter_list|(
name|PathDiagnostic
modifier|&
name|PD
parameter_list|,
name|BugReportEquivClass
modifier|&
name|EQ
parameter_list|)
block|{}
name|void
name|Register
parameter_list|(
name|BugType
modifier|*
name|BT
parameter_list|)
function_decl|;
name|void
name|EmitReport
parameter_list|(
name|BugReport
modifier|*
name|R
parameter_list|)
function_decl|;
name|void
name|EmitBasicReport
argument_list|(
name|llvm
operator|::
name|StringRef
name|BugName
argument_list|,
name|llvm
operator|::
name|StringRef
name|BugStr
argument_list|,
name|SourceLocation
name|Loc
argument_list|,
name|SourceRange
operator|*
name|RangeBeg
argument_list|,
name|unsigned
name|NumRanges
argument_list|)
decl_stmt|;
name|void
name|EmitBasicReport
argument_list|(
name|llvm
operator|::
name|StringRef
name|BugName
argument_list|,
name|llvm
operator|::
name|StringRef
name|BugCategory
argument_list|,
name|llvm
operator|::
name|StringRef
name|BugStr
argument_list|,
name|SourceLocation
name|Loc
argument_list|,
name|SourceRange
operator|*
name|RangeBeg
argument_list|,
name|unsigned
name|NumRanges
argument_list|)
decl_stmt|;
name|void
name|EmitBasicReport
argument_list|(
name|llvm
operator|::
name|StringRef
name|BugName
argument_list|,
name|llvm
operator|::
name|StringRef
name|BugStr
argument_list|,
name|SourceLocation
name|Loc
argument_list|)
block|{
name|EmitBasicReport
argument_list|(
name|BugName
argument_list|,
name|BugStr
argument_list|,
name|Loc
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|void
name|EmitBasicReport
argument_list|(
name|llvm
operator|::
name|StringRef
name|BugName
argument_list|,
name|llvm
operator|::
name|StringRef
name|BugCategory
argument_list|,
name|llvm
operator|::
name|StringRef
name|BugStr
argument_list|,
name|SourceLocation
name|Loc
argument_list|)
block|{
name|EmitBasicReport
argument_list|(
name|BugName
argument_list|,
name|BugCategory
argument_list|,
name|BugStr
argument_list|,
name|Loc
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|void
name|EmitBasicReport
argument_list|(
name|llvm
operator|::
name|StringRef
name|BugName
argument_list|,
name|llvm
operator|::
name|StringRef
name|BugStr
argument_list|,
name|SourceLocation
name|Loc
argument_list|,
name|SourceRange
name|R
argument_list|)
block|{
name|EmitBasicReport
argument_list|(
name|BugName
argument_list|,
name|BugStr
argument_list|,
name|Loc
argument_list|,
operator|&
name|R
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|void
name|EmitBasicReport
argument_list|(
name|llvm
operator|::
name|StringRef
name|BugName
argument_list|,
name|llvm
operator|::
name|StringRef
name|Category
argument_list|,
name|llvm
operator|::
name|StringRef
name|BugStr
argument_list|,
name|SourceLocation
name|Loc
argument_list|,
name|SourceRange
name|R
argument_list|)
block|{
name|EmitBasicReport
argument_list|(
name|BugName
argument_list|,
name|Category
argument_list|,
name|BugStr
argument_list|,
name|Loc
argument_list|,
operator|&
name|R
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|static
name|bool
name|classof
parameter_list|(
specifier|const
name|BugReporter
modifier|*
name|R
parameter_list|)
block|{
return|return
name|true
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// FIXME: Get rid of GRBugReporter.  It's the wrong abstraction.
end_comment

begin_decl_stmt
name|class
name|GRBugReporter
range|:
name|public
name|BugReporter
block|{
name|GRExprEngine
operator|&
name|Eng
block|;
name|llvm
operator|::
name|SmallSet
operator|<
name|SymbolRef
block|,
literal|10
operator|>
name|NotableSymbols
block|;
name|public
operator|:
name|GRBugReporter
argument_list|(
name|BugReporterData
operator|&
name|d
argument_list|,
name|GRExprEngine
operator|&
name|eng
argument_list|)
operator|:
name|BugReporter
argument_list|(
name|d
argument_list|,
name|GRBugReporterKind
argument_list|)
block|,
name|Eng
argument_list|(
argument|eng
argument_list|)
block|{}
name|virtual
operator|~
name|GRBugReporter
argument_list|()
block|;
comment|/// getEngine - Return the analysis engine used to analyze a given
comment|///  function or method.
name|GRExprEngine
operator|&
name|getEngine
argument_list|()
block|{
return|return
name|Eng
return|;
block|}
comment|/// getGraph - Get the exploded graph created by the analysis engine
comment|///  for the analyzed method or function.
name|ExplodedGraph
operator|&
name|getGraph
argument_list|()
block|;
comment|/// getStateManager - Return the state manager used by the analysis
comment|///  engine.
name|GRStateManager
operator|&
name|getStateManager
argument_list|()
block|;
name|virtual
name|void
name|GeneratePathDiagnostic
argument_list|(
name|PathDiagnostic
operator|&
name|PD
argument_list|,
name|BugReportEquivClass
operator|&
name|R
argument_list|)
block|;
name|void
name|addNotableSymbol
argument_list|(
argument|SymbolRef Sym
argument_list|)
block|{
name|NotableSymbols
operator|.
name|insert
argument_list|(
name|Sym
argument_list|)
block|;   }
name|bool
name|isNotable
argument_list|(
argument|SymbolRef Sym
argument_list|)
specifier|const
block|{
return|return
operator|(
name|bool
operator|)
name|NotableSymbols
operator|.
name|count
argument_list|(
name|Sym
argument_list|)
return|;
block|}
comment|/// classof - Used by isa<>, cast<>, and dyn_cast<>.
specifier|static
name|bool
name|classof
argument_list|(
argument|const BugReporter* R
argument_list|)
block|{
return|return
name|R
operator|->
name|getKind
argument_list|()
operator|==
name|GRBugReporterKind
return|;
block|}
expr|}
block|;
name|class
name|BugReporterContext
block|{
name|GRBugReporter
operator|&
name|BR
block|;
comment|// Not the most efficient data structure, but we use an ImmutableList for the
comment|// Callbacks because it is safe to make additions to list during iteration.
name|llvm
operator|::
name|ImmutableList
operator|<
name|BugReporterVisitor
operator|*
operator|>
operator|::
name|Factory
name|F
block|;
name|llvm
operator|::
name|ImmutableList
operator|<
name|BugReporterVisitor
operator|*
operator|>
name|Callbacks
block|;
name|llvm
operator|::
name|FoldingSet
operator|<
name|BugReporterVisitor
operator|>
name|CallbacksSet
block|;
name|public
operator|:
name|BugReporterContext
argument_list|(
name|GRBugReporter
operator|&
name|br
argument_list|)
operator|:
name|BR
argument_list|(
name|br
argument_list|)
block|,
name|Callbacks
argument_list|(
argument|F.GetEmptyList()
argument_list|)
block|{}
name|virtual
operator|~
name|BugReporterContext
argument_list|()
block|;
name|void
name|addVisitor
argument_list|(
name|BugReporterVisitor
operator|*
name|visitor
argument_list|)
block|;
typedef|typedef
name|llvm
operator|::
name|ImmutableList
operator|<
name|BugReporterVisitor
operator|*
operator|>
operator|::
name|iterator
name|visitor_iterator
expr_stmt|;
name|visitor_iterator
name|visitor_begin
argument_list|()
block|{
return|return
name|Callbacks
operator|.
name|begin
argument_list|()
return|;
block|}
name|visitor_iterator
name|visitor_end
argument_list|()
block|{
return|return
name|Callbacks
operator|.
name|end
argument_list|()
return|;
block|}
name|GRBugReporter
operator|&
name|getBugReporter
argument_list|()
block|{
return|return
name|BR
return|;
block|}
name|ExplodedGraph
operator|&
name|getGraph
argument_list|()
block|{
return|return
name|BR
operator|.
name|getGraph
argument_list|()
return|;
block|}
name|void
name|addNotableSymbol
argument_list|(
argument|SymbolRef Sym
argument_list|)
block|{
comment|// FIXME: For now forward to GRBugReporter.
name|BR
operator|.
name|addNotableSymbol
argument_list|(
name|Sym
argument_list|)
block|;   }
name|bool
name|isNotable
argument_list|(
argument|SymbolRef Sym
argument_list|)
specifier|const
block|{
comment|// FIXME: For now forward to GRBugReporter.
return|return
name|BR
operator|.
name|isNotable
argument_list|(
name|Sym
argument_list|)
return|;
block|}
name|GRStateManager
operator|&
name|getStateManager
argument_list|()
block|{
return|return
name|BR
operator|.
name|getStateManager
argument_list|()
return|;
block|}
name|ValueManager
operator|&
name|getValueManager
argument_list|()
block|{
return|return
name|getStateManager
argument_list|()
operator|.
name|getValueManager
argument_list|()
return|;
block|}
name|ASTContext
operator|&
name|getASTContext
argument_list|()
block|{
return|return
name|BR
operator|.
name|getContext
argument_list|()
return|;
block|}
name|SourceManager
operator|&
name|getSourceManager
argument_list|()
block|{
return|return
name|BR
operator|.
name|getSourceManager
argument_list|()
return|;
block|}
name|virtual
name|BugReport
operator|::
name|NodeResolver
operator|&
name|getNodeResolver
argument_list|()
operator|=
literal|0
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|DiagBugReport
range|:
name|public
name|RangedBugReport
block|{
name|std
operator|::
name|list
operator|<
name|std
operator|::
name|string
operator|>
name|Strs
block|;
name|FullSourceLoc
name|L
block|;
name|public
operator|:
name|DiagBugReport
argument_list|(
argument|BugType& D
argument_list|,
argument|llvm::StringRef desc
argument_list|,
argument|FullSourceLoc l
argument_list|)
operator|:
name|RangedBugReport
argument_list|(
name|D
argument_list|,
name|desc
argument_list|,
literal|0
argument_list|)
block|,
name|L
argument_list|(
argument|l
argument_list|)
block|{}
name|virtual
operator|~
name|DiagBugReport
argument_list|()
block|{}
comment|// FIXME: Move out-of-line (virtual function).
name|SourceLocation
name|getLocation
argument_list|()
specifier|const
block|{
return|return
name|L
return|;
block|}
name|void
name|addString
argument_list|(
argument|llvm::StringRef s
argument_list|)
block|{
name|Strs
operator|.
name|push_back
argument_list|(
name|s
argument_list|)
block|; }
typedef|typedef
name|std
operator|::
name|list
operator|<
name|std
operator|::
name|string
operator|>
operator|::
name|const_iterator
name|str_iterator
expr_stmt|;
name|str_iterator
name|str_begin
argument_list|()
specifier|const
block|{
return|return
name|Strs
operator|.
name|begin
argument_list|()
return|;
block|}
name|str_iterator
name|str_end
argument_list|()
specifier|const
block|{
return|return
name|Strs
operator|.
name|end
argument_list|()
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_decl_stmt
name|namespace
name|bugreporter
block|{
specifier|const
name|Stmt
modifier|*
name|GetDerefExpr
parameter_list|(
specifier|const
name|ExplodedNode
modifier|*
name|N
parameter_list|)
function_decl|;
specifier|const
name|Stmt
modifier|*
name|GetReceiverExpr
parameter_list|(
specifier|const
name|ExplodedNode
modifier|*
name|N
parameter_list|)
function_decl|;
specifier|const
name|Stmt
modifier|*
name|GetDenomExpr
parameter_list|(
specifier|const
name|ExplodedNode
modifier|*
name|N
parameter_list|)
function_decl|;
specifier|const
name|Stmt
modifier|*
name|GetCalleeExpr
parameter_list|(
specifier|const
name|ExplodedNode
modifier|*
name|N
parameter_list|)
function_decl|;
specifier|const
name|Stmt
modifier|*
name|GetRetValExpr
parameter_list|(
specifier|const
name|ExplodedNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|void
name|registerTrackNullOrUndefValue
parameter_list|(
name|BugReporterContext
modifier|&
name|BRC
parameter_list|,
specifier|const
name|void
modifier|*
name|stmt
parameter_list|,
specifier|const
name|ExplodedNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|void
name|registerFindLastStore
parameter_list|(
name|BugReporterContext
modifier|&
name|BRC
parameter_list|,
specifier|const
name|void
modifier|*
name|memregion
parameter_list|,
specifier|const
name|ExplodedNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|void
name|registerNilReceiverVisitor
parameter_list|(
name|BugReporterContext
modifier|&
name|BRC
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace clang::bugreporter
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
unit|}
comment|// end clang namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

