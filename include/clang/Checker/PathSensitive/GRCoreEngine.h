begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//==- GRCoreEngine.h - Path-Sensitive Dataflow Engine --------------*- C++ -*-//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines a generic engine for intraprocedural, path-sensitive,
end_comment

begin_comment
comment|//  dataflow analysis via graph reachability.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_ANALYSIS_GRENGINE
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_ANALYSIS_GRENGINE
end_define

begin_include
include|#
directive|include
file|"clang/AST/Expr.h"
end_include

begin_include
include|#
directive|include
file|"clang/Checker/PathSensitive/ExplodedGraph.h"
end_include

begin_include
include|#
directive|include
file|"clang/Checker/PathSensitive/GRWorkList.h"
end_include

begin_include
include|#
directive|include
file|"clang/Checker/PathSensitive/GRBlockCounter.h"
end_include

begin_include
include|#
directive|include
file|"clang/Checker/PathSensitive/GRAuditor.h"
end_include

begin_include
include|#
directive|include
file|"clang/Checker/PathSensitive/GRSubEngine.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/OwningPtr.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
comment|//===----------------------------------------------------------------------===//
comment|/// GRCoreEngine - Implements the core logic of the graph-reachability
comment|///   analysis. It traverses the CFG and generates the ExplodedGraph.
comment|///   Program "states" are treated as opaque void pointers.
comment|///   The template class GRCoreEngine (which subclasses GRCoreEngine)
comment|///   provides the matching component to the engine that knows the actual types
comment|///   for states.  Note that this engine only dispatches to transfer functions
comment|///   at the statement and block-level.  The analyses themselves must implement
comment|///   any transfer function logic and the sub-expression level (if any).
name|class
name|GRCoreEngine
block|{
name|friend
name|class
name|GRStmtNodeBuilder
decl_stmt|;
name|friend
name|class
name|GRBranchNodeBuilder
decl_stmt|;
name|friend
name|class
name|GRIndirectGotoNodeBuilder
decl_stmt|;
name|friend
name|class
name|GRSwitchNodeBuilder
decl_stmt|;
name|friend
name|class
name|GREndPathNodeBuilder
decl_stmt|;
name|friend
name|class
name|GRCallEnterNodeBuilder
decl_stmt|;
name|friend
name|class
name|GRCallExitNodeBuilder
decl_stmt|;
name|GRSubEngine
modifier|&
name|SubEngine
decl_stmt|;
comment|/// G - The simulation graph.  Each node is a (location,state) pair.
name|llvm
operator|::
name|OwningPtr
operator|<
name|ExplodedGraph
operator|>
name|G
expr_stmt|;
comment|/// WList - A set of queued nodes that need to be processed by the
comment|///  worklist algorithm.  It is up to the implementation of WList to decide
comment|///  the order that nodes are processed.
name|GRWorkList
modifier|*
name|WList
decl_stmt|;
comment|/// BCounterFactory - A factory object for created GRBlockCounter objects.
comment|///   These are used to record for key nodes in the ExplodedGraph the
comment|///   number of times different CFGBlocks have been visited along a path.
name|GRBlockCounter
operator|::
name|Factory
name|BCounterFactory
expr_stmt|;
comment|/// A flag that indicates whether paths were halted because
comment|///  ProcessBlockEntrace returned false.
name|bool
name|BlockAborted
decl_stmt|;
name|void
name|GenerateNode
parameter_list|(
specifier|const
name|ProgramPoint
modifier|&
name|Loc
parameter_list|,
specifier|const
name|GRState
modifier|*
name|State
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|)
function_decl|;
name|void
name|HandleBlockEdge
parameter_list|(
specifier|const
name|BlockEdge
modifier|&
name|E
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|)
function_decl|;
name|void
name|HandleBlockEntrance
parameter_list|(
specifier|const
name|BlockEntrance
modifier|&
name|E
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|)
function_decl|;
name|void
name|HandleBlockExit
parameter_list|(
name|CFGBlock
modifier|*
name|B
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|)
function_decl|;
name|void
name|HandlePostStmt
parameter_list|(
specifier|const
name|PostStmt
modifier|&
name|S
parameter_list|,
name|CFGBlock
modifier|*
name|B
parameter_list|,
name|unsigned
name|StmtIdx
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|)
function_decl|;
name|void
name|HandleBranch
parameter_list|(
name|Stmt
modifier|*
name|Cond
parameter_list|,
name|Stmt
modifier|*
name|Term
parameter_list|,
name|CFGBlock
modifier|*
name|B
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|)
function_decl|;
name|void
name|HandleCallEnter
parameter_list|(
specifier|const
name|CallEnter
modifier|&
name|L
parameter_list|,
specifier|const
name|CFGBlock
modifier|*
name|Block
parameter_list|,
name|unsigned
name|Index
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|)
function_decl|;
name|void
name|HandleCallExit
parameter_list|(
specifier|const
name|CallExit
modifier|&
name|L
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|)
function_decl|;
comment|/// Get the initial state from the subengine.
specifier|const
name|GRState
modifier|*
name|getInitialState
parameter_list|(
specifier|const
name|LocationContext
modifier|*
name|InitLoc
parameter_list|)
block|{
return|return
name|SubEngine
operator|.
name|getInitialState
argument_list|(
name|InitLoc
argument_list|)
return|;
block|}
name|void
name|ProcessEndPath
parameter_list|(
name|GREndPathNodeBuilder
modifier|&
name|Builder
parameter_list|)
function_decl|;
name|void
name|ProcessStmt
parameter_list|(
name|CFGElement
name|E
parameter_list|,
name|GRStmtNodeBuilder
modifier|&
name|Builder
parameter_list|)
function_decl|;
name|bool
name|ProcessBlockEntrance
parameter_list|(
name|CFGBlock
modifier|*
name|Blk
parameter_list|,
specifier|const
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
name|GRBlockCounter
name|BC
parameter_list|)
function_decl|;
name|void
name|ProcessBranch
parameter_list|(
name|Stmt
modifier|*
name|Condition
parameter_list|,
name|Stmt
modifier|*
name|Terminator
parameter_list|,
name|GRBranchNodeBuilder
modifier|&
name|Builder
parameter_list|)
function_decl|;
name|void
name|ProcessIndirectGoto
parameter_list|(
name|GRIndirectGotoNodeBuilder
modifier|&
name|Builder
parameter_list|)
function_decl|;
name|void
name|ProcessSwitch
parameter_list|(
name|GRSwitchNodeBuilder
modifier|&
name|Builder
parameter_list|)
function_decl|;
name|void
name|ProcessCallEnter
parameter_list|(
name|GRCallEnterNodeBuilder
modifier|&
name|Builder
parameter_list|)
function_decl|;
name|void
name|ProcessCallExit
parameter_list|(
name|GRCallExitNodeBuilder
modifier|&
name|Builder
parameter_list|)
function_decl|;
name|private
label|:
name|GRCoreEngine
argument_list|(
specifier|const
name|GRCoreEngine
operator|&
argument_list|)
expr_stmt|;
comment|// Do not implement.
name|GRCoreEngine
modifier|&
name|operator
init|=
operator|(
specifier|const
name|GRCoreEngine
operator|&
operator|)
decl_stmt|;
name|public
label|:
comment|/// Construct a GRCoreEngine object to analyze the provided CFG using
comment|///  a DFS exploration of the exploded graph.
name|GRCoreEngine
argument_list|(
name|GRSubEngine
operator|&
name|subengine
argument_list|)
operator|:
name|SubEngine
argument_list|(
name|subengine
argument_list|)
operator|,
name|G
argument_list|(
argument|new ExplodedGraph()
argument_list|)
operator|,
name|WList
argument_list|(
name|GRWorkList
operator|::
name|MakeBFS
argument_list|()
argument_list|)
operator|,
name|BCounterFactory
argument_list|(
name|G
operator|->
name|getAllocator
argument_list|()
argument_list|)
operator|,
name|BlockAborted
argument_list|(
argument|false
argument_list|)
block|{}
comment|/// Construct a GRCoreEngine object to analyze the provided CFG and to
comment|///  use the provided worklist object to execute the worklist algorithm.
comment|///  The GRCoreEngine object assumes ownership of 'wlist'.
name|GRCoreEngine
argument_list|(
name|GRWorkList
operator|*
name|wlist
argument_list|,
name|GRSubEngine
operator|&
name|subengine
argument_list|)
operator|:
name|SubEngine
argument_list|(
name|subengine
argument_list|)
operator|,
name|G
argument_list|(
argument|new ExplodedGraph()
argument_list|)
operator|,
name|WList
argument_list|(
name|wlist
argument_list|)
operator|,
name|BCounterFactory
argument_list|(
name|G
operator|->
name|getAllocator
argument_list|()
argument_list|)
operator|,
name|BlockAborted
argument_list|(
argument|false
argument_list|)
block|{}
operator|~
name|GRCoreEngine
argument_list|()
block|{
name|delete
name|WList
block|;   }
comment|/// getGraph - Returns the exploded graph.
name|ExplodedGraph
operator|&
name|getGraph
argument_list|()
block|{
return|return
operator|*
name|G
operator|.
name|get
argument_list|()
return|;
block|}
comment|/// takeGraph - Returns the exploded graph.  Ownership of the graph is
comment|///  transfered to the caller.
name|ExplodedGraph
modifier|*
name|takeGraph
parameter_list|()
block|{
return|return
name|G
operator|.
name|take
argument_list|()
return|;
block|}
comment|/// ExecuteWorkList - Run the worklist algorithm for a maximum number of
comment|///  steps.  Returns true if there is still simulation state on the worklist.
name|bool
name|ExecuteWorkList
parameter_list|(
specifier|const
name|LocationContext
modifier|*
name|L
parameter_list|,
name|unsigned
name|Steps
parameter_list|)
function_decl|;
block|}
empty_stmt|;
name|class
name|GRStmtNodeBuilder
block|{
name|GRCoreEngine
modifier|&
name|Eng
decl_stmt|;
name|CFGBlock
modifier|&
name|B
decl_stmt|;
specifier|const
name|unsigned
name|Idx
decl_stmt|;
name|ExplodedNode
modifier|*
name|Pred
decl_stmt|;
name|GRStateManager
modifier|&
name|Mgr
decl_stmt|;
name|GRAuditor
modifier|*
name|Auditor
decl_stmt|;
name|public
label|:
name|bool
name|PurgingDeadSymbols
decl_stmt|;
name|bool
name|BuildSinks
decl_stmt|;
name|bool
name|HasGeneratedNode
decl_stmt|;
name|ProgramPoint
operator|::
name|Kind
name|PointKind
expr_stmt|;
specifier|const
name|void
modifier|*
name|Tag
decl_stmt|;
specifier|const
name|GRState
modifier|*
name|CleanedState
decl_stmt|;
typedef|typedef
name|llvm
operator|::
name|SmallPtrSet
operator|<
name|ExplodedNode
operator|*
operator|,
literal|5
operator|>
name|DeferredTy
expr_stmt|;
name|DeferredTy
name|Deferred
decl_stmt|;
name|void
name|GenerateAutoTransition
parameter_list|(
name|ExplodedNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|public
label|:
name|GRStmtNodeBuilder
argument_list|(
argument|CFGBlock* b
argument_list|,
argument|unsigned idx
argument_list|,
argument|ExplodedNode* N
argument_list|,
argument|GRCoreEngine* e
argument_list|,
argument|GRStateManager&mgr
argument_list|)
empty_stmt|;
operator|~
name|GRStmtNodeBuilder
argument_list|()
expr_stmt|;
name|ExplodedNode
operator|*
name|getBasePredecessor
argument_list|()
specifier|const
block|{
return|return
name|Pred
return|;
block|}
comment|// FIXME: This should not be exposed.
name|GRWorkList
modifier|*
name|getWorkList
parameter_list|()
block|{
return|return
name|Eng
operator|.
name|WList
return|;
block|}
name|void
name|SetCleanedState
parameter_list|(
specifier|const
name|GRState
modifier|*
name|St
parameter_list|)
block|{
name|CleanedState
operator|=
name|St
expr_stmt|;
block|}
name|GRBlockCounter
name|getBlockCounter
argument_list|()
specifier|const
block|{
return|return
name|Eng
operator|.
name|WList
operator|->
name|getBlockCounter
argument_list|()
return|;
block|}
name|unsigned
name|getCurrentBlockCount
argument_list|()
specifier|const
block|{
return|return
name|getBlockCounter
argument_list|()
operator|.
name|getNumVisited
argument_list|(
name|Pred
operator|->
name|getLocationContext
argument_list|()
operator|->
name|getCurrentStackFrame
argument_list|()
argument_list|,
name|B
operator|.
name|getBlockID
argument_list|()
argument_list|)
return|;
block|}
name|ExplodedNode
modifier|*
name|generateNode
parameter_list|(
name|PostStmt
name|PP
parameter_list|,
specifier|const
name|GRState
modifier|*
name|St
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|)
block|{
name|HasGeneratedNode
operator|=
name|true
expr_stmt|;
return|return
name|generateNodeInternal
argument_list|(
name|PP
argument_list|,
name|St
argument_list|,
name|Pred
argument_list|)
return|;
block|}
name|ExplodedNode
modifier|*
name|generateNode
argument_list|(
specifier|const
name|Stmt
operator|*
name|S
argument_list|,
specifier|const
name|GRState
operator|*
name|St
argument_list|,
name|ExplodedNode
operator|*
name|Pred
argument_list|,
name|ProgramPoint
operator|::
name|Kind
name|K
argument_list|)
block|{
name|HasGeneratedNode
operator|=
name|true
expr_stmt|;
if|if
condition|(
name|PurgingDeadSymbols
condition|)
name|K
operator|=
name|ProgramPoint
operator|::
name|PostPurgeDeadSymbolsKind
expr_stmt|;
return|return
name|generateNodeInternal
argument_list|(
name|S
argument_list|,
name|St
argument_list|,
name|Pred
argument_list|,
name|K
argument_list|,
name|Tag
argument_list|)
return|;
block|}
name|ExplodedNode
modifier|*
name|generateNode
parameter_list|(
specifier|const
name|Stmt
modifier|*
name|S
parameter_list|,
specifier|const
name|GRState
modifier|*
name|St
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|)
block|{
return|return
name|generateNode
argument_list|(
name|S
argument_list|,
name|St
argument_list|,
name|Pred
argument_list|,
name|PointKind
argument_list|)
return|;
block|}
name|ExplodedNode
modifier|*
name|generateNode
parameter_list|(
specifier|const
name|ProgramPoint
modifier|&
name|PP
parameter_list|,
specifier|const
name|GRState
modifier|*
name|State
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|)
block|{
name|HasGeneratedNode
operator|=
name|true
expr_stmt|;
return|return
name|generateNodeInternal
argument_list|(
name|PP
argument_list|,
name|State
argument_list|,
name|Pred
argument_list|)
return|;
block|}
name|ExplodedNode
modifier|*
name|generateNodeInternal
parameter_list|(
specifier|const
name|ProgramPoint
modifier|&
name|PP
parameter_list|,
specifier|const
name|GRState
modifier|*
name|State
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|)
function_decl|;
name|ExplodedNode
modifier|*
name|generateNodeInternal
argument_list|(
specifier|const
name|Stmt
operator|*
name|S
argument_list|,
specifier|const
name|GRState
operator|*
name|State
argument_list|,
name|ExplodedNode
operator|*
name|Pred
argument_list|,
name|ProgramPoint
operator|::
name|Kind
name|K
operator|=
name|ProgramPoint
operator|::
name|PostStmtKind
argument_list|,
specifier|const
name|void
operator|*
name|tag
operator|=
literal|0
argument_list|)
decl_stmt|;
comment|/// getStmt - Return the current block-level expression associated with
comment|///  this builder.
name|Stmt
operator|*
name|getStmt
argument_list|()
specifier|const
block|{
return|return
name|B
index|[
name|Idx
index|]
return|;
block|}
comment|/// getBlock - Return the CFGBlock associated with the block-level expression
comment|///  of this builder.
name|CFGBlock
operator|*
name|getBlock
argument_list|()
specifier|const
block|{
return|return
operator|&
name|B
return|;
block|}
name|unsigned
name|getIndex
argument_list|()
specifier|const
block|{
return|return
name|Idx
return|;
block|}
name|void
name|setAuditor
parameter_list|(
name|GRAuditor
modifier|*
name|A
parameter_list|)
block|{
name|Auditor
operator|=
name|A
expr_stmt|;
block|}
specifier|const
name|GRState
modifier|*
name|GetState
argument_list|(
name|ExplodedNode
operator|*
name|Pred
argument_list|)
decl|const
block|{
if|if
condition|(
name|Pred
operator|==
name|getBasePredecessor
argument_list|()
condition|)
return|return
name|CleanedState
return|;
else|else
return|return
name|Pred
operator|->
name|getState
argument_list|()
return|;
block|}
name|ExplodedNode
modifier|*
name|MakeNode
parameter_list|(
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|,
name|Stmt
modifier|*
name|S
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
specifier|const
name|GRState
modifier|*
name|St
parameter_list|)
block|{
return|return
name|MakeNode
argument_list|(
name|Dst
argument_list|,
name|S
argument_list|,
name|Pred
argument_list|,
name|St
argument_list|,
name|PointKind
argument_list|)
return|;
block|}
name|ExplodedNode
modifier|*
name|MakeNode
argument_list|(
name|ExplodedNodeSet
operator|&
name|Dst
argument_list|,
name|Stmt
operator|*
name|S
argument_list|,
name|ExplodedNode
operator|*
name|Pred
argument_list|,
specifier|const
name|GRState
operator|*
name|St
argument_list|,
name|ProgramPoint
operator|::
name|Kind
name|K
argument_list|)
decl_stmt|;
name|ExplodedNode
modifier|*
name|MakeSinkNode
parameter_list|(
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|,
name|Stmt
modifier|*
name|S
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
specifier|const
name|GRState
modifier|*
name|St
parameter_list|)
block|{
name|bool
name|Tmp
init|=
name|BuildSinks
decl_stmt|;
name|BuildSinks
operator|=
name|true
expr_stmt|;
name|ExplodedNode
modifier|*
name|N
init|=
name|MakeNode
argument_list|(
name|Dst
argument_list|,
name|S
argument_list|,
name|Pred
argument_list|,
name|St
argument_list|)
decl_stmt|;
name|BuildSinks
operator|=
name|Tmp
expr_stmt|;
return|return
name|N
return|;
block|}
block|}
empty_stmt|;
name|class
name|GRBranchNodeBuilder
block|{
name|GRCoreEngine
modifier|&
name|Eng
decl_stmt|;
name|CFGBlock
modifier|*
name|Src
decl_stmt|;
name|CFGBlock
modifier|*
name|DstT
decl_stmt|;
name|CFGBlock
modifier|*
name|DstF
decl_stmt|;
name|ExplodedNode
modifier|*
name|Pred
decl_stmt|;
typedef|typedef
name|llvm
operator|::
name|SmallVector
operator|<
name|ExplodedNode
operator|*
operator|,
literal|3
operator|>
name|DeferredTy
expr_stmt|;
name|DeferredTy
name|Deferred
decl_stmt|;
name|bool
name|GeneratedTrue
decl_stmt|;
name|bool
name|GeneratedFalse
decl_stmt|;
name|bool
name|InFeasibleTrue
decl_stmt|;
name|bool
name|InFeasibleFalse
decl_stmt|;
name|public
label|:
name|GRBranchNodeBuilder
argument_list|(
name|CFGBlock
operator|*
name|src
argument_list|,
name|CFGBlock
operator|*
name|dstT
argument_list|,
name|CFGBlock
operator|*
name|dstF
argument_list|,
name|ExplodedNode
operator|*
name|pred
argument_list|,
name|GRCoreEngine
operator|*
name|e
argument_list|)
operator|:
name|Eng
argument_list|(
operator|*
name|e
argument_list|)
operator|,
name|Src
argument_list|(
name|src
argument_list|)
operator|,
name|DstT
argument_list|(
name|dstT
argument_list|)
operator|,
name|DstF
argument_list|(
name|dstF
argument_list|)
operator|,
name|Pred
argument_list|(
name|pred
argument_list|)
operator|,
name|GeneratedTrue
argument_list|(
name|false
argument_list|)
operator|,
name|GeneratedFalse
argument_list|(
name|false
argument_list|)
operator|,
name|InFeasibleTrue
argument_list|(
operator|!
name|DstT
argument_list|)
operator|,
name|InFeasibleFalse
argument_list|(
argument|!DstF
argument_list|)
block|{}
operator|~
name|GRBranchNodeBuilder
argument_list|()
expr_stmt|;
name|ExplodedNode
operator|*
name|getPredecessor
argument_list|()
specifier|const
block|{
return|return
name|Pred
return|;
block|}
specifier|const
name|ExplodedGraph
operator|&
name|getGraph
argument_list|()
specifier|const
block|{
return|return
operator|*
name|Eng
operator|.
name|G
return|;
block|}
name|GRBlockCounter
name|getBlockCounter
argument_list|()
specifier|const
block|{
return|return
name|Eng
operator|.
name|WList
operator|->
name|getBlockCounter
argument_list|()
return|;
block|}
name|ExplodedNode
modifier|*
name|generateNode
parameter_list|(
specifier|const
name|GRState
modifier|*
name|State
parameter_list|,
name|bool
name|branch
parameter_list|)
function_decl|;
name|CFGBlock
modifier|*
name|getTargetBlock
argument_list|(
name|bool
name|branch
argument_list|)
decl|const
block|{
return|return
name|branch
condition|?
name|DstT
else|:
name|DstF
return|;
block|}
name|void
name|markInfeasible
parameter_list|(
name|bool
name|branch
parameter_list|)
block|{
if|if
condition|(
name|branch
condition|)
name|InFeasibleTrue
operator|=
name|GeneratedTrue
operator|=
name|true
expr_stmt|;
else|else
name|InFeasibleFalse
operator|=
name|GeneratedFalse
operator|=
name|true
expr_stmt|;
block|}
name|bool
name|isFeasible
parameter_list|(
name|bool
name|branch
parameter_list|)
block|{
return|return
name|branch
condition|?
operator|!
name|InFeasibleTrue
else|:
operator|!
name|InFeasibleFalse
return|;
block|}
specifier|const
name|GRState
operator|*
name|getState
argument_list|()
specifier|const
block|{
return|return
name|getPredecessor
argument_list|()
operator|->
name|getState
argument_list|()
return|;
block|}
block|}
empty_stmt|;
name|class
name|GRIndirectGotoNodeBuilder
block|{
name|GRCoreEngine
modifier|&
name|Eng
decl_stmt|;
name|CFGBlock
modifier|*
name|Src
decl_stmt|;
name|CFGBlock
modifier|&
name|DispatchBlock
decl_stmt|;
name|Expr
modifier|*
name|E
decl_stmt|;
name|ExplodedNode
modifier|*
name|Pred
decl_stmt|;
name|public
label|:
name|GRIndirectGotoNodeBuilder
argument_list|(
name|ExplodedNode
operator|*
name|pred
argument_list|,
name|CFGBlock
operator|*
name|src
argument_list|,
name|Expr
operator|*
name|e
argument_list|,
name|CFGBlock
operator|*
name|dispatch
argument_list|,
name|GRCoreEngine
operator|*
name|eng
argument_list|)
operator|:
name|Eng
argument_list|(
operator|*
name|eng
argument_list|)
operator|,
name|Src
argument_list|(
name|src
argument_list|)
operator|,
name|DispatchBlock
argument_list|(
operator|*
name|dispatch
argument_list|)
operator|,
name|E
argument_list|(
name|e
argument_list|)
operator|,
name|Pred
argument_list|(
argument|pred
argument_list|)
block|{}
name|class
name|iterator
block|{
name|CFGBlock
operator|::
name|succ_iterator
name|I
block|;
name|friend
name|class
name|GRIndirectGotoNodeBuilder
block|;
name|iterator
argument_list|(
argument|CFGBlock::succ_iterator i
argument_list|)
operator|:
name|I
argument_list|(
argument|i
argument_list|)
block|{}
name|public
operator|:
name|iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|I
block|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|iterator
operator|&
name|X
operator|)
specifier|const
block|{
return|return
name|I
operator|!=
name|X
operator|.
name|I
return|;
block|}
name|LabelStmt
operator|*
name|getLabel
argument_list|()
specifier|const
block|{
return|return
name|llvm
operator|::
name|cast
operator|<
name|LabelStmt
operator|>
operator|(
operator|(
operator|*
name|I
operator|)
operator|->
name|getLabel
argument_list|()
operator|)
return|;
block|}
name|CFGBlock
operator|*
name|getBlock
argument_list|()
specifier|const
block|{
return|return
operator|*
name|I
return|;
block|}
expr|}
block|;
name|iterator
name|begin
argument_list|()
block|{
return|return
name|iterator
argument_list|(
name|DispatchBlock
operator|.
name|succ_begin
argument_list|()
argument_list|)
return|;
block|}
name|iterator
name|end
argument_list|()
block|{
return|return
name|iterator
argument_list|(
name|DispatchBlock
operator|.
name|succ_end
argument_list|()
argument_list|)
return|;
block|}
name|ExplodedNode
operator|*
name|generateNode
argument_list|(
argument|const iterator& I
argument_list|,
argument|const GRState* State
argument_list|,
argument|bool isSink = false
argument_list|)
block|;
name|Expr
operator|*
name|getTarget
argument_list|()
specifier|const
block|{
return|return
name|E
return|;
block|}
specifier|const
name|GRState
operator|*
name|getState
argument_list|()
specifier|const
block|{
return|return
name|Pred
operator|->
name|State
return|;
block|}
expr|}
block|;
name|class
name|GRSwitchNodeBuilder
block|{
name|GRCoreEngine
operator|&
name|Eng
block|;
name|CFGBlock
operator|*
name|Src
block|;
name|Expr
operator|*
name|Condition
block|;
name|ExplodedNode
operator|*
name|Pred
block|;
name|public
operator|:
name|GRSwitchNodeBuilder
argument_list|(
name|ExplodedNode
operator|*
name|pred
argument_list|,
name|CFGBlock
operator|*
name|src
argument_list|,
name|Expr
operator|*
name|condition
argument_list|,
name|GRCoreEngine
operator|*
name|eng
argument_list|)
operator|:
name|Eng
argument_list|(
operator|*
name|eng
argument_list|)
block|,
name|Src
argument_list|(
name|src
argument_list|)
block|,
name|Condition
argument_list|(
name|condition
argument_list|)
block|,
name|Pred
argument_list|(
argument|pred
argument_list|)
block|{}
name|class
name|iterator
block|{
name|CFGBlock
operator|::
name|succ_reverse_iterator
name|I
block|;
name|friend
name|class
name|GRSwitchNodeBuilder
block|;
name|iterator
argument_list|(
argument|CFGBlock::succ_reverse_iterator i
argument_list|)
operator|:
name|I
argument_list|(
argument|i
argument_list|)
block|{}
name|public
operator|:
name|iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|I
block|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|iterator
operator|&
name|X
operator|)
specifier|const
block|{
return|return
name|I
operator|!=
name|X
operator|.
name|I
return|;
block|}
name|CaseStmt
operator|*
name|getCase
argument_list|()
specifier|const
block|{
return|return
name|llvm
operator|::
name|cast
operator|<
name|CaseStmt
operator|>
operator|(
operator|(
operator|*
name|I
operator|)
operator|->
name|getLabel
argument_list|()
operator|)
return|;
block|}
name|CFGBlock
operator|*
name|getBlock
argument_list|()
specifier|const
block|{
return|return
operator|*
name|I
return|;
block|}
expr|}
block|;
name|iterator
name|begin
argument_list|()
block|{
return|return
name|iterator
argument_list|(
name|Src
operator|->
name|succ_rbegin
argument_list|()
operator|+
literal|1
argument_list|)
return|;
block|}
name|iterator
name|end
argument_list|()
block|{
return|return
name|iterator
argument_list|(
name|Src
operator|->
name|succ_rend
argument_list|()
argument_list|)
return|;
block|}
name|ExplodedNode
operator|*
name|generateCaseStmtNode
argument_list|(
specifier|const
name|iterator
operator|&
name|I
argument_list|,
specifier|const
name|GRState
operator|*
name|State
argument_list|)
block|;
name|ExplodedNode
operator|*
name|generateDefaultCaseNode
argument_list|(
argument|const GRState* State
argument_list|,
argument|bool isSink = false
argument_list|)
block|;
name|Expr
operator|*
name|getCondition
argument_list|()
specifier|const
block|{
return|return
name|Condition
return|;
block|}
specifier|const
name|GRState
operator|*
name|getState
argument_list|()
specifier|const
block|{
return|return
name|Pred
operator|->
name|State
return|;
block|}
expr|}
block|;
name|class
name|GREndPathNodeBuilder
block|{
name|GRCoreEngine
operator|&
name|Eng
block|;
name|CFGBlock
operator|&
name|B
block|;
name|ExplodedNode
operator|*
name|Pred
block|;
name|public
operator|:
name|bool
name|HasGeneratedNode
block|;
name|public
operator|:
name|GREndPathNodeBuilder
argument_list|(
name|CFGBlock
operator|*
name|b
argument_list|,
name|ExplodedNode
operator|*
name|N
argument_list|,
name|GRCoreEngine
operator|*
name|e
argument_list|)
operator|:
name|Eng
argument_list|(
operator|*
name|e
argument_list|)
block|,
name|B
argument_list|(
operator|*
name|b
argument_list|)
block|,
name|Pred
argument_list|(
name|N
argument_list|)
block|,
name|HasGeneratedNode
argument_list|(
argument|false
argument_list|)
block|{}
operator|~
name|GREndPathNodeBuilder
argument_list|()
block|;
name|GRWorkList
operator|&
name|getWorkList
argument_list|()
block|{
return|return
operator|*
name|Eng
operator|.
name|WList
return|;
block|}
name|ExplodedNode
operator|*
name|getPredecessor
argument_list|()
specifier|const
block|{
return|return
name|Pred
return|;
block|}
name|GRBlockCounter
name|getBlockCounter
argument_list|()
specifier|const
block|{
return|return
name|Eng
operator|.
name|WList
operator|->
name|getBlockCounter
argument_list|()
return|;
block|}
name|unsigned
name|getCurrentBlockCount
argument_list|()
specifier|const
block|{
return|return
name|getBlockCounter
argument_list|()
operator|.
name|getNumVisited
argument_list|(
name|Pred
operator|->
name|getLocationContext
argument_list|()
operator|->
name|getCurrentStackFrame
argument_list|()
argument_list|,
name|B
operator|.
name|getBlockID
argument_list|()
argument_list|)
return|;
block|}
name|ExplodedNode
operator|*
name|generateNode
argument_list|(
specifier|const
name|GRState
operator|*
name|State
argument_list|,
specifier|const
name|void
operator|*
name|tag
operator|=
literal|0
argument_list|,
name|ExplodedNode
operator|*
name|P
operator|=
literal|0
argument_list|)
block|;
name|void
name|GenerateCallExitNode
argument_list|(
specifier|const
name|GRState
operator|*
name|state
argument_list|)
block|;
name|CFGBlock
operator|*
name|getBlock
argument_list|()
specifier|const
block|{
return|return
operator|&
name|B
return|;
block|}
specifier|const
name|GRState
operator|*
name|getState
argument_list|()
specifier|const
block|{
return|return
name|getPredecessor
argument_list|()
operator|->
name|getState
argument_list|()
return|;
block|}
expr|}
block|;
name|class
name|GRCallEnterNodeBuilder
block|{
name|GRCoreEngine
operator|&
name|Eng
block|;
specifier|const
name|ExplodedNode
operator|*
name|Pred
block|;
comment|// The call site.
specifier|const
name|Stmt
operator|*
name|CE
block|;
comment|// The definition of callee.
specifier|const
name|FunctionDecl
operator|*
name|FD
block|;
comment|// The parent block of the CallExpr.
specifier|const
name|CFGBlock
operator|*
name|Block
block|;
comment|// The CFGBlock index of the CallExpr.
name|unsigned
name|Index
block|;
name|public
operator|:
name|GRCallEnterNodeBuilder
argument_list|(
argument|GRCoreEngine&eng
argument_list|,
argument|const ExplodedNode *pred
argument_list|,
argument|const Stmt *s
argument_list|,
argument|const FunctionDecl *fd
argument_list|,
argument|const CFGBlock *blk
argument_list|,
argument|unsigned idx
argument_list|)
operator|:
name|Eng
argument_list|(
name|eng
argument_list|)
block|,
name|Pred
argument_list|(
name|pred
argument_list|)
block|,
name|CE
argument_list|(
name|s
argument_list|)
block|,
name|FD
argument_list|(
name|fd
argument_list|)
block|,
name|Block
argument_list|(
name|blk
argument_list|)
block|,
name|Index
argument_list|(
argument|idx
argument_list|)
block|{}
specifier|const
name|GRState
operator|*
name|getState
argument_list|()
specifier|const
block|{
return|return
name|Pred
operator|->
name|getState
argument_list|()
return|;
block|}
specifier|const
name|LocationContext
operator|*
name|getLocationContext
argument_list|()
specifier|const
block|{
return|return
name|Pred
operator|->
name|getLocationContext
argument_list|()
return|;
block|}
specifier|const
name|Stmt
operator|*
name|getCallExpr
argument_list|()
specifier|const
block|{
return|return
name|CE
return|;
block|}
specifier|const
name|FunctionDecl
operator|*
name|getCallee
argument_list|()
specifier|const
block|{
return|return
name|FD
return|;
block|}
specifier|const
name|CFGBlock
operator|*
name|getBlock
argument_list|()
specifier|const
block|{
return|return
name|Block
return|;
block|}
name|unsigned
name|getIndex
argument_list|()
specifier|const
block|{
return|return
name|Index
return|;
block|}
name|void
name|GenerateNode
argument_list|(
specifier|const
name|GRState
operator|*
name|state
argument_list|,
specifier|const
name|LocationContext
operator|*
name|LocCtx
argument_list|)
block|; }
block|;
name|class
name|GRCallExitNodeBuilder
block|{
name|GRCoreEngine
operator|&
name|Eng
block|;
specifier|const
name|ExplodedNode
operator|*
name|Pred
block|;
name|public
operator|:
name|GRCallExitNodeBuilder
argument_list|(
name|GRCoreEngine
operator|&
name|eng
argument_list|,
specifier|const
name|ExplodedNode
operator|*
name|pred
argument_list|)
operator|:
name|Eng
argument_list|(
name|eng
argument_list|)
block|,
name|Pred
argument_list|(
argument|pred
argument_list|)
block|{}
specifier|const
name|ExplodedNode
operator|*
name|getPredecessor
argument_list|()
specifier|const
block|{
return|return
name|Pred
return|;
block|}
specifier|const
name|GRState
operator|*
name|getState
argument_list|()
specifier|const
block|{
return|return
name|Pred
operator|->
name|getState
argument_list|()
return|;
block|}
name|void
name|GenerateNode
argument_list|(
specifier|const
name|GRState
operator|*
name|state
argument_list|)
block|; }
block|;  }
end_decl_stmt

begin_comment
comment|// end clang namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

