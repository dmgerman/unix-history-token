begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- StackFrameList.h ----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_StackFrameList_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_StackFrameList_h_
end_define

begin_comment
comment|// C Includes
end_comment

begin_comment
comment|// C++ Includes
end_comment

begin_include
include|#
directive|include
file|<memory>
end_include

begin_include
include|#
directive|include
file|<mutex>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_comment
comment|// Project includes
end_comment

begin_include
include|#
directive|include
file|"lldb/Target/StackFrame.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|StackFrameList
block|{
name|public
label|:
comment|//------------------------------------------------------------------
comment|// Constructors and Destructors
comment|//------------------------------------------------------------------
name|StackFrameList
argument_list|(
argument|Thread&thread
argument_list|,
argument|const lldb::StackFrameListSP&prev_frames_sp
argument_list|,
argument|bool show_inline_frames
argument_list|)
empty_stmt|;
operator|~
name|StackFrameList
argument_list|()
expr_stmt|;
name|uint32_t
name|GetNumFrames
parameter_list|(
name|bool
name|can_create
init|=
name|true
parameter_list|)
function_decl|;
name|lldb
operator|::
name|StackFrameSP
name|GetFrameAtIndex
argument_list|(
argument|uint32_t idx
argument_list|)
expr_stmt|;
name|lldb
operator|::
name|StackFrameSP
name|GetFrameWithConcreteFrameIndex
argument_list|(
argument|uint32_t unwind_idx
argument_list|)
expr_stmt|;
name|lldb
operator|::
name|StackFrameSP
name|GetFrameWithStackID
argument_list|(
specifier|const
name|StackID
operator|&
name|stack_id
argument_list|)
expr_stmt|;
comment|// Mark a stack frame as the current frame
name|uint32_t
name|SetSelectedFrame
argument_list|(
name|lldb_private
operator|::
name|StackFrame
operator|*
name|frame
argument_list|)
decl_stmt|;
name|uint32_t
name|GetSelectedFrameIndex
argument_list|()
specifier|const
expr_stmt|;
comment|// Mark a stack frame as the current frame using the frame index
name|bool
name|SetSelectedFrameByIndex
parameter_list|(
name|uint32_t
name|idx
parameter_list|)
function_decl|;
name|uint32_t
name|GetVisibleStackFrameIndex
parameter_list|(
name|uint32_t
name|idx
parameter_list|)
block|{
if|if
condition|(
name|m_current_inlined_depth
operator|<
name|UINT32_MAX
condition|)
return|return
name|idx
operator|-
name|m_current_inlined_depth
return|;
else|else
return|return
name|idx
return|;
block|}
name|void
name|CalculateCurrentInlinedDepth
parameter_list|()
function_decl|;
name|void
name|SetDefaultFileAndLineToSelectedFrame
parameter_list|()
function_decl|;
name|void
name|Clear
parameter_list|()
function_decl|;
name|void
name|InvalidateFrames
parameter_list|(
name|uint32_t
name|start_idx
parameter_list|)
function_decl|;
name|void
name|Dump
parameter_list|(
name|Stream
modifier|*
name|s
parameter_list|)
function_decl|;
name|lldb
operator|::
name|StackFrameSP
name|GetStackFrameSPForStackFramePtr
argument_list|(
name|StackFrame
operator|*
name|stack_frame_ptr
argument_list|)
expr_stmt|;
name|size_t
name|GetStatus
parameter_list|(
name|Stream
modifier|&
name|strm
parameter_list|,
name|uint32_t
name|first_frame
parameter_list|,
name|uint32_t
name|num_frames
parameter_list|,
name|bool
name|show_frame_info
parameter_list|,
name|uint32_t
name|num_frames_with_source
parameter_list|,
name|bool
name|show_unique
init|=
name|false
parameter_list|,
specifier|const
name|char
modifier|*
name|frame_marker
init|=
name|nullptr
parameter_list|)
function_decl|;
name|protected
label|:
name|friend
name|class
name|Thread
decl_stmt|;
name|bool
name|SetFrameAtIndex
argument_list|(
name|uint32_t
name|idx
argument_list|,
name|lldb
operator|::
name|StackFrameSP
operator|&
name|frame_sp
argument_list|)
decl_stmt|;
specifier|static
name|void
name|Merge
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|StackFrameList
operator|>
operator|&
name|curr_ap
argument_list|,
name|lldb
operator|::
name|StackFrameListSP
operator|&
name|prev_sp
argument_list|)
decl_stmt|;
name|void
name|GetFramesUpTo
parameter_list|(
name|uint32_t
name|end_idx
parameter_list|)
function_decl|;
name|bool
name|GetAllFramesFetched
parameter_list|()
block|{
return|return
name|m_concrete_frames_fetched
operator|==
name|UINT32_MAX
return|;
block|}
name|void
name|SetAllFramesFetched
parameter_list|()
block|{
name|m_concrete_frames_fetched
operator|=
name|UINT32_MAX
expr_stmt|;
block|}
name|bool
name|DecrementCurrentInlinedDepth
parameter_list|()
function_decl|;
name|void
name|ResetCurrentInlinedDepth
parameter_list|()
function_decl|;
name|uint32_t
name|GetCurrentInlinedDepth
parameter_list|()
function_decl|;
name|void
name|SetCurrentInlinedDepth
parameter_list|(
name|uint32_t
name|new_depth
parameter_list|)
function_decl|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|lldb
operator|::
name|StackFrameSP
operator|>
name|collection
expr_stmt|;
typedef|typedef
name|collection
operator|::
name|iterator
name|iterator
expr_stmt|;
typedef|typedef
name|collection
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
name|Thread
modifier|&
name|m_thread
decl_stmt|;
name|lldb
operator|::
name|StackFrameListSP
name|m_prev_frames_sp
expr_stmt|;
name|mutable
name|std
operator|::
name|recursive_mutex
name|m_mutex
expr_stmt|;
name|collection
name|m_frames
decl_stmt|;
name|uint32_t
name|m_selected_frame_idx
decl_stmt|;
name|uint32_t
name|m_concrete_frames_fetched
decl_stmt|;
name|uint32_t
name|m_current_inlined_depth
decl_stmt|;
name|lldb
operator|::
name|addr_t
name|m_current_inlined_pc
expr_stmt|;
name|bool
name|m_show_inlined_frames
decl_stmt|;
name|private
label|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|StackFrameList
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_StackFrameList_h_
end_comment

end_unit

