begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- Language.h ---------------------------------------------------*- C++
end_comment

begin_comment
comment|//-*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_Language_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_Language_h_
end_define

begin_comment
comment|// C Includes
end_comment

begin_comment
comment|// C++ Includes
end_comment

begin_include
include|#
directive|include
file|<functional>
end_include

begin_include
include|#
directive|include
file|<memory>
end_include

begin_include
include|#
directive|include
file|<set>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_comment
comment|// Project includes
end_comment

begin_include
include|#
directive|include
file|"lldb/Core/PluginInterface.h"
end_include

begin_include
include|#
directive|include
file|"lldb/DataFormatters/DumpValueObjectOptions.h"
end_include

begin_include
include|#
directive|include
file|"lldb/DataFormatters/FormatClasses.h"
end_include

begin_include
include|#
directive|include
file|"lldb/DataFormatters/StringPrinter.h"
end_include

begin_include
include|#
directive|include
file|"lldb/lldb-private.h"
end_include

begin_include
include|#
directive|include
file|"lldb/lldb-public.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|Language
range|:
name|public
name|PluginInterface
block|{
name|public
operator|:
name|class
name|TypeScavenger
block|{
name|public
operator|:
name|class
name|Result
block|{
name|public
operator|:
name|virtual
name|bool
name|IsValid
argument_list|()
operator|=
literal|0
block|;
name|virtual
name|bool
name|DumpToStream
argument_list|(
argument|Stream&stream
argument_list|,
argument|bool print_help_if_available
argument_list|)
operator|=
literal|0
block|;
name|virtual
operator|~
name|Result
argument_list|()
operator|=
expr|default
block|;     }
block|;
typedef|typedef
name|std
operator|::
name|set
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|Result
operator|>>
name|ResultSet
expr_stmt|;
name|virtual
operator|~
name|TypeScavenger
argument_list|()
operator|=
block|default
block|;
name|size_t
name|Find
argument_list|(
argument|ExecutionContextScope *exe_scope
argument_list|,
argument|const char *key
argument_list|,
argument|ResultSet&results
argument_list|,
argument|bool append = true
argument_list|)
block|;
name|protected
operator|:
name|TypeScavenger
argument_list|()
operator|=
expr|default
block|;
name|virtual
name|bool
name|Find_Impl
argument_list|(
name|ExecutionContextScope
operator|*
name|exe_scope
argument_list|,
specifier|const
name|char
operator|*
name|key
argument_list|,
name|ResultSet
operator|&
name|results
argument_list|)
operator|=
literal|0
block|;   }
decl_stmt|;
name|class
name|ImageListTypeScavenger
range|:
name|public
name|TypeScavenger
block|{
name|class
name|Result
operator|:
name|public
name|Language
operator|::
name|TypeScavenger
operator|::
name|Result
block|{
name|public
operator|:
name|Result
argument_list|(
argument|CompilerType type
argument_list|)
operator|:
name|Language
operator|::
name|TypeScavenger
operator|::
name|Result
argument_list|()
block|,
name|m_compiler_type
argument_list|(
argument|type
argument_list|)
block|{}
name|bool
name|IsValid
argument_list|()
name|override
block|{
return|return
name|m_compiler_type
operator|.
name|IsValid
argument_list|()
return|;
block|}
name|bool
name|DumpToStream
argument_list|(
argument|Stream&stream
argument_list|,
argument|bool print_help_if_available
argument_list|)
name|override
block|{
if|if
condition|(
name|IsValid
argument_list|()
condition|)
block|{
name|m_compiler_type
operator|.
name|DumpTypeDescription
argument_list|(
operator|&
name|stream
argument_list|)
expr_stmt|;
name|stream
operator|.
name|EOL
argument_list|()
expr_stmt|;
return|return
name|true
return|;
block|}
return|return
name|false
return|;
block|}
operator|~
name|Result
argument_list|()
name|override
operator|=
expr|default
block|;
name|private
operator|:
name|CompilerType
name|m_compiler_type
block|;     }
block|;
name|protected
operator|:
name|ImageListTypeScavenger
argument_list|()
operator|=
expr|default
block|;
operator|~
name|ImageListTypeScavenger
argument_list|()
name|override
operator|=
expr|default
block|;
comment|// is this type something we should accept? it's usually going to be a
comment|// filter by language + maybe some sugar tweaking
comment|// returning an empty type means rejecting this candidate entirely;
comment|// any other result will be accepted as a valid match
name|virtual
name|CompilerType
name|AdjustForInclusion
argument_list|(
name|CompilerType
operator|&
name|candidate
argument_list|)
operator|=
literal|0
block|;
name|bool
name|Find_Impl
argument_list|(
argument|ExecutionContextScope *exe_scope
argument_list|,
argument|const char *key
argument_list|,
argument|ResultSet&results
argument_list|)
name|override
block|;   }
decl_stmt|;
name|template
operator|<
name|typename
operator|...
name|ScavengerTypes
operator|>
name|class
name|EitherTypeScavenger
operator|:
name|public
name|TypeScavenger
block|{
name|public
operator|:
name|EitherTypeScavenger
argument_list|()
operator|:
name|TypeScavenger
argument_list|()
block|,
name|m_scavengers
argument_list|()
block|{
for|for
control|(
name|std
operator|::
name|shared_ptr
operator|<
name|TypeScavenger
operator|>
name|scavenger
operator|:
block|{
name|std
operator|::
name|shared_ptr
operator|<
name|TypeScavenger
operator|>
operator|(
name|new
name|ScavengerTypes
argument_list|()
operator|)
operator|...
block|}
control|)
block|{
if|if
condition|(
name|scavenger
condition|)
name|m_scavengers
operator|.
name|push_back
argument_list|(
name|scavenger
argument_list|)
expr_stmt|;
block|}
block|}
name|protected
operator|:
name|bool
name|Find_Impl
argument_list|(
argument|ExecutionContextScope *exe_scope
argument_list|,
argument|const char *key
argument_list|,
argument|ResultSet&results
argument_list|)
name|override
block|{
specifier|const
name|bool
name|append
operator|=
name|false
block|;
for|for
control|(
name|auto
operator|&
name|scavenger
operator|:
name|m_scavengers
control|)
block|{
if|if
condition|(
name|scavenger
operator|&&
name|scavenger
operator|->
name|Find
argument_list|(
name|exe_scope
argument_list|,
name|key
argument_list|,
name|results
argument_list|,
name|append
argument_list|)
condition|)
return|return
name|true
return|;
block|}
return|return
name|false
return|;
block|}
name|private
operator|:
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|shared_ptr
operator|<
name|TypeScavenger
operator|>>
name|m_scavengers
block|;   }
expr_stmt|;
name|template
operator|<
name|typename
operator|...
name|ScavengerTypes
operator|>
name|class
name|UnionTypeScavenger
operator|:
name|public
name|TypeScavenger
block|{
name|public
operator|:
name|UnionTypeScavenger
argument_list|()
operator|:
name|TypeScavenger
argument_list|()
block|,
name|m_scavengers
argument_list|()
block|{
for|for
control|(
name|std
operator|::
name|shared_ptr
operator|<
name|TypeScavenger
operator|>
name|scavenger
operator|:
block|{
name|std
operator|::
name|shared_ptr
operator|<
name|TypeScavenger
operator|>
operator|(
name|new
name|ScavengerTypes
argument_list|()
operator|)
operator|...
block|}
control|)
block|{
if|if
condition|(
name|scavenger
condition|)
name|m_scavengers
operator|.
name|push_back
argument_list|(
name|scavenger
argument_list|)
expr_stmt|;
block|}
block|}
name|protected
operator|:
name|bool
name|Find_Impl
argument_list|(
argument|ExecutionContextScope *exe_scope
argument_list|,
argument|const char *key
argument_list|,
argument|ResultSet&results
argument_list|)
name|override
block|{
specifier|const
name|bool
name|append
operator|=
name|true
block|;
name|bool
name|success
operator|=
name|false
block|;
for|for
control|(
name|auto
operator|&
name|scavenger
operator|:
name|m_scavengers
control|)
block|{
if|if
condition|(
name|scavenger
condition|)
name|success
operator|=
name|scavenger
operator|->
name|Find
argument_list|(
name|exe_scope
argument_list|,
name|key
argument_list|,
name|results
argument_list|,
name|append
argument_list|)
operator|||
name|success
expr_stmt|;
block|}
return|return
name|success
return|;
block|}
name|private
operator|:
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|shared_ptr
operator|<
name|TypeScavenger
operator|>>
name|m_scavengers
block|;   }
expr_stmt|;
name|enum
name|class
name|FunctionNameRepresentation
block|{
name|eName
operator|,
name|eNameWithArgs
operator|,
name|eNameWithNoArgs
block|}
empty_stmt|;
operator|~
name|Language
argument_list|()
name|override
expr_stmt|;
specifier|static
name|Language
modifier|*
name|FindPlugin
argument_list|(
name|lldb
operator|::
name|LanguageType
name|language
argument_list|)
decl_stmt|;
comment|// return false from callback to stop iterating
specifier|static
name|void
name|ForEach
argument_list|(
name|std
operator|::
name|function
operator|<
name|bool
argument_list|(
name|Language
operator|*
argument_list|)
operator|>
name|callback
argument_list|)
decl_stmt|;
name|virtual
name|lldb
operator|::
name|LanguageType
name|GetLanguageType
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|bool
name|IsTopLevelFunction
parameter_list|(
name|Function
modifier|&
name|function
parameter_list|)
function_decl|;
name|virtual
name|lldb
operator|::
name|TypeCategoryImplSP
name|GetFormatters
argument_list|()
expr_stmt|;
name|virtual
name|HardcodedFormatters
operator|::
name|HardcodedFormatFinder
name|GetHardcodedFormats
argument_list|()
expr_stmt|;
name|virtual
name|HardcodedFormatters
operator|::
name|HardcodedSummaryFinder
name|GetHardcodedSummaries
argument_list|()
expr_stmt|;
name|virtual
name|HardcodedFormatters
operator|::
name|HardcodedSyntheticFinder
name|GetHardcodedSynthetics
argument_list|()
expr_stmt|;
name|virtual
name|HardcodedFormatters
operator|::
name|HardcodedValidatorFinder
name|GetHardcodedValidators
argument_list|()
expr_stmt|;
name|virtual
name|std
operator|::
name|vector
operator|<
name|ConstString
operator|>
name|GetPossibleFormattersMatches
argument_list|(
argument|ValueObject&valobj
argument_list|,
argument|lldb::DynamicValueType use_dynamic
argument_list|)
expr_stmt|;
name|virtual
name|lldb_private
operator|::
name|formatters
operator|::
name|StringPrinter
operator|::
name|EscapingHelper
name|GetStringPrinterEscapingHelper
argument_list|(
name|lldb_private
operator|::
name|formatters
operator|::
name|StringPrinter
operator|::
name|GetPrintableElementType
argument_list|)
expr_stmt|;
name|virtual
name|std
operator|::
name|unique_ptr
operator|<
name|TypeScavenger
operator|>
name|GetTypeScavenger
argument_list|()
expr_stmt|;
name|virtual
specifier|const
name|char
modifier|*
name|GetLanguageSpecificTypeLookupHelp
parameter_list|()
function_decl|;
comment|// if an individual data formatter can apply to several types and cross a
comment|// language boundary
comment|// it makes sense for individual languages to want to customize the printing
comment|// of values of that
comment|// type by appending proper prefix/suffix information in language-specific
comment|// ways
name|virtual
name|bool
name|GetFormatterPrefixSuffix
argument_list|(
name|ValueObject
operator|&
name|valobj
argument_list|,
name|ConstString
name|type_hint
argument_list|,
name|std
operator|::
name|string
operator|&
name|prefix
argument_list|,
name|std
operator|::
name|string
operator|&
name|suffix
argument_list|)
decl_stmt|;
comment|// if a language has a custom format for printing variable declarations that
comment|// it wants LLDB to honor
comment|// it should return an appropriate closure here
name|virtual
name|DumpValueObjectOptions
operator|::
name|DeclPrintingHelper
name|GetDeclPrintingHelper
argument_list|()
expr_stmt|;
name|virtual
name|LazyBool
name|IsLogicalTrue
parameter_list|(
name|ValueObject
modifier|&
name|valobj
parameter_list|,
name|Error
modifier|&
name|error
parameter_list|)
function_decl|;
comment|// for a ValueObject of some "reference type", if the value points to the
comment|// nil/null object, this method returns true
name|virtual
name|bool
name|IsNilReference
parameter_list|(
name|ValueObject
modifier|&
name|valobj
parameter_list|)
function_decl|;
comment|// for a ValueObject of some "reference type", if the language provides a
comment|// technique
comment|// to decide whether the reference has ever been assigned to some object, this
comment|// method
comment|// will return true if such detection is possible, and if the reference has
comment|// never been assigned
name|virtual
name|bool
name|IsUninitializedReference
parameter_list|(
name|ValueObject
modifier|&
name|valobj
parameter_list|)
function_decl|;
name|virtual
name|bool
name|GetFunctionDisplayName
parameter_list|(
specifier|const
name|SymbolContext
modifier|*
name|sc
parameter_list|,
specifier|const
name|ExecutionContext
modifier|*
name|exe_ctx
parameter_list|,
name|FunctionNameRepresentation
name|representation
parameter_list|,
name|Stream
modifier|&
name|s
parameter_list|)
function_decl|;
name|virtual
name|void
name|GetExceptionResolverDescription
parameter_list|(
name|bool
name|catch_on
parameter_list|,
name|bool
name|throw_on
parameter_list|,
name|Stream
modifier|&
name|s
parameter_list|)
function_decl|;
specifier|static
name|void
name|GetDefaultExceptionResolverDescription
parameter_list|(
name|bool
name|catch_on
parameter_list|,
name|bool
name|throw_on
parameter_list|,
name|Stream
modifier|&
name|s
parameter_list|)
function_decl|;
comment|// These are accessors for general information about the Languages lldb knows
comment|// about:
specifier|static
name|lldb
operator|::
name|LanguageType
name|GetLanguageTypeFromString
argument_list|(
specifier|const
name|char
operator|*
name|string
argument_list|)
operator|=
name|delete
expr_stmt|;
specifier|static
name|lldb
operator|::
name|LanguageType
name|GetLanguageTypeFromString
argument_list|(
argument|llvm::StringRef string
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|char
modifier|*
name|GetNameForLanguageType
argument_list|(
name|lldb
operator|::
name|LanguageType
name|language
argument_list|)
decl_stmt|;
specifier|static
name|void
name|PrintAllLanguages
parameter_list|(
name|Stream
modifier|&
name|s
parameter_list|,
specifier|const
name|char
modifier|*
name|prefix
parameter_list|,
specifier|const
name|char
modifier|*
name|suffix
parameter_list|)
function_decl|;
comment|// return false from callback to stop iterating
specifier|static
name|void
name|ForAllLanguages
argument_list|(
name|std
operator|::
name|function
operator|<
name|bool
argument_list|(
name|lldb
operator|::
name|LanguageType
argument_list|)
operator|>
name|callback
argument_list|)
decl_stmt|;
specifier|static
name|bool
name|LanguageIsCPlusPlus
argument_list|(
name|lldb
operator|::
name|LanguageType
name|language
argument_list|)
decl_stmt|;
specifier|static
name|bool
name|LanguageIsObjC
argument_list|(
name|lldb
operator|::
name|LanguageType
name|language
argument_list|)
decl_stmt|;
specifier|static
name|bool
name|LanguageIsC
argument_list|(
name|lldb
operator|::
name|LanguageType
name|language
argument_list|)
decl_stmt|;
specifier|static
name|bool
name|LanguageIsPascal
argument_list|(
name|lldb
operator|::
name|LanguageType
name|language
argument_list|)
decl_stmt|;
comment|// return the primary language, so if LanguageIsC(l), return eLanguageTypeC,
comment|// etc.
specifier|static
name|lldb
operator|::
name|LanguageType
name|GetPrimaryLanguage
argument_list|(
argument|lldb::LanguageType language
argument_list|)
expr_stmt|;
specifier|static
name|void
name|GetLanguagesSupportingTypeSystems
argument_list|(
name|std
operator|::
name|set
operator|<
name|lldb
operator|::
name|LanguageType
operator|>
operator|&
name|languages
argument_list|,
name|std
operator|::
name|set
operator|<
name|lldb
operator|::
name|LanguageType
operator|>
operator|&
name|languages_for_expressions
argument_list|)
decl_stmt|;
specifier|static
name|void
name|GetLanguagesSupportingREPLs
argument_list|(
name|std
operator|::
name|set
operator|<
name|lldb
operator|::
name|LanguageType
operator|>
operator|&
name|languages
argument_list|)
decl_stmt|;
name|protected
label|:
comment|//------------------------------------------------------------------
comment|// Classes that inherit from Language can see and modify these
comment|//------------------------------------------------------------------
name|Language
argument_list|()
expr_stmt|;
name|private
label|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|Language
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_Language_h_
end_comment

end_unit

