begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- dwarf.h -------------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|DebugBase_dwarf_h_
end_ifndef

begin_define
define|#
directive|define
name|DebugBase_dwarf_h_
end_define

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_comment
comment|// Get the DWARF constant definitions from llvm
end_comment

begin_include
include|#
directive|include
file|"llvm/Support/Dwarf.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/RangeMap.h"
end_include

begin_comment
comment|// and stuff them in our default namespace
end_comment

begin_expr_stmt
name|using
name|namespace
name|llvm
operator|::
name|dwarf
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|uint32_t
name|dw_uleb128_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|int32_t
name|dw_sleb128_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint16_t
name|dw_attr_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint16_t
name|dw_form_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint16_t
name|dw_tag_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint64_t
name|dw_addr_t
typedef|;
end_typedef

begin_comment
comment|// Dwarf address define that must be big enough for any addresses in the compile units that get parsed
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|DWARFUTILS_DWARF64
end_ifdef

begin_define
define|#
directive|define
name|DWARF_REF_ADDR_SIZE
value|8
end_define

begin_typedef
typedef|typedef
name|uint64_t
name|dw_offset_t
typedef|;
end_typedef

begin_comment
comment|// Dwarf Debug Information Entry offset for any offset into the file
end_comment

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|DWARF_REF_ADDR_SIZE
value|4
end_define

begin_typedef
typedef|typedef
name|uint32_t
name|dw_offset_t
typedef|;
end_typedef

begin_comment
comment|// Dwarf Debug Information Entry offset for any offset into the file
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Constants */
end_comment

begin_define
define|#
directive|define
name|DW_INVALID_OFFSET
value|(~(dw_offset_t)0)
end_define

begin_define
define|#
directive|define
name|DW_INVALID_INDEX
value|0xFFFFFFFFul
end_define

begin_comment
comment|// #define DW_ADDR_none 0x0
end_comment

begin_define
define|#
directive|define
name|DW_EH_PE_MASK_ENCODING
value|0x0F
end_define

begin_comment
comment|//// The following are used only internally within lldb - don't
end_comment

begin_comment
comment|//// document them in the llvm Dwarf.h header file, we won't see
end_comment

begin_comment
comment|//// them in executable files anywhere.
end_comment

begin_comment
comment|//// These constants fit between DW_OP_lo_user (0xe0) and DW_OP_hi_user (0xff).
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//#define DW_OP_APPLE_array_ref     0xEE // first pops index, then pops array; pushes array[index]
end_comment

begin_comment
comment|//#define DW_OP_APPLE_extern        0xEF // ULEB128 index of external object (i.e., an entity from the program that was used in the expression)
end_comment

begin_define
define|#
directive|define
name|DW_OP_APPLE_uninit
value|0xF0
end_define

begin_comment
comment|// This is actually generated by some apple compilers in locations lists
end_comment

begin_comment
comment|//#define DW_OP_APPLE_assign        0xF1 // pops value off and assigns it to second item on stack (2nd item must have assignable context)
end_comment

begin_comment
comment|//#define DW_OP_APPLE_address_of    0xF2 // gets the address of the top stack item (top item must be a variable, or have value_type that is an address already)
end_comment

begin_comment
comment|//#define DW_OP_APPLE_value_of      0xF3 // pops the value off the stack and pushes the value of that object (top item must be a variable, or expression local)
end_comment

begin_comment
comment|//#define DW_OP_APPLE_deref_type    0xF4 // gets the address of the top stack item (top item must be a variable, or a clang type)
end_comment

begin_comment
comment|//#define DW_OP_APPLE_expr_local    0xF5 // ULEB128 expression local index
end_comment

begin_comment
comment|//#define DW_OP_APPLE_constf        0xF6 // 1 byte float size, followed by constant float data
end_comment

begin_comment
comment|//#define DW_OP_APPLE_scalar_cast   0xF7 // Cast top of stack to 2nd in stack's type leaving all items in place
end_comment

begin_comment
comment|//#define DW_OP_APPLE_clang_cast    0xF8 // pointer size clang::Type * off the stack and cast top stack item to this type
end_comment

begin_comment
comment|//#define DW_OP_APPLE_clear         0xFE // clears the entire expression stack, ok if the stack is empty
end_comment

begin_comment
comment|//#define DW_OP_APPLE_error         0xFF // Stops expression evaluation and returns an error (no args)
end_comment

begin_typedef
typedef|typedef
name|lldb_private
operator|::
name|RangeArray
operator|<
name|dw_addr_t
operator|,
name|dw_addr_t
operator|,
literal|2
operator|>
name|DWARFRangeList
expr_stmt|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// DebugBase_dwarf_h_
end_comment

end_unit

