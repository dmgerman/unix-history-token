begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- StructuredData.h ----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_StructuredData_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_StructuredData_h_
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Utility/ConstString.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Utility/FileSpec.h"
end_include

begin_comment
comment|// for FileSpec
end_comment

begin_include
include|#
directive|include
file|"lldb/lldb-enumerations.h"
end_include

begin_comment
comment|// for StructuredDataType
end_comment

begin_include
include|#
directive|include
file|<functional>
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_include
include|#
directive|include
file|<memory>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<type_traits>
end_include

begin_comment
comment|// for move
end_comment

begin_include
include|#
directive|include
file|<utility>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_include
include|#
directive|include
file|<assert.h>
end_include

begin_comment
comment|// for assert
end_comment

begin_include
include|#
directive|include
file|<stddef.h>
end_include

begin_comment
comment|// for size_t
end_comment

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_comment
comment|// for uint64_t
end_comment

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|Status
decl_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|Stream
decl_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|namespace
name|lldb_private
block|{
comment|//----------------------------------------------------------------------
comment|/// @class StructuredData StructuredData.h "lldb/Core/StructuredData.h"
comment|/// @brief A class which can hold structured data
comment|///
comment|/// The StructuredData class is designed to hold the data from a JSON
comment|/// or plist style file -- a serialized data structure with dictionaries
comment|/// (maps, hashes), arrays, and concrete values like integers, floating
comment|/// point numbers, strings, booleans.
comment|///
comment|/// StructuredData does not presuppose any knowledge of the schema for
comment|/// the data it is holding; it can parse JSON data, for instance, and
comment|/// other parts of lldb can iterate through the parsed data set to find
comment|/// keys and values that may be present.
comment|//----------------------------------------------------------------------
name|class
name|StructuredData
block|{
name|public
label|:
name|class
name|Object
decl_stmt|;
name|class
name|Array
decl_stmt|;
name|class
name|Integer
decl_stmt|;
name|class
name|Float
decl_stmt|;
name|class
name|Boolean
decl_stmt|;
name|class
name|String
decl_stmt|;
name|class
name|Dictionary
decl_stmt|;
name|class
name|Generic
decl_stmt|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|Object
operator|>
name|ObjectSP
expr_stmt|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|Array
operator|>
name|ArraySP
expr_stmt|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|Integer
operator|>
name|IntegerSP
expr_stmt|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|Float
operator|>
name|FloatSP
expr_stmt|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|Boolean
operator|>
name|BooleanSP
expr_stmt|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|String
operator|>
name|StringSP
expr_stmt|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|Dictionary
operator|>
name|DictionarySP
expr_stmt|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|Generic
operator|>
name|GenericSP
expr_stmt|;
name|class
name|Object
range|:
name|public
name|std
operator|::
name|enable_shared_from_this
operator|<
name|Object
operator|>
block|{
name|public
operator|:
name|Object
argument_list|(
argument|lldb::StructuredDataType t = lldb::eStructuredDataTypeInvalid
argument_list|)
operator|:
name|m_type
argument_list|(
argument|t
argument_list|)
block|{}
name|virtual
operator|~
name|Object
argument_list|()
operator|=
expr|default
block|;
name|virtual
name|bool
name|IsValid
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|void
name|Clear
argument_list|()
block|{
name|m_type
operator|=
name|lldb
operator|::
name|eStructuredDataTypeInvalid
block|; }
name|lldb
operator|::
name|StructuredDataType
name|GetType
argument_list|()
specifier|const
block|{
return|return
name|m_type
return|;
block|}
name|void
name|SetType
argument_list|(
argument|lldb::StructuredDataType t
argument_list|)
block|{
name|m_type
operator|=
name|t
block|; }
name|Array
operator|*
name|GetAsArray
argument_list|()
block|{
return|return
operator|(
operator|(
name|m_type
operator|==
name|lldb
operator|::
name|eStructuredDataTypeArray
operator|)
operator|?
name|static_cast
operator|<
name|Array
operator|*
operator|>
operator|(
name|this
operator|)
operator|:
name|nullptr
operator|)
return|;
block|}
name|Dictionary
operator|*
name|GetAsDictionary
argument_list|()
block|{
return|return
operator|(
operator|(
name|m_type
operator|==
name|lldb
operator|::
name|eStructuredDataTypeDictionary
operator|)
condition|?
name|static_cast
operator|<
name|Dictionary
operator|*
operator|>
operator|(
name|this
operator|)
else|:
name|nullptr
operator|)
return|;
block|}
name|Integer
operator|*
name|GetAsInteger
argument_list|()
block|{
return|return
operator|(
operator|(
name|m_type
operator|==
name|lldb
operator|::
name|eStructuredDataTypeInteger
operator|)
condition|?
name|static_cast
operator|<
name|Integer
operator|*
operator|>
operator|(
name|this
operator|)
else|:
name|nullptr
operator|)
return|;
block|}
name|uint64_t
name|GetIntegerValue
argument_list|(
argument|uint64_t fail_value =
literal|0
argument_list|)
block|{
name|Integer
operator|*
name|integer
operator|=
name|GetAsInteger
argument_list|()
block|;
return|return
operator|(
operator|(
name|integer
operator|!=
name|nullptr
operator|)
condition|?
name|integer
operator|->
name|GetValue
argument_list|()
else|:
name|fail_value
operator|)
return|;
block|}
name|Float
operator|*
name|GetAsFloat
argument_list|()
block|{
return|return
operator|(
operator|(
name|m_type
operator|==
name|lldb
operator|::
name|eStructuredDataTypeFloat
operator|)
condition|?
name|static_cast
operator|<
name|Float
operator|*
operator|>
operator|(
name|this
operator|)
else|:
name|nullptr
operator|)
return|;
block|}
name|double
name|GetFloatValue
argument_list|(
argument|double fail_value =
literal|0.0
argument_list|)
block|{
name|Float
operator|*
name|f
operator|=
name|GetAsFloat
argument_list|()
block|;
return|return
operator|(
operator|(
name|f
operator|!=
name|nullptr
operator|)
condition|?
name|f
operator|->
name|GetValue
argument_list|()
else|:
name|fail_value
operator|)
return|;
block|}
name|Boolean
operator|*
name|GetAsBoolean
argument_list|()
block|{
return|return
operator|(
operator|(
name|m_type
operator|==
name|lldb
operator|::
name|eStructuredDataTypeBoolean
operator|)
condition|?
name|static_cast
operator|<
name|Boolean
operator|*
operator|>
operator|(
name|this
operator|)
else|:
name|nullptr
operator|)
return|;
block|}
name|bool
name|GetBooleanValue
argument_list|(
argument|bool fail_value = false
argument_list|)
block|{
name|Boolean
operator|*
name|b
operator|=
name|GetAsBoolean
argument_list|()
block|;
return|return
operator|(
operator|(
name|b
operator|!=
name|nullptr
operator|)
condition|?
name|b
operator|->
name|GetValue
argument_list|()
else|:
name|fail_value
operator|)
return|;
block|}
name|String
operator|*
name|GetAsString
argument_list|()
block|{
return|return
operator|(
operator|(
name|m_type
operator|==
name|lldb
operator|::
name|eStructuredDataTypeString
operator|)
condition|?
name|static_cast
operator|<
name|String
operator|*
operator|>
operator|(
name|this
operator|)
else|:
name|nullptr
operator|)
return|;
block|}
name|llvm
operator|::
name|StringRef
name|GetStringValue
argument_list|(
argument|const char *fail_value = nullptr
argument_list|)
block|{
name|String
operator|*
name|s
operator|=
name|GetAsString
argument_list|()
block|;
if|if
condition|(
name|s
condition|)
return|return
name|s
operator|->
name|GetValue
argument_list|()
return|;
return|return
name|fail_value
return|;
block|}
name|Generic
modifier|*
name|GetAsGeneric
parameter_list|()
block|{
return|return
operator|(
operator|(
name|m_type
operator|==
name|lldb
operator|::
name|eStructuredDataTypeGeneric
operator|)
condition|?
name|static_cast
operator|<
name|Generic
operator|*
operator|>
operator|(
name|this
operator|)
else|:
name|nullptr
operator|)
return|;
block|}
name|ObjectSP
name|GetObjectForDotSeparatedPath
argument_list|(
name|llvm
operator|::
name|StringRef
name|path
argument_list|)
decl_stmt|;
name|void
name|DumpToStdout
argument_list|(
name|bool
name|pretty_print
operator|=
name|true
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|void
name|Dump
argument_list|(
name|Stream
operator|&
name|s
argument_list|,
name|bool
name|pretty_print
operator|=
name|true
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|private
label|:
name|lldb
operator|::
name|StructuredDataType
name|m_type
expr_stmt|;
block|}
empty_stmt|;
name|class
name|Array
range|:
name|public
name|Object
block|{
name|public
operator|:
name|Array
argument_list|()
operator|:
name|Object
argument_list|(
argument|lldb::eStructuredDataTypeArray
argument_list|)
block|{}
operator|~
name|Array
argument_list|()
name|override
operator|=
expr|default
block|;
name|bool
name|ForEach
argument_list|(
argument|std::function<bool(Object *object)> const&foreach_callback
argument_list|)
specifier|const
block|{
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|object_sp
range|:
name|m_items
control|)
block|{
if|if
condition|(
name|foreach_callback
argument_list|(
name|object_sp
operator|.
name|get
argument_list|()
argument_list|)
operator|==
name|false
condition|)
return|return
name|false
return|;
block|}
return|return
name|true
return|;
block|}
name|size_t
name|GetSize
argument_list|()
specifier|const
block|{
return|return
name|m_items
operator|.
name|size
argument_list|()
return|;
block|}
name|ObjectSP
name|operator
index|[]
operator|(
name|size_t
name|idx
operator|)
block|{
if|if
condition|(
name|idx
operator|<
name|m_items
operator|.
name|size
argument_list|()
condition|)
return|return
name|m_items
index|[
name|idx
index|]
return|;
return|return
name|ObjectSP
argument_list|()
return|;
block|}
name|ObjectSP
name|GetItemAtIndex
argument_list|(
name|size_t
name|idx
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|idx
operator|<
name|GetSize
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|<
name|m_items
operator|.
name|size
argument_list|()
condition|)
return|return
name|m_items
index|[
name|idx
index|]
return|;
return|return
name|ObjectSP
argument_list|()
return|;
block|}
name|template
operator|<
name|class
name|IntType
operator|>
name|bool
name|GetItemAtIndexAsInteger
argument_list|(
argument|size_t idx
argument_list|,
argument|IntType&result
argument_list|)
specifier|const
block|{
name|ObjectSP
name|value_sp
operator|=
name|GetItemAtIndex
argument_list|(
name|idx
argument_list|)
block|;
if|if
condition|(
name|value_sp
operator|.
name|get
argument_list|()
condition|)
block|{
if|if
condition|(
name|auto
name|int_value
init|=
name|value_sp
operator|->
name|GetAsInteger
argument_list|()
condition|)
block|{
name|result
operator|=
name|static_cast
operator|<
name|IntType
operator|>
operator|(
name|int_value
operator|->
name|GetValue
argument_list|()
operator|)
expr_stmt|;
return|return
name|true
return|;
block|}
block|}
return|return
name|false
return|;
block|}
name|template
operator|<
name|class
name|IntType
operator|>
name|bool
name|GetItemAtIndexAsInteger
argument_list|(
argument|size_t idx
argument_list|,
argument|IntType&result
argument_list|,
argument|IntType default_val
argument_list|)
specifier|const
block|{
name|bool
name|success
operator|=
name|GetItemAtIndexAsInteger
argument_list|(
name|idx
argument_list|,
name|result
argument_list|)
block|;
if|if
condition|(
operator|!
name|success
condition|)
name|result
operator|=
name|default_val
expr_stmt|;
return|return
name|success
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|bool
name|GetItemAtIndexAsString
argument_list|(
name|size_t
name|idx
argument_list|,
name|llvm
operator|::
name|StringRef
operator|&
name|result
argument_list|)
decl|const
block|{
name|ObjectSP
name|value_sp
init|=
name|GetItemAtIndex
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|value_sp
operator|.
name|get
argument_list|()
condition|)
block|{
if|if
condition|(
name|auto
name|string_value
init|=
name|value_sp
operator|->
name|GetAsString
argument_list|()
condition|)
block|{
name|result
operator|=
name|string_value
operator|->
name|GetValue
argument_list|()
expr_stmt|;
return|return
name|true
return|;
block|}
block|}
return|return
name|false
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|bool
name|GetItemAtIndexAsString
argument_list|(
name|size_t
name|idx
argument_list|,
name|llvm
operator|::
name|StringRef
operator|&
name|result
argument_list|,
name|llvm
operator|::
name|StringRef
name|default_val
argument_list|)
decl|const
block|{
name|bool
name|success
init|=
name|GetItemAtIndexAsString
argument_list|(
name|idx
argument_list|,
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
name|result
operator|=
name|default_val
expr_stmt|;
return|return
name|success
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|bool
name|GetItemAtIndexAsString
argument_list|(
name|size_t
name|idx
argument_list|,
name|ConstString
operator|&
name|result
argument_list|)
decl|const
block|{
name|ObjectSP
name|value_sp
init|=
name|GetItemAtIndex
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|value_sp
operator|.
name|get
argument_list|()
condition|)
block|{
if|if
condition|(
name|auto
name|string_value
init|=
name|value_sp
operator|->
name|GetAsString
argument_list|()
condition|)
block|{
name|result
operator|=
name|ConstString
argument_list|(
name|string_value
operator|->
name|GetValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
block|}
return|return
name|false
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|bool
name|GetItemAtIndexAsString
argument_list|(
name|size_t
name|idx
argument_list|,
name|ConstString
operator|&
name|result
argument_list|,
specifier|const
name|char
operator|*
name|default_val
argument_list|)
decl|const
block|{
name|bool
name|success
init|=
name|GetItemAtIndexAsString
argument_list|(
name|idx
argument_list|,
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
name|result
operator|.
name|SetCString
argument_list|(
name|default_val
argument_list|)
expr_stmt|;
return|return
name|success
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|bool
name|GetItemAtIndexAsDictionary
argument_list|(
name|size_t
name|idx
argument_list|,
name|Dictionary
operator|*
operator|&
name|result
argument_list|)
decl|const
block|{
name|result
operator|=
name|nullptr
expr_stmt|;
name|ObjectSP
name|value_sp
init|=
name|GetItemAtIndex
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|value_sp
operator|.
name|get
argument_list|()
condition|)
block|{
name|result
operator|=
name|value_sp
operator|->
name|GetAsDictionary
argument_list|()
expr_stmt|;
return|return
operator|(
name|result
operator|!=
name|nullptr
operator|)
return|;
block|}
return|return
name|false
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|bool
name|GetItemAtIndexAsArray
argument_list|(
name|size_t
name|idx
argument_list|,
name|Array
operator|*
operator|&
name|result
argument_list|)
decl|const
block|{
name|result
operator|=
name|nullptr
expr_stmt|;
name|ObjectSP
name|value_sp
init|=
name|GetItemAtIndex
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|value_sp
operator|.
name|get
argument_list|()
condition|)
block|{
name|result
operator|=
name|value_sp
operator|->
name|GetAsArray
argument_list|()
expr_stmt|;
return|return
operator|(
name|result
operator|!=
name|nullptr
operator|)
return|;
block|}
return|return
name|false
return|;
block|}
end_decl_stmt

begin_function
name|void
name|Push
parameter_list|(
name|ObjectSP
name|item
parameter_list|)
block|{
name|m_items
operator|.
name|push_back
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|AddItem
parameter_list|(
name|ObjectSP
name|item
parameter_list|)
block|{
name|m_items
operator|.
name|push_back
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
end_function

begin_decl_stmt
name|void
name|Dump
argument_list|(
name|Stream
operator|&
name|s
argument_list|,
name|bool
name|pretty_print
operator|=
name|true
argument_list|)
decl|const
name|override
decl_stmt|;
end_decl_stmt

begin_label
name|protected
label|:
end_label

begin_typedef
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|ObjectSP
operator|>
name|collection
expr_stmt|;
end_typedef

begin_decl_stmt
name|collection
name|m_items
decl_stmt|;
end_decl_stmt

begin_decl_stmt
unit|};
name|class
name|Integer
range|:
name|public
name|Object
block|{
name|public
operator|:
name|Integer
argument_list|(
argument|uint64_t i =
literal|0
argument_list|)
operator|:
name|Object
argument_list|(
name|lldb
operator|::
name|eStructuredDataTypeInteger
argument_list|)
block|,
name|m_value
argument_list|(
argument|i
argument_list|)
block|{}
operator|~
name|Integer
argument_list|()
name|override
operator|=
expr|default
block|;
name|void
name|SetValue
argument_list|(
argument|uint64_t value
argument_list|)
block|{
name|m_value
operator|=
name|value
block|; }
name|uint64_t
name|GetValue
argument_list|()
block|{
return|return
name|m_value
return|;
block|}
name|void
name|Dump
argument_list|(
argument|Stream&s
argument_list|,
argument|bool pretty_print = true
argument_list|)
specifier|const
name|override
block|;
name|protected
operator|:
name|uint64_t
name|m_value
block|;   }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|Float
range|:
name|public
name|Object
block|{
name|public
operator|:
name|Float
argument_list|(
argument|double d =
literal|0.0
argument_list|)
operator|:
name|Object
argument_list|(
name|lldb
operator|::
name|eStructuredDataTypeFloat
argument_list|)
block|,
name|m_value
argument_list|(
argument|d
argument_list|)
block|{}
operator|~
name|Float
argument_list|()
name|override
operator|=
expr|default
block|;
name|void
name|SetValue
argument_list|(
argument|double value
argument_list|)
block|{
name|m_value
operator|=
name|value
block|; }
name|double
name|GetValue
argument_list|()
block|{
return|return
name|m_value
return|;
block|}
name|void
name|Dump
argument_list|(
argument|Stream&s
argument_list|,
argument|bool pretty_print = true
argument_list|)
specifier|const
name|override
block|;
name|protected
operator|:
name|double
name|m_value
block|;   }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|Boolean
range|:
name|public
name|Object
block|{
name|public
operator|:
name|Boolean
argument_list|(
argument|bool b = false
argument_list|)
operator|:
name|Object
argument_list|(
name|lldb
operator|::
name|eStructuredDataTypeBoolean
argument_list|)
block|,
name|m_value
argument_list|(
argument|b
argument_list|)
block|{}
operator|~
name|Boolean
argument_list|()
name|override
operator|=
expr|default
block|;
name|void
name|SetValue
argument_list|(
argument|bool value
argument_list|)
block|{
name|m_value
operator|=
name|value
block|; }
name|bool
name|GetValue
argument_list|()
block|{
return|return
name|m_value
return|;
block|}
name|void
name|Dump
argument_list|(
argument|Stream&s
argument_list|,
argument|bool pretty_print = true
argument_list|)
specifier|const
name|override
block|;
name|protected
operator|:
name|bool
name|m_value
block|;   }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|String
range|:
name|public
name|Object
block|{
name|public
operator|:
name|String
argument_list|()
operator|:
name|Object
argument_list|(
argument|lldb::eStructuredDataTypeString
argument_list|)
block|{}
name|explicit
name|String
argument_list|(
argument|llvm::StringRef S
argument_list|)
operator|:
name|Object
argument_list|(
name|lldb
operator|::
name|eStructuredDataTypeString
argument_list|)
block|,
name|m_value
argument_list|(
argument|S
argument_list|)
block|{}
name|void
name|SetValue
argument_list|(
argument|llvm::StringRef S
argument_list|)
block|{
name|m_value
operator|=
name|S
block|; }
name|llvm
operator|::
name|StringRef
name|GetValue
argument_list|()
block|{
return|return
name|m_value
return|;
block|}
name|void
name|Dump
argument_list|(
argument|Stream&s
argument_list|,
argument|bool pretty_print = true
argument_list|)
specifier|const
name|override
block|;
name|protected
operator|:
name|std
operator|::
name|string
name|m_value
block|;   }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|Dictionary
range|:
name|public
name|Object
block|{
name|public
operator|:
name|Dictionary
argument_list|()
operator|:
name|Object
argument_list|(
name|lldb
operator|::
name|eStructuredDataTypeDictionary
argument_list|)
block|,
name|m_dict
argument_list|()
block|{}
operator|~
name|Dictionary
argument_list|()
name|override
operator|=
expr|default
block|;
name|size_t
name|GetSize
argument_list|()
specifier|const
block|{
return|return
name|m_dict
operator|.
name|size
argument_list|()
return|;
block|}
name|void
name|ForEach
argument_list|(
argument|std::function<bool(ConstString key, Object *object)> const&callback
argument_list|)
specifier|const
block|{
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|pair
range|:
name|m_dict
control|)
block|{
if|if
condition|(
name|callback
argument_list|(
name|pair
operator|.
name|first
argument_list|,
name|pair
operator|.
name|second
operator|.
name|get
argument_list|()
argument_list|)
operator|==
name|false
condition|)
break|break;
block|}
block|}
name|ObjectSP
name|GetKeys
argument_list|()
specifier|const
block|{
name|auto
name|object_sp
operator|=
name|std
operator|::
name|make_shared
operator|<
name|Array
operator|>
operator|(
operator|)
block|;
name|collection
operator|::
name|const_iterator
name|iter
block|;
for|for
control|(
name|iter
operator|=
name|m_dict
operator|.
name|begin
argument_list|()
init|;
name|iter
operator|!=
name|m_dict
operator|.
name|end
argument_list|()
condition|;
operator|++
name|iter
control|)
block|{
name|auto
name|key_object_sp
init|=
name|std
operator|::
name|make_shared
operator|<
name|String
operator|>
operator|(
operator|)
decl_stmt|;
name|key_object_sp
operator|->
name|SetValue
argument_list|(
name|iter
operator|->
name|first
operator|.
name|AsCString
argument_list|()
argument_list|)
expr_stmt|;
name|object_sp
operator|->
name|Push
argument_list|(
name|key_object_sp
argument_list|)
expr_stmt|;
block|}
return|return
name|object_sp
return|;
block|}
name|ObjectSP
name|GetValueForKey
argument_list|(
argument|llvm::StringRef key
argument_list|)
specifier|const
block|{
name|ObjectSP
name|value_sp
block|;
if|if
condition|(
operator|!
name|key
operator|.
name|empty
argument_list|()
condition|)
block|{
name|ConstString
name|key_cs
parameter_list|(
name|key
parameter_list|)
function_decl|;
name|collection
operator|::
name|const_iterator
name|iter
operator|=
name|m_dict
operator|.
name|find
argument_list|(
name|key_cs
argument_list|)
expr_stmt|;
if|if
condition|(
name|iter
operator|!=
name|m_dict
operator|.
name|end
argument_list|()
condition|)
name|value_sp
operator|=
name|iter
operator|->
name|second
expr_stmt|;
block|}
return|return
name|value_sp
return|;
block|}
name|bool
name|GetValueForKeyAsBoolean
argument_list|(
argument|llvm::StringRef key
argument_list|,
argument|bool&result
argument_list|)
specifier|const
block|{
name|bool
name|success
operator|=
name|false
block|;
name|ObjectSP
name|value_sp
operator|=
name|GetValueForKey
argument_list|(
name|key
argument_list|)
block|;
if|if
condition|(
name|value_sp
operator|.
name|get
argument_list|()
condition|)
block|{
name|Boolean
modifier|*
name|result_ptr
init|=
name|value_sp
operator|->
name|GetAsBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|result_ptr
condition|)
block|{
name|result
operator|=
name|result_ptr
operator|->
name|GetValue
argument_list|()
expr_stmt|;
name|success
operator|=
name|true
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
name|template
operator|<
name|class
name|IntType
operator|>
name|bool
name|GetValueForKeyAsInteger
argument_list|(
argument|llvm::StringRef key
argument_list|,
argument|IntType&result
argument_list|)
specifier|const
block|{
name|ObjectSP
name|value_sp
operator|=
name|GetValueForKey
argument_list|(
name|key
argument_list|)
block|;
if|if
condition|(
name|value_sp
condition|)
block|{
if|if
condition|(
name|auto
name|int_value
init|=
name|value_sp
operator|->
name|GetAsInteger
argument_list|()
condition|)
block|{
name|result
operator|=
name|static_cast
operator|<
name|IntType
operator|>
operator|(
name|int_value
operator|->
name|GetValue
argument_list|()
operator|)
expr_stmt|;
return|return
name|true
return|;
block|}
block|}
return|return
name|false
return|;
block|}
name|template
operator|<
name|class
name|IntType
operator|>
name|bool
name|GetValueForKeyAsInteger
argument_list|(
argument|llvm::StringRef key
argument_list|,
argument|IntType&result
argument_list|,
argument|IntType default_val
argument_list|)
specifier|const
block|{
name|bool
name|success
operator|=
name|GetValueForKeyAsInteger
operator|<
name|IntType
operator|>
operator|(
name|key
expr|,
name|result
operator|)
block|;
if|if
condition|(
operator|!
name|success
condition|)
name|result
operator|=
name|default_val
expr_stmt|;
return|return
name|success
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|bool
name|GetValueForKeyAsString
argument_list|(
name|llvm
operator|::
name|StringRef
name|key
argument_list|,
name|llvm
operator|::
name|StringRef
operator|&
name|result
argument_list|)
decl|const
block|{
name|ObjectSP
name|value_sp
init|=
name|GetValueForKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value_sp
operator|.
name|get
argument_list|()
condition|)
block|{
if|if
condition|(
name|auto
name|string_value
init|=
name|value_sp
operator|->
name|GetAsString
argument_list|()
condition|)
block|{
name|result
operator|=
name|string_value
operator|->
name|GetValue
argument_list|()
expr_stmt|;
return|return
name|true
return|;
block|}
block|}
return|return
name|false
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|bool
name|GetValueForKeyAsString
argument_list|(
name|llvm
operator|::
name|StringRef
name|key
argument_list|,
name|llvm
operator|::
name|StringRef
operator|&
name|result
argument_list|,
specifier|const
name|char
operator|*
name|default_val
argument_list|)
decl|const
block|{
name|bool
name|success
init|=
name|GetValueForKeyAsString
argument_list|(
name|key
argument_list|,
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
name|default_val
condition|)
name|result
operator|=
name|default_val
expr_stmt|;
else|else
name|result
operator|=
name|llvm
operator|::
name|StringRef
argument_list|()
expr_stmt|;
block|}
return|return
name|success
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|bool
name|GetValueForKeyAsString
argument_list|(
name|llvm
operator|::
name|StringRef
name|key
argument_list|,
name|ConstString
operator|&
name|result
argument_list|)
decl|const
block|{
name|ObjectSP
name|value_sp
init|=
name|GetValueForKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value_sp
operator|.
name|get
argument_list|()
condition|)
block|{
if|if
condition|(
name|auto
name|string_value
init|=
name|value_sp
operator|->
name|GetAsString
argument_list|()
condition|)
block|{
name|result
operator|=
name|ConstString
argument_list|(
name|string_value
operator|->
name|GetValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
block|}
return|return
name|false
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|bool
name|GetValueForKeyAsString
argument_list|(
name|llvm
operator|::
name|StringRef
name|key
argument_list|,
name|ConstString
operator|&
name|result
argument_list|,
specifier|const
name|char
operator|*
name|default_val
argument_list|)
decl|const
block|{
name|bool
name|success
init|=
name|GetValueForKeyAsString
argument_list|(
name|key
argument_list|,
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
name|result
operator|.
name|SetCString
argument_list|(
name|default_val
argument_list|)
expr_stmt|;
return|return
name|success
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|bool
name|GetValueForKeyAsDictionary
argument_list|(
name|llvm
operator|::
name|StringRef
name|key
argument_list|,
name|Dictionary
operator|*
operator|&
name|result
argument_list|)
decl|const
block|{
name|result
operator|=
name|nullptr
expr_stmt|;
name|ObjectSP
name|value_sp
init|=
name|GetValueForKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value_sp
operator|.
name|get
argument_list|()
condition|)
block|{
name|result
operator|=
name|value_sp
operator|->
name|GetAsDictionary
argument_list|()
expr_stmt|;
return|return
operator|(
name|result
operator|!=
name|nullptr
operator|)
return|;
block|}
return|return
name|false
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|bool
name|GetValueForKeyAsArray
argument_list|(
name|llvm
operator|::
name|StringRef
name|key
argument_list|,
name|Array
operator|*
operator|&
name|result
argument_list|)
decl|const
block|{
name|result
operator|=
name|nullptr
expr_stmt|;
name|ObjectSP
name|value_sp
init|=
name|GetValueForKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value_sp
operator|.
name|get
argument_list|()
condition|)
block|{
name|result
operator|=
name|value_sp
operator|->
name|GetAsArray
argument_list|()
expr_stmt|;
return|return
operator|(
name|result
operator|!=
name|nullptr
operator|)
return|;
block|}
return|return
name|false
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|bool
name|HasKey
argument_list|(
name|llvm
operator|::
name|StringRef
name|key
argument_list|)
decl|const
block|{
name|ConstString
name|key_cs
parameter_list|(
name|key
parameter_list|)
function_decl|;
name|collection
operator|::
name|const_iterator
name|search
operator|=
name|m_dict
operator|.
name|find
argument_list|(
name|key_cs
argument_list|)
expr_stmt|;
return|return
name|search
operator|!=
name|m_dict
operator|.
name|end
argument_list|()
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|void
name|AddItem
argument_list|(
name|llvm
operator|::
name|StringRef
name|key
argument_list|,
name|ObjectSP
name|value_sp
argument_list|)
block|{
name|ConstString
name|key_cs
parameter_list|(
name|key
parameter_list|)
function_decl|;
name|m_dict
index|[
name|key_cs
index|]
operator|=
name|value_sp
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|void
name|AddIntegerItem
argument_list|(
name|llvm
operator|::
name|StringRef
name|key
argument_list|,
name|uint64_t
name|value
argument_list|)
block|{
name|AddItem
argument_list|(
name|key
argument_list|,
name|std
operator|::
name|make_shared
operator|<
name|Integer
operator|>
operator|(
name|value
operator|)
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|void
name|AddFloatItem
argument_list|(
name|llvm
operator|::
name|StringRef
name|key
argument_list|,
name|double
name|value
argument_list|)
block|{
name|AddItem
argument_list|(
name|key
argument_list|,
name|std
operator|::
name|make_shared
operator|<
name|Float
operator|>
operator|(
name|value
operator|)
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|void
name|AddStringItem
argument_list|(
name|llvm
operator|::
name|StringRef
name|key
argument_list|,
name|llvm
operator|::
name|StringRef
name|value
argument_list|)
block|{
name|AddItem
argument_list|(
name|key
argument_list|,
name|std
operator|::
name|make_shared
operator|<
name|String
operator|>
operator|(
name|std
operator|::
name|move
argument_list|(
name|value
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|void
name|AddBooleanItem
argument_list|(
name|llvm
operator|::
name|StringRef
name|key
argument_list|,
name|bool
name|value
argument_list|)
block|{
name|AddItem
argument_list|(
name|key
argument_list|,
name|std
operator|::
name|make_shared
operator|<
name|Boolean
operator|>
operator|(
name|value
operator|)
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|void
name|Dump
argument_list|(
name|Stream
operator|&
name|s
argument_list|,
name|bool
name|pretty_print
operator|=
name|true
argument_list|)
decl|const
name|override
decl_stmt|;
end_decl_stmt

begin_label
name|protected
label|:
end_label

begin_typedef
typedef|typedef
name|std
operator|::
name|map
operator|<
name|ConstString
operator|,
name|ObjectSP
operator|>
name|collection
expr_stmt|;
end_typedef

begin_decl_stmt
name|collection
name|m_dict
decl_stmt|;
end_decl_stmt

begin_decl_stmt
unit|};
name|class
name|Null
range|:
name|public
name|Object
block|{
name|public
operator|:
name|Null
argument_list|()
operator|:
name|Object
argument_list|(
argument|lldb::eStructuredDataTypeNull
argument_list|)
block|{}
operator|~
name|Null
argument_list|()
name|override
operator|=
expr|default
block|;
name|bool
name|IsValid
argument_list|()
specifier|const
name|override
block|{
return|return
name|false
return|;
block|}
name|void
name|Dump
argument_list|(
argument|Stream&s
argument_list|,
argument|bool pretty_print = true
argument_list|)
specifier|const
name|override
block|;   }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|Generic
range|:
name|public
name|Object
block|{
name|public
operator|:
name|explicit
name|Generic
argument_list|(
name|void
operator|*
name|object
operator|=
name|nullptr
argument_list|)
operator|:
name|Object
argument_list|(
name|lldb
operator|::
name|eStructuredDataTypeGeneric
argument_list|)
block|,
name|m_object
argument_list|(
argument|object
argument_list|)
block|{}
name|void
name|SetValue
argument_list|(
argument|void *value
argument_list|)
block|{
name|m_object
operator|=
name|value
block|; }
name|void
operator|*
name|GetValue
argument_list|()
specifier|const
block|{
return|return
name|m_object
return|;
block|}
name|bool
name|IsValid
argument_list|()
specifier|const
name|override
block|{
return|return
name|m_object
operator|!=
name|nullptr
return|;
block|}
name|void
name|Dump
argument_list|(
argument|Stream&s
argument_list|,
argument|bool pretty_print = true
argument_list|)
specifier|const
name|override
block|;
name|private
operator|:
name|void
operator|*
name|m_object
block|;   }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|ObjectSP
name|ParseJSON
argument_list|(
name|std
operator|::
name|string
name|json_text
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|static
name|ObjectSP
name|ParseJSONFromFile
parameter_list|(
specifier|const
name|FileSpec
modifier|&
name|file
parameter_list|,
name|Status
modifier|&
name|error
parameter_list|)
function_decl|;
end_function_decl

begin_comment
unit|};  }
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_StructuredData_h_
end_comment

end_unit

