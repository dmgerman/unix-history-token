begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- StructuredDataImpl.h ------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_StructuredDataImpl_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_StructuredDataImpl_h_
end_define

begin_include
include|#
directive|include
file|"lldb/Core/Event.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/StructuredData.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Target/StructuredDataPlugin.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Utility/Status.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Utility/Stream.h"
end_include

begin_include
include|#
directive|include
file|"lldb/lldb-forward.h"
end_include

begin_pragma
pragma|#
directive|pragma
name|mark
name|--
end_pragma

begin_pragma
pragma|#
directive|pragma
name|mark
name|StructuredDataImpl
end_pragma

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|StructuredDataImpl
block|{
name|public
label|:
name|StructuredDataImpl
argument_list|()
operator|:
name|m_plugin_wp
argument_list|()
operator|,
name|m_data_sp
argument_list|()
block|{}
name|StructuredDataImpl
argument_list|(
specifier|const
name|StructuredDataImpl
operator|&
name|rhs
argument_list|)
operator|=
expr|default
expr_stmt|;
name|StructuredDataImpl
argument_list|(
specifier|const
name|lldb
operator|::
name|EventSP
operator|&
name|event_sp
argument_list|)
operator|:
name|m_plugin_wp
argument_list|(
name|EventDataStructuredData
operator|::
name|GetPluginFromEvent
argument_list|(
name|event_sp
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
operator|,
name|m_data_sp
argument_list|(
argument|EventDataStructuredData::GetObjectFromEvent(event_sp.get())
argument_list|)
block|{   }
operator|~
name|StructuredDataImpl
argument_list|()
operator|=
expr|default
expr_stmt|;
name|StructuredDataImpl
modifier|&
name|operator
init|=
operator|(
specifier|const
name|StructuredDataImpl
operator|&
name|rhs
operator|)
operator|=
expr|default
decl_stmt|;
name|bool
name|IsValid
argument_list|()
specifier|const
block|{
return|return
name|m_data_sp
operator|.
name|get
argument_list|()
operator|!=
name|nullptr
return|;
block|}
name|void
name|Clear
parameter_list|()
block|{
name|m_plugin_wp
operator|.
name|reset
argument_list|()
expr_stmt|;
name|m_data_sp
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|Status
name|GetAsJSON
argument_list|(
name|Stream
operator|&
name|stream
argument_list|)
decl|const
block|{
name|Status
name|error
decl_stmt|;
if|if
condition|(
operator|!
name|m_data_sp
condition|)
block|{
name|error
operator|.
name|SetErrorString
argument_list|(
literal|"No structured data."
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
name|m_data_sp
operator|->
name|Dump
argument_list|(
name|stream
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
name|Status
name|GetDescription
argument_list|(
name|Stream
operator|&
name|stream
argument_list|)
decl|const
block|{
name|Status
name|error
decl_stmt|;
if|if
condition|(
operator|!
name|m_data_sp
condition|)
block|{
name|error
operator|.
name|SetErrorString
argument_list|(
literal|"Cannot pretty print structured data: "
literal|"no data to print."
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
comment|// Grab the plugin.
name|auto
name|plugin_sp
init|=
name|lldb
operator|::
name|StructuredDataPluginSP
argument_list|(
name|m_plugin_wp
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|plugin_sp
condition|)
block|{
name|error
operator|.
name|SetErrorString
argument_list|(
literal|"Cannot pretty print structured data: "
literal|"plugin doesn't exist."
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
comment|// Get the data's description.
return|return
name|plugin_sp
operator|->
name|GetDescription
argument_list|(
name|m_data_sp
argument_list|,
name|stream
argument_list|)
return|;
block|}
name|StructuredData
operator|::
name|ObjectSP
name|GetObjectSP
argument_list|()
block|{
return|return
name|m_data_sp
return|;
block|}
name|void
name|SetObjectSP
argument_list|(
specifier|const
name|StructuredData
operator|::
name|ObjectSP
operator|&
name|obj
argument_list|)
block|{
name|m_data_sp
operator|=
name|obj
expr_stmt|;
block|}
name|private
label|:
name|lldb
operator|::
name|StructuredDataPluginWP
name|m_plugin_wp
expr_stmt|;
name|StructuredData
operator|::
name|ObjectSP
name|m_data_sp
expr_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

