begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- StreamTee.h ------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_StreamTee_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_StreamTee_h_
end_define

begin_include
include|#
directive|include
file|<limits.h>
end_include

begin_include
include|#
directive|include
file|<mutex>
end_include

begin_include
include|#
directive|include
file|"lldb/Core/Stream.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|StreamTee
range|:
name|public
name|Stream
block|{
name|public
operator|:
name|StreamTee
argument_list|()
operator|:
name|Stream
argument_list|()
block|,
name|m_streams_mutex
argument_list|()
block|,
name|m_streams
argument_list|()
block|{}
name|StreamTee
argument_list|(
name|lldb
operator|::
name|StreamSP
operator|&
name|stream_sp
argument_list|)
operator|:
name|Stream
argument_list|()
block|,
name|m_streams_mutex
argument_list|()
block|,
name|m_streams
argument_list|()
block|{
comment|// No need to lock mutex during construction
if|if
condition|(
name|stream_sp
condition|)
name|m_streams
operator|.
name|push_back
argument_list|(
name|stream_sp
argument_list|)
expr_stmt|;
block|}
name|StreamTee
argument_list|(
name|lldb
operator|::
name|StreamSP
operator|&
name|stream_sp
argument_list|,
name|lldb
operator|::
name|StreamSP
operator|&
name|stream_2_sp
argument_list|)
operator|:
name|Stream
argument_list|()
block|,
name|m_streams_mutex
argument_list|()
block|,
name|m_streams
argument_list|()
block|{
comment|// No need to lock mutex during construction
if|if
condition|(
name|stream_sp
condition|)
name|m_streams
operator|.
name|push_back
argument_list|(
name|stream_sp
argument_list|)
expr_stmt|;
if|if
condition|(
name|stream_2_sp
condition|)
name|m_streams
operator|.
name|push_back
argument_list|(
name|stream_2_sp
argument_list|)
expr_stmt|;
block|}
name|StreamTee
argument_list|(
specifier|const
name|StreamTee
operator|&
name|rhs
argument_list|)
operator|:
name|Stream
argument_list|(
name|rhs
argument_list|)
operator|,
name|m_streams_mutex
argument_list|()
operator|,
name|m_streams
argument_list|()
block|{
comment|// Don't copy until we lock down "rhs"
name|std
operator|::
name|lock_guard
operator|<
name|std
operator|::
name|recursive_mutex
operator|>
name|guard
argument_list|(
name|rhs
operator|.
name|m_streams_mutex
argument_list|)
block|;
name|m_streams
operator|=
name|rhs
operator|.
name|m_streams
block|;     }
operator|~
name|StreamTee
argument_list|()
name|override
block|{     }
name|StreamTee
operator|&
name|operator
operator|=
operator|(
specifier|const
name|StreamTee
operator|&
name|rhs
operator|)
block|{
if|if
condition|(
name|this
operator|!=
operator|&
name|rhs
condition|)
block|{
name|Stream
operator|::
name|operator
operator|=
operator|(
name|rhs
operator|)
expr_stmt|;
name|std
operator|::
name|lock_guard
operator|<
name|std
operator|::
name|recursive_mutex
operator|>
name|lhs_locker
argument_list|(
name|m_streams_mutex
argument_list|)
expr_stmt|;
name|std
operator|::
name|lock_guard
operator|<
name|std
operator|::
name|recursive_mutex
operator|>
name|rhs_locker
argument_list|(
name|rhs
operator|.
name|m_streams_mutex
argument_list|)
expr_stmt|;
name|m_streams
operator|=
name|rhs
operator|.
name|m_streams
expr_stmt|;
block|}
return|return
operator|*
name|this
return|;
block|}
name|void
name|Flush
parameter_list|()
function|override
block|{
name|std
operator|::
name|lock_guard
operator|<
name|std
operator|::
name|recursive_mutex
operator|>
name|guard
argument_list|(
name|m_streams_mutex
argument_list|)
expr_stmt|;
name|collection
operator|::
name|iterator
name|pos
operator|,
name|end
expr_stmt|;
for|for
control|(
name|pos
operator|=
name|m_streams
operator|.
name|begin
argument_list|()
operator|,
name|end
operator|=
name|m_streams
operator|.
name|end
argument_list|()
init|;
name|pos
operator|!=
name|end
condition|;
operator|++
name|pos
control|)
block|{
comment|// Allow for our collection to contain NULL streams. This allows
comment|// the StreamTee to be used with hard coded indexes for clients
comment|// that might want N total streams with only a few that are set
comment|// to valid values.
name|Stream
modifier|*
name|strm
init|=
name|pos
operator|->
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|strm
condition|)
name|strm
operator|->
name|Flush
argument_list|()
expr_stmt|;
block|}
block|}
name|size_t
name|Write
parameter_list|(
specifier|const
name|void
modifier|*
name|s
parameter_list|,
name|size_t
name|length
parameter_list|)
function|override
block|{
name|std
operator|::
name|lock_guard
operator|<
name|std
operator|::
name|recursive_mutex
operator|>
name|guard
argument_list|(
name|m_streams_mutex
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_streams
operator|.
name|empty
argument_list|()
condition|)
return|return
literal|0
return|;
name|size_t
name|min_bytes_written
init|=
name|SIZE_MAX
decl_stmt|;
name|collection
operator|::
name|iterator
name|pos
operator|,
name|end
expr_stmt|;
for|for
control|(
name|pos
operator|=
name|m_streams
operator|.
name|begin
argument_list|()
operator|,
name|end
operator|=
name|m_streams
operator|.
name|end
argument_list|()
init|;
name|pos
operator|!=
name|end
condition|;
operator|++
name|pos
control|)
block|{
comment|// Allow for our collection to contain NULL streams. This allows
comment|// the StreamTee to be used with hard coded indexes for clients
comment|// that might want N total streams with only a few that are set
comment|// to valid values.
name|Stream
modifier|*
name|strm
init|=
name|pos
operator|->
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|strm
condition|)
block|{
specifier|const
name|size_t
name|bytes_written
init|=
name|strm
operator|->
name|Write
argument_list|(
name|s
argument_list|,
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|min_bytes_written
operator|>
name|bytes_written
condition|)
name|min_bytes_written
operator|=
name|bytes_written
expr_stmt|;
block|}
block|}
if|if
condition|(
name|min_bytes_written
operator|==
name|SIZE_MAX
condition|)
return|return
literal|0
return|;
return|return
name|min_bytes_written
return|;
block|}
name|size_t
name|AppendStream
argument_list|(
specifier|const
name|lldb
operator|::
name|StreamSP
operator|&
name|stream_sp
argument_list|)
block|{
name|size_t
name|new_idx
init|=
name|m_streams
operator|.
name|size
argument_list|()
decl_stmt|;
name|std
operator|::
name|lock_guard
operator|<
name|std
operator|::
name|recursive_mutex
operator|>
name|guard
argument_list|(
name|m_streams_mutex
argument_list|)
expr_stmt|;
name|m_streams
operator|.
name|push_back
argument_list|(
name|stream_sp
argument_list|)
expr_stmt|;
return|return
name|new_idx
return|;
block|}
name|size_t
name|GetNumStreams
argument_list|()
specifier|const
block|{
name|size_t
name|result
operator|=
literal|0
block|;
block|{
name|std
operator|::
name|lock_guard
operator|<
name|std
operator|::
name|recursive_mutex
operator|>
name|guard
argument_list|(
name|m_streams_mutex
argument_list|)
block|;
name|result
operator|=
name|m_streams
operator|.
name|size
argument_list|()
block|;         }
return|return
name|result
return|;
block|}
name|lldb
operator|::
name|StreamSP
name|GetStreamAtIndex
argument_list|(
argument|uint32_t idx
argument_list|)
block|{
name|lldb
operator|::
name|StreamSP
name|stream_sp
block|;
name|std
operator|::
name|lock_guard
operator|<
name|std
operator|::
name|recursive_mutex
operator|>
name|guard
argument_list|(
name|m_streams_mutex
argument_list|)
block|;
if|if
condition|(
name|idx
operator|<
name|m_streams
operator|.
name|size
argument_list|()
condition|)
name|stream_sp
operator|=
name|m_streams
index|[
name|idx
index|]
expr_stmt|;
return|return
name|stream_sp
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|void
name|SetStreamAtIndex
argument_list|(
name|uint32_t
name|idx
argument_list|,
specifier|const
name|lldb
operator|::
name|StreamSP
operator|&
name|stream_sp
argument_list|)
block|{
name|std
operator|::
name|lock_guard
operator|<
name|std
operator|::
name|recursive_mutex
operator|>
name|guard
argument_list|(
name|m_streams_mutex
argument_list|)
expr_stmt|;
comment|// Resize our stream vector as necessary to fit as many streams
comment|// as needed. This also allows this class to be used with hard
comment|// coded indexes that can be used contain many streams, not all
comment|// of which are valid.
if|if
condition|(
name|idx
operator|>=
name|m_streams
operator|.
name|size
argument_list|()
condition|)
name|m_streams
operator|.
name|resize
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
expr_stmt|;
name|m_streams
index|[
name|idx
index|]
operator|=
name|stream_sp
expr_stmt|;
block|}
end_decl_stmt

begin_label
name|protected
label|:
end_label

begin_typedef
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|lldb
operator|::
name|StreamSP
operator|>
name|collection
expr_stmt|;
end_typedef

begin_expr_stmt
name|mutable
name|std
operator|::
name|recursive_mutex
name|m_streams_mutex
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|collection
name|m_streams
decl_stmt|;
end_decl_stmt

begin_comment
unit|};  }
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_StreamTee_h_
end_comment

end_unit

