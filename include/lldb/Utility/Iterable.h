begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- Iterable.h ----------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_Iterable_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_Iterable_h_
end_define

begin_include
include|#
directive|include
file|"lldb/Host/Mutex.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|template
operator|<
name|typename
name|I
operator|,
name|typename
name|E
operator|>
name|E
name|map_adapter
argument_list|(
argument|I&iter
argument_list|)
block|{
return|return
name|iter
operator|->
name|second
return|;
block|}
name|template
operator|<
name|typename
name|I
operator|,
name|typename
name|E
operator|>
name|E
name|vector_adapter
argument_list|(
argument|I&iter
argument_list|)
block|{
return|return
operator|*
name|iter
return|;
block|}
name|template
operator|<
name|typename
name|I
operator|,
name|typename
name|E
operator|>
name|E
name|list_adapter
argument_list|(
argument|I&iter
argument_list|)
block|{
return|return
operator|*
name|iter
return|;
block|}
name|template
operator|<
name|typename
name|C
operator|,
name|typename
name|E
operator|,
name|E
argument_list|(
argument|*A
argument_list|)
operator|(
name|typename
name|C
operator|::
name|const_iterator
operator|&
operator|)
operator|>
name|class
name|AdaptedConstIterator
block|{
name|public
operator|:
typedef|typedef
name|typename
name|C
operator|::
name|const_iterator
name|BackingIterator
expr_stmt|;
name|private
operator|:
name|BackingIterator
name|m_iter
expr_stmt|;
name|public
label|:
comment|// Wrapping constructor
name|AdaptedConstIterator
argument_list|(
argument|BackingIterator backing_iterator
argument_list|)
block|:
name|m_iter
argument_list|(
argument|backing_iterator
argument_list|)
block|{     }
comment|// Default-constructible
name|AdaptedConstIterator
argument_list|()
operator|:
name|m_iter
argument_list|()
block|{     }
comment|// Copy-constructible
name|AdaptedConstIterator
argument_list|(
specifier|const
name|AdaptedConstIterator
operator|&
name|rhs
argument_list|)
operator|:
name|m_iter
argument_list|(
argument|rhs.m_iter
argument_list|)
block|{     }
comment|// Copy-assignable
name|AdaptedConstIterator
operator|&
name|operator
operator|=
operator|(
specifier|const
name|AdaptedConstIterator
operator|&
name|rhs
operator|)
block|{
name|m_iter
operator|=
name|rhs
operator|.
name|m_iter
block|;
return|return
operator|*
name|this
return|;
block|}
comment|// Destructible
operator|~
name|AdaptedConstIterator
argument_list|()
block|{ }
comment|// Comparable
name|bool
name|operator
operator|==
operator|(
specifier|const
name|AdaptedConstIterator
operator|&
name|rhs
operator|)
block|{
return|return
name|m_iter
operator|==
name|rhs
operator|.
name|m_iter
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|AdaptedConstIterator
operator|&
name|rhs
operator|)
block|{
return|return
name|m_iter
operator|!=
name|rhs
operator|.
name|m_iter
return|;
block|}
comment|// Rvalue dereferenceable
name|E
name|operator
modifier|*
parameter_list|()
block|{
return|return
call|(
modifier|*
name|A
call|)
argument_list|(
name|m_iter
argument_list|)
return|;
block|}
name|E
name|operator
operator|->
expr|(
block|)
block|{
return|return
call|(
modifier|*
name|A
call|)
argument_list|(
name|m_iter
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|// Offset dereferenceable
end_comment

begin_decl_stmt
name|E
name|operator
index|[]
argument_list|(
name|typename
name|BackingIterator
operator|::
name|difference_type
name|offset
argument_list|)
block|{
return|return
name|AdaptedConstIterator
argument_list|(
name|m_iter
operator|+
name|offset
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|// Incrementable
end_comment

begin_expr_stmt
name|AdaptedConstIterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|m_iter
operator|++
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_comment
comment|// Decrementable
end_comment

begin_expr_stmt
name|AdaptedConstIterator
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
name|m_iter
operator|--
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_comment
comment|// Compound assignment
end_comment

begin_expr_stmt
name|AdaptedConstIterator
operator|&
name|operator
operator|+=
operator|(
name|typename
name|BackingIterator
operator|::
name|difference_type
name|offset
operator|)
block|{
name|m_iter
operator|+=
name|offset
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|AdaptedConstIterator
operator|&
name|operator
operator|-=
operator|(
name|typename
name|BackingIterator
operator|::
name|difference_type
name|offset
operator|)
block|{
name|m_iter
operator|-=
name|offset
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_comment
comment|// Arithmetic
end_comment

begin_expr_stmt
name|AdaptedConstIterator
name|operator
operator|+
operator|(
name|typename
name|BackingIterator
operator|::
name|difference_type
name|offset
operator|)
block|{
return|return
name|AdaptedConstIterator
argument_list|(
name|m_iter
operator|+
name|offset
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|AdaptedConstIterator
name|operator
operator|-
operator|(
name|typename
name|BackingIterator
operator|::
name|difference_type
name|offset
operator|)
block|{
return|return
name|AdaptedConstIterator
argument_list|(
name|m_iter
operator|-
name|offset
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// Comparable
end_comment

begin_expr_stmt
name|bool
name|operator
operator|<
operator|(
name|AdaptedConstIterator
operator|&
name|rhs
operator|)
block|{
return|return
name|m_iter
operator|<
name|rhs
operator|.
name|m_iter
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|<=
operator|(
name|AdaptedConstIterator
operator|&
name|rhs
operator|)
block|{
return|return
name|m_iter
operator|<=
name|rhs
operator|.
name|m_iter
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|>
operator|(
name|AdaptedConstIterator
operator|&
name|rhs
operator|)
block|{
return|return
name|m_iter
operator|>
name|rhs
operator|.
name|m_iter
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|>=
operator|(
name|AdaptedConstIterator
operator|&
name|rhs
operator|)
block|{
return|return
name|m_iter
operator|>=
name|rhs
operator|.
name|m_iter
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|C1
operator|,
name|typename
name|E1
operator|,
name|E1
argument_list|(
argument|*A1
argument_list|)
operator|(
name|typename
name|C1
operator|::
name|const_iterator
operator|&
operator|)
operator|>
name|friend
name|AdaptedConstIterator
operator|<
name|C1
operator|,
name|E1
operator|,
name|A1
operator|>
name|operator
operator|+
operator|(
name|typename
name|C1
operator|::
name|const_iterator
operator|::
name|difference_type
operator|,
name|AdaptedConstIterator
operator|<
name|C1
operator|,
name|E1
operator|,
name|A1
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|C1
operator|,
name|typename
name|E1
operator|,
name|E1
argument_list|(
argument|*A1
argument_list|)
operator|(
name|typename
name|C1
operator|::
name|const_iterator
operator|&
operator|)
operator|>
name|friend
name|typename
name|C1
operator|::
name|const_iterator
operator|::
name|difference_type
name|operator
operator|-
operator|(
name|AdaptedConstIterator
operator|<
name|C1
operator|,
name|E1
operator|,
name|A1
operator|>
operator|&
operator|,
name|AdaptedConstIterator
operator|<
name|C1
operator|,
name|E1
operator|,
name|A1
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|C1
operator|,
name|typename
name|E1
operator|,
name|E1
argument_list|(
argument|*A1
argument_list|)
operator|(
name|typename
name|C1
operator|::
name|const_iterator
operator|&
operator|)
operator|>
name|friend
name|void
name|swap
argument_list|(
name|AdaptedConstIterator
operator|<
name|C1
argument_list|,
name|E1
argument_list|,
name|A1
operator|>
operator|&
argument_list|,
name|AdaptedConstIterator
operator|<
name|C1
argument_list|,
name|E1
argument_list|,
name|A1
operator|>
operator|&
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|C
operator|,
name|typename
name|E
operator|,
name|E
argument_list|(
argument|*A
argument_list|)
operator|(
name|typename
name|C
operator|::
name|const_iterator
operator|&
operator|)
operator|>
name|AdaptedConstIterator
operator|<
name|C
operator|,
name|E
operator|,
name|A
operator|>
name|operator
operator|+
operator|(
name|typename
name|AdaptedConstIterator
operator|<
name|C
operator|,
name|E
operator|,
name|A
operator|>
operator|::
name|BackingIterator
operator|::
name|difference_type
name|offset
operator|,
name|AdaptedConstIterator
operator|<
name|C
operator|,
name|E
operator|,
name|A
operator|>
operator|&
name|rhs
operator|)
block|{
return|return
name|rhs
operator|.
name|operator
operator|+
operator|(
name|offset
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|C
operator|,
name|typename
name|E
operator|,
name|E
argument_list|(
argument|*A
argument_list|)
operator|(
name|typename
name|C
operator|::
name|const_iterator
operator|&
operator|)
operator|>
name|typename
name|AdaptedConstIterator
operator|<
name|C
operator|,
name|E
operator|,
name|A
operator|>
operator|::
name|BackingIterator
operator|::
name|difference_type
name|operator
operator|-
operator|(
name|AdaptedConstIterator
operator|<
name|C
operator|,
name|E
operator|,
name|A
operator|>
operator|&
name|lhs
operator|,
name|AdaptedConstIterator
operator|<
name|C
operator|,
name|E
operator|,
name|A
operator|>
operator|&
name|rhs
operator|)
block|{
return|return
operator|(
name|lhs
operator|.
name|m_iter
operator|-
name|rhs
operator|.
name|m_iter
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|C
operator|,
name|typename
name|E
operator|,
name|E
argument_list|(
argument|*A
argument_list|)
operator|(
name|typename
name|C
operator|::
name|const_iterator
operator|&
operator|)
operator|>
name|void
name|swap
argument_list|(
argument|AdaptedConstIterator<C
argument_list|,
argument|E
argument_list|,
argument|A>&lhs
argument_list|,
argument|AdaptedConstIterator<C
argument_list|,
argument|E
argument_list|,
argument|A>&rhs
argument_list|)
block|{
name|std
operator|::
name|swap
argument_list|(
name|lhs
operator|.
name|m_iter
argument_list|,
name|rhs
operator|.
name|m_iter
argument_list|)
block|; }
name|template
operator|<
name|typename
name|C
operator|,
name|typename
name|E
operator|,
name|E
argument_list|(
argument|*A
argument_list|)
operator|(
name|typename
name|C
operator|::
name|const_iterator
operator|&
operator|)
operator|>
name|class
name|AdaptedIterable
block|{
name|private
operator|:
specifier|const
name|C
operator|&
name|m_container
block|;
name|public
operator|:
name|AdaptedIterable
argument_list|(
specifier|const
name|C
operator|&
name|container
argument_list|)
operator|:
name|m_container
argument_list|(
argument|container
argument_list|)
block|{     }
name|AdaptedConstIterator
operator|<
name|C
block|,
name|E
block|,
name|A
operator|>
name|begin
argument_list|()
block|{
return|return
name|AdaptedConstIterator
operator|<
name|C
operator|,
name|E
operator|,
name|A
operator|>
operator|(
name|m_container
operator|.
name|begin
argument_list|()
operator|)
return|;
block|}
name|AdaptedConstIterator
operator|<
name|C
operator|,
name|E
operator|,
name|A
operator|>
name|end
argument_list|()
block|{
return|return
name|AdaptedConstIterator
operator|<
name|C
operator|,
name|E
operator|,
name|A
operator|>
operator|(
name|m_container
operator|.
name|end
argument_list|()
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|C
operator|,
name|typename
name|E
operator|,
name|E
argument_list|(
argument|*A
argument_list|)
operator|(
name|typename
name|C
operator|::
name|const_iterator
operator|&
operator|)
operator|>
name|class
name|LockingAdaptedIterable
operator|:
name|public
name|AdaptedIterable
operator|<
name|C
operator|,
name|E
operator|,
name|A
operator|>
block|{
name|private
operator|:
name|Mutex
operator|*
name|m_mutex
operator|=
name|nullptr
block|;
name|public
operator|:
name|LockingAdaptedIterable
argument_list|(
name|C
operator|&
name|container
argument_list|,
name|Mutex
operator|&
name|mutex
argument_list|)
operator|:
name|AdaptedIterable
operator|<
name|C
block|,
name|E
block|,
name|A
operator|>
operator|(
name|container
operator|)
block|,
name|m_mutex
argument_list|(
argument|&mutex
argument_list|)
block|{
name|m_mutex
operator|->
name|Lock
argument_list|()
block|;     }
name|LockingAdaptedIterable
argument_list|(
name|LockingAdaptedIterable
operator|&&
name|rhs
argument_list|)
operator|:
name|AdaptedIterable
operator|<
name|C
block|,
name|E
block|,
name|A
operator|>
operator|(
name|rhs
operator|)
block|,
name|m_mutex
argument_list|(
argument|rhs.m_mutex
argument_list|)
block|{
name|rhs
operator|.
name|m_mutex
operator|=
name|NULL
block|;     }
operator|~
name|LockingAdaptedIterable
argument_list|()
block|{
if|if
condition|(
name|m_mutex
condition|)
name|m_mutex
operator|->
name|Unlock
argument_list|()
expr_stmt|;
block|}
name|private
operator|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|LockingAdaptedIterable
argument_list|)
expr_stmt|;
end_expr_stmt

begin_endif
unit|};      }
endif|#
directive|endif
end_endif

end_unit

