begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- SBTypeSummary.h -------------------------------------------*- C++
end_comment

begin_comment
comment|//-*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLDB_SBTypeSummary_h_
end_ifndef

begin_define
define|#
directive|define
name|LLDB_SBTypeSummary_h_
end_define

begin_include
include|#
directive|include
file|"lldb/API/SBDefines.h"
end_include

begin_decl_stmt
name|namespace
name|lldb
block|{
name|class
name|LLDB_API
name|SBTypeSummaryOptions
block|{
name|public
label|:
name|SBTypeSummaryOptions
argument_list|()
expr_stmt|;
name|SBTypeSummaryOptions
argument_list|(
specifier|const
name|lldb
operator|::
name|SBTypeSummaryOptions
operator|&
name|rhs
argument_list|)
expr_stmt|;
name|SBTypeSummaryOptions
argument_list|(
specifier|const
name|lldb_private
operator|::
name|TypeSummaryOptions
operator|*
name|lldb_object_ptr
argument_list|)
expr_stmt|;
operator|~
name|SBTypeSummaryOptions
argument_list|()
expr_stmt|;
name|bool
name|IsValid
parameter_list|()
function_decl|;
name|lldb
operator|::
name|LanguageType
name|GetLanguage
argument_list|()
expr_stmt|;
name|lldb
operator|::
name|TypeSummaryCapping
name|GetCapping
argument_list|()
expr_stmt|;
name|void
name|SetLanguage
argument_list|(
name|lldb
operator|::
name|LanguageType
argument_list|)
decl_stmt|;
name|void
name|SetCapping
argument_list|(
name|lldb
operator|::
name|TypeSummaryCapping
argument_list|)
decl_stmt|;
name|protected
label|:
name|friend
name|class
name|SBValue
decl_stmt|;
name|lldb_private
operator|::
name|TypeSummaryOptions
operator|*
name|operator
operator|->
expr|(
block|)
decl_stmt|;
specifier|const
name|lldb_private
operator|::
name|TypeSummaryOptions
operator|*
name|operator
operator|->
expr|(
block|)
decl|const
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|lldb_private
operator|::
name|TypeSummaryOptions
operator|*
name|get
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|lldb_private
operator|::
name|TypeSummaryOptions
operator|&
name|ref
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|lldb_private
operator|::
name|TypeSummaryOptions
operator|&
name|ref
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|SetOptions
argument_list|(
specifier|const
name|lldb_private
operator|::
name|TypeSummaryOptions
operator|*
name|lldb_object_ptr
argument_list|)
decl_stmt|;
end_decl_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|std
operator|::
name|unique_ptr
operator|<
name|lldb_private
operator|::
name|TypeSummaryOptions
operator|>
name|m_opaque_ap
expr_stmt|;
end_expr_stmt

begin_decl_stmt
unit|};
name|class
name|SBTypeSummary
block|{
name|public
label|:
name|SBTypeSummary
argument_list|()
expr_stmt|;
comment|// Native function summary formatter callback
typedef|typedef
name|bool
function_decl|(
modifier|*
name|FormatCallback
function_decl|)
parameter_list|(
name|SBValue
parameter_list|,
name|SBTypeSummaryOptions
parameter_list|,
name|SBStream
modifier|&
parameter_list|)
function_decl|;
specifier|static
name|SBTypeSummary
name|CreateWithSummaryString
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|uint32_t
name|options
init|=
literal|0
parameter_list|)
function_decl|;
comment|// see lldb::eTypeOption values
specifier|static
name|SBTypeSummary
name|CreateWithFunctionName
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|uint32_t
name|options
init|=
literal|0
parameter_list|)
function_decl|;
comment|// see lldb::eTypeOption values
specifier|static
name|SBTypeSummary
name|CreateWithScriptCode
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|uint32_t
name|options
init|=
literal|0
parameter_list|)
function_decl|;
comment|// see lldb::eTypeOption values
specifier|static
name|SBTypeSummary
name|CreateWithCallback
parameter_list|(
name|FormatCallback
name|cb
parameter_list|,
name|uint32_t
name|options
init|=
literal|0
parameter_list|,
specifier|const
name|char
modifier|*
name|description
init|=
name|nullptr
parameter_list|)
function_decl|;
name|SBTypeSummary
argument_list|(
specifier|const
name|lldb
operator|::
name|SBTypeSummary
operator|&
name|rhs
argument_list|)
expr_stmt|;
operator|~
name|SBTypeSummary
argument_list|()
expr_stmt|;
name|bool
name|IsValid
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|IsFunctionCode
parameter_list|()
function_decl|;
name|bool
name|IsFunctionName
parameter_list|()
function_decl|;
name|bool
name|IsSummaryString
parameter_list|()
function_decl|;
specifier|const
name|char
modifier|*
name|GetData
parameter_list|()
function_decl|;
name|void
name|SetSummaryString
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|)
function_decl|;
name|void
name|SetFunctionName
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|)
function_decl|;
name|void
name|SetFunctionCode
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|)
function_decl|;
name|uint32_t
name|GetOptions
parameter_list|()
function_decl|;
name|void
name|SetOptions
parameter_list|(
name|uint32_t
parameter_list|)
function_decl|;
name|bool
name|GetDescription
argument_list|(
name|lldb
operator|::
name|SBStream
operator|&
name|description
argument_list|,
name|lldb
operator|::
name|DescriptionLevel
name|description_level
argument_list|)
decl_stmt|;
name|lldb
operator|::
name|SBTypeSummary
operator|&
name|operator
operator|=
operator|(
specifier|const
name|lldb
operator|::
name|SBTypeSummary
operator|&
name|rhs
operator|)
expr_stmt|;
name|bool
name|DoesPrintValue
argument_list|(
name|lldb
operator|::
name|SBValue
name|value
argument_list|)
decl_stmt|;
name|bool
name|IsEqualTo
argument_list|(
name|lldb
operator|::
name|SBTypeSummary
operator|&
name|rhs
argument_list|)
decl_stmt|;
name|bool
name|operator
operator|==
operator|(
name|lldb
operator|::
name|SBTypeSummary
operator|&
name|rhs
operator|)
expr_stmt|;
name|bool
name|operator
operator|!=
operator|(
name|lldb
operator|::
name|SBTypeSummary
operator|&
name|rhs
operator|)
expr_stmt|;
name|protected
label|:
name|friend
name|class
name|SBDebugger
decl_stmt|;
name|friend
name|class
name|SBTypeCategory
decl_stmt|;
name|friend
name|class
name|SBValue
decl_stmt|;
name|lldb
operator|::
name|TypeSummaryImplSP
name|GetSP
argument_list|()
expr_stmt|;
name|void
name|SetSP
argument_list|(
specifier|const
name|lldb
operator|::
name|TypeSummaryImplSP
operator|&
name|typefilter_impl_sp
argument_list|)
decl_stmt|;
name|lldb
operator|::
name|TypeSummaryImplSP
name|m_opaque_sp
expr_stmt|;
name|SBTypeSummary
argument_list|(
specifier|const
name|lldb
operator|::
name|TypeSummaryImplSP
operator|&
argument_list|)
expr_stmt|;
name|bool
name|CopyOnWrite_Impl
parameter_list|()
function_decl|;
name|bool
name|ChangeSummaryType
parameter_list|(
name|bool
name|want_script
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// namespace lldb
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLDB_SBTypeSummary_h_
end_comment

end_unit

