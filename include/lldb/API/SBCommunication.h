begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- SBCommunication.h ---------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLDB_SBCommunication_h_
end_ifndef

begin_define
define|#
directive|define
name|LLDB_SBCommunication_h_
end_define

begin_include
include|#
directive|include
file|"lldb/API/SBDefines.h"
end_include

begin_include
include|#
directive|include
file|"lldb/API/SBError.h"
end_include

begin_decl_stmt
name|namespace
name|lldb
block|{
name|class
name|SBCommunication
block|{
name|public
label|:
enum|enum
block|{
name|eBroadcastBitDisconnected
init|=
operator|(
literal|1
operator|<<
literal|0
operator|)
block|,
comment|///< Sent when the communications connection is lost.
name|eBroadcastBitReadThreadGotBytes
init|=
operator|(
literal|1
operator|<<
literal|1
operator|)
block|,
comment|///< Sent by the read thread when bytes become available.
name|eBroadcastBitReadThreadDidExit
init|=
operator|(
literal|1
operator|<<
literal|2
operator|)
block|,
comment|///< Sent by the read thread when it exits to inform clients.
name|eBroadcastBitReadThreadShouldExit
init|=
operator|(
literal|1
operator|<<
literal|3
operator|)
block|,
comment|///< Sent by clients that need to cancel the read thread.
name|eBroadcastBitPacketAvailable
init|=
operator|(
literal|1
operator|<<
literal|4
operator|)
block|,
comment|///< Sent when data received makes a complete packet.
name|eAllEventBits
init|=
literal|0xffffffff
block|}
enum|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|ReadThreadBytesReceived
function_decl|)
parameter_list|(
name|void
modifier|*
name|baton
parameter_list|,
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
name|src_len
parameter_list|)
function_decl|;
name|SBCommunication
argument_list|()
expr_stmt|;
name|SBCommunication
argument_list|(
specifier|const
name|char
operator|*
name|broadcaster_name
argument_list|)
expr_stmt|;
operator|~
name|SBCommunication
argument_list|()
expr_stmt|;
name|bool
name|IsValid
argument_list|()
specifier|const
expr_stmt|;
name|lldb
operator|::
name|SBBroadcaster
name|GetBroadcaster
argument_list|()
expr_stmt|;
specifier|static
specifier|const
name|char
modifier|*
name|GetBroadcasterClass
parameter_list|()
function_decl|;
name|lldb
operator|::
name|ConnectionStatus
name|AdoptFileDesriptor
argument_list|(
argument|int fd
argument_list|,
argument|bool owns_fd
argument_list|)
expr_stmt|;
name|lldb
operator|::
name|ConnectionStatus
name|Connect
argument_list|(
specifier|const
name|char
operator|*
name|url
argument_list|)
expr_stmt|;
name|lldb
operator|::
name|ConnectionStatus
name|Disconnect
argument_list|()
expr_stmt|;
name|bool
name|IsConnected
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|GetCloseOnEOF
parameter_list|()
function_decl|;
name|void
name|SetCloseOnEOF
parameter_list|(
name|bool
name|b
parameter_list|)
function_decl|;
name|size_t
name|Read
argument_list|(
name|void
operator|*
name|dst
argument_list|,
name|size_t
name|dst_len
argument_list|,
name|uint32_t
name|timeout_usec
argument_list|,
name|lldb
operator|::
name|ConnectionStatus
operator|&
name|status
argument_list|)
decl_stmt|;
name|size_t
name|Write
argument_list|(
specifier|const
name|void
operator|*
name|src
argument_list|,
name|size_t
name|src_len
argument_list|,
name|lldb
operator|::
name|ConnectionStatus
operator|&
name|status
argument_list|)
decl_stmt|;
name|bool
name|ReadThreadStart
parameter_list|()
function_decl|;
name|bool
name|ReadThreadStop
parameter_list|()
function_decl|;
name|bool
name|ReadThreadIsRunning
parameter_list|()
function_decl|;
name|bool
name|SetReadThreadBytesReceivedCallback
parameter_list|(
name|ReadThreadBytesReceived
name|callback
parameter_list|,
name|void
modifier|*
name|callback_baton
parameter_list|)
function_decl|;
name|private
label|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|SBCommunication
argument_list|)
expr_stmt|;
name|lldb_private
operator|::
name|Communication
operator|*
name|m_opaque
expr_stmt|;
name|bool
name|m_opaque_owned
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace lldb
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLDB_SBCommunication_h_
end_comment

end_unit

