begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- TypeSynthetic.h -------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|lldb_TypeSynthetic_h_
end_ifndef

begin_define
define|#
directive|define
name|lldb_TypeSynthetic_h_
end_define

begin_comment
comment|// C Includes
end_comment

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_comment
comment|// C++ Includes
end_comment

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_comment
comment|// Project includes
end_comment

begin_include
include|#
directive|include
file|"lldb/lldb-public.h"
end_include

begin_include
include|#
directive|include
file|"lldb/lldb-enumerations.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/ValueObject.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Interpreter/ScriptInterpreterPython.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Symbol/Type.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|SyntheticChildrenFrontEnd
block|{
name|protected
label|:
name|ValueObject
modifier|&
name|m_backend
decl_stmt|;
name|public
label|:
name|SyntheticChildrenFrontEnd
argument_list|(
name|ValueObject
operator|&
name|backend
argument_list|)
operator|:
name|m_backend
argument_list|(
argument|backend
argument_list|)
block|{}
name|virtual
operator|~
name|SyntheticChildrenFrontEnd
argument_list|()
block|{         }
name|virtual
name|size_t
name|CalculateNumChildren
argument_list|()
operator|=
literal|0
expr_stmt|;
name|virtual
name|lldb
operator|::
name|ValueObjectSP
name|GetChildAtIndex
argument_list|(
argument|size_t idx
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|size_t
name|GetIndexOfChildWithName
parameter_list|(
specifier|const
name|ConstString
modifier|&
name|name
parameter_list|)
init|=
literal|0
function_decl|;
comment|// this function is assumed to always succeed and it if fails, the front-end should know to deal
comment|// with it in the correct way (most probably, by refusing to return any children)
comment|// the return value of Update() should actually be interpreted as "ValueObjectSyntheticFilter cache is good/bad"
comment|// if =true, ValueObjectSyntheticFilter is allowed to use the children it fetched previously and cached
comment|// if =false, ValueObjectSyntheticFilter must throw away its cache, and query again for children
name|virtual
name|bool
name|Update
parameter_list|()
init|=
literal|0
function_decl|;
comment|// if this function returns false, then CalculateNumChildren() MUST return 0 since UI frontends
comment|// might validly decide not to inquire for children given a false return value from this call
comment|// if it returns true, then CalculateNumChildren() can return any number>= 0 (0 being valid)
comment|// it should if at all possible be more efficient than CalculateNumChildren()
name|virtual
name|bool
name|MightHaveChildren
parameter_list|()
init|=
literal|0
function_decl|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|SyntheticChildrenFrontEnd
operator|>
name|SharedPointer
expr_stmt|;
typedef|typedef
name|std
operator|::
name|unique_ptr
operator|<
name|SyntheticChildrenFrontEnd
operator|>
name|AutoPointer
expr_stmt|;
name|private
label|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|SyntheticChildrenFrontEnd
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
name|class
name|SyntheticChildren
block|{
name|public
label|:
name|class
name|Flags
block|{
name|public
label|:
name|Flags
argument_list|()
operator|:
name|m_flags
argument_list|(
argument|lldb::eTypeOptionCascade
argument_list|)
block|{}
name|Flags
argument_list|(
specifier|const
name|Flags
operator|&
name|other
argument_list|)
operator|:
name|m_flags
argument_list|(
argument|other.m_flags
argument_list|)
block|{}
name|Flags
argument_list|(
argument|uint32_t value
argument_list|)
operator|:
name|m_flags
argument_list|(
argument|value
argument_list|)
block|{}
name|Flags
operator|&
name|operator
operator|=
operator|(
specifier|const
name|Flags
operator|&
name|rhs
operator|)
block|{
if|if
condition|(
operator|&
name|rhs
operator|!=
name|this
condition|)
name|m_flags
operator|=
name|rhs
operator|.
name|m_flags
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|Flags
modifier|&
name|operator
init|=
operator|(
specifier|const
name|uint32_t
operator|&
name|rhs
operator|)
block|{
name|m_flags
operator|=
name|rhs
block|;
return|return
operator|*
name|this
return|;
block|}
name|Flags
modifier|&
name|Clear
parameter_list|()
block|{
name|m_flags
operator|=
literal|0
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|GetCascades
argument_list|()
specifier|const
block|{
return|return
operator|(
name|m_flags
operator|&
name|lldb
operator|::
name|eTypeOptionCascade
operator|)
operator|==
name|lldb
operator|::
name|eTypeOptionCascade
return|;
block|}
name|Flags
modifier|&
name|SetCascades
parameter_list|(
name|bool
name|value
init|=
name|true
parameter_list|)
block|{
if|if
condition|(
name|value
condition|)
name|m_flags
operator||=
name|lldb
operator|::
name|eTypeOptionCascade
expr_stmt|;
else|else
name|m_flags
operator|&=
operator|~
name|lldb
operator|::
name|eTypeOptionCascade
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|GetSkipPointers
argument_list|()
specifier|const
block|{
return|return
operator|(
name|m_flags
operator|&
name|lldb
operator|::
name|eTypeOptionSkipPointers
operator|)
operator|==
name|lldb
operator|::
name|eTypeOptionSkipPointers
return|;
block|}
name|Flags
modifier|&
name|SetSkipPointers
parameter_list|(
name|bool
name|value
init|=
name|true
parameter_list|)
block|{
if|if
condition|(
name|value
condition|)
name|m_flags
operator||=
name|lldb
operator|::
name|eTypeOptionSkipPointers
expr_stmt|;
else|else
name|m_flags
operator|&=
operator|~
name|lldb
operator|::
name|eTypeOptionSkipPointers
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|GetSkipReferences
argument_list|()
specifier|const
block|{
return|return
operator|(
name|m_flags
operator|&
name|lldb
operator|::
name|eTypeOptionSkipReferences
operator|)
operator|==
name|lldb
operator|::
name|eTypeOptionSkipReferences
return|;
block|}
name|Flags
modifier|&
name|SetSkipReferences
parameter_list|(
name|bool
name|value
init|=
name|true
parameter_list|)
block|{
if|if
condition|(
name|value
condition|)
name|m_flags
operator||=
name|lldb
operator|::
name|eTypeOptionSkipReferences
expr_stmt|;
else|else
name|m_flags
operator|&=
operator|~
name|lldb
operator|::
name|eTypeOptionSkipReferences
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|uint32_t
name|GetValue
parameter_list|()
block|{
return|return
name|m_flags
return|;
block|}
name|void
name|SetValue
parameter_list|(
name|uint32_t
name|value
parameter_list|)
block|{
name|m_flags
operator|=
name|value
expr_stmt|;
block|}
name|private
label|:
name|uint32_t
name|m_flags
decl_stmt|;
block|}
empty_stmt|;
name|SyntheticChildren
argument_list|(
specifier|const
name|Flags
operator|&
name|flags
argument_list|)
operator|:
name|m_flags
argument_list|(
argument|flags
argument_list|)
block|{         }
name|virtual
operator|~
name|SyntheticChildren
argument_list|()
block|{         }
name|bool
name|Cascades
argument_list|()
specifier|const
block|{
return|return
name|m_flags
operator|.
name|GetCascades
argument_list|()
return|;
block|}
name|bool
name|SkipsPointers
argument_list|()
specifier|const
block|{
return|return
name|m_flags
operator|.
name|GetSkipPointers
argument_list|()
return|;
block|}
name|bool
name|SkipsReferences
argument_list|()
specifier|const
block|{
return|return
name|m_flags
operator|.
name|GetSkipReferences
argument_list|()
return|;
block|}
name|void
name|SetCascades
parameter_list|(
name|bool
name|value
parameter_list|)
block|{
name|m_flags
operator|.
name|SetCascades
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|void
name|SetSkipsPointers
parameter_list|(
name|bool
name|value
parameter_list|)
block|{
name|m_flags
operator|.
name|SetSkipPointers
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|void
name|SetSkipsReferences
parameter_list|(
name|bool
name|value
parameter_list|)
block|{
name|m_flags
operator|.
name|SetSkipReferences
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|uint32_t
name|GetOptions
parameter_list|()
block|{
return|return
name|m_flags
operator|.
name|GetValue
argument_list|()
return|;
block|}
name|void
name|SetOptions
parameter_list|(
name|uint32_t
name|value
parameter_list|)
block|{
name|m_flags
operator|.
name|SetValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|virtual
name|bool
name|IsScripted
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|std
operator|::
name|string
name|GetDescription
argument_list|()
operator|=
literal|0
expr_stmt|;
name|virtual
name|SyntheticChildrenFrontEnd
operator|::
name|AutoPointer
name|GetFrontEnd
argument_list|(
name|ValueObject
operator|&
name|backend
argument_list|)
operator|=
literal|0
expr_stmt|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|SyntheticChildren
operator|>
name|SharedPointer
expr_stmt|;
typedef|typedef
name|bool
argument_list|(
operator|*
name|SyntheticChildrenCallback
argument_list|)
argument_list|(
name|void
operator|*
argument_list|,
name|ConstString
argument_list|,
specifier|const
name|SyntheticChildren
operator|::
name|SharedPointer
operator|&
argument_list|)
expr_stmt|;
name|uint32_t
modifier|&
name|GetRevision
parameter_list|()
block|{
return|return
name|m_my_revision
return|;
block|}
name|protected
label|:
name|uint32_t
name|m_my_revision
decl_stmt|;
name|Flags
name|m_flags
decl_stmt|;
name|private
label|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|SyntheticChildren
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|TypeFilterImpl
range|:
name|public
name|SyntheticChildren
block|{
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
name|m_expression_paths
block|;
name|public
operator|:
name|TypeFilterImpl
argument_list|(
specifier|const
name|SyntheticChildren
operator|::
name|Flags
operator|&
name|flags
argument_list|)
operator|:
name|SyntheticChildren
argument_list|(
name|flags
argument_list|)
block|,
name|m_expression_paths
argument_list|()
block|{         }
name|TypeFilterImpl
argument_list|(
specifier|const
name|SyntheticChildren
operator|::
name|Flags
operator|&
name|flags
argument_list|,
specifier|const
name|std
operator|::
name|initializer_list
operator|<
specifier|const
name|char
operator|*
operator|>
name|items
argument_list|)
operator|:
name|SyntheticChildren
argument_list|(
name|flags
argument_list|)
block|,
name|m_expression_paths
argument_list|()
block|{
for|for
control|(
name|auto
name|path
range|:
name|items
control|)
name|AddExpressionPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|void
name|AddExpressionPath
argument_list|(
argument|const char* path
argument_list|)
block|{
name|AddExpressionPath
argument_list|(
name|std
operator|::
name|string
argument_list|(
name|path
argument_list|)
argument_list|)
block|;         }
name|void
name|Clear
argument_list|()
block|{
name|m_expression_paths
operator|.
name|clear
argument_list|()
block|;         }
name|size_t
name|GetCount
argument_list|()
specifier|const
block|{
return|return
name|m_expression_paths
operator|.
name|size
argument_list|()
return|;
block|}
specifier|const
name|char
operator|*
name|GetExpressionPathAtIndex
argument_list|(
argument|size_t i
argument_list|)
specifier|const
block|{
return|return
name|m_expression_paths
index|[
name|i
index|]
operator|.
name|c_str
argument_list|()
return|;
block|}
name|bool
name|SetExpressionPathAtIndex
argument_list|(
argument|size_t i
argument_list|,
argument|const char* path
argument_list|)
block|{
return|return
name|SetExpressionPathAtIndex
argument_list|(
name|i
argument_list|,
name|std
operator|::
name|string
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
name|void
name|AddExpressionPath
argument_list|(
argument|const std::string& path
argument_list|)
block|{
name|bool
name|need_add_dot
operator|=
name|true
block|;
if|if
condition|(
name|path
index|[
literal|0
index|]
operator|==
literal|'.'
operator|||
operator|(
name|path
index|[
literal|0
index|]
operator|==
literal|'-'
operator|&&
name|path
index|[
literal|1
index|]
operator|==
literal|'>'
operator|)
operator|||
name|path
index|[
literal|0
index|]
operator|==
literal|'['
condition|)
name|need_add_dot
operator|=
name|false
expr_stmt|;
comment|// add a '.' symbol to help forgetful users
if|if
condition|(
operator|!
name|need_add_dot
condition|)
name|m_expression_paths
operator|.
name|push_back
argument_list|(
name|path
argument_list|)
expr_stmt|;
else|else
name|m_expression_paths
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|string
argument_list|(
literal|"."
argument_list|)
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|bool
name|SetExpressionPathAtIndex
argument_list|(
name|size_t
name|i
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|path
argument_list|)
block|{
if|if
condition|(
name|i
operator|>=
name|GetCount
argument_list|()
condition|)
return|return
name|false
return|;
name|bool
name|need_add_dot
init|=
name|true
decl_stmt|;
if|if
condition|(
name|path
index|[
literal|0
index|]
operator|==
literal|'.'
operator|||
operator|(
name|path
index|[
literal|0
index|]
operator|==
literal|'-'
operator|&&
name|path
index|[
literal|1
index|]
operator|==
literal|'>'
operator|)
operator|||
name|path
index|[
literal|0
index|]
operator|==
literal|'['
condition|)
name|need_add_dot
operator|=
name|false
expr_stmt|;
comment|// add a '.' symbol to help forgetful users
if|if
condition|(
operator|!
name|need_add_dot
condition|)
name|m_expression_paths
index|[
name|i
index|]
operator|=
name|path
expr_stmt|;
else|else
name|m_expression_paths
index|[
name|i
index|]
operator|=
name|std
operator|::
name|string
argument_list|(
literal|"."
argument_list|)
operator|+
name|path
expr_stmt|;
return|return
name|true
return|;
block|}
end_decl_stmt

begin_function
name|bool
name|IsScripted
parameter_list|()
block|{
return|return
name|false
return|;
block|}
end_function

begin_expr_stmt
name|std
operator|::
name|string
name|GetDescription
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|class
name|FrontEnd
range|:
name|public
name|SyntheticChildrenFrontEnd
block|{
name|private
operator|:
name|TypeFilterImpl
operator|*
name|filter
block|;
name|public
operator|:
name|FrontEnd
argument_list|(
name|TypeFilterImpl
operator|*
name|flt
argument_list|,
name|ValueObject
operator|&
name|backend
argument_list|)
operator|:
name|SyntheticChildrenFrontEnd
argument_list|(
name|backend
argument_list|)
block|,
name|filter
argument_list|(
argument|flt
argument_list|)
block|{}
name|virtual
operator|~
name|FrontEnd
argument_list|()
block|{             }
name|virtual
name|size_t
name|CalculateNumChildren
argument_list|()
block|{
return|return
name|filter
operator|->
name|GetCount
argument_list|()
return|;
block|}
name|virtual
name|lldb
operator|::
name|ValueObjectSP
name|GetChildAtIndex
argument_list|(
argument|size_t idx
argument_list|)
block|{
if|if
condition|(
name|idx
operator|>=
name|filter
operator|->
name|GetCount
argument_list|()
condition|)
return|return
name|lldb
operator|::
name|ValueObjectSP
argument_list|()
return|;
return|return
name|m_backend
operator|.
name|GetSyntheticExpressionPathChild
argument_list|(
name|filter
operator|->
name|GetExpressionPathAtIndex
argument_list|(
name|idx
argument_list|)
argument_list|,
name|true
argument_list|)
return|;
block|}
end_decl_stmt

begin_function
name|virtual
name|bool
name|Update
parameter_list|()
block|{
return|return
name|false
return|;
block|}
end_function

begin_function
name|virtual
name|bool
name|MightHaveChildren
parameter_list|()
block|{
return|return
name|filter
operator|->
name|GetCount
argument_list|()
operator|>
literal|0
return|;
block|}
end_function

begin_function
name|virtual
name|size_t
name|GetIndexOfChildWithName
parameter_list|(
specifier|const
name|ConstString
modifier|&
name|name
parameter_list|)
block|{
specifier|const
name|char
modifier|*
name|name_cstr
init|=
name|name
operator|.
name|GetCString
argument_list|()
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filter
operator|->
name|GetCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|char
modifier|*
name|expr_cstr
init|=
name|filter
operator|->
name|GetExpressionPathAtIndex
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|expr_cstr
condition|)
block|{
if|if
condition|(
operator|*
name|expr_cstr
operator|==
literal|'.'
condition|)
name|expr_cstr
operator|++
expr_stmt|;
elseif|else
if|if
condition|(
operator|*
name|expr_cstr
operator|==
literal|'-'
operator|&&
operator|*
operator|(
name|expr_cstr
operator|+
literal|1
operator|)
operator|==
literal|'>'
condition|)
name|expr_cstr
operator|+=
literal|2
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|::
name|strcmp
argument_list|(
name|name_cstr
argument_list|,
name|expr_cstr
argument_list|)
condition|)
return|return
name|i
return|;
block|}
return|return
name|UINT32_MAX
return|;
block|}
end_function

begin_typedef
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|SyntheticChildrenFrontEnd
operator|>
name|SharedPointer
expr_stmt|;
end_typedef

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|FrontEnd
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|virtual
name|SyntheticChildrenFrontEnd
operator|::
name|AutoPointer
name|GetFrontEnd
argument_list|(
argument|ValueObject&backend
argument_list|)
block|{
return|return
name|SyntheticChildrenFrontEnd
operator|::
name|AutoPointer
argument_list|(
argument|new FrontEnd(this, backend)
argument_list|)
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|TypeFilterImpl
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
unit|};
name|class
name|CXXSyntheticChildren
range|:
name|public
name|SyntheticChildren
block|{
name|public
operator|:
typedef|typedef
name|SyntheticChildrenFrontEnd
modifier|*
typedef|(
modifier|*
name|CreateFrontEndCallback
typedef|)
parameter_list|(
name|CXXSyntheticChildren
modifier|*
parameter_list|,
typedef|lldb::
name|ValueObjectSP
typedef|);
name|protected
operator|:
name|CreateFrontEndCallback
name|m_create_callback
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|std
operator|::
name|string
name|m_description
expr_stmt|;
end_expr_stmt

begin_label
name|public
label|:
end_label

begin_macro
name|CXXSyntheticChildren
argument_list|(
argument|const SyntheticChildren::Flags& flags
argument_list|,
argument|const char* description
argument_list|,
argument|CreateFrontEndCallback callback
argument_list|)
end_macro

begin_expr_stmt
unit|:
name|SyntheticChildren
argument_list|(
name|flags
argument_list|)
operator|,
name|m_create_callback
argument_list|(
name|callback
argument_list|)
operator|,
name|m_description
argument_list|(
argument|description ? description :
literal|""
argument_list|)
block|{         }
name|bool
name|IsScripted
argument_list|()
block|{
return|return
name|false
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|string
name|GetDescription
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|virtual
name|SyntheticChildrenFrontEnd
operator|::
name|AutoPointer
name|GetFrontEnd
argument_list|(
argument|ValueObject&backend
argument_list|)
block|{
return|return
name|SyntheticChildrenFrontEnd
operator|::
name|AutoPointer
argument_list|(
name|m_create_callback
argument_list|(
name|this
argument_list|,
name|backend
operator|.
name|GetSP
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|CXXSyntheticChildren
argument_list|)
expr_stmt|;
end_expr_stmt

begin_ifndef
unit|};
ifndef|#
directive|ifndef
name|LLDB_DISABLE_PYTHON
end_ifndef

begin_decl_stmt
name|class
name|ScriptedSyntheticChildren
range|:
name|public
name|SyntheticChildren
block|{
name|std
operator|::
name|string
name|m_python_class
block|;
name|std
operator|::
name|string
name|m_python_code
block|;
name|public
operator|:
name|ScriptedSyntheticChildren
argument_list|(
specifier|const
name|SyntheticChildren
operator|::
name|Flags
operator|&
name|flags
argument_list|,
specifier|const
name|char
operator|*
name|pclass
argument_list|,
specifier|const
name|char
operator|*
name|pcode
operator|=
name|NULL
argument_list|)
operator|:
name|SyntheticChildren
argument_list|(
name|flags
argument_list|)
block|,
name|m_python_class
argument_list|()
block|,
name|m_python_code
argument_list|()
block|{
if|if
condition|(
name|pclass
condition|)
name|m_python_class
operator|=
name|pclass
expr_stmt|;
if|if
condition|(
name|pcode
condition|)
name|m_python_code
operator|=
name|pcode
expr_stmt|;
block|}
end_decl_stmt

begin_function
specifier|const
name|char
modifier|*
name|GetPythonClassName
parameter_list|()
block|{
return|return
name|m_python_class
operator|.
name|c_str
argument_list|()
return|;
block|}
end_function

begin_function
specifier|const
name|char
modifier|*
name|GetPythonCode
parameter_list|()
block|{
return|return
name|m_python_code
operator|.
name|c_str
argument_list|()
return|;
block|}
end_function

begin_function
name|void
name|SetPythonClassName
parameter_list|(
specifier|const
name|char
modifier|*
name|fname
parameter_list|)
block|{
name|m_python_class
operator|.
name|assign
argument_list|(
name|fname
argument_list|)
expr_stmt|;
name|m_python_code
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
name|void
name|SetPythonCode
parameter_list|(
specifier|const
name|char
modifier|*
name|script
parameter_list|)
block|{
name|m_python_code
operator|.
name|assign
argument_list|(
name|script
argument_list|)
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|std
operator|::
name|string
name|GetDescription
argument_list|()
expr_stmt|;
end_expr_stmt

begin_function
name|bool
name|IsScripted
parameter_list|()
block|{
return|return
name|true
return|;
block|}
end_function

begin_decl_stmt
name|class
name|FrontEnd
range|:
name|public
name|SyntheticChildrenFrontEnd
block|{
name|private
operator|:
name|std
operator|::
name|string
name|m_python_class
block|;
name|lldb
operator|::
name|ScriptInterpreterObjectSP
name|m_wrapper_sp
block|;
name|ScriptInterpreter
operator|*
name|m_interpreter
block|;
name|public
operator|:
name|FrontEnd
argument_list|(
argument|std::string pclass
argument_list|,
argument|ValueObject&backend
argument_list|)
block|;
name|bool
name|IsValid
argument_list|()
block|{
return|return
name|m_wrapper_sp
operator|.
name|get
argument_list|()
operator|!=
name|nullptr
operator|&&
name|m_wrapper_sp
operator|->
name|operator
name|bool
argument_list|()
operator|&&
name|m_interpreter
operator|!=
name|nullptr
return|;
block|}
name|virtual
operator|~
name|FrontEnd
argument_list|()
block|;
name|virtual
name|size_t
name|CalculateNumChildren
argument_list|()
block|{
if|if
condition|(
operator|!
name|m_wrapper_sp
operator|||
name|m_interpreter
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|m_interpreter
operator|->
name|CalculateNumChildren
argument_list|(
name|m_wrapper_sp
argument_list|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|virtual
name|lldb
operator|::
name|ValueObjectSP
name|GetChildAtIndex
argument_list|(
argument|size_t idx
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
name|virtual
name|bool
name|Update
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_wrapper_sp
operator|||
name|m_interpreter
operator|==
name|NULL
condition|)
return|return
name|false
return|;
return|return
name|m_interpreter
operator|->
name|UpdateSynthProviderInstance
argument_list|(
name|m_wrapper_sp
argument_list|)
return|;
block|}
end_function

begin_function
name|virtual
name|bool
name|MightHaveChildren
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_wrapper_sp
operator|||
name|m_interpreter
operator|==
name|NULL
condition|)
return|return
name|false
return|;
return|return
name|m_interpreter
operator|->
name|MightHaveChildrenSynthProviderInstance
argument_list|(
name|m_wrapper_sp
argument_list|)
return|;
block|}
end_function

begin_function
name|virtual
name|size_t
name|GetIndexOfChildWithName
parameter_list|(
specifier|const
name|ConstString
modifier|&
name|name
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_wrapper_sp
operator|||
name|m_interpreter
operator|==
name|NULL
condition|)
return|return
name|UINT32_MAX
return|;
return|return
name|m_interpreter
operator|->
name|GetIndexOfChildWithName
argument_list|(
name|m_wrapper_sp
argument_list|,
name|name
operator|.
name|GetCString
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_typedef
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|SyntheticChildrenFrontEnd
operator|>
name|SharedPointer
expr_stmt|;
end_typedef

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|FrontEnd
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|virtual
name|SyntheticChildrenFrontEnd
operator|::
name|AutoPointer
name|GetFrontEnd
argument_list|(
argument|ValueObject&backend
argument_list|)
block|{
name|auto
name|synth_ptr
operator|=
name|SyntheticChildrenFrontEnd
operator|::
name|AutoPointer
argument_list|(
argument|new FrontEnd(m_python_class, backend)
argument_list|)
block|;
if|if
condition|(
name|synth_ptr
operator|&&
operator|(
operator|(
name|FrontEnd
operator|*
operator|)
name|synth_ptr
operator|.
name|get
argument_list|()
operator|)
operator|->
name|IsValid
argument_list|()
condition|)
return|return
name|synth_ptr
return|;
end_expr_stmt

begin_return
return|return
name|NULL
return|;
end_return

begin_expr_stmt
unit|}              private:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|ScriptedSyntheticChildren
argument_list|)
expr_stmt|;
end_expr_stmt

begin_endif
unit|};
endif|#
directive|endif
end_endif

begin_comment
unit|}
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// lldb_TypeSynthetic_h_
end_comment

end_unit

