begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- StringPrinter.h -----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_StringPrinter_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_StringPrinter_h_
end_define

begin_comment
comment|// C Includes
end_comment

begin_comment
comment|// C++ Includes
end_comment

begin_include
include|#
directive|include
file|<functional>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_comment
comment|// Project includes
end_comment

begin_include
include|#
directive|include
file|"lldb/lldb-forward.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Utility/DataExtractor.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|namespace
name|formatters
block|{
name|class
name|StringPrinter
block|{
name|public
label|:
name|enum
name|class
name|StringElementType
block|{
name|ASCII
operator|,
name|UTF8
operator|,
name|UTF16
operator|,
name|UTF32
block|}
empty_stmt|;
name|enum
name|class
name|GetPrintableElementType
block|{
name|ASCII
operator|,
name|UTF8
block|}
empty_stmt|;
name|class
name|ReadStringAndDumpToStreamOptions
block|{
name|public
label|:
name|ReadStringAndDumpToStreamOptions
argument_list|()
operator|:
name|m_location
argument_list|(
literal|0
argument_list|)
operator|,
name|m_process_sp
argument_list|()
operator|,
name|m_stream
argument_list|(
name|nullptr
argument_list|)
operator|,
name|m_prefix_token
argument_list|()
operator|,
name|m_suffix_token
argument_list|()
operator|,
name|m_quote
argument_list|(
literal|'"'
argument_list|)
operator|,
name|m_source_size
argument_list|(
literal|0
argument_list|)
operator|,
name|m_needs_zero_termination
argument_list|(
name|true
argument_list|)
operator|,
name|m_escape_non_printables
argument_list|(
name|true
argument_list|)
operator|,
name|m_ignore_max_length
argument_list|(
name|false
argument_list|)
operator|,
name|m_zero_is_terminator
argument_list|(
name|true
argument_list|)
operator|,
name|m_language_type
argument_list|(
argument|lldb::eLanguageTypeUnknown
argument_list|)
block|{}
name|ReadStringAndDumpToStreamOptions
argument_list|(
name|ValueObject
operator|&
name|valobj
argument_list|)
expr_stmt|;
name|ReadStringAndDumpToStreamOptions
modifier|&
name|SetLocation
parameter_list|(
name|uint64_t
name|l
parameter_list|)
block|{
name|m_location
operator|=
name|l
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|uint64_t
name|GetLocation
argument_list|()
specifier|const
block|{
return|return
name|m_location
return|;
block|}
name|ReadStringAndDumpToStreamOptions
modifier|&
name|SetProcessSP
argument_list|(
name|lldb
operator|::
name|ProcessSP
name|p
argument_list|)
block|{
name|m_process_sp
operator|=
name|p
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|lldb
operator|::
name|ProcessSP
name|GetProcessSP
argument_list|()
specifier|const
block|{
return|return
name|m_process_sp
return|;
block|}
name|ReadStringAndDumpToStreamOptions
modifier|&
name|SetStream
parameter_list|(
name|Stream
modifier|*
name|s
parameter_list|)
block|{
name|m_stream
operator|=
name|s
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|Stream
operator|*
name|GetStream
argument_list|()
specifier|const
block|{
return|return
name|m_stream
return|;
block|}
name|ReadStringAndDumpToStreamOptions
modifier|&
name|SetPrefixToken
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|p
argument_list|)
block|{
name|m_prefix_token
operator|=
name|p
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|ReadStringAndDumpToStreamOptions
modifier|&
name|SetPrefixToken
argument_list|(
name|std
operator|::
name|nullptr_t
argument_list|)
block|{
name|m_prefix_token
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
specifier|const
name|char
operator|*
name|GetPrefixToken
argument_list|()
specifier|const
block|{
return|return
name|m_prefix_token
operator|.
name|c_str
argument_list|()
return|;
block|}
name|ReadStringAndDumpToStreamOptions
modifier|&
name|SetSuffixToken
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|p
argument_list|)
block|{
name|m_suffix_token
operator|=
name|p
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|ReadStringAndDumpToStreamOptions
modifier|&
name|SetSuffixToken
argument_list|(
name|std
operator|::
name|nullptr_t
argument_list|)
block|{
name|m_suffix_token
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
specifier|const
name|char
operator|*
name|GetSuffixToken
argument_list|()
specifier|const
block|{
return|return
name|m_suffix_token
operator|.
name|c_str
argument_list|()
return|;
block|}
name|ReadStringAndDumpToStreamOptions
modifier|&
name|SetQuote
parameter_list|(
name|char
name|q
parameter_list|)
block|{
name|m_quote
operator|=
name|q
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|char
name|GetQuote
argument_list|()
specifier|const
block|{
return|return
name|m_quote
return|;
block|}
name|ReadStringAndDumpToStreamOptions
modifier|&
name|SetSourceSize
parameter_list|(
name|uint32_t
name|s
parameter_list|)
block|{
name|m_source_size
operator|=
name|s
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|uint32_t
name|GetSourceSize
argument_list|()
specifier|const
block|{
return|return
name|m_source_size
return|;
block|}
name|ReadStringAndDumpToStreamOptions
modifier|&
name|SetNeedsZeroTermination
parameter_list|(
name|bool
name|z
parameter_list|)
block|{
name|m_needs_zero_termination
operator|=
name|z
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|GetNeedsZeroTermination
argument_list|()
specifier|const
block|{
return|return
name|m_needs_zero_termination
return|;
block|}
name|ReadStringAndDumpToStreamOptions
modifier|&
name|SetBinaryZeroIsTerminator
parameter_list|(
name|bool
name|e
parameter_list|)
block|{
name|m_zero_is_terminator
operator|=
name|e
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|GetBinaryZeroIsTerminator
argument_list|()
specifier|const
block|{
return|return
name|m_zero_is_terminator
return|;
block|}
name|ReadStringAndDumpToStreamOptions
modifier|&
name|SetEscapeNonPrintables
parameter_list|(
name|bool
name|e
parameter_list|)
block|{
name|m_escape_non_printables
operator|=
name|e
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|GetEscapeNonPrintables
argument_list|()
specifier|const
block|{
return|return
name|m_escape_non_printables
return|;
block|}
name|ReadStringAndDumpToStreamOptions
modifier|&
name|SetIgnoreMaxLength
parameter_list|(
name|bool
name|e
parameter_list|)
block|{
name|m_ignore_max_length
operator|=
name|e
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|GetIgnoreMaxLength
argument_list|()
specifier|const
block|{
return|return
name|m_ignore_max_length
return|;
block|}
name|ReadStringAndDumpToStreamOptions
modifier|&
name|SetLanguage
argument_list|(
name|lldb
operator|::
name|LanguageType
name|l
argument_list|)
block|{
name|m_language_type
operator|=
name|l
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|lldb
operator|::
name|LanguageType
name|GetLanguage
argument_list|()
specifier|const
block|{
return|return
name|m_language_type
return|;
block|}
name|private
label|:
name|uint64_t
name|m_location
decl_stmt|;
name|lldb
operator|::
name|ProcessSP
name|m_process_sp
expr_stmt|;
name|Stream
modifier|*
name|m_stream
decl_stmt|;
name|std
operator|::
name|string
name|m_prefix_token
expr_stmt|;
name|std
operator|::
name|string
name|m_suffix_token
expr_stmt|;
name|char
name|m_quote
decl_stmt|;
name|uint32_t
name|m_source_size
decl_stmt|;
name|bool
name|m_needs_zero_termination
decl_stmt|;
name|bool
name|m_escape_non_printables
decl_stmt|;
name|bool
name|m_ignore_max_length
decl_stmt|;
name|bool
name|m_zero_is_terminator
decl_stmt|;
name|lldb
operator|::
name|LanguageType
name|m_language_type
expr_stmt|;
block|}
empty_stmt|;
name|class
name|ReadBufferAndDumpToStreamOptions
block|{
name|public
label|:
name|ReadBufferAndDumpToStreamOptions
argument_list|()
operator|:
name|m_data
argument_list|()
operator|,
name|m_stream
argument_list|(
name|nullptr
argument_list|)
operator|,
name|m_prefix_token
argument_list|()
operator|,
name|m_suffix_token
argument_list|()
operator|,
name|m_quote
argument_list|(
literal|'"'
argument_list|)
operator|,
name|m_source_size
argument_list|(
literal|0
argument_list|)
operator|,
name|m_escape_non_printables
argument_list|(
name|true
argument_list|)
operator|,
name|m_zero_is_terminator
argument_list|(
name|true
argument_list|)
operator|,
name|m_is_truncated
argument_list|(
name|false
argument_list|)
operator|,
name|m_language_type
argument_list|(
argument|lldb::eLanguageTypeUnknown
argument_list|)
block|{}
name|ReadBufferAndDumpToStreamOptions
argument_list|(
name|ValueObject
operator|&
name|valobj
argument_list|)
expr_stmt|;
name|ReadBufferAndDumpToStreamOptions
argument_list|(
specifier|const
name|ReadStringAndDumpToStreamOptions
operator|&
name|options
argument_list|)
expr_stmt|;
name|ReadBufferAndDumpToStreamOptions
modifier|&
name|SetData
parameter_list|(
name|DataExtractor
name|d
parameter_list|)
block|{
name|m_data
operator|=
name|d
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|lldb_private
operator|::
name|DataExtractor
name|GetData
argument_list|()
specifier|const
block|{
return|return
name|m_data
return|;
block|}
name|ReadBufferAndDumpToStreamOptions
modifier|&
name|SetStream
parameter_list|(
name|Stream
modifier|*
name|s
parameter_list|)
block|{
name|m_stream
operator|=
name|s
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|Stream
operator|*
name|GetStream
argument_list|()
specifier|const
block|{
return|return
name|m_stream
return|;
block|}
name|ReadBufferAndDumpToStreamOptions
modifier|&
name|SetPrefixToken
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|p
argument_list|)
block|{
name|m_prefix_token
operator|=
name|p
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|ReadBufferAndDumpToStreamOptions
modifier|&
name|SetPrefixToken
argument_list|(
name|std
operator|::
name|nullptr_t
argument_list|)
block|{
name|m_prefix_token
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
specifier|const
name|char
operator|*
name|GetPrefixToken
argument_list|()
specifier|const
block|{
return|return
name|m_prefix_token
operator|.
name|c_str
argument_list|()
return|;
block|}
name|ReadBufferAndDumpToStreamOptions
modifier|&
name|SetSuffixToken
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|p
argument_list|)
block|{
name|m_suffix_token
operator|=
name|p
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|ReadBufferAndDumpToStreamOptions
modifier|&
name|SetSuffixToken
argument_list|(
name|std
operator|::
name|nullptr_t
argument_list|)
block|{
name|m_suffix_token
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
specifier|const
name|char
operator|*
name|GetSuffixToken
argument_list|()
specifier|const
block|{
return|return
name|m_suffix_token
operator|.
name|c_str
argument_list|()
return|;
block|}
name|ReadBufferAndDumpToStreamOptions
modifier|&
name|SetQuote
parameter_list|(
name|char
name|q
parameter_list|)
block|{
name|m_quote
operator|=
name|q
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|char
name|GetQuote
argument_list|()
specifier|const
block|{
return|return
name|m_quote
return|;
block|}
name|ReadBufferAndDumpToStreamOptions
modifier|&
name|SetSourceSize
parameter_list|(
name|uint32_t
name|s
parameter_list|)
block|{
name|m_source_size
operator|=
name|s
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|uint32_t
name|GetSourceSize
argument_list|()
specifier|const
block|{
return|return
name|m_source_size
return|;
block|}
name|ReadBufferAndDumpToStreamOptions
modifier|&
name|SetEscapeNonPrintables
parameter_list|(
name|bool
name|e
parameter_list|)
block|{
name|m_escape_non_printables
operator|=
name|e
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|GetEscapeNonPrintables
argument_list|()
specifier|const
block|{
return|return
name|m_escape_non_printables
return|;
block|}
name|ReadBufferAndDumpToStreamOptions
modifier|&
name|SetBinaryZeroIsTerminator
parameter_list|(
name|bool
name|e
parameter_list|)
block|{
name|m_zero_is_terminator
operator|=
name|e
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|GetBinaryZeroIsTerminator
argument_list|()
specifier|const
block|{
return|return
name|m_zero_is_terminator
return|;
block|}
name|ReadBufferAndDumpToStreamOptions
modifier|&
name|SetIsTruncated
parameter_list|(
name|bool
name|t
parameter_list|)
block|{
name|m_is_truncated
operator|=
name|t
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|GetIsTruncated
argument_list|()
specifier|const
block|{
return|return
name|m_is_truncated
return|;
block|}
name|ReadBufferAndDumpToStreamOptions
modifier|&
name|SetLanguage
argument_list|(
name|lldb
operator|::
name|LanguageType
name|l
argument_list|)
block|{
name|m_language_type
operator|=
name|l
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|lldb
operator|::
name|LanguageType
name|GetLanguage
argument_list|()
specifier|const
block|{
return|return
name|m_language_type
return|;
block|}
name|private
label|:
name|DataExtractor
name|m_data
decl_stmt|;
name|Stream
modifier|*
name|m_stream
decl_stmt|;
name|std
operator|::
name|string
name|m_prefix_token
expr_stmt|;
name|std
operator|::
name|string
name|m_suffix_token
expr_stmt|;
name|char
name|m_quote
decl_stmt|;
name|uint32_t
name|m_source_size
decl_stmt|;
name|bool
name|m_escape_non_printables
decl_stmt|;
name|bool
name|m_zero_is_terminator
decl_stmt|;
name|bool
name|m_is_truncated
decl_stmt|;
name|lldb
operator|::
name|LanguageType
name|m_language_type
expr_stmt|;
block|}
empty_stmt|;
comment|// I can't use a std::unique_ptr for this because the Deleter is a template
comment|// argument there
comment|// and I want the same type to represent both pointers I want to free and
comment|// pointers I don't need
comment|// to free - which is what this class essentially is
comment|// It's very specialized to the needs of this file, and not suggested for
comment|// general use
name|template
operator|<
name|typename
name|T
operator|=
name|uint8_t
operator|,
name|typename
name|U
operator|=
name|char
operator|,
name|typename
name|S
operator|=
name|size_t
operator|>
expr|struct
name|StringPrinterBufferPointer
block|{
name|public
operator|:
typedef|typedef
name|std
operator|::
name|function
operator|<
name|void
argument_list|(
specifier|const
name|T
operator|*
argument_list|)
operator|>
name|Deleter
expr_stmt|;
name|StringPrinterBufferPointer
argument_list|(
argument|std::nullptr_t ptr
argument_list|)
operator|:
name|m_data
argument_list|(
name|nullptr
argument_list|)
operator|,
name|m_size
argument_list|(
literal|0
argument_list|)
operator|,
name|m_deleter
argument_list|()
block|{}
name|StringPrinterBufferPointer
argument_list|(
argument|const T *bytes
argument_list|,
argument|S size
argument_list|,
argument|Deleter deleter = nullptr
argument_list|)
operator|:
name|m_data
argument_list|(
name|bytes
argument_list|)
operator|,
name|m_size
argument_list|(
name|size
argument_list|)
operator|,
name|m_deleter
argument_list|(
argument|deleter
argument_list|)
block|{}
name|StringPrinterBufferPointer
argument_list|(
argument|const U *bytes
argument_list|,
argument|S size
argument_list|,
argument|Deleter deleter = nullptr
argument_list|)
operator|:
name|m_data
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|bytes
operator|)
argument_list|)
operator|,
name|m_size
argument_list|(
name|size
argument_list|)
operator|,
name|m_deleter
argument_list|(
argument|deleter
argument_list|)
block|{}
name|StringPrinterBufferPointer
argument_list|(
name|StringPrinterBufferPointer
operator|&&
name|rhs
argument_list|)
operator|:
name|m_data
argument_list|(
name|rhs
operator|.
name|m_data
argument_list|)
operator|,
name|m_size
argument_list|(
name|rhs
operator|.
name|m_size
argument_list|)
operator|,
name|m_deleter
argument_list|(
argument|rhs.m_deleter
argument_list|)
block|{
name|rhs
operator|.
name|m_data
operator|=
name|nullptr
block|;     }
name|StringPrinterBufferPointer
argument_list|(
specifier|const
name|StringPrinterBufferPointer
operator|&
name|rhs
argument_list|)
operator|:
name|m_data
argument_list|(
name|rhs
operator|.
name|m_data
argument_list|)
operator|,
name|m_size
argument_list|(
name|rhs
operator|.
name|m_size
argument_list|)
operator|,
name|m_deleter
argument_list|(
argument|rhs.m_deleter
argument_list|)
block|{
name|rhs
operator|.
name|m_data
operator|=
name|nullptr
block|;
comment|// this is why m_data has to be mutable
block|}
operator|~
name|StringPrinterBufferPointer
argument_list|()
block|{
if|if
condition|(
name|m_data
operator|&&
name|m_deleter
condition|)
name|m_deleter
argument_list|(
name|m_data
argument_list|)
expr_stmt|;
name|m_data
operator|=
name|nullptr
expr_stmt|;
block|}
specifier|const
name|T
operator|*
name|GetBytes
argument_list|()
specifier|const
block|{
return|return
name|m_data
return|;
block|}
specifier|const
name|S
name|GetSize
argument_list|()
specifier|const
block|{
return|return
name|m_size
return|;
block|}
name|StringPrinterBufferPointer
modifier|&
name|operator
init|=
operator|(
specifier|const
name|StringPrinterBufferPointer
operator|&
name|rhs
operator|)
block|{
if|if
condition|(
name|m_data
operator|&&
name|m_deleter
condition|)
name|m_deleter
argument_list|(
name|m_data
argument_list|)
expr_stmt|;
name|m_data
operator|=
name|rhs
operator|.
name|m_data
decl_stmt|;
name|m_size
operator|=
name|rhs
operator|.
name|m_size
expr_stmt|;
name|m_deleter
operator|=
name|rhs
operator|.
name|m_deleter
expr_stmt|;
name|rhs
operator|.
name|m_data
operator|=
name|nullptr
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|private
label|:
name|mutable
specifier|const
name|T
modifier|*
name|m_data
decl_stmt|;
name|size_t
name|m_size
decl_stmt|;
name|Deleter
name|m_deleter
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_typedef
typedef|typedef
name|std
operator|::
name|function
operator|<
name|StringPrinter
operator|::
name|StringPrinterBufferPointer
operator|<
name|uint8_t
operator|,
name|char
operator|,
name|size_t
operator|>
operator|(
name|uint8_t
operator|*
operator|,
name|uint8_t
operator|*
operator|,
name|uint8_t
operator|*
operator|&
operator|)
operator|>
name|EscapingHelper
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|std
operator|::
name|function
operator|<
name|EscapingHelper
argument_list|(
name|GetPrintableElementType
argument_list|)
operator|>
name|EscapingHelperGenerator
expr_stmt|;
end_typedef

begin_function_decl
specifier|static
name|EscapingHelper
name|GetDefaultEscapingHelper
parameter_list|(
name|GetPrintableElementType
name|elem_type
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|template
operator|<
name|StringElementType
name|element_type
operator|>
specifier|static
name|bool
name|ReadStringAndDumpToStream
argument_list|(
specifier|const
name|ReadStringAndDumpToStreamOptions
operator|&
name|options
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|StringElementType
name|element_type
operator|>
specifier|static
name|bool
name|ReadBufferAndDumpToStream
argument_list|(
specifier|const
name|ReadBufferAndDumpToStreamOptions
operator|&
name|options
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|};  }
comment|// namespace formatters
end_comment

begin_comment
unit|}
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_StringPrinter_h_
end_comment

end_unit

