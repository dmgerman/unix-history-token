begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- SymbolVendor.h ------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_SymbolVendor_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_SymbolVendor_h_
end_define

begin_include
include|#
directive|include
file|<vector>
end_include

begin_include
include|#
directive|include
file|"lldb/Core/ModuleChild.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/PluginInterface.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Symbol/TypeList.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Symbol/TypeMap.h"
end_include

begin_include
include|#
directive|include
file|"lldb/lldb-private.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseSet.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
comment|//----------------------------------------------------------------------
comment|// The symbol vendor class is designed to abstract the process of
comment|// searching for debug information for a given module. Platforms can
comment|// subclass this class and provide extra ways to find debug information.
comment|// Examples would be a subclass that would allow for locating a stand
comment|// alone debug file, parsing debug maps, or runtime data in the object
comment|// files. A symbol vendor can use multiple sources (SymbolFile
comment|// objects) to provide the information and only parse as deep as needed
comment|// in order to provide the information that is requested.
comment|//----------------------------------------------------------------------
name|class
name|SymbolVendor
range|:
name|public
name|ModuleChild
decl_stmt|,
name|public
name|PluginInterface
block|{
name|public
label|:
specifier|static
name|SymbolVendor
modifier|*
name|FindPlugin
argument_list|(
specifier|const
name|lldb
operator|::
name|ModuleSP
operator|&
name|module_sp
argument_list|,
name|Stream
operator|*
name|feedback_strm
argument_list|)
decl_stmt|;
comment|//------------------------------------------------------------------
comment|// Constructors and Destructors
comment|//------------------------------------------------------------------
name|SymbolVendor
argument_list|(
specifier|const
name|lldb
operator|::
name|ModuleSP
operator|&
name|module_sp
argument_list|)
expr_stmt|;
operator|~
name|SymbolVendor
argument_list|()
name|override
expr_stmt|;
name|void
name|AddSymbolFileRepresentation
argument_list|(
specifier|const
name|lldb
operator|::
name|ObjectFileSP
operator|&
name|objfile_sp
argument_list|)
decl_stmt|;
name|virtual
name|void
name|Dump
parameter_list|(
name|Stream
modifier|*
name|s
parameter_list|)
function_decl|;
name|virtual
name|lldb
operator|::
name|LanguageType
name|ParseCompileUnitLanguage
argument_list|(
specifier|const
name|SymbolContext
operator|&
name|sc
argument_list|)
expr_stmt|;
name|virtual
name|size_t
name|ParseCompileUnitFunctions
parameter_list|(
specifier|const
name|SymbolContext
modifier|&
name|sc
parameter_list|)
function_decl|;
name|virtual
name|bool
name|ParseCompileUnitLineTable
parameter_list|(
specifier|const
name|SymbolContext
modifier|&
name|sc
parameter_list|)
function_decl|;
name|virtual
name|bool
name|ParseCompileUnitDebugMacros
parameter_list|(
specifier|const
name|SymbolContext
modifier|&
name|sc
parameter_list|)
function_decl|;
name|virtual
name|bool
name|ParseCompileUnitSupportFiles
parameter_list|(
specifier|const
name|SymbolContext
modifier|&
name|sc
parameter_list|,
name|FileSpecList
modifier|&
name|support_files
parameter_list|)
function_decl|;
name|virtual
name|bool
name|ParseCompileUnitIsOptimized
parameter_list|(
specifier|const
name|SymbolContext
modifier|&
name|sc
parameter_list|)
function_decl|;
name|virtual
name|bool
name|ParseImportedModules
argument_list|(
specifier|const
name|SymbolContext
operator|&
name|sc
argument_list|,
name|std
operator|::
name|vector
operator|<
name|ConstString
operator|>
operator|&
name|imported_modules
argument_list|)
decl_stmt|;
name|virtual
name|size_t
name|ParseFunctionBlocks
parameter_list|(
specifier|const
name|SymbolContext
modifier|&
name|sc
parameter_list|)
function_decl|;
name|virtual
name|size_t
name|ParseTypes
parameter_list|(
specifier|const
name|SymbolContext
modifier|&
name|sc
parameter_list|)
function_decl|;
name|virtual
name|size_t
name|ParseVariablesForContext
parameter_list|(
specifier|const
name|SymbolContext
modifier|&
name|sc
parameter_list|)
function_decl|;
name|virtual
name|Type
modifier|*
name|ResolveTypeUID
argument_list|(
name|lldb
operator|::
name|user_id_t
name|type_uid
argument_list|)
decl_stmt|;
name|virtual
name|uint32_t
name|ResolveSymbolContext
parameter_list|(
specifier|const
name|Address
modifier|&
name|so_addr
parameter_list|,
name|uint32_t
name|resolve_scope
parameter_list|,
name|SymbolContext
modifier|&
name|sc
parameter_list|)
function_decl|;
name|virtual
name|uint32_t
name|ResolveSymbolContext
parameter_list|(
specifier|const
name|FileSpec
modifier|&
name|file_spec
parameter_list|,
name|uint32_t
name|line
parameter_list|,
name|bool
name|check_inlines
parameter_list|,
name|uint32_t
name|resolve_scope
parameter_list|,
name|SymbolContextList
modifier|&
name|sc_list
parameter_list|)
function_decl|;
name|virtual
name|size_t
name|FindGlobalVariables
parameter_list|(
specifier|const
name|ConstString
modifier|&
name|name
parameter_list|,
specifier|const
name|CompilerDeclContext
modifier|*
name|parent_decl_ctx
parameter_list|,
name|bool
name|append
parameter_list|,
name|size_t
name|max_matches
parameter_list|,
name|VariableList
modifier|&
name|variables
parameter_list|)
function_decl|;
name|virtual
name|size_t
name|FindGlobalVariables
parameter_list|(
specifier|const
name|RegularExpression
modifier|&
name|regex
parameter_list|,
name|bool
name|append
parameter_list|,
name|size_t
name|max_matches
parameter_list|,
name|VariableList
modifier|&
name|variables
parameter_list|)
function_decl|;
name|virtual
name|size_t
name|FindFunctions
parameter_list|(
specifier|const
name|ConstString
modifier|&
name|name
parameter_list|,
specifier|const
name|CompilerDeclContext
modifier|*
name|parent_decl_ctx
parameter_list|,
name|uint32_t
name|name_type_mask
parameter_list|,
name|bool
name|include_inlines
parameter_list|,
name|bool
name|append
parameter_list|,
name|SymbolContextList
modifier|&
name|sc_list
parameter_list|)
function_decl|;
name|virtual
name|size_t
name|FindFunctions
parameter_list|(
specifier|const
name|RegularExpression
modifier|&
name|regex
parameter_list|,
name|bool
name|include_inlines
parameter_list|,
name|bool
name|append
parameter_list|,
name|SymbolContextList
modifier|&
name|sc_list
parameter_list|)
function_decl|;
name|virtual
name|size_t
name|FindTypes
argument_list|(
specifier|const
name|SymbolContext
operator|&
name|sc
argument_list|,
specifier|const
name|ConstString
operator|&
name|name
argument_list|,
specifier|const
name|CompilerDeclContext
operator|*
name|parent_decl_ctx
argument_list|,
name|bool
name|append
argument_list|,
name|size_t
name|max_matches
argument_list|,
name|llvm
operator|::
name|DenseSet
operator|<
name|lldb_private
operator|::
name|SymbolFile
operator|*
operator|>
operator|&
name|searched_symbol_files
argument_list|,
name|TypeMap
operator|&
name|types
argument_list|)
decl_stmt|;
name|virtual
name|size_t
name|FindTypes
argument_list|(
specifier|const
name|std
operator|::
name|vector
operator|<
name|CompilerContext
operator|>
operator|&
name|context
argument_list|,
name|bool
name|append
argument_list|,
name|TypeMap
operator|&
name|types
argument_list|)
decl_stmt|;
name|virtual
name|CompilerDeclContext
name|FindNamespace
parameter_list|(
specifier|const
name|SymbolContext
modifier|&
name|sc
parameter_list|,
specifier|const
name|ConstString
modifier|&
name|name
parameter_list|,
specifier|const
name|CompilerDeclContext
modifier|*
name|parent_decl_ctx
parameter_list|)
function_decl|;
name|virtual
name|size_t
name|GetNumCompileUnits
parameter_list|()
function_decl|;
name|virtual
name|bool
name|SetCompileUnitAtIndex
argument_list|(
name|size_t
name|cu_idx
argument_list|,
specifier|const
name|lldb
operator|::
name|CompUnitSP
operator|&
name|cu_sp
argument_list|)
decl_stmt|;
name|virtual
name|lldb
operator|::
name|CompUnitSP
name|GetCompileUnitAtIndex
argument_list|(
argument|size_t idx
argument_list|)
expr_stmt|;
name|TypeList
modifier|&
name|GetTypeList
parameter_list|()
block|{
return|return
name|m_type_list
return|;
block|}
specifier|const
name|TypeList
operator|&
name|GetTypeList
argument_list|()
specifier|const
block|{
return|return
name|m_type_list
return|;
block|}
name|virtual
name|size_t
name|GetTypes
parameter_list|(
name|SymbolContextScope
modifier|*
name|sc_scope
parameter_list|,
name|uint32_t
name|type_mask
parameter_list|,
name|TypeList
modifier|&
name|type_list
parameter_list|)
function_decl|;
name|SymbolFile
modifier|*
name|GetSymbolFile
parameter_list|()
block|{
return|return
name|m_sym_file_ap
operator|.
name|get
argument_list|()
return|;
block|}
name|FileSpec
name|GetMainFileSpec
argument_list|()
specifier|const
expr_stmt|;
comment|// Get module unified section list symbol table.
name|virtual
name|Symtab
modifier|*
name|GetSymtab
parameter_list|()
function_decl|;
comment|// Clear module unified section list symbol table.
name|virtual
name|void
name|ClearSymtab
parameter_list|()
function_decl|;
comment|//------------------------------------------------------------------
comment|/// Notify the SymbolVendor that the file addresses in the Sections
comment|/// for this module have been changed.
comment|//------------------------------------------------------------------
name|virtual
name|void
name|SectionFileAddressesChanged
parameter_list|()
function_decl|;
comment|//------------------------------------------------------------------
comment|// PluginInterface protocol
comment|//------------------------------------------------------------------
name|ConstString
name|GetPluginName
argument_list|()
name|override
expr_stmt|;
name|uint32_t
name|GetPluginVersion
argument_list|()
name|override
expr_stmt|;
name|protected
label|:
comment|//------------------------------------------------------------------
comment|// Classes that inherit from SymbolVendor can see and modify these
comment|//------------------------------------------------------------------
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|lldb
operator|::
name|CompUnitSP
operator|>
name|CompileUnits
expr_stmt|;
typedef|typedef
name|CompileUnits
operator|::
name|iterator
name|CompileUnitIter
expr_stmt|;
typedef|typedef
name|CompileUnits
operator|::
name|const_iterator
name|CompileUnitConstIter
expr_stmt|;
name|TypeList
name|m_type_list
decl_stmt|;
comment|// Uniqued types for all parsers owned by this module
name|CompileUnits
name|m_compile_units
decl_stmt|;
comment|// The current compile units
name|lldb
operator|::
name|ObjectFileSP
name|m_objfile_sp
expr_stmt|;
comment|// Keep a reference to the object file in
comment|// case it isn't the same as the module
comment|// object file (debug symbols in a separate
comment|// file)
name|std
operator|::
name|unique_ptr
operator|<
name|SymbolFile
operator|>
name|m_sym_file_ap
expr_stmt|;
comment|// A single symbol file. Subclasses
comment|// can add more of these if needed.
name|private
label|:
comment|//------------------------------------------------------------------
comment|// For SymbolVendor only
comment|//------------------------------------------------------------------
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|SymbolVendor
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_SymbolVendor_h_
end_comment

end_unit

