begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- ClangASTContext.h ---------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_ClangASTContext_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_ClangASTContext_h_
end_define

begin_comment
comment|// C Includes
end_comment

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_comment
comment|// C++ Includes
end_comment

begin_include
include|#
directive|include
file|<functional>
end_include

begin_include
include|#
directive|include
file|<initializer_list>
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_include
include|#
directive|include
file|<memory>
end_include

begin_include
include|#
directive|include
file|<set>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<utility>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_include
include|#
directive|include
file|"clang/AST/ASTContext.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/TemplateBase.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_comment
comment|// Project includes
end_comment

begin_include
include|#
directive|include
file|"Plugins/ExpressionParser/Clang/ClangPersistentVariables.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/ClangForward.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Symbol/CompilerType.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Symbol/TypeSystem.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Utility/ConstString.h"
end_include

begin_include
include|#
directive|include
file|"lldb/lldb-enumerations.h"
end_include

begin_decl_stmt
name|class
name|DWARFASTParserClang
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|PDBASTParser
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|Declaration
decl_stmt|;
name|class
name|ClangASTContext
range|:
name|public
name|TypeSystem
block|{
name|public
operator|:
typedef|typedef
name|void
argument_list|(
operator|*
name|CompleteTagDeclCallback
argument_list|)
argument_list|(
name|void
operator|*
name|baton
argument_list|,
name|clang
operator|::
name|TagDecl
operator|*
argument_list|)
expr_stmt|;
typedef|typedef
name|void
argument_list|(
operator|*
name|CompleteObjCInterfaceDeclCallback
argument_list|)
argument_list|(
name|void
operator|*
name|baton
argument_list|,
name|clang
operator|::
name|ObjCInterfaceDecl
operator|*
argument_list|)
expr_stmt|;
comment|//------------------------------------------------------------------
comment|// llvm casting support
comment|//------------------------------------------------------------------
specifier|static
name|bool
name|classof
parameter_list|(
specifier|const
name|TypeSystem
modifier|*
name|ts
parameter_list|)
block|{
return|return
name|ts
operator|->
name|getKind
argument_list|()
operator|==
name|TypeSystem
operator|::
name|eKindClang
return|;
block|}
comment|//------------------------------------------------------------------
comment|// Constructors and Destructors
comment|//------------------------------------------------------------------
name|ClangASTContext
argument_list|(
specifier|const
name|char
operator|*
name|triple
operator|=
name|nullptr
argument_list|)
expr_stmt|;
operator|~
name|ClangASTContext
argument_list|()
name|override
expr_stmt|;
name|void
name|Finalize
argument_list|()
name|override
expr_stmt|;
comment|//------------------------------------------------------------------
comment|// PluginInterface functions
comment|//------------------------------------------------------------------
name|ConstString
name|GetPluginName
argument_list|()
name|override
expr_stmt|;
name|uint32_t
name|GetPluginVersion
argument_list|()
name|override
expr_stmt|;
specifier|static
name|ConstString
name|GetPluginNameStatic
parameter_list|()
function_decl|;
specifier|static
name|lldb
operator|::
name|TypeSystemSP
name|CreateInstance
argument_list|(
argument|lldb::LanguageType language
argument_list|,
argument|Module *module
argument_list|,
argument|Target *target
argument_list|)
expr_stmt|;
specifier|static
name|void
name|EnumerateSupportedLanguages
argument_list|(
name|std
operator|::
name|set
operator|<
name|lldb
operator|::
name|LanguageType
operator|>
operator|&
name|languages_for_types
argument_list|,
name|std
operator|::
name|set
operator|<
name|lldb
operator|::
name|LanguageType
operator|>
operator|&
name|languages_for_expressions
argument_list|)
decl_stmt|;
specifier|static
name|void
name|Initialize
parameter_list|()
function_decl|;
specifier|static
name|void
name|Terminate
parameter_list|()
function_decl|;
specifier|static
name|ClangASTContext
modifier|*
name|GetASTContext
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|ast_ctx
argument_list|)
decl_stmt|;
name|clang
operator|::
name|ASTContext
operator|*
name|getASTContext
argument_list|()
expr_stmt|;
name|void
name|setASTContext
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|ast_ctx
argument_list|)
decl_stmt|;
name|clang
operator|::
name|Builtin
operator|::
name|Context
operator|*
name|getBuiltinContext
argument_list|()
expr_stmt|;
name|clang
operator|::
name|IdentifierTable
operator|*
name|getIdentifierTable
argument_list|()
expr_stmt|;
name|clang
operator|::
name|LangOptions
operator|*
name|getLanguageOptions
argument_list|()
expr_stmt|;
name|clang
operator|::
name|SelectorTable
operator|*
name|getSelectorTable
argument_list|()
expr_stmt|;
name|clang
operator|::
name|FileManager
operator|*
name|getFileManager
argument_list|()
expr_stmt|;
name|clang
operator|::
name|SourceManager
operator|*
name|getSourceManager
argument_list|()
expr_stmt|;
name|clang
operator|::
name|DiagnosticsEngine
operator|*
name|getDiagnosticsEngine
argument_list|()
expr_stmt|;
name|clang
operator|::
name|DiagnosticConsumer
operator|*
name|getDiagnosticConsumer
argument_list|()
expr_stmt|;
name|clang
operator|::
name|MangleContext
operator|*
name|getMangleContext
argument_list|()
expr_stmt|;
name|std
operator|::
name|shared_ptr
operator|<
name|clang
operator|::
name|TargetOptions
operator|>
operator|&
name|getTargetOptions
argument_list|()
expr_stmt|;
name|clang
operator|::
name|TargetInfo
operator|*
name|getTargetInfo
argument_list|()
expr_stmt|;
name|void
name|Clear
parameter_list|()
function_decl|;
specifier|const
name|char
modifier|*
name|GetTargetTriple
parameter_list|()
function_decl|;
name|void
name|SetTargetTriple
parameter_list|(
specifier|const
name|char
modifier|*
name|target_triple
parameter_list|)
function_decl|;
name|void
name|SetArchitecture
parameter_list|(
specifier|const
name|ArchSpec
modifier|&
name|arch
parameter_list|)
function_decl|;
name|bool
name|HasExternalSource
parameter_list|()
function_decl|;
name|void
name|SetExternalSource
argument_list|(
name|llvm
operator|::
name|IntrusiveRefCntPtr
operator|<
name|clang
operator|::
name|ExternalASTSource
operator|>
operator|&
name|ast_source_ap
argument_list|)
decl_stmt|;
name|void
name|RemoveExternalSource
parameter_list|()
function_decl|;
name|bool
name|GetCompleteDecl
argument_list|(
name|clang
operator|::
name|Decl
operator|*
name|decl
argument_list|)
block|{
return|return
name|ClangASTContext
operator|::
name|GetCompleteDecl
argument_list|(
name|getASTContext
argument_list|()
argument_list|,
name|decl
argument_list|)
return|;
block|}
specifier|static
name|void
name|DumpDeclHiearchy
argument_list|(
name|clang
operator|::
name|Decl
operator|*
name|decl
argument_list|)
decl_stmt|;
specifier|static
name|void
name|DumpDeclContextHiearchy
argument_list|(
name|clang
operator|::
name|DeclContext
operator|*
name|decl_ctx
argument_list|)
decl_stmt|;
specifier|static
name|bool
name|DeclsAreEquivalent
argument_list|(
name|clang
operator|::
name|Decl
operator|*
name|lhs_decl
argument_list|,
name|clang
operator|::
name|Decl
operator|*
name|rhs_decl
argument_list|)
decl_stmt|;
specifier|static
name|bool
name|GetCompleteDecl
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|ast
argument_list|,
name|clang
operator|::
name|Decl
operator|*
name|decl
argument_list|)
decl_stmt|;
name|void
name|SetMetadataAsUserID
argument_list|(
specifier|const
name|void
operator|*
name|object
argument_list|,
name|lldb
operator|::
name|user_id_t
name|user_id
argument_list|)
decl_stmt|;
name|void
name|SetMetadata
parameter_list|(
specifier|const
name|void
modifier|*
name|object
parameter_list|,
name|ClangASTMetadata
modifier|&
name|meta_data
parameter_list|)
block|{
name|SetMetadata
argument_list|(
name|getASTContext
argument_list|()
argument_list|,
name|object
argument_list|,
name|meta_data
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|SetMetadata
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|ast
argument_list|,
specifier|const
name|void
operator|*
name|object
argument_list|,
name|ClangASTMetadata
operator|&
name|meta_data
argument_list|)
decl_stmt|;
name|ClangASTMetadata
modifier|*
name|GetMetadata
parameter_list|(
specifier|const
name|void
modifier|*
name|object
parameter_list|)
block|{
return|return
name|GetMetadata
argument_list|(
name|getASTContext
argument_list|()
argument_list|,
name|object
argument_list|)
return|;
block|}
specifier|static
name|ClangASTMetadata
modifier|*
name|GetMetadata
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|ast
argument_list|,
specifier|const
name|void
operator|*
name|object
argument_list|)
decl_stmt|;
comment|//------------------------------------------------------------------
comment|// Basic Types
comment|//------------------------------------------------------------------
name|CompilerType
name|GetBuiltinTypeForEncodingAndBitSize
argument_list|(
name|lldb
operator|::
name|Encoding
name|encoding
argument_list|,
name|size_t
name|bit_size
argument_list|)
name|override
decl_stmt|;
specifier|static
name|CompilerType
name|GetBuiltinTypeForEncodingAndBitSize
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|ast
argument_list|,
name|lldb
operator|::
name|Encoding
name|encoding
argument_list|,
name|uint32_t
name|bit_size
argument_list|)
decl_stmt|;
name|CompilerType
name|GetBasicType
argument_list|(
name|lldb
operator|::
name|BasicType
name|type
argument_list|)
decl_stmt|;
specifier|static
name|CompilerType
name|GetBasicType
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|ast
argument_list|,
name|lldb
operator|::
name|BasicType
name|type
argument_list|)
decl_stmt|;
specifier|static
name|CompilerType
name|GetBasicType
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|ast
argument_list|,
specifier|const
name|ConstString
operator|&
name|name
argument_list|)
decl_stmt|;
specifier|static
name|lldb
operator|::
name|BasicType
name|GetBasicTypeEnumeration
argument_list|(
specifier|const
name|ConstString
operator|&
name|name
argument_list|)
expr_stmt|;
name|CompilerType
name|GetBuiltinTypeForDWARFEncodingAndBitSize
parameter_list|(
specifier|const
name|char
modifier|*
name|type_name
parameter_list|,
name|uint32_t
name|dw_ate
parameter_list|,
name|uint32_t
name|bit_size
parameter_list|)
function_decl|;
name|CompilerType
name|GetCStringType
parameter_list|(
name|bool
name|is_const
parameter_list|)
function_decl|;
specifier|static
name|CompilerType
name|GetUnknownAnyType
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|ast
argument_list|)
decl_stmt|;
name|CompilerType
name|GetUnknownAnyType
parameter_list|()
block|{
return|return
name|ClangASTContext
operator|::
name|GetUnknownAnyType
argument_list|(
name|getASTContext
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|clang
operator|::
name|DeclContext
operator|*
name|GetDeclContextForType
argument_list|(
argument|clang::QualType type
argument_list|)
expr_stmt|;
specifier|static
name|clang
operator|::
name|DeclContext
operator|*
name|GetDeclContextForType
argument_list|(
specifier|const
name|CompilerType
operator|&
name|type
argument_list|)
expr_stmt|;
name|uint32_t
name|GetPointerByteSize
argument_list|()
name|override
expr_stmt|;
specifier|static
name|clang
operator|::
name|DeclContext
operator|*
name|GetTranslationUnitDecl
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|ast
argument_list|)
expr_stmt|;
name|clang
operator|::
name|DeclContext
operator|*
name|GetTranslationUnitDecl
argument_list|()
block|{
return|return
name|GetTranslationUnitDecl
argument_list|(
name|getASTContext
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|clang
operator|::
name|Decl
operator|*
name|CopyDecl
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|dest_context
argument_list|,
name|clang
operator|::
name|ASTContext
operator|*
name|source_context
argument_list|,
name|clang
operator|::
name|Decl
operator|*
name|source_decl
argument_list|)
expr_stmt|;
specifier|static
name|bool
name|AreTypesSame
parameter_list|(
name|CompilerType
name|type1
parameter_list|,
name|CompilerType
name|type2
parameter_list|,
name|bool
name|ignore_qualifiers
init|=
name|false
parameter_list|)
function_decl|;
specifier|static
name|CompilerType
name|GetTypeForDecl
argument_list|(
name|clang
operator|::
name|NamedDecl
operator|*
name|decl
argument_list|)
decl_stmt|;
specifier|static
name|CompilerType
name|GetTypeForDecl
argument_list|(
name|clang
operator|::
name|TagDecl
operator|*
name|decl
argument_list|)
decl_stmt|;
specifier|static
name|CompilerType
name|GetTypeForDecl
argument_list|(
name|clang
operator|::
name|ObjCInterfaceDecl
operator|*
name|objc_decl
argument_list|)
decl_stmt|;
name|template
operator|<
name|typename
name|RecordDeclType
operator|>
name|CompilerType
name|GetTypeForIdentifier
argument_list|(
argument|const ConstString&type_name
argument_list|)
block|{
name|CompilerType
name|compiler_type
block|;
if|if
condition|(
name|type_name
operator|.
name|GetLength
argument_list|()
condition|)
block|{
name|clang
operator|::
name|ASTContext
operator|*
name|ast
operator|=
name|getASTContext
argument_list|()
expr_stmt|;
if|if
condition|(
name|ast
condition|)
block|{
name|clang
operator|::
name|IdentifierInfo
operator|&
name|myIdent
operator|=
name|ast
operator|->
name|Idents
operator|.
name|get
argument_list|(
name|type_name
operator|.
name|GetCString
argument_list|()
argument_list|)
expr_stmt|;
name|clang
operator|::
name|DeclarationName
name|myName
operator|=
name|ast
operator|->
name|DeclarationNames
operator|.
name|getIdentifier
argument_list|(
operator|&
name|myIdent
argument_list|)
expr_stmt|;
name|clang
operator|::
name|DeclContext
operator|::
name|lookup_result
name|result
operator|=
name|ast
operator|->
name|getTranslationUnitDecl
argument_list|()
operator|->
name|lookup
argument_list|(
name|myName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|empty
argument_list|()
condition|)
block|{
name|clang
operator|::
name|NamedDecl
operator|*
name|named_decl
operator|=
name|result
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
specifier|const
name|RecordDeclType
modifier|*
name|record_decl
init|=
name|llvm
operator|::
name|dyn_cast
operator|<
name|RecordDeclType
operator|>
operator|(
name|named_decl
operator|)
condition|)
name|compiler_type
operator|.
name|SetCompilerType
argument_list|(
name|ast
argument_list|,
name|clang
operator|::
name|QualType
argument_list|(
name|record_decl
operator|->
name|getTypeForDecl
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|compiler_type
return|;
block|}
name|CompilerType
name|CreateStructForIdentifier
argument_list|(
specifier|const
name|ConstString
operator|&
name|type_name
argument_list|,
specifier|const
name|std
operator|::
name|initializer_list
operator|<
name|std
operator|::
name|pair
operator|<
specifier|const
name|char
operator|*
argument_list|,
name|CompilerType
operator|>>
operator|&
name|type_fields
argument_list|,
name|bool
name|packed
operator|=
name|false
argument_list|)
decl_stmt|;
name|CompilerType
name|GetOrCreateStructForIdentifier
argument_list|(
specifier|const
name|ConstString
operator|&
name|type_name
argument_list|,
specifier|const
name|std
operator|::
name|initializer_list
operator|<
name|std
operator|::
name|pair
operator|<
specifier|const
name|char
operator|*
argument_list|,
name|CompilerType
operator|>>
operator|&
name|type_fields
argument_list|,
name|bool
name|packed
operator|=
name|false
argument_list|)
decl_stmt|;
comment|//------------------------------------------------------------------
comment|// Structure, Unions, Classes
comment|//------------------------------------------------------------------
specifier|static
name|clang
operator|::
name|AccessSpecifier
name|ConvertAccessTypeToAccessSpecifier
argument_list|(
argument|lldb::AccessType access
argument_list|)
expr_stmt|;
specifier|static
name|clang
operator|::
name|AccessSpecifier
name|UnifyAccessSpecifiers
argument_list|(
argument|clang::AccessSpecifier lhs
argument_list|,
argument|clang::AccessSpecifier rhs
argument_list|)
expr_stmt|;
specifier|static
name|uint32_t
name|GetNumBaseClasses
argument_list|(
specifier|const
name|clang
operator|::
name|CXXRecordDecl
operator|*
name|cxx_record_decl
argument_list|,
name|bool
name|omit_empty_base_classes
argument_list|)
decl_stmt|;
name|CompilerType
name|CreateRecordType
argument_list|(
name|clang
operator|::
name|DeclContext
operator|*
name|decl_ctx
argument_list|,
name|lldb
operator|::
name|AccessType
name|access_type
argument_list|,
specifier|const
name|char
operator|*
name|name
argument_list|,
name|int
name|kind
argument_list|,
name|lldb
operator|::
name|LanguageType
name|language
argument_list|,
name|ClangASTMetadata
operator|*
name|metadata
operator|=
name|nullptr
argument_list|)
decl_stmt|;
name|class
name|TemplateParameterInfos
block|{
name|public
label|:
name|bool
name|IsValid
argument_list|()
specifier|const
block|{
if|if
condition|(
name|args
operator|.
name|empty
argument_list|()
condition|)
return|return
name|false
return|;
return|return
name|args
operator|.
name|size
argument_list|()
operator|==
name|names
operator|.
name|size
argument_list|()
return|;
block|}
name|size_t
name|GetSize
argument_list|()
specifier|const
block|{
if|if
condition|(
name|IsValid
argument_list|()
condition|)
return|return
name|args
operator|.
name|size
argument_list|()
return|;
return|return
literal|0
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|llvm
operator|::
name|SmallVector
operator|<
specifier|const
name|char
operator|*
operator|,
literal|2
operator|>
name|names
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|llvm
operator|::
name|SmallVector
operator|<
name|clang
operator|::
name|TemplateArgument
operator|,
literal|2
operator|>
name|args
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|clang
operator|::
name|FunctionTemplateDecl
operator|*
name|CreateFunctionTemplateDecl
argument_list|(
name|clang
operator|::
name|DeclContext
operator|*
name|decl_ctx
argument_list|,
name|clang
operator|::
name|FunctionDecl
operator|*
name|func_decl
argument_list|,
specifier|const
name|char
operator|*
name|name
argument_list|,
specifier|const
name|TemplateParameterInfos
operator|&
name|infos
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|CreateFunctionTemplateSpecializationInfo
argument_list|(
name|clang
operator|::
name|FunctionDecl
operator|*
name|func_decl
argument_list|,
name|clang
operator|::
name|FunctionTemplateDecl
operator|*
name|Template
argument_list|,
specifier|const
name|TemplateParameterInfos
operator|&
name|infos
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|clang
operator|::
name|ClassTemplateDecl
operator|*
name|CreateClassTemplateDecl
argument_list|(
argument|clang::DeclContext *decl_ctx
argument_list|,
argument|lldb::AccessType access_type
argument_list|,
argument|const char *class_name
argument_list|,
argument|int kind
argument_list|,
argument|const TemplateParameterInfos&infos
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|clang
operator|::
name|ClassTemplateSpecializationDecl
operator|*
name|CreateClassTemplateSpecializationDecl
argument_list|(
argument|clang::DeclContext *decl_ctx
argument_list|,
argument|clang::ClassTemplateDecl *class_template_decl
argument_list|,
argument|int kind
argument_list|,
argument|const TemplateParameterInfos&infos
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|CompilerType
name|CreateClassTemplateSpecializationType
argument_list|(
name|clang
operator|::
name|ClassTemplateSpecializationDecl
operator|*
name|class_template_specialization_decl
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
specifier|static
name|clang
operator|::
name|DeclContext
operator|*
name|GetAsDeclContext
argument_list|(
name|clang
operator|::
name|CXXMethodDecl
operator|*
name|cxx_method_decl
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|clang
operator|::
name|DeclContext
operator|*
name|GetAsDeclContext
argument_list|(
name|clang
operator|::
name|ObjCMethodDecl
operator|*
name|objc_method_decl
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|static
name|bool
name|CheckOverloadedOperatorKindParameterCount
argument_list|(
name|bool
name|is_method
argument_list|,
name|clang
operator|::
name|OverloadedOperatorKind
name|op_kind
argument_list|,
name|uint32_t
name|num_params
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|FieldIsBitfield
argument_list|(
name|clang
operator|::
name|FieldDecl
operator|*
name|field
argument_list|,
name|uint32_t
operator|&
name|bitfield_bit_size
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|bool
name|FieldIsBitfield
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|ast
argument_list|,
name|clang
operator|::
name|FieldDecl
operator|*
name|field
argument_list|,
name|uint32_t
operator|&
name|bitfield_bit_size
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|bool
name|RecordHasFields
argument_list|(
specifier|const
name|clang
operator|::
name|RecordDecl
operator|*
name|record_decl
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CompilerType
name|CreateObjCClass
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|,
name|clang
operator|::
name|DeclContext
operator|*
name|decl_ctx
argument_list|,
name|bool
name|isForwardDecl
argument_list|,
name|bool
name|isInternal
argument_list|,
name|ClangASTMetadata
operator|*
name|metadata
operator|=
name|nullptr
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|SetTagTypeKind
argument_list|(
name|clang
operator|::
name|QualType
name|type
argument_list|,
name|int
name|kind
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|SetDefaultAccessForRecordFields
argument_list|(
name|clang
operator|::
name|RecordDecl
operator|*
name|record_decl
argument_list|,
name|int
name|default_accessibility
argument_list|,
name|int
operator|*
name|assigned_accessibilities
argument_list|,
name|size_t
name|num_assigned_accessibilities
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Returns a mask containing bits from the ClangASTContext::eTypeXXX
end_comment

begin_comment
comment|// enumerations
end_comment

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_comment
comment|// Namespace Declarations
end_comment

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_expr_stmt
name|clang
operator|::
name|NamespaceDecl
operator|*
name|GetUniqueNamespaceDeclaration
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|,
name|clang
operator|::
name|DeclContext
operator|*
name|decl_ctx
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|clang
operator|::
name|NamespaceDecl
operator|*
name|GetUniqueNamespaceDeclaration
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|ast
argument_list|,
specifier|const
name|char
operator|*
name|name
argument_list|,
name|clang
operator|::
name|DeclContext
operator|*
name|decl_ctx
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_comment
comment|// Function Types
end_comment

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_expr_stmt
name|clang
operator|::
name|FunctionDecl
operator|*
name|CreateFunctionDeclaration
argument_list|(
argument|clang::DeclContext *decl_ctx
argument_list|,
argument|const char *name
argument_list|,
argument|const CompilerType&function_Type
argument_list|,
argument|int storage
argument_list|,
argument|bool is_inline
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|static
name|CompilerType
name|CreateFunctionType
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|ast
argument_list|,
specifier|const
name|CompilerType
operator|&
name|result_type
argument_list|,
specifier|const
name|CompilerType
operator|*
name|args
argument_list|,
name|unsigned
name|num_args
argument_list|,
name|bool
name|is_variadic
argument_list|,
name|unsigned
name|type_quals
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function
name|CompilerType
name|CreateFunctionType
parameter_list|(
specifier|const
name|CompilerType
modifier|&
name|result_type
parameter_list|,
specifier|const
name|CompilerType
modifier|*
name|args
parameter_list|,
name|unsigned
name|num_args
parameter_list|,
name|bool
name|is_variadic
parameter_list|,
name|unsigned
name|type_quals
parameter_list|)
block|{
return|return
name|ClangASTContext
operator|::
name|CreateFunctionType
argument_list|(
name|getASTContext
argument_list|()
argument_list|,
name|result_type
argument_list|,
name|args
argument_list|,
name|num_args
argument_list|,
name|is_variadic
argument_list|,
name|type_quals
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|clang
operator|::
name|ParmVarDecl
operator|*
name|CreateParameterDeclaration
argument_list|(
argument|const char *name
argument_list|,
argument|const CompilerType&param_type
argument_list|,
argument|int storage
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|SetFunctionParameters
argument_list|(
name|clang
operator|::
name|FunctionDecl
operator|*
name|function_decl
argument_list|,
name|clang
operator|::
name|ParmVarDecl
operator|*
operator|*
name|params
argument_list|,
name|unsigned
name|num_params
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|CompilerType
name|CreateBlockPointerType
parameter_list|(
specifier|const
name|CompilerType
modifier|&
name|function_type
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_comment
comment|// Array Types
end_comment

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_function_decl
name|CompilerType
name|CreateArrayType
parameter_list|(
specifier|const
name|CompilerType
modifier|&
name|element_type
parameter_list|,
name|size_t
name|element_count
parameter_list|,
name|bool
name|is_vector
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_comment
comment|// Enumeration Types
end_comment

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_decl_stmt
name|CompilerType
name|CreateEnumerationType
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|,
name|clang
operator|::
name|DeclContext
operator|*
name|decl_ctx
argument_list|,
specifier|const
name|Declaration
operator|&
name|decl
argument_list|,
specifier|const
name|CompilerType
operator|&
name|integer_qual_type
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_comment
comment|// Integer type functions
end_comment

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_decl_stmt
specifier|static
name|CompilerType
name|GetIntTypeFromBitSize
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|ast
argument_list|,
name|size_t
name|bit_size
argument_list|,
name|bool
name|is_signed
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function
name|CompilerType
name|GetPointerSizedIntType
parameter_list|(
name|bool
name|is_signed
parameter_list|)
block|{
return|return
name|GetPointerSizedIntType
argument_list|(
name|getASTContext
argument_list|()
argument_list|,
name|is_signed
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
specifier|static
name|CompilerType
name|GetPointerSizedIntType
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|ast
argument_list|,
name|bool
name|is_signed
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_comment
comment|// Floating point functions
end_comment

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_decl_stmt
specifier|static
name|CompilerType
name|GetFloatTypeFromBitSize
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|ast
argument_list|,
name|size_t
name|bit_size
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_comment
comment|// TypeSystem methods
end_comment

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_expr_stmt
name|DWARFASTParser
operator|*
name|GetDWARFParser
argument_list|()
name|override
expr_stmt|;
end_expr_stmt

begin_function_decl
name|PDBASTParser
modifier|*
name|GetPDBParser
parameter_list|()
function_decl|;
end_function_decl

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_comment
comment|// ClangASTContext callbacks for external source lookups.
end_comment

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_decl_stmt
specifier|static
name|void
name|CompleteTagDecl
argument_list|(
name|void
operator|*
name|baton
argument_list|,
name|clang
operator|::
name|TagDecl
operator|*
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|CompleteObjCInterfaceDecl
argument_list|(
name|void
operator|*
name|baton
argument_list|,
name|clang
operator|::
name|ObjCInterfaceDecl
operator|*
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|bool
name|LayoutRecordType
argument_list|(
name|void
operator|*
name|baton
argument_list|,
specifier|const
name|clang
operator|::
name|RecordDecl
operator|*
name|record_decl
argument_list|,
name|uint64_t
operator|&
name|size
argument_list|,
name|uint64_t
operator|&
name|alignment
argument_list|,
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|clang
operator|::
name|FieldDecl
operator|*
argument_list|,
name|uint64_t
operator|>
operator|&
name|field_offsets
argument_list|,
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|clang
operator|::
name|CXXRecordDecl
operator|*
argument_list|,
name|clang
operator|::
name|CharUnits
operator|>
operator|&
name|base_offsets
argument_list|,
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|clang
operator|::
name|CXXRecordDecl
operator|*
argument_list|,
name|clang
operator|::
name|CharUnits
operator|>
operator|&
name|vbase_offsets
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|//----------------------------------------------------------------------
end_comment

begin_comment
comment|// CompilerDecl override functions
end_comment

begin_comment
comment|//----------------------------------------------------------------------
end_comment

begin_decl_stmt
name|ConstString
name|DeclGetName
argument_list|(
name|void
operator|*
name|opaque_decl
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ConstString
name|DeclGetMangledName
argument_list|(
name|void
operator|*
name|opaque_decl
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CompilerDeclContext
name|DeclGetDeclContext
argument_list|(
name|void
operator|*
name|opaque_decl
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CompilerType
name|DeclGetFunctionReturnType
argument_list|(
name|void
operator|*
name|opaque_decl
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|size_t
name|DeclGetFunctionNumArguments
argument_list|(
name|void
operator|*
name|opaque_decl
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CompilerType
name|DeclGetFunctionArgumentType
argument_list|(
name|void
operator|*
name|opaque_decl
argument_list|,
name|size_t
name|arg_idx
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_comment
comment|//----------------------------------------------------------------------
end_comment

begin_comment
comment|// CompilerDeclContext override functions
end_comment

begin_comment
comment|//----------------------------------------------------------------------
end_comment

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|CompilerDecl
operator|>
name|DeclContextFindDeclByName
argument_list|(
argument|void *opaque_decl_ctx
argument_list|,
argument|ConstString name
argument_list|,
argument|const bool ignore_using_decls
argument_list|)
name|override
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|bool
name|DeclContextIsStructUnionOrClass
argument_list|(
name|void
operator|*
name|opaque_decl_ctx
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ConstString
name|DeclContextGetName
argument_list|(
name|void
operator|*
name|opaque_decl_ctx
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ConstString
name|DeclContextGetScopeQualifiedName
argument_list|(
name|void
operator|*
name|opaque_decl_ctx
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|DeclContextIsClassMethod
argument_list|(
name|void
operator|*
name|opaque_decl_ctx
argument_list|,
name|lldb
operator|::
name|LanguageType
operator|*
name|language_ptr
argument_list|,
name|bool
operator|*
name|is_instance_method_ptr
argument_list|,
name|ConstString
operator|*
name|language_object_name_ptr
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_comment
comment|//----------------------------------------------------------------------
end_comment

begin_comment
comment|// Clang specific clang::DeclContext functions
end_comment

begin_comment
comment|//----------------------------------------------------------------------
end_comment

begin_expr_stmt
specifier|static
name|clang
operator|::
name|DeclContext
operator|*
name|DeclContextGetAsDeclContext
argument_list|(
specifier|const
name|CompilerDeclContext
operator|&
name|dc
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|clang
operator|::
name|ObjCMethodDecl
operator|*
name|DeclContextGetAsObjCMethodDecl
argument_list|(
specifier|const
name|CompilerDeclContext
operator|&
name|dc
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|clang
operator|::
name|CXXMethodDecl
operator|*
name|DeclContextGetAsCXXMethodDecl
argument_list|(
specifier|const
name|CompilerDeclContext
operator|&
name|dc
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|clang
operator|::
name|FunctionDecl
operator|*
name|DeclContextGetAsFunctionDecl
argument_list|(
specifier|const
name|CompilerDeclContext
operator|&
name|dc
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|clang
operator|::
name|NamespaceDecl
operator|*
name|DeclContextGetAsNamespaceDecl
argument_list|(
specifier|const
name|CompilerDeclContext
operator|&
name|dc
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function_decl
specifier|static
name|ClangASTMetadata
modifier|*
name|DeclContextGetMetaData
parameter_list|(
specifier|const
name|CompilerDeclContext
modifier|&
name|dc
parameter_list|,
specifier|const
name|void
modifier|*
name|object
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
specifier|static
name|clang
operator|::
name|ASTContext
operator|*
name|DeclContextGetClangASTContext
argument_list|(
specifier|const
name|CompilerDeclContext
operator|&
name|dc
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|//----------------------------------------------------------------------
end_comment

begin_comment
comment|// Tests
end_comment

begin_comment
comment|//----------------------------------------------------------------------
end_comment

begin_decl_stmt
name|bool
name|IsArrayType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
name|CompilerType
operator|*
name|element_type
argument_list|,
name|uint64_t
operator|*
name|size
argument_list|,
name|bool
operator|*
name|is_incomplete
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|IsVectorType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
name|CompilerType
operator|*
name|element_type
argument_list|,
name|uint64_t
operator|*
name|size
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|IsAggregateType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|IsAnonymousType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|IsBeingDefined
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|IsCharType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|IsCompleteType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|IsConst
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|IsCStringType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
name|uint32_t
operator|&
name|length
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|static
name|bool
name|IsCXXClassType
parameter_list|(
specifier|const
name|CompilerType
modifier|&
name|type
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|bool
name|IsDefined
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|IsFloatingPointType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
name|uint32_t
operator|&
name|count
argument_list|,
name|bool
operator|&
name|is_complex
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|IsFunctionType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
name|bool
operator|*
name|is_variadic_ptr
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uint32_t
name|IsHomogeneousAggregate
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
name|CompilerType
operator|*
name|base_type_ptr
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|size_t
name|GetNumberOfFunctionArguments
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CompilerType
name|GetFunctionArgumentAtIndex
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
specifier|const
name|size_t
name|index
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|IsFunctionPointerType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|IsBlockPointerType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
name|CompilerType
operator|*
name|function_pointer_type_ptr
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|IsIntegerType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
name|bool
operator|&
name|is_signed
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|IsEnumerationType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
name|bool
operator|&
name|is_signed
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|static
name|bool
name|IsObjCClassType
parameter_list|(
specifier|const
name|CompilerType
modifier|&
name|type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|bool
name|IsObjCClassTypeAndHasIVars
parameter_list|(
specifier|const
name|CompilerType
modifier|&
name|type
parameter_list|,
name|bool
name|check_superclass
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|bool
name|IsObjCObjectOrInterfaceType
parameter_list|(
specifier|const
name|CompilerType
modifier|&
name|type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|bool
name|IsObjCObjectPointerType
parameter_list|(
specifier|const
name|CompilerType
modifier|&
name|type
parameter_list|,
name|CompilerType
modifier|*
name|target_type
init|=
name|nullptr
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|bool
name|IsPolymorphicClass
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|bool
name|IsClassType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|bool
name|IsEnumType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|IsPossibleDynamicType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
name|CompilerType
operator|*
name|target_type
argument_list|,
comment|// Can pass nullptr
name|bool
name|check_cplusplus
argument_list|,
name|bool
name|check_objc
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|IsRuntimeGeneratedType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|IsPointerType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
name|CompilerType
operator|*
name|pointee_type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|IsPointerOrReferenceType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
name|CompilerType
operator|*
name|pointee_type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|IsReferenceType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
name|CompilerType
operator|*
name|pointee_type
argument_list|,
name|bool
operator|*
name|is_rvalue
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|IsScalarType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|IsTypedefType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|IsVoidType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|SupportsLanguage
argument_list|(
name|lldb
operator|::
name|LanguageType
name|language
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|bool
name|GetCXXClassName
argument_list|(
specifier|const
name|CompilerType
operator|&
name|type
argument_list|,
name|std
operator|::
name|string
operator|&
name|class_name
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|bool
name|GetObjCClassName
argument_list|(
specifier|const
name|CompilerType
operator|&
name|type
argument_list|,
name|std
operator|::
name|string
operator|&
name|class_name
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|//----------------------------------------------------------------------
end_comment

begin_comment
comment|// Type Completion
end_comment

begin_comment
comment|//----------------------------------------------------------------------
end_comment

begin_decl_stmt
name|bool
name|GetCompleteType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_comment
comment|//----------------------------------------------------------------------
end_comment

begin_comment
comment|// Accessors
end_comment

begin_comment
comment|//----------------------------------------------------------------------
end_comment

begin_decl_stmt
name|ConstString
name|GetTypeName
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uint32_t
name|GetTypeInfo
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
name|CompilerType
operator|*
name|pointee_or_element_compiler_type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|lldb
operator|::
name|LanguageType
name|GetMinimumLanguage
argument_list|(
argument|lldb::opaque_compiler_type_t type
argument_list|)
name|override
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|lldb
operator|::
name|TypeClass
name|GetTypeClass
argument_list|(
argument|lldb::opaque_compiler_type_t type
argument_list|)
name|override
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|unsigned
name|GetTypeQualifiers
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_comment
comment|//----------------------------------------------------------------------
end_comment

begin_comment
comment|// Creating related types
end_comment

begin_comment
comment|//----------------------------------------------------------------------
end_comment

begin_comment
comment|// Using the current type, create a new typedef to that type using
end_comment

begin_comment
comment|// "typedef_name"
end_comment

begin_comment
comment|// as the name and "decl_ctx" as the decl context.
end_comment

begin_function_decl
specifier|static
name|CompilerType
name|CreateTypedefType
parameter_list|(
specifier|const
name|CompilerType
modifier|&
name|type
parameter_list|,
specifier|const
name|char
modifier|*
name|typedef_name
parameter_list|,
specifier|const
name|CompilerDeclContext
modifier|&
name|compiler_decl_ctx
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|CompilerType
name|GetArrayElementType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
name|uint64_t
operator|*
name|stride
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CompilerType
name|GetArrayType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
name|uint64_t
name|size
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CompilerType
name|GetCanonicalType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CompilerType
name|GetFullyUnqualifiedType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Returns -1 if this isn't a function of if the function doesn't have a
end_comment

begin_comment
comment|// prototype
end_comment

begin_comment
comment|// Returns a value>= 0 if there is a prototype.
end_comment

begin_decl_stmt
name|int
name|GetFunctionArgumentCount
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CompilerType
name|GetFunctionArgumentTypeAtIndex
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
name|size_t
name|idx
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CompilerType
name|GetFunctionReturnType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|size_t
name|GetNumMemberFunctions
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|TypeMemberFunctionImpl
name|GetMemberFunctionAtIndex
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
name|size_t
name|idx
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CompilerType
name|GetNonReferenceType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CompilerType
name|GetPointeeType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CompilerType
name|GetPointerType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CompilerType
name|GetLValueReferenceType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CompilerType
name|GetRValueReferenceType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CompilerType
name|AddConstModifier
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CompilerType
name|AddVolatileModifier
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CompilerType
name|AddRestrictModifier
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CompilerType
name|CreateTypedef
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
specifier|const
name|char
operator|*
name|name
argument_list|,
specifier|const
name|CompilerDeclContext
operator|&
name|decl_ctx
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_comment
comment|// If the current object represents a typedef type, get the underlying type
end_comment

begin_decl_stmt
name|CompilerType
name|GetTypedefedType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_comment
comment|//----------------------------------------------------------------------
end_comment

begin_comment
comment|// Create related types using the current type's AST
end_comment

begin_comment
comment|//----------------------------------------------------------------------
end_comment

begin_decl_stmt
name|CompilerType
name|GetBasicTypeFromAST
argument_list|(
name|lldb
operator|::
name|BasicType
name|basic_type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_comment
comment|//----------------------------------------------------------------------
end_comment

begin_comment
comment|// Exploring the type
end_comment

begin_comment
comment|//----------------------------------------------------------------------
end_comment

begin_decl_stmt
name|uint64_t
name|GetByteSize
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
name|ExecutionContextScope
operator|*
name|exe_scope
argument_list|)
block|{
return|return
operator|(
name|GetBitSize
argument_list|(
name|type
argument_list|,
name|exe_scope
argument_list|)
operator|+
literal|7
operator|)
operator|/
literal|8
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|uint64_t
name|GetBitSize
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
name|ExecutionContextScope
operator|*
name|exe_scope
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|lldb
operator|::
name|Encoding
name|GetEncoding
argument_list|(
argument|lldb::opaque_compiler_type_t type
argument_list|,
argument|uint64_t&count
argument_list|)
name|override
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|lldb
operator|::
name|Format
name|GetFormat
argument_list|(
argument|lldb::opaque_compiler_type_t type
argument_list|)
name|override
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|size_t
name|GetTypeBitAlign
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uint32_t
name|GetNumChildren
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
name|bool
name|omit_empty_base_classes
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CompilerType
name|GetBuiltinTypeByName
argument_list|(
specifier|const
name|ConstString
operator|&
name|name
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|lldb
operator|::
name|BasicType
name|GetBasicTypeEnumeration
argument_list|(
argument|lldb::opaque_compiler_type_t type
argument_list|)
name|override
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|lldb
operator|::
name|BasicType
name|GetBasicTypeEnumeration
argument_list|(
argument|lldb::opaque_compiler_type_t type
argument_list|,
argument|const ConstString&name
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|ForEachEnumerator
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
name|std
operator|::
name|function
operator|<
name|bool
argument_list|(
specifier|const
name|CompilerType
operator|&
name|integer_type
argument_list|,
specifier|const
name|ConstString
operator|&
name|name
argument_list|,
specifier|const
name|llvm
operator|::
name|APSInt
operator|&
name|value
argument_list|)
operator|>
specifier|const
operator|&
name|callback
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uint32_t
name|GetNumFields
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CompilerType
name|GetFieldAtIndex
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
name|size_t
name|idx
argument_list|,
name|std
operator|::
name|string
operator|&
name|name
argument_list|,
name|uint64_t
operator|*
name|bit_offset_ptr
argument_list|,
name|uint32_t
operator|*
name|bitfield_bit_size_ptr
argument_list|,
name|bool
operator|*
name|is_bitfield_ptr
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uint32_t
name|GetNumDirectBaseClasses
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uint32_t
name|GetNumVirtualBaseClasses
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CompilerType
name|GetDirectBaseClassAtIndex
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
name|size_t
name|idx
argument_list|,
name|uint32_t
operator|*
name|bit_offset_ptr
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CompilerType
name|GetVirtualBaseClassAtIndex
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
name|size_t
name|idx
argument_list|,
name|uint32_t
operator|*
name|bit_offset_ptr
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|uint32_t
name|GetNumPointeeChildren
argument_list|(
name|clang
operator|::
name|QualType
name|type
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CompilerType
name|GetChildCompilerTypeAtIndex
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
name|ExecutionContext
operator|*
name|exe_ctx
argument_list|,
name|size_t
name|idx
argument_list|,
name|bool
name|transparent_pointers
argument_list|,
name|bool
name|omit_empty_base_classes
argument_list|,
name|bool
name|ignore_array_bounds
argument_list|,
name|std
operator|::
name|string
operator|&
name|child_name
argument_list|,
name|uint32_t
operator|&
name|child_byte_size
argument_list|,
name|int32_t
operator|&
name|child_byte_offset
argument_list|,
name|uint32_t
operator|&
name|child_bitfield_bit_size
argument_list|,
name|uint32_t
operator|&
name|child_bitfield_bit_offset
argument_list|,
name|bool
operator|&
name|child_is_base_class
argument_list|,
name|bool
operator|&
name|child_is_deref_of_parent
argument_list|,
name|ValueObject
operator|*
name|valobj
argument_list|,
name|uint64_t
operator|&
name|language_flags
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Lookup a child given a name. This function will match base class names
end_comment

begin_comment
comment|// and member member names in "clang_type" only, not descendants.
end_comment

begin_decl_stmt
name|uint32_t
name|GetIndexOfChildWithName
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
specifier|const
name|char
operator|*
name|name
argument_list|,
name|bool
name|omit_empty_base_classes
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Lookup a child member given a name. This function will match member names
end_comment

begin_comment
comment|// only and will descend into "clang_type" children in search for the first
end_comment

begin_comment
comment|// member in this class, or any base class that matches "name".
end_comment

begin_comment
comment|// TODO: Return all matches for a given name by returning a
end_comment

begin_comment
comment|// vector<vector<uint32_t>>
end_comment

begin_comment
comment|// so we catch all names that match a given child name, not just the first.
end_comment

begin_decl_stmt
name|size_t
name|GetIndexOfChildMemberWithName
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
specifier|const
name|char
operator|*
name|name
argument_list|,
name|bool
name|omit_empty_base_classes
argument_list|,
name|std
operator|::
name|vector
operator|<
name|uint32_t
operator|>
operator|&
name|child_indexes
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|size_t
name|GetNumTemplateArguments
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CompilerType
name|GetTemplateArgument
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
name|size_t
name|idx
argument_list|,
name|lldb
operator|::
name|TemplateArgumentKind
operator|&
name|kind
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CompilerType
name|GetTypeForFormatters
argument_list|(
name|void
operator|*
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|LLDB_INVALID_DECL_LEVEL
value|UINT32_MAX
end_define

begin_comment
comment|// LLDB_INVALID_DECL_LEVEL is returned by CountDeclLevels if
end_comment

begin_comment
comment|// child_decl_ctx could not be found in decl_ctx.
end_comment

begin_decl_stmt
name|uint32_t
name|CountDeclLevels
argument_list|(
name|clang
operator|::
name|DeclContext
operator|*
name|frame_decl_ctx
argument_list|,
name|clang
operator|::
name|DeclContext
operator|*
name|child_decl_ctx
argument_list|,
name|ConstString
operator|*
name|child_name
operator|=
name|nullptr
argument_list|,
name|CompilerType
operator|*
name|child_type
operator|=
name|nullptr
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|//----------------------------------------------------------------------
end_comment

begin_comment
comment|// Modifying RecordType
end_comment

begin_comment
comment|//----------------------------------------------------------------------
end_comment

begin_expr_stmt
specifier|static
name|clang
operator|::
name|FieldDecl
operator|*
name|AddFieldToRecordType
argument_list|(
argument|const CompilerType&type
argument_list|,
argument|const char *name
argument_list|,
argument|const CompilerType&field_type
argument_list|,
argument|lldb::AccessType access
argument_list|,
argument|uint32_t bitfield_bit_size
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function_decl
specifier|static
name|void
name|BuildIndirectFields
parameter_list|(
specifier|const
name|CompilerType
modifier|&
name|type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|void
name|SetIsPacked
parameter_list|(
specifier|const
name|CompilerType
modifier|&
name|type
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
specifier|static
name|clang
operator|::
name|VarDecl
operator|*
name|AddVariableToRecordType
argument_list|(
argument|const CompilerType&type
argument_list|,
argument|const char *name
argument_list|,
argument|const CompilerType&var_type
argument_list|,
argument|lldb::AccessType access
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|clang
operator|::
name|CXXMethodDecl
operator|*
name|AddMethodToCXXRecordType
argument_list|(
argument|lldb::opaque_compiler_type_t type
argument_list|,
argument|const char *name
argument_list|,
argument|const CompilerType&method_type
argument_list|,
argument|lldb::AccessType access
argument_list|,
argument|bool is_virtual
argument_list|,
argument|bool is_static
argument_list|,
argument|bool is_inline
argument_list|,
argument|bool is_explicit
argument_list|,
argument|bool is_attr_used
argument_list|,
argument|bool is_artificial
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// C++ Base Classes
end_comment

begin_expr_stmt
name|clang
operator|::
name|CXXBaseSpecifier
operator|*
name|CreateBaseClassSpecifier
argument_list|(
argument|lldb::opaque_compiler_type_t type
argument_list|,
argument|lldb::AccessType access
argument_list|,
argument|bool is_virtual
argument_list|,
argument|bool base_of_class
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|static
name|void
name|DeleteBaseClassSpecifiers
argument_list|(
name|clang
operator|::
name|CXXBaseSpecifier
operator|*
operator|*
name|base_classes
argument_list|,
name|unsigned
name|num_base_classes
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|SetBaseClassesForClassType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
name|clang
operator|::
name|CXXBaseSpecifier
specifier|const
operator|*
specifier|const
operator|*
name|base_classes
argument_list|,
name|unsigned
name|num_base_classes
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|static
name|bool
name|SetObjCSuperClass
parameter_list|(
specifier|const
name|CompilerType
modifier|&
name|type
parameter_list|,
specifier|const
name|CompilerType
modifier|&
name|superclass_compiler_type
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|static
name|bool
name|AddObjCClassProperty
argument_list|(
specifier|const
name|CompilerType
operator|&
name|type
argument_list|,
specifier|const
name|char
operator|*
name|property_name
argument_list|,
specifier|const
name|CompilerType
operator|&
name|property_compiler_type
argument_list|,
name|clang
operator|::
name|ObjCIvarDecl
operator|*
name|ivar_decl
argument_list|,
specifier|const
name|char
operator|*
name|property_setter_name
argument_list|,
specifier|const
name|char
operator|*
name|property_getter_name
argument_list|,
name|uint32_t
name|property_attributes
argument_list|,
name|ClangASTMetadata
operator|*
name|metadata
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
specifier|static
name|clang
operator|::
name|ObjCMethodDecl
operator|*
name|AddMethodToObjCObjectType
argument_list|(
argument|const CompilerType&type
argument_list|,
argument|const char *name
argument_list|,
comment|// the full symbol name as seen in the symbol table
comment|// (lldb::opaque_compiler_type_t type, "-[NString
comment|// stringWithCString:]")
argument|const CompilerType&method_compiler_type
argument_list|,
argument|lldb::AccessType access
argument_list|,
argument|bool is_artificial
argument_list|,
argument|bool is_variadic
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|static
name|bool
name|SetHasExternalStorage
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
name|bool
name|has_extern
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|static
name|bool
name|GetHasExternalStorage
parameter_list|(
specifier|const
name|CompilerType
modifier|&
name|type
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_comment
comment|// Tag Declarations
end_comment

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_function_decl
specifier|static
name|bool
name|StartTagDeclarationDefinition
parameter_list|(
specifier|const
name|CompilerType
modifier|&
name|type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|bool
name|CompleteTagDeclarationDefinition
parameter_list|(
specifier|const
name|CompilerType
modifier|&
name|type
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|//----------------------------------------------------------------------
end_comment

begin_comment
comment|// Modifying Enumeration types
end_comment

begin_comment
comment|//----------------------------------------------------------------------
end_comment

begin_decl_stmt
name|bool
name|AddEnumerationValueToEnumerationType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
specifier|const
name|CompilerType
operator|&
name|enumerator_qual_type
argument_list|,
specifier|const
name|Declaration
operator|&
name|decl
argument_list|,
specifier|const
name|char
operator|*
name|name
argument_list|,
name|int64_t
name|enum_value
argument_list|,
name|uint32_t
name|enum_value_bit_size
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CompilerType
name|GetEnumerationIntegerType
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_comment
comment|// Pointers& References
end_comment

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_comment
comment|// Call this function using the class type when you want to make a
end_comment

begin_comment
comment|// member pointer type to pointee_type.
end_comment

begin_function_decl
specifier|static
name|CompilerType
name|CreateMemberPointerType
parameter_list|(
specifier|const
name|CompilerType
modifier|&
name|type
parameter_list|,
specifier|const
name|CompilerType
modifier|&
name|pointee_type
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|// Converts "s" to a floating point value and place resulting floating
end_comment

begin_comment
comment|// point bytes in the "dst" buffer.
end_comment

begin_decl_stmt
name|size_t
name|ConvertStringToFloatValue
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
specifier|const
name|char
operator|*
name|s
argument_list|,
name|uint8_t
operator|*
name|dst
argument_list|,
name|size_t
name|dst_size
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_comment
comment|//----------------------------------------------------------------------
end_comment

begin_comment
comment|// Dumping types
end_comment

begin_comment
comment|//----------------------------------------------------------------------
end_comment

begin_decl_stmt
name|void
name|DumpValue
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
name|ExecutionContext
operator|*
name|exe_ctx
argument_list|,
name|Stream
operator|*
name|s
argument_list|,
name|lldb
operator|::
name|Format
name|format
argument_list|,
specifier|const
name|DataExtractor
operator|&
name|data
argument_list|,
name|lldb
operator|::
name|offset_t
name|data_offset
argument_list|,
name|size_t
name|data_byte_size
argument_list|,
name|uint32_t
name|bitfield_bit_size
argument_list|,
name|uint32_t
name|bitfield_bit_offset
argument_list|,
name|bool
name|show_types
argument_list|,
name|bool
name|show_summary
argument_list|,
name|bool
name|verbose
argument_list|,
name|uint32_t
name|depth
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|DumpTypeValue
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
name|Stream
operator|*
name|s
argument_list|,
name|lldb
operator|::
name|Format
name|format
argument_list|,
specifier|const
name|DataExtractor
operator|&
name|data
argument_list|,
name|lldb
operator|::
name|offset_t
name|data_offset
argument_list|,
name|size_t
name|data_byte_size
argument_list|,
name|uint32_t
name|bitfield_bit_size
argument_list|,
name|uint32_t
name|bitfield_bit_offset
argument_list|,
name|ExecutionContextScope
operator|*
name|exe_scope
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|DumpSummary
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
name|ExecutionContext
operator|*
name|exe_ctx
argument_list|,
name|Stream
operator|*
name|s
argument_list|,
specifier|const
name|DataExtractor
operator|&
name|data
argument_list|,
name|lldb
operator|::
name|offset_t
name|data_offset
argument_list|,
name|size_t
name|data_byte_size
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|DumpTypeDescription
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Dump to stdout
end_comment

begin_decl_stmt
name|void
name|DumpTypeDescription
argument_list|(
name|lldb
operator|::
name|opaque_compiler_type_t
name|type
argument_list|,
name|Stream
operator|*
name|s
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|static
name|void
name|DumpTypeName
parameter_list|(
specifier|const
name|CompilerType
modifier|&
name|type
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
specifier|static
name|clang
operator|::
name|EnumDecl
operator|*
name|GetAsEnumDecl
argument_list|(
specifier|const
name|CompilerType
operator|&
name|type
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|clang
operator|::
name|RecordDecl
operator|*
name|GetAsRecordDecl
argument_list|(
specifier|const
name|CompilerType
operator|&
name|type
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|clang
operator|::
name|TagDecl
operator|*
name|GetAsTagDecl
argument_list|(
specifier|const
name|CompilerType
operator|&
name|type
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|clang
operator|::
name|CXXRecordDecl
operator|*
name|GetAsCXXRecordDecl
argument_list|(
argument|lldb::opaque_compiler_type_t type
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|clang
operator|::
name|ObjCInterfaceDecl
operator|*
name|GetAsObjCInterfaceDecl
argument_list|(
specifier|const
name|CompilerType
operator|&
name|type
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|clang
operator|::
name|ClassTemplateDecl
operator|*
name|ParseClassTemplateDecl
argument_list|(
argument|clang::DeclContext *decl_ctx
argument_list|,
argument|lldb::AccessType access_type
argument_list|,
argument|const char *parent_name
argument_list|,
argument|int tag_decl_kind
argument_list|,
argument|const ClangASTContext::TemplateParameterInfos&template_param_infos
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|clang
operator|::
name|BlockDecl
operator|*
name|CreateBlockDeclaration
argument_list|(
name|clang
operator|::
name|DeclContext
operator|*
name|ctx
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|clang
operator|::
name|UsingDirectiveDecl
operator|*
name|CreateUsingDirectiveDeclaration
argument_list|(
name|clang
operator|::
name|DeclContext
operator|*
name|decl_ctx
argument_list|,
name|clang
operator|::
name|NamespaceDecl
operator|*
name|ns_decl
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|clang
operator|::
name|UsingDecl
operator|*
name|CreateUsingDeclaration
argument_list|(
name|clang
operator|::
name|DeclContext
operator|*
name|current_decl_ctx
argument_list|,
name|clang
operator|::
name|NamedDecl
operator|*
name|target
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|clang
operator|::
name|VarDecl
operator|*
name|CreateVariableDeclaration
argument_list|(
argument|clang::DeclContext *decl_context
argument_list|,
argument|const char *name
argument_list|,
argument|clang::QualType type
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|lldb
operator|::
name|opaque_compiler_type_t
name|GetOpaqueCompilerType
argument_list|(
argument|clang::ASTContext *ast
argument_list|,
argument|lldb::BasicType basic_type
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|clang
operator|::
name|QualType
name|GetQualType
argument_list|(
argument|lldb::opaque_compiler_type_t type
argument_list|)
block|{
if|if
condition|(
name|type
condition|)
return|return
name|clang
operator|::
name|QualType
operator|::
name|getFromOpaquePtr
argument_list|(
name|type
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
name|clang
operator|::
name|QualType
argument_list|()
return|;
end_return

begin_expr_stmt
unit|}    static
name|clang
operator|::
name|QualType
name|GetCanonicalQualType
argument_list|(
argument|lldb::opaque_compiler_type_t type
argument_list|)
block|{
if|if
condition|(
name|type
condition|)
return|return
name|clang
operator|::
name|QualType
operator|::
name|getFromOpaquePtr
argument_list|(
name|type
argument_list|)
operator|.
name|getCanonicalType
argument_list|()
return|;
end_expr_stmt

begin_return
return|return
name|clang
operator|::
name|QualType
argument_list|()
return|;
end_return

begin_expr_stmt
unit|}    clang
operator|::
name|DeclarationName
name|GetDeclarationName
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|,
specifier|const
name|CompilerType
operator|&
name|function_clang_type
argument_list|)
expr_stmt|;
end_expr_stmt

begin_label
name|protected
label|:
end_label

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_comment
comment|// Classes that inherit from ClangASTContext can see and modify these
end_comment

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_comment
comment|// clang-format off
end_comment

begin_expr_stmt
name|std
operator|::
name|string
name|m_target_triple
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|unique_ptr
operator|<
name|clang
operator|::
name|ASTContext
operator|>
name|m_ast_ap
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|unique_ptr
operator|<
name|clang
operator|::
name|LangOptions
operator|>
name|m_language_options_ap
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|unique_ptr
operator|<
name|clang
operator|::
name|FileManager
operator|>
name|m_file_manager_ap
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|unique_ptr
operator|<
name|clang
operator|::
name|FileSystemOptions
operator|>
name|m_file_system_options_ap
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|unique_ptr
operator|<
name|clang
operator|::
name|SourceManager
operator|>
name|m_source_manager_ap
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|unique_ptr
operator|<
name|clang
operator|::
name|DiagnosticsEngine
operator|>
name|m_diagnostics_engine_ap
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|unique_ptr
operator|<
name|clang
operator|::
name|DiagnosticConsumer
operator|>
name|m_diagnostic_consumer_ap
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|shared_ptr
operator|<
name|clang
operator|::
name|TargetOptions
operator|>
name|m_target_options_rp
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|unique_ptr
operator|<
name|clang
operator|::
name|TargetInfo
operator|>
name|m_target_info_ap
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|unique_ptr
operator|<
name|clang
operator|::
name|IdentifierTable
operator|>
name|m_identifier_table_ap
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|unique_ptr
operator|<
name|clang
operator|::
name|SelectorTable
operator|>
name|m_selector_table_ap
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|unique_ptr
operator|<
name|clang
operator|::
name|Builtin
operator|::
name|Context
operator|>
name|m_builtins_ap
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|unique_ptr
operator|<
name|DWARFASTParserClang
operator|>
name|m_dwarf_ast_parser_ap
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|unique_ptr
operator|<
name|PDBASTParser
operator|>
name|m_pdb_ast_parser_ap
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|unique_ptr
operator|<
name|ClangASTSource
operator|>
name|m_scratch_ast_source_ap
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|unique_ptr
operator|<
name|clang
operator|::
name|MangleContext
operator|>
name|m_mangle_ctx_ap
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|CompleteTagDeclCallback
name|m_callback_tag_decl
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CompleteObjCInterfaceDeclCallback
name|m_callback_objc_decl
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
modifier|*
name|m_callback_baton
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uint32_t
name|m_pointer_byte_size
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|m_ast_owned
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|m_can_evaluate_expressions
decl_stmt|;
end_decl_stmt

begin_comment
comment|// clang-format on
end_comment

begin_label
name|private
label|:
end_label

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_comment
comment|// For ClangASTContext only
end_comment

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_expr_stmt
name|ClangASTContext
argument_list|(
specifier|const
name|ClangASTContext
operator|&
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|const
name|ClangASTContext
modifier|&
name|operator
init|=
operator|(
specifier|const
name|ClangASTContext
operator|&
operator|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
unit|};
name|class
name|ClangASTContextForExpressions
range|:
name|public
name|ClangASTContext
block|{
name|public
operator|:
name|ClangASTContextForExpressions
argument_list|(
name|Target
operator|&
name|target
argument_list|)
block|;
operator|~
name|ClangASTContextForExpressions
argument_list|()
name|override
operator|=
expr|default
block|;
name|UserExpression
operator|*
name|GetUserExpression
argument_list|(
argument|llvm::StringRef expr
argument_list|,
argument|llvm::StringRef prefix
argument_list|,
argument|lldb::LanguageType language
argument_list|,
argument|Expression::ResultType desired_type
argument_list|,
argument|const EvaluateExpressionOptions&options
argument_list|)
name|override
block|;
name|FunctionCaller
operator|*
name|GetFunctionCaller
argument_list|(
argument|const CompilerType&return_type
argument_list|,
argument|const Address&function_address
argument_list|,
argument|const ValueList&arg_value_list
argument_list|,
argument|const char *name
argument_list|)
name|override
block|;
name|UtilityFunction
operator|*
name|GetUtilityFunction
argument_list|(
argument|const char *text
argument_list|,
argument|const char *name
argument_list|)
name|override
block|;
name|PersistentExpressionState
operator|*
name|GetPersistentExpressionState
argument_list|()
name|override
block|;
name|private
operator|:
name|lldb
operator|::
name|TargetWP
name|m_target_wp
block|;
name|lldb
operator|::
name|ClangPersistentVariablesUP
name|m_persistent_variables
block|;
comment|///< These are the
comment|///persistent
comment|///variables
comment|///associated with
comment|///this process for
comment|///the expression
comment|///parser.
block|}
decl_stmt|;
end_decl_stmt

begin_comment
unit|}
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_ClangASTContext_h_
end_comment

end_unit

