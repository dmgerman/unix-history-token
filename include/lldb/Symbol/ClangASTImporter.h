begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- ClangASTImporter.h --------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_ClangASTImporter_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_ClangASTImporter_h_
end_define

begin_comment
comment|// C Includes
end_comment

begin_comment
comment|// C++ Includes
end_comment

begin_include
include|#
directive|include
file|<map>
end_include

begin_include
include|#
directive|include
file|<memory>
end_include

begin_include
include|#
directive|include
file|<set>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_include
include|#
directive|include
file|"clang/AST/ASTImporter.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/CharUnits.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/Decl.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/DeclCXX.h"
end_include

begin_include
include|#
directive|include
file|"clang/Basic/FileManager.h"
end_include

begin_include
include|#
directive|include
file|"clang/Basic/FileSystemOptions.h"
end_include

begin_comment
comment|// Project includes
end_comment

begin_include
include|#
directive|include
file|"lldb/Symbol/CompilerDeclContext.h"
end_include

begin_include
include|#
directive|include
file|"lldb/lldb-types.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|ClangASTMetrics
block|{
name|public
label|:
specifier|static
name|void
name|DumpCounters
parameter_list|(
name|Log
modifier|*
name|log
parameter_list|)
function_decl|;
specifier|static
name|void
name|ClearLocalCounters
parameter_list|()
block|{
name|local_counters
operator|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
expr_stmt|;
block|}
specifier|static
name|void
name|RegisterVisibleQuery
parameter_list|()
block|{
operator|++
name|global_counters
operator|.
name|m_visible_query_count
expr_stmt|;
operator|++
name|local_counters
operator|.
name|m_visible_query_count
expr_stmt|;
block|}
specifier|static
name|void
name|RegisterLexicalQuery
parameter_list|()
block|{
operator|++
name|global_counters
operator|.
name|m_lexical_query_count
expr_stmt|;
operator|++
name|local_counters
operator|.
name|m_lexical_query_count
expr_stmt|;
block|}
specifier|static
name|void
name|RegisterLLDBImport
parameter_list|()
block|{
operator|++
name|global_counters
operator|.
name|m_lldb_import_count
expr_stmt|;
operator|++
name|local_counters
operator|.
name|m_lldb_import_count
expr_stmt|;
block|}
specifier|static
name|void
name|RegisterClangImport
parameter_list|()
block|{
operator|++
name|global_counters
operator|.
name|m_clang_import_count
expr_stmt|;
operator|++
name|local_counters
operator|.
name|m_clang_import_count
expr_stmt|;
block|}
specifier|static
name|void
name|RegisterDeclCompletion
parameter_list|()
block|{
operator|++
name|global_counters
operator|.
name|m_decls_completed_count
expr_stmt|;
operator|++
name|local_counters
operator|.
name|m_decls_completed_count
expr_stmt|;
block|}
specifier|static
name|void
name|RegisterRecordLayout
parameter_list|()
block|{
operator|++
name|global_counters
operator|.
name|m_record_layout_count
expr_stmt|;
operator|++
name|local_counters
operator|.
name|m_record_layout_count
expr_stmt|;
block|}
name|private
label|:
struct|struct
name|Counters
block|{
name|uint64_t
name|m_visible_query_count
decl_stmt|;
name|uint64_t
name|m_lexical_query_count
decl_stmt|;
name|uint64_t
name|m_lldb_import_count
decl_stmt|;
name|uint64_t
name|m_clang_import_count
decl_stmt|;
name|uint64_t
name|m_decls_completed_count
decl_stmt|;
name|uint64_t
name|m_record_layout_count
decl_stmt|;
block|}
struct|;
specifier|static
name|Counters
name|global_counters
decl_stmt|;
specifier|static
name|Counters
name|local_counters
decl_stmt|;
specifier|static
name|void
name|DumpCounters
parameter_list|(
name|Log
modifier|*
name|log
parameter_list|,
name|Counters
modifier|&
name|counters
parameter_list|)
function_decl|;
block|}
empty_stmt|;
name|class
name|ClangASTImporter
block|{
name|public
label|:
struct|struct
name|LayoutInfo
block|{
name|LayoutInfo
argument_list|()
operator|:
name|bit_size
argument_list|(
literal|0
argument_list|)
operator|,
name|alignment
argument_list|(
literal|0
argument_list|)
operator|,
name|field_offsets
argument_list|()
operator|,
name|base_offsets
argument_list|()
operator|,
name|vbase_offsets
argument_list|()
block|{}
name|uint64_t
name|bit_size
expr_stmt|;
name|uint64_t
name|alignment
decl_stmt|;
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|clang
operator|::
name|FieldDecl
operator|*
operator|,
name|uint64_t
operator|>
name|field_offsets
expr_stmt|;
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|clang
operator|::
name|CXXRecordDecl
operator|*
operator|,
name|clang
operator|::
name|CharUnits
operator|>
name|base_offsets
expr_stmt|;
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|clang
operator|::
name|CXXRecordDecl
operator|*
operator|,
name|clang
operator|::
name|CharUnits
operator|>
name|vbase_offsets
expr_stmt|;
block|}
struct|;
name|ClangASTImporter
argument_list|()
operator|:
name|m_file_manager
argument_list|(
argument|clang::FileSystemOptions()
argument_list|)
block|{}
name|clang
operator|::
name|QualType
name|CopyType
argument_list|(
argument|clang::ASTContext *dst_ctx
argument_list|,
argument|clang::ASTContext *src_ctx
argument_list|,
argument|clang::QualType type
argument_list|)
expr_stmt|;
name|lldb
operator|::
name|opaque_compiler_type_t
name|CopyType
argument_list|(
argument|clang::ASTContext *dst_ctx
argument_list|,
argument|clang::ASTContext *src_ctx
argument_list|,
argument|lldb::opaque_compiler_type_t type
argument_list|)
expr_stmt|;
name|CompilerType
name|CopyType
parameter_list|(
name|ClangASTContext
modifier|&
name|dst
parameter_list|,
specifier|const
name|CompilerType
modifier|&
name|src_type
parameter_list|)
function_decl|;
name|clang
operator|::
name|Decl
operator|*
name|CopyDecl
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|dst_ctx
argument_list|,
name|clang
operator|::
name|ASTContext
operator|*
name|src_ctx
argument_list|,
name|clang
operator|::
name|Decl
operator|*
name|decl
argument_list|)
expr_stmt|;
name|lldb
operator|::
name|opaque_compiler_type_t
name|DeportType
argument_list|(
argument|clang::ASTContext *dst_ctx
argument_list|,
argument|clang::ASTContext *src_ctx
argument_list|,
argument|lldb::opaque_compiler_type_t type
argument_list|)
expr_stmt|;
name|clang
operator|::
name|Decl
operator|*
name|DeportDecl
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|dst_ctx
argument_list|,
name|clang
operator|::
name|ASTContext
operator|*
name|src_ctx
argument_list|,
name|clang
operator|::
name|Decl
operator|*
name|decl
argument_list|)
expr_stmt|;
name|void
name|InsertRecordDecl
argument_list|(
name|clang
operator|::
name|RecordDecl
operator|*
name|decl
argument_list|,
specifier|const
name|LayoutInfo
operator|&
name|layout
argument_list|)
decl_stmt|;
name|bool
name|LayoutRecordType
argument_list|(
specifier|const
name|clang
operator|::
name|RecordDecl
operator|*
name|record_decl
argument_list|,
name|uint64_t
operator|&
name|bit_size
argument_list|,
name|uint64_t
operator|&
name|alignment
argument_list|,
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|clang
operator|::
name|FieldDecl
operator|*
argument_list|,
name|uint64_t
operator|>
operator|&
name|field_offsets
argument_list|,
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|clang
operator|::
name|CXXRecordDecl
operator|*
argument_list|,
name|clang
operator|::
name|CharUnits
operator|>
operator|&
name|base_offsets
argument_list|,
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|clang
operator|::
name|CXXRecordDecl
operator|*
argument_list|,
name|clang
operator|::
name|CharUnits
operator|>
operator|&
name|vbase_offsets
argument_list|)
decl_stmt|;
name|bool
name|CanImport
parameter_list|(
specifier|const
name|CompilerType
modifier|&
name|type
parameter_list|)
function_decl|;
name|bool
name|Import
parameter_list|(
specifier|const
name|CompilerType
modifier|&
name|type
parameter_list|)
function_decl|;
name|bool
name|CompleteType
parameter_list|(
specifier|const
name|CompilerType
modifier|&
name|compiler_type
parameter_list|)
function_decl|;
name|void
name|CompleteDecl
argument_list|(
name|clang
operator|::
name|Decl
operator|*
name|decl
argument_list|)
decl_stmt|;
name|bool
name|CompleteTagDecl
argument_list|(
name|clang
operator|::
name|TagDecl
operator|*
name|decl
argument_list|)
decl_stmt|;
name|bool
name|CompleteTagDeclWithOrigin
argument_list|(
name|clang
operator|::
name|TagDecl
operator|*
name|decl
argument_list|,
name|clang
operator|::
name|TagDecl
operator|*
name|origin
argument_list|)
decl_stmt|;
name|bool
name|CompleteObjCInterfaceDecl
argument_list|(
name|clang
operator|::
name|ObjCInterfaceDecl
operator|*
name|interface_decl
argument_list|)
decl_stmt|;
name|bool
name|CompleteAndFetchChildren
argument_list|(
name|clang
operator|::
name|QualType
name|type
argument_list|)
decl_stmt|;
name|bool
name|RequireCompleteType
argument_list|(
name|clang
operator|::
name|QualType
name|type
argument_list|)
decl_stmt|;
name|bool
name|ResolveDeclOrigin
argument_list|(
specifier|const
name|clang
operator|::
name|Decl
operator|*
name|decl
argument_list|,
name|clang
operator|::
name|Decl
operator|*
operator|*
name|original_decl
argument_list|,
name|clang
operator|::
name|ASTContext
operator|*
operator|*
name|original_ctx
argument_list|)
block|{
name|DeclOrigin
name|origin
init|=
name|GetDeclOrigin
argument_list|(
name|decl
argument_list|)
decl_stmt|;
if|if
condition|(
name|original_decl
condition|)
operator|*
name|original_decl
operator|=
name|origin
operator|.
name|decl
expr_stmt|;
if|if
condition|(
name|original_ctx
condition|)
operator|*
name|original_ctx
operator|=
name|origin
operator|.
name|ctx
expr_stmt|;
return|return
name|origin
operator|.
name|Valid
argument_list|()
return|;
block|}
name|void
name|SetDeclOrigin
argument_list|(
specifier|const
name|clang
operator|::
name|Decl
operator|*
name|decl
argument_list|,
name|clang
operator|::
name|Decl
operator|*
name|original_decl
argument_list|)
decl_stmt|;
name|ClangASTMetadata
modifier|*
name|GetDeclMetadata
argument_list|(
specifier|const
name|clang
operator|::
name|Decl
operator|*
name|decl
argument_list|)
decl_stmt|;
comment|//
comment|// Namespace maps
comment|//
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|pair
operator|<
name|lldb
operator|::
name|ModuleSP
operator|,
name|CompilerDeclContext
operator|>>
name|NamespaceMap
expr_stmt|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|NamespaceMap
operator|>
name|NamespaceMapSP
expr_stmt|;
name|void
name|RegisterNamespaceMap
argument_list|(
specifier|const
name|clang
operator|::
name|NamespaceDecl
operator|*
name|decl
argument_list|,
name|NamespaceMapSP
operator|&
name|namespace_map
argument_list|)
decl_stmt|;
name|NamespaceMapSP
name|GetNamespaceMap
argument_list|(
specifier|const
name|clang
operator|::
name|NamespaceDecl
operator|*
name|decl
argument_list|)
decl_stmt|;
name|void
name|BuildNamespaceMap
argument_list|(
specifier|const
name|clang
operator|::
name|NamespaceDecl
operator|*
name|decl
argument_list|)
decl_stmt|;
comment|//
comment|// Completers for maps
comment|//
name|class
name|MapCompleter
block|{
name|public
label|:
name|virtual
operator|~
name|MapCompleter
argument_list|()
expr_stmt|;
name|virtual
name|void
name|CompleteNamespaceMap
argument_list|(
name|NamespaceMapSP
operator|&
name|namespace_map
argument_list|,
specifier|const
name|ConstString
operator|&
name|name
argument_list|,
name|NamespaceMapSP
operator|&
name|parent_map
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
block|}
empty_stmt|;
name|void
name|InstallMapCompleter
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|dst_ctx
argument_list|,
name|MapCompleter
operator|&
name|completer
argument_list|)
block|{
name|ASTContextMetadataSP
name|context_md
decl_stmt|;
name|ContextMetadataMap
operator|::
name|iterator
name|context_md_iter
operator|=
name|m_metadata_map
operator|.
name|find
argument_list|(
name|dst_ctx
argument_list|)
expr_stmt|;
if|if
condition|(
name|context_md_iter
operator|==
name|m_metadata_map
operator|.
name|end
argument_list|()
condition|)
block|{
name|context_md
operator|=
name|ASTContextMetadataSP
argument_list|(
argument|new ASTContextMetadata(dst_ctx)
argument_list|)
expr_stmt|;
name|m_metadata_map
index|[
name|dst_ctx
index|]
operator|=
name|context_md
expr_stmt|;
block|}
else|else
block|{
name|context_md
operator|=
name|context_md_iter
operator|->
name|second
expr_stmt|;
block|}
name|context_md
operator|->
name|m_map_completer
operator|=
operator|&
name|completer
expr_stmt|;
block|}
name|void
name|ForgetDestination
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|dst_ctx
argument_list|)
decl_stmt|;
name|void
name|ForgetSource
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|dst_ctx
argument_list|,
name|clang
operator|::
name|ASTContext
operator|*
name|src_ctx
argument_list|)
decl_stmt|;
name|private
label|:
struct|struct
name|DeclOrigin
block|{
name|DeclOrigin
argument_list|()
operator|:
name|ctx
argument_list|(
name|nullptr
argument_list|)
operator|,
name|decl
argument_list|(
argument|nullptr
argument_list|)
block|{}
name|DeclOrigin
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|_ctx
argument_list|,
name|clang
operator|::
name|Decl
operator|*
name|_decl
argument_list|)
operator|:
name|ctx
argument_list|(
name|_ctx
argument_list|)
operator|,
name|decl
argument_list|(
argument|_decl
argument_list|)
block|{}
name|DeclOrigin
argument_list|(
argument|const DeclOrigin&rhs
argument_list|)
block|{
name|ctx
operator|=
name|rhs
operator|.
name|ctx
block|;
name|decl
operator|=
name|rhs
operator|.
name|decl
block|;     }
name|void
name|operator
operator|=
operator|(
specifier|const
name|DeclOrigin
operator|&
name|rhs
operator|)
block|{
name|ctx
operator|=
name|rhs
operator|.
name|ctx
block|;
name|decl
operator|=
name|rhs
operator|.
name|decl
block|;     }
name|bool
name|Valid
argument_list|()
block|{
return|return
operator|(
name|ctx
operator|!=
name|nullptr
operator|||
name|decl
operator|!=
name|nullptr
operator|)
return|;
block|}
name|clang
operator|::
name|ASTContext
operator|*
name|ctx
expr_stmt|;
name|clang
operator|::
name|Decl
operator|*
name|decl
expr_stmt|;
block|}
struct|;
typedef|typedef
name|std
operator|::
name|map
operator|<
specifier|const
name|clang
operator|::
name|Decl
operator|*
operator|,
name|DeclOrigin
operator|>
name|OriginMap
expr_stmt|;
name|class
name|Minion
range|:
name|public
name|clang
operator|::
name|ASTImporter
block|{
name|public
operator|:
name|Minion
argument_list|(
name|ClangASTImporter
operator|&
name|master
argument_list|,
name|clang
operator|::
name|ASTContext
operator|*
name|target_ctx
argument_list|,
name|clang
operator|::
name|ASTContext
operator|*
name|source_ctx
argument_list|)
operator|:
name|clang
operator|::
name|ASTImporter
argument_list|(
operator|*
name|target_ctx
argument_list|,
name|master
operator|.
name|m_file_manager
argument_list|,
operator|*
name|source_ctx
argument_list|,
name|master
operator|.
name|m_file_manager
argument_list|,
name|true
comment|/*minimal*/
argument_list|)
block|,
name|m_decls_to_deport
argument_list|(
name|nullptr
argument_list|)
block|,
name|m_decls_already_deported
argument_list|(
name|nullptr
argument_list|)
block|,
name|m_master
argument_list|(
name|master
argument_list|)
block|,
name|m_source_ctx
argument_list|(
argument|source_ctx
argument_list|)
block|{}
comment|// A call to "InitDeportWorkQueues" puts the minion into deport mode.
comment|// In deport mode, every copied Decl that could require completion is
comment|// recorded and placed into the decls_to_deport set.
comment|//
comment|// A call to "ExecuteDeportWorkQueues" completes all the Decls that
comment|// are in decls_to_deport, adding any Decls it sees along the way that
comment|// it hasn't already deported.  It proceeds until decls_to_deport is
comment|// empty.
comment|//
comment|// These calls must be paired.  Leaving a minion in deport mode or
comment|// trying to start deport minion with a new pair of queues will result
comment|// in an assertion failure.
name|void
name|InitDeportWorkQueues
argument_list|(
name|std
operator|::
name|set
operator|<
name|clang
operator|::
name|NamedDecl
operator|*
operator|>
operator|*
name|decls_to_deport
argument_list|,
name|std
operator|::
name|set
operator|<
name|clang
operator|::
name|NamedDecl
operator|*
operator|>
operator|*
name|decls_already_deported
argument_list|)
block|;
name|void
name|ExecuteDeportWorkQueues
argument_list|()
block|;
name|void
name|ImportDefinitionTo
argument_list|(
name|clang
operator|::
name|Decl
operator|*
name|to
argument_list|,
name|clang
operator|::
name|Decl
operator|*
name|from
argument_list|)
block|;
name|clang
operator|::
name|Decl
operator|*
name|Imported
argument_list|(
argument|clang::Decl *from
argument_list|,
argument|clang::Decl *to
argument_list|)
name|override
block|;
name|clang
operator|::
name|Decl
operator|*
name|GetOriginalDecl
argument_list|(
argument|clang::Decl *To
argument_list|)
name|override
block|;
name|std
operator|::
name|set
operator|<
name|clang
operator|::
name|NamedDecl
operator|*
operator|>
operator|*
name|m_decls_to_deport
block|;
name|std
operator|::
name|set
operator|<
name|clang
operator|::
name|NamedDecl
operator|*
operator|>
operator|*
name|m_decls_already_deported
block|;
name|ClangASTImporter
operator|&
name|m_master
block|;
name|clang
operator|::
name|ASTContext
operator|*
name|m_source_ctx
block|;   }
decl_stmt|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|Minion
operator|>
name|MinionSP
expr_stmt|;
typedef|typedef
name|std
operator|::
name|map
operator|<
name|clang
operator|::
name|ASTContext
operator|*
operator|,
name|MinionSP
operator|>
name|MinionMap
expr_stmt|;
typedef|typedef
name|std
operator|::
name|map
operator|<
specifier|const
name|clang
operator|::
name|NamespaceDecl
operator|*
operator|,
name|NamespaceMapSP
operator|>
name|NamespaceMetaMap
expr_stmt|;
struct|struct
name|ASTContextMetadata
block|{
name|ASTContextMetadata
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|dst_ctx
argument_list|)
operator|:
name|m_dst_ctx
argument_list|(
name|dst_ctx
argument_list|)
operator|,
name|m_minions
argument_list|()
operator|,
name|m_origins
argument_list|()
operator|,
name|m_namespace_maps
argument_list|()
operator|,
name|m_map_completer
argument_list|(
argument|nullptr
argument_list|)
block|{}
name|clang
operator|::
name|ASTContext
operator|*
name|m_dst_ctx
expr_stmt|;
name|MinionMap
name|m_minions
decl_stmt|;
name|OriginMap
name|m_origins
decl_stmt|;
name|NamespaceMetaMap
name|m_namespace_maps
decl_stmt|;
name|MapCompleter
modifier|*
name|m_map_completer
decl_stmt|;
block|}
struct|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|ASTContextMetadata
operator|>
name|ASTContextMetadataSP
expr_stmt|;
typedef|typedef
name|std
operator|::
name|map
operator|<
specifier|const
name|clang
operator|::
name|ASTContext
operator|*
operator|,
name|ASTContextMetadataSP
operator|>
name|ContextMetadataMap
expr_stmt|;
name|ContextMetadataMap
name|m_metadata_map
decl_stmt|;
name|ASTContextMetadataSP
name|GetContextMetadata
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|dst_ctx
argument_list|)
block|{
name|ContextMetadataMap
operator|::
name|iterator
name|context_md_iter
operator|=
name|m_metadata_map
operator|.
name|find
argument_list|(
name|dst_ctx
argument_list|)
expr_stmt|;
if|if
condition|(
name|context_md_iter
operator|==
name|m_metadata_map
operator|.
name|end
argument_list|()
condition|)
block|{
name|ASTContextMetadataSP
name|context_md
init|=
name|ASTContextMetadataSP
argument_list|(
argument|new ASTContextMetadata(dst_ctx)
argument_list|)
decl_stmt|;
name|m_metadata_map
index|[
name|dst_ctx
index|]
operator|=
name|context_md
expr_stmt|;
return|return
name|context_md
return|;
block|}
else|else
block|{
return|return
name|context_md_iter
operator|->
name|second
return|;
block|}
block|}
name|ASTContextMetadataSP
name|MaybeGetContextMetadata
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|dst_ctx
argument_list|)
block|{
name|ContextMetadataMap
operator|::
name|iterator
name|context_md_iter
operator|=
name|m_metadata_map
operator|.
name|find
argument_list|(
name|dst_ctx
argument_list|)
expr_stmt|;
if|if
condition|(
name|context_md_iter
operator|!=
name|m_metadata_map
operator|.
name|end
argument_list|()
condition|)
return|return
name|context_md_iter
operator|->
name|second
return|;
else|else
return|return
name|ASTContextMetadataSP
argument_list|()
return|;
block|}
name|MinionSP
name|GetMinion
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|dst_ctx
argument_list|,
name|clang
operator|::
name|ASTContext
operator|*
name|src_ctx
argument_list|)
block|{
name|ASTContextMetadataSP
name|context_md
init|=
name|GetContextMetadata
argument_list|(
name|dst_ctx
argument_list|)
decl_stmt|;
name|MinionMap
modifier|&
name|minions
init|=
name|context_md
operator|->
name|m_minions
decl_stmt|;
name|MinionMap
operator|::
name|iterator
name|minion_iter
operator|=
name|minions
operator|.
name|find
argument_list|(
name|src_ctx
argument_list|)
expr_stmt|;
if|if
condition|(
name|minion_iter
operator|==
name|minions
operator|.
name|end
argument_list|()
condition|)
block|{
name|MinionSP
name|minion
init|=
name|MinionSP
argument_list|(
argument|new Minion(*this, dst_ctx, src_ctx)
argument_list|)
decl_stmt|;
name|minions
index|[
name|src_ctx
index|]
operator|=
name|minion
expr_stmt|;
return|return
name|minion
return|;
block|}
else|else
block|{
return|return
name|minion_iter
operator|->
name|second
return|;
block|}
block|}
name|DeclOrigin
name|GetDeclOrigin
argument_list|(
specifier|const
name|clang
operator|::
name|Decl
operator|*
name|decl
argument_list|)
decl_stmt|;
name|clang
operator|::
name|FileManager
name|m_file_manager
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|clang
operator|::
name|RecordDecl
operator|*
operator|,
name|LayoutInfo
operator|>
name|RecordDeclToLayoutMap
expr_stmt|;
name|RecordDeclToLayoutMap
name|m_record_decl_to_layout_map
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_ClangASTImporter_h_
end_comment

end_unit

