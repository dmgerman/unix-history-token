begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- ScriptInterpreter.h -------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_ScriptInterpreter_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_ScriptInterpreter_h_
end_define

begin_comment
comment|// C Includes
end_comment

begin_comment
comment|// C++ Includes
end_comment

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_comment
comment|// Project includes
end_comment

begin_include
include|#
directive|include
file|"lldb/lldb-private.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Breakpoint/BreakpointOptions.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/Broadcaster.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/Error.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/PluginInterface.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/StructuredData.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Utility/PseudoTerminal.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|ScriptInterpreterLocker
block|{
name|public
label|:
name|ScriptInterpreterLocker
argument_list|()
operator|=
expr|default
expr_stmt|;
name|virtual
operator|~
name|ScriptInterpreterLocker
argument_list|()
operator|=
expr|default
expr_stmt|;
name|private
label|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|ScriptInterpreterLocker
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
name|class
name|ScriptInterpreter
range|:
name|public
name|PluginInterface
block|{
name|public
operator|:
typedef|typedef
enum|enum
block|{
name|eScriptReturnTypeCharPtr
block|,
name|eScriptReturnTypeBool
block|,
name|eScriptReturnTypeShortInt
block|,
name|eScriptReturnTypeShortIntUnsigned
block|,
name|eScriptReturnTypeInt
block|,
name|eScriptReturnTypeIntUnsigned
block|,
name|eScriptReturnTypeLongInt
block|,
name|eScriptReturnTypeLongIntUnsigned
block|,
name|eScriptReturnTypeLongLong
block|,
name|eScriptReturnTypeLongLongUnsigned
block|,
name|eScriptReturnTypeFloat
block|,
name|eScriptReturnTypeDouble
block|,
name|eScriptReturnTypeChar
block|,
name|eScriptReturnTypeCharStrOrNone
block|,
name|eScriptReturnTypeOpaqueObject
decl|}
name|ScriptReturnType
empty_stmt|;
name|ScriptInterpreter
argument_list|(
argument|CommandInterpreter&interpreter
argument_list|,
argument|lldb::ScriptLanguage script_lang
argument_list|)
empty_stmt|;
operator|~
name|ScriptInterpreter
argument_list|()
name|override
expr_stmt|;
struct|struct
name|ExecuteScriptOptions
block|{
name|public
label|:
name|ExecuteScriptOptions
argument_list|()
operator|:
name|m_enable_io
argument_list|(
name|true
argument_list|)
operator|,
name|m_set_lldb_globals
argument_list|(
name|true
argument_list|)
operator|,
name|m_maskout_errors
argument_list|(
argument|true
argument_list|)
block|{}
name|bool
name|GetEnableIO
argument_list|()
specifier|const
block|{
return|return
name|m_enable_io
return|;
block|}
name|bool
name|GetSetLLDBGlobals
argument_list|()
specifier|const
block|{
return|return
name|m_set_lldb_globals
return|;
block|}
name|bool
name|GetMaskoutErrors
argument_list|()
specifier|const
block|{
return|return
name|m_maskout_errors
return|;
block|}
name|ExecuteScriptOptions
operator|&
name|SetEnableIO
argument_list|(
argument|bool enable
argument_list|)
block|{
name|m_enable_io
operator|=
name|enable
block|;
return|return
operator|*
name|this
return|;
block|}
name|ExecuteScriptOptions
operator|&
name|SetSetLLDBGlobals
argument_list|(
argument|bool set
argument_list|)
block|{
name|m_set_lldb_globals
operator|=
name|set
block|;
return|return
operator|*
name|this
return|;
block|}
name|ExecuteScriptOptions
operator|&
name|SetMaskoutErrors
argument_list|(
argument|bool maskout
argument_list|)
block|{
name|m_maskout_errors
operator|=
name|maskout
block|;
return|return
operator|*
name|this
return|;
block|}
name|private
operator|:
name|bool
name|m_enable_io
expr_stmt|;
name|bool
name|m_set_lldb_globals
block|;
name|bool
name|m_maskout_errors
block|;
block|}
struct|;
name|virtual
name|bool
name|Interrupt
parameter_list|()
block|{
return|return
name|false
return|;
block|}
function|virtual bool ExecuteOneLine
parameter_list|(
specifier|const
name|char
modifier|*
name|command
parameter_list|,
name|CommandReturnObject
modifier|*
name|result
parameter_list|,
specifier|const
name|ExecuteScriptOptions
modifier|&
name|options
init|=
name|ExecuteScriptOptions
argument_list|()
parameter_list|)
init|=
literal|0
function|;
name|virtual
name|void
name|ExecuteInterpreterLoop
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|ExecuteOneLineWithReturn
parameter_list|(
specifier|const
name|char
modifier|*
name|in_string
parameter_list|,
name|ScriptReturnType
name|return_type
parameter_list|,
name|void
modifier|*
name|ret_value
parameter_list|,
specifier|const
name|ExecuteScriptOptions
modifier|&
name|options
init|=
name|ExecuteScriptOptions
argument_list|()
parameter_list|)
block|{
return|return
name|true
return|;
block|}
function|virtual Error ExecuteMultipleLines
parameter_list|(
specifier|const
name|char
modifier|*
name|in_string
parameter_list|,
specifier|const
name|ExecuteScriptOptions
modifier|&
name|options
init|=
name|ExecuteScriptOptions
argument_list|()
parameter_list|)
block|{
name|Error
name|error
block|;
name|error
operator|.
name|SetErrorString
argument_list|(
literal|"not implemented"
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
function|virtual Error   ExportFunctionDefinitionToInterpreter
parameter_list|(
name|StringList
modifier|&
name|function_def
parameter_list|)
block|{
name|Error
name|error
block|;
name|error
operator|.
name|SetErrorString
argument_list|(
literal|"not implemented"
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
name|virtual
name|Error
name|GenerateBreakpointCommandCallbackData
function|(StringList&input
operator|,
function|std::string&output
block|)
block|{
name|Error
name|error
block|;
name|error
operator|.
name|SetErrorString
argument_list|(
literal|"not implemented"
argument_list|)
empty_stmt|;
return|return
name|error
return|;
block|}
name|virtual
name|bool
name|GenerateWatchpointCommandCallbackData
enum|(
name|StringList
enum|&
name|input
enum|,
name|std
operator|::
name|string
operator|&
name|output
typedef|)
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|GenerateTypeScriptFunction
typedef|(const
name|char
typedef|*
name|oneliner
operator|,
name|std
typedef|::
name|string
typedef|&
name|output
operator|,
typedef|const
name|void
typedef|*
name|name_token
typedef|=
name|nullptr
typedef|)
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|GenerateTypeScriptFunction
typedef|(
name|StringList
typedef|&
name|input
operator|,
name|std
typedef|::
name|string
typedef|&
name|output
operator|,
typedef|const
name|void
typedef|*
name|name_token
typedef|=
name|nullptr
typedef|)
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|GenerateScriptAliasFunction
typedef|(
name|StringList
typedef|&
name|input
operator|,
name|std
typedef|::
name|string
typedef|&
name|output
typedef|)
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|GenerateTypeSynthClass
typedef|(
name|StringList
typedef|&
name|input
operator|,
name|std
typedef|::
name|string
typedef|&
name|output
operator|,
typedef|const
name|void
typedef|*
name|name_token
typedef|=
name|nullptr
typedef|)
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|GenerateTypeSynthClass
typedef|(const
name|char
typedef|*
name|oneliner
operator|,
name|std
typedef|::
name|string
typedef|&
name|output
operator|,
typedef|const
name|void
typedef|*
name|name_token
typedef|=
name|nullptr
typedef|)
block|{
return|return
name|false
return|;
block|}
name|virtual
name|StructuredData
typedef|::
name|ObjectSP
name|CreateSyntheticScriptedProvider
typedef|(const
name|char
typedef|*
name|class_name
operator|,
name|lldb
typedef|::
name|ValueObjectSP
name|valobj
typedef|)
block|{
return|return
name|StructuredData
operator|::
name|ObjectSP
argument_list|()
return|;
block|}
name|virtual
name|StructuredData
typedef|::
name|GenericSP
name|CreateScriptCommandObject
typedef|(const
name|char
typedef|*
name|class_name
typedef|)
block|{
return|return
name|StructuredData
operator|::
name|GenericSP
argument_list|()
return|;
block|}
name|virtual
name|StructuredData
typedef|::
name|GenericSP
name|OSPlugin_CreatePluginObject
typedef|(const
name|char
typedef|*
name|class_name
operator|,
name|lldb
typedef|::
name|ProcessSP
name|process_sp
typedef|)
block|{
return|return
name|StructuredData
operator|::
name|GenericSP
argument_list|()
return|;
block|}
name|virtual
name|StructuredData
typedef|::
name|DictionarySP
name|OSPlugin_RegisterInfo
typedef|(
name|StructuredData
typedef|::
name|ObjectSP
name|os_plugin_object_sp
typedef|)
block|{
return|return
name|StructuredData
operator|::
name|DictionarySP
argument_list|()
return|;
block|}
name|virtual
name|StructuredData
typedef|::
name|ArraySP
name|OSPlugin_ThreadsInfo
typedef|(
name|StructuredData
typedef|::
name|ObjectSP
name|os_plugin_object_sp
typedef|)
block|{
return|return
name|StructuredData
operator|::
name|ArraySP
argument_list|()
return|;
block|}
name|virtual
name|StructuredData
typedef|::
name|StringSP
name|OSPlugin_RegisterContextData
typedef|(
name|StructuredData
typedef|::
name|ObjectSP
name|os_plugin_object_sp
operator|,
name|lldb
typedef|::
name|tid_t
name|thread_id
typedef|)
block|{
return|return
name|StructuredData
operator|::
name|StringSP
argument_list|()
return|;
block|}
name|virtual
name|StructuredData
typedef|::
name|DictionarySP
name|OSPlugin_CreateThread
typedef|(
name|StructuredData
typedef|::
name|ObjectSP
name|os_plugin_object_sp
operator|,
name|lldb
typedef|::
name|tid_t
name|tid
operator|,
name|lldb
typedef|::
name|addr_t
name|context
typedef|)
block|{
return|return
name|StructuredData
operator|::
name|DictionarySP
argument_list|()
return|;
block|}
name|virtual
name|StructuredData
typedef|::
name|ObjectSP
name|CreateScriptedThreadPlan
typedef|(const
name|char
typedef|*
name|class_name
operator|,
name|lldb
typedef|::
name|ThreadPlanSP
name|thread_plan_sp
typedef|)
block|{
return|return
name|StructuredData
operator|::
name|ObjectSP
argument_list|()
return|;
block|}
name|virtual
name|bool
name|ScriptedThreadPlanExplainsStop
typedef|(
name|StructuredData
typedef|::
name|ObjectSP
name|implementor_sp
operator|,
name|Event
typedef|*
name|event
operator|,
name|bool
typedef|&
name|script_error
typedef|)
block|{
name|script_error
operator|=
name|true
expr_stmt|;
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|ScriptedThreadPlanShouldStop
typedef|(
name|StructuredData
typedef|::
name|ObjectSP
name|implementor_sp
operator|,
name|Event
typedef|*
name|event
operator|,
name|bool
typedef|&
name|script_error
typedef|)
block|{
name|script_error
operator|=
name|true
expr_stmt|;
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|ScriptedThreadPlanIsStale
typedef|(
name|StructuredData
typedef|::
name|ObjectSP
name|implementor_sp
operator|,
name|bool
typedef|&
name|script_error
typedef|)
block|{
name|script_error
operator|=
name|true
expr_stmt|;
return|return
name|true
return|;
block|}
name|virtual
name|lldb
typedef|::
name|StateType
name|ScriptedThreadPlanGetRunState
typedef|(
name|StructuredData
typedef|::
name|ObjectSP
name|implementor_sp
operator|,
name|bool
typedef|&
name|script_error
typedef|)
block|{
name|script_error
operator|=
name|true
expr_stmt|;
return|return
name|lldb
operator|::
name|eStateStepping
return|;
block|}
name|virtual
name|StructuredData
typedef|::
name|ObjectSP
name|LoadPluginModule
typedef|(const
name|FileSpec
typedef|&
name|file_spec
operator|,
name|lldb_private
typedef|::
name|Error
typedef|&
name|error
typedef|)
block|{
return|return
name|StructuredData
operator|::
name|ObjectSP
argument_list|()
return|;
block|}
name|virtual
name|StructuredData
typedef|::
name|DictionarySP
name|GetDynamicSettings
typedef|(
name|StructuredData
typedef|::
name|ObjectSP
name|plugin_module_sp
operator|,
name|Target
typedef|*
name|target
operator|,
typedef|const
name|char
typedef|*
name|setting_name
operator|,
name|lldb_private
typedef|::
name|Error
typedef|&
name|error
typedef|)
block|{
return|return
name|StructuredData
operator|::
name|DictionarySP
argument_list|()
return|;
block|}
name|virtual
name|Error
name|GenerateFunction
typedef|(const
name|char
typedef|*
name|signature
operator|,
typedef|const
name|StringList
typedef|&
name|input
typedef|)
block|{
name|Error
name|error
decl_stmt|;
name|error
operator|.
name|SetErrorString
argument_list|(
literal|"unimplemented"
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
name|virtual
name|void
name|CollectDataForBreakpointCommandCallback
typedef|(
name|std
typedef|::
name|vector
typedef|<
name|BreakpointOptions
typedef|*>&
name|options
operator|,
name|CommandReturnObject
typedef|&
name|result
typedef|);
name|virtual
name|void
name|CollectDataForWatchpointCommandCallback
argument_list|(
name|WatchpointOptions
operator|*
name|wp_options
argument_list|,
name|CommandReturnObject
operator|&
name|result
argument_list|)
decl_stmt|;
comment|/// Set the specified text as the callback for the breakpoint.
name|Error
name|SetBreakpointCommandCallback
argument_list|(
name|std
operator|::
name|vector
operator|<
name|BreakpointOptions
operator|*
operator|>
operator|&
name|bp_options_vec
argument_list|,
specifier|const
name|char
operator|*
name|callback_text
argument_list|)
decl_stmt|;
name|virtual
name|Error
name|SetBreakpointCommandCallback
parameter_list|(
name|BreakpointOptions
modifier|*
name|bp_options
parameter_list|,
specifier|const
name|char
modifier|*
name|callback_text
parameter_list|)
block|{
name|Error
name|error
decl_stmt|;
name|error
operator|.
name|SetErrorString
argument_list|(
literal|"unimplemented"
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
comment|/// This one is for deserialization:
name|virtual
name|Error
name|SetBreakpointCommandCallback
argument_list|(
name|BreakpointOptions
operator|*
name|bp_options
argument_list|,
name|std
operator|::
name|unique_ptr
operator|<
name|BreakpointOptions
operator|::
name|CommandData
operator|>
operator|&
name|data_up
argument_list|)
block|{
name|Error
name|error
decl_stmt|;
name|error
operator|.
name|SetErrorString
argument_list|(
literal|"unimplemented"
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
name|void
name|SetBreakpointCommandCallbackFunction
argument_list|(
name|std
operator|::
name|vector
operator|<
name|BreakpointOptions
operator|*
operator|>
operator|&
name|bp_options_vec
argument_list|,
specifier|const
name|char
operator|*
name|function_name
argument_list|)
decl_stmt|;
comment|/// Set a one-liner as the callback for the breakpoint.
name|virtual
name|void
name|SetBreakpointCommandCallbackFunction
parameter_list|(
name|BreakpointOptions
modifier|*
name|bp_options
parameter_list|,
specifier|const
name|char
modifier|*
name|function_name
parameter_list|)
block|{}
comment|/// Set a one-liner as the callback for the watchpoint.
name|virtual
name|void
name|SetWatchpointCommandCallback
parameter_list|(
name|WatchpointOptions
modifier|*
name|wp_options
parameter_list|,
specifier|const
name|char
modifier|*
name|oneliner
parameter_list|)
block|{}
name|virtual
name|bool
name|GetScriptedSummary
argument_list|(
specifier|const
name|char
operator|*
name|function_name
argument_list|,
name|lldb
operator|::
name|ValueObjectSP
name|valobj
argument_list|,
name|StructuredData
operator|::
name|ObjectSP
operator|&
name|callee_wrapper_sp
argument_list|,
specifier|const
name|TypeSummaryOptions
operator|&
name|options
argument_list|,
name|std
operator|::
name|string
operator|&
name|retval
argument_list|)
block|{
return|return
name|false
return|;
block|}
name|virtual
name|void
name|Clear
parameter_list|()
block|{
comment|// Clean up any ref counts to SBObjects that might be in global variables
block|}
name|virtual
name|size_t
name|CalculateNumChildren
argument_list|(
specifier|const
name|StructuredData
operator|::
name|ObjectSP
operator|&
name|implementor
argument_list|,
name|uint32_t
name|max
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|lldb
operator|::
name|ValueObjectSP
name|GetChildAtIndex
argument_list|(
argument|const StructuredData::ObjectSP&implementor
argument_list|,
argument|uint32_t idx
argument_list|)
block|{
return|return
name|lldb
operator|::
name|ValueObjectSP
argument_list|()
return|;
block|}
name|virtual
name|int
name|GetIndexOfChildWithName
argument_list|(
specifier|const
name|StructuredData
operator|::
name|ObjectSP
operator|&
name|implementor
argument_list|,
specifier|const
name|char
operator|*
name|child_name
argument_list|)
block|{
return|return
name|UINT32_MAX
return|;
block|}
name|virtual
name|bool
name|UpdateSynthProviderInstance
argument_list|(
specifier|const
name|StructuredData
operator|::
name|ObjectSP
operator|&
name|implementor
argument_list|)
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|MightHaveChildrenSynthProviderInstance
argument_list|(
specifier|const
name|StructuredData
operator|::
name|ObjectSP
operator|&
name|implementor
argument_list|)
block|{
return|return
name|true
return|;
block|}
name|virtual
name|lldb
operator|::
name|ValueObjectSP
name|GetSyntheticValue
argument_list|(
argument|const StructuredData::ObjectSP&implementor
argument_list|)
block|{
return|return
name|nullptr
return|;
block|}
name|virtual
name|ConstString
name|GetSyntheticTypeName
argument_list|(
specifier|const
name|StructuredData
operator|::
name|ObjectSP
operator|&
name|implementor
argument_list|)
block|{
return|return
name|ConstString
argument_list|()
return|;
block|}
name|virtual
name|bool
name|RunScriptBasedCommand
argument_list|(
specifier|const
name|char
operator|*
name|impl_function
argument_list|,
specifier|const
name|char
operator|*
name|args
argument_list|,
name|ScriptedCommandSynchronicity
name|synchronicity
argument_list|,
name|lldb_private
operator|::
name|CommandReturnObject
operator|&
name|cmd_retobj
argument_list|,
name|Error
operator|&
name|error
argument_list|,
specifier|const
name|lldb_private
operator|::
name|ExecutionContext
operator|&
name|exe_ctx
argument_list|)
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|RunScriptBasedCommand
argument_list|(
name|StructuredData
operator|::
name|GenericSP
name|impl_obj_sp
argument_list|,
specifier|const
name|char
operator|*
name|args
argument_list|,
name|ScriptedCommandSynchronicity
name|synchronicity
argument_list|,
name|lldb_private
operator|::
name|CommandReturnObject
operator|&
name|cmd_retobj
argument_list|,
name|Error
operator|&
name|error
argument_list|,
specifier|const
name|lldb_private
operator|::
name|ExecutionContext
operator|&
name|exe_ctx
argument_list|)
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|RunScriptFormatKeyword
argument_list|(
specifier|const
name|char
operator|*
name|impl_function
argument_list|,
name|Process
operator|*
name|process
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|,
name|Error
operator|&
name|error
argument_list|)
block|{
name|error
operator|.
name|SetErrorString
argument_list|(
literal|"unimplemented"
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|RunScriptFormatKeyword
argument_list|(
specifier|const
name|char
operator|*
name|impl_function
argument_list|,
name|Thread
operator|*
name|thread
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|,
name|Error
operator|&
name|error
argument_list|)
block|{
name|error
operator|.
name|SetErrorString
argument_list|(
literal|"unimplemented"
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|RunScriptFormatKeyword
argument_list|(
specifier|const
name|char
operator|*
name|impl_function
argument_list|,
name|Target
operator|*
name|target
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|,
name|Error
operator|&
name|error
argument_list|)
block|{
name|error
operator|.
name|SetErrorString
argument_list|(
literal|"unimplemented"
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|RunScriptFormatKeyword
argument_list|(
specifier|const
name|char
operator|*
name|impl_function
argument_list|,
name|StackFrame
operator|*
name|frame
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|,
name|Error
operator|&
name|error
argument_list|)
block|{
name|error
operator|.
name|SetErrorString
argument_list|(
literal|"unimplemented"
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|RunScriptFormatKeyword
argument_list|(
specifier|const
name|char
operator|*
name|impl_function
argument_list|,
name|ValueObject
operator|*
name|value
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|,
name|Error
operator|&
name|error
argument_list|)
block|{
name|error
operator|.
name|SetErrorString
argument_list|(
literal|"unimplemented"
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|GetDocumentationForItem
argument_list|(
specifier|const
name|char
operator|*
name|item
argument_list|,
name|std
operator|::
name|string
operator|&
name|dest
argument_list|)
block|{
name|dest
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|GetShortHelpForCommandObject
argument_list|(
name|StructuredData
operator|::
name|GenericSP
name|cmd_obj_sp
argument_list|,
name|std
operator|::
name|string
operator|&
name|dest
argument_list|)
block|{
name|dest
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|false
return|;
block|}
name|virtual
name|uint32_t
name|GetFlagsForCommandObject
argument_list|(
name|StructuredData
operator|::
name|GenericSP
name|cmd_obj_sp
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|bool
name|GetLongHelpForCommandObject
argument_list|(
name|StructuredData
operator|::
name|GenericSP
name|cmd_obj_sp
argument_list|,
name|std
operator|::
name|string
operator|&
name|dest
argument_list|)
block|{
name|dest
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|CheckObjectExists
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|LoadScriptingModule
argument_list|(
specifier|const
name|char
operator|*
name|filename
argument_list|,
name|bool
name|can_reload
argument_list|,
name|bool
name|init_session
argument_list|,
name|lldb_private
operator|::
name|Error
operator|&
name|error
argument_list|,
name|StructuredData
operator|::
name|ObjectSP
operator|*
name|module_sp
operator|=
name|nullptr
argument_list|)
block|{
name|error
operator|.
name|SetErrorString
argument_list|(
literal|"loading unimplemented"
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|IsReservedWord
parameter_list|(
specifier|const
name|char
modifier|*
name|word
parameter_list|)
block|{
return|return
name|false
return|;
block|}
name|virtual
name|std
operator|::
name|unique_ptr
operator|<
name|ScriptInterpreterLocker
operator|>
name|AcquireInterpreterLock
argument_list|()
expr_stmt|;
specifier|const
name|char
modifier|*
name|GetScriptInterpreterPtyName
parameter_list|()
function_decl|;
name|int
name|GetMasterFileDescriptor
parameter_list|()
function_decl|;
name|CommandInterpreter
modifier|&
name|GetCommandInterpreter
parameter_list|()
function_decl|;
specifier|static
name|std
operator|::
name|string
name|LanguageToString
argument_list|(
argument|lldb::ScriptLanguage language
argument_list|)
expr_stmt|;
specifier|static
name|lldb
operator|::
name|ScriptLanguage
name|StringToLanguage
argument_list|(
specifier|const
name|llvm
operator|::
name|StringRef
operator|&
name|string
argument_list|)
expr_stmt|;
name|virtual
name|void
name|ResetOutputFileHandle
parameter_list|(
name|FILE
modifier|*
name|new_fh
parameter_list|)
block|{}
comment|// By default, do nothing.
name|lldb
operator|::
name|ScriptLanguage
name|GetLanguage
argument_list|()
block|{
return|return
name|m_script_lang
return|;
block|}
name|protected
label|:
name|CommandInterpreter
modifier|&
name|m_interpreter
decl_stmt|;
name|lldb
operator|::
name|ScriptLanguage
name|m_script_lang
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_ScriptInterpreter_h_
end_comment

end_unit

