begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- OptionValueProperties.h ---------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_OptionValueProperties_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_OptionValueProperties_h_
end_define

begin_comment
comment|// C Includes
end_comment

begin_comment
comment|// C++ Includes
end_comment

begin_include
include|#
directive|include
file|<vector>
end_include

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_comment
comment|// Project includes
end_comment

begin_include
include|#
directive|include
file|"lldb/Core/ConstString.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/FormatEntity.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/UniqueCStringMap.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Interpreter/OptionValue.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Interpreter/Property.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|OptionValueProperties
range|:
name|public
name|OptionValue
decl_stmt|,
name|public
name|std
decl|::
name|enable_shared_from_this
decl|<
name|OptionValueProperties
decl|>
block|{
name|public
label|:
name|OptionValueProperties
argument_list|()
operator|:
name|OptionValue
argument_list|()
operator|,
name|m_name
argument_list|()
operator|,
name|m_properties
argument_list|()
operator|,
name|m_name_to_index
argument_list|()
block|{     }
name|OptionValueProperties
argument_list|(
specifier|const
name|ConstString
operator|&
name|name
argument_list|)
expr_stmt|;
name|OptionValueProperties
argument_list|(
specifier|const
name|OptionValueProperties
operator|&
name|global_properties
argument_list|)
expr_stmt|;
operator|~
name|OptionValueProperties
argument_list|()
name|override
operator|=
expr|default
expr_stmt|;
name|Type
name|GetType
argument_list|()
specifier|const
name|override
block|{
return|return
name|eTypeProperties
return|;
block|}
name|bool
name|Clear
argument_list|()
name|override
expr_stmt|;
name|lldb
operator|::
name|OptionValueSP
name|DeepCopy
argument_list|()
specifier|const
name|override
expr_stmt|;
name|Error
name|SetValueFromString
argument_list|(
name|llvm
operator|::
name|StringRef
name|value
argument_list|,
name|VarSetOperationType
name|op
operator|=
name|eVarSetOperationAssign
argument_list|)
name|override
decl_stmt|;
name|void
name|DumpValue
argument_list|(
specifier|const
name|ExecutionContext
operator|*
name|exe_ctx
argument_list|,
name|Stream
operator|&
name|strm
argument_list|,
name|uint32_t
name|dump_mask
argument_list|)
name|override
decl_stmt|;
name|ConstString
name|GetName
argument_list|()
specifier|const
name|override
block|{
return|return
name|m_name
return|;
block|}
name|virtual
name|Error
name|DumpPropertyValue
parameter_list|(
specifier|const
name|ExecutionContext
modifier|*
name|exe_ctx
parameter_list|,
name|Stream
modifier|&
name|strm
parameter_list|,
specifier|const
name|char
modifier|*
name|property_path
parameter_list|,
name|uint32_t
name|dump_mask
parameter_list|)
function_decl|;
name|virtual
name|void
name|DumpAllDescriptions
argument_list|(
name|CommandInterpreter
operator|&
name|interpreter
argument_list|,
name|Stream
operator|&
name|strm
argument_list|)
decl|const
decl_stmt|;
name|void
name|Apropos
argument_list|(
specifier|const
name|char
operator|*
name|keyword
argument_list|,
name|std
operator|::
name|vector
operator|<
specifier|const
name|Property
operator|*
operator|>
operator|&
name|matching_properties
argument_list|)
decl|const
decl_stmt|;
name|void
name|Initialize
parameter_list|(
specifier|const
name|PropertyDefinition
modifier|*
name|setting_definitions
parameter_list|)
function_decl|;
comment|//    bool
comment|//    GetQualifiedName (Stream&strm);
comment|//---------------------------------------------------------------------
comment|// Subclass specific functions
comment|//---------------------------------------------------------------------
name|virtual
name|size_t
name|GetNumProperties
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|ConstString
name|GetPropertyNameAtIndex
argument_list|(
name|uint32_t
name|idx
argument_list|)
decl|const
decl_stmt|;
name|virtual
specifier|const
name|char
modifier|*
name|GetPropertyDescriptionAtIndex
argument_list|(
name|uint32_t
name|idx
argument_list|)
decl|const
decl_stmt|;
comment|//---------------------------------------------------------------------
comment|// Get the index of a property given its exact name in this property
comment|// collection, "name" can't be a path to a property path that refers
comment|// to a property within a property
comment|//---------------------------------------------------------------------
name|virtual
name|uint32_t
name|GetPropertyIndex
argument_list|(
specifier|const
name|ConstString
operator|&
name|name
argument_list|)
decl|const
decl_stmt|;
comment|//---------------------------------------------------------------------
comment|// Get a property by exact name exists in this property collection, name
comment|// can not be a path to a property path that refers to a property within
comment|// a property
comment|//---------------------------------------------------------------------
name|virtual
specifier|const
name|Property
modifier|*
name|GetProperty
argument_list|(
specifier|const
name|ExecutionContext
operator|*
name|exe_ctx
argument_list|,
name|bool
name|will_modify
argument_list|,
specifier|const
name|ConstString
operator|&
name|name
argument_list|)
decl|const
decl_stmt|;
name|virtual
specifier|const
name|Property
modifier|*
name|GetPropertyAtIndex
argument_list|(
specifier|const
name|ExecutionContext
operator|*
name|exe_ctx
argument_list|,
name|bool
name|will_modify
argument_list|,
name|uint32_t
name|idx
argument_list|)
decl|const
decl_stmt|;
comment|//---------------------------------------------------------------------
comment|// Property can be be a property path like "target.process.extra-startup-command"
comment|//---------------------------------------------------------------------
name|virtual
specifier|const
name|Property
modifier|*
name|GetPropertyAtPath
argument_list|(
specifier|const
name|ExecutionContext
operator|*
name|exe_ctx
argument_list|,
name|bool
name|will_modify
argument_list|,
specifier|const
name|char
operator|*
name|property_path
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|lldb
operator|::
name|OptionValueSP
name|GetPropertyValueAtIndex
argument_list|(
argument|const ExecutionContext *exe_ctx
argument_list|,
argument|bool will_modify
argument_list|,
argument|uint32_t idx
argument_list|)
specifier|const
expr_stmt|;
name|virtual
name|lldb
operator|::
name|OptionValueSP
name|GetValueForKey
argument_list|(
argument|const ExecutionContext *exe_ctx
argument_list|,
argument|const ConstString&key
argument_list|,
argument|bool value_will_be_modified
argument_list|)
specifier|const
expr_stmt|;
name|lldb
operator|::
name|OptionValueSP
name|GetSubValue
argument_list|(
argument|const ExecutionContext *exe_ctx
argument_list|,
argument|const char *name
argument_list|,
argument|bool value_will_be_modified
argument_list|,
argument|Error&error
argument_list|)
specifier|const
name|override
expr_stmt|;
name|Error
name|SetSubValue
argument_list|(
specifier|const
name|ExecutionContext
operator|*
name|exe_ctx
argument_list|,
name|VarSetOperationType
name|op
argument_list|,
specifier|const
name|char
operator|*
name|path
argument_list|,
specifier|const
name|char
operator|*
name|value
argument_list|)
name|override
decl_stmt|;
name|virtual
name|bool
name|PredicateMatches
argument_list|(
specifier|const
name|ExecutionContext
operator|*
name|exe_ctx
argument_list|,
specifier|const
name|char
operator|*
name|predicate
argument_list|)
decl|const
block|{
return|return
name|false
return|;
block|}
name|OptionValueArch
modifier|*
name|GetPropertyAtIndexAsOptionValueArch
argument_list|(
specifier|const
name|ExecutionContext
operator|*
name|exe_ctx
argument_list|,
name|uint32_t
name|idx
argument_list|)
decl|const
decl_stmt|;
name|OptionValueLanguage
modifier|*
name|GetPropertyAtIndexAsOptionValueLanguage
argument_list|(
specifier|const
name|ExecutionContext
operator|*
name|exe_ctx
argument_list|,
name|uint32_t
name|idx
argument_list|)
decl|const
decl_stmt|;
name|bool
name|GetPropertyAtIndexAsArgs
argument_list|(
specifier|const
name|ExecutionContext
operator|*
name|exe_ctx
argument_list|,
name|uint32_t
name|idx
argument_list|,
name|Args
operator|&
name|args
argument_list|)
decl|const
decl_stmt|;
name|bool
name|SetPropertyAtIndexFromArgs
parameter_list|(
specifier|const
name|ExecutionContext
modifier|*
name|exe_ctx
parameter_list|,
name|uint32_t
name|idx
parameter_list|,
specifier|const
name|Args
modifier|&
name|args
parameter_list|)
function_decl|;
name|bool
name|GetPropertyAtIndexAsBoolean
argument_list|(
specifier|const
name|ExecutionContext
operator|*
name|exe_ctx
argument_list|,
name|uint32_t
name|idx
argument_list|,
name|bool
name|fail_value
argument_list|)
decl|const
decl_stmt|;
name|bool
name|SetPropertyAtIndexAsBoolean
parameter_list|(
specifier|const
name|ExecutionContext
modifier|*
name|exe_ctx
parameter_list|,
name|uint32_t
name|idx
parameter_list|,
name|bool
name|new_value
parameter_list|)
function_decl|;
name|OptionValueDictionary
modifier|*
name|GetPropertyAtIndexAsOptionValueDictionary
argument_list|(
specifier|const
name|ExecutionContext
operator|*
name|exe_ctx
argument_list|,
name|uint32_t
name|idx
argument_list|)
decl|const
decl_stmt|;
name|int64_t
name|GetPropertyAtIndexAsEnumeration
argument_list|(
specifier|const
name|ExecutionContext
operator|*
name|exe_ctx
argument_list|,
name|uint32_t
name|idx
argument_list|,
name|int64_t
name|fail_value
argument_list|)
decl|const
decl_stmt|;
name|bool
name|SetPropertyAtIndexAsEnumeration
parameter_list|(
specifier|const
name|ExecutionContext
modifier|*
name|exe_ctx
parameter_list|,
name|uint32_t
name|idx
parameter_list|,
name|int64_t
name|new_value
parameter_list|)
function_decl|;
specifier|const
name|FormatEntity
operator|::
name|Entry
operator|*
name|GetPropertyAtIndexAsFormatEntity
argument_list|(
argument|const ExecutionContext *exe_ctx
argument_list|,
argument|uint32_t idx
argument_list|)
expr_stmt|;
specifier|const
name|RegularExpression
modifier|*
name|GetPropertyAtIndexAsOptionValueRegex
argument_list|(
specifier|const
name|ExecutionContext
operator|*
name|exe_ctx
argument_list|,
name|uint32_t
name|idx
argument_list|)
decl|const
decl_stmt|;
name|OptionValueSInt64
modifier|*
name|GetPropertyAtIndexAsOptionValueSInt64
argument_list|(
specifier|const
name|ExecutionContext
operator|*
name|exe_ctx
argument_list|,
name|uint32_t
name|idx
argument_list|)
decl|const
decl_stmt|;
name|int64_t
name|GetPropertyAtIndexAsSInt64
argument_list|(
specifier|const
name|ExecutionContext
operator|*
name|exe_ctx
argument_list|,
name|uint32_t
name|idx
argument_list|,
name|int64_t
name|fail_value
argument_list|)
decl|const
decl_stmt|;
name|bool
name|SetPropertyAtIndexAsSInt64
parameter_list|(
specifier|const
name|ExecutionContext
modifier|*
name|exe_ctx
parameter_list|,
name|uint32_t
name|idx
parameter_list|,
name|int64_t
name|new_value
parameter_list|)
function_decl|;
name|uint64_t
name|GetPropertyAtIndexAsUInt64
argument_list|(
specifier|const
name|ExecutionContext
operator|*
name|exe_ctx
argument_list|,
name|uint32_t
name|idx
argument_list|,
name|uint64_t
name|fail_value
argument_list|)
decl|const
decl_stmt|;
name|bool
name|SetPropertyAtIndexAsUInt64
parameter_list|(
specifier|const
name|ExecutionContext
modifier|*
name|exe_ctx
parameter_list|,
name|uint32_t
name|idx
parameter_list|,
name|uint64_t
name|new_value
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|GetPropertyAtIndexAsString
argument_list|(
specifier|const
name|ExecutionContext
operator|*
name|exe_ctx
argument_list|,
name|uint32_t
name|idx
argument_list|,
specifier|const
name|char
operator|*
name|fail_value
argument_list|)
decl|const
decl_stmt|;
name|bool
name|SetPropertyAtIndexAsString
parameter_list|(
specifier|const
name|ExecutionContext
modifier|*
name|exe_ctx
parameter_list|,
name|uint32_t
name|idx
parameter_list|,
specifier|const
name|char
modifier|*
name|new_value
parameter_list|)
function_decl|;
name|OptionValueString
modifier|*
name|GetPropertyAtIndexAsOptionValueString
argument_list|(
specifier|const
name|ExecutionContext
operator|*
name|exe_ctx
argument_list|,
name|bool
name|will_modify
argument_list|,
name|uint32_t
name|idx
argument_list|)
decl|const
decl_stmt|;
name|OptionValueFileSpec
modifier|*
name|GetPropertyAtIndexAsOptionValueFileSpec
argument_list|(
specifier|const
name|ExecutionContext
operator|*
name|exe_ctx
argument_list|,
name|bool
name|will_modify
argument_list|,
name|uint32_t
name|idx
argument_list|)
decl|const
decl_stmt|;
name|FileSpec
name|GetPropertyAtIndexAsFileSpec
argument_list|(
specifier|const
name|ExecutionContext
operator|*
name|exe_ctx
argument_list|,
name|uint32_t
name|idx
argument_list|)
decl|const
decl_stmt|;
name|bool
name|SetPropertyAtIndexAsFileSpec
parameter_list|(
specifier|const
name|ExecutionContext
modifier|*
name|exe_ctx
parameter_list|,
name|uint32_t
name|idx
parameter_list|,
specifier|const
name|FileSpec
modifier|&
name|file_spec
parameter_list|)
function_decl|;
name|OptionValuePathMappings
modifier|*
name|GetPropertyAtIndexAsOptionValuePathMappings
argument_list|(
specifier|const
name|ExecutionContext
operator|*
name|exe_ctx
argument_list|,
name|bool
name|will_modify
argument_list|,
name|uint32_t
name|idx
argument_list|)
decl|const
decl_stmt|;
name|OptionValueFileSpecList
modifier|*
name|GetPropertyAtIndexAsOptionValueFileSpecList
argument_list|(
specifier|const
name|ExecutionContext
operator|*
name|exe_ctx
argument_list|,
name|bool
name|will_modify
argument_list|,
name|uint32_t
name|idx
argument_list|)
decl|const
decl_stmt|;
name|void
name|AppendProperty
argument_list|(
specifier|const
name|ConstString
operator|&
name|name
argument_list|,
specifier|const
name|ConstString
operator|&
name|desc
argument_list|,
name|bool
name|is_global
argument_list|,
specifier|const
name|lldb
operator|::
name|OptionValueSP
operator|&
name|value_sp
argument_list|)
decl_stmt|;
name|lldb
operator|::
name|OptionValuePropertiesSP
name|GetSubProperty
argument_list|(
specifier|const
name|ExecutionContext
operator|*
name|exe_ctx
argument_list|,
specifier|const
name|ConstString
operator|&
name|name
argument_list|)
expr_stmt|;
name|void
name|SetValueChangedCallback
parameter_list|(
name|uint32_t
name|property_idx
parameter_list|,
name|OptionValueChangedCallback
name|callback
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|)
function_decl|;
name|protected
label|:
name|Property
modifier|*
name|ProtectedGetPropertyAtIndex
parameter_list|(
name|uint32_t
name|idx
parameter_list|)
block|{
return|return
operator|(
operator|(
name|idx
operator|<
name|m_properties
operator|.
name|size
argument_list|()
operator|)
condition|?
operator|&
name|m_properties
index|[
name|idx
index|]
else|:
name|nullptr
operator|)
return|;
block|}
specifier|const
name|Property
modifier|*
name|ProtectedGetPropertyAtIndex
argument_list|(
name|uint32_t
name|idx
argument_list|)
decl|const
block|{
return|return
operator|(
operator|(
name|idx
operator|<
name|m_properties
operator|.
name|size
argument_list|()
operator|)
condition|?
operator|&
name|m_properties
index|[
name|idx
index|]
else|:
name|nullptr
operator|)
return|;
block|}
typedef|typedef
name|UniqueCStringMap
operator|<
name|size_t
operator|>
name|NameToIndex
expr_stmt|;
name|ConstString
name|m_name
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|Property
operator|>
name|m_properties
expr_stmt|;
name|NameToIndex
name|m_name_to_index
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_OptionValueProperties_h_
end_comment

end_unit

