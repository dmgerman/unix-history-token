begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- XML.h ---------------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_XML_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_XML_h_
end_define

begin_comment
comment|// C Includes
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|LIBXML2_DEFINED
argument_list|)
end_if

begin_include
include|#
directive|include
file|<libxml/xmlreader.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// C++ Includes
end_comment

begin_include
include|#
directive|include
file|<functional>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_comment
comment|// Project includes
end_comment

begin_include
include|#
directive|include
file|"lldb/Core/StreamString.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/StructuredData.h"
end_include

begin_include
include|#
directive|include
file|"lldb/lldb-private.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
if|#
directive|if
name|defined
argument_list|(
name|LIBXML2_DEFINED
argument_list|)
typedef|typedef
name|xmlNodePtr
name|XMLNodeImpl
typedef|;
typedef|typedef
name|xmlDocPtr
name|XMLDocumentImpl
typedef|;
else|#
directive|else
typedef|typedef
name|void
modifier|*
name|XMLNodeImpl
typedef|;
typedef|typedef
name|void
modifier|*
name|XMLDocumentImpl
typedef|;
endif|#
directive|endif
name|class
name|XMLNode
decl_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
name|NamePath
expr_stmt|;
typedef|typedef
name|std
operator|::
name|function
operator|<
name|bool
argument_list|(
specifier|const
name|XMLNode
operator|&
name|node
argument_list|)
operator|>
name|NodeCallback
expr_stmt|;
typedef|typedef
name|std
operator|::
name|function
operator|<
name|bool
argument_list|(
specifier|const
name|llvm
operator|::
name|StringRef
operator|&
name|name
argument_list|,
specifier|const
name|llvm
operator|::
name|StringRef
operator|&
name|value
argument_list|)
operator|>
name|AttributeCallback
expr_stmt|;
name|class
name|XMLNode
block|{
name|public
label|:
name|XMLNode
argument_list|()
expr_stmt|;
name|XMLNode
argument_list|(
argument|XMLNodeImpl node
argument_list|)
empty_stmt|;
operator|~
name|XMLNode
argument_list|()
expr_stmt|;
name|explicit
name|operator
name|bool
argument_list|()
specifier|const
block|{
return|return
name|IsValid
argument_list|()
return|;
block|}
name|void
name|Clear
parameter_list|()
function_decl|;
name|bool
name|IsValid
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|IsElement
argument_list|()
specifier|const
expr_stmt|;
name|llvm
operator|::
name|StringRef
name|GetName
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|GetElementText
argument_list|(
name|std
operator|::
name|string
operator|&
name|text
argument_list|)
decl|const
decl_stmt|;
name|bool
name|GetElementTextAsUnsigned
argument_list|(
name|uint64_t
operator|&
name|value
argument_list|,
name|uint64_t
name|fail_value
operator|=
literal|0
argument_list|,
name|int
name|base
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|bool
name|GetElementTextAsFloat
argument_list|(
name|double
operator|&
name|value
argument_list|,
name|double
name|fail_value
operator|=
literal|0.0
argument_list|)
decl|const
decl_stmt|;
name|bool
name|NameIs
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|)
decl|const
decl_stmt|;
name|XMLNode
name|GetParent
argument_list|()
specifier|const
expr_stmt|;
name|XMLNode
name|GetSibling
argument_list|()
specifier|const
expr_stmt|;
name|XMLNode
name|GetChild
argument_list|()
specifier|const
expr_stmt|;
name|llvm
operator|::
name|StringRef
name|GetAttributeValue
argument_list|(
argument|const char *name
argument_list|,
argument|const char *fail_value = nullptr
argument_list|)
specifier|const
expr_stmt|;
name|XMLNode
name|FindFirstChildElementWithName
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|)
decl|const
decl_stmt|;
name|XMLNode
name|GetElementForPath
parameter_list|(
specifier|const
name|NamePath
modifier|&
name|path
parameter_list|)
function_decl|;
comment|//----------------------------------------------------------------------
comment|// Iterate through all sibling nodes of any type
comment|//----------------------------------------------------------------------
name|void
name|ForEachSiblingNode
argument_list|(
name|NodeCallback
specifier|const
operator|&
name|callback
argument_list|)
decl|const
decl_stmt|;
comment|//----------------------------------------------------------------------
comment|// Iterate through only the sibling nodes that are elements
comment|//----------------------------------------------------------------------
name|void
name|ForEachSiblingElement
argument_list|(
name|NodeCallback
specifier|const
operator|&
name|callback
argument_list|)
decl|const
decl_stmt|;
comment|//----------------------------------------------------------------------
comment|// Iterate through only the sibling nodes that are elements and whose
comment|// name matches \a name.
comment|//----------------------------------------------------------------------
name|void
name|ForEachSiblingElementWithName
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|,
name|NodeCallback
specifier|const
operator|&
name|callback
argument_list|)
decl|const
decl_stmt|;
name|void
name|ForEachChildNode
argument_list|(
name|NodeCallback
specifier|const
operator|&
name|callback
argument_list|)
decl|const
decl_stmt|;
name|void
name|ForEachChildElement
argument_list|(
name|NodeCallback
specifier|const
operator|&
name|callback
argument_list|)
decl|const
decl_stmt|;
name|void
name|ForEachChildElementWithName
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|,
name|NodeCallback
specifier|const
operator|&
name|callback
argument_list|)
decl|const
decl_stmt|;
name|void
name|ForEachAttribute
argument_list|(
name|AttributeCallback
specifier|const
operator|&
name|callback
argument_list|)
decl|const
decl_stmt|;
name|protected
label|:
name|XMLNodeImpl
name|m_node
decl_stmt|;
block|}
empty_stmt|;
name|class
name|XMLDocument
block|{
name|public
label|:
name|XMLDocument
argument_list|()
expr_stmt|;
operator|~
name|XMLDocument
argument_list|()
expr_stmt|;
name|explicit
name|operator
name|bool
argument_list|()
specifier|const
block|{
return|return
name|IsValid
argument_list|()
return|;
block|}
name|bool
name|IsValid
argument_list|()
specifier|const
expr_stmt|;
name|void
name|Clear
parameter_list|()
function_decl|;
name|bool
name|ParseFile
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
name|bool
name|ParseMemory
parameter_list|(
specifier|const
name|char
modifier|*
name|xml
parameter_list|,
name|size_t
name|xml_length
parameter_list|,
specifier|const
name|char
modifier|*
name|url
init|=
literal|"untitled.xml"
parameter_list|)
function_decl|;
comment|//----------------------------------------------------------------------
comment|// If \a name is nullptr, just get the root element node, else only return
comment|// a value XMLNode if the name of the root element matches \a name.
comment|//----------------------------------------------------------------------
name|XMLNode
name|GetRootElement
parameter_list|(
specifier|const
name|char
modifier|*
name|required_name
init|=
name|nullptr
parameter_list|)
function_decl|;
name|llvm
operator|::
name|StringRef
name|GetErrors
argument_list|()
specifier|const
expr_stmt|;
specifier|static
name|void
name|ErrorCallback
parameter_list|(
name|void
modifier|*
name|ctx
parameter_list|,
specifier|const
name|char
modifier|*
name|format
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
specifier|static
name|bool
name|XMLEnabled
parameter_list|()
function_decl|;
name|protected
label|:
name|XMLDocumentImpl
name|m_document
decl_stmt|;
name|StreamString
name|m_errors
decl_stmt|;
block|}
empty_stmt|;
name|class
name|ApplePropertyList
block|{
name|public
label|:
name|ApplePropertyList
argument_list|()
expr_stmt|;
name|ApplePropertyList
argument_list|(
specifier|const
name|char
operator|*
name|path
argument_list|)
expr_stmt|;
operator|~
name|ApplePropertyList
argument_list|()
expr_stmt|;
name|bool
name|ParseFile
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
name|llvm
operator|::
name|StringRef
name|GetErrors
argument_list|()
specifier|const
expr_stmt|;
name|explicit
name|operator
name|bool
argument_list|()
specifier|const
block|{
return|return
name|IsValid
argument_list|()
return|;
block|}
name|bool
name|IsValid
argument_list|()
specifier|const
expr_stmt|;
name|XMLNode
name|GetValueNode
argument_list|(
specifier|const
name|char
operator|*
name|key
argument_list|)
decl|const
decl_stmt|;
name|bool
name|GetValueAsString
argument_list|(
specifier|const
name|char
operator|*
name|key
argument_list|,
name|std
operator|::
name|string
operator|&
name|value
argument_list|)
decl|const
decl_stmt|;
name|StructuredData
operator|::
name|ObjectSP
name|GetStructuredData
argument_list|()
expr_stmt|;
name|protected
label|:
comment|// Using a node returned from GetValueNode() extract its value as a
comment|// string (if possible). Array and dictionary nodes will return false
comment|// as they have no string value. Boolean nodes will return true and
comment|// \a value will be "true" or "false" as the string value comes from
comment|// the element name itself. All other nodes will return the text
comment|// content of the XMLNode.
specifier|static
name|bool
name|ExtractStringFromValueNode
argument_list|(
specifier|const
name|XMLNode
operator|&
name|node
argument_list|,
name|std
operator|::
name|string
operator|&
name|value
argument_list|)
decl_stmt|;
name|XMLDocument
name|m_xml_doc
decl_stmt|;
name|XMLNode
name|m_dict_node
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_XML_h_
end_comment

end_unit

