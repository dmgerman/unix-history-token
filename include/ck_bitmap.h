begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2012-2015 Samy Al Bahra.  * Copyright 2012-2014 AppNexus, Inc.  * Copyright 2014 Paul Khuong.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CK_BITMAP_H
end_ifndef

begin_define
define|#
directive|define
name|CK_BITMAP_H
end_define

begin_include
include|#
directive|include
file|<ck_cc.h>
end_include

begin_include
include|#
directive|include
file|<ck_limits.h>
end_include

begin_include
include|#
directive|include
file|<ck_pr.h>
end_include

begin_include
include|#
directive|include
file|<ck_stdint.h>
end_include

begin_include
include|#
directive|include
file|<ck_stdbool.h>
end_include

begin_include
include|#
directive|include
file|<ck_stddef.h>
end_include

begin_include
include|#
directive|include
file|<ck_stdbool.h>
end_include

begin_include
include|#
directive|include
file|<ck_stddef.h>
end_include

begin_include
include|#
directive|include
file|<ck_string.h>
end_include

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|CK_F_PR_LOAD_UINT
argument_list|)
operator|||
operator|!
name|defined
argument_list|(
name|CK_F_PR_STORE_UINT
argument_list|)
operator|||
expr|\
operator|!
name|defined
argument_list|(
name|CK_F_PR_AND_UINT
argument_list|)
operator|||
operator|!
name|defined
argument_list|(
name|CK_F_PR_OR_UINT
argument_list|)
operator|||
expr|\
operator|!
name|defined
argument_list|(
name|CK_F_CC_CTZ
argument_list|)
end_if

begin_error
error|#
directive|error
literal|"ck_bitmap is not supported on your platform."
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|CK_BITMAP_BLOCK
value|(sizeof(unsigned int) * CHAR_BIT)
end_define

begin_define
define|#
directive|define
name|CK_BITMAP_OFFSET
parameter_list|(
name|i
parameter_list|)
value|((i) % CK_BITMAP_BLOCK)
end_define

begin_define
define|#
directive|define
name|CK_BITMAP_BIT
parameter_list|(
name|i
parameter_list|)
value|(1U<< CK_BITMAP_OFFSET(i))
end_define

begin_define
define|#
directive|define
name|CK_BITMAP_PTR
parameter_list|(
name|x
parameter_list|,
name|i
parameter_list|)
value|((x) + ((i) / CK_BITMAP_BLOCK))
end_define

begin_define
define|#
directive|define
name|CK_BITMAP_BLOCKS
parameter_list|(
name|n
parameter_list|)
value|(((n) + CK_BITMAP_BLOCK - 1) / CK_BITMAP_BLOCK)
end_define

begin_define
define|#
directive|define
name|CK_BITMAP_INSTANCE
parameter_list|(
name|n_entries
parameter_list|)
define|\
value|union {								\ 		struct {						\ 			unsigned int n_bits;				\ 			unsigned int map[CK_BITMAP_BLOCKS(n_entries)];	\ 		} content;						\ 		struct ck_bitmap bitmap;				\ 	}
end_define

begin_define
define|#
directive|define
name|CK_BITMAP_ITERATOR_INIT
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
define|\
value|ck_bitmap_iterator_init((a),&(b)->bitmap)
end_define

begin_define
define|#
directive|define
name|CK_BITMAP_INIT
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
define|\
value|ck_bitmap_init(&(a)->bitmap, (b), (c))
end_define

begin_define
define|#
directive|define
name|CK_BITMAP_NEXT
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
define|\
value|ck_bitmap_next(&(a)->bitmap, (b), (c))
end_define

begin_define
define|#
directive|define
name|CK_BITMAP_SET
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
define|\
value|ck_bitmap_set(&(a)->bitmap, (b))
end_define

begin_define
define|#
directive|define
name|CK_BITMAP_BTS
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
define|\
value|ck_bitmap_bts(&(a)->bitmap, (b))
end_define

begin_define
define|#
directive|define
name|CK_BITMAP_RESET
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
define|\
value|ck_bitmap_reset(&(a)->bitmap, (b))
end_define

begin_define
define|#
directive|define
name|CK_BITMAP_TEST
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
define|\
value|ck_bitmap_test(&(a)->bitmap, (b))
end_define

begin_define
define|#
directive|define
name|CK_BITMAP_UNION
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
define|\
value|ck_bitmap_union(&(a)->bitmap,&(b)->bitmap)
end_define

begin_define
define|#
directive|define
name|CK_BITMAP_INTERSECTION
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
define|\
value|ck_bitmap_intersection(&(a)->bitmap,&(b)->bitmap)
end_define

begin_define
define|#
directive|define
name|CK_BITMAP_INTERSECTION_NEGATE
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
define|\
value|ck_bitmap_intersection_negate(&(a)->bitmap,&(b)->bitmap)
end_define

begin_define
define|#
directive|define
name|CK_BITMAP_CLEAR
parameter_list|(
name|a
parameter_list|)
define|\
value|ck_bitmap_clear(&(a)->bitmap)
end_define

begin_define
define|#
directive|define
name|CK_BITMAP_EMPTY
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
define|\
value|ck_bitmap_empty(&(a)->bitmap, b)
end_define

begin_define
define|#
directive|define
name|CK_BITMAP_FULL
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
define|\
value|ck_bitmap_full(&(a)->bitmap, b)
end_define

begin_define
define|#
directive|define
name|CK_BITMAP_COUNT
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
define|\
value|ck_bitmap_count(&(a)->bitmap, b)
end_define

begin_define
define|#
directive|define
name|CK_BITMAP_COUNT_INTERSECT
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
define|\
value|ck_bitmap_count_intersect(&(a)->bitmap, b, c)
end_define

begin_define
define|#
directive|define
name|CK_BITMAP_BITS
parameter_list|(
name|a
parameter_list|)
define|\
value|ck_bitmap_bits(&(a)->bitmap)
end_define

begin_define
define|#
directive|define
name|CK_BITMAP_BUFFER
parameter_list|(
name|a
parameter_list|)
define|\
value|ck_bitmap_buffer(&(a)->bitmap)
end_define

begin_define
define|#
directive|define
name|CK_BITMAP
parameter_list|(
name|a
parameter_list|)
define|\
value|(&(a)->bitmap)
end_define

begin_struct
struct|struct
name|ck_bitmap
block|{
name|unsigned
name|int
name|n_bits
decl_stmt|;
name|unsigned
name|int
name|map
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|ck_bitmap
name|ck_bitmap_t
typedef|;
end_typedef

begin_struct
struct|struct
name|ck_bitmap_iterator
block|{
name|unsigned
name|int
name|cache
decl_stmt|;
name|unsigned
name|int
name|n_block
decl_stmt|;
name|unsigned
name|int
name|n_limit
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|ck_bitmap_iterator
name|ck_bitmap_iterator_t
typedef|;
end_typedef

begin_function
name|CK_CC_INLINE
specifier|static
name|unsigned
name|int
name|ck_bitmap_base
parameter_list|(
name|unsigned
name|int
name|n_bits
parameter_list|)
block|{
return|return
name|CK_BITMAP_BLOCKS
argument_list|(
name|n_bits
argument_list|)
operator|*
expr|sizeof
operator|(
name|unsigned
name|int
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * Returns the required number of bytes for a ck_bitmap_t object supporting the  * specified number of bits.  */
end_comment

begin_function
name|CK_CC_INLINE
specifier|static
name|unsigned
name|int
name|ck_bitmap_size
parameter_list|(
name|unsigned
name|int
name|n_bits
parameter_list|)
block|{
return|return
name|ck_bitmap_base
argument_list|(
name|n_bits
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
expr|struct
name|ck_bitmap
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/*  * Returns total number of bits in specified bitmap.  */
end_comment

begin_function
name|CK_CC_INLINE
specifier|static
name|unsigned
name|int
name|ck_bitmap_bits
parameter_list|(
specifier|const
name|struct
name|ck_bitmap
modifier|*
name|bitmap
parameter_list|)
block|{
return|return
name|bitmap
operator|->
name|n_bits
return|;
block|}
end_function

begin_comment
comment|/*  * Returns a pointer to the bit buffer associated  * with the specified bitmap.  */
end_comment

begin_function
name|CK_CC_INLINE
specifier|static
name|void
modifier|*
name|ck_bitmap_buffer
parameter_list|(
name|struct
name|ck_bitmap
modifier|*
name|bitmap
parameter_list|)
block|{
return|return
name|bitmap
operator|->
name|map
return|;
block|}
end_function

begin_comment
comment|/*  * Sets the bit at the offset specified in the second argument.  */
end_comment

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_bitmap_set
parameter_list|(
name|struct
name|ck_bitmap
modifier|*
name|bitmap
parameter_list|,
name|unsigned
name|int
name|n
parameter_list|)
block|{
name|ck_pr_or_uint
argument_list|(
name|CK_BITMAP_PTR
argument_list|(
name|bitmap
operator|->
name|map
argument_list|,
name|n
argument_list|)
argument_list|,
name|CK_BITMAP_BIT
argument_list|(
name|n
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_comment
comment|/*  * Performs a test-and-set operation at the offset specified in the  * second argument.  * Returns true if the bit at the specified offset was already set,  * false otherwise.  */
end_comment

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_bitmap_bts
parameter_list|(
name|struct
name|ck_bitmap
modifier|*
name|bitmap
parameter_list|,
name|unsigned
name|int
name|n
parameter_list|)
block|{
return|return
name|ck_pr_bts_uint
argument_list|(
name|CK_BITMAP_PTR
argument_list|(
name|bitmap
operator|->
name|map
argument_list|,
name|n
argument_list|)
argument_list|,
name|CK_BITMAP_OFFSET
argument_list|(
name|n
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/*  * Resets the bit at the offset specified in the second argument.  */
end_comment

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_bitmap_reset
parameter_list|(
name|struct
name|ck_bitmap
modifier|*
name|bitmap
parameter_list|,
name|unsigned
name|int
name|n
parameter_list|)
block|{
name|ck_pr_and_uint
argument_list|(
name|CK_BITMAP_PTR
argument_list|(
name|bitmap
operator|->
name|map
argument_list|,
name|n
argument_list|)
argument_list|,
operator|~
name|CK_BITMAP_BIT
argument_list|(
name|n
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_comment
comment|/*  * Determines whether the bit at offset specified in the  * second argument is set.  */
end_comment

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_bitmap_test
parameter_list|(
specifier|const
name|struct
name|ck_bitmap
modifier|*
name|bitmap
parameter_list|,
name|unsigned
name|int
name|n
parameter_list|)
block|{
name|unsigned
name|int
name|block
decl_stmt|;
name|block
operator|=
name|ck_pr_load_uint
argument_list|(
name|CK_BITMAP_PTR
argument_list|(
name|bitmap
operator|->
name|map
argument_list|,
name|n
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|block
operator|&
name|CK_BITMAP_BIT
argument_list|(
name|n
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/*  * Combines bits from second bitmap into the first bitmap. This is not a  * linearized operation with respect to the complete bitmap.  */
end_comment

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_bitmap_union
parameter_list|(
name|struct
name|ck_bitmap
modifier|*
name|dst
parameter_list|,
specifier|const
name|struct
name|ck_bitmap
modifier|*
name|src
parameter_list|)
block|{
name|unsigned
name|int
name|n
decl_stmt|;
name|unsigned
name|int
name|n_buckets
init|=
name|dst
operator|->
name|n_bits
decl_stmt|;
if|if
condition|(
name|src
operator|->
name|n_bits
operator|<
name|dst
operator|->
name|n_bits
condition|)
name|n_buckets
operator|=
name|src
operator|->
name|n_bits
expr_stmt|;
name|n_buckets
operator|=
name|CK_BITMAP_BLOCKS
argument_list|(
name|n_buckets
argument_list|)
expr_stmt|;
for|for
control|(
name|n
operator|=
literal|0
init|;
name|n
operator|<
name|n_buckets
condition|;
name|n
operator|++
control|)
block|{
name|ck_pr_or_uint
argument_list|(
operator|&
name|dst
operator|->
name|map
index|[
name|n
index|]
argument_list|,
name|ck_pr_load_uint
argument_list|(
operator|&
name|src
operator|->
name|map
index|[
name|n
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
end_function

begin_comment
comment|/*  * Intersects bits from second bitmap into the first bitmap. This is  * not a linearized operation with respect to the complete bitmap.  * Any trailing bit in dst is cleared.  */
end_comment

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_bitmap_intersection
parameter_list|(
name|struct
name|ck_bitmap
modifier|*
name|dst
parameter_list|,
specifier|const
name|struct
name|ck_bitmap
modifier|*
name|src
parameter_list|)
block|{
name|unsigned
name|int
name|n
decl_stmt|;
name|unsigned
name|int
name|n_buckets
init|=
name|dst
operator|->
name|n_bits
decl_stmt|;
name|unsigned
name|int
name|n_intersect
init|=
name|n_buckets
decl_stmt|;
if|if
condition|(
name|src
operator|->
name|n_bits
operator|<
name|n_intersect
condition|)
name|n_intersect
operator|=
name|src
operator|->
name|n_bits
expr_stmt|;
name|n_buckets
operator|=
name|CK_BITMAP_BLOCKS
argument_list|(
name|n_buckets
argument_list|)
expr_stmt|;
name|n_intersect
operator|=
name|CK_BITMAP_BLOCKS
argument_list|(
name|n_intersect
argument_list|)
expr_stmt|;
for|for
control|(
name|n
operator|=
literal|0
init|;
name|n
operator|<
name|n_intersect
condition|;
name|n
operator|++
control|)
block|{
name|ck_pr_and_uint
argument_list|(
operator|&
name|dst
operator|->
name|map
index|[
name|n
index|]
argument_list|,
name|ck_pr_load_uint
argument_list|(
operator|&
name|src
operator|->
name|map
index|[
name|n
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
init|;
name|n
operator|<
name|n_buckets
condition|;
name|n
operator|++
control|)
name|ck_pr_store_uint
argument_list|(
operator|&
name|dst
operator|->
name|map
index|[
name|n
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_comment
comment|/*  * Intersects the complement of bits from second bitmap into the first  * bitmap. This is not a linearized operation with respect to the  * complete bitmap.  Any trailing bit in dst is left as is.  */
end_comment

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_bitmap_intersection_negate
parameter_list|(
name|struct
name|ck_bitmap
modifier|*
name|dst
parameter_list|,
specifier|const
name|struct
name|ck_bitmap
modifier|*
name|src
parameter_list|)
block|{
name|unsigned
name|int
name|n
decl_stmt|;
name|unsigned
name|int
name|n_intersect
init|=
name|dst
operator|->
name|n_bits
decl_stmt|;
if|if
condition|(
name|src
operator|->
name|n_bits
operator|<
name|n_intersect
condition|)
name|n_intersect
operator|=
name|src
operator|->
name|n_bits
expr_stmt|;
name|n_intersect
operator|=
name|CK_BITMAP_BLOCKS
argument_list|(
name|n_intersect
argument_list|)
expr_stmt|;
for|for
control|(
name|n
operator|=
literal|0
init|;
name|n
operator|<
name|n_intersect
condition|;
name|n
operator|++
control|)
block|{
name|ck_pr_and_uint
argument_list|(
operator|&
name|dst
operator|->
name|map
index|[
name|n
index|]
argument_list|,
operator|(
operator|~
name|ck_pr_load_uint
argument_list|(
operator|&
name|src
operator|->
name|map
index|[
name|n
index|]
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
end_function

begin_comment
comment|/*  * Resets all bits in the provided bitmap. This is not a linearized  * operation in ck_bitmap.  */
end_comment

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_bitmap_clear
parameter_list|(
name|struct
name|ck_bitmap
modifier|*
name|bitmap
parameter_list|)
block|{
name|unsigned
name|int
name|i
decl_stmt|;
name|unsigned
name|int
name|n_buckets
init|=
name|ck_bitmap_base
argument_list|(
name|bitmap
operator|->
name|n_bits
argument_list|)
operator|/
expr|sizeof
operator|(
name|unsigned
name|int
operator|)
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|n_buckets
condition|;
name|i
operator|++
control|)
name|ck_pr_store_uint
argument_list|(
operator|&
name|bitmap
operator|->
name|map
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_comment
comment|/*  * Returns true if the first limit bits in bitmap are cleared.  If  * limit is greater than the bitmap size, limit is truncated to that  * size.  */
end_comment

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_bitmap_empty
parameter_list|(
specifier|const
name|ck_bitmap_t
modifier|*
name|bitmap
parameter_list|,
name|unsigned
name|int
name|limit
parameter_list|)
block|{
name|unsigned
name|int
name|i
decl_stmt|,
name|words
decl_stmt|,
name|slop
decl_stmt|;
if|if
condition|(
name|limit
operator|>
name|bitmap
operator|->
name|n_bits
condition|)
name|limit
operator|=
name|bitmap
operator|->
name|n_bits
expr_stmt|;
name|words
operator|=
name|limit
operator|/
name|CK_BITMAP_BLOCK
expr_stmt|;
name|slop
operator|=
name|limit
operator|%
name|CK_BITMAP_BLOCK
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|words
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|ck_pr_load_uint
argument_list|(
operator|&
name|bitmap
operator|->
name|map
index|[
name|i
index|]
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return
name|false
return|;
block|}
block|}
if|if
condition|(
name|slop
operator|>
literal|0
condition|)
block|{
name|unsigned
name|int
name|word
decl_stmt|;
name|word
operator|=
name|ck_pr_load_uint
argument_list|(
operator|&
name|bitmap
operator|->
name|map
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|word
operator|&
operator|(
operator|(
literal|1U
operator|<<
name|slop
operator|)
operator|-
literal|1
operator|)
operator|)
operator|!=
literal|0
condition|)
return|return
name|false
return|;
block|}
return|return
name|true
return|;
block|}
end_function

begin_comment
comment|/*  * Returns true if the first limit bits in bitmap are set.  If limit  * is greater than the bitmap size, limit is truncated to that size.  */
end_comment

begin_function
name|CK_CC_UNUSED
specifier|static
name|bool
name|ck_bitmap_full
parameter_list|(
specifier|const
name|ck_bitmap_t
modifier|*
name|bitmap
parameter_list|,
name|unsigned
name|int
name|limit
parameter_list|)
block|{
name|unsigned
name|int
name|i
decl_stmt|,
name|slop
decl_stmt|,
name|words
decl_stmt|;
if|if
condition|(
name|limit
operator|>
name|bitmap
operator|->
name|n_bits
condition|)
block|{
name|limit
operator|=
name|bitmap
operator|->
name|n_bits
expr_stmt|;
block|}
name|words
operator|=
name|limit
operator|/
name|CK_BITMAP_BLOCK
expr_stmt|;
name|slop
operator|=
name|limit
operator|%
name|CK_BITMAP_BLOCK
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|words
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|ck_pr_load_uint
argument_list|(
operator|&
name|bitmap
operator|->
name|map
index|[
name|i
index|]
argument_list|)
operator|!=
operator|-
literal|1U
condition|)
return|return
name|false
return|;
block|}
if|if
condition|(
name|slop
operator|>
literal|0
condition|)
block|{
name|unsigned
name|int
name|word
decl_stmt|;
name|word
operator|=
operator|~
name|ck_pr_load_uint
argument_list|(
operator|&
name|bitmap
operator|->
name|map
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|word
operator|&
operator|(
operator|(
literal|1U
operator|<<
name|slop
operator|)
operator|-
literal|1
operator|)
operator|)
operator|!=
literal|0
condition|)
return|return
name|false
return|;
block|}
return|return
name|true
return|;
block|}
end_function

begin_comment
comment|/*  * Returns the number of set bit in bitmap, upto (and excluding)  * limit.  If limit is greater than the bitmap size, it is truncated  * to that size.  */
end_comment

begin_function
name|CK_CC_INLINE
specifier|static
name|unsigned
name|int
name|ck_bitmap_count
parameter_list|(
specifier|const
name|ck_bitmap_t
modifier|*
name|bitmap
parameter_list|,
name|unsigned
name|int
name|limit
parameter_list|)
block|{
name|unsigned
name|int
name|count
decl_stmt|,
name|i
decl_stmt|,
name|slop
decl_stmt|,
name|words
decl_stmt|;
if|if
condition|(
name|limit
operator|>
name|bitmap
operator|->
name|n_bits
condition|)
name|limit
operator|=
name|bitmap
operator|->
name|n_bits
expr_stmt|;
name|words
operator|=
name|limit
operator|/
name|CK_BITMAP_BLOCK
expr_stmt|;
name|slop
operator|=
name|limit
operator|%
name|CK_BITMAP_BLOCK
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
operator|,
name|count
operator|=
literal|0
init|;
name|i
operator|<
name|words
condition|;
name|i
operator|++
control|)
name|count
operator|+=
name|ck_cc_popcount
argument_list|(
name|ck_pr_load_uint
argument_list|(
operator|&
name|bitmap
operator|->
name|map
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|slop
operator|>
literal|0
condition|)
block|{
name|unsigned
name|int
name|word
decl_stmt|;
name|word
operator|=
name|ck_pr_load_uint
argument_list|(
operator|&
name|bitmap
operator|->
name|map
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|count
operator|+=
name|ck_cc_popcount
argument_list|(
name|word
operator|&
operator|(
operator|(
literal|1U
operator|<<
name|slop
operator|)
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
end_function

begin_comment
comment|/*  * Returns the number of set bit in the intersection of two bitmaps,  * upto (and excluding) limit.  If limit is greater than either bitmap  * size, it is truncated to the smallest.  */
end_comment

begin_function
name|CK_CC_INLINE
specifier|static
name|unsigned
name|int
name|ck_bitmap_count_intersect
parameter_list|(
specifier|const
name|ck_bitmap_t
modifier|*
name|x
parameter_list|,
specifier|const
name|ck_bitmap_t
modifier|*
name|y
parameter_list|,
name|unsigned
name|int
name|limit
parameter_list|)
block|{
name|unsigned
name|int
name|count
decl_stmt|,
name|i
decl_stmt|,
name|slop
decl_stmt|,
name|words
decl_stmt|;
if|if
condition|(
name|limit
operator|>
name|x
operator|->
name|n_bits
condition|)
name|limit
operator|=
name|x
operator|->
name|n_bits
expr_stmt|;
if|if
condition|(
name|limit
operator|>
name|y
operator|->
name|n_bits
condition|)
name|limit
operator|=
name|y
operator|->
name|n_bits
expr_stmt|;
name|words
operator|=
name|limit
operator|/
name|CK_BITMAP_BLOCK
expr_stmt|;
name|slop
operator|=
name|limit
operator|%
name|CK_BITMAP_BLOCK
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
operator|,
name|count
operator|=
literal|0
init|;
name|i
operator|<
name|words
condition|;
name|i
operator|++
control|)
block|{
name|unsigned
name|int
name|xi
decl_stmt|,
name|yi
decl_stmt|;
name|xi
operator|=
name|ck_pr_load_uint
argument_list|(
operator|&
name|x
operator|->
name|map
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|yi
operator|=
name|ck_pr_load_uint
argument_list|(
operator|&
name|y
operator|->
name|map
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|count
operator|+=
name|ck_cc_popcount
argument_list|(
name|xi
operator|&
name|yi
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|slop
operator|>
literal|0
condition|)
block|{
name|unsigned
name|int
name|word
decl_stmt|,
name|xi
decl_stmt|,
name|yi
decl_stmt|;
name|xi
operator|=
name|ck_pr_load_uint
argument_list|(
operator|&
name|x
operator|->
name|map
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|yi
operator|=
name|ck_pr_load_uint
argument_list|(
operator|&
name|y
operator|->
name|map
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|word
operator|=
name|xi
operator|&
name|yi
expr_stmt|;
name|count
operator|+=
name|ck_cc_popcount
argument_list|(
name|word
operator|&
operator|(
operator|(
literal|1U
operator|<<
name|slop
operator|)
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
end_function

begin_comment
comment|/*  * Initializes a ck_bitmap pointing to a region of memory with  * ck_bitmap_size(n_bits) bytes. Third argument determines whether  * default bit value is 1 (true) or 0 (false).  */
end_comment

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_bitmap_init
parameter_list|(
name|struct
name|ck_bitmap
modifier|*
name|bitmap
parameter_list|,
name|unsigned
name|int
name|n_bits
parameter_list|,
name|bool
name|set
parameter_list|)
block|{
name|unsigned
name|int
name|base
init|=
name|ck_bitmap_base
argument_list|(
name|n_bits
argument_list|)
decl_stmt|;
name|bitmap
operator|->
name|n_bits
operator|=
name|n_bits
expr_stmt|;
name|memset
argument_list|(
name|bitmap
operator|->
name|map
argument_list|,
operator|-
operator|(
name|int
operator|)
name|set
argument_list|,
name|base
argument_list|)
expr_stmt|;
if|if
condition|(
name|set
operator|==
name|true
condition|)
block|{
name|unsigned
name|int
name|b
init|=
name|n_bits
operator|%
name|CK_BITMAP_BLOCK
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|0
condition|)
return|return;
operator|*
name|CK_BITMAP_PTR
argument_list|(
name|bitmap
operator|->
name|map
argument_list|,
name|n_bits
operator|-
literal|1
argument_list|)
operator|&=
operator|(
literal|1U
operator|<<
name|b
operator|)
operator|-
literal|1U
expr_stmt|;
block|}
return|return;
block|}
end_function

begin_comment
comment|/*  * Initialize iterator for use with provided bitmap.  */
end_comment

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_bitmap_iterator_init
parameter_list|(
name|struct
name|ck_bitmap_iterator
modifier|*
name|i
parameter_list|,
specifier|const
name|struct
name|ck_bitmap
modifier|*
name|bitmap
parameter_list|)
block|{
name|i
operator|->
name|n_block
operator|=
literal|0
expr_stmt|;
name|i
operator|->
name|n_limit
operator|=
name|CK_BITMAP_BLOCKS
argument_list|(
name|bitmap
operator|->
name|n_bits
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|->
name|n_limit
operator|>
literal|0
condition|)
block|{
name|i
operator|->
name|cache
operator|=
name|ck_pr_load_uint
argument_list|(
operator|&
name|bitmap
operator|->
name|map
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|i
operator|->
name|cache
operator|=
literal|0
expr_stmt|;
block|}
return|return;
block|}
end_function

begin_comment
comment|/*  * Iterate to next bit.  */
end_comment

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_bitmap_next
parameter_list|(
specifier|const
name|struct
name|ck_bitmap
modifier|*
name|bitmap
parameter_list|,
name|struct
name|ck_bitmap_iterator
modifier|*
name|i
parameter_list|,
name|unsigned
name|int
modifier|*
name|bit
parameter_list|)
block|{
name|unsigned
name|int
name|cache
init|=
name|i
operator|->
name|cache
decl_stmt|;
name|unsigned
name|int
name|n_block
init|=
name|i
operator|->
name|n_block
decl_stmt|;
name|unsigned
name|int
name|n_limit
init|=
name|i
operator|->
name|n_limit
decl_stmt|;
if|if
condition|(
name|cache
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|n_block
operator|>=
name|n_limit
condition|)
return|return
name|false
return|;
for|for
control|(
name|n_block
operator|++
init|;
name|n_block
operator|<
name|n_limit
condition|;
name|n_block
operator|++
control|)
block|{
name|cache
operator|=
name|ck_pr_load_uint
argument_list|(
operator|&
name|bitmap
operator|->
name|map
index|[
name|n_block
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|0
condition|)
goto|goto
name|non_zero
goto|;
block|}
name|i
operator|->
name|cache
operator|=
literal|0
expr_stmt|;
name|i
operator|->
name|n_block
operator|=
name|n_block
expr_stmt|;
return|return
name|false
return|;
block|}
name|non_zero
label|:
operator|*
name|bit
operator|=
name|CK_BITMAP_BLOCK
operator|*
name|n_block
operator|+
name|ck_cc_ctz
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|i
operator|->
name|cache
operator|=
name|cache
operator|&
operator|(
name|cache
operator|-
literal|1
operator|)
expr_stmt|;
name|i
operator|->
name|n_block
operator|=
name|n_block
expr_stmt|;
return|return
name|true
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CK_BITMAP_H */
end_comment

end_unit

