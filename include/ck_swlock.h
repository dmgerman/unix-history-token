begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2014 Jaidev Sridhar.  * Copyright 2014 Samy Al Bahra.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CK_SWLOCK_H
end_ifndef

begin_define
define|#
directive|define
name|CK_SWLOCK_H
end_define

begin_include
include|#
directive|include
file|<ck_elide.h>
end_include

begin_include
include|#
directive|include
file|<ck_limits.h>
end_include

begin_include
include|#
directive|include
file|<ck_pr.h>
end_include

begin_include
include|#
directive|include
file|<ck_stdbool.h>
end_include

begin_include
include|#
directive|include
file|<ck_stddef.h>
end_include

begin_struct
struct|struct
name|ck_swlock
block|{
name|uint32_t
name|value
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|ck_swlock
name|ck_swlock_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CK_SWLOCK_INITIALIZER
value|{0}
end_define

begin_define
define|#
directive|define
name|CK_SWLOCK_WRITER_BIT
value|(1UL<< 31)
end_define

begin_define
define|#
directive|define
name|CK_SWLOCK_LATCH_BIT
value|(1UL<< 30)
end_define

begin_define
define|#
directive|define
name|CK_SWLOCK_WRITER_MASK
value|(CK_SWLOCK_LATCH_BIT | CK_SWLOCK_WRITER_BIT)
end_define

begin_define
define|#
directive|define
name|CK_SWLOCK_READER_MASK
value|(UINT32_MAX ^ CK_SWLOCK_WRITER_MASK)
end_define

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_swlock_init
parameter_list|(
name|struct
name|ck_swlock
modifier|*
name|rw
parameter_list|)
block|{
name|rw
operator|->
name|value
operator|=
literal|0
expr_stmt|;
name|ck_pr_barrier
argument_list|()
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_swlock_write_unlock
parameter_list|(
name|ck_swlock_t
modifier|*
name|rw
parameter_list|)
block|{
name|ck_pr_fence_unlock
argument_list|()
expr_stmt|;
name|ck_pr_and_32
argument_list|(
operator|&
name|rw
operator|->
name|value
argument_list|,
name|CK_SWLOCK_READER_MASK
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_swlock_locked_writer
parameter_list|(
name|ck_swlock_t
modifier|*
name|rw
parameter_list|)
block|{
name|bool
name|r
decl_stmt|;
name|r
operator|=
name|ck_pr_load_32
argument_list|(
operator|&
name|rw
operator|->
name|value
argument_list|)
operator|&
name|CK_SWLOCK_WRITER_BIT
expr_stmt|;
name|ck_pr_fence_acquire
argument_list|()
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_swlock_write_downgrade
parameter_list|(
name|ck_swlock_t
modifier|*
name|rw
parameter_list|)
block|{
name|ck_pr_inc_32
argument_list|(
operator|&
name|rw
operator|->
name|value
argument_list|)
expr_stmt|;
name|ck_swlock_write_unlock
argument_list|(
name|rw
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_swlock_locked
parameter_list|(
name|ck_swlock_t
modifier|*
name|rw
parameter_list|)
block|{
name|bool
name|r
decl_stmt|;
name|r
operator|=
name|ck_pr_load_32
argument_list|(
operator|&
name|rw
operator|->
name|value
argument_list|)
expr_stmt|;
name|ck_pr_fence_acquire
argument_list|()
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_swlock_write_trylock
parameter_list|(
name|ck_swlock_t
modifier|*
name|rw
parameter_list|)
block|{
name|bool
name|r
decl_stmt|;
name|r
operator|=
name|ck_pr_cas_32
argument_list|(
operator|&
name|rw
operator|->
name|value
argument_list|,
literal|0
argument_list|,
name|CK_SWLOCK_WRITER_BIT
argument_list|)
expr_stmt|;
name|ck_pr_fence_lock
argument_list|()
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_macro
name|CK_ELIDE_TRYLOCK_PROTOTYPE
argument_list|(
argument|ck_swlock_write
argument_list|,
argument|ck_swlock_t
argument_list|,
argument|ck_swlock_locked
argument_list|,
argument|ck_swlock_write_trylock
argument_list|)
end_macro

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_swlock_write_lock
parameter_list|(
name|ck_swlock_t
modifier|*
name|rw
parameter_list|)
block|{
name|ck_pr_or_32
argument_list|(
operator|&
name|rw
operator|->
name|value
argument_list|,
name|CK_SWLOCK_WRITER_BIT
argument_list|)
expr_stmt|;
while|while
condition|(
name|ck_pr_load_32
argument_list|(
operator|&
name|rw
operator|->
name|value
argument_list|)
operator|&
name|CK_SWLOCK_READER_MASK
condition|)
name|ck_pr_stall
argument_list|()
expr_stmt|;
name|ck_pr_fence_lock
argument_list|()
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_swlock_write_latch
parameter_list|(
name|ck_swlock_t
modifier|*
name|rw
parameter_list|)
block|{
comment|/* Publish intent to acquire lock. */
name|ck_pr_or_32
argument_list|(
operator|&
name|rw
operator|->
name|value
argument_list|,
name|CK_SWLOCK_WRITER_BIT
argument_list|)
expr_stmt|;
comment|/* Stall until readers have seen the writer and cleared. */
while|while
condition|(
name|ck_pr_cas_32
argument_list|(
operator|&
name|rw
operator|->
name|value
argument_list|,
name|CK_SWLOCK_WRITER_BIT
argument_list|,
name|CK_SWLOCK_WRITER_MASK
argument_list|)
operator|==
name|false
condition|)
block|{
do|do
block|{
name|ck_pr_stall
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|ck_pr_load_32
argument_list|(
operator|&
name|rw
operator|->
name|value
argument_list|)
operator|!=
name|CK_SWLOCK_WRITER_BIT
condition|)
do|;
block|}
name|ck_pr_fence_lock
argument_list|()
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_swlock_write_unlatch
parameter_list|(
name|ck_swlock_t
modifier|*
name|rw
parameter_list|)
block|{
name|ck_pr_fence_unlock
argument_list|()
expr_stmt|;
name|ck_pr_store_32
argument_list|(
operator|&
name|rw
operator|->
name|value
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_macro
name|CK_ELIDE_PROTOTYPE
argument_list|(
argument|ck_swlock_write
argument_list|,
argument|ck_swlock_t
argument_list|,
argument|ck_swlock_locked
argument_list|,
argument|ck_swlock_write_lock
argument_list|,
argument|ck_swlock_locked_writer
argument_list|,
argument|ck_swlock_write_unlock
argument_list|)
end_macro

begin_macro
name|CK_ELIDE_TRYLOCK_PROTOTYPE
argument_list|(
argument|ck_swlock_read
argument_list|,
argument|ck_swlock_t
argument_list|,
argument|ck_swlock_locked_writer
argument_list|,
argument|ck_swlock_read_trylock
argument_list|)
end_macro

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_swlock_read_trylock
parameter_list|(
name|ck_swlock_t
modifier|*
name|rw
parameter_list|)
block|{
name|uint32_t
name|l
init|=
name|ck_pr_load_32
argument_list|(
operator|&
name|rw
operator|->
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|&
name|CK_SWLOCK_WRITER_BIT
condition|)
return|return
name|false
return|;
name|l
operator|=
name|ck_pr_faa_32
argument_list|(
operator|&
name|rw
operator|->
name|value
argument_list|,
literal|1
argument_list|)
operator|&
name|CK_SWLOCK_WRITER_MASK
expr_stmt|;
if|if
condition|(
name|l
operator|==
name|CK_SWLOCK_WRITER_BIT
condition|)
name|ck_pr_dec_32
argument_list|(
operator|&
name|rw
operator|->
name|value
argument_list|)
expr_stmt|;
name|ck_pr_fence_lock
argument_list|()
expr_stmt|;
return|return
name|l
operator|==
literal|0
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_swlock_read_lock
parameter_list|(
name|ck_swlock_t
modifier|*
name|rw
parameter_list|)
block|{
name|uint32_t
name|l
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
while|while
condition|(
name|ck_pr_load_32
argument_list|(
operator|&
name|rw
operator|->
name|value
argument_list|)
operator|&
name|CK_SWLOCK_WRITER_BIT
condition|)
name|ck_pr_stall
argument_list|()
expr_stmt|;
name|l
operator|=
name|ck_pr_faa_32
argument_list|(
operator|&
name|rw
operator|->
name|value
argument_list|,
literal|1
argument_list|)
operator|&
name|CK_SWLOCK_WRITER_MASK
expr_stmt|;
if|if
condition|(
name|l
operator|==
literal|0
condition|)
break|break;
comment|/* 		 * If the latch bit has not been set, then the writer would 		 * have observed the reader and will wait to completion of 		 * read-side critical section. 		 */
if|if
condition|(
name|l
operator|==
name|CK_SWLOCK_WRITER_BIT
condition|)
name|ck_pr_dec_32
argument_list|(
operator|&
name|rw
operator|->
name|value
argument_list|)
expr_stmt|;
block|}
name|ck_pr_fence_lock
argument_list|()
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_swlock_locked_reader
parameter_list|(
name|ck_swlock_t
modifier|*
name|rw
parameter_list|)
block|{
name|ck_pr_fence_load
argument_list|()
expr_stmt|;
return|return
name|ck_pr_load_32
argument_list|(
operator|&
name|rw
operator|->
name|value
argument_list|)
operator|&
name|CK_SWLOCK_READER_MASK
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_swlock_read_unlock
parameter_list|(
name|ck_swlock_t
modifier|*
name|rw
parameter_list|)
block|{
name|ck_pr_fence_unlock
argument_list|()
expr_stmt|;
name|ck_pr_dec_32
argument_list|(
operator|&
name|rw
operator|->
name|value
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_macro
name|CK_ELIDE_PROTOTYPE
argument_list|(
argument|ck_swlock_read
argument_list|,
argument|ck_swlock_t
argument_list|,
argument|ck_swlock_locked_writer
argument_list|,
argument|ck_swlock_read_lock
argument_list|,
argument|ck_swlock_locked_reader
argument_list|,
argument|ck_swlock_read_unlock
argument_list|)
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CK_SWLOCK_H */
end_comment

end_unit

