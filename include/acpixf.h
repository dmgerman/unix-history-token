begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/******************************************************************************  *  * Name: acpixf.h - External interfaces to the ACPI subsystem  *  *****************************************************************************/
end_comment

begin_comment
comment|/******************************************************************************  *  * 1. Copyright Notice  *  * Some or all of this work - Copyright (c) 1999 - 2009, Intel Corp.  * All rights reserved.  *  * 2. License  *  * 2.1. This is your license from Intel Corp. under its intellectual property  * rights.  You may have additional license terms from the party that provided  * you this software, covering your right to use that party's intellectual  * property rights.  *  * 2.2. Intel grants, free of charge, to any person ("Licensee") obtaining a  * copy of the source code appearing in this file ("Covered Code") an  * irrevocable, perpetual, worldwide license under Intel's copyrights in the  * base code distributed originally by Intel ("Original Intel Code") to copy,  * make derivatives, distribute, use and display any portion of the Covered  * Code in any form, with the right to sublicense such rights; and  *  * 2.3. Intel grants Licensee a non-exclusive and non-transferable patent  * license (with the right to sublicense), under only those claims of Intel  * patents that are infringed by the Original Intel Code, to make, use, sell,  * offer to sell, and import the Covered Code and derivative works thereof  * solely to the minimum extent necessary to exercise the above copyright  * license, and in no event shall the patent license extend to any additions  * to or modifications of the Original Intel Code.  No other license or right  * is granted directly or by implication, estoppel or otherwise;  *  * The above copyright and patent license is granted only if the following  * conditions are met:  *  * 3. Conditions  *  * 3.1. Redistribution of Source with Rights to Further Distribute Source.  * Redistribution of source code of any substantial portion of the Covered  * Code or modification with rights to further distribute source must include  * the above Copyright Notice, the above License, this list of Conditions,  * and the following Disclaimer and Export Compliance provision.  In addition,  * Licensee must cause all Covered Code to which Licensee contributes to  * contain a file documenting the changes Licensee made to create that Covered  * Code and the date of any change.  Licensee must include in that file the  * documentation of any changes made by any predecessor Licensee.  Licensee  * must include a prominent statement that the modification is derived,  * directly or indirectly, from Original Intel Code.  *  * 3.2. Redistribution of Source with no Rights to Further Distribute Source.  * Redistribution of source code of any substantial portion of the Covered  * Code or modification without rights to further distribute source must  * include the following Disclaimer and Export Compliance provision in the  * documentation and/or other materials provided with distribution.  In  * addition, Licensee may not authorize further sublicense of source of any  * portion of the Covered Code, and must include terms to the effect that the  * license from Licensee to its licensee is limited to the intellectual  * property embodied in the software Licensee provides to its licensee, and  * not to intellectual property embodied in modifications its licensee may  * make.  *  * 3.3. Redistribution of Executable. Redistribution in executable form of any  * substantial portion of the Covered Code or modification must reproduce the  * above Copyright Notice, and the following Disclaimer and Export Compliance  * provision in the documentation and/or other materials provided with the  * distribution.  *  * 3.4. Intel retains all right, title, and interest in and to the Original  * Intel Code.  *  * 3.5. Neither the name Intel nor any other trademark owned or controlled by  * Intel shall be used in advertising or otherwise to promote the sale, use or  * other dealings in products derived from or relating to the Covered Code  * without prior written authorization from Intel.  *  * 4. Disclaimer and Export Compliance  *  * 4.1. INTEL MAKES NO WARRANTY OF ANY KIND REGARDING ANY SOFTWARE PROVIDED  * HERE.  ANY SOFTWARE ORIGINATING FROM INTEL OR DERIVED FROM INTEL SOFTWARE  * IS PROVIDED "AS IS," AND INTEL WILL NOT PROVIDE ANY SUPPORT,  ASSISTANCE,  * INSTALLATION, TRAINING OR OTHER SERVICES.  INTEL WILL NOT PROVIDE ANY  * UPDATES, ENHANCEMENTS OR EXTENSIONS.  INTEL SPECIFICALLY DISCLAIMS ANY  * IMPLIED WARRANTIES OF MERCHANTABILITY, NONINFRINGEMENT AND FITNESS FOR A  * PARTICULAR PURPOSE.  *  * 4.2. IN NO EVENT SHALL INTEL HAVE ANY LIABILITY TO LICENSEE, ITS LICENSEES  * OR ANY OTHER THIRD PARTY, FOR ANY LOST PROFITS, LOST DATA, LOSS OF USE OR  * COSTS OF PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, OR FOR ANY INDIRECT,  * SPECIAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THIS AGREEMENT, UNDER ANY  * CAUSE OF ACTION OR THEORY OF LIABILITY, AND IRRESPECTIVE OF WHETHER INTEL  * HAS ADVANCE NOTICE OF THE POSSIBILITY OF SUCH DAMAGES.  THESE LIMITATIONS  * SHALL APPLY NOTWITHSTANDING THE FAILURE OF THE ESSENTIAL PURPOSE OF ANY  * LIMITED REMEDY.  *  * 4.3. Licensee shall not export, either directly or indirectly, any of this  * software or system incorporating such software without first obtaining any  * required license or other approval from the U. S. Department of Commerce or  * any other agency or department of the United States Government.  In the  * event Licensee exports any such software from the United States or  * re-exports any such software from a foreign destination, Licensee shall  * ensure that the distribution and export/re-export of the software is in  * compliance with all laws, regulations, orders, or other restrictions of the  * U.S. Export Administration Regulations. Licensee agrees that neither it nor  * any of its subsidiaries will export/re-export any technical data, process,  * software, or service, directly or indirectly, to any country for which the  * United States government or any agency thereof requires an export license,  * other governmental approval, or letter of assurance, without first obtaining  * such license, approval or letter.  *  *****************************************************************************/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__ACXFACE_H__
end_ifndef

begin_define
define|#
directive|define
name|__ACXFACE_H__
end_define

begin_comment
comment|/* Current ACPICA subsystem version in YYYYMMDD format */
end_comment

begin_define
define|#
directive|define
name|ACPI_CA_VERSION
value|0x20090625
end_define

begin_include
include|#
directive|include
file|"actypes.h"
end_include

begin_include
include|#
directive|include
file|"actbl.h"
end_include

begin_comment
comment|/*  * Globals that are publically available  */
end_comment

begin_decl_stmt
specifier|extern
name|UINT32
name|AcpiCurrentGpeCount
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|ACPI_TABLE_FADT
name|AcpiGbl_FADT
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Runtime configuration of debug print levels */
end_comment

begin_decl_stmt
specifier|extern
name|UINT32
name|AcpiDbgLevel
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|UINT32
name|AcpiDbgLayer
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* ACPICA runtime options */
end_comment

begin_decl_stmt
specifier|extern
name|UINT8
name|AcpiGbl_EnableInterpreterSlack
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|UINT8
name|AcpiGbl_AllMethodsSerialized
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|UINT8
name|AcpiGbl_CreateOsiMethod
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|UINT8
name|AcpiGbl_LeaveWakeGpesDisabled
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|UINT8
name|AcpiGbl_UseDefaultRegisterWidths
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|ACPI_NAME
name|AcpiGbl_TraceMethodName
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|UINT32
name|AcpiGbl_TraceFlags
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*  * Global interfaces  */
end_comment

begin_function_decl
name|ACPI_STATUS
name|AcpiInitializeTables
parameter_list|(
name|ACPI_TABLE_DESC
modifier|*
name|InitialStorage
parameter_list|,
name|UINT32
name|InitialTableCount
parameter_list|,
name|BOOLEAN
name|AllowResize
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiInitializeSubsystem
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiEnableSubsystem
parameter_list|(
name|UINT32
name|Flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiInitializeObjects
parameter_list|(
name|UINT32
name|Flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiTerminate
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiSubsystemStatus
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiEnable
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiDisable
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiGetSystemInfo
parameter_list|(
name|ACPI_BUFFER
modifier|*
name|RetBuffer
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiGetStatistics
parameter_list|(
name|ACPI_STATISTICS
modifier|*
name|Stats
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|AcpiFormatException
parameter_list|(
name|ACPI_STATUS
name|Exception
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiPurgeCachedObjects
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * ACPI Memory managment  */
end_comment

begin_function_decl
name|void
modifier|*
name|AcpiAllocate
parameter_list|(
name|UINT32
name|Size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|AcpiCallocate
parameter_list|(
name|UINT32
name|Size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|AcpiFree
parameter_list|(
name|void
modifier|*
name|Address
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * ACPI table manipulation interfaces  */
end_comment

begin_function_decl
name|ACPI_STATUS
name|AcpiReallocateRootTable
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiFindRootPointer
parameter_list|(
name|ACPI_SIZE
modifier|*
name|RsdpAddress
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiLoadTables
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiGetTableHeader
parameter_list|(
name|ACPI_STRING
name|Signature
parameter_list|,
name|UINT32
name|Instance
parameter_list|,
name|ACPI_TABLE_HEADER
modifier|*
name|OutTableHeader
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiGetTable
parameter_list|(
name|ACPI_STRING
name|Signature
parameter_list|,
name|UINT32
name|Instance
parameter_list|,
name|ACPI_TABLE_HEADER
modifier|*
modifier|*
name|OutTable
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiGetTableByIndex
parameter_list|(
name|UINT32
name|TableIndex
parameter_list|,
name|ACPI_TABLE_HEADER
modifier|*
modifier|*
name|OutTable
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiInstallTableHandler
parameter_list|(
name|ACPI_TABLE_HANDLER
name|Handler
parameter_list|,
name|void
modifier|*
name|Context
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiRemoveTableHandler
parameter_list|(
name|ACPI_TABLE_HANDLER
name|Handler
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Namespace and name interfaces  */
end_comment

begin_function_decl
name|ACPI_STATUS
name|AcpiWalkNamespace
parameter_list|(
name|ACPI_OBJECT_TYPE
name|Type
parameter_list|,
name|ACPI_HANDLE
name|StartObject
parameter_list|,
name|UINT32
name|MaxDepth
parameter_list|,
name|ACPI_WALK_CALLBACK
name|UserFunction
parameter_list|,
name|void
modifier|*
name|Context
parameter_list|,
name|void
modifier|*
modifier|*
name|ReturnValue
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiGetDevices
parameter_list|(
name|char
modifier|*
name|HID
parameter_list|,
name|ACPI_WALK_CALLBACK
name|UserFunction
parameter_list|,
name|void
modifier|*
name|Context
parameter_list|,
name|void
modifier|*
modifier|*
name|ReturnValue
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiGetName
parameter_list|(
name|ACPI_HANDLE
name|Handle
parameter_list|,
name|UINT32
name|NameType
parameter_list|,
name|ACPI_BUFFER
modifier|*
name|RetPathPtr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiGetHandle
parameter_list|(
name|ACPI_HANDLE
name|Parent
parameter_list|,
name|ACPI_STRING
name|Pathname
parameter_list|,
name|ACPI_HANDLE
modifier|*
name|RetHandle
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiAttachData
parameter_list|(
name|ACPI_HANDLE
name|ObjHandle
parameter_list|,
name|ACPI_OBJECT_HANDLER
name|Handler
parameter_list|,
name|void
modifier|*
name|Data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiDetachData
parameter_list|(
name|ACPI_HANDLE
name|ObjHandle
parameter_list|,
name|ACPI_OBJECT_HANDLER
name|Handler
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiGetData
parameter_list|(
name|ACPI_HANDLE
name|ObjHandle
parameter_list|,
name|ACPI_OBJECT_HANDLER
name|Handler
parameter_list|,
name|void
modifier|*
modifier|*
name|Data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiDebugTrace
parameter_list|(
name|char
modifier|*
name|Name
parameter_list|,
name|UINT32
name|DebugLevel
parameter_list|,
name|UINT32
name|DebugLayer
parameter_list|,
name|UINT32
name|Flags
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Object manipulation and enumeration  */
end_comment

begin_function_decl
name|ACPI_STATUS
name|AcpiEvaluateObject
parameter_list|(
name|ACPI_HANDLE
name|Object
parameter_list|,
name|ACPI_STRING
name|Pathname
parameter_list|,
name|ACPI_OBJECT_LIST
modifier|*
name|ParameterObjects
parameter_list|,
name|ACPI_BUFFER
modifier|*
name|ReturnObjectBuffer
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiEvaluateObjectTyped
parameter_list|(
name|ACPI_HANDLE
name|Object
parameter_list|,
name|ACPI_STRING
name|Pathname
parameter_list|,
name|ACPI_OBJECT_LIST
modifier|*
name|ExternalParams
parameter_list|,
name|ACPI_BUFFER
modifier|*
name|ReturnBuffer
parameter_list|,
name|ACPI_OBJECT_TYPE
name|ReturnType
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiGetObjectInfo
parameter_list|(
name|ACPI_HANDLE
name|Handle
parameter_list|,
name|ACPI_DEVICE_INFO
modifier|*
modifier|*
name|ReturnBuffer
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiInstallMethod
parameter_list|(
name|UINT8
modifier|*
name|Buffer
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiGetNextObject
parameter_list|(
name|ACPI_OBJECT_TYPE
name|Type
parameter_list|,
name|ACPI_HANDLE
name|Parent
parameter_list|,
name|ACPI_HANDLE
name|Child
parameter_list|,
name|ACPI_HANDLE
modifier|*
name|OutHandle
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiGetType
parameter_list|(
name|ACPI_HANDLE
name|Object
parameter_list|,
name|ACPI_OBJECT_TYPE
modifier|*
name|OutType
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiGetParent
parameter_list|(
name|ACPI_HANDLE
name|Object
parameter_list|,
name|ACPI_HANDLE
modifier|*
name|OutHandle
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Handler interfaces  */
end_comment

begin_function_decl
name|ACPI_STATUS
name|AcpiInstallInitializationHandler
parameter_list|(
name|ACPI_INIT_HANDLER
name|Handler
parameter_list|,
name|UINT32
name|Function
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiInstallFixedEventHandler
parameter_list|(
name|UINT32
name|AcpiEvent
parameter_list|,
name|ACPI_EVENT_HANDLER
name|Handler
parameter_list|,
name|void
modifier|*
name|Context
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiRemoveFixedEventHandler
parameter_list|(
name|UINT32
name|AcpiEvent
parameter_list|,
name|ACPI_EVENT_HANDLER
name|Handler
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiInstallNotifyHandler
parameter_list|(
name|ACPI_HANDLE
name|Device
parameter_list|,
name|UINT32
name|HandlerType
parameter_list|,
name|ACPI_NOTIFY_HANDLER
name|Handler
parameter_list|,
name|void
modifier|*
name|Context
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiRemoveNotifyHandler
parameter_list|(
name|ACPI_HANDLE
name|Device
parameter_list|,
name|UINT32
name|HandlerType
parameter_list|,
name|ACPI_NOTIFY_HANDLER
name|Handler
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiInstallAddressSpaceHandler
parameter_list|(
name|ACPI_HANDLE
name|Device
parameter_list|,
name|ACPI_ADR_SPACE_TYPE
name|SpaceId
parameter_list|,
name|ACPI_ADR_SPACE_HANDLER
name|Handler
parameter_list|,
name|ACPI_ADR_SPACE_SETUP
name|Setup
parameter_list|,
name|void
modifier|*
name|Context
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiRemoveAddressSpaceHandler
parameter_list|(
name|ACPI_HANDLE
name|Device
parameter_list|,
name|ACPI_ADR_SPACE_TYPE
name|SpaceId
parameter_list|,
name|ACPI_ADR_SPACE_HANDLER
name|Handler
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiInstallGpeHandler
parameter_list|(
name|ACPI_HANDLE
name|GpeDevice
parameter_list|,
name|UINT32
name|GpeNumber
parameter_list|,
name|UINT32
name|Type
parameter_list|,
name|ACPI_EVENT_HANDLER
name|Address
parameter_list|,
name|void
modifier|*
name|Context
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiRemoveGpeHandler
parameter_list|(
name|ACPI_HANDLE
name|GpeDevice
parameter_list|,
name|UINT32
name|GpeNumber
parameter_list|,
name|ACPI_EVENT_HANDLER
name|Address
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiInstallExceptionHandler
parameter_list|(
name|ACPI_EXCEPTION_HANDLER
name|Handler
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Event interfaces  */
end_comment

begin_function_decl
name|ACPI_STATUS
name|AcpiAcquireGlobalLock
parameter_list|(
name|UINT16
name|Timeout
parameter_list|,
name|UINT32
modifier|*
name|Handle
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiReleaseGlobalLock
parameter_list|(
name|UINT32
name|Handle
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiEnableEvent
parameter_list|(
name|UINT32
name|Event
parameter_list|,
name|UINT32
name|Flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiDisableEvent
parameter_list|(
name|UINT32
name|Event
parameter_list|,
name|UINT32
name|Flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiClearEvent
parameter_list|(
name|UINT32
name|Event
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiGetEventStatus
parameter_list|(
name|UINT32
name|Event
parameter_list|,
name|ACPI_EVENT_STATUS
modifier|*
name|EventStatus
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * GPE Interfaces  */
end_comment

begin_function_decl
name|ACPI_STATUS
name|AcpiSetGpeType
parameter_list|(
name|ACPI_HANDLE
name|GpeDevice
parameter_list|,
name|UINT32
name|GpeNumber
parameter_list|,
name|UINT8
name|Type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiEnableGpe
parameter_list|(
name|ACPI_HANDLE
name|GpeDevice
parameter_list|,
name|UINT32
name|GpeNumber
parameter_list|,
name|UINT32
name|Flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiDisableGpe
parameter_list|(
name|ACPI_HANDLE
name|GpeDevice
parameter_list|,
name|UINT32
name|GpeNumber
parameter_list|,
name|UINT32
name|Flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiClearGpe
parameter_list|(
name|ACPI_HANDLE
name|GpeDevice
parameter_list|,
name|UINT32
name|GpeNumber
parameter_list|,
name|UINT32
name|Flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiGetGpeStatus
parameter_list|(
name|ACPI_HANDLE
name|GpeDevice
parameter_list|,
name|UINT32
name|GpeNumber
parameter_list|,
name|UINT32
name|Flags
parameter_list|,
name|ACPI_EVENT_STATUS
modifier|*
name|EventStatus
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiDisableAllGpes
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiEnableAllRuntimeGpes
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiGetGpeDevice
parameter_list|(
name|UINT32
name|GpeIndex
parameter_list|,
name|ACPI_HANDLE
modifier|*
name|GpeDevice
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiInstallGpeBlock
parameter_list|(
name|ACPI_HANDLE
name|GpeDevice
parameter_list|,
name|ACPI_GENERIC_ADDRESS
modifier|*
name|GpeBlockAddress
parameter_list|,
name|UINT32
name|RegisterCount
parameter_list|,
name|UINT32
name|InterruptNumber
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiRemoveGpeBlock
parameter_list|(
name|ACPI_HANDLE
name|GpeDevice
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Resource interfaces  */
end_comment

begin_typedef
typedef|typedef
name|ACPI_STATUS
function_decl|(
modifier|*
name|ACPI_WALK_RESOURCE_CALLBACK
function_decl|)
parameter_list|(
name|ACPI_RESOURCE
modifier|*
name|Resource
parameter_list|,
name|void
modifier|*
name|Context
parameter_list|)
function_decl|;
end_typedef

begin_function_decl
name|ACPI_STATUS
name|AcpiGetVendorResource
parameter_list|(
name|ACPI_HANDLE
name|DeviceHandle
parameter_list|,
name|char
modifier|*
name|Name
parameter_list|,
name|ACPI_VENDOR_UUID
modifier|*
name|Uuid
parameter_list|,
name|ACPI_BUFFER
modifier|*
name|RetBuffer
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiGetCurrentResources
parameter_list|(
name|ACPI_HANDLE
name|DeviceHandle
parameter_list|,
name|ACPI_BUFFER
modifier|*
name|RetBuffer
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiGetPossibleResources
parameter_list|(
name|ACPI_HANDLE
name|DeviceHandle
parameter_list|,
name|ACPI_BUFFER
modifier|*
name|RetBuffer
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiWalkResources
parameter_list|(
name|ACPI_HANDLE
name|DeviceHandle
parameter_list|,
name|char
modifier|*
name|Name
parameter_list|,
name|ACPI_WALK_RESOURCE_CALLBACK
name|UserFunction
parameter_list|,
name|void
modifier|*
name|Context
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiSetCurrentResources
parameter_list|(
name|ACPI_HANDLE
name|DeviceHandle
parameter_list|,
name|ACPI_BUFFER
modifier|*
name|InBuffer
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiGetIrqRoutingTable
parameter_list|(
name|ACPI_HANDLE
name|BusDeviceHandle
parameter_list|,
name|ACPI_BUFFER
modifier|*
name|RetBuffer
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiResourceToAddress64
parameter_list|(
name|ACPI_RESOURCE
modifier|*
name|Resource
parameter_list|,
name|ACPI_RESOURCE_ADDRESS64
modifier|*
name|Out
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Hardware (ACPI device) interfaces  */
end_comment

begin_function_decl
name|ACPI_STATUS
name|AcpiReset
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiRead
parameter_list|(
name|UINT64
modifier|*
name|Value
parameter_list|,
name|ACPI_GENERIC_ADDRESS
modifier|*
name|Reg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiWrite
parameter_list|(
name|UINT64
name|Value
parameter_list|,
name|ACPI_GENERIC_ADDRESS
modifier|*
name|Reg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiReadBitRegister
parameter_list|(
name|UINT32
name|RegisterId
parameter_list|,
name|UINT32
modifier|*
name|ReturnValue
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiWriteBitRegister
parameter_list|(
name|UINT32
name|RegisterId
parameter_list|,
name|UINT32
name|Value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiGetSleepTypeData
parameter_list|(
name|UINT8
name|SleepState
parameter_list|,
name|UINT8
modifier|*
name|Slp_TypA
parameter_list|,
name|UINT8
modifier|*
name|Slp_TypB
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiEnterSleepStatePrep
parameter_list|(
name|UINT8
name|SleepState
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiEnterSleepState
parameter_list|(
name|UINT8
name|SleepState
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiEnterSleepStateS4bios
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiLeaveSleepState
parameter_list|(
name|UINT8
name|SleepState
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ACPI_STATUS
name|AcpiSetFirmwareWakingVector
parameter_list|(
name|UINT32
name|PhysicalAddress
parameter_list|)
function_decl|;
end_function_decl

begin_if
if|#
directive|if
name|ACPI_MACHINE_WIDTH
operator|==
literal|64
end_if

begin_function_decl
name|ACPI_STATUS
name|AcpiSetFirmwareWakingVector64
parameter_list|(
name|UINT64
name|PhysicalAddress
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * Error/Warning output  */
end_comment

begin_function_decl
name|void
name|ACPI_INTERNAL_VAR_XFACE
name|AcpiError
parameter_list|(
specifier|const
name|char
modifier|*
name|ModuleName
parameter_list|,
name|UINT32
name|LineNumber
parameter_list|,
specifier|const
name|char
modifier|*
name|Format
parameter_list|,
modifier|...
parameter_list|)
function_decl|ACPI_PRINTF_LIKE
parameter_list|(
function_decl|3
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
name|void
name|ACPI_INTERNAL_VAR_XFACE
name|AcpiException
parameter_list|(
specifier|const
name|char
modifier|*
name|ModuleName
parameter_list|,
name|UINT32
name|LineNumber
parameter_list|,
name|ACPI_STATUS
name|Status
parameter_list|,
specifier|const
name|char
modifier|*
name|Format
parameter_list|,
modifier|...
parameter_list|)
function_decl|ACPI_PRINTF_LIKE
parameter_list|(
function_decl|4
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
name|void
name|ACPI_INTERNAL_VAR_XFACE
name|AcpiWarning
parameter_list|(
specifier|const
name|char
modifier|*
name|ModuleName
parameter_list|,
name|UINT32
name|LineNumber
parameter_list|,
specifier|const
name|char
modifier|*
name|Format
parameter_list|,
modifier|...
parameter_list|)
function_decl|ACPI_PRINTF_LIKE
parameter_list|(
function_decl|3
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
name|void
name|ACPI_INTERNAL_VAR_XFACE
name|AcpiInfo
parameter_list|(
specifier|const
name|char
modifier|*
name|ModuleName
parameter_list|,
name|UINT32
name|LineNumber
parameter_list|,
specifier|const
name|char
modifier|*
name|Format
parameter_list|,
modifier|...
parameter_list|)
function_decl|ACPI_PRINTF_LIKE
parameter_list|(
function_decl|3
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_comment
comment|/*  * Debug output  */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|ACPI_DEBUG_OUTPUT
end_ifdef

begin_function_decl
name|void
name|ACPI_INTERNAL_VAR_XFACE
name|AcpiDebugPrint
parameter_list|(
name|UINT32
name|RequestedDebugLevel
parameter_list|,
name|UINT32
name|LineNumber
parameter_list|,
specifier|const
name|char
modifier|*
name|FunctionName
parameter_list|,
specifier|const
name|char
modifier|*
name|ModuleName
parameter_list|,
name|UINT32
name|ComponentId
parameter_list|,
specifier|const
name|char
modifier|*
name|Format
parameter_list|,
modifier|...
parameter_list|)
function_decl|ACPI_PRINTF_LIKE
parameter_list|(
function_decl|6
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
name|void
name|ACPI_INTERNAL_VAR_XFACE
name|AcpiDebugPrintRaw
parameter_list|(
name|UINT32
name|RequestedDebugLevel
parameter_list|,
name|UINT32
name|LineNumber
parameter_list|,
specifier|const
name|char
modifier|*
name|FunctionName
parameter_list|,
specifier|const
name|char
modifier|*
name|ModuleName
parameter_list|,
name|UINT32
name|ComponentId
parameter_list|,
specifier|const
name|char
modifier|*
name|Format
parameter_list|,
modifier|...
parameter_list|)
function_decl|ACPI_PRINTF_LIKE
parameter_list|(
function_decl|6
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __ACXFACE_H__ */
end_comment

end_unit

