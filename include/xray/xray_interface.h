begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- xray_interface.h -----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is a part of XRay, a dynamic runtime instrumentation system.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// APIs for controlling XRay functionality explicitly.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|XRAY_XRAY_INTERFACE_H
end_ifndef

begin_define
define|#
directive|define
name|XRAY_XRAY_INTERFACE_H
end_define

begin_include
include|#
directive|include
file|<cstddef>
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_extern
extern|extern
literal|"C"
block|{
comment|/// Synchronize this with AsmPrinter::SledKind in LLVM.
enum|enum
name|XRayEntryType
block|{
name|ENTRY
init|=
literal|0
block|,
name|EXIT
init|=
literal|1
block|,
name|TAIL
init|=
literal|2
block|,
name|LOG_ARGS_ENTRY
init|=
literal|3
block|,
name|CUSTOM_EVENT
init|=
literal|4
block|, }
enum|;
comment|/// Provide a function to invoke for when instrumentation points are hit. This
comment|/// is a user-visible control surface that overrides the default implementation.
comment|/// The function provided should take the following arguments:
comment|///
comment|///   - function id: an identifier that indicates the id of a function; this id
comment|///                  is generated by xray; the mapping between the function id
comment|///                  and the actual function pointer is available through
comment|///                  __xray_table.
comment|///   - entry type: identifies what kind of instrumentation point was
comment|///                 encountered (function entry, function exit, etc.). See the
comment|///                 enum XRayEntryType for more details.
comment|///
comment|/// The user handler must handle correctly spurious calls after this handler is
comment|/// removed or replaced with another handler, because it would be too costly for
comment|/// XRay runtime to avoid spurious calls.
comment|/// To prevent circular calling, the handler function itself and all its
comment|/// direct&indirect callees must not be instrumented with XRay, which can be
comment|/// achieved by marking them all with: __attribute__((xray_never_instrument))
comment|///
comment|/// Returns 1 on success, 0 on error.
specifier|extern
name|int
name|__xray_set_handler
parameter_list|(
name|void
function_decl|(
modifier|*
name|entry
function_decl|)
parameter_list|(
name|int32_t
parameter_list|,
name|XRayEntryType
parameter_list|)
parameter_list|)
function_decl|;
comment|/// This removes whatever the currently provided handler is. Returns 1 on
comment|/// success, 0 on error.
specifier|extern
name|int
name|__xray_remove_handler
parameter_list|()
function_decl|;
comment|/// Use XRay to log the first argument of each (instrumented) function call.
comment|/// When this function exits, all threads will have observed the effect and
comment|/// start logging their subsequent affected function calls (if patched).
comment|///
comment|/// Returns 1 on success, 0 on error.
specifier|extern
name|int
name|__xray_set_handler_arg1
parameter_list|(
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|int32_t
parameter_list|,
name|XRayEntryType
parameter_list|,
name|uint64_t
parameter_list|)
parameter_list|)
function_decl|;
comment|/// Disables the XRay handler used to log first arguments of function calls.
comment|/// Returns 1 on success, 0 on error.
specifier|extern
name|int
name|__xray_remove_handler_arg1
parameter_list|()
function_decl|;
comment|/// Provide a function to invoke when XRay encounters a custom event.
specifier|extern
name|int
name|__xray_set_customevent_handler
argument_list|(
name|void
argument_list|(
operator|*
name|entry
argument_list|)
argument_list|(
name|void
operator|*
argument_list|,
name|std
operator|::
name|size_t
argument_list|)
argument_list|)
decl_stmt|;
enum|enum
name|XRayPatchingStatus
block|{
name|NOT_INITIALIZED
init|=
literal|0
block|,
name|SUCCESS
init|=
literal|1
block|,
name|ONGOING
init|=
literal|2
block|,
name|FAILED
init|=
literal|3
block|, }
enum|;
comment|/// This tells XRay to patch the instrumentation points. See XRayPatchingStatus
comment|/// for possible result values.
specifier|extern
name|XRayPatchingStatus
name|__xray_patch
parameter_list|()
function_decl|;
comment|/// Reverses the effect of __xray_patch(). See XRayPatchingStatus for possible
comment|/// result values.
specifier|extern
name|XRayPatchingStatus
name|__xray_unpatch
parameter_list|()
function_decl|;
comment|/// This patches a specific function id. See XRayPatchingStatus for possible
comment|/// result values.
specifier|extern
name|XRayPatchingStatus
name|__xray_patch_function
parameter_list|(
name|int32_t
name|FuncId
parameter_list|)
function_decl|;
comment|/// This unpatches a specific function id. See XRayPatchingStatus for possible
comment|/// result values.
specifier|extern
name|XRayPatchingStatus
name|__xray_unpatch_function
parameter_list|(
name|int32_t
name|FuncId
parameter_list|)
function_decl|;
comment|/// This function returns the address of the function provided a valid function
comment|/// id. We return 0 if we encounter any error, even if 0 may be a valid function
comment|/// address.
specifier|extern
name|uintptr_t
name|__xray_function_address
parameter_list|(
name|int32_t
name|FuncId
parameter_list|)
function_decl|;
comment|/// This function returns the maximum valid function id. Returns 0 if we
comment|/// encounter errors (when there are no instrumented functions, etc.).
specifier|extern
name|size_t
name|__xray_max_function_id
parameter_list|()
function_decl|;
block|}
end_extern

begin_comment
comment|// end extern "C"
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// XRAY_XRAY_INTERFACE_H
end_comment

end_unit

