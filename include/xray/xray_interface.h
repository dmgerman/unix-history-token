begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- xray_interface.h ----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is a part of XRay, a dynamic runtime instrumentation system.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// APIs for controlling XRay functionality explicitly.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|XRAY_XRAY_INTERFACE_H
end_ifndef

begin_define
define|#
directive|define
name|XRAY_XRAY_INTERFACE_H
end_define

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_extern
extern|extern
literal|"C"
block|{
enum|enum
name|XRayEntryType
block|{
name|ENTRY
init|=
literal|0
block|,
name|EXIT
init|=
literal|1
block|,
name|TAIL
init|=
literal|2
block|}
enum|;
comment|// Provide a function to invoke for when instrumentation points are hit. This is
comment|// a user-visible control surface that overrides the default implementation. The
comment|// function provided should take the following arguments:
comment|//
comment|//   - function id: an identifier that indicates the id of a function; this id
comment|//                  is generated by xray; the mapping between the function id
comment|//                  and the actual function pointer is available through
comment|//                  __xray_table.
comment|//   - entry type: identifies what kind of instrumentation point was encountered
comment|//                 (function entry, function exit, etc.). See the enum
comment|//                 XRayEntryType for more details.
comment|//
comment|// The user handler must handle correctly spurious calls after this handler is
comment|// removed or replaced with another handler, because it would be too costly for
comment|// XRay runtime to avoid spurious calls.
comment|// To prevent circular calling, the handler function itself and all its
comment|// direct&indirect callees must not be instrumented with XRay, which can be
comment|// achieved by marking them all with: __attribute__((xray_never_instrument))
comment|//
comment|// Returns 1 on success, 0 on error.
specifier|extern
name|int
name|__xray_set_handler
parameter_list|(
name|void
function_decl|(
modifier|*
name|entry
function_decl|)
parameter_list|(
name|int32_t
parameter_list|,
name|XRayEntryType
parameter_list|)
parameter_list|)
function_decl|;
comment|// This removes whatever the currently provided handler is. Returns 1 on
comment|// success, 0 on error.
specifier|extern
name|int
name|__xray_remove_handler
parameter_list|()
function_decl|;
enum|enum
name|XRayPatchingStatus
block|{
name|NOT_INITIALIZED
init|=
literal|0
block|,
name|SUCCESS
init|=
literal|1
block|,
name|ONGOING
init|=
literal|2
block|,
name|FAILED
init|=
literal|3
block|, }
enum|;
comment|// This tells XRay to patch the instrumentation points. See XRayPatchingStatus
comment|// for possible result values.
specifier|extern
name|XRayPatchingStatus
name|__xray_patch
parameter_list|()
function_decl|;
comment|// Reverses the effect of __xray_patch(). See XRayPatchingStatus for possible
comment|// result values.
specifier|extern
name|XRayPatchingStatus
name|__xray_unpatch
parameter_list|()
function_decl|;
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

end_unit

