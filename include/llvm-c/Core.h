begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*===-- llvm-c/Core.h - Core Library C Interface ------------------*- C -*-===*\ |*                                                                            *| |*                     The LLVM Compiler Infrastructure                       *| |*                                                                            *| |* This file is distributed under the University of Illinois Open Source      *| |* License. See LICENSE.TXT for details.                                      *| |*                                                                            *| |*===----------------------------------------------------------------------===*| |*                                                                            *| |* This header declares the C interface to libLLVMCore.a, which implements    *| |* the LLVM intermediate representation.                                      *| |*                                                                            *| \*===----------------------------------------------------------------------===*/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_C_CORE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_C_CORE_H
end_define

begin_include
include|#
directive|include
file|"llvm-c/ErrorHandling.h"
end_include

begin_include
include|#
directive|include
file|"llvm-c/Types.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/**  * @defgroup LLVMC LLVM-C: C interface to LLVM  *  * This module exposes parts of the LLVM library as a C API.  *  * @{  */
comment|/**  * @defgroup LLVMCTransforms Transforms  */
comment|/**  * @defgroup LLVMCCore Core  *  * This modules provide an interface to libLLVMCore, which implements  * the LLVM intermediate representation as well as other related types  * and utilities.  *  * Many exotic languages can interoperate with C code but have a harder time  * with C++ due to name mangling. So in addition to C, this interface enables  * tools written in such languages.  *  * @{  */
comment|/**  * @defgroup LLVMCCoreTypes Types and Enumerations  *  * @{  */
typedef|typedef
enum|enum
block|{
name|LLVMZExtAttribute
init|=
literal|1
operator|<<
literal|0
block|,
name|LLVMSExtAttribute
init|=
literal|1
operator|<<
literal|1
block|,
name|LLVMNoReturnAttribute
init|=
literal|1
operator|<<
literal|2
block|,
name|LLVMInRegAttribute
init|=
literal|1
operator|<<
literal|3
block|,
name|LLVMStructRetAttribute
init|=
literal|1
operator|<<
literal|4
block|,
name|LLVMNoUnwindAttribute
init|=
literal|1
operator|<<
literal|5
block|,
name|LLVMNoAliasAttribute
init|=
literal|1
operator|<<
literal|6
block|,
name|LLVMByValAttribute
init|=
literal|1
operator|<<
literal|7
block|,
name|LLVMNestAttribute
init|=
literal|1
operator|<<
literal|8
block|,
name|LLVMReadNoneAttribute
init|=
literal|1
operator|<<
literal|9
block|,
name|LLVMReadOnlyAttribute
init|=
literal|1
operator|<<
literal|10
block|,
name|LLVMNoInlineAttribute
init|=
literal|1
operator|<<
literal|11
block|,
name|LLVMAlwaysInlineAttribute
init|=
literal|1
operator|<<
literal|12
block|,
name|LLVMOptimizeForSizeAttribute
init|=
literal|1
operator|<<
literal|13
block|,
name|LLVMStackProtectAttribute
init|=
literal|1
operator|<<
literal|14
block|,
name|LLVMStackProtectReqAttribute
init|=
literal|1
operator|<<
literal|15
block|,
name|LLVMAlignment
init|=
literal|31
operator|<<
literal|16
block|,
name|LLVMNoCaptureAttribute
init|=
literal|1
operator|<<
literal|21
block|,
name|LLVMNoRedZoneAttribute
init|=
literal|1
operator|<<
literal|22
block|,
name|LLVMNoImplicitFloatAttribute
init|=
literal|1
operator|<<
literal|23
block|,
name|LLVMNakedAttribute
init|=
literal|1
operator|<<
literal|24
block|,
name|LLVMInlineHintAttribute
init|=
literal|1
operator|<<
literal|25
block|,
name|LLVMStackAlignment
init|=
literal|7
operator|<<
literal|26
block|,
name|LLVMReturnsTwice
init|=
literal|1
operator|<<
literal|29
block|,
name|LLVMUWTable
init|=
literal|1
operator|<<
literal|30
block|,
name|LLVMNonLazyBind
init|=
literal|1
operator|<<
literal|31
comment|/* FIXME: These attributes are currently not included in the C API as        a temporary measure until the API/ABI impact to the C API is understood        and the path forward agreed upon.     LLVMSanitizeAddressAttribute = 1ULL<< 32,     LLVMStackProtectStrongAttribute = 1ULL<<35,     LLVMColdAttribute = 1ULL<< 40,     LLVMOptimizeNoneAttribute = 1ULL<< 42,     LLVMInAllocaAttribute = 1ULL<< 43,     LLVMNonNullAttribute = 1ULL<< 44,     LLVMJumpTableAttribute = 1ULL<< 45,     LLVMConvergentAttribute = 1ULL<< 46,     LLVMSafeStackAttribute = 1ULL<< 47,     */
block|}
name|LLVMAttribute
typedef|;
typedef|typedef
enum|enum
block|{
comment|/* Terminator Instructions */
name|LLVMRet
init|=
literal|1
block|,
name|LLVMBr
init|=
literal|2
block|,
name|LLVMSwitch
init|=
literal|3
block|,
name|LLVMIndirectBr
init|=
literal|4
block|,
name|LLVMInvoke
init|=
literal|5
block|,
comment|/* removed 6 due to API changes */
name|LLVMUnreachable
init|=
literal|7
block|,
comment|/* Standard Binary Operators */
name|LLVMAdd
init|=
literal|8
block|,
name|LLVMFAdd
init|=
literal|9
block|,
name|LLVMSub
init|=
literal|10
block|,
name|LLVMFSub
init|=
literal|11
block|,
name|LLVMMul
init|=
literal|12
block|,
name|LLVMFMul
init|=
literal|13
block|,
name|LLVMUDiv
init|=
literal|14
block|,
name|LLVMSDiv
init|=
literal|15
block|,
name|LLVMFDiv
init|=
literal|16
block|,
name|LLVMURem
init|=
literal|17
block|,
name|LLVMSRem
init|=
literal|18
block|,
name|LLVMFRem
init|=
literal|19
block|,
comment|/* Logical Operators */
name|LLVMShl
init|=
literal|20
block|,
name|LLVMLShr
init|=
literal|21
block|,
name|LLVMAShr
init|=
literal|22
block|,
name|LLVMAnd
init|=
literal|23
block|,
name|LLVMOr
init|=
literal|24
block|,
name|LLVMXor
init|=
literal|25
block|,
comment|/* Memory Operators */
name|LLVMAlloca
init|=
literal|26
block|,
name|LLVMLoad
init|=
literal|27
block|,
name|LLVMStore
init|=
literal|28
block|,
name|LLVMGetElementPtr
init|=
literal|29
block|,
comment|/* Cast Operators */
name|LLVMTrunc
init|=
literal|30
block|,
name|LLVMZExt
init|=
literal|31
block|,
name|LLVMSExt
init|=
literal|32
block|,
name|LLVMFPToUI
init|=
literal|33
block|,
name|LLVMFPToSI
init|=
literal|34
block|,
name|LLVMUIToFP
init|=
literal|35
block|,
name|LLVMSIToFP
init|=
literal|36
block|,
name|LLVMFPTrunc
init|=
literal|37
block|,
name|LLVMFPExt
init|=
literal|38
block|,
name|LLVMPtrToInt
init|=
literal|39
block|,
name|LLVMIntToPtr
init|=
literal|40
block|,
name|LLVMBitCast
init|=
literal|41
block|,
name|LLVMAddrSpaceCast
init|=
literal|60
block|,
comment|/* Other Operators */
name|LLVMICmp
init|=
literal|42
block|,
name|LLVMFCmp
init|=
literal|43
block|,
name|LLVMPHI
init|=
literal|44
block|,
name|LLVMCall
init|=
literal|45
block|,
name|LLVMSelect
init|=
literal|46
block|,
name|LLVMUserOp1
init|=
literal|47
block|,
name|LLVMUserOp2
init|=
literal|48
block|,
name|LLVMVAArg
init|=
literal|49
block|,
name|LLVMExtractElement
init|=
literal|50
block|,
name|LLVMInsertElement
init|=
literal|51
block|,
name|LLVMShuffleVector
init|=
literal|52
block|,
name|LLVMExtractValue
init|=
literal|53
block|,
name|LLVMInsertValue
init|=
literal|54
block|,
comment|/* Atomic operators */
name|LLVMFence
init|=
literal|55
block|,
name|LLVMAtomicCmpXchg
init|=
literal|56
block|,
name|LLVMAtomicRMW
init|=
literal|57
block|,
comment|/* Exception Handling Operators */
name|LLVMResume
init|=
literal|58
block|,
name|LLVMLandingPad
init|=
literal|59
block|,
name|LLVMCleanupRet
init|=
literal|61
block|,
name|LLVMCatchRet
init|=
literal|62
block|,
name|LLVMCatchPad
init|=
literal|63
block|,
name|LLVMCleanupPad
init|=
literal|64
block|,
name|LLVMCatchSwitch
init|=
literal|65
block|}
name|LLVMOpcode
typedef|;
typedef|typedef
enum|enum
block|{
name|LLVMVoidTypeKind
block|,
comment|/**< type with no size */
name|LLVMHalfTypeKind
block|,
comment|/**< 16 bit floating point type */
name|LLVMFloatTypeKind
block|,
comment|/**< 32 bit floating point type */
name|LLVMDoubleTypeKind
block|,
comment|/**< 64 bit floating point type */
name|LLVMX86_FP80TypeKind
block|,
comment|/**< 80 bit floating point type (X87) */
name|LLVMFP128TypeKind
block|,
comment|/**< 128 bit floating point type (112-bit mantissa)*/
name|LLVMPPC_FP128TypeKind
block|,
comment|/**< 128 bit floating point type (two 64-bits) */
name|LLVMLabelTypeKind
block|,
comment|/**< Labels */
name|LLVMIntegerTypeKind
block|,
comment|/**< Arbitrary bit width integers */
name|LLVMFunctionTypeKind
block|,
comment|/**< Functions */
name|LLVMStructTypeKind
block|,
comment|/**< Structures */
name|LLVMArrayTypeKind
block|,
comment|/**< Arrays */
name|LLVMPointerTypeKind
block|,
comment|/**< Pointers */
name|LLVMVectorTypeKind
block|,
comment|/**< SIMD 'packed' format, or other vector type */
name|LLVMMetadataTypeKind
block|,
comment|/**< Metadata */
name|LLVMX86_MMXTypeKind
block|,
comment|/**< X86 MMX */
name|LLVMTokenTypeKind
comment|/**< Tokens */
block|}
name|LLVMTypeKind
typedef|;
typedef|typedef
enum|enum
block|{
name|LLVMExternalLinkage
block|,
comment|/**< Externally visible function */
name|LLVMAvailableExternallyLinkage
block|,
name|LLVMLinkOnceAnyLinkage
block|,
comment|/**< Keep one copy of function when linking (inline)*/
name|LLVMLinkOnceODRLinkage
block|,
comment|/**< Same, but only replaced by something                             equivalent. */
name|LLVMLinkOnceODRAutoHideLinkage
block|,
comment|/**< Obsolete */
name|LLVMWeakAnyLinkage
block|,
comment|/**< Keep one copy of function when linking (weak) */
name|LLVMWeakODRLinkage
block|,
comment|/**< Same, but only replaced by something                             equivalent. */
name|LLVMAppendingLinkage
block|,
comment|/**< Special purpose, only applies to global arrays */
name|LLVMInternalLinkage
block|,
comment|/**< Rename collisions when linking (static                                functions) */
name|LLVMPrivateLinkage
block|,
comment|/**< Like Internal, but omit from symbol table */
name|LLVMDLLImportLinkage
block|,
comment|/**< Obsolete */
name|LLVMDLLExportLinkage
block|,
comment|/**< Obsolete */
name|LLVMExternalWeakLinkage
block|,
comment|/**< ExternalWeak linkage description */
name|LLVMGhostLinkage
block|,
comment|/**< Obsolete */
name|LLVMCommonLinkage
block|,
comment|/**< Tentative definitions */
name|LLVMLinkerPrivateLinkage
block|,
comment|/**< Like Private, but linker removes. */
name|LLVMLinkerPrivateWeakLinkage
comment|/**< Like LinkerPrivate, but is weak. */
block|}
name|LLVMLinkage
typedef|;
typedef|typedef
enum|enum
block|{
name|LLVMDefaultVisibility
block|,
comment|/**< The GV is visible */
name|LLVMHiddenVisibility
block|,
comment|/**< The GV is hidden */
name|LLVMProtectedVisibility
comment|/**< The GV is protected */
block|}
name|LLVMVisibility
typedef|;
typedef|typedef
enum|enum
block|{
name|LLVMDefaultStorageClass
init|=
literal|0
block|,
name|LLVMDLLImportStorageClass
init|=
literal|1
block|,
comment|/**< Function to be imported from DLL. */
name|LLVMDLLExportStorageClass
init|=
literal|2
comment|/**< Function to be accessible from DLL. */
block|}
name|LLVMDLLStorageClass
typedef|;
typedef|typedef
enum|enum
block|{
name|LLVMCCallConv
init|=
literal|0
block|,
name|LLVMFastCallConv
init|=
literal|8
block|,
name|LLVMColdCallConv
init|=
literal|9
block|,
name|LLVMWebKitJSCallConv
init|=
literal|12
block|,
name|LLVMAnyRegCallConv
init|=
literal|13
block|,
name|LLVMX86StdcallCallConv
init|=
literal|64
block|,
name|LLVMX86FastcallCallConv
init|=
literal|65
block|}
name|LLVMCallConv
typedef|;
typedef|typedef
enum|enum
block|{
name|LLVMIntEQ
init|=
literal|32
block|,
comment|/**< equal */
name|LLVMIntNE
block|,
comment|/**< not equal */
name|LLVMIntUGT
block|,
comment|/**< unsigned greater than */
name|LLVMIntUGE
block|,
comment|/**< unsigned greater or equal */
name|LLVMIntULT
block|,
comment|/**< unsigned less than */
name|LLVMIntULE
block|,
comment|/**< unsigned less or equal */
name|LLVMIntSGT
block|,
comment|/**< signed greater than */
name|LLVMIntSGE
block|,
comment|/**< signed greater or equal */
name|LLVMIntSLT
block|,
comment|/**< signed less than */
name|LLVMIntSLE
comment|/**< signed less or equal */
block|}
name|LLVMIntPredicate
typedef|;
typedef|typedef
enum|enum
block|{
name|LLVMRealPredicateFalse
block|,
comment|/**< Always false (always folded) */
name|LLVMRealOEQ
block|,
comment|/**< True if ordered and equal */
name|LLVMRealOGT
block|,
comment|/**< True if ordered and greater than */
name|LLVMRealOGE
block|,
comment|/**< True if ordered and greater than or equal */
name|LLVMRealOLT
block|,
comment|/**< True if ordered and less than */
name|LLVMRealOLE
block|,
comment|/**< True if ordered and less than or equal */
name|LLVMRealONE
block|,
comment|/**< True if ordered and operands are unequal */
name|LLVMRealORD
block|,
comment|/**< True if ordered (no nans) */
name|LLVMRealUNO
block|,
comment|/**< True if unordered: isnan(X) | isnan(Y) */
name|LLVMRealUEQ
block|,
comment|/**< True if unordered or equal */
name|LLVMRealUGT
block|,
comment|/**< True if unordered or greater than */
name|LLVMRealUGE
block|,
comment|/**< True if unordered, greater than, or equal */
name|LLVMRealULT
block|,
comment|/**< True if unordered or less than */
name|LLVMRealULE
block|,
comment|/**< True if unordered, less than, or equal */
name|LLVMRealUNE
block|,
comment|/**< True if unordered or not equal */
name|LLVMRealPredicateTrue
comment|/**< Always true (always folded) */
block|}
name|LLVMRealPredicate
typedef|;
typedef|typedef
enum|enum
block|{
name|LLVMLandingPadCatch
block|,
comment|/**< A catch clause   */
name|LLVMLandingPadFilter
comment|/**< A filter clause  */
block|}
name|LLVMLandingPadClauseTy
typedef|;
typedef|typedef
enum|enum
block|{
name|LLVMNotThreadLocal
init|=
literal|0
block|,
name|LLVMGeneralDynamicTLSModel
block|,
name|LLVMLocalDynamicTLSModel
block|,
name|LLVMInitialExecTLSModel
block|,
name|LLVMLocalExecTLSModel
block|}
name|LLVMThreadLocalMode
typedef|;
typedef|typedef
enum|enum
block|{
name|LLVMAtomicOrderingNotAtomic
init|=
literal|0
block|,
comment|/**< A load or store which is not atomic */
name|LLVMAtomicOrderingUnordered
init|=
literal|1
block|,
comment|/**< Lowest level of atomicity, guarantees                                      somewhat sane results, lock free. */
name|LLVMAtomicOrderingMonotonic
init|=
literal|2
block|,
comment|/**< guarantees that if you take all the                                      operations affecting a specific address,                                      a consistent ordering exists */
name|LLVMAtomicOrderingAcquire
init|=
literal|4
block|,
comment|/**< Acquire provides a barrier of the sort                                    necessary to acquire a lock to access other                                    memory with normal loads and stores. */
name|LLVMAtomicOrderingRelease
init|=
literal|5
block|,
comment|/**< Release is similar to Acquire, but with                                    a barrier of the sort necessary to release                                    a lock. */
name|LLVMAtomicOrderingAcquireRelease
init|=
literal|6
block|,
comment|/**< provides both an Acquire and a                                           Release barrier (for fences and                                           operations which both read and write                                            memory). */
name|LLVMAtomicOrderingSequentiallyConsistent
init|=
literal|7
comment|/**< provides Acquire semantics                                                  for loads and Release                                                  semantics for stores.                                                  Additionally, it guarantees                                                  that a total ordering exists                                                  between all                                                  SequentiallyConsistent                                                  operations. */
block|}
name|LLVMAtomicOrdering
typedef|;
typedef|typedef
enum|enum
block|{
name|LLVMAtomicRMWBinOpXchg
block|,
comment|/**< Set the new value and return the one old */
name|LLVMAtomicRMWBinOpAdd
block|,
comment|/**< Add a value and return the old one */
name|LLVMAtomicRMWBinOpSub
block|,
comment|/**< Subtract a value and return the old one */
name|LLVMAtomicRMWBinOpAnd
block|,
comment|/**< And a value and return the old one */
name|LLVMAtomicRMWBinOpNand
block|,
comment|/**< Not-And a value and return the old one */
name|LLVMAtomicRMWBinOpOr
block|,
comment|/**< OR a value and return the old one */
name|LLVMAtomicRMWBinOpXor
block|,
comment|/**< Xor a value and return the old one */
name|LLVMAtomicRMWBinOpMax
block|,
comment|/**< Sets the value if it's greater than the                              original using a signed comparison and return                              the old one */
name|LLVMAtomicRMWBinOpMin
block|,
comment|/**< Sets the value if it's Smaller than the                              original using a signed comparison and return                              the old one */
name|LLVMAtomicRMWBinOpUMax
block|,
comment|/**< Sets the value if it's greater than the                              original using an unsigned comparison and return                              the old one */
name|LLVMAtomicRMWBinOpUMin
comment|/**< Sets the value if it's greater than the                              original using an unsigned comparison  and return                              the old one */
block|}
name|LLVMAtomicRMWBinOp
typedef|;
typedef|typedef
enum|enum
block|{
name|LLVMDSError
block|,
name|LLVMDSWarning
block|,
name|LLVMDSRemark
block|,
name|LLVMDSNote
block|}
name|LLVMDiagnosticSeverity
typedef|;
comment|/**  * @}  */
name|void
name|LLVMInitializeCore
parameter_list|(
name|LLVMPassRegistryRef
name|R
parameter_list|)
function_decl|;
comment|/** Deallocate and destroy all ManagedStatic variables.     @see llvm::llvm_shutdown     @see ManagedStatic */
name|void
name|LLVMShutdown
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/*===-- Error handling ----------------------------------------------------===*/
name|char
modifier|*
name|LLVMCreateMessage
parameter_list|(
specifier|const
name|char
modifier|*
name|Message
parameter_list|)
function_decl|;
name|void
name|LLVMDisposeMessage
parameter_list|(
name|char
modifier|*
name|Message
parameter_list|)
function_decl|;
comment|/**  * @defgroup LLVMCCoreContext Contexts  *  * Contexts are execution states for the core LLVM IR system.  *  * Most types are tied to a context instance. Multiple contexts can  * exist simultaneously. A single context is not thread safe. However,  * different contexts can execute on different threads simultaneously.  *  * @{  */
typedef|typedef
name|void
function_decl|(
modifier|*
name|LLVMDiagnosticHandler
function_decl|)
parameter_list|(
name|LLVMDiagnosticInfoRef
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|LLVMYieldCallback
function_decl|)
parameter_list|(
name|LLVMContextRef
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/**  * Create a new context.  *  * Every call to this function should be paired with a call to  * LLVMContextDispose() or the context will leak memory.  */
name|LLVMContextRef
name|LLVMContextCreate
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/**  * Obtain the global context instance.  */
name|LLVMContextRef
name|LLVMGetGlobalContext
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/**  * Set the diagnostic handler for this context.  */
name|void
name|LLVMContextSetDiagnosticHandler
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|,
name|LLVMDiagnosticHandler
name|Handler
parameter_list|,
name|void
modifier|*
name|DiagnosticContext
parameter_list|)
function_decl|;
comment|/**  * Set the yield callback function for this context.  *  * @see LLVMContext::setYieldCallback()  */
name|void
name|LLVMContextSetYieldCallback
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|,
name|LLVMYieldCallback
name|Callback
parameter_list|,
name|void
modifier|*
name|OpaqueHandle
parameter_list|)
function_decl|;
comment|/**  * Destroy a context instance.  *  * This should be called for every call to LLVMContextCreate() or memory  * will be leaked.  */
name|void
name|LLVMContextDispose
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|)
function_decl|;
comment|/**  * Return a string representation of the DiagnosticInfo. Use  * LLVMDisposeMessage to free the string.  *  * @see DiagnosticInfo::print()  */
name|char
modifier|*
name|LLVMGetDiagInfoDescription
parameter_list|(
name|LLVMDiagnosticInfoRef
name|DI
parameter_list|)
function_decl|;
comment|/**  * Return an enum LLVMDiagnosticSeverity.  *  * @see DiagnosticInfo::getSeverity()  */
name|LLVMDiagnosticSeverity
name|LLVMGetDiagInfoSeverity
parameter_list|(
name|LLVMDiagnosticInfoRef
name|DI
parameter_list|)
function_decl|;
name|unsigned
name|LLVMGetMDKindIDInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|,
name|unsigned
name|SLen
parameter_list|)
function_decl|;
name|unsigned
name|LLVMGetMDKindID
parameter_list|(
specifier|const
name|char
modifier|*
name|Name
parameter_list|,
name|unsigned
name|SLen
parameter_list|)
function_decl|;
comment|/**  * @}  */
comment|/**  * @defgroup LLVMCCoreModule Modules  *  * Modules represent the top-level structure in an LLVM program. An LLVM  * module is effectively a translation unit or a collection of  * translation units merged together.  *  * @{  */
comment|/**  * Create a new, empty module in the global context.  *  * This is equivalent to calling LLVMModuleCreateWithNameInContext with  * LLVMGetGlobalContext() as the context parameter.  *  * Every invocation should be paired with LLVMDisposeModule() or memory  * will be leaked.  */
name|LLVMModuleRef
name|LLVMModuleCreateWithName
parameter_list|(
specifier|const
name|char
modifier|*
name|ModuleID
parameter_list|)
function_decl|;
comment|/**  * Create a new, empty module in a specific context.  *  * Every invocation should be paired with LLVMDisposeModule() or memory  * will be leaked.  */
name|LLVMModuleRef
name|LLVMModuleCreateWithNameInContext
parameter_list|(
specifier|const
name|char
modifier|*
name|ModuleID
parameter_list|,
name|LLVMContextRef
name|C
parameter_list|)
function_decl|;
comment|/**  * Return an exact copy of the specified module.  */
name|LLVMModuleRef
name|LLVMCloneModule
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|)
function_decl|;
comment|/**  * Destroy a module instance.  *  * This must be called for every created module or memory will be  * leaked.  */
name|void
name|LLVMDisposeModule
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|)
function_decl|;
comment|/**  * Obtain the data layout for a module.  *  * @see Module::getDataLayout()  */
specifier|const
name|char
modifier|*
name|LLVMGetDataLayout
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|)
function_decl|;
comment|/**  * Set the data layout for a module.  *  * @see Module::setDataLayout()  */
name|void
name|LLVMSetDataLayout
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|,
specifier|const
name|char
modifier|*
name|Triple
parameter_list|)
function_decl|;
comment|/**  * Obtain the target triple for a module.  *  * @see Module::getTargetTriple()  */
specifier|const
name|char
modifier|*
name|LLVMGetTarget
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|)
function_decl|;
comment|/**  * Set the target triple for a module.  *  * @see Module::setTargetTriple()  */
name|void
name|LLVMSetTarget
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|,
specifier|const
name|char
modifier|*
name|Triple
parameter_list|)
function_decl|;
comment|/**  * Dump a representation of a module to stderr.  *  * @see Module::dump()  */
name|void
name|LLVMDumpModule
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|)
function_decl|;
comment|/**  * Print a representation of a module to a file. The ErrorMessage needs to be  * disposed with LLVMDisposeMessage. Returns 0 on success, 1 otherwise.  *  * @see Module::print()  */
name|LLVMBool
name|LLVMPrintModuleToFile
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|,
specifier|const
name|char
modifier|*
name|Filename
parameter_list|,
name|char
modifier|*
modifier|*
name|ErrorMessage
parameter_list|)
function_decl|;
comment|/**  * Return a string representation of the module. Use  * LLVMDisposeMessage to free the string.  *  * @see Module::print()  */
name|char
modifier|*
name|LLVMPrintModuleToString
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|)
function_decl|;
comment|/**  * Set inline assembly for a module.  *  * @see Module::setModuleInlineAsm()  */
name|void
name|LLVMSetModuleInlineAsm
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|,
specifier|const
name|char
modifier|*
name|Asm
parameter_list|)
function_decl|;
comment|/**  * Obtain the context to which this module is associated.  *  * @see Module::getContext()  */
name|LLVMContextRef
name|LLVMGetModuleContext
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|)
function_decl|;
comment|/**  * Obtain a Type from a module by its registered name.  */
name|LLVMTypeRef
name|LLVMGetTypeByName
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
comment|/**  * Obtain the number of operands for named metadata in a module.  *  * @see llvm::Module::getNamedMetadata()  */
name|unsigned
name|LLVMGetNamedMetadataNumOperands
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
comment|/**  * Obtain the named metadata operands for a module.  *  * The passed LLVMValueRef pointer should refer to an array of  * LLVMValueRef at least LLVMGetNamedMetadataNumOperands long. This  * array will be populated with the LLVMValueRef instances. Each  * instance corresponds to a llvm::MDNode.  *  * @see llvm::Module::getNamedMetadata()  * @see llvm::MDNode::getOperand()  */
name|void
name|LLVMGetNamedMetadataOperands
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|LLVMValueRef
modifier|*
name|Dest
parameter_list|)
function_decl|;
comment|/**  * Add an operand to named metadata.  *  * @see llvm::Module::getNamedMetadata()  * @see llvm::MDNode::addOperand()  */
name|void
name|LLVMAddNamedMetadataOperand
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|)
function_decl|;
comment|/**  * Add a function to a module under a specified name.  *  * @see llvm::Function::Create()  */
name|LLVMValueRef
name|LLVMAddFunction
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|,
name|LLVMTypeRef
name|FunctionTy
parameter_list|)
function_decl|;
comment|/**  * Obtain a Function value from a Module by its name.  *  * The returned value corresponds to a llvm::Function value.  *  * @see llvm::Module::getFunction()  */
name|LLVMValueRef
name|LLVMGetNamedFunction
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
comment|/**  * Obtain an iterator to the first Function in a Module.  *  * @see llvm::Module::begin()  */
name|LLVMValueRef
name|LLVMGetFirstFunction
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|)
function_decl|;
comment|/**  * Obtain an iterator to the last Function in a Module.  *  * @see llvm::Module::end()  */
name|LLVMValueRef
name|LLVMGetLastFunction
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|)
function_decl|;
comment|/**  * Advance a Function iterator to the next Function.  *  * Returns NULL if the iterator was already at the end and there are no more  * functions.  */
name|LLVMValueRef
name|LLVMGetNextFunction
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|)
function_decl|;
comment|/**  * Decrement a Function iterator to the previous Function.  *  * Returns NULL if the iterator was already at the beginning and there are  * no previous functions.  */
name|LLVMValueRef
name|LLVMGetPreviousFunction
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|)
function_decl|;
comment|/**  * @}  */
comment|/**  * @defgroup LLVMCCoreType Types  *  * Types represent the type of a value.  *  * Types are associated with a context instance. The context internally  * deduplicates types so there is only 1 instance of a specific type  * alive at a time. In other words, a unique type is shared among all  * consumers within a context.  *  * A Type in the C API corresponds to llvm::Type.  *  * Types have the following hierarchy:  *  *   types:  *     integer type  *     real type  *     function type  *     sequence types:  *       array type  *       pointer type  *       vector type  *     void type  *     label type  *     opaque type  *  * @{  */
comment|/**  * Obtain the enumerated type of a Type instance.  *  * @see llvm::Type:getTypeID()  */
name|LLVMTypeKind
name|LLVMGetTypeKind
parameter_list|(
name|LLVMTypeRef
name|Ty
parameter_list|)
function_decl|;
comment|/**  * Whether the type has a known size.  *  * Things that don't have a size are abstract types, labels, and void.a  *  * @see llvm::Type::isSized()  */
name|LLVMBool
name|LLVMTypeIsSized
parameter_list|(
name|LLVMTypeRef
name|Ty
parameter_list|)
function_decl|;
comment|/**  * Obtain the context to which this type instance is associated.  *  * @see llvm::Type::getContext()  */
name|LLVMContextRef
name|LLVMGetTypeContext
parameter_list|(
name|LLVMTypeRef
name|Ty
parameter_list|)
function_decl|;
comment|/**  * Dump a representation of a type to stderr.  *  * @see llvm::Type::dump()  */
name|void
name|LLVMDumpType
parameter_list|(
name|LLVMTypeRef
name|Val
parameter_list|)
function_decl|;
comment|/**  * Return a string representation of the type. Use  * LLVMDisposeMessage to free the string.  *  * @see llvm::Type::print()  */
name|char
modifier|*
name|LLVMPrintTypeToString
parameter_list|(
name|LLVMTypeRef
name|Val
parameter_list|)
function_decl|;
comment|/**  * @defgroup LLVMCCoreTypeInt Integer Types  *  * Functions in this section operate on integer types.  *  * @{  */
comment|/**  * Obtain an integer type from a context with specified bit width.  */
name|LLVMTypeRef
name|LLVMInt1TypeInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMInt8TypeInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMInt16TypeInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMInt32TypeInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMInt64TypeInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMInt128TypeInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMIntTypeInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|,
name|unsigned
name|NumBits
parameter_list|)
function_decl|;
comment|/**  * Obtain an integer type from the global context with a specified bit  * width.  */
name|LLVMTypeRef
name|LLVMInt1Type
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMInt8Type
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMInt16Type
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMInt32Type
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMInt64Type
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMInt128Type
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMIntType
parameter_list|(
name|unsigned
name|NumBits
parameter_list|)
function_decl|;
name|unsigned
name|LLVMGetIntTypeWidth
parameter_list|(
name|LLVMTypeRef
name|IntegerTy
parameter_list|)
function_decl|;
comment|/**  * @}  */
comment|/**  * @defgroup LLVMCCoreTypeFloat Floating Point Types  *  * @{  */
comment|/**  * Obtain a 16-bit floating point type from a context.  */
name|LLVMTypeRef
name|LLVMHalfTypeInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|)
function_decl|;
comment|/**  * Obtain a 32-bit floating point type from a context.  */
name|LLVMTypeRef
name|LLVMFloatTypeInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|)
function_decl|;
comment|/**  * Obtain a 64-bit floating point type from a context.  */
name|LLVMTypeRef
name|LLVMDoubleTypeInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|)
function_decl|;
comment|/**  * Obtain a 80-bit floating point type (X87) from a context.  */
name|LLVMTypeRef
name|LLVMX86FP80TypeInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|)
function_decl|;
comment|/**  * Obtain a 128-bit floating point type (112-bit mantissa) from a  * context.  */
name|LLVMTypeRef
name|LLVMFP128TypeInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|)
function_decl|;
comment|/**  * Obtain a 128-bit floating point type (two 64-bits) from a context.  */
name|LLVMTypeRef
name|LLVMPPCFP128TypeInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|)
function_decl|;
comment|/**  * Obtain a floating point type from the global context.  *  * These map to the functions in this group of the same name.  */
name|LLVMTypeRef
name|LLVMHalfType
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMFloatType
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMDoubleType
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMX86FP80Type
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMFP128Type
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMPPCFP128Type
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/**  * @}  */
comment|/**  * @defgroup LLVMCCoreTypeFunction Function Types  *  * @{  */
comment|/**  * Obtain a function type consisting of a specified signature.  *  * The function is defined as a tuple of a return Type, a list of  * parameter types, and whether the function is variadic.  */
name|LLVMTypeRef
name|LLVMFunctionType
parameter_list|(
name|LLVMTypeRef
name|ReturnType
parameter_list|,
name|LLVMTypeRef
modifier|*
name|ParamTypes
parameter_list|,
name|unsigned
name|ParamCount
parameter_list|,
name|LLVMBool
name|IsVarArg
parameter_list|)
function_decl|;
comment|/**  * Returns whether a function type is variadic.  */
name|LLVMBool
name|LLVMIsFunctionVarArg
parameter_list|(
name|LLVMTypeRef
name|FunctionTy
parameter_list|)
function_decl|;
comment|/**  * Obtain the Type this function Type returns.  */
name|LLVMTypeRef
name|LLVMGetReturnType
parameter_list|(
name|LLVMTypeRef
name|FunctionTy
parameter_list|)
function_decl|;
comment|/**  * Obtain the number of parameters this function accepts.  */
name|unsigned
name|LLVMCountParamTypes
parameter_list|(
name|LLVMTypeRef
name|FunctionTy
parameter_list|)
function_decl|;
comment|/**  * Obtain the types of a function's parameters.  *  * The Dest parameter should point to a pre-allocated array of  * LLVMTypeRef at least LLVMCountParamTypes() large. On return, the  * first LLVMCountParamTypes() entries in the array will be populated  * with LLVMTypeRef instances.  *  * @param FunctionTy The function type to operate on.  * @param Dest Memory address of an array to be filled with result.  */
name|void
name|LLVMGetParamTypes
parameter_list|(
name|LLVMTypeRef
name|FunctionTy
parameter_list|,
name|LLVMTypeRef
modifier|*
name|Dest
parameter_list|)
function_decl|;
comment|/**  * @}  */
comment|/**  * @defgroup LLVMCCoreTypeStruct Structure Types  *  * These functions relate to LLVMTypeRef instances.  *  * @see llvm::StructType  *  * @{  */
comment|/**  * Create a new structure type in a context.  *  * A structure is specified by a list of inner elements/types and  * whether these can be packed together.  *  * @see llvm::StructType::create()  */
name|LLVMTypeRef
name|LLVMStructTypeInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|,
name|LLVMTypeRef
modifier|*
name|ElementTypes
parameter_list|,
name|unsigned
name|ElementCount
parameter_list|,
name|LLVMBool
name|Packed
parameter_list|)
function_decl|;
comment|/**  * Create a new structure type in the global context.  *  * @see llvm::StructType::create()  */
name|LLVMTypeRef
name|LLVMStructType
parameter_list|(
name|LLVMTypeRef
modifier|*
name|ElementTypes
parameter_list|,
name|unsigned
name|ElementCount
parameter_list|,
name|LLVMBool
name|Packed
parameter_list|)
function_decl|;
comment|/**  * Create an empty structure in a context having a specified name.  *  * @see llvm::StructType::create()  */
name|LLVMTypeRef
name|LLVMStructCreateNamed
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
comment|/**  * Obtain the name of a structure.  *  * @see llvm::StructType::getName()  */
specifier|const
name|char
modifier|*
name|LLVMGetStructName
parameter_list|(
name|LLVMTypeRef
name|Ty
parameter_list|)
function_decl|;
comment|/**  * Set the contents of a structure type.  *  * @see llvm::StructType::setBody()  */
name|void
name|LLVMStructSetBody
parameter_list|(
name|LLVMTypeRef
name|StructTy
parameter_list|,
name|LLVMTypeRef
modifier|*
name|ElementTypes
parameter_list|,
name|unsigned
name|ElementCount
parameter_list|,
name|LLVMBool
name|Packed
parameter_list|)
function_decl|;
comment|/**  * Get the number of elements defined inside the structure.  *  * @see llvm::StructType::getNumElements()  */
name|unsigned
name|LLVMCountStructElementTypes
parameter_list|(
name|LLVMTypeRef
name|StructTy
parameter_list|)
function_decl|;
comment|/**  * Get the elements within a structure.  *  * The function is passed the address of a pre-allocated array of  * LLVMTypeRef at least LLVMCountStructElementTypes() long. After  * invocation, this array will be populated with the structure's  * elements. The objects in the destination array will have a lifetime  * of the structure type itself, which is the lifetime of the context it  * is contained in.  */
name|void
name|LLVMGetStructElementTypes
parameter_list|(
name|LLVMTypeRef
name|StructTy
parameter_list|,
name|LLVMTypeRef
modifier|*
name|Dest
parameter_list|)
function_decl|;
comment|/**  * Get the type of the element at a given index in the structure.  *  * @see llvm::StructType::getTypeAtIndex()  */
name|LLVMTypeRef
name|LLVMStructGetTypeAtIndex
parameter_list|(
name|LLVMTypeRef
name|StructTy
parameter_list|,
name|unsigned
name|i
parameter_list|)
function_decl|;
comment|/**  * Determine whether a structure is packed.  *  * @see llvm::StructType::isPacked()  */
name|LLVMBool
name|LLVMIsPackedStruct
parameter_list|(
name|LLVMTypeRef
name|StructTy
parameter_list|)
function_decl|;
comment|/**  * Determine whether a structure is opaque.  *  * @see llvm::StructType::isOpaque()  */
name|LLVMBool
name|LLVMIsOpaqueStruct
parameter_list|(
name|LLVMTypeRef
name|StructTy
parameter_list|)
function_decl|;
comment|/**  * @}  */
comment|/**  * @defgroup LLVMCCoreTypeSequential Sequential Types  *  * Sequential types represents "arrays" of types. This is a super class  * for array, vector, and pointer types.  *  * @{  */
comment|/**  * Obtain the type of elements within a sequential type.  *  * This works on array, vector, and pointer types.  *  * @see llvm::SequentialType::getElementType()  */
name|LLVMTypeRef
name|LLVMGetElementType
parameter_list|(
name|LLVMTypeRef
name|Ty
parameter_list|)
function_decl|;
comment|/**  * Create a fixed size array type that refers to a specific type.  *  * The created type will exist in the context that its element type  * exists in.  *  * @see llvm::ArrayType::get()  */
name|LLVMTypeRef
name|LLVMArrayType
parameter_list|(
name|LLVMTypeRef
name|ElementType
parameter_list|,
name|unsigned
name|ElementCount
parameter_list|)
function_decl|;
comment|/**  * Obtain the length of an array type.  *  * This only works on types that represent arrays.  *  * @see llvm::ArrayType::getNumElements()  */
name|unsigned
name|LLVMGetArrayLength
parameter_list|(
name|LLVMTypeRef
name|ArrayTy
parameter_list|)
function_decl|;
comment|/**  * Create a pointer type that points to a defined type.  *  * The created type will exist in the context that its pointee type  * exists in.  *  * @see llvm::PointerType::get()  */
name|LLVMTypeRef
name|LLVMPointerType
parameter_list|(
name|LLVMTypeRef
name|ElementType
parameter_list|,
name|unsigned
name|AddressSpace
parameter_list|)
function_decl|;
comment|/**  * Obtain the address space of a pointer type.  *  * This only works on types that represent pointers.  *  * @see llvm::PointerType::getAddressSpace()  */
name|unsigned
name|LLVMGetPointerAddressSpace
parameter_list|(
name|LLVMTypeRef
name|PointerTy
parameter_list|)
function_decl|;
comment|/**  * Create a vector type that contains a defined type and has a specific  * number of elements.  *  * The created type will exist in the context thats its element type  * exists in.  *  * @see llvm::VectorType::get()  */
name|LLVMTypeRef
name|LLVMVectorType
parameter_list|(
name|LLVMTypeRef
name|ElementType
parameter_list|,
name|unsigned
name|ElementCount
parameter_list|)
function_decl|;
comment|/**  * Obtain the number of elements in a vector type.  *  * This only works on types that represent vectors.  *  * @see llvm::VectorType::getNumElements()  */
name|unsigned
name|LLVMGetVectorSize
parameter_list|(
name|LLVMTypeRef
name|VectorTy
parameter_list|)
function_decl|;
comment|/**  * @}  */
comment|/**  * @defgroup LLVMCCoreTypeOther Other Types  *  * @{  */
comment|/**  * Create a void type in a context.  */
name|LLVMTypeRef
name|LLVMVoidTypeInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|)
function_decl|;
comment|/**  * Create a label type in a context.  */
name|LLVMTypeRef
name|LLVMLabelTypeInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|)
function_decl|;
comment|/**  * Create a X86 MMX type in a context.  */
name|LLVMTypeRef
name|LLVMX86MMXTypeInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|)
function_decl|;
comment|/**  * These are similar to the above functions except they operate on the  * global context.  */
name|LLVMTypeRef
name|LLVMVoidType
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMLabelType
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMX86MMXType
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/**  * @}  */
comment|/**  * @}  */
comment|/**  * @defgroup LLVMCCoreValues Values  *  * The bulk of LLVM's object model consists of values, which comprise a very  * rich type hierarchy.  *  * LLVMValueRef essentially represents llvm::Value. There is a rich  * hierarchy of classes within this type. Depending on the instance  * obtained, not all APIs are available.  *  * Callers can determine the type of an LLVMValueRef by calling the  * LLVMIsA* family of functions (e.g. LLVMIsAArgument()). These  * functions are defined by a macro, so it isn't obvious which are  * available by looking at the Doxygen source code. Instead, look at the  * source definition of LLVM_FOR_EACH_VALUE_SUBCLASS and note the list  * of value names given. These value names also correspond to classes in  * the llvm::Value hierarchy.  *  * @{  */
define|#
directive|define
name|LLVM_FOR_EACH_VALUE_SUBCLASS
parameter_list|(
name|macro
parameter_list|)
define|\
value|macro(Argument)                           \   macro(BasicBlock)                         \   macro(InlineAsm)                          \   macro(User)                               \     macro(Constant)                         \       macro(BlockAddress)                   \       macro(ConstantAggregateZero)          \       macro(ConstantArray)                  \       macro(ConstantDataSequential)         \         macro(ConstantDataArray)            \         macro(ConstantDataVector)           \       macro(ConstantExpr)                   \       macro(ConstantFP)                     \       macro(ConstantInt)                    \       macro(ConstantPointerNull)            \       macro(ConstantStruct)                 \       macro(ConstantTokenNone)              \       macro(ConstantVector)                 \       macro(GlobalValue)                    \         macro(GlobalAlias)                  \         macro(GlobalObject)                 \           macro(Function)                   \           macro(GlobalVariable)             \       macro(UndefValue)                     \     macro(Instruction)                      \       macro(BinaryOperator)                 \       macro(CallInst)                       \         macro(IntrinsicInst)                \           macro(DbgInfoIntrinsic)           \             macro(DbgDeclareInst)           \           macro(MemIntrinsic)               \             macro(MemCpyInst)               \             macro(MemMoveInst)              \             macro(MemSetInst)               \       macro(CmpInst)                        \         macro(FCmpInst)                     \         macro(ICmpInst)                     \       macro(ExtractElementInst)             \       macro(GetElementPtrInst)              \       macro(InsertElementInst)              \       macro(InsertValueInst)                \       macro(LandingPadInst)                 \       macro(PHINode)                        \       macro(SelectInst)                     \       macro(ShuffleVectorInst)              \       macro(StoreInst)                      \       macro(TerminatorInst)                 \         macro(BranchInst)                   \         macro(IndirectBrInst)               \         macro(InvokeInst)                   \         macro(ReturnInst)                   \         macro(SwitchInst)                   \         macro(UnreachableInst)              \         macro(ResumeInst)                   \         macro(CleanupReturnInst)            \         macro(CatchReturnInst)              \       macro(FuncletPadInst)                 \         macro(CatchPadInst)                 \         macro(CleanupPadInst)               \       macro(UnaryInstruction)               \         macro(AllocaInst)                   \         macro(CastInst)                     \           macro(AddrSpaceCastInst)          \           macro(BitCastInst)                \           macro(FPExtInst)                  \           macro(FPToSIInst)                 \           macro(FPToUIInst)                 \           macro(FPTruncInst)                \           macro(IntToPtrInst)               \           macro(PtrToIntInst)               \           macro(SExtInst)                   \           macro(SIToFPInst)                 \           macro(TruncInst)                  \           macro(UIToFPInst)                 \           macro(ZExtInst)                   \         macro(ExtractValueInst)             \         macro(LoadInst)                     \         macro(VAArgInst)
comment|/**  * @defgroup LLVMCCoreValueGeneral General APIs  *  * Functions in this section work on all LLVMValueRef instances,  * regardless of their sub-type. They correspond to functions available  * on llvm::Value.  *  * @{  */
comment|/**  * Obtain the type of a value.  *  * @see llvm::Value::getType()  */
name|LLVMTypeRef
name|LLVMTypeOf
parameter_list|(
name|LLVMValueRef
name|Val
parameter_list|)
function_decl|;
comment|/**  * Obtain the string name of a value.  *  * @see llvm::Value::getName()  */
specifier|const
name|char
modifier|*
name|LLVMGetValueName
parameter_list|(
name|LLVMValueRef
name|Val
parameter_list|)
function_decl|;
comment|/**  * Set the string name of a value.  *  * @see llvm::Value::setName()  */
name|void
name|LLVMSetValueName
parameter_list|(
name|LLVMValueRef
name|Val
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
comment|/**  * Dump a representation of a value to stderr.  *  * @see llvm::Value::dump()  */
name|void
name|LLVMDumpValue
parameter_list|(
name|LLVMValueRef
name|Val
parameter_list|)
function_decl|;
comment|/**  * Return a string representation of the value. Use  * LLVMDisposeMessage to free the string.  *  * @see llvm::Value::print()  */
name|char
modifier|*
name|LLVMPrintValueToString
parameter_list|(
name|LLVMValueRef
name|Val
parameter_list|)
function_decl|;
comment|/**  * Replace all uses of a value with another one.  *  * @see llvm::Value::replaceAllUsesWith()  */
name|void
name|LLVMReplaceAllUsesWith
parameter_list|(
name|LLVMValueRef
name|OldVal
parameter_list|,
name|LLVMValueRef
name|NewVal
parameter_list|)
function_decl|;
comment|/**  * Determine whether the specified constant instance is constant.  */
name|LLVMBool
name|LLVMIsConstant
parameter_list|(
name|LLVMValueRef
name|Val
parameter_list|)
function_decl|;
comment|/**  * Determine whether a value instance is undefined.  */
name|LLVMBool
name|LLVMIsUndef
parameter_list|(
name|LLVMValueRef
name|Val
parameter_list|)
function_decl|;
comment|/**  * Convert value instances between types.  *  * Internally, an LLVMValueRef is "pinned" to a specific type. This  * series of functions allows you to cast an instance to a specific  * type.  *  * If the cast is not valid for the specified type, NULL is returned.  *  * @see llvm::dyn_cast_or_null<>  */
define|#
directive|define
name|LLVM_DECLARE_VALUE_CAST
parameter_list|(
name|name
parameter_list|)
define|\
value|LLVMValueRef LLVMIsA##name(LLVMValueRef Val);
name|LLVM_FOR_EACH_VALUE_SUBCLASS
argument_list|(
argument|LLVM_DECLARE_VALUE_CAST
argument_list|)
name|LLVMValueRef
name|LLVMIsAMDNode
parameter_list|(
name|LLVMValueRef
name|Val
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMIsAMDString
parameter_list|(
name|LLVMValueRef
name|Val
parameter_list|)
function_decl|;
comment|/**  * @}  */
comment|/**  * @defgroup LLVMCCoreValueUses Usage  *  * This module defines functions that allow you to inspect the uses of a  * LLVMValueRef.  *  * It is possible to obtain an LLVMUseRef for any LLVMValueRef instance.  * Each LLVMUseRef (which corresponds to a llvm::Use instance) holds a  * llvm::User and llvm::Value.  *  * @{  */
comment|/**  * Obtain the first use of a value.  *  * Uses are obtained in an iterator fashion. First, call this function  * to obtain a reference to the first use. Then, call LLVMGetNextUse()  * on that instance and all subsequently obtained instances until  * LLVMGetNextUse() returns NULL.  *  * @see llvm::Value::use_begin()  */
name|LLVMUseRef
name|LLVMGetFirstUse
parameter_list|(
name|LLVMValueRef
name|Val
parameter_list|)
function_decl|;
comment|/**  * Obtain the next use of a value.  *  * This effectively advances the iterator. It returns NULL if you are on  * the final use and no more are available.  */
name|LLVMUseRef
name|LLVMGetNextUse
parameter_list|(
name|LLVMUseRef
name|U
parameter_list|)
function_decl|;
comment|/**  * Obtain the user value for a user.  *  * The returned value corresponds to a llvm::User type.  *  * @see llvm::Use::getUser()  */
name|LLVMValueRef
name|LLVMGetUser
parameter_list|(
name|LLVMUseRef
name|U
parameter_list|)
function_decl|;
comment|/**  * Obtain the value this use corresponds to.  *  * @see llvm::Use::get().  */
name|LLVMValueRef
name|LLVMGetUsedValue
parameter_list|(
name|LLVMUseRef
name|U
parameter_list|)
function_decl|;
comment|/**  * @}  */
comment|/**  * @defgroup LLVMCCoreValueUser User value  *  * Function in this group pertain to LLVMValueRef instances that descent  * from llvm::User. This includes constants, instructions, and  * operators.  *  * @{  */
comment|/**  * Obtain an operand at a specific index in a llvm::User value.  *  * @see llvm::User::getOperand()  */
name|LLVMValueRef
name|LLVMGetOperand
parameter_list|(
name|LLVMValueRef
name|Val
parameter_list|,
name|unsigned
name|Index
parameter_list|)
function_decl|;
comment|/**  * Obtain the use of an operand at a specific index in a llvm::User value.  *  * @see llvm::User::getOperandUse()  */
name|LLVMUseRef
name|LLVMGetOperandUse
parameter_list|(
name|LLVMValueRef
name|Val
parameter_list|,
name|unsigned
name|Index
parameter_list|)
function_decl|;
comment|/**  * Set an operand at a specific index in a llvm::User value.  *  * @see llvm::User::setOperand()  */
name|void
name|LLVMSetOperand
parameter_list|(
name|LLVMValueRef
name|User
parameter_list|,
name|unsigned
name|Index
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|)
function_decl|;
comment|/**  * Obtain the number of operands in a llvm::User value.  *  * @see llvm::User::getNumOperands()  */
name|int
name|LLVMGetNumOperands
parameter_list|(
name|LLVMValueRef
name|Val
parameter_list|)
function_decl|;
comment|/**  * @}  */
comment|/**  * @defgroup LLVMCCoreValueConstant Constants  *  * This section contains APIs for interacting with LLVMValueRef that  * correspond to llvm::Constant instances.  *  * These functions will work for any LLVMValueRef in the llvm::Constant  * class hierarchy.  *  * @{  */
comment|/**  * Obtain a constant value referring to the null instance of a type.  *  * @see llvm::Constant::getNullValue()  */
name|LLVMValueRef
name|LLVMConstNull
parameter_list|(
name|LLVMTypeRef
name|Ty
parameter_list|)
function_decl|;
comment|/* all zeroes */
comment|/**  * Obtain a constant value referring to the instance of a type  * consisting of all ones.  *  * This is only valid for integer types.  *  * @see llvm::Constant::getAllOnesValue()  */
name|LLVMValueRef
name|LLVMConstAllOnes
parameter_list|(
name|LLVMTypeRef
name|Ty
parameter_list|)
function_decl|;
comment|/**  * Obtain a constant value referring to an undefined value of a type.  *  * @see llvm::UndefValue::get()  */
name|LLVMValueRef
name|LLVMGetUndef
parameter_list|(
name|LLVMTypeRef
name|Ty
parameter_list|)
function_decl|;
comment|/**  * Determine whether a value instance is null.  *  * @see llvm::Constant::isNullValue()  */
name|LLVMBool
name|LLVMIsNull
parameter_list|(
name|LLVMValueRef
name|Val
parameter_list|)
function_decl|;
comment|/**  * Obtain a constant that is a constant pointer pointing to NULL for a  * specified type.  */
name|LLVMValueRef
name|LLVMConstPointerNull
parameter_list|(
name|LLVMTypeRef
name|Ty
parameter_list|)
function_decl|;
comment|/**  * @defgroup LLVMCCoreValueConstantScalar Scalar constants  *  * Functions in this group model LLVMValueRef instances that correspond  * to constants referring to scalar types.  *  * For integer types, the LLVMTypeRef parameter should correspond to a  * llvm::IntegerType instance and the returned LLVMValueRef will  * correspond to a llvm::ConstantInt.  *  * For floating point types, the LLVMTypeRef returned corresponds to a  * llvm::ConstantFP.  *  * @{  */
comment|/**  * Obtain a constant value for an integer type.  *  * The returned value corresponds to a llvm::ConstantInt.  *  * @see llvm::ConstantInt::get()  *  * @param IntTy Integer type to obtain value of.  * @param N The value the returned instance should refer to.  * @param SignExtend Whether to sign extend the produced value.  */
name|LLVMValueRef
name|LLVMConstInt
parameter_list|(
name|LLVMTypeRef
name|IntTy
parameter_list|,
name|unsigned
name|long
name|long
name|N
parameter_list|,
name|LLVMBool
name|SignExtend
parameter_list|)
function_decl|;
comment|/**  * Obtain a constant value for an integer of arbitrary precision.  *  * @see llvm::ConstantInt::get()  */
name|LLVMValueRef
name|LLVMConstIntOfArbitraryPrecision
parameter_list|(
name|LLVMTypeRef
name|IntTy
parameter_list|,
name|unsigned
name|NumWords
parameter_list|,
specifier|const
name|uint64_t
name|Words
index|[]
parameter_list|)
function_decl|;
comment|/**  * Obtain a constant value for an integer parsed from a string.  *  * A similar API, LLVMConstIntOfStringAndSize is also available. If the  * string's length is available, it is preferred to call that function  * instead.  *  * @see llvm::ConstantInt::get()  */
name|LLVMValueRef
name|LLVMConstIntOfString
parameter_list|(
name|LLVMTypeRef
name|IntTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Text
parameter_list|,
name|uint8_t
name|Radix
parameter_list|)
function_decl|;
comment|/**  * Obtain a constant value for an integer parsed from a string with  * specified length.  *  * @see llvm::ConstantInt::get()  */
name|LLVMValueRef
name|LLVMConstIntOfStringAndSize
parameter_list|(
name|LLVMTypeRef
name|IntTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Text
parameter_list|,
name|unsigned
name|SLen
parameter_list|,
name|uint8_t
name|Radix
parameter_list|)
function_decl|;
comment|/**  * Obtain a constant value referring to a double floating point value.  */
name|LLVMValueRef
name|LLVMConstReal
parameter_list|(
name|LLVMTypeRef
name|RealTy
parameter_list|,
name|double
name|N
parameter_list|)
function_decl|;
comment|/**  * Obtain a constant for a floating point value parsed from a string.  *  * A similar API, LLVMConstRealOfStringAndSize is also available. It  * should be used if the input string's length is known.  */
name|LLVMValueRef
name|LLVMConstRealOfString
parameter_list|(
name|LLVMTypeRef
name|RealTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Text
parameter_list|)
function_decl|;
comment|/**  * Obtain a constant for a floating point value parsed from a string.  */
name|LLVMValueRef
name|LLVMConstRealOfStringAndSize
parameter_list|(
name|LLVMTypeRef
name|RealTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Text
parameter_list|,
name|unsigned
name|SLen
parameter_list|)
function_decl|;
comment|/**  * Obtain the zero extended value for an integer constant value.  *  * @see llvm::ConstantInt::getZExtValue()  */
name|unsigned
name|long
name|long
name|LLVMConstIntGetZExtValue
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|)
function_decl|;
comment|/**  * Obtain the sign extended value for an integer constant value.  *  * @see llvm::ConstantInt::getSExtValue()  */
name|long
name|long
name|LLVMConstIntGetSExtValue
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|)
function_decl|;
comment|/**  * Obtain the double value for an floating point constant value.  * losesInfo indicates if some precision was lost in the conversion.  *  * @see llvm::ConstantFP::getDoubleValue  */
name|double
name|LLVMConstRealGetDouble
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMBool
modifier|*
name|losesInfo
parameter_list|)
function_decl|;
comment|/**  * @}  */
comment|/**  * @defgroup LLVMCCoreValueConstantComposite Composite Constants  *  * Functions in this group operate on composite constants.  *  * @{  */
comment|/**  * Create a ConstantDataSequential and initialize it with a string.  *  * @see llvm::ConstantDataArray::getString()  */
name|LLVMValueRef
name|LLVMConstStringInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|,
specifier|const
name|char
modifier|*
name|Str
parameter_list|,
name|unsigned
name|Length
parameter_list|,
name|LLVMBool
name|DontNullTerminate
parameter_list|)
function_decl|;
comment|/**  * Create a ConstantDataSequential with string content in the global context.  *  * This is the same as LLVMConstStringInContext except it operates on the  * global context.  *  * @see LLVMConstStringInContext()  * @see llvm::ConstantDataArray::getString()  */
name|LLVMValueRef
name|LLVMConstString
parameter_list|(
specifier|const
name|char
modifier|*
name|Str
parameter_list|,
name|unsigned
name|Length
parameter_list|,
name|LLVMBool
name|DontNullTerminate
parameter_list|)
function_decl|;
comment|/**  * Returns true if the specified constant is an array of i8.  *  * @see ConstantDataSequential::getAsString()  */
name|LLVMBool
name|LLVMIsConstantString
parameter_list|(
name|LLVMValueRef
name|c
parameter_list|)
function_decl|;
comment|/**  * Get the given constant data sequential as a string.  *  * @see ConstantDataSequential::getAsString()  */
specifier|const
name|char
modifier|*
name|LLVMGetAsString
parameter_list|(
name|LLVMValueRef
name|c
parameter_list|,
name|size_t
modifier|*
name|out
parameter_list|)
function_decl|;
comment|/**  * Create an anonymous ConstantStruct with the specified values.  *  * @see llvm::ConstantStruct::getAnon()  */
name|LLVMValueRef
name|LLVMConstStructInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|,
name|LLVMValueRef
modifier|*
name|ConstantVals
parameter_list|,
name|unsigned
name|Count
parameter_list|,
name|LLVMBool
name|Packed
parameter_list|)
function_decl|;
comment|/**  * Create a ConstantStruct in the global Context.  *  * This is the same as LLVMConstStructInContext except it operates on the  * global Context.  *  * @see LLVMConstStructInContext()  */
name|LLVMValueRef
name|LLVMConstStruct
parameter_list|(
name|LLVMValueRef
modifier|*
name|ConstantVals
parameter_list|,
name|unsigned
name|Count
parameter_list|,
name|LLVMBool
name|Packed
parameter_list|)
function_decl|;
comment|/**  * Create a ConstantArray from values.  *  * @see llvm::ConstantArray::get()  */
name|LLVMValueRef
name|LLVMConstArray
parameter_list|(
name|LLVMTypeRef
name|ElementTy
parameter_list|,
name|LLVMValueRef
modifier|*
name|ConstantVals
parameter_list|,
name|unsigned
name|Length
parameter_list|)
function_decl|;
comment|/**  * Create a non-anonymous ConstantStruct from values.  *  * @see llvm::ConstantStruct::get()  */
name|LLVMValueRef
name|LLVMConstNamedStruct
parameter_list|(
name|LLVMTypeRef
name|StructTy
parameter_list|,
name|LLVMValueRef
modifier|*
name|ConstantVals
parameter_list|,
name|unsigned
name|Count
parameter_list|)
function_decl|;
comment|/**  * Get an element at specified index as a constant.  *  * @see ConstantDataSequential::getElementAsConstant()  */
name|LLVMValueRef
name|LLVMGetElementAsConstant
parameter_list|(
name|LLVMValueRef
name|c
parameter_list|,
name|unsigned
name|idx
parameter_list|)
function_decl|;
comment|/**  * Create a ConstantVector from values.  *  * @see llvm::ConstantVector::get()  */
name|LLVMValueRef
name|LLVMConstVector
parameter_list|(
name|LLVMValueRef
modifier|*
name|ScalarConstantVals
parameter_list|,
name|unsigned
name|Size
parameter_list|)
function_decl|;
comment|/**  * @}  */
comment|/**  * @defgroup LLVMCCoreValueConstantExpressions Constant Expressions  *  * Functions in this group correspond to APIs on llvm::ConstantExpr.  *  * @see llvm::ConstantExpr.  *  * @{  */
name|LLVMOpcode
name|LLVMGetConstOpcode
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMAlignOf
parameter_list|(
name|LLVMTypeRef
name|Ty
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMSizeOf
parameter_list|(
name|LLVMTypeRef
name|Ty
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstNeg
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstNSWNeg
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstNUWNeg
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstFNeg
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstNot
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstAdd
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstNSWAdd
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstNUWAdd
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstFAdd
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstSub
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstNSWSub
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstNUWSub
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstFSub
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstMul
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstNSWMul
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstNUWMul
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstFMul
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstUDiv
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstSDiv
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstExactSDiv
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstFDiv
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstURem
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstSRem
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstFRem
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstAnd
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstOr
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstXor
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstICmp
parameter_list|(
name|LLVMIntPredicate
name|Predicate
parameter_list|,
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstFCmp
parameter_list|(
name|LLVMRealPredicate
name|Predicate
parameter_list|,
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstShl
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstLShr
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstAShr
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstGEP
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMValueRef
modifier|*
name|ConstantIndices
parameter_list|,
name|unsigned
name|NumIndices
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstInBoundsGEP
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMValueRef
modifier|*
name|ConstantIndices
parameter_list|,
name|unsigned
name|NumIndices
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstTrunc
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMTypeRef
name|ToType
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstSExt
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMTypeRef
name|ToType
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstZExt
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMTypeRef
name|ToType
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstFPTrunc
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMTypeRef
name|ToType
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstFPExt
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMTypeRef
name|ToType
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstUIToFP
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMTypeRef
name|ToType
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstSIToFP
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMTypeRef
name|ToType
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstFPToUI
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMTypeRef
name|ToType
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstFPToSI
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMTypeRef
name|ToType
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstPtrToInt
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMTypeRef
name|ToType
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstIntToPtr
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMTypeRef
name|ToType
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstBitCast
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMTypeRef
name|ToType
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstAddrSpaceCast
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMTypeRef
name|ToType
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstZExtOrBitCast
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMTypeRef
name|ToType
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstSExtOrBitCast
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMTypeRef
name|ToType
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstTruncOrBitCast
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMTypeRef
name|ToType
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstPointerCast
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMTypeRef
name|ToType
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstIntCast
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMTypeRef
name|ToType
parameter_list|,
name|LLVMBool
name|isSigned
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstFPCast
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMTypeRef
name|ToType
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstSelect
parameter_list|(
name|LLVMValueRef
name|ConstantCondition
parameter_list|,
name|LLVMValueRef
name|ConstantIfTrue
parameter_list|,
name|LLVMValueRef
name|ConstantIfFalse
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstExtractElement
parameter_list|(
name|LLVMValueRef
name|VectorConstant
parameter_list|,
name|LLVMValueRef
name|IndexConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstInsertElement
parameter_list|(
name|LLVMValueRef
name|VectorConstant
parameter_list|,
name|LLVMValueRef
name|ElementValueConstant
parameter_list|,
name|LLVMValueRef
name|IndexConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstShuffleVector
parameter_list|(
name|LLVMValueRef
name|VectorAConstant
parameter_list|,
name|LLVMValueRef
name|VectorBConstant
parameter_list|,
name|LLVMValueRef
name|MaskConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstExtractValue
parameter_list|(
name|LLVMValueRef
name|AggConstant
parameter_list|,
name|unsigned
modifier|*
name|IdxList
parameter_list|,
name|unsigned
name|NumIdx
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstInsertValue
parameter_list|(
name|LLVMValueRef
name|AggConstant
parameter_list|,
name|LLVMValueRef
name|ElementValueConstant
parameter_list|,
name|unsigned
modifier|*
name|IdxList
parameter_list|,
name|unsigned
name|NumIdx
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstInlineAsm
parameter_list|(
name|LLVMTypeRef
name|Ty
parameter_list|,
specifier|const
name|char
modifier|*
name|AsmString
parameter_list|,
specifier|const
name|char
modifier|*
name|Constraints
parameter_list|,
name|LLVMBool
name|HasSideEffects
parameter_list|,
name|LLVMBool
name|IsAlignStack
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBlockAddress
parameter_list|(
name|LLVMValueRef
name|F
parameter_list|,
name|LLVMBasicBlockRef
name|BB
parameter_list|)
function_decl|;
comment|/**  * @}  */
comment|/**  * @defgroup LLVMCCoreValueConstantGlobals Global Values  *  * This group contains functions that operate on global values. Functions in  * this group relate to functions in the llvm::GlobalValue class tree.  *  * @see llvm::GlobalValue  *  * @{  */
name|LLVMModuleRef
name|LLVMGetGlobalParent
parameter_list|(
name|LLVMValueRef
name|Global
parameter_list|)
function_decl|;
name|LLVMBool
name|LLVMIsDeclaration
parameter_list|(
name|LLVMValueRef
name|Global
parameter_list|)
function_decl|;
name|LLVMLinkage
name|LLVMGetLinkage
parameter_list|(
name|LLVMValueRef
name|Global
parameter_list|)
function_decl|;
name|void
name|LLVMSetLinkage
parameter_list|(
name|LLVMValueRef
name|Global
parameter_list|,
name|LLVMLinkage
name|Linkage
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|LLVMGetSection
parameter_list|(
name|LLVMValueRef
name|Global
parameter_list|)
function_decl|;
name|void
name|LLVMSetSection
parameter_list|(
name|LLVMValueRef
name|Global
parameter_list|,
specifier|const
name|char
modifier|*
name|Section
parameter_list|)
function_decl|;
name|LLVMVisibility
name|LLVMGetVisibility
parameter_list|(
name|LLVMValueRef
name|Global
parameter_list|)
function_decl|;
name|void
name|LLVMSetVisibility
parameter_list|(
name|LLVMValueRef
name|Global
parameter_list|,
name|LLVMVisibility
name|Viz
parameter_list|)
function_decl|;
name|LLVMDLLStorageClass
name|LLVMGetDLLStorageClass
parameter_list|(
name|LLVMValueRef
name|Global
parameter_list|)
function_decl|;
name|void
name|LLVMSetDLLStorageClass
parameter_list|(
name|LLVMValueRef
name|Global
parameter_list|,
name|LLVMDLLStorageClass
name|Class
parameter_list|)
function_decl|;
name|LLVMBool
name|LLVMHasUnnamedAddr
parameter_list|(
name|LLVMValueRef
name|Global
parameter_list|)
function_decl|;
name|void
name|LLVMSetUnnamedAddr
parameter_list|(
name|LLVMValueRef
name|Global
parameter_list|,
name|LLVMBool
name|HasUnnamedAddr
parameter_list|)
function_decl|;
comment|/**  * @defgroup LLVMCCoreValueWithAlignment Values with alignment  *  * Functions in this group only apply to values with alignment, i.e.  * global variables, load and store instructions.  */
comment|/**  * Obtain the preferred alignment of the value.  * @see llvm::AllocaInst::getAlignment()  * @see llvm::LoadInst::getAlignment()  * @see llvm::StoreInst::getAlignment()  * @see llvm::GlobalValue::getAlignment()  */
name|unsigned
name|LLVMGetAlignment
parameter_list|(
name|LLVMValueRef
name|V
parameter_list|)
function_decl|;
comment|/**  * Set the preferred alignment of the value.  * @see llvm::AllocaInst::setAlignment()  * @see llvm::LoadInst::setAlignment()  * @see llvm::StoreInst::setAlignment()  * @see llvm::GlobalValue::setAlignment()  */
name|void
name|LLVMSetAlignment
parameter_list|(
name|LLVMValueRef
name|V
parameter_list|,
name|unsigned
name|Bytes
parameter_list|)
function_decl|;
comment|/**   * @}   */
comment|/**  * @defgroup LLVMCoreValueConstantGlobalVariable Global Variables  *  * This group contains functions that operate on global variable values.  *  * @see llvm::GlobalVariable  *  * @{  */
name|LLVMValueRef
name|LLVMAddGlobal
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|,
name|LLVMTypeRef
name|Ty
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMAddGlobalInAddressSpace
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|,
name|LLVMTypeRef
name|Ty
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|,
name|unsigned
name|AddressSpace
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMGetNamedGlobal
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMGetFirstGlobal
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMGetLastGlobal
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMGetNextGlobal
parameter_list|(
name|LLVMValueRef
name|GlobalVar
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMGetPreviousGlobal
parameter_list|(
name|LLVMValueRef
name|GlobalVar
parameter_list|)
function_decl|;
name|void
name|LLVMDeleteGlobal
parameter_list|(
name|LLVMValueRef
name|GlobalVar
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMGetInitializer
parameter_list|(
name|LLVMValueRef
name|GlobalVar
parameter_list|)
function_decl|;
name|void
name|LLVMSetInitializer
parameter_list|(
name|LLVMValueRef
name|GlobalVar
parameter_list|,
name|LLVMValueRef
name|ConstantVal
parameter_list|)
function_decl|;
name|LLVMBool
name|LLVMIsThreadLocal
parameter_list|(
name|LLVMValueRef
name|GlobalVar
parameter_list|)
function_decl|;
name|void
name|LLVMSetThreadLocal
parameter_list|(
name|LLVMValueRef
name|GlobalVar
parameter_list|,
name|LLVMBool
name|IsThreadLocal
parameter_list|)
function_decl|;
name|LLVMBool
name|LLVMIsGlobalConstant
parameter_list|(
name|LLVMValueRef
name|GlobalVar
parameter_list|)
function_decl|;
name|void
name|LLVMSetGlobalConstant
parameter_list|(
name|LLVMValueRef
name|GlobalVar
parameter_list|,
name|LLVMBool
name|IsConstant
parameter_list|)
function_decl|;
name|LLVMThreadLocalMode
name|LLVMGetThreadLocalMode
parameter_list|(
name|LLVMValueRef
name|GlobalVar
parameter_list|)
function_decl|;
name|void
name|LLVMSetThreadLocalMode
parameter_list|(
name|LLVMValueRef
name|GlobalVar
parameter_list|,
name|LLVMThreadLocalMode
name|Mode
parameter_list|)
function_decl|;
name|LLVMBool
name|LLVMIsExternallyInitialized
parameter_list|(
name|LLVMValueRef
name|GlobalVar
parameter_list|)
function_decl|;
name|void
name|LLVMSetExternallyInitialized
parameter_list|(
name|LLVMValueRef
name|GlobalVar
parameter_list|,
name|LLVMBool
name|IsExtInit
parameter_list|)
function_decl|;
comment|/**  * @}  */
comment|/**  * @defgroup LLVMCoreValueConstantGlobalAlias Global Aliases  *  * This group contains function that operate on global alias values.  *  * @see llvm::GlobalAlias  *  * @{  */
name|LLVMValueRef
name|LLVMAddAlias
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|,
name|LLVMTypeRef
name|Ty
parameter_list|,
name|LLVMValueRef
name|Aliasee
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
comment|/**  * @}  */
comment|/**  * @defgroup LLVMCCoreValueFunction Function values  *  * Functions in this group operate on LLVMValueRef instances that  * correspond to llvm::Function instances.  *  * @see llvm::Function  *  * @{  */
comment|/**  * Remove a function from its containing module and deletes it.  *  * @see llvm::Function::eraseFromParent()  */
name|void
name|LLVMDeleteFunction
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|)
function_decl|;
comment|/**  * Obtain the personality function attached to the function.  *  * @see llvm::Function::getPersonalityFn()  */
name|LLVMValueRef
name|LLVMGetPersonalityFn
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|)
function_decl|;
comment|/**  * Set the personality function attached to the function.  *  * @see llvm::Function::setPersonalityFn()  */
name|void
name|LLVMSetPersonalityFn
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|,
name|LLVMValueRef
name|PersonalityFn
parameter_list|)
function_decl|;
comment|/**  * Obtain the ID number from a function instance.  *  * @see llvm::Function::getIntrinsicID()  */
name|unsigned
name|LLVMGetIntrinsicID
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|)
function_decl|;
comment|/**  * Obtain the calling function of a function.  *  * The returned value corresponds to the LLVMCallConv enumeration.  *  * @see llvm::Function::getCallingConv()  */
name|unsigned
name|LLVMGetFunctionCallConv
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|)
function_decl|;
comment|/**  * Set the calling convention of a function.  *  * @see llvm::Function::setCallingConv()  *  * @param Fn Function to operate on  * @param CC LLVMCallConv to set calling convention to  */
name|void
name|LLVMSetFunctionCallConv
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|,
name|unsigned
name|CC
parameter_list|)
function_decl|;
comment|/**  * Obtain the name of the garbage collector to use during code  * generation.  *  * @see llvm::Function::getGC()  */
specifier|const
name|char
modifier|*
name|LLVMGetGC
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|)
function_decl|;
comment|/**  * Define the garbage collector to use during code generation.  *  * @see llvm::Function::setGC()  */
name|void
name|LLVMSetGC
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
comment|/**  * Add an attribute to a function.  *  * @see llvm::Function::addAttribute()  */
name|void
name|LLVMAddFunctionAttr
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|,
name|LLVMAttribute
name|PA
parameter_list|)
function_decl|;
comment|/**  * Add a target-dependent attribute to a function  * @see llvm::AttrBuilder::addAttribute()  */
name|void
name|LLVMAddTargetDependentFunctionAttr
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|,
specifier|const
name|char
modifier|*
name|A
parameter_list|,
specifier|const
name|char
modifier|*
name|V
parameter_list|)
function_decl|;
comment|/**  * Obtain an attribute from a function.  *  * @see llvm::Function::getAttributes()  */
name|LLVMAttribute
name|LLVMGetFunctionAttr
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|)
function_decl|;
comment|/**  * Remove an attribute from a function.  */
name|void
name|LLVMRemoveFunctionAttr
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|,
name|LLVMAttribute
name|PA
parameter_list|)
function_decl|;
comment|/**  * @defgroup LLVMCCoreValueFunctionParameters Function Parameters  *  * Functions in this group relate to arguments/parameters on functions.  *  * Functions in this group expect LLVMValueRef instances that correspond  * to llvm::Function instances.  *  * @{  */
comment|/**  * Obtain the number of parameters in a function.  *  * @see llvm::Function::arg_size()  */
name|unsigned
name|LLVMCountParams
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|)
function_decl|;
comment|/**  * Obtain the parameters in a function.  *  * The takes a pointer to a pre-allocated array of LLVMValueRef that is  * at least LLVMCountParams() long. This array will be filled with  * LLVMValueRef instances which correspond to the parameters the  * function receives. Each LLVMValueRef corresponds to a llvm::Argument  * instance.  *  * @see llvm::Function::arg_begin()  */
name|void
name|LLVMGetParams
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|,
name|LLVMValueRef
modifier|*
name|Params
parameter_list|)
function_decl|;
comment|/**  * Obtain the parameter at the specified index.  *  * Parameters are indexed from 0.  *  * @see llvm::Function::arg_begin()  */
name|LLVMValueRef
name|LLVMGetParam
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|,
name|unsigned
name|Index
parameter_list|)
function_decl|;
comment|/**  * Obtain the function to which this argument belongs.  *  * Unlike other functions in this group, this one takes an LLVMValueRef  * that corresponds to a llvm::Attribute.  *  * The returned LLVMValueRef is the llvm::Function to which this  * argument belongs.  */
name|LLVMValueRef
name|LLVMGetParamParent
parameter_list|(
name|LLVMValueRef
name|Inst
parameter_list|)
function_decl|;
comment|/**  * Obtain the first parameter to a function.  *  * @see llvm::Function::arg_begin()  */
name|LLVMValueRef
name|LLVMGetFirstParam
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|)
function_decl|;
comment|/**  * Obtain the last parameter to a function.  *  * @see llvm::Function::arg_end()  */
name|LLVMValueRef
name|LLVMGetLastParam
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|)
function_decl|;
comment|/**  * Obtain the next parameter to a function.  *  * This takes an LLVMValueRef obtained from LLVMGetFirstParam() (which is  * actually a wrapped iterator) and obtains the next parameter from the  * underlying iterator.  */
name|LLVMValueRef
name|LLVMGetNextParam
parameter_list|(
name|LLVMValueRef
name|Arg
parameter_list|)
function_decl|;
comment|/**  * Obtain the previous parameter to a function.  *  * This is the opposite of LLVMGetNextParam().  */
name|LLVMValueRef
name|LLVMGetPreviousParam
parameter_list|(
name|LLVMValueRef
name|Arg
parameter_list|)
function_decl|;
comment|/**  * Add an attribute to a function argument.  *  * @see llvm::Argument::addAttr()  */
name|void
name|LLVMAddAttribute
parameter_list|(
name|LLVMValueRef
name|Arg
parameter_list|,
name|LLVMAttribute
name|PA
parameter_list|)
function_decl|;
comment|/**  * Remove an attribute from a function argument.  *  * @see llvm::Argument::removeAttr()  */
name|void
name|LLVMRemoveAttribute
parameter_list|(
name|LLVMValueRef
name|Arg
parameter_list|,
name|LLVMAttribute
name|PA
parameter_list|)
function_decl|;
comment|/**  * Get an attribute from a function argument.  */
name|LLVMAttribute
name|LLVMGetAttribute
parameter_list|(
name|LLVMValueRef
name|Arg
parameter_list|)
function_decl|;
comment|/**  * Set the alignment for a function parameter.  *  * @see llvm::Argument::addAttr()  * @see llvm::AttrBuilder::addAlignmentAttr()  */
name|void
name|LLVMSetParamAlignment
parameter_list|(
name|LLVMValueRef
name|Arg
parameter_list|,
name|unsigned
name|align
parameter_list|)
function_decl|;
comment|/**  * @}  */
comment|/**  * @}  */
comment|/**  * @}  */
comment|/**  * @}  */
comment|/**  * @defgroup LLVMCCoreValueMetadata Metadata  *  * @{  */
comment|/**  * Obtain a MDString value from a context.  *  * The returned instance corresponds to the llvm::MDString class.  *  * The instance is specified by string data of a specified length. The  * string content is copied, so the backing memory can be freed after  * this function returns.  */
name|LLVMValueRef
name|LLVMMDStringInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|,
specifier|const
name|char
modifier|*
name|Str
parameter_list|,
name|unsigned
name|SLen
parameter_list|)
function_decl|;
comment|/**  * Obtain a MDString value from the global context.  */
name|LLVMValueRef
name|LLVMMDString
parameter_list|(
specifier|const
name|char
modifier|*
name|Str
parameter_list|,
name|unsigned
name|SLen
parameter_list|)
function_decl|;
comment|/**  * Obtain a MDNode value from a context.  *  * The returned value corresponds to the llvm::MDNode class.  */
name|LLVMValueRef
name|LLVMMDNodeInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|,
name|LLVMValueRef
modifier|*
name|Vals
parameter_list|,
name|unsigned
name|Count
parameter_list|)
function_decl|;
comment|/**  * Obtain a MDNode value from the global context.  */
name|LLVMValueRef
name|LLVMMDNode
parameter_list|(
name|LLVMValueRef
modifier|*
name|Vals
parameter_list|,
name|unsigned
name|Count
parameter_list|)
function_decl|;
comment|/**  * Obtain the underlying string from a MDString value.  *  * @param V Instance to obtain string from.  * @param Len Memory address which will hold length of returned string.  * @return String data in MDString.  */
specifier|const
name|char
modifier|*
name|LLVMGetMDString
parameter_list|(
name|LLVMValueRef
name|V
parameter_list|,
name|unsigned
modifier|*
name|Len
parameter_list|)
function_decl|;
comment|/**  * Obtain the number of operands from an MDNode value.  *  * @param V MDNode to get number of operands from.  * @return Number of operands of the MDNode.  */
name|unsigned
name|LLVMGetMDNodeNumOperands
parameter_list|(
name|LLVMValueRef
name|V
parameter_list|)
function_decl|;
comment|/**  * Obtain the given MDNode's operands.  *  * The passed LLVMValueRef pointer should point to enough memory to hold all of  * the operands of the given MDNode (see LLVMGetMDNodeNumOperands) as  * LLVMValueRefs. This memory will be populated with the LLVMValueRefs of the  * MDNode's operands.  *  * @param V MDNode to get the operands from.  * @param Dest Destination array for operands.  */
name|void
name|LLVMGetMDNodeOperands
parameter_list|(
name|LLVMValueRef
name|V
parameter_list|,
name|LLVMValueRef
modifier|*
name|Dest
parameter_list|)
function_decl|;
comment|/**  * @}  */
comment|/**  * @defgroup LLVMCCoreValueBasicBlock Basic Block  *  * A basic block represents a single entry single exit section of code.  * Basic blocks contain a list of instructions which form the body of  * the block.  *  * Basic blocks belong to functions. They have the type of label.  *  * Basic blocks are themselves values. However, the C API models them as  * LLVMBasicBlockRef.  *  * @see llvm::BasicBlock  *  * @{  */
comment|/**  * Convert a basic block instance to a value type.  */
name|LLVMValueRef
name|LLVMBasicBlockAsValue
parameter_list|(
name|LLVMBasicBlockRef
name|BB
parameter_list|)
function_decl|;
comment|/**  * Determine whether an LLVMValueRef is itself a basic block.  */
name|LLVMBool
name|LLVMValueIsBasicBlock
parameter_list|(
name|LLVMValueRef
name|Val
parameter_list|)
function_decl|;
comment|/**  * Convert an LLVMValueRef to an LLVMBasicBlockRef instance.  */
name|LLVMBasicBlockRef
name|LLVMValueAsBasicBlock
parameter_list|(
name|LLVMValueRef
name|Val
parameter_list|)
function_decl|;
comment|/**  * Obtain the function to which a basic block belongs.  *  * @see llvm::BasicBlock::getParent()  */
name|LLVMValueRef
name|LLVMGetBasicBlockParent
parameter_list|(
name|LLVMBasicBlockRef
name|BB
parameter_list|)
function_decl|;
comment|/**  * Obtain the terminator instruction for a basic block.  *  * If the basic block does not have a terminator (it is not well-formed  * if it doesn't), then NULL is returned.  *  * The returned LLVMValueRef corresponds to a llvm::TerminatorInst.  *  * @see llvm::BasicBlock::getTerminator()  */
name|LLVMValueRef
name|LLVMGetBasicBlockTerminator
parameter_list|(
name|LLVMBasicBlockRef
name|BB
parameter_list|)
function_decl|;
comment|/**  * Obtain the number of basic blocks in a function.  *  * @param Fn Function value to operate on.  */
name|unsigned
name|LLVMCountBasicBlocks
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|)
function_decl|;
comment|/**  * Obtain all of the basic blocks in a function.  *  * This operates on a function value. The BasicBlocks parameter is a  * pointer to a pre-allocated array of LLVMBasicBlockRef of at least  * LLVMCountBasicBlocks() in length. This array is populated with  * LLVMBasicBlockRef instances.  */
name|void
name|LLVMGetBasicBlocks
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|,
name|LLVMBasicBlockRef
modifier|*
name|BasicBlocks
parameter_list|)
function_decl|;
comment|/**  * Obtain the first basic block in a function.  *  * The returned basic block can be used as an iterator. You will likely  * eventually call into LLVMGetNextBasicBlock() with it.  *  * @see llvm::Function::begin()  */
name|LLVMBasicBlockRef
name|LLVMGetFirstBasicBlock
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|)
function_decl|;
comment|/**  * Obtain the last basic block in a function.  *  * @see llvm::Function::end()  */
name|LLVMBasicBlockRef
name|LLVMGetLastBasicBlock
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|)
function_decl|;
comment|/**  * Advance a basic block iterator.  */
name|LLVMBasicBlockRef
name|LLVMGetNextBasicBlock
parameter_list|(
name|LLVMBasicBlockRef
name|BB
parameter_list|)
function_decl|;
comment|/**  * Go backwards in a basic block iterator.  */
name|LLVMBasicBlockRef
name|LLVMGetPreviousBasicBlock
parameter_list|(
name|LLVMBasicBlockRef
name|BB
parameter_list|)
function_decl|;
comment|/**  * Obtain the basic block that corresponds to the entry point of a  * function.  *  * @see llvm::Function::getEntryBlock()  */
name|LLVMBasicBlockRef
name|LLVMGetEntryBasicBlock
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|)
function_decl|;
comment|/**  * Append a basic block to the end of a function.  *  * @see llvm::BasicBlock::Create()  */
name|LLVMBasicBlockRef
name|LLVMAppendBasicBlockInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|,
name|LLVMValueRef
name|Fn
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
comment|/**  * Append a basic block to the end of a function using the global  * context.  *  * @see llvm::BasicBlock::Create()  */
name|LLVMBasicBlockRef
name|LLVMAppendBasicBlock
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
comment|/**  * Insert a basic block in a function before another basic block.  *  * The function to add to is determined by the function of the  * passed basic block.  *  * @see llvm::BasicBlock::Create()  */
name|LLVMBasicBlockRef
name|LLVMInsertBasicBlockInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|,
name|LLVMBasicBlockRef
name|BB
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
comment|/**  * Insert a basic block in a function using the global context.  *  * @see llvm::BasicBlock::Create()  */
name|LLVMBasicBlockRef
name|LLVMInsertBasicBlock
parameter_list|(
name|LLVMBasicBlockRef
name|InsertBeforeBB
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
comment|/**  * Remove a basic block from a function and delete it.  *  * This deletes the basic block from its containing function and deletes  * the basic block itself.  *  * @see llvm::BasicBlock::eraseFromParent()  */
name|void
name|LLVMDeleteBasicBlock
parameter_list|(
name|LLVMBasicBlockRef
name|BB
parameter_list|)
function_decl|;
comment|/**  * Remove a basic block from a function.  *  * This deletes the basic block from its containing function but keep  * the basic block alive.  *  * @see llvm::BasicBlock::removeFromParent()  */
name|void
name|LLVMRemoveBasicBlockFromParent
parameter_list|(
name|LLVMBasicBlockRef
name|BB
parameter_list|)
function_decl|;
comment|/**  * Move a basic block to before another one.  *  * @see llvm::BasicBlock::moveBefore()  */
name|void
name|LLVMMoveBasicBlockBefore
parameter_list|(
name|LLVMBasicBlockRef
name|BB
parameter_list|,
name|LLVMBasicBlockRef
name|MovePos
parameter_list|)
function_decl|;
comment|/**  * Move a basic block to after another one.  *  * @see llvm::BasicBlock::moveAfter()  */
name|void
name|LLVMMoveBasicBlockAfter
parameter_list|(
name|LLVMBasicBlockRef
name|BB
parameter_list|,
name|LLVMBasicBlockRef
name|MovePos
parameter_list|)
function_decl|;
comment|/**  * Obtain the first instruction in a basic block.  *  * The returned LLVMValueRef corresponds to a llvm::Instruction  * instance.  */
name|LLVMValueRef
name|LLVMGetFirstInstruction
parameter_list|(
name|LLVMBasicBlockRef
name|BB
parameter_list|)
function_decl|;
comment|/**  * Obtain the last instruction in a basic block.  *  * The returned LLVMValueRef corresponds to an LLVM:Instruction.  */
name|LLVMValueRef
name|LLVMGetLastInstruction
parameter_list|(
name|LLVMBasicBlockRef
name|BB
parameter_list|)
function_decl|;
comment|/**  * @}  */
comment|/**  * @defgroup LLVMCCoreValueInstruction Instructions  *  * Functions in this group relate to the inspection and manipulation of  * individual instructions.  *  * In the C++ API, an instruction is modeled by llvm::Instruction. This  * class has a large number of descendents. llvm::Instruction is a  * llvm::Value and in the C API, instructions are modeled by  * LLVMValueRef.  *  * This group also contains sub-groups which operate on specific  * llvm::Instruction types, e.g. llvm::CallInst.  *  * @{  */
comment|/**  * Determine whether an instruction has any metadata attached.  */
name|int
name|LLVMHasMetadata
parameter_list|(
name|LLVMValueRef
name|Val
parameter_list|)
function_decl|;
comment|/**  * Return metadata associated with an instruction value.  */
name|LLVMValueRef
name|LLVMGetMetadata
parameter_list|(
name|LLVMValueRef
name|Val
parameter_list|,
name|unsigned
name|KindID
parameter_list|)
function_decl|;
comment|/**  * Set metadata associated with an instruction value.  */
name|void
name|LLVMSetMetadata
parameter_list|(
name|LLVMValueRef
name|Val
parameter_list|,
name|unsigned
name|KindID
parameter_list|,
name|LLVMValueRef
name|Node
parameter_list|)
function_decl|;
comment|/**  * Obtain the basic block to which an instruction belongs.  *  * @see llvm::Instruction::getParent()  */
name|LLVMBasicBlockRef
name|LLVMGetInstructionParent
parameter_list|(
name|LLVMValueRef
name|Inst
parameter_list|)
function_decl|;
comment|/**  * Obtain the instruction that occurs after the one specified.  *  * The next instruction will be from the same basic block.  *  * If this is the last instruction in a basic block, NULL will be  * returned.  */
name|LLVMValueRef
name|LLVMGetNextInstruction
parameter_list|(
name|LLVMValueRef
name|Inst
parameter_list|)
function_decl|;
comment|/**  * Obtain the instruction that occurred before this one.  *  * If the instruction is the first instruction in a basic block, NULL  * will be returned.  */
name|LLVMValueRef
name|LLVMGetPreviousInstruction
parameter_list|(
name|LLVMValueRef
name|Inst
parameter_list|)
function_decl|;
comment|/**  * Remove and delete an instruction.  *  * The instruction specified is removed from its containing building  * block and then deleted.  *  * @see llvm::Instruction::eraseFromParent()  */
name|void
name|LLVMInstructionEraseFromParent
parameter_list|(
name|LLVMValueRef
name|Inst
parameter_list|)
function_decl|;
comment|/**  * Obtain the code opcode for an individual instruction.  *  * @see llvm::Instruction::getOpCode()  */
name|LLVMOpcode
name|LLVMGetInstructionOpcode
parameter_list|(
name|LLVMValueRef
name|Inst
parameter_list|)
function_decl|;
comment|/**  * Obtain the predicate of an instruction.  *  * This is only valid for instructions that correspond to llvm::ICmpInst  * or llvm::ConstantExpr whose opcode is llvm::Instruction::ICmp.  *  * @see llvm::ICmpInst::getPredicate()  */
name|LLVMIntPredicate
name|LLVMGetICmpPredicate
parameter_list|(
name|LLVMValueRef
name|Inst
parameter_list|)
function_decl|;
comment|/**  * Obtain the float predicate of an instruction.  *  * This is only valid for instructions that correspond to llvm::FCmpInst  * or llvm::ConstantExpr whose opcode is llvm::Instruction::FCmp.  *  * @see llvm::FCmpInst::getPredicate()  */
name|LLVMRealPredicate
name|LLVMGetFCmpPredicate
parameter_list|(
name|LLVMValueRef
name|Inst
parameter_list|)
function_decl|;
comment|/**  * Create a copy of 'this' instruction that is identical in all ways  * except the following:  *   * The instruction has no parent  *   * The instruction has no name  *  * @see llvm::Instruction::clone()  */
name|LLVMValueRef
name|LLVMInstructionClone
parameter_list|(
name|LLVMValueRef
name|Inst
parameter_list|)
function_decl|;
comment|/**  * @defgroup LLVMCCoreValueInstructionCall Call Sites and Invocations  *  * Functions in this group apply to instructions that refer to call  * sites and invocations. These correspond to C++ types in the  * llvm::CallInst class tree.  *  * @{  */
comment|/**  * Set the calling convention for a call instruction.  *  * This expects an LLVMValueRef that corresponds to a llvm::CallInst or  * llvm::InvokeInst.  *  * @see llvm::CallInst::setCallingConv()  * @see llvm::InvokeInst::setCallingConv()  */
name|void
name|LLVMSetInstructionCallConv
parameter_list|(
name|LLVMValueRef
name|Instr
parameter_list|,
name|unsigned
name|CC
parameter_list|)
function_decl|;
comment|/**  * Obtain the calling convention for a call instruction.  *  * This is the opposite of LLVMSetInstructionCallConv(). Reads its  * usage.  *  * @see LLVMSetInstructionCallConv()  */
name|unsigned
name|LLVMGetInstructionCallConv
parameter_list|(
name|LLVMValueRef
name|Instr
parameter_list|)
function_decl|;
name|void
name|LLVMAddInstrAttribute
parameter_list|(
name|LLVMValueRef
name|Instr
parameter_list|,
name|unsigned
name|index
parameter_list|,
name|LLVMAttribute
parameter_list|)
function_decl|;
name|void
name|LLVMRemoveInstrAttribute
parameter_list|(
name|LLVMValueRef
name|Instr
parameter_list|,
name|unsigned
name|index
parameter_list|,
name|LLVMAttribute
parameter_list|)
function_decl|;
name|void
name|LLVMSetInstrParamAlignment
parameter_list|(
name|LLVMValueRef
name|Instr
parameter_list|,
name|unsigned
name|index
parameter_list|,
name|unsigned
name|align
parameter_list|)
function_decl|;
comment|/**  * Obtain whether a call instruction is a tail call.  *  * This only works on llvm::CallInst instructions.  *  * @see llvm::CallInst::isTailCall()  */
name|LLVMBool
name|LLVMIsTailCall
parameter_list|(
name|LLVMValueRef
name|CallInst
parameter_list|)
function_decl|;
comment|/**  * Set whether a call instruction is a tail call.  *  * This only works on llvm::CallInst instructions.  *  * @see llvm::CallInst::setTailCall()  */
name|void
name|LLVMSetTailCall
parameter_list|(
name|LLVMValueRef
name|CallInst
parameter_list|,
name|LLVMBool
name|IsTailCall
parameter_list|)
function_decl|;
comment|/**  * @}  */
comment|/**  * @defgroup LLVMCCoreValueInstructionTerminator Terminators  *  * Functions in this group only apply to instructions that map to  * llvm::TerminatorInst instances.  *  * @{  */
comment|/**  * Return the number of successors that this terminator has.  *  * @see llvm::TerminatorInst::getNumSuccessors  */
name|unsigned
name|LLVMGetNumSuccessors
parameter_list|(
name|LLVMValueRef
name|Term
parameter_list|)
function_decl|;
comment|/**  * Return the specified successor.  *  * @see llvm::TerminatorInst::getSuccessor  */
name|LLVMBasicBlockRef
name|LLVMGetSuccessor
parameter_list|(
name|LLVMValueRef
name|Term
parameter_list|,
name|unsigned
name|i
parameter_list|)
function_decl|;
comment|/**  * Update the specified successor to point at the provided block.  *  * @see llvm::TerminatorInst::setSuccessor  */
name|void
name|LLVMSetSuccessor
parameter_list|(
name|LLVMValueRef
name|Term
parameter_list|,
name|unsigned
name|i
parameter_list|,
name|LLVMBasicBlockRef
name|block
parameter_list|)
function_decl|;
comment|/**  * Return if a branch is conditional.  *  * This only works on llvm::BranchInst instructions.  *  * @see llvm::BranchInst::isConditional  */
name|LLVMBool
name|LLVMIsConditional
parameter_list|(
name|LLVMValueRef
name|Branch
parameter_list|)
function_decl|;
comment|/**  * Return the condition of a branch instruction.  *  * This only works on llvm::BranchInst instructions.  *  * @see llvm::BranchInst::getCondition  */
name|LLVMValueRef
name|LLVMGetCondition
parameter_list|(
name|LLVMValueRef
name|Branch
parameter_list|)
function_decl|;
comment|/**  * Set the condition of a branch instruction.  *  * This only works on llvm::BranchInst instructions.  *  * @see llvm::BranchInst::setCondition  */
name|void
name|LLVMSetCondition
parameter_list|(
name|LLVMValueRef
name|Branch
parameter_list|,
name|LLVMValueRef
name|Cond
parameter_list|)
function_decl|;
comment|/**  * Obtain the default destination basic block of a switch instruction.  *  * This only works on llvm::SwitchInst instructions.  *  * @see llvm::SwitchInst::getDefaultDest()  */
name|LLVMBasicBlockRef
name|LLVMGetSwitchDefaultDest
parameter_list|(
name|LLVMValueRef
name|SwitchInstr
parameter_list|)
function_decl|;
comment|/**  * @}  */
comment|/**  * @defgroup LLVMCCoreValueInstructionPHINode PHI Nodes  *  * Functions in this group only apply to instructions that map to  * llvm::PHINode instances.  *  * @{  */
comment|/**  * Add an incoming value to the end of a PHI list.  */
name|void
name|LLVMAddIncoming
parameter_list|(
name|LLVMValueRef
name|PhiNode
parameter_list|,
name|LLVMValueRef
modifier|*
name|IncomingValues
parameter_list|,
name|LLVMBasicBlockRef
modifier|*
name|IncomingBlocks
parameter_list|,
name|unsigned
name|Count
parameter_list|)
function_decl|;
comment|/**  * Obtain the number of incoming basic blocks to a PHI node.  */
name|unsigned
name|LLVMCountIncoming
parameter_list|(
name|LLVMValueRef
name|PhiNode
parameter_list|)
function_decl|;
comment|/**  * Obtain an incoming value to a PHI node as an LLVMValueRef.  */
name|LLVMValueRef
name|LLVMGetIncomingValue
parameter_list|(
name|LLVMValueRef
name|PhiNode
parameter_list|,
name|unsigned
name|Index
parameter_list|)
function_decl|;
comment|/**  * Obtain an incoming value to a PHI node as an LLVMBasicBlockRef.  */
name|LLVMBasicBlockRef
name|LLVMGetIncomingBlock
parameter_list|(
name|LLVMValueRef
name|PhiNode
parameter_list|,
name|unsigned
name|Index
parameter_list|)
function_decl|;
comment|/**  * @}  */
comment|/**  * @}  */
comment|/**  * @}  */
comment|/**  * @defgroup LLVMCCoreInstructionBuilder Instruction Builders  *  * An instruction builder represents a point within a basic block and is  * the exclusive means of building instructions using the C interface.  *  * @{  */
name|LLVMBuilderRef
name|LLVMCreateBuilderInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|)
function_decl|;
name|LLVMBuilderRef
name|LLVMCreateBuilder
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|LLVMPositionBuilder
parameter_list|(
name|LLVMBuilderRef
name|Builder
parameter_list|,
name|LLVMBasicBlockRef
name|Block
parameter_list|,
name|LLVMValueRef
name|Instr
parameter_list|)
function_decl|;
name|void
name|LLVMPositionBuilderBefore
parameter_list|(
name|LLVMBuilderRef
name|Builder
parameter_list|,
name|LLVMValueRef
name|Instr
parameter_list|)
function_decl|;
name|void
name|LLVMPositionBuilderAtEnd
parameter_list|(
name|LLVMBuilderRef
name|Builder
parameter_list|,
name|LLVMBasicBlockRef
name|Block
parameter_list|)
function_decl|;
name|LLVMBasicBlockRef
name|LLVMGetInsertBlock
parameter_list|(
name|LLVMBuilderRef
name|Builder
parameter_list|)
function_decl|;
name|void
name|LLVMClearInsertionPosition
parameter_list|(
name|LLVMBuilderRef
name|Builder
parameter_list|)
function_decl|;
name|void
name|LLVMInsertIntoBuilder
parameter_list|(
name|LLVMBuilderRef
name|Builder
parameter_list|,
name|LLVMValueRef
name|Instr
parameter_list|)
function_decl|;
name|void
name|LLVMInsertIntoBuilderWithName
parameter_list|(
name|LLVMBuilderRef
name|Builder
parameter_list|,
name|LLVMValueRef
name|Instr
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|void
name|LLVMDisposeBuilder
parameter_list|(
name|LLVMBuilderRef
name|Builder
parameter_list|)
function_decl|;
comment|/* Metadata */
name|void
name|LLVMSetCurrentDebugLocation
parameter_list|(
name|LLVMBuilderRef
name|Builder
parameter_list|,
name|LLVMValueRef
name|L
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMGetCurrentDebugLocation
parameter_list|(
name|LLVMBuilderRef
name|Builder
parameter_list|)
function_decl|;
name|void
name|LLVMSetInstDebugLocation
parameter_list|(
name|LLVMBuilderRef
name|Builder
parameter_list|,
name|LLVMValueRef
name|Inst
parameter_list|)
function_decl|;
comment|/* Terminators */
name|LLVMValueRef
name|LLVMBuildRetVoid
parameter_list|(
name|LLVMBuilderRef
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildRet
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|V
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildAggregateRet
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
modifier|*
name|RetVals
parameter_list|,
name|unsigned
name|N
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildBr
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMBasicBlockRef
name|Dest
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildCondBr
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|If
parameter_list|,
name|LLVMBasicBlockRef
name|Then
parameter_list|,
name|LLVMBasicBlockRef
name|Else
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildSwitch
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|V
parameter_list|,
name|LLVMBasicBlockRef
name|Else
parameter_list|,
name|unsigned
name|NumCases
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildIndirectBr
parameter_list|(
name|LLVMBuilderRef
name|B
parameter_list|,
name|LLVMValueRef
name|Addr
parameter_list|,
name|unsigned
name|NumDests
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildInvoke
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Fn
parameter_list|,
name|LLVMValueRef
modifier|*
name|Args
parameter_list|,
name|unsigned
name|NumArgs
parameter_list|,
name|LLVMBasicBlockRef
name|Then
parameter_list|,
name|LLVMBasicBlockRef
name|Catch
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildLandingPad
parameter_list|(
name|LLVMBuilderRef
name|B
parameter_list|,
name|LLVMTypeRef
name|Ty
parameter_list|,
name|LLVMValueRef
name|PersFn
parameter_list|,
name|unsigned
name|NumClauses
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildResume
parameter_list|(
name|LLVMBuilderRef
name|B
parameter_list|,
name|LLVMValueRef
name|Exn
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildUnreachable
parameter_list|(
name|LLVMBuilderRef
parameter_list|)
function_decl|;
comment|/* Add a case to the switch instruction */
name|void
name|LLVMAddCase
parameter_list|(
name|LLVMValueRef
name|Switch
parameter_list|,
name|LLVMValueRef
name|OnVal
parameter_list|,
name|LLVMBasicBlockRef
name|Dest
parameter_list|)
function_decl|;
comment|/* Add a destination to the indirectbr instruction */
name|void
name|LLVMAddDestination
parameter_list|(
name|LLVMValueRef
name|IndirectBr
parameter_list|,
name|LLVMBasicBlockRef
name|Dest
parameter_list|)
function_decl|;
comment|/* Add a catch or filter clause to the landingpad instruction */
name|void
name|LLVMAddClause
parameter_list|(
name|LLVMValueRef
name|LandingPad
parameter_list|,
name|LLVMValueRef
name|ClauseVal
parameter_list|)
function_decl|;
comment|/* Set the 'cleanup' flag in the landingpad instruction */
name|void
name|LLVMSetCleanup
parameter_list|(
name|LLVMValueRef
name|LandingPad
parameter_list|,
name|LLVMBool
name|Val
parameter_list|)
function_decl|;
comment|/* Arithmetic */
name|LLVMValueRef
name|LLVMBuildAdd
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildNSWAdd
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildNUWAdd
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildFAdd
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildSub
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildNSWSub
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildNUWSub
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildFSub
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildMul
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildNSWMul
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildNUWMul
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildFMul
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildUDiv
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildSDiv
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildExactSDiv
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildFDiv
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildURem
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildSRem
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildFRem
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildShl
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildLShr
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildAShr
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildAnd
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildOr
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildXor
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildBinOp
parameter_list|(
name|LLVMBuilderRef
name|B
parameter_list|,
name|LLVMOpcode
name|Op
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildNeg
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|V
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildNSWNeg
parameter_list|(
name|LLVMBuilderRef
name|B
parameter_list|,
name|LLVMValueRef
name|V
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildNUWNeg
parameter_list|(
name|LLVMBuilderRef
name|B
parameter_list|,
name|LLVMValueRef
name|V
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildFNeg
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|V
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildNot
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|V
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
comment|/* Memory */
name|LLVMValueRef
name|LLVMBuildMalloc
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMTypeRef
name|Ty
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildArrayMalloc
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMTypeRef
name|Ty
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildAlloca
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMTypeRef
name|Ty
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildArrayAlloca
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMTypeRef
name|Ty
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildFree
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|PointerVal
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildLoad
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|PointerVal
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildStore
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMValueRef
name|Ptr
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildGEP
parameter_list|(
name|LLVMBuilderRef
name|B
parameter_list|,
name|LLVMValueRef
name|Pointer
parameter_list|,
name|LLVMValueRef
modifier|*
name|Indices
parameter_list|,
name|unsigned
name|NumIndices
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildInBoundsGEP
parameter_list|(
name|LLVMBuilderRef
name|B
parameter_list|,
name|LLVMValueRef
name|Pointer
parameter_list|,
name|LLVMValueRef
modifier|*
name|Indices
parameter_list|,
name|unsigned
name|NumIndices
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildStructGEP
parameter_list|(
name|LLVMBuilderRef
name|B
parameter_list|,
name|LLVMValueRef
name|Pointer
parameter_list|,
name|unsigned
name|Idx
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildGlobalString
parameter_list|(
name|LLVMBuilderRef
name|B
parameter_list|,
specifier|const
name|char
modifier|*
name|Str
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildGlobalStringPtr
parameter_list|(
name|LLVMBuilderRef
name|B
parameter_list|,
specifier|const
name|char
modifier|*
name|Str
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMBool
name|LLVMGetVolatile
parameter_list|(
name|LLVMValueRef
name|MemoryAccessInst
parameter_list|)
function_decl|;
name|void
name|LLVMSetVolatile
parameter_list|(
name|LLVMValueRef
name|MemoryAccessInst
parameter_list|,
name|LLVMBool
name|IsVolatile
parameter_list|)
function_decl|;
name|LLVMAtomicOrdering
name|LLVMGetOrdering
parameter_list|(
name|LLVMValueRef
name|MemoryAccessInst
parameter_list|)
function_decl|;
name|void
name|LLVMSetOrdering
parameter_list|(
name|LLVMValueRef
name|MemoryAccessInst
parameter_list|,
name|LLVMAtomicOrdering
name|Ordering
parameter_list|)
function_decl|;
comment|/* Casts */
name|LLVMValueRef
name|LLVMBuildTrunc
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildZExt
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildSExt
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildFPToUI
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildFPToSI
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildUIToFP
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildSIToFP
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildFPTrunc
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildFPExt
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildPtrToInt
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildIntToPtr
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildBitCast
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildAddrSpaceCast
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildZExtOrBitCast
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildSExtOrBitCast
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildTruncOrBitCast
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildCast
parameter_list|(
name|LLVMBuilderRef
name|B
parameter_list|,
name|LLVMOpcode
name|Op
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildPointerCast
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildIntCast
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
comment|/*Signed cast!*/
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildFPCast
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
comment|/* Comparisons */
name|LLVMValueRef
name|LLVMBuildICmp
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMIntPredicate
name|Op
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildFCmp
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMRealPredicate
name|Op
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
comment|/* Miscellaneous instructions */
name|LLVMValueRef
name|LLVMBuildPhi
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMTypeRef
name|Ty
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildCall
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Fn
parameter_list|,
name|LLVMValueRef
modifier|*
name|Args
parameter_list|,
name|unsigned
name|NumArgs
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildSelect
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|If
parameter_list|,
name|LLVMValueRef
name|Then
parameter_list|,
name|LLVMValueRef
name|Else
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildVAArg
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|List
parameter_list|,
name|LLVMTypeRef
name|Ty
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildExtractElement
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|VecVal
parameter_list|,
name|LLVMValueRef
name|Index
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildInsertElement
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|VecVal
parameter_list|,
name|LLVMValueRef
name|EltVal
parameter_list|,
name|LLVMValueRef
name|Index
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildShuffleVector
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|V1
parameter_list|,
name|LLVMValueRef
name|V2
parameter_list|,
name|LLVMValueRef
name|Mask
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildExtractValue
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|AggVal
parameter_list|,
name|unsigned
name|Index
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildInsertValue
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|AggVal
parameter_list|,
name|LLVMValueRef
name|EltVal
parameter_list|,
name|unsigned
name|Index
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildIsNull
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildIsNotNull
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildPtrDiff
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildFence
parameter_list|(
name|LLVMBuilderRef
name|B
parameter_list|,
name|LLVMAtomicOrdering
name|ordering
parameter_list|,
name|LLVMBool
name|singleThread
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildAtomicRMW
parameter_list|(
name|LLVMBuilderRef
name|B
parameter_list|,
name|LLVMAtomicRMWBinOp
name|op
parameter_list|,
name|LLVMValueRef
name|PTR
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMAtomicOrdering
name|ordering
parameter_list|,
name|LLVMBool
name|singleThread
parameter_list|)
function_decl|;
comment|/**  * @}  */
comment|/**  * @defgroup LLVMCCoreModuleProvider Module Providers  *  * @{  */
comment|/**  * Changes the type of M so it can be passed to FunctionPassManagers and the  * JIT.  They take ModuleProviders for historical reasons.  */
name|LLVMModuleProviderRef
name|LLVMCreateModuleProviderForExistingModule
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|)
function_decl|;
comment|/**  * Destroys the module M.  */
name|void
name|LLVMDisposeModuleProvider
parameter_list|(
name|LLVMModuleProviderRef
name|M
parameter_list|)
function_decl|;
comment|/**  * @}  */
comment|/**  * @defgroup LLVMCCoreMemoryBuffers Memory Buffers  *  * @{  */
name|LLVMBool
name|LLVMCreateMemoryBufferWithContentsOfFile
parameter_list|(
specifier|const
name|char
modifier|*
name|Path
parameter_list|,
name|LLVMMemoryBufferRef
modifier|*
name|OutMemBuf
parameter_list|,
name|char
modifier|*
modifier|*
name|OutMessage
parameter_list|)
function_decl|;
name|LLVMBool
name|LLVMCreateMemoryBufferWithSTDIN
parameter_list|(
name|LLVMMemoryBufferRef
modifier|*
name|OutMemBuf
parameter_list|,
name|char
modifier|*
modifier|*
name|OutMessage
parameter_list|)
function_decl|;
name|LLVMMemoryBufferRef
name|LLVMCreateMemoryBufferWithMemoryRange
parameter_list|(
specifier|const
name|char
modifier|*
name|InputData
parameter_list|,
name|size_t
name|InputDataLength
parameter_list|,
specifier|const
name|char
modifier|*
name|BufferName
parameter_list|,
name|LLVMBool
name|RequiresNullTerminator
parameter_list|)
function_decl|;
name|LLVMMemoryBufferRef
name|LLVMCreateMemoryBufferWithMemoryRangeCopy
parameter_list|(
specifier|const
name|char
modifier|*
name|InputData
parameter_list|,
name|size_t
name|InputDataLength
parameter_list|,
specifier|const
name|char
modifier|*
name|BufferName
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|LLVMGetBufferStart
parameter_list|(
name|LLVMMemoryBufferRef
name|MemBuf
parameter_list|)
function_decl|;
name|size_t
name|LLVMGetBufferSize
parameter_list|(
name|LLVMMemoryBufferRef
name|MemBuf
parameter_list|)
function_decl|;
name|void
name|LLVMDisposeMemoryBuffer
parameter_list|(
name|LLVMMemoryBufferRef
name|MemBuf
parameter_list|)
function_decl|;
comment|/**  * @}  */
comment|/**  * @defgroup LLVMCCorePassRegistry Pass Registry  *  * @{  */
comment|/** Return the global pass registry, for use with initialization functions.     @see llvm::PassRegistry::getPassRegistry */
name|LLVMPassRegistryRef
name|LLVMGetGlobalPassRegistry
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/**  * @}  */
comment|/**  * @defgroup LLVMCCorePassManagers Pass Managers  *  * @{  */
comment|/** Constructs a new whole-module pass pipeline. This type of pipeline is     suitable for link-time optimization and whole-module transformations.     @see llvm::PassManager::PassManager */
name|LLVMPassManagerRef
name|LLVMCreatePassManager
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/** Constructs a new function-by-function pass pipeline over the module     provider. It does not take ownership of the module provider. This type of     pipeline is suitable for code generation and JIT compilation tasks.     @see llvm::FunctionPassManager::FunctionPassManager */
name|LLVMPassManagerRef
name|LLVMCreateFunctionPassManagerForModule
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|)
function_decl|;
comment|/** Deprecated: Use LLVMCreateFunctionPassManagerForModule instead. */
name|LLVMPassManagerRef
name|LLVMCreateFunctionPassManager
parameter_list|(
name|LLVMModuleProviderRef
name|MP
parameter_list|)
function_decl|;
comment|/** Initializes, executes on the provided module, and finalizes all of the     passes scheduled in the pass manager. Returns 1 if any of the passes     modified the module, 0 otherwise.     @see llvm::PassManager::run(Module&) */
name|LLVMBool
name|LLVMRunPassManager
parameter_list|(
name|LLVMPassManagerRef
name|PM
parameter_list|,
name|LLVMModuleRef
name|M
parameter_list|)
function_decl|;
comment|/** Initializes all of the function passes scheduled in the function pass     manager. Returns 1 if any of the passes modified the module, 0 otherwise.     @see llvm::FunctionPassManager::doInitialization */
name|LLVMBool
name|LLVMInitializeFunctionPassManager
parameter_list|(
name|LLVMPassManagerRef
name|FPM
parameter_list|)
function_decl|;
comment|/** Executes all of the function passes scheduled in the function pass manager     on the provided function. Returns 1 if any of the passes modified the     function, false otherwise.     @see llvm::FunctionPassManager::run(Function&) */
name|LLVMBool
name|LLVMRunFunctionPassManager
parameter_list|(
name|LLVMPassManagerRef
name|FPM
parameter_list|,
name|LLVMValueRef
name|F
parameter_list|)
function_decl|;
comment|/** Finalizes all of the function passes scheduled in in the function pass     manager. Returns 1 if any of the passes modified the module, 0 otherwise.     @see llvm::FunctionPassManager::doFinalization */
name|LLVMBool
name|LLVMFinalizeFunctionPassManager
parameter_list|(
name|LLVMPassManagerRef
name|FPM
parameter_list|)
function_decl|;
comment|/** Frees the memory of a pass pipeline. For function pipelines, does not free     the module provider.     @see llvm::PassManagerBase::~PassManagerBase. */
name|void
name|LLVMDisposePassManager
parameter_list|(
name|LLVMPassManagerRef
name|PM
parameter_list|)
function_decl|;
comment|/**  * @}  */
comment|/**  * @defgroup LLVMCCoreThreading Threading  *  * Handle the structures needed to make LLVM safe for multithreading.  *  * @{  */
comment|/** Deprecated: Multi-threading can only be enabled/disabled with the compile     time define LLVM_ENABLE_THREADS.  This function always returns     LLVMIsMultithreaded(). */
name|LLVMBool
name|LLVMStartMultithreaded
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/** Deprecated: Multi-threading can only be enabled/disabled with the compile     time define LLVM_ENABLE_THREADS. */
name|void
name|LLVMStopMultithreaded
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/** Check whether LLVM is executing in thread-safe mode or not.     @see llvm::llvm_is_multithreaded */
name|LLVMBool
name|LLVMIsMultithreaded
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/**  * @}  */
comment|/**  * @}  */
comment|/**  * @}  */
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* LLVM_C_CORE_H */
end_comment

end_unit

