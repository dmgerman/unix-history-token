begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*===-- llvm-c/Core.h - Core Library C Interface ------------------*- C -*-===*\ |*                                                                            *| |*                     The LLVM Compiler Infrastructure                       *| |*                                                                            *| |* This file is distributed under the University of Illinois Open Source      *| |* License. See LICENSE.TXT for details.                                      *| |*                                                                            *| |*===----------------------------------------------------------------------===*| |*                                                                            *| |* This header declares the C interface to libLLVMCore.a, which implements    *| |* the LLVM intermediate representation.                                      *| |*                                                                            *| |* LLVM uses a polymorphic type hierarchy which C cannot represent, therefore *| |* parameters must be passed as base types. Despite the declared types, most  *| |* of the functions provided operate only on branches of the type hierarchy.  *| |* The declared parameter names are descriptive and specify which type is     *| |* required. Additionally, each type hierarchy is documented along with the   *| |* functions that operate upon it. For more detail, refer to LLVM's C++ code. *| |* If in doubt, refer to Core.cpp, which performs paramter downcasts in the   *| |* form unwrap<RequiredType>(Param).                                          *| |*                                                                            *| |* Many exotic languages can interoperate with C code but have a harder time  *| |* with C++ due to name mangling. So in addition to C, this interface enables *| |* tools written in such languages.                                           *| |*                                                                            *| |* When included into a C++ source file, also declares 'wrap' and 'unwrap'    *| |* helpers to perform opaque reference<-->pointer conversions. These helpers  *| |* are shorter and more tightly typed than writing the casts by hand when     *| |* authoring bindings. In assert builds, they will do runtime type checking.  *| |*                                                                            *| \*===----------------------------------------------------------------------===*/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_C_CORE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_C_CORE_H
end_define

begin_include
include|#
directive|include
file|"llvm/System/DataTypes.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_comment
comment|/* Need these includes to support the LLVM 'cast' template for the C++ 'wrap'     and 'unwrap' conversion functions. */
end_comment

begin_include
include|#
directive|include
file|"llvm/Module.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/IRBuilder.h"
end_include

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
typedef|typedef
name|int
name|LLVMBool
typedef|;
comment|/* Opaque types. */
comment|/**  * The top-level container for all LLVM global data.  See the LLVMContext class.  */
typedef|typedef
name|struct
name|LLVMOpaqueContext
modifier|*
name|LLVMContextRef
typedef|;
comment|/**  * The top-level container for all other LLVM Intermediate Representation (IR)  * objects. See the llvm::Module class.  */
typedef|typedef
name|struct
name|LLVMOpaqueModule
modifier|*
name|LLVMModuleRef
typedef|;
comment|/**  * Each value in the LLVM IR has a type, an LLVMTypeRef. See the llvm::Type  * class.  */
typedef|typedef
name|struct
name|LLVMOpaqueType
modifier|*
name|LLVMTypeRef
typedef|;
comment|/**  * When building recursive types using LLVMRefineType, LLVMTypeRef values may  * become invalid; use LLVMTypeHandleRef to resolve this problem. See the  * llvm::AbstractTypeHolder class.  */
typedef|typedef
name|struct
name|LLVMOpaqueTypeHandle
modifier|*
name|LLVMTypeHandleRef
typedef|;
typedef|typedef
name|struct
name|LLVMOpaqueValue
modifier|*
name|LLVMValueRef
typedef|;
typedef|typedef
name|struct
name|LLVMOpaqueBasicBlock
modifier|*
name|LLVMBasicBlockRef
typedef|;
typedef|typedef
name|struct
name|LLVMOpaqueBuilder
modifier|*
name|LLVMBuilderRef
typedef|;
comment|/* Interface used to provide a module to JIT or interpreter.  This is now just a  * synonym for llvm::Module, but we have to keep using the different type to  * keep binary compatibility.  */
typedef|typedef
name|struct
name|LLVMOpaqueModuleProvider
modifier|*
name|LLVMModuleProviderRef
typedef|;
comment|/* Used to provide a module to JIT or interpreter.  * See the llvm::MemoryBuffer class.  */
typedef|typedef
name|struct
name|LLVMOpaqueMemoryBuffer
modifier|*
name|LLVMMemoryBufferRef
typedef|;
comment|/** See the llvm::PassManagerBase class. */
typedef|typedef
name|struct
name|LLVMOpaquePassManager
modifier|*
name|LLVMPassManagerRef
typedef|;
comment|/** Used to get the users and usees of a Value. See the llvm::Use class. */
typedef|typedef
name|struct
name|LLVMOpaqueUse
modifier|*
name|LLVMUseRef
typedef|;
typedef|typedef
enum|enum
block|{
name|LLVMZExtAttribute
init|=
literal|1
operator|<<
literal|0
block|,
name|LLVMSExtAttribute
init|=
literal|1
operator|<<
literal|1
block|,
name|LLVMNoReturnAttribute
init|=
literal|1
operator|<<
literal|2
block|,
name|LLVMInRegAttribute
init|=
literal|1
operator|<<
literal|3
block|,
name|LLVMStructRetAttribute
init|=
literal|1
operator|<<
literal|4
block|,
name|LLVMNoUnwindAttribute
init|=
literal|1
operator|<<
literal|5
block|,
name|LLVMNoAliasAttribute
init|=
literal|1
operator|<<
literal|6
block|,
name|LLVMByValAttribute
init|=
literal|1
operator|<<
literal|7
block|,
name|LLVMNestAttribute
init|=
literal|1
operator|<<
literal|8
block|,
name|LLVMReadNoneAttribute
init|=
literal|1
operator|<<
literal|9
block|,
name|LLVMReadOnlyAttribute
init|=
literal|1
operator|<<
literal|10
block|,
name|LLVMNoInlineAttribute
init|=
literal|1
operator|<<
literal|11
block|,
name|LLVMAlwaysInlineAttribute
init|=
literal|1
operator|<<
literal|12
block|,
name|LLVMOptimizeForSizeAttribute
init|=
literal|1
operator|<<
literal|13
block|,
name|LLVMStackProtectAttribute
init|=
literal|1
operator|<<
literal|14
block|,
name|LLVMStackProtectReqAttribute
init|=
literal|1
operator|<<
literal|15
block|,
name|LLVMAlignment
init|=
literal|31
operator|<<
literal|16
block|,
name|LLVMNoCaptureAttribute
init|=
literal|1
operator|<<
literal|21
block|,
name|LLVMNoRedZoneAttribute
init|=
literal|1
operator|<<
literal|22
block|,
name|LLVMNoImplicitFloatAttribute
init|=
literal|1
operator|<<
literal|23
block|,
name|LLVMNakedAttribute
init|=
literal|1
operator|<<
literal|24
block|,
name|LLVMInlineHintAttribute
init|=
literal|1
operator|<<
literal|25
block|,
name|LLVMStackAlignment
init|=
literal|7
operator|<<
literal|26
block|}
name|LLVMAttribute
typedef|;
typedef|typedef
enum|enum
block|{
comment|/* Terminator Instructions */
name|LLVMRet
init|=
literal|1
block|,
name|LLVMBr
init|=
literal|2
block|,
name|LLVMSwitch
init|=
literal|3
block|,
name|LLVMIndirectBr
init|=
literal|4
block|,
name|LLVMInvoke
init|=
literal|5
block|,
name|LLVMUnwind
init|=
literal|6
block|,
name|LLVMUnreachable
init|=
literal|7
block|,
comment|/* Standard Binary Operators */
name|LLVMAdd
init|=
literal|8
block|,
name|LLVMFAdd
init|=
literal|9
block|,
name|LLVMSub
init|=
literal|10
block|,
name|LLVMFSub
init|=
literal|11
block|,
name|LLVMMul
init|=
literal|12
block|,
name|LLVMFMul
init|=
literal|13
block|,
name|LLVMUDiv
init|=
literal|14
block|,
name|LLVMSDiv
init|=
literal|15
block|,
name|LLVMFDiv
init|=
literal|16
block|,
name|LLVMURem
init|=
literal|17
block|,
name|LLVMSRem
init|=
literal|18
block|,
name|LLVMFRem
init|=
literal|19
block|,
comment|/* Logical Operators */
name|LLVMShl
init|=
literal|20
block|,
name|LLVMLShr
init|=
literal|21
block|,
name|LLVMAShr
init|=
literal|22
block|,
name|LLVMAnd
init|=
literal|23
block|,
name|LLVMOr
init|=
literal|24
block|,
name|LLVMXor
init|=
literal|25
block|,
comment|/* Memory Operators */
name|LLVMAlloca
init|=
literal|26
block|,
name|LLVMLoad
init|=
literal|27
block|,
name|LLVMStore
init|=
literal|28
block|,
name|LLVMGetElementPtr
init|=
literal|29
block|,
comment|/* Cast Operators */
name|LLVMTrunc
init|=
literal|30
block|,
name|LLVMZExt
init|=
literal|31
block|,
name|LLVMSExt
init|=
literal|32
block|,
name|LLVMFPToUI
init|=
literal|33
block|,
name|LLVMFPToSI
init|=
literal|34
block|,
name|LLVMUIToFP
init|=
literal|35
block|,
name|LLVMSIToFP
init|=
literal|36
block|,
name|LLVMFPTrunc
init|=
literal|37
block|,
name|LLVMFPExt
init|=
literal|38
block|,
name|LLVMPtrToInt
init|=
literal|39
block|,
name|LLVMIntToPtr
init|=
literal|40
block|,
name|LLVMBitCast
init|=
literal|41
block|,
comment|/* Other Operators */
name|LLVMICmp
init|=
literal|42
block|,
name|LLVMFCmp
init|=
literal|43
block|,
name|LLVMPHI
init|=
literal|44
block|,
name|LLVMCall
init|=
literal|45
block|,
name|LLVMSelect
init|=
literal|46
block|,
comment|/* UserOp1 */
comment|/* UserOp2 */
name|LLVMVAArg
init|=
literal|49
block|,
name|LLVMExtractElement
init|=
literal|50
block|,
name|LLVMInsertElement
init|=
literal|51
block|,
name|LLVMShuffleVector
init|=
literal|52
block|,
name|LLVMExtractValue
init|=
literal|53
block|,
name|LLVMInsertValue
init|=
literal|54
block|}
name|LLVMOpcode
typedef|;
typedef|typedef
enum|enum
block|{
name|LLVMVoidTypeKind
block|,
comment|/**< type with no size */
name|LLVMFloatTypeKind
block|,
comment|/**< 32 bit floating point type */
name|LLVMDoubleTypeKind
block|,
comment|/**< 64 bit floating point type */
name|LLVMX86_FP80TypeKind
block|,
comment|/**< 80 bit floating point type (X87) */
name|LLVMFP128TypeKind
block|,
comment|/**< 128 bit floating point type (112-bit mantissa)*/
name|LLVMPPC_FP128TypeKind
block|,
comment|/**< 128 bit floating point type (two 64-bits) */
name|LLVMLabelTypeKind
block|,
comment|/**< Labels */
name|LLVMIntegerTypeKind
block|,
comment|/**< Arbitrary bit width integers */
name|LLVMFunctionTypeKind
block|,
comment|/**< Functions */
name|LLVMStructTypeKind
block|,
comment|/**< Structures */
name|LLVMArrayTypeKind
block|,
comment|/**< Arrays */
name|LLVMPointerTypeKind
block|,
comment|/**< Pointers */
name|LLVMOpaqueTypeKind
block|,
comment|/**< Opaque: type with unknown structure */
name|LLVMVectorTypeKind
block|,
comment|/**< SIMD 'packed' format, or other vector type */
name|LLVMMetadataTypeKind
block|,
comment|/**< Metadata */
name|LLVMUnionTypeKind
comment|/**< Unions */
block|}
name|LLVMTypeKind
typedef|;
typedef|typedef
enum|enum
block|{
name|LLVMExternalLinkage
block|,
comment|/**< Externally visible function */
name|LLVMAvailableExternallyLinkage
block|,
name|LLVMLinkOnceAnyLinkage
block|,
comment|/**< Keep one copy of function when linking (inline)*/
name|LLVMLinkOnceODRLinkage
block|,
comment|/**< Same, but only replaced by something                             equivalent. */
name|LLVMWeakAnyLinkage
block|,
comment|/**< Keep one copy of function when linking (weak) */
name|LLVMWeakODRLinkage
block|,
comment|/**< Same, but only replaced by something                             equivalent. */
name|LLVMAppendingLinkage
block|,
comment|/**< Special purpose, only applies to global arrays */
name|LLVMInternalLinkage
block|,
comment|/**< Rename collisions when linking (static                                functions) */
name|LLVMPrivateLinkage
block|,
comment|/**< Like Internal, but omit from symbol table */
name|LLVMDLLImportLinkage
block|,
comment|/**< Function to be imported from DLL */
name|LLVMDLLExportLinkage
block|,
comment|/**< Function to be accessible from DLL */
name|LLVMExternalWeakLinkage
block|,
comment|/**< ExternalWeak linkage description */
name|LLVMGhostLinkage
block|,
comment|/**< Obsolete */
name|LLVMCommonLinkage
block|,
comment|/**< Tentative definitions */
name|LLVMLinkerPrivateLinkage
comment|/**< Like Private, but linker removes. */
block|}
name|LLVMLinkage
typedef|;
typedef|typedef
enum|enum
block|{
name|LLVMDefaultVisibility
block|,
comment|/**< The GV is visible */
name|LLVMHiddenVisibility
block|,
comment|/**< The GV is hidden */
name|LLVMProtectedVisibility
comment|/**< The GV is protected */
block|}
name|LLVMVisibility
typedef|;
typedef|typedef
enum|enum
block|{
name|LLVMCCallConv
init|=
literal|0
block|,
name|LLVMFastCallConv
init|=
literal|8
block|,
name|LLVMColdCallConv
init|=
literal|9
block|,
name|LLVMX86StdcallCallConv
init|=
literal|64
block|,
name|LLVMX86FastcallCallConv
init|=
literal|65
block|}
name|LLVMCallConv
typedef|;
typedef|typedef
enum|enum
block|{
name|LLVMIntEQ
init|=
literal|32
block|,
comment|/**< equal */
name|LLVMIntNE
block|,
comment|/**< not equal */
name|LLVMIntUGT
block|,
comment|/**< unsigned greater than */
name|LLVMIntUGE
block|,
comment|/**< unsigned greater or equal */
name|LLVMIntULT
block|,
comment|/**< unsigned less than */
name|LLVMIntULE
block|,
comment|/**< unsigned less or equal */
name|LLVMIntSGT
block|,
comment|/**< signed greater than */
name|LLVMIntSGE
block|,
comment|/**< signed greater or equal */
name|LLVMIntSLT
block|,
comment|/**< signed less than */
name|LLVMIntSLE
comment|/**< signed less or equal */
block|}
name|LLVMIntPredicate
typedef|;
typedef|typedef
enum|enum
block|{
name|LLVMRealPredicateFalse
block|,
comment|/**< Always false (always folded) */
name|LLVMRealOEQ
block|,
comment|/**< True if ordered and equal */
name|LLVMRealOGT
block|,
comment|/**< True if ordered and greater than */
name|LLVMRealOGE
block|,
comment|/**< True if ordered and greater than or equal */
name|LLVMRealOLT
block|,
comment|/**< True if ordered and less than */
name|LLVMRealOLE
block|,
comment|/**< True if ordered and less than or equal */
name|LLVMRealONE
block|,
comment|/**< True if ordered and operands are unequal */
name|LLVMRealORD
block|,
comment|/**< True if ordered (no nans) */
name|LLVMRealUNO
block|,
comment|/**< True if unordered: isnan(X) | isnan(Y) */
name|LLVMRealUEQ
block|,
comment|/**< True if unordered or equal */
name|LLVMRealUGT
block|,
comment|/**< True if unordered or greater than */
name|LLVMRealUGE
block|,
comment|/**< True if unordered, greater than, or equal */
name|LLVMRealULT
block|,
comment|/**< True if unordered or less than */
name|LLVMRealULE
block|,
comment|/**< True if unordered, less than, or equal */
name|LLVMRealUNE
block|,
comment|/**< True if unordered or not equal */
name|LLVMRealPredicateTrue
comment|/**< Always true (always folded) */
block|}
name|LLVMRealPredicate
typedef|;
comment|/*===-- Error handling ----------------------------------------------------===*/
name|void
name|LLVMDisposeMessage
parameter_list|(
name|char
modifier|*
name|Message
parameter_list|)
function_decl|;
comment|/*===-- Contexts ----------------------------------------------------------===*/
comment|/* Create and destroy contexts. */
name|LLVMContextRef
name|LLVMContextCreate
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|LLVMContextRef
name|LLVMGetGlobalContext
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|LLVMContextDispose
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|)
function_decl|;
name|unsigned
name|LLVMGetMDKindIDInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|,
name|unsigned
name|SLen
parameter_list|)
function_decl|;
name|unsigned
name|LLVMGetMDKindID
parameter_list|(
specifier|const
name|char
modifier|*
name|Name
parameter_list|,
name|unsigned
name|SLen
parameter_list|)
function_decl|;
comment|/*===-- Modules -----------------------------------------------------------===*/
comment|/* Create and destroy modules. */
comment|/** See llvm::Module::Module. */
name|LLVMModuleRef
name|LLVMModuleCreateWithName
parameter_list|(
specifier|const
name|char
modifier|*
name|ModuleID
parameter_list|)
function_decl|;
name|LLVMModuleRef
name|LLVMModuleCreateWithNameInContext
parameter_list|(
specifier|const
name|char
modifier|*
name|ModuleID
parameter_list|,
name|LLVMContextRef
name|C
parameter_list|)
function_decl|;
comment|/** See llvm::Module::~Module. */
name|void
name|LLVMDisposeModule
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|)
function_decl|;
comment|/** Data layout. See Module::getDataLayout. */
specifier|const
name|char
modifier|*
name|LLVMGetDataLayout
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|)
function_decl|;
name|void
name|LLVMSetDataLayout
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|,
specifier|const
name|char
modifier|*
name|Triple
parameter_list|)
function_decl|;
comment|/** Target triple. See Module::getTargetTriple. */
specifier|const
name|char
modifier|*
name|LLVMGetTarget
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|)
function_decl|;
name|void
name|LLVMSetTarget
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|,
specifier|const
name|char
modifier|*
name|Triple
parameter_list|)
function_decl|;
comment|/** See Module::addTypeName. */
name|LLVMBool
name|LLVMAddTypeName
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|,
name|LLVMTypeRef
name|Ty
parameter_list|)
function_decl|;
name|void
name|LLVMDeleteTypeName
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMGetTypeByName
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
comment|/** See Module::dump. */
name|void
name|LLVMDumpModule
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|)
function_decl|;
comment|/** See Module::setModuleInlineAsm. */
name|void
name|LLVMSetModuleInlineAsm
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|,
specifier|const
name|char
modifier|*
name|Asm
parameter_list|)
function_decl|;
comment|/*===-- Types -------------------------------------------------------------===*/
comment|/* LLVM types conform to the following hierarchy:  *   *   types:  *     integer type  *     real type  *     function type  *     sequence types:  *       array type  *       pointer type  *       vector type  *     void type  *     label type  *     opaque type  */
comment|/** See llvm::LLVMTypeKind::getTypeID. */
name|LLVMTypeKind
name|LLVMGetTypeKind
parameter_list|(
name|LLVMTypeRef
name|Ty
parameter_list|)
function_decl|;
comment|/** See llvm::LLVMType::getContext. */
name|LLVMContextRef
name|LLVMGetTypeContext
parameter_list|(
name|LLVMTypeRef
name|Ty
parameter_list|)
function_decl|;
comment|/* Operations on integer types */
name|LLVMTypeRef
name|LLVMInt1TypeInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMInt8TypeInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMInt16TypeInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMInt32TypeInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMInt64TypeInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMIntTypeInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|,
name|unsigned
name|NumBits
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMInt1Type
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMInt8Type
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMInt16Type
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMInt32Type
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMInt64Type
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMIntType
parameter_list|(
name|unsigned
name|NumBits
parameter_list|)
function_decl|;
name|unsigned
name|LLVMGetIntTypeWidth
parameter_list|(
name|LLVMTypeRef
name|IntegerTy
parameter_list|)
function_decl|;
comment|/* Operations on real types */
name|LLVMTypeRef
name|LLVMFloatTypeInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMDoubleTypeInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMX86FP80TypeInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMFP128TypeInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMPPCFP128TypeInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMFloatType
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMDoubleType
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMX86FP80Type
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMFP128Type
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMPPCFP128Type
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Operations on function types */
name|LLVMTypeRef
name|LLVMFunctionType
parameter_list|(
name|LLVMTypeRef
name|ReturnType
parameter_list|,
name|LLVMTypeRef
modifier|*
name|ParamTypes
parameter_list|,
name|unsigned
name|ParamCount
parameter_list|,
name|LLVMBool
name|IsVarArg
parameter_list|)
function_decl|;
name|LLVMBool
name|LLVMIsFunctionVarArg
parameter_list|(
name|LLVMTypeRef
name|FunctionTy
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMGetReturnType
parameter_list|(
name|LLVMTypeRef
name|FunctionTy
parameter_list|)
function_decl|;
name|unsigned
name|LLVMCountParamTypes
parameter_list|(
name|LLVMTypeRef
name|FunctionTy
parameter_list|)
function_decl|;
name|void
name|LLVMGetParamTypes
parameter_list|(
name|LLVMTypeRef
name|FunctionTy
parameter_list|,
name|LLVMTypeRef
modifier|*
name|Dest
parameter_list|)
function_decl|;
comment|/* Operations on struct types */
name|LLVMTypeRef
name|LLVMStructTypeInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|,
name|LLVMTypeRef
modifier|*
name|ElementTypes
parameter_list|,
name|unsigned
name|ElementCount
parameter_list|,
name|LLVMBool
name|Packed
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMStructType
parameter_list|(
name|LLVMTypeRef
modifier|*
name|ElementTypes
parameter_list|,
name|unsigned
name|ElementCount
parameter_list|,
name|LLVMBool
name|Packed
parameter_list|)
function_decl|;
name|unsigned
name|LLVMCountStructElementTypes
parameter_list|(
name|LLVMTypeRef
name|StructTy
parameter_list|)
function_decl|;
name|void
name|LLVMGetStructElementTypes
parameter_list|(
name|LLVMTypeRef
name|StructTy
parameter_list|,
name|LLVMTypeRef
modifier|*
name|Dest
parameter_list|)
function_decl|;
name|LLVMBool
name|LLVMIsPackedStruct
parameter_list|(
name|LLVMTypeRef
name|StructTy
parameter_list|)
function_decl|;
comment|/* Operations on union types */
name|LLVMTypeRef
name|LLVMUnionTypeInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|,
name|LLVMTypeRef
modifier|*
name|ElementTypes
parameter_list|,
name|unsigned
name|ElementCount
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMUnionType
parameter_list|(
name|LLVMTypeRef
modifier|*
name|ElementTypes
parameter_list|,
name|unsigned
name|ElementCount
parameter_list|)
function_decl|;
name|unsigned
name|LLVMCountUnionElementTypes
parameter_list|(
name|LLVMTypeRef
name|UnionTy
parameter_list|)
function_decl|;
name|void
name|LLVMGetUnionElementTypes
parameter_list|(
name|LLVMTypeRef
name|UnionTy
parameter_list|,
name|LLVMTypeRef
modifier|*
name|Dest
parameter_list|)
function_decl|;
comment|/* Operations on array, pointer, and vector types (sequence types) */
name|LLVMTypeRef
name|LLVMArrayType
parameter_list|(
name|LLVMTypeRef
name|ElementType
parameter_list|,
name|unsigned
name|ElementCount
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMPointerType
parameter_list|(
name|LLVMTypeRef
name|ElementType
parameter_list|,
name|unsigned
name|AddressSpace
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMVectorType
parameter_list|(
name|LLVMTypeRef
name|ElementType
parameter_list|,
name|unsigned
name|ElementCount
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMGetElementType
parameter_list|(
name|LLVMTypeRef
name|Ty
parameter_list|)
function_decl|;
name|unsigned
name|LLVMGetArrayLength
parameter_list|(
name|LLVMTypeRef
name|ArrayTy
parameter_list|)
function_decl|;
name|unsigned
name|LLVMGetPointerAddressSpace
parameter_list|(
name|LLVMTypeRef
name|PointerTy
parameter_list|)
function_decl|;
name|unsigned
name|LLVMGetVectorSize
parameter_list|(
name|LLVMTypeRef
name|VectorTy
parameter_list|)
function_decl|;
comment|/* Operations on other types */
name|LLVMTypeRef
name|LLVMVoidTypeInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMLabelTypeInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMOpaqueTypeInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMVoidType
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMLabelType
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMOpaqueType
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Operations on type handles */
name|LLVMTypeHandleRef
name|LLVMCreateTypeHandle
parameter_list|(
name|LLVMTypeRef
name|PotentiallyAbstractTy
parameter_list|)
function_decl|;
name|void
name|LLVMRefineType
parameter_list|(
name|LLVMTypeRef
name|AbstractTy
parameter_list|,
name|LLVMTypeRef
name|ConcreteTy
parameter_list|)
function_decl|;
name|LLVMTypeRef
name|LLVMResolveTypeHandle
parameter_list|(
name|LLVMTypeHandleRef
name|TypeHandle
parameter_list|)
function_decl|;
name|void
name|LLVMDisposeTypeHandle
parameter_list|(
name|LLVMTypeHandleRef
name|TypeHandle
parameter_list|)
function_decl|;
comment|/*===-- Values ------------------------------------------------------------===*/
comment|/* The bulk of LLVM's object model consists of values, which comprise a very  * rich type hierarchy.  */
define|#
directive|define
name|LLVM_FOR_EACH_VALUE_SUBCLASS
parameter_list|(
name|macro
parameter_list|)
define|\
value|macro(Argument)                           \   macro(BasicBlock)                         \   macro(InlineAsm)                          \   macro(User)                               \     macro(Constant)                         \       macro(ConstantAggregateZero)          \       macro(ConstantArray)                  \       macro(ConstantExpr)                   \       macro(ConstantFP)                     \       macro(ConstantInt)                    \       macro(ConstantPointerNull)            \       macro(ConstantStruct)                 \       macro(ConstantVector)                 \       macro(GlobalValue)                    \         macro(Function)                     \         macro(GlobalAlias)                  \         macro(GlobalVariable)               \       macro(UndefValue)                     \     macro(Instruction)                      \       macro(BinaryOperator)                 \       macro(CallInst)                       \         macro(IntrinsicInst)                \           macro(DbgInfoIntrinsic)           \             macro(DbgDeclareInst)           \           macro(EHSelectorInst)             \           macro(MemIntrinsic)               \             macro(MemCpyInst)               \             macro(MemMoveInst)              \             macro(MemSetInst)               \       macro(CmpInst)                        \       macro(FCmpInst)                       \       macro(ICmpInst)                       \       macro(ExtractElementInst)             \       macro(GetElementPtrInst)              \       macro(InsertElementInst)              \       macro(InsertValueInst)                \       macro(PHINode)                        \       macro(SelectInst)                     \       macro(ShuffleVectorInst)              \       macro(StoreInst)                      \       macro(TerminatorInst)                 \         macro(BranchInst)                   \         macro(InvokeInst)                   \         macro(ReturnInst)                   \         macro(SwitchInst)                   \         macro(UnreachableInst)              \         macro(UnwindInst)                   \     macro(UnaryInstruction)                 \       macro(AllocaInst)                     \       macro(CastInst)                       \         macro(BitCastInst)                  \         macro(FPExtInst)                    \         macro(FPToSIInst)                   \         macro(FPToUIInst)                   \         macro(FPTruncInst)                  \         macro(IntToPtrInst)                 \         macro(PtrToIntInst)                 \         macro(SExtInst)                     \         macro(SIToFPInst)                   \         macro(TruncInst)                    \         macro(UIToFPInst)                   \         macro(ZExtInst)                     \       macro(ExtractValueInst)               \       macro(LoadInst)                       \       macro(VAArgInst)
comment|/* Operations on all values */
name|LLVMTypeRef
name|LLVMTypeOf
parameter_list|(
name|LLVMValueRef
name|Val
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|LLVMGetValueName
parameter_list|(
name|LLVMValueRef
name|Val
parameter_list|)
function_decl|;
name|void
name|LLVMSetValueName
parameter_list|(
name|LLVMValueRef
name|Val
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|void
name|LLVMDumpValue
parameter_list|(
name|LLVMValueRef
name|Val
parameter_list|)
function_decl|;
name|void
name|LLVMReplaceAllUsesWith
parameter_list|(
name|LLVMValueRef
name|OldVal
parameter_list|,
name|LLVMValueRef
name|NewVal
parameter_list|)
function_decl|;
name|int
name|LLVMHasMetadata
parameter_list|(
name|LLVMValueRef
name|Val
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMGetMetadata
parameter_list|(
name|LLVMValueRef
name|Val
parameter_list|,
name|unsigned
name|KindID
parameter_list|)
function_decl|;
name|void
name|LLVMSetMetadata
parameter_list|(
name|LLVMValueRef
name|Val
parameter_list|,
name|unsigned
name|KindID
parameter_list|,
name|LLVMValueRef
name|Node
parameter_list|)
function_decl|;
comment|/* Conversion functions. Return the input value if it is an instance of the    specified class, otherwise NULL. See llvm::dyn_cast_or_null<>. */
define|#
directive|define
name|LLVM_DECLARE_VALUE_CAST
parameter_list|(
name|name
parameter_list|)
define|\
value|LLVMValueRef LLVMIsA##name(LLVMValueRef Val);
name|LLVM_FOR_EACH_VALUE_SUBCLASS
argument_list|(
argument|LLVM_DECLARE_VALUE_CAST
argument_list|)
comment|/* Operations on Uses */
name|LLVMUseRef
name|LLVMGetFirstUse
parameter_list|(
name|LLVMValueRef
name|Val
parameter_list|)
function_decl|;
name|LLVMUseRef
name|LLVMGetNextUse
parameter_list|(
name|LLVMUseRef
name|U
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMGetUser
parameter_list|(
name|LLVMUseRef
name|U
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMGetUsedValue
parameter_list|(
name|LLVMUseRef
name|U
parameter_list|)
function_decl|;
comment|/* Operations on Users */
name|LLVMValueRef
name|LLVMGetOperand
parameter_list|(
name|LLVMValueRef
name|Val
parameter_list|,
name|unsigned
name|Index
parameter_list|)
function_decl|;
comment|/* Operations on constants of any type */
name|LLVMValueRef
name|LLVMConstNull
parameter_list|(
name|LLVMTypeRef
name|Ty
parameter_list|)
function_decl|;
comment|/* all zeroes */
name|LLVMValueRef
name|LLVMConstAllOnes
parameter_list|(
name|LLVMTypeRef
name|Ty
parameter_list|)
function_decl|;
comment|/* only for int/vector */
name|LLVMValueRef
name|LLVMGetUndef
parameter_list|(
name|LLVMTypeRef
name|Ty
parameter_list|)
function_decl|;
name|LLVMBool
name|LLVMIsConstant
parameter_list|(
name|LLVMValueRef
name|Val
parameter_list|)
function_decl|;
name|LLVMBool
name|LLVMIsNull
parameter_list|(
name|LLVMValueRef
name|Val
parameter_list|)
function_decl|;
name|LLVMBool
name|LLVMIsUndef
parameter_list|(
name|LLVMValueRef
name|Val
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstPointerNull
parameter_list|(
name|LLVMTypeRef
name|Ty
parameter_list|)
function_decl|;
comment|/* Operations on metadata */
name|LLVMValueRef
name|LLVMMDStringInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|,
specifier|const
name|char
modifier|*
name|Str
parameter_list|,
name|unsigned
name|SLen
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMMDString
parameter_list|(
specifier|const
name|char
modifier|*
name|Str
parameter_list|,
name|unsigned
name|SLen
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMMDNodeInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|,
name|LLVMValueRef
modifier|*
name|Vals
parameter_list|,
name|unsigned
name|Count
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMMDNode
parameter_list|(
name|LLVMValueRef
modifier|*
name|Vals
parameter_list|,
name|unsigned
name|Count
parameter_list|)
function_decl|;
comment|/* Operations on scalar constants */
name|LLVMValueRef
name|LLVMConstInt
parameter_list|(
name|LLVMTypeRef
name|IntTy
parameter_list|,
name|unsigned
name|long
name|long
name|N
parameter_list|,
name|LLVMBool
name|SignExtend
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstIntOfString
parameter_list|(
name|LLVMTypeRef
name|IntTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Text
parameter_list|,
name|uint8_t
name|Radix
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstIntOfStringAndSize
parameter_list|(
name|LLVMTypeRef
name|IntTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Text
parameter_list|,
name|unsigned
name|SLen
parameter_list|,
name|uint8_t
name|Radix
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstReal
parameter_list|(
name|LLVMTypeRef
name|RealTy
parameter_list|,
name|double
name|N
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstRealOfString
parameter_list|(
name|LLVMTypeRef
name|RealTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Text
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstRealOfStringAndSize
parameter_list|(
name|LLVMTypeRef
name|RealTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Text
parameter_list|,
name|unsigned
name|SLen
parameter_list|)
function_decl|;
name|unsigned
name|long
name|long
name|LLVMConstIntGetZExtValue
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|)
function_decl|;
name|long
name|long
name|LLVMConstIntGetSExtValue
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|)
function_decl|;
comment|/* Operations on composite constants */
name|LLVMValueRef
name|LLVMConstStringInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|,
specifier|const
name|char
modifier|*
name|Str
parameter_list|,
name|unsigned
name|Length
parameter_list|,
name|LLVMBool
name|DontNullTerminate
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstStructInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|,
name|LLVMValueRef
modifier|*
name|ConstantVals
parameter_list|,
name|unsigned
name|Count
parameter_list|,
name|LLVMBool
name|Packed
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstString
parameter_list|(
specifier|const
name|char
modifier|*
name|Str
parameter_list|,
name|unsigned
name|Length
parameter_list|,
name|LLVMBool
name|DontNullTerminate
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstArray
parameter_list|(
name|LLVMTypeRef
name|ElementTy
parameter_list|,
name|LLVMValueRef
modifier|*
name|ConstantVals
parameter_list|,
name|unsigned
name|Length
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstStruct
parameter_list|(
name|LLVMValueRef
modifier|*
name|ConstantVals
parameter_list|,
name|unsigned
name|Count
parameter_list|,
name|LLVMBool
name|Packed
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstVector
parameter_list|(
name|LLVMValueRef
modifier|*
name|ScalarConstantVals
parameter_list|,
name|unsigned
name|Size
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstUnion
parameter_list|(
name|LLVMTypeRef
name|Ty
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|)
function_decl|;
comment|/* Constant expressions */
name|LLVMOpcode
name|LLVMGetConstOpcode
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMAlignOf
parameter_list|(
name|LLVMTypeRef
name|Ty
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMSizeOf
parameter_list|(
name|LLVMTypeRef
name|Ty
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstNeg
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstNSWNeg
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstNUWNeg
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstFNeg
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstNot
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstAdd
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstNSWAdd
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstNUWAdd
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstFAdd
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstSub
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstNSWSub
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstNUWSub
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstFSub
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstMul
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstNSWMul
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstNUWMul
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstFMul
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstUDiv
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstSDiv
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstExactSDiv
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstFDiv
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstURem
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstSRem
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstFRem
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstAnd
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstOr
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstXor
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstICmp
parameter_list|(
name|LLVMIntPredicate
name|Predicate
parameter_list|,
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstFCmp
parameter_list|(
name|LLVMRealPredicate
name|Predicate
parameter_list|,
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstShl
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstLShr
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstAShr
parameter_list|(
name|LLVMValueRef
name|LHSConstant
parameter_list|,
name|LLVMValueRef
name|RHSConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstGEP
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMValueRef
modifier|*
name|ConstantIndices
parameter_list|,
name|unsigned
name|NumIndices
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstInBoundsGEP
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMValueRef
modifier|*
name|ConstantIndices
parameter_list|,
name|unsigned
name|NumIndices
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstTrunc
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMTypeRef
name|ToType
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstSExt
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMTypeRef
name|ToType
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstZExt
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMTypeRef
name|ToType
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstFPTrunc
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMTypeRef
name|ToType
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstFPExt
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMTypeRef
name|ToType
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstUIToFP
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMTypeRef
name|ToType
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstSIToFP
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMTypeRef
name|ToType
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstFPToUI
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMTypeRef
name|ToType
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstFPToSI
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMTypeRef
name|ToType
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstPtrToInt
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMTypeRef
name|ToType
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstIntToPtr
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMTypeRef
name|ToType
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstBitCast
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMTypeRef
name|ToType
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstZExtOrBitCast
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMTypeRef
name|ToType
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstSExtOrBitCast
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMTypeRef
name|ToType
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstTruncOrBitCast
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMTypeRef
name|ToType
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstPointerCast
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMTypeRef
name|ToType
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstIntCast
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMTypeRef
name|ToType
parameter_list|,
name|LLVMBool
name|isSigned
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstFPCast
parameter_list|(
name|LLVMValueRef
name|ConstantVal
parameter_list|,
name|LLVMTypeRef
name|ToType
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstSelect
parameter_list|(
name|LLVMValueRef
name|ConstantCondition
parameter_list|,
name|LLVMValueRef
name|ConstantIfTrue
parameter_list|,
name|LLVMValueRef
name|ConstantIfFalse
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstExtractElement
parameter_list|(
name|LLVMValueRef
name|VectorConstant
parameter_list|,
name|LLVMValueRef
name|IndexConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstInsertElement
parameter_list|(
name|LLVMValueRef
name|VectorConstant
parameter_list|,
name|LLVMValueRef
name|ElementValueConstant
parameter_list|,
name|LLVMValueRef
name|IndexConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstShuffleVector
parameter_list|(
name|LLVMValueRef
name|VectorAConstant
parameter_list|,
name|LLVMValueRef
name|VectorBConstant
parameter_list|,
name|LLVMValueRef
name|MaskConstant
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstExtractValue
parameter_list|(
name|LLVMValueRef
name|AggConstant
parameter_list|,
name|unsigned
modifier|*
name|IdxList
parameter_list|,
name|unsigned
name|NumIdx
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstInsertValue
parameter_list|(
name|LLVMValueRef
name|AggConstant
parameter_list|,
name|LLVMValueRef
name|ElementValueConstant
parameter_list|,
name|unsigned
modifier|*
name|IdxList
parameter_list|,
name|unsigned
name|NumIdx
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMConstInlineAsm
parameter_list|(
name|LLVMTypeRef
name|Ty
parameter_list|,
specifier|const
name|char
modifier|*
name|AsmString
parameter_list|,
specifier|const
name|char
modifier|*
name|Constraints
parameter_list|,
name|LLVMBool
name|HasSideEffects
parameter_list|,
name|LLVMBool
name|IsAlignStack
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBlockAddress
parameter_list|(
name|LLVMValueRef
name|F
parameter_list|,
name|LLVMBasicBlockRef
name|BB
parameter_list|)
function_decl|;
comment|/* Operations on global variables, functions, and aliases (globals) */
name|LLVMModuleRef
name|LLVMGetGlobalParent
parameter_list|(
name|LLVMValueRef
name|Global
parameter_list|)
function_decl|;
name|LLVMBool
name|LLVMIsDeclaration
parameter_list|(
name|LLVMValueRef
name|Global
parameter_list|)
function_decl|;
name|LLVMLinkage
name|LLVMGetLinkage
parameter_list|(
name|LLVMValueRef
name|Global
parameter_list|)
function_decl|;
name|void
name|LLVMSetLinkage
parameter_list|(
name|LLVMValueRef
name|Global
parameter_list|,
name|LLVMLinkage
name|Linkage
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|LLVMGetSection
parameter_list|(
name|LLVMValueRef
name|Global
parameter_list|)
function_decl|;
name|void
name|LLVMSetSection
parameter_list|(
name|LLVMValueRef
name|Global
parameter_list|,
specifier|const
name|char
modifier|*
name|Section
parameter_list|)
function_decl|;
name|LLVMVisibility
name|LLVMGetVisibility
parameter_list|(
name|LLVMValueRef
name|Global
parameter_list|)
function_decl|;
name|void
name|LLVMSetVisibility
parameter_list|(
name|LLVMValueRef
name|Global
parameter_list|,
name|LLVMVisibility
name|Viz
parameter_list|)
function_decl|;
name|unsigned
name|LLVMGetAlignment
parameter_list|(
name|LLVMValueRef
name|Global
parameter_list|)
function_decl|;
name|void
name|LLVMSetAlignment
parameter_list|(
name|LLVMValueRef
name|Global
parameter_list|,
name|unsigned
name|Bytes
parameter_list|)
function_decl|;
comment|/* Operations on global variables */
name|LLVMValueRef
name|LLVMAddGlobal
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|,
name|LLVMTypeRef
name|Ty
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMAddGlobalInAddressSpace
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|,
name|LLVMTypeRef
name|Ty
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|,
name|unsigned
name|AddressSpace
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMGetNamedGlobal
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMGetFirstGlobal
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMGetLastGlobal
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMGetNextGlobal
parameter_list|(
name|LLVMValueRef
name|GlobalVar
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMGetPreviousGlobal
parameter_list|(
name|LLVMValueRef
name|GlobalVar
parameter_list|)
function_decl|;
name|void
name|LLVMDeleteGlobal
parameter_list|(
name|LLVMValueRef
name|GlobalVar
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMGetInitializer
parameter_list|(
name|LLVMValueRef
name|GlobalVar
parameter_list|)
function_decl|;
name|void
name|LLVMSetInitializer
parameter_list|(
name|LLVMValueRef
name|GlobalVar
parameter_list|,
name|LLVMValueRef
name|ConstantVal
parameter_list|)
function_decl|;
name|LLVMBool
name|LLVMIsThreadLocal
parameter_list|(
name|LLVMValueRef
name|GlobalVar
parameter_list|)
function_decl|;
name|void
name|LLVMSetThreadLocal
parameter_list|(
name|LLVMValueRef
name|GlobalVar
parameter_list|,
name|LLVMBool
name|IsThreadLocal
parameter_list|)
function_decl|;
name|LLVMBool
name|LLVMIsGlobalConstant
parameter_list|(
name|LLVMValueRef
name|GlobalVar
parameter_list|)
function_decl|;
name|void
name|LLVMSetGlobalConstant
parameter_list|(
name|LLVMValueRef
name|GlobalVar
parameter_list|,
name|LLVMBool
name|IsConstant
parameter_list|)
function_decl|;
comment|/* Operations on aliases */
name|LLVMValueRef
name|LLVMAddAlias
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|,
name|LLVMTypeRef
name|Ty
parameter_list|,
name|LLVMValueRef
name|Aliasee
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
comment|/* Operations on functions */
name|LLVMValueRef
name|LLVMAddFunction
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|,
name|LLVMTypeRef
name|FunctionTy
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMGetNamedFunction
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMGetFirstFunction
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMGetLastFunction
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMGetNextFunction
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMGetPreviousFunction
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|)
function_decl|;
name|void
name|LLVMDeleteFunction
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|)
function_decl|;
name|unsigned
name|LLVMGetIntrinsicID
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|)
function_decl|;
name|unsigned
name|LLVMGetFunctionCallConv
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|)
function_decl|;
name|void
name|LLVMSetFunctionCallConv
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|,
name|unsigned
name|CC
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|LLVMGetGC
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|)
function_decl|;
name|void
name|LLVMSetGC
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|void
name|LLVMAddFunctionAttr
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|,
name|LLVMAttribute
name|PA
parameter_list|)
function_decl|;
name|LLVMAttribute
name|LLVMGetFunctionAttr
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|)
function_decl|;
name|void
name|LLVMRemoveFunctionAttr
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|,
name|LLVMAttribute
name|PA
parameter_list|)
function_decl|;
comment|/* Operations on parameters */
name|unsigned
name|LLVMCountParams
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|)
function_decl|;
name|void
name|LLVMGetParams
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|,
name|LLVMValueRef
modifier|*
name|Params
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMGetParam
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|,
name|unsigned
name|Index
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMGetParamParent
parameter_list|(
name|LLVMValueRef
name|Inst
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMGetFirstParam
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMGetLastParam
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMGetNextParam
parameter_list|(
name|LLVMValueRef
name|Arg
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMGetPreviousParam
parameter_list|(
name|LLVMValueRef
name|Arg
parameter_list|)
function_decl|;
name|void
name|LLVMAddAttribute
parameter_list|(
name|LLVMValueRef
name|Arg
parameter_list|,
name|LLVMAttribute
name|PA
parameter_list|)
function_decl|;
name|void
name|LLVMRemoveAttribute
parameter_list|(
name|LLVMValueRef
name|Arg
parameter_list|,
name|LLVMAttribute
name|PA
parameter_list|)
function_decl|;
name|LLVMAttribute
name|LLVMGetAttribute
parameter_list|(
name|LLVMValueRef
name|Arg
parameter_list|)
function_decl|;
name|void
name|LLVMSetParamAlignment
parameter_list|(
name|LLVMValueRef
name|Arg
parameter_list|,
name|unsigned
name|align
parameter_list|)
function_decl|;
comment|/* Operations on basic blocks */
name|LLVMValueRef
name|LLVMBasicBlockAsValue
parameter_list|(
name|LLVMBasicBlockRef
name|BB
parameter_list|)
function_decl|;
name|LLVMBool
name|LLVMValueIsBasicBlock
parameter_list|(
name|LLVMValueRef
name|Val
parameter_list|)
function_decl|;
name|LLVMBasicBlockRef
name|LLVMValueAsBasicBlock
parameter_list|(
name|LLVMValueRef
name|Val
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMGetBasicBlockParent
parameter_list|(
name|LLVMBasicBlockRef
name|BB
parameter_list|)
function_decl|;
name|unsigned
name|LLVMCountBasicBlocks
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|)
function_decl|;
name|void
name|LLVMGetBasicBlocks
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|,
name|LLVMBasicBlockRef
modifier|*
name|BasicBlocks
parameter_list|)
function_decl|;
name|LLVMBasicBlockRef
name|LLVMGetFirstBasicBlock
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|)
function_decl|;
name|LLVMBasicBlockRef
name|LLVMGetLastBasicBlock
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|)
function_decl|;
name|LLVMBasicBlockRef
name|LLVMGetNextBasicBlock
parameter_list|(
name|LLVMBasicBlockRef
name|BB
parameter_list|)
function_decl|;
name|LLVMBasicBlockRef
name|LLVMGetPreviousBasicBlock
parameter_list|(
name|LLVMBasicBlockRef
name|BB
parameter_list|)
function_decl|;
name|LLVMBasicBlockRef
name|LLVMGetEntryBasicBlock
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|)
function_decl|;
name|LLVMBasicBlockRef
name|LLVMAppendBasicBlockInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|,
name|LLVMValueRef
name|Fn
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMBasicBlockRef
name|LLVMInsertBasicBlockInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|,
name|LLVMBasicBlockRef
name|BB
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMBasicBlockRef
name|LLVMAppendBasicBlock
parameter_list|(
name|LLVMValueRef
name|Fn
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMBasicBlockRef
name|LLVMInsertBasicBlock
parameter_list|(
name|LLVMBasicBlockRef
name|InsertBeforeBB
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|void
name|LLVMDeleteBasicBlock
parameter_list|(
name|LLVMBasicBlockRef
name|BB
parameter_list|)
function_decl|;
comment|/* Operations on instructions */
name|LLVMBasicBlockRef
name|LLVMGetInstructionParent
parameter_list|(
name|LLVMValueRef
name|Inst
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMGetFirstInstruction
parameter_list|(
name|LLVMBasicBlockRef
name|BB
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMGetLastInstruction
parameter_list|(
name|LLVMBasicBlockRef
name|BB
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMGetNextInstruction
parameter_list|(
name|LLVMValueRef
name|Inst
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMGetPreviousInstruction
parameter_list|(
name|LLVMValueRef
name|Inst
parameter_list|)
function_decl|;
comment|/* Operations on call sites */
name|void
name|LLVMSetInstructionCallConv
parameter_list|(
name|LLVMValueRef
name|Instr
parameter_list|,
name|unsigned
name|CC
parameter_list|)
function_decl|;
name|unsigned
name|LLVMGetInstructionCallConv
parameter_list|(
name|LLVMValueRef
name|Instr
parameter_list|)
function_decl|;
name|void
name|LLVMAddInstrAttribute
parameter_list|(
name|LLVMValueRef
name|Instr
parameter_list|,
name|unsigned
name|index
parameter_list|,
name|LLVMAttribute
parameter_list|)
function_decl|;
name|void
name|LLVMRemoveInstrAttribute
parameter_list|(
name|LLVMValueRef
name|Instr
parameter_list|,
name|unsigned
name|index
parameter_list|,
name|LLVMAttribute
parameter_list|)
function_decl|;
name|void
name|LLVMSetInstrParamAlignment
parameter_list|(
name|LLVMValueRef
name|Instr
parameter_list|,
name|unsigned
name|index
parameter_list|,
name|unsigned
name|align
parameter_list|)
function_decl|;
comment|/* Operations on call instructions (only) */
name|LLVMBool
name|LLVMIsTailCall
parameter_list|(
name|LLVMValueRef
name|CallInst
parameter_list|)
function_decl|;
name|void
name|LLVMSetTailCall
parameter_list|(
name|LLVMValueRef
name|CallInst
parameter_list|,
name|LLVMBool
name|IsTailCall
parameter_list|)
function_decl|;
comment|/* Operations on phi nodes */
name|void
name|LLVMAddIncoming
parameter_list|(
name|LLVMValueRef
name|PhiNode
parameter_list|,
name|LLVMValueRef
modifier|*
name|IncomingValues
parameter_list|,
name|LLVMBasicBlockRef
modifier|*
name|IncomingBlocks
parameter_list|,
name|unsigned
name|Count
parameter_list|)
function_decl|;
name|unsigned
name|LLVMCountIncoming
parameter_list|(
name|LLVMValueRef
name|PhiNode
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMGetIncomingValue
parameter_list|(
name|LLVMValueRef
name|PhiNode
parameter_list|,
name|unsigned
name|Index
parameter_list|)
function_decl|;
name|LLVMBasicBlockRef
name|LLVMGetIncomingBlock
parameter_list|(
name|LLVMValueRef
name|PhiNode
parameter_list|,
name|unsigned
name|Index
parameter_list|)
function_decl|;
comment|/*===-- Instruction builders ----------------------------------------------===*/
comment|/* An instruction builder represents a point within a basic block, and is the  * exclusive means of building instructions using the C interface.  */
name|LLVMBuilderRef
name|LLVMCreateBuilderInContext
parameter_list|(
name|LLVMContextRef
name|C
parameter_list|)
function_decl|;
name|LLVMBuilderRef
name|LLVMCreateBuilder
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|LLVMPositionBuilder
parameter_list|(
name|LLVMBuilderRef
name|Builder
parameter_list|,
name|LLVMBasicBlockRef
name|Block
parameter_list|,
name|LLVMValueRef
name|Instr
parameter_list|)
function_decl|;
name|void
name|LLVMPositionBuilderBefore
parameter_list|(
name|LLVMBuilderRef
name|Builder
parameter_list|,
name|LLVMValueRef
name|Instr
parameter_list|)
function_decl|;
name|void
name|LLVMPositionBuilderAtEnd
parameter_list|(
name|LLVMBuilderRef
name|Builder
parameter_list|,
name|LLVMBasicBlockRef
name|Block
parameter_list|)
function_decl|;
name|LLVMBasicBlockRef
name|LLVMGetInsertBlock
parameter_list|(
name|LLVMBuilderRef
name|Builder
parameter_list|)
function_decl|;
name|void
name|LLVMClearInsertionPosition
parameter_list|(
name|LLVMBuilderRef
name|Builder
parameter_list|)
function_decl|;
name|void
name|LLVMInsertIntoBuilder
parameter_list|(
name|LLVMBuilderRef
name|Builder
parameter_list|,
name|LLVMValueRef
name|Instr
parameter_list|)
function_decl|;
name|void
name|LLVMInsertIntoBuilderWithName
parameter_list|(
name|LLVMBuilderRef
name|Builder
parameter_list|,
name|LLVMValueRef
name|Instr
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|void
name|LLVMDisposeBuilder
parameter_list|(
name|LLVMBuilderRef
name|Builder
parameter_list|)
function_decl|;
comment|/* Metadata */
name|void
name|LLVMSetCurrentDebugLocation
parameter_list|(
name|LLVMBuilderRef
name|Builder
parameter_list|,
name|LLVMValueRef
name|L
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMGetCurrentDebugLocation
parameter_list|(
name|LLVMBuilderRef
name|Builder
parameter_list|)
function_decl|;
name|void
name|LLVMSetInstDebugLocation
parameter_list|(
name|LLVMBuilderRef
name|Builder
parameter_list|,
name|LLVMValueRef
name|Inst
parameter_list|)
function_decl|;
comment|/* Terminators */
name|LLVMValueRef
name|LLVMBuildRetVoid
parameter_list|(
name|LLVMBuilderRef
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildRet
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|V
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildAggregateRet
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
modifier|*
name|RetVals
parameter_list|,
name|unsigned
name|N
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildBr
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMBasicBlockRef
name|Dest
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildCondBr
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|If
parameter_list|,
name|LLVMBasicBlockRef
name|Then
parameter_list|,
name|LLVMBasicBlockRef
name|Else
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildSwitch
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|V
parameter_list|,
name|LLVMBasicBlockRef
name|Else
parameter_list|,
name|unsigned
name|NumCases
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildIndirectBr
parameter_list|(
name|LLVMBuilderRef
name|B
parameter_list|,
name|LLVMValueRef
name|Addr
parameter_list|,
name|unsigned
name|NumDests
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildInvoke
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Fn
parameter_list|,
name|LLVMValueRef
modifier|*
name|Args
parameter_list|,
name|unsigned
name|NumArgs
parameter_list|,
name|LLVMBasicBlockRef
name|Then
parameter_list|,
name|LLVMBasicBlockRef
name|Catch
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildUnwind
parameter_list|(
name|LLVMBuilderRef
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildUnreachable
parameter_list|(
name|LLVMBuilderRef
parameter_list|)
function_decl|;
comment|/* Add a case to the switch instruction */
name|void
name|LLVMAddCase
parameter_list|(
name|LLVMValueRef
name|Switch
parameter_list|,
name|LLVMValueRef
name|OnVal
parameter_list|,
name|LLVMBasicBlockRef
name|Dest
parameter_list|)
function_decl|;
comment|/* Add a destination to the indirectbr instruction */
name|void
name|LLVMAddDestination
parameter_list|(
name|LLVMValueRef
name|IndirectBr
parameter_list|,
name|LLVMBasicBlockRef
name|Dest
parameter_list|)
function_decl|;
comment|/* Arithmetic */
name|LLVMValueRef
name|LLVMBuildAdd
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildNSWAdd
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildNUWAdd
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildFAdd
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildSub
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildNSWSub
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildNUWSub
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildFSub
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildMul
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildNSWMul
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildNUWMul
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildFMul
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildUDiv
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildSDiv
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildExactSDiv
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildFDiv
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildURem
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildSRem
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildFRem
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildShl
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildLShr
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildAShr
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildAnd
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildOr
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildXor
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildBinOp
parameter_list|(
name|LLVMBuilderRef
name|B
parameter_list|,
name|LLVMOpcode
name|Op
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildNeg
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|V
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildNSWNeg
parameter_list|(
name|LLVMBuilderRef
name|B
parameter_list|,
name|LLVMValueRef
name|V
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildNUWNeg
parameter_list|(
name|LLVMBuilderRef
name|B
parameter_list|,
name|LLVMValueRef
name|V
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildFNeg
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|V
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildNot
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|V
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
comment|/* Memory */
name|LLVMValueRef
name|LLVMBuildMalloc
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMTypeRef
name|Ty
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildArrayMalloc
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMTypeRef
name|Ty
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildAlloca
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMTypeRef
name|Ty
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildArrayAlloca
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMTypeRef
name|Ty
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildFree
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|PointerVal
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildLoad
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|PointerVal
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildStore
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMValueRef
name|Ptr
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildGEP
parameter_list|(
name|LLVMBuilderRef
name|B
parameter_list|,
name|LLVMValueRef
name|Pointer
parameter_list|,
name|LLVMValueRef
modifier|*
name|Indices
parameter_list|,
name|unsigned
name|NumIndices
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildInBoundsGEP
parameter_list|(
name|LLVMBuilderRef
name|B
parameter_list|,
name|LLVMValueRef
name|Pointer
parameter_list|,
name|LLVMValueRef
modifier|*
name|Indices
parameter_list|,
name|unsigned
name|NumIndices
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildStructGEP
parameter_list|(
name|LLVMBuilderRef
name|B
parameter_list|,
name|LLVMValueRef
name|Pointer
parameter_list|,
name|unsigned
name|Idx
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildGlobalString
parameter_list|(
name|LLVMBuilderRef
name|B
parameter_list|,
specifier|const
name|char
modifier|*
name|Str
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildGlobalStringPtr
parameter_list|(
name|LLVMBuilderRef
name|B
parameter_list|,
specifier|const
name|char
modifier|*
name|Str
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
comment|/* Casts */
name|LLVMValueRef
name|LLVMBuildTrunc
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildZExt
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildSExt
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildFPToUI
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildFPToSI
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildUIToFP
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildSIToFP
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildFPTrunc
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildFPExt
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildPtrToInt
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildIntToPtr
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildBitCast
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildZExtOrBitCast
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildSExtOrBitCast
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildTruncOrBitCast
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildCast
parameter_list|(
name|LLVMBuilderRef
name|B
parameter_list|,
name|LLVMOpcode
name|Op
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildPointerCast
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildIntCast
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
comment|/*Signed cast!*/
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildFPCast
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|LLVMTypeRef
name|DestTy
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
comment|/* Comparisons */
name|LLVMValueRef
name|LLVMBuildICmp
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMIntPredicate
name|Op
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildFCmp
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMRealPredicate
name|Op
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
comment|/* Miscellaneous instructions */
name|LLVMValueRef
name|LLVMBuildPhi
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMTypeRef
name|Ty
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildCall
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Fn
parameter_list|,
name|LLVMValueRef
modifier|*
name|Args
parameter_list|,
name|unsigned
name|NumArgs
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildSelect
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|If
parameter_list|,
name|LLVMValueRef
name|Then
parameter_list|,
name|LLVMValueRef
name|Else
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildVAArg
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|List
parameter_list|,
name|LLVMTypeRef
name|Ty
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildExtractElement
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|VecVal
parameter_list|,
name|LLVMValueRef
name|Index
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildInsertElement
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|VecVal
parameter_list|,
name|LLVMValueRef
name|EltVal
parameter_list|,
name|LLVMValueRef
name|Index
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildShuffleVector
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|V1
parameter_list|,
name|LLVMValueRef
name|V2
parameter_list|,
name|LLVMValueRef
name|Mask
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildExtractValue
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|AggVal
parameter_list|,
name|unsigned
name|Index
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildInsertValue
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|AggVal
parameter_list|,
name|LLVMValueRef
name|EltVal
parameter_list|,
name|unsigned
name|Index
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildIsNull
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildIsNotNull
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMBuildPtrDiff
parameter_list|(
name|LLVMBuilderRef
parameter_list|,
name|LLVMValueRef
name|LHS
parameter_list|,
name|LLVMValueRef
name|RHS
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
comment|/*===-- Module providers --------------------------------------------------===*/
comment|/* Changes the type of M so it can be passed to FunctionPassManagers and the  * JIT.  They take ModuleProviders for historical reasons.  */
name|LLVMModuleProviderRef
name|LLVMCreateModuleProviderForExistingModule
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|)
function_decl|;
comment|/* Destroys the module M.  */
name|void
name|LLVMDisposeModuleProvider
parameter_list|(
name|LLVMModuleProviderRef
name|M
parameter_list|)
function_decl|;
comment|/*===-- Memory buffers ----------------------------------------------------===*/
name|LLVMBool
name|LLVMCreateMemoryBufferWithContentsOfFile
parameter_list|(
specifier|const
name|char
modifier|*
name|Path
parameter_list|,
name|LLVMMemoryBufferRef
modifier|*
name|OutMemBuf
parameter_list|,
name|char
modifier|*
modifier|*
name|OutMessage
parameter_list|)
function_decl|;
name|LLVMBool
name|LLVMCreateMemoryBufferWithSTDIN
parameter_list|(
name|LLVMMemoryBufferRef
modifier|*
name|OutMemBuf
parameter_list|,
name|char
modifier|*
modifier|*
name|OutMessage
parameter_list|)
function_decl|;
name|void
name|LLVMDisposeMemoryBuffer
parameter_list|(
name|LLVMMemoryBufferRef
name|MemBuf
parameter_list|)
function_decl|;
comment|/*===-- Pass Managers -----------------------------------------------------===*/
comment|/** Constructs a new whole-module pass pipeline. This type of pipeline is     suitable for link-time optimization and whole-module transformations.     See llvm::PassManager::PassManager. */
name|LLVMPassManagerRef
name|LLVMCreatePassManager
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/** Constructs a new function-by-function pass pipeline over the module     provider. It does not take ownership of the module provider. This type of     pipeline is suitable for code generation and JIT compilation tasks.     See llvm::FunctionPassManager::FunctionPassManager. */
name|LLVMPassManagerRef
name|LLVMCreateFunctionPassManagerForModule
parameter_list|(
name|LLVMModuleRef
name|M
parameter_list|)
function_decl|;
comment|/** Deprecated: Use LLVMCreateFunctionPassManagerForModule instead. */
name|LLVMPassManagerRef
name|LLVMCreateFunctionPassManager
parameter_list|(
name|LLVMModuleProviderRef
name|MP
parameter_list|)
function_decl|;
comment|/** Initializes, executes on the provided module, and finalizes all of the     passes scheduled in the pass manager. Returns 1 if any of the passes     modified the module, 0 otherwise. See llvm::PassManager::run(Module&). */
name|LLVMBool
name|LLVMRunPassManager
parameter_list|(
name|LLVMPassManagerRef
name|PM
parameter_list|,
name|LLVMModuleRef
name|M
parameter_list|)
function_decl|;
comment|/** Initializes all of the function passes scheduled in the function pass     manager. Returns 1 if any of the passes modified the module, 0 otherwise.     See llvm::FunctionPassManager::doInitialization. */
name|LLVMBool
name|LLVMInitializeFunctionPassManager
parameter_list|(
name|LLVMPassManagerRef
name|FPM
parameter_list|)
function_decl|;
comment|/** Executes all of the function passes scheduled in the function pass manager     on the provided function. Returns 1 if any of the passes modified the     function, false otherwise.     See llvm::FunctionPassManager::run(Function&). */
name|LLVMBool
name|LLVMRunFunctionPassManager
parameter_list|(
name|LLVMPassManagerRef
name|FPM
parameter_list|,
name|LLVMValueRef
name|F
parameter_list|)
function_decl|;
comment|/** Finalizes all of the function passes scheduled in in the function pass     manager. Returns 1 if any of the passes modified the module, 0 otherwise.     See llvm::FunctionPassManager::doFinalization. */
name|LLVMBool
name|LLVMFinalizeFunctionPassManager
parameter_list|(
name|LLVMPassManagerRef
name|FPM
parameter_list|)
function_decl|;
comment|/** Frees the memory of a pass pipeline. For function pipelines, does not free     the module provider.     See llvm::PassManagerBase::~PassManagerBase. */
name|void
name|LLVMDisposePassManager
parameter_list|(
name|LLVMPassManagerRef
name|PM
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MemoryBuffer
decl_stmt|;
name|class
name|PassManagerBase
decl_stmt|;
define|#
directive|define
name|DEFINE_SIMPLE_CONVERSION_FUNCTIONS
parameter_list|(
name|ty
parameter_list|,
name|ref
parameter_list|)
define|\
value|inline ty *unwrap(ref P) {                          \       return reinterpret_cast<ty*>(P);                  \     }                                                   \                                                         \     inline ref wrap(const ty *P) {                      \       return reinterpret_cast<ref>(const_cast<ty*>(P)); \     }
define|#
directive|define
name|DEFINE_ISA_CONVERSION_FUNCTIONS
parameter_list|(
name|ty
parameter_list|,
name|ref
parameter_list|)
define|\
value|DEFINE_SIMPLE_CONVERSION_FUNCTIONS(ty, ref)         \                                                         \     template<typename T>                                \     inline T *unwrap(ref P) {                           \       return cast<T>(unwrap(P));                        \     }
define|#
directive|define
name|DEFINE_STDCXX_CONVERSION_FUNCTIONS
parameter_list|(
name|ty
parameter_list|,
name|ref
parameter_list|)
define|\
value|DEFINE_SIMPLE_CONVERSION_FUNCTIONS(ty, ref)         \                                                         \     template<typename T>                                \     inline T *unwrap(ref P) {                           \       T *Q = (T*)unwrap(P);                             \       assert(Q&& "Invalid cast!");                     \       return Q;                                         \     }
name|DEFINE_ISA_CONVERSION_FUNCTIONS
argument_list|(
argument|Type
argument_list|,
argument|LLVMTypeRef
argument_list|)
name|DEFINE_ISA_CONVERSION_FUNCTIONS
argument_list|(
argument|Value
argument_list|,
argument|LLVMValueRef
argument_list|)
name|DEFINE_SIMPLE_CONVERSION_FUNCTIONS
argument_list|(
argument|Module
argument_list|,
argument|LLVMModuleRef
argument_list|)
name|DEFINE_SIMPLE_CONVERSION_FUNCTIONS
argument_list|(
argument|BasicBlock
argument_list|,
argument|LLVMBasicBlockRef
argument_list|)
name|DEFINE_SIMPLE_CONVERSION_FUNCTIONS
argument_list|(
argument|IRBuilder<>
argument_list|,
argument|LLVMBuilderRef
argument_list|)
name|DEFINE_SIMPLE_CONVERSION_FUNCTIONS
argument_list|(
argument|PATypeHolder
argument_list|,
argument|LLVMTypeHandleRef
argument_list|)
name|DEFINE_SIMPLE_CONVERSION_FUNCTIONS
argument_list|(
argument|MemoryBuffer
argument_list|,
argument|LLVMMemoryBufferRef
argument_list|)
name|DEFINE_SIMPLE_CONVERSION_FUNCTIONS
argument_list|(
argument|LLVMContext
argument_list|,
argument|LLVMContextRef
argument_list|)
name|DEFINE_SIMPLE_CONVERSION_FUNCTIONS
argument_list|(
argument|Use
argument_list|,
argument|LLVMUseRef
argument_list|)
name|DEFINE_STDCXX_CONVERSION_FUNCTIONS
argument_list|(
argument|PassManagerBase
argument_list|,
argument|LLVMPassManagerRef
argument_list|)
comment|/* LLVMModuleProviderRef exists for historical reasons, but now just holds a    * Module.    */
specifier|inline
name|Module
modifier|*
name|unwrap
parameter_list|(
name|LLVMModuleProviderRef
name|MP
parameter_list|)
block|{
return|return
name|reinterpret_cast
operator|<
name|Module
operator|*
operator|>
operator|(
name|MP
operator|)
return|;
block|}
undef|#
directive|undef
name|DEFINE_STDCXX_CONVERSION_FUNCTIONS
undef|#
directive|undef
name|DEFINE_ISA_CONVERSION_FUNCTIONS
undef|#
directive|undef
name|DEFINE_SIMPLE_CONVERSION_FUNCTIONS
comment|/* Specialized opaque context conversions.    */
specifier|inline
name|LLVMContext
modifier|*
modifier|*
name|unwrap
parameter_list|(
name|LLVMContextRef
modifier|*
name|Tys
parameter_list|)
block|{
return|return
name|reinterpret_cast
operator|<
name|LLVMContext
operator|*
operator|*
operator|>
operator|(
name|Tys
operator|)
return|;
block|}
specifier|inline
name|LLVMContextRef
modifier|*
name|wrap
parameter_list|(
specifier|const
name|LLVMContext
modifier|*
modifier|*
name|Tys
parameter_list|)
block|{
return|return
name|reinterpret_cast
operator|<
name|LLVMContextRef
operator|*
operator|>
operator|(
name|const_cast
operator|<
name|LLVMContext
operator|*
operator|*
operator|>
operator|(
name|Tys
operator|)
operator|)
return|;
block|}
comment|/* Specialized opaque type conversions.    */
specifier|inline
name|Type
modifier|*
modifier|*
name|unwrap
parameter_list|(
name|LLVMTypeRef
modifier|*
name|Tys
parameter_list|)
block|{
return|return
name|reinterpret_cast
operator|<
name|Type
operator|*
operator|*
operator|>
operator|(
name|Tys
operator|)
return|;
block|}
specifier|inline
name|LLVMTypeRef
modifier|*
name|wrap
parameter_list|(
specifier|const
name|Type
modifier|*
modifier|*
name|Tys
parameter_list|)
block|{
return|return
name|reinterpret_cast
operator|<
name|LLVMTypeRef
operator|*
operator|>
operator|(
name|const_cast
operator|<
name|Type
operator|*
operator|*
operator|>
operator|(
name|Tys
operator|)
operator|)
return|;
block|}
comment|/* Specialized opaque value conversions.    */
specifier|inline
name|Value
modifier|*
modifier|*
name|unwrap
parameter_list|(
name|LLVMValueRef
modifier|*
name|Vals
parameter_list|)
block|{
return|return
name|reinterpret_cast
operator|<
name|Value
operator|*
operator|*
operator|>
operator|(
name|Vals
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
operator|*
operator|*
name|unwrap
argument_list|(
argument|LLVMValueRef *Vals
argument_list|,
argument|unsigned Length
argument_list|)
block|{
if|#
directive|if
name|DEBUG
for|for
control|(
name|LLVMValueRef
modifier|*
name|I
init|=
name|Vals
init|,
modifier|*
name|E
init|=
name|Vals
operator|+
name|Length
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
name|cast
operator|<
name|T
operator|>
operator|(
operator|*
name|I
operator|)
expr_stmt|;
endif|#
directive|endif
return|return
name|reinterpret_cast
operator|<
name|T
operator|*
operator|*
operator|>
operator|(
name|Vals
operator|)
return|;
block|}
end_decl_stmt

begin_function
specifier|inline
name|LLVMValueRef
modifier|*
name|wrap
parameter_list|(
specifier|const
name|Value
modifier|*
modifier|*
name|Vals
parameter_list|)
block|{
return|return
name|reinterpret_cast
operator|<
name|LLVMValueRef
operator|*
operator|>
operator|(
name|const_cast
operator|<
name|Value
operator|*
operator|*
operator|>
operator|(
name|Vals
operator|)
operator|)
return|;
block|}
end_function

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|/* !defined(__cplusplus) */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !defined(LLVM_C_CORE_H) */
end_comment

end_unit

