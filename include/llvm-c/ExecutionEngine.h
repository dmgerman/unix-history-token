begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*===-- llvm-c/ExecutionEngine.h - ExecutionEngine Lib C Iface --*- C++ -*-===*\ |*                                                                            *| |*                     The LLVM Compiler Infrastructure                       *| |*                                                                            *| |* This file is distributed under the University of Illinois Open Source      *| |* License. See LICENSE.TXT for details.                                      *| |*                                                                            *| |*===----------------------------------------------------------------------===*| |*                                                                            *| |* This header declares the C interface to libLLVMExecutionEngine.o, which    *| |* implements various analyses of the LLVM IR.                                *| |*                                                                            *| |* Many exotic languages can interoperate with C code but have a harder time  *| |* with C++ due to name mangling. So in addition to C, this interface enables *| |* tools written in such languages.                                           *| |*                                                                            *| \*===----------------------------------------------------------------------===*/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_C_EXECUTIONENGINE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_C_EXECUTIONENGINE_H
end_define

begin_include
include|#
directive|include
file|"llvm-c/Core.h"
end_include

begin_include
include|#
directive|include
file|"llvm-c/Target.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
typedef|typedef
name|struct
name|LLVMOpaqueGenericValue
modifier|*
name|LLVMGenericValueRef
typedef|;
typedef|typedef
name|struct
name|LLVMOpaqueExecutionEngine
modifier|*
name|LLVMExecutionEngineRef
typedef|;
comment|/*===-- Operations on generic values --------------------------------------===*/
name|LLVMGenericValueRef
name|LLVMCreateGenericValueOfInt
parameter_list|(
name|LLVMTypeRef
name|Ty
parameter_list|,
name|unsigned
name|long
name|long
name|N
parameter_list|,
name|int
name|IsSigned
parameter_list|)
function_decl|;
name|LLVMGenericValueRef
name|LLVMCreateGenericValueOfPointer
parameter_list|(
name|void
modifier|*
name|P
parameter_list|)
function_decl|;
name|LLVMGenericValueRef
name|LLVMCreateGenericValueOfFloat
parameter_list|(
name|LLVMTypeRef
name|Ty
parameter_list|,
name|double
name|N
parameter_list|)
function_decl|;
name|unsigned
name|LLVMGenericValueIntWidth
parameter_list|(
name|LLVMGenericValueRef
name|GenValRef
parameter_list|)
function_decl|;
name|unsigned
name|long
name|long
name|LLVMGenericValueToInt
parameter_list|(
name|LLVMGenericValueRef
name|GenVal
parameter_list|,
name|int
name|IsSigned
parameter_list|)
function_decl|;
name|void
modifier|*
name|LLVMGenericValueToPointer
parameter_list|(
name|LLVMGenericValueRef
name|GenVal
parameter_list|)
function_decl|;
name|double
name|LLVMGenericValueToFloat
parameter_list|(
name|LLVMTypeRef
name|TyRef
parameter_list|,
name|LLVMGenericValueRef
name|GenVal
parameter_list|)
function_decl|;
name|void
name|LLVMDisposeGenericValue
parameter_list|(
name|LLVMGenericValueRef
name|GenVal
parameter_list|)
function_decl|;
comment|/*===-- Operations on execution engines -----------------------------------===*/
name|int
name|LLVMCreateExecutionEngine
parameter_list|(
name|LLVMExecutionEngineRef
modifier|*
name|OutEE
parameter_list|,
name|LLVMModuleProviderRef
name|MP
parameter_list|,
name|char
modifier|*
modifier|*
name|OutError
parameter_list|)
function_decl|;
name|int
name|LLVMCreateInterpreter
parameter_list|(
name|LLVMExecutionEngineRef
modifier|*
name|OutInterp
parameter_list|,
name|LLVMModuleProviderRef
name|MP
parameter_list|,
name|char
modifier|*
modifier|*
name|OutError
parameter_list|)
function_decl|;
name|int
name|LLVMCreateJITCompiler
parameter_list|(
name|LLVMExecutionEngineRef
modifier|*
name|OutJIT
parameter_list|,
name|LLVMModuleProviderRef
name|MP
parameter_list|,
name|unsigned
name|OptLevel
parameter_list|,
name|char
modifier|*
modifier|*
name|OutError
parameter_list|)
function_decl|;
name|void
name|LLVMDisposeExecutionEngine
parameter_list|(
name|LLVMExecutionEngineRef
name|EE
parameter_list|)
function_decl|;
name|void
name|LLVMRunStaticConstructors
parameter_list|(
name|LLVMExecutionEngineRef
name|EE
parameter_list|)
function_decl|;
name|void
name|LLVMRunStaticDestructors
parameter_list|(
name|LLVMExecutionEngineRef
name|EE
parameter_list|)
function_decl|;
name|int
name|LLVMRunFunctionAsMain
parameter_list|(
name|LLVMExecutionEngineRef
name|EE
parameter_list|,
name|LLVMValueRef
name|F
parameter_list|,
name|unsigned
name|ArgC
parameter_list|,
specifier|const
name|char
modifier|*
specifier|const
modifier|*
name|ArgV
parameter_list|,
specifier|const
name|char
modifier|*
specifier|const
modifier|*
name|EnvP
parameter_list|)
function_decl|;
name|LLVMGenericValueRef
name|LLVMRunFunction
parameter_list|(
name|LLVMExecutionEngineRef
name|EE
parameter_list|,
name|LLVMValueRef
name|F
parameter_list|,
name|unsigned
name|NumArgs
parameter_list|,
name|LLVMGenericValueRef
modifier|*
name|Args
parameter_list|)
function_decl|;
name|void
name|LLVMFreeMachineCodeForFunction
parameter_list|(
name|LLVMExecutionEngineRef
name|EE
parameter_list|,
name|LLVMValueRef
name|F
parameter_list|)
function_decl|;
name|void
name|LLVMAddModuleProvider
parameter_list|(
name|LLVMExecutionEngineRef
name|EE
parameter_list|,
name|LLVMModuleProviderRef
name|MP
parameter_list|)
function_decl|;
name|int
name|LLVMRemoveModuleProvider
parameter_list|(
name|LLVMExecutionEngineRef
name|EE
parameter_list|,
name|LLVMModuleProviderRef
name|MP
parameter_list|,
name|LLVMModuleRef
modifier|*
name|OutMod
parameter_list|,
name|char
modifier|*
modifier|*
name|OutError
parameter_list|)
function_decl|;
name|int
name|LLVMFindFunction
parameter_list|(
name|LLVMExecutionEngineRef
name|EE
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|,
name|LLVMValueRef
modifier|*
name|OutFn
parameter_list|)
function_decl|;
name|LLVMTargetDataRef
name|LLVMGetExecutionEngineTargetData
parameter_list|(
name|LLVMExecutionEngineRef
name|EE
parameter_list|)
function_decl|;
name|void
name|LLVMAddGlobalMapping
parameter_list|(
name|LLVMExecutionEngineRef
name|EE
parameter_list|,
name|LLVMValueRef
name|Global
parameter_list|,
name|void
modifier|*
name|Addr
parameter_list|)
function_decl|;
name|void
modifier|*
name|LLVMGetPointerToGlobal
parameter_list|(
name|LLVMExecutionEngineRef
name|EE
parameter_list|,
name|LLVMValueRef
name|Global
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|GenericValue
decl_stmt|;
name|class
name|ExecutionEngine
decl_stmt|;
define|#
directive|define
name|DEFINE_SIMPLE_CONVERSION_FUNCTIONS
parameter_list|(
name|ty
parameter_list|,
name|ref
parameter_list|)
define|\
value|inline ty *unwrap(ref P) {                          \       return reinterpret_cast<ty*>(P);                  \     }                                                   \                                                         \     inline ref wrap(const ty *P) {                      \       return reinterpret_cast<ref>(const_cast<ty*>(P)); \     }
name|DEFINE_SIMPLE_CONVERSION_FUNCTIONS
argument_list|(
argument|GenericValue
argument_list|,
argument|LLVMGenericValueRef
argument_list|)
name|DEFINE_SIMPLE_CONVERSION_FUNCTIONS
argument_list|(
argument|ExecutionEngine
argument_list|,
argument|LLVMExecutionEngineRef
argument_list|)
undef|#
directive|undef
name|DEFINE_SIMPLE_CONVERSION_FUNCTIONS
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* defined(__cplusplus) */
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

