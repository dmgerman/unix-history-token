begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*===-- llvm-c/ExecutionEngine.h - ExecutionEngine Lib C Iface --*- C++ -*-===*\ |*                                                                            *| |*                     The LLVM Compiler Infrastructure                       *| |*                                                                            *| |* This file is distributed under the University of Illinois Open Source      *| |* License. See LICENSE.TXT for details.                                      *| |*                                                                            *| |*===----------------------------------------------------------------------===*| |*                                                                            *| |* This header declares the C interface to libLLVMExecutionEngine.o, which    *| |* implements various analyses of the LLVM IR.                                *| |*                                                                            *| |* Many exotic languages can interoperate with C code but have a harder time  *| |* with C++ due to name mangling. So in addition to C, this interface enables *| |* tools written in such languages.                                           *| |*                                                                            *| \*===----------------------------------------------------------------------===*/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_C_EXECUTIONENGINE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_C_EXECUTIONENGINE_H
end_define

begin_include
include|#
directive|include
file|"llvm-c/Target.h"
end_include

begin_include
include|#
directive|include
file|"llvm-c/TargetMachine.h"
end_include

begin_include
include|#
directive|include
file|"llvm-c/Types.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/**  * @defgroup LLVMCExecutionEngine Execution Engine  * @ingroup LLVMC  *  * @{  */
name|void
name|LLVMLinkInMCJIT
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|LLVMLinkInInterpreter
parameter_list|(
name|void
parameter_list|)
function_decl|;
typedef|typedef
name|struct
name|LLVMOpaqueGenericValue
modifier|*
name|LLVMGenericValueRef
typedef|;
typedef|typedef
name|struct
name|LLVMOpaqueExecutionEngine
modifier|*
name|LLVMExecutionEngineRef
typedef|;
typedef|typedef
name|struct
name|LLVMOpaqueMCJITMemoryManager
modifier|*
name|LLVMMCJITMemoryManagerRef
typedef|;
struct|struct
name|LLVMMCJITCompilerOptions
block|{
name|unsigned
name|OptLevel
decl_stmt|;
name|LLVMCodeModel
name|CodeModel
decl_stmt|;
name|LLVMBool
name|NoFramePointerElim
decl_stmt|;
name|LLVMBool
name|EnableFastISel
decl_stmt|;
name|LLVMMCJITMemoryManagerRef
name|MCJMM
decl_stmt|;
block|}
struct|;
comment|/*===-- Operations on generic values --------------------------------------===*/
name|LLVMGenericValueRef
name|LLVMCreateGenericValueOfInt
parameter_list|(
name|LLVMTypeRef
name|Ty
parameter_list|,
name|unsigned
name|long
name|long
name|N
parameter_list|,
name|LLVMBool
name|IsSigned
parameter_list|)
function_decl|;
name|LLVMGenericValueRef
name|LLVMCreateGenericValueOfPointer
parameter_list|(
name|void
modifier|*
name|P
parameter_list|)
function_decl|;
name|LLVMGenericValueRef
name|LLVMCreateGenericValueOfFloat
parameter_list|(
name|LLVMTypeRef
name|Ty
parameter_list|,
name|double
name|N
parameter_list|)
function_decl|;
name|unsigned
name|LLVMGenericValueIntWidth
parameter_list|(
name|LLVMGenericValueRef
name|GenValRef
parameter_list|)
function_decl|;
name|unsigned
name|long
name|long
name|LLVMGenericValueToInt
parameter_list|(
name|LLVMGenericValueRef
name|GenVal
parameter_list|,
name|LLVMBool
name|IsSigned
parameter_list|)
function_decl|;
name|void
modifier|*
name|LLVMGenericValueToPointer
parameter_list|(
name|LLVMGenericValueRef
name|GenVal
parameter_list|)
function_decl|;
name|double
name|LLVMGenericValueToFloat
parameter_list|(
name|LLVMTypeRef
name|TyRef
parameter_list|,
name|LLVMGenericValueRef
name|GenVal
parameter_list|)
function_decl|;
name|void
name|LLVMDisposeGenericValue
parameter_list|(
name|LLVMGenericValueRef
name|GenVal
parameter_list|)
function_decl|;
comment|/*===-- Operations on execution engines -----------------------------------===*/
name|LLVMBool
name|LLVMCreateExecutionEngineForModule
parameter_list|(
name|LLVMExecutionEngineRef
modifier|*
name|OutEE
parameter_list|,
name|LLVMModuleRef
name|M
parameter_list|,
name|char
modifier|*
modifier|*
name|OutError
parameter_list|)
function_decl|;
name|LLVMBool
name|LLVMCreateInterpreterForModule
parameter_list|(
name|LLVMExecutionEngineRef
modifier|*
name|OutInterp
parameter_list|,
name|LLVMModuleRef
name|M
parameter_list|,
name|char
modifier|*
modifier|*
name|OutError
parameter_list|)
function_decl|;
name|LLVMBool
name|LLVMCreateJITCompilerForModule
parameter_list|(
name|LLVMExecutionEngineRef
modifier|*
name|OutJIT
parameter_list|,
name|LLVMModuleRef
name|M
parameter_list|,
name|unsigned
name|OptLevel
parameter_list|,
name|char
modifier|*
modifier|*
name|OutError
parameter_list|)
function_decl|;
name|void
name|LLVMInitializeMCJITCompilerOptions
parameter_list|(
name|struct
name|LLVMMCJITCompilerOptions
modifier|*
name|Options
parameter_list|,
name|size_t
name|SizeOfOptions
parameter_list|)
function_decl|;
comment|/**  * Create an MCJIT execution engine for a module, with the given options. It is  * the responsibility of the caller to ensure that all fields in Options up to  * the given SizeOfOptions are initialized. It is correct to pass a smaller  * value of SizeOfOptions that omits some fields. The canonical way of using  * this is:  *  * LLVMMCJITCompilerOptions options;  * LLVMInitializeMCJITCompilerOptions(&options, sizeof(options));  * ... fill in those options you care about  * LLVMCreateMCJITCompilerForModule(&jit, mod,&options, sizeof(options),  *&error);  *  * Note that this is also correct, though possibly suboptimal:  *  * LLVMCreateMCJITCompilerForModule(&jit, mod, 0, 0,&error);  */
name|LLVMBool
name|LLVMCreateMCJITCompilerForModule
parameter_list|(
name|LLVMExecutionEngineRef
modifier|*
name|OutJIT
parameter_list|,
name|LLVMModuleRef
name|M
parameter_list|,
name|struct
name|LLVMMCJITCompilerOptions
modifier|*
name|Options
parameter_list|,
name|size_t
name|SizeOfOptions
parameter_list|,
name|char
modifier|*
modifier|*
name|OutError
parameter_list|)
function_decl|;
name|void
name|LLVMDisposeExecutionEngine
parameter_list|(
name|LLVMExecutionEngineRef
name|EE
parameter_list|)
function_decl|;
name|void
name|LLVMRunStaticConstructors
parameter_list|(
name|LLVMExecutionEngineRef
name|EE
parameter_list|)
function_decl|;
name|void
name|LLVMRunStaticDestructors
parameter_list|(
name|LLVMExecutionEngineRef
name|EE
parameter_list|)
function_decl|;
name|int
name|LLVMRunFunctionAsMain
parameter_list|(
name|LLVMExecutionEngineRef
name|EE
parameter_list|,
name|LLVMValueRef
name|F
parameter_list|,
name|unsigned
name|ArgC
parameter_list|,
specifier|const
name|char
modifier|*
specifier|const
modifier|*
name|ArgV
parameter_list|,
specifier|const
name|char
modifier|*
specifier|const
modifier|*
name|EnvP
parameter_list|)
function_decl|;
name|LLVMGenericValueRef
name|LLVMRunFunction
parameter_list|(
name|LLVMExecutionEngineRef
name|EE
parameter_list|,
name|LLVMValueRef
name|F
parameter_list|,
name|unsigned
name|NumArgs
parameter_list|,
name|LLVMGenericValueRef
modifier|*
name|Args
parameter_list|)
function_decl|;
name|void
name|LLVMFreeMachineCodeForFunction
parameter_list|(
name|LLVMExecutionEngineRef
name|EE
parameter_list|,
name|LLVMValueRef
name|F
parameter_list|)
function_decl|;
name|void
name|LLVMAddModule
parameter_list|(
name|LLVMExecutionEngineRef
name|EE
parameter_list|,
name|LLVMModuleRef
name|M
parameter_list|)
function_decl|;
name|LLVMBool
name|LLVMRemoveModule
parameter_list|(
name|LLVMExecutionEngineRef
name|EE
parameter_list|,
name|LLVMModuleRef
name|M
parameter_list|,
name|LLVMModuleRef
modifier|*
name|OutMod
parameter_list|,
name|char
modifier|*
modifier|*
name|OutError
parameter_list|)
function_decl|;
name|LLVMBool
name|LLVMFindFunction
parameter_list|(
name|LLVMExecutionEngineRef
name|EE
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|,
name|LLVMValueRef
modifier|*
name|OutFn
parameter_list|)
function_decl|;
name|void
modifier|*
name|LLVMRecompileAndRelinkFunction
parameter_list|(
name|LLVMExecutionEngineRef
name|EE
parameter_list|,
name|LLVMValueRef
name|Fn
parameter_list|)
function_decl|;
name|LLVMTargetDataRef
name|LLVMGetExecutionEngineTargetData
parameter_list|(
name|LLVMExecutionEngineRef
name|EE
parameter_list|)
function_decl|;
name|LLVMTargetMachineRef
name|LLVMGetExecutionEngineTargetMachine
parameter_list|(
name|LLVMExecutionEngineRef
name|EE
parameter_list|)
function_decl|;
name|void
name|LLVMAddGlobalMapping
parameter_list|(
name|LLVMExecutionEngineRef
name|EE
parameter_list|,
name|LLVMValueRef
name|Global
parameter_list|,
name|void
modifier|*
name|Addr
parameter_list|)
function_decl|;
name|void
modifier|*
name|LLVMGetPointerToGlobal
parameter_list|(
name|LLVMExecutionEngineRef
name|EE
parameter_list|,
name|LLVMValueRef
name|Global
parameter_list|)
function_decl|;
name|uint64_t
name|LLVMGetGlobalValueAddress
parameter_list|(
name|LLVMExecutionEngineRef
name|EE
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|uint64_t
name|LLVMGetFunctionAddress
parameter_list|(
name|LLVMExecutionEngineRef
name|EE
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
comment|/*===-- Operations on memory managers -------------------------------------===*/
typedef|typedef
name|uint8_t
modifier|*
function_decl|(
modifier|*
name|LLVMMemoryManagerAllocateCodeSectionCallback
function_decl|)
parameter_list|(
name|void
modifier|*
name|Opaque
parameter_list|,
name|uintptr_t
name|Size
parameter_list|,
name|unsigned
name|Alignment
parameter_list|,
name|unsigned
name|SectionID
parameter_list|,
specifier|const
name|char
modifier|*
name|SectionName
parameter_list|)
function_decl|;
typedef|typedef
name|uint8_t
modifier|*
function_decl|(
modifier|*
name|LLVMMemoryManagerAllocateDataSectionCallback
function_decl|)
parameter_list|(
name|void
modifier|*
name|Opaque
parameter_list|,
name|uintptr_t
name|Size
parameter_list|,
name|unsigned
name|Alignment
parameter_list|,
name|unsigned
name|SectionID
parameter_list|,
specifier|const
name|char
modifier|*
name|SectionName
parameter_list|,
name|LLVMBool
name|IsReadOnly
parameter_list|)
function_decl|;
typedef|typedef
name|LLVMBool
function_decl|(
modifier|*
name|LLVMMemoryManagerFinalizeMemoryCallback
function_decl|)
parameter_list|(
name|void
modifier|*
name|Opaque
parameter_list|,
name|char
modifier|*
modifier|*
name|ErrMsg
parameter_list|)
function_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|LLVMMemoryManagerDestroyCallback
function_decl|)
parameter_list|(
name|void
modifier|*
name|Opaque
parameter_list|)
function_decl|;
comment|/**  * Create a simple custom MCJIT memory manager. This memory manager can  * intercept allocations in a module-oblivious way. This will return NULL  * if any of the passed functions are NULL.  *  * @param Opaque An opaque client object to pass back to the callbacks.  * @param AllocateCodeSection Allocate a block of memory for executable code.  * @param AllocateDataSection Allocate a block of memory for data.  * @param FinalizeMemory Set page permissions and flush cache. Return 0 on  *   success, 1 on error.  */
name|LLVMMCJITMemoryManagerRef
name|LLVMCreateSimpleMCJITMemoryManager
parameter_list|(
name|void
modifier|*
name|Opaque
parameter_list|,
name|LLVMMemoryManagerAllocateCodeSectionCallback
name|AllocateCodeSection
parameter_list|,
name|LLVMMemoryManagerAllocateDataSectionCallback
name|AllocateDataSection
parameter_list|,
name|LLVMMemoryManagerFinalizeMemoryCallback
name|FinalizeMemory
parameter_list|,
name|LLVMMemoryManagerDestroyCallback
name|Destroy
parameter_list|)
function_decl|;
name|void
name|LLVMDisposeMCJITMemoryManager
parameter_list|(
name|LLVMMCJITMemoryManagerRef
name|MM
parameter_list|)
function_decl|;
comment|/**  * @}  */
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* defined(__cplusplus) */
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

