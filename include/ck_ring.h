begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2009-2015 Samy Al Bahra.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CK_RING_H
end_ifndef

begin_define
define|#
directive|define
name|CK_RING_H
end_define

begin_include
include|#
directive|include
file|<ck_cc.h>
end_include

begin_include
include|#
directive|include
file|<ck_md.h>
end_include

begin_include
include|#
directive|include
file|<ck_pr.h>
end_include

begin_include
include|#
directive|include
file|<ck_stdbool.h>
end_include

begin_include
include|#
directive|include
file|<ck_string.h>
end_include

begin_comment
comment|/*  * Concurrent ring buffer.  */
end_comment

begin_struct
struct|struct
name|ck_ring
block|{
name|unsigned
name|int
name|c_head
decl_stmt|;
name|char
name|pad
index|[
name|CK_MD_CACHELINE
operator|-
expr|sizeof
operator|(
name|unsigned
name|int
operator|)
expr|]
expr_stmt|;
name|unsigned
name|int
name|p_tail
decl_stmt|;
name|unsigned
name|int
name|p_head
decl_stmt|;
name|char
name|_pad
index|[
name|CK_MD_CACHELINE
operator|-
expr|sizeof
operator|(
name|unsigned
name|int
operator|)
operator|*
literal|2
expr|]
expr_stmt|;
name|unsigned
name|int
name|size
decl_stmt|;
name|unsigned
name|int
name|mask
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|ck_ring
name|ck_ring_t
typedef|;
end_typedef

begin_struct
struct|struct
name|ck_ring_buffer
block|{
name|void
modifier|*
name|value
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|ck_ring_buffer
name|ck_ring_buffer_t
typedef|;
end_typedef

begin_function
name|CK_CC_INLINE
specifier|static
name|unsigned
name|int
name|ck_ring_size
parameter_list|(
specifier|const
name|struct
name|ck_ring
modifier|*
name|ring
parameter_list|)
block|{
name|unsigned
name|int
name|c
decl_stmt|,
name|p
decl_stmt|;
name|c
operator|=
name|ck_pr_load_uint
argument_list|(
operator|&
name|ring
operator|->
name|c_head
argument_list|)
expr_stmt|;
name|p
operator|=
name|ck_pr_load_uint
argument_list|(
operator|&
name|ring
operator|->
name|p_tail
argument_list|)
expr_stmt|;
return|return
operator|(
name|p
operator|-
name|c
operator|)
operator|&
name|ring
operator|->
name|mask
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|unsigned
name|int
name|ck_ring_capacity
parameter_list|(
specifier|const
name|struct
name|ck_ring
modifier|*
name|ring
parameter_list|)
block|{
return|return
name|ring
operator|->
name|size
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_ring_init
parameter_list|(
name|struct
name|ck_ring
modifier|*
name|ring
parameter_list|,
name|unsigned
name|int
name|size
parameter_list|)
block|{
name|ring
operator|->
name|size
operator|=
name|size
expr_stmt|;
name|ring
operator|->
name|mask
operator|=
name|size
operator|-
literal|1
expr_stmt|;
name|ring
operator|->
name|p_tail
operator|=
literal|0
expr_stmt|;
name|ring
operator|->
name|p_head
operator|=
literal|0
expr_stmt|;
name|ring
operator|->
name|c_head
operator|=
literal|0
expr_stmt|;
return|return;
block|}
end_function

begin_comment
comment|/*  * The _ck_ring_* namespace is internal only and must not used externally.  */
end_comment

begin_function
name|CK_CC_FORCE_INLINE
specifier|static
name|bool
name|_ck_ring_enqueue_sp
parameter_list|(
name|struct
name|ck_ring
modifier|*
name|ring
parameter_list|,
name|void
modifier|*
name|CK_CC_RESTRICT
name|buffer
parameter_list|,
specifier|const
name|void
modifier|*
name|CK_CC_RESTRICT
name|entry
parameter_list|,
name|unsigned
name|int
name|ts
parameter_list|,
name|unsigned
name|int
modifier|*
name|size
parameter_list|)
block|{
specifier|const
name|unsigned
name|int
name|mask
init|=
name|ring
operator|->
name|mask
decl_stmt|;
name|unsigned
name|int
name|consumer
decl_stmt|,
name|producer
decl_stmt|,
name|delta
decl_stmt|;
name|consumer
operator|=
name|ck_pr_load_uint
argument_list|(
operator|&
name|ring
operator|->
name|c_head
argument_list|)
expr_stmt|;
name|producer
operator|=
name|ring
operator|->
name|p_tail
expr_stmt|;
name|delta
operator|=
name|producer
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|size
operator|!=
name|NULL
condition|)
operator|*
name|size
operator|=
operator|(
name|producer
operator|-
name|consumer
operator|)
operator|&
name|mask
expr_stmt|;
if|if
condition|(
name|CK_CC_UNLIKELY
argument_list|(
operator|(
name|delta
operator|&
name|mask
operator|)
operator|==
operator|(
name|consumer
operator|&
name|mask
operator|)
argument_list|)
condition|)
return|return
name|false
return|;
name|buffer
operator|=
operator|(
name|char
operator|*
operator|)
name|buffer
operator|+
name|ts
operator|*
operator|(
name|producer
operator|&
name|mask
operator|)
expr_stmt|;
name|memcpy
argument_list|(
name|buffer
argument_list|,
name|entry
argument_list|,
name|ts
argument_list|)
expr_stmt|;
comment|/* 	 * Make sure to update slot value before indicating 	 * that the slot is available for consumption. 	 */
name|ck_pr_fence_store
argument_list|()
expr_stmt|;
name|ck_pr_store_uint
argument_list|(
operator|&
name|ring
operator|->
name|p_tail
argument_list|,
name|delta
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
end_function

begin_function
name|CK_CC_FORCE_INLINE
specifier|static
name|bool
name|_ck_ring_enqueue_sp_size
parameter_list|(
name|struct
name|ck_ring
modifier|*
name|ring
parameter_list|,
name|void
modifier|*
name|CK_CC_RESTRICT
name|buffer
parameter_list|,
specifier|const
name|void
modifier|*
name|CK_CC_RESTRICT
name|entry
parameter_list|,
name|unsigned
name|int
name|ts
parameter_list|,
name|unsigned
name|int
modifier|*
name|size
parameter_list|)
block|{
name|unsigned
name|int
name|sz
decl_stmt|;
name|bool
name|r
decl_stmt|;
name|r
operator|=
name|_ck_ring_enqueue_sp
argument_list|(
name|ring
argument_list|,
name|buffer
argument_list|,
name|entry
argument_list|,
name|ts
argument_list|,
operator|&
name|sz
argument_list|)
expr_stmt|;
operator|*
name|size
operator|=
name|sz
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
name|CK_CC_FORCE_INLINE
specifier|static
name|bool
name|_ck_ring_dequeue_sc
parameter_list|(
name|struct
name|ck_ring
modifier|*
name|ring
parameter_list|,
specifier|const
name|void
modifier|*
name|CK_CC_RESTRICT
name|buffer
parameter_list|,
name|void
modifier|*
name|CK_CC_RESTRICT
name|target
parameter_list|,
name|unsigned
name|int
name|size
parameter_list|)
block|{
specifier|const
name|unsigned
name|int
name|mask
init|=
name|ring
operator|->
name|mask
decl_stmt|;
name|unsigned
name|int
name|consumer
decl_stmt|,
name|producer
decl_stmt|;
name|consumer
operator|=
name|ring
operator|->
name|c_head
expr_stmt|;
name|producer
operator|=
name|ck_pr_load_uint
argument_list|(
operator|&
name|ring
operator|->
name|p_tail
argument_list|)
expr_stmt|;
if|if
condition|(
name|CK_CC_UNLIKELY
argument_list|(
name|consumer
operator|==
name|producer
argument_list|)
condition|)
return|return
name|false
return|;
comment|/* 	 * Make sure to serialize with respect to our snapshot 	 * of the producer counter. 	 */
name|ck_pr_fence_load
argument_list|()
expr_stmt|;
name|buffer
operator|=
operator|(
specifier|const
name|char
operator|*
operator|)
name|buffer
operator|+
name|size
operator|*
operator|(
name|consumer
operator|&
name|mask
operator|)
expr_stmt|;
name|memcpy
argument_list|(
name|target
argument_list|,
name|buffer
argument_list|,
name|size
argument_list|)
expr_stmt|;
comment|/* 	 * Make sure copy is completed with respect to consumer 	 * update. 	 */
name|ck_pr_fence_store
argument_list|()
expr_stmt|;
name|ck_pr_store_uint
argument_list|(
operator|&
name|ring
operator|->
name|c_head
argument_list|,
name|consumer
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
end_function

begin_function
name|CK_CC_FORCE_INLINE
specifier|static
name|bool
name|_ck_ring_enqueue_mp
parameter_list|(
name|struct
name|ck_ring
modifier|*
name|ring
parameter_list|,
name|void
modifier|*
name|buffer
parameter_list|,
specifier|const
name|void
modifier|*
name|entry
parameter_list|,
name|unsigned
name|int
name|ts
parameter_list|,
name|unsigned
name|int
modifier|*
name|size
parameter_list|)
block|{
specifier|const
name|unsigned
name|int
name|mask
init|=
name|ring
operator|->
name|mask
decl_stmt|;
name|unsigned
name|int
name|producer
decl_stmt|,
name|consumer
decl_stmt|,
name|delta
decl_stmt|;
name|bool
name|r
init|=
name|true
decl_stmt|;
name|producer
operator|=
name|ck_pr_load_uint
argument_list|(
operator|&
name|ring
operator|->
name|p_head
argument_list|)
expr_stmt|;
do|do
block|{
comment|/* 		 * The snapshot of producer must be up to date with 		 * respect to consumer. 		 */
name|ck_pr_fence_load
argument_list|()
expr_stmt|;
name|consumer
operator|=
name|ck_pr_load_uint
argument_list|(
operator|&
name|ring
operator|->
name|c_head
argument_list|)
expr_stmt|;
name|delta
operator|=
name|producer
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|CK_CC_UNLIKELY
argument_list|(
operator|(
name|delta
operator|&
name|mask
operator|)
operator|==
operator|(
name|consumer
operator|&
name|mask
operator|)
argument_list|)
condition|)
block|{
name|r
operator|=
name|false
expr_stmt|;
goto|goto
name|leave
goto|;
block|}
block|}
do|while
condition|(
name|ck_pr_cas_uint_value
argument_list|(
operator|&
name|ring
operator|->
name|p_head
argument_list|,
name|producer
argument_list|,
name|delta
argument_list|,
operator|&
name|producer
argument_list|)
operator|==
name|false
condition|)
do|;
name|buffer
operator|=
operator|(
name|char
operator|*
operator|)
name|buffer
operator|+
name|ts
operator|*
operator|(
name|producer
operator|&
name|mask
operator|)
expr_stmt|;
name|memcpy
argument_list|(
name|buffer
argument_list|,
name|entry
argument_list|,
name|ts
argument_list|)
expr_stmt|;
comment|/* 	 * Wait until all concurrent producers have completed writing 	 * their data into the ring buffer. 	 */
while|while
condition|(
name|ck_pr_load_uint
argument_list|(
operator|&
name|ring
operator|->
name|p_tail
argument_list|)
operator|!=
name|producer
condition|)
name|ck_pr_stall
argument_list|()
expr_stmt|;
comment|/* 	 * Ensure that copy is completed before updating shared producer 	 * counter. 	 */
name|ck_pr_fence_store
argument_list|()
expr_stmt|;
name|ck_pr_store_uint
argument_list|(
operator|&
name|ring
operator|->
name|p_tail
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|leave
label|:
if|if
condition|(
name|size
operator|!=
name|NULL
condition|)
operator|*
name|size
operator|=
operator|(
name|producer
operator|-
name|consumer
operator|)
operator|&
name|mask
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
name|CK_CC_FORCE_INLINE
specifier|static
name|bool
name|_ck_ring_enqueue_mp_size
parameter_list|(
name|struct
name|ck_ring
modifier|*
name|ring
parameter_list|,
name|void
modifier|*
name|buffer
parameter_list|,
specifier|const
name|void
modifier|*
name|entry
parameter_list|,
name|unsigned
name|int
name|ts
parameter_list|,
name|unsigned
name|int
modifier|*
name|size
parameter_list|)
block|{
name|unsigned
name|int
name|sz
decl_stmt|;
name|bool
name|r
decl_stmt|;
name|r
operator|=
name|_ck_ring_enqueue_mp
argument_list|(
name|ring
argument_list|,
name|buffer
argument_list|,
name|entry
argument_list|,
name|ts
argument_list|,
operator|&
name|sz
argument_list|)
expr_stmt|;
operator|*
name|size
operator|=
name|sz
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
name|CK_CC_FORCE_INLINE
specifier|static
name|bool
name|_ck_ring_trydequeue_mc
parameter_list|(
name|struct
name|ck_ring
modifier|*
name|ring
parameter_list|,
specifier|const
name|void
modifier|*
name|buffer
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|unsigned
name|int
name|size
parameter_list|)
block|{
specifier|const
name|unsigned
name|int
name|mask
init|=
name|ring
operator|->
name|mask
decl_stmt|;
name|unsigned
name|int
name|consumer
decl_stmt|,
name|producer
decl_stmt|;
name|consumer
operator|=
name|ck_pr_load_uint
argument_list|(
operator|&
name|ring
operator|->
name|c_head
argument_list|)
expr_stmt|;
name|ck_pr_fence_load
argument_list|()
expr_stmt|;
name|producer
operator|=
name|ck_pr_load_uint
argument_list|(
operator|&
name|ring
operator|->
name|p_tail
argument_list|)
expr_stmt|;
if|if
condition|(
name|CK_CC_UNLIKELY
argument_list|(
name|consumer
operator|==
name|producer
argument_list|)
condition|)
return|return
name|false
return|;
name|ck_pr_fence_load
argument_list|()
expr_stmt|;
name|buffer
operator|=
operator|(
specifier|const
name|char
operator|*
operator|)
name|buffer
operator|+
name|size
operator|*
operator|(
name|consumer
operator|&
name|mask
operator|)
expr_stmt|;
name|memcpy
argument_list|(
name|data
argument_list|,
name|buffer
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|ck_pr_fence_store_atomic
argument_list|()
expr_stmt|;
return|return
name|ck_pr_cas_uint
argument_list|(
operator|&
name|ring
operator|->
name|c_head
argument_list|,
name|consumer
argument_list|,
name|consumer
operator|+
literal|1
argument_list|)
return|;
block|}
end_function

begin_function
name|CK_CC_FORCE_INLINE
specifier|static
name|bool
name|_ck_ring_dequeue_mc
parameter_list|(
name|struct
name|ck_ring
modifier|*
name|ring
parameter_list|,
specifier|const
name|void
modifier|*
name|buffer
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|unsigned
name|int
name|ts
parameter_list|)
block|{
specifier|const
name|unsigned
name|int
name|mask
init|=
name|ring
operator|->
name|mask
decl_stmt|;
name|unsigned
name|int
name|consumer
decl_stmt|,
name|producer
decl_stmt|;
name|consumer
operator|=
name|ck_pr_load_uint
argument_list|(
operator|&
name|ring
operator|->
name|c_head
argument_list|)
expr_stmt|;
do|do
block|{
specifier|const
name|char
modifier|*
name|target
decl_stmt|;
comment|/* 		 * Producer counter must represent state relative to 		 * our latest consumer snapshot. 		 */
name|ck_pr_fence_load
argument_list|()
expr_stmt|;
name|producer
operator|=
name|ck_pr_load_uint
argument_list|(
operator|&
name|ring
operator|->
name|p_tail
argument_list|)
expr_stmt|;
if|if
condition|(
name|CK_CC_UNLIKELY
argument_list|(
name|consumer
operator|==
name|producer
argument_list|)
condition|)
return|return
name|false
return|;
name|ck_pr_fence_load
argument_list|()
expr_stmt|;
name|target
operator|=
operator|(
specifier|const
name|char
operator|*
operator|)
name|buffer
operator|+
name|ts
operator|*
operator|(
name|consumer
operator|&
name|mask
operator|)
expr_stmt|;
name|memcpy
argument_list|(
name|data
argument_list|,
name|target
argument_list|,
name|ts
argument_list|)
expr_stmt|;
comment|/* Serialize load with respect to head update. */
name|ck_pr_fence_store_atomic
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|ck_pr_cas_uint_value
argument_list|(
operator|&
name|ring
operator|->
name|c_head
argument_list|,
name|consumer
argument_list|,
name|consumer
operator|+
literal|1
argument_list|,
operator|&
name|consumer
argument_list|)
operator|==
name|false
condition|)
do|;
return|return
name|true
return|;
block|}
end_function

begin_comment
comment|/*  * The ck_ring_*_spsc namespace is the public interface for interacting with a  * ring buffer containing pointers. Correctness is only provided if there is up  * to one concurrent consumer and up to one concurrent producer.  */
end_comment

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_ring_enqueue_spsc_size
parameter_list|(
name|struct
name|ck_ring
modifier|*
name|ring
parameter_list|,
name|struct
name|ck_ring_buffer
modifier|*
name|buffer
parameter_list|,
specifier|const
name|void
modifier|*
name|entry
parameter_list|,
name|unsigned
name|int
modifier|*
name|size
parameter_list|)
block|{
return|return
name|_ck_ring_enqueue_sp_size
argument_list|(
name|ring
argument_list|,
name|buffer
argument_list|,
operator|&
name|entry
argument_list|,
sizeof|sizeof
argument_list|(
name|entry
argument_list|)
argument_list|,
name|size
argument_list|)
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_ring_enqueue_spsc
parameter_list|(
name|struct
name|ck_ring
modifier|*
name|ring
parameter_list|,
name|struct
name|ck_ring_buffer
modifier|*
name|buffer
parameter_list|,
specifier|const
name|void
modifier|*
name|entry
parameter_list|)
block|{
return|return
name|_ck_ring_enqueue_sp
argument_list|(
name|ring
argument_list|,
name|buffer
argument_list|,
operator|&
name|entry
argument_list|,
sizeof|sizeof
argument_list|(
name|entry
argument_list|)
argument_list|,
name|NULL
argument_list|)
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_ring_dequeue_spsc
parameter_list|(
name|struct
name|ck_ring
modifier|*
name|ring
parameter_list|,
specifier|const
name|struct
name|ck_ring_buffer
modifier|*
name|buffer
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
return|return
name|_ck_ring_dequeue_sc
argument_list|(
name|ring
argument_list|,
name|buffer
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/*  * The ck_ring_*_mpmc namespace is the public interface for interacting with a  * ring buffer containing pointers. Correctness is provided for any number of  * producers and consumers.  */
end_comment

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_ring_enqueue_mpmc
parameter_list|(
name|struct
name|ck_ring
modifier|*
name|ring
parameter_list|,
name|struct
name|ck_ring_buffer
modifier|*
name|buffer
parameter_list|,
specifier|const
name|void
modifier|*
name|entry
parameter_list|)
block|{
return|return
name|_ck_ring_enqueue_mp
argument_list|(
name|ring
argument_list|,
name|buffer
argument_list|,
operator|&
name|entry
argument_list|,
sizeof|sizeof
argument_list|(
name|entry
argument_list|)
argument_list|,
name|NULL
argument_list|)
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_ring_enqueue_mpmc_size
parameter_list|(
name|struct
name|ck_ring
modifier|*
name|ring
parameter_list|,
name|struct
name|ck_ring_buffer
modifier|*
name|buffer
parameter_list|,
specifier|const
name|void
modifier|*
name|entry
parameter_list|,
name|unsigned
name|int
modifier|*
name|size
parameter_list|)
block|{
return|return
name|_ck_ring_enqueue_mp_size
argument_list|(
name|ring
argument_list|,
name|buffer
argument_list|,
operator|&
name|entry
argument_list|,
sizeof|sizeof
argument_list|(
name|entry
argument_list|)
argument_list|,
name|size
argument_list|)
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_ring_trydequeue_mpmc
parameter_list|(
name|struct
name|ck_ring
modifier|*
name|ring
parameter_list|,
specifier|const
name|struct
name|ck_ring_buffer
modifier|*
name|buffer
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
return|return
name|_ck_ring_trydequeue_mc
argument_list|(
name|ring
argument_list|,
name|buffer
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_ring_dequeue_mpmc
parameter_list|(
name|struct
name|ck_ring
modifier|*
name|ring
parameter_list|,
specifier|const
name|struct
name|ck_ring_buffer
modifier|*
name|buffer
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
return|return
name|_ck_ring_dequeue_mc
argument_list|(
name|ring
argument_list|,
name|buffer
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/*  * The ck_ring_*_spmc namespace is the public interface for interacting with a  * ring buffer containing pointers. Correctness is provided for any number of  * consumers with up to one concurrent producer.  */
end_comment

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_ring_enqueue_spmc_size
parameter_list|(
name|struct
name|ck_ring
modifier|*
name|ring
parameter_list|,
name|struct
name|ck_ring_buffer
modifier|*
name|buffer
parameter_list|,
specifier|const
name|void
modifier|*
name|entry
parameter_list|,
name|unsigned
name|int
modifier|*
name|size
parameter_list|)
block|{
return|return
name|_ck_ring_enqueue_sp_size
argument_list|(
name|ring
argument_list|,
name|buffer
argument_list|,
operator|&
name|entry
argument_list|,
sizeof|sizeof
argument_list|(
name|entry
argument_list|)
argument_list|,
name|size
argument_list|)
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_ring_enqueue_spmc
parameter_list|(
name|struct
name|ck_ring
modifier|*
name|ring
parameter_list|,
name|struct
name|ck_ring_buffer
modifier|*
name|buffer
parameter_list|,
specifier|const
name|void
modifier|*
name|entry
parameter_list|)
block|{
return|return
name|_ck_ring_enqueue_sp
argument_list|(
name|ring
argument_list|,
name|buffer
argument_list|,
operator|&
name|entry
argument_list|,
sizeof|sizeof
argument_list|(
name|entry
argument_list|)
argument_list|,
name|NULL
argument_list|)
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_ring_trydequeue_spmc
parameter_list|(
name|struct
name|ck_ring
modifier|*
name|ring
parameter_list|,
specifier|const
name|struct
name|ck_ring_buffer
modifier|*
name|buffer
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
return|return
name|_ck_ring_trydequeue_mc
argument_list|(
name|ring
argument_list|,
name|buffer
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_ring_dequeue_spmc
parameter_list|(
name|struct
name|ck_ring
modifier|*
name|ring
parameter_list|,
specifier|const
name|struct
name|ck_ring_buffer
modifier|*
name|buffer
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
return|return
name|_ck_ring_dequeue_mc
argument_list|(
name|ring
argument_list|,
name|buffer
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/*  * The ck_ring_*_mpsc namespace is the public interface for interacting with a  * ring buffer containing pointers. Correctness is provided for any number of  * producers with up to one concurrent consumers.  */
end_comment

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_ring_enqueue_mpsc
parameter_list|(
name|struct
name|ck_ring
modifier|*
name|ring
parameter_list|,
name|struct
name|ck_ring_buffer
modifier|*
name|buffer
parameter_list|,
specifier|const
name|void
modifier|*
name|entry
parameter_list|)
block|{
return|return
name|_ck_ring_enqueue_mp
argument_list|(
name|ring
argument_list|,
name|buffer
argument_list|,
operator|&
name|entry
argument_list|,
sizeof|sizeof
argument_list|(
name|entry
argument_list|)
argument_list|,
name|NULL
argument_list|)
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_ring_enqueue_mpsc_size
parameter_list|(
name|struct
name|ck_ring
modifier|*
name|ring
parameter_list|,
name|struct
name|ck_ring_buffer
modifier|*
name|buffer
parameter_list|,
specifier|const
name|void
modifier|*
name|entry
parameter_list|,
name|unsigned
name|int
modifier|*
name|size
parameter_list|)
block|{
return|return
name|_ck_ring_enqueue_mp_size
argument_list|(
name|ring
argument_list|,
name|buffer
argument_list|,
operator|&
name|entry
argument_list|,
sizeof|sizeof
argument_list|(
name|entry
argument_list|)
argument_list|,
name|size
argument_list|)
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_ring_dequeue_mpsc
parameter_list|(
name|struct
name|ck_ring
modifier|*
name|ring
parameter_list|,
specifier|const
name|struct
name|ck_ring_buffer
modifier|*
name|buffer
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
return|return
name|_ck_ring_dequeue_sc
argument_list|(
name|ring
argument_list|,
name|buffer
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/*  * CK_RING_PROTOTYPE is used to define a type-safe interface for inlining  * values of a particular type in the ring the buffer.  */
end_comment

begin_define
define|#
directive|define
name|CK_RING_PROTOTYPE
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|)
define|\
value|CK_CC_INLINE static bool				\ ck_ring_enqueue_spsc_size_##name(struct ck_ring *a,	\     struct type *b,					\     struct type *c,					\     unsigned int *d)					\ {							\ 							\ 	return _ck_ring_enqueue_sp_size(a, b, c,	\ 	    sizeof(struct type), d);			\ }							\ 							\ CK_CC_INLINE static bool				\ ck_ring_enqueue_spsc_##name(struct ck_ring *a,		\     struct type *b,					\     struct type *c)					\ {							\ 							\ 	return _ck_ring_enqueue_sp(a, b, c,		\ 	    sizeof(struct type), NULL);			\ }							\ 							\ CK_CC_INLINE static bool				\ ck_ring_dequeue_spsc_##name(struct ck_ring *a,		\     struct type *b,					\     struct type *c)					\ {							\ 							\ 	return _ck_ring_dequeue_sc(a, b, c,		\ 	    sizeof(struct type));			\ }							\ 							\ CK_CC_INLINE static bool				\ ck_ring_enqueue_spmc_size_##name(struct ck_ring *a,	\     struct type *b,					\     struct type *c,					\     unsigned int *d)					\ {							\ 							\ 	return _ck_ring_enqueue_sp_size(a, b, c,	\ 	    sizeof(struct type), d);			\ }							\ 							\ CK_CC_INLINE static bool				\ ck_ring_enqueue_spmc_##name(struct ck_ring *a,		\     struct type *b,					\     struct type *c)					\ {							\ 							\ 	return _ck_ring_enqueue_sp(a, b, c,		\ 	    sizeof(struct type), NULL);			\ }							\ 							\ CK_CC_INLINE static bool				\ ck_ring_trydequeue_spmc_##name(struct ck_ring *a,	\     struct type *b,					\     struct type *c)					\ {							\ 							\ 	return _ck_ring_trydequeue_mc(a,		\ 	    b, c, sizeof(struct type));			\ }							\ 							\ CK_CC_INLINE static bool				\ ck_ring_dequeue_spmc_##name(struct ck_ring *a,		\     struct type *b,					\     struct type *c)					\ {							\ 							\ 	return _ck_ring_dequeue_mc(a, b, c,		\ 	    sizeof(struct type));			\ }							\ 							\ CK_CC_INLINE static bool				\ ck_ring_enqueue_mpsc_##name(struct ck_ring *a,		\     struct type *b,					\     struct type *c)					\ {							\ 							\ 	return _ck_ring_enqueue_mp(a, b, c,		\ 	    sizeof(struct type), NULL);			\ }							\ 							\ CK_CC_INLINE static bool				\ ck_ring_enqueue_mpsc_size_##name(struct ck_ring *a,	\     struct type *b,					\     struct type *c,					\     unsigned int *d)					\ {							\ 							\ 	return _ck_ring_enqueue_mp_size(a, b, c,	\ 	    sizeof(struct type), d);			\ }							\ 							\ CK_CC_INLINE static bool				\ ck_ring_dequeue_mpsc_##name(struct ck_ring *a,		\     struct type *b,					\     struct type *c)					\ {							\ 							\ 	return _ck_ring_dequeue_sc(a, b, c,		\ 	    sizeof(struct type));			\ }							\ 							\ CK_CC_INLINE static bool				\ ck_ring_enqueue_mpmc_size_##name(struct ck_ring *a,	\     struct type *b,					\     struct type *c,					\     unsigned int *d)					\ {							\ 							\ 	return _ck_ring_enqueue_mp_size(a, b, c,	\ 	    sizeof(struct type), d);			\ }							\ 							\ CK_CC_INLINE static bool				\ ck_ring_enqueue_mpmc_##name(struct ck_ring *a,		\     struct type *b,					\     struct type *c)					\ {							\ 							\ 	return _ck_ring_enqueue_mp(a, b, c,		\ 	    sizeof(struct type), NULL);			\ }							\ 							\ CK_CC_INLINE static bool				\ ck_ring_trydequeue_mpmc_##name(struct ck_ring *a,	\     struct type *b,					\     struct type *c)					\ {							\ 							\ 	return _ck_ring_trydequeue_mc(a,		\ 	    b, c, sizeof(struct type));			\ }							\ 							\ CK_CC_INLINE static bool				\ ck_ring_dequeue_mpmc_##name(struct ck_ring *a,		\     struct type *b,					\     struct type *c)					\ {							\ 							\ 	return _ck_ring_dequeue_mc(a, b, c,		\ 	    sizeof(struct type));			\ }
end_define

begin_comment
comment|/*  * A single producer with one concurrent consumer.  */
end_comment

begin_define
define|#
directive|define
name|CK_RING_ENQUEUE_SPSC
parameter_list|(
name|name
parameter_list|,
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
define|\
value|ck_ring_enqueue_spsc_##name(a, b, c)
end_define

begin_define
define|#
directive|define
name|CK_RING_ENQUEUE_SPSC_SIZE
parameter_list|(
name|name
parameter_list|,
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|,
name|d
parameter_list|)
define|\
value|ck_ring_enqueue_spsc_size_##name(a, b, c, d)
end_define

begin_define
define|#
directive|define
name|CK_RING_DEQUEUE_SPSC
parameter_list|(
name|name
parameter_list|,
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
define|\
value|ck_ring_dequeue_spsc_##name(a, b, c)
end_define

begin_comment
comment|/*  * A single producer with any number of concurrent consumers.  */
end_comment

begin_define
define|#
directive|define
name|CK_RING_ENQUEUE_SPMC
parameter_list|(
name|name
parameter_list|,
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
define|\
value|ck_ring_enqueue_spmc_##name(a, b, c)
end_define

begin_define
define|#
directive|define
name|CK_RING_ENQUEUE_SPMC_SIZE
parameter_list|(
name|name
parameter_list|,
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|,
name|d
parameter_list|)
define|\
value|ck_ring_enqueue_spmc_size_##name(a, b, c, d)
end_define

begin_define
define|#
directive|define
name|CK_RING_TRYDEQUEUE_SPMC
parameter_list|(
name|name
parameter_list|,
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
define|\
value|ck_ring_trydequeue_spmc_##name(a, b, c)
end_define

begin_define
define|#
directive|define
name|CK_RING_DEQUEUE_SPMC
parameter_list|(
name|name
parameter_list|,
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
define|\
value|ck_ring_dequeue_spmc_##name(a, b, c)
end_define

begin_comment
comment|/*  * Any number of concurrent producers with up to one  * concurrent consumer.  */
end_comment

begin_define
define|#
directive|define
name|CK_RING_ENQUEUE_MPSC
parameter_list|(
name|name
parameter_list|,
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
define|\
value|ck_ring_enqueue_mpsc_##name(a, b, c)
end_define

begin_define
define|#
directive|define
name|CK_RING_ENQUEUE_MPSC_SIZE
parameter_list|(
name|name
parameter_list|,
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|,
name|d
parameter_list|)
define|\
value|ck_ring_enqueue_mpsc_size_##name(a, b, c, d)
end_define

begin_define
define|#
directive|define
name|CK_RING_DEQUEUE_MPSC
parameter_list|(
name|name
parameter_list|,
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
define|\
value|ck_ring_dequeue_mpsc_##name(a, b, c)
end_define

begin_comment
comment|/*  * Any number of concurrent producers and consumers.  */
end_comment

begin_define
define|#
directive|define
name|CK_RING_ENQUEUE_MPMC
parameter_list|(
name|name
parameter_list|,
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
define|\
value|ck_ring_enqueue_mpmc_##name(a, b, c)
end_define

begin_define
define|#
directive|define
name|CK_RING_ENQUEUE_MPMC_SIZE
parameter_list|(
name|name
parameter_list|,
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|,
name|d
parameter_list|)
define|\
value|ck_ring_enqueue_mpmc_size_##name(a, b, c, d)
end_define

begin_define
define|#
directive|define
name|CK_RING_TRYDEQUEUE_MPMC
parameter_list|(
name|name
parameter_list|,
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
define|\
value|ck_ring_trydequeue_mpmc_##name(a, b, c)
end_define

begin_define
define|#
directive|define
name|CK_RING_DEQUEUE_MPMC
parameter_list|(
name|name
parameter_list|,
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
define|\
value|ck_ring_dequeue_mpmc_##name(a, b, c)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CK_RING_H */
end_comment

end_unit

