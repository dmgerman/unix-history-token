begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- FormatAdapters.h - Formatters for common LLVM types -----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_SUPPORT_FORMATADAPTERS_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_SUPPORT_FORMATADAPTERS_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/SmallString.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/FormatCommon.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/FormatVariadicDetails.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/raw_ostream.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|FormatAdapter
operator|:
name|public
name|detail
operator|::
name|format_adapter
block|{
name|protected
operator|:
name|explicit
name|FormatAdapter
argument_list|(
name|T
operator|&&
name|Item
argument_list|)
operator|:
name|Item
argument_list|(
argument|Item
argument_list|)
block|{}
name|T
name|Item
block|; }
expr_stmt|;
name|namespace
name|detail
block|{
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|AlignAdapter
name|final
operator|:
name|public
name|FormatAdapter
operator|<
name|T
operator|>
block|{
name|AlignStyle
name|Where
block|;
name|size_t
name|Amount
block|;
name|public
operator|:
name|AlignAdapter
argument_list|(
argument|T&&Item
argument_list|,
argument|AlignStyle Where
argument_list|,
argument|size_t Amount
argument_list|)
operator|:
name|FormatAdapter
operator|<
name|T
operator|>
operator|(
name|std
operator|::
name|forward
operator|<
name|T
operator|>
operator|(
name|Item
operator|)
operator|)
block|,
name|Where
argument_list|(
name|Where
argument_list|)
block|,
name|Amount
argument_list|(
argument|Amount
argument_list|)
block|{}
name|void
name|format
argument_list|(
argument|llvm::raw_ostream&Stream
argument_list|,
argument|StringRef Style
argument_list|)
block|{
name|auto
name|Adapter
operator|=
name|detail
operator|::
name|build_format_adapter
argument_list|(
name|std
operator|::
name|forward
operator|<
name|T
operator|>
operator|(
name|this
operator|->
name|Item
operator|)
argument_list|)
block|;
name|FmtAlign
argument_list|(
name|Adapter
argument_list|,
name|Where
argument_list|,
name|Amount
argument_list|)
operator|.
name|format
argument_list|(
name|Stream
argument_list|,
name|Style
argument_list|)
block|;   }
block|}
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|PadAdapter
name|final
operator|:
name|public
name|FormatAdapter
operator|<
name|T
operator|>
block|{
name|size_t
name|Left
block|;
name|size_t
name|Right
block|;
name|public
operator|:
name|PadAdapter
argument_list|(
argument|T&&Item
argument_list|,
argument|size_t Left
argument_list|,
argument|size_t Right
argument_list|)
operator|:
name|FormatAdapter
operator|<
name|T
operator|>
operator|(
name|std
operator|::
name|forward
operator|<
name|T
operator|>
operator|(
name|Item
operator|)
operator|)
block|,
name|Left
argument_list|(
name|Left
argument_list|)
block|,
name|Right
argument_list|(
argument|Right
argument_list|)
block|{}
name|void
name|format
argument_list|(
argument|llvm::raw_ostream&Stream
argument_list|,
argument|StringRef Style
argument_list|)
block|{
name|auto
name|Adapter
operator|=
name|detail
operator|::
name|build_format_adapter
argument_list|(
name|std
operator|::
name|forward
operator|<
name|T
operator|>
operator|(
name|this
operator|->
name|Item
operator|)
argument_list|)
block|;
name|Stream
operator|.
name|indent
argument_list|(
name|Left
argument_list|)
block|;
name|Adapter
operator|.
name|format
argument_list|(
name|Stream
argument_list|,
name|Style
argument_list|)
block|;
name|Stream
operator|.
name|indent
argument_list|(
name|Right
argument_list|)
block|;   }
block|}
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|RepeatAdapter
name|final
operator|:
name|public
name|FormatAdapter
operator|<
name|T
operator|>
block|{
name|size_t
name|Count
block|;
name|public
operator|:
name|RepeatAdapter
argument_list|(
argument|T&&Item
argument_list|,
argument|size_t Count
argument_list|)
operator|:
name|FormatAdapter
operator|<
name|T
operator|>
operator|(
name|std
operator|::
name|forward
operator|<
name|T
operator|>
operator|(
name|Item
operator|)
operator|)
block|,
name|Count
argument_list|(
argument|Count
argument_list|)
block|{}
name|void
name|format
argument_list|(
argument|llvm::raw_ostream&Stream
argument_list|,
argument|StringRef Style
argument_list|)
block|{
name|auto
name|Adapter
operator|=
name|detail
operator|::
name|build_format_adapter
argument_list|(
name|std
operator|::
name|forward
operator|<
name|T
operator|>
operator|(
name|this
operator|->
name|Item
operator|)
argument_list|)
block|;
for|for
control|(
name|size_t
name|I
init|=
literal|0
init|;
name|I
operator|<
name|Count
condition|;
operator|++
name|I
control|)
block|{
name|Adapter
operator|.
name|format
argument_list|(
name|Stream
argument_list|,
name|Style
argument_list|)
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|detail
operator|::
name|AlignAdapter
operator|<
name|T
operator|>
name|fmt_align
argument_list|(
argument|T&&Item
argument_list|,
argument|AlignStyle Where
argument_list|,
argument|size_t Amount
argument_list|)
block|{
return|return
name|detail
operator|::
name|AlignAdapter
operator|<
name|T
operator|>
operator|(
name|std
operator|::
name|forward
operator|<
name|T
operator|>
operator|(
name|Item
operator|)
operator|,
name|Where
operator|,
name|Amount
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|detail
operator|::
name|PadAdapter
operator|<
name|T
operator|>
name|fmt_pad
argument_list|(
argument|T&&Item
argument_list|,
argument|size_t Left
argument_list|,
argument|size_t Right
argument_list|)
block|{
return|return
name|detail
operator|::
name|PadAdapter
operator|<
name|T
operator|>
operator|(
name|std
operator|::
name|forward
operator|<
name|T
operator|>
operator|(
name|Item
operator|)
operator|,
name|Left
operator|,
name|Right
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|detail
operator|::
name|RepeatAdapter
operator|<
name|T
operator|>
name|fmt_repeat
argument_list|(
argument|T&&Item
argument_list|,
argument|size_t Count
argument_list|)
block|{
return|return
name|detail
operator|::
name|RepeatAdapter
operator|<
name|T
operator|>
operator|(
name|std
operator|::
name|forward
operator|<
name|T
operator|>
operator|(
name|Item
operator|)
operator|,
name|Count
operator|)
return|;
block|}
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

