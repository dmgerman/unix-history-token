begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//=== OutputBuffer.h - Output Buffer ----------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Methods to output values to a data buffer.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_SUPPORT_OUTPUTBUFFER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_SUPPORT_OUTPUTBUFFER_H
end_define

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|OutputBuffer
block|{
comment|/// Output buffer.
name|std
operator|::
name|vector
operator|<
name|unsigned
name|char
operator|>
operator|&
name|Output
expr_stmt|;
comment|/// is64Bit/isLittleEndian - This information is inferred from the target
comment|/// machine directly, indicating what header values and flags to set.
name|bool
name|is64Bit
decl_stmt|,
name|isLittleEndian
decl_stmt|;
name|public
label|:
name|OutputBuffer
argument_list|(
argument|std::vector<unsigned char>&Out
argument_list|,
argument|bool is64bit
argument_list|,
argument|bool le
argument_list|)
block|:
name|Output
argument_list|(
name|Out
argument_list|)
operator|,
name|is64Bit
argument_list|(
name|is64bit
argument_list|)
operator|,
name|isLittleEndian
argument_list|(
argument|le
argument_list|)
block|{}
comment|// align - Emit padding into the file until the current output position is
comment|// aligned to the specified power of two boundary.
name|void
name|align
argument_list|(
argument|unsigned Boundary
argument_list|)
block|{
name|assert
argument_list|(
name|Boundary
operator|&&
operator|(
name|Boundary
operator|&
operator|(
name|Boundary
operator|-
literal|1
operator|)
operator|)
operator|==
literal|0
operator|&&
literal|"Must align to 2^k boundary"
argument_list|)
block|;
name|size_t
name|Size
operator|=
name|Output
operator|.
name|size
argument_list|()
block|;
if|if
condition|(
name|Size
operator|&
operator|(
name|Boundary
operator|-
literal|1
operator|)
condition|)
block|{
comment|// Add padding to get alignment to the correct place.
name|size_t
name|Pad
init|=
name|Boundary
operator|-
operator|(
name|Size
operator|&
operator|(
name|Boundary
operator|-
literal|1
operator|)
operator|)
decl_stmt|;
name|Output
operator|.
name|resize
argument_list|(
name|Size
operator|+
name|Pad
argument_list|)
expr_stmt|;
block|}
block|}
comment|//===------------------------------------------------------------------===//
comment|// Out Functions - Output the specified value to the data buffer.
name|void
name|outbyte
argument_list|(
argument|unsigned char X
argument_list|)
block|{
name|Output
operator|.
name|push_back
argument_list|(
name|X
argument_list|)
block|;     }
name|void
name|outhalf
argument_list|(
argument|unsigned short X
argument_list|)
block|{
if|if
condition|(
name|isLittleEndian
condition|)
block|{
name|Output
operator|.
name|push_back
argument_list|(
name|X
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Output
operator|.
name|push_back
argument_list|(
name|X
operator|>>
literal|8
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Output
operator|.
name|push_back
argument_list|(
name|X
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|Output
operator|.
name|push_back
argument_list|(
name|X
operator|&
literal|255
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|outword
argument_list|(
argument|unsigned X
argument_list|)
block|{
if|if
condition|(
name|isLittleEndian
condition|)
block|{
name|Output
operator|.
name|push_back
argument_list|(
operator|(
name|X
operator|>>
literal|0
operator|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Output
operator|.
name|push_back
argument_list|(
operator|(
name|X
operator|>>
literal|8
operator|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Output
operator|.
name|push_back
argument_list|(
operator|(
name|X
operator|>>
literal|16
operator|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Output
operator|.
name|push_back
argument_list|(
operator|(
name|X
operator|>>
literal|24
operator|)
operator|&
literal|255
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Output
operator|.
name|push_back
argument_list|(
operator|(
name|X
operator|>>
literal|24
operator|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Output
operator|.
name|push_back
argument_list|(
operator|(
name|X
operator|>>
literal|16
operator|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Output
operator|.
name|push_back
argument_list|(
operator|(
name|X
operator|>>
literal|8
operator|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Output
operator|.
name|push_back
argument_list|(
operator|(
name|X
operator|>>
literal|0
operator|)
operator|&
literal|255
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|outxword
argument_list|(
argument|uint64_t X
argument_list|)
block|{
if|if
condition|(
name|isLittleEndian
condition|)
block|{
name|Output
operator|.
name|push_back
argument_list|(
name|unsigned
argument_list|(
name|X
operator|>>
literal|0
argument_list|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Output
operator|.
name|push_back
argument_list|(
name|unsigned
argument_list|(
name|X
operator|>>
literal|8
argument_list|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Output
operator|.
name|push_back
argument_list|(
name|unsigned
argument_list|(
name|X
operator|>>
literal|16
argument_list|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Output
operator|.
name|push_back
argument_list|(
name|unsigned
argument_list|(
name|X
operator|>>
literal|24
argument_list|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Output
operator|.
name|push_back
argument_list|(
name|unsigned
argument_list|(
name|X
operator|>>
literal|32
argument_list|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Output
operator|.
name|push_back
argument_list|(
name|unsigned
argument_list|(
name|X
operator|>>
literal|40
argument_list|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Output
operator|.
name|push_back
argument_list|(
name|unsigned
argument_list|(
name|X
operator|>>
literal|48
argument_list|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Output
operator|.
name|push_back
argument_list|(
name|unsigned
argument_list|(
name|X
operator|>>
literal|56
argument_list|)
operator|&
literal|255
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Output
operator|.
name|push_back
argument_list|(
name|unsigned
argument_list|(
name|X
operator|>>
literal|56
argument_list|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Output
operator|.
name|push_back
argument_list|(
name|unsigned
argument_list|(
name|X
operator|>>
literal|48
argument_list|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Output
operator|.
name|push_back
argument_list|(
name|unsigned
argument_list|(
name|X
operator|>>
literal|40
argument_list|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Output
operator|.
name|push_back
argument_list|(
name|unsigned
argument_list|(
name|X
operator|>>
literal|32
argument_list|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Output
operator|.
name|push_back
argument_list|(
name|unsigned
argument_list|(
name|X
operator|>>
literal|24
argument_list|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Output
operator|.
name|push_back
argument_list|(
name|unsigned
argument_list|(
name|X
operator|>>
literal|16
argument_list|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Output
operator|.
name|push_back
argument_list|(
name|unsigned
argument_list|(
name|X
operator|>>
literal|8
argument_list|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Output
operator|.
name|push_back
argument_list|(
name|unsigned
argument_list|(
name|X
operator|>>
literal|0
argument_list|)
operator|&
literal|255
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|outaddr32
argument_list|(
argument|unsigned X
argument_list|)
block|{
name|outword
argument_list|(
name|X
argument_list|)
block|;     }
name|void
name|outaddr64
argument_list|(
argument|uint64_t X
argument_list|)
block|{
name|outxword
argument_list|(
name|X
argument_list|)
block|;     }
name|void
name|outaddr
argument_list|(
argument|uint64_t X
argument_list|)
block|{
if|if
condition|(
operator|!
name|is64Bit
condition|)
name|outword
argument_list|(
operator|(
name|unsigned
operator|)
name|X
argument_list|)
expr_stmt|;
else|else
name|outxword
argument_list|(
name|X
argument_list|)
expr_stmt|;
block|}
name|void
name|outstring
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|S
argument_list|,
name|unsigned
name|Length
argument_list|)
block|{
name|unsigned
name|len_to_copy
init|=
name|static_cast
operator|<
name|unsigned
operator|>
operator|(
name|S
operator|.
name|length
argument_list|()
operator|)
operator|<
name|Length
condition|?
name|static_cast
operator|<
name|unsigned
operator|>
operator|(
name|S
operator|.
name|length
argument_list|()
operator|)
else|:
name|Length
decl_stmt|;
name|unsigned
name|len_to_fill
init|=
name|static_cast
operator|<
name|unsigned
operator|>
operator|(
name|S
operator|.
name|length
argument_list|()
operator|)
operator|<
name|Length
condition|?
name|Length
operator|-
name|static_cast
operator|<
name|unsigned
operator|>
operator|(
name|S
operator|.
name|length
argument_list|()
operator|)
else|:
literal|0
decl_stmt|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len_to_copy
condition|;
operator|++
name|i
control|)
name|outbyte
argument_list|(
name|S
index|[
name|i
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len_to_fill
condition|;
operator|++
name|i
control|)
name|outbyte
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|//===------------------------------------------------------------------===//
comment|// Fix Functions - Replace an existing entry at an offset.
name|void
name|fixhalf
parameter_list|(
name|unsigned
name|short
name|X
parameter_list|,
name|unsigned
name|Offset
parameter_list|)
block|{
name|unsigned
name|char
modifier|*
name|P
init|=
operator|&
name|Output
index|[
name|Offset
index|]
decl_stmt|;
name|P
index|[
literal|0
index|]
operator|=
operator|(
name|X
operator|>>
operator|(
name|isLittleEndian
condition|?
literal|0
else|:
literal|8
operator|)
operator|)
operator|&
literal|255
expr_stmt|;
name|P
index|[
literal|1
index|]
operator|=
operator|(
name|X
operator|>>
operator|(
name|isLittleEndian
condition|?
literal|8
else|:
literal|0
operator|)
operator|)
operator|&
literal|255
expr_stmt|;
block|}
name|void
name|fixword
parameter_list|(
name|unsigned
name|X
parameter_list|,
name|unsigned
name|Offset
parameter_list|)
block|{
name|unsigned
name|char
modifier|*
name|P
init|=
operator|&
name|Output
index|[
name|Offset
index|]
decl_stmt|;
name|P
index|[
literal|0
index|]
operator|=
operator|(
name|X
operator|>>
operator|(
name|isLittleEndian
condition|?
literal|0
else|:
literal|24
operator|)
operator|)
operator|&
literal|255
expr_stmt|;
name|P
index|[
literal|1
index|]
operator|=
operator|(
name|X
operator|>>
operator|(
name|isLittleEndian
condition|?
literal|8
else|:
literal|16
operator|)
operator|)
operator|&
literal|255
expr_stmt|;
name|P
index|[
literal|2
index|]
operator|=
operator|(
name|X
operator|>>
operator|(
name|isLittleEndian
condition|?
literal|16
else|:
literal|8
operator|)
operator|)
operator|&
literal|255
expr_stmt|;
name|P
index|[
literal|3
index|]
operator|=
operator|(
name|X
operator|>>
operator|(
name|isLittleEndian
condition|?
literal|24
else|:
literal|0
operator|)
operator|)
operator|&
literal|255
expr_stmt|;
block|}
name|void
name|fixxword
parameter_list|(
name|uint64_t
name|X
parameter_list|,
name|unsigned
name|Offset
parameter_list|)
block|{
name|unsigned
name|char
modifier|*
name|P
init|=
operator|&
name|Output
index|[
name|Offset
index|]
decl_stmt|;
name|P
index|[
literal|0
index|]
operator|=
operator|(
name|X
operator|>>
operator|(
name|isLittleEndian
condition|?
literal|0
else|:
literal|56
operator|)
operator|)
operator|&
literal|255
expr_stmt|;
name|P
index|[
literal|1
index|]
operator|=
operator|(
name|X
operator|>>
operator|(
name|isLittleEndian
condition|?
literal|8
else|:
literal|48
operator|)
operator|)
operator|&
literal|255
expr_stmt|;
name|P
index|[
literal|2
index|]
operator|=
operator|(
name|X
operator|>>
operator|(
name|isLittleEndian
condition|?
literal|16
else|:
literal|40
operator|)
operator|)
operator|&
literal|255
expr_stmt|;
name|P
index|[
literal|3
index|]
operator|=
operator|(
name|X
operator|>>
operator|(
name|isLittleEndian
condition|?
literal|24
else|:
literal|32
operator|)
operator|)
operator|&
literal|255
expr_stmt|;
name|P
index|[
literal|4
index|]
operator|=
operator|(
name|X
operator|>>
operator|(
name|isLittleEndian
condition|?
literal|32
else|:
literal|24
operator|)
operator|)
operator|&
literal|255
expr_stmt|;
name|P
index|[
literal|5
index|]
operator|=
operator|(
name|X
operator|>>
operator|(
name|isLittleEndian
condition|?
literal|40
else|:
literal|16
operator|)
operator|)
operator|&
literal|255
expr_stmt|;
name|P
index|[
literal|6
index|]
operator|=
operator|(
name|X
operator|>>
operator|(
name|isLittleEndian
condition|?
literal|48
else|:
literal|8
operator|)
operator|)
operator|&
literal|255
expr_stmt|;
name|P
index|[
literal|7
index|]
operator|=
operator|(
name|X
operator|>>
operator|(
name|isLittleEndian
condition|?
literal|56
else|:
literal|0
operator|)
operator|)
operator|&
literal|255
expr_stmt|;
block|}
name|void
name|fixaddr
parameter_list|(
name|uint64_t
name|X
parameter_list|,
name|unsigned
name|Offset
parameter_list|)
block|{
if|if
condition|(
operator|!
name|is64Bit
condition|)
name|fixword
argument_list|(
operator|(
name|unsigned
operator|)
name|X
argument_list|,
name|Offset
argument_list|)
expr_stmt|;
else|else
name|fixxword
argument_list|(
name|X
argument_list|,
name|Offset
argument_list|)
expr_stmt|;
block|}
name|unsigned
name|char
modifier|&
name|operator
function|[]
parameter_list|(
name|unsigned
name|Index
parameter_list|)
block|{
return|return
name|Output
index|[
name|Index
index|]
return|;
block|}
specifier|const
name|unsigned
name|char
modifier|&
name|operator
index|[]
argument_list|(
name|unsigned
name|Index
argument_list|)
decl|const
block|{
return|return
name|Output
index|[
name|Index
index|]
return|;
block|}
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_SUPPORT_OUTPUTBUFFER_H
end_comment

end_unit

