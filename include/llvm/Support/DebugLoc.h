begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===---- llvm/DebugLoc.h - Debug Location Information ----------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines a number of light weight data structures used
end_comment

begin_comment
comment|// to describe and track debug location information.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGLOC_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGLOC_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MDNode
decl_stmt|;
comment|/// DebugLocTuple - Debug location tuple of filename id, line and column.
comment|///
struct|struct
name|DebugLocTuple
block|{
name|MDNode
modifier|*
name|Scope
decl_stmt|;
name|MDNode
modifier|*
name|InlinedAtLoc
decl_stmt|;
name|unsigned
name|Line
decl_stmt|,
name|Col
decl_stmt|;
name|DebugLocTuple
argument_list|()
operator|:
name|Scope
argument_list|(
literal|0
argument_list|)
operator|,
name|InlinedAtLoc
argument_list|(
literal|0
argument_list|)
operator|,
name|Line
argument_list|(
operator|~
literal|0U
argument_list|)
operator|,
name|Col
argument_list|(
argument|~
literal|0U
argument_list|)
block|{}
name|DebugLocTuple
argument_list|(
argument|MDNode *n
argument_list|,
argument|MDNode *i
argument_list|,
argument|unsigned l
argument_list|,
argument|unsigned c
argument_list|)
operator|:
name|Scope
argument_list|(
name|n
argument_list|)
operator|,
name|InlinedAtLoc
argument_list|(
name|i
argument_list|)
operator|,
name|Line
argument_list|(
name|l
argument_list|)
operator|,
name|Col
argument_list|(
argument|c
argument_list|)
block|{}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|DebugLocTuple
operator|&
name|DLT
operator|)
specifier|const
block|{
return|return
name|Scope
operator|==
name|DLT
operator|.
name|Scope
operator|&&
name|InlinedAtLoc
operator|==
name|DLT
operator|.
name|InlinedAtLoc
operator|&&
name|Line
operator|==
name|DLT
operator|.
name|Line
operator|&&
name|Col
operator|==
name|DLT
operator|.
name|Col
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|DebugLocTuple
operator|&
name|DLT
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|DLT
operator|)
return|;
block|}
block|}
struct|;
comment|/// DebugLoc - Debug location id. This is carried by SDNode and MachineInstr
comment|/// to index into a vector of unique debug location tuples.
name|class
name|DebugLoc
block|{
name|unsigned
name|Idx
decl_stmt|;
name|public
label|:
name|DebugLoc
argument_list|()
operator|:
name|Idx
argument_list|(
argument|~
literal|0U
argument_list|)
block|{}
comment|// Defaults to invalid.
specifier|static
name|DebugLoc
name|getUnknownLoc
argument_list|()
block|{
name|DebugLoc
name|L
block|;
name|L
operator|.
name|Idx
operator|=
operator|~
literal|0U
block|;
return|return
name|L
return|;
block|}
specifier|static
name|DebugLoc
name|get
parameter_list|(
name|unsigned
name|idx
parameter_list|)
block|{
name|DebugLoc
name|L
decl_stmt|;
name|L
operator|.
name|Idx
operator|=
name|idx
expr_stmt|;
return|return
name|L
return|;
block|}
name|unsigned
name|getIndex
argument_list|()
specifier|const
block|{
return|return
name|Idx
return|;
block|}
comment|/// isUnknown - Return true if there is no debug info for the SDNode /
comment|/// MachineInstr.
name|bool
name|isUnknown
argument_list|()
specifier|const
block|{
return|return
name|Idx
operator|==
operator|~
literal|0U
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|DebugLoc
operator|&
name|DL
operator|)
specifier|const
block|{
return|return
name|Idx
operator|==
name|DL
operator|.
name|Idx
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|DebugLoc
operator|&
name|DL
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|DL
operator|)
return|;
block|}
block|}
empty_stmt|;
comment|// Specialize DenseMapInfo for DebugLocTuple.
name|template
operator|<
operator|>
expr|struct
name|DenseMapInfo
operator|<
name|DebugLocTuple
operator|>
block|{
specifier|static
specifier|inline
name|DebugLocTuple
name|getEmptyKey
argument_list|()
block|{
return|return
name|DebugLocTuple
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|~
literal|0U
argument_list|,
operator|~
literal|0U
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|DebugLocTuple
name|getTombstoneKey
argument_list|()
block|{
return|return
name|DebugLocTuple
argument_list|(
operator|(
name|MDNode
operator|*
operator|)
operator|~
literal|1U
argument_list|,
operator|(
name|MDNode
operator|*
operator|)
operator|~
literal|1U
argument_list|,
operator|~
literal|1U
argument_list|,
operator|~
literal|1U
argument_list|)
return|;
block|}
specifier|static
name|unsigned
name|getHashValue
argument_list|(
argument|const DebugLocTuple&Val
argument_list|)
block|{
return|return
name|DenseMapInfo
operator|<
name|MDNode
operator|*
operator|>
operator|::
name|getHashValue
argument_list|(
name|Val
operator|.
name|Scope
argument_list|)
operator|^
name|DenseMapInfo
operator|<
name|MDNode
operator|*
operator|>
operator|::
name|getHashValue
argument_list|(
name|Val
operator|.
name|InlinedAtLoc
argument_list|)
operator|^
name|DenseMapInfo
operator|<
name|unsigned
operator|>
operator|::
name|getHashValue
argument_list|(
name|Val
operator|.
name|Line
argument_list|)
operator|^
name|DenseMapInfo
operator|<
name|unsigned
operator|>
operator|::
name|getHashValue
argument_list|(
name|Val
operator|.
name|Col
argument_list|)
return|;
block|}
specifier|static
name|bool
name|isEqual
argument_list|(
argument|const DebugLocTuple&LHS
argument_list|,
argument|const DebugLocTuple&RHS
argument_list|)
block|{
return|return
name|LHS
operator|.
name|Scope
operator|==
name|RHS
operator|.
name|Scope
operator|&&
name|LHS
operator|.
name|InlinedAtLoc
operator|==
name|RHS
operator|.
name|InlinedAtLoc
operator|&&
name|LHS
operator|.
name|Line
operator|==
name|RHS
operator|.
name|Line
operator|&&
name|LHS
operator|.
name|Col
operator|==
name|RHS
operator|.
name|Col
return|;
block|}
expr|}
block|;
name|template
operator|<
operator|>
expr|struct
name|isPodLike
operator|<
name|DebugLocTuple
operator|>
block|{
specifier|static
specifier|const
name|bool
name|value
operator|=
name|true
block|;}
block|;
comment|/// DebugLocTracker - This class tracks debug location information.
comment|///
block|struct
name|DebugLocTracker
block|{
comment|/// DebugLocations - A vector of unique DebugLocTuple's.
comment|///
name|std
operator|::
name|vector
operator|<
name|DebugLocTuple
operator|>
name|DebugLocations
block|;
comment|/// DebugIdMap - This maps DebugLocTuple's to indices into the
comment|/// DebugLocations vector.
name|DenseMap
operator|<
name|DebugLocTuple
block|,
name|unsigned
operator|>
name|DebugIdMap
block|;
name|DebugLocTracker
argument_list|()
block|{}
block|}
block|;    }
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* LLVM_DEBUGLOC_H */
end_comment

end_unit

