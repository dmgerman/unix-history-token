begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- llvm/Support/COFF.h -------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file contains an definitions used in Windows COFF Files.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Structures and enums defined within this file where created using
end_comment

begin_comment
comment|// information from Microsofts publicly available PE/COFF format document:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Microsoft Portable Executable and Common Object File Format Specification
end_comment

begin_comment
comment|// Revision 8.1 - February 15, 2008
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// As of 5/2/2010, hosted by microsoft at:
end_comment

begin_comment
comment|// http://www.microsoft.com/whdc/system/platform/firmware/pecoff.mspx
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_SUPPORT_WIN_COFF_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_SUPPORT_WIN_COFF_H
end_define

begin_include
include|#
directive|include
file|"llvm/System/DataTypes.h"
end_include

begin_include
include|#
directive|include
file|<cstring>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|COFF
block|{
comment|// Sizes in bytes of various things in the COFF format.
enum|enum
block|{
name|HeaderSize
init|=
literal|20
block|,
name|NameSize
init|=
literal|8
block|,
name|SymbolSize
init|=
literal|18
block|,
name|SectionSize
init|=
literal|40
block|,
name|RelocationSize
init|=
literal|10
block|}
enum|;
struct|struct
name|header
block|{
name|uint16_t
name|Machine
decl_stmt|;
name|uint16_t
name|NumberOfSections
decl_stmt|;
name|uint32_t
name|TimeDateStamp
decl_stmt|;
name|uint32_t
name|PointerToSymbolTable
decl_stmt|;
name|uint32_t
name|NumberOfSymbols
decl_stmt|;
name|uint16_t
name|SizeOfOptionalHeader
decl_stmt|;
name|uint16_t
name|Characteristics
decl_stmt|;
block|}
struct|;
struct|struct
name|symbol
block|{
name|char
name|Name
index|[
name|NameSize
index|]
decl_stmt|;
name|uint32_t
name|Value
decl_stmt|;
name|uint16_t
name|Type
decl_stmt|;
name|uint8_t
name|StorageClass
decl_stmt|;
name|uint16_t
name|SectionNumber
decl_stmt|;
name|uint8_t
name|NumberOfAuxSymbols
decl_stmt|;
block|}
struct|;
enum|enum
name|symbol_flags
block|{
name|SF_TypeMask
init|=
literal|0x0000FFFF
block|,
name|SF_TypeShift
init|=
literal|0
block|,
name|SF_ClassMask
init|=
literal|0x00FF0000
block|,
name|SF_ClassShift
init|=
literal|16
block|,
name|SF_WeakReference
init|=
literal|0x01000000
block|}
enum|;
enum|enum
name|symbol_storage_class
block|{
name|IMAGE_SYM_CLASS_END_OF_FUNCTION
init|=
operator|-
literal|1
block|,
name|IMAGE_SYM_CLASS_NULL
init|=
literal|0
block|,
name|IMAGE_SYM_CLASS_AUTOMATIC
init|=
literal|1
block|,
name|IMAGE_SYM_CLASS_EXTERNAL
init|=
literal|2
block|,
name|IMAGE_SYM_CLASS_STATIC
init|=
literal|3
block|,
name|IMAGE_SYM_CLASS_REGISTER
init|=
literal|4
block|,
name|IMAGE_SYM_CLASS_EXTERNAL_DEF
init|=
literal|5
block|,
name|IMAGE_SYM_CLASS_LABEL
init|=
literal|6
block|,
name|IMAGE_SYM_CLASS_UNDEFINED_LABEL
init|=
literal|7
block|,
name|IMAGE_SYM_CLASS_MEMBER_OF_STRUCT
init|=
literal|8
block|,
name|IMAGE_SYM_CLASS_ARGUMENT
init|=
literal|9
block|,
name|IMAGE_SYM_CLASS_STRUCT_TAG
init|=
literal|10
block|,
name|IMAGE_SYM_CLASS_MEMBER_OF_UNION
init|=
literal|11
block|,
name|IMAGE_SYM_CLASS_UNION_TAG
init|=
literal|12
block|,
name|IMAGE_SYM_CLASS_TYPE_DEFINITION
init|=
literal|13
block|,
name|IMAGE_SYM_CLASS_UNDEFINED_STATIC
init|=
literal|14
block|,
name|IMAGE_SYM_CLASS_ENUM_TAG
init|=
literal|15
block|,
name|IMAGE_SYM_CLASS_MEMBER_OF_ENUM
init|=
literal|16
block|,
name|IMAGE_SYM_CLASS_REGISTER_PARAM
init|=
literal|17
block|,
name|IMAGE_SYM_CLASS_BIT_FIELD
init|=
literal|18
block|,
name|IMAGE_SYM_CLASS_BLOCK
init|=
literal|100
block|,
name|IMAGE_SYM_CLASS_FUNCTION
init|=
literal|101
block|,
name|IMAGE_SYM_CLASS_END_OF_STRUCT
init|=
literal|102
block|,
name|IMAGE_SYM_CLASS_FILE
init|=
literal|103
block|,
name|IMAGE_SYM_CLASS_SECTION
init|=
literal|104
block|,
name|IMAGE_SYM_CLASS_WEAK_EXTERNAL
init|=
literal|105
block|,
name|IMAGE_SYM_CLASS_CLR_TOKEN
init|=
literal|107
block|}
enum|;
struct|struct
name|section
block|{
name|char
name|Name
index|[
name|NameSize
index|]
decl_stmt|;
name|uint32_t
name|VirtualSize
decl_stmt|;
name|uint32_t
name|VirtualAddress
decl_stmt|;
name|uint32_t
name|SizeOfRawData
decl_stmt|;
name|uint32_t
name|PointerToRawData
decl_stmt|;
name|uint32_t
name|PointerToRelocations
decl_stmt|;
name|uint32_t
name|PointerToLineNumbers
decl_stmt|;
name|uint16_t
name|NumberOfRelocations
decl_stmt|;
name|uint16_t
name|NumberOfLineNumbers
decl_stmt|;
name|uint32_t
name|Characteristics
decl_stmt|;
block|}
struct|;
enum|enum
name|section_characteristics
block|{
name|IMAGE_SCN_TYPE_NO_PAD
init|=
literal|0x00000008
block|,
name|IMAGE_SCN_CNT_CODE
init|=
literal|0x00000020
block|,
name|IMAGE_SCN_CNT_INITIALIZED_DATA
init|=
literal|0x00000040
block|,
name|IMAGE_SCN_CNT_UNINITIALIZED_DATA
init|=
literal|0x00000080
block|,
name|IMAGE_SCN_LNK_OTHER
init|=
literal|0x00000100
block|,
name|IMAGE_SCN_LNK_INFO
init|=
literal|0x00000200
block|,
name|IMAGE_SCN_LNK_REMOVE
init|=
literal|0x00000800
block|,
name|IMAGE_SCN_LNK_COMDAT
init|=
literal|0x00001000
block|,
name|IMAGE_SCN_GPREL
init|=
literal|0x00008000
block|,
name|IMAGE_SCN_MEM_PURGEABLE
init|=
literal|0x00020000
block|,
name|IMAGE_SCN_MEM_16BIT
init|=
literal|0x00020000
block|,
name|IMAGE_SCN_MEM_LOCKED
init|=
literal|0x00040000
block|,
name|IMAGE_SCN_MEM_PRELOAD
init|=
literal|0x00080000
block|,
name|IMAGE_SCN_ALIGN_1BYTES
init|=
literal|0x00100000
block|,
name|IMAGE_SCN_ALIGN_2BYTES
init|=
literal|0x00200000
block|,
name|IMAGE_SCN_ALIGN_4BYTES
init|=
literal|0x00300000
block|,
name|IMAGE_SCN_ALIGN_8BYTES
init|=
literal|0x00400000
block|,
name|IMAGE_SCN_ALIGN_16BYTES
init|=
literal|0x00500000
block|,
name|IMAGE_SCN_ALIGN_32BYTES
init|=
literal|0x00600000
block|,
name|IMAGE_SCN_ALIGN_64BYTES
init|=
literal|0x00700000
block|,
name|IMAGE_SCN_ALIGN_128BYTES
init|=
literal|0x00800000
block|,
name|IMAGE_SCN_ALIGN_256BYTES
init|=
literal|0x00900000
block|,
name|IMAGE_SCN_ALIGN_512BYTES
init|=
literal|0x00A00000
block|,
name|IMAGE_SCN_ALIGN_1024BYTES
init|=
literal|0x00B00000
block|,
name|IMAGE_SCN_ALIGN_2048BYTES
init|=
literal|0x00C00000
block|,
name|IMAGE_SCN_ALIGN_4096BYTES
init|=
literal|0x00D00000
block|,
name|IMAGE_SCN_ALIGN_8192BYTES
init|=
literal|0x00E00000
block|,
name|IMAGE_SCN_LNK_NRELOC_OVFL
init|=
literal|0x01000000
block|,
name|IMAGE_SCN_MEM_DISCARDABLE
init|=
literal|0x02000000
block|,
name|IMAGE_SCN_MEM_NOT_CACHED
init|=
literal|0x04000000
block|,
name|IMAGE_SCN_MEM_NOT_PAGED
init|=
literal|0x08000000
block|,
name|IMAGE_SCN_MEM_SHARED
init|=
literal|0x10000000
block|,
name|IMAGE_SCN_MEM_EXECUTE
init|=
literal|0x20000000
block|,
name|IMAGE_SCN_MEM_READ
init|=
literal|0x40000000
block|,
name|IMAGE_SCN_MEM_WRITE
init|=
literal|0x80000000
block|}
enum|;
struct|struct
name|relocation
block|{
name|uint32_t
name|VirtualAddress
decl_stmt|;
name|uint32_t
name|SymbolTableIndex
decl_stmt|;
name|uint16_t
name|Type
decl_stmt|;
block|}
struct|;
enum|enum
name|relocation_type_x86
block|{
name|IMAGE_REL_I386_ABSOLUTE
init|=
literal|0x0000
block|,
name|IMAGE_REL_I386_DIR16
init|=
literal|0x0001
block|,
name|IMAGE_REL_I386_REL16
init|=
literal|0x0002
block|,
name|IMAGE_REL_I386_DIR32
init|=
literal|0x0006
block|,
name|IMAGE_REL_I386_DIR32NB
init|=
literal|0x0007
block|,
name|IMAGE_REL_I386_SEG12
init|=
literal|0x0009
block|,
name|IMAGE_REL_I386_SECTION
init|=
literal|0x000A
block|,
name|IMAGE_REL_I386_SECREL
init|=
literal|0x000B
block|,
name|IMAGE_REL_I386_TOKEN
init|=
literal|0x000C
block|,
name|IMAGE_REL_I386_SECREL7
init|=
literal|0x000D
block|,
name|IMAGE_REL_I386_REL32
init|=
literal|0x0014
block|}
enum|;
enum|enum
block|{
name|IMAGE_COMDAT_SELECT_NODUPLICATES
init|=
literal|1
block|,
name|IMAGE_COMDAT_SELECT_ANY
block|,
name|IMAGE_COMDAT_SELECT_SAME_SIZE
block|,
name|IMAGE_COMDAT_SELECT_EXACT_MATCH
block|,
name|IMAGE_COMDAT_SELECT_ASSOCIATIVE
block|,
name|IMAGE_COMDAT_SELECT_LARGEST
block|}
enum|;
block|}
comment|// End namespace llvm.
block|}
end_decl_stmt

begin_comment
comment|// End namespace COFF.
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

