begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===---- llvm/Support/IRBuilder.h - Builder for LLVM Instrs ----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines the IRBuilder class, which is used as a convenient way
end_comment

begin_comment
comment|// to create LLVM instructions with a consistent and simplified interface.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_SUPPORT_IRBUILDER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_SUPPORT_IRBUILDER_H
end_define

begin_include
include|#
directive|include
file|"llvm/Constants.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Instructions.h"
end_include

begin_include
include|#
directive|include
file|"llvm/GlobalAlias.h"
end_include

begin_include
include|#
directive|include
file|"llvm/GlobalVariable.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Function.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Metadata.h"
end_include

begin_include
include|#
directive|include
file|"llvm/LLVMContext.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/Twine.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ConstantFolder.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|/// IRBuilderDefaultInserter - This provides the default implementation of the
comment|/// IRBuilder 'InsertHelper' method that is called whenever an instruction is
comment|/// created by IRBuilder and needs to be inserted.  By default, this inserts the
comment|/// instruction at the insertion point.
name|template
operator|<
name|bool
name|preserveNames
operator|=
name|true
operator|>
name|class
name|IRBuilderDefaultInserter
block|{
name|protected
operator|:
name|void
name|InsertHelper
argument_list|(
argument|Instruction *I
argument_list|,
argument|const Twine&Name
argument_list|,
argument|BasicBlock *BB
argument_list|,
argument|BasicBlock::iterator InsertPt
argument_list|)
specifier|const
block|{
if|if
condition|(
name|BB
condition|)
name|BB
operator|->
name|getInstList
argument_list|()
operator|.
name|insert
argument_list|(
name|InsertPt
argument_list|,
name|I
argument_list|)
expr_stmt|;
if|if
condition|(
name|preserveNames
condition|)
name|I
operator|->
name|setName
argument_list|(
name|Name
argument_list|)
expr_stmt|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/// IRBuilder - This provides a uniform API for creating instructions and
end_comment

begin_comment
comment|/// inserting them into a basic block: either at the end of a BasicBlock, or
end_comment

begin_comment
comment|/// at a specific iterator location in a block.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// Note that the builder does not expose the full generality of LLVM
end_comment

begin_comment
comment|/// instructions.  For access to extra instruction properties, use the mutators
end_comment

begin_comment
comment|/// (e.g. setVolatile) on the instructions after they have been created.
end_comment

begin_comment
comment|/// The first template argument handles whether or not to preserve names in the
end_comment

begin_comment
comment|/// final instruction output. This defaults to on.  The second template argument
end_comment

begin_comment
comment|/// specifies a class to use for creating constants.  This defaults to creating
end_comment

begin_comment
comment|/// minimally folded constants.  The fourth template argument allows clients to
end_comment

begin_comment
comment|/// specify custom insertion hooks that are called on every newly created
end_comment

begin_comment
comment|/// insertion.
end_comment

begin_expr_stmt
name|template
operator|<
name|bool
name|preserveNames
operator|=
name|true
operator|,
name|typename
name|T
operator|=
name|ConstantFolder
operator|,
name|typename
name|Inserter
operator|=
name|IRBuilderDefaultInserter
operator|<
name|preserveNames
operator|>
expr|>
name|class
name|IRBuilder
operator|:
name|public
name|Inserter
block|{
name|BasicBlock
operator|*
name|BB
block|;
name|BasicBlock
operator|::
name|iterator
name|InsertPt
block|;
name|unsigned
name|MDKind
block|;
name|MDNode
operator|*
name|CurDbgLocation
block|;
name|LLVMContext
operator|&
name|Context
block|;
name|T
name|Folder
block|;
name|public
operator|:
name|IRBuilder
argument_list|(
name|LLVMContext
operator|&
name|C
argument_list|,
specifier|const
name|T
operator|&
name|F
argument_list|,
specifier|const
name|Inserter
operator|&
name|I
operator|=
name|Inserter
argument_list|()
argument_list|)
operator|:
name|Inserter
argument_list|(
name|I
argument_list|)
block|,
name|MDKind
argument_list|(
literal|0
argument_list|)
block|,
name|CurDbgLocation
argument_list|(
literal|0
argument_list|)
block|,
name|Context
argument_list|(
name|C
argument_list|)
block|,
name|Folder
argument_list|(
argument|F
argument_list|)
block|{
name|ClearInsertionPoint
argument_list|()
block|;    }
name|explicit
name|IRBuilder
argument_list|(
name|LLVMContext
operator|&
name|C
argument_list|)
operator|:
name|MDKind
argument_list|(
literal|0
argument_list|)
block|,
name|CurDbgLocation
argument_list|(
literal|0
argument_list|)
block|,
name|Context
argument_list|(
name|C
argument_list|)
block|,
name|Folder
argument_list|(
argument|C
argument_list|)
block|{
name|ClearInsertionPoint
argument_list|()
block|;   }
name|explicit
name|IRBuilder
argument_list|(
name|BasicBlock
operator|*
name|TheBB
argument_list|,
specifier|const
name|T
operator|&
name|F
argument_list|)
operator|:
name|MDKind
argument_list|(
literal|0
argument_list|)
block|,
name|CurDbgLocation
argument_list|(
literal|0
argument_list|)
block|,
name|Context
argument_list|(
name|TheBB
operator|->
name|getContext
argument_list|()
argument_list|)
block|,
name|Folder
argument_list|(
argument|F
argument_list|)
block|{
name|SetInsertPoint
argument_list|(
name|TheBB
argument_list|)
block|;   }
name|explicit
name|IRBuilder
argument_list|(
name|BasicBlock
operator|*
name|TheBB
argument_list|)
operator|:
name|MDKind
argument_list|(
literal|0
argument_list|)
block|,
name|CurDbgLocation
argument_list|(
literal|0
argument_list|)
block|,
name|Context
argument_list|(
name|TheBB
operator|->
name|getContext
argument_list|()
argument_list|)
block|,
name|Folder
argument_list|(
argument|Context
argument_list|)
block|{
name|SetInsertPoint
argument_list|(
name|TheBB
argument_list|)
block|;   }
name|IRBuilder
argument_list|(
argument|BasicBlock *TheBB
argument_list|,
argument|BasicBlock::iterator IP
argument_list|,
argument|const T& F
argument_list|)
operator|:
name|MDKind
argument_list|(
literal|0
argument_list|)
block|,
name|CurDbgLocation
argument_list|(
literal|0
argument_list|)
block|,
name|Context
argument_list|(
name|TheBB
operator|->
name|getContext
argument_list|()
argument_list|)
block|,
name|Folder
argument_list|(
argument|F
argument_list|)
block|{
name|SetInsertPoint
argument_list|(
name|TheBB
argument_list|,
name|IP
argument_list|)
block|;   }
name|IRBuilder
argument_list|(
argument|BasicBlock *TheBB
argument_list|,
argument|BasicBlock::iterator IP
argument_list|)
operator|:
name|MDKind
argument_list|(
literal|0
argument_list|)
block|,
name|CurDbgLocation
argument_list|(
literal|0
argument_list|)
block|,
name|Context
argument_list|(
name|TheBB
operator|->
name|getContext
argument_list|()
argument_list|)
block|,
name|Folder
argument_list|(
argument|Context
argument_list|)
block|{
name|SetInsertPoint
argument_list|(
name|TheBB
argument_list|,
name|IP
argument_list|)
block|;   }
comment|/// getFolder - Get the constant folder being used.
specifier|const
name|T
operator|&
name|getFolder
argument_list|()
block|{
return|return
name|Folder
return|;
block|}
comment|/// isNamePreserving - Return true if this builder is configured to actually
comment|/// add the requested names to IR created through it.
name|bool
name|isNamePreserving
argument_list|()
specifier|const
block|{
return|return
name|preserveNames
return|;
block|}
end_expr_stmt

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_comment
comment|// Builder configuration methods
end_comment

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_comment
comment|/// ClearInsertionPoint - Clear the insertion point: created instructions will
end_comment

begin_comment
comment|/// not be inserted into a block.
end_comment

begin_function
name|void
name|ClearInsertionPoint
parameter_list|()
block|{
name|BB
operator|=
literal|0
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|BasicBlock
operator|*
name|GetInsertBlock
argument_list|()
specifier|const
block|{
return|return
name|BB
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|BasicBlock
operator|::
name|iterator
name|GetInsertPoint
argument_list|()
specifier|const
block|{
return|return
name|InsertPt
return|;
block|}
end_expr_stmt

begin_comment
comment|/// SetInsertPoint - This specifies that created instructions should be
end_comment

begin_comment
comment|/// appended to the end of the specified block.
end_comment

begin_function
name|void
name|SetInsertPoint
parameter_list|(
name|BasicBlock
modifier|*
name|TheBB
parameter_list|)
block|{
name|BB
operator|=
name|TheBB
expr_stmt|;
name|InsertPt
operator|=
name|BB
operator|->
name|end
argument_list|()
expr_stmt|;
block|}
end_function

begin_comment
comment|/// SetInsertPoint - This specifies that created instructions should be
end_comment

begin_comment
comment|/// inserted at the specified point.
end_comment

begin_decl_stmt
name|void
name|SetInsertPoint
argument_list|(
name|BasicBlock
operator|*
name|TheBB
argument_list|,
name|BasicBlock
operator|::
name|iterator
name|IP
argument_list|)
block|{
name|BB
operator|=
name|TheBB
expr_stmt|;
name|InsertPt
operator|=
name|IP
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|/// SetCurrentDebugLocation - Set location information used by debugging
end_comment

begin_comment
comment|/// information.
end_comment

begin_function
name|void
name|SetCurrentDebugLocation
parameter_list|(
name|MDNode
modifier|*
name|L
parameter_list|)
block|{
if|if
condition|(
name|MDKind
operator|==
literal|0
condition|)
name|MDKind
operator|=
name|Context
operator|.
name|getMetadata
argument_list|()
operator|.
name|getMDKind
argument_list|(
literal|"dbg"
argument_list|)
expr_stmt|;
if|if
condition|(
name|MDKind
operator|==
literal|0
condition|)
name|MDKind
operator|=
name|Context
operator|.
name|getMetadata
argument_list|()
operator|.
name|registerMDKind
argument_list|(
literal|"dbg"
argument_list|)
expr_stmt|;
name|CurDbgLocation
operator|=
name|L
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|MDNode
operator|*
name|getCurrentDebugLocation
argument_list|()
specifier|const
block|{
return|return
name|CurDbgLocation
return|;
block|}
end_expr_stmt

begin_comment
comment|/// SetDebugLocation -  Set location information for the given instruction.
end_comment

begin_function
name|void
name|SetDebugLocation
parameter_list|(
name|Instruction
modifier|*
name|I
parameter_list|)
block|{
if|if
condition|(
name|CurDbgLocation
condition|)
name|Context
operator|.
name|getMetadata
argument_list|()
operator|.
name|addMD
argument_list|(
name|MDKind
argument_list|,
name|CurDbgLocation
argument_list|,
name|I
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/// Insert - Insert and return the specified instruction.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|InstTy
operator|>
name|InstTy
operator|*
name|Insert
argument_list|(
argument|InstTy *I
argument_list|,
argument|const Twine&Name =
literal|""
argument_list|)
specifier|const
block|{
name|this
operator|->
name|InsertHelper
argument_list|(
name|I
argument_list|,
name|Name
argument_list|,
name|BB
argument_list|,
name|InsertPt
argument_list|)
block|;
if|if
condition|(
name|CurDbgLocation
condition|)
name|Context
operator|.
name|getMetadata
argument_list|()
operator|.
name|addMD
argument_list|(
name|MDKind
argument_list|,
name|CurDbgLocation
argument_list|,
name|I
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|I
return|;
end_return

begin_comment
unit|}
comment|//===--------------------------------------------------------------------===//
end_comment

begin_comment
comment|// Type creation methods
end_comment

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_comment
comment|/// getInt1Ty - Fetch the type representing a single bit
end_comment

begin_function
unit|const
name|Type
modifier|*
name|getInt1Ty
parameter_list|()
block|{
return|return
name|Type
operator|::
name|getInt1Ty
argument_list|(
name|Context
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/// getInt8Ty - Fetch the type representing an 8-bit integer.
end_comment

begin_function
specifier|const
name|Type
modifier|*
name|getInt8Ty
parameter_list|()
block|{
return|return
name|Type
operator|::
name|getInt8Ty
argument_list|(
name|Context
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/// getInt16Ty - Fetch the type representing a 16-bit integer.
end_comment

begin_function
specifier|const
name|Type
modifier|*
name|getInt16Ty
parameter_list|()
block|{
return|return
name|Type
operator|::
name|getInt16Ty
argument_list|(
name|Context
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/// getInt32Ty - Fetch the type resepresenting a 32-bit integer.
end_comment

begin_function
specifier|const
name|Type
modifier|*
name|getInt32Ty
parameter_list|()
block|{
return|return
name|Type
operator|::
name|getInt32Ty
argument_list|(
name|Context
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/// getInt64Ty - Fetch the type representing a 64-bit integer.
end_comment

begin_function
specifier|const
name|Type
modifier|*
name|getInt64Ty
parameter_list|()
block|{
return|return
name|Type
operator|::
name|getInt64Ty
argument_list|(
name|Context
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/// getFloatTy - Fetch the type representing a 32-bit floating point value.
end_comment

begin_function
specifier|const
name|Type
modifier|*
name|getFloatTy
parameter_list|()
block|{
return|return
name|Type
operator|::
name|getFloatTy
argument_list|(
name|Context
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/// getDoubleTy - Fetch the type representing a 64-bit floating point value.
end_comment

begin_function
specifier|const
name|Type
modifier|*
name|getDoubleTy
parameter_list|()
block|{
return|return
name|Type
operator|::
name|getDoubleTy
argument_list|(
name|Context
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/// getVoidTy - Fetch the type representing void.
end_comment

begin_function
specifier|const
name|Type
modifier|*
name|getVoidTy
parameter_list|()
block|{
return|return
name|Type
operator|::
name|getVoidTy
argument_list|(
name|Context
argument_list|)
return|;
block|}
end_function

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_comment
comment|// Instruction creation methods: Terminators
end_comment

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_comment
comment|/// CreateRetVoid - Create a 'ret void' instruction.
end_comment

begin_function
name|ReturnInst
modifier|*
name|CreateRetVoid
parameter_list|()
block|{
return|return
name|Insert
argument_list|(
name|ReturnInst
operator|::
name|Create
argument_list|(
name|Context
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/// @verbatim
end_comment

begin_comment
comment|/// CreateRet - Create a 'ret<val>' instruction.
end_comment

begin_comment
comment|/// @endverbatim
end_comment

begin_function
name|ReturnInst
modifier|*
name|CreateRet
parameter_list|(
name|Value
modifier|*
name|V
parameter_list|)
block|{
return|return
name|Insert
argument_list|(
name|ReturnInst
operator|::
name|Create
argument_list|(
name|Context
argument_list|,
name|V
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/// CreateAggregateRet - Create a sequence of N insertvalue instructions,
end_comment

begin_comment
comment|/// with one Value from the retVals array each, that build a aggregate
end_comment

begin_comment
comment|/// return value one value at a time, and a ret instruction to return
end_comment

begin_comment
comment|/// the resulting aggregate value. This is a convenience function for
end_comment

begin_comment
comment|/// code that uses aggregate return values as a vehicle for having
end_comment

begin_comment
comment|/// multiple return values.
end_comment

begin_comment
comment|///
end_comment

begin_function
name|ReturnInst
modifier|*
name|CreateAggregateRet
parameter_list|(
name|Value
modifier|*
specifier|const
modifier|*
name|retVals
parameter_list|,
name|unsigned
name|N
parameter_list|)
block|{
specifier|const
name|Type
modifier|*
name|RetType
init|=
name|BB
operator|->
name|getParent
argument_list|()
operator|->
name|getReturnType
argument_list|()
decl_stmt|;
name|Value
modifier|*
name|V
init|=
name|UndefValue
operator|::
name|get
argument_list|(
name|RetType
argument_list|)
decl_stmt|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|N
condition|;
operator|++
name|i
control|)
name|V
operator|=
name|CreateInsertValue
argument_list|(
name|V
argument_list|,
name|retVals
index|[
name|i
index|]
argument_list|,
name|i
argument_list|,
literal|"mrv"
argument_list|)
expr_stmt|;
return|return
name|Insert
argument_list|(
name|ReturnInst
operator|::
name|Create
argument_list|(
name|Context
argument_list|,
name|V
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/// CreateBr - Create an unconditional 'br label X' instruction.
end_comment

begin_function
name|BranchInst
modifier|*
name|CreateBr
parameter_list|(
name|BasicBlock
modifier|*
name|Dest
parameter_list|)
block|{
return|return
name|Insert
argument_list|(
name|BranchInst
operator|::
name|Create
argument_list|(
name|Dest
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/// CreateCondBr - Create a conditional 'br Cond, TrueDest, FalseDest'
end_comment

begin_comment
comment|/// instruction.
end_comment

begin_function
name|BranchInst
modifier|*
name|CreateCondBr
parameter_list|(
name|Value
modifier|*
name|Cond
parameter_list|,
name|BasicBlock
modifier|*
name|True
parameter_list|,
name|BasicBlock
modifier|*
name|False
parameter_list|)
block|{
return|return
name|Insert
argument_list|(
name|BranchInst
operator|::
name|Create
argument_list|(
name|True
argument_list|,
name|False
argument_list|,
name|Cond
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/// CreateSwitch - Create a switch instruction with the specified value,
end_comment

begin_comment
comment|/// default dest, and with a hint for the number of cases that will be added
end_comment

begin_comment
comment|/// (for efficient allocation).
end_comment

begin_function
name|SwitchInst
modifier|*
name|CreateSwitch
parameter_list|(
name|Value
modifier|*
name|V
parameter_list|,
name|BasicBlock
modifier|*
name|Dest
parameter_list|,
name|unsigned
name|NumCases
init|=
literal|10
parameter_list|)
block|{
return|return
name|Insert
argument_list|(
name|SwitchInst
operator|::
name|Create
argument_list|(
name|V
argument_list|,
name|Dest
argument_list|,
name|NumCases
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/// CreateInvoke - Create an invoke instruction.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|InputIterator
operator|>
name|InvokeInst
operator|*
name|CreateInvoke
argument_list|(
argument|Value *Callee
argument_list|,
argument|BasicBlock *NormalDest
argument_list|,
argument|BasicBlock *UnwindDest
argument_list|,
argument|InputIterator ArgBegin
argument_list|,
argument|InputIterator ArgEnd
argument_list|,
argument|const Twine&Name =
literal|""
argument_list|)
block|{
return|return
name|Insert
argument_list|(
name|InvokeInst
operator|::
name|Create
argument_list|(
name|Callee
argument_list|,
name|NormalDest
argument_list|,
name|UnwindDest
argument_list|,
name|ArgBegin
argument_list|,
name|ArgEnd
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|UnwindInst
modifier|*
name|CreateUnwind
parameter_list|()
block|{
return|return
name|Insert
argument_list|(
argument|new UnwindInst(Context)
argument_list|)
return|;
block|}
end_function

begin_function
name|UnreachableInst
modifier|*
name|CreateUnreachable
parameter_list|()
block|{
return|return
name|Insert
argument_list|(
argument|new UnreachableInst(Context)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_comment
comment|// Instruction creation methods: Binary Operators
end_comment

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_function
name|Value
modifier|*
name|CreateAdd
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|LC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|LHS
operator|)
condition|)
if|if
condition|(
name|Constant
modifier|*
name|RC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|RHS
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateAdd
argument_list|(
name|LC
argument_list|,
name|RC
argument_list|)
return|;
return|return
name|Insert
argument_list|(
name|BinaryOperator
operator|::
name|CreateAdd
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateNSWAdd
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|LC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|LHS
operator|)
condition|)
if|if
condition|(
name|Constant
modifier|*
name|RC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|RHS
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateNSWAdd
argument_list|(
name|LC
argument_list|,
name|RC
argument_list|)
return|;
return|return
name|Insert
argument_list|(
name|BinaryOperator
operator|::
name|CreateNSWAdd
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateFAdd
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|LC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|LHS
operator|)
condition|)
if|if
condition|(
name|Constant
modifier|*
name|RC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|RHS
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateFAdd
argument_list|(
name|LC
argument_list|,
name|RC
argument_list|)
return|;
return|return
name|Insert
argument_list|(
name|BinaryOperator
operator|::
name|CreateFAdd
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateSub
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|LC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|LHS
operator|)
condition|)
if|if
condition|(
name|Constant
modifier|*
name|RC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|RHS
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateSub
argument_list|(
name|LC
argument_list|,
name|RC
argument_list|)
return|;
return|return
name|Insert
argument_list|(
name|BinaryOperator
operator|::
name|CreateSub
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateNSWSub
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|LC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|LHS
operator|)
condition|)
if|if
condition|(
name|Constant
modifier|*
name|RC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|RHS
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateNSWSub
argument_list|(
name|LC
argument_list|,
name|RC
argument_list|)
return|;
return|return
name|Insert
argument_list|(
name|BinaryOperator
operator|::
name|CreateNSWSub
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateFSub
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|LC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|LHS
operator|)
condition|)
if|if
condition|(
name|Constant
modifier|*
name|RC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|RHS
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateFSub
argument_list|(
name|LC
argument_list|,
name|RC
argument_list|)
return|;
return|return
name|Insert
argument_list|(
name|BinaryOperator
operator|::
name|CreateFSub
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateMul
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|LC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|LHS
operator|)
condition|)
if|if
condition|(
name|Constant
modifier|*
name|RC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|RHS
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateMul
argument_list|(
name|LC
argument_list|,
name|RC
argument_list|)
return|;
return|return
name|Insert
argument_list|(
name|BinaryOperator
operator|::
name|CreateMul
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateFMul
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|LC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|LHS
operator|)
condition|)
if|if
condition|(
name|Constant
modifier|*
name|RC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|RHS
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateFMul
argument_list|(
name|LC
argument_list|,
name|RC
argument_list|)
return|;
return|return
name|Insert
argument_list|(
name|BinaryOperator
operator|::
name|CreateFMul
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateUDiv
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|LC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|LHS
operator|)
condition|)
if|if
condition|(
name|Constant
modifier|*
name|RC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|RHS
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateUDiv
argument_list|(
name|LC
argument_list|,
name|RC
argument_list|)
return|;
return|return
name|Insert
argument_list|(
name|BinaryOperator
operator|::
name|CreateUDiv
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateSDiv
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|LC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|LHS
operator|)
condition|)
if|if
condition|(
name|Constant
modifier|*
name|RC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|RHS
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateSDiv
argument_list|(
name|LC
argument_list|,
name|RC
argument_list|)
return|;
return|return
name|Insert
argument_list|(
name|BinaryOperator
operator|::
name|CreateSDiv
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateExactSDiv
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|LC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|LHS
operator|)
condition|)
if|if
condition|(
name|Constant
modifier|*
name|RC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|RHS
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateExactSDiv
argument_list|(
name|LC
argument_list|,
name|RC
argument_list|)
return|;
return|return
name|Insert
argument_list|(
name|BinaryOperator
operator|::
name|CreateExactSDiv
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateFDiv
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|LC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|LHS
operator|)
condition|)
if|if
condition|(
name|Constant
modifier|*
name|RC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|RHS
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateFDiv
argument_list|(
name|LC
argument_list|,
name|RC
argument_list|)
return|;
return|return
name|Insert
argument_list|(
name|BinaryOperator
operator|::
name|CreateFDiv
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateURem
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|LC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|LHS
operator|)
condition|)
if|if
condition|(
name|Constant
modifier|*
name|RC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|RHS
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateURem
argument_list|(
name|LC
argument_list|,
name|RC
argument_list|)
return|;
return|return
name|Insert
argument_list|(
name|BinaryOperator
operator|::
name|CreateURem
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateSRem
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|LC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|LHS
operator|)
condition|)
if|if
condition|(
name|Constant
modifier|*
name|RC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|RHS
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateSRem
argument_list|(
name|LC
argument_list|,
name|RC
argument_list|)
return|;
return|return
name|Insert
argument_list|(
name|BinaryOperator
operator|::
name|CreateSRem
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateFRem
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|LC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|LHS
operator|)
condition|)
if|if
condition|(
name|Constant
modifier|*
name|RC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|RHS
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateFRem
argument_list|(
name|LC
argument_list|,
name|RC
argument_list|)
return|;
return|return
name|Insert
argument_list|(
name|BinaryOperator
operator|::
name|CreateFRem
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateShl
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|LC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|LHS
operator|)
condition|)
if|if
condition|(
name|Constant
modifier|*
name|RC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|RHS
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateShl
argument_list|(
name|LC
argument_list|,
name|RC
argument_list|)
return|;
return|return
name|Insert
argument_list|(
name|BinaryOperator
operator|::
name|CreateShl
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateLShr
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|LC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|LHS
operator|)
condition|)
if|if
condition|(
name|Constant
modifier|*
name|RC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|RHS
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateLShr
argument_list|(
name|LC
argument_list|,
name|RC
argument_list|)
return|;
return|return
name|Insert
argument_list|(
name|BinaryOperator
operator|::
name|CreateLShr
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateAShr
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|LC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|LHS
operator|)
condition|)
if|if
condition|(
name|Constant
modifier|*
name|RC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|RHS
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateAShr
argument_list|(
name|LC
argument_list|,
name|RC
argument_list|)
return|;
return|return
name|Insert
argument_list|(
name|BinaryOperator
operator|::
name|CreateAShr
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateAnd
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|LC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|LHS
operator|)
condition|)
if|if
condition|(
name|Constant
modifier|*
name|RC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|RHS
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateAnd
argument_list|(
name|LC
argument_list|,
name|RC
argument_list|)
return|;
return|return
name|Insert
argument_list|(
name|BinaryOperator
operator|::
name|CreateAnd
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateOr
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|LC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|LHS
operator|)
condition|)
if|if
condition|(
name|Constant
modifier|*
name|RC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|RHS
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateOr
argument_list|(
name|LC
argument_list|,
name|RC
argument_list|)
return|;
return|return
name|Insert
argument_list|(
name|BinaryOperator
operator|::
name|CreateOr
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateXor
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|LC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|LHS
operator|)
condition|)
if|if
condition|(
name|Constant
modifier|*
name|RC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|RHS
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateXor
argument_list|(
name|LC
argument_list|,
name|RC
argument_list|)
return|;
return|return
name|Insert
argument_list|(
name|BinaryOperator
operator|::
name|CreateXor
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
name|Value
modifier|*
name|CreateBinOp
argument_list|(
name|Instruction
operator|::
name|BinaryOps
name|Opc
argument_list|,
name|Value
operator|*
name|LHS
argument_list|,
name|Value
operator|*
name|RHS
argument_list|,
specifier|const
name|Twine
operator|&
name|Name
operator|=
literal|""
argument_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|LC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|LHS
operator|)
condition|)
if|if
condition|(
name|Constant
modifier|*
name|RC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|RHS
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateBinOp
argument_list|(
name|Opc
argument_list|,
name|LC
argument_list|,
name|RC
argument_list|)
return|;
return|return
name|Insert
argument_list|(
name|BinaryOperator
operator|::
name|Create
argument_list|(
name|Opc
argument_list|,
name|LHS
argument_list|,
name|RHS
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_decl_stmt

begin_function
name|Value
modifier|*
name|CreateNeg
parameter_list|(
name|Value
modifier|*
name|V
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|VC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|V
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateNeg
argument_list|(
name|VC
argument_list|)
return|;
return|return
name|Insert
argument_list|(
name|BinaryOperator
operator|::
name|CreateNeg
argument_list|(
name|V
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateFNeg
parameter_list|(
name|Value
modifier|*
name|V
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|VC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|V
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateFNeg
argument_list|(
name|VC
argument_list|)
return|;
return|return
name|Insert
argument_list|(
name|BinaryOperator
operator|::
name|CreateFNeg
argument_list|(
name|V
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateNot
parameter_list|(
name|Value
modifier|*
name|V
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|VC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|V
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateNot
argument_list|(
name|VC
argument_list|)
return|;
return|return
name|Insert
argument_list|(
name|BinaryOperator
operator|::
name|CreateNot
argument_list|(
name|V
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_comment
comment|// Instruction creation methods: Memory Instructions
end_comment

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_function
name|AllocaInst
modifier|*
name|CreateAlloca
parameter_list|(
specifier|const
name|Type
modifier|*
name|Ty
parameter_list|,
name|Value
modifier|*
name|ArraySize
init|=
literal|0
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|Insert
argument_list|(
argument|new AllocaInst(Ty, ArraySize)
argument_list|,
argument|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|FreeInst
modifier|*
name|CreateFree
parameter_list|(
name|Value
modifier|*
name|Ptr
parameter_list|)
block|{
return|return
name|Insert
argument_list|(
argument|new FreeInst(Ptr)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|// Provided to resolve 'CreateLoad(Ptr, "...")' correctly, instead of
end_comment

begin_comment
comment|// converting the string to 'bool' for the isVolatile parameter.
end_comment

begin_function
name|LoadInst
modifier|*
name|CreateLoad
parameter_list|(
name|Value
modifier|*
name|Ptr
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
block|{
return|return
name|Insert
argument_list|(
argument|new LoadInst(Ptr)
argument_list|,
argument|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|LoadInst
modifier|*
name|CreateLoad
parameter_list|(
name|Value
modifier|*
name|Ptr
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|Insert
argument_list|(
argument|new LoadInst(Ptr)
argument_list|,
argument|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|LoadInst
modifier|*
name|CreateLoad
parameter_list|(
name|Value
modifier|*
name|Ptr
parameter_list|,
name|bool
name|isVolatile
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|Insert
argument_list|(
argument|new LoadInst(Ptr,
literal|0
argument|, isVolatile)
argument_list|,
argument|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|StoreInst
modifier|*
name|CreateStore
parameter_list|(
name|Value
modifier|*
name|Val
parameter_list|,
name|Value
modifier|*
name|Ptr
parameter_list|,
name|bool
name|isVolatile
init|=
name|false
parameter_list|)
block|{
return|return
name|Insert
argument_list|(
argument|new StoreInst(Val, Ptr, isVolatile)
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|typename
name|InputIterator
operator|>
name|Value
operator|*
name|CreateGEP
argument_list|(
argument|Value *Ptr
argument_list|,
argument|InputIterator IdxBegin
argument_list|,
argument|InputIterator IdxEnd
argument_list|,
argument|const Twine&Name =
literal|""
argument_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|PC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|Ptr
operator|)
condition|)
block|{
comment|// Every index must be constant.
name|InputIterator
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
name|IdxBegin
init|;
name|i
operator|<
name|IdxEnd
condition|;
operator|++
name|i
control|)
if|if
condition|(
operator|!
name|isa
operator|<
name|Constant
operator|>
operator|(
operator|*
name|i
operator|)
condition|)
break|break;
if|if
condition|(
name|i
operator|==
name|IdxEnd
condition|)
return|return
name|Folder
operator|.
name|CreateGetElementPtr
argument_list|(
name|PC
argument_list|,
operator|&
name|IdxBegin
index|[
literal|0
index|]
argument_list|,
name|IdxEnd
operator|-
name|IdxBegin
argument_list|)
return|;
block|}
end_expr_stmt

begin_return
return|return
name|Insert
argument_list|(
name|GetElementPtrInst
operator|::
name|Create
argument_list|(
name|Ptr
argument_list|,
name|IdxBegin
argument_list|,
name|IdxEnd
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}   template
operator|<
name|typename
name|InputIterator
operator|>
name|Value
operator|*
name|CreateInBoundsGEP
argument_list|(
argument|Value *Ptr
argument_list|,
argument|InputIterator IdxBegin
argument_list|,
argument|InputIterator IdxEnd
argument_list|,
argument|const Twine&Name =
literal|""
argument_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|PC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|Ptr
operator|)
condition|)
block|{
comment|// Every index must be constant.
name|InputIterator
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
name|IdxBegin
init|;
name|i
operator|<
name|IdxEnd
condition|;
operator|++
name|i
control|)
if|if
condition|(
operator|!
name|isa
operator|<
name|Constant
operator|>
operator|(
operator|*
name|i
operator|)
condition|)
break|break;
if|if
condition|(
name|i
operator|==
name|IdxEnd
condition|)
return|return
name|Folder
operator|.
name|CreateInBoundsGetElementPtr
argument_list|(
name|PC
argument_list|,
operator|&
name|IdxBegin
index|[
literal|0
index|]
argument_list|,
name|IdxEnd
operator|-
name|IdxBegin
argument_list|)
return|;
block|}
end_expr_stmt

begin_return
return|return
name|Insert
argument_list|(
name|GetElementPtrInst
operator|::
name|CreateInBounds
argument_list|(
name|Ptr
argument_list|,
name|IdxBegin
argument_list|,
name|IdxEnd
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}   Value
operator|*
name|CreateGEP
argument_list|(
argument|Value *Ptr
argument_list|,
argument|Value *Idx
argument_list|,
argument|const Twine&Name =
literal|""
argument_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|PC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|Ptr
operator|)
condition|)
if|if
condition|(
name|Constant
modifier|*
name|IC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|Idx
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateGetElementPtr
argument_list|(
name|PC
argument_list|,
operator|&
name|IC
argument_list|,
literal|1
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
name|Insert
argument_list|(
name|GetElementPtrInst
operator|::
name|Create
argument_list|(
name|Ptr
argument_list|,
name|Idx
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}   Value
operator|*
name|CreateInBoundsGEP
argument_list|(
argument|Value *Ptr
argument_list|,
argument|Value *Idx
argument_list|,
argument|const Twine&Name =
literal|""
argument_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|PC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|Ptr
operator|)
condition|)
if|if
condition|(
name|Constant
modifier|*
name|IC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|Idx
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateInBoundsGetElementPtr
argument_list|(
name|PC
argument_list|,
operator|&
name|IC
argument_list|,
literal|1
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
name|Insert
argument_list|(
name|GetElementPtrInst
operator|::
name|CreateInBounds
argument_list|(
name|Ptr
argument_list|,
name|Idx
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}   Value
operator|*
name|CreateConstGEP1_32
argument_list|(
argument|Value *Ptr
argument_list|,
argument|unsigned Idx0
argument_list|,
argument|const Twine&Name =
literal|""
argument_list|)
block|{
name|Value
operator|*
name|Idx
operator|=
name|ConstantInt
operator|::
name|get
argument_list|(
name|Type
operator|::
name|getInt32Ty
argument_list|(
name|Context
argument_list|)
argument_list|,
name|Idx0
argument_list|)
block|;
if|if
condition|(
name|Constant
modifier|*
name|PC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|Ptr
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateGetElementPtr
argument_list|(
name|PC
argument_list|,
operator|&
name|Idx
argument_list|,
literal|1
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
name|Insert
argument_list|(
name|GetElementPtrInst
operator|::
name|Create
argument_list|(
name|Ptr
argument_list|,
operator|&
name|Idx
argument_list|,
operator|&
name|Idx
operator|+
literal|1
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}   Value
operator|*
name|CreateConstInBoundsGEP1_32
argument_list|(
argument|Value *Ptr
argument_list|,
argument|unsigned Idx0
argument_list|,
argument|const Twine&Name =
literal|""
argument_list|)
block|{
name|Value
operator|*
name|Idx
operator|=
name|ConstantInt
operator|::
name|get
argument_list|(
name|Type
operator|::
name|getInt32Ty
argument_list|(
name|Context
argument_list|)
argument_list|,
name|Idx0
argument_list|)
block|;
if|if
condition|(
name|Constant
modifier|*
name|PC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|Ptr
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateInBoundsGetElementPtr
argument_list|(
name|PC
argument_list|,
operator|&
name|Idx
argument_list|,
literal|1
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
name|Insert
argument_list|(
name|GetElementPtrInst
operator|::
name|CreateInBounds
argument_list|(
name|Ptr
argument_list|,
operator|&
name|Idx
argument_list|,
operator|&
name|Idx
operator|+
literal|1
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}   Value
operator|*
name|CreateConstGEP2_32
argument_list|(
argument|Value *Ptr
argument_list|,
argument|unsigned Idx0
argument_list|,
argument|unsigned Idx1
argument_list|,
argument|const Twine&Name =
literal|""
argument_list|)
block|{
name|Value
operator|*
name|Idxs
index|[]
operator|=
block|{
name|ConstantInt
operator|::
name|get
argument_list|(
name|Type
operator|::
name|getInt32Ty
argument_list|(
name|Context
argument_list|)
argument_list|,
name|Idx0
argument_list|)
block|,
name|ConstantInt
operator|::
name|get
argument_list|(
argument|Type::getInt32Ty(Context)
argument_list|,
argument|Idx1
argument_list|)
block|}
block|;
if|if
condition|(
name|Constant
modifier|*
name|PC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|Ptr
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateGetElementPtr
argument_list|(
name|PC
argument_list|,
name|Idxs
argument_list|,
literal|2
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
name|Insert
argument_list|(
name|GetElementPtrInst
operator|::
name|Create
argument_list|(
name|Ptr
argument_list|,
name|Idxs
argument_list|,
name|Idxs
operator|+
literal|2
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}   Value
operator|*
name|CreateConstInBoundsGEP2_32
argument_list|(
argument|Value *Ptr
argument_list|,
argument|unsigned Idx0
argument_list|,
argument|unsigned Idx1
argument_list|,
argument|const Twine&Name =
literal|""
argument_list|)
block|{
name|Value
operator|*
name|Idxs
index|[]
operator|=
block|{
name|ConstantInt
operator|::
name|get
argument_list|(
name|Type
operator|::
name|getInt32Ty
argument_list|(
name|Context
argument_list|)
argument_list|,
name|Idx0
argument_list|)
block|,
name|ConstantInt
operator|::
name|get
argument_list|(
argument|Type::getInt32Ty(Context)
argument_list|,
argument|Idx1
argument_list|)
block|}
block|;
if|if
condition|(
name|Constant
modifier|*
name|PC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|Ptr
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateInBoundsGetElementPtr
argument_list|(
name|PC
argument_list|,
name|Idxs
argument_list|,
literal|2
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
name|Insert
argument_list|(
name|GetElementPtrInst
operator|::
name|CreateInBounds
argument_list|(
name|Ptr
argument_list|,
name|Idxs
argument_list|,
name|Idxs
operator|+
literal|2
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}   Value
operator|*
name|CreateConstGEP1_64
argument_list|(
argument|Value *Ptr
argument_list|,
argument|uint64_t Idx0
argument_list|,
argument|const Twine&Name =
literal|""
argument_list|)
block|{
name|Value
operator|*
name|Idx
operator|=
name|ConstantInt
operator|::
name|get
argument_list|(
name|Type
operator|::
name|getInt64Ty
argument_list|(
name|Context
argument_list|)
argument_list|,
name|Idx0
argument_list|)
block|;
if|if
condition|(
name|Constant
modifier|*
name|PC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|Ptr
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateGetElementPtr
argument_list|(
name|PC
argument_list|,
operator|&
name|Idx
argument_list|,
literal|1
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
name|Insert
argument_list|(
name|GetElementPtrInst
operator|::
name|Create
argument_list|(
name|Ptr
argument_list|,
operator|&
name|Idx
argument_list|,
operator|&
name|Idx
operator|+
literal|1
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}   Value
operator|*
name|CreateConstInBoundsGEP1_64
argument_list|(
argument|Value *Ptr
argument_list|,
argument|uint64_t Idx0
argument_list|,
argument|const Twine&Name =
literal|""
argument_list|)
block|{
name|Value
operator|*
name|Idx
operator|=
name|ConstantInt
operator|::
name|get
argument_list|(
name|Type
operator|::
name|getInt64Ty
argument_list|(
name|Context
argument_list|)
argument_list|,
name|Idx0
argument_list|)
block|;
if|if
condition|(
name|Constant
modifier|*
name|PC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|Ptr
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateInBoundsGetElementPtr
argument_list|(
name|PC
argument_list|,
operator|&
name|Idx
argument_list|,
literal|1
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
name|Insert
argument_list|(
name|GetElementPtrInst
operator|::
name|CreateInBounds
argument_list|(
name|Ptr
argument_list|,
operator|&
name|Idx
argument_list|,
operator|&
name|Idx
operator|+
literal|1
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}   Value
operator|*
name|CreateConstGEP2_64
argument_list|(
argument|Value *Ptr
argument_list|,
argument|uint64_t Idx0
argument_list|,
argument|uint64_t Idx1
argument_list|,
argument|const Twine&Name =
literal|""
argument_list|)
block|{
name|Value
operator|*
name|Idxs
index|[]
operator|=
block|{
name|ConstantInt
operator|::
name|get
argument_list|(
name|Type
operator|::
name|getInt64Ty
argument_list|(
name|Context
argument_list|)
argument_list|,
name|Idx0
argument_list|)
block|,
name|ConstantInt
operator|::
name|get
argument_list|(
argument|Type::getInt64Ty(Context)
argument_list|,
argument|Idx1
argument_list|)
block|}
block|;
if|if
condition|(
name|Constant
modifier|*
name|PC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|Ptr
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateGetElementPtr
argument_list|(
name|PC
argument_list|,
name|Idxs
argument_list|,
literal|2
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
name|Insert
argument_list|(
name|GetElementPtrInst
operator|::
name|Create
argument_list|(
name|Ptr
argument_list|,
name|Idxs
argument_list|,
name|Idxs
operator|+
literal|2
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}   Value
operator|*
name|CreateConstInBoundsGEP2_64
argument_list|(
argument|Value *Ptr
argument_list|,
argument|uint64_t Idx0
argument_list|,
argument|uint64_t Idx1
argument_list|,
argument|const Twine&Name =
literal|""
argument_list|)
block|{
name|Value
operator|*
name|Idxs
index|[]
operator|=
block|{
name|ConstantInt
operator|::
name|get
argument_list|(
name|Type
operator|::
name|getInt64Ty
argument_list|(
name|Context
argument_list|)
argument_list|,
name|Idx0
argument_list|)
block|,
name|ConstantInt
operator|::
name|get
argument_list|(
argument|Type::getInt64Ty(Context)
argument_list|,
argument|Idx1
argument_list|)
block|}
block|;
if|if
condition|(
name|Constant
modifier|*
name|PC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|Ptr
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateInBoundsGetElementPtr
argument_list|(
name|PC
argument_list|,
name|Idxs
argument_list|,
literal|2
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
name|Insert
argument_list|(
name|GetElementPtrInst
operator|::
name|CreateInBounds
argument_list|(
name|Ptr
argument_list|,
name|Idxs
argument_list|,
name|Idxs
operator|+
literal|2
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}   Value
operator|*
name|CreateStructGEP
argument_list|(
argument|Value *Ptr
argument_list|,
argument|unsigned Idx
argument_list|,
argument|const Twine&Name =
literal|""
argument_list|)
block|{
return|return
name|CreateConstInBoundsGEP2_32
argument_list|(
name|Ptr
argument_list|,
literal|0
argument_list|,
name|Idx
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|Value
modifier|*
name|CreateGlobalString
parameter_list|(
specifier|const
name|char
modifier|*
name|Str
init|=
literal|""
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
name|Constant
modifier|*
name|StrConstant
init|=
name|ConstantArray
operator|::
name|get
argument_list|(
name|Context
argument_list|,
name|Str
argument_list|,
name|true
argument_list|)
decl_stmt|;
name|Module
modifier|&
name|M
init|=
operator|*
name|BB
operator|->
name|getParent
argument_list|()
operator|->
name|getParent
argument_list|()
decl_stmt|;
name|GlobalVariable
modifier|*
name|gv
init|=
name|new
name|GlobalVariable
argument_list|(
name|M
argument_list|,
name|StrConstant
operator|->
name|getType
argument_list|()
argument_list|,
name|true
argument_list|,
name|GlobalValue
operator|::
name|InternalLinkage
argument_list|,
name|StrConstant
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|,
name|false
argument_list|)
decl_stmt|;
name|gv
operator|->
name|setName
argument_list|(
name|Name
argument_list|)
expr_stmt|;
return|return
name|gv
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateGlobalStringPtr
parameter_list|(
specifier|const
name|char
modifier|*
name|Str
init|=
literal|""
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
name|Value
modifier|*
name|gv
init|=
name|CreateGlobalString
argument_list|(
name|Str
argument_list|,
name|Name
argument_list|)
decl_stmt|;
name|Value
modifier|*
name|zero
init|=
name|ConstantInt
operator|::
name|get
argument_list|(
name|Type
operator|::
name|getInt32Ty
argument_list|(
name|Context
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Value
modifier|*
name|Args
index|[]
init|=
block|{
name|zero
block|,
name|zero
block|}
decl_stmt|;
return|return
name|CreateInBoundsGEP
argument_list|(
name|gv
argument_list|,
name|Args
argument_list|,
name|Args
operator|+
literal|2
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_comment
comment|// Instruction creation methods: Cast/Conversion Operators
end_comment

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_function
name|Value
modifier|*
name|CreateTrunc
parameter_list|(
name|Value
modifier|*
name|V
parameter_list|,
specifier|const
name|Type
modifier|*
name|DestTy
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|CreateCast
argument_list|(
name|Instruction
operator|::
name|Trunc
argument_list|,
name|V
argument_list|,
name|DestTy
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateZExt
parameter_list|(
name|Value
modifier|*
name|V
parameter_list|,
specifier|const
name|Type
modifier|*
name|DestTy
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|CreateCast
argument_list|(
name|Instruction
operator|::
name|ZExt
argument_list|,
name|V
argument_list|,
name|DestTy
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateSExt
parameter_list|(
name|Value
modifier|*
name|V
parameter_list|,
specifier|const
name|Type
modifier|*
name|DestTy
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|CreateCast
argument_list|(
name|Instruction
operator|::
name|SExt
argument_list|,
name|V
argument_list|,
name|DestTy
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateFPToUI
parameter_list|(
name|Value
modifier|*
name|V
parameter_list|,
specifier|const
name|Type
modifier|*
name|DestTy
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|CreateCast
argument_list|(
name|Instruction
operator|::
name|FPToUI
argument_list|,
name|V
argument_list|,
name|DestTy
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateFPToSI
parameter_list|(
name|Value
modifier|*
name|V
parameter_list|,
specifier|const
name|Type
modifier|*
name|DestTy
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|CreateCast
argument_list|(
name|Instruction
operator|::
name|FPToSI
argument_list|,
name|V
argument_list|,
name|DestTy
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateUIToFP
parameter_list|(
name|Value
modifier|*
name|V
parameter_list|,
specifier|const
name|Type
modifier|*
name|DestTy
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|CreateCast
argument_list|(
name|Instruction
operator|::
name|UIToFP
argument_list|,
name|V
argument_list|,
name|DestTy
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateSIToFP
parameter_list|(
name|Value
modifier|*
name|V
parameter_list|,
specifier|const
name|Type
modifier|*
name|DestTy
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|CreateCast
argument_list|(
name|Instruction
operator|::
name|SIToFP
argument_list|,
name|V
argument_list|,
name|DestTy
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateFPTrunc
parameter_list|(
name|Value
modifier|*
name|V
parameter_list|,
specifier|const
name|Type
modifier|*
name|DestTy
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|CreateCast
argument_list|(
name|Instruction
operator|::
name|FPTrunc
argument_list|,
name|V
argument_list|,
name|DestTy
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateFPExt
parameter_list|(
name|Value
modifier|*
name|V
parameter_list|,
specifier|const
name|Type
modifier|*
name|DestTy
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|CreateCast
argument_list|(
name|Instruction
operator|::
name|FPExt
argument_list|,
name|V
argument_list|,
name|DestTy
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreatePtrToInt
parameter_list|(
name|Value
modifier|*
name|V
parameter_list|,
specifier|const
name|Type
modifier|*
name|DestTy
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|CreateCast
argument_list|(
name|Instruction
operator|::
name|PtrToInt
argument_list|,
name|V
argument_list|,
name|DestTy
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateIntToPtr
parameter_list|(
name|Value
modifier|*
name|V
parameter_list|,
specifier|const
name|Type
modifier|*
name|DestTy
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|CreateCast
argument_list|(
name|Instruction
operator|::
name|IntToPtr
argument_list|,
name|V
argument_list|,
name|DestTy
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateBitCast
parameter_list|(
name|Value
modifier|*
name|V
parameter_list|,
specifier|const
name|Type
modifier|*
name|DestTy
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|CreateCast
argument_list|(
name|Instruction
operator|::
name|BitCast
argument_list|,
name|V
argument_list|,
name|DestTy
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateZExtOrBitCast
parameter_list|(
name|Value
modifier|*
name|V
parameter_list|,
specifier|const
name|Type
modifier|*
name|DestTy
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
if|if
condition|(
name|V
operator|->
name|getType
argument_list|()
operator|==
name|DestTy
condition|)
return|return
name|V
return|;
if|if
condition|(
name|Constant
modifier|*
name|VC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|V
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateZExtOrBitCast
argument_list|(
name|VC
argument_list|,
name|DestTy
argument_list|)
return|;
return|return
name|Insert
argument_list|(
name|CastInst
operator|::
name|CreateZExtOrBitCast
argument_list|(
name|V
argument_list|,
name|DestTy
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateSExtOrBitCast
parameter_list|(
name|Value
modifier|*
name|V
parameter_list|,
specifier|const
name|Type
modifier|*
name|DestTy
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
if|if
condition|(
name|V
operator|->
name|getType
argument_list|()
operator|==
name|DestTy
condition|)
return|return
name|V
return|;
if|if
condition|(
name|Constant
modifier|*
name|VC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|V
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateSExtOrBitCast
argument_list|(
name|VC
argument_list|,
name|DestTy
argument_list|)
return|;
return|return
name|Insert
argument_list|(
name|CastInst
operator|::
name|CreateSExtOrBitCast
argument_list|(
name|V
argument_list|,
name|DestTy
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateTruncOrBitCast
parameter_list|(
name|Value
modifier|*
name|V
parameter_list|,
specifier|const
name|Type
modifier|*
name|DestTy
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
if|if
condition|(
name|V
operator|->
name|getType
argument_list|()
operator|==
name|DestTy
condition|)
return|return
name|V
return|;
if|if
condition|(
name|Constant
modifier|*
name|VC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|V
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateTruncOrBitCast
argument_list|(
name|VC
argument_list|,
name|DestTy
argument_list|)
return|;
return|return
name|Insert
argument_list|(
name|CastInst
operator|::
name|CreateTruncOrBitCast
argument_list|(
name|V
argument_list|,
name|DestTy
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
name|Value
modifier|*
name|CreateCast
argument_list|(
name|Instruction
operator|::
name|CastOps
name|Op
argument_list|,
name|Value
operator|*
name|V
argument_list|,
specifier|const
name|Type
operator|*
name|DestTy
argument_list|,
specifier|const
name|Twine
operator|&
name|Name
operator|=
literal|""
argument_list|)
block|{
if|if
condition|(
name|V
operator|->
name|getType
argument_list|()
operator|==
name|DestTy
condition|)
return|return
name|V
return|;
if|if
condition|(
name|Constant
modifier|*
name|VC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|V
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateCast
argument_list|(
name|Op
argument_list|,
name|VC
argument_list|,
name|DestTy
argument_list|)
return|;
return|return
name|Insert
argument_list|(
name|CastInst
operator|::
name|Create
argument_list|(
name|Op
argument_list|,
name|V
argument_list|,
name|DestTy
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_decl_stmt

begin_function
name|Value
modifier|*
name|CreatePointerCast
parameter_list|(
name|Value
modifier|*
name|V
parameter_list|,
specifier|const
name|Type
modifier|*
name|DestTy
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
if|if
condition|(
name|V
operator|->
name|getType
argument_list|()
operator|==
name|DestTy
condition|)
return|return
name|V
return|;
if|if
condition|(
name|Constant
modifier|*
name|VC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|V
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreatePointerCast
argument_list|(
name|VC
argument_list|,
name|DestTy
argument_list|)
return|;
return|return
name|Insert
argument_list|(
name|CastInst
operator|::
name|CreatePointerCast
argument_list|(
name|V
argument_list|,
name|DestTy
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateIntCast
parameter_list|(
name|Value
modifier|*
name|V
parameter_list|,
specifier|const
name|Type
modifier|*
name|DestTy
parameter_list|,
name|bool
name|isSigned
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
if|if
condition|(
name|V
operator|->
name|getType
argument_list|()
operator|==
name|DestTy
condition|)
return|return
name|V
return|;
if|if
condition|(
name|Constant
modifier|*
name|VC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|V
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateIntCast
argument_list|(
name|VC
argument_list|,
name|DestTy
argument_list|,
name|isSigned
argument_list|)
return|;
return|return
name|Insert
argument_list|(
name|CastInst
operator|::
name|CreateIntegerCast
argument_list|(
name|V
argument_list|,
name|DestTy
argument_list|,
name|isSigned
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateFPCast
parameter_list|(
name|Value
modifier|*
name|V
parameter_list|,
specifier|const
name|Type
modifier|*
name|DestTy
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
if|if
condition|(
name|V
operator|->
name|getType
argument_list|()
operator|==
name|DestTy
condition|)
return|return
name|V
return|;
if|if
condition|(
name|Constant
modifier|*
name|VC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|V
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateFPCast
argument_list|(
name|VC
argument_list|,
name|DestTy
argument_list|)
return|;
return|return
name|Insert
argument_list|(
name|CastInst
operator|::
name|CreateFPCast
argument_list|(
name|V
argument_list|,
name|DestTy
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_comment
comment|// Instruction creation methods: Compare Instructions
end_comment

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_function
name|Value
modifier|*
name|CreateICmpEQ
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|CreateICmp
argument_list|(
name|ICmpInst
operator|::
name|ICMP_EQ
argument_list|,
name|LHS
argument_list|,
name|RHS
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateICmpNE
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|CreateICmp
argument_list|(
name|ICmpInst
operator|::
name|ICMP_NE
argument_list|,
name|LHS
argument_list|,
name|RHS
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateICmpUGT
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|CreateICmp
argument_list|(
name|ICmpInst
operator|::
name|ICMP_UGT
argument_list|,
name|LHS
argument_list|,
name|RHS
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateICmpUGE
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|CreateICmp
argument_list|(
name|ICmpInst
operator|::
name|ICMP_UGE
argument_list|,
name|LHS
argument_list|,
name|RHS
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateICmpULT
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|CreateICmp
argument_list|(
name|ICmpInst
operator|::
name|ICMP_ULT
argument_list|,
name|LHS
argument_list|,
name|RHS
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateICmpULE
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|CreateICmp
argument_list|(
name|ICmpInst
operator|::
name|ICMP_ULE
argument_list|,
name|LHS
argument_list|,
name|RHS
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateICmpSGT
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|CreateICmp
argument_list|(
name|ICmpInst
operator|::
name|ICMP_SGT
argument_list|,
name|LHS
argument_list|,
name|RHS
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateICmpSGE
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|CreateICmp
argument_list|(
name|ICmpInst
operator|::
name|ICMP_SGE
argument_list|,
name|LHS
argument_list|,
name|RHS
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateICmpSLT
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|CreateICmp
argument_list|(
name|ICmpInst
operator|::
name|ICMP_SLT
argument_list|,
name|LHS
argument_list|,
name|RHS
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateICmpSLE
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|CreateICmp
argument_list|(
name|ICmpInst
operator|::
name|ICMP_SLE
argument_list|,
name|LHS
argument_list|,
name|RHS
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateFCmpOEQ
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|CreateFCmp
argument_list|(
name|FCmpInst
operator|::
name|FCMP_OEQ
argument_list|,
name|LHS
argument_list|,
name|RHS
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateFCmpOGT
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|CreateFCmp
argument_list|(
name|FCmpInst
operator|::
name|FCMP_OGT
argument_list|,
name|LHS
argument_list|,
name|RHS
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateFCmpOGE
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|CreateFCmp
argument_list|(
name|FCmpInst
operator|::
name|FCMP_OGE
argument_list|,
name|LHS
argument_list|,
name|RHS
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateFCmpOLT
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|CreateFCmp
argument_list|(
name|FCmpInst
operator|::
name|FCMP_OLT
argument_list|,
name|LHS
argument_list|,
name|RHS
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateFCmpOLE
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|CreateFCmp
argument_list|(
name|FCmpInst
operator|::
name|FCMP_OLE
argument_list|,
name|LHS
argument_list|,
name|RHS
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateFCmpONE
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|CreateFCmp
argument_list|(
name|FCmpInst
operator|::
name|FCMP_ONE
argument_list|,
name|LHS
argument_list|,
name|RHS
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateFCmpORD
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|CreateFCmp
argument_list|(
name|FCmpInst
operator|::
name|FCMP_ORD
argument_list|,
name|LHS
argument_list|,
name|RHS
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateFCmpUNO
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|CreateFCmp
argument_list|(
name|FCmpInst
operator|::
name|FCMP_UNO
argument_list|,
name|LHS
argument_list|,
name|RHS
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateFCmpUEQ
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|CreateFCmp
argument_list|(
name|FCmpInst
operator|::
name|FCMP_UEQ
argument_list|,
name|LHS
argument_list|,
name|RHS
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateFCmpUGT
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|CreateFCmp
argument_list|(
name|FCmpInst
operator|::
name|FCMP_UGT
argument_list|,
name|LHS
argument_list|,
name|RHS
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateFCmpUGE
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|CreateFCmp
argument_list|(
name|FCmpInst
operator|::
name|FCMP_UGE
argument_list|,
name|LHS
argument_list|,
name|RHS
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateFCmpULT
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|CreateFCmp
argument_list|(
name|FCmpInst
operator|::
name|FCMP_ULT
argument_list|,
name|LHS
argument_list|,
name|RHS
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateFCmpULE
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|CreateFCmp
argument_list|(
name|FCmpInst
operator|::
name|FCMP_ULE
argument_list|,
name|LHS
argument_list|,
name|RHS
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateFCmpUNE
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|CreateFCmp
argument_list|(
name|FCmpInst
operator|::
name|FCMP_UNE
argument_list|,
name|LHS
argument_list|,
name|RHS
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
name|Value
modifier|*
name|CreateICmp
argument_list|(
name|CmpInst
operator|::
name|Predicate
name|P
argument_list|,
name|Value
operator|*
name|LHS
argument_list|,
name|Value
operator|*
name|RHS
argument_list|,
specifier|const
name|Twine
operator|&
name|Name
operator|=
literal|""
argument_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|LC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|LHS
operator|)
condition|)
if|if
condition|(
name|Constant
modifier|*
name|RC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|RHS
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateICmp
argument_list|(
name|P
argument_list|,
name|LC
argument_list|,
name|RC
argument_list|)
return|;
return|return
name|Insert
argument_list|(
argument|new ICmpInst(P, LHS, RHS)
argument_list|,
argument|Name
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|Value
modifier|*
name|CreateFCmp
argument_list|(
name|CmpInst
operator|::
name|Predicate
name|P
argument_list|,
name|Value
operator|*
name|LHS
argument_list|,
name|Value
operator|*
name|RHS
argument_list|,
specifier|const
name|Twine
operator|&
name|Name
operator|=
literal|""
argument_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|LC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|LHS
operator|)
condition|)
if|if
condition|(
name|Constant
modifier|*
name|RC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|RHS
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateFCmp
argument_list|(
name|P
argument_list|,
name|LC
argument_list|,
name|RC
argument_list|)
return|;
return|return
name|Insert
argument_list|(
argument|new FCmpInst(P, LHS, RHS)
argument_list|,
argument|Name
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_comment
comment|// Instruction creation methods: Other Instructions
end_comment

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_function
name|PHINode
modifier|*
name|CreatePHI
parameter_list|(
specifier|const
name|Type
modifier|*
name|Ty
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|Insert
argument_list|(
name|PHINode
operator|::
name|Create
argument_list|(
name|Ty
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|CallInst
modifier|*
name|CreateCall
parameter_list|(
name|Value
modifier|*
name|Callee
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|Insert
argument_list|(
name|CallInst
operator|::
name|Create
argument_list|(
name|Callee
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|CallInst
modifier|*
name|CreateCall
parameter_list|(
name|Value
modifier|*
name|Callee
parameter_list|,
name|Value
modifier|*
name|Arg
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|Insert
argument_list|(
name|CallInst
operator|::
name|Create
argument_list|(
name|Callee
argument_list|,
name|Arg
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|CallInst
modifier|*
name|CreateCall2
parameter_list|(
name|Value
modifier|*
name|Callee
parameter_list|,
name|Value
modifier|*
name|Arg1
parameter_list|,
name|Value
modifier|*
name|Arg2
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
name|Value
modifier|*
name|Args
index|[]
init|=
block|{
name|Arg1
block|,
name|Arg2
block|}
decl_stmt|;
return|return
name|Insert
argument_list|(
name|CallInst
operator|::
name|Create
argument_list|(
name|Callee
argument_list|,
name|Args
argument_list|,
name|Args
operator|+
literal|2
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|CallInst
modifier|*
name|CreateCall3
parameter_list|(
name|Value
modifier|*
name|Callee
parameter_list|,
name|Value
modifier|*
name|Arg1
parameter_list|,
name|Value
modifier|*
name|Arg2
parameter_list|,
name|Value
modifier|*
name|Arg3
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
name|Value
modifier|*
name|Args
index|[]
init|=
block|{
name|Arg1
block|,
name|Arg2
block|,
name|Arg3
block|}
decl_stmt|;
return|return
name|Insert
argument_list|(
name|CallInst
operator|::
name|Create
argument_list|(
name|Callee
argument_list|,
name|Args
argument_list|,
name|Args
operator|+
literal|3
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|CallInst
modifier|*
name|CreateCall4
parameter_list|(
name|Value
modifier|*
name|Callee
parameter_list|,
name|Value
modifier|*
name|Arg1
parameter_list|,
name|Value
modifier|*
name|Arg2
parameter_list|,
name|Value
modifier|*
name|Arg3
parameter_list|,
name|Value
modifier|*
name|Arg4
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
name|Value
modifier|*
name|Args
index|[]
init|=
block|{
name|Arg1
block|,
name|Arg2
block|,
name|Arg3
block|,
name|Arg4
block|}
decl_stmt|;
return|return
name|Insert
argument_list|(
name|CallInst
operator|::
name|Create
argument_list|(
name|Callee
argument_list|,
name|Args
argument_list|,
name|Args
operator|+
literal|4
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|typename
name|InputIterator
operator|>
name|CallInst
operator|*
name|CreateCall
argument_list|(
argument|Value *Callee
argument_list|,
argument|InputIterator ArgBegin
argument_list|,
argument|InputIterator ArgEnd
argument_list|,
argument|const Twine&Name =
literal|""
argument_list|)
block|{
return|return
name|Insert
argument_list|(
name|CallInst
operator|::
name|Create
argument_list|(
name|Callee
argument_list|,
name|ArgBegin
argument_list|,
name|ArgEnd
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|Value
modifier|*
name|CreateSelect
parameter_list|(
name|Value
modifier|*
name|C
parameter_list|,
name|Value
modifier|*
name|True
parameter_list|,
name|Value
modifier|*
name|False
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|CC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|C
operator|)
condition|)
if|if
condition|(
name|Constant
modifier|*
name|TC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|True
operator|)
condition|)
if|if
condition|(
name|Constant
modifier|*
name|FC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|False
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateSelect
argument_list|(
name|CC
argument_list|,
name|TC
argument_list|,
name|FC
argument_list|)
return|;
return|return
name|Insert
argument_list|(
name|SelectInst
operator|::
name|Create
argument_list|(
name|C
argument_list|,
name|True
argument_list|,
name|False
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|VAArgInst
modifier|*
name|CreateVAArg
parameter_list|(
name|Value
modifier|*
name|List
parameter_list|,
specifier|const
name|Type
modifier|*
name|Ty
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|Insert
argument_list|(
argument|new VAArgInst(List, Ty)
argument_list|,
argument|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateExtractElement
parameter_list|(
name|Value
modifier|*
name|Vec
parameter_list|,
name|Value
modifier|*
name|Idx
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|VC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|Vec
operator|)
condition|)
if|if
condition|(
name|Constant
modifier|*
name|IC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|Idx
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateExtractElement
argument_list|(
name|VC
argument_list|,
name|IC
argument_list|)
return|;
return|return
name|Insert
argument_list|(
name|ExtractElementInst
operator|::
name|Create
argument_list|(
name|Vec
argument_list|,
name|Idx
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateInsertElement
parameter_list|(
name|Value
modifier|*
name|Vec
parameter_list|,
name|Value
modifier|*
name|NewElt
parameter_list|,
name|Value
modifier|*
name|Idx
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|VC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|Vec
operator|)
condition|)
if|if
condition|(
name|Constant
modifier|*
name|NC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|NewElt
operator|)
condition|)
if|if
condition|(
name|Constant
modifier|*
name|IC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|Idx
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateInsertElement
argument_list|(
name|VC
argument_list|,
name|NC
argument_list|,
name|IC
argument_list|)
return|;
return|return
name|Insert
argument_list|(
name|InsertElementInst
operator|::
name|Create
argument_list|(
name|Vec
argument_list|,
name|NewElt
argument_list|,
name|Idx
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateShuffleVector
parameter_list|(
name|Value
modifier|*
name|V1
parameter_list|,
name|Value
modifier|*
name|V2
parameter_list|,
name|Value
modifier|*
name|Mask
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|V1C
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|V1
operator|)
condition|)
if|if
condition|(
name|Constant
modifier|*
name|V2C
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|V2
operator|)
condition|)
if|if
condition|(
name|Constant
modifier|*
name|MC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|Mask
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateShuffleVector
argument_list|(
name|V1C
argument_list|,
name|V2C
argument_list|,
name|MC
argument_list|)
return|;
return|return
name|Insert
argument_list|(
argument|new ShuffleVectorInst(V1, V2, Mask)
argument_list|,
argument|Name
argument_list|)
return|;
block|}
end_function

begin_function
name|Value
modifier|*
name|CreateExtractValue
parameter_list|(
name|Value
modifier|*
name|Agg
parameter_list|,
name|unsigned
name|Idx
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|AggC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|Agg
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateExtractValue
argument_list|(
name|AggC
argument_list|,
operator|&
name|Idx
argument_list|,
literal|1
argument_list|)
return|;
return|return
name|Insert
argument_list|(
name|ExtractValueInst
operator|::
name|Create
argument_list|(
name|Agg
argument_list|,
name|Idx
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|typename
name|InputIterator
operator|>
name|Value
operator|*
name|CreateExtractValue
argument_list|(
argument|Value *Agg
argument_list|,
argument|InputIterator IdxBegin
argument_list|,
argument|InputIterator IdxEnd
argument_list|,
argument|const Twine&Name =
literal|""
argument_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|AggC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|Agg
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateExtractValue
argument_list|(
name|AggC
argument_list|,
name|IdxBegin
argument_list|,
name|IdxEnd
operator|-
name|IdxBegin
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
name|Insert
argument_list|(
name|ExtractValueInst
operator|::
name|Create
argument_list|(
name|Agg
argument_list|,
name|IdxBegin
argument_list|,
name|IdxEnd
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}    Value
operator|*
name|CreateInsertValue
argument_list|(
argument|Value *Agg
argument_list|,
argument|Value *Val
argument_list|,
argument|unsigned Idx
argument_list|,
argument|const Twine&Name =
literal|""
argument_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|AggC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|Agg
operator|)
condition|)
if|if
condition|(
name|Constant
modifier|*
name|ValC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|Val
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateInsertValue
argument_list|(
name|AggC
argument_list|,
name|ValC
argument_list|,
operator|&
name|Idx
argument_list|,
literal|1
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
name|Insert
argument_list|(
name|InsertValueInst
operator|::
name|Create
argument_list|(
name|Agg
argument_list|,
name|Val
argument_list|,
name|Idx
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|InputIterator
operator|>
name|Value
operator|*
name|CreateInsertValue
argument_list|(
argument|Value *Agg
argument_list|,
argument|Value *Val
argument_list|,
argument|InputIterator IdxBegin
argument_list|,
argument|InputIterator IdxEnd
argument_list|,
argument|const Twine&Name =
literal|""
argument_list|)
block|{
if|if
condition|(
name|Constant
modifier|*
name|AggC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|Agg
operator|)
condition|)
if|if
condition|(
name|Constant
modifier|*
name|ValC
init|=
name|dyn_cast
operator|<
name|Constant
operator|>
operator|(
name|Val
operator|)
condition|)
return|return
name|Folder
operator|.
name|CreateInsertValue
argument_list|(
name|AggC
argument_list|,
name|ValC
argument_list|,
name|IdxBegin
argument_list|,
name|IdxEnd
operator|-
name|IdxBegin
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
name|Insert
argument_list|(
name|InsertValueInst
operator|::
name|Create
argument_list|(
name|Agg
argument_list|,
name|Val
argument_list|,
name|IdxBegin
argument_list|,
name|IdxEnd
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
end_return

begin_comment
unit|}
comment|//===--------------------------------------------------------------------===//
end_comment

begin_comment
comment|// Utility creation methods
end_comment

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_comment
comment|/// CreateIsNull - Return an i1 value testing if \arg Arg is null.
end_comment

begin_expr_stmt
unit|Value
operator|*
name|CreateIsNull
argument_list|(
argument|Value *Arg
argument_list|,
argument|const Twine&Name =
literal|""
argument_list|)
block|{
return|return
name|CreateICmpEQ
argument_list|(
name|Arg
argument_list|,
name|Constant
operator|::
name|getNullValue
argument_list|(
name|Arg
operator|->
name|getType
argument_list|()
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/// CreateIsNotNull - Return an i1 value testing if \arg Arg is not null.
end_comment

begin_function
name|Value
modifier|*
name|CreateIsNotNull
parameter_list|(
name|Value
modifier|*
name|Arg
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
return|return
name|CreateICmpNE
argument_list|(
name|Arg
argument_list|,
name|Constant
operator|::
name|getNullValue
argument_list|(
name|Arg
operator|->
name|getType
argument_list|()
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/// CreatePtrDiff - Return the i64 difference between two pointer values,
end_comment

begin_comment
comment|/// dividing out the size of the pointed-to objects.  This is intended to
end_comment

begin_comment
comment|/// implement C-style pointer subtraction. As such, the pointers must be
end_comment

begin_comment
comment|/// appropriately aligned for their element types and pointing into the
end_comment

begin_comment
comment|/// same object.
end_comment

begin_function
name|Value
modifier|*
name|CreatePtrDiff
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|Twine
modifier|&
name|Name
init|=
literal|""
parameter_list|)
block|{
name|assert
argument_list|(
name|LHS
operator|->
name|getType
argument_list|()
operator|==
name|RHS
operator|->
name|getType
argument_list|()
operator|&&
literal|"Pointer subtraction operand types must match!"
argument_list|)
expr_stmt|;
specifier|const
name|PointerType
modifier|*
name|ArgType
init|=
name|cast
operator|<
name|PointerType
operator|>
operator|(
name|LHS
operator|->
name|getType
argument_list|()
operator|)
decl_stmt|;
name|Value
modifier|*
name|LHS_int
init|=
name|CreatePtrToInt
argument_list|(
name|LHS
argument_list|,
name|Type
operator|::
name|getInt64Ty
argument_list|(
name|Context
argument_list|)
argument_list|)
decl_stmt|;
name|Value
modifier|*
name|RHS_int
init|=
name|CreatePtrToInt
argument_list|(
name|RHS
argument_list|,
name|Type
operator|::
name|getInt64Ty
argument_list|(
name|Context
argument_list|)
argument_list|)
decl_stmt|;
name|Value
modifier|*
name|Difference
init|=
name|CreateSub
argument_list|(
name|LHS_int
argument_list|,
name|RHS_int
argument_list|)
decl_stmt|;
return|return
name|CreateExactSDiv
argument_list|(
name|Difference
argument_list|,
name|ConstantExpr
operator|::
name|getSizeOf
argument_list|(
name|ArgType
operator|->
name|getElementType
argument_list|()
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_function

begin_endif
unit|};  }
endif|#
directive|endif
end_endif

end_unit

