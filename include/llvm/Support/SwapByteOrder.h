begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- SwapByteOrder.h - Generic and optimized byte swaps -------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares generic and optimized functions to swap the byte order of
end_comment

begin_comment
comment|// an integral type.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_SUPPORT_SWAPBYTEORDER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_SUPPORT_SWAPBYTEORDER_H
end_define

begin_include
include|#
directive|include
file|"llvm/Support/DataTypes.h"
end_include

begin_include
include|#
directive|include
file|<cstddef>
end_include

begin_include
include|#
directive|include
file|<limits>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|sys
block|{
comment|/// SwapByteOrder_16 - This function returns a byte-swapped representation of
comment|/// the 16-bit argument.
specifier|inline
name|uint16_t
name|SwapByteOrder_16
parameter_list|(
name|uint16_t
name|value
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|_DEBUG
argument_list|)
comment|// The DLL version of the runtime lacks these functions (bug!?), but in a
comment|// release build they're replaced with BSWAP instructions anyway.
return|return
name|_byteswap_ushort
argument_list|(
name|value
argument_list|)
return|;
else|#
directive|else
name|uint16_t
name|Hi
init|=
name|value
operator|<<
literal|8
decl_stmt|;
name|uint16_t
name|Lo
init|=
name|value
operator|>>
literal|8
decl_stmt|;
return|return
name|Hi
operator||
name|Lo
return|;
endif|#
directive|endif
block|}
comment|/// SwapByteOrder_32 - This function returns a byte-swapped representation of
comment|/// the 32-bit argument.
specifier|inline
name|uint32_t
name|SwapByteOrder_32
parameter_list|(
name|uint32_t
name|value
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|__llvm__
argument_list|)
operator|||
expr|\
operator|(
name|__GNUC__
operator|>
literal|4
operator|||
operator|(
name|__GNUC__
operator|==
literal|4
operator|&&
name|__GNUC_MINOR__
operator|>=
literal|3
operator|)
operator|)
operator|&&
operator|!
name|defined
argument_list|(
name|__ICC
argument_list|)
return|return
name|__builtin_bswap32
argument_list|(
name|value
argument_list|)
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|_DEBUG
argument_list|)
return|return
name|_byteswap_ulong
argument_list|(
name|value
argument_list|)
return|;
else|#
directive|else
name|uint32_t
name|Byte0
init|=
name|value
operator|&
literal|0x000000FF
decl_stmt|;
name|uint32_t
name|Byte1
init|=
name|value
operator|&
literal|0x0000FF00
decl_stmt|;
name|uint32_t
name|Byte2
init|=
name|value
operator|&
literal|0x00FF0000
decl_stmt|;
name|uint32_t
name|Byte3
init|=
name|value
operator|&
literal|0xFF000000
decl_stmt|;
return|return
operator|(
name|Byte0
operator|<<
literal|24
operator|)
operator||
operator|(
name|Byte1
operator|<<
literal|8
operator|)
operator||
operator|(
name|Byte2
operator|>>
literal|8
operator|)
operator||
operator|(
name|Byte3
operator|>>
literal|24
operator|)
return|;
endif|#
directive|endif
block|}
comment|/// SwapByteOrder_64 - This function returns a byte-swapped representation of
comment|/// the 64-bit argument.
specifier|inline
name|uint64_t
name|SwapByteOrder_64
parameter_list|(
name|uint64_t
name|value
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|__llvm__
argument_list|)
operator|||
expr|\
operator|(
name|__GNUC__
operator|>
literal|4
operator|||
operator|(
name|__GNUC__
operator|==
literal|4
operator|&&
name|__GNUC_MINOR__
operator|>=
literal|3
operator|)
operator|)
operator|&&
operator|!
name|defined
argument_list|(
name|__ICC
argument_list|)
return|return
name|__builtin_bswap64
argument_list|(
name|value
argument_list|)
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|_DEBUG
argument_list|)
return|return
name|_byteswap_uint64
argument_list|(
name|value
argument_list|)
return|;
else|#
directive|else
name|uint64_t
name|Hi
init|=
name|SwapByteOrder_32
argument_list|(
name|uint32_t
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
name|uint32_t
name|Lo
init|=
name|SwapByteOrder_32
argument_list|(
name|uint32_t
argument_list|(
name|value
operator|>>
literal|32
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|Hi
operator|<<
literal|32
operator|)
operator||
name|Lo
return|;
endif|#
directive|endif
block|}
specifier|inline
name|unsigned
name|char
name|SwapByteOrder
parameter_list|(
name|unsigned
name|char
name|C
parameter_list|)
block|{
return|return
name|C
return|;
block|}
specifier|inline
name|signed
name|char
name|SwapByteOrder
parameter_list|(
name|signed
name|char
name|C
parameter_list|)
block|{
return|return
name|C
return|;
block|}
specifier|inline
name|char
name|SwapByteOrder
parameter_list|(
name|char
name|C
parameter_list|)
block|{
return|return
name|C
return|;
block|}
specifier|inline
name|unsigned
name|short
name|SwapByteOrder
parameter_list|(
name|unsigned
name|short
name|C
parameter_list|)
block|{
return|return
name|SwapByteOrder_16
argument_list|(
name|C
argument_list|)
return|;
block|}
specifier|inline
name|signed
name|short
name|SwapByteOrder
parameter_list|(
name|signed
name|short
name|C
parameter_list|)
block|{
return|return
name|SwapByteOrder_16
argument_list|(
name|C
argument_list|)
return|;
block|}
specifier|inline
name|unsigned
name|int
name|SwapByteOrder
parameter_list|(
name|unsigned
name|int
name|C
parameter_list|)
block|{
return|return
name|SwapByteOrder_32
argument_list|(
name|C
argument_list|)
return|;
block|}
specifier|inline
name|signed
name|int
name|SwapByteOrder
parameter_list|(
name|signed
name|int
name|C
parameter_list|)
block|{
return|return
name|SwapByteOrder_32
argument_list|(
name|C
argument_list|)
return|;
block|}
if|#
directive|if
name|__LONG_MAX__
operator|==
name|__INT_MAX__
specifier|inline
name|unsigned
name|long
name|SwapByteOrder
parameter_list|(
name|unsigned
name|long
name|C
parameter_list|)
block|{
return|return
name|SwapByteOrder_32
argument_list|(
name|C
argument_list|)
return|;
block|}
specifier|inline
name|signed
name|long
name|SwapByteOrder
parameter_list|(
name|signed
name|long
name|C
parameter_list|)
block|{
return|return
name|SwapByteOrder_32
argument_list|(
name|C
argument_list|)
return|;
block|}
elif|#
directive|elif
name|__LONG_MAX__
operator|==
name|__LONG_LONG_MAX__
specifier|inline
name|unsigned
name|long
name|SwapByteOrder
parameter_list|(
name|unsigned
name|long
name|C
parameter_list|)
block|{
return|return
name|SwapByteOrder_64
argument_list|(
name|C
argument_list|)
return|;
block|}
specifier|inline
name|signed
name|long
name|SwapByteOrder
parameter_list|(
name|signed
name|long
name|C
parameter_list|)
block|{
return|return
name|SwapByteOrder_64
argument_list|(
name|C
argument_list|)
return|;
block|}
else|#
directive|else
error|#
directive|error
literal|"Unknown long size!"
endif|#
directive|endif
specifier|inline
name|unsigned
name|long
name|long
name|SwapByteOrder
parameter_list|(
name|unsigned
name|long
name|long
name|C
parameter_list|)
block|{
return|return
name|SwapByteOrder_64
argument_list|(
name|C
argument_list|)
return|;
block|}
specifier|inline
name|signed
name|long
name|long
name|SwapByteOrder
parameter_list|(
name|signed
name|long
name|long
name|C
parameter_list|)
block|{
return|return
name|SwapByteOrder_64
argument_list|(
name|C
argument_list|)
return|;
block|}
block|}
comment|// end namespace sys
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

