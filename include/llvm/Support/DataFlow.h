begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- llvm/Support/DataFlow.h - dataflow as graphs ------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines specializations of GraphTraits that allows Use-Def and
end_comment

begin_comment
comment|// Def-Use relations to be treated as proper graphs for generic algorithms.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_SUPPORT_DATAFLOW_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_SUPPORT_DATAFLOW_H
end_define

begin_include
include|#
directive|include
file|"llvm/User.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/GraphTraits.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|//===----------------------------------------------------------------------===//
comment|// Provide specializations of GraphTraits to be able to treat def-use/use-def
comment|// chains as graphs
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
specifier|const
name|Value
operator|*
operator|>
block|{
typedef|typedef
specifier|const
name|Value
name|NodeType
typedef|;
typedef|typedef
name|Value
operator|::
name|const_use_iterator
name|ChildIteratorType
expr_stmt|;
specifier|static
name|NodeType
modifier|*
name|getEntryNode
parameter_list|(
specifier|const
name|Value
modifier|*
name|G
parameter_list|)
block|{
return|return
name|G
return|;
block|}
specifier|static
specifier|inline
name|ChildIteratorType
name|child_begin
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
return|return
name|N
operator|->
name|use_begin
argument_list|()
return|;
block|}
specifier|static
specifier|inline
name|ChildIteratorType
name|child_end
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
return|return
name|N
operator|->
name|use_end
argument_list|()
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
name|Value
operator|*
operator|>
block|{
typedef|typedef
name|Value
name|NodeType
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|Value
operator|::
name|use_iterator
name|ChildIteratorType
expr_stmt|;
end_typedef

begin_function
specifier|static
name|NodeType
modifier|*
name|getEntryNode
parameter_list|(
name|Value
modifier|*
name|G
parameter_list|)
block|{
return|return
name|G
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|ChildIteratorType
name|child_begin
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
return|return
name|N
operator|->
name|use_begin
argument_list|()
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|ChildIteratorType
name|child_end
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
return|return
name|N
operator|->
name|use_end
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
unit|};
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
name|Inverse
operator|<
specifier|const
name|User
operator|*
operator|>
expr|>
block|{
typedef|typedef
specifier|const
name|Value
name|NodeType
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|User
operator|::
name|const_op_iterator
name|ChildIteratorType
expr_stmt|;
end_typedef

begin_decl_stmt
specifier|static
name|NodeType
modifier|*
name|getEntryNode
argument_list|(
name|Inverse
operator|<
specifier|const
name|User
operator|*
operator|>
name|G
argument_list|)
block|{
return|return
name|G
operator|.
name|Graph
return|;
block|}
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|ChildIteratorType
name|child_begin
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
if|if
condition|(
specifier|const
name|User
modifier|*
name|U
init|=
name|dyn_cast
operator|<
name|User
operator|>
operator|(
name|N
operator|)
condition|)
return|return
name|U
operator|->
name|op_begin
argument_list|()
return|;
return|return
name|NULL
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|ChildIteratorType
name|child_end
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
if|if
condition|(
specifier|const
name|User
modifier|*
name|U
init|=
name|dyn_cast
operator|<
name|User
operator|>
operator|(
name|N
operator|)
condition|)
return|return
name|U
operator|->
name|op_end
argument_list|()
return|;
return|return
name|NULL
return|;
block|}
end_function

begin_expr_stmt
unit|};
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
name|Inverse
operator|<
name|User
operator|*
operator|>
expr|>
block|{
typedef|typedef
name|Value
name|NodeType
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|User
operator|::
name|op_iterator
name|ChildIteratorType
expr_stmt|;
end_typedef

begin_decl_stmt
specifier|static
name|NodeType
modifier|*
name|getEntryNode
argument_list|(
name|Inverse
operator|<
name|User
operator|*
operator|>
name|G
argument_list|)
block|{
return|return
name|G
operator|.
name|Graph
return|;
block|}
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|ChildIteratorType
name|child_begin
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
if|if
condition|(
name|User
modifier|*
name|U
init|=
name|dyn_cast
operator|<
name|User
operator|>
operator|(
name|N
operator|)
condition|)
return|return
name|U
operator|->
name|op_begin
argument_list|()
return|;
return|return
name|NULL
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|ChildIteratorType
name|child_end
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
if|if
condition|(
name|User
modifier|*
name|U
init|=
name|dyn_cast
operator|<
name|User
operator|>
operator|(
name|N
operator|)
condition|)
return|return
name|U
operator|->
name|op_end
argument_list|()
return|;
return|return
name|NULL
return|;
block|}
end_function

begin_endif
unit|};  }
endif|#
directive|endif
end_endif

end_unit

