begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- llvm/Support/GraphWriter.h - Write graph to a .dot file -*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines a simple interface that can be used to print out generic
end_comment

begin_comment
comment|// LLVM graphs to ".dot" files.  "dot" is a tool that is part of the AT&T
end_comment

begin_comment
comment|// graphviz package (http://www.research.att.com/sw/tools/graphviz/) which can
end_comment

begin_comment
comment|// be used to turn the files output by this interface into a variety of
end_comment

begin_comment
comment|// different graphics formats.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Graphs do not need to implement any interface past what is already required
end_comment

begin_comment
comment|// by the GraphTraits template, but they can choose to implement specializations
end_comment

begin_comment
comment|// of the DOTGraphTraits template if they want to customize the graphs output in
end_comment

begin_comment
comment|// any way.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_SUPPORT_GRAPHWRITER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_SUPPORT_GRAPHWRITER_H
end_define

begin_include
include|#
directive|include
file|"llvm/Support/DOTGraphTraits.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/raw_ostream.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/GraphTraits.h"
end_include

begin_include
include|#
directive|include
file|"llvm/System/Path.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|DOT
block|{
comment|// Private functions...
name|std
operator|::
name|string
name|EscapeString
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Label
argument_list|)
expr_stmt|;
block|}
name|namespace
name|GraphProgram
block|{
enum|enum
name|Name
block|{
name|DOT
block|,
name|FDP
block|,
name|NEATO
block|,
name|TWOPI
block|,
name|CIRCO
block|}
enum|;
block|}
name|void
name|DisplayGraph
argument_list|(
specifier|const
name|sys
operator|::
name|Path
operator|&
name|Filename
argument_list|,
name|bool
name|wait
operator|=
name|true
argument_list|,
name|GraphProgram
operator|::
name|Name
name|program
operator|=
name|GraphProgram
operator|::
name|DOT
argument_list|)
decl_stmt|;
name|template
operator|<
name|typename
name|GraphType
operator|>
name|class
name|GraphWriter
block|{
name|raw_ostream
operator|&
name|O
block|;
specifier|const
name|GraphType
operator|&
name|G
block|;
name|bool
name|ShortNames
block|;
typedef|typedef
name|DOTGraphTraits
operator|<
name|GraphType
operator|>
name|DOTTraits
expr_stmt|;
typedef|typedef
name|GraphTraits
operator|<
name|GraphType
operator|>
name|GTraits
expr_stmt|;
typedef|typedef
name|typename
name|GTraits
operator|::
name|NodeType
name|NodeType
expr_stmt|;
typedef|typedef
name|typename
name|GTraits
operator|::
name|nodes_iterator
name|node_iterator
expr_stmt|;
typedef|typedef
name|typename
name|GTraits
operator|::
name|ChildIteratorType
name|child_iterator
expr_stmt|;
name|public
label|:
name|GraphWriter
argument_list|(
argument|raw_ostream&o
argument_list|,
argument|const GraphType&g
argument_list|,
argument|bool SN
argument_list|)
block|:
name|O
argument_list|(
name|o
argument_list|)
operator|,
name|G
argument_list|(
name|g
argument_list|)
operator|,
name|ShortNames
argument_list|(
argument|SN
argument_list|)
block|{}
name|void
name|writeHeader
argument_list|(
argument|const std::string&Name
argument_list|)
block|{
name|std
operator|::
name|string
name|GraphName
operator|=
name|DOTTraits
operator|::
name|getGraphName
argument_list|(
name|G
argument_list|)
block|;
if|if
condition|(
operator|!
name|Name
operator|.
name|empty
argument_list|()
condition|)
name|O
operator|<<
literal|"digraph \""
operator|<<
name|DOT
operator|::
name|EscapeString
argument_list|(
name|Name
argument_list|)
operator|<<
literal|"\" {\n"
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|GraphName
operator|.
name|empty
argument_list|()
condition|)
name|O
operator|<<
literal|"digraph \""
operator|<<
name|DOT
operator|::
name|EscapeString
argument_list|(
name|GraphName
argument_list|)
operator|<<
literal|"\" {\n"
expr_stmt|;
else|else
name|O
operator|<<
literal|"digraph unnamed {\n"
expr_stmt|;
if|if
condition|(
name|DOTTraits
operator|::
name|renderGraphFromBottomUp
argument_list|()
condition|)
name|O
operator|<<
literal|"\trankdir=\"BT\";\n"
expr_stmt|;
if|if
condition|(
operator|!
name|Name
operator|.
name|empty
argument_list|()
condition|)
name|O
operator|<<
literal|"\tlabel=\""
operator|<<
name|DOT
operator|::
name|EscapeString
argument_list|(
name|Name
argument_list|)
operator|<<
literal|"\";\n"
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|GraphName
operator|.
name|empty
argument_list|()
condition|)
name|O
operator|<<
literal|"\tlabel=\""
operator|<<
name|DOT
operator|::
name|EscapeString
argument_list|(
name|GraphName
argument_list|)
operator|<<
literal|"\";\n"
expr_stmt|;
name|O
operator|<<
name|DOTTraits
operator|::
name|getGraphProperties
argument_list|(
name|G
argument_list|)
expr_stmt|;
name|O
operator|<<
literal|"\n"
expr_stmt|;
block|}
end_decl_stmt

begin_function
name|void
name|writeFooter
parameter_list|()
block|{
comment|// Finish off the graph
name|O
operator|<<
literal|"}\n"
expr_stmt|;
block|}
end_function

begin_function
name|void
name|writeNodes
parameter_list|()
block|{
comment|// Loop over the graph, printing it out...
for|for
control|(
name|node_iterator
name|I
init|=
name|GTraits
operator|::
name|nodes_begin
argument_list|(
name|G
argument_list|)
init|,
name|E
init|=
name|GTraits
operator|::
name|nodes_end
argument_list|(
name|G
argument_list|)
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
name|writeNode
argument_list|(
operator|*
name|I
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|writeNode
parameter_list|(
name|NodeType
modifier|&
name|Node
parameter_list|)
block|{
name|writeNode
argument_list|(
operator|&
name|Node
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|writeNode
parameter_list|(
name|NodeType
modifier|*
specifier|const
modifier|*
name|Node
parameter_list|)
block|{
name|writeNode
argument_list|(
operator|*
name|Node
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|writeNode
parameter_list|(
name|NodeType
modifier|*
name|Node
parameter_list|)
block|{
name|std
operator|::
name|string
name|NodeAttributes
operator|=
name|DOTTraits
operator|::
name|getNodeAttributes
argument_list|(
name|Node
argument_list|,
name|G
argument_list|)
expr_stmt|;
name|O
operator|<<
literal|"\tNode"
operator|<<
name|static_cast
operator|<
specifier|const
name|void
operator|*
operator|>
operator|(
name|Node
operator|)
operator|<<
literal|" [shape=record,"
expr_stmt|;
if|if
condition|(
operator|!
name|NodeAttributes
operator|.
name|empty
argument_list|()
condition|)
name|O
operator|<<
name|NodeAttributes
operator|<<
literal|","
expr_stmt|;
name|O
operator|<<
literal|"label=\"{"
expr_stmt|;
if|if
condition|(
operator|!
name|DOTTraits
operator|::
name|renderGraphFromBottomUp
argument_list|()
condition|)
block|{
name|O
operator|<<
name|DOT
operator|::
name|EscapeString
argument_list|(
name|DOTTraits
operator|::
name|getNodeLabel
argument_list|(
name|Node
argument_list|,
name|G
argument_list|,
name|ShortNames
argument_list|)
argument_list|)
expr_stmt|;
comment|// If we should include the address of the node in the label, do so now.
if|if
condition|(
name|DOTTraits
operator|::
name|hasNodeAddressLabel
argument_list|(
name|Node
argument_list|,
name|G
argument_list|)
condition|)
name|O
operator|<<
literal|"|"
operator|<<
operator|(
name|void
operator|*
operator|)
name|Node
expr_stmt|;
block|}
comment|// Print out the fields of the current node...
name|child_iterator
name|EI
init|=
name|GTraits
operator|::
name|child_begin
argument_list|(
name|Node
argument_list|)
decl_stmt|;
name|child_iterator
name|EE
init|=
name|GTraits
operator|::
name|child_end
argument_list|(
name|Node
argument_list|)
decl_stmt|;
if|if
condition|(
name|EI
operator|!=
name|EE
condition|)
block|{
if|if
condition|(
operator|!
name|DOTTraits
operator|::
name|renderGraphFromBottomUp
argument_list|()
condition|)
name|O
operator|<<
literal|"|"
expr_stmt|;
name|O
operator|<<
literal|"{"
expr_stmt|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|EI
operator|!=
name|EE
operator|&&
name|i
operator|!=
literal|64
condition|;
operator|++
name|EI
operator|,
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
condition|)
name|O
operator|<<
literal|"|"
expr_stmt|;
name|O
operator|<<
literal|"<s"
operator|<<
name|i
operator|<<
literal|">"
operator|<<
name|DOTTraits
operator|::
name|getEdgeSourceLabel
argument_list|(
name|Node
argument_list|,
name|EI
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|EI
operator|!=
name|EE
condition|)
name|O
operator|<<
literal|"|<s64>truncated..."
expr_stmt|;
name|O
operator|<<
literal|"}"
expr_stmt|;
if|if
condition|(
name|DOTTraits
operator|::
name|renderGraphFromBottomUp
argument_list|()
condition|)
name|O
operator|<<
literal|"|"
expr_stmt|;
block|}
if|if
condition|(
name|DOTTraits
operator|::
name|renderGraphFromBottomUp
argument_list|()
condition|)
block|{
name|O
operator|<<
name|DOT
operator|::
name|EscapeString
argument_list|(
name|DOTTraits
operator|::
name|getNodeLabel
argument_list|(
name|Node
argument_list|,
name|G
argument_list|,
name|ShortNames
argument_list|)
argument_list|)
expr_stmt|;
comment|// If we should include the address of the node in the label, do so now.
if|if
condition|(
name|DOTTraits
operator|::
name|hasNodeAddressLabel
argument_list|(
name|Node
argument_list|,
name|G
argument_list|)
condition|)
name|O
operator|<<
literal|"|"
operator|<<
operator|(
name|void
operator|*
operator|)
name|Node
expr_stmt|;
block|}
if|if
condition|(
name|DOTTraits
operator|::
name|hasEdgeDestLabels
argument_list|()
condition|)
block|{
name|O
operator|<<
literal|"|{"
expr_stmt|;
name|unsigned
name|i
init|=
literal|0
decl_stmt|,
name|e
init|=
name|DOTTraits
operator|::
name|numEdgeDestLabels
argument_list|(
name|Node
argument_list|)
decl_stmt|;
for|for
control|(
init|;
name|i
operator|!=
name|e
operator|&&
name|i
operator|!=
literal|64
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
condition|)
name|O
operator|<<
literal|"|"
expr_stmt|;
name|O
operator|<<
literal|"<d"
operator|<<
name|i
operator|<<
literal|">"
operator|<<
name|DOTTraits
operator|::
name|getEdgeDestLabel
argument_list|(
name|Node
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|!=
name|e
condition|)
name|O
operator|<<
literal|"|<d64>truncated..."
expr_stmt|;
name|O
operator|<<
literal|"}"
expr_stmt|;
block|}
name|O
operator|<<
literal|"}\"];\n"
expr_stmt|;
comment|// Finish printing the "node" line
comment|// Output all of the edges now
name|EI
operator|=
name|GTraits
operator|::
name|child_begin
argument_list|(
name|Node
argument_list|)
expr_stmt|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|EI
operator|!=
name|EE
operator|&&
name|i
operator|!=
literal|64
condition|;
operator|++
name|EI
operator|,
operator|++
name|i
control|)
name|writeEdge
argument_list|(
name|Node
argument_list|,
name|i
argument_list|,
name|EI
argument_list|)
expr_stmt|;
for|for
control|(
init|;
name|EI
operator|!=
name|EE
condition|;
operator|++
name|EI
control|)
name|writeEdge
argument_list|(
name|Node
argument_list|,
literal|64
argument_list|,
name|EI
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|writeEdge
parameter_list|(
name|NodeType
modifier|*
name|Node
parameter_list|,
name|unsigned
name|edgeidx
parameter_list|,
name|child_iterator
name|EI
parameter_list|)
block|{
if|if
condition|(
name|NodeType
modifier|*
name|TargetNode
init|=
operator|*
name|EI
condition|)
block|{
name|int
name|DestPort
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|DOTTraits
operator|::
name|edgeTargetsEdgeSource
argument_list|(
name|Node
argument_list|,
name|EI
argument_list|)
condition|)
block|{
name|child_iterator
name|TargetIt
init|=
name|DOTTraits
operator|::
name|getEdgeTarget
argument_list|(
name|Node
argument_list|,
name|EI
argument_list|)
decl_stmt|;
comment|// Figure out which edge this targets...
name|unsigned
name|Offset
init|=
operator|(
name|unsigned
operator|)
name|std
operator|::
name|distance
argument_list|(
name|GTraits
operator|::
name|child_begin
argument_list|(
name|TargetNode
argument_list|)
argument_list|,
name|TargetIt
argument_list|)
decl_stmt|;
name|DestPort
operator|=
name|static_cast
operator|<
name|int
operator|>
operator|(
name|Offset
operator|)
expr_stmt|;
block|}
name|emitEdge
argument_list|(
name|static_cast
operator|<
specifier|const
name|void
operator|*
operator|>
operator|(
name|Node
operator|)
argument_list|,
name|edgeidx
argument_list|,
name|static_cast
operator|<
specifier|const
name|void
operator|*
operator|>
operator|(
name|TargetNode
operator|)
argument_list|,
name|DestPort
argument_list|,
name|DOTTraits
operator|::
name|getEdgeAttributes
argument_list|(
name|Node
argument_list|,
name|EI
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/// emitSimpleNode - Outputs a simple (non-record) node
end_comment

begin_decl_stmt
name|void
name|emitSimpleNode
argument_list|(
specifier|const
name|void
operator|*
name|ID
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|Attr
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|Label
argument_list|,
name|unsigned
name|NumEdgeSources
operator|=
literal|0
argument_list|,
specifier|const
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
operator|*
name|EdgeSourceLabels
operator|=
literal|0
argument_list|)
block|{
name|O
operator|<<
literal|"\tNode"
operator|<<
name|ID
operator|<<
literal|"[ "
expr_stmt|;
if|if
condition|(
operator|!
name|Attr
operator|.
name|empty
argument_list|()
condition|)
name|O
operator|<<
name|Attr
operator|<<
literal|","
expr_stmt|;
name|O
operator|<<
literal|" label =\""
expr_stmt|;
if|if
condition|(
name|NumEdgeSources
condition|)
name|O
operator|<<
literal|"{"
expr_stmt|;
name|O
operator|<<
name|DOT
operator|::
name|EscapeString
argument_list|(
name|Label
argument_list|)
expr_stmt|;
if|if
condition|(
name|NumEdgeSources
condition|)
block|{
name|O
operator|<<
literal|"|{"
expr_stmt|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|NumEdgeSources
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
condition|)
name|O
operator|<<
literal|"|"
expr_stmt|;
name|O
operator|<<
literal|"<s"
operator|<<
name|i
operator|<<
literal|">"
expr_stmt|;
if|if
condition|(
name|EdgeSourceLabels
condition|)
name|O
operator|<<
operator|(
operator|*
name|EdgeSourceLabels
operator|)
index|[
name|i
index|]
expr_stmt|;
block|}
name|O
operator|<<
literal|"}}"
expr_stmt|;
block|}
name|O
operator|<<
literal|"\"];\n"
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|/// emitEdge - Output an edge from a simple node into the graph...
end_comment

begin_decl_stmt
name|void
name|emitEdge
argument_list|(
specifier|const
name|void
operator|*
name|SrcNodeID
argument_list|,
name|int
name|SrcNodePort
argument_list|,
specifier|const
name|void
operator|*
name|DestNodeID
argument_list|,
name|int
name|DestNodePort
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|Attrs
argument_list|)
block|{
if|if
condition|(
name|SrcNodePort
operator|>
literal|64
condition|)
return|return;
comment|// Eminating from truncated part?
if|if
condition|(
name|DestNodePort
operator|>
literal|64
condition|)
name|DestNodePort
operator|=
literal|64
expr_stmt|;
comment|// Targetting the truncated part?
name|O
operator|<<
literal|"\tNode"
operator|<<
name|SrcNodeID
expr_stmt|;
if|if
condition|(
name|SrcNodePort
operator|>=
literal|0
condition|)
name|O
operator|<<
literal|":s"
operator|<<
name|SrcNodePort
expr_stmt|;
name|O
operator|<<
literal|" -> Node"
operator|<<
name|DestNodeID
expr_stmt|;
if|if
condition|(
name|DestNodePort
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|DOTTraits
operator|::
name|hasEdgeDestLabels
argument_list|()
condition|)
name|O
operator|<<
literal|":d"
operator|<<
name|DestNodePort
expr_stmt|;
else|else
name|O
operator|<<
literal|":s"
operator|<<
name|DestNodePort
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Attrs
operator|.
name|empty
argument_list|()
condition|)
name|O
operator|<<
literal|"["
operator|<<
name|Attrs
operator|<<
literal|"]"
expr_stmt|;
name|O
operator|<<
literal|";\n"
expr_stmt|;
block|}
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|GraphType
operator|>
name|raw_ostream
operator|&
name|WriteGraph
argument_list|(
argument|raw_ostream&O
argument_list|,
argument|const GraphType&G
argument_list|,
argument|bool ShortNames = false
argument_list|,
argument|const std::string&Name =
literal|""
argument_list|,
argument|const std::string&Title =
literal|""
argument_list|)
block|{
comment|// Start the graph emission process...
name|GraphWriter
operator|<
name|GraphType
operator|>
name|W
argument_list|(
name|O
argument_list|,
name|G
argument_list|,
name|ShortNames
argument_list|)
block|;
comment|// Output the header for the graph...
name|W
operator|.
name|writeHeader
argument_list|(
name|Title
argument_list|)
block|;
comment|// Emit all of the nodes in the graph...
name|W
operator|.
name|writeNodes
argument_list|()
block|;
comment|// Output any customizations on the graph
name|DOTGraphTraits
operator|<
name|GraphType
operator|>
operator|::
name|addCustomGraphFeatures
argument_list|(
name|G
argument_list|,
name|W
argument_list|)
block|;
comment|// Output the end of the graph
name|W
operator|.
name|writeFooter
argument_list|()
block|;
return|return
name|O
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|GraphType
operator|>
name|sys
operator|::
name|Path
name|WriteGraph
argument_list|(
argument|const GraphType&G
argument_list|,
argument|const std::string&Name
argument_list|,
argument|bool ShortNames = false
argument_list|,
argument|const std::string&Title =
literal|""
argument_list|)
block|{
name|std
operator|::
name|string
name|ErrMsg
block|;
name|sys
operator|::
name|Path
name|Filename
operator|=
name|sys
operator|::
name|Path
operator|::
name|GetTemporaryDirectory
argument_list|(
operator|&
name|ErrMsg
argument_list|)
block|;
if|if
condition|(
name|Filename
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|errs
argument_list|()
operator|<<
literal|"Error: "
operator|<<
name|ErrMsg
operator|<<
literal|"\n"
expr_stmt|;
return|return
name|Filename
return|;
block|}
name|Filename
operator|.
name|appendComponent
argument_list|(
name|Name
operator|+
literal|".dot"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|Filename
operator|.
name|makeUnique
argument_list|(
name|true
argument_list|,
operator|&
name|ErrMsg
argument_list|)
condition|)
block|{
name|errs
argument_list|()
operator|<<
literal|"Error: "
operator|<<
name|ErrMsg
operator|<<
literal|"\n"
expr_stmt|;
return|return
name|sys
operator|::
name|Path
argument_list|()
return|;
block|}
end_if

begin_expr_stmt
name|errs
argument_list|()
operator|<<
literal|"Writing '"
operator|<<
name|Filename
operator|.
name|str
argument_list|()
operator|<<
literal|"'... "
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|string
name|ErrorInfo
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|raw_fd_ostream
name|O
argument_list|(
name|Filename
operator|.
name|c_str
argument_list|()
argument_list|,
name|ErrorInfo
argument_list|)
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|ErrorInfo
operator|.
name|empty
argument_list|()
condition|)
block|{
name|WriteGraph
argument_list|(
name|O
argument_list|,
name|G
argument_list|,
name|ShortNames
argument_list|,
name|Name
argument_list|,
name|Title
argument_list|)
expr_stmt|;
name|errs
argument_list|()
operator|<<
literal|" done. \n"
expr_stmt|;
block|}
else|else
block|{
name|errs
argument_list|()
operator|<<
literal|"error opening file '"
operator|<<
name|Filename
operator|.
name|str
argument_list|()
operator|<<
literal|"' for writing!\n"
expr_stmt|;
name|Filename
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_if

begin_return
return|return
name|Filename
return|;
end_return

begin_comment
unit|}
comment|/// ViewGraph - Emit a dot graph, run 'dot', run gv on the postscript file,
end_comment

begin_comment
comment|/// then cleanup.  For use from the debugger.
end_comment

begin_comment
comment|///
end_comment

begin_expr_stmt
unit|template
operator|<
name|typename
name|GraphType
operator|>
name|void
name|ViewGraph
argument_list|(
argument|const GraphType&G
argument_list|,
argument|const std::string&Name
argument_list|,
argument|bool ShortNames = false
argument_list|,
argument|const std::string&Title =
literal|""
argument_list|,
argument|GraphProgram::Name Program = GraphProgram::DOT
argument_list|)
block|{
name|sys
operator|::
name|Path
name|Filename
operator|=
name|WriteGraph
argument_list|(
name|G
argument_list|,
name|Name
argument_list|,
name|ShortNames
argument_list|,
name|Title
argument_list|)
block|;
if|if
condition|(
name|Filename
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|DisplayGraph
argument_list|(
name|Filename
argument_list|,
name|true
argument_list|,
name|Program
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}  }
comment|// End llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

