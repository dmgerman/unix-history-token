begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- llvm/Support/DotGraphTraits.h - Customize .dot output ---*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines a template class that can be used to customize dot output
end_comment

begin_comment
comment|// graphs generated by the GraphWriter.h file.  The default implementation of
end_comment

begin_comment
comment|// this file will produce a simple, but not very polished graph.  By
end_comment

begin_comment
comment|// specializing this template, lots of customization opportunities are possible.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_SUPPORT_DOTGRAPHTRAITS_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_SUPPORT_DOTGRAPHTRAITS_H
end_define

begin_include
include|#
directive|include
file|<string>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|/// DefaultDOTGraphTraits - This class provides the default implementations of
comment|/// all of the DOTGraphTraits methods.  If a specialization does not need to
comment|/// override all methods here it should inherit so that it can get the default
comment|/// implementations.
comment|///
struct|struct
name|DefaultDOTGraphTraits
block|{
name|private
label|:
name|bool
name|IsSimple
decl_stmt|;
name|protected
label|:
name|bool
name|isSimple
parameter_list|()
block|{
return|return
name|IsSimple
return|;
block|}
name|public
label|:
name|explicit
name|DefaultDOTGraphTraits
argument_list|(
argument|bool simple=false
argument_list|)
block|:
name|IsSimple
argument_list|(
argument|simple
argument_list|)
block|{}
comment|/// getGraphName - Return the label for the graph as a whole.  Printed at the
comment|/// top of the graph.
comment|///
name|template
operator|<
name|typename
name|GraphType
operator|>
specifier|static
name|std
operator|::
name|string
name|getGraphName
argument_list|(
argument|const GraphType&
argument_list|)
block|{
return|return
literal|""
return|;
block|}
comment|/// getGraphProperties - Return any custom properties that should be included
comment|/// in the top level graph structure for dot.
comment|///
name|template
operator|<
name|typename
name|GraphType
operator|>
specifier|static
name|std
operator|::
name|string
name|getGraphProperties
argument_list|(
argument|const GraphType&
argument_list|)
block|{
return|return
literal|""
return|;
block|}
comment|/// renderGraphFromBottomUp - If this function returns true, the graph is
comment|/// emitted bottom-up instead of top-down.  This requires graphviz 2.0 to work
comment|/// though.
specifier|static
name|bool
name|renderGraphFromBottomUp
parameter_list|()
block|{
return|return
name|false
return|;
block|}
comment|/// isNodeHidden - If the function returns true, the given node is not
comment|/// displayed in the graph.
specifier|static
name|bool
name|isNodeHidden
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
block|{
return|return
name|false
return|;
block|}
comment|/// getNodeLabel - Given a node and a pointer to the top level graph, return
comment|/// the label to print in the node.
name|template
operator|<
name|typename
name|GraphType
operator|>
name|std
operator|::
name|string
name|getNodeLabel
argument_list|(
argument|const void *
argument_list|,
argument|const GraphType&
argument_list|)
block|{
return|return
literal|""
return|;
block|}
comment|// getNodeIdentifierLabel - Returns a string representing the
comment|// address or other unique identifier of the node. (Only used if
comment|// non-empty.)
name|template
operator|<
name|typename
name|GraphType
operator|>
specifier|static
name|std
operator|::
name|string
name|getNodeIdentifierLabel
argument_list|(
argument|const void *
argument_list|,
argument|const GraphType&
argument_list|)
block|{
return|return
literal|""
return|;
block|}
name|template
operator|<
name|typename
name|GraphType
operator|>
specifier|static
name|std
operator|::
name|string
name|getNodeDescription
argument_list|(
argument|const void *
argument_list|,
argument|const GraphType&
argument_list|)
block|{
return|return
literal|""
return|;
block|}
comment|/// If you want to specify custom node attributes, this is the place to do so
comment|///
name|template
operator|<
name|typename
name|GraphType
operator|>
specifier|static
name|std
operator|::
name|string
name|getNodeAttributes
argument_list|(
argument|const void *
argument_list|,
argument|const GraphType&
argument_list|)
block|{
return|return
literal|""
return|;
block|}
comment|/// If you want to override the dot attributes printed for a particular edge,
comment|/// override this method.
name|template
operator|<
name|typename
name|EdgeIter
operator|,
name|typename
name|GraphType
operator|>
specifier|static
name|std
operator|::
name|string
name|getEdgeAttributes
argument_list|(
argument|const void *
argument_list|,
argument|EdgeIter
argument_list|,
argument|const GraphType&
argument_list|)
block|{
return|return
literal|""
return|;
block|}
comment|/// getEdgeSourceLabel - If you want to label the edge source itself,
comment|/// implement this method.
name|template
operator|<
name|typename
name|EdgeIter
operator|>
specifier|static
name|std
operator|::
name|string
name|getEdgeSourceLabel
argument_list|(
argument|const void *
argument_list|,
argument|EdgeIter
argument_list|)
block|{
return|return
literal|""
return|;
block|}
comment|/// edgeTargetsEdgeSource - This method returns true if this outgoing edge
comment|/// should actually target another edge source, not a node.  If this method is
comment|/// implemented, getEdgeTarget should be implemented.
name|template
operator|<
name|typename
name|EdgeIter
operator|>
specifier|static
name|bool
name|edgeTargetsEdgeSource
argument_list|(
argument|const void *
argument_list|,
argument|EdgeIter
argument_list|)
block|{
return|return
name|false
return|;
block|}
comment|/// getEdgeTarget - If edgeTargetsEdgeSource returns true, this method is
comment|/// called to determine which outgoing edge of Node is the target of this
comment|/// edge.
name|template
operator|<
name|typename
name|EdgeIter
operator|>
specifier|static
name|EdgeIter
name|getEdgeTarget
argument_list|(
argument|const void *
argument_list|,
argument|EdgeIter I
argument_list|)
block|{
return|return
name|I
return|;
block|}
comment|/// hasEdgeDestLabels - If this function returns true, the graph is able
comment|/// to provide labels for edge destinations.
specifier|static
name|bool
name|hasEdgeDestLabels
parameter_list|()
block|{
return|return
name|false
return|;
block|}
comment|/// numEdgeDestLabels - If hasEdgeDestLabels, this function returns the
comment|/// number of incoming edge labels the given node has.
specifier|static
name|unsigned
name|numEdgeDestLabels
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
comment|/// getEdgeDestLabel - If hasEdgeDestLabels, this function returns the
comment|/// incoming edge label with the given index in the given node.
specifier|static
name|std
operator|::
name|string
name|getEdgeDestLabel
argument_list|(
argument|const void *
argument_list|,
argument|unsigned
argument_list|)
block|{
return|return
literal|""
return|;
block|}
comment|/// addCustomGraphFeatures - If a graph is made up of more than just
comment|/// straight-forward nodes and edges, this is the place to put all of the
comment|/// custom stuff necessary.  The GraphWriter object, instantiated with your
comment|/// GraphType is passed in as an argument.  You may call arbitrary methods on
comment|/// it to add things to the output graph.
comment|///
name|template
operator|<
name|typename
name|GraphType
operator|,
name|typename
name|GraphWriter
operator|>
specifier|static
name|void
name|addCustomGraphFeatures
argument_list|(
argument|const GraphType&
argument_list|,
argument|GraphWriter&
argument_list|)
block|{}
block|}
struct|;
comment|/// DOTGraphTraits - Template class that can be specialized to customize how
comment|/// graphs are converted to 'dot' graphs.  When specializing, you may inherit
comment|/// from DefaultDOTGraphTraits if you don't need to override everything.
comment|///
name|template
operator|<
name|typename
name|Ty
operator|>
expr|struct
name|DOTGraphTraits
operator|:
name|public
name|DefaultDOTGraphTraits
block|{
name|DOTGraphTraits
argument_list|(
argument|bool simple=false
argument_list|)
operator|:
name|DefaultDOTGraphTraits
argument_list|(
argument|simple
argument_list|)
block|{}
block|}
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// End llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

