begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- llvm/IntrinsicInst.h - Intrinsic Instruction Wrappers ---*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines classes that make it really easy to deal with intrinsic
end_comment

begin_comment
comment|// functions with the isa/dyncast family of functions.  In particular, this
end_comment

begin_comment
comment|// allows you to do things like:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//     if (MemCpyInst *MCI = dyn_cast<MemCpyInst>(Inst))
end_comment

begin_comment
comment|//        ... MCI->getDest() ... MCI->getSource() ...
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// All intrinsic function calls are instances of the call instruction, so these
end_comment

begin_comment
comment|// are all subclasses of the CallInst class.  Note that none of these classes
end_comment

begin_comment
comment|// has state or virtual methods, which is an important part of this gross/neat
end_comment

begin_comment
comment|// hack working.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_INTRINSICINST_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_INTRINSICINST_H
end_define

begin_include
include|#
directive|include
file|"llvm/Constants.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Metadata.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Function.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Instructions.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Intrinsics.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|/// IntrinsicInst - A useful wrapper class for inspecting calls to intrinsic
comment|/// functions.  This allows the standard isa/dyncast/cast functionality to
comment|/// work with calls to intrinsic functions.
name|class
name|IntrinsicInst
range|:
name|public
name|CallInst
block|{
name|IntrinsicInst
argument_list|()
block|;
comment|// DO NOT IMPLEMENT
name|IntrinsicInst
argument_list|(
specifier|const
name|IntrinsicInst
operator|&
argument_list|)
block|;
comment|// DO NOT IMPLEMENT
name|void
name|operator
operator|=
operator|(
specifier|const
name|IntrinsicInst
operator|&
operator|)
block|;
comment|// DO NOT IMPLEMENT
name|public
operator|:
comment|/// getIntrinsicID - Return the intrinsic ID of this intrinsic.
comment|///
name|Intrinsic
operator|::
name|ID
name|getIntrinsicID
argument_list|()
specifier|const
block|{
return|return
operator|(
name|Intrinsic
operator|::
name|ID
operator|)
name|getCalledFunction
argument_list|()
operator|->
name|getIntrinsicID
argument_list|()
return|;
block|}
comment|// Methods for support type inquiry through isa, cast, and dyn_cast:
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const IntrinsicInst *
argument_list|)
block|{
return|return
name|true
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const CallInst *I
argument_list|)
block|{
if|if
condition|(
specifier|const
name|Function
modifier|*
name|CF
init|=
name|I
operator|->
name|getCalledFunction
argument_list|()
condition|)
return|return
name|CF
operator|->
name|getIntrinsicID
argument_list|()
operator|!=
literal|0
return|;
return|return
name|false
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
parameter_list|(
specifier|const
name|Value
modifier|*
name|V
parameter_list|)
block|{
return|return
name|isa
operator|<
name|CallInst
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|CallInst
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/// DbgInfoIntrinsic - This is the common base class for debug info intrinsics
end_comment

begin_comment
comment|///
end_comment

begin_decl_stmt
name|class
name|DbgInfoIntrinsic
range|:
name|public
name|IntrinsicInst
block|{
name|public
operator|:
comment|// Methods for support type inquiry through isa, cast, and dyn_cast:
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const DbgInfoIntrinsic *
argument_list|)
block|{
return|return
name|true
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const IntrinsicInst *I
argument_list|)
block|{
switch|switch
condition|(
name|I
operator|->
name|getIntrinsicID
argument_list|()
condition|)
block|{
case|case
name|Intrinsic
operator|::
name|dbg_declare
case|:
case|case
name|Intrinsic
operator|::
name|dbg_value
case|:
return|return
name|true
return|;
default|default:
return|return
name|false
return|;
block|}
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Value *V
argument_list|)
block|{
return|return
name|isa
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
specifier|static
name|Value
operator|*
name|StripCast
argument_list|(
name|Value
operator|*
name|C
argument_list|)
block|;   }
decl_stmt|;
end_decl_stmt

begin_comment
comment|/// DbgDeclareInst - This represents the llvm.dbg.declare instruction.
end_comment

begin_comment
comment|///
end_comment

begin_decl_stmt
name|class
name|DbgDeclareInst
range|:
name|public
name|DbgInfoIntrinsic
block|{
name|public
operator|:
name|Value
operator|*
name|getAddress
argument_list|()
specifier|const
block|{
if|if
condition|(
name|MDNode
modifier|*
name|MD
init|=
name|dyn_cast
operator|<
name|MDNode
operator|>
operator|(
name|getOperand
argument_list|(
literal|1
argument_list|)
operator|)
condition|)
return|return
name|MD
operator|->
name|getOperand
argument_list|(
literal|0
argument_list|)
return|;
else|else
return|return
name|NULL
return|;
block|}
name|MDNode
operator|*
name|getVariable
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|MDNode
operator|>
operator|(
name|getOperand
argument_list|(
literal|2
argument_list|)
operator|)
return|;
block|}
comment|// Methods for support type inquiry through isa, cast, and dyn_cast:
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const DbgDeclareInst *
argument_list|)
block|{
return|return
name|true
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const IntrinsicInst *I
argument_list|)
block|{
return|return
name|I
operator|->
name|getIntrinsicID
argument_list|()
operator|==
name|Intrinsic
operator|::
name|dbg_declare
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Value *V
argument_list|)
block|{
return|return
name|isa
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
expr|}
block|;
comment|/// DbgValueInst - This represents the llvm.dbg.value instruction.
comment|///
name|class
name|DbgValueInst
operator|:
name|public
name|DbgInfoIntrinsic
block|{
name|public
operator|:
specifier|const
name|Value
operator|*
name|getValue
argument_list|()
specifier|const
block|;
name|Value
operator|*
name|getValue
argument_list|()
block|;
name|uint64_t
name|getOffset
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|ConstantInt
operator|>
operator|(
name|const_cast
operator|<
name|Value
operator|*
operator|>
operator|(
name|getOperand
argument_list|(
literal|2
argument_list|)
operator|)
operator|)
operator|->
name|getZExtValue
argument_list|()
return|;
block|}
specifier|const
name|MDNode
operator|*
name|getVariable
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|MDNode
operator|>
operator|(
name|getOperand
argument_list|(
literal|3
argument_list|)
operator|)
return|;
block|}
name|MDNode
operator|*
name|getVariable
argument_list|()
block|{
return|return
name|cast
operator|<
name|MDNode
operator|>
operator|(
name|getOperand
argument_list|(
literal|3
argument_list|)
operator|)
return|;
block|}
comment|// Methods for support type inquiry through isa, cast, and dyn_cast:
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const DbgValueInst *
argument_list|)
block|{
return|return
name|true
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const IntrinsicInst *I
argument_list|)
block|{
return|return
name|I
operator|->
name|getIntrinsicID
argument_list|()
operator|==
name|Intrinsic
operator|::
name|dbg_value
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Value *V
argument_list|)
block|{
return|return
name|isa
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
expr|}
block|;
comment|/// MemIntrinsic - This is the common base class for memset/memcpy/memmove.
comment|///
name|class
name|MemIntrinsic
operator|:
name|public
name|IntrinsicInst
block|{
name|public
operator|:
name|Value
operator|*
name|getRawDest
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|Value
operator|*
operator|>
operator|(
name|getOperand
argument_list|(
literal|1
argument_list|)
operator|)
return|;
block|}
name|Value
operator|*
name|getLength
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|Value
operator|*
operator|>
operator|(
name|getOperand
argument_list|(
literal|3
argument_list|)
operator|)
return|;
block|}
name|ConstantInt
operator|*
name|getAlignmentCst
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|ConstantInt
operator|>
operator|(
name|const_cast
operator|<
name|Value
operator|*
operator|>
operator|(
name|getOperand
argument_list|(
literal|4
argument_list|)
operator|)
operator|)
return|;
block|}
name|unsigned
name|getAlignment
argument_list|()
specifier|const
block|{
return|return
name|getAlignmentCst
argument_list|()
operator|->
name|getZExtValue
argument_list|()
return|;
block|}
comment|/// getDest - This is just like getRawDest, but it strips off any cast
comment|/// instructions that feed it, giving the original input.  The returned
comment|/// value is guaranteed to be a pointer.
name|Value
operator|*
name|getDest
argument_list|()
specifier|const
block|{
return|return
name|getRawDest
argument_list|()
operator|->
name|stripPointerCasts
argument_list|()
return|;
block|}
comment|/// set* - Set the specified arguments of the instruction.
comment|///
name|void
name|setDest
argument_list|(
argument|Value *Ptr
argument_list|)
block|{
name|assert
argument_list|(
name|getRawDest
argument_list|()
operator|->
name|getType
argument_list|()
operator|==
name|Ptr
operator|->
name|getType
argument_list|()
operator|&&
literal|"setDest called with pointer of wrong type!"
argument_list|)
block|;
name|setOperand
argument_list|(
literal|1
argument_list|,
name|Ptr
argument_list|)
block|;     }
name|void
name|setLength
argument_list|(
argument|Value *L
argument_list|)
block|{
name|assert
argument_list|(
name|getLength
argument_list|()
operator|->
name|getType
argument_list|()
operator|==
name|L
operator|->
name|getType
argument_list|()
operator|&&
literal|"setLength called with value of wrong type!"
argument_list|)
block|;
name|setOperand
argument_list|(
literal|3
argument_list|,
name|L
argument_list|)
block|;     }
name|void
name|setAlignment
argument_list|(
argument|Constant* A
argument_list|)
block|{
name|setOperand
argument_list|(
literal|4
argument_list|,
name|A
argument_list|)
block|;     }
specifier|const
name|Type
operator|*
name|getAlignmentType
argument_list|()
specifier|const
block|{
return|return
name|getOperand
argument_list|(
literal|4
argument_list|)
operator|->
name|getType
argument_list|()
return|;
block|}
comment|// Methods for support type inquiry through isa, cast, and dyn_cast:
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const MemIntrinsic *
argument_list|)
block|{
return|return
name|true
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const IntrinsicInst *I
argument_list|)
block|{
switch|switch
condition|(
name|I
operator|->
name|getIntrinsicID
argument_list|()
condition|)
block|{
case|case
name|Intrinsic
operator|::
name|memcpy
case|:
case|case
name|Intrinsic
operator|::
name|memmove
case|:
case|case
name|Intrinsic
operator|::
name|memset
case|:
return|return
name|true
return|;
default|default:
return|return
name|false
return|;
block|}
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Value *V
argument_list|)
block|{
return|return
name|isa
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
expr|}
block|;
comment|/// MemSetInst - This class wraps the llvm.memset intrinsic.
comment|///
name|class
name|MemSetInst
operator|:
name|public
name|MemIntrinsic
block|{
name|public
operator|:
comment|/// get* - Return the arguments to the instruction.
comment|///
name|Value
operator|*
name|getValue
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|Value
operator|*
operator|>
operator|(
name|getOperand
argument_list|(
literal|2
argument_list|)
operator|)
return|;
block|}
name|void
name|setValue
argument_list|(
argument|Value *Val
argument_list|)
block|{
name|assert
argument_list|(
name|getValue
argument_list|()
operator|->
name|getType
argument_list|()
operator|==
name|Val
operator|->
name|getType
argument_list|()
operator|&&
literal|"setSource called with pointer of wrong type!"
argument_list|)
block|;
name|setOperand
argument_list|(
literal|2
argument_list|,
name|Val
argument_list|)
block|;     }
comment|// Methods for support type inquiry through isa, cast, and dyn_cast:
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const MemSetInst *
argument_list|)
block|{
return|return
name|true
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const IntrinsicInst *I
argument_list|)
block|{
return|return
name|I
operator|->
name|getIntrinsicID
argument_list|()
operator|==
name|Intrinsic
operator|::
name|memset
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Value *V
argument_list|)
block|{
return|return
name|isa
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
expr|}
block|;
comment|/// MemTransferInst - This class wraps the llvm.memcpy/memmove intrinsics.
comment|///
name|class
name|MemTransferInst
operator|:
name|public
name|MemIntrinsic
block|{
name|public
operator|:
comment|/// get* - Return the arguments to the instruction.
comment|///
name|Value
operator|*
name|getRawSource
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|Value
operator|*
operator|>
operator|(
name|getOperand
argument_list|(
literal|2
argument_list|)
operator|)
return|;
block|}
comment|/// getSource - This is just like getRawSource, but it strips off any cast
comment|/// instructions that feed it, giving the original input.  The returned
comment|/// value is guaranteed to be a pointer.
name|Value
operator|*
name|getSource
argument_list|()
specifier|const
block|{
return|return
name|getRawSource
argument_list|()
operator|->
name|stripPointerCasts
argument_list|()
return|;
block|}
name|void
name|setSource
argument_list|(
argument|Value *Ptr
argument_list|)
block|{
name|assert
argument_list|(
name|getRawSource
argument_list|()
operator|->
name|getType
argument_list|()
operator|==
name|Ptr
operator|->
name|getType
argument_list|()
operator|&&
literal|"setSource called with pointer of wrong type!"
argument_list|)
block|;
name|setOperand
argument_list|(
literal|2
argument_list|,
name|Ptr
argument_list|)
block|;     }
comment|// Methods for support type inquiry through isa, cast, and dyn_cast:
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const MemTransferInst *
argument_list|)
block|{
return|return
name|true
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const IntrinsicInst *I
argument_list|)
block|{
return|return
name|I
operator|->
name|getIntrinsicID
argument_list|()
operator|==
name|Intrinsic
operator|::
name|memcpy
operator|||
name|I
operator|->
name|getIntrinsicID
argument_list|()
operator|==
name|Intrinsic
operator|::
name|memmove
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Value *V
argument_list|)
block|{
return|return
name|isa
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
expr|}
block|;
comment|/// MemCpyInst - This class wraps the llvm.memcpy intrinsic.
comment|///
name|class
name|MemCpyInst
operator|:
name|public
name|MemTransferInst
block|{
name|public
operator|:
comment|// Methods for support type inquiry through isa, cast, and dyn_cast:
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const MemCpyInst *
argument_list|)
block|{
return|return
name|true
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const IntrinsicInst *I
argument_list|)
block|{
return|return
name|I
operator|->
name|getIntrinsicID
argument_list|()
operator|==
name|Intrinsic
operator|::
name|memcpy
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Value *V
argument_list|)
block|{
return|return
name|isa
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
expr|}
block|;
comment|/// MemMoveInst - This class wraps the llvm.memmove intrinsic.
comment|///
name|class
name|MemMoveInst
operator|:
name|public
name|MemTransferInst
block|{
name|public
operator|:
comment|// Methods for support type inquiry through isa, cast, and dyn_cast:
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const MemMoveInst *
argument_list|)
block|{
return|return
name|true
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const IntrinsicInst *I
argument_list|)
block|{
return|return
name|I
operator|->
name|getIntrinsicID
argument_list|()
operator|==
name|Intrinsic
operator|::
name|memmove
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Value *V
argument_list|)
block|{
return|return
name|isa
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
expr|}
block|;
comment|/// EHSelectorInst - This represents the llvm.eh.selector instruction.
comment|///
name|class
name|EHSelectorInst
operator|:
name|public
name|IntrinsicInst
block|{
name|public
operator|:
comment|// Methods for support type inquiry through isa, cast, and dyn_cast:
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const EHSelectorInst *
argument_list|)
block|{
return|return
name|true
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const IntrinsicInst *I
argument_list|)
block|{
return|return
name|I
operator|->
name|getIntrinsicID
argument_list|()
operator|==
name|Intrinsic
operator|::
name|eh_selector
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Value *V
argument_list|)
block|{
return|return
name|isa
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
expr|}
block|;
comment|/// MemoryUseIntrinsic - This is the common base class for the memory use
comment|/// marker intrinsics.
comment|///
name|class
name|MemoryUseIntrinsic
operator|:
name|public
name|IntrinsicInst
block|{
name|public
operator|:
comment|// Methods for support type inquiry through isa, cast, and dyn_cast:
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const MemoryUseIntrinsic *
argument_list|)
block|{
return|return
name|true
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const IntrinsicInst *I
argument_list|)
block|{
switch|switch
condition|(
name|I
operator|->
name|getIntrinsicID
argument_list|()
condition|)
block|{
case|case
name|Intrinsic
operator|::
name|lifetime_start
case|:
case|case
name|Intrinsic
operator|::
name|lifetime_end
case|:
case|case
name|Intrinsic
operator|::
name|invariant_start
case|:
case|case
name|Intrinsic
operator|::
name|invariant_end
case|:
return|return
name|true
return|;
default|default:
return|return
name|false
return|;
block|}
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Value *V
argument_list|)
block|{
return|return
name|isa
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
expr|}
block|;  }
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

