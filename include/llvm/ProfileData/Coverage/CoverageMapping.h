begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- CoverageMapping.h - Code coverage mapping support --------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Code coverage mapping data is generated by clang and read by
end_comment

begin_comment
comment|// llvm-cov to show code coverage statistics for a file.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_PROFILEDATA_COVERAGE_COVERAGEMAPPING_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_PROFILEDATA_COVERAGE_COVERAGEMAPPING_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/Hashing.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/None.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/iterator.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/iterator_range.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ProfileData/InstrProf.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Compiler.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Debug.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Endian.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Error.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/raw_ostream.h"
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_include
include|#
directive|include
file|<iterator>
end_include

begin_include
include|#
directive|include
file|<memory>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<system_error>
end_include

begin_include
include|#
directive|include
file|<tuple>
end_include

begin_include
include|#
directive|include
file|<utility>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|IndexedInstrProfReader
decl_stmt|;
name|namespace
name|coverage
block|{
name|class
name|CoverageMappingReader
decl_stmt|;
struct_decl|struct
name|CoverageMappingRecord
struct_decl|;
name|enum
name|class
name|coveragemap_error
block|{
name|success
operator|=
literal|0
operator|,
name|eof
operator|,
name|no_data_found
operator|,
name|unsupported_version
operator|,
name|truncated
operator|,
name|malformed
block|}
empty_stmt|;
specifier|const
name|std
operator|::
name|error_category
operator|&
name|coveragemap_category
argument_list|()
expr_stmt|;
specifier|inline
name|std
operator|::
name|error_code
name|make_error_code
argument_list|(
argument|coveragemap_error E
argument_list|)
block|{
return|return
name|std
operator|::
name|error_code
argument_list|(
name|static_cast
operator|<
name|int
operator|>
operator|(
name|E
operator|)
argument_list|,
name|coveragemap_category
argument_list|()
argument_list|)
return|;
block|}
name|class
name|CoverageMapError
range|:
name|public
name|ErrorInfo
operator|<
name|CoverageMapError
operator|>
block|{
name|public
operator|:
name|CoverageMapError
argument_list|(
argument|coveragemap_error Err
argument_list|)
operator|:
name|Err
argument_list|(
argument|Err
argument_list|)
block|{
name|assert
argument_list|(
name|Err
operator|!=
name|coveragemap_error
operator|::
name|success
operator|&&
literal|"Not an error"
argument_list|)
block|;   }
name|std
operator|::
name|string
name|message
argument_list|()
specifier|const
name|override
block|;
name|void
name|log
argument_list|(
argument|raw_ostream&OS
argument_list|)
specifier|const
name|override
block|{
name|OS
operator|<<
name|message
argument_list|()
block|; }
name|std
operator|::
name|error_code
name|convertToErrorCode
argument_list|()
specifier|const
name|override
block|{
return|return
name|make_error_code
argument_list|(
name|Err
argument_list|)
return|;
block|}
name|coveragemap_error
name|get
argument_list|()
specifier|const
block|{
return|return
name|Err
return|;
block|}
specifier|static
name|char
name|ID
block|;
name|private
operator|:
name|coveragemap_error
name|Err
block|; }
decl_stmt|;
comment|/// \brief A Counter is an abstract value that describes how to compute the
comment|/// execution count for a region of code using the collected profile count data.
struct|struct
name|Counter
block|{
enum|enum
name|CounterKind
block|{
name|Zero
block|,
name|CounterValueReference
block|,
name|Expression
block|}
enum|;
specifier|static
specifier|const
name|unsigned
name|EncodingTagBits
init|=
literal|2
decl_stmt|;
specifier|static
specifier|const
name|unsigned
name|EncodingTagMask
init|=
literal|0x3
decl_stmt|;
specifier|static
specifier|const
name|unsigned
name|EncodingCounterTagAndExpansionRegionTagBits
init|=
name|EncodingTagBits
operator|+
literal|1
decl_stmt|;
name|private
label|:
name|CounterKind
name|Kind
init|=
name|Zero
decl_stmt|;
name|unsigned
name|ID
init|=
literal|0
decl_stmt|;
name|Counter
argument_list|(
argument|CounterKind Kind
argument_list|,
argument|unsigned ID
argument_list|)
block|:
name|Kind
argument_list|(
name|Kind
argument_list|)
operator|,
name|ID
argument_list|(
argument|ID
argument_list|)
block|{}
name|public
operator|:
name|Counter
argument_list|()
operator|=
expr|default
expr_stmt|;
name|CounterKind
name|getKind
argument_list|()
specifier|const
block|{
return|return
name|Kind
return|;
block|}
name|bool
name|isZero
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|Zero
return|;
block|}
name|bool
name|isExpression
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|Expression
return|;
block|}
name|unsigned
name|getCounterID
argument_list|()
specifier|const
block|{
return|return
name|ID
return|;
block|}
name|unsigned
name|getExpressionID
argument_list|()
specifier|const
block|{
return|return
name|ID
return|;
block|}
name|friend
name|bool
name|operator
operator|==
operator|(
specifier|const
name|Counter
operator|&
name|LHS
operator|,
specifier|const
name|Counter
operator|&
name|RHS
operator|)
block|{
return|return
name|LHS
operator|.
name|Kind
operator|==
name|RHS
operator|.
name|Kind
operator|&&
name|LHS
operator|.
name|ID
operator|==
name|RHS
operator|.
name|ID
return|;
block|}
name|friend
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|Counter
operator|&
name|LHS
operator|,
specifier|const
name|Counter
operator|&
name|RHS
operator|)
block|{
return|return
operator|!
operator|(
name|LHS
operator|==
name|RHS
operator|)
return|;
block|}
name|friend
name|bool
name|operator
operator|<
operator|(
specifier|const
name|Counter
operator|&
name|LHS
operator|,
specifier|const
name|Counter
operator|&
name|RHS
operator|)
block|{
return|return
name|std
operator|::
name|tie
argument_list|(
name|LHS
operator|.
name|Kind
argument_list|,
name|LHS
operator|.
name|ID
argument_list|)
operator|<
name|std
operator|::
name|tie
argument_list|(
name|RHS
operator|.
name|Kind
argument_list|,
name|RHS
operator|.
name|ID
argument_list|)
return|;
block|}
comment|/// \brief Return the counter that represents the number zero.
specifier|static
name|Counter
name|getZero
parameter_list|()
block|{
return|return
name|Counter
argument_list|()
return|;
block|}
comment|/// \brief Return the counter that corresponds to a specific profile counter.
specifier|static
name|Counter
name|getCounter
parameter_list|(
name|unsigned
name|CounterId
parameter_list|)
block|{
return|return
name|Counter
argument_list|(
name|CounterValueReference
argument_list|,
name|CounterId
argument_list|)
return|;
block|}
comment|/// \brief Return the counter that corresponds to a specific
comment|/// addition counter expression.
specifier|static
name|Counter
name|getExpression
parameter_list|(
name|unsigned
name|ExpressionId
parameter_list|)
block|{
return|return
name|Counter
argument_list|(
name|Expression
argument_list|,
name|ExpressionId
argument_list|)
return|;
block|}
block|}
struct|;
comment|/// \brief A Counter expression is a value that represents an arithmetic
comment|/// operation with two counters.
struct|struct
name|CounterExpression
block|{
enum|enum
name|ExprKind
block|{
name|Subtract
block|,
name|Add
block|}
enum|;
name|ExprKind
name|Kind
decl_stmt|;
name|Counter
name|LHS
decl_stmt|,
name|RHS
decl_stmt|;
name|CounterExpression
argument_list|(
argument|ExprKind Kind
argument_list|,
argument|Counter LHS
argument_list|,
argument|Counter RHS
argument_list|)
block|:
name|Kind
argument_list|(
name|Kind
argument_list|)
operator|,
name|LHS
argument_list|(
name|LHS
argument_list|)
operator|,
name|RHS
argument_list|(
argument|RHS
argument_list|)
block|{}
block|}
struct|;
comment|/// \brief A Counter expression builder is used to construct the
comment|/// counter expressions. It avoids unnecessary duplication
comment|/// and simplifies algebraic expressions.
name|class
name|CounterExpressionBuilder
block|{
comment|/// \brief A list of all the counter expressions
name|std
operator|::
name|vector
operator|<
name|CounterExpression
operator|>
name|Expressions
expr_stmt|;
comment|/// \brief A lookup table for the index of a given expression.
name|DenseMap
operator|<
name|CounterExpression
operator|,
name|unsigned
operator|>
name|ExpressionIndices
expr_stmt|;
comment|/// \brief Return the counter which corresponds to the given expression.
comment|///
comment|/// If the given expression is already stored in the builder, a counter
comment|/// that references that expression is returned. Otherwise, the given
comment|/// expression is added to the builder's collection of expressions.
name|Counter
name|get
parameter_list|(
specifier|const
name|CounterExpression
modifier|&
name|E
parameter_list|)
function_decl|;
comment|/// \brief Gather the terms of the expression tree for processing.
comment|///
comment|/// This collects each addition and subtraction referenced by the counter into
comment|/// a sequence that can be sorted and combined to build a simplified counter
comment|/// expression.
name|void
name|extractTerms
argument_list|(
name|Counter
name|C
argument_list|,
name|int
name|Sign
argument_list|,
name|SmallVectorImpl
operator|<
name|std
operator|::
name|pair
operator|<
name|unsigned
argument_list|,
name|int
operator|>>
operator|&
name|Terms
argument_list|)
decl_stmt|;
comment|/// \brief Simplifies the given expression tree
comment|/// by getting rid of algebraically redundant operations.
name|Counter
name|simplify
parameter_list|(
name|Counter
name|ExpressionTree
parameter_list|)
function_decl|;
name|public
label|:
name|ArrayRef
operator|<
name|CounterExpression
operator|>
name|getExpressions
argument_list|()
specifier|const
block|{
return|return
name|Expressions
return|;
block|}
comment|/// \brief Return a counter that represents the expression
comment|/// that adds LHS and RHS.
name|Counter
name|add
parameter_list|(
name|Counter
name|LHS
parameter_list|,
name|Counter
name|RHS
parameter_list|)
function_decl|;
comment|/// \brief Return a counter that represents the expression
comment|/// that subtracts RHS from LHS.
name|Counter
name|subtract
parameter_list|(
name|Counter
name|LHS
parameter_list|,
name|Counter
name|RHS
parameter_list|)
function_decl|;
block|}
empty_stmt|;
comment|/// \brief A Counter mapping region associates a source range with
comment|/// a specific counter.
struct|struct
name|CounterMappingRegion
block|{
enum|enum
name|RegionKind
block|{
comment|/// \brief A CodeRegion associates some code with a counter
name|CodeRegion
block|,
comment|/// \brief An ExpansionRegion represents a file expansion region that
comment|/// associates a source range with the expansion of a virtual source file,
comment|/// such as for a macro instantiation or #include file.
name|ExpansionRegion
block|,
comment|/// \brief A SkippedRegion represents a source range with code that
comment|/// was skipped by a preprocessor or similar means.
name|SkippedRegion
block|}
enum|;
name|Counter
name|Count
decl_stmt|;
name|unsigned
name|FileID
decl_stmt|,
name|ExpandedFileID
decl_stmt|;
name|unsigned
name|LineStart
decl_stmt|,
name|ColumnStart
decl_stmt|,
name|LineEnd
decl_stmt|,
name|ColumnEnd
decl_stmt|;
name|RegionKind
name|Kind
decl_stmt|;
name|CounterMappingRegion
argument_list|(
argument|Counter Count
argument_list|,
argument|unsigned FileID
argument_list|,
argument|unsigned ExpandedFileID
argument_list|,
argument|unsigned LineStart
argument_list|,
argument|unsigned ColumnStart
argument_list|,
argument|unsigned LineEnd
argument_list|,
argument|unsigned ColumnEnd
argument_list|,
argument|RegionKind Kind
argument_list|)
block|:
name|Count
argument_list|(
name|Count
argument_list|)
operator|,
name|FileID
argument_list|(
name|FileID
argument_list|)
operator|,
name|ExpandedFileID
argument_list|(
name|ExpandedFileID
argument_list|)
operator|,
name|LineStart
argument_list|(
name|LineStart
argument_list|)
operator|,
name|ColumnStart
argument_list|(
name|ColumnStart
argument_list|)
operator|,
name|LineEnd
argument_list|(
name|LineEnd
argument_list|)
operator|,
name|ColumnEnd
argument_list|(
name|ColumnEnd
argument_list|)
operator|,
name|Kind
argument_list|(
argument|Kind
argument_list|)
block|{}
specifier|static
name|CounterMappingRegion
name|makeRegion
argument_list|(
argument|Counter Count
argument_list|,
argument|unsigned FileID
argument_list|,
argument|unsigned LineStart
argument_list|,
argument|unsigned ColumnStart
argument_list|,
argument|unsigned LineEnd
argument_list|,
argument|unsigned ColumnEnd
argument_list|)
block|{
return|return
name|CounterMappingRegion
argument_list|(
name|Count
argument_list|,
name|FileID
argument_list|,
literal|0
argument_list|,
name|LineStart
argument_list|,
name|ColumnStart
argument_list|,
name|LineEnd
argument_list|,
name|ColumnEnd
argument_list|,
name|CodeRegion
argument_list|)
return|;
block|}
specifier|static
name|CounterMappingRegion
name|makeExpansion
parameter_list|(
name|unsigned
name|FileID
parameter_list|,
name|unsigned
name|ExpandedFileID
parameter_list|,
name|unsigned
name|LineStart
parameter_list|,
name|unsigned
name|ColumnStart
parameter_list|,
name|unsigned
name|LineEnd
parameter_list|,
name|unsigned
name|ColumnEnd
parameter_list|)
block|{
return|return
name|CounterMappingRegion
argument_list|(
name|Counter
argument_list|()
argument_list|,
name|FileID
argument_list|,
name|ExpandedFileID
argument_list|,
name|LineStart
argument_list|,
name|ColumnStart
argument_list|,
name|LineEnd
argument_list|,
name|ColumnEnd
argument_list|,
name|ExpansionRegion
argument_list|)
return|;
block|}
specifier|static
name|CounterMappingRegion
name|makeSkipped
parameter_list|(
name|unsigned
name|FileID
parameter_list|,
name|unsigned
name|LineStart
parameter_list|,
name|unsigned
name|ColumnStart
parameter_list|,
name|unsigned
name|LineEnd
parameter_list|,
name|unsigned
name|ColumnEnd
parameter_list|)
block|{
return|return
name|CounterMappingRegion
argument_list|(
name|Counter
argument_list|()
argument_list|,
name|FileID
argument_list|,
literal|0
argument_list|,
name|LineStart
argument_list|,
name|ColumnStart
argument_list|,
name|LineEnd
argument_list|,
name|ColumnEnd
argument_list|,
name|SkippedRegion
argument_list|)
return|;
block|}
specifier|inline
name|std
operator|::
name|pair
operator|<
name|unsigned
operator|,
name|unsigned
operator|>
name|startLoc
argument_list|()
specifier|const
block|{
return|return
name|std
operator|::
name|pair
operator|<
name|unsigned
operator|,
name|unsigned
operator|>
operator|(
name|LineStart
operator|,
name|ColumnStart
operator|)
return|;
block|}
specifier|inline
name|std
operator|::
name|pair
operator|<
name|unsigned
operator|,
name|unsigned
operator|>
name|endLoc
argument_list|()
specifier|const
block|{
return|return
name|std
operator|::
name|pair
operator|<
name|unsigned
operator|,
name|unsigned
operator|>
operator|(
name|LineEnd
operator|,
name|ColumnEnd
operator|)
return|;
block|}
block|}
struct|;
comment|/// \brief Associates a source range with an execution count.
name|struct
name|CountedRegion
range|:
name|public
name|CounterMappingRegion
block|{
name|uint64_t
name|ExecutionCount
block|;
name|CountedRegion
argument_list|(
argument|const CounterMappingRegion&R
argument_list|,
argument|uint64_t ExecutionCount
argument_list|)
operator|:
name|CounterMappingRegion
argument_list|(
name|R
argument_list|)
block|,
name|ExecutionCount
argument_list|(
argument|ExecutionCount
argument_list|)
block|{}
block|}
decl_stmt|;
comment|/// \brief A Counter mapping context is used to connect the counters,
comment|/// expressions and the obtained counter values.
name|class
name|CounterMappingContext
block|{
name|ArrayRef
operator|<
name|CounterExpression
operator|>
name|Expressions
expr_stmt|;
name|ArrayRef
operator|<
name|uint64_t
operator|>
name|CounterValues
expr_stmt|;
name|public
label|:
name|CounterMappingContext
argument_list|(
name|ArrayRef
operator|<
name|CounterExpression
operator|>
name|Expressions
argument_list|,
name|ArrayRef
operator|<
name|uint64_t
operator|>
name|CounterValues
operator|=
name|None
argument_list|)
operator|:
name|Expressions
argument_list|(
name|Expressions
argument_list|)
operator|,
name|CounterValues
argument_list|(
argument|CounterValues
argument_list|)
block|{}
name|void
name|setCounts
argument_list|(
argument|ArrayRef<uint64_t> Counts
argument_list|)
block|{
name|CounterValues
operator|=
name|Counts
block|; }
name|void
name|dump
argument_list|(
argument|const Counter&C
argument_list|,
argument|raw_ostream&OS
argument_list|)
specifier|const
expr_stmt|;
name|void
name|dump
argument_list|(
specifier|const
name|Counter
operator|&
name|C
argument_list|)
decl|const
block|{
name|dump
argument_list|(
name|C
argument_list|,
name|dbgs
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/// \brief Return the number of times that a region of code associated with
comment|/// this counter was executed.
name|Expected
operator|<
name|int64_t
operator|>
name|evaluate
argument_list|(
argument|const Counter&C
argument_list|)
specifier|const
expr_stmt|;
block|}
empty_stmt|;
comment|/// \brief Code coverage information for a single function.
struct|struct
name|FunctionRecord
block|{
comment|/// \brief Raw function name.
name|std
operator|::
name|string
name|Name
expr_stmt|;
comment|/// \brief Associated files.
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
name|Filenames
expr_stmt|;
comment|/// \brief Regions in the function along with their counts.
name|std
operator|::
name|vector
operator|<
name|CountedRegion
operator|>
name|CountedRegions
expr_stmt|;
comment|/// \brief The number of times this function was executed.
name|uint64_t
name|ExecutionCount
decl_stmt|;
name|FunctionRecord
argument_list|(
argument|StringRef Name
argument_list|,
argument|ArrayRef<StringRef> Filenames
argument_list|)
block|:
name|Name
argument_list|(
name|Name
argument_list|)
operator|,
name|Filenames
argument_list|(
argument|Filenames.begin()
argument_list|,
argument|Filenames.end()
argument_list|)
block|{}
name|FunctionRecord
argument_list|(
name|FunctionRecord
operator|&&
name|FR
argument_list|)
operator|=
expr|default
expr_stmt|;
name|FunctionRecord
modifier|&
name|operator
init|=
operator|(
name|FunctionRecord
operator|&&
operator|)
operator|=
expr|default
decl_stmt|;
name|void
name|pushRegion
parameter_list|(
name|CounterMappingRegion
name|Region
parameter_list|,
name|uint64_t
name|Count
parameter_list|)
block|{
if|if
condition|(
name|CountedRegions
operator|.
name|empty
argument_list|()
condition|)
name|ExecutionCount
operator|=
name|Count
expr_stmt|;
name|CountedRegions
operator|.
name|emplace_back
argument_list|(
name|Region
argument_list|,
name|Count
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
comment|/// \brief Iterator over Functions, optionally filtered to a single file.
name|class
name|FunctionRecordIterator
range|:
name|public
name|iterator_facade_base
operator|<
name|FunctionRecordIterator
decl_stmt|,
name|std
decl|::
name|forward_iterator_tag
decl_stmt|,
name|FunctionRecord
decl|>
block|{
name|ArrayRef
operator|<
name|FunctionRecord
operator|>
name|Records
expr_stmt|;
name|ArrayRef
operator|<
name|FunctionRecord
operator|>
operator|::
name|iterator
name|Current
expr_stmt|;
name|StringRef
name|Filename
decl_stmt|;
comment|/// \brief Skip records whose primary file is not \c Filename.
name|void
name|skipOtherFiles
parameter_list|()
function_decl|;
name|public
label|:
name|FunctionRecordIterator
argument_list|(
argument|ArrayRef<FunctionRecord> Records_
argument_list|,
argument|StringRef Filename =
literal|""
argument_list|)
block|:
name|Records
argument_list|(
name|Records_
argument_list|)
operator|,
name|Current
argument_list|(
name|Records
operator|.
name|begin
argument_list|()
argument_list|)
operator|,
name|Filename
argument_list|(
argument|Filename
argument_list|)
block|{
name|skipOtherFiles
argument_list|()
block|;   }
name|FunctionRecordIterator
argument_list|()
operator|:
name|Current
argument_list|(
argument|Records.begin()
argument_list|)
block|{}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|FunctionRecordIterator
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|Current
operator|==
name|RHS
operator|.
name|Current
operator|&&
name|Filename
operator|==
name|RHS
operator|.
name|Filename
return|;
block|}
specifier|const
name|FunctionRecord
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|Current
return|;
block|}
name|FunctionRecordIterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|assert
argument_list|(
name|Current
operator|!=
name|Records
operator|.
name|end
argument_list|()
operator|&&
literal|"incremented past end"
argument_list|)
block|;
operator|++
name|Current
block|;
name|skipOtherFiles
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
block|}
empty_stmt|;
comment|/// \brief Coverage information for a macro expansion or #included file.
comment|///
comment|/// When covered code has pieces that can be expanded for more detail, such as a
comment|/// preprocessor macro use and its definition, these are represented as
comment|/// expansions whose coverage can be looked up independently.
struct|struct
name|ExpansionRecord
block|{
comment|/// \brief The abstract file this expansion covers.
name|unsigned
name|FileID
decl_stmt|;
comment|/// \brief The region that expands to this record.
specifier|const
name|CountedRegion
modifier|&
name|Region
decl_stmt|;
comment|/// \brief Coverage for the expansion.
specifier|const
name|FunctionRecord
modifier|&
name|Function
decl_stmt|;
name|ExpansionRecord
argument_list|(
specifier|const
name|CountedRegion
operator|&
name|Region
argument_list|,
specifier|const
name|FunctionRecord
operator|&
name|Function
argument_list|)
operator|:
name|FileID
argument_list|(
name|Region
operator|.
name|ExpandedFileID
argument_list|)
operator|,
name|Region
argument_list|(
name|Region
argument_list|)
operator|,
name|Function
argument_list|(
argument|Function
argument_list|)
block|{}
block|}
struct|;
comment|/// \brief The execution count information starting at a point in a file.
comment|///
comment|/// A sequence of CoverageSegments gives execution counts for a file in format
comment|/// that's simple to iterate through for processing.
struct|struct
name|CoverageSegment
block|{
comment|/// \brief The line where this segment begins.
name|unsigned
name|Line
decl_stmt|;
comment|/// \brief The column where this segment begins.
name|unsigned
name|Col
decl_stmt|;
comment|/// \brief The execution count, or zero if no count was recorded.
name|uint64_t
name|Count
decl_stmt|;
comment|/// \brief When false, the segment was uninstrumented or skipped.
name|bool
name|HasCount
decl_stmt|;
comment|/// \brief Whether this enters a new region or returns to a previous count.
name|bool
name|IsRegionEntry
decl_stmt|;
name|CoverageSegment
argument_list|(
argument|unsigned Line
argument_list|,
argument|unsigned Col
argument_list|,
argument|bool IsRegionEntry
argument_list|)
block|:
name|Line
argument_list|(
name|Line
argument_list|)
operator|,
name|Col
argument_list|(
name|Col
argument_list|)
operator|,
name|Count
argument_list|(
literal|0
argument_list|)
operator|,
name|HasCount
argument_list|(
name|false
argument_list|)
operator|,
name|IsRegionEntry
argument_list|(
argument|IsRegionEntry
argument_list|)
block|{}
name|CoverageSegment
argument_list|(
argument|unsigned Line
argument_list|,
argument|unsigned Col
argument_list|,
argument|uint64_t Count
argument_list|,
argument|bool IsRegionEntry
argument_list|)
operator|:
name|Line
argument_list|(
name|Line
argument_list|)
operator|,
name|Col
argument_list|(
name|Col
argument_list|)
operator|,
name|Count
argument_list|(
name|Count
argument_list|)
operator|,
name|HasCount
argument_list|(
name|true
argument_list|)
operator|,
name|IsRegionEntry
argument_list|(
argument|IsRegionEntry
argument_list|)
block|{}
name|friend
name|bool
name|operator
operator|==
operator|(
specifier|const
name|CoverageSegment
operator|&
name|L
operator|,
specifier|const
name|CoverageSegment
operator|&
name|R
operator|)
block|{
return|return
name|std
operator|::
name|tie
argument_list|(
name|L
operator|.
name|Line
argument_list|,
name|L
operator|.
name|Col
argument_list|,
name|L
operator|.
name|Count
argument_list|,
name|L
operator|.
name|HasCount
argument_list|,
name|L
operator|.
name|IsRegionEntry
argument_list|)
operator|==
name|std
operator|::
name|tie
argument_list|(
name|R
operator|.
name|Line
argument_list|,
name|R
operator|.
name|Col
argument_list|,
name|R
operator|.
name|Count
argument_list|,
name|R
operator|.
name|HasCount
argument_list|,
name|R
operator|.
name|IsRegionEntry
argument_list|)
return|;
block|}
block|}
struct|;
comment|/// \brief Coverage information to be processed or displayed.
comment|///
comment|/// This represents the coverage of an entire file, expansion, or function. It
comment|/// provides a sequence of CoverageSegments to iterate through, as well as the
comment|/// list of expansions that can be further processed.
name|class
name|CoverageData
block|{
name|friend
name|class
name|CoverageMapping
decl_stmt|;
name|std
operator|::
name|string
name|Filename
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|CoverageSegment
operator|>
name|Segments
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|ExpansionRecord
operator|>
name|Expansions
expr_stmt|;
name|public
label|:
name|CoverageData
argument_list|()
operator|=
expr|default
expr_stmt|;
name|CoverageData
argument_list|(
argument|StringRef Filename
argument_list|)
block|:
name|Filename
argument_list|(
argument|Filename
argument_list|)
block|{}
comment|/// \brief Get the name of the file this data covers.
name|StringRef
name|getFilename
argument_list|()
specifier|const
block|{
return|return
name|Filename
return|;
block|}
name|std
operator|::
name|vector
operator|<
name|CoverageSegment
operator|>
operator|::
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|Segments
operator|.
name|begin
argument_list|()
return|;
block|}
name|std
operator|::
name|vector
operator|<
name|CoverageSegment
operator|>
operator|::
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|Segments
operator|.
name|end
argument_list|()
return|;
block|}
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|Segments
operator|.
name|empty
argument_list|()
return|;
block|}
comment|/// \brief Expansions that can be further processed.
name|ArrayRef
operator|<
name|ExpansionRecord
operator|>
name|getExpansions
argument_list|()
specifier|const
block|{
return|return
name|Expansions
return|;
block|}
block|}
empty_stmt|;
comment|/// \brief The mapping of profile information to coverage data.
comment|///
comment|/// This is the main interface to get coverage information, using a profile to
comment|/// fill out execution counts.
name|class
name|CoverageMapping
block|{
name|StringSet
operator|<
operator|>
name|FunctionNames
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|FunctionRecord
operator|>
name|Functions
expr_stmt|;
name|unsigned
name|MismatchedFunctionCount
init|=
literal|0
decl_stmt|;
name|CoverageMapping
argument_list|()
operator|=
expr|default
expr_stmt|;
comment|/// \brief Add a function record corresponding to \p Record.
name|Error
name|loadFunctionRecord
parameter_list|(
specifier|const
name|CoverageMappingRecord
modifier|&
name|Record
parameter_list|,
name|IndexedInstrProfReader
modifier|&
name|ProfileReader
parameter_list|)
function_decl|;
name|public
label|:
name|CoverageMapping
argument_list|(
specifier|const
name|CoverageMapping
operator|&
argument_list|)
operator|=
name|delete
expr_stmt|;
name|CoverageMapping
modifier|&
name|operator
init|=
operator|(
specifier|const
name|CoverageMapping
operator|&
operator|)
operator|=
name|delete
decl_stmt|;
comment|/// \brief Load the coverage mapping using the given readers.
specifier|static
name|Expected
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|CoverageMapping
operator|>>
name|load
argument_list|(
name|CoverageMappingReader
operator|&
name|CoverageReader
argument_list|,
name|IndexedInstrProfReader
operator|&
name|ProfileReader
argument_list|)
expr_stmt|;
specifier|static
name|Expected
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|CoverageMapping
operator|>>
name|load
argument_list|(
name|ArrayRef
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|CoverageMappingReader
operator|>>
name|CoverageReaders
argument_list|,
name|IndexedInstrProfReader
operator|&
name|ProfileReader
argument_list|)
expr_stmt|;
comment|/// \brief Load the coverage mapping from the given files.
specifier|static
name|Expected
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|CoverageMapping
operator|>>
name|load
argument_list|(
argument|StringRef ObjectFilename
argument_list|,
argument|StringRef ProfileFilename
argument_list|,
argument|StringRef Arch = StringRef()
argument_list|)
block|{
return|return
name|load
argument_list|(
name|ArrayRef
operator|<
name|StringRef
operator|>
operator|(
name|ObjectFilename
operator|)
argument_list|,
name|ProfileFilename
argument_list|,
name|Arch
argument_list|)
return|;
block|}
specifier|static
name|Expected
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|CoverageMapping
operator|>>
name|load
argument_list|(
argument|ArrayRef<StringRef> ObjectFilenames
argument_list|,
argument|StringRef ProfileFilename
argument_list|,
argument|StringRef Arch = StringRef()
argument_list|)
expr_stmt|;
comment|/// \brief The number of functions that couldn't have their profiles mapped.
comment|///
comment|/// This is a count of functions whose profile is out of date or otherwise
comment|/// can't be associated with any coverage information.
name|unsigned
name|getMismatchedCount
parameter_list|()
block|{
return|return
name|MismatchedFunctionCount
return|;
block|}
comment|/// \brief Returns a lexicographically sorted, unique list of files that are
comment|/// covered.
name|std
operator|::
name|vector
operator|<
name|StringRef
operator|>
name|getUniqueSourceFiles
argument_list|()
specifier|const
expr_stmt|;
comment|/// \brief Get the coverage for a particular file.
comment|///
comment|/// The given filename must be the name as recorded in the coverage
comment|/// information. That is, only names returned from getUniqueSourceFiles will
comment|/// yield a result.
name|CoverageData
name|getCoverageForFile
argument_list|(
name|StringRef
name|Filename
argument_list|)
decl|const
decl_stmt|;
comment|/// \brief Gets all of the functions covered by this profile.
name|iterator_range
operator|<
name|FunctionRecordIterator
operator|>
name|getCoveredFunctions
argument_list|()
specifier|const
block|{
return|return
name|make_range
argument_list|(
name|FunctionRecordIterator
argument_list|(
name|Functions
argument_list|)
argument_list|,
name|FunctionRecordIterator
argument_list|()
argument_list|)
return|;
block|}
comment|/// \brief Gets all of the functions in a particular file.
name|iterator_range
operator|<
name|FunctionRecordIterator
operator|>
name|getCoveredFunctions
argument_list|(
argument|StringRef Filename
argument_list|)
specifier|const
block|{
return|return
name|make_range
argument_list|(
name|FunctionRecordIterator
argument_list|(
name|Functions
argument_list|,
name|Filename
argument_list|)
argument_list|,
name|FunctionRecordIterator
argument_list|()
argument_list|)
return|;
block|}
comment|/// \brief Get the list of function instantiations in the file.
comment|///
comment|/// Functions that are instantiated more than once, such as C++ template
comment|/// specializations, have distinct coverage records for each instantiation.
name|std
operator|::
name|vector
operator|<
specifier|const
name|FunctionRecord
operator|*
operator|>
name|getInstantiations
argument_list|(
argument|StringRef Filename
argument_list|)
specifier|const
expr_stmt|;
comment|/// \brief Get the coverage for a particular function.
name|CoverageData
name|getCoverageForFunction
argument_list|(
specifier|const
name|FunctionRecord
operator|&
name|Function
argument_list|)
decl|const
decl_stmt|;
comment|/// \brief Get the coverage for an expansion within a coverage set.
name|CoverageData
name|getCoverageForExpansion
argument_list|(
specifier|const
name|ExpansionRecord
operator|&
name|Expansion
argument_list|)
decl|const
decl_stmt|;
block|}
empty_stmt|;
comment|// Profile coverage map has the following layout:
comment|// [CoverageMapFileHeader]
comment|// [ArrayStart]
comment|//  [CovMapFunctionRecord]
comment|//  [CovMapFunctionRecord]
comment|//  ...
comment|// [ArrayEnd]
comment|// [Encoded Region Mapping Data]
name|LLVM_PACKED_START
name|template
operator|<
name|class
name|IntPtrT
operator|>
expr|struct
name|CovMapFunctionRecordV1
block|{
define|#
directive|define
name|COVMAP_V1
define|#
directive|define
name|COVMAP_FUNC_RECORD
parameter_list|(
name|Type
parameter_list|,
name|LLVMType
parameter_list|,
name|Name
parameter_list|,
name|Init
parameter_list|)
value|Type Name;
include|#
directive|include
file|"llvm/ProfileData/InstrProfData.inc"
undef|#
directive|undef
name|COVMAP_V1
comment|// Return the structural hash associated with the function.
name|template
operator|<
name|support
operator|::
name|endianness
name|Endian
operator|>
name|uint64_t
name|getFuncHash
argument_list|()
specifier|const
block|{
return|return
name|support
operator|::
name|endian
operator|::
name|byte_swap
operator|<
name|uint64_t
operator|,
name|Endian
operator|>
operator|(
name|FuncHash
operator|)
return|;
block|}
comment|// Return the coverage map data size for the funciton.
name|template
operator|<
name|support
operator|::
name|endianness
name|Endian
operator|>
name|uint32_t
name|getDataSize
argument_list|()
specifier|const
block|{
return|return
name|support
operator|::
name|endian
operator|::
name|byte_swap
operator|<
name|uint32_t
operator|,
name|Endian
operator|>
operator|(
name|DataSize
operator|)
return|;
block|}
comment|// Return function lookup key. The value is consider opaque.
name|template
operator|<
name|support
operator|::
name|endianness
name|Endian
operator|>
name|IntPtrT
name|getFuncNameRef
argument_list|()
specifier|const
block|{
return|return
name|support
operator|::
name|endian
operator|::
name|byte_swap
operator|<
name|IntPtrT
operator|,
name|Endian
operator|>
operator|(
name|NamePtr
operator|)
return|;
block|}
comment|// Return the PGO name of the function */
name|template
operator|<
name|support
operator|::
name|endianness
name|Endian
operator|>
name|Error
name|getFuncName
argument_list|(
argument|InstrProfSymtab&ProfileNames
argument_list|,
argument|StringRef&FuncName
argument_list|)
specifier|const
block|{
name|IntPtrT
name|NameRef
operator|=
name|getFuncNameRef
operator|<
name|Endian
operator|>
operator|(
operator|)
block|;
name|uint32_t
name|NameS
operator|=
name|support
operator|::
name|endian
operator|::
name|byte_swap
operator|<
name|uint32_t
block|,
name|Endian
operator|>
operator|(
name|NameSize
operator|)
block|;
name|FuncName
operator|=
name|ProfileNames
operator|.
name|getFuncName
argument_list|(
name|NameRef
argument_list|,
name|NameS
argument_list|)
block|;
if|if
condition|(
name|NameS
operator|&&
name|FuncName
operator|.
name|empty
argument_list|()
condition|)
return|return
name|make_error
operator|<
name|CoverageMapError
operator|>
operator|(
name|coveragemap_error
operator|::
name|malformed
operator|)
return|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
block|}
empty_stmt|;
struct|struct
name|CovMapFunctionRecord
block|{
define|#
directive|define
name|COVMAP_FUNC_RECORD
parameter_list|(
name|Type
parameter_list|,
name|LLVMType
parameter_list|,
name|Name
parameter_list|,
name|Init
parameter_list|)
value|Type Name;
include|#
directive|include
file|"llvm/ProfileData/InstrProfData.inc"
comment|// Return the structural hash associated with the function.
name|template
operator|<
name|support
operator|::
name|endianness
name|Endian
operator|>
name|uint64_t
name|getFuncHash
argument_list|()
specifier|const
block|{
return|return
name|support
operator|::
name|endian
operator|::
name|byte_swap
operator|<
name|uint64_t
operator|,
name|Endian
operator|>
operator|(
name|FuncHash
operator|)
return|;
block|}
comment|// Return the coverage map data size for the funciton.
name|template
operator|<
name|support
operator|::
name|endianness
name|Endian
operator|>
name|uint32_t
name|getDataSize
argument_list|()
specifier|const
block|{
return|return
name|support
operator|::
name|endian
operator|::
name|byte_swap
operator|<
name|uint32_t
operator|,
name|Endian
operator|>
operator|(
name|DataSize
operator|)
return|;
block|}
comment|// Return function lookup key. The value is consider opaque.
name|template
operator|<
name|support
operator|::
name|endianness
name|Endian
operator|>
name|uint64_t
name|getFuncNameRef
argument_list|()
specifier|const
block|{
return|return
name|support
operator|::
name|endian
operator|::
name|byte_swap
operator|<
name|uint64_t
operator|,
name|Endian
operator|>
operator|(
name|NameRef
operator|)
return|;
block|}
comment|// Return the PGO name of the function */
name|template
operator|<
name|support
operator|::
name|endianness
name|Endian
operator|>
name|Error
name|getFuncName
argument_list|(
argument|InstrProfSymtab&ProfileNames
argument_list|,
argument|StringRef&FuncName
argument_list|)
specifier|const
block|{
name|uint64_t
name|NameRef
operator|=
name|getFuncNameRef
operator|<
name|Endian
operator|>
operator|(
operator|)
block|;
name|FuncName
operator|=
name|ProfileNames
operator|.
name|getFuncName
argument_list|(
name|NameRef
argument_list|)
block|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
block|}
struct|;
comment|// Per module coverage mapping data header, i.e. CoverageMapFileHeader
comment|// documented above.
struct|struct
name|CovMapHeader
block|{
define|#
directive|define
name|COVMAP_HEADER
parameter_list|(
name|Type
parameter_list|,
name|LLVMType
parameter_list|,
name|Name
parameter_list|,
name|Init
parameter_list|)
value|Type Name;
include|#
directive|include
file|"llvm/ProfileData/InstrProfData.inc"
name|template
operator|<
name|support
operator|::
name|endianness
name|Endian
operator|>
name|uint32_t
name|getNRecords
argument_list|()
specifier|const
block|{
return|return
name|support
operator|::
name|endian
operator|::
name|byte_swap
operator|<
name|uint32_t
operator|,
name|Endian
operator|>
operator|(
name|NRecords
operator|)
return|;
block|}
name|template
operator|<
name|support
operator|::
name|endianness
name|Endian
operator|>
name|uint32_t
name|getFilenamesSize
argument_list|()
specifier|const
block|{
return|return
name|support
operator|::
name|endian
operator|::
name|byte_swap
operator|<
name|uint32_t
operator|,
name|Endian
operator|>
operator|(
name|FilenamesSize
operator|)
return|;
block|}
name|template
operator|<
name|support
operator|::
name|endianness
name|Endian
operator|>
name|uint32_t
name|getCoverageSize
argument_list|()
specifier|const
block|{
return|return
name|support
operator|::
name|endian
operator|::
name|byte_swap
operator|<
name|uint32_t
operator|,
name|Endian
operator|>
operator|(
name|CoverageSize
operator|)
return|;
block|}
name|template
operator|<
name|support
operator|::
name|endianness
name|Endian
operator|>
name|uint32_t
name|getVersion
argument_list|()
specifier|const
block|{
return|return
name|support
operator|::
name|endian
operator|::
name|byte_swap
operator|<
name|uint32_t
operator|,
name|Endian
operator|>
operator|(
name|Version
operator|)
return|;
block|}
block|}
struct|;
name|LLVM_PACKED_END
name|enum
name|CovMapVersion
block|{
name|Version1
operator|=
literal|0
operator|,
comment|// Function's name reference from CovMapFuncRecord is changed from raw
comment|// name string pointer to MD5 to support name section compression. Name
comment|// section is also compressed.
name|Version2
operator|=
literal|1
operator|,
comment|// The current version is Version2
name|CurrentVersion
operator|=
name|INSTR_PROF_COVMAP_VERSION
block|}
empty_stmt|;
name|template
operator|<
name|int
name|CovMapVersion
operator|,
name|class
name|IntPtrT
operator|>
expr|struct
name|CovMapTraits
block|{
name|using
name|CovMapFuncRecordType
operator|=
name|CovMapFunctionRecord
block|;
name|using
name|NameRefType
operator|=
name|uint64_t
block|; }
expr_stmt|;
name|template
operator|<
name|class
name|IntPtrT
operator|>
expr|struct
name|CovMapTraits
operator|<
name|CovMapVersion
operator|::
name|Version1
operator|,
name|IntPtrT
operator|>
block|{
name|using
name|CovMapFuncRecordType
operator|=
name|CovMapFunctionRecordV1
operator|<
name|IntPtrT
operator|>
block|;
name|using
name|NameRefType
operator|=
name|IntPtrT
block|; }
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace coverage
end_comment

begin_comment
comment|/// \brief Provide DenseMapInfo for CounterExpression
end_comment

begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|DenseMapInfo
operator|<
name|coverage
operator|::
name|CounterExpression
operator|>
block|{
specifier|static
specifier|inline
name|coverage
operator|::
name|CounterExpression
name|getEmptyKey
argument_list|()
block|{
name|using
name|namespace
name|coverage
block|;
return|return
name|CounterExpression
argument_list|(
name|CounterExpression
operator|::
name|ExprKind
operator|::
name|Subtract
argument_list|,
name|Counter
operator|::
name|getCounter
argument_list|(
operator|~
literal|0U
argument_list|)
argument_list|,
name|Counter
operator|::
name|getCounter
argument_list|(
operator|~
literal|0U
argument_list|)
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|coverage
operator|::
name|CounterExpression
name|getTombstoneKey
argument_list|()
block|{
name|using
name|namespace
name|coverage
block|;
return|return
name|CounterExpression
argument_list|(
name|CounterExpression
operator|::
name|ExprKind
operator|::
name|Add
argument_list|,
name|Counter
operator|::
name|getCounter
argument_list|(
operator|~
literal|0U
argument_list|)
argument_list|,
name|Counter
operator|::
name|getCounter
argument_list|(
operator|~
literal|0U
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
specifier|static
name|unsigned
name|getHashValue
argument_list|(
specifier|const
name|coverage
operator|::
name|CounterExpression
operator|&
name|V
argument_list|)
block|{
return|return
name|static_cast
operator|<
name|unsigned
operator|>
operator|(
name|hash_combine
argument_list|(
name|V
operator|.
name|Kind
argument_list|,
name|V
operator|.
name|LHS
operator|.
name|getKind
argument_list|()
argument_list|,
name|V
operator|.
name|LHS
operator|.
name|getCounterID
argument_list|()
argument_list|,
name|V
operator|.
name|RHS
operator|.
name|getKind
argument_list|()
argument_list|,
name|V
operator|.
name|RHS
operator|.
name|getCounterID
argument_list|()
argument_list|)
operator|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|bool
name|isEqual
argument_list|(
specifier|const
name|coverage
operator|::
name|CounterExpression
operator|&
name|LHS
argument_list|,
specifier|const
name|coverage
operator|::
name|CounterExpression
operator|&
name|RHS
argument_list|)
block|{
return|return
name|LHS
operator|.
name|Kind
operator|==
name|RHS
operator|.
name|Kind
operator|&&
name|LHS
operator|.
name|LHS
operator|==
name|RHS
operator|.
name|LHS
operator|&&
name|LHS
operator|.
name|RHS
operator|==
name|RHS
operator|.
name|RHS
return|;
block|}
end_decl_stmt

begin_comment
unit|};  }
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_PROFILEDATA_COVERAGE_COVERAGEMAPPING_H
end_comment

end_unit

