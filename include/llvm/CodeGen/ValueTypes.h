begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- CodeGen/ValueTypes.h - Low-Level Target independ. types --*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines the set of low-level target independent types which various
end_comment

begin_comment
comment|// values in the code generator are.  This allows the target specific behavior
end_comment

begin_comment
comment|// of instructions to be described to target independent passes.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CODEGEN_VALUETYPES_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CODEGEN_VALUETYPES_H
end_define

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|"llvm/Support/DataTypes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/MathExtras.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|Type
decl_stmt|;
struct|struct
name|MVT
block|{
comment|// MVT = Machine Value Type
name|public
label|:
enum|enum
name|SimpleValueType
block|{
comment|// If you change this numbering, you must change the values in
comment|// ValueTypes.td as well!
name|Other
init|=
literal|0
block|,
comment|// This is a non-standard value
name|i1
init|=
literal|1
block|,
comment|// This is a 1 bit integer value
name|i8
init|=
literal|2
block|,
comment|// This is an 8 bit integer value
name|i16
init|=
literal|3
block|,
comment|// This is a 16 bit integer value
name|i32
init|=
literal|4
block|,
comment|// This is a 32 bit integer value
name|i64
init|=
literal|5
block|,
comment|// This is a 64 bit integer value
name|i128
init|=
literal|6
block|,
comment|// This is a 128 bit integer value
name|FIRST_INTEGER_VALUETYPE
init|=
name|i1
block|,
name|LAST_INTEGER_VALUETYPE
init|=
name|i128
block|,
name|f32
init|=
literal|7
block|,
comment|// This is a 32 bit floating point value
name|f64
init|=
literal|8
block|,
comment|// This is a 64 bit floating point value
name|f80
init|=
literal|9
block|,
comment|// This is a 80 bit floating point value
name|f128
init|=
literal|10
block|,
comment|// This is a 128 bit floating point value
name|ppcf128
init|=
literal|11
block|,
comment|// This is a PPC 128-bit floating point value
name|Flag
init|=
literal|12
block|,
comment|// This is a condition code or machine flag.
name|isVoid
init|=
literal|13
block|,
comment|// This has no value
name|v2i8
init|=
literal|14
block|,
comment|//  2 x i8
name|v4i8
init|=
literal|15
block|,
comment|//  4 x i8
name|v2i16
init|=
literal|16
block|,
comment|//  2 x i16
name|v8i8
init|=
literal|17
block|,
comment|//  8 x i8
name|v4i16
init|=
literal|18
block|,
comment|//  4 x i16
name|v2i32
init|=
literal|19
block|,
comment|//  2 x i32
name|v1i64
init|=
literal|20
block|,
comment|//  1 x i64
name|v16i8
init|=
literal|21
block|,
comment|// 16 x i8
name|v8i16
init|=
literal|22
block|,
comment|//  8 x i16
name|v3i32
init|=
literal|23
block|,
comment|//  3 x i32
name|v4i32
init|=
literal|24
block|,
comment|//  4 x i32
name|v2i64
init|=
literal|25
block|,
comment|//  2 x i64
name|v2f32
init|=
literal|26
block|,
comment|//  2 x f32
name|v3f32
init|=
literal|27
block|,
comment|//  3 x f32
name|v4f32
init|=
literal|28
block|,
comment|//  4 x f32
name|v2f64
init|=
literal|29
block|,
comment|//  2 x f64
name|FIRST_VECTOR_VALUETYPE
init|=
name|v2i8
block|,
name|LAST_VECTOR_VALUETYPE
init|=
name|v2f64
block|,
name|LAST_VALUETYPE
init|=
literal|30
block|,
comment|// This always remains at the end of the list.
comment|// This is the current maximum for LAST_VALUETYPE.
comment|// Affects ValueTypeActions in TargetLowering.h.
comment|// MVT::MAX_ALLOWED_VALUETYPE is used for asserts and to size bit vectors
comment|// This value must be a multiple of 32.
name|MAX_ALLOWED_VALUETYPE
init|=
literal|64
block|,
comment|// iPTRAny - An int value the size of the pointer of the current
comment|// target to any address space. This must only be used internal to
comment|// tblgen. Other than for overloading, we treat iPTRAny the same as iPTR.
name|iPTRAny
init|=
literal|252
block|,
comment|// fAny - Any floating-point or vector floating-point value. This is used
comment|// for intrinsics that have overloadings based on floating-point types.
comment|// This is only for tblgen's consumption!
name|fAny
init|=
literal|253
block|,
comment|// iAny - An integer or vector integer value of any bit width. This is
comment|// used for intrinsics that have overloadings based on integer bit widths.
comment|// This is only for tblgen's consumption!
name|iAny
init|=
literal|254
block|,
comment|// iPTR - An int value the size of the pointer of the current
comment|// target.  This should only be used internal to tblgen!
name|iPTR
init|=
literal|255
block|,
comment|// LastSimpleValueType - The greatest valid SimpleValueType value.
name|LastSimpleValueType
init|=
literal|255
block|}
enum|;
name|private
label|:
comment|/// This union holds low-level value types. Valid values include any of
comment|/// the values in the SimpleValueType enum, or any value returned from one
comment|/// of the MVT methods.  Any value type equal to one of the SimpleValueType
comment|/// enum values is a "simple" value type.  All others are "extended".
comment|///
comment|/// Note that simple doesn't necessary mean legal for the target machine.
comment|/// All legal value types must be simple, but often there are some simple
comment|/// value types that are not legal.
comment|///
union|union
block|{
name|uintptr_t
name|V
decl_stmt|;
specifier|const
name|Type
modifier|*
name|LLVMTy
decl_stmt|;
block|}
union|;
name|public
label|:
name|MVT
argument_list|()
block|{}
name|MVT
argument_list|(
argument|SimpleValueType S
argument_list|)
block|:
name|V
argument_list|(
argument|S
argument_list|)
block|{}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|MVT
name|VT
operator|)
specifier|const
block|{
return|return
name|getRawBits
argument_list|()
operator|==
name|VT
operator|.
name|getRawBits
argument_list|()
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|MVT
name|VT
operator|)
specifier|const
block|{
return|return
name|getRawBits
argument_list|()
operator|!=
name|VT
operator|.
name|getRawBits
argument_list|()
return|;
block|}
comment|/// getFloatingPointVT - Returns the MVT that represents a floating point
comment|/// type with the given number of bits.  There are two floating point types
comment|/// with 128 bits - this returns f128 rather than ppcf128.
specifier|static
name|MVT
name|getFloatingPointVT
parameter_list|(
name|unsigned
name|BitWidth
parameter_list|)
block|{
switch|switch
condition|(
name|BitWidth
condition|)
block|{
default|default:
name|assert
argument_list|(
name|false
operator|&&
literal|"Bad bit width!"
argument_list|)
expr_stmt|;
case|case
literal|32
case|:
return|return
name|f32
return|;
case|case
literal|64
case|:
return|return
name|f64
return|;
case|case
literal|80
case|:
return|return
name|f80
return|;
case|case
literal|128
case|:
return|return
name|f128
return|;
block|}
block|}
comment|/// getIntegerVT - Returns the MVT that represents an integer with the given
comment|/// number of bits.
specifier|static
name|MVT
name|getIntegerVT
parameter_list|(
name|unsigned
name|BitWidth
parameter_list|)
block|{
switch|switch
condition|(
name|BitWidth
condition|)
block|{
default|default:
break|break;
case|case
literal|1
case|:
return|return
name|i1
return|;
case|case
literal|8
case|:
return|return
name|i8
return|;
case|case
literal|16
case|:
return|return
name|i16
return|;
case|case
literal|32
case|:
return|return
name|i32
return|;
case|case
literal|64
case|:
return|return
name|i64
return|;
case|case
literal|128
case|:
return|return
name|i128
return|;
block|}
return|return
name|getExtendedIntegerVT
argument_list|(
name|BitWidth
argument_list|)
return|;
block|}
comment|/// getVectorVT - Returns the MVT that represents a vector NumElements in
comment|/// length, where each element is of type VT.
specifier|static
name|MVT
name|getVectorVT
parameter_list|(
name|MVT
name|VT
parameter_list|,
name|unsigned
name|NumElements
parameter_list|)
block|{
switch|switch
condition|(
name|VT
operator|.
name|V
condition|)
block|{
default|default:
break|break;
case|case
name|i8
case|:
if|if
condition|(
name|NumElements
operator|==
literal|2
condition|)
return|return
name|v2i8
return|;
if|if
condition|(
name|NumElements
operator|==
literal|4
condition|)
return|return
name|v4i8
return|;
if|if
condition|(
name|NumElements
operator|==
literal|8
condition|)
return|return
name|v8i8
return|;
if|if
condition|(
name|NumElements
operator|==
literal|16
condition|)
return|return
name|v16i8
return|;
break|break;
case|case
name|i16
case|:
if|if
condition|(
name|NumElements
operator|==
literal|2
condition|)
return|return
name|v2i16
return|;
if|if
condition|(
name|NumElements
operator|==
literal|4
condition|)
return|return
name|v4i16
return|;
if|if
condition|(
name|NumElements
operator|==
literal|8
condition|)
return|return
name|v8i16
return|;
break|break;
case|case
name|i32
case|:
if|if
condition|(
name|NumElements
operator|==
literal|2
condition|)
return|return
name|v2i32
return|;
if|if
condition|(
name|NumElements
operator|==
literal|3
condition|)
return|return
name|v3i32
return|;
if|if
condition|(
name|NumElements
operator|==
literal|4
condition|)
return|return
name|v4i32
return|;
break|break;
case|case
name|i64
case|:
if|if
condition|(
name|NumElements
operator|==
literal|1
condition|)
return|return
name|v1i64
return|;
if|if
condition|(
name|NumElements
operator|==
literal|2
condition|)
return|return
name|v2i64
return|;
break|break;
case|case
name|f32
case|:
if|if
condition|(
name|NumElements
operator|==
literal|2
condition|)
return|return
name|v2f32
return|;
if|if
condition|(
name|NumElements
operator|==
literal|3
condition|)
return|return
name|v3f32
return|;
if|if
condition|(
name|NumElements
operator|==
literal|4
condition|)
return|return
name|v4f32
return|;
break|break;
case|case
name|f64
case|:
if|if
condition|(
name|NumElements
operator|==
literal|2
condition|)
return|return
name|v2f64
return|;
break|break;
block|}
return|return
name|getExtendedVectorVT
argument_list|(
name|VT
argument_list|,
name|NumElements
argument_list|)
return|;
block|}
comment|/// getIntVectorWithNumElements - Return any integer vector type that has
comment|/// the specified number of elements.
specifier|static
name|MVT
name|getIntVectorWithNumElements
parameter_list|(
name|unsigned
name|NumElts
parameter_list|)
block|{
switch|switch
condition|(
name|NumElts
condition|)
block|{
default|default:
return|return
name|getVectorVT
argument_list|(
name|i8
argument_list|,
name|NumElts
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|v1i64
return|;
case|case
literal|2
case|:
return|return
name|v2i32
return|;
case|case
literal|3
case|:
return|return
name|v3i32
return|;
case|case
literal|4
case|:
return|return
name|v4i16
return|;
case|case
literal|8
case|:
return|return
name|v8i8
return|;
case|case
literal|16
case|:
return|return
name|v16i8
return|;
block|}
block|}
comment|/// isSimple - Test if the given MVT is simple (as opposed to being
comment|/// extended).
name|bool
name|isSimple
argument_list|()
specifier|const
block|{
return|return
name|V
operator|<=
name|LastSimpleValueType
return|;
block|}
comment|/// isExtended - Test if the given MVT is extended (as opposed to
comment|/// being simple).
name|bool
name|isExtended
argument_list|()
specifier|const
block|{
return|return
operator|!
name|isSimple
argument_list|()
return|;
block|}
comment|/// isFloatingPoint - Return true if this is a FP, or a vector FP type.
name|bool
name|isFloatingPoint
argument_list|()
specifier|const
block|{
return|return
name|isSimple
argument_list|()
operator|?
operator|(
operator|(
name|V
operator|>=
name|f32
operator|&&
name|V
operator|<=
name|ppcf128
operator|)
operator|||
operator|(
name|V
operator|>=
name|v2f32
operator|&&
name|V
operator|<=
name|v2f64
operator|)
operator|)
operator|:
name|isExtendedFloatingPoint
argument_list|()
return|;
block|}
comment|/// isInteger - Return true if this is an integer, or a vector integer type.
name|bool
name|isInteger
argument_list|()
specifier|const
block|{
return|return
name|isSimple
argument_list|()
operator|?
operator|(
operator|(
name|V
operator|>=
name|FIRST_INTEGER_VALUETYPE
operator|&&
name|V
operator|<=
name|LAST_INTEGER_VALUETYPE
operator|)
operator|||
operator|(
name|V
operator|>=
name|v2i8
operator|&&
name|V
operator|<=
name|v2i64
operator|)
operator|)
operator|:
name|isExtendedInteger
argument_list|()
return|;
block|}
comment|/// isVector - Return true if this is a vector value type.
name|bool
name|isVector
argument_list|()
specifier|const
block|{
return|return
name|isSimple
argument_list|()
operator|?
operator|(
name|V
operator|>=
name|FIRST_VECTOR_VALUETYPE
operator|&&
name|V
operator|<=
name|LAST_VECTOR_VALUETYPE
operator|)
operator|:
name|isExtendedVector
argument_list|()
return|;
block|}
comment|/// is64BitVector - Return true if this is a 64-bit vector type.
name|bool
name|is64BitVector
argument_list|()
specifier|const
block|{
return|return
name|isSimple
argument_list|()
operator|?
operator|(
name|V
operator|==
name|v8i8
operator|||
name|V
operator|==
name|v4i16
operator|||
name|V
operator|==
name|v2i32
operator|||
name|V
operator|==
name|v1i64
operator|||
name|V
operator|==
name|v2f32
operator|)
operator|:
name|isExtended64BitVector
argument_list|()
return|;
block|}
comment|/// is128BitVector - Return true if this is a 128-bit vector type.
name|bool
name|is128BitVector
argument_list|()
specifier|const
block|{
return|return
name|isSimple
argument_list|()
operator|?
operator|(
name|V
operator|==
name|v16i8
operator|||
name|V
operator|==
name|v8i16
operator|||
name|V
operator|==
name|v4i32
operator|||
name|V
operator|==
name|v2i64
operator|||
name|V
operator|==
name|v4f32
operator|||
name|V
operator|==
name|v2f64
operator|)
operator|:
name|isExtended128BitVector
argument_list|()
return|;
block|}
comment|/// isByteSized - Return true if the bit size is a multiple of 8.
name|bool
name|isByteSized
argument_list|()
specifier|const
block|{
return|return
operator|(
name|getSizeInBits
argument_list|()
operator|&
literal|7
operator|)
operator|==
literal|0
return|;
block|}
comment|/// isRound - Return true if the size is a power-of-two number of bytes.
name|bool
name|isRound
argument_list|()
specifier|const
block|{
name|unsigned
name|BitSize
operator|=
name|getSizeInBits
argument_list|()
block|;
return|return
name|BitSize
operator|>=
literal|8
operator|&&
operator|!
operator|(
name|BitSize
operator|&
operator|(
name|BitSize
operator|-
literal|1
operator|)
operator|)
return|;
block|}
comment|/// bitsEq - Return true if this has the same number of bits as VT.
name|bool
name|bitsEq
argument_list|(
name|MVT
name|VT
argument_list|)
decl|const
block|{
return|return
name|getSizeInBits
argument_list|()
operator|==
name|VT
operator|.
name|getSizeInBits
argument_list|()
return|;
block|}
comment|/// bitsGT - Return true if this has more bits than VT.
name|bool
name|bitsGT
argument_list|(
name|MVT
name|VT
argument_list|)
decl|const
block|{
return|return
name|getSizeInBits
argument_list|()
operator|>
name|VT
operator|.
name|getSizeInBits
argument_list|()
return|;
block|}
comment|/// bitsGE - Return true if this has no less bits than VT.
name|bool
name|bitsGE
argument_list|(
name|MVT
name|VT
argument_list|)
decl|const
block|{
return|return
name|getSizeInBits
argument_list|()
operator|>=
name|VT
operator|.
name|getSizeInBits
argument_list|()
return|;
block|}
comment|/// bitsLT - Return true if this has less bits than VT.
name|bool
name|bitsLT
argument_list|(
name|MVT
name|VT
argument_list|)
decl|const
block|{
return|return
name|getSizeInBits
argument_list|()
operator|<
name|VT
operator|.
name|getSizeInBits
argument_list|()
return|;
block|}
comment|/// bitsLE - Return true if this has no more bits than VT.
name|bool
name|bitsLE
argument_list|(
name|MVT
name|VT
argument_list|)
decl|const
block|{
return|return
name|getSizeInBits
argument_list|()
operator|<=
name|VT
operator|.
name|getSizeInBits
argument_list|()
return|;
block|}
comment|/// getSimpleVT - Return the SimpleValueType held in the specified
comment|/// simple MVT.
name|SimpleValueType
name|getSimpleVT
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isSimple
argument_list|()
operator|&&
literal|"Expected a SimpleValueType!"
argument_list|)
block|;
return|return
name|SimpleValueType
argument_list|(
name|V
argument_list|)
return|;
block|}
comment|/// getVectorElementType - Given a vector type, return the type of
comment|/// each element.
name|MVT
name|getVectorElementType
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isVector
argument_list|()
operator|&&
literal|"Invalid vector type!"
argument_list|)
block|;
switch|switch
condition|(
name|V
condition|)
block|{
default|default:
return|return
name|getExtendedVectorElementType
argument_list|()
return|;
case|case
name|v2i8
case|:
case|case
name|v4i8
case|:
case|case
name|v8i8
case|:
case|case
name|v16i8
case|:
return|return
name|i8
return|;
case|case
name|v2i16
case|:
case|case
name|v4i16
case|:
case|case
name|v8i16
case|:
return|return
name|i16
return|;
case|case
name|v2i32
case|:
case|case
name|v3i32
case|:
case|case
name|v4i32
case|:
return|return
name|i32
return|;
case|case
name|v1i64
case|:
case|case
name|v2i64
case|:
return|return
name|i64
return|;
case|case
name|v2f32
case|:
case|case
name|v3f32
case|:
case|case
name|v4f32
case|:
return|return
name|f32
return|;
case|case
name|v2f64
case|:
return|return
name|f64
return|;
block|}
block|}
comment|/// getVectorNumElements - Given a vector type, return the number of
comment|/// elements it contains.
name|unsigned
name|getVectorNumElements
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isVector
argument_list|()
operator|&&
literal|"Invalid vector type!"
argument_list|)
block|;
switch|switch
condition|(
name|V
condition|)
block|{
default|default:
return|return
name|getExtendedVectorNumElements
argument_list|()
return|;
case|case
name|v16i8
case|:
return|return
literal|16
return|;
case|case
name|v8i8
case|:
case|case
name|v8i16
case|:
return|return
literal|8
return|;
case|case
name|v4i8
case|:
case|case
name|v4i16
case|:
case|case
name|v4i32
case|:
case|case
name|v4f32
case|:
return|return
literal|4
return|;
case|case
name|v3i32
case|:
case|case
name|v3f32
case|:
return|return
literal|3
return|;
case|case
name|v2i8
case|:
case|case
name|v2i16
case|:
case|case
name|v2i32
case|:
case|case
name|v2i64
case|:
case|case
name|v2f32
case|:
case|case
name|v2f64
case|:
return|return
literal|2
return|;
case|case
name|v1i64
case|:
return|return
literal|1
return|;
block|}
block|}
comment|/// getSizeInBits - Return the size of the specified value type in bits.
name|unsigned
name|getSizeInBits
argument_list|()
specifier|const
block|{
switch|switch
condition|(
name|V
condition|)
block|{
case|case
name|iPTR
case|:
name|assert
argument_list|(
literal|0
operator|&&
literal|"Value type size is target-dependent. Ask TLI."
argument_list|)
expr_stmt|;
case|case
name|iPTRAny
case|:
case|case
name|iAny
case|:
case|case
name|fAny
case|:
name|assert
argument_list|(
literal|0
operator|&&
literal|"Value type is overloaded."
argument_list|)
expr_stmt|;
default|default:
return|return
name|getExtendedSizeInBits
argument_list|()
return|;
case|case
name|i1
case|:
return|return
literal|1
return|;
case|case
name|i8
case|:
return|return
literal|8
return|;
case|case
name|i16
case|:
case|case
name|v2i8
case|:
return|return
literal|16
return|;
case|case
name|f32
case|:
case|case
name|i32
case|:
case|case
name|v4i8
case|:
case|case
name|v2i16
case|:
return|return
literal|32
return|;
case|case
name|f64
case|:
case|case
name|i64
case|:
case|case
name|v8i8
case|:
case|case
name|v4i16
case|:
case|case
name|v2i32
case|:
case|case
name|v1i64
case|:
case|case
name|v2f32
case|:
return|return
literal|64
return|;
case|case
name|f80
case|:
return|return
literal|80
return|;
case|case
name|v3i32
case|:
case|case
name|v3f32
case|:
return|return
literal|96
return|;
case|case
name|f128
case|:
case|case
name|ppcf128
case|:
case|case
name|i128
case|:
case|case
name|v16i8
case|:
case|case
name|v8i16
case|:
case|case
name|v4i32
case|:
case|case
name|v2i64
case|:
case|case
name|v4f32
case|:
case|case
name|v2f64
case|:
return|return
literal|128
return|;
block|}
block|}
comment|/// getStoreSizeInBits - Return the number of bits overwritten by a store
comment|/// of the specified value type.
name|unsigned
name|getStoreSizeInBits
argument_list|()
specifier|const
block|{
return|return
operator|(
name|getSizeInBits
argument_list|()
operator|+
literal|7
operator|)
operator|/
literal|8
operator|*
literal|8
return|;
block|}
comment|/// getRoundIntegerType - Rounds the bit-width of the given integer MVT up
comment|/// to the nearest power of two (and at least to eight), and returns the
comment|/// integer MVT with that number of bits.
name|MVT
name|getRoundIntegerType
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isInteger
argument_list|()
operator|&&
operator|!
name|isVector
argument_list|()
operator|&&
literal|"Invalid integer type!"
argument_list|)
block|;
name|unsigned
name|BitWidth
operator|=
name|getSizeInBits
argument_list|()
block|;
if|if
condition|(
name|BitWidth
operator|<=
literal|8
condition|)
return|return
name|i8
return|;
else|else
return|return
name|getIntegerVT
argument_list|(
literal|1
operator|<<
name|Log2_32_Ceil
argument_list|(
name|BitWidth
argument_list|)
argument_list|)
return|;
block|}
comment|/// isPow2VectorType - Retuns true if the given vector is a power of 2.
name|bool
name|isPow2VectorType
argument_list|()
specifier|const
block|{
name|unsigned
name|NElts
operator|=
name|getVectorNumElements
argument_list|()
block|;
return|return
operator|!
operator|(
name|NElts
operator|&
operator|(
name|NElts
operator|-
literal|1
operator|)
operator|)
return|;
block|}
comment|/// getPow2VectorType - Widens the length of the given vector MVT up to
comment|/// the nearest power of 2 and returns that type.
name|MVT
name|getPow2VectorType
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|isPow2VectorType
argument_list|()
condition|)
block|{
name|unsigned
name|NElts
init|=
name|getVectorNumElements
argument_list|()
decl_stmt|;
name|unsigned
name|Pow2NElts
init|=
literal|1
operator|<<
name|Log2_32_Ceil
argument_list|(
name|NElts
argument_list|)
decl_stmt|;
return|return
name|MVT
operator|::
name|getVectorVT
argument_list|(
name|getVectorElementType
argument_list|()
argument_list|,
name|Pow2NElts
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|*
name|this
return|;
block|}
block|}
comment|/// getMVTString - This function returns value type as a string,
comment|/// e.g. "i32".
name|std
operator|::
name|string
name|getMVTString
argument_list|()
specifier|const
expr_stmt|;
comment|/// getTypeForMVT - This method returns an LLVM type corresponding to the
comment|/// specified MVT.  For integer types, this returns an unsigned type.  Note
comment|/// that this will abort for types that cannot be represented.
specifier|const
name|Type
operator|*
name|getTypeForMVT
argument_list|()
specifier|const
expr_stmt|;
comment|/// getMVT - Return the value type corresponding to the specified type.
comment|/// This returns all pointers as iPTR.  If HandleUnknown is true, unknown
comment|/// types are returned as Other, otherwise they are invalid.
specifier|static
name|MVT
name|getMVT
parameter_list|(
specifier|const
name|Type
modifier|*
name|Ty
parameter_list|,
name|bool
name|HandleUnknown
init|=
name|false
parameter_list|)
function_decl|;
comment|/// getRawBits - Represent the type as a bunch of bits.
name|uintptr_t
name|getRawBits
argument_list|()
specifier|const
block|{
return|return
name|V
return|;
block|}
comment|/// compareRawBits - A meaningless but well-behaved order, useful for
comment|/// constructing containers.
struct|struct
name|compareRawBits
block|{
name|bool
name|operator
argument_list|()
operator|(
name|MVT
name|L
operator|,
name|MVT
name|R
operator|)
specifier|const
block|{
return|return
name|L
operator|.
name|getRawBits
argument_list|()
operator|<
name|R
operator|.
name|getRawBits
argument_list|()
return|;
block|}
block|}
struct|;
name|private
label|:
comment|// Methods for handling the Extended-type case in functions above.
comment|// These are all out-of-line to prevent users of this header file
comment|// from having a dependency on Type.h.
specifier|static
name|MVT
name|getExtendedIntegerVT
parameter_list|(
name|unsigned
name|BitWidth
parameter_list|)
function_decl|;
specifier|static
name|MVT
name|getExtendedVectorVT
parameter_list|(
name|MVT
name|VT
parameter_list|,
name|unsigned
name|NumElements
parameter_list|)
function_decl|;
name|bool
name|isExtendedFloatingPoint
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isExtendedInteger
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isExtendedVector
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isExtended64BitVector
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isExtended128BitVector
argument_list|()
specifier|const
expr_stmt|;
name|MVT
name|getExtendedVectorElementType
argument_list|()
specifier|const
expr_stmt|;
name|unsigned
name|getExtendedVectorNumElements
argument_list|()
specifier|const
expr_stmt|;
name|unsigned
name|getExtendedSizeInBits
argument_list|()
specifier|const
expr_stmt|;
block|}
struct|;
block|}
end_decl_stmt

begin_comment
comment|// End llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

