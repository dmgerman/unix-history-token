begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- llvm/CodeGen/SelectionDAG.h - InstSelection DAG ---------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares the SelectionDAG class, and transitively defines the
end_comment

begin_comment
comment|// SDNode class and subclasses.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CODEGEN_SELECTIONDAG_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CODEGEN_SELECTIONDAG_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/ilist.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/SelectionDAGNodes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/RecyclingAllocator.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetMachine.h"
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|AliasAnalysis
decl_stmt|;
name|class
name|DwarfWriter
decl_stmt|;
name|class
name|FunctionLoweringInfo
decl_stmt|;
name|class
name|MachineConstantPoolValue
decl_stmt|;
name|class
name|MachineFunction
decl_stmt|;
name|class
name|MachineModuleInfo
decl_stmt|;
name|class
name|SDNodeOrdering
decl_stmt|;
name|class
name|TargetLowering
decl_stmt|;
name|template
operator|<
operator|>
expr|struct
name|ilist_traits
operator|<
name|SDNode
operator|>
operator|:
name|public
name|ilist_default_traits
operator|<
name|SDNode
operator|>
block|{
name|private
operator|:
name|mutable
name|ilist_half_node
operator|<
name|SDNode
operator|>
name|Sentinel
block|;
name|public
operator|:
name|SDNode
operator|*
name|createSentinel
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|SDNode
operator|*
operator|>
operator|(
operator|&
name|Sentinel
operator|)
return|;
block|}
specifier|static
name|void
name|destroySentinel
argument_list|(
argument|SDNode *
argument_list|)
block|{}
name|SDNode
operator|*
name|provideInitialHead
argument_list|()
specifier|const
block|{
return|return
name|createSentinel
argument_list|()
return|;
block|}
name|SDNode
operator|*
name|ensureHead
argument_list|(
argument|SDNode*
argument_list|)
specifier|const
block|{
return|return
name|createSentinel
argument_list|()
return|;
block|}
specifier|static
name|void
name|noteHead
argument_list|(
argument|SDNode*
argument_list|,
argument|SDNode*
argument_list|)
block|{}
specifier|static
name|void
name|deleteNode
argument_list|(
argument|SDNode *
argument_list|)
block|{
name|assert
argument_list|(
literal|0
operator|&&
literal|"ilist_traits<SDNode> shouldn't see a deleteNode call!"
argument_list|)
block|;   }
name|private
operator|:
specifier|static
name|void
name|createNode
argument_list|(
specifier|const
name|SDNode
operator|&
argument_list|)
block|; }
expr_stmt|;
enum|enum
name|CombineLevel
block|{
name|Unrestricted
block|,
comment|// Combine may create illegal operations and illegal types.
name|NoIllegalTypes
block|,
comment|// Combine may create illegal operations but no illegal types.
name|NoIllegalOperations
comment|// Combine may only create legal operations and types.
block|}
enum|;
name|class
name|SelectionDAG
decl_stmt|;
name|void
name|checkForCycles
parameter_list|(
specifier|const
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|void
name|checkForCycles
parameter_list|(
specifier|const
name|SelectionDAG
modifier|*
name|DAG
parameter_list|)
function_decl|;
comment|/// SelectionDAG class - This is used to represent a portion of an LLVM function
comment|/// in a low-level Data Dependence DAG representation suitable for instruction
comment|/// selection.  This DAG is constructed as the first step of instruction
comment|/// selection in order to allow implementation of machine specific optimizations
comment|/// and code simplifications.
comment|///
comment|/// The representation used by the SelectionDAG is a target-independent
comment|/// representation, which has some similarities to the GCC RTL representation,
comment|/// but is significantly more simple, powerful, and is a graph form instead of a
comment|/// linear form.
comment|///
name|class
name|SelectionDAG
block|{
name|TargetLowering
modifier|&
name|TLI
decl_stmt|;
name|MachineFunction
modifier|*
name|MF
decl_stmt|;
name|FunctionLoweringInfo
modifier|&
name|FLI
decl_stmt|;
name|MachineModuleInfo
modifier|*
name|MMI
decl_stmt|;
name|DwarfWriter
modifier|*
name|DW
decl_stmt|;
name|LLVMContext
modifier|*
name|Context
decl_stmt|;
comment|/// EntryNode - The starting token.
name|SDNode
name|EntryNode
decl_stmt|;
comment|/// Root - The root of the entire DAG.
name|SDValue
name|Root
decl_stmt|;
comment|/// AllNodes - A linked list of nodes in the current DAG.
name|ilist
operator|<
name|SDNode
operator|>
name|AllNodes
expr_stmt|;
comment|/// NodeAllocatorType - The AllocatorType for allocating SDNodes. We use
comment|/// pool allocation with recycling.
typedef|typedef
name|RecyclingAllocator
operator|<
name|BumpPtrAllocator
operator|,
name|SDNode
operator|,
sizeof|sizeof
argument_list|(
name|LargestSDNode
argument_list|)
operator|,
name|AlignOf
operator|<
name|MostAlignedSDNode
operator|>
operator|::
name|Alignment
operator|>
name|NodeAllocatorType
expr_stmt|;
comment|/// NodeAllocator - Pool allocation for nodes.
name|NodeAllocatorType
name|NodeAllocator
decl_stmt|;
comment|/// CSEMap - This structure is used to memoize nodes, automatically performing
comment|/// CSE with existing nodes when a duplicate is requested.
name|FoldingSet
operator|<
name|SDNode
operator|>
name|CSEMap
expr_stmt|;
comment|/// OperandAllocator - Pool allocation for machine-opcode SDNode operands.
name|BumpPtrAllocator
name|OperandAllocator
decl_stmt|;
comment|/// Allocator - Pool allocation for misc. objects that are created once per
comment|/// SelectionDAG.
name|BumpPtrAllocator
name|Allocator
decl_stmt|;
comment|/// SDNodeOrdering - The ordering of the SDNodes. It roughly corresponds to
comment|/// the ordering of the original LLVM instructions.
name|SDNodeOrdering
modifier|*
name|Ordering
decl_stmt|;
comment|/// VerifyNode - Sanity check the given node.  Aborts if it is invalid.
name|void
name|VerifyNode
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
comment|/// setGraphColorHelper - Implementation of setSubgraphColor.
comment|/// Return whether we had to truncate the search.
comment|///
name|bool
name|setSubgraphColorHelper
argument_list|(
name|SDNode
operator|*
name|N
argument_list|,
specifier|const
name|char
operator|*
name|Color
argument_list|,
name|DenseSet
operator|<
name|SDNode
operator|*
operator|>
operator|&
name|visited
argument_list|,
name|int
name|level
argument_list|,
name|bool
operator|&
name|printed
argument_list|)
decl_stmt|;
name|void
name|operator
init|=
operator|(
specifier|const
name|SelectionDAG
operator|&
operator|)
decl_stmt|;
comment|// Do not implement.
name|SelectionDAG
argument_list|(
specifier|const
name|SelectionDAG
operator|&
argument_list|)
expr_stmt|;
comment|// Do not implement.
name|public
label|:
name|SelectionDAG
argument_list|(
name|TargetLowering
operator|&
name|tli
argument_list|,
name|FunctionLoweringInfo
operator|&
name|fli
argument_list|)
expr_stmt|;
operator|~
name|SelectionDAG
argument_list|()
expr_stmt|;
comment|/// init - Prepare this SelectionDAG to process code in the given
comment|/// MachineFunction.
comment|///
name|void
name|init
parameter_list|(
name|MachineFunction
modifier|&
name|mf
parameter_list|,
name|MachineModuleInfo
modifier|*
name|mmi
parameter_list|,
name|DwarfWriter
modifier|*
name|dw
parameter_list|)
function_decl|;
comment|/// clear - Clear state and free memory necessary to make this
comment|/// SelectionDAG ready to process a new block.
comment|///
name|void
name|clear
parameter_list|()
function_decl|;
name|MachineFunction
operator|&
name|getMachineFunction
argument_list|()
specifier|const
block|{
return|return
operator|*
name|MF
return|;
block|}
specifier|const
name|TargetMachine
operator|&
name|getTarget
argument_list|()
specifier|const
expr_stmt|;
name|TargetLowering
operator|&
name|getTargetLoweringInfo
argument_list|()
specifier|const
block|{
return|return
name|TLI
return|;
block|}
name|FunctionLoweringInfo
operator|&
name|getFunctionLoweringInfo
argument_list|()
specifier|const
block|{
return|return
name|FLI
return|;
block|}
name|MachineModuleInfo
operator|*
name|getMachineModuleInfo
argument_list|()
specifier|const
block|{
return|return
name|MMI
return|;
block|}
name|DwarfWriter
operator|*
name|getDwarfWriter
argument_list|()
specifier|const
block|{
return|return
name|DW
return|;
block|}
name|LLVMContext
operator|*
name|getContext
argument_list|()
specifier|const
block|{
return|return
name|Context
return|;
block|}
comment|/// viewGraph - Pop up a GraphViz/gv window with the DAG rendered using 'dot'.
comment|///
name|void
name|viewGraph
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Title
argument_list|)
decl_stmt|;
name|void
name|viewGraph
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|NDEBUG
name|std
operator|::
name|map
operator|<
specifier|const
name|SDNode
operator|*
operator|,
name|std
operator|::
name|string
operator|>
name|NodeGraphAttrs
expr_stmt|;
endif|#
directive|endif
comment|/// clearGraphAttrs - Clear all previously defined node graph attributes.
comment|/// Intended to be used from a debugging tool (eg. gdb).
name|void
name|clearGraphAttrs
parameter_list|()
function_decl|;
comment|/// setGraphAttrs - Set graph attributes for a node. (eg. "color=red".)
comment|///
name|void
name|setGraphAttrs
parameter_list|(
specifier|const
name|SDNode
modifier|*
name|N
parameter_list|,
specifier|const
name|char
modifier|*
name|Attrs
parameter_list|)
function_decl|;
comment|/// getGraphAttrs - Get graph attributes for a node. (eg. "color=red".)
comment|/// Used from getNodeAttributes.
specifier|const
name|std
operator|::
name|string
name|getGraphAttrs
argument_list|(
argument|const SDNode *N
argument_list|)
specifier|const
expr_stmt|;
comment|/// setGraphColor - Convenience for setting node color attribute.
comment|///
name|void
name|setGraphColor
parameter_list|(
specifier|const
name|SDNode
modifier|*
name|N
parameter_list|,
specifier|const
name|char
modifier|*
name|Color
parameter_list|)
function_decl|;
comment|/// setGraphColor - Convenience for setting subgraph color attribute.
comment|///
name|void
name|setSubgraphColor
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
specifier|const
name|char
modifier|*
name|Color
parameter_list|)
function_decl|;
typedef|typedef
name|ilist
operator|<
name|SDNode
operator|>
operator|::
name|const_iterator
name|allnodes_const_iterator
expr_stmt|;
name|allnodes_const_iterator
name|allnodes_begin
argument_list|()
specifier|const
block|{
return|return
name|AllNodes
operator|.
name|begin
argument_list|()
return|;
block|}
name|allnodes_const_iterator
name|allnodes_end
argument_list|()
specifier|const
block|{
return|return
name|AllNodes
operator|.
name|end
argument_list|()
return|;
block|}
typedef|typedef
name|ilist
operator|<
name|SDNode
operator|>
operator|::
name|iterator
name|allnodes_iterator
expr_stmt|;
name|allnodes_iterator
name|allnodes_begin
parameter_list|()
block|{
return|return
name|AllNodes
operator|.
name|begin
argument_list|()
return|;
block|}
name|allnodes_iterator
name|allnodes_end
parameter_list|()
block|{
return|return
name|AllNodes
operator|.
name|end
argument_list|()
return|;
block|}
name|ilist
operator|<
name|SDNode
operator|>
operator|::
name|size_type
name|allnodes_size
argument_list|()
specifier|const
block|{
return|return
name|AllNodes
operator|.
name|size
argument_list|()
return|;
block|}
comment|/// getRoot - Return the root tag of the SelectionDAG.
comment|///
specifier|const
name|SDValue
operator|&
name|getRoot
argument_list|()
specifier|const
block|{
return|return
name|Root
return|;
block|}
comment|/// getEntryNode - Return the token chain corresponding to the entry of the
comment|/// function.
name|SDValue
name|getEntryNode
argument_list|()
specifier|const
block|{
return|return
name|SDValue
argument_list|(
name|const_cast
operator|<
name|SDNode
operator|*
operator|>
operator|(
operator|&
name|EntryNode
operator|)
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|/// setRoot - Set the current root tag of the SelectionDAG.
comment|///
specifier|const
name|SDValue
modifier|&
name|setRoot
parameter_list|(
name|SDValue
name|N
parameter_list|)
block|{
name|assert
argument_list|(
operator|(
operator|!
name|N
operator|.
name|getNode
argument_list|()
operator|||
name|N
operator|.
name|getValueType
argument_list|()
operator|==
name|MVT
operator|::
name|Other
operator|)
operator|&&
literal|"DAG root value is not a chain!"
argument_list|)
expr_stmt|;
if|if
condition|(
name|N
operator|.
name|getNode
argument_list|()
condition|)
name|checkForCycles
argument_list|(
name|N
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
name|Root
operator|=
name|N
expr_stmt|;
if|if
condition|(
name|N
operator|.
name|getNode
argument_list|()
condition|)
name|checkForCycles
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|Root
return|;
block|}
comment|/// Combine - This iterates over the nodes in the SelectionDAG, folding
comment|/// certain types of nodes together, or eliminating superfluous nodes.  The
comment|/// Level argument controls whether Combine is allowed to produce nodes and
comment|/// types that are illegal on the target.
name|void
name|Combine
argument_list|(
name|CombineLevel
name|Level
argument_list|,
name|AliasAnalysis
operator|&
name|AA
argument_list|,
name|CodeGenOpt
operator|::
name|Level
name|OptLevel
argument_list|)
decl_stmt|;
comment|/// LegalizeTypes - This transforms the SelectionDAG into a SelectionDAG that
comment|/// only uses types natively supported by the target.  Returns "true" if it
comment|/// made any changes.
comment|///
comment|/// Note that this is an involved process that may invalidate pointers into
comment|/// the graph.
name|bool
name|LegalizeTypes
parameter_list|()
function_decl|;
comment|/// Legalize - This transforms the SelectionDAG into a SelectionDAG that is
comment|/// compatible with the target instruction selector, as indicated by the
comment|/// TargetLowering object.
comment|///
comment|/// Note that this is an involved process that may invalidate pointers into
comment|/// the graph.
name|void
name|Legalize
argument_list|(
name|CodeGenOpt
operator|::
name|Level
name|OptLevel
argument_list|)
decl_stmt|;
comment|/// LegalizeVectors - This transforms the SelectionDAG into a SelectionDAG
comment|/// that only uses vector math operations supported by the target.  This is
comment|/// necessary as a separate step from Legalize because unrolling a vector
comment|/// operation can introduce illegal types, which requires running
comment|/// LegalizeTypes again.
comment|///
comment|/// This returns true if it made any changes; in that case, LegalizeTypes
comment|/// is called again before Legalize.
comment|///
comment|/// Note that this is an involved process that may invalidate pointers into
comment|/// the graph.
name|bool
name|LegalizeVectors
parameter_list|()
function_decl|;
comment|/// RemoveDeadNodes - This method deletes all unreachable nodes in the
comment|/// SelectionDAG.
name|void
name|RemoveDeadNodes
parameter_list|()
function_decl|;
comment|/// DeleteNode - Remove the specified node from the system.  This node must
comment|/// have no referrers.
name|void
name|DeleteNode
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
comment|/// getVTList - Return an SDVTList that represents the list of values
comment|/// specified.
name|SDVTList
name|getVTList
parameter_list|(
name|EVT
name|VT
parameter_list|)
function_decl|;
name|SDVTList
name|getVTList
parameter_list|(
name|EVT
name|VT1
parameter_list|,
name|EVT
name|VT2
parameter_list|)
function_decl|;
name|SDVTList
name|getVTList
parameter_list|(
name|EVT
name|VT1
parameter_list|,
name|EVT
name|VT2
parameter_list|,
name|EVT
name|VT3
parameter_list|)
function_decl|;
name|SDVTList
name|getVTList
parameter_list|(
name|EVT
name|VT1
parameter_list|,
name|EVT
name|VT2
parameter_list|,
name|EVT
name|VT3
parameter_list|,
name|EVT
name|VT4
parameter_list|)
function_decl|;
name|SDVTList
name|getVTList
parameter_list|(
specifier|const
name|EVT
modifier|*
name|VTs
parameter_list|,
name|unsigned
name|NumVTs
parameter_list|)
function_decl|;
comment|//===--------------------------------------------------------------------===//
comment|// Node creation methods.
comment|//
name|SDValue
name|getConstant
parameter_list|(
name|uint64_t
name|Val
parameter_list|,
name|EVT
name|VT
parameter_list|,
name|bool
name|isTarget
init|=
name|false
parameter_list|)
function_decl|;
name|SDValue
name|getConstant
parameter_list|(
specifier|const
name|APInt
modifier|&
name|Val
parameter_list|,
name|EVT
name|VT
parameter_list|,
name|bool
name|isTarget
init|=
name|false
parameter_list|)
function_decl|;
name|SDValue
name|getConstant
parameter_list|(
specifier|const
name|ConstantInt
modifier|&
name|Val
parameter_list|,
name|EVT
name|VT
parameter_list|,
name|bool
name|isTarget
init|=
name|false
parameter_list|)
function_decl|;
name|SDValue
name|getIntPtrConstant
parameter_list|(
name|uint64_t
name|Val
parameter_list|,
name|bool
name|isTarget
init|=
name|false
parameter_list|)
function_decl|;
name|SDValue
name|getTargetConstant
parameter_list|(
name|uint64_t
name|Val
parameter_list|,
name|EVT
name|VT
parameter_list|)
block|{
return|return
name|getConstant
argument_list|(
name|Val
argument_list|,
name|VT
argument_list|,
name|true
argument_list|)
return|;
block|}
name|SDValue
name|getTargetConstant
parameter_list|(
specifier|const
name|APInt
modifier|&
name|Val
parameter_list|,
name|EVT
name|VT
parameter_list|)
block|{
return|return
name|getConstant
argument_list|(
name|Val
argument_list|,
name|VT
argument_list|,
name|true
argument_list|)
return|;
block|}
name|SDValue
name|getTargetConstant
parameter_list|(
specifier|const
name|ConstantInt
modifier|&
name|Val
parameter_list|,
name|EVT
name|VT
parameter_list|)
block|{
return|return
name|getConstant
argument_list|(
name|Val
argument_list|,
name|VT
argument_list|,
name|true
argument_list|)
return|;
block|}
name|SDValue
name|getConstantFP
parameter_list|(
name|double
name|Val
parameter_list|,
name|EVT
name|VT
parameter_list|,
name|bool
name|isTarget
init|=
name|false
parameter_list|)
function_decl|;
name|SDValue
name|getConstantFP
parameter_list|(
specifier|const
name|APFloat
modifier|&
name|Val
parameter_list|,
name|EVT
name|VT
parameter_list|,
name|bool
name|isTarget
init|=
name|false
parameter_list|)
function_decl|;
name|SDValue
name|getConstantFP
parameter_list|(
specifier|const
name|ConstantFP
modifier|&
name|CF
parameter_list|,
name|EVT
name|VT
parameter_list|,
name|bool
name|isTarget
init|=
name|false
parameter_list|)
function_decl|;
name|SDValue
name|getTargetConstantFP
parameter_list|(
name|double
name|Val
parameter_list|,
name|EVT
name|VT
parameter_list|)
block|{
return|return
name|getConstantFP
argument_list|(
name|Val
argument_list|,
name|VT
argument_list|,
name|true
argument_list|)
return|;
block|}
name|SDValue
name|getTargetConstantFP
parameter_list|(
specifier|const
name|APFloat
modifier|&
name|Val
parameter_list|,
name|EVT
name|VT
parameter_list|)
block|{
return|return
name|getConstantFP
argument_list|(
name|Val
argument_list|,
name|VT
argument_list|,
name|true
argument_list|)
return|;
block|}
name|SDValue
name|getTargetConstantFP
parameter_list|(
specifier|const
name|ConstantFP
modifier|&
name|Val
parameter_list|,
name|EVT
name|VT
parameter_list|)
block|{
return|return
name|getConstantFP
argument_list|(
name|Val
argument_list|,
name|VT
argument_list|,
name|true
argument_list|)
return|;
block|}
name|SDValue
name|getGlobalAddress
parameter_list|(
specifier|const
name|GlobalValue
modifier|*
name|GV
parameter_list|,
name|EVT
name|VT
parameter_list|,
name|int64_t
name|offset
init|=
literal|0
parameter_list|,
name|bool
name|isTargetGA
init|=
name|false
parameter_list|,
name|unsigned
name|char
name|TargetFlags
init|=
literal|0
parameter_list|)
function_decl|;
name|SDValue
name|getTargetGlobalAddress
parameter_list|(
specifier|const
name|GlobalValue
modifier|*
name|GV
parameter_list|,
name|EVT
name|VT
parameter_list|,
name|int64_t
name|offset
init|=
literal|0
parameter_list|,
name|unsigned
name|char
name|TargetFlags
init|=
literal|0
parameter_list|)
block|{
return|return
name|getGlobalAddress
argument_list|(
name|GV
argument_list|,
name|VT
argument_list|,
name|offset
argument_list|,
name|true
argument_list|,
name|TargetFlags
argument_list|)
return|;
block|}
name|SDValue
name|getFrameIndex
parameter_list|(
name|int
name|FI
parameter_list|,
name|EVT
name|VT
parameter_list|,
name|bool
name|isTarget
init|=
name|false
parameter_list|)
function_decl|;
name|SDValue
name|getTargetFrameIndex
parameter_list|(
name|int
name|FI
parameter_list|,
name|EVT
name|VT
parameter_list|)
block|{
return|return
name|getFrameIndex
argument_list|(
name|FI
argument_list|,
name|VT
argument_list|,
name|true
argument_list|)
return|;
block|}
name|SDValue
name|getJumpTable
parameter_list|(
name|int
name|JTI
parameter_list|,
name|EVT
name|VT
parameter_list|,
name|bool
name|isTarget
init|=
name|false
parameter_list|,
name|unsigned
name|char
name|TargetFlags
init|=
literal|0
parameter_list|)
function_decl|;
name|SDValue
name|getTargetJumpTable
parameter_list|(
name|int
name|JTI
parameter_list|,
name|EVT
name|VT
parameter_list|,
name|unsigned
name|char
name|TargetFlags
init|=
literal|0
parameter_list|)
block|{
return|return
name|getJumpTable
argument_list|(
name|JTI
argument_list|,
name|VT
argument_list|,
name|true
argument_list|,
name|TargetFlags
argument_list|)
return|;
block|}
name|SDValue
name|getConstantPool
parameter_list|(
name|Constant
modifier|*
name|C
parameter_list|,
name|EVT
name|VT
parameter_list|,
name|unsigned
name|Align
init|=
literal|0
parameter_list|,
name|int
name|Offs
init|=
literal|0
parameter_list|,
name|bool
name|isT
init|=
name|false
parameter_list|,
name|unsigned
name|char
name|TargetFlags
init|=
literal|0
parameter_list|)
function_decl|;
name|SDValue
name|getTargetConstantPool
parameter_list|(
name|Constant
modifier|*
name|C
parameter_list|,
name|EVT
name|VT
parameter_list|,
name|unsigned
name|Align
init|=
literal|0
parameter_list|,
name|int
name|Offset
init|=
literal|0
parameter_list|,
name|unsigned
name|char
name|TargetFlags
init|=
literal|0
parameter_list|)
block|{
return|return
name|getConstantPool
argument_list|(
name|C
argument_list|,
name|VT
argument_list|,
name|Align
argument_list|,
name|Offset
argument_list|,
name|true
argument_list|,
name|TargetFlags
argument_list|)
return|;
block|}
name|SDValue
name|getConstantPool
parameter_list|(
name|MachineConstantPoolValue
modifier|*
name|C
parameter_list|,
name|EVT
name|VT
parameter_list|,
name|unsigned
name|Align
init|=
literal|0
parameter_list|,
name|int
name|Offs
init|=
literal|0
parameter_list|,
name|bool
name|isT
init|=
name|false
parameter_list|,
name|unsigned
name|char
name|TargetFlags
init|=
literal|0
parameter_list|)
function_decl|;
name|SDValue
name|getTargetConstantPool
parameter_list|(
name|MachineConstantPoolValue
modifier|*
name|C
parameter_list|,
name|EVT
name|VT
parameter_list|,
name|unsigned
name|Align
init|=
literal|0
parameter_list|,
name|int
name|Offset
init|=
literal|0
parameter_list|,
name|unsigned
name|char
name|TargetFlags
init|=
literal|0
parameter_list|)
block|{
return|return
name|getConstantPool
argument_list|(
name|C
argument_list|,
name|VT
argument_list|,
name|Align
argument_list|,
name|Offset
argument_list|,
name|true
argument_list|,
name|TargetFlags
argument_list|)
return|;
block|}
comment|// When generating a branch to a BB, we don't in general know enough
comment|// to provide debug info for the BB at that time, so keep this one around.
name|SDValue
name|getBasicBlock
parameter_list|(
name|MachineBasicBlock
modifier|*
name|MBB
parameter_list|)
function_decl|;
name|SDValue
name|getBasicBlock
parameter_list|(
name|MachineBasicBlock
modifier|*
name|MBB
parameter_list|,
name|DebugLoc
name|dl
parameter_list|)
function_decl|;
name|SDValue
name|getExternalSymbol
parameter_list|(
specifier|const
name|char
modifier|*
name|Sym
parameter_list|,
name|EVT
name|VT
parameter_list|)
function_decl|;
name|SDValue
name|getExternalSymbol
parameter_list|(
specifier|const
name|char
modifier|*
name|Sym
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|EVT
name|VT
parameter_list|)
function_decl|;
name|SDValue
name|getTargetExternalSymbol
parameter_list|(
specifier|const
name|char
modifier|*
name|Sym
parameter_list|,
name|EVT
name|VT
parameter_list|,
name|unsigned
name|char
name|TargetFlags
init|=
literal|0
parameter_list|)
function_decl|;
name|SDValue
name|getValueType
parameter_list|(
name|EVT
parameter_list|)
function_decl|;
name|SDValue
name|getRegister
parameter_list|(
name|unsigned
name|Reg
parameter_list|,
name|EVT
name|VT
parameter_list|)
function_decl|;
name|SDValue
name|getLabel
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|SDValue
name|Root
parameter_list|,
name|unsigned
name|LabelID
parameter_list|)
function_decl|;
name|SDValue
name|getBlockAddress
parameter_list|(
name|BlockAddress
modifier|*
name|BA
parameter_list|,
name|EVT
name|VT
parameter_list|,
name|bool
name|isTarget
init|=
name|false
parameter_list|,
name|unsigned
name|char
name|TargetFlags
init|=
literal|0
parameter_list|)
function_decl|;
name|SDValue
name|getCopyToReg
parameter_list|(
name|SDValue
name|Chain
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|unsigned
name|Reg
parameter_list|,
name|SDValue
name|N
parameter_list|)
block|{
return|return
name|getNode
argument_list|(
name|ISD
operator|::
name|CopyToReg
argument_list|,
name|dl
argument_list|,
name|MVT
operator|::
name|Other
argument_list|,
name|Chain
argument_list|,
name|getRegister
argument_list|(
name|Reg
argument_list|,
name|N
operator|.
name|getValueType
argument_list|()
argument_list|)
argument_list|,
name|N
argument_list|)
return|;
block|}
comment|// This version of the getCopyToReg method takes an extra operand, which
comment|// indicates that there is potentially an incoming flag value (if Flag is not
comment|// null) and that there should be a flag result.
name|SDValue
name|getCopyToReg
parameter_list|(
name|SDValue
name|Chain
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|unsigned
name|Reg
parameter_list|,
name|SDValue
name|N
parameter_list|,
name|SDValue
name|Flag
parameter_list|)
block|{
name|SDVTList
name|VTs
init|=
name|getVTList
argument_list|(
name|MVT
operator|::
name|Other
argument_list|,
name|MVT
operator|::
name|Flag
argument_list|)
decl_stmt|;
name|SDValue
name|Ops
index|[]
init|=
block|{
name|Chain
block|,
name|getRegister
argument_list|(
name|Reg
argument_list|,
name|N
operator|.
name|getValueType
argument_list|()
argument_list|)
block|,
name|N
block|,
name|Flag
block|}
decl_stmt|;
return|return
name|getNode
argument_list|(
name|ISD
operator|::
name|CopyToReg
argument_list|,
name|dl
argument_list|,
name|VTs
argument_list|,
name|Ops
argument_list|,
name|Flag
operator|.
name|getNode
argument_list|()
condition|?
literal|4
else|:
literal|3
argument_list|)
return|;
block|}
comment|// Similar to last getCopyToReg() except parameter Reg is a SDValue
name|SDValue
name|getCopyToReg
parameter_list|(
name|SDValue
name|Chain
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|SDValue
name|Reg
parameter_list|,
name|SDValue
name|N
parameter_list|,
name|SDValue
name|Flag
parameter_list|)
block|{
name|SDVTList
name|VTs
init|=
name|getVTList
argument_list|(
name|MVT
operator|::
name|Other
argument_list|,
name|MVT
operator|::
name|Flag
argument_list|)
decl_stmt|;
name|SDValue
name|Ops
index|[]
init|=
block|{
name|Chain
block|,
name|Reg
block|,
name|N
block|,
name|Flag
block|}
decl_stmt|;
return|return
name|getNode
argument_list|(
name|ISD
operator|::
name|CopyToReg
argument_list|,
name|dl
argument_list|,
name|VTs
argument_list|,
name|Ops
argument_list|,
name|Flag
operator|.
name|getNode
argument_list|()
condition|?
literal|4
else|:
literal|3
argument_list|)
return|;
block|}
name|SDValue
name|getCopyFromReg
parameter_list|(
name|SDValue
name|Chain
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|unsigned
name|Reg
parameter_list|,
name|EVT
name|VT
parameter_list|)
block|{
name|SDVTList
name|VTs
init|=
name|getVTList
argument_list|(
name|VT
argument_list|,
name|MVT
operator|::
name|Other
argument_list|)
decl_stmt|;
name|SDValue
name|Ops
index|[]
init|=
block|{
name|Chain
block|,
name|getRegister
argument_list|(
argument|Reg
argument_list|,
argument|VT
argument_list|)
block|}
decl_stmt|;
return|return
name|getNode
argument_list|(
name|ISD
operator|::
name|CopyFromReg
argument_list|,
name|dl
argument_list|,
name|VTs
argument_list|,
name|Ops
argument_list|,
literal|2
argument_list|)
return|;
block|}
comment|// This version of the getCopyFromReg method takes an extra operand, which
comment|// indicates that there is potentially an incoming flag value (if Flag is not
comment|// null) and that there should be a flag result.
name|SDValue
name|getCopyFromReg
parameter_list|(
name|SDValue
name|Chain
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|unsigned
name|Reg
parameter_list|,
name|EVT
name|VT
parameter_list|,
name|SDValue
name|Flag
parameter_list|)
block|{
name|SDVTList
name|VTs
init|=
name|getVTList
argument_list|(
name|VT
argument_list|,
name|MVT
operator|::
name|Other
argument_list|,
name|MVT
operator|::
name|Flag
argument_list|)
decl_stmt|;
name|SDValue
name|Ops
index|[]
init|=
block|{
name|Chain
block|,
name|getRegister
argument_list|(
name|Reg
argument_list|,
name|VT
argument_list|)
block|,
name|Flag
block|}
decl_stmt|;
return|return
name|getNode
argument_list|(
name|ISD
operator|::
name|CopyFromReg
argument_list|,
name|dl
argument_list|,
name|VTs
argument_list|,
name|Ops
argument_list|,
name|Flag
operator|.
name|getNode
argument_list|()
condition|?
literal|3
else|:
literal|2
argument_list|)
return|;
block|}
name|SDValue
name|getCondCode
argument_list|(
name|ISD
operator|::
name|CondCode
name|Cond
argument_list|)
decl_stmt|;
comment|/// Returns the ConvertRndSat Note: Avoid using this node because it may
comment|/// disappear in the future and most targets don't support it.
name|SDValue
name|getConvertRndSat
argument_list|(
name|EVT
name|VT
argument_list|,
name|DebugLoc
name|dl
argument_list|,
name|SDValue
name|Val
argument_list|,
name|SDValue
name|DTy
argument_list|,
name|SDValue
name|STy
argument_list|,
name|SDValue
name|Rnd
argument_list|,
name|SDValue
name|Sat
argument_list|,
name|ISD
operator|::
name|CvtCode
name|Code
argument_list|)
decl_stmt|;
comment|/// getVectorShuffle - Return an ISD::VECTOR_SHUFFLE node.  The number of
comment|/// elements in VT, which must be a vector type, must match the number of
comment|/// mask elements NumElts.  A integer mask element equal to -1 is treated as
comment|/// undefined.
name|SDValue
name|getVectorShuffle
parameter_list|(
name|EVT
name|VT
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|SDValue
name|N1
parameter_list|,
name|SDValue
name|N2
parameter_list|,
specifier|const
name|int
modifier|*
name|MaskElts
parameter_list|)
function_decl|;
comment|/// getSExtOrTrunc - Convert Op, which must be of integer type, to the
comment|/// integer type VT, by either sign-extending or truncating it.
name|SDValue
name|getSExtOrTrunc
parameter_list|(
name|SDValue
name|Op
parameter_list|,
name|DebugLoc
name|DL
parameter_list|,
name|EVT
name|VT
parameter_list|)
function_decl|;
comment|/// getZExtOrTrunc - Convert Op, which must be of integer type, to the
comment|/// integer type VT, by either zero-extending or truncating it.
name|SDValue
name|getZExtOrTrunc
parameter_list|(
name|SDValue
name|Op
parameter_list|,
name|DebugLoc
name|DL
parameter_list|,
name|EVT
name|VT
parameter_list|)
function_decl|;
comment|/// getZeroExtendInReg - Return the expression required to zero extend the Op
comment|/// value assuming it was the smaller SrcTy value.
name|SDValue
name|getZeroExtendInReg
parameter_list|(
name|SDValue
name|Op
parameter_list|,
name|DebugLoc
name|DL
parameter_list|,
name|EVT
name|SrcTy
parameter_list|)
function_decl|;
comment|/// getNOT - Create a bitwise NOT operation as (XOR Val, -1).
name|SDValue
name|getNOT
parameter_list|(
name|DebugLoc
name|DL
parameter_list|,
name|SDValue
name|Val
parameter_list|,
name|EVT
name|VT
parameter_list|)
function_decl|;
comment|/// getCALLSEQ_START - Return a new CALLSEQ_START node, which always must have
comment|/// a flag result (to ensure it's not CSE'd).  CALLSEQ_START does not have a
comment|/// useful DebugLoc.
name|SDValue
name|getCALLSEQ_START
parameter_list|(
name|SDValue
name|Chain
parameter_list|,
name|SDValue
name|Op
parameter_list|)
block|{
name|SDVTList
name|VTs
init|=
name|getVTList
argument_list|(
name|MVT
operator|::
name|Other
argument_list|,
name|MVT
operator|::
name|Flag
argument_list|)
decl_stmt|;
name|SDValue
name|Ops
index|[]
init|=
block|{
name|Chain
block|,
name|Op
block|}
decl_stmt|;
return|return
name|getNode
argument_list|(
name|ISD
operator|::
name|CALLSEQ_START
argument_list|,
name|DebugLoc
operator|::
name|getUnknownLoc
argument_list|()
argument_list|,
name|VTs
argument_list|,
name|Ops
argument_list|,
literal|2
argument_list|)
return|;
block|}
comment|/// getCALLSEQ_END - Return a new CALLSEQ_END node, which always must have a
comment|/// flag result (to ensure it's not CSE'd).  CALLSEQ_END does not have
comment|/// a useful DebugLoc.
name|SDValue
name|getCALLSEQ_END
parameter_list|(
name|SDValue
name|Chain
parameter_list|,
name|SDValue
name|Op1
parameter_list|,
name|SDValue
name|Op2
parameter_list|,
name|SDValue
name|InFlag
parameter_list|)
block|{
name|SDVTList
name|NodeTys
init|=
name|getVTList
argument_list|(
name|MVT
operator|::
name|Other
argument_list|,
name|MVT
operator|::
name|Flag
argument_list|)
decl_stmt|;
name|SmallVector
operator|<
name|SDValue
operator|,
literal|4
operator|>
name|Ops
expr_stmt|;
name|Ops
operator|.
name|push_back
argument_list|(
name|Chain
argument_list|)
expr_stmt|;
name|Ops
operator|.
name|push_back
argument_list|(
name|Op1
argument_list|)
expr_stmt|;
name|Ops
operator|.
name|push_back
argument_list|(
name|Op2
argument_list|)
expr_stmt|;
name|Ops
operator|.
name|push_back
argument_list|(
name|InFlag
argument_list|)
expr_stmt|;
return|return
name|getNode
argument_list|(
name|ISD
operator|::
name|CALLSEQ_END
argument_list|,
name|DebugLoc
operator|::
name|getUnknownLoc
argument_list|()
argument_list|,
name|NodeTys
argument_list|,
operator|&
name|Ops
index|[
literal|0
index|]
argument_list|,
operator|(
name|unsigned
operator|)
name|Ops
operator|.
name|size
argument_list|()
operator|-
operator|(
name|InFlag
operator|.
name|getNode
argument_list|()
operator|==
literal|0
condition|?
literal|1
else|:
literal|0
operator|)
argument_list|)
return|;
block|}
comment|/// getUNDEF - Return an UNDEF node.  UNDEF does not have a useful DebugLoc.
name|SDValue
name|getUNDEF
parameter_list|(
name|EVT
name|VT
parameter_list|)
block|{
return|return
name|getNode
argument_list|(
name|ISD
operator|::
name|UNDEF
argument_list|,
name|DebugLoc
operator|::
name|getUnknownLoc
argument_list|()
argument_list|,
name|VT
argument_list|)
return|;
block|}
comment|/// getGLOBAL_OFFSET_TABLE - Return a GLOBAL_OFFSET_TABLE node.  This does
comment|/// not have a useful DebugLoc.
name|SDValue
name|getGLOBAL_OFFSET_TABLE
parameter_list|(
name|EVT
name|VT
parameter_list|)
block|{
return|return
name|getNode
argument_list|(
name|ISD
operator|::
name|GLOBAL_OFFSET_TABLE
argument_list|,
name|DebugLoc
operator|::
name|getUnknownLoc
argument_list|()
argument_list|,
name|VT
argument_list|)
return|;
block|}
comment|/// getNode - Gets or creates the specified node.
comment|///
name|SDValue
name|getNode
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|DL
parameter_list|,
name|EVT
name|VT
parameter_list|)
function_decl|;
name|SDValue
name|getNode
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|DL
parameter_list|,
name|EVT
name|VT
parameter_list|,
name|SDValue
name|N
parameter_list|)
function_decl|;
name|SDValue
name|getNode
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|DL
parameter_list|,
name|EVT
name|VT
parameter_list|,
name|SDValue
name|N1
parameter_list|,
name|SDValue
name|N2
parameter_list|)
function_decl|;
name|SDValue
name|getNode
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|DL
parameter_list|,
name|EVT
name|VT
parameter_list|,
name|SDValue
name|N1
parameter_list|,
name|SDValue
name|N2
parameter_list|,
name|SDValue
name|N3
parameter_list|)
function_decl|;
name|SDValue
name|getNode
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|DL
parameter_list|,
name|EVT
name|VT
parameter_list|,
name|SDValue
name|N1
parameter_list|,
name|SDValue
name|N2
parameter_list|,
name|SDValue
name|N3
parameter_list|,
name|SDValue
name|N4
parameter_list|)
function_decl|;
name|SDValue
name|getNode
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|DL
parameter_list|,
name|EVT
name|VT
parameter_list|,
name|SDValue
name|N1
parameter_list|,
name|SDValue
name|N2
parameter_list|,
name|SDValue
name|N3
parameter_list|,
name|SDValue
name|N4
parameter_list|,
name|SDValue
name|N5
parameter_list|)
function_decl|;
name|SDValue
name|getNode
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|DL
parameter_list|,
name|EVT
name|VT
parameter_list|,
specifier|const
name|SDUse
modifier|*
name|Ops
parameter_list|,
name|unsigned
name|NumOps
parameter_list|)
function_decl|;
name|SDValue
name|getNode
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|DL
parameter_list|,
name|EVT
name|VT
parameter_list|,
specifier|const
name|SDValue
modifier|*
name|Ops
parameter_list|,
name|unsigned
name|NumOps
parameter_list|)
function_decl|;
name|SDValue
name|getNode
argument_list|(
name|unsigned
name|Opcode
argument_list|,
name|DebugLoc
name|DL
argument_list|,
specifier|const
name|std
operator|::
name|vector
operator|<
name|EVT
operator|>
operator|&
name|ResultTys
argument_list|,
specifier|const
name|SDValue
operator|*
name|Ops
argument_list|,
name|unsigned
name|NumOps
argument_list|)
decl_stmt|;
name|SDValue
name|getNode
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|DL
parameter_list|,
specifier|const
name|EVT
modifier|*
name|VTs
parameter_list|,
name|unsigned
name|NumVTs
parameter_list|,
specifier|const
name|SDValue
modifier|*
name|Ops
parameter_list|,
name|unsigned
name|NumOps
parameter_list|)
function_decl|;
name|SDValue
name|getNode
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|DL
parameter_list|,
name|SDVTList
name|VTs
parameter_list|,
specifier|const
name|SDValue
modifier|*
name|Ops
parameter_list|,
name|unsigned
name|NumOps
parameter_list|)
function_decl|;
name|SDValue
name|getNode
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|DL
parameter_list|,
name|SDVTList
name|VTs
parameter_list|)
function_decl|;
name|SDValue
name|getNode
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|DL
parameter_list|,
name|SDVTList
name|VTs
parameter_list|,
name|SDValue
name|N
parameter_list|)
function_decl|;
name|SDValue
name|getNode
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|DL
parameter_list|,
name|SDVTList
name|VTs
parameter_list|,
name|SDValue
name|N1
parameter_list|,
name|SDValue
name|N2
parameter_list|)
function_decl|;
name|SDValue
name|getNode
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|DL
parameter_list|,
name|SDVTList
name|VTs
parameter_list|,
name|SDValue
name|N1
parameter_list|,
name|SDValue
name|N2
parameter_list|,
name|SDValue
name|N3
parameter_list|)
function_decl|;
name|SDValue
name|getNode
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|DL
parameter_list|,
name|SDVTList
name|VTs
parameter_list|,
name|SDValue
name|N1
parameter_list|,
name|SDValue
name|N2
parameter_list|,
name|SDValue
name|N3
parameter_list|,
name|SDValue
name|N4
parameter_list|)
function_decl|;
name|SDValue
name|getNode
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|DL
parameter_list|,
name|SDVTList
name|VTs
parameter_list|,
name|SDValue
name|N1
parameter_list|,
name|SDValue
name|N2
parameter_list|,
name|SDValue
name|N3
parameter_list|,
name|SDValue
name|N4
parameter_list|,
name|SDValue
name|N5
parameter_list|)
function_decl|;
comment|/// getStackArgumentTokenFactor - Compute a TokenFactor to force all
comment|/// the incoming stack arguments to be loaded from the stack. This is
comment|/// used in tail call lowering to protect stack arguments from being
comment|/// clobbered.
name|SDValue
name|getStackArgumentTokenFactor
parameter_list|(
name|SDValue
name|Chain
parameter_list|)
function_decl|;
name|SDValue
name|getMemcpy
parameter_list|(
name|SDValue
name|Chain
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|SDValue
name|Dst
parameter_list|,
name|SDValue
name|Src
parameter_list|,
name|SDValue
name|Size
parameter_list|,
name|unsigned
name|Align
parameter_list|,
name|bool
name|AlwaysInline
parameter_list|,
specifier|const
name|Value
modifier|*
name|DstSV
parameter_list|,
name|uint64_t
name|DstSVOff
parameter_list|,
specifier|const
name|Value
modifier|*
name|SrcSV
parameter_list|,
name|uint64_t
name|SrcSVOff
parameter_list|)
function_decl|;
name|SDValue
name|getMemmove
parameter_list|(
name|SDValue
name|Chain
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|SDValue
name|Dst
parameter_list|,
name|SDValue
name|Src
parameter_list|,
name|SDValue
name|Size
parameter_list|,
name|unsigned
name|Align
parameter_list|,
specifier|const
name|Value
modifier|*
name|DstSV
parameter_list|,
name|uint64_t
name|DstOSVff
parameter_list|,
specifier|const
name|Value
modifier|*
name|SrcSV
parameter_list|,
name|uint64_t
name|SrcSVOff
parameter_list|)
function_decl|;
name|SDValue
name|getMemset
parameter_list|(
name|SDValue
name|Chain
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|SDValue
name|Dst
parameter_list|,
name|SDValue
name|Src
parameter_list|,
name|SDValue
name|Size
parameter_list|,
name|unsigned
name|Align
parameter_list|,
specifier|const
name|Value
modifier|*
name|DstSV
parameter_list|,
name|uint64_t
name|DstSVOff
parameter_list|)
function_decl|;
comment|/// getSetCC - Helper function to make it easier to build SetCC's if you just
comment|/// have an ISD::CondCode instead of an SDValue.
comment|///
name|SDValue
name|getSetCC
argument_list|(
name|DebugLoc
name|DL
argument_list|,
name|EVT
name|VT
argument_list|,
name|SDValue
name|LHS
argument_list|,
name|SDValue
name|RHS
argument_list|,
name|ISD
operator|::
name|CondCode
name|Cond
argument_list|)
block|{
return|return
name|getNode
argument_list|(
name|ISD
operator|::
name|SETCC
argument_list|,
name|DL
argument_list|,
name|VT
argument_list|,
name|LHS
argument_list|,
name|RHS
argument_list|,
name|getCondCode
argument_list|(
name|Cond
argument_list|)
argument_list|)
return|;
block|}
comment|/// getVSetCC - Helper function to make it easier to build VSetCC's nodes
comment|/// if you just have an ISD::CondCode instead of an SDValue.
comment|///
name|SDValue
name|getVSetCC
argument_list|(
name|DebugLoc
name|DL
argument_list|,
name|EVT
name|VT
argument_list|,
name|SDValue
name|LHS
argument_list|,
name|SDValue
name|RHS
argument_list|,
name|ISD
operator|::
name|CondCode
name|Cond
argument_list|)
block|{
return|return
name|getNode
argument_list|(
name|ISD
operator|::
name|VSETCC
argument_list|,
name|DL
argument_list|,
name|VT
argument_list|,
name|LHS
argument_list|,
name|RHS
argument_list|,
name|getCondCode
argument_list|(
name|Cond
argument_list|)
argument_list|)
return|;
block|}
comment|/// getSelectCC - Helper function to make it easier to build SelectCC's if you
comment|/// just have an ISD::CondCode instead of an SDValue.
comment|///
name|SDValue
name|getSelectCC
argument_list|(
name|DebugLoc
name|DL
argument_list|,
name|SDValue
name|LHS
argument_list|,
name|SDValue
name|RHS
argument_list|,
name|SDValue
name|True
argument_list|,
name|SDValue
name|False
argument_list|,
name|ISD
operator|::
name|CondCode
name|Cond
argument_list|)
block|{
return|return
name|getNode
argument_list|(
name|ISD
operator|::
name|SELECT_CC
argument_list|,
name|DL
argument_list|,
name|True
operator|.
name|getValueType
argument_list|()
argument_list|,
name|LHS
argument_list|,
name|RHS
argument_list|,
name|True
argument_list|,
name|False
argument_list|,
name|getCondCode
argument_list|(
name|Cond
argument_list|)
argument_list|)
return|;
block|}
comment|/// getVAArg - VAArg produces a result and token chain, and takes a pointer
comment|/// and a source value as input.
name|SDValue
name|getVAArg
parameter_list|(
name|EVT
name|VT
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|SDValue
name|Chain
parameter_list|,
name|SDValue
name|Ptr
parameter_list|,
name|SDValue
name|SV
parameter_list|)
function_decl|;
comment|/// getAtomic - Gets a node for an atomic op, produces result and chain and
comment|/// takes 3 operands
name|SDValue
name|getAtomic
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|EVT
name|MemVT
parameter_list|,
name|SDValue
name|Chain
parameter_list|,
name|SDValue
name|Ptr
parameter_list|,
name|SDValue
name|Cmp
parameter_list|,
name|SDValue
name|Swp
parameter_list|,
specifier|const
name|Value
modifier|*
name|PtrVal
parameter_list|,
name|unsigned
name|Alignment
init|=
literal|0
parameter_list|)
function_decl|;
name|SDValue
name|getAtomic
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|EVT
name|MemVT
parameter_list|,
name|SDValue
name|Chain
parameter_list|,
name|SDValue
name|Ptr
parameter_list|,
name|SDValue
name|Cmp
parameter_list|,
name|SDValue
name|Swp
parameter_list|,
name|MachineMemOperand
modifier|*
name|MMO
parameter_list|)
function_decl|;
comment|/// getAtomic - Gets a node for an atomic op, produces result and chain and
comment|/// takes 2 operands.
name|SDValue
name|getAtomic
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|EVT
name|MemVT
parameter_list|,
name|SDValue
name|Chain
parameter_list|,
name|SDValue
name|Ptr
parameter_list|,
name|SDValue
name|Val
parameter_list|,
specifier|const
name|Value
modifier|*
name|PtrVal
parameter_list|,
name|unsigned
name|Alignment
init|=
literal|0
parameter_list|)
function_decl|;
name|SDValue
name|getAtomic
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|EVT
name|MemVT
parameter_list|,
name|SDValue
name|Chain
parameter_list|,
name|SDValue
name|Ptr
parameter_list|,
name|SDValue
name|Val
parameter_list|,
name|MachineMemOperand
modifier|*
name|MMO
parameter_list|)
function_decl|;
comment|/// getMemIntrinsicNode - Creates a MemIntrinsicNode that may produce a
comment|/// result and takes a list of operands. Opcode may be INTRINSIC_VOID,
comment|/// INTRINSIC_W_CHAIN, or a target-specific opcode with a value not
comment|/// less than FIRST_TARGET_MEMORY_OPCODE.
name|SDValue
name|getMemIntrinsicNode
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
specifier|const
name|EVT
modifier|*
name|VTs
parameter_list|,
name|unsigned
name|NumVTs
parameter_list|,
specifier|const
name|SDValue
modifier|*
name|Ops
parameter_list|,
name|unsigned
name|NumOps
parameter_list|,
name|EVT
name|MemVT
parameter_list|,
specifier|const
name|Value
modifier|*
name|srcValue
parameter_list|,
name|int
name|SVOff
parameter_list|,
name|unsigned
name|Align
init|=
literal|0
parameter_list|,
name|bool
name|Vol
init|=
name|false
parameter_list|,
name|bool
name|ReadMem
init|=
name|true
parameter_list|,
name|bool
name|WriteMem
init|=
name|true
parameter_list|)
function_decl|;
name|SDValue
name|getMemIntrinsicNode
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|SDVTList
name|VTList
parameter_list|,
specifier|const
name|SDValue
modifier|*
name|Ops
parameter_list|,
name|unsigned
name|NumOps
parameter_list|,
name|EVT
name|MemVT
parameter_list|,
specifier|const
name|Value
modifier|*
name|srcValue
parameter_list|,
name|int
name|SVOff
parameter_list|,
name|unsigned
name|Align
init|=
literal|0
parameter_list|,
name|bool
name|Vol
init|=
name|false
parameter_list|,
name|bool
name|ReadMem
init|=
name|true
parameter_list|,
name|bool
name|WriteMem
init|=
name|true
parameter_list|)
function_decl|;
name|SDValue
name|getMemIntrinsicNode
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|SDVTList
name|VTList
parameter_list|,
specifier|const
name|SDValue
modifier|*
name|Ops
parameter_list|,
name|unsigned
name|NumOps
parameter_list|,
name|EVT
name|MemVT
parameter_list|,
name|MachineMemOperand
modifier|*
name|MMO
parameter_list|)
function_decl|;
comment|/// getMergeValues - Create a MERGE_VALUES node from the given operands.
name|SDValue
name|getMergeValues
parameter_list|(
specifier|const
name|SDValue
modifier|*
name|Ops
parameter_list|,
name|unsigned
name|NumOps
parameter_list|,
name|DebugLoc
name|dl
parameter_list|)
function_decl|;
comment|/// getLoad - Loads are not normal binary operators: their result type is not
comment|/// determined by their operands, and they produce a value AND a token chain.
comment|///
name|SDValue
name|getLoad
parameter_list|(
name|EVT
name|VT
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|SDValue
name|Chain
parameter_list|,
name|SDValue
name|Ptr
parameter_list|,
specifier|const
name|Value
modifier|*
name|SV
parameter_list|,
name|int
name|SVOffset
parameter_list|,
name|bool
name|isVolatile
parameter_list|,
name|bool
name|isNonTemporal
parameter_list|,
name|unsigned
name|Alignment
parameter_list|)
function_decl|;
name|SDValue
name|getExtLoad
argument_list|(
name|ISD
operator|::
name|LoadExtType
name|ExtType
argument_list|,
name|DebugLoc
name|dl
argument_list|,
name|EVT
name|VT
argument_list|,
name|SDValue
name|Chain
argument_list|,
name|SDValue
name|Ptr
argument_list|,
specifier|const
name|Value
operator|*
name|SV
argument_list|,
name|int
name|SVOffset
argument_list|,
name|EVT
name|MemVT
argument_list|,
name|bool
name|isVolatile
argument_list|,
name|bool
name|isNonTemporal
argument_list|,
name|unsigned
name|Alignment
argument_list|)
decl_stmt|;
name|SDValue
name|getIndexedLoad
argument_list|(
name|SDValue
name|OrigLoad
argument_list|,
name|DebugLoc
name|dl
argument_list|,
name|SDValue
name|Base
argument_list|,
name|SDValue
name|Offset
argument_list|,
name|ISD
operator|::
name|MemIndexedMode
name|AM
argument_list|)
decl_stmt|;
name|SDValue
name|getLoad
argument_list|(
name|ISD
operator|::
name|MemIndexedMode
name|AM
argument_list|,
name|DebugLoc
name|dl
argument_list|,
name|ISD
operator|::
name|LoadExtType
name|ExtType
argument_list|,
name|EVT
name|VT
argument_list|,
name|SDValue
name|Chain
argument_list|,
name|SDValue
name|Ptr
argument_list|,
name|SDValue
name|Offset
argument_list|,
specifier|const
name|Value
operator|*
name|SV
argument_list|,
name|int
name|SVOffset
argument_list|,
name|EVT
name|MemVT
argument_list|,
name|bool
name|isVolatile
argument_list|,
name|bool
name|isNonTemporal
argument_list|,
name|unsigned
name|Alignment
argument_list|)
decl_stmt|;
name|SDValue
name|getLoad
argument_list|(
name|ISD
operator|::
name|MemIndexedMode
name|AM
argument_list|,
name|DebugLoc
name|dl
argument_list|,
name|ISD
operator|::
name|LoadExtType
name|ExtType
argument_list|,
name|EVT
name|VT
argument_list|,
name|SDValue
name|Chain
argument_list|,
name|SDValue
name|Ptr
argument_list|,
name|SDValue
name|Offset
argument_list|,
name|EVT
name|MemVT
argument_list|,
name|MachineMemOperand
operator|*
name|MMO
argument_list|)
decl_stmt|;
comment|/// getStore - Helper function to build ISD::STORE nodes.
comment|///
name|SDValue
name|getStore
parameter_list|(
name|SDValue
name|Chain
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|SDValue
name|Val
parameter_list|,
name|SDValue
name|Ptr
parameter_list|,
specifier|const
name|Value
modifier|*
name|SV
parameter_list|,
name|int
name|SVOffset
parameter_list|,
name|bool
name|isVolatile
parameter_list|,
name|bool
name|isNonTemporal
parameter_list|,
name|unsigned
name|Alignment
parameter_list|)
function_decl|;
name|SDValue
name|getStore
parameter_list|(
name|SDValue
name|Chain
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|SDValue
name|Val
parameter_list|,
name|SDValue
name|Ptr
parameter_list|,
name|MachineMemOperand
modifier|*
name|MMO
parameter_list|)
function_decl|;
name|SDValue
name|getTruncStore
parameter_list|(
name|SDValue
name|Chain
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|SDValue
name|Val
parameter_list|,
name|SDValue
name|Ptr
parameter_list|,
specifier|const
name|Value
modifier|*
name|SV
parameter_list|,
name|int
name|SVOffset
parameter_list|,
name|EVT
name|TVT
parameter_list|,
name|bool
name|isNonTemporal
parameter_list|,
name|bool
name|isVolatile
parameter_list|,
name|unsigned
name|Alignment
parameter_list|)
function_decl|;
name|SDValue
name|getTruncStore
parameter_list|(
name|SDValue
name|Chain
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|SDValue
name|Val
parameter_list|,
name|SDValue
name|Ptr
parameter_list|,
name|EVT
name|TVT
parameter_list|,
name|MachineMemOperand
modifier|*
name|MMO
parameter_list|)
function_decl|;
name|SDValue
name|getIndexedStore
argument_list|(
name|SDValue
name|OrigStoe
argument_list|,
name|DebugLoc
name|dl
argument_list|,
name|SDValue
name|Base
argument_list|,
name|SDValue
name|Offset
argument_list|,
name|ISD
operator|::
name|MemIndexedMode
name|AM
argument_list|)
decl_stmt|;
comment|/// getSrcValue - Construct a node to track a Value* through the backend.
name|SDValue
name|getSrcValue
parameter_list|(
specifier|const
name|Value
modifier|*
name|v
parameter_list|)
function_decl|;
comment|/// getShiftAmountOperand - Return the specified value casted to
comment|/// the target's desired shift amount type.
name|SDValue
name|getShiftAmountOperand
parameter_list|(
name|SDValue
name|Op
parameter_list|)
function_decl|;
comment|/// UpdateNodeOperands - *Mutate* the specified node in-place to have the
comment|/// specified operands.  If the resultant node already exists in the DAG,
comment|/// this does not modify the specified node, instead it returns the node that
comment|/// already exists.  If the resultant node does not exist in the DAG, the
comment|/// input node is returned.  As a degenerate case, if you specify the same
comment|/// input operands as the node already has, the input node is returned.
name|SDValue
name|UpdateNodeOperands
parameter_list|(
name|SDValue
name|N
parameter_list|,
name|SDValue
name|Op
parameter_list|)
function_decl|;
name|SDValue
name|UpdateNodeOperands
parameter_list|(
name|SDValue
name|N
parameter_list|,
name|SDValue
name|Op1
parameter_list|,
name|SDValue
name|Op2
parameter_list|)
function_decl|;
name|SDValue
name|UpdateNodeOperands
parameter_list|(
name|SDValue
name|N
parameter_list|,
name|SDValue
name|Op1
parameter_list|,
name|SDValue
name|Op2
parameter_list|,
name|SDValue
name|Op3
parameter_list|)
function_decl|;
name|SDValue
name|UpdateNodeOperands
parameter_list|(
name|SDValue
name|N
parameter_list|,
name|SDValue
name|Op1
parameter_list|,
name|SDValue
name|Op2
parameter_list|,
name|SDValue
name|Op3
parameter_list|,
name|SDValue
name|Op4
parameter_list|)
function_decl|;
name|SDValue
name|UpdateNodeOperands
parameter_list|(
name|SDValue
name|N
parameter_list|,
name|SDValue
name|Op1
parameter_list|,
name|SDValue
name|Op2
parameter_list|,
name|SDValue
name|Op3
parameter_list|,
name|SDValue
name|Op4
parameter_list|,
name|SDValue
name|Op5
parameter_list|)
function_decl|;
name|SDValue
name|UpdateNodeOperands
parameter_list|(
name|SDValue
name|N
parameter_list|,
specifier|const
name|SDValue
modifier|*
name|Ops
parameter_list|,
name|unsigned
name|NumOps
parameter_list|)
function_decl|;
comment|/// SelectNodeTo - These are used for target selectors to *mutate* the
comment|/// specified node to have the specified return type, Target opcode, and
comment|/// operands.  Note that target opcodes are stored as
comment|/// ~TargetOpcode in the node opcode field.  The resultant node is returned.
name|SDNode
modifier|*
name|SelectNodeTo
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|TargetOpc
parameter_list|,
name|EVT
name|VT
parameter_list|)
function_decl|;
name|SDNode
modifier|*
name|SelectNodeTo
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|TargetOpc
parameter_list|,
name|EVT
name|VT
parameter_list|,
name|SDValue
name|Op1
parameter_list|)
function_decl|;
name|SDNode
modifier|*
name|SelectNodeTo
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|TargetOpc
parameter_list|,
name|EVT
name|VT
parameter_list|,
name|SDValue
name|Op1
parameter_list|,
name|SDValue
name|Op2
parameter_list|)
function_decl|;
name|SDNode
modifier|*
name|SelectNodeTo
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|TargetOpc
parameter_list|,
name|EVT
name|VT
parameter_list|,
name|SDValue
name|Op1
parameter_list|,
name|SDValue
name|Op2
parameter_list|,
name|SDValue
name|Op3
parameter_list|)
function_decl|;
name|SDNode
modifier|*
name|SelectNodeTo
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|TargetOpc
parameter_list|,
name|EVT
name|VT
parameter_list|,
specifier|const
name|SDValue
modifier|*
name|Ops
parameter_list|,
name|unsigned
name|NumOps
parameter_list|)
function_decl|;
name|SDNode
modifier|*
name|SelectNodeTo
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|TargetOpc
parameter_list|,
name|EVT
name|VT1
parameter_list|,
name|EVT
name|VT2
parameter_list|)
function_decl|;
name|SDNode
modifier|*
name|SelectNodeTo
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|TargetOpc
parameter_list|,
name|EVT
name|VT1
parameter_list|,
name|EVT
name|VT2
parameter_list|,
specifier|const
name|SDValue
modifier|*
name|Ops
parameter_list|,
name|unsigned
name|NumOps
parameter_list|)
function_decl|;
name|SDNode
modifier|*
name|SelectNodeTo
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|TargetOpc
parameter_list|,
name|EVT
name|VT1
parameter_list|,
name|EVT
name|VT2
parameter_list|,
name|EVT
name|VT3
parameter_list|,
specifier|const
name|SDValue
modifier|*
name|Ops
parameter_list|,
name|unsigned
name|NumOps
parameter_list|)
function_decl|;
name|SDNode
modifier|*
name|SelectNodeTo
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|MachineOpc
parameter_list|,
name|EVT
name|VT1
parameter_list|,
name|EVT
name|VT2
parameter_list|,
name|EVT
name|VT3
parameter_list|,
name|EVT
name|VT4
parameter_list|,
specifier|const
name|SDValue
modifier|*
name|Ops
parameter_list|,
name|unsigned
name|NumOps
parameter_list|)
function_decl|;
name|SDNode
modifier|*
name|SelectNodeTo
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|TargetOpc
parameter_list|,
name|EVT
name|VT1
parameter_list|,
name|EVT
name|VT2
parameter_list|,
name|SDValue
name|Op1
parameter_list|)
function_decl|;
name|SDNode
modifier|*
name|SelectNodeTo
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|TargetOpc
parameter_list|,
name|EVT
name|VT1
parameter_list|,
name|EVT
name|VT2
parameter_list|,
name|SDValue
name|Op1
parameter_list|,
name|SDValue
name|Op2
parameter_list|)
function_decl|;
name|SDNode
modifier|*
name|SelectNodeTo
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|TargetOpc
parameter_list|,
name|EVT
name|VT1
parameter_list|,
name|EVT
name|VT2
parameter_list|,
name|SDValue
name|Op1
parameter_list|,
name|SDValue
name|Op2
parameter_list|,
name|SDValue
name|Op3
parameter_list|)
function_decl|;
name|SDNode
modifier|*
name|SelectNodeTo
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|TargetOpc
parameter_list|,
name|EVT
name|VT1
parameter_list|,
name|EVT
name|VT2
parameter_list|,
name|EVT
name|VT3
parameter_list|,
name|SDValue
name|Op1
parameter_list|,
name|SDValue
name|Op2
parameter_list|,
name|SDValue
name|Op3
parameter_list|)
function_decl|;
name|SDNode
modifier|*
name|SelectNodeTo
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|TargetOpc
parameter_list|,
name|SDVTList
name|VTs
parameter_list|,
specifier|const
name|SDValue
modifier|*
name|Ops
parameter_list|,
name|unsigned
name|NumOps
parameter_list|)
function_decl|;
comment|/// MorphNodeTo - These *mutate* the specified node to have the specified
comment|/// return type, opcode, and operands.
name|SDNode
modifier|*
name|MorphNodeTo
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|Opc
parameter_list|,
name|EVT
name|VT
parameter_list|)
function_decl|;
name|SDNode
modifier|*
name|MorphNodeTo
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|Opc
parameter_list|,
name|EVT
name|VT
parameter_list|,
name|SDValue
name|Op1
parameter_list|)
function_decl|;
name|SDNode
modifier|*
name|MorphNodeTo
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|Opc
parameter_list|,
name|EVT
name|VT
parameter_list|,
name|SDValue
name|Op1
parameter_list|,
name|SDValue
name|Op2
parameter_list|)
function_decl|;
name|SDNode
modifier|*
name|MorphNodeTo
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|Opc
parameter_list|,
name|EVT
name|VT
parameter_list|,
name|SDValue
name|Op1
parameter_list|,
name|SDValue
name|Op2
parameter_list|,
name|SDValue
name|Op3
parameter_list|)
function_decl|;
name|SDNode
modifier|*
name|MorphNodeTo
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|Opc
parameter_list|,
name|EVT
name|VT
parameter_list|,
specifier|const
name|SDValue
modifier|*
name|Ops
parameter_list|,
name|unsigned
name|NumOps
parameter_list|)
function_decl|;
name|SDNode
modifier|*
name|MorphNodeTo
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|Opc
parameter_list|,
name|EVT
name|VT1
parameter_list|,
name|EVT
name|VT2
parameter_list|)
function_decl|;
name|SDNode
modifier|*
name|MorphNodeTo
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|Opc
parameter_list|,
name|EVT
name|VT1
parameter_list|,
name|EVT
name|VT2
parameter_list|,
specifier|const
name|SDValue
modifier|*
name|Ops
parameter_list|,
name|unsigned
name|NumOps
parameter_list|)
function_decl|;
name|SDNode
modifier|*
name|MorphNodeTo
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|Opc
parameter_list|,
name|EVT
name|VT1
parameter_list|,
name|EVT
name|VT2
parameter_list|,
name|EVT
name|VT3
parameter_list|,
specifier|const
name|SDValue
modifier|*
name|Ops
parameter_list|,
name|unsigned
name|NumOps
parameter_list|)
function_decl|;
name|SDNode
modifier|*
name|MorphNodeTo
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|Opc
parameter_list|,
name|EVT
name|VT1
parameter_list|,
name|EVT
name|VT2
parameter_list|,
name|SDValue
name|Op1
parameter_list|)
function_decl|;
name|SDNode
modifier|*
name|MorphNodeTo
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|Opc
parameter_list|,
name|EVT
name|VT1
parameter_list|,
name|EVT
name|VT2
parameter_list|,
name|SDValue
name|Op1
parameter_list|,
name|SDValue
name|Op2
parameter_list|)
function_decl|;
name|SDNode
modifier|*
name|MorphNodeTo
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|Opc
parameter_list|,
name|EVT
name|VT1
parameter_list|,
name|EVT
name|VT2
parameter_list|,
name|SDValue
name|Op1
parameter_list|,
name|SDValue
name|Op2
parameter_list|,
name|SDValue
name|Op3
parameter_list|)
function_decl|;
name|SDNode
modifier|*
name|MorphNodeTo
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|Opc
parameter_list|,
name|SDVTList
name|VTs
parameter_list|,
specifier|const
name|SDValue
modifier|*
name|Ops
parameter_list|,
name|unsigned
name|NumOps
parameter_list|)
function_decl|;
comment|/// getMachineNode - These are used for target selectors to create a new node
comment|/// with specified return type(s), MachineInstr opcode, and operands.
comment|///
comment|/// Note that getMachineNode returns the resultant node.  If there is already
comment|/// a node of the specified opcode and operands, it returns that node instead
comment|/// of the current one.
name|MachineSDNode
modifier|*
name|getMachineNode
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|EVT
name|VT
parameter_list|)
function_decl|;
name|MachineSDNode
modifier|*
name|getMachineNode
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|EVT
name|VT
parameter_list|,
name|SDValue
name|Op1
parameter_list|)
function_decl|;
name|MachineSDNode
modifier|*
name|getMachineNode
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|EVT
name|VT
parameter_list|,
name|SDValue
name|Op1
parameter_list|,
name|SDValue
name|Op2
parameter_list|)
function_decl|;
name|MachineSDNode
modifier|*
name|getMachineNode
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|EVT
name|VT
parameter_list|,
name|SDValue
name|Op1
parameter_list|,
name|SDValue
name|Op2
parameter_list|,
name|SDValue
name|Op3
parameter_list|)
function_decl|;
name|MachineSDNode
modifier|*
name|getMachineNode
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|EVT
name|VT
parameter_list|,
specifier|const
name|SDValue
modifier|*
name|Ops
parameter_list|,
name|unsigned
name|NumOps
parameter_list|)
function_decl|;
name|MachineSDNode
modifier|*
name|getMachineNode
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|EVT
name|VT1
parameter_list|,
name|EVT
name|VT2
parameter_list|)
function_decl|;
name|MachineSDNode
modifier|*
name|getMachineNode
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|EVT
name|VT1
parameter_list|,
name|EVT
name|VT2
parameter_list|,
name|SDValue
name|Op1
parameter_list|)
function_decl|;
name|MachineSDNode
modifier|*
name|getMachineNode
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|EVT
name|VT1
parameter_list|,
name|EVT
name|VT2
parameter_list|,
name|SDValue
name|Op1
parameter_list|,
name|SDValue
name|Op2
parameter_list|)
function_decl|;
name|MachineSDNode
modifier|*
name|getMachineNode
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|EVT
name|VT1
parameter_list|,
name|EVT
name|VT2
parameter_list|,
name|SDValue
name|Op1
parameter_list|,
name|SDValue
name|Op2
parameter_list|,
name|SDValue
name|Op3
parameter_list|)
function_decl|;
name|MachineSDNode
modifier|*
name|getMachineNode
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|EVT
name|VT1
parameter_list|,
name|EVT
name|VT2
parameter_list|,
specifier|const
name|SDValue
modifier|*
name|Ops
parameter_list|,
name|unsigned
name|NumOps
parameter_list|)
function_decl|;
name|MachineSDNode
modifier|*
name|getMachineNode
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|EVT
name|VT1
parameter_list|,
name|EVT
name|VT2
parameter_list|,
name|EVT
name|VT3
parameter_list|,
name|SDValue
name|Op1
parameter_list|,
name|SDValue
name|Op2
parameter_list|)
function_decl|;
name|MachineSDNode
modifier|*
name|getMachineNode
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|EVT
name|VT1
parameter_list|,
name|EVT
name|VT2
parameter_list|,
name|EVT
name|VT3
parameter_list|,
name|SDValue
name|Op1
parameter_list|,
name|SDValue
name|Op2
parameter_list|,
name|SDValue
name|Op3
parameter_list|)
function_decl|;
name|MachineSDNode
modifier|*
name|getMachineNode
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|EVT
name|VT1
parameter_list|,
name|EVT
name|VT2
parameter_list|,
name|EVT
name|VT3
parameter_list|,
specifier|const
name|SDValue
modifier|*
name|Ops
parameter_list|,
name|unsigned
name|NumOps
parameter_list|)
function_decl|;
name|MachineSDNode
modifier|*
name|getMachineNode
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|EVT
name|VT1
parameter_list|,
name|EVT
name|VT2
parameter_list|,
name|EVT
name|VT3
parameter_list|,
name|EVT
name|VT4
parameter_list|,
specifier|const
name|SDValue
modifier|*
name|Ops
parameter_list|,
name|unsigned
name|NumOps
parameter_list|)
function_decl|;
name|MachineSDNode
modifier|*
name|getMachineNode
argument_list|(
name|unsigned
name|Opcode
argument_list|,
name|DebugLoc
name|dl
argument_list|,
specifier|const
name|std
operator|::
name|vector
operator|<
name|EVT
operator|>
operator|&
name|ResultTys
argument_list|,
specifier|const
name|SDValue
operator|*
name|Ops
argument_list|,
name|unsigned
name|NumOps
argument_list|)
decl_stmt|;
name|MachineSDNode
modifier|*
name|getMachineNode
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|DebugLoc
name|dl
parameter_list|,
name|SDVTList
name|VTs
parameter_list|,
specifier|const
name|SDValue
modifier|*
name|Ops
parameter_list|,
name|unsigned
name|NumOps
parameter_list|)
function_decl|;
comment|/// getTargetExtractSubreg - A convenience function for creating
comment|/// TargetInstrInfo::EXTRACT_SUBREG nodes.
name|SDValue
name|getTargetExtractSubreg
parameter_list|(
name|int
name|SRIdx
parameter_list|,
name|DebugLoc
name|DL
parameter_list|,
name|EVT
name|VT
parameter_list|,
name|SDValue
name|Operand
parameter_list|)
function_decl|;
comment|/// getTargetInsertSubreg - A convenience function for creating
comment|/// TargetInstrInfo::INSERT_SUBREG nodes.
name|SDValue
name|getTargetInsertSubreg
parameter_list|(
name|int
name|SRIdx
parameter_list|,
name|DebugLoc
name|DL
parameter_list|,
name|EVT
name|VT
parameter_list|,
name|SDValue
name|Operand
parameter_list|,
name|SDValue
name|Subreg
parameter_list|)
function_decl|;
comment|/// getNodeIfExists - Get the specified node if it's already available, or
comment|/// else return NULL.
name|SDNode
modifier|*
name|getNodeIfExists
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|SDVTList
name|VTs
parameter_list|,
specifier|const
name|SDValue
modifier|*
name|Ops
parameter_list|,
name|unsigned
name|NumOps
parameter_list|)
function_decl|;
comment|/// DAGUpdateListener - Clients of various APIs that cause global effects on
comment|/// the DAG can optionally implement this interface.  This allows the clients
comment|/// to handle the various sorts of updates that happen.
name|class
name|DAGUpdateListener
block|{
name|public
label|:
name|virtual
operator|~
name|DAGUpdateListener
argument_list|()
expr_stmt|;
comment|/// NodeDeleted - The node N that was deleted and, if E is not null, an
comment|/// equivalent node E that replaced it.
name|virtual
name|void
name|NodeDeleted
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDNode
modifier|*
name|E
parameter_list|)
init|=
literal|0
function_decl|;
comment|/// NodeUpdated - The node N that was updated.
name|virtual
name|void
name|NodeUpdated
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
init|=
literal|0
function_decl|;
block|}
empty_stmt|;
comment|/// RemoveDeadNode - Remove the specified node from the system. If any of its
comment|/// operands then becomes dead, remove them as well. Inform UpdateListener
comment|/// for each node deleted.
name|void
name|RemoveDeadNode
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|DAGUpdateListener
modifier|*
name|UpdateListener
init|=
literal|0
parameter_list|)
function_decl|;
comment|/// RemoveDeadNodes - This method deletes the unreachable nodes in the
comment|/// given list, and any nodes that become unreachable as a result.
name|void
name|RemoveDeadNodes
argument_list|(
name|SmallVectorImpl
operator|<
name|SDNode
operator|*
operator|>
operator|&
name|DeadNodes
argument_list|,
name|DAGUpdateListener
operator|*
name|UpdateListener
operator|=
literal|0
argument_list|)
decl_stmt|;
comment|/// ReplaceAllUsesWith - Modify anything using 'From' to use 'To' instead.
comment|/// This can cause recursive merging of nodes in the DAG.  Use the first
comment|/// version if 'From' is known to have a single result, use the second
comment|/// if you have two nodes with identical results (or if 'To' has a superset
comment|/// of the results of 'From'), use the third otherwise.
comment|///
comment|/// These methods all take an optional UpdateListener, which (if not null) is
comment|/// informed about nodes that are deleted and modified due to recursive
comment|/// changes in the dag.
comment|///
comment|/// These functions only replace all existing uses. It's possible that as
comment|/// these replacements are being performed, CSE may cause the From node
comment|/// to be given new uses. These new uses of From are left in place, and
comment|/// not automatically transfered to To.
comment|///
name|void
name|ReplaceAllUsesWith
parameter_list|(
name|SDValue
name|From
parameter_list|,
name|SDValue
name|Op
parameter_list|,
name|DAGUpdateListener
modifier|*
name|UpdateListener
init|=
literal|0
parameter_list|)
function_decl|;
name|void
name|ReplaceAllUsesWith
parameter_list|(
name|SDNode
modifier|*
name|From
parameter_list|,
name|SDNode
modifier|*
name|To
parameter_list|,
name|DAGUpdateListener
modifier|*
name|UpdateListener
init|=
literal|0
parameter_list|)
function_decl|;
name|void
name|ReplaceAllUsesWith
parameter_list|(
name|SDNode
modifier|*
name|From
parameter_list|,
specifier|const
name|SDValue
modifier|*
name|To
parameter_list|,
name|DAGUpdateListener
modifier|*
name|UpdateListener
init|=
literal|0
parameter_list|)
function_decl|;
comment|/// ReplaceAllUsesOfValueWith - Replace any uses of From with To, leaving
comment|/// uses of other values produced by From.Val alone.
name|void
name|ReplaceAllUsesOfValueWith
parameter_list|(
name|SDValue
name|From
parameter_list|,
name|SDValue
name|To
parameter_list|,
name|DAGUpdateListener
modifier|*
name|UpdateListener
init|=
literal|0
parameter_list|)
function_decl|;
comment|/// ReplaceAllUsesOfValuesWith - Like ReplaceAllUsesOfValueWith, but
comment|/// for multiple values at once. This correctly handles the case where
comment|/// there is an overlap between the From values and the To values.
name|void
name|ReplaceAllUsesOfValuesWith
parameter_list|(
specifier|const
name|SDValue
modifier|*
name|From
parameter_list|,
specifier|const
name|SDValue
modifier|*
name|To
parameter_list|,
name|unsigned
name|Num
parameter_list|,
name|DAGUpdateListener
modifier|*
name|UpdateListener
init|=
literal|0
parameter_list|)
function_decl|;
comment|/// AssignTopologicalOrder - Topological-sort the AllNodes list and a
comment|/// assign a unique node id for each node in the DAG based on their
comment|/// topological order. Returns the number of nodes.
name|unsigned
name|AssignTopologicalOrder
parameter_list|()
function_decl|;
comment|/// RepositionNode - Move node N in the AllNodes list to be immediately
comment|/// before the given iterator Position. This may be used to update the
comment|/// topological ordering when the list of nodes is modified.
name|void
name|RepositionNode
parameter_list|(
name|allnodes_iterator
name|Position
parameter_list|,
name|SDNode
modifier|*
name|N
parameter_list|)
block|{
name|AllNodes
operator|.
name|insert
argument_list|(
name|Position
argument_list|,
name|AllNodes
operator|.
name|remove
argument_list|(
name|N
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/// isCommutativeBinOp - Returns true if the opcode is a commutative binary
comment|/// operation.
specifier|static
name|bool
name|isCommutativeBinOp
parameter_list|(
name|unsigned
name|Opcode
parameter_list|)
block|{
comment|// FIXME: This should get its info from the td file, so that we can include
comment|// target info.
switch|switch
condition|(
name|Opcode
condition|)
block|{
case|case
name|ISD
operator|::
name|ADD
case|:
case|case
name|ISD
operator|::
name|MUL
case|:
case|case
name|ISD
operator|::
name|MULHU
case|:
case|case
name|ISD
operator|::
name|MULHS
case|:
case|case
name|ISD
operator|::
name|SMUL_LOHI
case|:
case|case
name|ISD
operator|::
name|UMUL_LOHI
case|:
case|case
name|ISD
operator|::
name|FADD
case|:
case|case
name|ISD
operator|::
name|FMUL
case|:
case|case
name|ISD
operator|::
name|AND
case|:
case|case
name|ISD
operator|::
name|OR
case|:
case|case
name|ISD
operator|::
name|XOR
case|:
case|case
name|ISD
operator|::
name|SADDO
case|:
case|case
name|ISD
operator|::
name|UADDO
case|:
case|case
name|ISD
operator|::
name|ADDC
case|:
case|case
name|ISD
operator|::
name|ADDE
case|:
return|return
name|true
return|;
default|default:
return|return
name|false
return|;
block|}
block|}
comment|/// AssignOrdering - Assign an order to the SDNode.
name|void
name|AssignOrdering
parameter_list|(
specifier|const
name|SDNode
modifier|*
name|SD
parameter_list|,
name|unsigned
name|Order
parameter_list|)
function_decl|;
comment|/// GetOrdering - Get the order for the SDNode.
name|unsigned
name|GetOrdering
argument_list|(
specifier|const
name|SDNode
operator|*
name|SD
argument_list|)
decl|const
decl_stmt|;
name|void
name|dump
argument_list|()
specifier|const
expr_stmt|;
comment|/// CreateStackTemporary - Create a stack temporary, suitable for holding the
comment|/// specified value type.  If minAlign is specified, the slot size will have
comment|/// at least that alignment.
name|SDValue
name|CreateStackTemporary
parameter_list|(
name|EVT
name|VT
parameter_list|,
name|unsigned
name|minAlign
init|=
literal|1
parameter_list|)
function_decl|;
comment|/// CreateStackTemporary - Create a stack temporary suitable for holding
comment|/// either of the specified value types.
name|SDValue
name|CreateStackTemporary
parameter_list|(
name|EVT
name|VT1
parameter_list|,
name|EVT
name|VT2
parameter_list|)
function_decl|;
comment|/// FoldConstantArithmetic -
name|SDValue
name|FoldConstantArithmetic
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|EVT
name|VT
parameter_list|,
name|ConstantSDNode
modifier|*
name|Cst1
parameter_list|,
name|ConstantSDNode
modifier|*
name|Cst2
parameter_list|)
function_decl|;
comment|/// FoldSetCC - Constant fold a setcc to true or false.
name|SDValue
name|FoldSetCC
argument_list|(
name|EVT
name|VT
argument_list|,
name|SDValue
name|N1
argument_list|,
name|SDValue
name|N2
argument_list|,
name|ISD
operator|::
name|CondCode
name|Cond
argument_list|,
name|DebugLoc
name|dl
argument_list|)
decl_stmt|;
comment|/// SignBitIsZero - Return true if the sign bit of Op is known to be zero.  We
comment|/// use this predicate to simplify operations downstream.
name|bool
name|SignBitIsZero
argument_list|(
name|SDValue
name|Op
argument_list|,
name|unsigned
name|Depth
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
comment|/// MaskedValueIsZero - Return true if 'Op& Mask' is known to be zero.  We
comment|/// use this predicate to simplify operations downstream.  Op and Mask are
comment|/// known to be the same type.
name|bool
name|MaskedValueIsZero
argument_list|(
name|SDValue
name|Op
argument_list|,
specifier|const
name|APInt
operator|&
name|Mask
argument_list|,
name|unsigned
name|Depth
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
comment|/// ComputeMaskedBits - Determine which of the bits specified in Mask are
comment|/// known to be either zero or one and return them in the KnownZero/KnownOne
comment|/// bitsets.  This code only analyzes bits in Mask, in order to short-circuit
comment|/// processing.  Targets can implement the computeMaskedBitsForTargetNode
comment|/// method in the TargetLowering class to allow target nodes to be understood.
name|void
name|ComputeMaskedBits
argument_list|(
name|SDValue
name|Op
argument_list|,
specifier|const
name|APInt
operator|&
name|Mask
argument_list|,
name|APInt
operator|&
name|KnownZero
argument_list|,
name|APInt
operator|&
name|KnownOne
argument_list|,
name|unsigned
name|Depth
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
comment|/// ComputeNumSignBits - Return the number of times the sign bit of the
comment|/// register is replicated into the other bits.  We know that at least 1 bit
comment|/// is always equal to the sign bit (itself), but other cases can give us
comment|/// information.  For example, immediately after an "SRA X, 2", we know that
comment|/// the top 3 bits are all equal to each other, so we return 3.  Targets can
comment|/// implement the ComputeNumSignBitsForTarget method in the TargetLowering
comment|/// class to allow target nodes to be understood.
name|unsigned
name|ComputeNumSignBits
argument_list|(
name|SDValue
name|Op
argument_list|,
name|unsigned
name|Depth
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
comment|/// isKnownNeverNan - Test whether the given SDValue is known to never be NaN.
name|bool
name|isKnownNeverNaN
argument_list|(
name|SDValue
name|Op
argument_list|)
decl|const
decl_stmt|;
comment|/// isVerifiedDebugInfoDesc - Returns true if the specified SDValue has
comment|/// been verified as a debug information descriptor.
name|bool
name|isVerifiedDebugInfoDesc
argument_list|(
name|SDValue
name|Op
argument_list|)
decl|const
decl_stmt|;
comment|/// getShuffleScalarElt - Returns the scalar element that will make up the ith
comment|/// element of the result of the vector shuffle.
name|SDValue
name|getShuffleScalarElt
parameter_list|(
specifier|const
name|ShuffleVectorSDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|Idx
parameter_list|)
function_decl|;
comment|/// UnrollVectorOp - Utility function used by legalize and lowering to
comment|/// "unroll" a vector operation by splitting out the scalars and operating
comment|/// on each element individually.  If the ResNE is 0, fully unroll the vector
comment|/// op. If ResNE is less than the width of the vector op, unroll up to ResNE.
comment|/// If the  ResNE is greater than the width of the vector op, unroll the
comment|/// vector op and fill the end of the resulting vector with UNDEFS.
name|SDValue
name|UnrollVectorOp
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|ResNE
init|=
literal|0
parameter_list|)
function_decl|;
comment|/// isConsecutiveLoad - Return true if LD is loading 'Bytes' bytes from a
comment|/// location that is 'Dist' units away from the location that the 'Base' load
comment|/// is loading from.
name|bool
name|isConsecutiveLoad
argument_list|(
name|LoadSDNode
operator|*
name|LD
argument_list|,
name|LoadSDNode
operator|*
name|Base
argument_list|,
name|unsigned
name|Bytes
argument_list|,
name|int
name|Dist
argument_list|)
decl|const
decl_stmt|;
comment|/// InferPtrAlignment - Infer alignment of a load / store address. Return 0 if
comment|/// it cannot be inferred.
name|unsigned
name|InferPtrAlignment
argument_list|(
name|SDValue
name|Ptr
argument_list|)
decl|const
decl_stmt|;
name|private
label|:
name|bool
name|RemoveNodeFromCSEMaps
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|void
name|AddModifiedNodeToCSEMaps
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|DAGUpdateListener
modifier|*
name|UpdateListener
parameter_list|)
function_decl|;
name|SDNode
modifier|*
name|FindModifiedNodeSlot
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
name|Op
parameter_list|,
name|void
modifier|*
modifier|&
name|InsertPos
parameter_list|)
function_decl|;
name|SDNode
modifier|*
name|FindModifiedNodeSlot
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
name|Op1
parameter_list|,
name|SDValue
name|Op2
parameter_list|,
name|void
modifier|*
modifier|&
name|InsertPos
parameter_list|)
function_decl|;
name|SDNode
modifier|*
name|FindModifiedNodeSlot
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
specifier|const
name|SDValue
modifier|*
name|Ops
parameter_list|,
name|unsigned
name|NumOps
parameter_list|,
name|void
modifier|*
modifier|&
name|InsertPos
parameter_list|)
function_decl|;
name|void
name|DeleteNodeNotInCSEMaps
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|void
name|DeallocateNode
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|unsigned
name|getEVTAlignment
argument_list|(
name|EVT
name|MemoryVT
argument_list|)
decl|const
decl_stmt|;
name|void
name|allnodes_clear
parameter_list|()
function_decl|;
comment|/// VTList - List of non-single value types.
name|std
operator|::
name|vector
operator|<
name|SDVTList
operator|>
name|VTList
expr_stmt|;
comment|/// CondCodeNodes - Maps to auto-CSE operations.
name|std
operator|::
name|vector
operator|<
name|CondCodeSDNode
operator|*
operator|>
name|CondCodeNodes
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|SDNode
operator|*
operator|>
name|ValueTypeNodes
expr_stmt|;
name|std
operator|::
name|map
operator|<
name|EVT
operator|,
name|SDNode
operator|*
operator|,
name|EVT
operator|::
name|compareRawBits
operator|>
name|ExtendedValueTypeNodes
expr_stmt|;
name|StringMap
operator|<
name|SDNode
operator|*
operator|>
name|ExternalSymbols
expr_stmt|;
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|pair
operator|<
name|std
operator|::
name|string
operator|,
name|unsigned
name|char
operator|>
operator|,
name|SDNode
operator|*
operator|>
name|TargetExternalSymbols
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
name|SelectionDAG
operator|*
operator|>
operator|:
name|public
name|GraphTraits
operator|<
name|SDNode
operator|*
operator|>
block|{
typedef|typedef
name|SelectionDAG
operator|::
name|allnodes_iterator
name|nodes_iterator
expr_stmt|;
specifier|static
name|nodes_iterator
name|nodes_begin
argument_list|(
argument|SelectionDAG *G
argument_list|)
block|{
return|return
name|G
operator|->
name|allnodes_begin
argument_list|()
return|;
block|}
specifier|static
name|nodes_iterator
name|nodes_end
argument_list|(
argument|SelectionDAG *G
argument_list|)
block|{
return|return
name|G
operator|->
name|allnodes_end
argument_list|()
return|;
block|}
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

