begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- llvm/CodeGen/MachineRegionInfo.h -------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CODEGEN_MACHINEREGIONINFO_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CODEGEN_MACHINEREGIONINFO_H
end_define

begin_include
include|#
directive|include
file|"llvm/Analysis/RegionInfo.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Analysis/RegionIterator.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/MachineDominanceFrontier.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/MachineDominators.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/MachineFunction.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/MachineFunctionPass.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/MachineLoopInfo.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MachineDominatorTree
decl_stmt|;
struct_decl|struct
name|MachinePostDominatorTree
struct_decl|;
name|class
name|MachineRegion
decl_stmt|;
name|class
name|MachineRegionNode
decl_stmt|;
name|class
name|MachineRegionInfo
decl_stmt|;
name|template
operator|<
operator|>
expr|struct
name|RegionTraits
operator|<
name|MachineFunction
operator|>
block|{
typedef|typedef
name|MachineFunction
name|FuncT
typedef|;
typedef|typedef
name|MachineBasicBlock
name|BlockT
typedef|;
typedef|typedef
name|MachineRegion
name|RegionT
typedef|;
typedef|typedef
name|MachineRegionNode
name|RegionNodeT
typedef|;
typedef|typedef
name|MachineRegionInfo
name|RegionInfoT
typedef|;
typedef|typedef
name|MachineDominatorTree
name|DomTreeT
typedef|;
typedef|typedef
name|MachineDomTreeNode
name|DomTreeNodeT
typedef|;
typedef|typedef
name|MachinePostDominatorTree
name|PostDomTreeT
typedef|;
typedef|typedef
name|MachineDominanceFrontier
name|DomFrontierT
typedef|;
typedef|typedef
name|MachineInstr
name|InstT
typedef|;
typedef|typedef
name|MachineLoop
name|LoopT
typedef|;
typedef|typedef
name|MachineLoopInfo
name|LoopInfoT
typedef|;
specifier|static
name|unsigned
name|getNumSuccessors
parameter_list|(
name|MachineBasicBlock
modifier|*
name|BB
parameter_list|)
block|{
return|return
name|BB
operator|->
name|succ_size
argument_list|()
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|MachineRegionNode
range|:
name|public
name|RegionNodeBase
operator|<
name|RegionTraits
operator|<
name|MachineFunction
operator|>>
block|{
name|public
operator|:
specifier|inline
name|MachineRegionNode
argument_list|(
argument|MachineRegion *Parent
argument_list|,
argument|MachineBasicBlock *Entry
argument_list|,
argument|bool isSubRegion = false
argument_list|)
operator|:
name|RegionNodeBase
operator|<
name|RegionTraits
operator|<
name|MachineFunction
operator|>>
operator|(
name|Parent
expr|,
name|Entry
expr|,
name|isSubRegion
operator|)
block|{    }
name|bool
name|operator
operator|==
operator|(
specifier|const
name|MachineRegion
operator|&
name|RN
operator|)
specifier|const
block|{
return|return
name|this
operator|==
name|reinterpret_cast
operator|<
specifier|const
name|MachineRegionNode
operator|*
operator|>
operator|(
operator|&
name|RN
operator|)
return|;
block|}
expr|}
block|;
name|class
name|MachineRegion
operator|:
name|public
name|RegionBase
operator|<
name|RegionTraits
operator|<
name|MachineFunction
operator|>>
block|{
name|public
operator|:
name|MachineRegion
argument_list|(
name|MachineBasicBlock
operator|*
name|Entry
argument_list|,
name|MachineBasicBlock
operator|*
name|Exit
argument_list|,
name|MachineRegionInfo
operator|*
name|RI
argument_list|,
name|MachineDominatorTree
operator|*
name|DT
argument_list|,
name|MachineRegion
operator|*
name|Parent
operator|=
name|nullptr
argument_list|)
block|;
operator|~
name|MachineRegion
argument_list|()
block|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|MachineRegionNode
operator|&
name|RN
operator|)
specifier|const
block|{
return|return
operator|&
name|RN
operator|==
name|reinterpret_cast
operator|<
specifier|const
name|MachineRegionNode
operator|*
operator|>
operator|(
name|this
operator|)
return|;
block|}
expr|}
block|;
name|class
name|MachineRegionInfo
operator|:
name|public
name|RegionInfoBase
operator|<
name|RegionTraits
operator|<
name|MachineFunction
operator|>>
block|{
name|public
operator|:
name|explicit
name|MachineRegionInfo
argument_list|()
block|;
operator|~
name|MachineRegionInfo
argument_list|()
name|override
block|;
comment|// updateStatistics - Update statistic about created regions.
name|void
name|updateStatistics
argument_list|(
argument|MachineRegion *R
argument_list|)
name|final
block|;
name|void
name|recalculate
argument_list|(
name|MachineFunction
operator|&
name|F
argument_list|,
name|MachineDominatorTree
operator|*
name|DT
argument_list|,
name|MachinePostDominatorTree
operator|*
name|PDT
argument_list|,
name|MachineDominanceFrontier
operator|*
name|DF
argument_list|)
block|; }
block|;
name|class
name|MachineRegionInfoPass
operator|:
name|public
name|MachineFunctionPass
block|{
name|MachineRegionInfo
name|RI
block|;
name|public
operator|:
specifier|static
name|char
name|ID
block|;
name|explicit
name|MachineRegionInfoPass
argument_list|()
block|;
operator|~
name|MachineRegionInfoPass
argument_list|()
name|override
block|;
name|MachineRegionInfo
operator|&
name|getRegionInfo
argument_list|()
block|{
return|return
name|RI
return|;
block|}
specifier|const
name|MachineRegionInfo
operator|&
name|getRegionInfo
argument_list|()
specifier|const
block|{
return|return
name|RI
return|;
block|}
comment|/// @name MachineFunctionPass interface
comment|//@{
name|bool
name|runOnMachineFunction
argument_list|(
argument|MachineFunction&F
argument_list|)
name|override
block|;
name|void
name|releaseMemory
argument_list|()
name|override
block|;
name|void
name|verifyAnalysis
argument_list|()
specifier|const
name|override
block|;
name|void
name|getAnalysisUsage
argument_list|(
argument|AnalysisUsage&AU
argument_list|)
specifier|const
name|override
block|;
name|void
name|print
argument_list|(
argument|raw_ostream&OS
argument_list|,
argument|const Module *
argument_list|)
specifier|const
name|override
block|;
name|void
name|dump
argument_list|()
specifier|const
block|;
comment|//@}
block|}
block|;
name|template
operator|<
operator|>
name|template
operator|<
operator|>
specifier|inline
name|MachineBasicBlock
operator|*
name|RegionNodeBase
operator|<
name|RegionTraits
operator|<
name|MachineFunction
operator|>>
operator|::
name|getNodeAs
operator|<
name|MachineBasicBlock
operator|>
operator|(
operator|)
specifier|const
block|{
name|assert
argument_list|(
operator|!
name|isSubRegion
argument_list|()
operator|&&
literal|"This is not a MachineBasicBlock RegionNode!"
argument_list|)
block|;
return|return
name|getEntry
argument_list|()
return|;
block|}
name|template
operator|<
operator|>
name|template
operator|<
operator|>
specifier|inline
name|MachineRegion
operator|*
name|RegionNodeBase
operator|<
name|RegionTraits
operator|<
name|MachineFunction
operator|>>
operator|::
name|getNodeAs
operator|<
name|MachineRegion
operator|>
operator|(
operator|)
specifier|const
block|{
name|assert
argument_list|(
name|isSubRegion
argument_list|()
operator|&&
literal|"This is not a subregion RegionNode!"
argument_list|)
block|;
name|auto
name|Unconst
operator|=
name|const_cast
operator|<
name|RegionNodeBase
operator|<
name|RegionTraits
operator|<
name|MachineFunction
operator|>>
operator|*
operator|>
operator|(
name|this
operator|)
block|;
return|return
name|reinterpret_cast
operator|<
name|MachineRegion
operator|*
operator|>
operator|(
name|Unconst
operator|)
return|;
block|}
name|RegionNodeGraphTraits
argument_list|(
name|MachineRegionNode
argument_list|,
name|MachineBasicBlock
argument_list|,
name|MachineRegion
argument_list|)
block|;
name|RegionNodeGraphTraits
argument_list|(
specifier|const
name|MachineRegionNode
argument_list|,
name|MachineBasicBlock
argument_list|,
name|MachineRegion
argument_list|)
block|;
name|RegionGraphTraits
argument_list|(
name|MachineRegion
argument_list|,
name|MachineRegionNode
argument_list|)
block|;
name|RegionGraphTraits
argument_list|(
specifier|const
name|MachineRegion
argument_list|,
specifier|const
name|MachineRegionNode
argument_list|)
block|;
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
name|MachineRegionInfo
operator|*
operator|>
operator|:
name|public
name|GraphTraits
operator|<
name|FlatIt
operator|<
name|MachineRegionNode
operator|*
operator|>
expr|>
block|{
typedef|typedef
name|df_iterator
operator|<
name|NodeType
operator|*
operator|,
name|SmallPtrSet
operator|<
name|NodeType
operator|*
operator|,
literal|8
operator|>
operator|,
name|false
operator|,
name|GraphTraits
operator|<
name|FlatIt
operator|<
name|NodeType
operator|*
operator|>
expr|>
operator|>
name|nodes_iterator
expr_stmt|;
specifier|static
name|NodeType
operator|*
name|getEntryNode
argument_list|(
argument|MachineRegionInfo *RI
argument_list|)
block|{
return|return
name|GraphTraits
operator|<
name|FlatIt
operator|<
name|MachineRegion
operator|*
operator|>
expr|>
operator|::
name|getEntryNode
argument_list|(
name|RI
operator|->
name|getTopLevelRegion
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|nodes_iterator
name|nodes_begin
argument_list|(
argument|MachineRegionInfo* RI
argument_list|)
block|{
return|return
name|nodes_iterator
operator|::
name|begin
argument_list|(
name|getEntryNode
argument_list|(
name|RI
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|nodes_iterator
name|nodes_end
argument_list|(
argument|MachineRegionInfo *RI
argument_list|)
block|{
return|return
name|nodes_iterator
operator|::
name|end
argument_list|(
name|getEntryNode
argument_list|(
name|RI
argument_list|)
argument_list|)
return|;
block|}
expr|}
block|;
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
name|MachineRegionInfoPass
operator|*
operator|>
operator|:
name|public
name|GraphTraits
operator|<
name|MachineRegionInfo
operator|*
operator|>
block|{
typedef|typedef
name|df_iterator
operator|<
name|NodeType
operator|*
operator|,
name|SmallPtrSet
operator|<
name|NodeType
operator|*
operator|,
literal|8
operator|>
operator|,
name|false
operator|,
name|GraphTraits
operator|<
name|FlatIt
operator|<
name|NodeType
operator|*
operator|>
expr|>
operator|>
name|nodes_iterator
expr_stmt|;
specifier|static
name|NodeType
operator|*
name|getEntryNode
argument_list|(
argument|MachineRegionInfoPass *RI
argument_list|)
block|{
return|return
name|GraphTraits
operator|<
name|MachineRegionInfo
operator|*
operator|>
operator|::
name|getEntryNode
argument_list|(
operator|&
name|RI
operator|->
name|getRegionInfo
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|nodes_iterator
name|nodes_begin
argument_list|(
argument|MachineRegionInfoPass* RI
argument_list|)
block|{
return|return
name|GraphTraits
operator|<
name|MachineRegionInfo
operator|*
operator|>
operator|::
name|nodes_begin
argument_list|(
operator|&
name|RI
operator|->
name|getRegionInfo
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|nodes_iterator
name|nodes_end
argument_list|(
argument|MachineRegionInfoPass *RI
argument_list|)
block|{
return|return
name|GraphTraits
operator|<
name|MachineRegionInfo
operator|*
operator|>
operator|::
name|nodes_end
argument_list|(
operator|&
name|RI
operator|->
name|getRegionInfo
argument_list|()
argument_list|)
return|;
block|}
expr|}
block|;
name|EXTERN_TEMPLATE_INSTANTIATION
argument_list|(
argument|class RegionBase<RegionTraits<MachineFunction>>
argument_list|)
block|;
name|EXTERN_TEMPLATE_INSTANTIATION
argument_list|(
argument|class RegionNodeBase<RegionTraits<MachineFunction>>
argument_list|)
block|;
name|EXTERN_TEMPLATE_INSTANTIATION
argument_list|(
argument|class RegionInfoBase<RegionTraits<MachineFunction>>
argument_list|)
block|;  }
end_decl_stmt

begin_comment
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

