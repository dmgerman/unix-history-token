begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- CodeGen/MachineInstBuilder.h - Simplify creation of MIs -*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file exposes a function named BuildMI, which is useful for dramatically
end_comment

begin_comment
comment|// simplifying how MachineInstr's are created.  It allows use of code like this:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//   M = BuildMI(X86::ADDrr8, 2).addReg(argVal1).addReg(argVal2);
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CODEGEN_MACHINEINSTRBUILDER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CODEGEN_MACHINEINSTRBUILDER_H
end_define

begin_include
include|#
directive|include
file|"llvm/CodeGen/MachineFunction.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|TargetInstrDesc
decl_stmt|;
name|class
name|MDNode
decl_stmt|;
name|namespace
name|RegState
block|{
enum|enum
block|{
name|Define
init|=
literal|0x2
block|,
name|Implicit
init|=
literal|0x4
block|,
name|Kill
init|=
literal|0x8
block|,
name|Dead
init|=
literal|0x10
block|,
name|Undef
init|=
literal|0x20
block|,
name|EarlyClobber
init|=
literal|0x40
block|,
name|Debug
init|=
literal|0x80
block|,
name|ImplicitDefine
init|=
name|Implicit
operator||
name|Define
block|,
name|ImplicitKill
init|=
name|Implicit
operator||
name|Kill
block|}
enum|;
block|}
name|class
name|MachineInstrBuilder
block|{
name|MachineInstr
modifier|*
name|MI
decl_stmt|;
name|public
label|:
name|MachineInstrBuilder
argument_list|()
operator|:
name|MI
argument_list|(
literal|0
argument_list|)
block|{}
name|explicit
name|MachineInstrBuilder
argument_list|(
name|MachineInstr
operator|*
name|mi
argument_list|)
operator|:
name|MI
argument_list|(
argument|mi
argument_list|)
block|{}
comment|/// Allow automatic conversion to the machine instruction we are working on.
comment|///
name|operator
name|MachineInstr
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|MI
return|;
block|}
name|operator
name|MachineBasicBlock
operator|::
name|iterator
argument_list|()
specifier|const
block|{
return|return
name|MI
return|;
block|}
comment|/// addReg - Add a new virtual register operand...
comment|///
specifier|const
name|MachineInstrBuilder
modifier|&
name|addReg
argument_list|(
name|unsigned
name|RegNo
argument_list|,
name|unsigned
name|flags
operator|=
literal|0
argument_list|,
name|unsigned
name|SubReg
operator|=
literal|0
argument_list|)
decl|const
block|{
name|assert
argument_list|(
operator|(
name|flags
operator|&
literal|0x1
operator|)
operator|==
literal|0
operator|&&
literal|"Passing in 'true' to addReg is forbidden! Use enums instead."
argument_list|)
expr_stmt|;
name|MI
operator|->
name|addOperand
argument_list|(
name|MachineOperand
operator|::
name|CreateReg
argument_list|(
name|RegNo
argument_list|,
name|flags
operator|&
name|RegState
operator|::
name|Define
argument_list|,
name|flags
operator|&
name|RegState
operator|::
name|Implicit
argument_list|,
name|flags
operator|&
name|RegState
operator|::
name|Kill
argument_list|,
name|flags
operator|&
name|RegState
operator|::
name|Dead
argument_list|,
name|flags
operator|&
name|RegState
operator|::
name|Undef
argument_list|,
name|flags
operator|&
name|RegState
operator|::
name|EarlyClobber
argument_list|,
name|SubReg
argument_list|,
name|flags
operator|&
name|RegState
operator|::
name|Debug
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
comment|/// addImm - Add a new immediate operand.
comment|///
specifier|const
name|MachineInstrBuilder
modifier|&
name|addImm
argument_list|(
name|int64_t
name|Val
argument_list|)
decl|const
block|{
name|MI
operator|->
name|addOperand
argument_list|(
name|MachineOperand
operator|::
name|CreateImm
argument_list|(
name|Val
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
specifier|const
name|MachineInstrBuilder
modifier|&
name|addFPImm
argument_list|(
specifier|const
name|ConstantFP
operator|*
name|Val
argument_list|)
decl|const
block|{
name|MI
operator|->
name|addOperand
argument_list|(
name|MachineOperand
operator|::
name|CreateFPImm
argument_list|(
name|Val
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
specifier|const
name|MachineInstrBuilder
modifier|&
name|addMBB
argument_list|(
name|MachineBasicBlock
operator|*
name|MBB
argument_list|,
name|unsigned
name|char
name|TargetFlags
operator|=
literal|0
argument_list|)
decl|const
block|{
name|MI
operator|->
name|addOperand
argument_list|(
name|MachineOperand
operator|::
name|CreateMBB
argument_list|(
name|MBB
argument_list|,
name|TargetFlags
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
specifier|const
name|MachineInstrBuilder
modifier|&
name|addFrameIndex
argument_list|(
name|unsigned
name|Idx
argument_list|)
decl|const
block|{
name|MI
operator|->
name|addOperand
argument_list|(
name|MachineOperand
operator|::
name|CreateFI
argument_list|(
name|Idx
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
specifier|const
name|MachineInstrBuilder
modifier|&
name|addConstantPoolIndex
argument_list|(
name|unsigned
name|Idx
argument_list|,
name|int
name|Offset
operator|=
literal|0
argument_list|,
name|unsigned
name|char
name|TargetFlags
operator|=
literal|0
argument_list|)
decl|const
block|{
name|MI
operator|->
name|addOperand
argument_list|(
name|MachineOperand
operator|::
name|CreateCPI
argument_list|(
name|Idx
argument_list|,
name|Offset
argument_list|,
name|TargetFlags
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
specifier|const
name|MachineInstrBuilder
modifier|&
name|addJumpTableIndex
argument_list|(
name|unsigned
name|Idx
argument_list|,
name|unsigned
name|char
name|TargetFlags
operator|=
literal|0
argument_list|)
decl|const
block|{
name|MI
operator|->
name|addOperand
argument_list|(
name|MachineOperand
operator|::
name|CreateJTI
argument_list|(
name|Idx
argument_list|,
name|TargetFlags
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
specifier|const
name|MachineInstrBuilder
modifier|&
name|addGlobalAddress
argument_list|(
name|GlobalValue
operator|*
name|GV
argument_list|,
name|int64_t
name|Offset
operator|=
literal|0
argument_list|,
name|unsigned
name|char
name|TargetFlags
operator|=
literal|0
argument_list|)
decl|const
block|{
name|MI
operator|->
name|addOperand
argument_list|(
name|MachineOperand
operator|::
name|CreateGA
argument_list|(
name|GV
argument_list|,
name|Offset
argument_list|,
name|TargetFlags
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
specifier|const
name|MachineInstrBuilder
modifier|&
name|addExternalSymbol
argument_list|(
specifier|const
name|char
operator|*
name|FnName
argument_list|,
name|unsigned
name|char
name|TargetFlags
operator|=
literal|0
argument_list|)
decl|const
block|{
name|MI
operator|->
name|addOperand
argument_list|(
name|MachineOperand
operator|::
name|CreateES
argument_list|(
name|FnName
argument_list|,
name|TargetFlags
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
specifier|const
name|MachineInstrBuilder
modifier|&
name|addMemOperand
argument_list|(
name|MachineMemOperand
operator|*
name|MMO
argument_list|)
decl|const
block|{
name|MI
operator|->
name|addMemOperand
argument_list|(
operator|*
name|MI
operator|->
name|getParent
argument_list|()
operator|->
name|getParent
argument_list|()
argument_list|,
name|MMO
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
specifier|const
name|MachineInstrBuilder
modifier|&
name|addOperand
argument_list|(
specifier|const
name|MachineOperand
operator|&
name|MO
argument_list|)
decl|const
block|{
name|MI
operator|->
name|addOperand
argument_list|(
name|MO
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
specifier|const
name|MachineInstrBuilder
modifier|&
name|addMetadata
argument_list|(
name|MDNode
operator|*
name|MD
argument_list|)
decl|const
block|{
name|MI
operator|->
name|addOperand
argument_list|(
name|MachineOperand
operator|::
name|CreateMetadata
argument_list|(
name|MD
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
block|}
empty_stmt|;
comment|/// BuildMI - Builder interface.  Specify how to create the initial instruction
comment|/// itself.
comment|///
specifier|inline
name|MachineInstrBuilder
name|BuildMI
parameter_list|(
name|MachineFunction
modifier|&
name|MF
parameter_list|,
name|DebugLoc
name|DL
parameter_list|,
specifier|const
name|TargetInstrDesc
modifier|&
name|TID
parameter_list|)
block|{
return|return
name|MachineInstrBuilder
argument_list|(
name|MF
operator|.
name|CreateMachineInstr
argument_list|(
name|TID
argument_list|,
name|DL
argument_list|)
argument_list|)
return|;
block|}
comment|/// BuildMI - This version of the builder sets up the first operand as a
comment|/// destination virtual register.
comment|///
specifier|inline
name|MachineInstrBuilder
name|BuildMI
parameter_list|(
name|MachineFunction
modifier|&
name|MF
parameter_list|,
name|DebugLoc
name|DL
parameter_list|,
specifier|const
name|TargetInstrDesc
modifier|&
name|TID
parameter_list|,
name|unsigned
name|DestReg
parameter_list|)
block|{
return|return
name|MachineInstrBuilder
argument_list|(
name|MF
operator|.
name|CreateMachineInstr
argument_list|(
name|TID
argument_list|,
name|DL
argument_list|)
argument_list|)
operator|.
name|addReg
argument_list|(
name|DestReg
argument_list|,
name|RegState
operator|::
name|Define
argument_list|)
return|;
block|}
comment|/// BuildMI - This version of the builder inserts the newly-built
comment|/// instruction before the given position in the given MachineBasicBlock, and
comment|/// sets up the first operand as a destination virtual register.
comment|///
specifier|inline
name|MachineInstrBuilder
name|BuildMI
argument_list|(
name|MachineBasicBlock
operator|&
name|BB
argument_list|,
name|MachineBasicBlock
operator|::
name|iterator
name|I
argument_list|,
name|DebugLoc
name|DL
argument_list|,
specifier|const
name|TargetInstrDesc
operator|&
name|TID
argument_list|,
name|unsigned
name|DestReg
argument_list|)
block|{
name|MachineInstr
modifier|*
name|MI
init|=
name|BB
operator|.
name|getParent
argument_list|()
operator|->
name|CreateMachineInstr
argument_list|(
name|TID
argument_list|,
name|DL
argument_list|)
decl_stmt|;
name|BB
operator|.
name|insert
argument_list|(
name|I
argument_list|,
name|MI
argument_list|)
expr_stmt|;
return|return
name|MachineInstrBuilder
argument_list|(
name|MI
argument_list|)
operator|.
name|addReg
argument_list|(
name|DestReg
argument_list|,
name|RegState
operator|::
name|Define
argument_list|)
return|;
block|}
comment|/// BuildMI - This version of the builder inserts the newly-built
comment|/// instruction before the given position in the given MachineBasicBlock, and
comment|/// does NOT take a destination register.
comment|///
specifier|inline
name|MachineInstrBuilder
name|BuildMI
argument_list|(
name|MachineBasicBlock
operator|&
name|BB
argument_list|,
name|MachineBasicBlock
operator|::
name|iterator
name|I
argument_list|,
name|DebugLoc
name|DL
argument_list|,
specifier|const
name|TargetInstrDesc
operator|&
name|TID
argument_list|)
block|{
name|MachineInstr
modifier|*
name|MI
init|=
name|BB
operator|.
name|getParent
argument_list|()
operator|->
name|CreateMachineInstr
argument_list|(
name|TID
argument_list|,
name|DL
argument_list|)
decl_stmt|;
name|BB
operator|.
name|insert
argument_list|(
name|I
argument_list|,
name|MI
argument_list|)
expr_stmt|;
return|return
name|MachineInstrBuilder
argument_list|(
name|MI
argument_list|)
return|;
block|}
comment|/// BuildMI - This version of the builder inserts the newly-built
comment|/// instruction at the end of the given MachineBasicBlock, and does NOT take a
comment|/// destination register.
comment|///
specifier|inline
name|MachineInstrBuilder
name|BuildMI
parameter_list|(
name|MachineBasicBlock
modifier|*
name|BB
parameter_list|,
name|DebugLoc
name|DL
parameter_list|,
specifier|const
name|TargetInstrDesc
modifier|&
name|TID
parameter_list|)
block|{
return|return
name|BuildMI
argument_list|(
operator|*
name|BB
argument_list|,
name|BB
operator|->
name|end
argument_list|()
argument_list|,
name|DL
argument_list|,
name|TID
argument_list|)
return|;
block|}
comment|/// BuildMI - This version of the builder inserts the newly-built
comment|/// instruction at the end of the given MachineBasicBlock, and sets up the first
comment|/// operand as a destination virtual register.
comment|///
specifier|inline
name|MachineInstrBuilder
name|BuildMI
parameter_list|(
name|MachineBasicBlock
modifier|*
name|BB
parameter_list|,
name|DebugLoc
name|DL
parameter_list|,
specifier|const
name|TargetInstrDesc
modifier|&
name|TID
parameter_list|,
name|unsigned
name|DestReg
parameter_list|)
block|{
return|return
name|BuildMI
argument_list|(
operator|*
name|BB
argument_list|,
name|BB
operator|->
name|end
argument_list|()
argument_list|,
name|DL
argument_list|,
name|TID
argument_list|,
name|DestReg
argument_list|)
return|;
block|}
specifier|inline
name|unsigned
name|getDefRegState
parameter_list|(
name|bool
name|B
parameter_list|)
block|{
return|return
name|B
condition|?
name|RegState
operator|::
name|Define
else|:
literal|0
return|;
block|}
specifier|inline
name|unsigned
name|getImplRegState
parameter_list|(
name|bool
name|B
parameter_list|)
block|{
return|return
name|B
condition|?
name|RegState
operator|::
name|Implicit
else|:
literal|0
return|;
block|}
specifier|inline
name|unsigned
name|getKillRegState
parameter_list|(
name|bool
name|B
parameter_list|)
block|{
return|return
name|B
condition|?
name|RegState
operator|::
name|Kill
else|:
literal|0
return|;
block|}
specifier|inline
name|unsigned
name|getDeadRegState
parameter_list|(
name|bool
name|B
parameter_list|)
block|{
return|return
name|B
condition|?
name|RegState
operator|::
name|Dead
else|:
literal|0
return|;
block|}
specifier|inline
name|unsigned
name|getUndefRegState
parameter_list|(
name|bool
name|B
parameter_list|)
block|{
return|return
name|B
condition|?
name|RegState
operator|::
name|Undef
else|:
literal|0
return|;
block|}
block|}
end_decl_stmt

begin_comment
comment|// End llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

