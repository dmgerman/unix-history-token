begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- CodeGen/MachineValueType.h - Machine-Level types ---------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines the set of machine-level target independent types which
end_comment

begin_comment
comment|// legal values in the code generator use.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CODEGEN_MACHINEVALUETYPE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CODEGEN_MACHINEVALUETYPE_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/iterator_range.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ErrorHandling.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/MathExtras.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|Type
decl_stmt|;
comment|/// Machine Value Type. Every type that is supported natively by some
comment|/// processor targeted by LLVM occurs here. This means that any legal value
comment|/// type can be represented by an MVT.
name|class
name|MVT
block|{
name|public
label|:
enum|enum
name|SimpleValueType
enum|:
name|uint8_t
block|{
comment|// Simple value types that aren't explicitly part of this enumeration
comment|// are considered extended value types.
name|INVALID_SIMPLE_VALUE_TYPE
init|=
literal|0
block|,
comment|// If you change this numbering, you must change the values in
comment|// ValueTypes.td as well!
name|Other
init|=
literal|1
block|,
comment|// This is a non-standard value
name|i1
init|=
literal|2
block|,
comment|// This is a 1 bit integer value
name|i8
init|=
literal|3
block|,
comment|// This is an 8 bit integer value
name|i16
init|=
literal|4
block|,
comment|// This is a 16 bit integer value
name|i32
init|=
literal|5
block|,
comment|// This is a 32 bit integer value
name|i64
init|=
literal|6
block|,
comment|// This is a 64 bit integer value
name|i128
init|=
literal|7
block|,
comment|// This is a 128 bit integer value
name|FIRST_INTEGER_VALUETYPE
init|=
name|i1
block|,
name|LAST_INTEGER_VALUETYPE
init|=
name|i128
block|,
name|f16
init|=
literal|8
block|,
comment|// This is a 16 bit floating point value
name|f32
init|=
literal|9
block|,
comment|// This is a 32 bit floating point value
name|f64
init|=
literal|10
block|,
comment|// This is a 64 bit floating point value
name|f80
init|=
literal|11
block|,
comment|// This is a 80 bit floating point value
name|f128
init|=
literal|12
block|,
comment|// This is a 128 bit floating point value
name|ppcf128
init|=
literal|13
block|,
comment|// This is a PPC 128-bit floating point value
name|FIRST_FP_VALUETYPE
init|=
name|f16
block|,
name|LAST_FP_VALUETYPE
init|=
name|ppcf128
block|,
name|v2i1
init|=
literal|14
block|,
comment|//    2 x i1
name|v4i1
init|=
literal|15
block|,
comment|//    4 x i1
name|v8i1
init|=
literal|16
block|,
comment|//    8 x i1
name|v16i1
init|=
literal|17
block|,
comment|//   16 x i1
name|v32i1
init|=
literal|18
block|,
comment|//   32 x i1
name|v64i1
init|=
literal|19
block|,
comment|//   64 x i1
name|v512i1
init|=
literal|20
block|,
comment|//  512 x i1
name|v1024i1
init|=
literal|21
block|,
comment|// 1024 x i1
name|v1i8
init|=
literal|22
block|,
comment|//  1 x i8
name|v2i8
init|=
literal|23
block|,
comment|//  2 x i8
name|v4i8
init|=
literal|24
block|,
comment|//  4 x i8
name|v8i8
init|=
literal|25
block|,
comment|//  8 x i8
name|v16i8
init|=
literal|26
block|,
comment|// 16 x i8
name|v32i8
init|=
literal|27
block|,
comment|// 32 x i8
name|v64i8
init|=
literal|28
block|,
comment|// 64 x i8
name|v128i8
init|=
literal|29
block|,
comment|//128 x i8
name|v256i8
init|=
literal|30
block|,
comment|//256 x i8
name|v1i16
init|=
literal|31
block|,
comment|//  1 x i16
name|v2i16
init|=
literal|32
block|,
comment|//  2 x i16
name|v4i16
init|=
literal|33
block|,
comment|//  4 x i16
name|v8i16
init|=
literal|34
block|,
comment|//  8 x i16
name|v16i16
init|=
literal|35
block|,
comment|// 16 x i16
name|v32i16
init|=
literal|36
block|,
comment|// 32 x i16
name|v64i16
init|=
literal|37
block|,
comment|// 64 x i16
name|v128i16
init|=
literal|38
block|,
comment|//128 x i16
name|v1i32
init|=
literal|39
block|,
comment|//  1 x i32
name|v2i32
init|=
literal|40
block|,
comment|//  2 x i32
name|v4i32
init|=
literal|41
block|,
comment|//  4 x i32
name|v8i32
init|=
literal|42
block|,
comment|//  8 x i32
name|v16i32
init|=
literal|43
block|,
comment|// 16 x i32
name|v32i32
init|=
literal|44
block|,
comment|// 32 x i32
name|v64i32
init|=
literal|45
block|,
comment|// 64 x i32
name|v1i64
init|=
literal|46
block|,
comment|//  1 x i64
name|v2i64
init|=
literal|47
block|,
comment|//  2 x i64
name|v4i64
init|=
literal|48
block|,
comment|//  4 x i64
name|v8i64
init|=
literal|49
block|,
comment|//  8 x i64
name|v16i64
init|=
literal|50
block|,
comment|// 16 x i64
name|v32i64
init|=
literal|51
block|,
comment|// 32 x i64
name|v1i128
init|=
literal|52
block|,
comment|//  1 x i128
comment|// Scalable integer types
name|nxv2i1
init|=
literal|53
block|,
comment|// n x  2 x i1
name|nxv4i1
init|=
literal|54
block|,
comment|// n x  4 x i1
name|nxv8i1
init|=
literal|55
block|,
comment|// n x  8 x i1
name|nxv16i1
init|=
literal|56
block|,
comment|// n x 16 x i1
name|nxv32i1
init|=
literal|57
block|,
comment|// n x 32 x i1
name|nxv1i8
init|=
literal|58
block|,
comment|// n x  1 x i8
name|nxv2i8
init|=
literal|59
block|,
comment|// n x  2 x i8
name|nxv4i8
init|=
literal|60
block|,
comment|// n x  4 x i8
name|nxv8i8
init|=
literal|61
block|,
comment|// n x  8 x i8
name|nxv16i8
init|=
literal|62
block|,
comment|// n x 16 x i8
name|nxv32i8
init|=
literal|63
block|,
comment|// n x 32 x i8
name|nxv1i16
init|=
literal|64
block|,
comment|// n x  1 x i16
name|nxv2i16
init|=
literal|65
block|,
comment|// n x  2 x i16
name|nxv4i16
init|=
literal|66
block|,
comment|// n x  4 x i16
name|nxv8i16
init|=
literal|67
block|,
comment|// n x  8 x i16
name|nxv16i16
init|=
literal|68
block|,
comment|// n x 16 x i16
name|nxv32i16
init|=
literal|69
block|,
comment|// n x 32 x i16
name|nxv1i32
init|=
literal|70
block|,
comment|// n x  1 x i32
name|nxv2i32
init|=
literal|71
block|,
comment|// n x  2 x i32
name|nxv4i32
init|=
literal|72
block|,
comment|// n x  4 x i32
name|nxv8i32
init|=
literal|73
block|,
comment|// n x  8 x i32
name|nxv16i32
init|=
literal|74
block|,
comment|// n x 16 x i32
name|nxv32i32
init|=
literal|75
block|,
comment|// n x 32 x i32
name|nxv1i64
init|=
literal|76
block|,
comment|// n x  1 x i64
name|nxv2i64
init|=
literal|77
block|,
comment|// n x  2 x i64
name|nxv4i64
init|=
literal|78
block|,
comment|// n x  4 x i64
name|nxv8i64
init|=
literal|79
block|,
comment|// n x  8 x i64
name|nxv16i64
init|=
literal|80
block|,
comment|// n x 16 x i64
name|nxv32i64
init|=
literal|81
block|,
comment|// n x 32 x i64
name|FIRST_INTEGER_VECTOR_VALUETYPE
init|=
name|v2i1
block|,
name|LAST_INTEGER_VECTOR_VALUETYPE
init|=
name|nxv32i64
block|,
name|FIRST_INTEGER_SCALABLE_VALUETYPE
init|=
name|nxv2i1
block|,
name|LAST_INTEGER_SCALABLE_VALUETYPE
init|=
name|nxv32i64
block|,
name|v2f16
init|=
literal|82
block|,
comment|//  2 x f16
name|v4f16
init|=
literal|83
block|,
comment|//  4 x f16
name|v8f16
init|=
literal|84
block|,
comment|//  8 x f16
name|v1f32
init|=
literal|85
block|,
comment|//  1 x f32
name|v2f32
init|=
literal|86
block|,
comment|//  2 x f32
name|v4f32
init|=
literal|87
block|,
comment|//  4 x f32
name|v8f32
init|=
literal|88
block|,
comment|//  8 x f32
name|v16f32
init|=
literal|89
block|,
comment|// 16 x f32
name|v1f64
init|=
literal|90
block|,
comment|//  1 x f64
name|v2f64
init|=
literal|91
block|,
comment|//  2 x f64
name|v4f64
init|=
literal|92
block|,
comment|//  4 x f64
name|v8f64
init|=
literal|93
block|,
comment|//  8 x f64
name|nxv2f16
init|=
literal|94
block|,
comment|// n x  2 x f16
name|nxv4f16
init|=
literal|95
block|,
comment|// n x  4 x f16
name|nxv8f16
init|=
literal|96
block|,
comment|// n x  8 x f16
name|nxv1f32
init|=
literal|97
block|,
comment|// n x  1 x f32
name|nxv2f32
init|=
literal|98
block|,
comment|// n x  2 x f32
name|nxv4f32
init|=
literal|99
block|,
comment|// n x  4 x f32
name|nxv8f32
init|=
literal|100
block|,
comment|// n x  8 x f32
name|nxv16f32
init|=
literal|101
block|,
comment|// n x 16 x f32
name|nxv1f64
init|=
literal|102
block|,
comment|// n x  1 x f64
name|nxv2f64
init|=
literal|103
block|,
comment|// n x  2 x f64
name|nxv4f64
init|=
literal|104
block|,
comment|// n x  4 x f64
name|nxv8f64
init|=
literal|105
block|,
comment|// n x  8 x f64
name|FIRST_FP_VECTOR_VALUETYPE
init|=
name|v2f16
block|,
name|LAST_FP_VECTOR_VALUETYPE
init|=
name|nxv8f64
block|,
name|FIRST_FP_SCALABLE_VALUETYPE
init|=
name|nxv2f16
block|,
name|LAST_FP_SCALABLE_VALUETYPE
init|=
name|nxv8f64
block|,
name|FIRST_VECTOR_VALUETYPE
init|=
name|v2i1
block|,
name|LAST_VECTOR_VALUETYPE
init|=
name|nxv8f64
block|,
name|x86mmx
init|=
literal|106
block|,
comment|// This is an X86 MMX value
name|Glue
init|=
literal|107
block|,
comment|// This glues nodes together during pre-RA sched
name|isVoid
init|=
literal|108
block|,
comment|// This has no value
name|Untyped
init|=
literal|109
block|,
comment|// This value takes a register, but has
comment|// unspecified type.  The register class
comment|// will be determined by the opcode.
name|FIRST_VALUETYPE
init|=
literal|1
block|,
comment|// This is always the beginning of the list.
name|LAST_VALUETYPE
init|=
literal|110
block|,
comment|// This always remains at the end of the list.
comment|// This is the current maximum for LAST_VALUETYPE.
comment|// MVT::MAX_ALLOWED_VALUETYPE is used for asserts and to size bit vectors
comment|// This value must be a multiple of 32.
name|MAX_ALLOWED_VALUETYPE
init|=
literal|128
block|,
comment|// A value of type llvm::TokenTy
name|token
init|=
literal|248
block|,
comment|// This is MDNode or MDString.
name|Metadata
init|=
literal|249
block|,
comment|// An int value the size of the pointer of the current
comment|// target to any address space. This must only be used internal to
comment|// tblgen. Other than for overloading, we treat iPTRAny the same as iPTR.
name|iPTRAny
init|=
literal|250
block|,
comment|// A vector with any length and element size. This is used
comment|// for intrinsics that have overloadings based on vector types.
comment|// This is only for tblgen's consumption!
name|vAny
init|=
literal|251
block|,
comment|// Any floating-point or vector floating-point value. This is used
comment|// for intrinsics that have overloadings based on floating-point types.
comment|// This is only for tblgen's consumption!
name|fAny
init|=
literal|252
block|,
comment|// An integer or vector integer value of any bit width. This is
comment|// used for intrinsics that have overloadings based on integer bit widths.
comment|// This is only for tblgen's consumption!
name|iAny
init|=
literal|253
block|,
comment|// An int value the size of the pointer of the current
comment|// target.  This should only be used internal to tblgen!
name|iPTR
init|=
literal|254
block|,
comment|// Any type. This is used for intrinsics that have overloadings.
comment|// This is only for tblgen's consumption!
name|Any
init|=
literal|255
block|}
enum|;
name|SimpleValueType
name|SimpleTy
decl_stmt|;
comment|// A class to represent the number of elements in a vector
comment|//
comment|// For fixed-length vectors, the total number of elements is equal to 'Min'
comment|// For scalable vectors, the total number of elements is a multiple of 'Min'
name|class
name|ElementCount
block|{
name|public
label|:
name|unsigned
name|Min
decl_stmt|;
name|bool
name|Scalable
decl_stmt|;
name|ElementCount
argument_list|(
argument|unsigned Min
argument_list|,
argument|bool Scalable
argument_list|)
block|:
name|Min
argument_list|(
name|Min
argument_list|)
operator|,
name|Scalable
argument_list|(
argument|Scalable
argument_list|)
block|{}
name|ElementCount
name|operator
operator|*
operator|(
name|unsigned
name|RHS
operator|)
block|{
return|return
block|{
name|Min
operator|*
name|RHS
block|,
name|Scalable
block|}
return|;
block|}
name|ElementCount
operator|&
name|operator
operator|*=
operator|(
name|unsigned
name|RHS
operator|)
block|{
name|Min
operator|*=
name|RHS
block|;
return|return
operator|*
name|this
return|;
block|}
name|ElementCount
name|operator
operator|/
operator|(
name|unsigned
name|RHS
operator|)
block|{
return|return
block|{
name|Min
operator|/
name|RHS
block|,
name|Scalable
block|}
return|;
block|}
name|ElementCount
operator|&
name|operator
operator|/=
operator|(
name|unsigned
name|RHS
operator|)
block|{
name|Min
operator|/=
name|RHS
block|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|ElementCount
operator|&
name|RHS
operator|)
block|{
return|return
name|Min
operator|==
name|RHS
operator|.
name|Min
operator|&&
name|Scalable
operator|==
name|RHS
operator|.
name|Scalable
return|;
block|}
block|}
empty_stmt|;
name|constexpr
name|MVT
argument_list|()
operator|:
name|SimpleTy
argument_list|(
argument|INVALID_SIMPLE_VALUE_TYPE
argument_list|)
block|{}
name|constexpr
name|MVT
argument_list|(
argument|SimpleValueType SVT
argument_list|)
operator|:
name|SimpleTy
argument_list|(
argument|SVT
argument_list|)
block|{}
name|bool
name|operator
operator|>
operator|(
specifier|const
name|MVT
operator|&
name|S
operator|)
specifier|const
block|{
return|return
name|SimpleTy
operator|>
name|S
operator|.
name|SimpleTy
return|;
block|}
name|bool
name|operator
operator|<
operator|(
specifier|const
name|MVT
operator|&
name|S
operator|)
specifier|const
block|{
return|return
name|SimpleTy
operator|<
name|S
operator|.
name|SimpleTy
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|MVT
operator|&
name|S
operator|)
specifier|const
block|{
return|return
name|SimpleTy
operator|==
name|S
operator|.
name|SimpleTy
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|MVT
operator|&
name|S
operator|)
specifier|const
block|{
return|return
name|SimpleTy
operator|!=
name|S
operator|.
name|SimpleTy
return|;
block|}
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|MVT
operator|&
name|S
operator|)
specifier|const
block|{
return|return
name|SimpleTy
operator|>=
name|S
operator|.
name|SimpleTy
return|;
block|}
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|MVT
operator|&
name|S
operator|)
specifier|const
block|{
return|return
name|SimpleTy
operator|<=
name|S
operator|.
name|SimpleTy
return|;
block|}
comment|/// Return true if this is a valid simple valuetype.
name|bool
name|isValid
argument_list|()
specifier|const
block|{
return|return
operator|(
name|SimpleTy
operator|>=
name|MVT
operator|::
name|FIRST_VALUETYPE
operator|&&
name|SimpleTy
operator|<
name|MVT
operator|::
name|LAST_VALUETYPE
operator|)
return|;
block|}
comment|/// Return true if this is a FP or a vector FP type.
name|bool
name|isFloatingPoint
argument_list|()
specifier|const
block|{
return|return
operator|(
operator|(
name|SimpleTy
operator|>=
name|MVT
operator|::
name|FIRST_FP_VALUETYPE
operator|&&
name|SimpleTy
operator|<=
name|MVT
operator|::
name|LAST_FP_VALUETYPE
operator|)
operator|||
operator|(
name|SimpleTy
operator|>=
name|MVT
operator|::
name|FIRST_FP_VECTOR_VALUETYPE
operator|&&
name|SimpleTy
operator|<=
name|MVT
operator|::
name|LAST_FP_VECTOR_VALUETYPE
operator|)
operator|)
return|;
block|}
comment|/// Return true if this is an integer or a vector integer type.
name|bool
name|isInteger
argument_list|()
specifier|const
block|{
return|return
operator|(
operator|(
name|SimpleTy
operator|>=
name|MVT
operator|::
name|FIRST_INTEGER_VALUETYPE
operator|&&
name|SimpleTy
operator|<=
name|MVT
operator|::
name|LAST_INTEGER_VALUETYPE
operator|)
operator|||
operator|(
name|SimpleTy
operator|>=
name|MVT
operator|::
name|FIRST_INTEGER_VECTOR_VALUETYPE
operator|&&
name|SimpleTy
operator|<=
name|MVT
operator|::
name|LAST_INTEGER_VECTOR_VALUETYPE
operator|)
operator|)
return|;
block|}
comment|/// Return true if this is an integer, not including vectors.
name|bool
name|isScalarInteger
argument_list|()
specifier|const
block|{
return|return
operator|(
name|SimpleTy
operator|>=
name|MVT
operator|::
name|FIRST_INTEGER_VALUETYPE
operator|&&
name|SimpleTy
operator|<=
name|MVT
operator|::
name|LAST_INTEGER_VALUETYPE
operator|)
return|;
block|}
comment|/// Return true if this is a vector value type.
name|bool
name|isVector
argument_list|()
specifier|const
block|{
return|return
operator|(
name|SimpleTy
operator|>=
name|MVT
operator|::
name|FIRST_VECTOR_VALUETYPE
operator|&&
name|SimpleTy
operator|<=
name|MVT
operator|::
name|LAST_VECTOR_VALUETYPE
operator|)
return|;
block|}
comment|/// Return true if this is a vector value type where the
comment|/// runtime length is machine dependent
name|bool
name|isScalableVector
argument_list|()
specifier|const
block|{
return|return
operator|(
operator|(
name|SimpleTy
operator|>=
name|MVT
operator|::
name|FIRST_INTEGER_SCALABLE_VALUETYPE
operator|&&
name|SimpleTy
operator|<=
name|MVT
operator|::
name|LAST_INTEGER_SCALABLE_VALUETYPE
operator|)
operator|||
operator|(
name|SimpleTy
operator|>=
name|MVT
operator|::
name|FIRST_FP_SCALABLE_VALUETYPE
operator|&&
name|SimpleTy
operator|<=
name|MVT
operator|::
name|LAST_FP_SCALABLE_VALUETYPE
operator|)
operator|)
return|;
block|}
comment|/// Return true if this is a 16-bit vector type.
name|bool
name|is16BitVector
argument_list|()
specifier|const
block|{
return|return
operator|(
name|SimpleTy
operator|==
name|MVT
operator|::
name|v2i8
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v1i16
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v16i1
operator|)
return|;
block|}
comment|/// Return true if this is a 32-bit vector type.
name|bool
name|is32BitVector
argument_list|()
specifier|const
block|{
return|return
operator|(
name|SimpleTy
operator|==
name|MVT
operator|::
name|v32i1
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v4i8
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v2i16
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v1i32
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v2f16
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v1f32
operator|)
return|;
block|}
comment|/// Return true if this is a 64-bit vector type.
name|bool
name|is64BitVector
argument_list|()
specifier|const
block|{
return|return
operator|(
name|SimpleTy
operator|==
name|MVT
operator|::
name|v64i1
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v8i8
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v4i16
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v2i32
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v1i64
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v4f16
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v2f32
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v1f64
operator|)
return|;
block|}
comment|/// Return true if this is a 128-bit vector type.
name|bool
name|is128BitVector
argument_list|()
specifier|const
block|{
return|return
operator|(
name|SimpleTy
operator|==
name|MVT
operator|::
name|v16i8
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v8i16
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v4i32
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v2i64
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v1i128
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v8f16
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v4f32
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v2f64
operator|)
return|;
block|}
comment|/// Return true if this is a 256-bit vector type.
name|bool
name|is256BitVector
argument_list|()
specifier|const
block|{
return|return
operator|(
name|SimpleTy
operator|==
name|MVT
operator|::
name|v8f32
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v4f64
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v32i8
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v16i16
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v8i32
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v4i64
operator|)
return|;
block|}
comment|/// Return true if this is a 512-bit vector type.
name|bool
name|is512BitVector
argument_list|()
specifier|const
block|{
return|return
operator|(
name|SimpleTy
operator|==
name|MVT
operator|::
name|v16f32
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v8f64
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v512i1
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v64i8
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v32i16
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v16i32
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v8i64
operator|)
return|;
block|}
comment|/// Return true if this is a 1024-bit vector type.
name|bool
name|is1024BitVector
argument_list|()
specifier|const
block|{
return|return
operator|(
name|SimpleTy
operator|==
name|MVT
operator|::
name|v1024i1
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v128i8
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v64i16
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v32i32
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v16i64
operator|)
return|;
block|}
comment|/// Return true if this is a 1024-bit vector type.
name|bool
name|is2048BitVector
argument_list|()
specifier|const
block|{
return|return
operator|(
name|SimpleTy
operator|==
name|MVT
operator|::
name|v256i8
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v128i16
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v64i32
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|v32i64
operator|)
return|;
block|}
comment|/// Return true if this is an overloaded type for TableGen.
name|bool
name|isOverloaded
argument_list|()
specifier|const
block|{
return|return
operator|(
name|SimpleTy
operator|==
name|MVT
operator|::
name|Any
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|iAny
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|fAny
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|vAny
operator|||
name|SimpleTy
operator|==
name|MVT
operator|::
name|iPTRAny
operator|)
return|;
block|}
comment|/// Returns true if the given vector is a power of 2.
name|bool
name|isPow2VectorType
argument_list|()
specifier|const
block|{
name|unsigned
name|NElts
operator|=
name|getVectorNumElements
argument_list|()
block|;
return|return
operator|!
operator|(
name|NElts
operator|&
operator|(
name|NElts
operator|-
literal|1
operator|)
operator|)
return|;
block|}
comment|/// Widens the length of the given vector MVT up to the nearest power of 2
comment|/// and returns that type.
name|MVT
name|getPow2VectorType
argument_list|()
specifier|const
block|{
if|if
condition|(
name|isPow2VectorType
argument_list|()
condition|)
return|return
operator|*
name|this
return|;
name|unsigned
name|NElts
operator|=
name|getVectorNumElements
argument_list|()
expr_stmt|;
name|unsigned
name|Pow2NElts
init|=
literal|1
operator|<<
name|Log2_32_Ceil
argument_list|(
name|NElts
argument_list|)
decl_stmt|;
return|return
name|MVT
operator|::
name|getVectorVT
argument_list|(
name|getVectorElementType
argument_list|()
argument_list|,
name|Pow2NElts
argument_list|)
return|;
block|}
comment|/// If this is a vector, return the element type, otherwise return this.
name|MVT
name|getScalarType
argument_list|()
specifier|const
block|{
return|return
name|isVector
argument_list|()
operator|?
name|getVectorElementType
argument_list|()
operator|:
operator|*
name|this
return|;
block|}
name|MVT
name|getVectorElementType
argument_list|()
specifier|const
block|{
switch|switch
condition|(
name|SimpleTy
condition|)
block|{
default|default:
name|llvm_unreachable
argument_list|(
literal|"Not a vector MVT!"
argument_list|)
expr_stmt|;
case|case
name|v2i1
case|:
case|case
name|v4i1
case|:
case|case
name|v8i1
case|:
case|case
name|v16i1
case|:
case|case
name|v32i1
case|:
case|case
name|v64i1
case|:
case|case
name|v512i1
case|:
case|case
name|v1024i1
case|:
case|case
name|nxv2i1
case|:
case|case
name|nxv4i1
case|:
case|case
name|nxv8i1
case|:
case|case
name|nxv16i1
case|:
case|case
name|nxv32i1
case|:
return|return
name|i1
return|;
case|case
name|v1i8
case|:
case|case
name|v2i8
case|:
case|case
name|v4i8
case|:
case|case
name|v8i8
case|:
case|case
name|v16i8
case|:
case|case
name|v32i8
case|:
case|case
name|v64i8
case|:
case|case
name|v128i8
case|:
case|case
name|v256i8
case|:
case|case
name|nxv1i8
case|:
case|case
name|nxv2i8
case|:
case|case
name|nxv4i8
case|:
case|case
name|nxv8i8
case|:
case|case
name|nxv16i8
case|:
case|case
name|nxv32i8
case|:
return|return
name|i8
return|;
case|case
name|v1i16
case|:
case|case
name|v2i16
case|:
case|case
name|v4i16
case|:
case|case
name|v8i16
case|:
case|case
name|v16i16
case|:
case|case
name|v32i16
case|:
case|case
name|v64i16
case|:
case|case
name|v128i16
case|:
case|case
name|nxv1i16
case|:
case|case
name|nxv2i16
case|:
case|case
name|nxv4i16
case|:
case|case
name|nxv8i16
case|:
case|case
name|nxv16i16
case|:
case|case
name|nxv32i16
case|:
return|return
name|i16
return|;
case|case
name|v1i32
case|:
case|case
name|v2i32
case|:
case|case
name|v4i32
case|:
case|case
name|v8i32
case|:
case|case
name|v16i32
case|:
case|case
name|v32i32
case|:
case|case
name|v64i32
case|:
case|case
name|nxv1i32
case|:
case|case
name|nxv2i32
case|:
case|case
name|nxv4i32
case|:
case|case
name|nxv8i32
case|:
case|case
name|nxv16i32
case|:
case|case
name|nxv32i32
case|:
return|return
name|i32
return|;
case|case
name|v1i64
case|:
case|case
name|v2i64
case|:
case|case
name|v4i64
case|:
case|case
name|v8i64
case|:
case|case
name|v16i64
case|:
case|case
name|v32i64
case|:
case|case
name|nxv1i64
case|:
case|case
name|nxv2i64
case|:
case|case
name|nxv4i64
case|:
case|case
name|nxv8i64
case|:
case|case
name|nxv16i64
case|:
case|case
name|nxv32i64
case|:
return|return
name|i64
return|;
case|case
name|v1i128
case|:
return|return
name|i128
return|;
case|case
name|v2f16
case|:
case|case
name|v4f16
case|:
case|case
name|v8f16
case|:
case|case
name|nxv2f16
case|:
case|case
name|nxv4f16
case|:
case|case
name|nxv8f16
case|:
return|return
name|f16
return|;
case|case
name|v1f32
case|:
case|case
name|v2f32
case|:
case|case
name|v4f32
case|:
case|case
name|v8f32
case|:
case|case
name|v16f32
case|:
case|case
name|nxv1f32
case|:
case|case
name|nxv2f32
case|:
case|case
name|nxv4f32
case|:
case|case
name|nxv8f32
case|:
case|case
name|nxv16f32
case|:
return|return
name|f32
return|;
case|case
name|v1f64
case|:
case|case
name|v2f64
case|:
case|case
name|v4f64
case|:
case|case
name|v8f64
case|:
case|case
name|nxv1f64
case|:
case|case
name|nxv2f64
case|:
case|case
name|nxv4f64
case|:
case|case
name|nxv8f64
case|:
return|return
name|f64
return|;
block|}
block|}
name|unsigned
name|getVectorNumElements
argument_list|()
specifier|const
block|{
switch|switch
condition|(
name|SimpleTy
condition|)
block|{
default|default:
name|llvm_unreachable
argument_list|(
literal|"Not a vector MVT!"
argument_list|)
expr_stmt|;
case|case
name|v1024i1
case|:
return|return
literal|1024
return|;
case|case
name|v512i1
case|:
return|return
literal|512
return|;
case|case
name|v256i8
case|:
return|return
literal|256
return|;
case|case
name|v128i8
case|:
case|case
name|v128i16
case|:
return|return
literal|128
return|;
case|case
name|v64i1
case|:
case|case
name|v64i8
case|:
case|case
name|v64i16
case|:
case|case
name|v64i32
case|:
return|return
literal|64
return|;
case|case
name|v32i1
case|:
case|case
name|v32i8
case|:
case|case
name|v32i16
case|:
case|case
name|v32i32
case|:
case|case
name|v32i64
case|:
case|case
name|nxv32i1
case|:
case|case
name|nxv32i8
case|:
case|case
name|nxv32i16
case|:
case|case
name|nxv32i32
case|:
case|case
name|nxv32i64
case|:
return|return
literal|32
return|;
case|case
name|v16i1
case|:
case|case
name|v16i8
case|:
case|case
name|v16i16
case|:
case|case
name|v16i32
case|:
case|case
name|v16i64
case|:
case|case
name|v16f32
case|:
case|case
name|nxv16i1
case|:
case|case
name|nxv16i8
case|:
case|case
name|nxv16i16
case|:
case|case
name|nxv16i32
case|:
case|case
name|nxv16i64
case|:
case|case
name|nxv16f32
case|:
return|return
literal|16
return|;
case|case
name|v8i1
case|:
case|case
name|v8i8
case|:
case|case
name|v8i16
case|:
case|case
name|v8i32
case|:
case|case
name|v8i64
case|:
case|case
name|v8f16
case|:
case|case
name|v8f32
case|:
case|case
name|v8f64
case|:
case|case
name|nxv8i1
case|:
case|case
name|nxv8i8
case|:
case|case
name|nxv8i16
case|:
case|case
name|nxv8i32
case|:
case|case
name|nxv8i64
case|:
case|case
name|nxv8f16
case|:
case|case
name|nxv8f32
case|:
case|case
name|nxv8f64
case|:
return|return
literal|8
return|;
case|case
name|v4i1
case|:
case|case
name|v4i8
case|:
case|case
name|v4i16
case|:
case|case
name|v4i32
case|:
case|case
name|v4i64
case|:
case|case
name|v4f16
case|:
case|case
name|v4f32
case|:
case|case
name|v4f64
case|:
case|case
name|nxv4i1
case|:
case|case
name|nxv4i8
case|:
case|case
name|nxv4i16
case|:
case|case
name|nxv4i32
case|:
case|case
name|nxv4i64
case|:
case|case
name|nxv4f16
case|:
case|case
name|nxv4f32
case|:
case|case
name|nxv4f64
case|:
return|return
literal|4
return|;
case|case
name|v2i1
case|:
case|case
name|v2i8
case|:
case|case
name|v2i16
case|:
case|case
name|v2i32
case|:
case|case
name|v2i64
case|:
case|case
name|v2f16
case|:
case|case
name|v2f32
case|:
case|case
name|v2f64
case|:
case|case
name|nxv2i1
case|:
case|case
name|nxv2i8
case|:
case|case
name|nxv2i16
case|:
case|case
name|nxv2i32
case|:
case|case
name|nxv2i64
case|:
case|case
name|nxv2f16
case|:
case|case
name|nxv2f32
case|:
case|case
name|nxv2f64
case|:
return|return
literal|2
return|;
case|case
name|v1i8
case|:
case|case
name|v1i16
case|:
case|case
name|v1i32
case|:
case|case
name|v1i64
case|:
case|case
name|v1i128
case|:
case|case
name|v1f32
case|:
case|case
name|v1f64
case|:
case|case
name|nxv1i8
case|:
case|case
name|nxv1i16
case|:
case|case
name|nxv1i32
case|:
case|case
name|nxv1i64
case|:
case|case
name|nxv1f32
case|:
case|case
name|nxv1f64
case|:
return|return
literal|1
return|;
block|}
block|}
name|MVT
operator|::
name|ElementCount
name|getVectorElementCount
argument_list|()
specifier|const
block|{
return|return
block|{
name|getVectorNumElements
argument_list|()
block|,
name|isScalableVector
argument_list|()
block|}
return|;
block|}
name|unsigned
name|getSizeInBits
argument_list|()
specifier|const
block|{
switch|switch
condition|(
name|SimpleTy
condition|)
block|{
default|default:
name|llvm_unreachable
argument_list|(
literal|"getSizeInBits called on extended MVT."
argument_list|)
expr_stmt|;
case|case
name|Other
case|:
name|llvm_unreachable
argument_list|(
literal|"Value type is non-standard value, Other."
argument_list|)
expr_stmt|;
case|case
name|iPTR
case|:
name|llvm_unreachable
argument_list|(
literal|"Value type size is target-dependent. Ask TLI."
argument_list|)
expr_stmt|;
case|case
name|iPTRAny
case|:
case|case
name|iAny
case|:
case|case
name|fAny
case|:
case|case
name|vAny
case|:
case|case
name|Any
case|:
name|llvm_unreachable
argument_list|(
literal|"Value type is overloaded."
argument_list|)
expr_stmt|;
case|case
name|token
case|:
name|llvm_unreachable
argument_list|(
literal|"Token type is a sentinel that cannot be used "
literal|"in codegen and has no size"
argument_list|)
expr_stmt|;
case|case
name|Metadata
case|:
name|llvm_unreachable
argument_list|(
literal|"Value type is metadata."
argument_list|)
expr_stmt|;
case|case
name|i1
case|:
return|return
literal|1
return|;
case|case
name|v2i1
case|:
case|case
name|nxv2i1
case|:
return|return
literal|2
return|;
case|case
name|v4i1
case|:
case|case
name|nxv4i1
case|:
return|return
literal|4
return|;
case|case
name|i8
case|:
case|case
name|v1i8
case|:
case|case
name|v8i1
case|:
case|case
name|nxv1i8
case|:
case|case
name|nxv8i1
case|:
return|return
literal|8
return|;
case|case
name|i16
case|:
case|case
name|f16
case|:
case|case
name|v16i1
case|:
case|case
name|v2i8
case|:
case|case
name|v1i16
case|:
case|case
name|nxv16i1
case|:
case|case
name|nxv2i8
case|:
case|case
name|nxv1i16
case|:
return|return
literal|16
return|;
case|case
name|f32
case|:
case|case
name|i32
case|:
case|case
name|v32i1
case|:
case|case
name|v4i8
case|:
case|case
name|v2i16
case|:
case|case
name|v2f16
case|:
case|case
name|v1f32
case|:
case|case
name|v1i32
case|:
case|case
name|nxv32i1
case|:
case|case
name|nxv4i8
case|:
case|case
name|nxv2i16
case|:
case|case
name|nxv1i32
case|:
case|case
name|nxv2f16
case|:
case|case
name|nxv1f32
case|:
return|return
literal|32
return|;
case|case
name|x86mmx
case|:
case|case
name|f64
case|:
case|case
name|i64
case|:
case|case
name|v64i1
case|:
case|case
name|v8i8
case|:
case|case
name|v4i16
case|:
case|case
name|v2i32
case|:
case|case
name|v1i64
case|:
case|case
name|v4f16
case|:
case|case
name|v2f32
case|:
case|case
name|v1f64
case|:
case|case
name|nxv8i8
case|:
case|case
name|nxv4i16
case|:
case|case
name|nxv2i32
case|:
case|case
name|nxv1i64
case|:
case|case
name|nxv4f16
case|:
case|case
name|nxv2f32
case|:
case|case
name|nxv1f64
case|:
return|return
literal|64
return|;
case|case
name|f80
case|:
return|return
literal|80
return|;
case|case
name|f128
case|:
case|case
name|ppcf128
case|:
case|case
name|i128
case|:
case|case
name|v16i8
case|:
case|case
name|v8i16
case|:
case|case
name|v4i32
case|:
case|case
name|v2i64
case|:
case|case
name|v1i128
case|:
case|case
name|v8f16
case|:
case|case
name|v4f32
case|:
case|case
name|v2f64
case|:
case|case
name|nxv16i8
case|:
case|case
name|nxv8i16
case|:
case|case
name|nxv4i32
case|:
case|case
name|nxv2i64
case|:
case|case
name|nxv8f16
case|:
case|case
name|nxv4f32
case|:
case|case
name|nxv2f64
case|:
return|return
literal|128
return|;
case|case
name|v32i8
case|:
case|case
name|v16i16
case|:
case|case
name|v8i32
case|:
case|case
name|v4i64
case|:
case|case
name|v8f32
case|:
case|case
name|v4f64
case|:
case|case
name|nxv32i8
case|:
case|case
name|nxv16i16
case|:
case|case
name|nxv8i32
case|:
case|case
name|nxv4i64
case|:
case|case
name|nxv8f32
case|:
case|case
name|nxv4f64
case|:
return|return
literal|256
return|;
case|case
name|v512i1
case|:
case|case
name|v64i8
case|:
case|case
name|v32i16
case|:
case|case
name|v16i32
case|:
case|case
name|v8i64
case|:
case|case
name|v16f32
case|:
case|case
name|v8f64
case|:
case|case
name|nxv32i16
case|:
case|case
name|nxv16i32
case|:
case|case
name|nxv8i64
case|:
case|case
name|nxv16f32
case|:
case|case
name|nxv8f64
case|:
return|return
literal|512
return|;
case|case
name|v1024i1
case|:
case|case
name|v128i8
case|:
case|case
name|v64i16
case|:
case|case
name|v32i32
case|:
case|case
name|v16i64
case|:
case|case
name|nxv32i32
case|:
case|case
name|nxv16i64
case|:
return|return
literal|1024
return|;
case|case
name|v256i8
case|:
case|case
name|v128i16
case|:
case|case
name|v64i32
case|:
case|case
name|v32i64
case|:
case|case
name|nxv32i64
case|:
return|return
literal|2048
return|;
block|}
block|}
name|unsigned
name|getScalarSizeInBits
argument_list|()
specifier|const
block|{
return|return
name|getScalarType
argument_list|()
operator|.
name|getSizeInBits
argument_list|()
return|;
block|}
comment|/// Return the number of bytes overwritten by a store of the specified value
comment|/// type.
name|unsigned
name|getStoreSize
argument_list|()
specifier|const
block|{
return|return
operator|(
name|getSizeInBits
argument_list|()
operator|+
literal|7
operator|)
operator|/
literal|8
return|;
block|}
comment|/// Return the number of bits overwritten by a store of the specified value
comment|/// type.
name|unsigned
name|getStoreSizeInBits
argument_list|()
specifier|const
block|{
return|return
name|getStoreSize
argument_list|()
operator|*
literal|8
return|;
block|}
comment|/// Return true if this has more bits than VT.
name|bool
name|bitsGT
argument_list|(
name|MVT
name|VT
argument_list|)
decl|const
block|{
return|return
name|getSizeInBits
argument_list|()
operator|>
name|VT
operator|.
name|getSizeInBits
argument_list|()
return|;
block|}
comment|/// Return true if this has no less bits than VT.
name|bool
name|bitsGE
argument_list|(
name|MVT
name|VT
argument_list|)
decl|const
block|{
return|return
name|getSizeInBits
argument_list|()
operator|>=
name|VT
operator|.
name|getSizeInBits
argument_list|()
return|;
block|}
comment|/// Return true if this has less bits than VT.
name|bool
name|bitsLT
argument_list|(
name|MVT
name|VT
argument_list|)
decl|const
block|{
return|return
name|getSizeInBits
argument_list|()
operator|<
name|VT
operator|.
name|getSizeInBits
argument_list|()
return|;
block|}
comment|/// Return true if this has no more bits than VT.
name|bool
name|bitsLE
argument_list|(
name|MVT
name|VT
argument_list|)
decl|const
block|{
return|return
name|getSizeInBits
argument_list|()
operator|<=
name|VT
operator|.
name|getSizeInBits
argument_list|()
return|;
block|}
specifier|static
name|MVT
name|getFloatingPointVT
parameter_list|(
name|unsigned
name|BitWidth
parameter_list|)
block|{
switch|switch
condition|(
name|BitWidth
condition|)
block|{
default|default:
name|llvm_unreachable
argument_list|(
literal|"Bad bit width!"
argument_list|)
expr_stmt|;
case|case
literal|16
case|:
return|return
name|MVT
operator|::
name|f16
return|;
case|case
literal|32
case|:
return|return
name|MVT
operator|::
name|f32
return|;
case|case
literal|64
case|:
return|return
name|MVT
operator|::
name|f64
return|;
case|case
literal|80
case|:
return|return
name|MVT
operator|::
name|f80
return|;
case|case
literal|128
case|:
return|return
name|MVT
operator|::
name|f128
return|;
block|}
block|}
specifier|static
name|MVT
name|getIntegerVT
parameter_list|(
name|unsigned
name|BitWidth
parameter_list|)
block|{
switch|switch
condition|(
name|BitWidth
condition|)
block|{
default|default:
return|return
operator|(
name|MVT
operator|::
name|SimpleValueType
operator|)
operator|(
name|MVT
operator|::
name|INVALID_SIMPLE_VALUE_TYPE
operator|)
return|;
case|case
literal|1
case|:
return|return
name|MVT
operator|::
name|i1
return|;
case|case
literal|8
case|:
return|return
name|MVT
operator|::
name|i8
return|;
case|case
literal|16
case|:
return|return
name|MVT
operator|::
name|i16
return|;
case|case
literal|32
case|:
return|return
name|MVT
operator|::
name|i32
return|;
case|case
literal|64
case|:
return|return
name|MVT
operator|::
name|i64
return|;
case|case
literal|128
case|:
return|return
name|MVT
operator|::
name|i128
return|;
block|}
block|}
specifier|static
name|MVT
name|getVectorVT
parameter_list|(
name|MVT
name|VT
parameter_list|,
name|unsigned
name|NumElements
parameter_list|)
block|{
switch|switch
condition|(
name|VT
operator|.
name|SimpleTy
condition|)
block|{
default|default:
break|break;
case|case
name|MVT
operator|::
name|i1
case|:
if|if
condition|(
name|NumElements
operator|==
literal|2
condition|)
return|return
name|MVT
operator|::
name|v2i1
return|;
if|if
condition|(
name|NumElements
operator|==
literal|4
condition|)
return|return
name|MVT
operator|::
name|v4i1
return|;
if|if
condition|(
name|NumElements
operator|==
literal|8
condition|)
return|return
name|MVT
operator|::
name|v8i1
return|;
if|if
condition|(
name|NumElements
operator|==
literal|16
condition|)
return|return
name|MVT
operator|::
name|v16i1
return|;
if|if
condition|(
name|NumElements
operator|==
literal|32
condition|)
return|return
name|MVT
operator|::
name|v32i1
return|;
if|if
condition|(
name|NumElements
operator|==
literal|64
condition|)
return|return
name|MVT
operator|::
name|v64i1
return|;
if|if
condition|(
name|NumElements
operator|==
literal|512
condition|)
return|return
name|MVT
operator|::
name|v512i1
return|;
if|if
condition|(
name|NumElements
operator|==
literal|1024
condition|)
return|return
name|MVT
operator|::
name|v1024i1
return|;
break|break;
case|case
name|MVT
operator|::
name|i8
case|:
if|if
condition|(
name|NumElements
operator|==
literal|1
condition|)
return|return
name|MVT
operator|::
name|v1i8
return|;
if|if
condition|(
name|NumElements
operator|==
literal|2
condition|)
return|return
name|MVT
operator|::
name|v2i8
return|;
if|if
condition|(
name|NumElements
operator|==
literal|4
condition|)
return|return
name|MVT
operator|::
name|v4i8
return|;
if|if
condition|(
name|NumElements
operator|==
literal|8
condition|)
return|return
name|MVT
operator|::
name|v8i8
return|;
if|if
condition|(
name|NumElements
operator|==
literal|16
condition|)
return|return
name|MVT
operator|::
name|v16i8
return|;
if|if
condition|(
name|NumElements
operator|==
literal|32
condition|)
return|return
name|MVT
operator|::
name|v32i8
return|;
if|if
condition|(
name|NumElements
operator|==
literal|64
condition|)
return|return
name|MVT
operator|::
name|v64i8
return|;
if|if
condition|(
name|NumElements
operator|==
literal|128
condition|)
return|return
name|MVT
operator|::
name|v128i8
return|;
if|if
condition|(
name|NumElements
operator|==
literal|256
condition|)
return|return
name|MVT
operator|::
name|v256i8
return|;
break|break;
case|case
name|MVT
operator|::
name|i16
case|:
if|if
condition|(
name|NumElements
operator|==
literal|1
condition|)
return|return
name|MVT
operator|::
name|v1i16
return|;
if|if
condition|(
name|NumElements
operator|==
literal|2
condition|)
return|return
name|MVT
operator|::
name|v2i16
return|;
if|if
condition|(
name|NumElements
operator|==
literal|4
condition|)
return|return
name|MVT
operator|::
name|v4i16
return|;
if|if
condition|(
name|NumElements
operator|==
literal|8
condition|)
return|return
name|MVT
operator|::
name|v8i16
return|;
if|if
condition|(
name|NumElements
operator|==
literal|16
condition|)
return|return
name|MVT
operator|::
name|v16i16
return|;
if|if
condition|(
name|NumElements
operator|==
literal|32
condition|)
return|return
name|MVT
operator|::
name|v32i16
return|;
if|if
condition|(
name|NumElements
operator|==
literal|64
condition|)
return|return
name|MVT
operator|::
name|v64i16
return|;
if|if
condition|(
name|NumElements
operator|==
literal|128
condition|)
return|return
name|MVT
operator|::
name|v128i16
return|;
break|break;
case|case
name|MVT
operator|::
name|i32
case|:
if|if
condition|(
name|NumElements
operator|==
literal|1
condition|)
return|return
name|MVT
operator|::
name|v1i32
return|;
if|if
condition|(
name|NumElements
operator|==
literal|2
condition|)
return|return
name|MVT
operator|::
name|v2i32
return|;
if|if
condition|(
name|NumElements
operator|==
literal|4
condition|)
return|return
name|MVT
operator|::
name|v4i32
return|;
if|if
condition|(
name|NumElements
operator|==
literal|8
condition|)
return|return
name|MVT
operator|::
name|v8i32
return|;
if|if
condition|(
name|NumElements
operator|==
literal|16
condition|)
return|return
name|MVT
operator|::
name|v16i32
return|;
if|if
condition|(
name|NumElements
operator|==
literal|32
condition|)
return|return
name|MVT
operator|::
name|v32i32
return|;
if|if
condition|(
name|NumElements
operator|==
literal|64
condition|)
return|return
name|MVT
operator|::
name|v64i32
return|;
break|break;
case|case
name|MVT
operator|::
name|i64
case|:
if|if
condition|(
name|NumElements
operator|==
literal|1
condition|)
return|return
name|MVT
operator|::
name|v1i64
return|;
if|if
condition|(
name|NumElements
operator|==
literal|2
condition|)
return|return
name|MVT
operator|::
name|v2i64
return|;
if|if
condition|(
name|NumElements
operator|==
literal|4
condition|)
return|return
name|MVT
operator|::
name|v4i64
return|;
if|if
condition|(
name|NumElements
operator|==
literal|8
condition|)
return|return
name|MVT
operator|::
name|v8i64
return|;
if|if
condition|(
name|NumElements
operator|==
literal|16
condition|)
return|return
name|MVT
operator|::
name|v16i64
return|;
if|if
condition|(
name|NumElements
operator|==
literal|32
condition|)
return|return
name|MVT
operator|::
name|v32i64
return|;
break|break;
case|case
name|MVT
operator|::
name|i128
case|:
if|if
condition|(
name|NumElements
operator|==
literal|1
condition|)
return|return
name|MVT
operator|::
name|v1i128
return|;
break|break;
case|case
name|MVT
operator|::
name|f16
case|:
if|if
condition|(
name|NumElements
operator|==
literal|2
condition|)
return|return
name|MVT
operator|::
name|v2f16
return|;
if|if
condition|(
name|NumElements
operator|==
literal|4
condition|)
return|return
name|MVT
operator|::
name|v4f16
return|;
if|if
condition|(
name|NumElements
operator|==
literal|8
condition|)
return|return
name|MVT
operator|::
name|v8f16
return|;
break|break;
case|case
name|MVT
operator|::
name|f32
case|:
if|if
condition|(
name|NumElements
operator|==
literal|1
condition|)
return|return
name|MVT
operator|::
name|v1f32
return|;
if|if
condition|(
name|NumElements
operator|==
literal|2
condition|)
return|return
name|MVT
operator|::
name|v2f32
return|;
if|if
condition|(
name|NumElements
operator|==
literal|4
condition|)
return|return
name|MVT
operator|::
name|v4f32
return|;
if|if
condition|(
name|NumElements
operator|==
literal|8
condition|)
return|return
name|MVT
operator|::
name|v8f32
return|;
if|if
condition|(
name|NumElements
operator|==
literal|16
condition|)
return|return
name|MVT
operator|::
name|v16f32
return|;
break|break;
case|case
name|MVT
operator|::
name|f64
case|:
if|if
condition|(
name|NumElements
operator|==
literal|1
condition|)
return|return
name|MVT
operator|::
name|v1f64
return|;
if|if
condition|(
name|NumElements
operator|==
literal|2
condition|)
return|return
name|MVT
operator|::
name|v2f64
return|;
if|if
condition|(
name|NumElements
operator|==
literal|4
condition|)
return|return
name|MVT
operator|::
name|v4f64
return|;
if|if
condition|(
name|NumElements
operator|==
literal|8
condition|)
return|return
name|MVT
operator|::
name|v8f64
return|;
break|break;
block|}
return|return
operator|(
name|MVT
operator|::
name|SimpleValueType
operator|)
operator|(
name|MVT
operator|::
name|INVALID_SIMPLE_VALUE_TYPE
operator|)
return|;
block|}
specifier|static
name|MVT
name|getScalableVectorVT
parameter_list|(
name|MVT
name|VT
parameter_list|,
name|unsigned
name|NumElements
parameter_list|)
block|{
switch|switch
condition|(
name|VT
operator|.
name|SimpleTy
condition|)
block|{
default|default:
break|break;
case|case
name|MVT
operator|::
name|i1
case|:
if|if
condition|(
name|NumElements
operator|==
literal|2
condition|)
return|return
name|MVT
operator|::
name|nxv2i1
return|;
if|if
condition|(
name|NumElements
operator|==
literal|4
condition|)
return|return
name|MVT
operator|::
name|nxv4i1
return|;
if|if
condition|(
name|NumElements
operator|==
literal|8
condition|)
return|return
name|MVT
operator|::
name|nxv8i1
return|;
if|if
condition|(
name|NumElements
operator|==
literal|16
condition|)
return|return
name|MVT
operator|::
name|nxv16i1
return|;
if|if
condition|(
name|NumElements
operator|==
literal|32
condition|)
return|return
name|MVT
operator|::
name|nxv32i1
return|;
break|break;
case|case
name|MVT
operator|::
name|i8
case|:
if|if
condition|(
name|NumElements
operator|==
literal|1
condition|)
return|return
name|MVT
operator|::
name|nxv1i8
return|;
if|if
condition|(
name|NumElements
operator|==
literal|2
condition|)
return|return
name|MVT
operator|::
name|nxv2i8
return|;
if|if
condition|(
name|NumElements
operator|==
literal|4
condition|)
return|return
name|MVT
operator|::
name|nxv4i8
return|;
if|if
condition|(
name|NumElements
operator|==
literal|8
condition|)
return|return
name|MVT
operator|::
name|nxv8i8
return|;
if|if
condition|(
name|NumElements
operator|==
literal|16
condition|)
return|return
name|MVT
operator|::
name|nxv16i8
return|;
if|if
condition|(
name|NumElements
operator|==
literal|32
condition|)
return|return
name|MVT
operator|::
name|nxv32i8
return|;
break|break;
case|case
name|MVT
operator|::
name|i16
case|:
if|if
condition|(
name|NumElements
operator|==
literal|1
condition|)
return|return
name|MVT
operator|::
name|nxv1i16
return|;
if|if
condition|(
name|NumElements
operator|==
literal|2
condition|)
return|return
name|MVT
operator|::
name|nxv2i16
return|;
if|if
condition|(
name|NumElements
operator|==
literal|4
condition|)
return|return
name|MVT
operator|::
name|nxv4i16
return|;
if|if
condition|(
name|NumElements
operator|==
literal|8
condition|)
return|return
name|MVT
operator|::
name|nxv8i16
return|;
if|if
condition|(
name|NumElements
operator|==
literal|16
condition|)
return|return
name|MVT
operator|::
name|nxv16i16
return|;
if|if
condition|(
name|NumElements
operator|==
literal|32
condition|)
return|return
name|MVT
operator|::
name|nxv32i16
return|;
break|break;
case|case
name|MVT
operator|::
name|i32
case|:
if|if
condition|(
name|NumElements
operator|==
literal|1
condition|)
return|return
name|MVT
operator|::
name|nxv1i32
return|;
if|if
condition|(
name|NumElements
operator|==
literal|2
condition|)
return|return
name|MVT
operator|::
name|nxv2i32
return|;
if|if
condition|(
name|NumElements
operator|==
literal|4
condition|)
return|return
name|MVT
operator|::
name|nxv4i32
return|;
if|if
condition|(
name|NumElements
operator|==
literal|8
condition|)
return|return
name|MVT
operator|::
name|nxv8i32
return|;
if|if
condition|(
name|NumElements
operator|==
literal|16
condition|)
return|return
name|MVT
operator|::
name|nxv16i32
return|;
if|if
condition|(
name|NumElements
operator|==
literal|32
condition|)
return|return
name|MVT
operator|::
name|nxv32i32
return|;
break|break;
case|case
name|MVT
operator|::
name|i64
case|:
if|if
condition|(
name|NumElements
operator|==
literal|1
condition|)
return|return
name|MVT
operator|::
name|nxv1i64
return|;
if|if
condition|(
name|NumElements
operator|==
literal|2
condition|)
return|return
name|MVT
operator|::
name|nxv2i64
return|;
if|if
condition|(
name|NumElements
operator|==
literal|4
condition|)
return|return
name|MVT
operator|::
name|nxv4i64
return|;
if|if
condition|(
name|NumElements
operator|==
literal|8
condition|)
return|return
name|MVT
operator|::
name|nxv8i64
return|;
if|if
condition|(
name|NumElements
operator|==
literal|16
condition|)
return|return
name|MVT
operator|::
name|nxv16i64
return|;
if|if
condition|(
name|NumElements
operator|==
literal|32
condition|)
return|return
name|MVT
operator|::
name|nxv32i64
return|;
break|break;
case|case
name|MVT
operator|::
name|f16
case|:
if|if
condition|(
name|NumElements
operator|==
literal|2
condition|)
return|return
name|MVT
operator|::
name|nxv2f16
return|;
if|if
condition|(
name|NumElements
operator|==
literal|4
condition|)
return|return
name|MVT
operator|::
name|nxv4f16
return|;
if|if
condition|(
name|NumElements
operator|==
literal|8
condition|)
return|return
name|MVT
operator|::
name|nxv8f16
return|;
break|break;
case|case
name|MVT
operator|::
name|f32
case|:
if|if
condition|(
name|NumElements
operator|==
literal|1
condition|)
return|return
name|MVT
operator|::
name|nxv1f32
return|;
if|if
condition|(
name|NumElements
operator|==
literal|2
condition|)
return|return
name|MVT
operator|::
name|nxv2f32
return|;
if|if
condition|(
name|NumElements
operator|==
literal|4
condition|)
return|return
name|MVT
operator|::
name|nxv4f32
return|;
if|if
condition|(
name|NumElements
operator|==
literal|8
condition|)
return|return
name|MVT
operator|::
name|nxv8f32
return|;
if|if
condition|(
name|NumElements
operator|==
literal|16
condition|)
return|return
name|MVT
operator|::
name|nxv16f32
return|;
break|break;
case|case
name|MVT
operator|::
name|f64
case|:
if|if
condition|(
name|NumElements
operator|==
literal|1
condition|)
return|return
name|MVT
operator|::
name|nxv1f64
return|;
if|if
condition|(
name|NumElements
operator|==
literal|2
condition|)
return|return
name|MVT
operator|::
name|nxv2f64
return|;
if|if
condition|(
name|NumElements
operator|==
literal|4
condition|)
return|return
name|MVT
operator|::
name|nxv4f64
return|;
if|if
condition|(
name|NumElements
operator|==
literal|8
condition|)
return|return
name|MVT
operator|::
name|nxv8f64
return|;
break|break;
block|}
return|return
operator|(
name|MVT
operator|::
name|SimpleValueType
operator|)
operator|(
name|MVT
operator|::
name|INVALID_SIMPLE_VALUE_TYPE
operator|)
return|;
block|}
specifier|static
name|MVT
name|getVectorVT
parameter_list|(
name|MVT
name|VT
parameter_list|,
name|unsigned
name|NumElements
parameter_list|,
name|bool
name|IsScalable
parameter_list|)
block|{
if|if
condition|(
name|IsScalable
condition|)
return|return
name|getScalableVectorVT
argument_list|(
name|VT
argument_list|,
name|NumElements
argument_list|)
return|;
return|return
name|getVectorVT
argument_list|(
name|VT
argument_list|,
name|NumElements
argument_list|)
return|;
block|}
specifier|static
name|MVT
name|getVectorVT
argument_list|(
name|MVT
name|VT
argument_list|,
name|MVT
operator|::
name|ElementCount
name|EC
argument_list|)
block|{
if|if
condition|(
name|EC
operator|.
name|Scalable
condition|)
return|return
name|getScalableVectorVT
argument_list|(
name|VT
argument_list|,
name|EC
operator|.
name|Min
argument_list|)
return|;
return|return
name|getVectorVT
argument_list|(
name|VT
argument_list|,
name|EC
operator|.
name|Min
argument_list|)
return|;
block|}
comment|/// Return the value type corresponding to the specified type.  This returns
comment|/// all pointers as iPTR.  If HandleUnknown is true, unknown types are
comment|/// returned as Other, otherwise they are invalid.
specifier|static
name|MVT
name|getVT
parameter_list|(
name|Type
modifier|*
name|Ty
parameter_list|,
name|bool
name|HandleUnknown
init|=
name|false
parameter_list|)
function_decl|;
name|private
label|:
comment|/// A simple iterator over the MVT::SimpleValueType enum.
struct|struct
name|mvt_iterator
block|{
name|SimpleValueType
name|VT
decl_stmt|;
name|mvt_iterator
argument_list|(
argument|SimpleValueType VT
argument_list|)
block|:
name|VT
argument_list|(
argument|VT
argument_list|)
block|{}
name|MVT
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|VT
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|mvt_iterator
operator|&
name|LHS
operator|)
specifier|const
block|{
return|return
name|VT
operator|!=
name|LHS
operator|.
name|VT
return|;
block|}
name|mvt_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|VT
operator|=
operator|(
name|MVT
operator|::
name|SimpleValueType
operator|)
operator|(
operator|(
name|int
operator|)
name|VT
operator|+
literal|1
operator|)
block|;
name|assert
argument_list|(
operator|(
name|int
operator|)
name|VT
operator|<=
name|MVT
operator|::
name|MAX_ALLOWED_VALUETYPE
operator|&&
literal|"MVT iterator overflowed."
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
block|}
struct|;
comment|/// A range of the MVT::SimpleValueType enum.
typedef|typedef
name|iterator_range
operator|<
name|mvt_iterator
operator|>
name|mvt_range
expr_stmt|;
name|public
label|:
comment|/// SimpleValueType Iteration
comment|/// @{
specifier|static
name|mvt_range
name|all_valuetypes
parameter_list|()
block|{
return|return
name|mvt_range
argument_list|(
name|MVT
operator|::
name|FIRST_VALUETYPE
argument_list|,
name|MVT
operator|::
name|LAST_VALUETYPE
argument_list|)
return|;
block|}
specifier|static
name|mvt_range
name|integer_valuetypes
parameter_list|()
block|{
return|return
name|mvt_range
argument_list|(
name|MVT
operator|::
name|FIRST_INTEGER_VALUETYPE
argument_list|,
operator|(
name|MVT
operator|::
name|SimpleValueType
operator|)
operator|(
name|MVT
operator|::
name|LAST_INTEGER_VALUETYPE
operator|+
literal|1
operator|)
argument_list|)
return|;
block|}
specifier|static
name|mvt_range
name|fp_valuetypes
parameter_list|()
block|{
return|return
name|mvt_range
argument_list|(
name|MVT
operator|::
name|FIRST_FP_VALUETYPE
argument_list|,
operator|(
name|MVT
operator|::
name|SimpleValueType
operator|)
operator|(
name|MVT
operator|::
name|LAST_FP_VALUETYPE
operator|+
literal|1
operator|)
argument_list|)
return|;
block|}
specifier|static
name|mvt_range
name|vector_valuetypes
parameter_list|()
block|{
return|return
name|mvt_range
argument_list|(
name|MVT
operator|::
name|FIRST_VECTOR_VALUETYPE
argument_list|,
operator|(
name|MVT
operator|::
name|SimpleValueType
operator|)
operator|(
name|MVT
operator|::
name|LAST_VECTOR_VALUETYPE
operator|+
literal|1
operator|)
argument_list|)
return|;
block|}
specifier|static
name|mvt_range
name|integer_vector_valuetypes
parameter_list|()
block|{
return|return
name|mvt_range
argument_list|(
name|MVT
operator|::
name|FIRST_INTEGER_VECTOR_VALUETYPE
argument_list|,
operator|(
name|MVT
operator|::
name|SimpleValueType
operator|)
operator|(
name|MVT
operator|::
name|LAST_INTEGER_VECTOR_VALUETYPE
operator|+
literal|1
operator|)
argument_list|)
return|;
block|}
specifier|static
name|mvt_range
name|fp_vector_valuetypes
parameter_list|()
block|{
return|return
name|mvt_range
argument_list|(
name|MVT
operator|::
name|FIRST_FP_VECTOR_VALUETYPE
argument_list|,
operator|(
name|MVT
operator|::
name|SimpleValueType
operator|)
operator|(
name|MVT
operator|::
name|LAST_FP_VECTOR_VALUETYPE
operator|+
literal|1
operator|)
argument_list|)
return|;
block|}
specifier|static
name|mvt_range
name|integer_scalable_vector_valuetypes
parameter_list|()
block|{
return|return
name|mvt_range
argument_list|(
name|MVT
operator|::
name|FIRST_INTEGER_SCALABLE_VALUETYPE
argument_list|,
operator|(
name|MVT
operator|::
name|SimpleValueType
operator|)
operator|(
name|MVT
operator|::
name|LAST_INTEGER_SCALABLE_VALUETYPE
operator|+
literal|1
operator|)
argument_list|)
return|;
block|}
specifier|static
name|mvt_range
name|fp_scalable_vector_valuetypes
parameter_list|()
block|{
return|return
name|mvt_range
argument_list|(
name|MVT
operator|::
name|FIRST_FP_SCALABLE_VALUETYPE
argument_list|,
operator|(
name|MVT
operator|::
name|SimpleValueType
operator|)
operator|(
name|MVT
operator|::
name|LAST_FP_SCALABLE_VALUETYPE
operator|+
literal|1
operator|)
argument_list|)
return|;
block|}
comment|/// @}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// End llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

