begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- llvm/CodeGen/WinEHFuncInfo.h ----------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Data structures and associated state for Windows exception handling schemes.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CODEGEN_WINEHFUNCINFO_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CODEGEN_WINEHFUNCINFO_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/PointerUnion.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/TinyPtrVector.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|AllocaInst
decl_stmt|;
name|class
name|BasicBlock
decl_stmt|;
name|class
name|CatchReturnInst
decl_stmt|;
name|class
name|Constant
decl_stmt|;
name|class
name|Function
decl_stmt|;
name|class
name|GlobalVariable
decl_stmt|;
name|class
name|InvokeInst
decl_stmt|;
name|class
name|IntrinsicInst
decl_stmt|;
name|class
name|LandingPadInst
decl_stmt|;
name|class
name|MCExpr
decl_stmt|;
name|class
name|MCSymbol
decl_stmt|;
name|class
name|MachineBasicBlock
decl_stmt|;
name|class
name|Value
decl_stmt|;
comment|// The following structs respresent the .xdata tables for various
comment|// Windows-related EH personalities.
typedef|typedef
name|PointerUnion
operator|<
specifier|const
name|BasicBlock
operator|*
operator|,
name|MachineBasicBlock
operator|*
operator|>
name|MBBOrBasicBlock
expr_stmt|;
struct|struct
name|CxxUnwindMapEntry
block|{
name|int
name|ToState
decl_stmt|;
name|MBBOrBasicBlock
name|Cleanup
decl_stmt|;
block|}
struct|;
comment|/// Similar to CxxUnwindMapEntry, but supports SEH filters.
struct|struct
name|SEHUnwindMapEntry
block|{
comment|/// If unwinding continues through this handler, transition to the handler at
comment|/// this state. This indexes into SEHUnwindMap.
name|int
name|ToState
init|=
operator|-
literal|1
decl_stmt|;
name|bool
name|IsFinally
init|=
name|false
decl_stmt|;
comment|/// Holds the filter expression function.
specifier|const
name|Function
modifier|*
name|Filter
init|=
name|nullptr
decl_stmt|;
comment|/// Holds the __except or __finally basic block.
name|MBBOrBasicBlock
name|Handler
decl_stmt|;
block|}
struct|;
struct|struct
name|WinEHHandlerType
block|{
name|int
name|Adjectives
decl_stmt|;
comment|/// The CatchObj starts out life as an LLVM alloca and is eventually turned
comment|/// frame index.
union|union
block|{
specifier|const
name|AllocaInst
modifier|*
name|Alloca
decl_stmt|;
name|int
name|FrameIndex
decl_stmt|;
block|}
name|CatchObj
init|=
block|{}
union|;
name|GlobalVariable
modifier|*
name|TypeDescriptor
decl_stmt|;
name|MBBOrBasicBlock
name|Handler
decl_stmt|;
block|}
struct|;
struct|struct
name|WinEHTryBlockMapEntry
block|{
name|int
name|TryLow
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|TryHigh
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|CatchHigh
init|=
operator|-
literal|1
decl_stmt|;
name|SmallVector
operator|<
name|WinEHHandlerType
operator|,
literal|1
operator|>
name|HandlerArray
expr_stmt|;
block|}
struct|;
name|enum
name|class
name|ClrHandlerType
block|{
name|Catch
operator|,
name|Finally
operator|,
name|Fault
operator|,
name|Filter
block|}
empty_stmt|;
struct|struct
name|ClrEHUnwindMapEntry
block|{
name|MBBOrBasicBlock
name|Handler
decl_stmt|;
name|uint32_t
name|TypeToken
decl_stmt|;
name|int
name|HandlerParentState
decl_stmt|;
comment|///< Outer handler enclosing this entry's handler
name|int
name|TryParentState
decl_stmt|;
comment|///< Outer try region enclosing this entry's try region,
comment|///< treating later catches on same try as "outer"
name|ClrHandlerType
name|HandlerType
decl_stmt|;
block|}
struct|;
struct|struct
name|WinEHFuncInfo
block|{
name|DenseMap
operator|<
specifier|const
name|Instruction
operator|*
operator|,
name|int
operator|>
name|EHPadStateMap
expr_stmt|;
name|DenseMap
operator|<
specifier|const
name|FuncletPadInst
operator|*
operator|,
name|int
operator|>
name|FuncletBaseStateMap
expr_stmt|;
name|DenseMap
operator|<
specifier|const
name|InvokeInst
operator|*
operator|,
name|int
operator|>
name|InvokeStateMap
expr_stmt|;
name|DenseMap
operator|<
name|MCSymbol
operator|*
operator|,
name|std
operator|::
name|pair
operator|<
name|int
operator|,
name|MCSymbol
operator|*
operator|>>
name|LabelToStateMap
expr_stmt|;
name|SmallVector
operator|<
name|CxxUnwindMapEntry
operator|,
literal|4
operator|>
name|CxxUnwindMap
expr_stmt|;
name|SmallVector
operator|<
name|WinEHTryBlockMapEntry
operator|,
literal|4
operator|>
name|TryBlockMap
expr_stmt|;
name|SmallVector
operator|<
name|SEHUnwindMapEntry
operator|,
literal|4
operator|>
name|SEHUnwindMap
expr_stmt|;
name|SmallVector
operator|<
name|ClrEHUnwindMapEntry
operator|,
literal|4
operator|>
name|ClrEHUnwindMap
expr_stmt|;
name|int
name|UnwindHelpFrameIdx
init|=
name|INT_MAX
decl_stmt|;
name|int
name|PSPSymFrameIdx
init|=
name|INT_MAX
decl_stmt|;
name|int
name|getLastStateNumber
argument_list|()
specifier|const
block|{
return|return
name|CxxUnwindMap
operator|.
name|size
argument_list|()
operator|-
literal|1
return|;
block|}
name|void
name|addIPToStateRange
parameter_list|(
specifier|const
name|InvokeInst
modifier|*
name|II
parameter_list|,
name|MCSymbol
modifier|*
name|InvokeBegin
parameter_list|,
name|MCSymbol
modifier|*
name|InvokeEnd
parameter_list|)
function_decl|;
name|int
name|EHRegNodeFrameIndex
init|=
name|INT_MAX
decl_stmt|;
name|int
name|EHRegNodeEndOffset
init|=
name|INT_MAX
decl_stmt|;
name|int
name|SEHSetFrameOffset
init|=
name|INT_MAX
decl_stmt|;
name|WinEHFuncInfo
argument_list|()
expr_stmt|;
block|}
struct|;
comment|/// Analyze the IR in ParentFn and it's handlers to build WinEHFuncInfo, which
comment|/// describes the state numbers and tables used by __CxxFrameHandler3. This
comment|/// analysis assumes that WinEHPrepare has already been run.
name|void
name|calculateWinCXXEHStateNumbers
parameter_list|(
specifier|const
name|Function
modifier|*
name|ParentFn
parameter_list|,
name|WinEHFuncInfo
modifier|&
name|FuncInfo
parameter_list|)
function_decl|;
name|void
name|calculateSEHStateNumbers
parameter_list|(
specifier|const
name|Function
modifier|*
name|ParentFn
parameter_list|,
name|WinEHFuncInfo
modifier|&
name|FuncInfo
parameter_list|)
function_decl|;
name|void
name|calculateClrEHStateNumbers
parameter_list|(
specifier|const
name|Function
modifier|*
name|Fn
parameter_list|,
name|WinEHFuncInfo
modifier|&
name|FuncInfo
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_CODEGEN_WINEHFUNCINFO_H
end_comment

end_unit

