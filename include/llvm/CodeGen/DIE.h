begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- lib/CodeGen/DIE.h - DWARF Info Entries -----------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Data structures for DWARF info entries.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_CODEGEN_ASMPRINTER_DIE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_CODEGEN_ASMPRINTER_DIE_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/FoldingSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/DwarfStringPoolEntry.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Dwarf.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|AsmPrinter
decl_stmt|;
name|class
name|MCExpr
decl_stmt|;
name|class
name|MCSymbol
decl_stmt|;
name|class
name|raw_ostream
decl_stmt|;
name|class
name|DwarfTypeUnit
decl_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|/// DIEAbbrevData - Dwarf abbreviation data, describes one attribute of a
comment|/// Dwarf abbreviation.
name|class
name|DIEAbbrevData
block|{
comment|/// Attribute - Dwarf attribute code.
comment|///
name|dwarf
operator|::
name|Attribute
name|Attribute
expr_stmt|;
comment|/// Form - Dwarf form code.
comment|///
name|dwarf
operator|::
name|Form
name|Form
expr_stmt|;
name|public
label|:
name|DIEAbbrevData
argument_list|(
argument|dwarf::Attribute A
argument_list|,
argument|dwarf::Form F
argument_list|)
block|:
name|Attribute
argument_list|(
name|A
argument_list|)
operator|,
name|Form
argument_list|(
argument|F
argument_list|)
block|{}
comment|// Accessors.
name|dwarf
operator|::
name|Attribute
name|getAttribute
argument_list|()
specifier|const
block|{
return|return
name|Attribute
return|;
block|}
name|dwarf
operator|::
name|Form
name|getForm
argument_list|()
specifier|const
block|{
return|return
name|Form
return|;
block|}
comment|/// Profile - Used to gather unique data for the abbreviation folding set.
comment|///
name|void
name|Profile
argument_list|(
name|FoldingSetNodeID
operator|&
name|ID
argument_list|)
decl|const
decl_stmt|;
block|}
empty_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|/// DIEAbbrev - Dwarf abbreviation, describes the organization of a debug
comment|/// information object.
name|class
name|DIEAbbrev
range|:
name|public
name|FoldingSetNode
block|{
comment|/// Unique number for node.
comment|///
name|unsigned
name|Number
block|;
comment|/// Tag - Dwarf tag code.
comment|///
name|dwarf
operator|::
name|Tag
name|Tag
block|;
comment|/// Children - Whether or not this node has children.
comment|///
comment|// This cheats a bit in all of the uses since the values in the standard
comment|// are 0 and 1 for no children and children respectively.
name|bool
name|Children
block|;
comment|/// Data - Raw data bytes for abbreviation.
comment|///
name|SmallVector
operator|<
name|DIEAbbrevData
block|,
literal|12
operator|>
name|Data
block|;
name|public
operator|:
name|DIEAbbrev
argument_list|(
argument|dwarf::Tag T
argument_list|,
argument|bool C
argument_list|)
operator|:
name|Tag
argument_list|(
name|T
argument_list|)
block|,
name|Children
argument_list|(
name|C
argument_list|)
block|,
name|Data
argument_list|()
block|{}
comment|// Accessors.
name|dwarf
operator|::
name|Tag
name|getTag
argument_list|()
specifier|const
block|{
return|return
name|Tag
return|;
block|}
name|unsigned
name|getNumber
argument_list|()
specifier|const
block|{
return|return
name|Number
return|;
block|}
name|bool
name|hasChildren
argument_list|()
specifier|const
block|{
return|return
name|Children
return|;
block|}
specifier|const
name|SmallVectorImpl
operator|<
name|DIEAbbrevData
operator|>
operator|&
name|getData
argument_list|()
specifier|const
block|{
return|return
name|Data
return|;
block|}
name|void
name|setChildrenFlag
argument_list|(
argument|bool hasChild
argument_list|)
block|{
name|Children
operator|=
name|hasChild
block|; }
name|void
name|setNumber
argument_list|(
argument|unsigned N
argument_list|)
block|{
name|Number
operator|=
name|N
block|; }
comment|/// AddAttribute - Adds another set of attribute information to the
comment|/// abbreviation.
name|void
name|AddAttribute
argument_list|(
argument|dwarf::Attribute Attribute
argument_list|,
argument|dwarf::Form Form
argument_list|)
block|{
name|Data
operator|.
name|push_back
argument_list|(
name|DIEAbbrevData
argument_list|(
name|Attribute
argument_list|,
name|Form
argument_list|)
argument_list|)
block|;   }
comment|/// Profile - Used to gather unique data for the abbreviation folding set.
comment|///
name|void
name|Profile
argument_list|(
argument|FoldingSetNodeID&ID
argument_list|)
specifier|const
block|;
comment|/// Emit - Print the abbreviation using the specified asm printer.
comment|///
name|void
name|Emit
argument_list|(
argument|const AsmPrinter *AP
argument_list|)
specifier|const
block|;
ifndef|#
directive|ifndef
name|NDEBUG
name|void
name|print
argument_list|(
name|raw_ostream
operator|&
name|O
argument_list|)
block|;
name|void
name|dump
argument_list|()
block|;
endif|#
directive|endif
block|}
decl_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|/// DIE - A structured debug information entry.  Has an abbreviation which
comment|/// describes its organization.
name|class
name|DIEValue
decl_stmt|;
name|class
name|DIE
block|{
name|protected
label|:
comment|/// Offset - Offset in debug info section.
comment|///
name|unsigned
name|Offset
decl_stmt|;
comment|/// Size - Size of instance + children.
comment|///
name|unsigned
name|Size
decl_stmt|;
comment|/// Abbrev - Buffer for constructing abbreviation.
comment|///
name|DIEAbbrev
name|Abbrev
decl_stmt|;
comment|/// Children DIEs.
comment|///
comment|// This can't be a vector<DIE> because pointer validity is requirent for the
comment|// Parent pointer and DIEEntry.
comment|// It can't be a list<DIE> because some clients need pointer validity before
comment|// the object has been added to any child list
comment|// (eg: DwarfUnit::constructVariableDIE). These aren't insurmountable, but may
comment|// be more convoluted than beneficial.
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|DIE
operator|>>
name|Children
expr_stmt|;
name|DIE
modifier|*
name|Parent
decl_stmt|;
comment|/// Attribute values.
comment|///
name|SmallVector
operator|<
name|DIEValue
operator|*
operator|,
literal|12
operator|>
name|Values
expr_stmt|;
name|protected
label|:
name|DIE
argument_list|()
operator|:
name|Offset
argument_list|(
literal|0
argument_list|)
operator|,
name|Size
argument_list|(
literal|0
argument_list|)
operator|,
name|Abbrev
argument_list|(
operator|(
name|dwarf
operator|::
name|Tag
operator|)
literal|0
argument_list|,
name|dwarf
operator|::
name|DW_CHILDREN_no
argument_list|)
operator|,
name|Parent
argument_list|(
argument|nullptr
argument_list|)
block|{}
name|public
operator|:
name|explicit
name|DIE
argument_list|(
argument|dwarf::Tag Tag
argument_list|)
operator|:
name|Offset
argument_list|(
literal|0
argument_list|)
operator|,
name|Size
argument_list|(
literal|0
argument_list|)
operator|,
name|Abbrev
argument_list|(
operator|(
name|dwarf
operator|::
name|Tag
operator|)
name|Tag
argument_list|,
name|dwarf
operator|::
name|DW_CHILDREN_no
argument_list|)
operator|,
name|Parent
argument_list|(
argument|nullptr
argument_list|)
block|{}
comment|// Accessors.
name|DIEAbbrev
operator|&
name|getAbbrev
argument_list|()
block|{
return|return
name|Abbrev
return|;
block|}
specifier|const
name|DIEAbbrev
operator|&
name|getAbbrev
argument_list|()
specifier|const
block|{
return|return
name|Abbrev
return|;
block|}
name|unsigned
name|getAbbrevNumber
argument_list|()
specifier|const
block|{
return|return
name|Abbrev
operator|.
name|getNumber
argument_list|()
return|;
block|}
name|dwarf
operator|::
name|Tag
name|getTag
argument_list|()
specifier|const
block|{
return|return
name|Abbrev
operator|.
name|getTag
argument_list|()
return|;
block|}
name|unsigned
name|getOffset
argument_list|()
specifier|const
block|{
return|return
name|Offset
return|;
block|}
name|unsigned
name|getSize
argument_list|()
specifier|const
block|{
return|return
name|Size
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|DIE
operator|>>
operator|&
name|getChildren
argument_list|()
specifier|const
block|{
return|return
name|Children
return|;
block|}
specifier|const
name|SmallVectorImpl
operator|<
name|DIEValue
operator|*
operator|>
operator|&
name|getValues
argument_list|()
specifier|const
block|{
return|return
name|Values
return|;
block|}
name|DIE
operator|*
name|getParent
argument_list|()
specifier|const
block|{
return|return
name|Parent
return|;
block|}
comment|/// Climb up the parent chain to get the compile or type unit DIE this DIE
comment|/// belongs to.
specifier|const
name|DIE
operator|*
name|getUnit
argument_list|()
specifier|const
expr_stmt|;
comment|/// Similar to getUnit, returns null when DIE is not added to an
comment|/// owner yet.
specifier|const
name|DIE
operator|*
name|getUnitOrNull
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setOffset
parameter_list|(
name|unsigned
name|O
parameter_list|)
block|{
name|Offset
operator|=
name|O
expr_stmt|;
block|}
name|void
name|setSize
parameter_list|(
name|unsigned
name|S
parameter_list|)
block|{
name|Size
operator|=
name|S
expr_stmt|;
block|}
comment|/// addValue - Add a value and attributes to a DIE.
comment|///
name|void
name|addValue
argument_list|(
name|dwarf
operator|::
name|Attribute
name|Attribute
argument_list|,
name|dwarf
operator|::
name|Form
name|Form
argument_list|,
name|DIEValue
operator|*
name|Value
argument_list|)
block|{
name|Abbrev
operator|.
name|AddAttribute
argument_list|(
name|Attribute
argument_list|,
name|Form
argument_list|)
expr_stmt|;
name|Values
operator|.
name|push_back
argument_list|(
name|Value
argument_list|)
expr_stmt|;
block|}
comment|/// addChild - Add a child to the DIE.
comment|///
name|void
name|addChild
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|DIE
operator|>
name|Child
argument_list|)
block|{
name|assert
argument_list|(
operator|!
name|Child
operator|->
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|Abbrev
operator|.
name|setChildrenFlag
argument_list|(
name|dwarf
operator|::
name|DW_CHILDREN_yes
argument_list|)
expr_stmt|;
name|Child
operator|->
name|Parent
operator|=
name|this
expr_stmt|;
name|Children
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|Child
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/// findAttribute - Find a value in the DIE with the attribute given,
comment|/// returns NULL if no such attribute exists.
name|DIEValue
modifier|*
name|findAttribute
argument_list|(
name|dwarf
operator|::
name|Attribute
name|Attribute
argument_list|)
decl|const
decl_stmt|;
ifndef|#
directive|ifndef
name|NDEBUG
name|void
name|print
argument_list|(
name|raw_ostream
operator|&
name|O
argument_list|,
name|unsigned
name|IndentCount
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|void
name|dump
parameter_list|()
function_decl|;
endif|#
directive|endif
block|}
empty_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|/// DIEValue - A debug information entry value. Some of these roughly correlate
comment|/// to DWARF attribute classes.
comment|///
name|class
name|DIEValue
block|{
name|public
label|:
enum|enum
name|Type
block|{
name|isInteger
block|,
name|isString
block|,
name|isExpr
block|,
name|isLabel
block|,
name|isDelta
block|,
name|isEntry
block|,
name|isTypeSignature
block|,
name|isBlock
block|,
name|isLoc
block|,
name|isLocList
block|,   }
enum|;
name|private
label|:
comment|/// Ty - Type of data stored in the value.
comment|///
name|Type
name|Ty
decl_stmt|;
name|protected
label|:
name|explicit
name|DIEValue
argument_list|(
argument|Type T
argument_list|)
block|:
name|Ty
argument_list|(
argument|T
argument_list|)
block|{}
operator|~
name|DIEValue
argument_list|()
block|{}
name|public
operator|:
comment|// Accessors
name|Type
name|getType
argument_list|()
specifier|const
block|{
return|return
name|Ty
return|;
block|}
comment|/// EmitValue - Emit value via the Dwarf writer.
comment|///
name|void
name|EmitValue
argument_list|(
specifier|const
name|AsmPrinter
operator|*
name|AP
argument_list|,
name|dwarf
operator|::
name|Form
name|Form
argument_list|)
decl|const
decl_stmt|;
comment|/// SizeOf - Return the size of a value in bytes.
comment|///
name|unsigned
name|SizeOf
argument_list|(
specifier|const
name|AsmPrinter
operator|*
name|AP
argument_list|,
name|dwarf
operator|::
name|Form
name|Form
argument_list|)
decl|const
decl_stmt|;
ifndef|#
directive|ifndef
name|NDEBUG
name|void
name|print
argument_list|(
name|raw_ostream
operator|&
name|O
argument_list|)
decl|const
decl_stmt|;
name|void
name|dump
argument_list|()
specifier|const
expr_stmt|;
endif|#
directive|endif
block|}
empty_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|/// DIEInteger - An integer value DIE.
comment|///
name|class
name|DIEInteger
range|:
name|public
name|DIEValue
block|{
name|friend
name|DIEValue
block|;
name|uint64_t
name|Integer
block|;
name|public
operator|:
name|explicit
name|DIEInteger
argument_list|(
argument|uint64_t I
argument_list|)
operator|:
name|DIEValue
argument_list|(
name|isInteger
argument_list|)
block|,
name|Integer
argument_list|(
argument|I
argument_list|)
block|{}
comment|/// BestForm - Choose the best form for integer.
comment|///
specifier|static
name|dwarf
operator|::
name|Form
name|BestForm
argument_list|(
argument|bool IsSigned
argument_list|,
argument|uint64_t Int
argument_list|)
block|{
if|if
condition|(
name|IsSigned
condition|)
block|{
specifier|const
name|int64_t
name|SignedInt
init|=
name|Int
decl_stmt|;
if|if
condition|(
operator|(
name|char
operator|)
name|Int
operator|==
name|SignedInt
condition|)
return|return
name|dwarf
operator|::
name|DW_FORM_data1
return|;
if|if
condition|(
operator|(
name|short
operator|)
name|Int
operator|==
name|SignedInt
condition|)
return|return
name|dwarf
operator|::
name|DW_FORM_data2
return|;
if|if
condition|(
operator|(
name|int
operator|)
name|Int
operator|==
name|SignedInt
condition|)
return|return
name|dwarf
operator|::
name|DW_FORM_data4
return|;
block|}
else|else
block|{
if|if
condition|(
operator|(
name|unsigned
name|char
operator|)
name|Int
operator|==
name|Int
condition|)
return|return
name|dwarf
operator|::
name|DW_FORM_data1
return|;
if|if
condition|(
operator|(
name|unsigned
name|short
operator|)
name|Int
operator|==
name|Int
condition|)
return|return
name|dwarf
operator|::
name|DW_FORM_data2
return|;
if|if
condition|(
operator|(
name|unsigned
name|int
operator|)
name|Int
operator|==
name|Int
condition|)
return|return
name|dwarf
operator|::
name|DW_FORM_data4
return|;
block|}
return|return
name|dwarf
operator|::
name|DW_FORM_data8
return|;
block|}
name|uint64_t
name|getValue
argument_list|()
specifier|const
block|{
return|return
name|Integer
return|;
block|}
name|void
name|setValue
argument_list|(
argument|uint64_t Val
argument_list|)
block|{
name|Integer
operator|=
name|Val
block|; }
comment|// Implement isa/cast/dyncast.
specifier|static
name|bool
name|classof
argument_list|(
argument|const DIEValue *I
argument_list|)
block|{
return|return
name|I
operator|->
name|getType
argument_list|()
operator|==
name|isInteger
return|;
block|}
name|private
operator|:
name|void
name|EmitValueImpl
argument_list|(
argument|const AsmPrinter *AP
argument_list|,
argument|dwarf::Form Form
argument_list|)
specifier|const
block|;
name|unsigned
name|SizeOfImpl
argument_list|(
argument|const AsmPrinter *AP
argument_list|,
argument|dwarf::Form Form
argument_list|)
specifier|const
block|;
ifndef|#
directive|ifndef
name|NDEBUG
name|void
name|printImpl
argument_list|(
argument|raw_ostream&O
argument_list|)
specifier|const
block|;
endif|#
directive|endif
block|}
decl_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|/// DIEExpr - An expression DIE.
comment|//
name|class
name|DIEExpr
range|:
name|public
name|DIEValue
block|{
name|friend
name|class
name|DIEValue
block|;
specifier|const
name|MCExpr
operator|*
name|Expr
block|;
name|public
operator|:
name|explicit
name|DIEExpr
argument_list|(
specifier|const
name|MCExpr
operator|*
name|E
argument_list|)
operator|:
name|DIEValue
argument_list|(
name|isExpr
argument_list|)
block|,
name|Expr
argument_list|(
argument|E
argument_list|)
block|{}
comment|/// getValue - Get MCExpr.
comment|///
specifier|const
name|MCExpr
operator|*
name|getValue
argument_list|()
specifier|const
block|{
return|return
name|Expr
return|;
block|}
comment|// Implement isa/cast/dyncast.
specifier|static
name|bool
name|classof
argument_list|(
argument|const DIEValue *E
argument_list|)
block|{
return|return
name|E
operator|->
name|getType
argument_list|()
operator|==
name|isExpr
return|;
block|}
name|private
operator|:
name|void
name|EmitValueImpl
argument_list|(
argument|const AsmPrinter *AP
argument_list|,
argument|dwarf::Form Form
argument_list|)
specifier|const
block|;
name|unsigned
name|SizeOfImpl
argument_list|(
argument|const AsmPrinter *AP
argument_list|,
argument|dwarf::Form Form
argument_list|)
specifier|const
block|;
ifndef|#
directive|ifndef
name|NDEBUG
name|void
name|printImpl
argument_list|(
argument|raw_ostream&O
argument_list|)
specifier|const
block|;
endif|#
directive|endif
block|}
decl_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|/// DIELabel - A label DIE.
comment|//
name|class
name|DIELabel
range|:
name|public
name|DIEValue
block|{
name|friend
name|class
name|DIEValue
block|;
specifier|const
name|MCSymbol
operator|*
name|Label
block|;
name|public
operator|:
name|explicit
name|DIELabel
argument_list|(
specifier|const
name|MCSymbol
operator|*
name|L
argument_list|)
operator|:
name|DIEValue
argument_list|(
name|isLabel
argument_list|)
block|,
name|Label
argument_list|(
argument|L
argument_list|)
block|{}
comment|/// getValue - Get MCSymbol.
comment|///
specifier|const
name|MCSymbol
operator|*
name|getValue
argument_list|()
specifier|const
block|{
return|return
name|Label
return|;
block|}
comment|// Implement isa/cast/dyncast.
specifier|static
name|bool
name|classof
argument_list|(
argument|const DIEValue *L
argument_list|)
block|{
return|return
name|L
operator|->
name|getType
argument_list|()
operator|==
name|isLabel
return|;
block|}
name|private
operator|:
name|void
name|EmitValueImpl
argument_list|(
argument|const AsmPrinter *AP
argument_list|,
argument|dwarf::Form Form
argument_list|)
specifier|const
block|;
name|unsigned
name|SizeOfImpl
argument_list|(
argument|const AsmPrinter *AP
argument_list|,
argument|dwarf::Form Form
argument_list|)
specifier|const
block|;
ifndef|#
directive|ifndef
name|NDEBUG
name|void
name|printImpl
argument_list|(
argument|raw_ostream&O
argument_list|)
specifier|const
block|;
endif|#
directive|endif
block|}
decl_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|/// DIEDelta - A simple label difference DIE.
comment|///
name|class
name|DIEDelta
range|:
name|public
name|DIEValue
block|{
name|friend
name|class
name|DIEValue
block|;
specifier|const
name|MCSymbol
operator|*
name|LabelHi
block|;
specifier|const
name|MCSymbol
operator|*
name|LabelLo
block|;
name|public
operator|:
name|DIEDelta
argument_list|(
specifier|const
name|MCSymbol
operator|*
name|Hi
argument_list|,
specifier|const
name|MCSymbol
operator|*
name|Lo
argument_list|)
operator|:
name|DIEValue
argument_list|(
name|isDelta
argument_list|)
block|,
name|LabelHi
argument_list|(
name|Hi
argument_list|)
block|,
name|LabelLo
argument_list|(
argument|Lo
argument_list|)
block|{}
comment|// Implement isa/cast/dyncast.
specifier|static
name|bool
name|classof
argument_list|(
argument|const DIEValue *D
argument_list|)
block|{
return|return
name|D
operator|->
name|getType
argument_list|()
operator|==
name|isDelta
return|;
block|}
name|private
operator|:
name|void
name|EmitValueImpl
argument_list|(
argument|const AsmPrinter *AP
argument_list|,
argument|dwarf::Form Form
argument_list|)
specifier|const
block|;
name|unsigned
name|SizeOfImpl
argument_list|(
argument|const AsmPrinter *AP
argument_list|,
argument|dwarf::Form Form
argument_list|)
specifier|const
block|;
ifndef|#
directive|ifndef
name|NDEBUG
name|void
name|printImpl
argument_list|(
argument|raw_ostream&O
argument_list|)
specifier|const
block|;
endif|#
directive|endif
block|}
decl_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|/// DIEString - A container for string values.
comment|///
name|class
name|DIEString
range|:
name|public
name|DIEValue
block|{
name|friend
name|class
name|DIEValue
block|;
name|DwarfStringPoolEntryRef
name|S
block|;
name|public
operator|:
name|DIEString
argument_list|(
argument|DwarfStringPoolEntryRef S
argument_list|)
operator|:
name|DIEValue
argument_list|(
name|isString
argument_list|)
block|,
name|S
argument_list|(
argument|S
argument_list|)
block|{}
comment|/// getString - Grab the string out of the object.
name|StringRef
name|getString
argument_list|()
specifier|const
block|{
return|return
name|S
operator|.
name|getString
argument_list|()
return|;
block|}
comment|// Implement isa/cast/dyncast.
specifier|static
name|bool
name|classof
argument_list|(
argument|const DIEValue *D
argument_list|)
block|{
return|return
name|D
operator|->
name|getType
argument_list|()
operator|==
name|isString
return|;
block|}
name|private
operator|:
name|void
name|EmitValueImpl
argument_list|(
argument|const AsmPrinter *AP
argument_list|,
argument|dwarf::Form Form
argument_list|)
specifier|const
block|;
name|unsigned
name|SizeOfImpl
argument_list|(
argument|const AsmPrinter *AP
argument_list|,
argument|dwarf::Form Form
argument_list|)
specifier|const
block|;
ifndef|#
directive|ifndef
name|NDEBUG
name|void
name|printImpl
argument_list|(
argument|raw_ostream&O
argument_list|)
specifier|const
block|;
endif|#
directive|endif
block|}
decl_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|/// DIEEntry - A pointer to another debug information entry.  An instance of
comment|/// this class can also be used as a proxy for a debug information entry not
comment|/// yet defined (ie. types.)
name|class
name|DIEEntry
range|:
name|public
name|DIEValue
block|{
name|friend
name|class
name|DIEValue
block|;
name|DIE
operator|&
name|Entry
block|;
name|public
operator|:
name|explicit
name|DIEEntry
argument_list|(
name|DIE
operator|&
name|E
argument_list|)
operator|:
name|DIEValue
argument_list|(
name|isEntry
argument_list|)
block|,
name|Entry
argument_list|(
argument|E
argument_list|)
block|{   }
name|DIE
operator|&
name|getEntry
argument_list|()
specifier|const
block|{
return|return
name|Entry
return|;
block|}
comment|/// Returns size of a ref_addr entry.
specifier|static
name|unsigned
name|getRefAddrSize
argument_list|(
specifier|const
name|AsmPrinter
operator|*
name|AP
argument_list|)
block|;
comment|// Implement isa/cast/dyncast.
specifier|static
name|bool
name|classof
argument_list|(
argument|const DIEValue *E
argument_list|)
block|{
return|return
name|E
operator|->
name|getType
argument_list|()
operator|==
name|isEntry
return|;
block|}
name|private
operator|:
name|void
name|EmitValueImpl
argument_list|(
argument|const AsmPrinter *AP
argument_list|,
argument|dwarf::Form Form
argument_list|)
specifier|const
block|;
name|unsigned
name|SizeOfImpl
argument_list|(
argument|const AsmPrinter *AP
argument_list|,
argument|dwarf::Form Form
argument_list|)
specifier|const
block|{
return|return
name|Form
operator|==
name|dwarf
operator|::
name|DW_FORM_ref_addr
operator|?
name|getRefAddrSize
argument_list|(
name|AP
argument_list|)
operator|:
sizeof|sizeof
argument_list|(
name|int32_t
argument_list|)
return|;
block|}
ifndef|#
directive|ifndef
name|NDEBUG
name|void
name|printImpl
argument_list|(
argument|raw_ostream&O
argument_list|)
specifier|const
block|;
endif|#
directive|endif
block|}
decl_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|/// \brief A signature reference to a type unit.
name|class
name|DIETypeSignature
range|:
name|public
name|DIEValue
block|{
name|friend
name|class
name|DIEValue
block|;
specifier|const
name|DwarfTypeUnit
operator|&
name|Unit
block|;
name|public
operator|:
name|explicit
name|DIETypeSignature
argument_list|(
specifier|const
name|DwarfTypeUnit
operator|&
name|Unit
argument_list|)
operator|:
name|DIEValue
argument_list|(
name|isTypeSignature
argument_list|)
block|,
name|Unit
argument_list|(
argument|Unit
argument_list|)
block|{}
comment|// \brief Implement isa/cast/dyncast.
specifier|static
name|bool
name|classof
argument_list|(
argument|const DIEValue *E
argument_list|)
block|{
return|return
name|E
operator|->
name|getType
argument_list|()
operator|==
name|isTypeSignature
return|;
block|}
name|private
operator|:
name|void
name|EmitValueImpl
argument_list|(
argument|const AsmPrinter *AP
argument_list|,
argument|dwarf::Form Form
argument_list|)
specifier|const
block|;
name|unsigned
name|SizeOfImpl
argument_list|(
argument|const AsmPrinter *AP
argument_list|,
argument|dwarf::Form Form
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|Form
operator|==
name|dwarf
operator|::
name|DW_FORM_ref_sig8
argument_list|)
block|;
return|return
literal|8
return|;
block|}
ifndef|#
directive|ifndef
name|NDEBUG
name|void
name|printImpl
argument_list|(
argument|raw_ostream&O
argument_list|)
specifier|const
block|;
endif|#
directive|endif
block|}
decl_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|/// DIELoc - Represents an expression location.
comment|//
name|class
name|DIELoc
range|:
name|public
name|DIEValue
decl_stmt|,
name|public
name|DIE
block|{
name|friend
name|class
name|DIEValue
decl_stmt|;
name|mutable
name|unsigned
name|Size
decl_stmt|;
comment|// Size in bytes excluding size header.
name|public
label|:
name|DIELoc
argument_list|()
operator|:
name|DIEValue
argument_list|(
name|isLoc
argument_list|)
operator|,
name|Size
argument_list|(
literal|0
argument_list|)
block|{}
comment|/// ComputeSize - Calculate the size of the location expression.
comment|///
name|unsigned
name|ComputeSize
argument_list|(
argument|const AsmPrinter *AP
argument_list|)
specifier|const
expr_stmt|;
comment|/// BestForm - Choose the best form for data.
comment|///
name|dwarf
operator|::
name|Form
name|BestForm
argument_list|(
argument|unsigned DwarfVersion
argument_list|)
specifier|const
block|{
if|if
condition|(
name|DwarfVersion
operator|>
literal|3
condition|)
return|return
name|dwarf
operator|::
name|DW_FORM_exprloc
return|;
comment|// Pre-DWARF4 location expressions were blocks and not exprloc.
if|if
condition|(
operator|(
name|unsigned
name|char
operator|)
name|Size
operator|==
name|Size
condition|)
return|return
name|dwarf
operator|::
name|DW_FORM_block1
return|;
if|if
condition|(
operator|(
name|unsigned
name|short
operator|)
name|Size
operator|==
name|Size
condition|)
return|return
name|dwarf
operator|::
name|DW_FORM_block2
return|;
if|if
condition|(
operator|(
name|unsigned
name|int
operator|)
name|Size
operator|==
name|Size
condition|)
return|return
name|dwarf
operator|::
name|DW_FORM_block4
return|;
return|return
name|dwarf
operator|::
name|DW_FORM_block
return|;
block|}
comment|// Implement isa/cast/dyncast.
specifier|static
name|bool
name|classof
parameter_list|(
specifier|const
name|DIEValue
modifier|*
name|E
parameter_list|)
block|{
return|return
name|E
operator|->
name|getType
argument_list|()
operator|==
name|isLoc
return|;
block|}
name|private
label|:
name|void
name|EmitValueImpl
argument_list|(
specifier|const
name|AsmPrinter
operator|*
name|AP
argument_list|,
name|dwarf
operator|::
name|Form
name|Form
argument_list|)
decl|const
decl_stmt|;
name|unsigned
name|SizeOfImpl
argument_list|(
specifier|const
name|AsmPrinter
operator|*
name|AP
argument_list|,
name|dwarf
operator|::
name|Form
name|Form
argument_list|)
decl|const
decl_stmt|;
ifndef|#
directive|ifndef
name|NDEBUG
name|void
name|printImpl
argument_list|(
name|raw_ostream
operator|&
name|O
argument_list|)
decl|const
decl_stmt|;
endif|#
directive|endif
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_comment
comment|/// DIEBlock - Represents a block of values.
end_comment

begin_comment
comment|//
end_comment

begin_decl_stmt
name|class
name|DIEBlock
range|:
name|public
name|DIEValue
decl_stmt|,
name|public
name|DIE
block|{
name|friend
name|class
name|DIEValue
decl_stmt|;
name|mutable
name|unsigned
name|Size
decl_stmt|;
comment|// Size in bytes excluding size header.
name|public
label|:
name|DIEBlock
argument_list|()
operator|:
name|DIEValue
argument_list|(
name|isBlock
argument_list|)
operator|,
name|Size
argument_list|(
literal|0
argument_list|)
block|{}
comment|/// ComputeSize - Calculate the size of the location expression.
comment|///
name|unsigned
name|ComputeSize
argument_list|(
argument|const AsmPrinter *AP
argument_list|)
specifier|const
expr_stmt|;
comment|/// BestForm - Choose the best form for data.
comment|///
name|dwarf
operator|::
name|Form
name|BestForm
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|(
name|unsigned
name|char
operator|)
name|Size
operator|==
name|Size
condition|)
return|return
name|dwarf
operator|::
name|DW_FORM_block1
return|;
if|if
condition|(
operator|(
name|unsigned
name|short
operator|)
name|Size
operator|==
name|Size
condition|)
return|return
name|dwarf
operator|::
name|DW_FORM_block2
return|;
if|if
condition|(
operator|(
name|unsigned
name|int
operator|)
name|Size
operator|==
name|Size
condition|)
return|return
name|dwarf
operator|::
name|DW_FORM_block4
return|;
return|return
name|dwarf
operator|::
name|DW_FORM_block
return|;
block|}
end_decl_stmt

begin_comment
comment|// Implement isa/cast/dyncast.
end_comment

begin_function
specifier|static
name|bool
name|classof
parameter_list|(
specifier|const
name|DIEValue
modifier|*
name|E
parameter_list|)
block|{
return|return
name|E
operator|->
name|getType
argument_list|()
operator|==
name|isBlock
return|;
block|}
end_function

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|void
name|EmitValueImpl
argument_list|(
specifier|const
name|AsmPrinter
operator|*
name|AP
argument_list|,
name|dwarf
operator|::
name|Form
name|Form
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|unsigned
name|SizeOfImpl
argument_list|(
specifier|const
name|AsmPrinter
operator|*
name|AP
argument_list|,
name|dwarf
operator|::
name|Form
name|Form
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|NDEBUG
end_ifndef

begin_decl_stmt
name|void
name|printImpl
argument_list|(
name|raw_ostream
operator|&
name|O
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
unit|};
comment|//===--------------------------------------------------------------------===//
end_comment

begin_comment
comment|/// DIELocList - Represents a pointer to a location list in the debug_loc
end_comment

begin_comment
comment|/// section.
end_comment

begin_comment
comment|//
end_comment

begin_decl_stmt
name|class
name|DIELocList
range|:
name|public
name|DIEValue
block|{
name|friend
name|class
name|DIEValue
block|;
comment|// Index into the .debug_loc vector.
name|size_t
name|Index
block|;
name|public
operator|:
name|DIELocList
argument_list|(
argument|size_t I
argument_list|)
operator|:
name|DIEValue
argument_list|(
name|isLocList
argument_list|)
block|,
name|Index
argument_list|(
argument|I
argument_list|)
block|{}
comment|/// getValue - Grab the current index out.
name|size_t
name|getValue
argument_list|()
specifier|const
block|{
return|return
name|Index
return|;
block|}
comment|// Implement isa/cast/dyncast.
specifier|static
name|bool
name|classof
argument_list|(
argument|const DIEValue *E
argument_list|)
block|{
return|return
name|E
operator|->
name|getType
argument_list|()
operator|==
name|isLocList
return|;
block|}
name|private
operator|:
name|void
name|EmitValueImpl
argument_list|(
argument|const AsmPrinter *AP
argument_list|,
argument|dwarf::Form Form
argument_list|)
specifier|const
block|;
name|unsigned
name|SizeOfImpl
argument_list|(
argument|const AsmPrinter *AP
argument_list|,
argument|dwarf::Form Form
argument_list|)
specifier|const
block|;
ifndef|#
directive|ifndef
name|NDEBUG
name|void
name|printImpl
argument_list|(
argument|raw_ostream&O
argument_list|)
specifier|const
block|;
endif|#
directive|endif
block|}
decl_stmt|;
end_decl_stmt

begin_comment
unit|}
comment|// end llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

