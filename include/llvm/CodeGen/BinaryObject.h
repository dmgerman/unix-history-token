begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- llvm/CodeGen/BinaryObject.h - Binary Object. -----------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines a Binary Object Aka. "blob" for holding data from code
end_comment

begin_comment
comment|// generators, ready for data to the object module code writters.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CODEGEN_BINARYOBJECT_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CODEGEN_BINARYOBJECT_H
end_define

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MachineRelocation
decl_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|uint8_t
operator|>
name|BinaryData
expr_stmt|;
name|class
name|BinaryObject
block|{
name|protected
label|:
name|std
operator|::
name|string
name|Name
expr_stmt|;
name|bool
name|IsLittleEndian
decl_stmt|;
name|bool
name|Is64Bit
decl_stmt|;
name|BinaryData
name|Data
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|MachineRelocation
operator|>
name|Relocations
expr_stmt|;
name|public
label|:
comment|/// Constructors and destructor
name|BinaryObject
argument_list|()
block|{}
name|BinaryObject
argument_list|(
argument|bool isLittleEndian
argument_list|,
argument|bool is64Bit
argument_list|)
block|:
name|IsLittleEndian
argument_list|(
name|isLittleEndian
argument_list|)
operator|,
name|Is64Bit
argument_list|(
argument|is64Bit
argument_list|)
block|{}
name|BinaryObject
argument_list|(
argument|const std::string&name
argument_list|,
argument|bool isLittleEndian
argument_list|,
argument|bool is64Bit
argument_list|)
operator|:
name|Name
argument_list|(
name|name
argument_list|)
operator|,
name|IsLittleEndian
argument_list|(
name|isLittleEndian
argument_list|)
operator|,
name|Is64Bit
argument_list|(
argument|is64Bit
argument_list|)
block|{}
operator|~
name|BinaryObject
argument_list|()
block|{}
comment|/// getName - get name of BinaryObject
specifier|inline
name|std
operator|::
name|string
name|getName
argument_list|()
specifier|const
block|{
return|return
name|Name
return|;
block|}
comment|/// get size of binary data
name|size_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|Data
operator|.
name|size
argument_list|()
return|;
block|}
comment|/// get binary data
name|BinaryData
modifier|&
name|getData
parameter_list|()
block|{
return|return
name|Data
return|;
block|}
comment|/// get machine relocations
specifier|const
name|std
operator|::
name|vector
operator|<
name|MachineRelocation
operator|>
operator|&
name|getRelocations
argument_list|()
specifier|const
block|{
return|return
name|Relocations
return|;
block|}
comment|/// hasRelocations - Return true if 'Relocations' is not empty
name|bool
name|hasRelocations
argument_list|()
specifier|const
block|{
return|return
operator|!
name|Relocations
operator|.
name|empty
argument_list|()
return|;
block|}
comment|/// emitByte - This callback is invoked when a byte needs to be
comment|/// written to the data stream.
specifier|inline
name|void
name|emitByte
parameter_list|(
name|uint8_t
name|B
parameter_list|)
block|{
name|Data
operator|.
name|push_back
argument_list|(
name|B
argument_list|)
expr_stmt|;
block|}
comment|/// emitWord16 - This callback is invoked when a 16-bit word needs to be
comment|/// written to the data stream in correct endian format and correct size.
specifier|inline
name|void
name|emitWord16
parameter_list|(
name|uint16_t
name|W
parameter_list|)
block|{
if|if
condition|(
name|IsLittleEndian
condition|)
name|emitWord16LE
argument_list|(
name|W
argument_list|)
expr_stmt|;
else|else
name|emitWord16BE
argument_list|(
name|W
argument_list|)
expr_stmt|;
block|}
comment|/// emitWord16LE - This callback is invoked when a 16-bit word needs to be
comment|/// written to the data stream in correct endian format and correct size.
specifier|inline
name|void
name|emitWord16LE
parameter_list|(
name|uint16_t
name|W
parameter_list|)
block|{
name|Data
operator|.
name|push_back
argument_list|(
operator|(
name|W
operator|>>
literal|0
operator|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Data
operator|.
name|push_back
argument_list|(
operator|(
name|W
operator|>>
literal|8
operator|)
operator|&
literal|255
argument_list|)
expr_stmt|;
block|}
comment|/// emitWord16BE - This callback is invoked when a 16-bit word needs to be
comment|/// written to the data stream in correct endian format and correct size.
specifier|inline
name|void
name|emitWord16BE
parameter_list|(
name|uint16_t
name|W
parameter_list|)
block|{
name|Data
operator|.
name|push_back
argument_list|(
operator|(
name|W
operator|>>
literal|8
operator|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Data
operator|.
name|push_back
argument_list|(
operator|(
name|W
operator|>>
literal|0
operator|)
operator|&
literal|255
argument_list|)
expr_stmt|;
block|}
comment|/// emitWord - This callback is invoked when a word needs to be
comment|/// written to the data stream in correct endian format and correct size.
specifier|inline
name|void
name|emitWord
parameter_list|(
name|uint64_t
name|W
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Is64Bit
condition|)
name|emitWord32
argument_list|(
name|W
argument_list|)
expr_stmt|;
else|else
name|emitWord64
argument_list|(
name|W
argument_list|)
expr_stmt|;
block|}
comment|/// emitWord32 - This callback is invoked when a 32-bit word needs to be
comment|/// written to the data stream in correct endian format.
specifier|inline
name|void
name|emitWord32
parameter_list|(
name|uint32_t
name|W
parameter_list|)
block|{
if|if
condition|(
name|IsLittleEndian
condition|)
name|emitWordLE
argument_list|(
name|W
argument_list|)
expr_stmt|;
else|else
name|emitWordBE
argument_list|(
name|W
argument_list|)
expr_stmt|;
block|}
comment|/// emitWord64 - This callback is invoked when a 32-bit word needs to be
comment|/// written to the data stream in correct endian format.
specifier|inline
name|void
name|emitWord64
parameter_list|(
name|uint64_t
name|W
parameter_list|)
block|{
if|if
condition|(
name|IsLittleEndian
condition|)
name|emitDWordLE
argument_list|(
name|W
argument_list|)
expr_stmt|;
else|else
name|emitDWordBE
argument_list|(
name|W
argument_list|)
expr_stmt|;
block|}
comment|/// emitWordLE - This callback is invoked when a 32-bit word needs to be
comment|/// written to the data stream in little-endian format.
specifier|inline
name|void
name|emitWordLE
parameter_list|(
name|uint32_t
name|W
parameter_list|)
block|{
name|Data
operator|.
name|push_back
argument_list|(
operator|(
name|W
operator|>>
literal|0
operator|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Data
operator|.
name|push_back
argument_list|(
operator|(
name|W
operator|>>
literal|8
operator|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Data
operator|.
name|push_back
argument_list|(
operator|(
name|W
operator|>>
literal|16
operator|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Data
operator|.
name|push_back
argument_list|(
operator|(
name|W
operator|>>
literal|24
operator|)
operator|&
literal|255
argument_list|)
expr_stmt|;
block|}
comment|/// emitWordBE - This callback is invoked when a 32-bit word needs to be
comment|/// written to the data stream in big-endian format.
comment|///
specifier|inline
name|void
name|emitWordBE
parameter_list|(
name|uint32_t
name|W
parameter_list|)
block|{
name|Data
operator|.
name|push_back
argument_list|(
operator|(
name|W
operator|>>
literal|24
operator|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Data
operator|.
name|push_back
argument_list|(
operator|(
name|W
operator|>>
literal|16
operator|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Data
operator|.
name|push_back
argument_list|(
operator|(
name|W
operator|>>
literal|8
operator|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Data
operator|.
name|push_back
argument_list|(
operator|(
name|W
operator|>>
literal|0
operator|)
operator|&
literal|255
argument_list|)
expr_stmt|;
block|}
comment|/// emitDWordLE - This callback is invoked when a 64-bit word needs to be
comment|/// written to the data stream in little-endian format.
specifier|inline
name|void
name|emitDWordLE
parameter_list|(
name|uint64_t
name|W
parameter_list|)
block|{
name|Data
operator|.
name|push_back
argument_list|(
name|unsigned
argument_list|(
name|W
operator|>>
literal|0
argument_list|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Data
operator|.
name|push_back
argument_list|(
name|unsigned
argument_list|(
name|W
operator|>>
literal|8
argument_list|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Data
operator|.
name|push_back
argument_list|(
name|unsigned
argument_list|(
name|W
operator|>>
literal|16
argument_list|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Data
operator|.
name|push_back
argument_list|(
name|unsigned
argument_list|(
name|W
operator|>>
literal|24
argument_list|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Data
operator|.
name|push_back
argument_list|(
name|unsigned
argument_list|(
name|W
operator|>>
literal|32
argument_list|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Data
operator|.
name|push_back
argument_list|(
name|unsigned
argument_list|(
name|W
operator|>>
literal|40
argument_list|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Data
operator|.
name|push_back
argument_list|(
name|unsigned
argument_list|(
name|W
operator|>>
literal|48
argument_list|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Data
operator|.
name|push_back
argument_list|(
name|unsigned
argument_list|(
name|W
operator|>>
literal|56
argument_list|)
operator|&
literal|255
argument_list|)
expr_stmt|;
block|}
comment|/// emitDWordBE - This callback is invoked when a 64-bit word needs to be
comment|/// written to the data stream in big-endian format.
specifier|inline
name|void
name|emitDWordBE
parameter_list|(
name|uint64_t
name|W
parameter_list|)
block|{
name|Data
operator|.
name|push_back
argument_list|(
name|unsigned
argument_list|(
name|W
operator|>>
literal|56
argument_list|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Data
operator|.
name|push_back
argument_list|(
name|unsigned
argument_list|(
name|W
operator|>>
literal|48
argument_list|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Data
operator|.
name|push_back
argument_list|(
name|unsigned
argument_list|(
name|W
operator|>>
literal|40
argument_list|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Data
operator|.
name|push_back
argument_list|(
name|unsigned
argument_list|(
name|W
operator|>>
literal|32
argument_list|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Data
operator|.
name|push_back
argument_list|(
name|unsigned
argument_list|(
name|W
operator|>>
literal|24
argument_list|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Data
operator|.
name|push_back
argument_list|(
name|unsigned
argument_list|(
name|W
operator|>>
literal|16
argument_list|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Data
operator|.
name|push_back
argument_list|(
name|unsigned
argument_list|(
name|W
operator|>>
literal|8
argument_list|)
operator|&
literal|255
argument_list|)
expr_stmt|;
name|Data
operator|.
name|push_back
argument_list|(
name|unsigned
argument_list|(
name|W
operator|>>
literal|0
argument_list|)
operator|&
literal|255
argument_list|)
expr_stmt|;
block|}
comment|/// fixByte - This callback is invoked when a byte needs to be
comment|/// fixup the buffer.
specifier|inline
name|void
name|fixByte
parameter_list|(
name|uint8_t
name|B
parameter_list|,
name|uint32_t
name|offset
parameter_list|)
block|{
name|Data
index|[
name|offset
index|]
operator|=
name|B
expr_stmt|;
block|}
comment|/// fixWord16 - This callback is invoked when a 16-bit word needs to
comment|/// fixup the data stream in correct endian format.
specifier|inline
name|void
name|fixWord16
parameter_list|(
name|uint16_t
name|W
parameter_list|,
name|uint32_t
name|offset
parameter_list|)
block|{
if|if
condition|(
name|IsLittleEndian
condition|)
name|fixWord16LE
argument_list|(
name|W
argument_list|,
name|offset
argument_list|)
expr_stmt|;
else|else
name|fixWord16BE
argument_list|(
name|W
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
comment|/// emitWord16LE - This callback is invoked when a 16-bit word needs to
comment|/// fixup the data stream in little endian format.
specifier|inline
name|void
name|fixWord16LE
parameter_list|(
name|uint16_t
name|W
parameter_list|,
name|uint32_t
name|offset
parameter_list|)
block|{
name|Data
index|[
name|offset
operator|++
index|]
operator|=
name|W
operator|&
literal|255
expr_stmt|;
name|Data
index|[
name|offset
index|]
operator|=
operator|(
name|W
operator|>>
literal|8
operator|)
operator|&
literal|255
expr_stmt|;
block|}
comment|/// fixWord16BE - This callback is invoked when a 16-bit word needs to
comment|/// fixup data stream in big endian format.
specifier|inline
name|void
name|fixWord16BE
parameter_list|(
name|uint16_t
name|W
parameter_list|,
name|uint32_t
name|offset
parameter_list|)
block|{
name|Data
index|[
name|offset
operator|++
index|]
operator|=
operator|(
name|W
operator|>>
literal|8
operator|)
operator|&
literal|255
expr_stmt|;
name|Data
index|[
name|offset
index|]
operator|=
name|W
operator|&
literal|255
expr_stmt|;
block|}
comment|/// emitWord - This callback is invoked when a word needs to
comment|/// fixup the data in correct endian format and correct size.
specifier|inline
name|void
name|fixWord
parameter_list|(
name|uint64_t
name|W
parameter_list|,
name|uint32_t
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Is64Bit
condition|)
name|fixWord32
argument_list|(
name|W
argument_list|,
name|offset
argument_list|)
expr_stmt|;
else|else
name|fixWord64
argument_list|(
name|W
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
comment|/// fixWord32 - This callback is invoked when a 32-bit word needs to
comment|/// fixup the data in correct endian format.
specifier|inline
name|void
name|fixWord32
parameter_list|(
name|uint32_t
name|W
parameter_list|,
name|uint32_t
name|offset
parameter_list|)
block|{
if|if
condition|(
name|IsLittleEndian
condition|)
name|fixWord32LE
argument_list|(
name|W
argument_list|,
name|offset
argument_list|)
expr_stmt|;
else|else
name|fixWord32BE
argument_list|(
name|W
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
comment|/// fixWord32LE - This callback is invoked when a 32-bit word needs to
comment|/// fixup the data in little endian format.
specifier|inline
name|void
name|fixWord32LE
parameter_list|(
name|uint32_t
name|W
parameter_list|,
name|uint32_t
name|offset
parameter_list|)
block|{
name|Data
index|[
name|offset
operator|++
index|]
operator|=
name|W
operator|&
literal|255
expr_stmt|;
name|Data
index|[
name|offset
operator|++
index|]
operator|=
operator|(
name|W
operator|>>
literal|8
operator|)
operator|&
literal|255
expr_stmt|;
name|Data
index|[
name|offset
operator|++
index|]
operator|=
operator|(
name|W
operator|>>
literal|16
operator|)
operator|&
literal|255
expr_stmt|;
name|Data
index|[
name|offset
index|]
operator|=
operator|(
name|W
operator|>>
literal|24
operator|)
operator|&
literal|255
expr_stmt|;
block|}
comment|/// fixWord32BE - This callback is invoked when a 32-bit word needs to
comment|/// fixup the data in big endian format.
specifier|inline
name|void
name|fixWord32BE
parameter_list|(
name|uint32_t
name|W
parameter_list|,
name|uint32_t
name|offset
parameter_list|)
block|{
name|Data
index|[
name|offset
operator|++
index|]
operator|=
operator|(
name|W
operator|>>
literal|24
operator|)
operator|&
literal|255
expr_stmt|;
name|Data
index|[
name|offset
operator|++
index|]
operator|=
operator|(
name|W
operator|>>
literal|16
operator|)
operator|&
literal|255
expr_stmt|;
name|Data
index|[
name|offset
operator|++
index|]
operator|=
operator|(
name|W
operator|>>
literal|8
operator|)
operator|&
literal|255
expr_stmt|;
name|Data
index|[
name|offset
index|]
operator|=
name|W
operator|&
literal|255
expr_stmt|;
block|}
comment|/// fixWord64 - This callback is invoked when a 64-bit word needs to
comment|/// fixup the data in correct endian format.
specifier|inline
name|void
name|fixWord64
parameter_list|(
name|uint64_t
name|W
parameter_list|,
name|uint32_t
name|offset
parameter_list|)
block|{
if|if
condition|(
name|IsLittleEndian
condition|)
name|fixWord64LE
argument_list|(
name|W
argument_list|,
name|offset
argument_list|)
expr_stmt|;
else|else
name|fixWord64BE
argument_list|(
name|W
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
comment|/// fixWord64BE - This callback is invoked when a 64-bit word needs to
comment|/// fixup the data in little endian format.
specifier|inline
name|void
name|fixWord64LE
parameter_list|(
name|uint64_t
name|W
parameter_list|,
name|uint32_t
name|offset
parameter_list|)
block|{
name|Data
index|[
name|offset
operator|++
index|]
operator|=
name|W
operator|&
literal|255
expr_stmt|;
name|Data
index|[
name|offset
operator|++
index|]
operator|=
operator|(
name|W
operator|>>
literal|8
operator|)
operator|&
literal|255
expr_stmt|;
name|Data
index|[
name|offset
operator|++
index|]
operator|=
operator|(
name|W
operator|>>
literal|16
operator|)
operator|&
literal|255
expr_stmt|;
name|Data
index|[
name|offset
operator|++
index|]
operator|=
operator|(
name|W
operator|>>
literal|24
operator|)
operator|&
literal|255
expr_stmt|;
name|Data
index|[
name|offset
operator|++
index|]
operator|=
operator|(
name|W
operator|>>
literal|32
operator|)
operator|&
literal|255
expr_stmt|;
name|Data
index|[
name|offset
operator|++
index|]
operator|=
operator|(
name|W
operator|>>
literal|40
operator|)
operator|&
literal|255
expr_stmt|;
name|Data
index|[
name|offset
operator|++
index|]
operator|=
operator|(
name|W
operator|>>
literal|48
operator|)
operator|&
literal|255
expr_stmt|;
name|Data
index|[
name|offset
index|]
operator|=
operator|(
name|W
operator|>>
literal|56
operator|)
operator|&
literal|255
expr_stmt|;
block|}
comment|/// fixWord64BE - This callback is invoked when a 64-bit word needs to
comment|/// fixup the data in big endian format.
specifier|inline
name|void
name|fixWord64BE
parameter_list|(
name|uint64_t
name|W
parameter_list|,
name|uint32_t
name|offset
parameter_list|)
block|{
name|Data
index|[
name|offset
operator|++
index|]
operator|=
operator|(
name|W
operator|>>
literal|56
operator|)
operator|&
literal|255
expr_stmt|;
name|Data
index|[
name|offset
operator|++
index|]
operator|=
operator|(
name|W
operator|>>
literal|48
operator|)
operator|&
literal|255
expr_stmt|;
name|Data
index|[
name|offset
operator|++
index|]
operator|=
operator|(
name|W
operator|>>
literal|40
operator|)
operator|&
literal|255
expr_stmt|;
name|Data
index|[
name|offset
operator|++
index|]
operator|=
operator|(
name|W
operator|>>
literal|32
operator|)
operator|&
literal|255
expr_stmt|;
name|Data
index|[
name|offset
operator|++
index|]
operator|=
operator|(
name|W
operator|>>
literal|24
operator|)
operator|&
literal|255
expr_stmt|;
name|Data
index|[
name|offset
operator|++
index|]
operator|=
operator|(
name|W
operator|>>
literal|16
operator|)
operator|&
literal|255
expr_stmt|;
name|Data
index|[
name|offset
operator|++
index|]
operator|=
operator|(
name|W
operator|>>
literal|8
operator|)
operator|&
literal|255
expr_stmt|;
name|Data
index|[
name|offset
index|]
operator|=
name|W
operator|&
literal|255
expr_stmt|;
block|}
comment|/// emitAlignment - Pad the data to the specified alignment.
name|void
name|emitAlignment
parameter_list|(
name|unsigned
name|Alignment
parameter_list|)
block|{
if|if
condition|(
name|Alignment
operator|<=
literal|1
condition|)
return|return;
name|unsigned
name|PadSize
init|=
operator|-
name|Data
operator|.
name|size
argument_list|()
operator|&
operator|(
name|Alignment
operator|-
literal|1
operator|)
decl_stmt|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|PadSize
condition|;
operator|++
name|i
control|)
name|Data
operator|.
name|push_back
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/// emitULEB128Bytes - This callback is invoked when a ULEB128 needs to be
comment|/// written to the data stream.
name|void
name|emitULEB128Bytes
parameter_list|(
name|uint64_t
name|Value
parameter_list|)
block|{
do|do
block|{
name|unsigned
name|char
name|Byte
init|=
name|Value
operator|&
literal|0x7f
decl_stmt|;
name|Value
operator|>>=
literal|7
expr_stmt|;
if|if
condition|(
name|Value
condition|)
name|Byte
operator||=
literal|0x80
expr_stmt|;
name|emitByte
argument_list|(
name|Byte
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|Value
condition|)
do|;
block|}
comment|/// emitSLEB128Bytes - This callback is invoked when a SLEB128 needs to be
comment|/// written to the data stream.
name|void
name|emitSLEB128Bytes
parameter_list|(
name|int64_t
name|Value
parameter_list|)
block|{
name|int
name|Sign
init|=
name|Value
operator|>>
operator|(
literal|8
operator|*
sizeof|sizeof
argument_list|(
name|Value
argument_list|)
operator|-
literal|1
operator|)
decl_stmt|;
name|bool
name|IsMore
decl_stmt|;
do|do
block|{
name|unsigned
name|char
name|Byte
init|=
name|Value
operator|&
literal|0x7f
decl_stmt|;
name|Value
operator|>>=
literal|7
expr_stmt|;
name|IsMore
operator|=
name|Value
operator|!=
name|Sign
operator|||
operator|(
operator|(
name|Byte
operator|^
name|Sign
operator|)
operator|&
literal|0x40
operator|)
operator|!=
literal|0
expr_stmt|;
if|if
condition|(
name|IsMore
condition|)
name|Byte
operator||=
literal|0x80
expr_stmt|;
name|emitByte
argument_list|(
name|Byte
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|IsMore
condition|)
do|;
block|}
comment|/// emitString - This callback is invoked when a String needs to be
comment|/// written to the data stream.
name|void
name|emitString
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|String
argument_list|)
block|{
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|,
name|N
init|=
name|static_cast
operator|<
name|unsigned
operator|>
operator|(
name|String
operator|.
name|size
argument_list|()
operator|)
init|;
name|i
operator|<
name|N
condition|;
operator|++
name|i
control|)
block|{
name|unsigned
name|char
name|C
init|=
name|String
index|[
name|i
index|]
decl_stmt|;
name|emitByte
argument_list|(
name|C
argument_list|)
expr_stmt|;
block|}
name|emitByte
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/// getCurrentPCOffset - Return the offset from the start of the emitted
comment|/// buffer that we are currently writing to.
name|uintptr_t
name|getCurrentPCOffset
argument_list|()
specifier|const
block|{
return|return
name|Data
operator|.
name|size
argument_list|()
return|;
block|}
comment|/// addRelocation - Whenever a relocatable address is needed, it should be
comment|/// noted with this interface.
name|void
name|addRelocation
parameter_list|(
specifier|const
name|MachineRelocation
modifier|&
name|relocation
parameter_list|)
block|{
name|Relocations
operator|.
name|push_back
argument_list|(
name|relocation
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

