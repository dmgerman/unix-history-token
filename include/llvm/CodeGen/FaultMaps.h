begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===------------------- FaultMaps.h - StackMaps ----------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CODEGEN_FAULTMAPS_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CODEGEN_FAULTMAPS_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MCSymbol.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|AsmPrinter
decl_stmt|;
name|class
name|MCExpr
decl_stmt|;
name|class
name|MCSymbol
decl_stmt|;
name|class
name|MCStreamer
decl_stmt|;
name|class
name|FaultMaps
block|{
name|public
label|:
enum|enum
name|FaultKind
block|{
name|FaultingLoad
init|=
literal|1
block|,
name|FaultKindMax
block|}
enum|;
specifier|static
specifier|const
name|char
modifier|*
name|faultTypeToString
parameter_list|(
name|FaultKind
parameter_list|)
function_decl|;
name|explicit
name|FaultMaps
parameter_list|(
name|AsmPrinter
modifier|&
name|AP
parameter_list|)
function_decl|;
name|void
name|recordFaultingOp
parameter_list|(
name|FaultKind
name|FaultTy
parameter_list|,
specifier|const
name|MCSymbol
modifier|*
name|HandlerLabel
parameter_list|)
function_decl|;
name|void
name|serializeToFaultMapSection
parameter_list|()
function_decl|;
name|private
label|:
specifier|static
specifier|const
name|char
modifier|*
name|WFMP
decl_stmt|;
struct|struct
name|FaultInfo
block|{
name|FaultKind
name|Kind
decl_stmt|;
specifier|const
name|MCExpr
modifier|*
name|FaultingOffsetExpr
decl_stmt|;
specifier|const
name|MCExpr
modifier|*
name|HandlerOffsetExpr
decl_stmt|;
name|FaultInfo
argument_list|()
operator|:
name|Kind
argument_list|(
name|FaultKindMax
argument_list|)
operator|,
name|FaultingOffsetExpr
argument_list|(
name|nullptr
argument_list|)
operator|,
name|HandlerOffsetExpr
argument_list|(
argument|nullptr
argument_list|)
block|{}
name|explicit
name|FaultInfo
argument_list|(
argument|FaultMaps::FaultKind Kind
argument_list|,
argument|const MCExpr *FaultingOffset
argument_list|,
argument|const MCExpr *HandlerOffset
argument_list|)
operator|:
name|Kind
argument_list|(
name|Kind
argument_list|)
operator|,
name|FaultingOffsetExpr
argument_list|(
name|FaultingOffset
argument_list|)
operator|,
name|HandlerOffsetExpr
argument_list|(
argument|HandlerOffset
argument_list|)
block|{}
block|}
struct|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|FaultInfo
operator|>
name|FunctionFaultInfos
expr_stmt|;
comment|// We'd like to keep a stable iteration order for FunctionInfos to help
comment|// FileCheck based testing.
struct|struct
name|MCSymbolComparator
block|{
name|bool
name|operator
argument_list|()
operator|(
specifier|const
name|MCSymbol
operator|*
name|LHS
operator|,
specifier|const
name|MCSymbol
operator|*
name|RHS
operator|)
specifier|const
block|{
return|return
name|LHS
operator|->
name|getName
argument_list|()
operator|<
name|RHS
operator|->
name|getName
argument_list|()
return|;
block|}
block|}
struct|;
name|std
operator|::
name|map
operator|<
specifier|const
name|MCSymbol
operator|*
operator|,
name|FunctionFaultInfos
operator|,
name|MCSymbolComparator
operator|>
name|FunctionInfos
expr_stmt|;
name|AsmPrinter
modifier|&
name|AP
decl_stmt|;
name|void
name|emitFunctionInfo
parameter_list|(
specifier|const
name|MCSymbol
modifier|*
name|FnLabel
parameter_list|,
specifier|const
name|FunctionFaultInfos
modifier|&
name|FFI
parameter_list|)
function_decl|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

