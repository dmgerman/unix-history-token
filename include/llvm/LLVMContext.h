begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- llvm/LLVMContext.h - Class for managing "global" state --*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares LLVMContext, a container of "global" state in LLVM, such
end_comment

begin_comment
comment|// as the global type and constant uniquing tables.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LLVMCONTEXT_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LLVMCONTEXT_H
end_define

begin_include
include|#
directive|include
file|"llvm/Support/DataTypes.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|LLVMContextImpl
decl_stmt|;
name|class
name|Constant
decl_stmt|;
name|class
name|ConstantInt
decl_stmt|;
name|class
name|ConstantPointerNull
decl_stmt|;
name|class
name|ConstantStruct
decl_stmt|;
name|class
name|ConstantAggregateZero
decl_stmt|;
name|class
name|ConstantArray
decl_stmt|;
name|class
name|ConstantFP
decl_stmt|;
name|class
name|ConstantVector
decl_stmt|;
name|class
name|UndefValue
decl_stmt|;
name|class
name|MDNode
decl_stmt|;
name|class
name|MDString
decl_stmt|;
name|class
name|IntegerType
decl_stmt|;
name|class
name|PointerType
decl_stmt|;
name|class
name|StructType
decl_stmt|;
name|class
name|ArrayType
decl_stmt|;
name|class
name|VectorType
decl_stmt|;
name|class
name|OpaqueType
decl_stmt|;
name|class
name|FunctionType
decl_stmt|;
name|class
name|Type
decl_stmt|;
name|class
name|APInt
decl_stmt|;
name|class
name|APFloat
decl_stmt|;
name|class
name|Value
decl_stmt|;
comment|/// This is an important class for using LLVM in a threaded context.  It
comment|/// (opaquely) owns and manages the core "global" data of LLVM's core
comment|/// infrastructure, including the type and constant uniquing tables.
comment|/// LLVMContext itself provides no locking guarantees, so you should be careful
comment|/// to have one context per thread.
name|class
name|LLVMContext
block|{
name|LLVMContextImpl
modifier|*
name|pImpl
decl_stmt|;
name|public
label|:
name|LLVMContext
argument_list|()
expr_stmt|;
operator|~
name|LLVMContext
argument_list|()
expr_stmt|;
comment|// Constant accessors
name|Constant
modifier|*
name|getNullValue
parameter_list|(
specifier|const
name|Type
modifier|*
name|Ty
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getAllOnesValue
parameter_list|(
specifier|const
name|Type
modifier|*
name|Ty
parameter_list|)
function_decl|;
comment|// UndefValue accessors
name|UndefValue
modifier|*
name|getUndef
parameter_list|(
specifier|const
name|Type
modifier|*
name|Ty
parameter_list|)
function_decl|;
comment|// ConstantInt accessors
name|ConstantInt
modifier|*
name|getConstantIntTrue
parameter_list|()
function_decl|;
name|ConstantInt
modifier|*
name|getConstantIntFalse
parameter_list|()
function_decl|;
name|Constant
modifier|*
name|getConstantInt
parameter_list|(
specifier|const
name|Type
modifier|*
name|Ty
parameter_list|,
name|uint64_t
name|V
parameter_list|,
name|bool
name|isSigned
init|=
name|false
parameter_list|)
function_decl|;
name|ConstantInt
modifier|*
name|getConstantInt
parameter_list|(
specifier|const
name|IntegerType
modifier|*
name|Ty
parameter_list|,
name|uint64_t
name|V
parameter_list|,
name|bool
name|isSigned
init|=
name|false
parameter_list|)
function_decl|;
name|ConstantInt
modifier|*
name|getConstantIntSigned
parameter_list|(
specifier|const
name|IntegerType
modifier|*
name|Ty
parameter_list|,
name|int64_t
name|V
parameter_list|)
function_decl|;
name|ConstantInt
modifier|*
name|getConstantInt
parameter_list|(
specifier|const
name|APInt
modifier|&
name|V
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantInt
parameter_list|(
specifier|const
name|Type
modifier|*
name|Ty
parameter_list|,
specifier|const
name|APInt
modifier|&
name|V
parameter_list|)
function_decl|;
name|ConstantInt
modifier|*
name|getConstantIntAllOnesValue
parameter_list|(
specifier|const
name|Type
modifier|*
name|Ty
parameter_list|)
function_decl|;
comment|// ConstantPointerNull accessors
name|ConstantPointerNull
modifier|*
name|getConstantPointerNull
parameter_list|(
specifier|const
name|PointerType
modifier|*
name|T
parameter_list|)
function_decl|;
comment|// ConstantStruct accessors
name|Constant
modifier|*
name|getConstantStruct
argument_list|(
specifier|const
name|StructType
operator|*
name|T
argument_list|,
specifier|const
name|std
operator|::
name|vector
operator|<
name|Constant
operator|*
operator|>
operator|&
name|V
argument_list|)
decl_stmt|;
name|Constant
modifier|*
name|getConstantStruct
argument_list|(
specifier|const
name|std
operator|::
name|vector
operator|<
name|Constant
operator|*
operator|>
operator|&
name|V
argument_list|,
name|bool
name|Packed
operator|=
name|false
argument_list|)
decl_stmt|;
name|Constant
modifier|*
name|getConstantStruct
parameter_list|(
name|Constant
modifier|*
specifier|const
modifier|*
name|Vals
parameter_list|,
name|unsigned
name|NumVals
parameter_list|,
name|bool
name|Packed
init|=
name|false
parameter_list|)
function_decl|;
comment|// ConstantAggregateZero accessors
name|ConstantAggregateZero
modifier|*
name|getConstantAggregateZero
parameter_list|(
specifier|const
name|Type
modifier|*
name|Ty
parameter_list|)
function_decl|;
comment|// ConstantArray accessors
name|Constant
modifier|*
name|getConstantArray
argument_list|(
specifier|const
name|ArrayType
operator|*
name|T
argument_list|,
specifier|const
name|std
operator|::
name|vector
operator|<
name|Constant
operator|*
operator|>
operator|&
name|V
argument_list|)
decl_stmt|;
name|Constant
modifier|*
name|getConstantArray
parameter_list|(
specifier|const
name|ArrayType
modifier|*
name|T
parameter_list|,
name|Constant
modifier|*
specifier|const
modifier|*
name|Vals
parameter_list|,
name|unsigned
name|NumVals
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantArray
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Initializer
argument_list|,
name|bool
name|AddNull
operator|=
name|false
argument_list|)
decl_stmt|;
comment|// ConstantExpr accessors
name|Constant
modifier|*
name|getConstantExpr
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|Constant
modifier|*
name|C1
parameter_list|,
name|Constant
modifier|*
name|C2
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprTrunc
parameter_list|(
name|Constant
modifier|*
name|C
parameter_list|,
specifier|const
name|Type
modifier|*
name|Ty
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprSExt
parameter_list|(
name|Constant
modifier|*
name|C
parameter_list|,
specifier|const
name|Type
modifier|*
name|Ty
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprZExt
parameter_list|(
name|Constant
modifier|*
name|C
parameter_list|,
specifier|const
name|Type
modifier|*
name|Ty
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprFPTrunc
parameter_list|(
name|Constant
modifier|*
name|C
parameter_list|,
specifier|const
name|Type
modifier|*
name|Ty
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprFPExtend
parameter_list|(
name|Constant
modifier|*
name|C
parameter_list|,
specifier|const
name|Type
modifier|*
name|Ty
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprUIToFP
parameter_list|(
name|Constant
modifier|*
name|C
parameter_list|,
specifier|const
name|Type
modifier|*
name|Ty
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprSIToFP
parameter_list|(
name|Constant
modifier|*
name|C
parameter_list|,
specifier|const
name|Type
modifier|*
name|Ty
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprFPToUI
parameter_list|(
name|Constant
modifier|*
name|C
parameter_list|,
specifier|const
name|Type
modifier|*
name|Ty
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprFPToSI
parameter_list|(
name|Constant
modifier|*
name|C
parameter_list|,
specifier|const
name|Type
modifier|*
name|Ty
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprPtrToInt
parameter_list|(
name|Constant
modifier|*
name|C
parameter_list|,
specifier|const
name|Type
modifier|*
name|Ty
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprIntToPtr
parameter_list|(
name|Constant
modifier|*
name|C
parameter_list|,
specifier|const
name|Type
modifier|*
name|Ty
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprBitCast
parameter_list|(
name|Constant
modifier|*
name|C
parameter_list|,
specifier|const
name|Type
modifier|*
name|Ty
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprCast
parameter_list|(
name|unsigned
name|ops
parameter_list|,
name|Constant
modifier|*
name|C
parameter_list|,
specifier|const
name|Type
modifier|*
name|Ty
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprZExtOrBitCast
parameter_list|(
name|Constant
modifier|*
name|C
parameter_list|,
specifier|const
name|Type
modifier|*
name|Ty
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprSExtOrBitCast
parameter_list|(
name|Constant
modifier|*
name|C
parameter_list|,
specifier|const
name|Type
modifier|*
name|Ty
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprTruncOrBitCast
parameter_list|(
name|Constant
modifier|*
name|C
parameter_list|,
specifier|const
name|Type
modifier|*
name|Ty
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprPointerCast
parameter_list|(
name|Constant
modifier|*
name|C
parameter_list|,
specifier|const
name|Type
modifier|*
name|Ty
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprIntegerCast
parameter_list|(
name|Constant
modifier|*
name|C
parameter_list|,
specifier|const
name|Type
modifier|*
name|Ty
parameter_list|,
name|bool
name|isSigned
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprFPCast
parameter_list|(
name|Constant
modifier|*
name|C
parameter_list|,
specifier|const
name|Type
modifier|*
name|Ty
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprSelect
parameter_list|(
name|Constant
modifier|*
name|C
parameter_list|,
name|Constant
modifier|*
name|V1
parameter_list|,
name|Constant
modifier|*
name|V2
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprAlignOf
parameter_list|(
specifier|const
name|Type
modifier|*
name|Ty
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprCompare
parameter_list|(
name|unsigned
name|short
name|pred
parameter_list|,
name|Constant
modifier|*
name|C1
parameter_list|,
name|Constant
modifier|*
name|C2
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprNeg
parameter_list|(
name|Constant
modifier|*
name|C
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprFNeg
parameter_list|(
name|Constant
modifier|*
name|C
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprNot
parameter_list|(
name|Constant
modifier|*
name|C
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprAdd
parameter_list|(
name|Constant
modifier|*
name|C1
parameter_list|,
name|Constant
modifier|*
name|C2
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprFAdd
parameter_list|(
name|Constant
modifier|*
name|C1
parameter_list|,
name|Constant
modifier|*
name|C2
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprSub
parameter_list|(
name|Constant
modifier|*
name|C1
parameter_list|,
name|Constant
modifier|*
name|C2
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprFSub
parameter_list|(
name|Constant
modifier|*
name|C1
parameter_list|,
name|Constant
modifier|*
name|C2
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprMul
parameter_list|(
name|Constant
modifier|*
name|C1
parameter_list|,
name|Constant
modifier|*
name|C2
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprFMul
parameter_list|(
name|Constant
modifier|*
name|C1
parameter_list|,
name|Constant
modifier|*
name|C2
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprUDiv
parameter_list|(
name|Constant
modifier|*
name|C1
parameter_list|,
name|Constant
modifier|*
name|C2
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprSDiv
parameter_list|(
name|Constant
modifier|*
name|C1
parameter_list|,
name|Constant
modifier|*
name|C2
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprFDiv
parameter_list|(
name|Constant
modifier|*
name|C1
parameter_list|,
name|Constant
modifier|*
name|C2
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprURem
parameter_list|(
name|Constant
modifier|*
name|C1
parameter_list|,
name|Constant
modifier|*
name|C2
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprSRem
parameter_list|(
name|Constant
modifier|*
name|C1
parameter_list|,
name|Constant
modifier|*
name|C2
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprFRem
parameter_list|(
name|Constant
modifier|*
name|C1
parameter_list|,
name|Constant
modifier|*
name|C2
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprAnd
parameter_list|(
name|Constant
modifier|*
name|C1
parameter_list|,
name|Constant
modifier|*
name|C2
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprOr
parameter_list|(
name|Constant
modifier|*
name|C1
parameter_list|,
name|Constant
modifier|*
name|C2
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprXor
parameter_list|(
name|Constant
modifier|*
name|C1
parameter_list|,
name|Constant
modifier|*
name|C2
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprICmp
parameter_list|(
name|unsigned
name|short
name|pred
parameter_list|,
name|Constant
modifier|*
name|LHS
parameter_list|,
name|Constant
modifier|*
name|RHS
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprFCmp
parameter_list|(
name|unsigned
name|short
name|pred
parameter_list|,
name|Constant
modifier|*
name|LHS
parameter_list|,
name|Constant
modifier|*
name|RHS
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprVICmp
parameter_list|(
name|unsigned
name|short
name|pred
parameter_list|,
name|Constant
modifier|*
name|LHS
parameter_list|,
name|Constant
modifier|*
name|RHS
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprVFCmp
parameter_list|(
name|unsigned
name|short
name|pred
parameter_list|,
name|Constant
modifier|*
name|LHS
parameter_list|,
name|Constant
modifier|*
name|RHS
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprShl
parameter_list|(
name|Constant
modifier|*
name|C1
parameter_list|,
name|Constant
modifier|*
name|C2
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprLShr
parameter_list|(
name|Constant
modifier|*
name|C1
parameter_list|,
name|Constant
modifier|*
name|C2
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprAShr
parameter_list|(
name|Constant
modifier|*
name|C1
parameter_list|,
name|Constant
modifier|*
name|C2
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprGetElementPtr
parameter_list|(
name|Constant
modifier|*
name|C
parameter_list|,
name|Constant
modifier|*
specifier|const
modifier|*
name|IdxList
parameter_list|,
name|unsigned
name|NumIdx
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprGetElementPtr
parameter_list|(
name|Constant
modifier|*
name|C
parameter_list|,
name|Value
modifier|*
specifier|const
modifier|*
name|IdxList
parameter_list|,
name|unsigned
name|NumIdx
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprExtractElement
parameter_list|(
name|Constant
modifier|*
name|Vec
parameter_list|,
name|Constant
modifier|*
name|Idx
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprInsertElement
parameter_list|(
name|Constant
modifier|*
name|Vec
parameter_list|,
name|Constant
modifier|*
name|Elt
parameter_list|,
name|Constant
modifier|*
name|Idx
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprShuffleVector
parameter_list|(
name|Constant
modifier|*
name|V1
parameter_list|,
name|Constant
modifier|*
name|V2
parameter_list|,
name|Constant
modifier|*
name|Mask
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprExtractValue
parameter_list|(
name|Constant
modifier|*
name|Agg
parameter_list|,
specifier|const
name|unsigned
modifier|*
name|IdxList
parameter_list|,
name|unsigned
name|NumIdx
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantExprInsertValue
parameter_list|(
name|Constant
modifier|*
name|Agg
parameter_list|,
name|Constant
modifier|*
name|Val
parameter_list|,
specifier|const
name|unsigned
modifier|*
name|IdxList
parameter_list|,
name|unsigned
name|NumIdx
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getZeroValueForNegation
parameter_list|(
specifier|const
name|Type
modifier|*
name|Ty
parameter_list|)
function_decl|;
comment|// ConstantFP accessors
name|ConstantFP
modifier|*
name|getConstantFP
parameter_list|(
specifier|const
name|APFloat
modifier|&
name|V
parameter_list|)
function_decl|;
name|Constant
modifier|*
name|getConstantFP
parameter_list|(
specifier|const
name|Type
modifier|*
name|Ty
parameter_list|,
name|double
name|V
parameter_list|)
function_decl|;
name|ConstantFP
modifier|*
name|getConstantFPNegativeZero
parameter_list|(
specifier|const
name|Type
modifier|*
name|Ty
parameter_list|)
function_decl|;
comment|// ConstantVector accessors
name|Constant
modifier|*
name|getConstantVector
argument_list|(
specifier|const
name|VectorType
operator|*
name|T
argument_list|,
specifier|const
name|std
operator|::
name|vector
operator|<
name|Constant
operator|*
operator|>
operator|&
name|V
argument_list|)
decl_stmt|;
name|Constant
modifier|*
name|getConstantVector
argument_list|(
specifier|const
name|std
operator|::
name|vector
operator|<
name|Constant
operator|*
operator|>
operator|&
name|V
argument_list|)
decl_stmt|;
name|Constant
modifier|*
name|getConstantVector
parameter_list|(
name|Constant
modifier|*
specifier|const
modifier|*
name|Vals
parameter_list|,
name|unsigned
name|NumVals
parameter_list|)
function_decl|;
name|ConstantVector
modifier|*
name|getConstantVectorAllOnesValue
parameter_list|(
specifier|const
name|VectorType
modifier|*
name|Ty
parameter_list|)
function_decl|;
comment|// MDNode accessors
name|MDNode
modifier|*
name|getMDNode
parameter_list|(
name|Value
modifier|*
specifier|const
modifier|*
name|Vals
parameter_list|,
name|unsigned
name|NumVals
parameter_list|)
function_decl|;
comment|// MDString accessors
name|MDString
modifier|*
name|getMDString
parameter_list|(
specifier|const
name|char
modifier|*
name|StrBegin
parameter_list|,
specifier|const
name|char
modifier|*
name|StrEnd
parameter_list|)
function_decl|;
name|MDString
modifier|*
name|getMDString
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Str
argument_list|)
decl_stmt|;
comment|// FunctionType accessors
name|FunctionType
modifier|*
name|getFunctionType
argument_list|(
specifier|const
name|Type
operator|*
name|Result
argument_list|,
specifier|const
name|std
operator|::
name|vector
operator|<
specifier|const
name|Type
operator|*
operator|>
operator|&
name|Params
argument_list|,
name|bool
name|isVarArg
argument_list|)
decl_stmt|;
comment|// IntegerType accessors
specifier|const
name|IntegerType
modifier|*
name|getIntegerType
parameter_list|(
name|unsigned
name|NumBits
parameter_list|)
function_decl|;
comment|// OpaqueType accessors
name|OpaqueType
modifier|*
name|getOpaqueType
parameter_list|()
function_decl|;
comment|// StructType accessors
name|StructType
modifier|*
name|getStructType
parameter_list|(
name|bool
name|isPacked
init|=
name|false
parameter_list|)
function_decl|;
name|StructType
modifier|*
name|getStructType
argument_list|(
specifier|const
name|std
operator|::
name|vector
operator|<
specifier|const
name|Type
operator|*
operator|>
operator|&
name|Params
argument_list|,
name|bool
name|isPacked
operator|=
name|false
argument_list|)
decl_stmt|;
comment|// ArrayType accessors
name|ArrayType
modifier|*
name|getArrayType
parameter_list|(
specifier|const
name|Type
modifier|*
name|ElementType
parameter_list|,
name|uint64_t
name|NumElements
parameter_list|)
function_decl|;
comment|// PointerType accessors
name|PointerType
modifier|*
name|getPointerType
parameter_list|(
specifier|const
name|Type
modifier|*
name|ElementType
parameter_list|,
name|unsigned
name|AddressSpace
parameter_list|)
function_decl|;
name|PointerType
modifier|*
name|getPointerTypeUnqual
parameter_list|(
specifier|const
name|Type
modifier|*
name|ElementType
parameter_list|)
function_decl|;
comment|// VectorType accessors
name|VectorType
modifier|*
name|getVectorType
parameter_list|(
specifier|const
name|Type
modifier|*
name|ElementType
parameter_list|,
name|unsigned
name|NumElements
parameter_list|)
function_decl|;
name|VectorType
modifier|*
name|getVectorTypeInteger
parameter_list|(
specifier|const
name|VectorType
modifier|*
name|VTy
parameter_list|)
function_decl|;
name|VectorType
modifier|*
name|getVectorTypeExtendedElement
parameter_list|(
specifier|const
name|VectorType
modifier|*
name|VTy
parameter_list|)
function_decl|;
name|VectorType
modifier|*
name|getVectorTypeTruncatedElement
parameter_list|(
specifier|const
name|VectorType
modifier|*
name|VTy
parameter_list|)
function_decl|;
block|}
empty_stmt|;
comment|/// FOR BACKWARDS COMPATIBILITY - Returns a global context.
specifier|extern
name|LLVMContext
modifier|&
name|getGlobalContext
parameter_list|()
function_decl|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

