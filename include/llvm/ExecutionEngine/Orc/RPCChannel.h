begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- llvm/ExecutionEngine/Orc/RPCChannel.h --------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_EXECUTIONENGINE_ORC_RPCCHANNEL_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_EXECUTIONENGINE_ORC_RPCCHANNEL_H
end_define

begin_include
include|#
directive|include
file|"OrcError.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/STLExtras.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Endian.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Error.h"
end_include

begin_include
include|#
directive|include
file|<cstddef>
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_include
include|#
directive|include
file|<mutex>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<tuple>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|orc
block|{
name|namespace
name|remote
block|{
comment|/// Interface for byte-streams to be used with RPC.
name|class
name|RPCChannel
block|{
name|public
label|:
name|virtual
operator|~
name|RPCChannel
argument_list|()
block|{}
comment|/// Read Size bytes from the stream into *Dst.
name|virtual
name|Error
name|readBytes
argument_list|(
argument|char *Dst
argument_list|,
argument|unsigned Size
argument_list|)
operator|=
literal|0
expr_stmt|;
comment|/// Read size bytes from *Src and append them to the stream.
name|virtual
name|Error
name|appendBytes
parameter_list|(
specifier|const
name|char
modifier|*
name|Src
parameter_list|,
name|unsigned
name|Size
parameter_list|)
init|=
literal|0
function_decl|;
comment|/// Flush the stream if possible.
name|virtual
name|Error
name|send
parameter_list|()
init|=
literal|0
function_decl|;
comment|/// Get the lock for stream reading.
name|std
operator|::
name|mutex
operator|&
name|getReadLock
argument_list|()
block|{
return|return
name|readLock
return|;
block|}
comment|/// Get the lock for stream writing.
name|std
operator|::
name|mutex
operator|&
name|getWriteLock
argument_list|()
block|{
return|return
name|writeLock
return|;
block|}
name|private
label|:
name|std
operator|::
name|mutex
name|readLock
operator|,
name|writeLock
expr_stmt|;
block|}
empty_stmt|;
comment|/// Notify the channel that we're starting a message send.
comment|/// Locks the channel for writing.
specifier|inline
name|Error
name|startSendMessage
parameter_list|(
name|RPCChannel
modifier|&
name|C
parameter_list|)
block|{
name|C
operator|.
name|getWriteLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
comment|/// Notify the channel that we're ending a message send.
comment|/// Unlocks the channel for writing.
specifier|inline
name|Error
name|endSendMessage
parameter_list|(
name|RPCChannel
modifier|&
name|C
parameter_list|)
block|{
name|C
operator|.
name|getWriteLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
comment|/// Notify the channel that we're starting a message receive.
comment|/// Locks the channel for reading.
specifier|inline
name|Error
name|startReceiveMessage
parameter_list|(
name|RPCChannel
modifier|&
name|C
parameter_list|)
block|{
name|C
operator|.
name|getReadLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
comment|/// Notify the channel that we're ending a message receive.
comment|/// Unlocks the channel for reading.
specifier|inline
name|Error
name|endReceiveMessage
parameter_list|(
name|RPCChannel
modifier|&
name|C
parameter_list|)
block|{
name|C
operator|.
name|getReadLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
comment|/// RPC channel serialization for a variadic list of arguments.
name|template
operator|<
name|typename
name|T
operator|,
name|typename
operator|...
name|Ts
operator|>
name|Error
name|serializeSeq
argument_list|(
argument|RPCChannel&C
argument_list|,
argument|const T&Arg
argument_list|,
argument|const Ts&... Args
argument_list|)
block|{
if|if
condition|(
name|auto
name|Err
init|=
name|serialize
argument_list|(
name|C
argument_list|,
name|Arg
argument_list|)
condition|)
return|return
name|Err
return|;
return|return
name|serializeSeq
argument_list|(
name|C
argument_list|,
name|Args
operator|...
argument_list|)
return|;
block|}
comment|/// RPC channel serialization for an (empty) variadic list of arguments.
specifier|inline
name|Error
name|serializeSeq
parameter_list|(
name|RPCChannel
modifier|&
name|C
parameter_list|)
block|{
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
comment|/// RPC channel deserialization for a variadic list of arguments.
name|template
operator|<
name|typename
name|T
operator|,
name|typename
operator|...
name|Ts
operator|>
name|Error
name|deserializeSeq
argument_list|(
argument|RPCChannel&C
argument_list|,
argument|T&Arg
argument_list|,
argument|Ts&... Args
argument_list|)
block|{
if|if
condition|(
name|auto
name|Err
init|=
name|deserialize
argument_list|(
name|C
argument_list|,
name|Arg
argument_list|)
condition|)
return|return
name|Err
return|;
return|return
name|deserializeSeq
argument_list|(
name|C
argument_list|,
name|Args
operator|...
argument_list|)
return|;
block|}
comment|/// RPC channel serialization for an (empty) variadic list of arguments.
specifier|inline
name|Error
name|deserializeSeq
parameter_list|(
name|RPCChannel
modifier|&
name|C
parameter_list|)
block|{
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
comment|/// RPC channel serialization for integer primitives.
name|template
operator|<
name|typename
name|T
operator|>
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_same
operator|<
name|T
operator|,
name|uint64_t
operator|>
operator|::
name|value
operator|||
name|std
operator|::
name|is_same
operator|<
name|T
operator|,
name|int64_t
operator|>
operator|::
name|value
operator|||
name|std
operator|::
name|is_same
operator|<
name|T
operator|,
name|uint32_t
operator|>
operator|::
name|value
operator|||
name|std
operator|::
name|is_same
operator|<
name|T
operator|,
name|int32_t
operator|>
operator|::
name|value
operator|||
name|std
operator|::
name|is_same
operator|<
name|T
operator|,
name|uint16_t
operator|>
operator|::
name|value
operator|||
name|std
operator|::
name|is_same
operator|<
name|T
operator|,
name|int16_t
operator|>
operator|::
name|value
operator|||
name|std
operator|::
name|is_same
operator|<
name|T
operator|,
name|uint8_t
operator|>
operator|::
name|value
operator|||
name|std
operator|::
name|is_same
operator|<
name|T
operator|,
name|int8_t
operator|>
operator|::
name|value
operator|,
name|Error
operator|>
operator|::
name|type
name|serialize
argument_list|(
argument|RPCChannel&C
argument_list|,
argument|T V
argument_list|)
block|{
name|support
operator|::
name|endian
operator|::
name|byte_swap
operator|<
name|T
block|,
name|support
operator|::
name|big
operator|>
operator|(
name|V
operator|)
block|;
return|return
name|C
operator|.
name|appendBytes
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|char
operator|*
operator|>
operator|(
operator|&
name|V
operator|)
argument_list|,
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
return|;
block|}
comment|/// RPC channel deserialization for integer primitives.
name|template
operator|<
name|typename
name|T
operator|>
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_same
operator|<
name|T
operator|,
name|uint64_t
operator|>
operator|::
name|value
operator|||
name|std
operator|::
name|is_same
operator|<
name|T
operator|,
name|int64_t
operator|>
operator|::
name|value
operator|||
name|std
operator|::
name|is_same
operator|<
name|T
operator|,
name|uint32_t
operator|>
operator|::
name|value
operator|||
name|std
operator|::
name|is_same
operator|<
name|T
operator|,
name|int32_t
operator|>
operator|::
name|value
operator|||
name|std
operator|::
name|is_same
operator|<
name|T
operator|,
name|uint16_t
operator|>
operator|::
name|value
operator|||
name|std
operator|::
name|is_same
operator|<
name|T
operator|,
name|int16_t
operator|>
operator|::
name|value
operator|||
name|std
operator|::
name|is_same
operator|<
name|T
operator|,
name|uint8_t
operator|>
operator|::
name|value
operator|||
name|std
operator|::
name|is_same
operator|<
name|T
operator|,
name|int8_t
operator|>
operator|::
name|value
operator|,
name|Error
operator|>
operator|::
name|type
name|deserialize
argument_list|(
argument|RPCChannel&C
argument_list|,
argument|T&V
argument_list|)
block|{
if|if
condition|(
name|auto
name|Err
init|=
name|C
operator|.
name|readBytes
argument_list|(
name|reinterpret_cast
operator|<
name|char
operator|*
operator|>
operator|(
operator|&
name|V
operator|)
argument_list|,
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
condition|)
return|return
name|Err
return|;
name|support
operator|::
name|endian
operator|::
name|byte_swap
operator|<
name|T
operator|,
name|support
operator|::
name|big
operator|>
operator|(
name|V
operator|)
expr_stmt|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
end_decl_stmt

begin_comment
comment|/// RPC channel serialization for enums.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_enum
operator|<
name|T
operator|>
operator|::
name|value
operator|,
name|Error
operator|>
operator|::
name|type
name|serialize
argument_list|(
argument|RPCChannel&C
argument_list|,
argument|T V
argument_list|)
block|{
return|return
name|serialize
argument_list|(
argument|C
argument_list|,
argument|static_cast<typename std::underlying_type<T>::type>(V)
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/// RPC channel deserialization for enums.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_enum
operator|<
name|T
operator|>
operator|::
name|value
operator|,
name|Error
operator|>
operator|::
name|type
name|deserialize
argument_list|(
argument|RPCChannel&C
argument_list|,
argument|T&V
argument_list|)
block|{
name|typename
name|std
operator|::
name|underlying_type
operator|<
name|T
operator|>
operator|::
name|type
name|Tmp
block|;
name|Error
name|Err
operator|=
name|deserialize
argument_list|(
name|C
argument_list|,
name|Tmp
argument_list|)
block|;
name|V
operator|=
name|static_cast
operator|<
name|T
operator|>
operator|(
name|Tmp
operator|)
block|;
return|return
name|Err
return|;
block|}
end_expr_stmt

begin_comment
comment|/// RPC channel serialization for bools.
end_comment

begin_function
specifier|inline
name|Error
name|serialize
parameter_list|(
name|RPCChannel
modifier|&
name|C
parameter_list|,
name|bool
name|V
parameter_list|)
block|{
name|uint8_t
name|VN
init|=
name|V
condition|?
literal|1
else|:
literal|0
decl_stmt|;
return|return
name|C
operator|.
name|appendBytes
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|char
operator|*
operator|>
operator|(
operator|&
name|VN
operator|)
argument_list|,
literal|1
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/// RPC channel deserialization for bools.
end_comment

begin_function
specifier|inline
name|Error
name|deserialize
parameter_list|(
name|RPCChannel
modifier|&
name|C
parameter_list|,
name|bool
modifier|&
name|V
parameter_list|)
block|{
name|uint8_t
name|VN
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|auto
name|Err
init|=
name|C
operator|.
name|readBytes
argument_list|(
name|reinterpret_cast
operator|<
name|char
operator|*
operator|>
operator|(
operator|&
name|VN
operator|)
argument_list|,
literal|1
argument_list|)
condition|)
return|return
name|Err
return|;
name|V
operator|=
operator|(
name|VN
operator|!=
literal|0
operator|)
expr_stmt|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/// RPC channel serialization for StringRefs.
end_comment

begin_comment
comment|/// Note: There is no corresponding deseralization for this, as StringRef
end_comment

begin_comment
comment|/// doesn't own its memory and so can't hold the deserialized data.
end_comment

begin_function
specifier|inline
name|Error
name|serialize
parameter_list|(
name|RPCChannel
modifier|&
name|C
parameter_list|,
name|StringRef
name|S
parameter_list|)
block|{
if|if
condition|(
name|auto
name|Err
init|=
name|serialize
argument_list|(
name|C
argument_list|,
name|static_cast
operator|<
name|uint64_t
operator|>
operator|(
name|S
operator|.
name|size
argument_list|()
operator|)
argument_list|)
condition|)
return|return
name|Err
return|;
return|return
name|C
operator|.
name|appendBytes
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|S
operator|.
name|bytes_begin
argument_list|()
argument_list|,
name|S
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/// RPC channel serialization for std::strings.
end_comment

begin_decl_stmt
specifier|inline
name|Error
name|serialize
argument_list|(
name|RPCChannel
operator|&
name|C
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|S
argument_list|)
block|{
return|return
name|serialize
argument_list|(
name|C
argument_list|,
name|StringRef
argument_list|(
name|S
argument_list|)
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/// RPC channel deserialization for std::strings.
end_comment

begin_decl_stmt
specifier|inline
name|Error
name|deserialize
argument_list|(
name|RPCChannel
operator|&
name|C
argument_list|,
name|std
operator|::
name|string
operator|&
name|S
argument_list|)
block|{
name|uint64_t
name|Count
decl_stmt|;
if|if
condition|(
name|auto
name|Err
init|=
name|deserialize
argument_list|(
name|C
argument_list|,
name|Count
argument_list|)
condition|)
return|return
name|Err
return|;
name|S
operator|.
name|resize
argument_list|(
name|Count
argument_list|)
expr_stmt|;
return|return
name|C
operator|.
name|readBytes
argument_list|(
operator|&
name|S
index|[
literal|0
index|]
argument_list|,
name|Count
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|// Serialization helper for std::tuple.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|TupleT
operator|,
name|size_t
operator|...
name|Is
operator|>
specifier|inline
name|Error
name|serializeTupleHelper
argument_list|(
argument|RPCChannel&C
argument_list|,
argument|const TupleT&V
argument_list|,
argument|llvm::index_sequence<Is...> _
argument_list|)
block|{
return|return
name|serializeSeq
argument_list|(
name|C
argument_list|,
name|std
operator|::
name|get
operator|<
name|Is
operator|>
operator|(
name|V
operator|)
operator|...
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/// RPC channel serialization for std::tuple.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
operator|...
name|ArgTs
operator|>
specifier|inline
name|Error
name|serialize
argument_list|(
argument|RPCChannel&C
argument_list|,
argument|const std::tuple<ArgTs...>&V
argument_list|)
block|{
return|return
name|serializeTupleHelper
argument_list|(
name|C
argument_list|,
name|V
argument_list|,
name|llvm
operator|::
name|index_sequence_for
operator|<
name|ArgTs
operator|...
operator|>
operator|(
operator|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// Serialization helper for std::tuple.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|TupleT
operator|,
name|size_t
operator|...
name|Is
operator|>
specifier|inline
name|Error
name|deserializeTupleHelper
argument_list|(
argument|RPCChannel&C
argument_list|,
argument|TupleT&V
argument_list|,
argument|llvm::index_sequence<Is...> _
argument_list|)
block|{
return|return
name|deserializeSeq
argument_list|(
name|C
argument_list|,
name|std
operator|::
name|get
operator|<
name|Is
operator|>
operator|(
name|V
operator|)
operator|...
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/// RPC channel deserialization for std::tuple.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
operator|...
name|ArgTs
operator|>
specifier|inline
name|Error
name|deserialize
argument_list|(
argument|RPCChannel&C
argument_list|,
argument|std::tuple<ArgTs...>&V
argument_list|)
block|{
return|return
name|deserializeTupleHelper
argument_list|(
name|C
argument_list|,
name|V
argument_list|,
name|llvm
operator|::
name|index_sequence_for
operator|<
name|ArgTs
operator|...
operator|>
operator|(
operator|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/// RPC channel serialization for ArrayRef<T>.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|Error
name|serialize
argument_list|(
argument|RPCChannel&C
argument_list|,
argument|const ArrayRef<T>&A
argument_list|)
block|{
if|if
condition|(
name|auto
name|Err
init|=
name|serialize
argument_list|(
name|C
argument_list|,
name|static_cast
operator|<
name|uint64_t
operator|>
operator|(
name|A
operator|.
name|size
argument_list|()
operator|)
argument_list|)
condition|)
return|return
name|Err
return|;
end_expr_stmt

begin_for
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|E
range|:
name|A
control|)
if|if
condition|(
name|auto
name|Err
init|=
name|serialize
argument_list|(
name|C
argument_list|,
name|E
argument_list|)
condition|)
return|return
name|Err
return|;
end_for

begin_return
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
end_return

begin_comment
unit|}
comment|/// RPC channel serialization for std::array<T>.
end_comment

begin_expr_stmt
unit|template
operator|<
name|typename
name|T
operator|>
name|Error
name|serialize
argument_list|(
argument|RPCChannel&C
argument_list|,
argument|const std::vector<T>&V
argument_list|)
block|{
return|return
name|serialize
argument_list|(
name|C
argument_list|,
name|ArrayRef
operator|<
name|T
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/// RPC channel deserialization for std::array<T>.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|Error
name|deserialize
argument_list|(
argument|RPCChannel&C
argument_list|,
argument|std::vector<T>&V
argument_list|)
block|{
name|uint64_t
name|Count
operator|=
literal|0
block|;
if|if
condition|(
name|auto
name|Err
init|=
name|deserialize
argument_list|(
name|C
argument_list|,
name|Count
argument_list|)
condition|)
return|return
name|Err
return|;
name|V
operator|.
name|resize
argument_list|(
name|Count
argument_list|)
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
name|auto
operator|&
name|E
operator|:
name|V
control|)
if|if
condition|(
name|auto
name|Err
init|=
name|deserialize
argument_list|(
name|C
argument_list|,
name|E
argument_list|)
condition|)
return|return
name|Err
return|;
end_for

begin_return
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
end_return

begin_comment
unit|}  }
comment|// end namespace remote
end_comment

begin_comment
unit|}
comment|// end namespace orc
end_comment

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_EXECUTIONENGINE_ORC_RPCCHANNEL_H
end_comment

end_unit

