begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- LogicalDylib.h - Simulates dylib-style symbol lookup ---*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Simulates symbol resolution inside a dylib.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_EXECUTIONENGINE_ORC_LOGICALDYLIB_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_EXECUTIONENGINE_ORC_LOGICALDYLIB_H
end_define

begin_include
include|#
directive|include
file|"llvm/ExecutionEngine/Orc/JITSymbol.h"
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|orc
block|{
name|template
operator|<
name|typename
name|BaseLayerT
operator|,
name|typename
name|LogicalModuleResources
operator|,
name|typename
name|LogicalDylibResources
operator|>
name|class
name|LogicalDylib
block|{
name|public
operator|:
typedef|typedef
name|typename
name|BaseLayerT
operator|::
name|ModuleSetHandleT
name|BaseLayerModuleSetHandleT
expr_stmt|;
name|private
operator|:
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|BaseLayerModuleSetHandleT
operator|>
name|BaseLayerHandleList
expr_stmt|;
struct|struct
name|LogicalModule
block|{
comment|// Make this move-only to ensure they don't get duplicated across moves of
comment|// LogicalDylib or anything like that.
name|LogicalModule
argument_list|(
name|LogicalModule
operator|&&
name|RHS
argument_list|)
operator|:
name|Resources
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|RHS
operator|.
name|Resources
argument_list|)
argument_list|)
operator|,
name|BaseLayerHandles
argument_list|(
argument|std::move(RHS.BaseLayerHandles)
argument_list|)
block|{}
name|LogicalModule
argument_list|()
operator|=
expr|default
expr_stmt|;
name|LogicalModuleResources
name|Resources
decl_stmt|;
name|BaseLayerHandleList
name|BaseLayerHandles
decl_stmt|;
block|}
struct|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|LogicalModule
operator|>
name|LogicalModuleList
expr_stmt|;
name|public
label|:
typedef|typedef
name|typename
name|BaseLayerHandleList
operator|::
name|iterator
name|BaseLayerHandleIterator
expr_stmt|;
typedef|typedef
name|typename
name|LogicalModuleList
operator|::
name|iterator
name|LogicalModuleHandle
expr_stmt|;
name|LogicalDylib
argument_list|(
name|BaseLayerT
operator|&
name|BaseLayer
argument_list|)
operator|:
name|BaseLayer
argument_list|(
argument|BaseLayer
argument_list|)
block|{}
operator|~
name|LogicalDylib
argument_list|()
block|{
for|for
control|(
name|auto
operator|&
name|LM
operator|:
name|LogicalModules
control|)
for|for
control|(
name|auto
name|BLH
range|:
name|LM
operator|.
name|BaseLayerHandles
control|)
name|BaseLayer
operator|.
name|removeModuleSet
argument_list|(
name|BLH
argument_list|)
expr_stmt|;
block|}
comment|// If possible, remove this and ~LogicalDylib once the work in the dtor is
comment|// moved to members (eg: self-unregistering base layer handles).
name|LogicalDylib
argument_list|(
name|LogicalDylib
operator|&&
name|RHS
argument_list|)
operator|:
name|BaseLayer
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|RHS
operator|.
name|BaseLayer
argument_list|)
argument_list|)
operator|,
name|LogicalModules
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|RHS
operator|.
name|LogicalModules
argument_list|)
argument_list|)
operator|,
name|DylibResources
argument_list|(
argument|std::move(RHS.DylibResources)
argument_list|)
block|{}
name|LogicalModuleHandle
name|createLogicalModule
argument_list|()
block|{
name|LogicalModules
operator|.
name|push_back
argument_list|(
name|LogicalModule
argument_list|()
argument_list|)
block|;
return|return
name|std
operator|::
name|prev
argument_list|(
name|LogicalModules
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
name|void
name|addToLogicalModule
parameter_list|(
name|LogicalModuleHandle
name|LMH
parameter_list|,
name|BaseLayerModuleSetHandleT
name|BaseLayerHandle
parameter_list|)
block|{
name|LMH
operator|->
name|BaseLayerHandles
operator|.
name|push_back
argument_list|(
name|BaseLayerHandle
argument_list|)
expr_stmt|;
block|}
name|LogicalModuleResources
modifier|&
name|getLogicalModuleResources
parameter_list|(
name|LogicalModuleHandle
name|LMH
parameter_list|)
block|{
return|return
name|LMH
operator|->
name|Resources
return|;
block|}
name|BaseLayerHandleIterator
name|moduleHandlesBegin
parameter_list|(
name|LogicalModuleHandle
name|LMH
parameter_list|)
block|{
return|return
name|LMH
operator|->
name|BaseLayerHandles
operator|.
name|begin
argument_list|()
return|;
block|}
name|BaseLayerHandleIterator
name|moduleHandlesEnd
parameter_list|(
name|LogicalModuleHandle
name|LMH
parameter_list|)
block|{
return|return
name|LMH
operator|->
name|BaseLayerHandles
operator|.
name|end
argument_list|()
return|;
block|}
name|JITSymbol
name|findSymbolInLogicalModule
argument_list|(
name|LogicalModuleHandle
name|LMH
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
argument_list|,
name|bool
name|ExportedSymbolsOnly
argument_list|)
block|{
if|if
condition|(
name|auto
name|StubSym
init|=
name|LMH
operator|->
name|Resources
operator|.
name|findSymbol
argument_list|(
name|Name
argument_list|,
name|ExportedSymbolsOnly
argument_list|)
condition|)
return|return
name|StubSym
return|;
for|for
control|(
name|auto
name|BLH
range|:
name|LMH
operator|->
name|BaseLayerHandles
control|)
if|if
condition|(
name|auto
name|Symbol
init|=
name|BaseLayer
operator|.
name|findSymbolIn
argument_list|(
name|BLH
argument_list|,
name|Name
argument_list|,
name|ExportedSymbolsOnly
argument_list|)
condition|)
return|return
name|Symbol
return|;
return|return
name|nullptr
return|;
block|}
name|JITSymbol
name|findSymbolInternally
argument_list|(
name|LogicalModuleHandle
name|LMH
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
argument_list|)
block|{
if|if
condition|(
name|auto
name|Symbol
init|=
name|findSymbolInLogicalModule
argument_list|(
name|LMH
argument_list|,
name|Name
argument_list|,
name|false
argument_list|)
condition|)
return|return
name|Symbol
return|;
for|for
control|(
name|auto
name|LMI
init|=
name|LogicalModules
operator|.
name|begin
argument_list|()
init|,
name|LME
init|=
name|LogicalModules
operator|.
name|end
argument_list|()
init|;
name|LMI
operator|!=
name|LME
condition|;
operator|++
name|LMI
control|)
block|{
if|if
condition|(
name|LMI
operator|!=
name|LMH
condition|)
if|if
condition|(
name|auto
name|Symbol
init|=
name|findSymbolInLogicalModule
argument_list|(
name|LMI
argument_list|,
name|Name
argument_list|,
name|false
argument_list|)
condition|)
return|return
name|Symbol
return|;
block|}
return|return
name|nullptr
return|;
block|}
name|JITSymbol
name|findSymbol
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
argument_list|,
name|bool
name|ExportedSymbolsOnly
argument_list|)
block|{
for|for
control|(
name|auto
name|LMI
init|=
name|LogicalModules
operator|.
name|begin
argument_list|()
init|,
name|LME
init|=
name|LogicalModules
operator|.
name|end
argument_list|()
init|;
name|LMI
operator|!=
name|LME
condition|;
operator|++
name|LMI
control|)
if|if
condition|(
name|auto
name|Sym
init|=
name|findSymbolInLogicalModule
argument_list|(
name|LMI
argument_list|,
name|Name
argument_list|,
name|ExportedSymbolsOnly
argument_list|)
condition|)
return|return
name|Sym
return|;
return|return
name|nullptr
return|;
block|}
name|LogicalDylibResources
modifier|&
name|getDylibResources
parameter_list|()
block|{
return|return
name|DylibResources
return|;
block|}
name|protected
label|:
name|BaseLayerT
name|BaseLayer
decl_stmt|;
name|LogicalModuleList
name|LogicalModules
decl_stmt|;
name|LogicalDylibResources
name|DylibResources
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// End namespace orc.
end_comment

begin_comment
unit|}
comment|// End namespace llvm.
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_EXECUTIONENGINE_ORC_LOGICALDYLIB_H
end_comment

end_unit

