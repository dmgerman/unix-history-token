begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- SectionMemoryManager.h - Memory manager for MCJIT/RtDyld -*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file contains the declaration of a section-based memory manager used by
end_comment

begin_comment
comment|// the MCJIT execution engine and RuntimeDyld.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_EXECUTIONENGINE_SECTIONMEMORYMANAGER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_EXECUTIONENGINE_SECTIONMEMORYMANAGER_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ExecutionEngine/JITMemoryManager.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ErrorHandling.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Memory.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|/// This is a simple memory manager which implements the methods called by
comment|/// the RuntimeDyld class to allocate memory for section-based loading of
comment|/// objects, usually those generated by the MCJIT execution engine.
comment|///
comment|/// This memory manager allocates all section memory as read-write.  The
comment|/// RuntimeDyld will copy JITed section memory into these allocated blocks
comment|/// and perform any necessary linking and relocations.
comment|///
comment|/// Any client using this memory manager MUST ensure that section-specific
comment|/// page permissions have been applied before attempting to execute functions
comment|/// in the JITed object.  Permissions can be applied either by calling
comment|/// MCJIT::finalizeObject or by calling SectionMemoryManager::applyPermissions
comment|/// directly.  Clients of MCJIT should call MCJIT::finalizeObject.
name|class
name|SectionMemoryManager
range|:
name|public
name|JITMemoryManager
block|{
name|SectionMemoryManager
argument_list|(
argument|const SectionMemoryManager&
argument_list|)
name|LLVM_DELETED_FUNCTION
block|;
name|void
name|operator
operator|=
operator|(
specifier|const
name|SectionMemoryManager
operator|&
operator|)
name|LLVM_DELETED_FUNCTION
block|;
name|public
operator|:
name|SectionMemoryManager
argument_list|()
block|{ }
name|virtual
operator|~
name|SectionMemoryManager
argument_list|()
block|;
comment|/// \brief Allocates a memory block of (at least) the given size suitable for
comment|/// executable code.
comment|///
comment|/// The value of \p Alignment must be a power of two.  If \p Alignment is zero
comment|/// a default alignment of 16 will be used.
name|virtual
name|uint8_t
operator|*
name|allocateCodeSection
argument_list|(
argument|uintptr_t Size
argument_list|,
argument|unsigned Alignment
argument_list|,
argument|unsigned SectionID
argument_list|)
block|;
comment|/// \brief Allocates a memory block of (at least) the given size suitable for
comment|/// executable code.
comment|///
comment|/// The value of \p Alignment must be a power of two.  If \p Alignment is zero
comment|/// a default alignment of 16 will be used.
name|virtual
name|uint8_t
operator|*
name|allocateDataSection
argument_list|(
argument|uintptr_t Size
argument_list|,
argument|unsigned Alignment
argument_list|,
argument|unsigned SectionID
argument_list|,
argument|bool isReadOnly
argument_list|)
block|;
comment|/// \brief Applies section-specific memory permissions.
comment|///
comment|/// This method is called when object loading is complete and section page
comment|/// permissions can be applied.  It is up to the memory manager implementation
comment|/// to decide whether or not to act on this method.  The memory manager will
comment|/// typically allocate all sections as read-write and then apply specific
comment|/// permissions when this method is called.  Code sections cannot be executed
comment|/// until this function has been called.
comment|///
comment|/// \returns true if an error occurred, false otherwise.
name|virtual
name|bool
name|applyPermissions
argument_list|(
name|std
operator|::
name|string
operator|*
name|ErrMsg
operator|=
literal|0
argument_list|)
block|;
comment|/// This method returns the address of the specified function. As such it is
comment|/// only useful for resolving library symbols, not code generated symbols.
comment|///
comment|/// If \p AbortOnFailure is false and no function with the given name is
comment|/// found, this function returns a null pointer. Otherwise, it prints a
comment|/// message to stderr and aborts.
name|virtual
name|void
operator|*
name|getPointerToNamedFunction
argument_list|(
argument|const std::string&Name
argument_list|,
argument|bool AbortOnFailure = true
argument_list|)
block|;
comment|/// \brief Invalidate instruction cache for code sections.
comment|///
comment|/// Some platforms with separate data cache and instruction cache require
comment|/// explicit cache flush, otherwise JIT code manipulations (like resolved
comment|/// relocations) will get to the data cache but not to the instruction cache.
comment|///
comment|/// This method is not called by RuntimeDyld or MCJIT during the load
comment|/// process.  Clients may call this function when needed.  See the lli
comment|/// tool for example use.
name|virtual
name|void
name|invalidateInstructionCache
argument_list|()
block|;
name|private
operator|:
expr|struct
name|MemoryGroup
block|{
name|SmallVector
operator|<
name|sys
operator|::
name|MemoryBlock
block|,
literal|16
operator|>
name|AllocatedMem
block|;
name|SmallVector
operator|<
name|sys
operator|::
name|MemoryBlock
block|,
literal|16
operator|>
name|FreeMem
block|;
name|sys
operator|::
name|MemoryBlock
name|Near
block|;   }
block|;
name|uint8_t
operator|*
name|allocateSection
argument_list|(
argument|MemoryGroup&MemGroup
argument_list|,
argument|uintptr_t Size
argument_list|,
argument|unsigned Alignment
argument_list|)
block|;
name|error_code
name|applyMemoryGroupPermissions
argument_list|(
argument|MemoryGroup&MemGroup
argument_list|,
argument|unsigned Permissions
argument_list|)
block|;
name|MemoryGroup
name|CodeMem
block|;
name|MemoryGroup
name|RWDataMem
block|;
name|MemoryGroup
name|RODataMem
block|;
name|public
operator|:
comment|///
comment|/// Functions below are not used by MCJIT or RuntimeDyld, but must be
comment|/// implemented because they are declared as pure virtuals in the base class.
comment|///
name|virtual
name|void
name|setMemoryWritable
argument_list|()
block|{
name|llvm_unreachable
argument_list|(
literal|"Unexpected call!"
argument_list|)
block|;   }
name|virtual
name|void
name|setMemoryExecutable
argument_list|()
block|{
name|llvm_unreachable
argument_list|(
literal|"Unexpected call!"
argument_list|)
block|;   }
name|virtual
name|void
name|setPoisonMemory
argument_list|(
argument|bool poison
argument_list|)
block|{
name|llvm_unreachable
argument_list|(
literal|"Unexpected call!"
argument_list|)
block|;   }
name|virtual
name|void
name|AllocateGOT
argument_list|()
block|{
name|llvm_unreachable
argument_list|(
literal|"Unexpected call!"
argument_list|)
block|;   }
name|virtual
name|uint8_t
operator|*
name|getGOTBase
argument_list|()
specifier|const
block|{
name|llvm_unreachable
argument_list|(
literal|"Unexpected call!"
argument_list|)
block|;
return|return
literal|0
return|;
block|}
name|virtual
name|uint8_t
operator|*
name|startFunctionBody
argument_list|(
argument|const Function *F
argument_list|,
argument|uintptr_t&ActualSize
argument_list|)
block|{
name|llvm_unreachable
argument_list|(
literal|"Unexpected call!"
argument_list|)
block|;
return|return
literal|0
return|;
block|}
name|virtual
name|uint8_t
operator|*
name|allocateStub
argument_list|(
argument|const GlobalValue *F
argument_list|,
argument|unsigned StubSize
argument_list|,
argument|unsigned Alignment
argument_list|)
block|{
name|llvm_unreachable
argument_list|(
literal|"Unexpected call!"
argument_list|)
block|;
return|return
literal|0
return|;
block|}
name|virtual
name|void
name|endFunctionBody
argument_list|(
argument|const Function *F
argument_list|,
argument|uint8_t *FunctionStart
argument_list|,
argument|uint8_t *FunctionEnd
argument_list|)
block|{
name|llvm_unreachable
argument_list|(
literal|"Unexpected call!"
argument_list|)
block|;   }
name|virtual
name|uint8_t
operator|*
name|allocateSpace
argument_list|(
argument|intptr_t Size
argument_list|,
argument|unsigned Alignment
argument_list|)
block|{
name|llvm_unreachable
argument_list|(
literal|"Unexpected call!"
argument_list|)
block|;
return|return
literal|0
return|;
block|}
name|virtual
name|uint8_t
operator|*
name|allocateGlobal
argument_list|(
argument|uintptr_t Size
argument_list|,
argument|unsigned Alignment
argument_list|)
block|{
name|llvm_unreachable
argument_list|(
literal|"Unexpected call!"
argument_list|)
block|;
return|return
literal|0
return|;
block|}
name|virtual
name|void
name|deallocateFunctionBody
argument_list|(
argument|void *Body
argument_list|)
block|{
name|llvm_unreachable
argument_list|(
literal|"Unexpected call!"
argument_list|)
block|;   }
name|virtual
name|uint8_t
operator|*
name|startExceptionTable
argument_list|(
argument|const Function *F
argument_list|,
argument|uintptr_t&ActualSize
argument_list|)
block|{
name|llvm_unreachable
argument_list|(
literal|"Unexpected call!"
argument_list|)
block|;
return|return
literal|0
return|;
block|}
name|virtual
name|void
name|endExceptionTable
argument_list|(
argument|const Function *F
argument_list|,
argument|uint8_t *TableStart
argument_list|,
argument|uint8_t *TableEnd
argument_list|,
argument|uint8_t *FrameRegister
argument_list|)
block|{
name|llvm_unreachable
argument_list|(
literal|"Unexpected call!"
argument_list|)
block|;   }
name|virtual
name|void
name|deallocateExceptionTable
argument_list|(
argument|void *ET
argument_list|)
block|{
name|llvm_unreachable
argument_list|(
literal|"Unexpected call!"
argument_list|)
block|;   }
expr|}
block|;  }
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_EXECUTION_ENGINE_SECTION_MEMORY_MANAGER_H
end_comment

end_unit

