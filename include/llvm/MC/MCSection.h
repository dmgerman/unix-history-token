begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- MCSection.h - Machine Code Sections ----------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares the MCSection class.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_MC_MCSECTION_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_MC_MCSECTION_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/ilist.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/ilist_node.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/SectionKind.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Compiler.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MCAssembler
decl_stmt|;
name|class
name|MCAsmInfo
decl_stmt|;
name|class
name|MCContext
decl_stmt|;
name|class
name|MCExpr
decl_stmt|;
name|class
name|MCFragment
decl_stmt|;
name|class
name|MCSection
decl_stmt|;
name|class
name|MCSymbol
decl_stmt|;
name|class
name|raw_ostream
decl_stmt|;
comment|/// Instances of this class represent a uniqued identifier for a section in the
comment|/// current translation unit.  The MCContext class uniques and creates these.
name|class
name|MCSection
block|{
name|public
label|:
enum|enum
name|SectionVariant
block|{
name|SV_COFF
init|=
literal|0
block|,
name|SV_ELF
block|,
name|SV_MachO
block|}
enum|;
comment|/// \brief Express the state of bundle locked groups while emitting code.
enum|enum
name|BundleLockStateType
block|{
name|NotBundleLocked
block|,
name|BundleLocked
block|,
name|BundleLockedAlignToEnd
block|}
enum|;
typedef|typedef
name|iplist
operator|<
name|MCFragment
operator|>
name|FragmentListType
expr_stmt|;
typedef|typedef
name|FragmentListType
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
typedef|typedef
name|FragmentListType
operator|::
name|iterator
name|iterator
expr_stmt|;
typedef|typedef
name|FragmentListType
operator|::
name|const_reverse_iterator
name|const_reverse_iterator
expr_stmt|;
typedef|typedef
name|FragmentListType
operator|::
name|reverse_iterator
name|reverse_iterator
expr_stmt|;
name|private
label|:
name|MCSection
argument_list|(
specifier|const
name|MCSection
operator|&
argument_list|)
operator|=
name|delete
expr_stmt|;
name|void
name|operator
init|=
operator|(
specifier|const
name|MCSection
operator|&
operator|)
operator|=
name|delete
decl_stmt|;
name|MCSymbol
modifier|*
name|Begin
decl_stmt|;
name|MCSymbol
modifier|*
name|End
init|=
name|nullptr
decl_stmt|;
comment|/// The alignment requirement of this section.
name|unsigned
name|Alignment
init|=
literal|1
decl_stmt|;
comment|/// The section index in the assemblers section list.
name|unsigned
name|Ordinal
init|=
literal|0
decl_stmt|;
comment|/// The index of this section in the layout order.
name|unsigned
name|LayoutOrder
decl_stmt|;
comment|/// \brief Keeping track of bundle-locked state.
name|BundleLockStateType
name|BundleLockState
init|=
name|NotBundleLocked
decl_stmt|;
comment|/// \brief Current nesting depth of bundle_lock directives.
name|unsigned
name|BundleLockNestingDepth
init|=
literal|0
decl_stmt|;
comment|/// \brief We've seen a bundle_lock directive but not its first instruction
comment|/// yet.
name|bool
name|BundleGroupBeforeFirstInst
init|=
name|false
decl_stmt|;
comment|/// Whether this section has had instructions emitted into it.
name|unsigned
name|HasInstructions
range|:
literal|1
decl_stmt|;
name|FragmentListType
name|Fragments
decl_stmt|;
comment|/// Mapping from subsection number to insertion point for subsection numbers
comment|/// below that number.
name|SmallVector
operator|<
name|std
operator|::
name|pair
operator|<
name|unsigned
operator|,
name|MCFragment
operator|*
operator|>
operator|,
literal|1
operator|>
name|SubsectionFragmentMap
expr_stmt|;
name|protected
label|:
name|MCSection
argument_list|(
argument|SectionVariant V
argument_list|,
argument|SectionKind K
argument_list|,
argument|MCSymbol *Begin
argument_list|)
empty_stmt|;
name|SectionVariant
name|Variant
decl_stmt|;
name|SectionKind
name|Kind
decl_stmt|;
name|public
label|:
name|virtual
operator|~
name|MCSection
argument_list|()
expr_stmt|;
name|SectionKind
name|getKind
argument_list|()
specifier|const
block|{
return|return
name|Kind
return|;
block|}
name|SectionVariant
name|getVariant
argument_list|()
specifier|const
block|{
return|return
name|Variant
return|;
block|}
name|MCSymbol
modifier|*
name|getBeginSymbol
parameter_list|()
block|{
return|return
name|Begin
return|;
block|}
specifier|const
name|MCSymbol
operator|*
name|getBeginSymbol
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|MCSection
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|getBeginSymbol
argument_list|()
return|;
block|}
name|void
name|setBeginSymbol
parameter_list|(
name|MCSymbol
modifier|*
name|Sym
parameter_list|)
block|{
name|assert
argument_list|(
operator|!
name|Begin
argument_list|)
expr_stmt|;
name|Begin
operator|=
name|Sym
expr_stmt|;
block|}
name|MCSymbol
modifier|*
name|getEndSymbol
parameter_list|(
name|MCContext
modifier|&
name|Ctx
parameter_list|)
function_decl|;
name|bool
name|hasEnded
argument_list|()
specifier|const
expr_stmt|;
name|unsigned
name|getAlignment
argument_list|()
specifier|const
block|{
return|return
name|Alignment
return|;
block|}
name|void
name|setAlignment
parameter_list|(
name|unsigned
name|Value
parameter_list|)
block|{
name|Alignment
operator|=
name|Value
expr_stmt|;
block|}
name|unsigned
name|getOrdinal
argument_list|()
specifier|const
block|{
return|return
name|Ordinal
return|;
block|}
name|void
name|setOrdinal
parameter_list|(
name|unsigned
name|Value
parameter_list|)
block|{
name|Ordinal
operator|=
name|Value
expr_stmt|;
block|}
name|unsigned
name|getLayoutOrder
argument_list|()
specifier|const
block|{
return|return
name|LayoutOrder
return|;
block|}
name|void
name|setLayoutOrder
parameter_list|(
name|unsigned
name|Value
parameter_list|)
block|{
name|LayoutOrder
operator|=
name|Value
expr_stmt|;
block|}
name|BundleLockStateType
name|getBundleLockState
argument_list|()
specifier|const
block|{
return|return
name|BundleLockState
return|;
block|}
name|void
name|setBundleLockState
parameter_list|(
name|BundleLockStateType
name|NewState
parameter_list|)
function_decl|;
name|bool
name|isBundleLocked
argument_list|()
specifier|const
block|{
return|return
name|BundleLockState
operator|!=
name|NotBundleLocked
return|;
block|}
name|bool
name|isBundleGroupBeforeFirstInst
argument_list|()
specifier|const
block|{
return|return
name|BundleGroupBeforeFirstInst
return|;
block|}
name|void
name|setBundleGroupBeforeFirstInst
parameter_list|(
name|bool
name|IsFirst
parameter_list|)
block|{
name|BundleGroupBeforeFirstInst
operator|=
name|IsFirst
expr_stmt|;
block|}
name|bool
name|hasInstructions
argument_list|()
specifier|const
block|{
return|return
name|HasInstructions
return|;
block|}
name|void
name|setHasInstructions
parameter_list|(
name|bool
name|Value
parameter_list|)
block|{
name|HasInstructions
operator|=
name|Value
expr_stmt|;
block|}
name|MCSection
operator|::
name|FragmentListType
operator|&
name|getFragmentList
argument_list|()
block|{
return|return
name|Fragments
return|;
block|}
specifier|const
name|MCSection
operator|::
name|FragmentListType
operator|&
name|getFragmentList
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|MCSection
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|getFragmentList
argument_list|()
return|;
block|}
name|MCSection
operator|::
name|iterator
name|begin
argument_list|()
expr_stmt|;
name|MCSection
operator|::
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|MCSection
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|begin
argument_list|()
return|;
block|}
name|MCSection
operator|::
name|iterator
name|end
argument_list|()
expr_stmt|;
name|MCSection
operator|::
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|MCSection
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|end
argument_list|()
return|;
block|}
name|MCSection
operator|::
name|reverse_iterator
name|rbegin
argument_list|()
expr_stmt|;
name|MCSection
operator|::
name|const_reverse_iterator
name|rbegin
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|MCSection
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|rbegin
argument_list|()
return|;
block|}
name|MCSection
operator|::
name|reverse_iterator
name|rend
argument_list|()
expr_stmt|;
name|MCSection
operator|::
name|const_reverse_iterator
name|rend
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|MCSection
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|rend
argument_list|()
return|;
block|}
name|MCSection
operator|::
name|iterator
name|getSubsectionInsertionPoint
argument_list|(
argument|unsigned Subsection
argument_list|)
expr_stmt|;
name|void
name|dump
parameter_list|()
function_decl|;
name|virtual
name|void
name|PrintSwitchToSection
argument_list|(
specifier|const
name|MCAsmInfo
operator|&
name|MAI
argument_list|,
name|raw_ostream
operator|&
name|OS
argument_list|,
specifier|const
name|MCExpr
operator|*
name|Subsection
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
comment|/// Return true if a .align directive should use "optimized nops" to fill
comment|/// instead of 0s.
name|virtual
name|bool
name|UseCodeAlign
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
comment|/// Check whether this section is "virtual", that is has no actual object
comment|/// file contents.
name|virtual
name|bool
name|isVirtualSection
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

