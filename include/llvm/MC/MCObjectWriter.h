begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- llvm/MC/MCObjectWriter.h - Object File Writer Interface --*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_MC_MCOBJECTWRITER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_MC_MCOBJECTWRITER_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Endian.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/EndianStream.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/raw_ostream.h"
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MCAsmLayout
decl_stmt|;
name|class
name|MCAssembler
decl_stmt|;
name|class
name|MCFixup
decl_stmt|;
name|class
name|MCFragment
decl_stmt|;
name|class
name|MCSymbol
decl_stmt|;
name|class
name|MCSymbolRefExpr
decl_stmt|;
name|class
name|MCValue
decl_stmt|;
comment|/// Defines the object file and target independent interfaces used by the
comment|/// assembler backend to write native file format object files.
comment|///
comment|/// The object writer contains a few callbacks used by the assembler to allow
comment|/// the object writer to modify the assembler data structures at appropriate
comment|/// points. Once assembly is complete, the object writer is given the
comment|/// MCAssembler instance, which contains all the symbol and section data which
comment|/// should be emitted as part of writeObject().
comment|///
comment|/// The object writer also contains a number of helper methods for writing
comment|/// binary data to the output stream.
name|class
name|MCObjectWriter
block|{
name|raw_pwrite_stream
modifier|*
name|OS
decl_stmt|;
name|protected
label|:
name|unsigned
name|IsLittleEndian
range|:
literal|1
decl_stmt|;
comment|// Can only create subclasses.
name|MCObjectWriter
argument_list|(
argument|raw_pwrite_stream&OS
argument_list|,
argument|bool IsLittleEndian
argument_list|)
block|:
name|OS
argument_list|(
operator|&
name|OS
argument_list|)
operator|,
name|IsLittleEndian
argument_list|(
argument|IsLittleEndian
argument_list|)
block|{}
name|unsigned
name|getInitialOffset
argument_list|()
block|{
return|return
name|OS
operator|->
name|tell
argument_list|()
return|;
block|}
name|public
label|:
name|MCObjectWriter
argument_list|(
specifier|const
name|MCObjectWriter
operator|&
argument_list|)
operator|=
name|delete
expr_stmt|;
name|MCObjectWriter
modifier|&
name|operator
init|=
operator|(
specifier|const
name|MCObjectWriter
operator|&
operator|)
operator|=
name|delete
decl_stmt|;
name|virtual
operator|~
name|MCObjectWriter
argument_list|()
expr_stmt|;
comment|/// lifetime management
name|virtual
name|void
name|reset
parameter_list|()
block|{}
name|bool
name|isLittleEndian
argument_list|()
specifier|const
block|{
return|return
name|IsLittleEndian
return|;
block|}
name|raw_pwrite_stream
modifier|&
name|getStream
parameter_list|()
block|{
return|return
operator|*
name|OS
return|;
block|}
name|void
name|setStream
parameter_list|(
name|raw_pwrite_stream
modifier|&
name|NewOS
parameter_list|)
block|{
name|OS
operator|=
operator|&
name|NewOS
expr_stmt|;
block|}
comment|/// \name High-Level API
comment|/// @{
comment|/// Perform any late binding of symbols (for example, to assign symbol
comment|/// indices for use when generating relocations).
comment|///
comment|/// This routine is called by the assembler after layout and relaxation is
comment|/// complete.
name|virtual
name|void
name|executePostLayoutBinding
parameter_list|(
name|MCAssembler
modifier|&
name|Asm
parameter_list|,
specifier|const
name|MCAsmLayout
modifier|&
name|Layout
parameter_list|)
init|=
literal|0
function_decl|;
comment|/// Record a relocation entry.
comment|///
comment|/// This routine is called by the assembler after layout and relaxation, and
comment|/// post layout binding. The implementation is responsible for storing
comment|/// information about the relocation so that it can be emitted during
comment|/// writeObject().
name|virtual
name|void
name|recordRelocation
parameter_list|(
name|MCAssembler
modifier|&
name|Asm
parameter_list|,
specifier|const
name|MCAsmLayout
modifier|&
name|Layout
parameter_list|,
specifier|const
name|MCFragment
modifier|*
name|Fragment
parameter_list|,
specifier|const
name|MCFixup
modifier|&
name|Fixup
parameter_list|,
name|MCValue
name|Target
parameter_list|,
name|uint64_t
modifier|&
name|FixedValue
parameter_list|)
init|=
literal|0
function_decl|;
comment|/// Check whether the difference (A - B) between two symbol references is
comment|/// fully resolved.
comment|///
comment|/// Clients are not required to answer precisely and may conservatively return
comment|/// false, even when a difference is fully resolved.
name|bool
name|isSymbolRefDifferenceFullyResolved
argument_list|(
specifier|const
name|MCAssembler
operator|&
name|Asm
argument_list|,
specifier|const
name|MCSymbolRefExpr
operator|*
name|A
argument_list|,
specifier|const
name|MCSymbolRefExpr
operator|*
name|B
argument_list|,
name|bool
name|InSet
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|bool
name|isSymbolRefDifferenceFullyResolvedImpl
argument_list|(
specifier|const
name|MCAssembler
operator|&
name|Asm
argument_list|,
specifier|const
name|MCSymbol
operator|&
name|A
argument_list|,
specifier|const
name|MCSymbol
operator|&
name|B
argument_list|,
name|bool
name|InSet
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|bool
name|isSymbolRefDifferenceFullyResolvedImpl
argument_list|(
specifier|const
name|MCAssembler
operator|&
name|Asm
argument_list|,
specifier|const
name|MCSymbol
operator|&
name|SymA
argument_list|,
specifier|const
name|MCFragment
operator|&
name|FB
argument_list|,
name|bool
name|InSet
argument_list|,
name|bool
name|IsPCRel
argument_list|)
decl|const
decl_stmt|;
comment|/// Write the object file.
comment|///
comment|/// This routine is called by the assembler after layout and relaxation is
comment|/// complete, fixups have been evaluated and applied, and relocations
comment|/// generated.
name|virtual
name|void
name|writeObject
parameter_list|(
name|MCAssembler
modifier|&
name|Asm
parameter_list|,
specifier|const
name|MCAsmLayout
modifier|&
name|Layout
parameter_list|)
init|=
literal|0
function_decl|;
comment|/// @}
comment|/// \name Binary Output
comment|/// @{
name|void
name|write8
parameter_list|(
name|uint8_t
name|Value
parameter_list|)
block|{
operator|*
name|OS
operator|<<
name|char
argument_list|(
name|Value
argument_list|)
expr_stmt|;
block|}
name|void
name|writeLE16
parameter_list|(
name|uint16_t
name|Value
parameter_list|)
block|{
name|support
operator|::
name|endian
operator|::
name|Writer
operator|<
name|support
operator|::
name|little
operator|>
operator|(
operator|*
name|OS
operator|)
operator|.
name|write
argument_list|(
name|Value
argument_list|)
expr_stmt|;
block|}
name|void
name|writeLE32
parameter_list|(
name|uint32_t
name|Value
parameter_list|)
block|{
name|support
operator|::
name|endian
operator|::
name|Writer
operator|<
name|support
operator|::
name|little
operator|>
operator|(
operator|*
name|OS
operator|)
operator|.
name|write
argument_list|(
name|Value
argument_list|)
expr_stmt|;
block|}
name|void
name|writeLE64
parameter_list|(
name|uint64_t
name|Value
parameter_list|)
block|{
name|support
operator|::
name|endian
operator|::
name|Writer
operator|<
name|support
operator|::
name|little
operator|>
operator|(
operator|*
name|OS
operator|)
operator|.
name|write
argument_list|(
name|Value
argument_list|)
expr_stmt|;
block|}
name|void
name|writeBE16
parameter_list|(
name|uint16_t
name|Value
parameter_list|)
block|{
name|support
operator|::
name|endian
operator|::
name|Writer
operator|<
name|support
operator|::
name|big
operator|>
operator|(
operator|*
name|OS
operator|)
operator|.
name|write
argument_list|(
name|Value
argument_list|)
expr_stmt|;
block|}
name|void
name|writeBE32
parameter_list|(
name|uint32_t
name|Value
parameter_list|)
block|{
name|support
operator|::
name|endian
operator|::
name|Writer
operator|<
name|support
operator|::
name|big
operator|>
operator|(
operator|*
name|OS
operator|)
operator|.
name|write
argument_list|(
name|Value
argument_list|)
expr_stmt|;
block|}
name|void
name|writeBE64
parameter_list|(
name|uint64_t
name|Value
parameter_list|)
block|{
name|support
operator|::
name|endian
operator|::
name|Writer
operator|<
name|support
operator|::
name|big
operator|>
operator|(
operator|*
name|OS
operator|)
operator|.
name|write
argument_list|(
name|Value
argument_list|)
expr_stmt|;
block|}
name|void
name|write16
parameter_list|(
name|uint16_t
name|Value
parameter_list|)
block|{
if|if
condition|(
name|IsLittleEndian
condition|)
name|writeLE16
argument_list|(
name|Value
argument_list|)
expr_stmt|;
else|else
name|writeBE16
argument_list|(
name|Value
argument_list|)
expr_stmt|;
block|}
name|void
name|write32
parameter_list|(
name|uint32_t
name|Value
parameter_list|)
block|{
if|if
condition|(
name|IsLittleEndian
condition|)
name|writeLE32
argument_list|(
name|Value
argument_list|)
expr_stmt|;
else|else
name|writeBE32
argument_list|(
name|Value
argument_list|)
expr_stmt|;
block|}
name|void
name|write64
parameter_list|(
name|uint64_t
name|Value
parameter_list|)
block|{
if|if
condition|(
name|IsLittleEndian
condition|)
name|writeLE64
argument_list|(
name|Value
argument_list|)
expr_stmt|;
else|else
name|writeBE64
argument_list|(
name|Value
argument_list|)
expr_stmt|;
block|}
name|void
name|WriteZeros
parameter_list|(
name|unsigned
name|N
parameter_list|)
block|{
specifier|const
name|char
name|Zeros
index|[
literal|16
index|]
init|=
block|{
literal|0
block|}
decl_stmt|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|,
name|e
init|=
name|N
operator|/
literal|16
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
operator|*
name|OS
operator|<<
name|StringRef
argument_list|(
name|Zeros
argument_list|,
literal|16
argument_list|)
expr_stmt|;
operator|*
name|OS
operator|<<
name|StringRef
argument_list|(
name|Zeros
argument_list|,
name|N
operator|%
literal|16
argument_list|)
expr_stmt|;
block|}
name|void
name|writeBytes
argument_list|(
specifier|const
name|SmallVectorImpl
operator|<
name|char
operator|>
operator|&
name|ByteVec
argument_list|,
name|unsigned
name|ZeroFillSize
operator|=
literal|0
argument_list|)
block|{
name|writeBytes
argument_list|(
name|StringRef
argument_list|(
name|ByteVec
operator|.
name|data
argument_list|()
argument_list|,
name|ByteVec
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|ZeroFillSize
argument_list|)
expr_stmt|;
block|}
name|void
name|writeBytes
parameter_list|(
name|StringRef
name|Str
parameter_list|,
name|unsigned
name|ZeroFillSize
init|=
literal|0
parameter_list|)
block|{
comment|// TODO: this version may need to go away once all fragment contents are
comment|// converted to SmallVector<char, N>
name|assert
argument_list|(
operator|(
name|ZeroFillSize
operator|==
literal|0
operator|||
name|Str
operator|.
name|size
argument_list|()
operator|<=
name|ZeroFillSize
operator|)
operator|&&
literal|"data size greater than fill size, unexpected large write will occur"
argument_list|)
expr_stmt|;
operator|*
name|OS
operator|<<
name|Str
expr_stmt|;
if|if
condition|(
name|ZeroFillSize
condition|)
name|WriteZeros
argument_list|(
name|ZeroFillSize
operator|-
name|Str
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/// @}
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_MC_MCOBJECTWRITER_H
end_comment

end_unit

