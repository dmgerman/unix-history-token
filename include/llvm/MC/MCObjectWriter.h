begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- llvm/MC/MCObjectWriter.h - Object File Writer Interface -*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_MC_MCOBJECTWRITER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_MC_MCOBJECTWRITER_H
end_define

begin_include
include|#
directive|include
file|"llvm/Support/raw_ostream.h"
end_include

begin_include
include|#
directive|include
file|"llvm/System/DataTypes.h"
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MCAsmLayout
decl_stmt|;
name|class
name|MCAssembler
decl_stmt|;
name|class
name|MCFixup
decl_stmt|;
name|class
name|MCFragment
decl_stmt|;
name|class
name|MCValue
decl_stmt|;
name|class
name|raw_ostream
decl_stmt|;
comment|/// MCObjectWriter - Defines the object file and target independent interfaces
comment|/// used by the assembler backend to write native file format object files.
comment|///
comment|/// The object writer contains a few callbacks used by the assembler to allow
comment|/// the object writer to modify the assembler data structures at appropriate
comment|/// points. Once assembly is complete, the object writer is given the
comment|/// MCAssembler instance, which contains all the symbol and section data which
comment|/// should be emitted as part of WriteObject().
comment|///
comment|/// The object writer also contains a number of helper methods for writing
comment|/// binary data to the output stream.
name|class
name|MCObjectWriter
block|{
name|MCObjectWriter
argument_list|(
specifier|const
name|MCObjectWriter
operator|&
argument_list|)
expr_stmt|;
comment|// DO NOT IMPLEMENT
name|void
name|operator
init|=
operator|(
specifier|const
name|MCObjectWriter
operator|&
operator|)
decl_stmt|;
comment|// DO NOT IMPLEMENT
name|protected
label|:
name|raw_ostream
modifier|&
name|OS
decl_stmt|;
name|unsigned
name|IsLittleEndian
range|:
literal|1
decl_stmt|;
name|protected
label|:
comment|// Can only create subclasses.
name|MCObjectWriter
argument_list|(
argument|raw_ostream&_OS
argument_list|,
argument|bool _IsLittleEndian
argument_list|)
block|:
name|OS
argument_list|(
name|_OS
argument_list|)
operator|,
name|IsLittleEndian
argument_list|(
argument|_IsLittleEndian
argument_list|)
block|{}
name|public
operator|:
name|virtual
operator|~
name|MCObjectWriter
argument_list|()
expr_stmt|;
name|bool
name|isLittleEndian
argument_list|()
specifier|const
block|{
return|return
name|IsLittleEndian
return|;
block|}
name|raw_ostream
modifier|&
name|getStream
parameter_list|()
block|{
return|return
name|OS
return|;
block|}
comment|/// @name High-Level API
comment|/// @{
comment|/// Perform any late binding of symbols (for example, to assign symbol indices
comment|/// for use when generating relocations).
comment|///
comment|/// This routine is called by the assembler after layout and relaxation is
comment|/// complete.
name|virtual
name|void
name|ExecutePostLayoutBinding
parameter_list|(
name|MCAssembler
modifier|&
name|Asm
parameter_list|)
init|=
literal|0
function_decl|;
comment|/// Record a relocation entry.
comment|///
comment|/// This routine is called by the assembler after layout and relaxation, and
comment|/// post layout binding. The implementation is responsible for storing
comment|/// information about the relocation so that it can be emitted during
comment|/// WriteObject().
name|virtual
name|void
name|RecordRelocation
parameter_list|(
specifier|const
name|MCAssembler
modifier|&
name|Asm
parameter_list|,
specifier|const
name|MCAsmLayout
modifier|&
name|Layout
parameter_list|,
specifier|const
name|MCFragment
modifier|*
name|Fragment
parameter_list|,
specifier|const
name|MCFixup
modifier|&
name|Fixup
parameter_list|,
name|MCValue
name|Target
parameter_list|,
name|uint64_t
modifier|&
name|FixedValue
parameter_list|)
init|=
literal|0
function_decl|;
comment|/// Write the object file.
comment|///
comment|/// This routine is called by the assembler after layout and relaxation is
comment|/// complete, fixups have been evaluated and applied, and relocations
comment|/// generated.
name|virtual
name|void
name|WriteObject
parameter_list|(
specifier|const
name|MCAssembler
modifier|&
name|Asm
parameter_list|,
specifier|const
name|MCAsmLayout
modifier|&
name|Layout
parameter_list|)
init|=
literal|0
function_decl|;
comment|/// @}
comment|/// @name Binary Output
comment|/// @{
name|void
name|Write8
parameter_list|(
name|uint8_t
name|Value
parameter_list|)
block|{
name|OS
operator|<<
name|char
argument_list|(
name|Value
argument_list|)
expr_stmt|;
block|}
name|void
name|WriteLE16
parameter_list|(
name|uint16_t
name|Value
parameter_list|)
block|{
name|Write8
argument_list|(
name|uint8_t
argument_list|(
name|Value
operator|>>
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Write8
argument_list|(
name|uint8_t
argument_list|(
name|Value
operator|>>
literal|8
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|WriteLE32
parameter_list|(
name|uint32_t
name|Value
parameter_list|)
block|{
name|WriteLE16
argument_list|(
name|uint16_t
argument_list|(
name|Value
operator|>>
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|WriteLE16
argument_list|(
name|uint16_t
argument_list|(
name|Value
operator|>>
literal|16
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|WriteLE64
parameter_list|(
name|uint64_t
name|Value
parameter_list|)
block|{
name|WriteLE32
argument_list|(
name|uint32_t
argument_list|(
name|Value
operator|>>
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|WriteLE32
argument_list|(
name|uint32_t
argument_list|(
name|Value
operator|>>
literal|32
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|WriteBE16
parameter_list|(
name|uint16_t
name|Value
parameter_list|)
block|{
name|Write8
argument_list|(
name|uint8_t
argument_list|(
name|Value
operator|>>
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|Write8
argument_list|(
name|uint8_t
argument_list|(
name|Value
operator|>>
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|WriteBE32
parameter_list|(
name|uint32_t
name|Value
parameter_list|)
block|{
name|WriteBE16
argument_list|(
name|uint16_t
argument_list|(
name|Value
operator|>>
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|WriteBE16
argument_list|(
name|uint16_t
argument_list|(
name|Value
operator|>>
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|WriteBE64
parameter_list|(
name|uint64_t
name|Value
parameter_list|)
block|{
name|WriteBE32
argument_list|(
name|uint32_t
argument_list|(
name|Value
operator|>>
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|WriteBE32
argument_list|(
name|uint32_t
argument_list|(
name|Value
operator|>>
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|Write16
parameter_list|(
name|uint16_t
name|Value
parameter_list|)
block|{
if|if
condition|(
name|IsLittleEndian
condition|)
name|WriteLE16
argument_list|(
name|Value
argument_list|)
expr_stmt|;
else|else
name|WriteBE16
argument_list|(
name|Value
argument_list|)
expr_stmt|;
block|}
name|void
name|Write32
parameter_list|(
name|uint32_t
name|Value
parameter_list|)
block|{
if|if
condition|(
name|IsLittleEndian
condition|)
name|WriteLE32
argument_list|(
name|Value
argument_list|)
expr_stmt|;
else|else
name|WriteBE32
argument_list|(
name|Value
argument_list|)
expr_stmt|;
block|}
name|void
name|Write64
parameter_list|(
name|uint64_t
name|Value
parameter_list|)
block|{
if|if
condition|(
name|IsLittleEndian
condition|)
name|WriteLE64
argument_list|(
name|Value
argument_list|)
expr_stmt|;
else|else
name|WriteBE64
argument_list|(
name|Value
argument_list|)
expr_stmt|;
block|}
name|void
name|WriteZeros
parameter_list|(
name|unsigned
name|N
parameter_list|)
block|{
specifier|const
name|char
name|Zeros
index|[
literal|16
index|]
init|=
block|{
literal|0
block|}
decl_stmt|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|,
name|e
init|=
name|N
operator|/
literal|16
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
name|OS
operator|<<
name|StringRef
argument_list|(
name|Zeros
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|OS
operator|<<
name|StringRef
argument_list|(
name|Zeros
argument_list|,
name|N
operator|%
literal|16
argument_list|)
expr_stmt|;
block|}
name|void
name|WriteBytes
parameter_list|(
name|StringRef
name|Str
parameter_list|,
name|unsigned
name|ZeroFillSize
init|=
literal|0
parameter_list|)
block|{
name|assert
argument_list|(
operator|(
name|ZeroFillSize
operator|==
literal|0
operator|||
name|Str
operator|.
name|size
argument_list|()
operator|<=
name|ZeroFillSize
operator|)
operator|&&
literal|"data size greater than fill size, unexpected large write will occur"
argument_list|)
expr_stmt|;
name|OS
operator|<<
name|Str
expr_stmt|;
if|if
condition|(
name|ZeroFillSize
condition|)
name|WriteZeros
argument_list|(
name|ZeroFillSize
operator|-
name|Str
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/// @}
block|}
empty_stmt|;
name|MCObjectWriter
modifier|*
name|createWinCOFFObjectWriter
parameter_list|(
name|raw_ostream
modifier|&
name|OS
parameter_list|,
name|bool
name|is64Bit
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_comment
comment|// End llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

