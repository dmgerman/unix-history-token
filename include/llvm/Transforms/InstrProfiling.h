begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- Transforms/InstrProfiling.h - Instrumentation passes -----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|/// This file provides the interface for LLVM's PGO Instrumentation lowering
end_comment

begin_comment
comment|/// pass.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_TRANSFORMS_INSTRPROFILING_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_TRANSFORMS_INSTRPROFILING_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/IntrinsicInst.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/PassManager.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ProfileData/InstrProf.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Transforms/Instrumentation.h"
end_include

begin_include
include|#
directive|include
file|<cstddef>
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_include
include|#
directive|include
file|<cstring>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|TargetLibraryInfo
decl_stmt|;
comment|/// Instrumentation based profiling lowering pass. This pass lowers
comment|/// the profile instrumented code generated by FE or the IR based
comment|/// instrumentation pass.
name|class
name|InstrProfiling
range|:
name|public
name|PassInfoMixin
operator|<
name|InstrProfiling
operator|>
block|{
name|public
operator|:
name|InstrProfiling
argument_list|()
operator|=
expr|default
block|;
name|InstrProfiling
argument_list|(
specifier|const
name|InstrProfOptions
operator|&
name|Options
argument_list|)
operator|:
name|Options
argument_list|(
argument|Options
argument_list|)
block|{}
name|PreservedAnalyses
name|run
argument_list|(
name|Module
operator|&
name|M
argument_list|,
name|ModuleAnalysisManager
operator|&
name|AM
argument_list|)
block|;
name|bool
name|run
argument_list|(
name|Module
operator|&
name|M
argument_list|,
specifier|const
name|TargetLibraryInfo
operator|&
name|TLI
argument_list|)
block|;
name|private
operator|:
name|InstrProfOptions
name|Options
block|;
name|Module
operator|*
name|M
block|;
name|Triple
name|TT
block|;
specifier|const
name|TargetLibraryInfo
operator|*
name|TLI
block|;   struct
name|PerFunctionProfileData
block|{
name|uint32_t
name|NumValueSites
index|[
name|IPVK_Last
operator|+
literal|1
index|]
block|;
name|GlobalVariable
operator|*
name|RegionCounters
operator|=
name|nullptr
block|;
name|GlobalVariable
operator|*
name|DataVar
operator|=
name|nullptr
block|;
name|PerFunctionProfileData
argument_list|()
block|{
name|memset
argument_list|(
name|NumValueSites
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|uint32_t
argument_list|)
operator|*
operator|(
name|IPVK_Last
operator|+
literal|1
operator|)
argument_list|)
block|;     }
block|}
block|;
name|DenseMap
operator|<
name|GlobalVariable
operator|*
block|,
name|PerFunctionProfileData
operator|>
name|ProfileDataMap
block|;
name|std
operator|::
name|vector
operator|<
name|GlobalValue
operator|*
operator|>
name|UsedVars
block|;
name|std
operator|::
name|vector
operator|<
name|GlobalVariable
operator|*
operator|>
name|ReferencedNames
block|;
name|GlobalVariable
operator|*
name|NamesVar
block|;
name|size_t
name|NamesSize
block|;
comment|// The start value of precise value profile range for memory intrinsic sizes.
name|int64_t
name|MemOPSizeRangeStart
block|;
comment|// The end value of precise value profile range for memory intrinsic sizes.
name|int64_t
name|MemOPSizeRangeLast
block|;
comment|/// Count the number of instrumented value sites for the function.
name|void
name|computeNumValueSiteCounts
argument_list|(
name|InstrProfValueProfileInst
operator|*
name|Ins
argument_list|)
block|;
comment|/// Replace instrprof_value_profile with a call to runtime library.
name|void
name|lowerValueProfileInst
argument_list|(
name|InstrProfValueProfileInst
operator|*
name|Ins
argument_list|)
block|;
comment|/// Replace instrprof_increment with an increment of the appropriate value.
name|void
name|lowerIncrement
argument_list|(
name|InstrProfIncrementInst
operator|*
name|Inc
argument_list|)
block|;
comment|/// Force emitting of name vars for unused functions.
name|void
name|lowerCoverageData
argument_list|(
name|GlobalVariable
operator|*
name|CoverageNamesVar
argument_list|)
block|;
comment|/// Get the region counters for an increment, creating them if necessary.
comment|///
comment|/// If the counter array doesn't yet exist, the profile data variables
comment|/// referring to them will also be created.
name|GlobalVariable
operator|*
name|getOrCreateRegionCounters
argument_list|(
name|InstrProfIncrementInst
operator|*
name|Inc
argument_list|)
block|;
comment|/// Emit the section with compressed function names.
name|void
name|emitNameData
argument_list|()
block|;
comment|/// Emit value nodes section for value profiling.
name|void
name|emitVNodes
argument_list|()
block|;
comment|/// Emit runtime registration functions for each profile data variable.
name|void
name|emitRegistration
argument_list|()
block|;
comment|/// Emit the necessary plumbing to pull in the runtime initialization.
name|void
name|emitRuntimeHook
argument_list|()
block|;
comment|/// Add uses of our data variables and runtime hook.
name|void
name|emitUses
argument_list|()
block|;
comment|/// Create a static initializer for our data, on platforms that need it,
comment|/// and for any profile output file that was specified.
name|void
name|emitInitialization
argument_list|()
block|; }
decl_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_TRANSFORMS_INSTRPROFILING_H
end_comment

end_unit

