begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- GVN.h - Eliminate redundant values and loads -------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|/// This file provides the interface for LLVM's Global Value Numbering pass
end_comment

begin_comment
comment|/// which eliminates fully redundant instructions. It also does somewhat Ad-Hoc
end_comment

begin_comment
comment|/// PRE and dead load elimination.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_TRANSFORMS_SCALAR_GVN_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_TRANSFORMS_SCALAR_GVN_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/MapVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SetVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallPtrSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Analysis/AliasAnalysis.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Analysis/AssumptionCache.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Analysis/LoopInfo.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Analysis/MemoryDependenceAnalysis.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Dominators.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/IntrinsicInst.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/PassManager.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|OptimizationRemarkEmitter
decl_stmt|;
comment|/// A private "module" namespace for types and utilities used by GVN. These
comment|/// are implementation details and should not be used by clients.
name|namespace
name|gvn
name|LLVM_LIBRARY_VISIBILITY
block|{
struct_decl|struct
name|AvailableValue
struct_decl|;
struct_decl|struct
name|AvailableValueInBlock
struct_decl|;
name|class
name|GVNLegacyPass
decl_stmt|;
block|}
comment|/// The core GVN pass object.
comment|///
comment|/// FIXME: We should have a good summary of the GVN algorithm implemented by
comment|/// this particular pass here.
name|class
name|GVN
range|:
name|public
name|PassInfoMixin
operator|<
name|GVN
operator|>
block|{
name|public
operator|:
comment|/// \brief Run the pass over the function.
name|PreservedAnalyses
name|run
argument_list|(
name|Function
operator|&
name|F
argument_list|,
name|FunctionAnalysisManager
operator|&
name|AM
argument_list|)
block|;
comment|/// This removes the specified instruction from
comment|/// our various maps and marks it for deletion.
name|void
name|markInstructionForDeletion
argument_list|(
argument|Instruction *I
argument_list|)
block|{
name|VN
operator|.
name|erase
argument_list|(
name|I
argument_list|)
block|;
name|InstrsToErase
operator|.
name|push_back
argument_list|(
name|I
argument_list|)
block|;   }
name|DominatorTree
operator|&
name|getDominatorTree
argument_list|()
specifier|const
block|{
return|return
operator|*
name|DT
return|;
block|}
name|AliasAnalysis
operator|*
name|getAliasAnalysis
argument_list|()
specifier|const
block|{
return|return
name|VN
operator|.
name|getAliasAnalysis
argument_list|()
return|;
block|}
name|MemoryDependenceResults
operator|&
name|getMemDep
argument_list|()
specifier|const
block|{
return|return
operator|*
name|MD
return|;
block|}
expr|struct
name|Expression
block|;
comment|/// This class holds the mapping between values and value numbers.  It is used
comment|/// as an efficient mechanism to determine the expression-wise equivalence of
comment|/// two values.
name|class
name|ValueTable
block|{
name|DenseMap
operator|<
name|Value
operator|*
block|,
name|uint32_t
operator|>
name|valueNumbering
block|;
name|DenseMap
operator|<
name|Expression
block|,
name|uint32_t
operator|>
name|expressionNumbering
block|;
comment|// Expressions is the vector of Expression. ExprIdx is the mapping from
comment|// value number to the index of Expression in Expressions. We use it
comment|// instead of a DenseMap because filling such mapping is faster than
comment|// filling a DenseMap and the compile time is a little better.
name|uint32_t
name|nextExprNumber
block|;
name|std
operator|::
name|vector
operator|<
name|Expression
operator|>
name|Expressions
block|;
name|std
operator|::
name|vector
operator|<
name|uint32_t
operator|>
name|ExprIdx
block|;
comment|// Value number to PHINode mapping. Used for phi-translate in scalarpre.
name|DenseMap
operator|<
name|uint32_t
block|,
name|PHINode
operator|*
operator|>
name|NumberingPhi
block|;
comment|// Cache for phi-translate in scalarpre.
typedef|typedef
name|DenseMap
operator|<
name|std
operator|::
name|pair
operator|<
name|uint32_t
operator|,
specifier|const
name|BasicBlock
operator|*
operator|>
operator|,
name|uint32_t
operator|>
name|PhiTranslateMap
expr_stmt|;
name|PhiTranslateMap
name|PhiTranslateTable
block|;
comment|// Map the block to reversed postorder traversal number. It is used to
comment|// find back edge easily.
name|DenseMap
operator|<
specifier|const
name|BasicBlock
operator|*
block|,
name|uint32_t
operator|>
name|BlockRPONumber
block|;
name|AliasAnalysis
operator|*
name|AA
block|;
name|MemoryDependenceResults
operator|*
name|MD
block|;
name|DominatorTree
operator|*
name|DT
block|;
name|uint32_t
name|nextValueNumber
block|;
name|Expression
name|createExpr
argument_list|(
name|Instruction
operator|*
name|I
argument_list|)
block|;
name|Expression
name|createCmpExpr
argument_list|(
argument|unsigned Opcode
argument_list|,
argument|CmpInst::Predicate Predicate
argument_list|,
argument|Value *LHS
argument_list|,
argument|Value *RHS
argument_list|)
block|;
name|Expression
name|createExtractvalueExpr
argument_list|(
name|ExtractValueInst
operator|*
name|EI
argument_list|)
block|;
name|uint32_t
name|lookupOrAddCall
argument_list|(
name|CallInst
operator|*
name|C
argument_list|)
block|;
name|uint32_t
name|phiTranslateImpl
argument_list|(
argument|const BasicBlock *BB
argument_list|,
argument|const BasicBlock *PhiBlock
argument_list|,
argument|uint32_t Num
argument_list|,
argument|GVN&Gvn
argument_list|)
block|;
name|std
operator|::
name|pair
operator|<
name|uint32_t
block|,
name|bool
operator|>
name|assignExpNewValueNum
argument_list|(
name|Expression
operator|&
name|exp
argument_list|)
block|;
name|bool
name|areAllValsInBB
argument_list|(
argument|uint32_t num
argument_list|,
argument|const BasicBlock *BB
argument_list|,
argument|GVN&Gvn
argument_list|)
block|;
name|public
operator|:
name|ValueTable
argument_list|()
block|;
name|ValueTable
argument_list|(
specifier|const
name|ValueTable
operator|&
name|Arg
argument_list|)
block|;
name|ValueTable
argument_list|(
name|ValueTable
operator|&&
name|Arg
argument_list|)
block|;
operator|~
name|ValueTable
argument_list|()
block|;
name|uint32_t
name|lookupOrAdd
argument_list|(
name|Value
operator|*
name|V
argument_list|)
block|;
name|uint32_t
name|lookup
argument_list|(
argument|Value *V
argument_list|,
argument|bool Verify = true
argument_list|)
specifier|const
block|;
name|uint32_t
name|lookupOrAddCmp
argument_list|(
argument|unsigned Opcode
argument_list|,
argument|CmpInst::Predicate Pred
argument_list|,
argument|Value *LHS
argument_list|,
argument|Value *RHS
argument_list|)
block|;
name|uint32_t
name|phiTranslate
argument_list|(
argument|const BasicBlock *BB
argument_list|,
argument|const BasicBlock *PhiBlock
argument_list|,
argument|uint32_t Num
argument_list|,
argument|GVN&Gvn
argument_list|)
block|;
name|void
name|assignBlockRPONumber
argument_list|(
name|Function
operator|&
name|F
argument_list|)
block|;
name|bool
name|exists
argument_list|(
argument|Value *V
argument_list|)
specifier|const
block|;
name|void
name|add
argument_list|(
argument|Value *V
argument_list|,
argument|uint32_t num
argument_list|)
block|;
name|void
name|clear
argument_list|()
block|;
name|void
name|erase
argument_list|(
name|Value
operator|*
name|v
argument_list|)
block|;
name|void
name|setAliasAnalysis
argument_list|(
argument|AliasAnalysis *A
argument_list|)
block|{
name|AA
operator|=
name|A
block|; }
name|AliasAnalysis
operator|*
name|getAliasAnalysis
argument_list|()
specifier|const
block|{
return|return
name|AA
return|;
block|}
name|void
name|setMemDep
argument_list|(
argument|MemoryDependenceResults *M
argument_list|)
block|{
name|MD
operator|=
name|M
block|; }
name|void
name|setDomTree
argument_list|(
argument|DominatorTree *D
argument_list|)
block|{
name|DT
operator|=
name|D
block|; }
name|uint32_t
name|getNextUnusedValueNumber
argument_list|()
block|{
return|return
name|nextValueNumber
return|;
block|}
name|void
name|verifyRemoved
argument_list|(
argument|const Value *
argument_list|)
specifier|const
block|;   }
decl_stmt|;
name|private
label|:
name|friend
name|class
name|gvn
operator|::
name|GVNLegacyPass
expr_stmt|;
name|friend
block|struct
name|DenseMapInfo
operator|<
name|Expression
operator|>
expr_stmt|;
name|MemoryDependenceResults
modifier|*
name|MD
decl_stmt|;
name|DominatorTree
modifier|*
name|DT
decl_stmt|;
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
decl_stmt|;
name|AssumptionCache
modifier|*
name|AC
decl_stmt|;
name|SetVector
operator|<
name|BasicBlock
operator|*
operator|>
name|DeadBlocks
expr_stmt|;
name|OptimizationRemarkEmitter
modifier|*
name|ORE
decl_stmt|;
name|ValueTable
name|VN
decl_stmt|;
comment|/// A mapping from value numbers to lists of Value*'s that
comment|/// have that value number.  Use findLeader to query it.
struct|struct
name|LeaderTableEntry
block|{
name|Value
modifier|*
name|Val
decl_stmt|;
specifier|const
name|BasicBlock
modifier|*
name|BB
decl_stmt|;
name|LeaderTableEntry
modifier|*
name|Next
decl_stmt|;
block|}
struct|;
name|DenseMap
operator|<
name|uint32_t
operator|,
name|LeaderTableEntry
operator|>
name|LeaderTable
expr_stmt|;
name|BumpPtrAllocator
name|TableAllocator
decl_stmt|;
comment|// Block-local map of equivalent values to their leader, does not
comment|// propagate to any successors. Entries added mid-block are applied
comment|// to the remaining instructions in the block.
name|SmallMapVector
operator|<
name|llvm
operator|::
name|Value
operator|*
operator|,
name|llvm
operator|::
name|Constant
operator|*
operator|,
literal|4
operator|>
name|ReplaceWithConstMap
expr_stmt|;
name|SmallVector
operator|<
name|Instruction
operator|*
operator|,
literal|8
operator|>
name|InstrsToErase
expr_stmt|;
typedef|typedef
name|SmallVector
operator|<
name|NonLocalDepResult
operator|,
literal|64
operator|>
name|LoadDepVect
expr_stmt|;
typedef|typedef
name|SmallVector
operator|<
name|gvn
operator|::
name|AvailableValueInBlock
operator|,
literal|64
operator|>
name|AvailValInBlkVect
expr_stmt|;
typedef|typedef
name|SmallVector
operator|<
name|BasicBlock
operator|*
operator|,
literal|64
operator|>
name|UnavailBlkVect
expr_stmt|;
name|bool
name|runImpl
parameter_list|(
name|Function
modifier|&
name|F
parameter_list|,
name|AssumptionCache
modifier|&
name|RunAC
parameter_list|,
name|DominatorTree
modifier|&
name|RunDT
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|&
name|RunTLI
parameter_list|,
name|AAResults
modifier|&
name|RunAA
parameter_list|,
name|MemoryDependenceResults
modifier|*
name|RunMD
parameter_list|,
name|LoopInfo
modifier|*
name|LI
parameter_list|,
name|OptimizationRemarkEmitter
modifier|*
name|ORE
parameter_list|)
function_decl|;
comment|/// Push a new Value to the LeaderTable onto the list for its value number.
name|void
name|addToLeaderTable
parameter_list|(
name|uint32_t
name|N
parameter_list|,
name|Value
modifier|*
name|V
parameter_list|,
specifier|const
name|BasicBlock
modifier|*
name|BB
parameter_list|)
block|{
name|LeaderTableEntry
modifier|&
name|Curr
init|=
name|LeaderTable
index|[
name|N
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|Curr
operator|.
name|Val
condition|)
block|{
name|Curr
operator|.
name|Val
operator|=
name|V
expr_stmt|;
name|Curr
operator|.
name|BB
operator|=
name|BB
expr_stmt|;
return|return;
block|}
name|LeaderTableEntry
modifier|*
name|Node
init|=
name|TableAllocator
operator|.
name|Allocate
operator|<
name|LeaderTableEntry
operator|>
operator|(
operator|)
decl_stmt|;
name|Node
operator|->
name|Val
operator|=
name|V
expr_stmt|;
name|Node
operator|->
name|BB
operator|=
name|BB
expr_stmt|;
name|Node
operator|->
name|Next
operator|=
name|Curr
operator|.
name|Next
expr_stmt|;
name|Curr
operator|.
name|Next
operator|=
name|Node
expr_stmt|;
block|}
comment|/// Scan the list of values corresponding to a given
comment|/// value number, and remove the given instruction if encountered.
name|void
name|removeFromLeaderTable
parameter_list|(
name|uint32_t
name|N
parameter_list|,
name|Instruction
modifier|*
name|I
parameter_list|,
name|BasicBlock
modifier|*
name|BB
parameter_list|)
block|{
name|LeaderTableEntry
modifier|*
name|Prev
init|=
name|nullptr
decl_stmt|;
name|LeaderTableEntry
modifier|*
name|Curr
init|=
operator|&
name|LeaderTable
index|[
name|N
index|]
decl_stmt|;
while|while
condition|(
name|Curr
operator|&&
operator|(
name|Curr
operator|->
name|Val
operator|!=
name|I
operator|||
name|Curr
operator|->
name|BB
operator|!=
name|BB
operator|)
condition|)
block|{
name|Prev
operator|=
name|Curr
expr_stmt|;
name|Curr
operator|=
name|Curr
operator|->
name|Next
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Curr
condition|)
return|return;
if|if
condition|(
name|Prev
condition|)
block|{
name|Prev
operator|->
name|Next
operator|=
name|Curr
operator|->
name|Next
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|Curr
operator|->
name|Next
condition|)
block|{
name|Curr
operator|->
name|Val
operator|=
name|nullptr
expr_stmt|;
name|Curr
operator|->
name|BB
operator|=
name|nullptr
expr_stmt|;
block|}
else|else
block|{
name|LeaderTableEntry
modifier|*
name|Next
init|=
name|Curr
operator|->
name|Next
decl_stmt|;
name|Curr
operator|->
name|Val
operator|=
name|Next
operator|->
name|Val
expr_stmt|;
name|Curr
operator|->
name|BB
operator|=
name|Next
operator|->
name|BB
expr_stmt|;
name|Curr
operator|->
name|Next
operator|=
name|Next
operator|->
name|Next
expr_stmt|;
block|}
block|}
block|}
comment|// List of critical edges to be split between iterations.
name|SmallVector
operator|<
name|std
operator|::
name|pair
operator|<
name|TerminatorInst
operator|*
operator|,
name|unsigned
operator|>
operator|,
literal|4
operator|>
name|toSplit
expr_stmt|;
comment|// Helper functions of redundant load elimination
name|bool
name|processLoad
parameter_list|(
name|LoadInst
modifier|*
name|L
parameter_list|)
function_decl|;
name|bool
name|processNonLocalLoad
parameter_list|(
name|LoadInst
modifier|*
name|L
parameter_list|)
function_decl|;
name|bool
name|processAssumeIntrinsic
parameter_list|(
name|IntrinsicInst
modifier|*
name|II
parameter_list|)
function_decl|;
comment|/// Given a local dependency (Def or Clobber) determine if a value is
comment|/// available for the load.  Returns true if an value is known to be
comment|/// available and populates Res.  Returns false otherwise.
name|bool
name|AnalyzeLoadAvailability
argument_list|(
name|LoadInst
operator|*
name|LI
argument_list|,
name|MemDepResult
name|DepInfo
argument_list|,
name|Value
operator|*
name|Address
argument_list|,
name|gvn
operator|::
name|AvailableValue
operator|&
name|Res
argument_list|)
decl_stmt|;
comment|/// Given a list of non-local dependencies, determine if a value is
comment|/// available for the load in each specified block.  If it is, add it to
comment|/// ValuesPerBlock.  If not, add it to UnavailableBlocks.
name|void
name|AnalyzeLoadAvailability
parameter_list|(
name|LoadInst
modifier|*
name|LI
parameter_list|,
name|LoadDepVect
modifier|&
name|Deps
parameter_list|,
name|AvailValInBlkVect
modifier|&
name|ValuesPerBlock
parameter_list|,
name|UnavailBlkVect
modifier|&
name|UnavailableBlocks
parameter_list|)
function_decl|;
name|bool
name|PerformLoadPRE
parameter_list|(
name|LoadInst
modifier|*
name|LI
parameter_list|,
name|AvailValInBlkVect
modifier|&
name|ValuesPerBlock
parameter_list|,
name|UnavailBlkVect
modifier|&
name|UnavailableBlocks
parameter_list|)
function_decl|;
comment|// Other helper routines
name|bool
name|processInstruction
parameter_list|(
name|Instruction
modifier|*
name|I
parameter_list|)
function_decl|;
name|bool
name|processBlock
parameter_list|(
name|BasicBlock
modifier|*
name|BB
parameter_list|)
function_decl|;
name|void
name|dump
argument_list|(
name|DenseMap
operator|<
name|uint32_t
argument_list|,
name|Value
operator|*
operator|>
operator|&
name|d
argument_list|)
decl_stmt|;
name|bool
name|iterateOnFunction
parameter_list|(
name|Function
modifier|&
name|F
parameter_list|)
function_decl|;
name|bool
name|performPRE
parameter_list|(
name|Function
modifier|&
name|F
parameter_list|)
function_decl|;
name|bool
name|performScalarPRE
parameter_list|(
name|Instruction
modifier|*
name|I
parameter_list|)
function_decl|;
name|bool
name|performScalarPREInsertion
parameter_list|(
name|Instruction
modifier|*
name|Instr
parameter_list|,
name|BasicBlock
modifier|*
name|Pred
parameter_list|,
name|unsigned
name|int
name|ValNo
parameter_list|)
function_decl|;
name|Value
modifier|*
name|findLeader
parameter_list|(
specifier|const
name|BasicBlock
modifier|*
name|BB
parameter_list|,
name|uint32_t
name|num
parameter_list|)
function_decl|;
name|void
name|cleanupGlobalSets
parameter_list|()
function_decl|;
name|void
name|verifyRemoved
argument_list|(
specifier|const
name|Instruction
operator|*
name|I
argument_list|)
decl|const
decl_stmt|;
name|bool
name|splitCriticalEdges
parameter_list|()
function_decl|;
name|BasicBlock
modifier|*
name|splitCriticalEdges
parameter_list|(
name|BasicBlock
modifier|*
name|Pred
parameter_list|,
name|BasicBlock
modifier|*
name|Succ
parameter_list|)
function_decl|;
name|bool
name|replaceOperandsWithConsts
argument_list|(
name|Instruction
operator|*
name|I
argument_list|)
decl|const
decl_stmt|;
name|bool
name|propagateEquality
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|BasicBlockEdge
modifier|&
name|Root
parameter_list|,
name|bool
name|DominatesByEdge
parameter_list|)
function_decl|;
name|bool
name|processFoldableCondBr
parameter_list|(
name|BranchInst
modifier|*
name|BI
parameter_list|)
function_decl|;
name|void
name|addDeadBlock
parameter_list|(
name|BasicBlock
modifier|*
name|BB
parameter_list|)
function_decl|;
name|void
name|assignValNumForDeadCode
parameter_list|()
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/// Create a legacy GVN pass. This also allows parameterizing whether or not
end_comment

begin_comment
comment|/// loads are eliminated by the pass.
end_comment

begin_function_decl
name|FunctionPass
modifier|*
name|createGVNPass
parameter_list|(
name|bool
name|NoLoads
init|=
name|false
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/// \brief A simple and fast domtree-based GVN pass to hoist common expressions
end_comment

begin_comment
comment|/// from sibling branches.
end_comment

begin_decl_stmt
name|struct
name|GVNHoistPass
range|:
name|PassInfoMixin
operator|<
name|GVNHoistPass
operator|>
block|{
comment|/// \brief Run the pass over the function.
name|PreservedAnalyses
name|run
argument_list|(
name|Function
operator|&
name|F
argument_list|,
name|FunctionAnalysisManager
operator|&
name|AM
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|/// \brief Uses an "inverted" value numbering to decide the similarity of
end_comment

begin_comment
comment|/// expressions and sinks similar expressions into successors.
end_comment

begin_decl_stmt
name|struct
name|GVNSinkPass
range|:
name|PassInfoMixin
operator|<
name|GVNSinkPass
operator|>
block|{
comment|/// \brief Run the pass over the function.
name|PreservedAnalyses
name|run
argument_list|(
name|Function
operator|&
name|F
argument_list|,
name|FunctionAnalysisManager
operator|&
name|AM
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

end_unit

