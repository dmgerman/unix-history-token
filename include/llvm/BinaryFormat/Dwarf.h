begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- llvm/BinaryFormat/Dwarf.h ---Dwarf Constants-------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// \file
end_comment

begin_comment
comment|// \brief This file contains constants used for implementing Dwarf
end_comment

begin_comment
comment|// debug support.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// For details on the Dwarf specfication see the latest DWARF Debugging
end_comment

begin_comment
comment|// Information Format standard document on http://www.dwarfstd.org. This
end_comment

begin_comment
comment|// file often includes support for non-released standard features.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_BINARYFORMAT_DWARF_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_BINARYFORMAT_DWARF_H
end_define

begin_include
include|#
directive|include
file|"llvm/Support/Compiler.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/DataTypes.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|StringRef
decl_stmt|;
name|namespace
name|dwarf
block|{
comment|//===----------------------------------------------------------------------===//
comment|// DWARF constants as gleaned from the DWARF Debugging Information Format V.5
comment|// reference manual http://www.dwarfstd.org/.
comment|//
comment|// Do not mix the following two enumerations sets.  DW_TAG_invalid changes the
comment|// enumeration base type.
enum|enum
name|LLVMConstants
enum|:
name|uint32_t
block|{
comment|// LLVM mock tags (see also llvm/BinaryFormat/Dwarf.def).
name|DW_TAG_invalid
init|=
operator|~
literal|0U
block|,
comment|// Tag for invalid results.
name|DW_VIRTUALITY_invalid
init|=
operator|~
literal|0U
block|,
comment|// Virtuality for invalid results.
name|DW_MACINFO_invalid
init|=
operator|~
literal|0U
block|,
comment|// Macinfo type for invalid results.
comment|// Other constants.
name|DWARF_VERSION
init|=
literal|4
block|,
comment|// Default dwarf version we output.
name|DW_PUBTYPES_VERSION
init|=
literal|2
block|,
comment|// Section version number for .debug_pubtypes.
name|DW_PUBNAMES_VERSION
init|=
literal|2
block|,
comment|// Section version number for .debug_pubnames.
name|DW_ARANGES_VERSION
init|=
literal|2
block|,
comment|// Section version number for .debug_aranges.
comment|// Identifiers we use to distinguish vendor extensions.
name|DWARF_VENDOR_DWARF
init|=
literal|0
block|,
comment|// Defined in v2 or later of the DWARF standard.
name|DWARF_VENDOR_APPLE
init|=
literal|1
block|,
name|DWARF_VENDOR_BORLAND
init|=
literal|2
block|,
name|DWARF_VENDOR_GNU
init|=
literal|3
block|,
name|DWARF_VENDOR_GOOGLE
init|=
literal|4
block|,
name|DWARF_VENDOR_LLVM
init|=
literal|5
block|,
name|DWARF_VENDOR_MIPS
init|=
literal|6
block|}
enum|;
comment|// Special ID values that distinguish a CIE from a FDE in DWARF CFI.
comment|// Not inside an enum because a 64-bit value is needed.
specifier|const
name|uint32_t
name|DW_CIE_ID
init|=
name|UINT32_MAX
decl_stmt|;
specifier|const
name|uint64_t
name|DW64_CIE_ID
init|=
name|UINT64_MAX
decl_stmt|;
enum|enum
name|Tag
enum|:
name|uint16_t
block|{
define|#
directive|define
name|HANDLE_DW_TAG
parameter_list|(
name|ID
parameter_list|,
name|NAME
parameter_list|,
name|VERSION
parameter_list|,
name|VENDOR
parameter_list|)
value|DW_TAG_##NAME = ID,
include|#
directive|include
file|"llvm/BinaryFormat/Dwarf.def"
name|DW_TAG_lo_user
init|=
literal|0x4080
block|,
name|DW_TAG_hi_user
init|=
literal|0xffff
block|,
name|DW_TAG_user_base
init|=
literal|0x1000
comment|// Recommended base for user tags.
block|}
enum|;
specifier|inline
name|bool
name|isType
parameter_list|(
name|Tag
name|T
parameter_list|)
block|{
switch|switch
condition|(
name|T
condition|)
block|{
case|case
name|DW_TAG_array_type
case|:
case|case
name|DW_TAG_class_type
case|:
case|case
name|DW_TAG_interface_type
case|:
case|case
name|DW_TAG_enumeration_type
case|:
case|case
name|DW_TAG_pointer_type
case|:
case|case
name|DW_TAG_reference_type
case|:
case|case
name|DW_TAG_rvalue_reference_type
case|:
case|case
name|DW_TAG_string_type
case|:
case|case
name|DW_TAG_structure_type
case|:
case|case
name|DW_TAG_subroutine_type
case|:
case|case
name|DW_TAG_union_type
case|:
case|case
name|DW_TAG_ptr_to_member_type
case|:
case|case
name|DW_TAG_set_type
case|:
case|case
name|DW_TAG_subrange_type
case|:
case|case
name|DW_TAG_base_type
case|:
case|case
name|DW_TAG_const_type
case|:
case|case
name|DW_TAG_file_type
case|:
case|case
name|DW_TAG_packed_type
case|:
case|case
name|DW_TAG_volatile_type
case|:
case|case
name|DW_TAG_typedef
case|:
return|return
name|true
return|;
default|default:
return|return
name|false
return|;
block|}
block|}
comment|/// Attributes.
enum|enum
name|Attribute
enum|:
name|uint16_t
block|{
define|#
directive|define
name|HANDLE_DW_AT
parameter_list|(
name|ID
parameter_list|,
name|NAME
parameter_list|,
name|VERSION
parameter_list|,
name|VENDOR
parameter_list|)
value|DW_AT_##NAME = ID,
include|#
directive|include
file|"llvm/BinaryFormat/Dwarf.def"
name|DW_AT_lo_user
init|=
literal|0x2000
block|,
name|DW_AT_hi_user
init|=
literal|0x3fff
block|, }
enum|;
enum|enum
name|Form
enum|:
name|uint16_t
block|{
define|#
directive|define
name|HANDLE_DW_FORM
parameter_list|(
name|ID
parameter_list|,
name|NAME
parameter_list|,
name|VERSION
parameter_list|,
name|VENDOR
parameter_list|)
value|DW_FORM_##NAME = ID,
include|#
directive|include
file|"llvm/BinaryFormat/Dwarf.def"
name|DW_FORM_lo_user
init|=
literal|0x1f00
block|,
comment|///< Not specified by DWARF.
block|}
enum|;
enum|enum
name|LocationAtom
block|{
define|#
directive|define
name|HANDLE_DW_OP
parameter_list|(
name|ID
parameter_list|,
name|NAME
parameter_list|,
name|VERSION
parameter_list|,
name|VENDOR
parameter_list|)
value|DW_OP_##NAME = ID,
include|#
directive|include
file|"llvm/BinaryFormat/Dwarf.def"
name|DW_OP_lo_user
init|=
literal|0xe0
block|,
name|DW_OP_hi_user
init|=
literal|0xff
block|,
name|DW_OP_LLVM_fragment
init|=
literal|0x1000
comment|///< Only used in LLVM metadata.
block|}
enum|;
enum|enum
name|TypeKind
block|{
define|#
directive|define
name|HANDLE_DW_ATE
parameter_list|(
name|ID
parameter_list|,
name|NAME
parameter_list|,
name|VERSION
parameter_list|,
name|VENDOR
parameter_list|)
value|DW_ATE_##NAME = ID,
include|#
directive|include
file|"llvm/BinaryFormat/Dwarf.def"
name|DW_ATE_lo_user
init|=
literal|0x80
block|,
name|DW_ATE_hi_user
init|=
literal|0xff
block|}
enum|;
enum|enum
name|DecimalSignEncoding
block|{
comment|// Decimal sign attribute values
name|DW_DS_unsigned
init|=
literal|0x01
block|,
name|DW_DS_leading_overpunch
init|=
literal|0x02
block|,
name|DW_DS_trailing_overpunch
init|=
literal|0x03
block|,
name|DW_DS_leading_separate
init|=
literal|0x04
block|,
name|DW_DS_trailing_separate
init|=
literal|0x05
block|}
enum|;
enum|enum
name|EndianityEncoding
block|{
comment|// Endianity attribute values
name|DW_END_default
init|=
literal|0x00
block|,
name|DW_END_big
init|=
literal|0x01
block|,
name|DW_END_little
init|=
literal|0x02
block|,
name|DW_END_lo_user
init|=
literal|0x40
block|,
name|DW_END_hi_user
init|=
literal|0xff
block|}
enum|;
enum|enum
name|AccessAttribute
block|{
comment|// Accessibility codes
name|DW_ACCESS_public
init|=
literal|0x01
block|,
name|DW_ACCESS_protected
init|=
literal|0x02
block|,
name|DW_ACCESS_private
init|=
literal|0x03
block|}
enum|;
enum|enum
name|VisibilityAttribute
block|{
comment|// Visibility codes
name|DW_VIS_local
init|=
literal|0x01
block|,
name|DW_VIS_exported
init|=
literal|0x02
block|,
name|DW_VIS_qualified
init|=
literal|0x03
block|}
enum|;
enum|enum
name|VirtualityAttribute
block|{
define|#
directive|define
name|HANDLE_DW_VIRTUALITY
parameter_list|(
name|ID
parameter_list|,
name|NAME
parameter_list|)
value|DW_VIRTUALITY_##NAME = ID,
include|#
directive|include
file|"llvm/BinaryFormat/Dwarf.def"
name|DW_VIRTUALITY_max
init|=
literal|0x02
block|}
enum|;
enum|enum
name|DefaultedMemberAttribute
block|{
define|#
directive|define
name|HANDLE_DW_DEFAULTED
parameter_list|(
name|ID
parameter_list|,
name|NAME
parameter_list|)
value|DW_DEFAULTED_##NAME = ID,
include|#
directive|include
file|"llvm/BinaryFormat/Dwarf.def"
name|DW_DEFAULTED_max
init|=
literal|0x02
block|}
enum|;
enum|enum
name|SourceLanguage
block|{
define|#
directive|define
name|HANDLE_DW_LANG
parameter_list|(
name|ID
parameter_list|,
name|NAME
parameter_list|,
name|VERSION
parameter_list|,
name|VENDOR
parameter_list|)
value|DW_LANG_##NAME = ID,
include|#
directive|include
file|"llvm/BinaryFormat/Dwarf.def"
name|DW_LANG_lo_user
init|=
literal|0x8000
block|,
name|DW_LANG_hi_user
init|=
literal|0xffff
block|}
enum|;
enum|enum
name|CaseSensitivity
block|{
comment|// Identifier case codes
name|DW_ID_case_sensitive
init|=
literal|0x00
block|,
name|DW_ID_up_case
init|=
literal|0x01
block|,
name|DW_ID_down_case
init|=
literal|0x02
block|,
name|DW_ID_case_insensitive
init|=
literal|0x03
block|}
enum|;
enum|enum
name|CallingConvention
block|{
comment|// Calling convention codes
define|#
directive|define
name|HANDLE_DW_CC
parameter_list|(
name|ID
parameter_list|,
name|NAME
parameter_list|)
value|DW_CC_##NAME = ID,
include|#
directive|include
file|"llvm/BinaryFormat/Dwarf.def"
name|DW_CC_lo_user
init|=
literal|0x40
block|,
name|DW_CC_hi_user
init|=
literal|0xff
block|}
enum|;
enum|enum
name|InlineAttribute
block|{
comment|// Inline codes
name|DW_INL_not_inlined
init|=
literal|0x00
block|,
name|DW_INL_inlined
init|=
literal|0x01
block|,
name|DW_INL_declared_not_inlined
init|=
literal|0x02
block|,
name|DW_INL_declared_inlined
init|=
literal|0x03
block|}
enum|;
enum|enum
name|ArrayDimensionOrdering
block|{
comment|// Array ordering
name|DW_ORD_row_major
init|=
literal|0x00
block|,
name|DW_ORD_col_major
init|=
literal|0x01
block|}
enum|;
enum|enum
name|DiscriminantList
block|{
comment|// Discriminant descriptor values
name|DW_DSC_label
init|=
literal|0x00
block|,
name|DW_DSC_range
init|=
literal|0x01
block|}
enum|;
comment|/// Line Number Standard Opcode Encodings.
enum|enum
name|LineNumberOps
enum|:
name|uint8_t
block|{
define|#
directive|define
name|HANDLE_DW_LNS
parameter_list|(
name|ID
parameter_list|,
name|NAME
parameter_list|)
value|DW_LNS_##NAME = ID,
include|#
directive|include
file|"llvm/BinaryFormat/Dwarf.def"
block|}
enum|;
comment|/// Line Number Extended Opcode Encodings.
enum|enum
name|LineNumberExtendedOps
block|{
define|#
directive|define
name|HANDLE_DW_LNE
parameter_list|(
name|ID
parameter_list|,
name|NAME
parameter_list|)
value|DW_LNE_##NAME = ID,
include|#
directive|include
file|"llvm/BinaryFormat/Dwarf.def"
name|DW_LNE_lo_user
init|=
literal|0x80
block|,
name|DW_LNE_hi_user
init|=
literal|0xff
block|}
enum|;
enum|enum
name|LineNumberEntryFormat
block|{
define|#
directive|define
name|HANDLE_DW_LNCT
parameter_list|(
name|ID
parameter_list|,
name|NAME
parameter_list|)
value|DW_LNCT_##NAME = ID,
include|#
directive|include
file|"llvm/BinaryFormat/Dwarf.def"
name|DW_LNCT_lo_user
init|=
literal|0x2000
block|,
name|DW_LNCT_hi_user
init|=
literal|0x3fff
block|, }
enum|;
enum|enum
name|MacinfoRecordType
block|{
comment|// Macinfo Type Encodings
name|DW_MACINFO_define
init|=
literal|0x01
block|,
name|DW_MACINFO_undef
init|=
literal|0x02
block|,
name|DW_MACINFO_start_file
init|=
literal|0x03
block|,
name|DW_MACINFO_end_file
init|=
literal|0x04
block|,
name|DW_MACINFO_vendor_ext
init|=
literal|0xff
block|}
enum|;
comment|/// DWARF v5 macro information entry type encodings.
enum|enum
name|MacroEntryType
block|{
define|#
directive|define
name|HANDLE_DW_MACRO
parameter_list|(
name|ID
parameter_list|,
name|NAME
parameter_list|)
value|DW_MACRO_##NAME = ID,
include|#
directive|include
file|"llvm/BinaryFormat/Dwarf.def"
name|DW_MACRO_lo_user
init|=
literal|0xe0
block|,
name|DW_MACRO_hi_user
init|=
literal|0xff
block|}
enum|;
comment|/// DWARF v5 range list entry encoding values.
enum|enum
name|RangeListEntries
block|{
define|#
directive|define
name|HANDLE_DW_RLE
parameter_list|(
name|ID
parameter_list|,
name|NAME
parameter_list|)
value|DW_RLE_##NAME = ID,
include|#
directive|include
file|"llvm/BinaryFormat/Dwarf.def"
block|}
enum|;
comment|/// Call frame instruction encodings.
enum|enum
name|CallFrameInfo
block|{
define|#
directive|define
name|HANDLE_DW_CFA
parameter_list|(
name|ID
parameter_list|,
name|NAME
parameter_list|)
value|DW_CFA_##NAME = ID,
include|#
directive|include
file|"llvm/BinaryFormat/Dwarf.def"
name|DW_CFA_extended
init|=
literal|0x00
block|,
name|DW_CFA_lo_user
init|=
literal|0x1c
block|,
name|DW_CFA_hi_user
init|=
literal|0x3f
block|}
enum|;
enum|enum
name|Constants
block|{
comment|// Children flag
name|DW_CHILDREN_no
init|=
literal|0x00
block|,
name|DW_CHILDREN_yes
init|=
literal|0x01
block|,
name|DW_EH_PE_absptr
init|=
literal|0x00
block|,
name|DW_EH_PE_omit
init|=
literal|0xff
block|,
name|DW_EH_PE_uleb128
init|=
literal|0x01
block|,
name|DW_EH_PE_udata2
init|=
literal|0x02
block|,
name|DW_EH_PE_udata4
init|=
literal|0x03
block|,
name|DW_EH_PE_udata8
init|=
literal|0x04
block|,
name|DW_EH_PE_sleb128
init|=
literal|0x09
block|,
name|DW_EH_PE_sdata2
init|=
literal|0x0A
block|,
name|DW_EH_PE_sdata4
init|=
literal|0x0B
block|,
name|DW_EH_PE_sdata8
init|=
literal|0x0C
block|,
name|DW_EH_PE_signed
init|=
literal|0x08
block|,
name|DW_EH_PE_pcrel
init|=
literal|0x10
block|,
name|DW_EH_PE_textrel
init|=
literal|0x20
block|,
name|DW_EH_PE_datarel
init|=
literal|0x30
block|,
name|DW_EH_PE_funcrel
init|=
literal|0x40
block|,
name|DW_EH_PE_aligned
init|=
literal|0x50
block|,
name|DW_EH_PE_indirect
init|=
literal|0x80
block|}
enum|;
comment|/// Constants for location lists in DWARF v5.
enum|enum
name|LocationListEntry
enum|:
name|unsigned
name|char
block|{
name|DW_LLE_end_of_list
init|=
literal|0x00
block|,
name|DW_LLE_base_addressx
init|=
literal|0x01
block|,
name|DW_LLE_startx_endx
init|=
literal|0x02
block|,
name|DW_LLE_startx_length
init|=
literal|0x03
block|,
name|DW_LLE_offset_pair
init|=
literal|0x04
block|,
name|DW_LLE_default_location
init|=
literal|0x05
block|,
name|DW_LLE_base_address
init|=
literal|0x06
block|,
name|DW_LLE_start_end
init|=
literal|0x07
block|,
name|DW_LLE_start_length
init|=
literal|0x08
block|}
enum|;
comment|/// Constants for the DW_APPLE_PROPERTY_attributes attribute.
comment|/// Keep this list in sync with clang's DeclSpec.h ObjCPropertyAttributeKind!
enum|enum
name|ApplePropertyAttributes
block|{
define|#
directive|define
name|HANDLE_DW_APPLE_PROPERTY
parameter_list|(
name|ID
parameter_list|,
name|NAME
parameter_list|)
value|DW_APPLE_PROPERTY_##NAME = ID,
include|#
directive|include
file|"llvm/BinaryFormat/Dwarf.def"
block|}
enum|;
comment|/// Constants for unit types in DWARF v5.
enum|enum
name|UnitType
enum|:
name|unsigned
name|char
block|{
define|#
directive|define
name|HANDLE_DW_UT
parameter_list|(
name|ID
parameter_list|,
name|NAME
parameter_list|)
value|DW_UT_##NAME = ID,
include|#
directive|include
file|"llvm/BinaryFormat/Dwarf.def"
name|DW_UT_lo_user
init|=
literal|0x80
block|,
name|DW_UT_hi_user
init|=
literal|0xff
block|}
enum|;
comment|// Constants for the DWARF v5 Accelerator Table Proposal
enum|enum
name|AcceleratorTable
block|{
comment|// Data layout descriptors.
name|DW_ATOM_null
init|=
literal|0u
block|,
comment|// Marker as the end of a list of atoms.
name|DW_ATOM_die_offset
init|=
literal|1u
block|,
comment|// DIE offset in the debug_info section.
name|DW_ATOM_cu_offset
init|=
literal|2u
block|,
comment|// Offset of the compile unit header that contains the
comment|// item in question.
name|DW_ATOM_die_tag
init|=
literal|3u
block|,
comment|// A tag entry.
name|DW_ATOM_type_flags
init|=
literal|4u
block|,
comment|// Set of flags for a type.
comment|// DW_ATOM_type_flags values.
comment|// Always set for C++, only set for ObjC if this is the @implementation for a
comment|// class.
name|DW_FLAG_type_implementation
init|=
literal|2u
block|,
comment|// Hash functions.
comment|// Daniel J. Bernstein hash.
name|DW_hash_function_djb
init|=
literal|0u
block|}
enum|;
comment|// Constants for the GNU pubnames/pubtypes extensions supporting gdb index.
enum|enum
name|GDBIndexEntryKind
block|{
name|GIEK_NONE
block|,
name|GIEK_TYPE
block|,
name|GIEK_VARIABLE
block|,
name|GIEK_FUNCTION
block|,
name|GIEK_OTHER
block|,
name|GIEK_UNUSED5
block|,
name|GIEK_UNUSED6
block|,
name|GIEK_UNUSED7
block|}
enum|;
enum|enum
name|GDBIndexEntryLinkage
block|{
name|GIEL_EXTERNAL
block|,
name|GIEL_STATIC
block|}
enum|;
comment|/// \defgroup DwarfConstantsDumping Dwarf constants dumping functions
comment|///
comment|/// All these functions map their argument's value back to the
comment|/// corresponding enumerator name or return nullptr if the value isn't
comment|/// known.
comment|///
comment|/// @{
name|StringRef
name|TagString
parameter_list|(
name|unsigned
name|Tag
parameter_list|)
function_decl|;
name|StringRef
name|ChildrenString
parameter_list|(
name|unsigned
name|Children
parameter_list|)
function_decl|;
name|StringRef
name|AttributeString
parameter_list|(
name|unsigned
name|Attribute
parameter_list|)
function_decl|;
name|StringRef
name|FormEncodingString
parameter_list|(
name|unsigned
name|Encoding
parameter_list|)
function_decl|;
name|StringRef
name|OperationEncodingString
parameter_list|(
name|unsigned
name|Encoding
parameter_list|)
function_decl|;
name|StringRef
name|AttributeEncodingString
parameter_list|(
name|unsigned
name|Encoding
parameter_list|)
function_decl|;
name|StringRef
name|DecimalSignString
parameter_list|(
name|unsigned
name|Sign
parameter_list|)
function_decl|;
name|StringRef
name|EndianityString
parameter_list|(
name|unsigned
name|Endian
parameter_list|)
function_decl|;
name|StringRef
name|AccessibilityString
parameter_list|(
name|unsigned
name|Access
parameter_list|)
function_decl|;
name|StringRef
name|VisibilityString
parameter_list|(
name|unsigned
name|Visibility
parameter_list|)
function_decl|;
name|StringRef
name|VirtualityString
parameter_list|(
name|unsigned
name|Virtuality
parameter_list|)
function_decl|;
name|StringRef
name|LanguageString
parameter_list|(
name|unsigned
name|Language
parameter_list|)
function_decl|;
name|StringRef
name|CaseString
parameter_list|(
name|unsigned
name|Case
parameter_list|)
function_decl|;
name|StringRef
name|ConventionString
parameter_list|(
name|unsigned
name|Convention
parameter_list|)
function_decl|;
name|StringRef
name|InlineCodeString
parameter_list|(
name|unsigned
name|Code
parameter_list|)
function_decl|;
name|StringRef
name|ArrayOrderString
parameter_list|(
name|unsigned
name|Order
parameter_list|)
function_decl|;
name|StringRef
name|DiscriminantString
parameter_list|(
name|unsigned
name|Discriminant
parameter_list|)
function_decl|;
name|StringRef
name|LNStandardString
parameter_list|(
name|unsigned
name|Standard
parameter_list|)
function_decl|;
name|StringRef
name|LNExtendedString
parameter_list|(
name|unsigned
name|Encoding
parameter_list|)
function_decl|;
name|StringRef
name|MacinfoString
parameter_list|(
name|unsigned
name|Encoding
parameter_list|)
function_decl|;
name|StringRef
name|CallFrameString
parameter_list|(
name|unsigned
name|Encoding
parameter_list|)
function_decl|;
name|StringRef
name|ApplePropertyString
parameter_list|(
name|unsigned
parameter_list|)
function_decl|;
name|StringRef
name|UnitTypeString
parameter_list|(
name|unsigned
parameter_list|)
function_decl|;
name|StringRef
name|AtomTypeString
parameter_list|(
name|unsigned
name|Atom
parameter_list|)
function_decl|;
name|StringRef
name|GDBIndexEntryKindString
parameter_list|(
name|GDBIndexEntryKind
name|Kind
parameter_list|)
function_decl|;
name|StringRef
name|GDBIndexEntryLinkageString
parameter_list|(
name|GDBIndexEntryLinkage
name|Linkage
parameter_list|)
function_decl|;
comment|/// @}
comment|/// \defgroup DwarfConstantsParsing Dwarf constants parsing functions
comment|///
comment|/// These functions map their strings back to the corresponding enumeration
comment|/// value or return 0 if there is none, except for these exceptions:
comment|///
comment|/// \li \a getTag() returns \a DW_TAG_invalid on invalid input.
comment|/// \li \a getVirtuality() returns \a DW_VIRTUALITY_invalid on invalid input.
comment|/// \li \a getMacinfo() returns \a DW_MACINFO_invalid on invalid input.
comment|///
comment|/// @{
name|unsigned
name|getTag
parameter_list|(
name|StringRef
name|TagString
parameter_list|)
function_decl|;
name|unsigned
name|getOperationEncoding
parameter_list|(
name|StringRef
name|OperationEncodingString
parameter_list|)
function_decl|;
name|unsigned
name|getVirtuality
parameter_list|(
name|StringRef
name|VirtualityString
parameter_list|)
function_decl|;
name|unsigned
name|getLanguage
parameter_list|(
name|StringRef
name|LanguageString
parameter_list|)
function_decl|;
name|unsigned
name|getCallingConvention
parameter_list|(
name|StringRef
name|LanguageString
parameter_list|)
function_decl|;
name|unsigned
name|getAttributeEncoding
parameter_list|(
name|StringRef
name|EncodingString
parameter_list|)
function_decl|;
name|unsigned
name|getMacinfo
parameter_list|(
name|StringRef
name|MacinfoString
parameter_list|)
function_decl|;
comment|/// @}
comment|/// \defgroup DwarfConstantsVersioning Dwarf version for constants
comment|///
comment|/// For constants defined by DWARF, returns the DWARF version when the constant
comment|/// was first defined. For vendor extensions, if there is a version-related
comment|/// policy for when to emit it, returns a version number for that policy.
comment|/// Otherwise returns 0.
comment|///
comment|/// @{
name|unsigned
name|TagVersion
parameter_list|(
name|Tag
name|T
parameter_list|)
function_decl|;
name|unsigned
name|AttributeVersion
parameter_list|(
name|Attribute
name|A
parameter_list|)
function_decl|;
name|unsigned
name|FormVersion
parameter_list|(
name|Form
name|F
parameter_list|)
function_decl|;
name|unsigned
name|OperationVersion
parameter_list|(
name|LocationAtom
name|O
parameter_list|)
function_decl|;
name|unsigned
name|AttributeEncodingVersion
parameter_list|(
name|TypeKind
name|E
parameter_list|)
function_decl|;
name|unsigned
name|LanguageVersion
parameter_list|(
name|SourceLanguage
name|L
parameter_list|)
function_decl|;
comment|/// @}
comment|/// \defgroup DwarfConstantsVendor Dwarf "vendor" for constants
comment|///
comment|/// These functions return an identifier describing "who" defined the constant,
comment|/// either the DWARF standard itself or the vendor who defined the extension.
comment|///
comment|/// @{
name|unsigned
name|TagVendor
parameter_list|(
name|Tag
name|T
parameter_list|)
function_decl|;
name|unsigned
name|AttributeVendor
parameter_list|(
name|Attribute
name|A
parameter_list|)
function_decl|;
name|unsigned
name|FormVendor
parameter_list|(
name|Form
name|F
parameter_list|)
function_decl|;
name|unsigned
name|OperationVendor
parameter_list|(
name|LocationAtom
name|O
parameter_list|)
function_decl|;
name|unsigned
name|AttributeEncodingVendor
parameter_list|(
name|TypeKind
name|E
parameter_list|)
function_decl|;
name|unsigned
name|LanguageVendor
parameter_list|(
name|SourceLanguage
name|L
parameter_list|)
function_decl|;
comment|/// @}
comment|/// Tells whether the specified form is defined in the specified version,
comment|/// or is an extension if extensions are allowed.
name|bool
name|isValidFormForVersion
parameter_list|(
name|Form
name|F
parameter_list|,
name|unsigned
name|Version
parameter_list|,
name|bool
name|ExtensionsOk
init|=
name|true
parameter_list|)
function_decl|;
comment|/// \brief Returns the symbolic string representing Val when used as a value
comment|/// for attribute Attr.
name|StringRef
name|AttributeValueString
parameter_list|(
name|uint16_t
name|Attr
parameter_list|,
name|unsigned
name|Val
parameter_list|)
function_decl|;
comment|/// \brief Decsribes an entry of the various gnu_pub* debug sections.
comment|///
comment|/// The gnu_pub* kind looks like:
comment|///
comment|/// 0-3  reserved
comment|/// 4-6  symbol kind
comment|/// 7    0 == global, 1 == static
comment|///
comment|/// A gdb_index descriptor includes the above kind, shifted 24 bits up with the
comment|/// offset of the cu within the debug_info section stored in those 24 bits.
struct|struct
name|PubIndexEntryDescriptor
block|{
name|GDBIndexEntryKind
name|Kind
decl_stmt|;
name|GDBIndexEntryLinkage
name|Linkage
decl_stmt|;
name|PubIndexEntryDescriptor
argument_list|(
argument|GDBIndexEntryKind Kind
argument_list|,
argument|GDBIndexEntryLinkage Linkage
argument_list|)
block|:
name|Kind
argument_list|(
name|Kind
argument_list|)
operator|,
name|Linkage
argument_list|(
argument|Linkage
argument_list|)
block|{}
comment|/* implicit */
name|PubIndexEntryDescriptor
argument_list|(
argument|GDBIndexEntryKind Kind
argument_list|)
operator|:
name|Kind
argument_list|(
name|Kind
argument_list|)
operator|,
name|Linkage
argument_list|(
argument|GIEL_EXTERNAL
argument_list|)
block|{}
name|explicit
name|PubIndexEntryDescriptor
argument_list|(
argument|uint8_t Value
argument_list|)
operator|:
name|Kind
argument_list|(
name|static_cast
operator|<
name|GDBIndexEntryKind
operator|>
operator|(
operator|(
name|Value
operator|&
name|KIND_MASK
operator|)
operator|>>
name|KIND_OFFSET
operator|)
argument_list|)
operator|,
name|Linkage
argument_list|(
argument|static_cast<GDBIndexEntryLinkage>((Value& LINKAGE_MASK)>>                                                   LINKAGE_OFFSET)
argument_list|)
block|{}
name|uint8_t
name|toBits
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|<<
name|KIND_OFFSET
operator||
name|Linkage
operator|<<
name|LINKAGE_OFFSET
return|;
block|}
name|private
label|:
enum|enum
block|{
name|KIND_OFFSET
init|=
literal|4
block|,
name|KIND_MASK
init|=
literal|7
operator|<<
name|KIND_OFFSET
block|,
name|LINKAGE_OFFSET
init|=
literal|7
block|,
name|LINKAGE_MASK
init|=
literal|1
operator|<<
name|LINKAGE_OFFSET
block|}
enum|;
block|}
struct|;
comment|/// Constants that define the DWARF format as 32 or 64 bit.
enum|enum
name|DwarfFormat
block|{
name|DWARF32
block|,
name|DWARF64
block|}
enum|;
block|}
comment|// End of namespace dwarf
block|}
end_decl_stmt

begin_comment
comment|// End of namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

