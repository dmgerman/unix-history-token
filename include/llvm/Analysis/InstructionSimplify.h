begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- InstructionSimplify.h - Fold instrs into simpler forms --*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares routines for folding instructions into simpler forms
end_comment

begin_comment
comment|// that do not require creating new instructions.  This does constant folding
end_comment

begin_comment
comment|// ("add i32 1, 1" -> "2") but can also handle non-constant operands, either
end_comment

begin_comment
comment|// returning a constant ("and i32 %x, 0" -> "0") or an already existing value
end_comment

begin_comment
comment|// ("and i32 %x, %x" -> "%x").  If the simplification is also an instruction
end_comment

begin_comment
comment|// then it dominates the original instruction.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// These routines implicitly resolve undef uses. The easiest way to be safe when
end_comment

begin_comment
comment|// using these routines to obtain simplified values for existing instructions is
end_comment

begin_comment
comment|// to always replace all uses of the instructions with the resulting simplified
end_comment

begin_comment
comment|// values. This will prevent other code from seeing the same undef uses and
end_comment

begin_comment
comment|// resolving them to different values.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// These routines are designed to tolerate moderately incomplete IR, such as
end_comment

begin_comment
comment|// instructions that are not connected to basic blocks yet. However, they do
end_comment

begin_comment
comment|// require that all the IR that they encounter be valid. In particular, they
end_comment

begin_comment
comment|// require that all non-constant values be defined in the same function, and the
end_comment

begin_comment
comment|// same call context of that function (and not split between caller and callee
end_comment

begin_comment
comment|// contexts of a directly recursive call, for example).
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_ANALYSIS_INSTRUCTIONSIMPLIFY_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_ANALYSIS_INSTRUCTIONSIMPLIFY_H
end_define

begin_include
include|#
directive|include
file|"llvm/IR/User.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|ArrayRef
expr_stmt|;
name|class
name|AssumptionCache
decl_stmt|;
name|class
name|DominatorTree
decl_stmt|;
name|class
name|Instruction
decl_stmt|;
name|class
name|DataLayout
decl_stmt|;
name|class
name|FastMathFlags
decl_stmt|;
name|class
name|OptimizationRemarkEmitter
decl_stmt|;
name|class
name|TargetLibraryInfo
decl_stmt|;
name|class
name|Type
decl_stmt|;
name|class
name|Value
decl_stmt|;
struct|struct
name|SimplifyQuery
block|{
specifier|const
name|DataLayout
modifier|&
name|DL
decl_stmt|;
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
init|=
name|nullptr
decl_stmt|;
specifier|const
name|DominatorTree
modifier|*
name|DT
init|=
name|nullptr
decl_stmt|;
name|AssumptionCache
modifier|*
name|AC
init|=
name|nullptr
decl_stmt|;
specifier|const
name|Instruction
modifier|*
name|CxtI
init|=
name|nullptr
decl_stmt|;
name|SimplifyQuery
argument_list|(
specifier|const
name|DataLayout
operator|&
name|DL
argument_list|)
operator|:
name|DL
argument_list|(
argument|DL
argument_list|)
block|{}
name|SimplifyQuery
argument_list|(
specifier|const
name|DataLayout
operator|&
name|DL
argument_list|,
specifier|const
name|TargetLibraryInfo
operator|*
name|TLI
argument_list|,
specifier|const
name|DominatorTree
operator|*
name|DT
argument_list|,
name|AssumptionCache
operator|*
name|AC
operator|=
name|nullptr
argument_list|,
specifier|const
name|Instruction
operator|*
name|CXTI
operator|=
name|nullptr
argument_list|)
operator|:
name|DL
argument_list|(
name|DL
argument_list|)
operator|,
name|TLI
argument_list|(
name|TLI
argument_list|)
operator|,
name|DT
argument_list|(
name|DT
argument_list|)
operator|,
name|AC
argument_list|(
name|AC
argument_list|)
operator|,
name|CxtI
argument_list|(
argument|CXTI
argument_list|)
block|{}
name|SimplifyQuery
name|getWithInstruction
argument_list|(
argument|Instruction *I
argument_list|)
specifier|const
block|{
name|SimplifyQuery
name|Copy
argument_list|(
operator|*
name|this
argument_list|)
block|;
name|Copy
operator|.
name|CxtI
operator|=
name|I
block|;
return|return
name|Copy
return|;
block|}
block|}
struct|;
comment|// NOTE: the explicit multiple argument versions of these functions are
comment|// deprecated.
comment|// Please use the SimplifyQuery versions in new code.
comment|/// Given operands for an Add, fold the result or return null.
name|Value
modifier|*
name|SimplifyAddInst
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
name|bool
name|isNSW
parameter_list|,
name|bool
name|isNUW
parameter_list|,
specifier|const
name|SimplifyQuery
modifier|&
name|Q
parameter_list|)
function_decl|;
name|Value
modifier|*
name|SimplifyAddInst
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
name|bool
name|isNSW
parameter_list|,
name|bool
name|isNUW
parameter_list|,
specifier|const
name|DataLayout
modifier|&
name|DL
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
init|=
name|nullptr
parameter_list|,
specifier|const
name|DominatorTree
modifier|*
name|DT
init|=
name|nullptr
parameter_list|,
name|AssumptionCache
modifier|*
name|AC
init|=
name|nullptr
parameter_list|,
specifier|const
name|Instruction
modifier|*
name|CxtI
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|/// Given operands for a Sub, fold the result or return null.
name|Value
modifier|*
name|SimplifySubInst
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
name|bool
name|isNSW
parameter_list|,
name|bool
name|isNUW
parameter_list|,
specifier|const
name|SimplifyQuery
modifier|&
name|Q
parameter_list|)
function_decl|;
name|Value
modifier|*
name|SimplifySubInst
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
name|bool
name|isNSW
parameter_list|,
name|bool
name|isNUW
parameter_list|,
specifier|const
name|DataLayout
modifier|&
name|DL
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
init|=
name|nullptr
parameter_list|,
specifier|const
name|DominatorTree
modifier|*
name|DT
init|=
name|nullptr
parameter_list|,
name|AssumptionCache
modifier|*
name|AC
init|=
name|nullptr
parameter_list|,
specifier|const
name|Instruction
modifier|*
name|CxtI
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|/// Given operands for an FAdd, fold the result or return null.
name|Value
modifier|*
name|SimplifyFAddInst
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
name|FastMathFlags
name|FMF
parameter_list|,
specifier|const
name|SimplifyQuery
modifier|&
name|Q
parameter_list|)
function_decl|;
name|Value
modifier|*
name|SimplifyFAddInst
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
name|FastMathFlags
name|FMF
parameter_list|,
specifier|const
name|DataLayout
modifier|&
name|DL
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
init|=
name|nullptr
parameter_list|,
specifier|const
name|DominatorTree
modifier|*
name|DT
init|=
name|nullptr
parameter_list|,
name|AssumptionCache
modifier|*
name|AC
init|=
name|nullptr
parameter_list|,
specifier|const
name|Instruction
modifier|*
name|CxtI
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|/// Given operands for an FSub, fold the result or return null.
name|Value
modifier|*
name|SimplifyFSubInst
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
name|FastMathFlags
name|FMF
parameter_list|,
specifier|const
name|SimplifyQuery
modifier|&
name|Q
parameter_list|)
function_decl|;
name|Value
modifier|*
name|SimplifyFSubInst
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
name|FastMathFlags
name|FMF
parameter_list|,
specifier|const
name|DataLayout
modifier|&
name|DL
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
init|=
name|nullptr
parameter_list|,
specifier|const
name|DominatorTree
modifier|*
name|DT
init|=
name|nullptr
parameter_list|,
name|AssumptionCache
modifier|*
name|AC
init|=
name|nullptr
parameter_list|,
specifier|const
name|Instruction
modifier|*
name|CxtI
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|/// Given operands for an FMul, fold the result or return null.
name|Value
modifier|*
name|SimplifyFMulInst
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
name|FastMathFlags
name|FMF
parameter_list|,
specifier|const
name|SimplifyQuery
modifier|&
name|Q
parameter_list|)
function_decl|;
name|Value
modifier|*
name|SimplifyFMulInst
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
name|FastMathFlags
name|FMF
parameter_list|,
specifier|const
name|DataLayout
modifier|&
name|DL
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
init|=
name|nullptr
parameter_list|,
specifier|const
name|DominatorTree
modifier|*
name|DT
init|=
name|nullptr
parameter_list|,
name|AssumptionCache
modifier|*
name|AC
init|=
name|nullptr
parameter_list|,
specifier|const
name|Instruction
modifier|*
name|CxtI
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|/// Given operands for a Mul, fold the result or return null.
name|Value
modifier|*
name|SimplifyMulInst
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|SimplifyQuery
modifier|&
name|Q
parameter_list|)
function_decl|;
name|Value
modifier|*
name|SimplifyMulInst
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|DataLayout
modifier|&
name|DL
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
init|=
name|nullptr
parameter_list|,
specifier|const
name|DominatorTree
modifier|*
name|DT
init|=
name|nullptr
parameter_list|,
name|AssumptionCache
modifier|*
name|AC
init|=
name|nullptr
parameter_list|,
specifier|const
name|Instruction
modifier|*
name|CxtI
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|/// Given operands for an SDiv, fold the result or return null.
name|Value
modifier|*
name|SimplifySDivInst
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|SimplifyQuery
modifier|&
name|Q
parameter_list|)
function_decl|;
name|Value
modifier|*
name|SimplifySDivInst
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|DataLayout
modifier|&
name|DL
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
init|=
name|nullptr
parameter_list|,
specifier|const
name|DominatorTree
modifier|*
name|DT
init|=
name|nullptr
parameter_list|,
name|AssumptionCache
modifier|*
name|AC
init|=
name|nullptr
parameter_list|,
specifier|const
name|Instruction
modifier|*
name|CxtI
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|/// Given operands for a UDiv, fold the result or return null.
name|Value
modifier|*
name|SimplifyUDivInst
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|SimplifyQuery
modifier|&
name|Q
parameter_list|)
function_decl|;
name|Value
modifier|*
name|SimplifyUDivInst
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|DataLayout
modifier|&
name|DL
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
init|=
name|nullptr
parameter_list|,
specifier|const
name|DominatorTree
modifier|*
name|DT
init|=
name|nullptr
parameter_list|,
name|AssumptionCache
modifier|*
name|AC
init|=
name|nullptr
parameter_list|,
specifier|const
name|Instruction
modifier|*
name|CxtI
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|/// Given operands for an FDiv, fold the result or return null.
name|Value
modifier|*
name|SimplifyFDivInst
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
name|FastMathFlags
name|FMF
parameter_list|,
specifier|const
name|SimplifyQuery
modifier|&
name|Q
parameter_list|)
function_decl|;
name|Value
modifier|*
name|SimplifyFDivInst
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
name|FastMathFlags
name|FMF
parameter_list|,
specifier|const
name|DataLayout
modifier|&
name|DL
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
init|=
name|nullptr
parameter_list|,
specifier|const
name|DominatorTree
modifier|*
name|DT
init|=
name|nullptr
parameter_list|,
name|AssumptionCache
modifier|*
name|AC
init|=
name|nullptr
parameter_list|,
specifier|const
name|Instruction
modifier|*
name|CxtI
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|/// Given operands for an SRem, fold the result or return null.
name|Value
modifier|*
name|SimplifySRemInst
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|SimplifyQuery
modifier|&
name|Q
parameter_list|)
function_decl|;
name|Value
modifier|*
name|SimplifySRemInst
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|DataLayout
modifier|&
name|DL
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
init|=
name|nullptr
parameter_list|,
specifier|const
name|DominatorTree
modifier|*
name|DT
init|=
name|nullptr
parameter_list|,
name|AssumptionCache
modifier|*
name|AC
init|=
name|nullptr
parameter_list|,
specifier|const
name|Instruction
modifier|*
name|CxtI
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|/// Given operands for a URem, fold the result or return null.
name|Value
modifier|*
name|SimplifyURemInst
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|SimplifyQuery
modifier|&
name|Q
parameter_list|)
function_decl|;
name|Value
modifier|*
name|SimplifyURemInst
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|DataLayout
modifier|&
name|DL
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
init|=
name|nullptr
parameter_list|,
specifier|const
name|DominatorTree
modifier|*
name|DT
init|=
name|nullptr
parameter_list|,
name|AssumptionCache
modifier|*
name|AC
init|=
name|nullptr
parameter_list|,
specifier|const
name|Instruction
modifier|*
name|CxtI
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|/// Given operands for an FRem, fold the result or return null.
name|Value
modifier|*
name|SimplifyFRemInst
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
name|FastMathFlags
name|FMF
parameter_list|,
specifier|const
name|SimplifyQuery
modifier|&
name|Q
parameter_list|)
function_decl|;
name|Value
modifier|*
name|SimplifyFRemInst
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
name|FastMathFlags
name|FMF
parameter_list|,
specifier|const
name|DataLayout
modifier|&
name|DL
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
init|=
name|nullptr
parameter_list|,
specifier|const
name|DominatorTree
modifier|*
name|DT
init|=
name|nullptr
parameter_list|,
name|AssumptionCache
modifier|*
name|AC
init|=
name|nullptr
parameter_list|,
specifier|const
name|Instruction
modifier|*
name|CxtI
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|/// Given operands for a Shl, fold the result or return null.
name|Value
modifier|*
name|SimplifyShlInst
parameter_list|(
name|Value
modifier|*
name|Op0
parameter_list|,
name|Value
modifier|*
name|Op1
parameter_list|,
name|bool
name|isNSW
parameter_list|,
name|bool
name|isNUW
parameter_list|,
specifier|const
name|SimplifyQuery
modifier|&
name|Q
parameter_list|)
function_decl|;
name|Value
modifier|*
name|SimplifyShlInst
parameter_list|(
name|Value
modifier|*
name|Op0
parameter_list|,
name|Value
modifier|*
name|Op1
parameter_list|,
name|bool
name|isNSW
parameter_list|,
name|bool
name|isNUW
parameter_list|,
specifier|const
name|DataLayout
modifier|&
name|DL
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
init|=
name|nullptr
parameter_list|,
specifier|const
name|DominatorTree
modifier|*
name|DT
init|=
name|nullptr
parameter_list|,
name|AssumptionCache
modifier|*
name|AC
init|=
name|nullptr
parameter_list|,
specifier|const
name|Instruction
modifier|*
name|CxtI
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|/// Given operands for a LShr, fold the result or return null.
name|Value
modifier|*
name|SimplifyLShrInst
parameter_list|(
name|Value
modifier|*
name|Op0
parameter_list|,
name|Value
modifier|*
name|Op1
parameter_list|,
name|bool
name|isExact
parameter_list|,
specifier|const
name|SimplifyQuery
modifier|&
name|Q
parameter_list|)
function_decl|;
name|Value
modifier|*
name|SimplifyLShrInst
parameter_list|(
name|Value
modifier|*
name|Op0
parameter_list|,
name|Value
modifier|*
name|Op1
parameter_list|,
name|bool
name|isExact
parameter_list|,
specifier|const
name|DataLayout
modifier|&
name|DL
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
init|=
name|nullptr
parameter_list|,
specifier|const
name|DominatorTree
modifier|*
name|DT
init|=
name|nullptr
parameter_list|,
name|AssumptionCache
modifier|*
name|AC
init|=
name|nullptr
parameter_list|,
specifier|const
name|Instruction
modifier|*
name|CxtI
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|/// Given operands for a AShr, fold the result or return nulll.
name|Value
modifier|*
name|SimplifyAShrInst
parameter_list|(
name|Value
modifier|*
name|Op0
parameter_list|,
name|Value
modifier|*
name|Op1
parameter_list|,
name|bool
name|isExact
parameter_list|,
specifier|const
name|SimplifyQuery
modifier|&
name|Q
parameter_list|)
function_decl|;
name|Value
modifier|*
name|SimplifyAShrInst
parameter_list|(
name|Value
modifier|*
name|Op0
parameter_list|,
name|Value
modifier|*
name|Op1
parameter_list|,
name|bool
name|isExact
parameter_list|,
specifier|const
name|DataLayout
modifier|&
name|DL
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
init|=
name|nullptr
parameter_list|,
specifier|const
name|DominatorTree
modifier|*
name|DT
init|=
name|nullptr
parameter_list|,
name|AssumptionCache
modifier|*
name|AC
init|=
name|nullptr
parameter_list|,
specifier|const
name|Instruction
modifier|*
name|CxtI
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|/// Given operands for an And, fold the result or return null.
name|Value
modifier|*
name|SimplifyAndInst
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|SimplifyQuery
modifier|&
name|Q
parameter_list|)
function_decl|;
name|Value
modifier|*
name|SimplifyAndInst
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|DataLayout
modifier|&
name|DL
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
init|=
name|nullptr
parameter_list|,
specifier|const
name|DominatorTree
modifier|*
name|DT
init|=
name|nullptr
parameter_list|,
name|AssumptionCache
modifier|*
name|AC
init|=
name|nullptr
parameter_list|,
specifier|const
name|Instruction
modifier|*
name|CxtI
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|/// Given operands for an Or, fold the result or return null.
name|Value
modifier|*
name|SimplifyOrInst
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|SimplifyQuery
modifier|&
name|Q
parameter_list|)
function_decl|;
name|Value
modifier|*
name|SimplifyOrInst
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|DataLayout
modifier|&
name|DL
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
init|=
name|nullptr
parameter_list|,
specifier|const
name|DominatorTree
modifier|*
name|DT
init|=
name|nullptr
parameter_list|,
name|AssumptionCache
modifier|*
name|AC
init|=
name|nullptr
parameter_list|,
specifier|const
name|Instruction
modifier|*
name|CxtI
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|/// Given operands for an Xor, fold the result or return null.
name|Value
modifier|*
name|SimplifyXorInst
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|SimplifyQuery
modifier|&
name|Q
parameter_list|)
function_decl|;
name|Value
modifier|*
name|SimplifyXorInst
parameter_list|(
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|DataLayout
modifier|&
name|DL
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
init|=
name|nullptr
parameter_list|,
specifier|const
name|DominatorTree
modifier|*
name|DT
init|=
name|nullptr
parameter_list|,
name|AssumptionCache
modifier|*
name|AC
init|=
name|nullptr
parameter_list|,
specifier|const
name|Instruction
modifier|*
name|CxtI
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|/// Given operands for an ICmpInst, fold the result or return null.
name|Value
modifier|*
name|SimplifyICmpInst
parameter_list|(
name|unsigned
name|Predicate
parameter_list|,
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|SimplifyQuery
modifier|&
name|Q
parameter_list|)
function_decl|;
name|Value
modifier|*
name|SimplifyICmpInst
parameter_list|(
name|unsigned
name|Predicate
parameter_list|,
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|DataLayout
modifier|&
name|DL
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
init|=
name|nullptr
parameter_list|,
specifier|const
name|DominatorTree
modifier|*
name|DT
init|=
name|nullptr
parameter_list|,
name|AssumptionCache
modifier|*
name|AC
init|=
name|nullptr
parameter_list|,
specifier|const
name|Instruction
modifier|*
name|CxtI
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|/// Given operands for an FCmpInst, fold the result or return null.
name|Value
modifier|*
name|SimplifyFCmpInst
parameter_list|(
name|unsigned
name|Predicate
parameter_list|,
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
name|FastMathFlags
name|FMF
parameter_list|,
specifier|const
name|SimplifyQuery
modifier|&
name|Q
parameter_list|)
function_decl|;
name|Value
modifier|*
name|SimplifyFCmpInst
parameter_list|(
name|unsigned
name|Predicate
parameter_list|,
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
name|FastMathFlags
name|FMF
parameter_list|,
specifier|const
name|DataLayout
modifier|&
name|DL
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
init|=
name|nullptr
parameter_list|,
specifier|const
name|DominatorTree
modifier|*
name|DT
init|=
name|nullptr
parameter_list|,
name|AssumptionCache
modifier|*
name|AC
init|=
name|nullptr
parameter_list|,
specifier|const
name|Instruction
modifier|*
name|CxtI
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|/// Given operands for a SelectInst, fold the result or return null.
name|Value
modifier|*
name|SimplifySelectInst
parameter_list|(
name|Value
modifier|*
name|Cond
parameter_list|,
name|Value
modifier|*
name|TrueVal
parameter_list|,
name|Value
modifier|*
name|FalseVal
parameter_list|,
specifier|const
name|SimplifyQuery
modifier|&
name|Q
parameter_list|)
function_decl|;
name|Value
modifier|*
name|SimplifySelectInst
parameter_list|(
name|Value
modifier|*
name|Cond
parameter_list|,
name|Value
modifier|*
name|TrueVal
parameter_list|,
name|Value
modifier|*
name|FalseVal
parameter_list|,
specifier|const
name|DataLayout
modifier|&
name|DL
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
init|=
name|nullptr
parameter_list|,
specifier|const
name|DominatorTree
modifier|*
name|DT
init|=
name|nullptr
parameter_list|,
name|AssumptionCache
modifier|*
name|AC
init|=
name|nullptr
parameter_list|,
specifier|const
name|Instruction
modifier|*
name|CxtI
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|/// Given operands for a GetElementPtrInst, fold the result or return null.
name|Value
modifier|*
name|SimplifyGEPInst
argument_list|(
name|Type
operator|*
name|SrcTy
argument_list|,
name|ArrayRef
operator|<
name|Value
operator|*
operator|>
name|Ops
argument_list|,
specifier|const
name|SimplifyQuery
operator|&
name|Q
argument_list|)
decl_stmt|;
name|Value
modifier|*
name|SimplifyGEPInst
argument_list|(
name|Type
operator|*
name|SrcTy
argument_list|,
name|ArrayRef
operator|<
name|Value
operator|*
operator|>
name|Ops
argument_list|,
specifier|const
name|DataLayout
operator|&
name|DL
argument_list|,
specifier|const
name|TargetLibraryInfo
operator|*
name|TLI
operator|=
name|nullptr
argument_list|,
specifier|const
name|DominatorTree
operator|*
name|DT
operator|=
name|nullptr
argument_list|,
name|AssumptionCache
operator|*
name|AC
operator|=
name|nullptr
argument_list|,
specifier|const
name|Instruction
operator|*
name|CxtI
operator|=
name|nullptr
argument_list|)
decl_stmt|;
comment|/// Given operands for an InsertValueInst, fold the result or return null.
name|Value
modifier|*
name|SimplifyInsertValueInst
argument_list|(
name|Value
operator|*
name|Agg
argument_list|,
name|Value
operator|*
name|Val
argument_list|,
name|ArrayRef
operator|<
name|unsigned
operator|>
name|Idxs
argument_list|,
specifier|const
name|SimplifyQuery
operator|&
name|Q
argument_list|)
decl_stmt|;
name|Value
modifier|*
name|SimplifyInsertValueInst
argument_list|(
name|Value
operator|*
name|Agg
argument_list|,
name|Value
operator|*
name|Val
argument_list|,
name|ArrayRef
operator|<
name|unsigned
operator|>
name|Idxs
argument_list|,
specifier|const
name|DataLayout
operator|&
name|DL
argument_list|,
specifier|const
name|TargetLibraryInfo
operator|*
name|TLI
operator|=
name|nullptr
argument_list|,
specifier|const
name|DominatorTree
operator|*
name|DT
operator|=
name|nullptr
argument_list|,
name|AssumptionCache
operator|*
name|AC
operator|=
name|nullptr
argument_list|,
specifier|const
name|Instruction
operator|*
name|CxtI
operator|=
name|nullptr
argument_list|)
decl_stmt|;
comment|/// Given operands for an ExtractValueInst, fold the result or return null.
name|Value
modifier|*
name|SimplifyExtractValueInst
argument_list|(
name|Value
operator|*
name|Agg
argument_list|,
name|ArrayRef
operator|<
name|unsigned
operator|>
name|Idxs
argument_list|,
specifier|const
name|SimplifyQuery
operator|&
name|Q
argument_list|)
decl_stmt|;
name|Value
modifier|*
name|SimplifyExtractValueInst
argument_list|(
name|Value
operator|*
name|Agg
argument_list|,
name|ArrayRef
operator|<
name|unsigned
operator|>
name|Idxs
argument_list|,
specifier|const
name|DataLayout
operator|&
name|DL
argument_list|,
specifier|const
name|TargetLibraryInfo
operator|*
name|TLI
operator|=
name|nullptr
argument_list|,
specifier|const
name|DominatorTree
operator|*
name|DT
operator|=
name|nullptr
argument_list|,
name|AssumptionCache
operator|*
name|AC
operator|=
name|nullptr
argument_list|,
specifier|const
name|Instruction
operator|*
name|CxtI
operator|=
name|nullptr
argument_list|)
decl_stmt|;
comment|/// Given operands for an ExtractElementInst, fold the result or return null.
name|Value
modifier|*
name|SimplifyExtractElementInst
parameter_list|(
name|Value
modifier|*
name|Vec
parameter_list|,
name|Value
modifier|*
name|Idx
parameter_list|,
specifier|const
name|SimplifyQuery
modifier|&
name|Q
parameter_list|)
function_decl|;
name|Value
modifier|*
name|SimplifyExtractElementInst
parameter_list|(
name|Value
modifier|*
name|Vec
parameter_list|,
name|Value
modifier|*
name|Idx
parameter_list|,
specifier|const
name|DataLayout
modifier|&
name|DL
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
init|=
name|nullptr
parameter_list|,
specifier|const
name|DominatorTree
modifier|*
name|DT
init|=
name|nullptr
parameter_list|,
name|AssumptionCache
modifier|*
name|AC
init|=
name|nullptr
parameter_list|,
specifier|const
name|Instruction
modifier|*
name|CxtI
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|/// Given operands for a CastInst, fold the result or return null.
name|Value
modifier|*
name|SimplifyCastInst
parameter_list|(
name|unsigned
name|CastOpc
parameter_list|,
name|Value
modifier|*
name|Op
parameter_list|,
name|Type
modifier|*
name|Ty
parameter_list|,
specifier|const
name|SimplifyQuery
modifier|&
name|Q
parameter_list|)
function_decl|;
name|Value
modifier|*
name|SimplifyCastInst
parameter_list|(
name|unsigned
name|CastOpc
parameter_list|,
name|Value
modifier|*
name|Op
parameter_list|,
name|Type
modifier|*
name|Ty
parameter_list|,
specifier|const
name|DataLayout
modifier|&
name|DL
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
init|=
name|nullptr
parameter_list|,
specifier|const
name|DominatorTree
modifier|*
name|DT
init|=
name|nullptr
parameter_list|,
name|AssumptionCache
modifier|*
name|AC
init|=
name|nullptr
parameter_list|,
specifier|const
name|Instruction
modifier|*
name|CxtI
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|/// Given operands for a ShuffleVectorInst, fold the result or return null.
name|Value
modifier|*
name|SimplifyShuffleVectorInst
parameter_list|(
name|Value
modifier|*
name|Op0
parameter_list|,
name|Value
modifier|*
name|Op1
parameter_list|,
name|Constant
modifier|*
name|Mask
parameter_list|,
name|Type
modifier|*
name|RetTy
parameter_list|,
specifier|const
name|SimplifyQuery
modifier|&
name|Q
parameter_list|)
function_decl|;
name|Value
modifier|*
name|SimplifyShuffleVectorInst
parameter_list|(
name|Value
modifier|*
name|Op0
parameter_list|,
name|Value
modifier|*
name|Op1
parameter_list|,
name|Constant
modifier|*
name|Mask
parameter_list|,
name|Type
modifier|*
name|RetTy
parameter_list|,
specifier|const
name|DataLayout
modifier|&
name|DL
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
init|=
name|nullptr
parameter_list|,
specifier|const
name|DominatorTree
modifier|*
name|DT
init|=
name|nullptr
parameter_list|,
name|AssumptionCache
modifier|*
name|AC
init|=
name|nullptr
parameter_list|,
specifier|const
name|Instruction
modifier|*
name|CxtI
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|//=== Helper functions for higher up the class hierarchy.
comment|/// Given operands for a CmpInst, fold the result or return null.
name|Value
modifier|*
name|SimplifyCmpInst
parameter_list|(
name|unsigned
name|Predicate
parameter_list|,
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|SimplifyQuery
modifier|&
name|Q
parameter_list|)
function_decl|;
name|Value
modifier|*
name|SimplifyCmpInst
parameter_list|(
name|unsigned
name|Predicate
parameter_list|,
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|DataLayout
modifier|&
name|DL
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
init|=
name|nullptr
parameter_list|,
specifier|const
name|DominatorTree
modifier|*
name|DT
init|=
name|nullptr
parameter_list|,
name|AssumptionCache
modifier|*
name|AC
init|=
name|nullptr
parameter_list|,
specifier|const
name|Instruction
modifier|*
name|CxtI
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|/// Given operands for a BinaryOperator, fold the result or return null.
name|Value
modifier|*
name|SimplifyBinOp
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|SimplifyQuery
modifier|&
name|Q
parameter_list|)
function_decl|;
name|Value
modifier|*
name|SimplifyBinOp
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
specifier|const
name|DataLayout
modifier|&
name|DL
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
init|=
name|nullptr
parameter_list|,
specifier|const
name|DominatorTree
modifier|*
name|DT
init|=
name|nullptr
parameter_list|,
name|AssumptionCache
modifier|*
name|AC
init|=
name|nullptr
parameter_list|,
specifier|const
name|Instruction
modifier|*
name|CxtI
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|/// Given operands for an FP BinaryOperator, fold the result or return null.
comment|/// In contrast to SimplifyBinOp, try to use FastMathFlag when folding the
comment|/// result. In case we don't need FastMathFlags, simply fall to SimplifyBinOp.
name|Value
modifier|*
name|SimplifyFPBinOp
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
name|FastMathFlags
name|FMF
parameter_list|,
specifier|const
name|SimplifyQuery
modifier|&
name|Q
parameter_list|)
function_decl|;
name|Value
modifier|*
name|SimplifyFPBinOp
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|Value
modifier|*
name|LHS
parameter_list|,
name|Value
modifier|*
name|RHS
parameter_list|,
name|FastMathFlags
name|FMF
parameter_list|,
specifier|const
name|DataLayout
modifier|&
name|DL
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
init|=
name|nullptr
parameter_list|,
specifier|const
name|DominatorTree
modifier|*
name|DT
init|=
name|nullptr
parameter_list|,
name|AssumptionCache
modifier|*
name|AC
init|=
name|nullptr
parameter_list|,
specifier|const
name|Instruction
modifier|*
name|CxtI
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|/// Given a function and iterators over arguments, fold the result or return
comment|/// null.
name|Value
modifier|*
name|SimplifyCall
argument_list|(
name|Value
operator|*
name|V
argument_list|,
name|User
operator|::
name|op_iterator
name|ArgBegin
argument_list|,
name|User
operator|::
name|op_iterator
name|ArgEnd
argument_list|,
specifier|const
name|SimplifyQuery
operator|&
name|Q
argument_list|)
decl_stmt|;
name|Value
modifier|*
name|SimplifyCall
argument_list|(
name|Value
operator|*
name|V
argument_list|,
name|User
operator|::
name|op_iterator
name|ArgBegin
argument_list|,
name|User
operator|::
name|op_iterator
name|ArgEnd
argument_list|,
specifier|const
name|DataLayout
operator|&
name|DL
argument_list|,
specifier|const
name|TargetLibraryInfo
operator|*
name|TLI
operator|=
name|nullptr
argument_list|,
specifier|const
name|DominatorTree
operator|*
name|DT
operator|=
name|nullptr
argument_list|,
name|AssumptionCache
operator|*
name|AC
operator|=
name|nullptr
argument_list|,
specifier|const
name|Instruction
operator|*
name|CxtI
operator|=
name|nullptr
argument_list|)
decl_stmt|;
comment|/// Given a function and set of arguments, fold the result or return null.
name|Value
modifier|*
name|SimplifyCall
argument_list|(
name|Value
operator|*
name|V
argument_list|,
name|ArrayRef
operator|<
name|Value
operator|*
operator|>
name|Args
argument_list|,
specifier|const
name|SimplifyQuery
operator|&
name|Q
argument_list|)
decl_stmt|;
name|Value
modifier|*
name|SimplifyCall
argument_list|(
name|Value
operator|*
name|V
argument_list|,
name|ArrayRef
operator|<
name|Value
operator|*
operator|>
name|Args
argument_list|,
specifier|const
name|DataLayout
operator|&
name|DL
argument_list|,
specifier|const
name|TargetLibraryInfo
operator|*
name|TLI
operator|=
name|nullptr
argument_list|,
specifier|const
name|DominatorTree
operator|*
name|DT
operator|=
name|nullptr
argument_list|,
name|AssumptionCache
operator|*
name|AC
operator|=
name|nullptr
argument_list|,
specifier|const
name|Instruction
operator|*
name|CxtI
operator|=
name|nullptr
argument_list|)
decl_stmt|;
comment|/// See if we can compute a simplified version of this instruction. If not,
comment|/// return null.
name|Value
modifier|*
name|SimplifyInstruction
parameter_list|(
name|Instruction
modifier|*
name|I
parameter_list|,
specifier|const
name|SimplifyQuery
modifier|&
name|Q
parameter_list|,
name|OptimizationRemarkEmitter
modifier|*
name|ORE
init|=
name|nullptr
parameter_list|)
function_decl|;
name|Value
modifier|*
name|SimplifyInstruction
parameter_list|(
name|Instruction
modifier|*
name|I
parameter_list|,
specifier|const
name|DataLayout
modifier|&
name|DL
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
init|=
name|nullptr
parameter_list|,
specifier|const
name|DominatorTree
modifier|*
name|DT
init|=
name|nullptr
parameter_list|,
name|AssumptionCache
modifier|*
name|AC
init|=
name|nullptr
parameter_list|,
name|OptimizationRemarkEmitter
modifier|*
name|ORE
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|/// Replace all uses of 'I' with 'SimpleV' and simplify the uses recursively.
comment|///
comment|/// This first performs a normal RAUW of I with SimpleV. It then recursively
comment|/// attempts to simplify those users updated by the operation. The 'I'
comment|/// instruction must not be equal to the simplified value 'SimpleV'.
comment|///
comment|/// The function returns true if any simplifications were performed.
name|bool
name|replaceAndRecursivelySimplify
parameter_list|(
name|Instruction
modifier|*
name|I
parameter_list|,
name|Value
modifier|*
name|SimpleV
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
init|=
name|nullptr
parameter_list|,
specifier|const
name|DominatorTree
modifier|*
name|DT
init|=
name|nullptr
parameter_list|,
name|AssumptionCache
modifier|*
name|AC
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|/// Recursively attempt to simplify an instruction.
comment|///
comment|/// This routine uses SimplifyInstruction to simplify 'I', and if successful
comment|/// replaces uses of 'I' with the simplified value. It then recurses on each
comment|/// of the users impacted. It returns true if any simplifications were
comment|/// performed.
name|bool
name|recursivelySimplifyInstruction
parameter_list|(
name|Instruction
modifier|*
name|I
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
init|=
name|nullptr
parameter_list|,
specifier|const
name|DominatorTree
modifier|*
name|DT
init|=
name|nullptr
parameter_list|,
name|AssumptionCache
modifier|*
name|AC
init|=
name|nullptr
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

