begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- LazyValueInfo.h - Value constraint analysis --------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines the interface for lazy computation of value constraint
end_comment

begin_comment
comment|// information.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_ANALYSIS_LAZYVALUEINFO_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_ANALYSIS_LAZYVALUEINFO_H
end_define

begin_include
include|#
directive|include
file|"llvm/IR/PassManager.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Pass.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|AssumptionCache
decl_stmt|;
name|class
name|Constant
decl_stmt|;
name|class
name|ConstantRange
decl_stmt|;
name|class
name|DataLayout
decl_stmt|;
name|class
name|DominatorTree
decl_stmt|;
name|class
name|Instruction
decl_stmt|;
name|class
name|TargetLibraryInfo
decl_stmt|;
name|class
name|Value
decl_stmt|;
comment|/// This pass computes, caches, and vends lazy value constraint information.
name|class
name|LazyValueInfo
block|{
name|friend
name|class
name|LazyValueInfoWrapperPass
decl_stmt|;
name|AssumptionCache
modifier|*
name|AC
init|=
name|nullptr
decl_stmt|;
specifier|const
name|DataLayout
modifier|*
name|DL
init|=
name|nullptr
decl_stmt|;
name|class
name|TargetLibraryInfo
modifier|*
name|TLI
init|=
name|nullptr
decl_stmt|;
name|DominatorTree
modifier|*
name|DT
init|=
name|nullptr
decl_stmt|;
name|void
modifier|*
name|PImpl
init|=
name|nullptr
decl_stmt|;
name|LazyValueInfo
argument_list|(
specifier|const
name|LazyValueInfo
operator|&
argument_list|)
operator|=
name|delete
expr_stmt|;
name|void
name|operator
init|=
operator|(
specifier|const
name|LazyValueInfo
operator|&
operator|)
operator|=
name|delete
decl_stmt|;
name|public
label|:
operator|~
name|LazyValueInfo
argument_list|()
expr_stmt|;
name|LazyValueInfo
argument_list|()
block|{}
name|LazyValueInfo
argument_list|(
name|AssumptionCache
operator|*
name|AC_
argument_list|,
specifier|const
name|DataLayout
operator|*
name|DL_
argument_list|,
name|TargetLibraryInfo
operator|*
name|TLI_
argument_list|,
name|DominatorTree
operator|*
name|DT_
argument_list|)
operator|:
name|AC
argument_list|(
name|AC_
argument_list|)
operator|,
name|DL
argument_list|(
name|DL_
argument_list|)
operator|,
name|TLI
argument_list|(
name|TLI_
argument_list|)
operator|,
name|DT
argument_list|(
argument|DT_
argument_list|)
block|{}
name|LazyValueInfo
argument_list|(
name|LazyValueInfo
operator|&&
name|Arg
argument_list|)
operator|:
name|AC
argument_list|(
name|Arg
operator|.
name|AC
argument_list|)
operator|,
name|DL
argument_list|(
name|Arg
operator|.
name|DL
argument_list|)
operator|,
name|TLI
argument_list|(
name|Arg
operator|.
name|TLI
argument_list|)
operator|,
name|DT
argument_list|(
name|Arg
operator|.
name|DT
argument_list|)
operator|,
name|PImpl
argument_list|(
argument|Arg.PImpl
argument_list|)
block|{
name|Arg
operator|.
name|PImpl
operator|=
name|nullptr
block|;   }
name|LazyValueInfo
operator|&
name|operator
operator|=
operator|(
name|LazyValueInfo
operator|&&
name|Arg
operator|)
block|{
name|releaseMemory
argument_list|()
block|;
name|AC
operator|=
name|Arg
operator|.
name|AC
block|;
name|DL
operator|=
name|Arg
operator|.
name|DL
block|;
name|TLI
operator|=
name|Arg
operator|.
name|TLI
block|;
name|DT
operator|=
name|Arg
operator|.
name|DT
block|;
name|PImpl
operator|=
name|Arg
operator|.
name|PImpl
block|;
name|Arg
operator|.
name|PImpl
operator|=
name|nullptr
block|;
return|return
operator|*
name|this
return|;
block|}
comment|/// This is used to return true/false/dunno results.
enum|enum
name|Tristate
block|{
name|Unknown
init|=
operator|-
literal|1
block|,
name|False
init|=
literal|0
block|,
name|True
init|=
literal|1
block|}
enum|;
comment|// Public query interface.
comment|/// Determine whether the specified value comparison with a constant is known
comment|/// to be true or false on the specified CFG edge.
comment|/// Pred is a CmpInst predicate.
name|Tristate
name|getPredicateOnEdge
parameter_list|(
name|unsigned
name|Pred
parameter_list|,
name|Value
modifier|*
name|V
parameter_list|,
name|Constant
modifier|*
name|C
parameter_list|,
name|BasicBlock
modifier|*
name|FromBB
parameter_list|,
name|BasicBlock
modifier|*
name|ToBB
parameter_list|,
name|Instruction
modifier|*
name|CxtI
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|/// Determine whether the specified value comparison with a constant is known
comment|/// to be true or false at the specified instruction
comment|/// (from an assume intrinsic). Pred is a CmpInst predicate.
name|Tristate
name|getPredicateAt
parameter_list|(
name|unsigned
name|Pred
parameter_list|,
name|Value
modifier|*
name|V
parameter_list|,
name|Constant
modifier|*
name|C
parameter_list|,
name|Instruction
modifier|*
name|CxtI
parameter_list|)
function_decl|;
comment|/// Determine whether the specified value is known to be a
comment|/// constant at the end of the specified block.  Return null if not.
name|Constant
modifier|*
name|getConstant
parameter_list|(
name|Value
modifier|*
name|V
parameter_list|,
name|BasicBlock
modifier|*
name|BB
parameter_list|,
name|Instruction
modifier|*
name|CxtI
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|/// Return the ConstantRange constraint that is known to hold for the
comment|/// specified value at the end of the specified block. This may only be called
comment|/// on integer-typed Values.
name|ConstantRange
name|getConstantRange
parameter_list|(
name|Value
modifier|*
name|V
parameter_list|,
name|BasicBlock
modifier|*
name|BB
parameter_list|,
name|Instruction
modifier|*
name|CxtI
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|/// Determine whether the specified value is known to be a
comment|/// constant on the specified edge.  Return null if not.
name|Constant
modifier|*
name|getConstantOnEdge
parameter_list|(
name|Value
modifier|*
name|V
parameter_list|,
name|BasicBlock
modifier|*
name|FromBB
parameter_list|,
name|BasicBlock
modifier|*
name|ToBB
parameter_list|,
name|Instruction
modifier|*
name|CxtI
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|/// Return the ConstantRage constraint that is known to hold for the
comment|/// specified value on the specified edge. This may be only be called
comment|/// on integer-typed Values.
name|ConstantRange
name|getConstantRangeOnEdge
parameter_list|(
name|Value
modifier|*
name|V
parameter_list|,
name|BasicBlock
modifier|*
name|FromBB
parameter_list|,
name|BasicBlock
modifier|*
name|ToBB
parameter_list|,
name|Instruction
modifier|*
name|CxtI
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|/// Inform the analysis cache that we have threaded an edge from
comment|/// PredBB to OldSucc to be from PredBB to NewSucc instead.
name|void
name|threadEdge
parameter_list|(
name|BasicBlock
modifier|*
name|PredBB
parameter_list|,
name|BasicBlock
modifier|*
name|OldSucc
parameter_list|,
name|BasicBlock
modifier|*
name|NewSucc
parameter_list|)
function_decl|;
comment|/// Inform the analysis cache that we have erased a block.
name|void
name|eraseBlock
parameter_list|(
name|BasicBlock
modifier|*
name|BB
parameter_list|)
function_decl|;
comment|/// Print the \LazyValueInfo Analysis.
comment|/// We pass in the DTree that is required for identifying which basic blocks
comment|/// we can solve/print for, in the LVIPrinter. The DT is optional
comment|/// in LVI, so we need to pass it here as an argument.
name|void
name|printLVI
parameter_list|(
name|Function
modifier|&
name|F
parameter_list|,
name|DominatorTree
modifier|&
name|DTree
parameter_list|,
name|raw_ostream
modifier|&
name|OS
parameter_list|)
function_decl|;
comment|// For old PM pass. Delete once LazyValueInfoWrapperPass is gone.
name|void
name|releaseMemory
parameter_list|()
function_decl|;
comment|/// Handle invalidation events in the new pass manager.
name|bool
name|invalidate
argument_list|(
name|Function
operator|&
name|F
argument_list|,
specifier|const
name|PreservedAnalyses
operator|&
name|PA
argument_list|,
name|FunctionAnalysisManager
operator|::
name|Invalidator
operator|&
name|Inv
argument_list|)
decl_stmt|;
block|}
empty_stmt|;
comment|/// \brief Analysis to compute lazy value information.
name|class
name|LazyValueAnalysis
range|:
name|public
name|AnalysisInfoMixin
operator|<
name|LazyValueAnalysis
operator|>
block|{
name|public
operator|:
typedef|typedef
name|LazyValueInfo
name|Result
typedef|;
name|Result
name|run
argument_list|(
name|Function
operator|&
name|F
argument_list|,
name|FunctionAnalysisManager
operator|&
name|FAM
argument_list|)
decl_stmt|;
name|private
label|:
specifier|static
name|AnalysisKey
name|Key
decl_stmt|;
name|friend
block|struct
name|AnalysisInfoMixin
operator|<
name|LazyValueAnalysis
operator|>
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/// Wrapper around LazyValueInfo.
end_comment

begin_decl_stmt
name|class
name|LazyValueInfoWrapperPass
range|:
name|public
name|FunctionPass
block|{
name|LazyValueInfoWrapperPass
argument_list|(
specifier|const
name|LazyValueInfoWrapperPass
operator|&
argument_list|)
operator|=
name|delete
block|;
name|void
name|operator
operator|=
operator|(
specifier|const
name|LazyValueInfoWrapperPass
operator|&
operator|)
operator|=
name|delete
block|;
name|public
operator|:
specifier|static
name|char
name|ID
block|;
name|LazyValueInfoWrapperPass
argument_list|()
operator|:
name|FunctionPass
argument_list|(
argument|ID
argument_list|)
block|{
name|initializeLazyValueInfoWrapperPassPass
argument_list|(
operator|*
name|PassRegistry
operator|::
name|getPassRegistry
argument_list|()
argument_list|)
block|;   }
operator|~
name|LazyValueInfoWrapperPass
argument_list|()
name|override
block|{
name|assert
argument_list|(
operator|!
name|Info
operator|.
name|PImpl
operator|&&
literal|"releaseMemory not called"
argument_list|)
block|;   }
name|LazyValueInfo
operator|&
name|getLVI
argument_list|()
block|;
name|void
name|getAnalysisUsage
argument_list|(
argument|AnalysisUsage&AU
argument_list|)
specifier|const
name|override
block|;
name|void
name|releaseMemory
argument_list|()
name|override
block|;
name|bool
name|runOnFunction
argument_list|(
argument|Function&F
argument_list|)
name|override
block|;
name|private
operator|:
name|LazyValueInfo
name|Info
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

