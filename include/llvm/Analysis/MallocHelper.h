begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- llvm/Analysis/MallocHelper.h ---- Identify malloc calls --*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This family of functions identifies calls to malloc, bitcasts of malloc
end_comment

begin_comment
comment|// calls, and the types and array sizes associated with them.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_ANALYSIS_MALLOCHELPER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_ANALYSIS_MALLOCHELPER_H
end_define

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|CallInst
decl_stmt|;
name|class
name|LLVMContext
decl_stmt|;
name|class
name|PointerType
decl_stmt|;
name|class
name|TargetData
decl_stmt|;
name|class
name|Type
decl_stmt|;
name|class
name|Value
decl_stmt|;
comment|//===----------------------------------------------------------------------===//
comment|//  malloc Call Utility Functions.
comment|//
comment|/// isMalloc - Returns true if the the value is either a malloc call or a
comment|/// bitcast of the result of a malloc call
name|bool
name|isMalloc
parameter_list|(
specifier|const
name|Value
modifier|*
name|I
parameter_list|)
function_decl|;
comment|/// extractMallocCall - Returns the corresponding CallInst if the instruction
comment|/// is a malloc call.  Since CallInst::CreateMalloc() only creates calls, we
comment|/// ignore InvokeInst here.
specifier|const
name|CallInst
modifier|*
name|extractMallocCall
parameter_list|(
specifier|const
name|Value
modifier|*
name|I
parameter_list|)
function_decl|;
name|CallInst
modifier|*
name|extractMallocCall
parameter_list|(
name|Value
modifier|*
name|I
parameter_list|)
function_decl|;
comment|/// extractMallocCallFromBitCast - Returns the corresponding CallInst if the
comment|/// instruction is a bitcast of the result of a malloc call.
specifier|const
name|CallInst
modifier|*
name|extractMallocCallFromBitCast
parameter_list|(
specifier|const
name|Value
modifier|*
name|I
parameter_list|)
function_decl|;
name|CallInst
modifier|*
name|extractMallocCallFromBitCast
parameter_list|(
name|Value
modifier|*
name|I
parameter_list|)
function_decl|;
comment|/// isArrayMalloc - Returns the corresponding CallInst if the instruction
comment|/// matches the malloc call IR generated by CallInst::CreateMalloc().  This
comment|/// means that it is a malloc call with one bitcast use AND the malloc call's
comment|/// size argument is:
comment|///  1. a constant not equal to the malloc's allocated type
comment|/// or
comment|///  2. the result of a multiplication by the malloc's allocated type
comment|/// Otherwise it returns NULL.
comment|/// The unique bitcast is needed to determine the type/size of the array
comment|/// allocation.
name|CallInst
modifier|*
name|isArrayMalloc
parameter_list|(
name|Value
modifier|*
name|I
parameter_list|,
name|LLVMContext
modifier|&
name|Context
parameter_list|,
specifier|const
name|TargetData
modifier|*
name|TD
parameter_list|)
function_decl|;
specifier|const
name|CallInst
modifier|*
name|isArrayMalloc
parameter_list|(
specifier|const
name|Value
modifier|*
name|I
parameter_list|,
name|LLVMContext
modifier|&
name|Context
parameter_list|,
specifier|const
name|TargetData
modifier|*
name|TD
parameter_list|)
function_decl|;
comment|/// getMallocType - Returns the PointerType resulting from the malloc call.
comment|/// This PointerType is the result type of the call's only bitcast use.
comment|/// If there is no unique bitcast use, then return NULL.
specifier|const
name|PointerType
modifier|*
name|getMallocType
parameter_list|(
specifier|const
name|CallInst
modifier|*
name|CI
parameter_list|)
function_decl|;
comment|/// getMallocAllocatedType - Returns the Type allocated by malloc call. This
comment|/// Type is the result type of the call's only bitcast use. If there is no
comment|/// unique bitcast use, then return NULL.
specifier|const
name|Type
modifier|*
name|getMallocAllocatedType
parameter_list|(
specifier|const
name|CallInst
modifier|*
name|CI
parameter_list|)
function_decl|;
comment|/// getMallocArraySize - Returns the array size of a malloc call.  The array
comment|/// size is computated in 1 of 3 ways:
comment|///  1. If the element type if of size 1, then array size is the argument to
comment|///     malloc.
comment|///  2. Else if the malloc's argument is a constant, the array size is that
comment|///     argument divided by the element type's size.
comment|///  3. Else the malloc argument must be a multiplication and the array size is
comment|///     the first operand of the multiplication.
comment|/// This function returns constant 1 if:
comment|///  1. The malloc call's allocated type cannot be determined.
comment|///  2. IR wasn't created by a call to CallInst::CreateMalloc() with a non-NULL
comment|///     ArraySize.
name|Value
modifier|*
name|getMallocArraySize
parameter_list|(
name|CallInst
modifier|*
name|CI
parameter_list|,
name|LLVMContext
modifier|&
name|Context
parameter_list|,
specifier|const
name|TargetData
modifier|*
name|TD
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_comment
comment|// End llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

