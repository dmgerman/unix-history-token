begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- llvm/Analysis/ProfileInfo.h - Profile Info Interface -----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines the generic ProfileInfo interface, which is used as the
end_comment

begin_comment
comment|// common interface used by all clients of profiling information, and
end_comment

begin_comment
comment|// implemented either by making static guestimations, or by actually reading in
end_comment

begin_comment
comment|// profiling information gathered by running the program.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Note that to be useful, all profile-based optimizations should preserve
end_comment

begin_comment
comment|// ProfileInfo, which requires that they notify it when changes to the CFG are
end_comment

begin_comment
comment|// made. (This is not implemented yet.)
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_ANALYSIS_PROFILEINFO_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_ANALYSIS_PROFILEINFO_H
end_define

begin_include
include|#
directive|include
file|"llvm/BasicBlock.h"
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|Function
decl_stmt|;
name|class
name|Pass
decl_stmt|;
name|class
name|raw_ostream
decl_stmt|;
comment|/// ProfileInfo Class - This class holds and maintains profiling
comment|/// information for some unit of code.
name|class
name|ProfileInfo
block|{
name|public
label|:
comment|// Types for handling profiling information.
typedef|typedef
name|std
operator|::
name|pair
operator|<
specifier|const
name|BasicBlock
operator|*
operator|,
specifier|const
name|BasicBlock
operator|*
operator|>
name|Edge
expr_stmt|;
typedef|typedef
name|std
operator|::
name|pair
operator|<
name|Edge
operator|,
name|double
operator|>
name|EdgeWeight
expr_stmt|;
typedef|typedef
name|std
operator|::
name|map
operator|<
name|Edge
operator|,
name|double
operator|>
name|EdgeWeights
expr_stmt|;
typedef|typedef
name|std
operator|::
name|map
operator|<
specifier|const
name|BasicBlock
operator|*
operator|,
name|double
operator|>
name|BlockCounts
expr_stmt|;
name|protected
label|:
comment|// EdgeInformation - Count the number of times a transition between two
comment|// blocks is executed. As a special case, we also hold an edge from the
comment|// null BasicBlock to the entry block to indicate how many times the
comment|// function was entered.
name|std
operator|::
name|map
operator|<
specifier|const
name|Function
operator|*
operator|,
name|EdgeWeights
operator|>
name|EdgeInformation
expr_stmt|;
comment|// BlockInformation - Count the number of times a block is executed.
name|std
operator|::
name|map
operator|<
specifier|const
name|Function
operator|*
operator|,
name|BlockCounts
operator|>
name|BlockInformation
expr_stmt|;
comment|// FunctionInformation - Count the number of times a function is executed.
name|std
operator|::
name|map
operator|<
specifier|const
name|Function
operator|*
operator|,
name|double
operator|>
name|FunctionInformation
expr_stmt|;
name|public
label|:
specifier|static
name|char
name|ID
decl_stmt|;
comment|// Class identification, replacement for typeinfo
name|virtual
operator|~
name|ProfileInfo
argument_list|()
expr_stmt|;
comment|// We want to be subclassed
comment|// MissingValue - The value that is returned for execution counts in case
comment|// no value is available.
specifier|static
specifier|const
name|double
name|MissingValue
decl_stmt|;
comment|// getFunction() - Returns the Function for an Edge, checking for validity.
specifier|static
specifier|const
name|Function
modifier|*
name|getFunction
parameter_list|(
name|Edge
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|first
condition|)
block|{
return|return
name|e
operator|.
name|first
operator|->
name|getParent
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|e
operator|.
name|second
condition|)
block|{
return|return
name|e
operator|.
name|second
operator|->
name|getParent
argument_list|()
return|;
block|}
name|assert
argument_list|(
literal|0
operator|&&
literal|"Invalid ProfileInfo::Edge"
argument_list|)
expr_stmt|;
return|return
operator|(
specifier|const
name|Function
operator|*
operator|)
literal|0
return|;
block|}
comment|// getEdge() - Creates an Edge from two BasicBlocks.
specifier|static
name|Edge
name|getEdge
parameter_list|(
specifier|const
name|BasicBlock
modifier|*
name|Src
parameter_list|,
specifier|const
name|BasicBlock
modifier|*
name|Dest
parameter_list|)
block|{
return|return
name|std
operator|::
name|make_pair
argument_list|(
name|Src
argument_list|,
name|Dest
argument_list|)
return|;
block|}
comment|//===------------------------------------------------------------------===//
comment|/// Profile Information Queries
comment|///
name|double
name|getExecutionCount
parameter_list|(
specifier|const
name|Function
modifier|*
name|F
parameter_list|)
function_decl|;
name|double
name|getExecutionCount
parameter_list|(
specifier|const
name|BasicBlock
modifier|*
name|BB
parameter_list|)
function_decl|;
name|double
name|getEdgeWeight
argument_list|(
name|Edge
name|e
argument_list|)
decl|const
block|{
name|std
operator|::
name|map
operator|<
specifier|const
name|Function
operator|*
operator|,
name|EdgeWeights
operator|>
operator|::
name|const_iterator
name|J
operator|=
name|EdgeInformation
operator|.
name|find
argument_list|(
name|getFunction
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|J
operator|==
name|EdgeInformation
operator|.
name|end
argument_list|()
condition|)
return|return
name|MissingValue
return|;
name|EdgeWeights
operator|::
name|const_iterator
name|I
operator|=
name|J
operator|->
name|second
operator|.
name|find
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|I
operator|==
name|J
operator|->
name|second
operator|.
name|end
argument_list|()
condition|)
return|return
name|MissingValue
return|;
return|return
name|I
operator|->
name|second
return|;
block|}
name|EdgeWeights
modifier|&
name|getEdgeWeights
parameter_list|(
specifier|const
name|Function
modifier|*
name|F
parameter_list|)
block|{
return|return
name|EdgeInformation
index|[
name|F
index|]
return|;
block|}
comment|//===------------------------------------------------------------------===//
comment|/// Analysis Update Methods
comment|///
name|void
name|removeBlock
parameter_list|(
specifier|const
name|BasicBlock
modifier|*
name|BB
parameter_list|)
block|{
name|std
operator|::
name|map
operator|<
specifier|const
name|Function
operator|*
operator|,
name|BlockCounts
operator|>
operator|::
name|iterator
name|J
operator|=
name|BlockInformation
operator|.
name|find
argument_list|(
name|BB
operator|->
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|J
operator|==
name|BlockInformation
operator|.
name|end
argument_list|()
condition|)
return|return;
name|J
operator|->
name|second
operator|.
name|erase
argument_list|(
name|BB
argument_list|)
expr_stmt|;
block|}
name|void
name|removeEdge
parameter_list|(
name|Edge
name|e
parameter_list|)
block|{
name|std
operator|::
name|map
operator|<
specifier|const
name|Function
operator|*
operator|,
name|EdgeWeights
operator|>
operator|::
name|iterator
name|J
operator|=
name|EdgeInformation
operator|.
name|find
argument_list|(
name|getFunction
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|J
operator|==
name|EdgeInformation
operator|.
name|end
argument_list|()
condition|)
return|return;
name|J
operator|->
name|second
operator|.
name|erase
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|void
name|splitEdge
parameter_list|(
specifier|const
name|BasicBlock
modifier|*
name|FirstBB
parameter_list|,
specifier|const
name|BasicBlock
modifier|*
name|SecondBB
parameter_list|,
specifier|const
name|BasicBlock
modifier|*
name|NewBB
parameter_list|,
name|bool
name|MergeIdenticalEdges
init|=
name|false
parameter_list|)
function_decl|;
name|void
name|replaceAllUses
parameter_list|(
specifier|const
name|BasicBlock
modifier|*
name|RmBB
parameter_list|,
specifier|const
name|BasicBlock
modifier|*
name|DestBB
parameter_list|)
function_decl|;
block|}
empty_stmt|;
comment|/// createProfileLoaderPass - This function returns a Pass that loads the
comment|/// profiling information for the module from the specified filename, making
comment|/// it available to the optimizers.
name|Pass
modifier|*
name|createProfileLoaderPass
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Filename
argument_list|)
decl_stmt|;
name|raw_ostream
operator|&
name|operator
operator|<<
operator|(
name|raw_ostream
operator|&
name|O
operator|,
name|ProfileInfo
operator|::
name|Edge
name|E
operator|)
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// End llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

