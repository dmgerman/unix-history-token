begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- PathProfileInfo.h --------------------------------------*- C++ -*---===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file outlines the interface used by optimizers to load path profiles.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_PATHPROFILEINFO_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_PATHPROFILEINFO_H
end_define

begin_include
include|#
directive|include
file|"llvm/BasicBlock.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Analysis/PathNumbering.h"
end_include

begin_include
include|#
directive|include
file|<stack>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|ProfilePath
decl_stmt|;
name|class
name|ProfilePathEdge
decl_stmt|;
name|class
name|PathProfileInfo
decl_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|ProfilePathEdge
operator|>
name|ProfilePathEdgeVector
expr_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|ProfilePathEdge
operator|>
operator|::
name|iterator
name|ProfilePathEdgeIterator
expr_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|BasicBlock
operator|*
operator|>
name|ProfilePathBlockVector
expr_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|BasicBlock
operator|*
operator|>
operator|::
name|iterator
name|ProfilePathBlockIterator
expr_stmt|;
typedef|typedef
name|std
operator|::
name|map
operator|<
name|unsigned
name|int
operator|,
name|ProfilePath
operator|*
operator|>
name|ProfilePathMap
expr_stmt|;
typedef|typedef
name|std
operator|::
name|map
operator|<
name|unsigned
name|int
operator|,
name|ProfilePath
operator|*
operator|>
operator|::
name|iterator
name|ProfilePathIterator
expr_stmt|;
typedef|typedef
name|std
operator|::
name|map
operator|<
name|Function
operator|*
operator|,
name|unsigned
name|int
operator|>
name|FunctionPathCountMap
expr_stmt|;
typedef|typedef
name|std
operator|::
name|map
operator|<
name|Function
operator|*
operator|,
name|ProfilePathMap
operator|>
name|FunctionPathMap
expr_stmt|;
typedef|typedef
name|std
operator|::
name|map
operator|<
name|Function
operator|*
operator|,
name|ProfilePathMap
operator|>
operator|::
name|iterator
name|FunctionPathIterator
expr_stmt|;
name|class
name|ProfilePathEdge
block|{
name|public
label|:
name|ProfilePathEdge
argument_list|(
argument|BasicBlock* source
argument_list|,
argument|BasicBlock* target
argument_list|,
argument|unsigned duplicateNumber
argument_list|)
empty_stmt|;
specifier|inline
name|unsigned
name|getDuplicateNumber
parameter_list|()
block|{
return|return
name|_duplicateNumber
return|;
block|}
specifier|inline
name|BasicBlock
modifier|*
name|getSource
parameter_list|()
block|{
return|return
name|_source
return|;
block|}
specifier|inline
name|BasicBlock
modifier|*
name|getTarget
parameter_list|()
block|{
return|return
name|_target
return|;
block|}
name|protected
label|:
name|BasicBlock
modifier|*
name|_source
decl_stmt|;
name|BasicBlock
modifier|*
name|_target
decl_stmt|;
name|unsigned
name|_duplicateNumber
decl_stmt|;
block|}
empty_stmt|;
name|class
name|ProfilePath
block|{
name|public
label|:
name|ProfilePath
argument_list|(
argument|unsigned int number
argument_list|,
argument|unsigned int count
argument_list|,
argument|double countStdDev
argument_list|,
argument|PathProfileInfo* ppi
argument_list|)
empty_stmt|;
name|double
name|getFrequency
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|unsigned
name|int
name|getNumber
argument_list|()
specifier|const
block|{
return|return
name|_number
return|;
block|}
specifier|inline
name|unsigned
name|int
name|getCount
argument_list|()
specifier|const
block|{
return|return
name|_count
return|;
block|}
specifier|inline
name|double
name|getCountStdDev
argument_list|()
specifier|const
block|{
return|return
name|_countStdDev
return|;
block|}
name|ProfilePathEdgeVector
operator|*
name|getPathEdges
argument_list|()
specifier|const
expr_stmt|;
name|ProfilePathBlockVector
operator|*
name|getPathBlocks
argument_list|()
specifier|const
expr_stmt|;
name|BasicBlock
operator|*
name|getFirstBlockInPath
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|unsigned
name|int
name|_number
decl_stmt|;
name|unsigned
name|int
name|_count
decl_stmt|;
name|double
name|_countStdDev
decl_stmt|;
comment|// double pointer back to the profiling info
name|PathProfileInfo
modifier|*
name|_ppi
decl_stmt|;
block|}
empty_stmt|;
comment|// TODO: overload [] operator for getting path
comment|// Add: getFunctionCallCount()
name|class
name|PathProfileInfo
block|{
name|public
label|:
name|PathProfileInfo
argument_list|()
expr_stmt|;
operator|~
name|PathProfileInfo
argument_list|()
expr_stmt|;
name|void
name|setCurrentFunction
parameter_list|(
name|Function
modifier|*
name|F
parameter_list|)
function_decl|;
name|Function
operator|*
name|getCurrentFunction
argument_list|()
specifier|const
expr_stmt|;
name|BasicBlock
modifier|*
name|getCurrentFunctionEntry
parameter_list|()
function_decl|;
name|ProfilePath
modifier|*
name|getPath
parameter_list|(
name|unsigned
name|int
name|number
parameter_list|)
function_decl|;
name|unsigned
name|int
name|getPotentialPathCount
parameter_list|()
function_decl|;
name|ProfilePathIterator
name|pathBegin
parameter_list|()
function_decl|;
name|ProfilePathIterator
name|pathEnd
parameter_list|()
function_decl|;
name|unsigned
name|int
name|pathsRun
parameter_list|()
function_decl|;
specifier|static
name|char
name|ID
decl_stmt|;
comment|// Pass identification
name|std
operator|::
name|string
name|argList
expr_stmt|;
name|protected
label|:
name|FunctionPathMap
name|_functionPaths
decl_stmt|;
name|FunctionPathCountMap
name|_functionPathCounts
decl_stmt|;
name|private
label|:
name|BallLarusDag
modifier|*
name|_currentDag
decl_stmt|;
name|Function
modifier|*
name|_currentFunction
decl_stmt|;
name|friend
name|class
name|ProfilePath
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

