begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- RegionIterator.h - Iterators to iteratate over Regions ---*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|// This file defines the iterators to iterate over the elements of a Region.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_ANALYSIS_REGION_ITERATOR_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_ANALYSIS_REGION_ITERATOR_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/GraphTraits.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallPtrSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/PointerIntPair.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Analysis/RegionInfo.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/CFG.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/raw_ostream.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|//===----------------------------------------------------------------------===//
comment|/// @brief Hierarchical RegionNode successor iterator.
comment|///
comment|/// This iterator iterates over all successors of a RegionNode.
comment|///
comment|/// For a BasicBlock RegionNode it skips all BasicBlocks that are not part of
comment|/// the parent Region.  Furthermore for BasicBlocks that start a subregion, a
comment|/// RegionNode representing the subregion is returned.
comment|///
comment|/// For a subregion RegionNode there is just one successor. The RegionNode
comment|/// representing the exit of the subregion.
name|template
operator|<
name|class
name|NodeType
operator|>
name|class
name|RNSuccIterator
operator|:
name|public
name|std
operator|::
name|iterator
operator|<
name|std
operator|::
name|forward_iterator_tag
operator|,
name|NodeType
operator|,
name|ptrdiff_t
operator|>
block|{
typedef|typedef
name|std
operator|::
name|iterator
operator|<
name|std
operator|::
name|forward_iterator_tag
operator|,
name|NodeType
operator|,
name|ptrdiff_t
operator|>
name|super
expr_stmt|;
comment|// The iterator works in two modes, bb mode or region mode.
block|enum
name|ItMode
block|{
comment|// In BB mode it returns all successors of this BasicBlock as its
comment|// successors.
name|ItBB
block|,
comment|// In region mode there is only one successor, thats the regionnode mapping
comment|// to the exit block of the regionnode
name|ItRgBegin
block|,
comment|// At the beginning of the regionnode successor.
name|ItRgEnd
comment|// At the end of the regionnode successor.
block|}
expr_stmt|;
comment|// Use two bit to represent the mode iterator.
name|PointerIntPair
operator|<
name|NodeType
operator|*
operator|,
literal|2
operator|,
expr_stmt|enum
name|ItMode
operator|>
name|Node
expr_stmt|;
comment|// The block successor iterator.
name|succ_iterator
name|BItor
decl_stmt|;
comment|// advanceRegionSucc - A region node has only one successor. It reaches end
comment|// once we advance it.
name|void
name|advanceRegionSucc
parameter_list|()
block|{
name|assert
argument_list|(
name|Node
operator|.
name|getInt
argument_list|()
operator|==
name|ItRgBegin
operator|&&
literal|"Cannot advance region successor!"
argument_list|)
expr_stmt|;
name|Node
operator|.
name|setInt
argument_list|(
name|ItRgEnd
argument_list|)
expr_stmt|;
block|}
name|NodeType
operator|*
name|getNode
argument_list|()
specifier|const
block|{
return|return
name|Node
operator|.
name|getPointer
argument_list|()
return|;
block|}
comment|// isRegionMode - Is the current iterator in region mode?
name|bool
name|isRegionMode
argument_list|()
specifier|const
block|{
return|return
name|Node
operator|.
name|getInt
argument_list|()
operator|!=
name|ItBB
return|;
block|}
comment|// Get the immediate successor. This function may return a Basic Block
comment|// RegionNode or a subregion RegionNode.
name|RegionNode
modifier|*
name|getISucc
argument_list|(
name|BasicBlock
operator|*
name|BB
argument_list|)
decl|const
block|{
name|RegionNode
modifier|*
name|succ
decl_stmt|;
name|succ
operator|=
name|getNode
argument_list|()
operator|->
name|getParent
argument_list|()
operator|->
name|getNode
argument_list|(
name|BB
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|succ
operator|&&
literal|"BB not in Region or entered subregion!"
argument_list|)
expr_stmt|;
return|return
name|succ
return|;
block|}
comment|// getRegionSucc - Return the successor basic block of a SubRegion RegionNode.
specifier|inline
name|BasicBlock
operator|*
name|getRegionSucc
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|Node
operator|.
name|getInt
argument_list|()
operator|==
name|ItRgBegin
operator|&&
literal|"Cannot get the region successor!"
argument_list|)
block|;
return|return
name|getNode
argument_list|()
operator|->
name|template
name|getNodeAs
operator|<
name|Region
operator|>
operator|(
operator|)
operator|->
name|getExit
argument_list|()
return|;
block|}
comment|// isExit - Is this the exit BB of the Region?
specifier|inline
name|bool
name|isExit
argument_list|(
name|BasicBlock
operator|*
name|BB
argument_list|)
decl|const
block|{
return|return
name|getNode
argument_list|()
operator|->
name|getParent
argument_list|()
operator|->
name|getExit
argument_list|()
operator|==
name|BB
return|;
block|}
name|public
label|:
typedef|typedef
name|RNSuccIterator
operator|<
name|NodeType
operator|>
name|Self
expr_stmt|;
typedef|typedef
name|typename
name|super
operator|::
name|pointer
name|pointer
expr_stmt|;
comment|/// @brief Create begin iterator of a RegionNode.
specifier|inline
name|RNSuccIterator
argument_list|(
name|NodeType
operator|*
name|node
argument_list|)
operator|:
name|Node
argument_list|(
name|node
argument_list|,
name|node
operator|->
name|isSubRegion
argument_list|()
condition|?
name|ItRgBegin
else|:
name|ItBB
argument_list|)
operator|,
name|BItor
argument_list|(
argument|succ_begin(node->getEntry())
argument_list|)
block|{
comment|// Skip the exit block
if|if
condition|(
operator|!
name|isRegionMode
argument_list|()
condition|)
while|while
condition|(
name|succ_end
argument_list|(
name|node
operator|->
name|getEntry
argument_list|()
argument_list|)
operator|!=
name|BItor
operator|&&
name|isExit
argument_list|(
operator|*
name|BItor
argument_list|)
condition|)
operator|++
name|BItor
expr_stmt|;
if|if
condition|(
name|isRegionMode
argument_list|()
operator|&&
name|isExit
argument_list|(
name|getRegionSucc
argument_list|()
argument_list|)
condition|)
name|advanceRegionSucc
argument_list|()
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|/// @brief Create an end iterator.
end_comment

begin_expr_stmt
specifier|inline
name|RNSuccIterator
argument_list|(
name|NodeType
operator|*
name|node
argument_list|,
name|bool
argument_list|)
operator|:
name|Node
argument_list|(
name|node
argument_list|,
name|node
operator|->
name|isSubRegion
argument_list|()
condition|?
name|ItRgEnd
else|:
name|ItBB
argument_list|)
operator|,
name|BItor
argument_list|(
argument|succ_end(node->getEntry())
argument_list|)
block|{}
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|Self
operator|&
name|x
operator|)
specifier|const
block|{
name|assert
argument_list|(
name|isRegionMode
argument_list|()
operator|==
name|x
operator|.
name|isRegionMode
argument_list|()
operator|&&
literal|"Broken iterator!"
argument_list|)
block|;
if|if
condition|(
name|isRegionMode
argument_list|()
condition|)
return|return
name|Node
operator|.
name|getInt
argument_list|()
operator|==
name|x
operator|.
name|Node
operator|.
name|getInt
argument_list|()
return|;
else|else
return|return
name|BItor
operator|==
name|x
operator|.
name|BItor
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|Self
operator|&
name|x
operator|)
specifier|const
block|{
return|return
operator|!
name|operator
operator|==
operator|(
name|x
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|pointer
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
name|BasicBlock
operator|*
name|BB
operator|=
name|isRegionMode
argument_list|()
operator|?
name|getRegionSucc
argument_list|()
operator|:
operator|*
name|BItor
block|;
name|assert
argument_list|(
operator|!
name|isExit
argument_list|(
name|BB
argument_list|)
operator|&&
literal|"Iterator out of range!"
argument_list|)
block|;
return|return
name|getISucc
argument_list|(
name|BB
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Self
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
if|if
condition|(
name|isRegionMode
argument_list|()
condition|)
block|{
comment|// The Region only has 1 successor.
name|advanceRegionSucc
argument_list|()
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
comment|// Skip the exit.
do|do
operator|++
name|BItor
expr_stmt|;
do|while
condition|(
name|BItor
operator|!=
name|succ_end
argument_list|(
name|getNode
argument_list|()
operator|->
name|getEntry
argument_list|()
argument_list|)
operator|&&
name|isExit
argument_list|(
operator|*
name|BItor
argument_list|)
condition|)
do|;
block|}
end_else

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}    inline
name|Self
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|Self
name|tmp
operator|=
operator|*
name|this
block|;
operator|++
operator|*
name|this
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_decl_stmt
specifier|inline
specifier|const
name|Self
modifier|&
name|operator
init|=
operator|(
specifier|const
name|Self
operator|&
name|I
operator|)
block|{
if|if
condition|(
name|this
operator|!=
operator|&
name|I
condition|)
block|{
name|assert
argument_list|(
name|getNode
argument_list|()
operator|->
name|getParent
argument_list|()
operator|==
name|I
operator|.
name|getNode
argument_list|()
operator|->
name|getParent
argument_list|()
operator|&&
literal|"Cannot assign iterators of two different regions!"
argument_list|)
expr_stmt|;
name|Node
operator|=
name|I
operator|.
name|Node
expr_stmt|;
name|BItor
operator|=
name|I
operator|.
name|BItor
expr_stmt|;
block|}
return|return
operator|*
name|this
return|;
block|}
end_decl_stmt

begin_comment
unit|};
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|/// @brief Flat RegionNode iterator.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// The Flat Region iterator will iterate over all BasicBlock RegionNodes that
end_comment

begin_comment
comment|/// are contained in the Region and its subregions. This is close to a virtual
end_comment

begin_comment
comment|/// control flow graph of the Region.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|NodeType
operator|>
name|class
name|RNSuccIterator
operator|<
name|FlatIt
operator|<
name|NodeType
operator|>
expr|>
operator|:
name|public
name|std
operator|::
name|iterator
operator|<
name|std
operator|::
name|forward_iterator_tag
operator|,
name|NodeType
operator|,
name|ptrdiff_t
operator|>
block|{
typedef|typedef
name|std
operator|::
name|iterator
operator|<
name|std
operator|::
name|forward_iterator_tag
operator|,
name|NodeType
operator|,
name|ptrdiff_t
operator|>
name|super
expr_stmt|;
name|NodeType
operator|*
name|Node
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|succ_iterator
name|Itor
decl_stmt|;
end_decl_stmt

begin_label
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|RNSuccIterator
operator|<
name|FlatIt
operator|<
name|NodeType
operator|>
expr|>
name|Self
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|super
operator|::
name|pointer
name|pointer
expr_stmt|;
end_typedef

begin_comment
comment|/// @brief Create the iterator from a RegionNode.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// Note that the incoming node must be a bb node, otherwise it will trigger
end_comment

begin_comment
comment|/// an assertion when we try to get a BasicBlock.
end_comment

begin_expr_stmt
specifier|inline
name|RNSuccIterator
argument_list|(
name|NodeType
operator|*
name|node
argument_list|)
operator|:
name|Node
argument_list|(
name|node
argument_list|)
operator|,
name|Itor
argument_list|(
argument|succ_begin(node->getEntry())
argument_list|)
block|{
name|assert
argument_list|(
operator|!
name|Node
operator|->
name|isSubRegion
argument_list|()
operator|&&
literal|"Subregion node not allowed in flat iterating mode!"
argument_list|)
block|;
name|assert
argument_list|(
name|Node
operator|->
name|getParent
argument_list|()
operator|&&
literal|"A BB node must have a parent!"
argument_list|)
block|;
comment|// Skip the exit block of the iterating region.
while|while
condition|(
name|succ_end
argument_list|(
name|Node
operator|->
name|getEntry
argument_list|()
argument_list|)
operator|!=
name|Itor
operator|&&
name|Node
operator|->
name|getParent
argument_list|()
operator|->
name|getExit
argument_list|()
operator|==
operator|*
name|Itor
condition|)
operator|++
name|Itor
expr_stmt|;
block|}
end_expr_stmt

begin_comment
comment|/// @brief Create an end iterator
end_comment

begin_expr_stmt
specifier|inline
name|RNSuccIterator
argument_list|(
name|NodeType
operator|*
name|node
argument_list|,
name|bool
argument_list|)
operator|:
name|Node
argument_list|(
name|node
argument_list|)
operator|,
name|Itor
argument_list|(
argument|succ_end(node->getEntry())
argument_list|)
block|{
name|assert
argument_list|(
operator|!
name|Node
operator|->
name|isSubRegion
argument_list|()
operator|&&
literal|"Subregion node not allowed in flat iterating mode!"
argument_list|)
block|;   }
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|Self
operator|&
name|x
operator|)
specifier|const
block|{
name|assert
argument_list|(
name|Node
operator|->
name|getParent
argument_list|()
operator|==
name|x
operator|.
name|Node
operator|->
name|getParent
argument_list|()
operator|&&
literal|"Cannot compare iterators of different regions!"
argument_list|)
block|;
return|return
name|Itor
operator|==
name|x
operator|.
name|Itor
operator|&&
name|Node
operator|==
name|x
operator|.
name|Node
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|Self
operator|&
name|x
operator|)
specifier|const
block|{
return|return
operator|!
name|operator
operator|==
operator|(
name|x
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|pointer
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
name|BasicBlock
operator|*
name|BB
operator|=
operator|*
name|Itor
block|;
comment|// Get the iterating region.
name|Region
operator|*
name|Parent
operator|=
name|Node
operator|->
name|getParent
argument_list|()
block|;
comment|// The only case that the successor reaches out of the region is it reaches
comment|// the exit of the region.
name|assert
argument_list|(
name|Parent
operator|->
name|getExit
argument_list|()
operator|!=
name|BB
operator|&&
literal|"iterator out of range!"
argument_list|)
block|;
return|return
name|Parent
operator|->
name|getBBNode
argument_list|(
name|BB
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Self
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
comment|// Skip the exit block of the iterating region.
do|do
operator|++
name|Itor
expr_stmt|;
do|while
condition|(
name|Itor
operator|!=
name|succ_end
argument_list|(
name|Node
operator|->
name|getEntry
argument_list|()
argument_list|)
operator|&&
name|Node
operator|->
name|getParent
argument_list|()
operator|->
name|getExit
argument_list|()
operator|==
operator|*
name|Itor
condition|)
do|;
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}    inline
name|Self
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|Self
name|tmp
operator|=
operator|*
name|this
block|;
operator|++
operator|*
name|this
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_decl_stmt
specifier|inline
specifier|const
name|Self
modifier|&
name|operator
init|=
operator|(
specifier|const
name|Self
operator|&
name|I
operator|)
block|{
if|if
condition|(
name|this
operator|!=
operator|&
name|I
condition|)
block|{
name|assert
argument_list|(
name|Node
operator|->
name|getParent
argument_list|()
operator|==
name|I
operator|.
name|Node
operator|->
name|getParent
argument_list|()
operator|&&
literal|"Cannot assign iterators to two different regions!"
argument_list|)
expr_stmt|;
name|Node
operator|=
name|I
operator|.
name|Node
expr_stmt|;
name|Itor
operator|=
name|I
operator|.
name|Itor
expr_stmt|;
block|}
return|return
operator|*
name|this
return|;
block|}
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|NodeType
operator|>
specifier|inline
name|RNSuccIterator
operator|<
name|NodeType
operator|>
name|succ_begin
argument_list|(
argument|NodeType* Node
argument_list|)
block|{
return|return
name|RNSuccIterator
operator|<
name|NodeType
operator|>
operator|(
name|Node
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|NodeType
operator|>
specifier|inline
name|RNSuccIterator
operator|<
name|NodeType
operator|>
name|succ_end
argument_list|(
argument|NodeType* Node
argument_list|)
block|{
return|return
name|RNSuccIterator
operator|<
name|NodeType
operator|>
operator|(
name|Node
operator|,
name|true
operator|)
return|;
block|}
end_expr_stmt

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_comment
comment|// RegionNode GraphTraits specialization so the bbs in the region can be
end_comment

begin_comment
comment|// iterate by generic graph iterators.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// NodeT can either be region node or const region node, otherwise child_begin
end_comment

begin_comment
comment|// and child_end fail.
end_comment

begin_define
define|#
directive|define
name|RegionNodeGraphTraits
parameter_list|(
name|NodeT
parameter_list|)
define|\
value|template<> struct GraphTraits<NodeT*> { \   typedef NodeT NodeType; \   typedef RNSuccIterator<NodeType> ChildIteratorType; \   static NodeType *getEntryNode(NodeType* N) { return N; } \   static inline ChildIteratorType child_begin(NodeType *N) { \     return RNSuccIterator<NodeType>(N); \   } \   static inline ChildIteratorType child_end(NodeType *N) { \     return RNSuccIterator<NodeType>(N, true); \   } \ }; \ template<> struct GraphTraits<FlatIt<NodeT*>> { \   typedef NodeT NodeType; \   typedef RNSuccIterator<FlatIt<NodeT>> ChildIteratorType; \   static NodeType *getEntryNode(NodeType* N) { return N; } \   static inline ChildIteratorType child_begin(NodeType *N) { \     return RNSuccIterator<FlatIt<NodeType>>(N); \   } \   static inline ChildIteratorType child_end(NodeType *N) { \     return RNSuccIterator<FlatIt<NodeType>>(N, true); \   } \ }
end_define

begin_define
define|#
directive|define
name|RegionGraphTraits
parameter_list|(
name|RegionT
parameter_list|,
name|NodeT
parameter_list|)
define|\
value|template<> struct GraphTraits<RegionT*> \   : public GraphTraits<NodeT*> { \   typedef df_iterator<NodeType*> nodes_iterator; \   static NodeType *getEntryNode(RegionT* R) { \     return R->getNode(R->getEntry()); \   } \   static nodes_iterator nodes_begin(RegionT* R) { \     return nodes_iterator::begin(getEntryNode(R)); \   } \   static nodes_iterator nodes_end(RegionT* R) { \     return nodes_iterator::end(getEntryNode(R)); \   } \ }; \ template<> struct GraphTraits<FlatIt<RegionT*>> \   : public GraphTraits<FlatIt<NodeT*>> { \   typedef df_iterator<NodeType*, SmallPtrSet<NodeType*, 8>, false, \   GraphTraits<FlatIt<NodeType*>>> nodes_iterator; \   static NodeType *getEntryNode(RegionT* R) { \     return R->getBBNode(R->getEntry()); \   } \   static nodes_iterator nodes_begin(RegionT* R) { \     return nodes_iterator::begin(getEntryNode(R)); \   } \   static nodes_iterator nodes_end(RegionT* R) { \     return nodes_iterator::end(getEntryNode(R)); \   } \ }
end_define

begin_expr_stmt
name|RegionNodeGraphTraits
argument_list|(
name|RegionNode
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|RegionNodeGraphTraits
argument_list|(
specifier|const
name|RegionNode
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|RegionGraphTraits
argument_list|(
name|Region
argument_list|,
name|RegionNode
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|RegionGraphTraits
argument_list|(
specifier|const
name|Region
argument_list|,
specifier|const
name|RegionNode
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
name|RegionInfo
operator|*
operator|>
operator|:
name|public
name|GraphTraits
operator|<
name|FlatIt
operator|<
name|RegionNode
operator|*
operator|>
expr|>
block|{
typedef|typedef
name|df_iterator
operator|<
name|NodeType
operator|*
operator|,
name|SmallPtrSet
operator|<
name|NodeType
operator|*
operator|,
literal|8
operator|>
operator|,
name|false
operator|,
name|GraphTraits
operator|<
name|FlatIt
operator|<
name|NodeType
operator|*
operator|>
expr|>
operator|>
name|nodes_iterator
expr_stmt|;
specifier|static
name|NodeType
operator|*
name|getEntryNode
argument_list|(
argument|RegionInfo *RI
argument_list|)
block|{
return|return
name|GraphTraits
operator|<
name|FlatIt
operator|<
name|Region
operator|*
operator|>
expr|>
operator|::
name|getEntryNode
argument_list|(
name|RI
operator|->
name|getTopLevelRegion
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|nodes_iterator
name|nodes_begin
argument_list|(
argument|RegionInfo* RI
argument_list|)
block|{
return|return
name|nodes_iterator
operator|::
name|begin
argument_list|(
name|getEntryNode
argument_list|(
name|RI
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|nodes_iterator
name|nodes_end
argument_list|(
argument|RegionInfo *RI
argument_list|)
block|{
return|return
name|nodes_iterator
operator|::
name|end
argument_list|(
name|getEntryNode
argument_list|(
name|RI
argument_list|)
argument_list|)
return|;
block|}
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// End namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

