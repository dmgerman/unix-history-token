begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- llvm/Target/TargetAsmInfo.h -----------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Interface to provide the information necessary for producing assembly files.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_TARGET_TARGETASMINFO_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_TARGET_TARGETASMINFO_H
end_define

begin_include
include|#
directive|include
file|"llvm/CodeGen/MachineLocation.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetLoweringObjectFile.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetFrameLowering.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetRegisterInfo.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|ArrayRef
expr_stmt|;
name|class
name|MCSection
decl_stmt|;
name|class
name|MCContext
decl_stmt|;
name|class
name|MachineFunction
decl_stmt|;
name|class
name|TargetMachine
decl_stmt|;
name|class
name|TargetLoweringObjectFile
decl_stmt|;
name|class
name|TargetAsmInfo
block|{
name|std
operator|::
name|vector
operator|<
name|MachineMove
operator|>
name|InitialFrameState
expr_stmt|;
specifier|const
name|TargetRegisterInfo
modifier|*
name|TRI
decl_stmt|;
specifier|const
name|TargetFrameLowering
modifier|*
name|TFI
decl_stmt|;
specifier|const
name|TargetLoweringObjectFile
modifier|*
name|TLOF
decl_stmt|;
name|public
label|:
name|explicit
name|TargetAsmInfo
parameter_list|(
specifier|const
name|TargetMachine
modifier|&
name|TM
parameter_list|)
function_decl|;
specifier|const
name|MCSection
operator|*
name|getDwarfLineSection
argument_list|()
specifier|const
block|{
return|return
name|TLOF
operator|->
name|getDwarfLineSection
argument_list|()
return|;
block|}
specifier|const
name|MCSection
operator|*
name|getEHFrameSection
argument_list|()
specifier|const
block|{
return|return
name|TLOF
operator|->
name|getEHFrameSection
argument_list|()
return|;
block|}
specifier|const
name|MCSection
operator|*
name|getCompactUnwindSection
argument_list|()
specifier|const
block|{
return|return
name|TLOF
operator|->
name|getCompactUnwindSection
argument_list|()
return|;
block|}
specifier|const
name|MCSection
operator|*
name|getDwarfFrameSection
argument_list|()
specifier|const
block|{
return|return
name|TLOF
operator|->
name|getDwarfFrameSection
argument_list|()
return|;
block|}
specifier|const
name|MCSection
modifier|*
name|getWin64EHFuncTableSection
argument_list|(
name|StringRef
name|Suffix
argument_list|)
decl|const
block|{
return|return
name|TLOF
operator|->
name|getWin64EHFuncTableSection
argument_list|(
name|Suffix
argument_list|)
return|;
block|}
specifier|const
name|MCSection
modifier|*
name|getWin64EHTableSection
argument_list|(
name|StringRef
name|Suffix
argument_list|)
decl|const
block|{
return|return
name|TLOF
operator|->
name|getWin64EHTableSection
argument_list|(
name|Suffix
argument_list|)
return|;
block|}
name|unsigned
name|getFDEEncoding
argument_list|(
name|bool
name|CFI
argument_list|)
decl|const
block|{
return|return
name|TLOF
operator|->
name|getFDEEncoding
argument_list|(
name|CFI
argument_list|)
return|;
block|}
name|bool
name|isFunctionEHFrameSymbolPrivate
argument_list|()
specifier|const
block|{
return|return
name|TLOF
operator|->
name|isFunctionEHFrameSymbolPrivate
argument_list|()
return|;
block|}
name|int
name|getCompactUnwindEncoding
argument_list|(
name|ArrayRef
operator|<
name|MCCFIInstruction
operator|>
name|Instrs
argument_list|,
name|int
name|DataAlignmentFactor
argument_list|,
name|bool
name|IsEH
argument_list|)
decl|const
block|{
return|return
name|TFI
operator|->
name|getCompactUnwindEncoding
argument_list|(
name|Instrs
argument_list|,
name|DataAlignmentFactor
argument_list|,
name|IsEH
argument_list|)
return|;
block|}
specifier|const
name|unsigned
modifier|*
name|getCalleeSavedRegs
argument_list|(
name|MachineFunction
operator|*
name|MF
operator|=
literal|0
argument_list|)
decl|const
block|{
return|return
name|TRI
operator|->
name|getCalleeSavedRegs
argument_list|(
name|MF
argument_list|)
return|;
block|}
name|unsigned
name|getDwarfRARegNum
argument_list|(
name|bool
name|isEH
argument_list|)
decl|const
block|{
return|return
name|TRI
operator|->
name|getDwarfRegNum
argument_list|(
name|TRI
operator|->
name|getRARegister
argument_list|()
argument_list|,
name|isEH
argument_list|)
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
name|MachineMove
operator|>
operator|&
name|getInitialFrameState
argument_list|()
specifier|const
block|{
return|return
name|InitialFrameState
return|;
block|}
name|int
name|getDwarfRegNum
argument_list|(
name|unsigned
name|RegNum
argument_list|,
name|bool
name|isEH
argument_list|)
decl|const
block|{
return|return
name|TRI
operator|->
name|getDwarfRegNum
argument_list|(
name|RegNum
argument_list|,
name|isEH
argument_list|)
return|;
block|}
name|int
name|getLLVMRegNum
argument_list|(
name|unsigned
name|DwarfRegNum
argument_list|,
name|bool
name|isEH
argument_list|)
decl|const
block|{
return|return
name|TRI
operator|->
name|getLLVMRegNum
argument_list|(
name|DwarfRegNum
argument_list|,
name|isEH
argument_list|)
return|;
block|}
name|int
name|getSEHRegNum
argument_list|(
name|unsigned
name|RegNum
argument_list|)
decl|const
block|{
return|return
name|TRI
operator|->
name|getSEHRegNum
argument_list|(
name|RegNum
argument_list|)
return|;
block|}
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

