begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//==- Serialize.h - Generic Object Serialization to Bitcode -------*- C++ -*-=//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines the interface for generic object serialization to
end_comment

begin_comment
comment|// LLVM bitcode.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_BITCODE_SERIALIZE_OUTPUT
end_ifndef

begin_define
define|#
directive|define
name|LLVM_BITCODE_SERIALIZE_OUTPUT
end_define

begin_include
include|#
directive|include
file|"llvm/Bitcode/Serialization.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Bitcode/BitstreamWriter.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|Serializer
block|{
name|BitstreamWriter
modifier|&
name|Stream
decl_stmt|;
name|SmallVector
operator|<
name|uint64_t
operator|,
literal|10
operator|>
name|Record
expr_stmt|;
name|unsigned
name|BlockLevel
decl_stmt|;
typedef|typedef
name|DenseMap
operator|<
specifier|const
name|void
operator|*
operator|,
name|unsigned
operator|>
name|MapTy
expr_stmt|;
name|MapTy
name|PtrMap
decl_stmt|;
name|public
label|:
name|explicit
name|Serializer
parameter_list|(
name|BitstreamWriter
modifier|&
name|stream
parameter_list|)
function_decl|;
operator|~
name|Serializer
argument_list|()
expr_stmt|;
comment|//==------------------------------------------------==//
comment|// Template-based dispatch to emit arbitrary types.
comment|//==------------------------------------------------==//
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|void
name|Emit
argument_list|(
argument|const T& X
argument_list|)
block|{
name|SerializeTrait
operator|<
name|T
operator|>
operator|::
name|Emit
argument_list|(
operator|*
name|this
argument_list|,
name|X
argument_list|)
block|; }
comment|//==------------------------------------------------==//
comment|// Methods to emit primitive types.
comment|//==------------------------------------------------==//
name|void
name|EmitInt
argument_list|(
argument|uint64_t X
argument_list|)
expr_stmt|;
name|void
name|EmitSInt
parameter_list|(
name|int64_t
name|X
parameter_list|)
function_decl|;
specifier|inline
name|void
name|EmitBool
parameter_list|(
name|bool
name|X
parameter_list|)
block|{
name|EmitInt
argument_list|(
name|X
argument_list|)
expr_stmt|;
block|}
name|void
name|EmitCStr
parameter_list|(
specifier|const
name|char
modifier|*
name|beg
parameter_list|,
specifier|const
name|char
modifier|*
name|end
parameter_list|)
function_decl|;
name|void
name|EmitCStr
parameter_list|(
specifier|const
name|char
modifier|*
name|cstr
parameter_list|)
function_decl|;
name|void
name|EmitPtr
parameter_list|(
specifier|const
name|void
modifier|*
name|ptr
parameter_list|)
block|{
name|EmitInt
argument_list|(
name|getPtrId
argument_list|(
name|ptr
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|void
name|EmitRef
argument_list|(
argument|const T& ref
argument_list|)
block|{
name|EmitPtr
argument_list|(
operator|&
name|ref
argument_list|)
block|; }
comment|// Emit a pointer and the object pointed to.  (This has no relation to the
comment|// OwningPtr<> class.)
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|void
name|EmitOwnedPtr
argument_list|(
argument|T* ptr
argument_list|)
block|{
name|EmitPtr
argument_list|(
name|ptr
argument_list|)
block|;
if|if
condition|(
name|ptr
condition|)
name|SerializeTrait
operator|<
name|T
operator|>
operator|::
name|Emit
argument_list|(
operator|*
name|this
argument_list|,
operator|*
name|ptr
argument_list|)
expr_stmt|;
block|}
comment|//==------------------------------------------------==//
comment|// Batch emission of pointers.
comment|//==------------------------------------------------==//
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|>
name|void
name|BatchEmitOwnedPtrs
argument_list|(
argument|T1* p1
argument_list|,
argument|T2* p2
argument_list|)
block|{
name|EmitPtr
argument_list|(
name|p1
argument_list|)
block|;
name|EmitPtr
argument_list|(
name|p2
argument_list|)
block|;
if|if
condition|(
name|p1
condition|)
name|SerializeTrait
operator|<
name|T1
operator|>
operator|::
name|Emit
argument_list|(
operator|*
name|this
argument_list|,
operator|*
name|p1
argument_list|)
expr_stmt|;
if|if
condition|(
name|p2
condition|)
name|SerializeTrait
operator|<
name|T2
operator|>
operator|::
name|Emit
argument_list|(
operator|*
name|this
argument_list|,
operator|*
name|p2
argument_list|)
expr_stmt|;
block|}
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|>
name|void
name|BatchEmitOwnedPtrs
argument_list|(
argument|T1* p1
argument_list|,
argument|T2* p2
argument_list|,
argument|T3* p3
argument_list|)
block|{
name|EmitPtr
argument_list|(
name|p1
argument_list|)
block|;
name|EmitPtr
argument_list|(
name|p2
argument_list|)
block|;
name|EmitPtr
argument_list|(
name|p3
argument_list|)
block|;
if|if
condition|(
name|p1
condition|)
name|SerializeTrait
operator|<
name|T1
operator|>
operator|::
name|Emit
argument_list|(
operator|*
name|this
argument_list|,
operator|*
name|p1
argument_list|)
expr_stmt|;
if|if
condition|(
name|p2
condition|)
name|SerializeTrait
operator|<
name|T2
operator|>
operator|::
name|Emit
argument_list|(
operator|*
name|this
argument_list|,
operator|*
name|p2
argument_list|)
expr_stmt|;
if|if
condition|(
name|p3
condition|)
name|SerializeTrait
operator|<
name|T3
operator|>
operator|::
name|Emit
argument_list|(
operator|*
name|this
argument_list|,
operator|*
name|p3
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|>
name|void
name|BatchEmitOwnedPtrs
argument_list|(
argument|T1* p1
argument_list|,
argument|T2* p2
argument_list|,
argument|T3* p3
argument_list|,
argument|T4& p4
argument_list|)
block|{
name|EmitPtr
argument_list|(
name|p1
argument_list|)
block|;
name|EmitPtr
argument_list|(
name|p2
argument_list|)
block|;
name|EmitPtr
argument_list|(
name|p3
argument_list|)
block|;
name|EmitPtr
argument_list|(
name|p4
argument_list|)
block|;
if|if
condition|(
name|p1
condition|)
name|SerializeTrait
operator|<
name|T1
operator|>
operator|::
name|Emit
argument_list|(
operator|*
name|this
argument_list|,
operator|*
name|p1
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|p2
condition|)
name|SerializeTrait
operator|<
name|T2
operator|>
operator|::
name|Emit
argument_list|(
operator|*
name|this
argument_list|,
operator|*
name|p2
argument_list|)
expr_stmt|;
end_if

begin_if
if|if
condition|(
name|p3
condition|)
name|SerializeTrait
operator|<
name|T3
operator|>
operator|::
name|Emit
argument_list|(
operator|*
name|this
argument_list|,
operator|*
name|p3
argument_list|)
expr_stmt|;
end_if

begin_if
if|if
condition|(
name|p4
condition|)
name|SerializeTrait
operator|<
name|T4
operator|>
operator|::
name|Emit
argument_list|(
operator|*
name|this
argument_list|,
operator|*
name|p4
argument_list|)
expr_stmt|;
end_if

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|T
operator|>
name|void
name|BatchEmitOwnedPtrs
argument_list|(
argument|unsigned NumPtrs
argument_list|,
argument|T* const * Ptrs
argument_list|)
block|{
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumPtrs
condition|;
operator|++
name|i
control|)
name|EmitPtr
argument_list|(
name|Ptrs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumPtrs
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|Ptrs
index|[
name|i
index|]
condition|)
name|SerializeTrait
operator|<
name|T
operator|>
operator|::
name|Emit
argument_list|(
operator|*
name|this
argument_list|,
operator|*
name|Ptrs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
end_for

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|>
name|void
name|BatchEmitOwnedPtrs
argument_list|(
argument|unsigned NumT1Ptrs
argument_list|,
argument|T1* const * Ptrs
argument_list|,
argument|T2* p2
argument_list|)
block|{
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumT1Ptrs
condition|;
operator|++
name|i
control|)
name|EmitPtr
argument_list|(
name|Ptrs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|EmitPtr
argument_list|(
name|p2
argument_list|)
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumT1Ptrs
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|Ptrs
index|[
name|i
index|]
condition|)
name|SerializeTrait
operator|<
name|T1
operator|>
operator|::
name|Emit
argument_list|(
operator|*
name|this
argument_list|,
operator|*
name|Ptrs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
end_for

begin_if
if|if
condition|(
name|p2
condition|)
name|SerializeTrait
operator|<
name|T2
operator|>
operator|::
name|Emit
argument_list|(
operator|*
name|this
argument_list|,
operator|*
name|p2
argument_list|)
expr_stmt|;
end_if

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|>
name|void
name|BatchEmitOwnedPtrs
argument_list|(
argument|unsigned NumT1Ptrs
argument_list|,
argument|T1* const * Ptrs
argument_list|,
argument|T2* p2
argument_list|,
argument|T3* p3
argument_list|)
block|{
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumT1Ptrs
condition|;
operator|++
name|i
control|)
name|EmitPtr
argument_list|(
name|Ptrs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|EmitPtr
argument_list|(
name|p2
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|EmitPtr
argument_list|(
name|p3
argument_list|)
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumT1Ptrs
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|Ptrs
index|[
name|i
index|]
condition|)
name|SerializeTrait
operator|<
name|T1
operator|>
operator|::
name|Emit
argument_list|(
operator|*
name|this
argument_list|,
operator|*
name|Ptrs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
end_for

begin_if
if|if
condition|(
name|p2
condition|)
name|SerializeTrait
operator|<
name|T2
operator|>
operator|::
name|Emit
argument_list|(
operator|*
name|this
argument_list|,
operator|*
name|p2
argument_list|)
expr_stmt|;
end_if

begin_if
if|if
condition|(
name|p3
condition|)
name|SerializeTrait
operator|<
name|T3
operator|>
operator|::
name|Emit
argument_list|(
operator|*
name|this
argument_list|,
operator|*
name|p3
argument_list|)
expr_stmt|;
end_if

begin_comment
unit|}
comment|//==------------------------------------------------==//
end_comment

begin_comment
comment|// Emitter Functors
end_comment

begin_comment
comment|//==------------------------------------------------==//
end_comment

begin_expr_stmt
unit|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|Emitter0
block|{
name|Serializer
operator|&
name|S
block|;
name|Emitter0
argument_list|(
name|Serializer
operator|&
name|s
argument_list|)
operator|:
name|S
argument_list|(
argument|s
argument_list|)
block|{}
name|void
name|operator
argument_list|()
operator|(
specifier|const
name|T
operator|&
name|x
operator|)
specifier|const
block|{
name|SerializeTrait
operator|<
name|T
operator|>
operator|::
name|Emit
argument_list|(
name|S
argument_list|,
name|x
argument_list|)
block|;     }
block|}
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Arg1
operator|>
expr|struct
name|Emitter1
block|{
name|Serializer
operator|&
name|S
block|;
name|Arg1
name|A1
block|;
name|Emitter1
argument_list|(
argument|Serializer& s
argument_list|,
argument|Arg1 a1
argument_list|)
operator|:
name|S
argument_list|(
name|s
argument_list|)
block|,
name|A1
argument_list|(
argument|a1
argument_list|)
block|{}
name|void
name|operator
argument_list|()
operator|(
specifier|const
name|T
operator|&
name|x
operator|)
specifier|const
block|{
name|SerializeTrait
operator|<
name|T
operator|>
operator|::
name|Emit
argument_list|(
name|S
argument_list|,
name|x
argument_list|,
name|A1
argument_list|)
block|;     }
block|}
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|>
expr|struct
name|Emitter2
block|{
name|Serializer
operator|&
name|S
block|;
name|Arg1
name|A1
block|;
name|Arg2
name|A2
block|;
name|Emitter2
argument_list|(
argument|Serializer& s
argument_list|,
argument|Arg1 a1
argument_list|,
argument|Arg2 a2
argument_list|)
operator|:
name|S
argument_list|(
name|s
argument_list|)
block|,
name|A1
argument_list|(
name|a1
argument_list|)
block|,
name|A2
argument_list|(
argument|a2
argument_list|)
block|{}
name|void
name|operator
argument_list|()
operator|(
specifier|const
name|T
operator|&
name|x
operator|)
specifier|const
block|{
name|SerializeTrait
operator|<
name|T
operator|>
operator|::
name|Emit
argument_list|(
name|S
argument_list|,
name|x
argument_list|,
name|A1
argument_list|,
name|A2
argument_list|)
block|;     }
block|}
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|Emitter0
operator|<
name|T
operator|>
name|MakeEmitter
argument_list|()
block|{
return|return
name|Emitter0
operator|<
name|T
operator|>
operator|(
operator|*
name|this
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Arg1
operator|>
name|Emitter1
operator|<
name|T
operator|,
name|Arg1
operator|>
name|MakeEmitter
argument_list|(
argument|Arg1 a1
argument_list|)
block|{
return|return
name|Emitter1
operator|<
name|T
operator|,
name|Arg1
operator|>
operator|(
operator|*
name|this
operator|,
name|a1
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Arg1
operator|,
name|typename
name|Arg2
operator|>
name|Emitter2
operator|<
name|T
operator|,
name|Arg1
operator|,
name|Arg2
operator|>
name|MakeEmitter
argument_list|(
argument|Arg1 a1
argument_list|,
argument|Arg2 a2
argument_list|)
block|{
return|return
name|Emitter2
operator|<
name|T
operator|,
name|Arg1
operator|,
name|Arg2
operator|>
operator|(
operator|*
name|this
operator|,
name|a1
operator|,
name|a2
operator|)
return|;
block|}
end_expr_stmt

begin_comment
comment|//==------------------------------------------------==//
end_comment

begin_comment
comment|// Misc. query and block/record manipulation methods.
end_comment

begin_comment
comment|//==------------------------------------------------==//
end_comment

begin_decl_stmt
name|bool
name|isRegistered
argument_list|(
specifier|const
name|void
operator|*
name|p
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_function
name|void
name|FlushRecord
parameter_list|()
block|{
if|if
condition|(
name|inRecord
argument_list|()
condition|)
name|EmitRecord
argument_list|()
expr_stmt|;
block|}
end_function

begin_function_decl
name|void
name|EnterBlock
parameter_list|(
name|unsigned
name|BlockID
init|=
literal|8
parameter_list|,
name|unsigned
name|CodeLen
init|=
literal|3
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ExitBlock
parameter_list|()
function_decl|;
end_function_decl

begin_label
name|private
label|:
end_label

begin_function_decl
name|void
name|EmitRecord
parameter_list|()
function_decl|;
end_function_decl

begin_function
specifier|inline
name|bool
name|inRecord
parameter_list|()
block|{
return|return
name|Record
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
end_function

begin_function_decl
name|SerializedPtrID
name|getPtrId
parameter_list|(
specifier|const
name|void
modifier|*
name|ptr
parameter_list|)
function_decl|;
end_function_decl

begin_comment
unit|};  }
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

