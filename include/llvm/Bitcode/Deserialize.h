begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//=- Deserialize.h - Generic Object Deserialization from Bitcode --*- C++ -*-=//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines the interface for generic object deserialization from
end_comment

begin_comment
comment|// LLVM bitcode.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_BITCODE_SERIALIZE_INPUT
end_ifndef

begin_define
define|#
directive|define
name|LLVM_BITCODE_SERIALIZE_INPUT
end_define

begin_include
include|#
directive|include
file|"llvm/Bitcode/BitstreamReader.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Bitcode/Serialization.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Allocator.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/DataTypes.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|Deserializer
block|{
comment|//===----------------------------------------------------------===//
comment|// Internal type definitions.
comment|//===----------------------------------------------------------===//
struct|struct
name|BPNode
block|{
name|BPNode
modifier|*
name|Next
decl_stmt|;
name|uintptr_t
modifier|&
name|PtrRef
decl_stmt|;
name|BPNode
argument_list|(
name|BPNode
operator|*
name|n
argument_list|,
name|uintptr_t
operator|&
name|pref
argument_list|)
operator|:
name|Next
argument_list|(
name|n
argument_list|)
operator|,
name|PtrRef
argument_list|(
argument|pref
argument_list|)
block|{
name|PtrRef
operator|=
literal|0
block|;       }
block|}
struct|;
struct|struct
name|BPEntry
block|{
union|union
block|{
name|BPNode
modifier|*
name|Head
decl_stmt|;
name|void
modifier|*
name|Ptr
decl_stmt|;
block|}
union|;
name|BPEntry
argument_list|()
operator|:
name|Head
argument_list|(
argument|NULL
argument_list|)
block|{}
specifier|static
specifier|inline
name|bool
name|isPod
argument_list|()
block|{
return|return
name|true
return|;
block|}
name|void
name|SetPtr
parameter_list|(
name|BPNode
modifier|*
modifier|&
name|FreeList
parameter_list|,
name|void
modifier|*
name|P
parameter_list|)
function_decl|;
block|}
struct|;
name|class
name|BPKey
block|{
name|unsigned
name|Raw
decl_stmt|;
name|public
label|:
name|BPKey
argument_list|(
argument|SerializedPtrID PtrId
argument_list|)
block|:
name|Raw
argument_list|(
argument|PtrId<<
literal|1
argument_list|)
block|{
name|assert
argument_list|(
name|PtrId
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
name|BPKey
argument_list|(
argument|unsigned code
argument_list|,
argument|unsigned
argument_list|)
block|:
name|Raw
argument_list|(
argument|code
argument_list|)
block|{}
name|void
name|MarkFinal
parameter_list|()
block|{
name|Raw
operator||=
literal|0x1
expr_stmt|;
block|}
name|bool
name|hasFinalPtr
argument_list|()
specifier|const
block|{
return|return
name|Raw
operator|&
literal|0x1
operator|?
name|true
operator|:
name|false
return|;
block|}
name|SerializedPtrID
name|getID
argument_list|()
specifier|const
block|{
return|return
name|Raw
operator|>>
literal|1
return|;
block|}
specifier|static
specifier|inline
name|BPKey
name|getEmptyKey
parameter_list|()
block|{
return|return
name|BPKey
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|BPKey
name|getTombstoneKey
parameter_list|()
block|{
return|return
name|BPKey
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|unsigned
name|getHashValue
parameter_list|(
specifier|const
name|BPKey
modifier|&
name|K
parameter_list|)
block|{
return|return
name|K
operator|.
name|Raw
operator|&
operator|~
literal|0x1
return|;
block|}
specifier|static
name|bool
name|isEqual
parameter_list|(
specifier|const
name|BPKey
modifier|&
name|K1
parameter_list|,
specifier|const
name|BPKey
modifier|&
name|K2
parameter_list|)
block|{
return|return
operator|(
name|K1
operator|.
name|Raw
operator|^
name|K2
operator|.
name|Raw
operator|)
operator|&
operator|~
literal|0x1
condition|?
name|false
else|:
name|true
return|;
block|}
specifier|static
name|bool
name|isPod
parameter_list|()
block|{
return|return
name|true
return|;
block|}
block|}
empty_stmt|;
typedef|typedef
name|llvm
operator|::
name|DenseMap
operator|<
name|BPKey
operator|,
name|BPEntry
operator|,
name|BPKey
operator|,
name|BPEntry
operator|>
name|MapTy
expr_stmt|;
comment|//===----------------------------------------------------------===//
comment|// Publicly visible types.
comment|//===----------------------------------------------------------===//
name|public
label|:
struct|struct
name|Location
block|{
name|uint64_t
name|BitNo
decl_stmt|;
name|unsigned
name|BlockID
decl_stmt|;
name|unsigned
name|NumWords
decl_stmt|;
name|Location
argument_list|(
argument|uint64_t bit
argument_list|,
argument|unsigned bid
argument_list|,
argument|unsigned words
argument_list|)
block|:
name|BitNo
argument_list|(
name|bit
argument_list|)
operator|,
name|BlockID
argument_list|(
name|bid
argument_list|)
operator|,
name|NumWords
argument_list|(
argument|words
argument_list|)
block|{}
name|Location
argument_list|()
operator|:
name|BitNo
argument_list|(
literal|0
argument_list|)
operator|,
name|BlockID
argument_list|(
literal|0
argument_list|)
operator|,
name|NumWords
argument_list|(
literal|0
argument_list|)
block|{}
name|Location
operator|&
name|operator
operator|=
operator|(
name|Location
operator|&
name|RHS
operator|)
block|{
name|BitNo
operator|=
name|RHS
operator|.
name|BitNo
block|;
name|BlockID
operator|=
name|RHS
operator|.
name|BlockID
block|;
name|NumWords
operator|=
name|RHS
operator|.
name|NumWords
block|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|Location
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|BitNo
operator|==
name|RHS
operator|.
name|BitNo
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|Location
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|BitNo
operator|!=
name|RHS
operator|.
name|BitNo
return|;
block|}
name|bool
name|contains
argument_list|(
specifier|const
name|Location
operator|&
name|RHS
argument_list|)
decl|const
block|{
if|if
condition|(
name|RHS
operator|.
name|BitNo
operator|<
name|BitNo
condition|)
return|return
name|false
return|;
if|if
condition|(
operator|(
name|RHS
operator|.
name|BitNo
operator|-
name|BitNo
operator|)
operator|>>
literal|5
operator|<
name|NumWords
condition|)
return|return
name|true
return|;
return|return
name|false
return|;
block|}
block|}
struct|;
comment|//===----------------------------------------------------------===//
comment|// Internal data members.
comment|//===----------------------------------------------------------===//
name|private
label|:
name|BitstreamCursor
name|Stream
decl_stmt|;
name|SmallVector
operator|<
name|uint64_t
operator|,
literal|20
operator|>
name|Record
expr_stmt|;
name|unsigned
name|RecIdx
decl_stmt|;
name|BumpPtrAllocator
name|Allocator
decl_stmt|;
name|BPNode
modifier|*
name|FreeList
decl_stmt|;
name|MapTy
name|BPatchMap
decl_stmt|;
name|llvm
operator|::
name|SmallVector
operator|<
name|Location
operator|,
literal|8
operator|>
name|BlockStack
expr_stmt|;
name|unsigned
name|AbbrevNo
decl_stmt|;
name|unsigned
name|RecordCode
decl_stmt|;
name|uint64_t
name|StreamStart
decl_stmt|;
comment|//===----------------------------------------------------------===//
comment|// Public Interface.
comment|//===----------------------------------------------------------===//
name|public
label|:
name|Deserializer
argument_list|(
name|BitstreamReader
operator|&
name|stream
argument_list|)
expr_stmt|;
operator|~
name|Deserializer
argument_list|()
expr_stmt|;
name|uint64_t
name|ReadInt
parameter_list|()
function_decl|;
name|int64_t
name|ReadSInt
parameter_list|()
function_decl|;
name|SerializedPtrID
name|ReadPtrID
parameter_list|()
block|{
return|return
operator|(
name|SerializedPtrID
operator|)
name|ReadInt
argument_list|()
return|;
block|}
name|bool
name|ReadBool
parameter_list|()
block|{
return|return
name|ReadInt
argument_list|()
condition|?
name|true
else|:
name|false
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
operator|&
name|Read
argument_list|(
argument|T& X
argument_list|)
block|{
name|SerializeTrait
operator|<
name|T
operator|>
operator|::
name|Read
argument_list|(
operator|*
name|this
argument_list|,
name|X
argument_list|)
block|;
return|return
name|X
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
operator|*
name|Create
argument_list|()
block|{
return|return
name|SerializeTrait
operator|<
name|T
operator|>
operator|::
name|Create
argument_list|(
operator|*
name|this
argument_list|)
return|;
block|}
name|char
modifier|*
name|ReadCStr
parameter_list|(
name|char
modifier|*
name|cstr
init|=
name|NULL
parameter_list|,
name|unsigned
name|MaxLen
init|=
literal|0
parameter_list|,
name|bool
name|isNullTerm
init|=
name|true
parameter_list|)
function_decl|;
name|void
name|ReadCStr
argument_list|(
name|std
operator|::
name|vector
operator|<
name|char
operator|>
operator|&
name|buff
argument_list|,
name|bool
name|isNullTerm
operator|=
name|false
argument_list|,
name|unsigned
name|Idx
operator|=
literal|0
argument_list|)
decl_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
operator|*
name|ReadOwnedPtr
argument_list|(
argument|bool AutoRegister = true
argument_list|)
block|{
name|SerializedPtrID
name|PtrID
operator|=
name|ReadPtrID
argument_list|()
block|;
if|if
condition|(
operator|!
name|PtrID
condition|)
return|return
name|NULL
return|;
name|T
operator|*
name|x
operator|=
name|SerializeTrait
operator|<
name|T
operator|>
operator|::
name|Create
argument_list|(
operator|*
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|AutoRegister
condition|)
name|RegisterPtr
argument_list|(
name|PtrID
argument_list|,
name|x
argument_list|)
expr_stmt|;
return|return
name|x
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Arg1
operator|>
specifier|inline
name|T
operator|*
name|ReadOwnedPtr
argument_list|(
argument|Arg1& arg1
argument_list|,
argument|bool AutoRegister = true
argument_list|)
block|{
name|SerializedPtrID
name|PtrID
operator|=
name|ReadPtrID
argument_list|()
block|;
if|if
condition|(
operator|!
name|PtrID
condition|)
return|return
name|NULL
return|;
name|T
operator|*
name|x
operator|=
name|SerializeTrait
operator|<
name|T
operator|>
operator|::
name|Create
argument_list|(
operator|*
name|this
argument_list|,
name|arg1
argument_list|)
expr_stmt|;
if|if
condition|(
name|AutoRegister
condition|)
name|RegisterPtr
argument_list|(
name|PtrID
argument_list|,
name|x
argument_list|)
expr_stmt|;
return|return
name|x
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|void
name|ReadOwnedPtr
argument_list|(
argument|T*& Ptr
argument_list|,
argument|bool AutoRegister = true
argument_list|)
block|{
name|Ptr
operator|=
name|ReadOwnedPtr
operator|<
name|T
operator|>
operator|(
name|AutoRegister
operator|)
block|;   }
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|>
name|void
name|BatchReadOwnedPtrs
argument_list|(
argument|T1*& P1
argument_list|,
argument|T2*& P2
argument_list|,
argument|bool A1=true
argument_list|,
argument|bool A2=true
argument_list|)
block|{
name|SerializedPtrID
name|ID1
operator|=
name|ReadPtrID
argument_list|()
block|;
name|SerializedPtrID
name|ID2
operator|=
name|ReadPtrID
argument_list|()
block|;
name|P1
operator|=
operator|(
name|ID1
operator|)
condition|?
name|SerializeTrait
operator|<
name|T1
operator|>
operator|::
name|Create
argument_list|(
operator|*
name|this
argument_list|)
else|:
name|NULL
block|;
if|if
condition|(
name|ID1
operator|&&
name|A1
condition|)
name|RegisterPtr
argument_list|(
name|ID1
argument_list|,
name|P1
argument_list|)
expr_stmt|;
name|P2
operator|=
operator|(
name|ID2
operator|)
condition|?
name|SerializeTrait
operator|<
name|T2
operator|>
operator|::
name|Create
argument_list|(
operator|*
name|this
argument_list|)
else|:
name|NULL
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|ID2
operator|&&
name|A2
condition|)
name|RegisterPtr
argument_list|(
name|ID2
argument_list|,
name|P2
argument_list|)
expr_stmt|;
end_if

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|Arg1
operator|>
name|void
name|BatchReadOwnedPtrs
argument_list|(
argument|T1*& P1
argument_list|,
argument|T2*& P2
argument_list|,
argument|Arg1& arg1
argument_list|,
argument|bool A1=true
argument_list|,
argument|bool A2=true
argument_list|)
block|{
name|SerializedPtrID
name|ID1
operator|=
name|ReadPtrID
argument_list|()
block|;
name|SerializedPtrID
name|ID2
operator|=
name|ReadPtrID
argument_list|()
block|;
name|P1
operator|=
operator|(
name|ID1
operator|)
condition|?
name|SerializeTrait
operator|<
name|T1
operator|>
operator|::
name|Create
argument_list|(
operator|*
name|this
argument_list|,
name|arg1
argument_list|)
else|:
name|NULL
block|;
if|if
condition|(
name|ID1
operator|&&
name|A1
condition|)
name|RegisterPtr
argument_list|(
name|ID1
argument_list|,
name|P1
argument_list|)
expr_stmt|;
name|P2
operator|=
operator|(
name|ID2
operator|)
condition|?
name|SerializeTrait
operator|<
name|T2
operator|>
operator|::
name|Create
argument_list|(
operator|*
name|this
argument_list|,
name|arg1
argument_list|)
else|:
name|NULL
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|ID2
operator|&&
name|A2
condition|)
name|RegisterPtr
argument_list|(
name|ID2
argument_list|,
name|P2
argument_list|)
expr_stmt|;
end_if

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|>
name|void
name|BatchReadOwnedPtrs
argument_list|(
argument|T1*& P1
argument_list|,
argument|T2*& P2
argument_list|,
argument|T3*& P3
argument_list|,
argument|bool A1=true
argument_list|,
argument|bool A2=true
argument_list|,
argument|bool A3=true
argument_list|)
block|{
name|SerializedPtrID
name|ID1
operator|=
name|ReadPtrID
argument_list|()
block|;
name|SerializedPtrID
name|ID2
operator|=
name|ReadPtrID
argument_list|()
block|;
name|SerializedPtrID
name|ID3
operator|=
name|ReadPtrID
argument_list|()
block|;
name|P1
operator|=
operator|(
name|ID1
operator|)
condition|?
name|SerializeTrait
operator|<
name|T1
operator|>
operator|::
name|Create
argument_list|(
operator|*
name|this
argument_list|)
else|:
name|NULL
block|;
if|if
condition|(
name|ID1
operator|&&
name|A1
condition|)
name|RegisterPtr
argument_list|(
name|ID1
argument_list|,
name|P1
argument_list|)
expr_stmt|;
name|P2
operator|=
operator|(
name|ID2
operator|)
condition|?
name|SerializeTrait
operator|<
name|T2
operator|>
operator|::
name|Create
argument_list|(
operator|*
name|this
argument_list|)
else|:
name|NULL
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|ID2
operator|&&
name|A2
condition|)
name|RegisterPtr
argument_list|(
name|ID2
argument_list|,
name|P2
argument_list|)
expr_stmt|;
end_if

begin_expr_stmt
name|P3
operator|=
operator|(
name|ID3
operator|)
condition|?
name|SerializeTrait
operator|<
name|T3
operator|>
operator|::
name|Create
argument_list|(
operator|*
name|this
argument_list|)
else|:
name|NULL
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|ID3
operator|&&
name|A3
condition|)
name|RegisterPtr
argument_list|(
name|ID3
argument_list|,
name|P3
argument_list|)
expr_stmt|;
end_if

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|Arg1
operator|>
name|void
name|BatchReadOwnedPtrs
argument_list|(
argument|T1*& P1
argument_list|,
argument|T2*& P2
argument_list|,
argument|T3*& P3
argument_list|,
argument|Arg1& arg1
argument_list|,
argument|bool A1=true
argument_list|,
argument|bool A2=true
argument_list|,
argument|bool A3=true
argument_list|)
block|{
name|SerializedPtrID
name|ID1
operator|=
name|ReadPtrID
argument_list|()
block|;
name|SerializedPtrID
name|ID2
operator|=
name|ReadPtrID
argument_list|()
block|;
name|SerializedPtrID
name|ID3
operator|=
name|ReadPtrID
argument_list|()
block|;
name|P1
operator|=
operator|(
name|ID1
operator|)
condition|?
name|SerializeTrait
operator|<
name|T1
operator|>
operator|::
name|Create
argument_list|(
operator|*
name|this
argument_list|,
name|arg1
argument_list|)
else|:
name|NULL
block|;
if|if
condition|(
name|ID1
operator|&&
name|A1
condition|)
name|RegisterPtr
argument_list|(
name|ID1
argument_list|,
name|P1
argument_list|)
expr_stmt|;
name|P2
operator|=
operator|(
name|ID2
operator|)
condition|?
name|SerializeTrait
operator|<
name|T2
operator|>
operator|::
name|Create
argument_list|(
operator|*
name|this
argument_list|,
name|arg1
argument_list|)
else|:
name|NULL
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|ID2
operator|&&
name|A2
condition|)
name|RegisterPtr
argument_list|(
name|ID2
argument_list|,
name|P2
argument_list|)
expr_stmt|;
end_if

begin_expr_stmt
name|P3
operator|=
operator|(
name|ID3
operator|)
condition|?
name|SerializeTrait
operator|<
name|T3
operator|>
operator|::
name|Create
argument_list|(
operator|*
name|this
argument_list|,
name|arg1
argument_list|)
else|:
name|NULL
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|ID3
operator|&&
name|A3
condition|)
name|RegisterPtr
argument_list|(
name|ID3
argument_list|,
name|P3
argument_list|)
expr_stmt|;
end_if

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|T
operator|>
name|void
name|BatchReadOwnedPtrs
argument_list|(
argument|unsigned NumPtrs
argument_list|,
argument|T** Ptrs
argument_list|,
argument|bool AutoRegister=true
argument_list|)
block|{
name|llvm
operator|::
name|SmallVector
operator|<
name|SerializedPtrID
block|,
literal|10
operator|>
name|BatchIDVec
block|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumPtrs
condition|;
operator|++
name|i
control|)
name|BatchIDVec
operator|.
name|push_back
argument_list|(
name|ReadPtrID
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumPtrs
condition|;
operator|++
name|i
control|)
block|{
name|SerializedPtrID
modifier|&
name|PtrID
init|=
name|BatchIDVec
index|[
name|i
index|]
decl_stmt|;
name|T
modifier|*
name|p
init|=
name|PtrID
condition|?
name|SerializeTrait
operator|<
name|T
operator|>
operator|::
name|Create
argument_list|(
operator|*
name|this
argument_list|)
else|:
name|NULL
decl_stmt|;
if|if
condition|(
name|PtrID
operator|&&
name|AutoRegister
condition|)
name|RegisterPtr
argument_list|(
name|PtrID
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|Ptrs
index|[
name|i
index|]
operator|=
name|p
expr_stmt|;
block|}
end_for

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|T
operator|,
name|typename
name|Arg1
operator|>
name|void
name|BatchReadOwnedPtrs
argument_list|(
argument|unsigned NumPtrs
argument_list|,
argument|T** Ptrs
argument_list|,
argument|Arg1& arg1
argument_list|,
argument|bool AutoRegister=true
argument_list|)
block|{
name|llvm
operator|::
name|SmallVector
operator|<
name|SerializedPtrID
block|,
literal|10
operator|>
name|BatchIDVec
block|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumPtrs
condition|;
operator|++
name|i
control|)
name|BatchIDVec
operator|.
name|push_back
argument_list|(
name|ReadPtrID
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumPtrs
condition|;
operator|++
name|i
control|)
block|{
name|SerializedPtrID
modifier|&
name|PtrID
init|=
name|BatchIDVec
index|[
name|i
index|]
decl_stmt|;
name|T
modifier|*
name|p
init|=
name|PtrID
condition|?
name|SerializeTrait
operator|<
name|T
operator|>
operator|::
name|Create
argument_list|(
operator|*
name|this
argument_list|,
name|arg1
argument_list|)
else|:
name|NULL
decl_stmt|;
if|if
condition|(
name|PtrID
operator|&&
name|AutoRegister
condition|)
name|RegisterPtr
argument_list|(
name|PtrID
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|Ptrs
index|[
name|i
index|]
operator|=
name|p
expr_stmt|;
block|}
end_for

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|>
name|void
name|BatchReadOwnedPtrs
argument_list|(
argument|unsigned NumT1Ptrs
argument_list|,
argument|T1** Ptrs
argument_list|,
argument|T2*& P2
argument_list|,
argument|bool A1=true
argument_list|,
argument|bool A2=true
argument_list|)
block|{
name|llvm
operator|::
name|SmallVector
operator|<
name|SerializedPtrID
block|,
literal|10
operator|>
name|BatchIDVec
block|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumT1Ptrs
condition|;
operator|++
name|i
control|)
name|BatchIDVec
operator|.
name|push_back
argument_list|(
name|ReadPtrID
argument_list|()
argument_list|)
expr_stmt|;
name|SerializedPtrID
name|ID2
operator|=
name|ReadPtrID
argument_list|()
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumT1Ptrs
condition|;
operator|++
name|i
control|)
block|{
name|SerializedPtrID
modifier|&
name|PtrID
init|=
name|BatchIDVec
index|[
name|i
index|]
decl_stmt|;
name|T1
modifier|*
name|p
init|=
name|PtrID
condition|?
name|SerializeTrait
operator|<
name|T1
operator|>
operator|::
name|Create
argument_list|(
operator|*
name|this
argument_list|)
else|:
name|NULL
decl_stmt|;
if|if
condition|(
name|PtrID
operator|&&
name|A1
condition|)
name|RegisterPtr
argument_list|(
name|PtrID
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|Ptrs
index|[
name|i
index|]
operator|=
name|p
expr_stmt|;
block|}
end_for

begin_expr_stmt
name|P2
operator|=
operator|(
name|ID2
operator|)
condition|?
name|SerializeTrait
operator|<
name|T2
operator|>
operator|::
name|Create
argument_list|(
operator|*
name|this
argument_list|)
else|:
name|NULL
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|ID2
operator|&&
name|A2
condition|)
name|RegisterPtr
argument_list|(
name|ID2
argument_list|,
name|P2
argument_list|)
expr_stmt|;
end_if

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|Arg1
operator|>
name|void
name|BatchReadOwnedPtrs
argument_list|(
argument|unsigned NumT1Ptrs
argument_list|,
argument|T1** Ptrs
argument_list|,
argument|T2*& P2
argument_list|,
argument|Arg1& arg1
argument_list|,
argument|bool A1=true
argument_list|,
argument|bool A2=true
argument_list|)
block|{
name|llvm
operator|::
name|SmallVector
operator|<
name|SerializedPtrID
block|,
literal|10
operator|>
name|BatchIDVec
block|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumT1Ptrs
condition|;
operator|++
name|i
control|)
name|BatchIDVec
operator|.
name|push_back
argument_list|(
name|ReadPtrID
argument_list|()
argument_list|)
expr_stmt|;
name|SerializedPtrID
name|ID2
operator|=
name|ReadPtrID
argument_list|()
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumT1Ptrs
condition|;
operator|++
name|i
control|)
block|{
name|SerializedPtrID
modifier|&
name|PtrID
init|=
name|BatchIDVec
index|[
name|i
index|]
decl_stmt|;
name|T1
modifier|*
name|p
init|=
name|PtrID
condition|?
name|SerializeTrait
operator|<
name|T1
operator|>
operator|::
name|Create
argument_list|(
operator|*
name|this
argument_list|,
name|arg1
argument_list|)
else|:
name|NULL
decl_stmt|;
if|if
condition|(
name|PtrID
operator|&&
name|A1
condition|)
name|RegisterPtr
argument_list|(
name|PtrID
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|Ptrs
index|[
name|i
index|]
operator|=
name|p
expr_stmt|;
block|}
end_for

begin_expr_stmt
name|P2
operator|=
operator|(
name|ID2
operator|)
condition|?
name|SerializeTrait
operator|<
name|T2
operator|>
operator|::
name|Create
argument_list|(
operator|*
name|this
argument_list|,
name|arg1
argument_list|)
else|:
name|NULL
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|ID2
operator|&&
name|A2
condition|)
name|RegisterPtr
argument_list|(
name|ID2
argument_list|,
name|P2
argument_list|)
expr_stmt|;
end_if

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|>
name|void
name|BatchReadOwnedPtrs
argument_list|(
argument|unsigned NumT1Ptrs
argument_list|,
argument|T1** Ptrs
argument_list|,
argument|T2*& P2
argument_list|,
argument|T3*& P3
argument_list|,
argument|bool A1=true
argument_list|,
argument|bool A2=true
argument_list|,
argument|bool A3=true
argument_list|)
block|{
name|llvm
operator|::
name|SmallVector
operator|<
name|SerializedPtrID
block|,
literal|10
operator|>
name|BatchIDVec
block|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumT1Ptrs
condition|;
operator|++
name|i
control|)
name|BatchIDVec
operator|.
name|push_back
argument_list|(
name|ReadPtrID
argument_list|()
argument_list|)
expr_stmt|;
name|SerializedPtrID
name|ID2
operator|=
name|ReadPtrID
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|SerializedPtrID
name|ID3
init|=
name|ReadPtrID
argument_list|()
decl_stmt|;
end_decl_stmt

begin_for
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumT1Ptrs
condition|;
operator|++
name|i
control|)
block|{
name|SerializedPtrID
modifier|&
name|PtrID
init|=
name|BatchIDVec
index|[
name|i
index|]
decl_stmt|;
name|T1
modifier|*
name|p
init|=
name|PtrID
condition|?
name|SerializeTrait
operator|<
name|T1
operator|>
operator|::
name|Create
argument_list|(
operator|*
name|this
argument_list|)
else|:
name|NULL
decl_stmt|;
if|if
condition|(
name|PtrID
operator|&&
name|A1
condition|)
name|RegisterPtr
argument_list|(
name|PtrID
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|Ptrs
index|[
name|i
index|]
operator|=
name|p
expr_stmt|;
block|}
end_for

begin_expr_stmt
name|P2
operator|=
operator|(
name|ID2
operator|)
condition|?
name|SerializeTrait
operator|<
name|T2
operator|>
operator|::
name|Create
argument_list|(
operator|*
name|this
argument_list|)
else|:
name|NULL
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|ID2
operator|&&
name|A2
condition|)
name|RegisterPtr
argument_list|(
name|ID2
argument_list|,
name|P2
argument_list|)
expr_stmt|;
end_if

begin_expr_stmt
name|P3
operator|=
operator|(
name|ID3
operator|)
condition|?
name|SerializeTrait
operator|<
name|T3
operator|>
operator|::
name|Create
argument_list|(
operator|*
name|this
argument_list|)
else|:
name|NULL
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|ID3
operator|&&
name|A3
condition|)
name|RegisterPtr
argument_list|(
name|ID3
argument_list|,
name|P3
argument_list|)
expr_stmt|;
end_if

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|Arg1
operator|>
name|void
name|BatchReadOwnedPtrs
argument_list|(
argument|unsigned NumT1Ptrs
argument_list|,
argument|T1** Ptrs
argument_list|,
argument|T2*& P2
argument_list|,
argument|T3*& P3
argument_list|,
argument|Arg1& arg1
argument_list|,
argument|bool A1=true
argument_list|,
argument|bool A2=true
argument_list|,
argument|bool A3=true
argument_list|)
block|{
name|llvm
operator|::
name|SmallVector
operator|<
name|SerializedPtrID
block|,
literal|10
operator|>
name|BatchIDVec
block|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumT1Ptrs
condition|;
operator|++
name|i
control|)
name|BatchIDVec
operator|.
name|push_back
argument_list|(
name|ReadPtrID
argument_list|()
argument_list|)
expr_stmt|;
name|SerializedPtrID
name|ID2
operator|=
name|ReadPtrID
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|SerializedPtrID
name|ID3
init|=
name|ReadPtrID
argument_list|()
decl_stmt|;
end_decl_stmt

begin_for
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumT1Ptrs
condition|;
operator|++
name|i
control|)
block|{
name|SerializedPtrID
modifier|&
name|PtrID
init|=
name|BatchIDVec
index|[
name|i
index|]
decl_stmt|;
name|T1
modifier|*
name|p
init|=
name|PtrID
condition|?
name|SerializeTrait
operator|<
name|T1
operator|>
operator|::
name|Create
argument_list|(
operator|*
name|this
argument_list|,
name|arg1
argument_list|)
else|:
name|NULL
decl_stmt|;
if|if
condition|(
name|PtrID
operator|&&
name|A1
condition|)
name|RegisterPtr
argument_list|(
name|PtrID
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|Ptrs
index|[
name|i
index|]
operator|=
name|p
expr_stmt|;
block|}
end_for

begin_expr_stmt
name|P2
operator|=
operator|(
name|ID2
operator|)
condition|?
name|SerializeTrait
operator|<
name|T2
operator|>
operator|::
name|Create
argument_list|(
operator|*
name|this
argument_list|,
name|arg1
argument_list|)
else|:
name|NULL
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|ID2
operator|&&
name|A2
condition|)
name|RegisterPtr
argument_list|(
name|ID2
argument_list|,
name|P2
argument_list|)
expr_stmt|;
end_if

begin_expr_stmt
name|P3
operator|=
operator|(
name|ID3
operator|)
condition|?
name|SerializeTrait
operator|<
name|T3
operator|>
operator|::
name|Create
argument_list|(
operator|*
name|this
argument_list|,
name|arg1
argument_list|)
else|:
name|NULL
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|ID3
operator|&&
name|A3
condition|)
name|RegisterPtr
argument_list|(
name|ID3
argument_list|,
name|P3
argument_list|)
expr_stmt|;
end_if

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|T
operator|>
name|void
name|ReadPtr
argument_list|(
argument|T*& PtrRef
argument_list|,
argument|bool AllowBackpatch = true
argument_list|)
block|{
name|ReadUIntPtr
argument_list|(
name|reinterpret_cast
operator|<
name|uintptr_t
operator|&
operator|>
operator|(
name|PtrRef
operator|)
argument_list|,
name|AllowBackpatch
argument_list|)
block|;   }
name|template
operator|<
name|typename
name|T
operator|>
name|void
name|ReadPtr
argument_list|(
argument|const T*& PtrRef
argument_list|,
argument|bool AllowBackpatch = true
argument_list|)
block|{
name|ReadPtr
argument_list|(
name|const_cast
operator|<
name|T
operator|*
operator|&
operator|>
operator|(
name|PtrRef
operator|)
argument_list|,
name|AllowBackpatch
argument_list|)
block|;   }
name|template
operator|<
name|typename
name|T
operator|>
name|void
name|ReadPtr
argument_list|(
argument|T*& PtrRef
argument_list|,
argument|const SerializedPtrID& PtrID
argument_list|,
argument|bool AllowBackpatch = true
argument_list|)
block|{
name|ReadUIntPtr
argument_list|(
name|reinterpret_cast
operator|<
name|uintptr_t
operator|&
operator|>
operator|(
name|PtrRef
operator|)
argument_list|,
name|PtrID
argument_list|,
name|AllowBackpatch
argument_list|)
block|;   }
name|template
operator|<
name|typename
name|T
operator|>
name|void
name|ReadPtr
argument_list|(
argument|const T*& PtrRef
argument_list|,
argument|const SerializedPtrID& PtrID
argument_list|,
argument|bool AllowBackpatch = true
argument_list|)
block|{
name|ReadPtr
argument_list|(
name|const_cast
operator|<
name|T
operator|*
operator|&
operator|>
operator|(
name|PtrRef
operator|)
argument_list|,
name|PtrID
argument_list|,
name|AllowBackpatch
argument_list|)
block|;   }
name|template
operator|<
name|typename
name|T
operator|>
name|T
operator|*
name|ReadPtr
argument_list|()
block|{
name|T
operator|*
name|x
operator|=
literal|0
block|;
name|ReadPtr
operator|<
name|T
operator|>
operator|(
name|x
operator|,
name|false
operator|)
block|;
return|return
name|x
return|;
block|}
end_expr_stmt

begin_function_decl
name|void
name|ReadUIntPtr
parameter_list|(
name|uintptr_t
modifier|&
name|PtrRef
parameter_list|,
specifier|const
name|SerializedPtrID
modifier|&
name|PtrID
parameter_list|,
name|bool
name|AllowBackpatch
init|=
name|true
parameter_list|)
function_decl|;
end_function_decl

begin_function
name|void
name|ReadUIntPtr
parameter_list|(
name|uintptr_t
modifier|&
name|PtrRef
parameter_list|,
name|bool
name|AllowBackpatch
init|=
name|true
parameter_list|)
block|{
name|ReadUIntPtr
argument_list|(
name|PtrRef
argument_list|,
name|ReadPtrID
argument_list|()
argument_list|,
name|AllowBackpatch
argument_list|)
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|T
operator|&
name|ReadRef
argument_list|()
block|{
name|T
operator|*
name|p
operator|=
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|ReadInternalRefPtr
argument_list|()
operator|)
block|;
return|return
operator|*
name|p
return|;
block|}
end_expr_stmt

begin_function_decl
name|void
name|RegisterPtr
parameter_list|(
specifier|const
name|SerializedPtrID
modifier|&
name|PtrID
parameter_list|,
specifier|const
name|void
modifier|*
name|Ptr
parameter_list|)
function_decl|;
end_function_decl

begin_function
name|void
name|RegisterPtr
parameter_list|(
specifier|const
name|void
modifier|*
name|Ptr
parameter_list|)
block|{
name|RegisterPtr
argument_list|(
name|ReadPtrID
argument_list|()
argument_list|,
name|Ptr
argument_list|)
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|void
name|RegisterRef
argument_list|(
argument|const T& x
argument_list|)
block|{
name|RegisterPtr
argument_list|(
operator|&
name|x
argument_list|)
block|;   }
name|template
operator|<
name|typename
name|T
operator|>
name|void
name|RegisterRef
argument_list|(
argument|const SerializedPtrID& PtrID
argument_list|,
argument|const T& x
argument_list|)
block|{
name|RegisterPtr
argument_list|(
name|PtrID
argument_list|,
operator|&
name|x
argument_list|)
block|;   }
name|Location
name|getCurrentBlockLocation
argument_list|()
expr_stmt|;
end_expr_stmt

begin_function_decl
name|unsigned
name|getCurrentBlockID
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|unsigned
name|getAbbrevNo
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|FinishedBlock
parameter_list|(
name|Location
name|BlockLoc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|JumpTo
parameter_list|(
specifier|const
name|Location
modifier|&
name|BlockLoc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|Rewind
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|AtEnd
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|inRecord
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|SkipBlock
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|SkipToBlock
parameter_list|(
name|unsigned
name|BlockID
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|unsigned
name|getRecordCode
parameter_list|()
function_decl|;
end_function_decl

begin_function
name|BitstreamCursor
modifier|&
name|getStream
parameter_list|()
block|{
return|return
name|Stream
return|;
block|}
end_function

begin_label
name|private
label|:
end_label

begin_function_decl
name|bool
name|AdvanceStream
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ReadRecord
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|uintptr_t
name|ReadInternalRefPtr
parameter_list|()
function_decl|;
end_function_decl

begin_decl_stmt
specifier|static
specifier|inline
name|bool
name|HasFinalPtr
argument_list|(
name|MapTy
operator|::
name|value_type
operator|&
name|V
argument_list|)
block|{
return|return
name|V
operator|.
name|first
operator|.
name|hasFinalPtr
argument_list|()
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|inline
name|uintptr_t
name|GetFinalPtr
argument_list|(
name|MapTy
operator|::
name|value_type
operator|&
name|V
argument_list|)
block|{
return|return
name|reinterpret_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|V
operator|.
name|second
operator|.
name|Ptr
operator|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|inline
name|BPNode
modifier|*
name|GetBPNode
argument_list|(
name|MapTy
operator|::
name|value_type
operator|&
name|V
argument_list|)
block|{
return|return
name|V
operator|.
name|second
operator|.
name|Head
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|inline
name|void
name|SetBPNode
argument_list|(
name|MapTy
operator|::
name|value_type
operator|&
name|V
argument_list|,
name|BPNode
operator|*
name|N
argument_list|)
block|{
name|V
operator|.
name|second
operator|.
name|Head
operator|=
name|N
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|void
name|SetPtr
argument_list|(
name|MapTy
operator|::
name|value_type
operator|&
name|V
argument_list|,
specifier|const
name|void
operator|*
name|P
argument_list|)
block|{
name|V
operator|.
name|first
operator|.
name|MarkFinal
argument_list|()
expr_stmt|;
name|V
operator|.
name|second
operator|.
name|SetPtr
argument_list|(
name|FreeList
argument_list|,
name|const_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|P
operator|)
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_comment
unit|};  }
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

