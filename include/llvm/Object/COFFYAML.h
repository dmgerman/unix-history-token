begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- COFFYAML.h - COFF YAMLIO implementation ------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares classes for handling the YAML representation of COFF.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_OBJECT_COFFYAML_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_OBJECT_COFFYAML_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/Optional.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/YAML.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/COFF.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|COFF
block|{
specifier|inline
name|Characteristics
name|operator
operator||
operator|(
name|Characteristics
name|a
operator|,
name|Characteristics
name|b
operator|)
block|{
name|uint32_t
name|Ret
operator|=
name|static_cast
operator|<
name|uint32_t
operator|>
operator|(
name|a
operator|)
operator||
name|static_cast
operator|<
name|uint32_t
operator|>
operator|(
name|b
operator|)
block|;
return|return
name|static_cast
operator|<
name|Characteristics
operator|>
operator|(
name|Ret
operator|)
return|;
block|}
specifier|inline
name|SectionCharacteristics
name|operator
operator||
operator|(
name|SectionCharacteristics
name|a
operator|,
name|SectionCharacteristics
name|b
operator|)
block|{
name|uint32_t
name|Ret
operator|=
name|static_cast
operator|<
name|uint32_t
operator|>
operator|(
name|a
operator|)
operator||
name|static_cast
operator|<
name|uint32_t
operator|>
operator|(
name|b
operator|)
block|;
return|return
name|static_cast
operator|<
name|SectionCharacteristics
operator|>
operator|(
name|Ret
operator|)
return|;
block|}
specifier|inline
name|DLLCharacteristics
name|operator
operator||
operator|(
name|DLLCharacteristics
name|a
operator|,
name|DLLCharacteristics
name|b
operator|)
block|{
name|uint16_t
name|Ret
operator|=
name|static_cast
operator|<
name|uint16_t
operator|>
operator|(
name|a
operator|)
operator||
name|static_cast
operator|<
name|uint16_t
operator|>
operator|(
name|b
operator|)
block|;
return|return
name|static_cast
operator|<
name|DLLCharacteristics
operator|>
operator|(
name|Ret
operator|)
return|;
block|}
block|}
comment|// namespace COFF
comment|// The structure of the yaml files is not an exact 1:1 match to COFF. In order
comment|// to use yaml::IO, we use these structures which are closer to the source.
name|namespace
name|COFFYAML
block|{
name|LLVM_YAML_STRONG_TYPEDEF
argument_list|(
argument|uint8_t
argument_list|,
argument|COMDATType
argument_list|)
name|LLVM_YAML_STRONG_TYPEDEF
argument_list|(
argument|uint32_t
argument_list|,
argument|WeakExternalCharacteristics
argument_list|)
name|LLVM_YAML_STRONG_TYPEDEF
argument_list|(
argument|uint8_t
argument_list|,
argument|AuxSymbolType
argument_list|)
struct|struct
name|Relocation
block|{
name|uint32_t
name|VirtualAddress
decl_stmt|;
name|uint16_t
name|Type
decl_stmt|;
name|StringRef
name|SymbolName
decl_stmt|;
block|}
struct|;
struct|struct
name|Section
block|{
name|COFF
operator|::
name|section
name|Header
expr_stmt|;
name|unsigned
name|Alignment
decl_stmt|;
name|yaml
operator|::
name|BinaryRef
name|SectionData
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|Relocation
operator|>
name|Relocations
expr_stmt|;
name|StringRef
name|Name
decl_stmt|;
name|Section
argument_list|()
expr_stmt|;
block|}
struct|;
struct|struct
name|Symbol
block|{
name|COFF
operator|::
name|symbol
name|Header
expr_stmt|;
name|COFF
operator|::
name|SymbolBaseType
name|SimpleType
expr_stmt|;
name|COFF
operator|::
name|SymbolComplexType
name|ComplexType
expr_stmt|;
name|Optional
operator|<
name|COFF
operator|::
name|AuxiliaryFunctionDefinition
operator|>
name|FunctionDefinition
expr_stmt|;
name|Optional
operator|<
name|COFF
operator|::
name|AuxiliarybfAndefSymbol
operator|>
name|bfAndefSymbol
expr_stmt|;
name|Optional
operator|<
name|COFF
operator|::
name|AuxiliaryWeakExternal
operator|>
name|WeakExternal
expr_stmt|;
name|StringRef
name|File
decl_stmt|;
name|Optional
operator|<
name|COFF
operator|::
name|AuxiliarySectionDefinition
operator|>
name|SectionDefinition
expr_stmt|;
name|Optional
operator|<
name|COFF
operator|::
name|AuxiliaryCLRToken
operator|>
name|CLRToken
expr_stmt|;
name|StringRef
name|Name
decl_stmt|;
name|Symbol
argument_list|()
expr_stmt|;
block|}
struct|;
struct|struct
name|PEHeader
block|{
name|COFF
operator|::
name|PE32Header
name|Header
expr_stmt|;
name|Optional
operator|<
name|COFF
operator|::
name|DataDirectory
operator|>
name|DataDirectories
index|[
name|COFF
operator|::
name|NUM_DATA_DIRECTORIES
index|]
expr_stmt|;
block|}
struct|;
struct|struct
name|Object
block|{
name|Optional
operator|<
name|PEHeader
operator|>
name|OptionalHeader
expr_stmt|;
name|COFF
operator|::
name|header
name|Header
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|Section
operator|>
name|Sections
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|Symbol
operator|>
name|Symbols
expr_stmt|;
name|Object
argument_list|()
expr_stmt|;
block|}
struct|;
block|}
comment|// namespace COFFYAML
block|}
end_decl_stmt

begin_comment
comment|// namespace llvm
end_comment

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|COFFYAML::Section
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|COFFYAML::Symbol
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|COFFYAML::Relocation
argument_list|)
end_macro

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|yaml
block|{
name|template
operator|<
operator|>
expr|struct
name|ScalarEnumerationTraits
operator|<
name|COFFYAML
operator|::
name|WeakExternalCharacteristics
operator|>
block|{
specifier|static
name|void
name|enumeration
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|COFFYAML
operator|::
name|WeakExternalCharacteristics
operator|&
name|Value
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|ScalarEnumerationTraits
operator|<
name|COFFYAML
operator|::
name|AuxSymbolType
operator|>
block|{
specifier|static
name|void
name|enumeration
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|COFFYAML
operator|::
name|AuxSymbolType
operator|&
name|Value
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|ScalarEnumerationTraits
operator|<
name|COFFYAML
operator|::
name|COMDATType
operator|>
block|{
specifier|static
name|void
name|enumeration
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|COFFYAML
operator|::
name|COMDATType
operator|&
name|Value
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|ScalarEnumerationTraits
operator|<
name|COFF
operator|::
name|MachineTypes
operator|>
block|{
specifier|static
name|void
name|enumeration
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|COFF
operator|::
name|MachineTypes
operator|&
name|Value
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|ScalarEnumerationTraits
operator|<
name|COFF
operator|::
name|SymbolBaseType
operator|>
block|{
specifier|static
name|void
name|enumeration
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|COFF
operator|::
name|SymbolBaseType
operator|&
name|Value
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|ScalarEnumerationTraits
operator|<
name|COFF
operator|::
name|SymbolStorageClass
operator|>
block|{
specifier|static
name|void
name|enumeration
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|COFF
operator|::
name|SymbolStorageClass
operator|&
name|Value
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|ScalarEnumerationTraits
operator|<
name|COFF
operator|::
name|SymbolComplexType
operator|>
block|{
specifier|static
name|void
name|enumeration
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|COFF
operator|::
name|SymbolComplexType
operator|&
name|Value
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|ScalarEnumerationTraits
operator|<
name|COFF
operator|::
name|RelocationTypeI386
operator|>
block|{
specifier|static
name|void
name|enumeration
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|COFF
operator|::
name|RelocationTypeI386
operator|&
name|Value
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|ScalarEnumerationTraits
operator|<
name|COFF
operator|::
name|RelocationTypeAMD64
operator|>
block|{
specifier|static
name|void
name|enumeration
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|COFF
operator|::
name|RelocationTypeAMD64
operator|&
name|Value
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|ScalarEnumerationTraits
operator|<
name|COFF
operator|::
name|WindowsSubsystem
operator|>
block|{
specifier|static
name|void
name|enumeration
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|COFF
operator|::
name|WindowsSubsystem
operator|&
name|Value
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|ScalarBitSetTraits
operator|<
name|COFF
operator|::
name|Characteristics
operator|>
block|{
specifier|static
name|void
name|bitset
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|COFF
operator|::
name|Characteristics
operator|&
name|Value
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|ScalarBitSetTraits
operator|<
name|COFF
operator|::
name|SectionCharacteristics
operator|>
block|{
specifier|static
name|void
name|bitset
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|COFF
operator|::
name|SectionCharacteristics
operator|&
name|Value
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|ScalarBitSetTraits
operator|<
name|COFF
operator|::
name|DLLCharacteristics
operator|>
block|{
specifier|static
name|void
name|bitset
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|COFF
operator|::
name|DLLCharacteristics
operator|&
name|Value
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|COFFYAML
operator|::
name|Relocation
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|COFFYAML
operator|::
name|Relocation
operator|&
name|Rel
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|COFFYAML
operator|::
name|PEHeader
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|COFFYAML
operator|::
name|PEHeader
operator|&
name|PH
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|COFF
operator|::
name|DataDirectory
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|COFF
operator|::
name|DataDirectory
operator|&
name|DD
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|COFF
operator|::
name|header
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|COFF
operator|::
name|header
operator|&
name|H
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|COFF
operator|::
name|AuxiliaryFunctionDefinition
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|COFF
operator|::
name|AuxiliaryFunctionDefinition
operator|&
name|AFD
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|COFF
operator|::
name|AuxiliarybfAndefSymbol
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|COFF
operator|::
name|AuxiliarybfAndefSymbol
operator|&
name|AAS
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|COFF
operator|::
name|AuxiliaryWeakExternal
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|COFF
operator|::
name|AuxiliaryWeakExternal
operator|&
name|AWE
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|COFF
operator|::
name|AuxiliarySectionDefinition
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|COFF
operator|::
name|AuxiliarySectionDefinition
operator|&
name|ASD
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|COFF
operator|::
name|AuxiliaryCLRToken
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|COFF
operator|::
name|AuxiliaryCLRToken
operator|&
name|ACT
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|COFFYAML
operator|::
name|Symbol
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|COFFYAML
operator|::
name|Symbol
operator|&
name|S
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|COFFYAML
operator|::
name|Section
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|COFFYAML
operator|::
name|Section
operator|&
name|Sec
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|COFFYAML
operator|::
name|Object
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|COFFYAML
operator|::
name|Object
operator|&
name|Obj
argument_list|)
block|; }
expr_stmt|;
block|}
comment|// end namespace yaml
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

