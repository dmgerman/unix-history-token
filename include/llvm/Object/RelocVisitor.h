begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- RelocVisitor.h - Visitor for object file relocations -*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file provides a wrapper around all the different types of relocations
end_comment

begin_comment
comment|// in different file formats, such that a client can handle them in a unified
end_comment

begin_comment
comment|// manner by only implementing a minimal number of functions.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_OBJECT_RELOCVISITOR_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_OBJECT_RELOCVISITOR_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/COFF.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/ELFObjectFile.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/ObjectFile.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Debug.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ELF.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/raw_ostream.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|object
block|{
struct|struct
name|RelocToApply
block|{
comment|// The computed value after applying the relevant relocations.
name|int64_t
name|Value
decl_stmt|;
comment|// The width of the value; how many bytes to touch when applying the
comment|// relocation.
name|char
name|Width
decl_stmt|;
name|RelocToApply
argument_list|(
argument|int64_t Value
argument_list|,
argument|char Width
argument_list|)
block|:
name|Value
argument_list|(
name|Value
argument_list|)
operator|,
name|Width
argument_list|(
argument|Width
argument_list|)
block|{}
name|RelocToApply
argument_list|()
operator|:
name|Value
argument_list|(
literal|0
argument_list|)
operator|,
name|Width
argument_list|(
literal|0
argument_list|)
block|{}
block|}
struct|;
comment|/// @brief Base class for object file relocation visitors.
name|class
name|RelocVisitor
block|{
name|public
label|:
name|explicit
name|RelocVisitor
argument_list|(
specifier|const
name|ObjectFile
operator|&
name|Obj
argument_list|)
operator|:
name|ObjToVisit
argument_list|(
name|Obj
argument_list|)
operator|,
name|HasError
argument_list|(
argument|false
argument_list|)
block|{}
comment|// TODO: Should handle multiple applied relocations via either passing in the
comment|// previously computed value or just count paired relocations as a single
comment|// visit.
name|RelocToApply
name|visit
argument_list|(
argument|uint32_t RelocType
argument_list|,
argument|RelocationRef R
argument_list|,
argument|uint64_t Value =
literal|0
argument_list|)
block|{
if|if
condition|(
name|isa
operator|<
name|ELFObjectFileBase
operator|>
operator|(
name|ObjToVisit
operator|)
condition|)
return|return
name|visitELF
argument_list|(
name|RelocType
argument_list|,
name|R
argument_list|,
name|Value
argument_list|)
return|;
if|if
condition|(
name|isa
operator|<
name|COFFObjectFile
operator|>
operator|(
name|ObjToVisit
operator|)
condition|)
return|return
name|visitCOFF
argument_list|(
name|RelocType
argument_list|,
name|R
argument_list|,
name|Value
argument_list|)
return|;
name|HasError
operator|=
name|true
expr_stmt|;
return|return
name|RelocToApply
argument_list|()
return|;
block|}
name|bool
name|error
parameter_list|()
block|{
return|return
name|HasError
return|;
block|}
name|private
label|:
specifier|const
name|ObjectFile
modifier|&
name|ObjToVisit
decl_stmt|;
name|bool
name|HasError
decl_stmt|;
name|RelocToApply
name|visitELF
parameter_list|(
name|uint32_t
name|RelocType
parameter_list|,
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
if|if
condition|(
name|ObjToVisit
operator|.
name|getBytesInAddress
argument_list|()
operator|==
literal|8
condition|)
block|{
comment|// 64-bit object file
switch|switch
condition|(
name|ObjToVisit
operator|.
name|getArch
argument_list|()
condition|)
block|{
case|case
name|Triple
operator|::
name|x86_64
case|:
switch|switch
condition|(
name|RelocType
condition|)
block|{
case|case
name|llvm
operator|::
name|ELF
operator|::
name|R_X86_64_NONE
case|:
return|return
name|visitELF_X86_64_NONE
argument_list|(
name|R
argument_list|)
return|;
case|case
name|llvm
operator|::
name|ELF
operator|::
name|R_X86_64_64
case|:
return|return
name|visitELF_X86_64_64
argument_list|(
name|R
argument_list|,
name|Value
argument_list|)
return|;
case|case
name|llvm
operator|::
name|ELF
operator|::
name|R_X86_64_PC32
case|:
return|return
name|visitELF_X86_64_PC32
argument_list|(
name|R
argument_list|,
name|Value
argument_list|)
return|;
case|case
name|llvm
operator|::
name|ELF
operator|::
name|R_X86_64_32
case|:
return|return
name|visitELF_X86_64_32
argument_list|(
name|R
argument_list|,
name|Value
argument_list|)
return|;
case|case
name|llvm
operator|::
name|ELF
operator|::
name|R_X86_64_32S
case|:
return|return
name|visitELF_X86_64_32S
argument_list|(
name|R
argument_list|,
name|Value
argument_list|)
return|;
default|default:
name|HasError
operator|=
name|true
expr_stmt|;
return|return
name|RelocToApply
argument_list|()
return|;
block|}
case|case
name|Triple
operator|::
name|aarch64
case|:
switch|switch
condition|(
name|RelocType
condition|)
block|{
case|case
name|llvm
operator|::
name|ELF
operator|::
name|R_AARCH64_ABS32
case|:
return|return
name|visitELF_AARCH64_ABS32
argument_list|(
name|R
argument_list|,
name|Value
argument_list|)
return|;
case|case
name|llvm
operator|::
name|ELF
operator|::
name|R_AARCH64_ABS64
case|:
return|return
name|visitELF_AARCH64_ABS64
argument_list|(
name|R
argument_list|,
name|Value
argument_list|)
return|;
default|default:
name|HasError
operator|=
name|true
expr_stmt|;
return|return
name|RelocToApply
argument_list|()
return|;
block|}
case|case
name|Triple
operator|::
name|mips64el
case|:
case|case
name|Triple
operator|::
name|mips64
case|:
switch|switch
condition|(
name|RelocType
condition|)
block|{
case|case
name|llvm
operator|::
name|ELF
operator|::
name|R_MIPS_32
case|:
return|return
name|visitELF_MIPS_32
argument_list|(
name|R
argument_list|,
name|Value
argument_list|)
return|;
case|case
name|llvm
operator|::
name|ELF
operator|::
name|R_MIPS_64
case|:
return|return
name|visitELF_MIPS_64
argument_list|(
name|R
argument_list|,
name|Value
argument_list|)
return|;
default|default:
name|HasError
operator|=
name|true
expr_stmt|;
return|return
name|RelocToApply
argument_list|()
return|;
block|}
case|case
name|Triple
operator|::
name|ppc64le
case|:
case|case
name|Triple
operator|::
name|ppc64
case|:
switch|switch
condition|(
name|RelocType
condition|)
block|{
case|case
name|llvm
operator|::
name|ELF
operator|::
name|R_PPC64_ADDR32
case|:
return|return
name|visitELF_PPC64_ADDR32
argument_list|(
name|R
argument_list|,
name|Value
argument_list|)
return|;
case|case
name|llvm
operator|::
name|ELF
operator|::
name|R_PPC64_ADDR64
case|:
return|return
name|visitELF_PPC64_ADDR64
argument_list|(
name|R
argument_list|,
name|Value
argument_list|)
return|;
default|default:
name|HasError
operator|=
name|true
expr_stmt|;
return|return
name|RelocToApply
argument_list|()
return|;
block|}
case|case
name|Triple
operator|::
name|systemz
case|:
switch|switch
condition|(
name|RelocType
condition|)
block|{
case|case
name|llvm
operator|::
name|ELF
operator|::
name|R_390_32
case|:
return|return
name|visitELF_390_32
argument_list|(
name|R
argument_list|,
name|Value
argument_list|)
return|;
case|case
name|llvm
operator|::
name|ELF
operator|::
name|R_390_64
case|:
return|return
name|visitELF_390_64
argument_list|(
name|R
argument_list|,
name|Value
argument_list|)
return|;
default|default:
name|HasError
operator|=
name|true
expr_stmt|;
return|return
name|RelocToApply
argument_list|()
return|;
block|}
case|case
name|Triple
operator|::
name|sparcv9
case|:
switch|switch
condition|(
name|RelocType
condition|)
block|{
case|case
name|llvm
operator|::
name|ELF
operator|::
name|R_SPARC_32
case|:
case|case
name|llvm
operator|::
name|ELF
operator|::
name|R_SPARC_UA32
case|:
return|return
name|visitELF_SPARCV9_32
argument_list|(
name|R
argument_list|,
name|Value
argument_list|)
return|;
case|case
name|llvm
operator|::
name|ELF
operator|::
name|R_SPARC_64
case|:
case|case
name|llvm
operator|::
name|ELF
operator|::
name|R_SPARC_UA64
case|:
return|return
name|visitELF_SPARCV9_64
argument_list|(
name|R
argument_list|,
name|Value
argument_list|)
return|;
default|default:
name|HasError
operator|=
name|true
expr_stmt|;
return|return
name|RelocToApply
argument_list|()
return|;
block|}
default|default:
name|HasError
operator|=
name|true
expr_stmt|;
return|return
name|RelocToApply
argument_list|()
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|ObjToVisit
operator|.
name|getBytesInAddress
argument_list|()
operator|==
literal|4
condition|)
block|{
comment|// 32-bit object file
switch|switch
condition|(
name|ObjToVisit
operator|.
name|getArch
argument_list|()
condition|)
block|{
case|case
name|Triple
operator|::
name|x86
case|:
switch|switch
condition|(
name|RelocType
condition|)
block|{
case|case
name|llvm
operator|::
name|ELF
operator|::
name|R_386_NONE
case|:
return|return
name|visitELF_386_NONE
argument_list|(
name|R
argument_list|)
return|;
case|case
name|llvm
operator|::
name|ELF
operator|::
name|R_386_32
case|:
return|return
name|visitELF_386_32
argument_list|(
name|R
argument_list|,
name|Value
argument_list|)
return|;
case|case
name|llvm
operator|::
name|ELF
operator|::
name|R_386_PC32
case|:
return|return
name|visitELF_386_PC32
argument_list|(
name|R
argument_list|,
name|Value
argument_list|)
return|;
default|default:
name|HasError
operator|=
name|true
expr_stmt|;
return|return
name|RelocToApply
argument_list|()
return|;
block|}
case|case
name|Triple
operator|::
name|ppc
case|:
switch|switch
condition|(
name|RelocType
condition|)
block|{
case|case
name|llvm
operator|::
name|ELF
operator|::
name|R_PPC_ADDR32
case|:
return|return
name|visitELF_PPC_ADDR32
argument_list|(
name|R
argument_list|,
name|Value
argument_list|)
return|;
default|default:
name|HasError
operator|=
name|true
expr_stmt|;
return|return
name|RelocToApply
argument_list|()
return|;
block|}
case|case
name|Triple
operator|::
name|arm
case|:
case|case
name|Triple
operator|::
name|armeb
case|:
switch|switch
condition|(
name|RelocType
condition|)
block|{
default|default:
name|HasError
operator|=
name|true
expr_stmt|;
return|return
name|RelocToApply
argument_list|()
return|;
case|case
name|llvm
operator|::
name|ELF
operator|::
name|R_ARM_ABS32
case|:
return|return
name|visitELF_ARM_ABS32
argument_list|(
name|R
argument_list|,
name|Value
argument_list|)
return|;
block|}
case|case
name|Triple
operator|::
name|mipsel
case|:
case|case
name|Triple
operator|::
name|mips
case|:
switch|switch
condition|(
name|RelocType
condition|)
block|{
case|case
name|llvm
operator|::
name|ELF
operator|::
name|R_MIPS_32
case|:
return|return
name|visitELF_MIPS_32
argument_list|(
name|R
argument_list|,
name|Value
argument_list|)
return|;
default|default:
name|HasError
operator|=
name|true
expr_stmt|;
return|return
name|RelocToApply
argument_list|()
return|;
block|}
case|case
name|Triple
operator|::
name|sparc
case|:
switch|switch
condition|(
name|RelocType
condition|)
block|{
case|case
name|llvm
operator|::
name|ELF
operator|::
name|R_SPARC_32
case|:
case|case
name|llvm
operator|::
name|ELF
operator|::
name|R_SPARC_UA32
case|:
return|return
name|visitELF_SPARC_32
argument_list|(
name|R
argument_list|,
name|Value
argument_list|)
return|;
default|default:
name|HasError
operator|=
name|true
expr_stmt|;
return|return
name|RelocToApply
argument_list|()
return|;
block|}
default|default:
name|HasError
operator|=
name|true
expr_stmt|;
return|return
name|RelocToApply
argument_list|()
return|;
block|}
block|}
else|else
block|{
name|report_fatal_error
argument_list|(
literal|"Invalid word size in object file"
argument_list|)
expr_stmt|;
block|}
block|}
name|RelocToApply
name|visitCOFF
parameter_list|(
name|uint32_t
name|RelocType
parameter_list|,
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
switch|switch
condition|(
name|ObjToVisit
operator|.
name|getArch
argument_list|()
condition|)
block|{
case|case
name|Triple
operator|::
name|x86
case|:
switch|switch
condition|(
name|RelocType
condition|)
block|{
case|case
name|COFF
operator|::
name|IMAGE_REL_I386_SECREL
case|:
return|return
name|visitCOFF_I386_SECREL
argument_list|(
name|R
argument_list|,
name|Value
argument_list|)
return|;
case|case
name|COFF
operator|::
name|IMAGE_REL_I386_DIR32
case|:
return|return
name|visitCOFF_I386_DIR32
argument_list|(
name|R
argument_list|,
name|Value
argument_list|)
return|;
block|}
break|break;
case|case
name|Triple
operator|::
name|x86_64
case|:
switch|switch
condition|(
name|RelocType
condition|)
block|{
case|case
name|COFF
operator|::
name|IMAGE_REL_AMD64_SECREL
case|:
return|return
name|visitCOFF_AMD64_SECREL
argument_list|(
name|R
argument_list|,
name|Value
argument_list|)
return|;
case|case
name|COFF
operator|::
name|IMAGE_REL_AMD64_ADDR64
case|:
return|return
name|visitCOFF_AMD64_ADDR64
argument_list|(
name|R
argument_list|,
name|Value
argument_list|)
return|;
block|}
break|break;
block|}
name|HasError
operator|=
name|true
expr_stmt|;
return|return
name|RelocToApply
argument_list|()
return|;
block|}
name|int64_t
name|getELFAddend32LE
parameter_list|(
name|RelocationRef
name|R
parameter_list|)
block|{
specifier|const
name|ELF32LEObjectFile
modifier|*
name|Obj
init|=
name|cast
operator|<
name|ELF32LEObjectFile
operator|>
operator|(
name|R
operator|.
name|getObjectFile
argument_list|()
operator|)
decl_stmt|;
name|DataRefImpl
name|DRI
init|=
name|R
operator|.
name|getRawDataRefImpl
argument_list|()
decl_stmt|;
name|int64_t
name|Addend
decl_stmt|;
name|Obj
operator|->
name|getRelocationAddend
argument_list|(
name|DRI
argument_list|,
name|Addend
argument_list|)
expr_stmt|;
return|return
name|Addend
return|;
block|}
name|int64_t
name|getELFAddend64LE
parameter_list|(
name|RelocationRef
name|R
parameter_list|)
block|{
specifier|const
name|ELF64LEObjectFile
modifier|*
name|Obj
init|=
name|cast
operator|<
name|ELF64LEObjectFile
operator|>
operator|(
name|R
operator|.
name|getObjectFile
argument_list|()
operator|)
decl_stmt|;
name|DataRefImpl
name|DRI
init|=
name|R
operator|.
name|getRawDataRefImpl
argument_list|()
decl_stmt|;
name|int64_t
name|Addend
decl_stmt|;
name|Obj
operator|->
name|getRelocationAddend
argument_list|(
name|DRI
argument_list|,
name|Addend
argument_list|)
expr_stmt|;
return|return
name|Addend
return|;
block|}
name|int64_t
name|getELFAddend32BE
parameter_list|(
name|RelocationRef
name|R
parameter_list|)
block|{
specifier|const
name|ELF32BEObjectFile
modifier|*
name|Obj
init|=
name|cast
operator|<
name|ELF32BEObjectFile
operator|>
operator|(
name|R
operator|.
name|getObjectFile
argument_list|()
operator|)
decl_stmt|;
name|DataRefImpl
name|DRI
init|=
name|R
operator|.
name|getRawDataRefImpl
argument_list|()
decl_stmt|;
name|int64_t
name|Addend
decl_stmt|;
name|Obj
operator|->
name|getRelocationAddend
argument_list|(
name|DRI
argument_list|,
name|Addend
argument_list|)
expr_stmt|;
return|return
name|Addend
return|;
block|}
name|int64_t
name|getELFAddend64BE
parameter_list|(
name|RelocationRef
name|R
parameter_list|)
block|{
specifier|const
name|ELF64BEObjectFile
modifier|*
name|Obj
init|=
name|cast
operator|<
name|ELF64BEObjectFile
operator|>
operator|(
name|R
operator|.
name|getObjectFile
argument_list|()
operator|)
decl_stmt|;
name|DataRefImpl
name|DRI
init|=
name|R
operator|.
name|getRawDataRefImpl
argument_list|()
decl_stmt|;
name|int64_t
name|Addend
decl_stmt|;
name|Obj
operator|->
name|getRelocationAddend
argument_list|(
name|DRI
argument_list|,
name|Addend
argument_list|)
expr_stmt|;
return|return
name|Addend
return|;
block|}
comment|/// Operations
comment|/// 386-ELF
name|RelocToApply
name|visitELF_386_NONE
parameter_list|(
name|RelocationRef
name|R
parameter_list|)
block|{
return|return
name|RelocToApply
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|// Ideally the Addend here will be the addend in the data for
comment|// the relocation. It's not actually the case for Rel relocations.
name|RelocToApply
name|visitELF_386_32
parameter_list|(
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
name|int64_t
name|Addend
init|=
name|getELFAddend32LE
argument_list|(
name|R
argument_list|)
decl_stmt|;
return|return
name|RelocToApply
argument_list|(
name|Value
operator|+
name|Addend
argument_list|,
literal|4
argument_list|)
return|;
block|}
name|RelocToApply
name|visitELF_386_PC32
parameter_list|(
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
name|int64_t
name|Addend
init|=
name|getELFAddend32LE
argument_list|(
name|R
argument_list|)
decl_stmt|;
name|uint64_t
name|Address
decl_stmt|;
name|R
operator|.
name|getOffset
argument_list|(
name|Address
argument_list|)
expr_stmt|;
return|return
name|RelocToApply
argument_list|(
name|Value
operator|+
name|Addend
operator|-
name|Address
argument_list|,
literal|4
argument_list|)
return|;
block|}
comment|/// X86-64 ELF
name|RelocToApply
name|visitELF_X86_64_NONE
parameter_list|(
name|RelocationRef
name|R
parameter_list|)
block|{
return|return
name|RelocToApply
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
name|RelocToApply
name|visitELF_X86_64_64
parameter_list|(
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
name|int64_t
name|Addend
init|=
name|getELFAddend64LE
argument_list|(
name|R
argument_list|)
decl_stmt|;
return|return
name|RelocToApply
argument_list|(
name|Value
operator|+
name|Addend
argument_list|,
literal|8
argument_list|)
return|;
block|}
name|RelocToApply
name|visitELF_X86_64_PC32
parameter_list|(
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
name|int64_t
name|Addend
init|=
name|getELFAddend64LE
argument_list|(
name|R
argument_list|)
decl_stmt|;
name|uint64_t
name|Address
decl_stmt|;
name|R
operator|.
name|getOffset
argument_list|(
name|Address
argument_list|)
expr_stmt|;
return|return
name|RelocToApply
argument_list|(
name|Value
operator|+
name|Addend
operator|-
name|Address
argument_list|,
literal|4
argument_list|)
return|;
block|}
name|RelocToApply
name|visitELF_X86_64_32
parameter_list|(
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
name|int64_t
name|Addend
init|=
name|getELFAddend64LE
argument_list|(
name|R
argument_list|)
decl_stmt|;
name|uint32_t
name|Res
init|=
operator|(
name|Value
operator|+
name|Addend
operator|)
operator|&
literal|0xFFFFFFFF
decl_stmt|;
return|return
name|RelocToApply
argument_list|(
name|Res
argument_list|,
literal|4
argument_list|)
return|;
block|}
name|RelocToApply
name|visitELF_X86_64_32S
parameter_list|(
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
name|int64_t
name|Addend
init|=
name|getELFAddend64LE
argument_list|(
name|R
argument_list|)
decl_stmt|;
name|int32_t
name|Res
init|=
operator|(
name|Value
operator|+
name|Addend
operator|)
operator|&
literal|0xFFFFFFFF
decl_stmt|;
return|return
name|RelocToApply
argument_list|(
name|Res
argument_list|,
literal|4
argument_list|)
return|;
block|}
comment|/// PPC64 ELF
name|RelocToApply
name|visitELF_PPC64_ADDR32
parameter_list|(
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
name|int64_t
name|Addend
decl_stmt|;
name|getELFRelocationAddend
argument_list|(
name|R
argument_list|,
name|Addend
argument_list|)
expr_stmt|;
name|uint32_t
name|Res
init|=
operator|(
name|Value
operator|+
name|Addend
operator|)
operator|&
literal|0xFFFFFFFF
decl_stmt|;
return|return
name|RelocToApply
argument_list|(
name|Res
argument_list|,
literal|4
argument_list|)
return|;
block|}
name|RelocToApply
name|visitELF_PPC64_ADDR64
parameter_list|(
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
name|int64_t
name|Addend
decl_stmt|;
name|getELFRelocationAddend
argument_list|(
name|R
argument_list|,
name|Addend
argument_list|)
expr_stmt|;
return|return
name|RelocToApply
argument_list|(
name|Value
operator|+
name|Addend
argument_list|,
literal|8
argument_list|)
return|;
block|}
comment|/// PPC32 ELF
name|RelocToApply
name|visitELF_PPC_ADDR32
parameter_list|(
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
name|int64_t
name|Addend
init|=
name|getELFAddend32BE
argument_list|(
name|R
argument_list|)
decl_stmt|;
name|uint32_t
name|Res
init|=
operator|(
name|Value
operator|+
name|Addend
operator|)
operator|&
literal|0xFFFFFFFF
decl_stmt|;
return|return
name|RelocToApply
argument_list|(
name|Res
argument_list|,
literal|4
argument_list|)
return|;
block|}
comment|/// MIPS ELF
name|RelocToApply
name|visitELF_MIPS_32
parameter_list|(
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
name|int64_t
name|Addend
decl_stmt|;
name|getELFRelocationAddend
argument_list|(
name|R
argument_list|,
name|Addend
argument_list|)
expr_stmt|;
name|uint32_t
name|Res
init|=
operator|(
name|Value
operator|+
name|Addend
operator|)
operator|&
literal|0xFFFFFFFF
decl_stmt|;
return|return
name|RelocToApply
argument_list|(
name|Res
argument_list|,
literal|4
argument_list|)
return|;
block|}
name|RelocToApply
name|visitELF_MIPS_64
parameter_list|(
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
name|int64_t
name|Addend
decl_stmt|;
name|getELFRelocationAddend
argument_list|(
name|R
argument_list|,
name|Addend
argument_list|)
expr_stmt|;
name|uint64_t
name|Res
init|=
operator|(
name|Value
operator|+
name|Addend
operator|)
decl_stmt|;
return|return
name|RelocToApply
argument_list|(
name|Res
argument_list|,
literal|8
argument_list|)
return|;
block|}
comment|// AArch64 ELF
name|RelocToApply
name|visitELF_AARCH64_ABS32
parameter_list|(
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
name|int64_t
name|Addend
decl_stmt|;
name|getELFRelocationAddend
argument_list|(
name|R
argument_list|,
name|Addend
argument_list|)
expr_stmt|;
name|int64_t
name|Res
init|=
name|Value
operator|+
name|Addend
decl_stmt|;
comment|// Overflow check allows for both signed and unsigned interpretation.
if|if
condition|(
name|Res
operator|<
name|INT32_MIN
operator|||
name|Res
operator|>
name|UINT32_MAX
condition|)
name|HasError
operator|=
name|true
expr_stmt|;
return|return
name|RelocToApply
argument_list|(
name|static_cast
operator|<
name|uint32_t
operator|>
operator|(
name|Res
operator|)
argument_list|,
literal|4
argument_list|)
return|;
block|}
name|RelocToApply
name|visitELF_AARCH64_ABS64
parameter_list|(
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
name|int64_t
name|Addend
decl_stmt|;
name|getELFRelocationAddend
argument_list|(
name|R
argument_list|,
name|Addend
argument_list|)
expr_stmt|;
return|return
name|RelocToApply
argument_list|(
name|Value
operator|+
name|Addend
argument_list|,
literal|8
argument_list|)
return|;
block|}
comment|// SystemZ ELF
name|RelocToApply
name|visitELF_390_32
parameter_list|(
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
name|int64_t
name|Addend
init|=
name|getELFAddend64BE
argument_list|(
name|R
argument_list|)
decl_stmt|;
name|int64_t
name|Res
init|=
name|Value
operator|+
name|Addend
decl_stmt|;
comment|// Overflow check allows for both signed and unsigned interpretation.
if|if
condition|(
name|Res
operator|<
name|INT32_MIN
operator|||
name|Res
operator|>
name|UINT32_MAX
condition|)
name|HasError
operator|=
name|true
expr_stmt|;
return|return
name|RelocToApply
argument_list|(
name|static_cast
operator|<
name|uint32_t
operator|>
operator|(
name|Res
operator|)
argument_list|,
literal|4
argument_list|)
return|;
block|}
name|RelocToApply
name|visitELF_390_64
parameter_list|(
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
name|int64_t
name|Addend
init|=
name|getELFAddend64BE
argument_list|(
name|R
argument_list|)
decl_stmt|;
return|return
name|RelocToApply
argument_list|(
name|Value
operator|+
name|Addend
argument_list|,
literal|8
argument_list|)
return|;
block|}
name|RelocToApply
name|visitELF_SPARC_32
parameter_list|(
name|RelocationRef
name|R
parameter_list|,
name|uint32_t
name|Value
parameter_list|)
block|{
name|int32_t
name|Addend
init|=
name|getELFAddend32BE
argument_list|(
name|R
argument_list|)
decl_stmt|;
return|return
name|RelocToApply
argument_list|(
name|Value
operator|+
name|Addend
argument_list|,
literal|4
argument_list|)
return|;
block|}
name|RelocToApply
name|visitELF_SPARCV9_32
parameter_list|(
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
name|int32_t
name|Addend
init|=
name|getELFAddend64BE
argument_list|(
name|R
argument_list|)
decl_stmt|;
return|return
name|RelocToApply
argument_list|(
name|Value
operator|+
name|Addend
argument_list|,
literal|4
argument_list|)
return|;
block|}
name|RelocToApply
name|visitELF_SPARCV9_64
parameter_list|(
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
name|int64_t
name|Addend
init|=
name|getELFAddend64BE
argument_list|(
name|R
argument_list|)
decl_stmt|;
return|return
name|RelocToApply
argument_list|(
name|Value
operator|+
name|Addend
argument_list|,
literal|8
argument_list|)
return|;
block|}
name|RelocToApply
name|visitELF_ARM_ABS32
parameter_list|(
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
name|int64_t
name|Addend
decl_stmt|;
name|getELFRelocationAddend
argument_list|(
name|R
argument_list|,
name|Addend
argument_list|)
expr_stmt|;
name|int64_t
name|Res
init|=
name|Value
operator|+
name|Addend
decl_stmt|;
comment|// Overflow check allows for both signed and unsigned interpretation.
if|if
condition|(
name|Res
operator|<
name|INT32_MIN
operator|||
name|Res
operator|>
name|UINT32_MAX
condition|)
name|HasError
operator|=
name|true
expr_stmt|;
return|return
name|RelocToApply
argument_list|(
name|static_cast
operator|<
name|uint32_t
operator|>
operator|(
name|Res
operator|)
argument_list|,
literal|4
argument_list|)
return|;
block|}
comment|/// I386 COFF
name|RelocToApply
name|visitCOFF_I386_SECREL
parameter_list|(
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
return|return
name|RelocToApply
argument_list|(
name|static_cast
operator|<
name|uint32_t
operator|>
operator|(
name|Value
operator|)
argument_list|,
comment|/*Width=*/
literal|4
argument_list|)
return|;
block|}
name|RelocToApply
name|visitCOFF_I386_DIR32
parameter_list|(
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
return|return
name|RelocToApply
argument_list|(
name|static_cast
operator|<
name|uint32_t
operator|>
operator|(
name|Value
operator|)
argument_list|,
comment|/*Width=*/
literal|4
argument_list|)
return|;
block|}
comment|/// AMD64 COFF
name|RelocToApply
name|visitCOFF_AMD64_SECREL
parameter_list|(
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
return|return
name|RelocToApply
argument_list|(
name|static_cast
operator|<
name|uint32_t
operator|>
operator|(
name|Value
operator|)
argument_list|,
comment|/*Width=*/
literal|4
argument_list|)
return|;
block|}
name|RelocToApply
name|visitCOFF_AMD64_ADDR64
parameter_list|(
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
return|return
name|RelocToApply
argument_list|(
name|Value
argument_list|,
comment|/*Width=*/
literal|8
argument_list|)
return|;
block|}
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

end_unit

