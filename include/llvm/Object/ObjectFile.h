begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- ObjectFile.h - File format independent object file -------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares a file format independent ObjectFile class.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_OBJECT_OBJECT_FILE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_OBJECT_OBJECT_FILE_H
end_define

begin_include
include|#
directive|include
file|"llvm/Object/Binary.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/DataTypes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ErrorHandling.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/MemoryBuffer.h"
end_include

begin_include
include|#
directive|include
file|<cstring>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|object
block|{
name|class
name|ObjectFile
decl_stmt|;
union|union
name|DataRefImpl
block|{
struct|struct
block|{
name|uint32_t
name|a
decl_stmt|,
name|b
decl_stmt|;
block|}
name|d
struct|;
name|uintptr_t
name|p
decl_stmt|;
block|}
union|;
specifier|static
name|bool
name|operator
operator|==
operator|(
specifier|const
name|DataRefImpl
operator|&
name|a
operator|,
specifier|const
name|DataRefImpl
operator|&
name|b
operator|)
block|{
comment|// Check bitwise identical. This is the only legal way to compare a union w/o
comment|// knowing which member is in use.
return|return
name|std
operator|::
name|memcmp
argument_list|(
operator|&
name|a
argument_list|,
operator|&
name|b
argument_list|,
sizeof|sizeof
argument_list|(
name|DataRefImpl
argument_list|)
argument_list|)
operator|==
literal|0
return|;
block|}
name|class
name|RelocationRef
block|{
name|DataRefImpl
name|RelocationPimpl
decl_stmt|;
specifier|const
name|ObjectFile
modifier|*
name|OwningObject
decl_stmt|;
name|public
label|:
name|RelocationRef
argument_list|()
operator|:
name|OwningObject
argument_list|(
argument|NULL
argument_list|)
block|{
name|std
operator|::
name|memset
argument_list|(
operator|&
name|RelocationPimpl
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|RelocationPimpl
argument_list|)
argument_list|)
block|;   }
name|RelocationRef
argument_list|(
argument|DataRefImpl RelocationP
argument_list|,
argument|const ObjectFile *Owner
argument_list|)
expr_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|RelocationRef
operator|&
name|Other
operator|)
specifier|const
expr_stmt|;
name|error_code
name|getNext
parameter_list|(
name|RelocationRef
modifier|&
name|Result
parameter_list|)
function_decl|;
block|}
empty_stmt|;
comment|/// SymbolRef - This is a value type class that represents a single symbol in
comment|/// the list of symbols in the object file.
name|class
name|SymbolRef
block|{
name|friend
name|class
name|SectionRef
decl_stmt|;
name|DataRefImpl
name|SymbolPimpl
decl_stmt|;
specifier|const
name|ObjectFile
modifier|*
name|OwningObject
decl_stmt|;
name|public
label|:
name|SymbolRef
argument_list|()
operator|:
name|OwningObject
argument_list|(
argument|NULL
argument_list|)
block|{
name|std
operator|::
name|memset
argument_list|(
operator|&
name|SymbolPimpl
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|SymbolPimpl
argument_list|)
argument_list|)
block|;   }
name|SymbolRef
argument_list|(
argument|DataRefImpl SymbolP
argument_list|,
argument|const ObjectFile *Owner
argument_list|)
expr_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|SymbolRef
operator|&
name|Other
operator|)
specifier|const
expr_stmt|;
name|error_code
name|getNext
argument_list|(
name|SymbolRef
operator|&
name|Result
argument_list|)
decl|const
decl_stmt|;
name|error_code
name|getName
argument_list|(
name|StringRef
operator|&
name|Result
argument_list|)
decl|const
decl_stmt|;
name|error_code
name|getAddress
argument_list|(
name|uint64_t
operator|&
name|Result
argument_list|)
decl|const
decl_stmt|;
name|error_code
name|getSize
argument_list|(
name|uint64_t
operator|&
name|Result
argument_list|)
decl|const
decl_stmt|;
comment|/// Returns the ascii char that should be displayed in a symbol table dump via
comment|/// nm for this symbol.
name|error_code
name|getNMTypeChar
argument_list|(
name|char
operator|&
name|Result
argument_list|)
decl|const
decl_stmt|;
comment|/// Returns true for symbols that are internal to the object file format such
comment|/// as section symbols.
name|error_code
name|isInternal
argument_list|(
name|bool
operator|&
name|Result
argument_list|)
decl|const
decl_stmt|;
block|}
empty_stmt|;
comment|/// SectionRef - This is a value type class that represents a single section in
comment|/// the list of sections in the object file.
name|class
name|SectionRef
block|{
name|friend
name|class
name|SymbolRef
decl_stmt|;
name|DataRefImpl
name|SectionPimpl
decl_stmt|;
specifier|const
name|ObjectFile
modifier|*
name|OwningObject
decl_stmt|;
name|public
label|:
name|SectionRef
argument_list|()
operator|:
name|OwningObject
argument_list|(
argument|NULL
argument_list|)
block|{
name|std
operator|::
name|memset
argument_list|(
operator|&
name|SectionPimpl
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|SectionPimpl
argument_list|)
argument_list|)
block|;   }
name|SectionRef
argument_list|(
argument|DataRefImpl SectionP
argument_list|,
argument|const ObjectFile *Owner
argument_list|)
expr_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|SectionRef
operator|&
name|Other
operator|)
specifier|const
expr_stmt|;
name|error_code
name|getNext
argument_list|(
name|SectionRef
operator|&
name|Result
argument_list|)
decl|const
decl_stmt|;
name|error_code
name|getName
argument_list|(
name|StringRef
operator|&
name|Result
argument_list|)
decl|const
decl_stmt|;
name|error_code
name|getAddress
argument_list|(
name|uint64_t
operator|&
name|Result
argument_list|)
decl|const
decl_stmt|;
name|error_code
name|getSize
argument_list|(
name|uint64_t
operator|&
name|Result
argument_list|)
decl|const
decl_stmt|;
name|error_code
name|getContents
argument_list|(
name|StringRef
operator|&
name|Result
argument_list|)
decl|const
decl_stmt|;
comment|// FIXME: Move to the normalization layer when it's created.
name|error_code
name|isText
argument_list|(
name|bool
operator|&
name|Result
argument_list|)
decl|const
decl_stmt|;
name|error_code
name|containsSymbol
argument_list|(
name|SymbolRef
name|S
argument_list|,
name|bool
operator|&
name|Result
argument_list|)
decl|const
decl_stmt|;
block|}
empty_stmt|;
specifier|const
name|uint64_t
name|UnknownAddressOrSize
init|=
operator|~
literal|0ULL
decl_stmt|;
comment|/// ObjectFile - This class is the base class for all object file types.
comment|/// Concrete instances of this object are created by createObjectFile, which
comment|/// figure out which type to create.
name|class
name|ObjectFile
range|:
name|public
name|Binary
block|{
name|private
operator|:
name|ObjectFile
argument_list|()
block|;
comment|// = delete
name|ObjectFile
argument_list|(
specifier|const
name|ObjectFile
operator|&
name|other
argument_list|)
block|;
comment|// = delete
name|protected
operator|:
name|ObjectFile
argument_list|(
argument|unsigned int Type
argument_list|,
argument|MemoryBuffer *source
argument_list|,
argument|error_code&ec
argument_list|)
block|;
specifier|const
name|uint8_t
operator|*
name|base
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|uint8_t
operator|*
operator|>
operator|(
name|Data
operator|->
name|getBufferStart
argument_list|()
operator|)
return|;
block|}
comment|// These functions are for SymbolRef to call internally. The main goal of
comment|// this is to allow SymbolRef::SymbolPimpl to point directly to the symbol
comment|// entry in the memory mapped object file. SymbolPimpl cannot contain any
comment|// virtual functions because then it could not point into the memory mapped
comment|// file.
comment|//
comment|// Implementations assume that the DataRefImpl is valid and has not been
comment|// modified externally. It's UB otherwise.
name|friend
name|class
name|SymbolRef
block|;
name|virtual
name|error_code
name|getSymbolNext
argument_list|(
argument|DataRefImpl Symb
argument_list|,
argument|SymbolRef&Res
argument_list|)
specifier|const
operator|=
literal|0
block|;
name|virtual
name|error_code
name|getSymbolName
argument_list|(
argument|DataRefImpl Symb
argument_list|,
argument|StringRef&Res
argument_list|)
specifier|const
operator|=
literal|0
block|;
name|virtual
name|error_code
name|getSymbolAddress
argument_list|(
argument|DataRefImpl Symb
argument_list|,
argument|uint64_t&Res
argument_list|)
specifier|const
operator|=
literal|0
block|;
name|virtual
name|error_code
name|getSymbolSize
argument_list|(
argument|DataRefImpl Symb
argument_list|,
argument|uint64_t&Res
argument_list|)
specifier|const
operator|=
literal|0
block|;
name|virtual
name|error_code
name|getSymbolNMTypeChar
argument_list|(
argument|DataRefImpl Symb
argument_list|,
argument|char&Res
argument_list|)
specifier|const
operator|=
literal|0
block|;
name|virtual
name|error_code
name|isSymbolInternal
argument_list|(
argument|DataRefImpl Symb
argument_list|,
argument|bool&Res
argument_list|)
specifier|const
operator|=
literal|0
block|;
comment|// Same as above for SectionRef.
name|friend
name|class
name|SectionRef
block|;
name|virtual
name|error_code
name|getSectionNext
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|SectionRef&Res
argument_list|)
specifier|const
operator|=
literal|0
block|;
name|virtual
name|error_code
name|getSectionName
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|StringRef&Res
argument_list|)
specifier|const
operator|=
literal|0
block|;
name|virtual
name|error_code
name|getSectionAddress
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|uint64_t&Res
argument_list|)
specifier|const
operator|=
literal|0
block|;
name|virtual
name|error_code
name|getSectionSize
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|uint64_t&Res
argument_list|)
specifier|const
operator|=
literal|0
block|;
name|virtual
name|error_code
name|getSectionContents
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|StringRef&Res
argument_list|)
specifier|const
operator|=
literal|0
block|;
name|virtual
name|error_code
name|isSectionText
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|bool&Res
argument_list|)
specifier|const
operator|=
literal|0
block|;
name|virtual
name|error_code
name|sectionContainsSymbol
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|DataRefImpl Symb
argument_list|,
argument|bool&Result
argument_list|)
specifier|const
operator|=
literal|0
block|;
name|public
operator|:
name|template
operator|<
name|class
name|content_type
operator|>
name|class
name|content_iterator
block|{
name|content_type
name|Current
block|;
name|public
operator|:
name|content_iterator
argument_list|(
argument|content_type symb
argument_list|)
operator|:
name|Current
argument_list|(
argument|symb
argument_list|)
block|{}
specifier|const
name|content_type
operator|*
name|operator
operator|->
expr|(
block|)
specifier|const
block|{
return|return
operator|&
name|Current
return|;
block|}
specifier|const
name|content_type
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|Current
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|content_iterator
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|Current
operator|==
name|other
operator|.
name|Current
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|content_iterator
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|other
operator|)
return|;
block|}
name|content_iterator
operator|&
name|increment
argument_list|(
argument|error_code&err
argument_list|)
block|{
name|content_type
name|next
block|;
if|if
condition|(
name|error_code
name|ec
init|=
name|Current
operator|.
name|getNext
argument_list|(
name|next
argument_list|)
condition|)
name|err
operator|=
name|ec
expr_stmt|;
else|else
name|Current
operator|=
name|next
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
block|}
empty_stmt|;
typedef|typedef
name|content_iterator
operator|<
name|SymbolRef
operator|>
name|symbol_iterator
expr_stmt|;
typedef|typedef
name|content_iterator
operator|<
name|SectionRef
operator|>
name|section_iterator
expr_stmt|;
name|virtual
name|symbol_iterator
name|begin_symbols
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|symbol_iterator
name|end_symbols
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|section_iterator
name|begin_sections
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|section_iterator
name|end_sections
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
comment|/// @brief The number of bytes used to represent an address in this object
comment|///        file format.
name|virtual
name|uint8_t
name|getBytesInAddress
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|StringRef
name|getFileFormatName
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
comment|/* Triple::ArchType */
name|unsigned
name|getArch
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
comment|/// @returns Pointer to ObjectFile subclass to handle this type of object.
comment|/// @param ObjectPath The path to the object file. ObjectPath.isObject must
comment|///        return true.
comment|/// @brief Create ObjectFile from path.
specifier|static
name|ObjectFile
modifier|*
name|createObjectFile
parameter_list|(
name|StringRef
name|ObjectPath
parameter_list|)
function_decl|;
specifier|static
name|ObjectFile
modifier|*
name|createObjectFile
parameter_list|(
name|MemoryBuffer
modifier|*
name|Object
parameter_list|)
function_decl|;
specifier|static
specifier|inline
name|bool
name|classof
parameter_list|(
specifier|const
name|Binary
modifier|*
name|v
parameter_list|)
block|{
return|return
name|v
operator|->
name|getType
argument_list|()
operator|>=
name|isObject
operator|&&
name|v
operator|->
name|getType
argument_list|()
operator|<
name|lastObject
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
parameter_list|(
specifier|const
name|ObjectFile
modifier|*
name|v
parameter_list|)
block|{
return|return
name|true
return|;
block|}
name|public
label|:
specifier|static
name|ObjectFile
modifier|*
name|createCOFFObjectFile
parameter_list|(
name|MemoryBuffer
modifier|*
name|Object
parameter_list|)
function_decl|;
specifier|static
name|ObjectFile
modifier|*
name|createELFObjectFile
parameter_list|(
name|MemoryBuffer
modifier|*
name|Object
parameter_list|)
function_decl|;
specifier|static
name|ObjectFile
modifier|*
name|createMachOObjectFile
parameter_list|(
name|MemoryBuffer
modifier|*
name|Object
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// Inline function definitions.
end_comment

begin_expr_stmt
specifier|inline
name|SymbolRef
operator|::
name|SymbolRef
argument_list|(
argument|DataRefImpl SymbolP
argument_list|,
argument|const ObjectFile *Owner
argument_list|)
operator|:
name|SymbolPimpl
argument_list|(
name|SymbolP
argument_list|)
operator|,
name|OwningObject
argument_list|(
argument|Owner
argument_list|)
block|{}
specifier|inline
name|bool
name|SymbolRef
operator|::
name|operator
operator|==
operator|(
specifier|const
name|SymbolRef
operator|&
name|Other
operator|)
specifier|const
block|{
return|return
name|SymbolPimpl
operator|==
name|Other
operator|.
name|SymbolPimpl
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|error_code
name|SymbolRef
operator|::
name|getNext
argument_list|(
argument|SymbolRef&Result
argument_list|)
specifier|const
block|{
return|return
name|OwningObject
operator|->
name|getSymbolNext
argument_list|(
name|SymbolPimpl
argument_list|,
name|Result
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|error_code
name|SymbolRef
operator|::
name|getName
argument_list|(
argument|StringRef&Result
argument_list|)
specifier|const
block|{
return|return
name|OwningObject
operator|->
name|getSymbolName
argument_list|(
name|SymbolPimpl
argument_list|,
name|Result
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|error_code
name|SymbolRef
operator|::
name|getAddress
argument_list|(
argument|uint64_t&Result
argument_list|)
specifier|const
block|{
return|return
name|OwningObject
operator|->
name|getSymbolAddress
argument_list|(
name|SymbolPimpl
argument_list|,
name|Result
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|error_code
name|SymbolRef
operator|::
name|getSize
argument_list|(
argument|uint64_t&Result
argument_list|)
specifier|const
block|{
return|return
name|OwningObject
operator|->
name|getSymbolSize
argument_list|(
name|SymbolPimpl
argument_list|,
name|Result
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|error_code
name|SymbolRef
operator|::
name|getNMTypeChar
argument_list|(
argument|char&Result
argument_list|)
specifier|const
block|{
return|return
name|OwningObject
operator|->
name|getSymbolNMTypeChar
argument_list|(
name|SymbolPimpl
argument_list|,
name|Result
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|error_code
name|SymbolRef
operator|::
name|isInternal
argument_list|(
argument|bool&Result
argument_list|)
specifier|const
block|{
return|return
name|OwningObject
operator|->
name|isSymbolInternal
argument_list|(
name|SymbolPimpl
argument_list|,
name|Result
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/// SectionRef
end_comment

begin_expr_stmt
specifier|inline
name|SectionRef
operator|::
name|SectionRef
argument_list|(
argument|DataRefImpl SectionP
argument_list|,
argument|const ObjectFile *Owner
argument_list|)
operator|:
name|SectionPimpl
argument_list|(
name|SectionP
argument_list|)
operator|,
name|OwningObject
argument_list|(
argument|Owner
argument_list|)
block|{}
specifier|inline
name|bool
name|SectionRef
operator|::
name|operator
operator|==
operator|(
specifier|const
name|SectionRef
operator|&
name|Other
operator|)
specifier|const
block|{
return|return
name|SectionPimpl
operator|==
name|Other
operator|.
name|SectionPimpl
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|error_code
name|SectionRef
operator|::
name|getNext
argument_list|(
argument|SectionRef&Result
argument_list|)
specifier|const
block|{
return|return
name|OwningObject
operator|->
name|getSectionNext
argument_list|(
name|SectionPimpl
argument_list|,
name|Result
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|error_code
name|SectionRef
operator|::
name|getName
argument_list|(
argument|StringRef&Result
argument_list|)
specifier|const
block|{
return|return
name|OwningObject
operator|->
name|getSectionName
argument_list|(
name|SectionPimpl
argument_list|,
name|Result
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|error_code
name|SectionRef
operator|::
name|getAddress
argument_list|(
argument|uint64_t&Result
argument_list|)
specifier|const
block|{
return|return
name|OwningObject
operator|->
name|getSectionAddress
argument_list|(
name|SectionPimpl
argument_list|,
name|Result
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|error_code
name|SectionRef
operator|::
name|getSize
argument_list|(
argument|uint64_t&Result
argument_list|)
specifier|const
block|{
return|return
name|OwningObject
operator|->
name|getSectionSize
argument_list|(
name|SectionPimpl
argument_list|,
name|Result
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|error_code
name|SectionRef
operator|::
name|getContents
argument_list|(
argument|StringRef&Result
argument_list|)
specifier|const
block|{
return|return
name|OwningObject
operator|->
name|getSectionContents
argument_list|(
name|SectionPimpl
argument_list|,
name|Result
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|error_code
name|SectionRef
operator|::
name|isText
argument_list|(
argument|bool&Result
argument_list|)
specifier|const
block|{
return|return
name|OwningObject
operator|->
name|isSectionText
argument_list|(
name|SectionPimpl
argument_list|,
name|Result
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|error_code
name|SectionRef
operator|::
name|containsSymbol
argument_list|(
argument|SymbolRef S
argument_list|,
argument|bool&Result
argument_list|)
specifier|const
block|{
return|return
name|OwningObject
operator|->
name|sectionContainsSymbol
argument_list|(
name|SectionPimpl
argument_list|,
name|S
operator|.
name|SymbolPimpl
argument_list|,
name|Result
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
unit|}
comment|// end namespace object
end_comment

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

