begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- ELF.h - ELF object file implementation -------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares the ELFFile template class.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_OBJECT_ELF_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_OBJECT_ELF_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/ELFTypes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/Error.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ELF.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Endian.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Error.h"
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<cstddef>
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_include
include|#
directive|include
file|<limits>
end_include

begin_include
include|#
directive|include
file|<utility>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|object
block|{
name|StringRef
name|getELFRelocationTypeName
parameter_list|(
name|uint32_t
name|Machine
parameter_list|,
name|uint32_t
name|Type
parameter_list|)
function_decl|;
comment|// Subclasses of ELFFile may need this for template instantiation
specifier|inline
name|std
operator|::
name|pair
operator|<
name|unsigned
name|char
operator|,
name|unsigned
name|char
operator|>
name|getElfArchType
argument_list|(
argument|StringRef Object
argument_list|)
block|{
if|if
condition|(
name|Object
operator|.
name|size
argument_list|()
operator|<
name|ELF
operator|::
name|EI_NIDENT
condition|)
return|return
name|std
operator|::
name|make_pair
argument_list|(
operator|(
name|uint8_t
operator|)
name|ELF
operator|::
name|ELFCLASSNONE
argument_list|,
operator|(
name|uint8_t
operator|)
name|ELF
operator|::
name|ELFDATANONE
argument_list|)
return|;
return|return
name|std
operator|::
name|make_pair
argument_list|(
operator|(
name|uint8_t
operator|)
name|Object
index|[
name|ELF
operator|::
name|EI_CLASS
index|]
argument_list|,
operator|(
name|uint8_t
operator|)
name|Object
index|[
name|ELF
operator|::
name|EI_DATA
index|]
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|Error
name|createError
parameter_list|(
name|StringRef
name|Err
parameter_list|)
block|{
return|return
name|make_error
operator|<
name|StringError
operator|>
operator|(
name|Err
operator|,
name|object_error
operator|::
name|parse_failed
operator|)
return|;
block|}
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|ELFFile
block|{
name|public
operator|:
name|LLVM_ELF_IMPORT_TYPES_ELFT
argument_list|(
argument|ELFT
argument_list|)
name|using
name|uintX_t
operator|=
name|typename
name|ELFT
operator|::
name|uint
block|;
name|using
name|Elf_Ehdr
operator|=
name|typename
name|ELFT
operator|::
name|Ehdr
block|;
name|using
name|Elf_Shdr
operator|=
name|typename
name|ELFT
operator|::
name|Shdr
block|;
name|using
name|Elf_Sym
operator|=
name|typename
name|ELFT
operator|::
name|Sym
block|;
name|using
name|Elf_Dyn
operator|=
name|typename
name|ELFT
operator|::
name|Dyn
block|;
name|using
name|Elf_Phdr
operator|=
name|typename
name|ELFT
operator|::
name|Phdr
block|;
name|using
name|Elf_Rel
operator|=
name|typename
name|ELFT
operator|::
name|Rel
block|;
name|using
name|Elf_Rela
operator|=
name|typename
name|ELFT
operator|::
name|Rela
block|;
name|using
name|Elf_Verdef
operator|=
name|typename
name|ELFT
operator|::
name|Verdef
block|;
name|using
name|Elf_Verdaux
operator|=
name|typename
name|ELFT
operator|::
name|Verdaux
block|;
name|using
name|Elf_Verneed
operator|=
name|typename
name|ELFT
operator|::
name|Verneed
block|;
name|using
name|Elf_Vernaux
operator|=
name|typename
name|ELFT
operator|::
name|Vernaux
block|;
name|using
name|Elf_Versym
operator|=
name|typename
name|ELFT
operator|::
name|Versym
block|;
name|using
name|Elf_Hash
operator|=
name|typename
name|ELFT
operator|::
name|Hash
block|;
name|using
name|Elf_GnuHash
operator|=
name|typename
name|ELFT
operator|::
name|GnuHash
block|;
name|using
name|Elf_Dyn_Range
operator|=
name|typename
name|ELFT
operator|::
name|DynRange
block|;
name|using
name|Elf_Shdr_Range
operator|=
name|typename
name|ELFT
operator|::
name|ShdrRange
block|;
name|using
name|Elf_Sym_Range
operator|=
name|typename
name|ELFT
operator|::
name|SymRange
block|;
name|using
name|Elf_Rel_Range
operator|=
name|typename
name|ELFT
operator|::
name|RelRange
block|;
name|using
name|Elf_Rela_Range
operator|=
name|typename
name|ELFT
operator|::
name|RelaRange
block|;
name|using
name|Elf_Phdr_Range
operator|=
name|typename
name|ELFT
operator|::
name|PhdrRange
block|;
specifier|const
name|uint8_t
operator|*
name|base
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|uint8_t
operator|*
operator|>
operator|(
name|Buf
operator|.
name|data
argument_list|()
operator|)
return|;
block|}
name|size_t
name|getBufSize
argument_list|()
specifier|const
block|{
return|return
name|Buf
operator|.
name|size
argument_list|()
return|;
block|}
name|private
operator|:
name|StringRef
name|Buf
block|;
name|public
operator|:
specifier|const
name|Elf_Ehdr
operator|*
name|getHeader
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|Elf_Ehdr
operator|*
operator|>
operator|(
name|base
argument_list|()
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|Expected
operator|<
specifier|const
name|T
operator|*
operator|>
name|getEntry
argument_list|(
argument|uint32_t Section
argument_list|,
argument|uint32_t Entry
argument_list|)
specifier|const
block|;
name|template
operator|<
name|typename
name|T
operator|>
name|Expected
operator|<
specifier|const
name|T
operator|*
operator|>
name|getEntry
argument_list|(
argument|const Elf_Shdr *Section
argument_list|,
argument|uint32_t Entry
argument_list|)
specifier|const
block|;
name|Expected
operator|<
name|StringRef
operator|>
name|getStringTable
argument_list|(
argument|const Elf_Shdr *Section
argument_list|)
specifier|const
block|;
name|Expected
operator|<
name|StringRef
operator|>
name|getStringTableForSymtab
argument_list|(
argument|const Elf_Shdr&Section
argument_list|)
specifier|const
block|;
name|Expected
operator|<
name|StringRef
operator|>
name|getStringTableForSymtab
argument_list|(
argument|const Elf_Shdr&Section
argument_list|,
argument|Elf_Shdr_Range Sections
argument_list|)
specifier|const
block|;
name|Expected
operator|<
name|ArrayRef
operator|<
name|Elf_Word
operator|>>
name|getSHNDXTable
argument_list|(
argument|const Elf_Shdr&Section
argument_list|)
specifier|const
block|;
name|Expected
operator|<
name|ArrayRef
operator|<
name|Elf_Word
operator|>>
name|getSHNDXTable
argument_list|(
argument|const Elf_Shdr&Section
argument_list|,
argument|Elf_Shdr_Range Sections
argument_list|)
specifier|const
block|;
name|void
name|VerifyStrTab
argument_list|(
argument|const Elf_Shdr *sh
argument_list|)
specifier|const
block|;
name|StringRef
name|getRelocationTypeName
argument_list|(
argument|uint32_t Type
argument_list|)
specifier|const
block|;
name|void
name|getRelocationTypeName
argument_list|(
argument|uint32_t Type
argument_list|,
argument|SmallVectorImpl<char>&Result
argument_list|)
specifier|const
block|;
comment|/// \brief Get the symbol for a given relocation.
name|Expected
operator|<
specifier|const
name|Elf_Sym
operator|*
operator|>
name|getRelocationSymbol
argument_list|(
argument|const Elf_Rel *Rel
argument_list|,
argument|const Elf_Shdr *SymTab
argument_list|)
specifier|const
block|;
name|ELFFile
argument_list|(
argument|StringRef Object
argument_list|)
block|;
name|bool
name|isMipsELF64
argument_list|()
specifier|const
block|{
return|return
name|getHeader
argument_list|()
operator|->
name|e_machine
operator|==
name|ELF
operator|::
name|EM_MIPS
operator|&&
name|getHeader
argument_list|()
operator|->
name|getFileClass
argument_list|()
operator|==
name|ELF
operator|::
name|ELFCLASS64
return|;
block|}
name|bool
name|isMips64EL
argument_list|()
specifier|const
block|{
return|return
name|isMipsELF64
argument_list|()
operator|&&
name|getHeader
argument_list|()
operator|->
name|getDataEncoding
argument_list|()
operator|==
name|ELF
operator|::
name|ELFDATA2LSB
return|;
block|}
name|Expected
operator|<
name|Elf_Shdr_Range
operator|>
name|sections
argument_list|()
specifier|const
block|;
name|Expected
operator|<
name|Elf_Sym_Range
operator|>
name|symbols
argument_list|(
argument|const Elf_Shdr *Sec
argument_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|Sec
condition|)
return|return
name|makeArrayRef
operator|<
name|Elf_Sym
operator|>
operator|(
name|nullptr
operator|,
name|nullptr
operator|)
return|;
return|return
name|getSectionContentsAsArray
operator|<
name|Elf_Sym
operator|>
operator|(
name|Sec
operator|)
return|;
block|}
name|Expected
operator|<
name|Elf_Rela_Range
operator|>
name|relas
argument_list|(
argument|const Elf_Shdr *Sec
argument_list|)
specifier|const
block|{
return|return
name|getSectionContentsAsArray
operator|<
name|Elf_Rela
operator|>
operator|(
name|Sec
operator|)
return|;
block|}
name|Expected
operator|<
name|Elf_Rel_Range
operator|>
name|rels
argument_list|(
argument|const Elf_Shdr *Sec
argument_list|)
specifier|const
block|{
return|return
name|getSectionContentsAsArray
operator|<
name|Elf_Rel
operator|>
operator|(
name|Sec
operator|)
return|;
block|}
comment|/// \brief Iterate over program header table.
name|Expected
operator|<
name|Elf_Phdr_Range
operator|>
name|program_headers
argument_list|()
specifier|const
block|{
if|if
condition|(
name|getHeader
argument_list|()
operator|->
name|e_phnum
operator|&&
name|getHeader
argument_list|()
operator|->
name|e_phentsize
operator|!=
sizeof|sizeof
argument_list|(
name|Elf_Phdr
argument_list|)
condition|)
return|return
name|createError
argument_list|(
literal|"invalid e_phentsize"
argument_list|)
return|;
name|auto
operator|*
name|Begin
operator|=
name|reinterpret_cast
operator|<
specifier|const
name|Elf_Phdr
operator|*
operator|>
operator|(
name|base
argument_list|()
operator|+
name|getHeader
argument_list|()
operator|->
name|e_phoff
operator|)
expr_stmt|;
return|return
name|makeArrayRef
argument_list|(
name|Begin
argument_list|,
name|Begin
operator|+
name|getHeader
argument_list|()
operator|->
name|e_phnum
argument_list|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|Expected
operator|<
name|StringRef
operator|>
name|getSectionStringTable
argument_list|(
argument|Elf_Shdr_Range Sections
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Expected
operator|<
name|uint32_t
operator|>
name|getSectionIndex
argument_list|(
argument|const Elf_Sym *Sym
argument_list|,
argument|Elf_Sym_Range Syms
argument_list|,
argument|ArrayRef<Elf_Word> ShndxTable
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Expected
operator|<
specifier|const
name|Elf_Shdr
operator|*
operator|>
name|getSection
argument_list|(
argument|const Elf_Sym *Sym
argument_list|,
argument|const Elf_Shdr *SymTab
argument_list|,
argument|ArrayRef<Elf_Word> ShndxTable
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Expected
operator|<
specifier|const
name|Elf_Shdr
operator|*
operator|>
name|getSection
argument_list|(
argument|const Elf_Sym *Sym
argument_list|,
argument|Elf_Sym_Range Symtab
argument_list|,
argument|ArrayRef<Elf_Word> ShndxTable
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Expected
operator|<
specifier|const
name|Elf_Shdr
operator|*
operator|>
name|getSection
argument_list|(
argument|uint32_t Index
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Expected
operator|<
specifier|const
name|Elf_Sym
operator|*
operator|>
name|getSymbol
argument_list|(
argument|const Elf_Shdr *Sec
argument_list|,
argument|uint32_t Index
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Expected
operator|<
name|StringRef
operator|>
name|getSectionName
argument_list|(
argument|const Elf_Shdr *Section
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Expected
operator|<
name|StringRef
operator|>
name|getSectionName
argument_list|(
argument|const Elf_Shdr *Section
argument_list|,
argument|StringRef DotShstrtab
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|Expected
operator|<
name|ArrayRef
operator|<
name|T
operator|>>
name|getSectionContentsAsArray
argument_list|(
argument|const Elf_Shdr *Sec
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Expected
operator|<
name|ArrayRef
operator|<
name|uint8_t
operator|>>
name|getSectionContents
argument_list|(
argument|const Elf_Shdr *Sec
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_decl_stmt
unit|};
name|using
name|ELF32LEFile
init|=
name|ELFFile
operator|<
name|ELFType
operator|<
name|support
operator|::
name|little
decl_stmt|,
name|false
decl|>>
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|using
name|ELF64LEFile
init|=
name|ELFFile
operator|<
name|ELFType
operator|<
name|support
operator|::
name|little
decl_stmt|,
name|true
decl|>>
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|using
name|ELF32BEFile
init|=
name|ELFFile
operator|<
name|ELFType
operator|<
name|support
operator|::
name|big
decl_stmt|,
name|false
decl|>>
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|using
name|ELF64BEFile
init|=
name|ELFFile
operator|<
name|ELFType
operator|<
name|support
operator|::
name|big
decl_stmt|,
name|true
decl|>>
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
specifier|inline
name|Expected
operator|<
specifier|const
name|typename
name|ELFT
operator|::
name|Shdr
operator|*
operator|>
name|getSection
argument_list|(
argument|typename ELFT::ShdrRange Sections
argument_list|,
argument|uint32_t Index
argument_list|)
block|{
if|if
condition|(
name|Index
operator|>=
name|Sections
operator|.
name|size
argument_list|()
condition|)
return|return
name|createError
argument_list|(
literal|"invalid section index"
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
operator|&
name|Sections
index|[
name|Index
index|]
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
specifier|inline
name|Expected
operator|<
name|uint32_t
operator|>
name|getExtendedSymbolTableIndex
argument_list|(
argument|const typename ELFT::Sym *Sym
argument_list|,
argument|const typename ELFT::Sym *FirstSym
argument_list|,
argument|ArrayRef<typename ELFT::Word> ShndxTable
argument_list|)
block|{
name|assert
argument_list|(
name|Sym
operator|->
name|st_shndx
operator|==
name|ELF
operator|::
name|SHN_XINDEX
argument_list|)
block|;
name|unsigned
name|Index
operator|=
name|Sym
operator|-
name|FirstSym
block|;
if|if
condition|(
name|Index
operator|>=
name|ShndxTable
operator|.
name|size
argument_list|()
condition|)
return|return
name|createError
argument_list|(
literal|"index past the end of the symbol table"
argument_list|)
return|;
end_expr_stmt

begin_comment
comment|// The size of the table was checked in getSHNDXTable.
end_comment

begin_return
return|return
name|ShndxTable
index|[
name|Index
index|]
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|Expected
operator|<
name|uint32_t
operator|>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getSectionIndex
argument_list|(
argument|const Elf_Sym *Sym
argument_list|,
argument|Elf_Sym_Range Syms
argument_list|,
argument|ArrayRef<Elf_Word> ShndxTable
argument_list|)
specifier|const
block|{
name|uint32_t
name|Index
operator|=
name|Sym
operator|->
name|st_shndx
block|;
if|if
condition|(
name|Index
operator|==
name|ELF
operator|::
name|SHN_XINDEX
condition|)
block|{
name|auto
name|ErrorOrIndex
init|=
name|getExtendedSymbolTableIndex
operator|<
name|ELFT
operator|>
operator|(
name|Sym
expr|,
name|Syms
operator|.
name|begin
argument_list|()
expr|,
name|ShndxTable
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|ErrorOrIndex
condition|)
return|return
name|ErrorOrIndex
operator|.
name|takeError
argument_list|()
return|;
return|return
operator|*
name|ErrorOrIndex
return|;
block|}
end_expr_stmt

begin_if
if|if
condition|(
name|Index
operator|==
name|ELF
operator|::
name|SHN_UNDEF
operator|||
name|Index
operator|>=
name|ELF
operator|::
name|SHN_LORESERVE
condition|)
return|return
literal|0
return|;
end_if

begin_return
return|return
name|Index
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|Expected
operator|<
specifier|const
name|typename
name|ELFT
operator|::
name|Shdr
operator|*
operator|>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getSection
argument_list|(
argument|const Elf_Sym *Sym
argument_list|,
argument|const Elf_Shdr *SymTab
argument_list|,
argument|ArrayRef<Elf_Word> ShndxTable
argument_list|)
specifier|const
block|{
name|auto
name|SymsOrErr
operator|=
name|symbols
argument_list|(
name|SymTab
argument_list|)
block|;
if|if
condition|(
operator|!
name|SymsOrErr
condition|)
return|return
name|SymsOrErr
operator|.
name|takeError
argument_list|()
return|;
end_expr_stmt

begin_return
return|return
name|getSection
argument_list|(
name|Sym
argument_list|,
operator|*
name|SymsOrErr
argument_list|,
name|ShndxTable
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|Expected
operator|<
specifier|const
name|typename
name|ELFT
operator|::
name|Shdr
operator|*
operator|>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getSection
argument_list|(
argument|const Elf_Sym *Sym
argument_list|,
argument|Elf_Sym_Range Symbols
argument_list|,
argument|ArrayRef<Elf_Word> ShndxTable
argument_list|)
specifier|const
block|{
name|auto
name|IndexOrErr
operator|=
name|getSectionIndex
argument_list|(
name|Sym
argument_list|,
name|Symbols
argument_list|,
name|ShndxTable
argument_list|)
block|;
if|if
condition|(
operator|!
name|IndexOrErr
condition|)
return|return
name|IndexOrErr
operator|.
name|takeError
argument_list|()
return|;
name|uint32_t
name|Index
operator|=
operator|*
name|IndexOrErr
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|Index
operator|==
literal|0
condition|)
return|return
name|nullptr
return|;
end_if

begin_decl_stmt
name|auto
name|SectionsOrErr
init|=
name|sections
argument_list|()
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
operator|!
name|SectionsOrErr
condition|)
return|return
name|SectionsOrErr
operator|.
name|takeError
argument_list|()
return|;
end_if

begin_return
return|return
name|object
operator|::
name|getSection
operator|<
name|ELFT
operator|>
operator|(
operator|*
name|SectionsOrErr
operator|,
name|Index
operator|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
specifier|inline
name|Expected
operator|<
specifier|const
name|typename
name|ELFT
operator|::
name|Sym
operator|*
operator|>
name|getSymbol
argument_list|(
argument|typename ELFT::SymRange Symbols
argument_list|,
argument|uint32_t Index
argument_list|)
block|{
if|if
condition|(
name|Index
operator|>=
name|Symbols
operator|.
name|size
argument_list|()
condition|)
return|return
name|createError
argument_list|(
literal|"invalid symbol index"
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
operator|&
name|Symbols
index|[
name|Index
index|]
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|Expected
operator|<
specifier|const
name|typename
name|ELFT
operator|::
name|Sym
operator|*
operator|>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getSymbol
argument_list|(
argument|const Elf_Shdr *Sec
argument_list|,
argument|uint32_t Index
argument_list|)
specifier|const
block|{
name|auto
name|SymtabOrErr
operator|=
name|symbols
argument_list|(
name|Sec
argument_list|)
block|;
if|if
condition|(
operator|!
name|SymtabOrErr
condition|)
return|return
name|SymtabOrErr
operator|.
name|takeError
argument_list|()
return|;
end_expr_stmt

begin_return
return|return
name|object
operator|::
name|getSymbol
operator|<
name|ELFT
operator|>
operator|(
operator|*
name|SymtabOrErr
operator|,
name|Index
operator|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|template
operator|<
name|typename
name|T
operator|>
name|Expected
operator|<
name|ArrayRef
operator|<
name|T
operator|>>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getSectionContentsAsArray
argument_list|(
argument|const Elf_Shdr *Sec
argument_list|)
specifier|const
block|{
if|if
condition|(
name|Sec
operator|->
name|sh_entsize
operator|!=
sizeof|sizeof
argument_list|(
name|T
argument_list|)
operator|&&
sizeof|sizeof
argument_list|(
name|T
argument_list|)
operator|!=
literal|1
condition|)
return|return
name|createError
argument_list|(
literal|"invalid sh_entsize"
argument_list|)
return|;
name|uintX_t
name|Offset
operator|=
name|Sec
operator|->
name|sh_offset
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|uintX_t
name|Size
init|=
name|Sec
operator|->
name|sh_size
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|Size
operator|%
sizeof|sizeof
argument_list|(
name|T
argument_list|)
condition|)
return|return
name|createError
argument_list|(
literal|"size is not a multiple of sh_entsize"
argument_list|)
return|;
end_if

begin_if
if|if
condition|(
operator|(
name|std
operator|::
name|numeric_limits
operator|<
name|uintX_t
operator|>
operator|::
name|max
argument_list|()
operator|-
name|Offset
operator|<
name|Size
operator|)
operator|||
name|Offset
operator|+
name|Size
operator|>
name|Buf
operator|.
name|size
argument_list|()
condition|)
return|return
name|createError
argument_list|(
literal|"invalid section offset"
argument_list|)
return|;
end_if

begin_decl_stmt
specifier|const
name|T
modifier|*
name|Start
init|=
name|reinterpret_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|base
argument_list|()
operator|+
name|Offset
operator|)
decl_stmt|;
end_decl_stmt

begin_return
return|return
name|makeArrayRef
argument_list|(
name|Start
argument_list|,
name|Size
operator|/
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|Expected
operator|<
name|ArrayRef
operator|<
name|uint8_t
operator|>>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getSectionContents
argument_list|(
argument|const Elf_Shdr *Sec
argument_list|)
specifier|const
block|{
return|return
name|getSectionContentsAsArray
operator|<
name|uint8_t
operator|>
operator|(
name|Sec
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|StringRef
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getRelocationTypeName
argument_list|(
argument|uint32_t Type
argument_list|)
specifier|const
block|{
return|return
name|getELFRelocationTypeName
argument_list|(
name|getHeader
argument_list|()
operator|->
name|e_machine
argument_list|,
name|Type
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|void
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getRelocationTypeName
argument_list|(
argument|uint32_t Type
argument_list|,
argument|SmallVectorImpl<char>&Result
argument_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|isMipsELF64
argument_list|()
condition|)
block|{
name|StringRef
name|Name
init|=
name|getRelocationTypeName
argument_list|(
name|Type
argument_list|)
decl_stmt|;
name|Result
operator|.
name|append
argument_list|(
name|Name
operator|.
name|begin
argument_list|()
argument_list|,
name|Name
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
comment|// The Mips N64 ABI allows up to three operations to be specified per
comment|// relocation record. Unfortunately there's no easy way to test for the
comment|// presence of N64 ELFs as they have no special flag that identifies them
comment|// as being N64. We can safely assume at the moment that all Mips
comment|// ELFCLASS64 ELFs are N64. New Mips64 ABIs should provide enough
comment|// information to disambiguate between old vs new ABIs.
name|uint8_t
name|Type1
init|=
operator|(
name|Type
operator|>>
literal|0
operator|)
operator|&
literal|0xFF
decl_stmt|;
name|uint8_t
name|Type2
init|=
operator|(
name|Type
operator|>>
literal|8
operator|)
operator|&
literal|0xFF
decl_stmt|;
name|uint8_t
name|Type3
init|=
operator|(
name|Type
operator|>>
literal|16
operator|)
operator|&
literal|0xFF
decl_stmt|;
comment|// Concat all three relocation type names.
name|StringRef
name|Name
init|=
name|getRelocationTypeName
argument_list|(
name|Type1
argument_list|)
decl_stmt|;
name|Result
operator|.
name|append
argument_list|(
name|Name
operator|.
name|begin
argument_list|()
argument_list|,
name|Name
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|Name
operator|=
name|getRelocationTypeName
argument_list|(
name|Type2
argument_list|)
expr_stmt|;
name|Result
operator|.
name|append
argument_list|(
literal|1
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|Result
operator|.
name|append
argument_list|(
name|Name
operator|.
name|begin
argument_list|()
argument_list|,
name|Name
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|Name
operator|=
name|getRelocationTypeName
argument_list|(
name|Type3
argument_list|)
expr_stmt|;
name|Result
operator|.
name|append
argument_list|(
literal|1
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|Result
operator|.
name|append
argument_list|(
name|Name
operator|.
name|begin
argument_list|()
argument_list|,
name|Name
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_else

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|Expected
operator|<
specifier|const
name|typename
name|ELFT
operator|::
name|Sym
operator|*
operator|>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getRelocationSymbol
argument_list|(
argument|const Elf_Rel *Rel
argument_list|,
argument|const Elf_Shdr *SymTab
argument_list|)
specifier|const
block|{
name|uint32_t
name|Index
operator|=
name|Rel
operator|->
name|getSymbol
argument_list|(
name|isMips64EL
argument_list|()
argument_list|)
block|;
if|if
condition|(
name|Index
operator|==
literal|0
condition|)
return|return
name|nullptr
return|;
end_expr_stmt

begin_return
return|return
name|getEntry
operator|<
name|Elf_Sym
operator|>
operator|(
name|SymTab
operator|,
name|Index
operator|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|Expected
operator|<
name|StringRef
operator|>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getSectionStringTable
argument_list|(
argument|Elf_Shdr_Range Sections
argument_list|)
specifier|const
block|{
name|uint32_t
name|Index
operator|=
name|getHeader
argument_list|()
operator|->
name|e_shstrndx
block|;
if|if
condition|(
name|Index
operator|==
name|ELF
operator|::
name|SHN_XINDEX
condition|)
name|Index
operator|=
name|Sections
index|[
literal|0
index|]
operator|.
name|sh_link
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
operator|!
name|Index
condition|)
comment|// no section string table.
return|return
literal|""
return|;
end_if

begin_if
if|if
condition|(
name|Index
operator|>=
name|Sections
operator|.
name|size
argument_list|()
condition|)
return|return
name|createError
argument_list|(
literal|"invalid section index"
argument_list|)
return|;
end_if

begin_return
return|return
name|getStringTable
argument_list|(
operator|&
name|Sections
index|[
name|Index
index|]
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|ELFFile
argument_list|(
argument|StringRef Object
argument_list|)
operator|:
name|Buf
argument_list|(
argument|Object
argument_list|)
block|{
name|assert
argument_list|(
sizeof|sizeof
argument_list|(
name|Elf_Ehdr
argument_list|)
operator|<=
name|Buf
operator|.
name|size
argument_list|()
operator|&&
literal|"Invalid buffer"
argument_list|)
block|; }
name|template
operator|<
name|class
name|ELFT
operator|>
name|bool
name|compareAddr
argument_list|(
argument|uint64_t VAddr
argument_list|,
argument|const Elf_Phdr_Impl<ELFT> *Phdr
argument_list|)
block|{
return|return
name|VAddr
operator|<
name|Phdr
operator|->
name|p_vaddr
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|Expected
operator|<
name|typename
name|ELFT
operator|::
name|ShdrRange
operator|>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|sections
argument_list|()
specifier|const
block|{
specifier|const
name|uintX_t
name|SectionTableOffset
operator|=
name|getHeader
argument_list|()
operator|->
name|e_shoff
block|;
if|if
condition|(
name|SectionTableOffset
operator|==
literal|0
condition|)
return|return
name|ArrayRef
operator|<
name|Elf_Shdr
operator|>
operator|(
operator|)
return|;
end_expr_stmt

begin_if
if|if
condition|(
name|getHeader
argument_list|()
operator|->
name|e_shentsize
operator|!=
sizeof|sizeof
argument_list|(
name|Elf_Shdr
argument_list|)
condition|)
return|return
name|createError
argument_list|(
literal|"invalid section header entry size (e_shentsize) in ELF header"
argument_list|)
return|;
end_if

begin_decl_stmt
specifier|const
name|uint64_t
name|FileSize
init|=
name|Buf
operator|.
name|size
argument_list|()
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|SectionTableOffset
operator|+
sizeof|sizeof
argument_list|(
name|Elf_Shdr
argument_list|)
operator|>
name|FileSize
condition|)
return|return
name|createError
argument_list|(
literal|"section header table goes past the end of the file"
argument_list|)
return|;
end_if

begin_comment
comment|// Invalid address alignment of section headers
end_comment

begin_if
if|if
condition|(
name|SectionTableOffset
operator|&
operator|(
name|alignof
argument_list|(
name|Elf_Shdr
argument_list|)
operator|-
literal|1
operator|)
condition|)
return|return
name|createError
argument_list|(
literal|"invalid alignment of section headers"
argument_list|)
return|;
end_if

begin_decl_stmt
specifier|const
name|Elf_Shdr
modifier|*
name|First
init|=
name|reinterpret_cast
operator|<
specifier|const
name|Elf_Shdr
operator|*
operator|>
operator|(
name|base
argument_list|()
operator|+
name|SectionTableOffset
operator|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uintX_t
name|NumSections
init|=
name|getHeader
argument_list|()
operator|->
name|e_shnum
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|NumSections
operator|==
literal|0
condition|)
name|NumSections
operator|=
name|First
operator|->
name|sh_size
expr_stmt|;
end_if

begin_if
if|if
condition|(
name|NumSections
operator|>
name|UINT64_MAX
operator|/
sizeof|sizeof
argument_list|(
name|Elf_Shdr
argument_list|)
condition|)
return|return
name|createError
argument_list|(
literal|"section table goes past the end of file"
argument_list|)
return|;
end_if

begin_decl_stmt
specifier|const
name|uint64_t
name|SectionTableSize
init|=
name|NumSections
operator|*
sizeof|sizeof
argument_list|(
name|Elf_Shdr
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Section table goes past end of file!
end_comment

begin_if
if|if
condition|(
name|SectionTableOffset
operator|+
name|SectionTableSize
operator|>
name|FileSize
condition|)
return|return
name|createError
argument_list|(
literal|"section table goes past the end of file"
argument_list|)
return|;
end_if

begin_return
return|return
name|makeArrayRef
argument_list|(
name|First
argument_list|,
name|NumSections
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|template
operator|<
name|typename
name|T
operator|>
name|Expected
operator|<
specifier|const
name|T
operator|*
operator|>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getEntry
argument_list|(
argument|uint32_t Section
argument_list|,
argument|uint32_t Entry
argument_list|)
specifier|const
block|{
name|auto
name|SecOrErr
operator|=
name|getSection
argument_list|(
name|Section
argument_list|)
block|;
if|if
condition|(
operator|!
name|SecOrErr
condition|)
return|return
name|SecOrErr
operator|.
name|takeError
argument_list|()
return|;
end_expr_stmt

begin_return
return|return
name|getEntry
operator|<
name|T
operator|>
operator|(
operator|*
name|SecOrErr
operator|,
name|Entry
operator|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|template
operator|<
name|typename
name|T
operator|>
name|Expected
operator|<
specifier|const
name|T
operator|*
operator|>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getEntry
argument_list|(
argument|const Elf_Shdr *Section
argument_list|,
argument|uint32_t Entry
argument_list|)
specifier|const
block|{
if|if
condition|(
sizeof|sizeof
argument_list|(
name|T
argument_list|)
operator|!=
name|Section
operator|->
name|sh_entsize
condition|)
return|return
name|createError
argument_list|(
literal|"invalid sh_entsize"
argument_list|)
return|;
name|size_t
name|Pos
operator|=
name|Section
operator|->
name|sh_offset
operator|+
name|Entry
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|Pos
operator|+
sizeof|sizeof
argument_list|(
name|T
argument_list|)
operator|>
name|Buf
operator|.
name|size
argument_list|()
condition|)
return|return
name|createError
argument_list|(
literal|"invalid section offset"
argument_list|)
return|;
end_if

begin_return
return|return
name|reinterpret_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|base
argument_list|()
operator|+
name|Pos
operator|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|Expected
operator|<
specifier|const
name|typename
name|ELFT
operator|::
name|Shdr
operator|*
operator|>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getSection
argument_list|(
argument|uint32_t Index
argument_list|)
specifier|const
block|{
name|auto
name|TableOrErr
operator|=
name|sections
argument_list|()
block|;
if|if
condition|(
operator|!
name|TableOrErr
condition|)
return|return
name|TableOrErr
operator|.
name|takeError
argument_list|()
return|;
end_expr_stmt

begin_return
return|return
name|object
operator|::
name|getSection
operator|<
name|ELFT
operator|>
operator|(
operator|*
name|TableOrErr
operator|,
name|Index
operator|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|Expected
operator|<
name|StringRef
operator|>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getStringTable
argument_list|(
argument|const Elf_Shdr *Section
argument_list|)
specifier|const
block|{
if|if
condition|(
name|Section
operator|->
name|sh_type
operator|!=
name|ELF
operator|::
name|SHT_STRTAB
condition|)
return|return
name|createError
argument_list|(
literal|"invalid sh_type for string table, expected SHT_STRTAB"
argument_list|)
return|;
name|auto
name|V
operator|=
name|getSectionContentsAsArray
operator|<
name|char
operator|>
operator|(
name|Section
operator|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
operator|!
name|V
condition|)
return|return
name|V
operator|.
name|takeError
argument_list|()
return|;
end_if

begin_expr_stmt
name|ArrayRef
operator|<
name|char
operator|>
name|Data
operator|=
operator|*
name|V
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|Data
operator|.
name|empty
argument_list|()
condition|)
return|return
name|createError
argument_list|(
literal|"empty string table"
argument_list|)
return|;
end_if

begin_if
if|if
condition|(
name|Data
operator|.
name|back
argument_list|()
operator|!=
literal|'\0'
condition|)
return|return
name|createError
argument_list|(
literal|"string table non-null terminated"
argument_list|)
return|;
end_if

begin_return
return|return
name|StringRef
argument_list|(
name|Data
operator|.
name|begin
argument_list|()
argument_list|,
name|Data
operator|.
name|size
argument_list|()
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|Expected
operator|<
name|ArrayRef
operator|<
name|typename
name|ELFT
operator|::
name|Word
operator|>>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getSHNDXTable
argument_list|(
argument|const Elf_Shdr&Section
argument_list|)
specifier|const
block|{
name|auto
name|SectionsOrErr
operator|=
name|sections
argument_list|()
block|;
if|if
condition|(
operator|!
name|SectionsOrErr
condition|)
return|return
name|SectionsOrErr
operator|.
name|takeError
argument_list|()
return|;
end_expr_stmt

begin_return
return|return
name|getSHNDXTable
argument_list|(
name|Section
argument_list|,
operator|*
name|SectionsOrErr
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|Expected
operator|<
name|ArrayRef
operator|<
name|typename
name|ELFT
operator|::
name|Word
operator|>>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getSHNDXTable
argument_list|(
argument|const Elf_Shdr&Section
argument_list|,
argument|Elf_Shdr_Range Sections
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|Section
operator|.
name|sh_type
operator|==
name|ELF
operator|::
name|SHT_SYMTAB_SHNDX
argument_list|)
block|;
name|auto
name|VOrErr
operator|=
name|getSectionContentsAsArray
operator|<
name|Elf_Word
operator|>
operator|(
operator|&
name|Section
operator|)
block|;
if|if
condition|(
operator|!
name|VOrErr
condition|)
return|return
name|VOrErr
operator|.
name|takeError
argument_list|()
return|;
name|ArrayRef
operator|<
name|Elf_Word
operator|>
name|V
operator|=
operator|*
name|VOrErr
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|auto
name|SymTableOrErr
init|=
name|object
operator|::
name|getSection
operator|<
name|ELFT
operator|>
operator|(
name|Sections
expr|,
name|Section
operator|.
name|sh_link
operator|)
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
operator|!
name|SymTableOrErr
condition|)
return|return
name|SymTableOrErr
operator|.
name|takeError
argument_list|()
return|;
end_if

begin_decl_stmt
specifier|const
name|Elf_Shdr
modifier|&
name|SymTable
init|=
operator|*
operator|*
name|SymTableOrErr
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|SymTable
operator|.
name|sh_type
operator|!=
name|ELF
operator|::
name|SHT_SYMTAB
operator|&&
name|SymTable
operator|.
name|sh_type
operator|!=
name|ELF
operator|::
name|SHT_DYNSYM
condition|)
return|return
name|createError
argument_list|(
literal|"invalid sh_type"
argument_list|)
return|;
end_if

begin_if
if|if
condition|(
name|V
operator|.
name|size
argument_list|()
operator|!=
operator|(
name|SymTable
operator|.
name|sh_size
operator|/
sizeof|sizeof
argument_list|(
name|Elf_Sym
argument_list|)
operator|)
condition|)
return|return
name|createError
argument_list|(
literal|"invalid section contents size"
argument_list|)
return|;
end_if

begin_return
return|return
name|V
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|Expected
operator|<
name|StringRef
operator|>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getStringTableForSymtab
argument_list|(
argument|const Elf_Shdr&Sec
argument_list|)
specifier|const
block|{
name|auto
name|SectionsOrErr
operator|=
name|sections
argument_list|()
block|;
if|if
condition|(
operator|!
name|SectionsOrErr
condition|)
return|return
name|SectionsOrErr
operator|.
name|takeError
argument_list|()
return|;
end_expr_stmt

begin_return
return|return
name|getStringTableForSymtab
argument_list|(
name|Sec
argument_list|,
operator|*
name|SectionsOrErr
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|Expected
operator|<
name|StringRef
operator|>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getStringTableForSymtab
argument_list|(
argument|const Elf_Shdr&Sec
argument_list|,
argument|Elf_Shdr_Range Sections
argument_list|)
specifier|const
block|{
if|if
condition|(
name|Sec
operator|.
name|sh_type
operator|!=
name|ELF
operator|::
name|SHT_SYMTAB
operator|&&
name|Sec
operator|.
name|sh_type
operator|!=
name|ELF
operator|::
name|SHT_DYNSYM
condition|)
return|return
name|createError
argument_list|(
literal|"invalid sh_type for symbol table, expected SHT_SYMTAB or SHT_DYNSYM"
argument_list|)
return|;
name|auto
name|SectionOrErr
operator|=
name|object
operator|::
name|getSection
operator|<
name|ELFT
operator|>
operator|(
name|Sections
operator|,
name|Sec
operator|.
name|sh_link
operator|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
operator|!
name|SectionOrErr
condition|)
return|return
name|SectionOrErr
operator|.
name|takeError
argument_list|()
return|;
end_if

begin_return
return|return
name|getStringTable
argument_list|(
operator|*
name|SectionOrErr
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|Expected
operator|<
name|StringRef
operator|>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getSectionName
argument_list|(
argument|const Elf_Shdr *Section
argument_list|)
specifier|const
block|{
name|auto
name|SectionsOrErr
operator|=
name|sections
argument_list|()
block|;
if|if
condition|(
operator|!
name|SectionsOrErr
condition|)
return|return
name|SectionsOrErr
operator|.
name|takeError
argument_list|()
return|;
name|auto
name|Table
operator|=
name|getSectionStringTable
argument_list|(
operator|*
name|SectionsOrErr
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
operator|!
name|Table
condition|)
return|return
name|Table
operator|.
name|takeError
argument_list|()
return|;
end_if

begin_return
return|return
name|getSectionName
argument_list|(
name|Section
argument_list|,
operator|*
name|Table
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|Expected
operator|<
name|StringRef
operator|>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getSectionName
argument_list|(
argument|const Elf_Shdr *Section
argument_list|,
argument|StringRef DotShstrtab
argument_list|)
specifier|const
block|{
name|uint32_t
name|Offset
operator|=
name|Section
operator|->
name|sh_name
block|;
if|if
condition|(
name|Offset
operator|==
literal|0
condition|)
return|return
name|StringRef
argument_list|()
return|;
end_expr_stmt

begin_if
if|if
condition|(
name|Offset
operator|>=
name|DotShstrtab
operator|.
name|size
argument_list|()
condition|)
return|return
name|createError
argument_list|(
literal|"invalid string offset"
argument_list|)
return|;
end_if

begin_return
return|return
name|StringRef
argument_list|(
name|DotShstrtab
operator|.
name|data
argument_list|()
operator|+
name|Offset
argument_list|)
return|;
end_return

begin_comment
unit|}
comment|/// This function returns the hash value for a symbol in the .dynsym section
end_comment

begin_comment
comment|/// Name of the API remains consistent as specified in the libelf
end_comment

begin_comment
comment|/// REF : http://www.sco.com/developers/gabi/latest/ch5.dynamic.html#hash
end_comment

begin_function
unit|inline
name|unsigned
name|hashSysV
parameter_list|(
name|StringRef
name|SymbolName
parameter_list|)
block|{
name|unsigned
name|h
init|=
literal|0
decl_stmt|,
name|g
decl_stmt|;
for|for
control|(
name|char
name|C
range|:
name|SymbolName
control|)
block|{
name|h
operator|=
operator|(
name|h
operator|<<
literal|4
operator|)
operator|+
name|C
expr_stmt|;
name|g
operator|=
name|h
operator|&
literal|0xf0000000L
expr_stmt|;
if|if
condition|(
name|g
operator|!=
literal|0
condition|)
name|h
operator|^=
name|g
operator|>>
literal|24
expr_stmt|;
name|h
operator|&=
operator|~
name|g
expr_stmt|;
block|}
return|return
name|h
return|;
block|}
end_function

begin_comment
unit|}
comment|// end namespace object
end_comment

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_OBJECT_ELF_H
end_comment

end_unit

