begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- MachOUniversal.h - Mach-O universal binaries -------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares Mach-O fat/universal binaries.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_OBJECT_MACHOUNIVERSAL_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_OBJECT_MACHOUNIVERSAL_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/Triple.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/Binary.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/Archive.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/MachO.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ErrorOr.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/MachO.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|object
block|{
name|class
name|ObjectFile
decl_stmt|;
name|class
name|MachOUniversalBinary
range|:
name|public
name|Binary
block|{
name|virtual
name|void
name|anchor
argument_list|()
block|;
name|uint32_t
name|NumberOfObjects
block|;
name|public
operator|:
name|class
name|ObjectForArch
block|{
specifier|const
name|MachOUniversalBinary
operator|*
name|Parent
block|;
comment|/// \brief Index of object in the universal binary.
name|uint32_t
name|Index
block|;
comment|/// \brief Descriptor of the object.
name|MachO
operator|::
name|fat_arch
name|Header
block|;
name|public
operator|:
name|ObjectForArch
argument_list|(
argument|const MachOUniversalBinary *Parent
argument_list|,
argument|uint32_t Index
argument_list|)
block|;
name|void
name|clear
argument_list|()
block|{
name|Parent
operator|=
name|nullptr
block|;
name|Index
operator|=
literal|0
block|;     }
name|bool
name|operator
operator|==
operator|(
specifier|const
name|ObjectForArch
operator|&
name|Other
operator|)
specifier|const
block|{
return|return
operator|(
name|Parent
operator|==
name|Other
operator|.
name|Parent
operator|)
operator|&&
operator|(
name|Index
operator|==
name|Other
operator|.
name|Index
operator|)
return|;
block|}
name|ObjectForArch
name|getNext
argument_list|()
specifier|const
block|{
return|return
name|ObjectForArch
argument_list|(
name|Parent
argument_list|,
name|Index
operator|+
literal|1
argument_list|)
return|;
block|}
name|uint32_t
name|getCPUType
argument_list|()
specifier|const
block|{
return|return
name|Header
operator|.
name|cputype
return|;
block|}
name|std
operator|::
name|string
name|getArchTypeName
argument_list|()
specifier|const
block|{
name|Triple
name|T
operator|=
name|MachOObjectFile
operator|::
name|getArch
argument_list|(
name|Header
operator|.
name|cputype
argument_list|,
name|Header
operator|.
name|cpusubtype
argument_list|)
block|;
return|return
name|T
operator|.
name|getArchName
argument_list|()
return|;
block|}
name|ErrorOr
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|ObjectFile
operator|>>
name|getAsObjectFile
argument_list|()
specifier|const
block|;
name|std
operator|::
name|error_code
name|getAsArchive
argument_list|(
argument|std::unique_ptr<Archive>&Result
argument_list|)
specifier|const
block|;   }
block|;
name|class
name|object_iterator
block|{
name|ObjectForArch
name|Obj
block|;
name|public
operator|:
name|object_iterator
argument_list|(
specifier|const
name|ObjectForArch
operator|&
name|Obj
argument_list|)
operator|:
name|Obj
argument_list|(
argument|Obj
argument_list|)
block|{}
specifier|const
name|ObjectForArch
operator|*
name|operator
operator|->
expr|(
block|)
specifier|const
block|{
return|return
operator|&
name|Obj
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|object_iterator
operator|&
name|Other
operator|)
specifier|const
block|{
return|return
name|Obj
operator|==
name|Other
operator|.
name|Obj
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|object_iterator
operator|&
name|Other
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|Other
operator|)
return|;
block|}
name|object_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
comment|// Preincrement
name|Obj
operator|=
name|Obj
operator|.
name|getNext
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
expr|}
block|;
name|MachOUniversalBinary
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|MemoryBuffer
operator|>
name|Source
argument_list|,
name|std
operator|::
name|error_code
operator|&
name|ec
argument_list|)
block|;
specifier|static
name|ErrorOr
operator|<
name|MachOUniversalBinary
operator|*
operator|>
name|create
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|MemoryBuffer
operator|>
name|Source
argument_list|)
block|;
name|object_iterator
name|begin_objects
argument_list|()
specifier|const
block|{
return|return
name|ObjectForArch
argument_list|(
name|this
argument_list|,
literal|0
argument_list|)
return|;
block|}
name|object_iterator
name|end_objects
argument_list|()
specifier|const
block|{
return|return
name|ObjectForArch
argument_list|(
name|nullptr
argument_list|,
literal|0
argument_list|)
return|;
block|}
name|uint32_t
name|getNumberOfObjects
argument_list|()
specifier|const
block|{
return|return
name|NumberOfObjects
return|;
block|}
comment|// Cast methods.
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|Binary const *V
argument_list|)
block|{
return|return
name|V
operator|->
name|isMachOUniversalBinary
argument_list|()
return|;
block|}
name|ErrorOr
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|ObjectFile
operator|>>
name|getObjectForArch
argument_list|(
argument|Triple::ArchType Arch
argument_list|)
specifier|const
block|; }
decl_stmt|;
block|}
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

