begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- Archive.h - ar archive file format -----------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares the ar archive file format class.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_OBJECT_ARCHIVE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_OBJECT_ARCHIVE_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/Optional.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/iterator_range.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/Binary.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Chrono.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Error.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/FileSystem.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/MemoryBuffer.h"
end_include

begin_include
include|#
directive|include
file|<algorithm>
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_include
include|#
directive|include
file|<memory>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|object
block|{
name|class
name|Archive
decl_stmt|;
name|class
name|ArchiveMemberHeader
block|{
name|public
label|:
name|friend
name|class
name|Archive
decl_stmt|;
name|ArchiveMemberHeader
argument_list|(
argument|Archive const *Parent
argument_list|,
argument|const char *RawHeaderPtr
argument_list|,
argument|uint64_t Size
argument_list|,
argument|Error *Err
argument_list|)
empty_stmt|;
comment|// ArchiveMemberHeader() = default;
comment|/// Get the name without looking up long names.
name|Expected
operator|<
name|StringRef
operator|>
name|getRawName
argument_list|()
specifier|const
expr_stmt|;
comment|/// Get the name looking up long names.
name|Expected
operator|<
name|StringRef
operator|>
name|getName
argument_list|(
argument|uint64_t Size
argument_list|)
specifier|const
expr_stmt|;
comment|/// Members are not larger than 4GB.
name|Expected
operator|<
name|uint32_t
operator|>
name|getSize
argument_list|()
specifier|const
expr_stmt|;
name|Expected
operator|<
name|sys
operator|::
name|fs
operator|::
name|perms
operator|>
name|getAccessMode
argument_list|()
specifier|const
expr_stmt|;
name|Expected
operator|<
name|sys
operator|::
name|TimePoint
operator|<
name|std
operator|::
name|chrono
operator|::
name|seconds
operator|>>
name|getLastModified
argument_list|()
specifier|const
expr_stmt|;
name|StringRef
name|getRawLastModified
argument_list|()
specifier|const
block|{
return|return
name|StringRef
argument_list|(
name|ArMemHdr
operator|->
name|LastModified
argument_list|,
sizeof|sizeof
argument_list|(
name|ArMemHdr
operator|->
name|LastModified
argument_list|)
argument_list|)
operator|.
name|rtrim
argument_list|(
literal|' '
argument_list|)
return|;
block|}
name|Expected
operator|<
name|unsigned
operator|>
name|getUID
argument_list|()
specifier|const
expr_stmt|;
name|Expected
operator|<
name|unsigned
operator|>
name|getGID
argument_list|()
specifier|const
expr_stmt|;
comment|// This returns the size of the private struct ArMemHdrType
name|uint64_t
name|getSizeOf
argument_list|()
specifier|const
block|{
return|return
sizeof|sizeof
argument_list|(
name|ArMemHdrType
argument_list|)
return|;
block|}
name|private
label|:
struct|struct
name|ArMemHdrType
block|{
name|char
name|Name
index|[
literal|16
index|]
decl_stmt|;
name|char
name|LastModified
index|[
literal|12
index|]
decl_stmt|;
name|char
name|UID
index|[
literal|6
index|]
decl_stmt|;
name|char
name|GID
index|[
literal|6
index|]
decl_stmt|;
name|char
name|AccessMode
index|[
literal|8
index|]
decl_stmt|;
name|char
name|Size
index|[
literal|10
index|]
decl_stmt|;
comment|///< Size of data, not including header or padding.
name|char
name|Terminator
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
name|Archive
specifier|const
modifier|*
name|Parent
decl_stmt|;
name|ArMemHdrType
specifier|const
modifier|*
name|ArMemHdr
decl_stmt|;
block|}
empty_stmt|;
name|class
name|Archive
range|:
name|public
name|Binary
block|{
name|virtual
name|void
name|anchor
argument_list|()
block|;
name|public
operator|:
name|class
name|Child
block|{
name|friend
name|Archive
block|;
name|friend
name|ArchiveMemberHeader
block|;
specifier|const
name|Archive
operator|*
name|Parent
block|;
name|ArchiveMemberHeader
name|Header
block|;
comment|/// \brief Includes header but not padding byte.
name|StringRef
name|Data
block|;
comment|/// \brief Offset from Data to the start of the file.
name|uint16_t
name|StartOfFile
block|;
name|Expected
operator|<
name|bool
operator|>
name|isThinMember
argument_list|()
specifier|const
block|;
name|public
operator|:
name|Child
argument_list|(
specifier|const
name|Archive
operator|*
name|Parent
argument_list|,
specifier|const
name|char
operator|*
name|Start
argument_list|,
name|Error
operator|*
name|Err
argument_list|)
block|;
name|Child
argument_list|(
argument|const Archive *Parent
argument_list|,
argument|StringRef Data
argument_list|,
argument|uint16_t StartOfFile
argument_list|)
block|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|Child
operator|&
name|other
operator|)
specifier|const
block|{
name|assert
argument_list|(
operator|!
name|Parent
operator|||
operator|!
name|other
operator|.
name|Parent
operator|||
name|Parent
operator|==
name|other
operator|.
name|Parent
argument_list|)
block|;
return|return
name|Data
operator|.
name|begin
argument_list|()
operator|==
name|other
operator|.
name|Data
operator|.
name|begin
argument_list|()
return|;
block|}
specifier|const
name|Archive
operator|*
name|getParent
argument_list|()
specifier|const
block|{
return|return
name|Parent
return|;
block|}
name|Expected
operator|<
name|Child
operator|>
name|getNext
argument_list|()
specifier|const
block|;
name|Expected
operator|<
name|StringRef
operator|>
name|getName
argument_list|()
specifier|const
block|;
name|Expected
operator|<
name|std
operator|::
name|string
operator|>
name|getFullName
argument_list|()
specifier|const
block|;
name|Expected
operator|<
name|StringRef
operator|>
name|getRawName
argument_list|()
specifier|const
block|{
return|return
name|Header
operator|.
name|getRawName
argument_list|()
return|;
block|}
name|Expected
operator|<
name|sys
operator|::
name|TimePoint
operator|<
name|std
operator|::
name|chrono
operator|::
name|seconds
operator|>>
name|getLastModified
argument_list|()
specifier|const
block|{
return|return
name|Header
operator|.
name|getLastModified
argument_list|()
return|;
block|}
name|StringRef
name|getRawLastModified
argument_list|()
specifier|const
block|{
return|return
name|Header
operator|.
name|getRawLastModified
argument_list|()
return|;
block|}
name|Expected
operator|<
name|unsigned
operator|>
name|getUID
argument_list|()
specifier|const
block|{
return|return
name|Header
operator|.
name|getUID
argument_list|()
return|;
block|}
name|Expected
operator|<
name|unsigned
operator|>
name|getGID
argument_list|()
specifier|const
block|{
return|return
name|Header
operator|.
name|getGID
argument_list|()
return|;
block|}
name|Expected
operator|<
name|sys
operator|::
name|fs
operator|::
name|perms
operator|>
name|getAccessMode
argument_list|()
specifier|const
block|{
return|return
name|Header
operator|.
name|getAccessMode
argument_list|()
return|;
block|}
comment|/// \return the size of the archive member without the header or padding.
name|Expected
operator|<
name|uint64_t
operator|>
name|getSize
argument_list|()
specifier|const
block|;
comment|/// \return the size in the archive header for this member.
name|Expected
operator|<
name|uint64_t
operator|>
name|getRawSize
argument_list|()
specifier|const
block|;
name|Expected
operator|<
name|StringRef
operator|>
name|getBuffer
argument_list|()
specifier|const
block|;
name|uint64_t
name|getChildOffset
argument_list|()
specifier|const
block|;
name|Expected
operator|<
name|MemoryBufferRef
operator|>
name|getMemoryBufferRef
argument_list|()
specifier|const
block|;
name|Expected
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|Binary
operator|>>
name|getAsBinary
argument_list|(
argument|LLVMContext *Context = nullptr
argument_list|)
specifier|const
block|;   }
block|;
name|class
name|child_iterator
block|{
name|Child
name|C
block|;
name|Error
operator|*
name|E
operator|=
name|nullptr
block|;
name|public
operator|:
name|child_iterator
argument_list|()
operator|:
name|C
argument_list|(
argument|Child(nullptr, nullptr, nullptr)
argument_list|)
block|{}
name|child_iterator
argument_list|(
specifier|const
name|Child
operator|&
name|C
argument_list|,
name|Error
operator|*
name|E
argument_list|)
operator|:
name|C
argument_list|(
name|C
argument_list|)
block|,
name|E
argument_list|(
argument|E
argument_list|)
block|{}
specifier|const
name|Child
operator|*
name|operator
operator|->
expr|(
block|)
specifier|const
block|{
return|return
operator|&
name|C
return|;
block|}
specifier|const
name|Child
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|C
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|child_iterator
operator|&
name|other
operator|)
specifier|const
block|{
comment|// Ignore errors here: If an error occurred during increment then getNext
comment|// will have been set to child_end(), and the following comparison should
comment|// do the right thing.
return|return
name|C
operator|==
name|other
operator|.
name|C
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|child_iterator
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|other
operator|)
return|;
block|}
comment|// Code in loops with child_iterators must check for errors on each loop
comment|// iteration.  And if there is an error break out of the loop.
name|child_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
comment|// Preincrement
name|assert
argument_list|(
name|E
operator|&&
literal|"Can't increment iterator with no Error attached"
argument_list|)
block|;
name|ErrorAsOutParameter
name|ErrAsOutParam
argument_list|(
name|E
argument_list|)
block|;
if|if
condition|(
name|auto
name|ChildOrErr
init|=
name|C
operator|.
name|getNext
argument_list|()
condition|)
name|C
operator|=
operator|*
name|ChildOrErr
expr_stmt|;
else|else
block|{
name|C
operator|=
name|C
operator|.
name|getParent
argument_list|()
operator|->
name|child_end
argument_list|()
operator|.
name|C
expr_stmt|;
operator|*
name|E
operator|=
name|ChildOrErr
operator|.
name|takeError
argument_list|()
expr_stmt|;
name|E
operator|=
name|nullptr
expr_stmt|;
block|}
return|return
operator|*
name|this
return|;
block|}
expr|}
block|;
name|class
name|Symbol
block|{
specifier|const
name|Archive
operator|*
name|Parent
block|;
name|uint32_t
name|SymbolIndex
block|;
name|uint32_t
name|StringIndex
block|;
comment|// Extra index to the string.
name|public
operator|:
name|Symbol
argument_list|(
argument|const Archive *p
argument_list|,
argument|uint32_t symi
argument_list|,
argument|uint32_t stri
argument_list|)
operator|:
name|Parent
argument_list|(
name|p
argument_list|)
block|,
name|SymbolIndex
argument_list|(
name|symi
argument_list|)
block|,
name|StringIndex
argument_list|(
argument|stri
argument_list|)
block|{}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|Symbol
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|(
name|Parent
operator|==
name|other
operator|.
name|Parent
operator|)
operator|&&
operator|(
name|SymbolIndex
operator|==
name|other
operator|.
name|SymbolIndex
operator|)
return|;
block|}
name|StringRef
name|getName
argument_list|()
specifier|const
block|;
name|Expected
operator|<
name|Child
operator|>
name|getMember
argument_list|()
specifier|const
block|;
name|Symbol
name|getNext
argument_list|()
specifier|const
block|;   }
block|;
name|class
name|symbol_iterator
block|{
name|Symbol
name|symbol
block|;
name|public
operator|:
name|symbol_iterator
argument_list|(
specifier|const
name|Symbol
operator|&
name|s
argument_list|)
operator|:
name|symbol
argument_list|(
argument|s
argument_list|)
block|{}
specifier|const
name|Symbol
operator|*
name|operator
operator|->
expr|(
block|)
specifier|const
block|{
return|return
operator|&
name|symbol
return|;
block|}
specifier|const
name|Symbol
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|symbol
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|symbol_iterator
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|symbol
operator|==
name|other
operator|.
name|symbol
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|symbol_iterator
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|other
operator|)
return|;
block|}
name|symbol_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
comment|// Preincrement
name|symbol
operator|=
name|symbol
operator|.
name|getNext
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
expr|}
block|;
name|Archive
argument_list|(
argument|MemoryBufferRef Source
argument_list|,
argument|Error&Err
argument_list|)
block|;
specifier|static
name|Expected
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|Archive
operator|>>
name|create
argument_list|(
argument|MemoryBufferRef Source
argument_list|)
block|;    enum
name|Kind
block|{
name|K_GNU
block|,
name|K_MIPS64
block|,
name|K_BSD
block|,
name|K_DARWIN
block|,
name|K_DARWIN64
block|,
name|K_COFF
block|}
block|;
name|Kind
name|kind
argument_list|()
specifier|const
block|{
return|return
operator|(
name|Kind
operator|)
name|Format
return|;
block|}
name|bool
name|isThin
argument_list|()
specifier|const
block|{
return|return
name|IsThin
return|;
block|}
name|child_iterator
name|child_begin
argument_list|(
argument|Error&Err
argument_list|,
argument|bool SkipInternal = true
argument_list|)
specifier|const
block|;
name|child_iterator
name|child_end
argument_list|()
specifier|const
block|;
name|iterator_range
operator|<
name|child_iterator
operator|>
name|children
argument_list|(
argument|Error&Err
argument_list|,
argument|bool SkipInternal = true
argument_list|)
specifier|const
block|{
return|return
name|make_range
argument_list|(
name|child_begin
argument_list|(
name|Err
argument_list|,
name|SkipInternal
argument_list|)
argument_list|,
name|child_end
argument_list|()
argument_list|)
return|;
block|}
name|symbol_iterator
name|symbol_begin
argument_list|()
specifier|const
block|;
name|symbol_iterator
name|symbol_end
argument_list|()
specifier|const
block|;
name|iterator_range
operator|<
name|symbol_iterator
operator|>
name|symbols
argument_list|()
specifier|const
block|{
return|return
name|make_range
argument_list|(
name|symbol_begin
argument_list|()
argument_list|,
name|symbol_end
argument_list|()
argument_list|)
return|;
block|}
comment|// Cast methods.
specifier|static
name|bool
name|classof
argument_list|(
argument|Binary const *v
argument_list|)
block|{
return|return
name|v
operator|->
name|isArchive
argument_list|()
return|;
block|}
comment|// check if a symbol is in the archive
name|Expected
operator|<
name|Optional
operator|<
name|Child
operator|>>
name|findSym
argument_list|(
argument|StringRef name
argument_list|)
specifier|const
block|;
name|bool
name|isEmpty
argument_list|()
specifier|const
block|;
name|bool
name|hasSymbolTable
argument_list|()
specifier|const
block|;
name|StringRef
name|getSymbolTable
argument_list|()
specifier|const
block|{
return|return
name|SymbolTable
return|;
block|}
name|StringRef
name|getStringTable
argument_list|()
specifier|const
block|{
return|return
name|StringTable
return|;
block|}
name|uint32_t
name|getNumberOfSymbols
argument_list|()
specifier|const
block|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|MemoryBuffer
operator|>>
name|takeThinBuffers
argument_list|()
block|{
return|return
name|std
operator|::
name|move
argument_list|(
name|ThinBuffers
argument_list|)
return|;
block|}
name|private
operator|:
name|StringRef
name|SymbolTable
block|;
name|StringRef
name|StringTable
block|;
name|StringRef
name|FirstRegularData
block|;
name|uint16_t
name|FirstRegularStartOfFile
operator|=
operator|-
literal|1
block|;
name|void
name|setFirstRegular
argument_list|(
specifier|const
name|Child
operator|&
name|C
argument_list|)
block|;
name|unsigned
name|Format
operator|:
literal|3
block|;
name|unsigned
name|IsThin
operator|:
literal|1
block|;
name|mutable
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|MemoryBuffer
operator|>>
name|ThinBuffers
block|; }
decl_stmt|;
block|}
comment|// end namespace object
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_OBJECT_ARCHIVE_H
end_comment

end_unit

