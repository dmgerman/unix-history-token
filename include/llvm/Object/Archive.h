begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- Archive.h - ar archive file format -----------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares the ar archive file format class.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_OBJECT_ARCHIVE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_OBJECT_ARCHIVE_H
end_define

begin_include
include|#
directive|include
file|"llvm/Object/Binary.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/DataTypes.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|object
block|{
name|class
name|Archive
range|:
name|public
name|Binary
block|{
name|virtual
name|void
name|anchor
argument_list|()
block|;
name|public
operator|:
name|class
name|Child
block|{
specifier|const
name|Archive
operator|*
name|Parent
block|;
name|StringRef
name|Data
block|;
name|public
operator|:
name|Child
argument_list|(
argument|const Archive *p
argument_list|,
argument|StringRef d
argument_list|)
operator|:
name|Parent
argument_list|(
name|p
argument_list|)
block|,
name|Data
argument_list|(
argument|d
argument_list|)
block|{}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|Child
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|(
name|Parent
operator|==
name|other
operator|.
name|Parent
operator|)
operator|&&
operator|(
name|Data
operator|.
name|begin
argument_list|()
operator|==
name|other
operator|.
name|Data
operator|.
name|begin
argument_list|()
operator|)
return|;
block|}
name|bool
name|operator
operator|<
operator|(
specifier|const
name|Child
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|Data
operator|.
name|begin
argument_list|()
operator|<
name|other
operator|.
name|Data
operator|.
name|begin
argument_list|()
return|;
block|}
name|Child
name|getNext
argument_list|()
specifier|const
block|;
name|error_code
name|getName
argument_list|(
argument|StringRef&Result
argument_list|)
specifier|const
block|;
name|int
name|getLastModified
argument_list|()
specifier|const
block|;
name|int
name|getUID
argument_list|()
specifier|const
block|;
name|int
name|getGID
argument_list|()
specifier|const
block|;
name|int
name|getAccessMode
argument_list|()
specifier|const
block|;
comment|///! Return the size of the archive member without the header or padding.
name|uint64_t
name|getSize
argument_list|()
specifier|const
block|;
name|MemoryBuffer
operator|*
name|getBuffer
argument_list|()
specifier|const
block|;
name|error_code
name|getAsBinary
argument_list|(
argument|OwningPtr<Binary>&Result
argument_list|)
specifier|const
block|;   }
block|;
name|class
name|child_iterator
block|{
name|Child
name|child
block|;
name|public
operator|:
name|child_iterator
argument_list|()
operator|:
name|child
argument_list|(
argument|Child(
literal|0
argument|, StringRef())
argument_list|)
block|{}
name|child_iterator
argument_list|(
specifier|const
name|Child
operator|&
name|c
argument_list|)
operator|:
name|child
argument_list|(
argument|c
argument_list|)
block|{}
specifier|const
name|Child
operator|*
name|operator
operator|->
expr|(
block|)
specifier|const
block|{
return|return
operator|&
name|child
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|child_iterator
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|child
operator|==
name|other
operator|.
name|child
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|child_iterator
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|other
operator|)
return|;
block|}
name|bool
name|operator
operator|<
operator|(
specifier|const
name|child_iterator
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|child
operator|<
name|other
operator|.
name|child
return|;
block|}
name|child_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
comment|// Preincrement
name|child
operator|=
name|child
operator|.
name|getNext
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
expr|}
block|;
name|class
name|Symbol
block|{
specifier|const
name|Archive
operator|*
name|Parent
block|;
name|uint32_t
name|SymbolIndex
block|;
name|uint32_t
name|StringIndex
block|;
comment|// Extra index to the string.
name|public
operator|:
name|bool
name|operator
operator|==
operator|(
specifier|const
name|Symbol
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|(
name|Parent
operator|==
name|other
operator|.
name|Parent
operator|)
operator|&&
operator|(
name|SymbolIndex
operator|==
name|other
operator|.
name|SymbolIndex
operator|)
return|;
block|}
name|Symbol
argument_list|(
argument|const Archive *p
argument_list|,
argument|uint32_t symi
argument_list|,
argument|uint32_t stri
argument_list|)
operator|:
name|Parent
argument_list|(
name|p
argument_list|)
block|,
name|SymbolIndex
argument_list|(
name|symi
argument_list|)
block|,
name|StringIndex
argument_list|(
argument|stri
argument_list|)
block|{}
name|error_code
name|getName
argument_list|(
argument|StringRef&Result
argument_list|)
specifier|const
block|;
name|error_code
name|getMember
argument_list|(
argument|child_iterator&Result
argument_list|)
specifier|const
block|;
name|Symbol
name|getNext
argument_list|()
specifier|const
block|;   }
block|;
name|class
name|symbol_iterator
block|{
name|Symbol
name|symbol
block|;
name|public
operator|:
name|symbol_iterator
argument_list|(
specifier|const
name|Symbol
operator|&
name|s
argument_list|)
operator|:
name|symbol
argument_list|(
argument|s
argument_list|)
block|{}
specifier|const
name|Symbol
operator|*
name|operator
operator|->
expr|(
block|)
specifier|const
block|{
return|return
operator|&
name|symbol
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|symbol_iterator
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|symbol
operator|==
name|other
operator|.
name|symbol
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|symbol_iterator
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|other
operator|)
return|;
block|}
name|symbol_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
comment|// Preincrement
name|symbol
operator|=
name|symbol
operator|.
name|getNext
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
expr|}
block|;
name|Archive
argument_list|(
name|MemoryBuffer
operator|*
name|source
argument_list|,
name|error_code
operator|&
name|ec
argument_list|)
block|;
name|child_iterator
name|begin_children
argument_list|(
argument|bool skip_internal = true
argument_list|)
specifier|const
block|;
name|child_iterator
name|end_children
argument_list|()
specifier|const
block|;
name|symbol_iterator
name|begin_symbols
argument_list|()
specifier|const
block|;
name|symbol_iterator
name|end_symbols
argument_list|()
specifier|const
block|;
comment|// Cast methods.
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|Archive const *v
argument_list|)
block|{
return|return
name|true
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|Binary const *v
argument_list|)
block|{
return|return
name|v
operator|->
name|isArchive
argument_list|()
return|;
block|}
name|private
operator|:
name|child_iterator
name|SymbolTable
block|;
name|child_iterator
name|StringTable
block|; }
decl_stmt|;
block|}
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

