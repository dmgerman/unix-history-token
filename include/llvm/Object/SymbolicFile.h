begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- SymbolicFile.h - Interface that only provides symbols ----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares the SymbolicFile interface.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_OBJECT_SYMBOLICFILE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_OBJECT_SYMBOLICFILE_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/iterator_range.h"
end_include

begin_include
include|#
directive|include
file|"llvm/BinaryFormat/Magic.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/Binary.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Error.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/FileSystem.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Format.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/MemoryBuffer.h"
end_include

begin_include
include|#
directive|include
file|<cinttypes>
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_include
include|#
directive|include
file|<cstring>
end_include

begin_include
include|#
directive|include
file|<iterator>
end_include

begin_include
include|#
directive|include
file|<memory>
end_include

begin_include
include|#
directive|include
file|<system_error>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|object
block|{
union|union
name|DataRefImpl
block|{
comment|// This entire union should probably be a
comment|// char[max(8, sizeof(uintptr_t))] and require the impl to cast.
struct|struct
block|{
name|uint32_t
name|a
decl_stmt|,
name|b
decl_stmt|;
block|}
name|d
struct|;
name|uintptr_t
name|p
decl_stmt|;
name|DataRefImpl
argument_list|()
block|{
name|std
operator|::
name|memset
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|DataRefImpl
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
union|;
name|template
operator|<
name|typename
name|OStream
operator|>
name|OStream
operator|&
name|operator
operator|<<
operator|(
name|OStream
operator|&
name|OS
operator|,
specifier|const
name|DataRefImpl
operator|&
name|D
operator|)
block|{
name|OS
operator|<<
literal|"("
operator|<<
name|format
argument_list|(
literal|"0x%08"
name|PRIxPTR
argument_list|,
name|D
operator|.
name|p
argument_list|)
operator|<<
literal|" ("
operator|<<
name|format
argument_list|(
literal|"0x%08x"
argument_list|,
name|D
operator|.
name|d
operator|.
name|a
argument_list|)
operator|<<
literal|", "
operator|<<
name|format
argument_list|(
literal|"0x%08x"
argument_list|,
name|D
operator|.
name|d
operator|.
name|b
argument_list|)
operator|<<
literal|"))"
block|;
return|return
name|OS
return|;
block|}
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|DataRefImpl
operator|&
name|a
operator|,
specifier|const
name|DataRefImpl
operator|&
name|b
operator|)
block|{
comment|// Check bitwise identical. This is the only legal way to compare a union w/o
comment|// knowing which member is in use.
return|return
name|std
operator|::
name|memcmp
argument_list|(
operator|&
name|a
argument_list|,
operator|&
name|b
argument_list|,
sizeof|sizeof
argument_list|(
name|DataRefImpl
argument_list|)
argument_list|)
operator|==
literal|0
return|;
block|}
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|DataRefImpl
operator|&
name|a
operator|,
specifier|const
name|DataRefImpl
operator|&
name|b
operator|)
block|{
return|return
operator|!
name|operator
operator|==
operator|(
name|a
operator|,
name|b
operator|)
return|;
block|}
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|DataRefImpl
operator|&
name|a
operator|,
specifier|const
name|DataRefImpl
operator|&
name|b
operator|)
block|{
comment|// Check bitwise identical. This is the only legal way to compare a union w/o
comment|// knowing which member is in use.
return|return
name|std
operator|::
name|memcmp
argument_list|(
operator|&
name|a
argument_list|,
operator|&
name|b
argument_list|,
sizeof|sizeof
argument_list|(
name|DataRefImpl
argument_list|)
argument_list|)
operator|<
literal|0
return|;
block|}
name|template
operator|<
name|class
name|content_type
operator|>
name|class
name|content_iterator
operator|:
name|public
name|std
operator|::
name|iterator
operator|<
name|std
operator|::
name|forward_iterator_tag
operator|,
name|content_type
operator|>
block|{
name|content_type
name|Current
block|;
name|public
operator|:
name|content_iterator
argument_list|(
argument|content_type symb
argument_list|)
operator|:
name|Current
argument_list|(
argument|std::move(symb)
argument_list|)
block|{}
specifier|const
name|content_type
operator|*
name|operator
operator|->
expr|(
block|)
specifier|const
block|{
return|return
operator|&
name|Current
return|;
block|}
specifier|const
name|content_type
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|Current
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|content_iterator
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|Current
operator|==
name|other
operator|.
name|Current
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|content_iterator
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|other
operator|)
return|;
block|}
name|content_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
comment|// preincrement
name|Current
operator|.
name|moveNext
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
block|}
empty_stmt|;
name|class
name|SymbolicFile
decl_stmt|;
comment|/// This is a value type class that represents a single symbol in the list of
comment|/// symbols in the object file.
name|class
name|BasicSymbolRef
block|{
name|DataRefImpl
name|SymbolPimpl
decl_stmt|;
specifier|const
name|SymbolicFile
modifier|*
name|OwningObject
init|=
name|nullptr
decl_stmt|;
name|public
label|:
enum|enum
name|Flags
enum|:
name|unsigned
block|{
name|SF_None
init|=
literal|0
block|,
name|SF_Undefined
init|=
literal|1U
operator|<<
literal|0
block|,
comment|// Symbol is defined in another object file
name|SF_Global
init|=
literal|1U
operator|<<
literal|1
block|,
comment|// Global symbol
name|SF_Weak
init|=
literal|1U
operator|<<
literal|2
block|,
comment|// Weak symbol
name|SF_Absolute
init|=
literal|1U
operator|<<
literal|3
block|,
comment|// Absolute symbol
name|SF_Common
init|=
literal|1U
operator|<<
literal|4
block|,
comment|// Symbol has common linkage
name|SF_Indirect
init|=
literal|1U
operator|<<
literal|5
block|,
comment|// Symbol is an alias to another symbol
name|SF_Exported
init|=
literal|1U
operator|<<
literal|6
block|,
comment|// Symbol is visible to other DSOs
name|SF_FormatSpecific
init|=
literal|1U
operator|<<
literal|7
block|,
comment|// Specific to the object file format
comment|// (e.g. section symbols)
name|SF_Thumb
init|=
literal|1U
operator|<<
literal|8
block|,
comment|// Thumb symbol in a 32-bit ARM binary
name|SF_Hidden
init|=
literal|1U
operator|<<
literal|9
block|,
comment|// Symbol has hidden visibility
name|SF_Const
init|=
literal|1U
operator|<<
literal|10
block|,
comment|// Symbol value is constant
name|SF_Executable
init|=
literal|1U
operator|<<
literal|11
block|,
comment|// Symbol points to an executable section
comment|// (IR only)
block|}
enum|;
name|BasicSymbolRef
argument_list|()
operator|=
expr|default
expr_stmt|;
name|BasicSymbolRef
argument_list|(
argument|DataRefImpl SymbolP
argument_list|,
argument|const SymbolicFile *Owner
argument_list|)
empty_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|BasicSymbolRef
operator|&
name|Other
operator|)
specifier|const
expr_stmt|;
name|bool
name|operator
operator|<
operator|(
specifier|const
name|BasicSymbolRef
operator|&
name|Other
operator|)
specifier|const
expr_stmt|;
name|void
name|moveNext
parameter_list|()
function_decl|;
name|std
operator|::
name|error_code
name|printName
argument_list|(
argument|raw_ostream&OS
argument_list|)
specifier|const
expr_stmt|;
comment|/// Get symbol flags (bitwise OR of SymbolRef::Flags)
name|uint32_t
name|getFlags
argument_list|()
specifier|const
expr_stmt|;
name|DataRefImpl
name|getRawDataRefImpl
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|SymbolicFile
operator|*
name|getObject
argument_list|()
specifier|const
expr_stmt|;
block|}
empty_stmt|;
name|using
name|basic_symbol_iterator
init|=
name|content_iterator
operator|<
name|BasicSymbolRef
operator|>
decl_stmt|;
name|class
name|SymbolicFile
range|:
name|public
name|Binary
block|{
name|public
operator|:
name|SymbolicFile
argument_list|(
argument|unsigned int Type
argument_list|,
argument|MemoryBufferRef Source
argument_list|)
block|;
operator|~
name|SymbolicFile
argument_list|()
name|override
block|;
comment|// virtual interface.
name|virtual
name|void
name|moveSymbolNext
argument_list|(
argument|DataRefImpl&Symb
argument_list|)
specifier|const
operator|=
literal|0
block|;
name|virtual
name|std
operator|::
name|error_code
name|printSymbolName
argument_list|(
argument|raw_ostream&OS
argument_list|,
argument|DataRefImpl Symb
argument_list|)
specifier|const
operator|=
literal|0
block|;
name|virtual
name|uint32_t
name|getSymbolFlags
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
operator|=
literal|0
block|;
name|virtual
name|basic_symbol_iterator
name|symbol_begin
argument_list|()
specifier|const
operator|=
literal|0
block|;
name|virtual
name|basic_symbol_iterator
name|symbol_end
argument_list|()
specifier|const
operator|=
literal|0
block|;
comment|// convenience wrappers.
name|using
name|basic_symbol_iterator_range
operator|=
name|iterator_range
operator|<
name|basic_symbol_iterator
operator|>
block|;
name|basic_symbol_iterator_range
name|symbols
argument_list|()
specifier|const
block|{
return|return
name|basic_symbol_iterator_range
argument_list|(
name|symbol_begin
argument_list|()
argument_list|,
name|symbol_end
argument_list|()
argument_list|)
return|;
block|}
comment|// construction aux.
specifier|static
name|Expected
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|SymbolicFile
operator|>>
name|createSymbolicFile
argument_list|(
argument|MemoryBufferRef Object
argument_list|,
argument|llvm::file_magic Type
argument_list|,
argument|LLVMContext *Context
argument_list|)
block|;
specifier|static
name|Expected
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|SymbolicFile
operator|>>
name|createSymbolicFile
argument_list|(
argument|MemoryBufferRef Object
argument_list|)
block|{
return|return
name|createSymbolicFile
argument_list|(
name|Object
argument_list|,
name|llvm
operator|::
name|file_magic
operator|::
name|unknown
argument_list|,
name|nullptr
argument_list|)
return|;
block|}
specifier|static
name|Expected
operator|<
name|OwningBinary
operator|<
name|SymbolicFile
operator|>>
name|createSymbolicFile
argument_list|(
argument|StringRef ObjectPath
argument_list|)
block|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const Binary *v
argument_list|)
block|{
return|return
name|v
operator|->
name|isSymbolic
argument_list|()
return|;
block|}
expr|}
block|;
specifier|inline
name|BasicSymbolRef
operator|::
name|BasicSymbolRef
argument_list|(
argument|DataRefImpl SymbolP
argument_list|,
argument|const SymbolicFile *Owner
argument_list|)
operator|:
name|SymbolPimpl
argument_list|(
name|SymbolP
argument_list|)
block|,
name|OwningObject
argument_list|(
argument|Owner
argument_list|)
block|{}
specifier|inline
name|bool
name|BasicSymbolRef
operator|::
name|operator
operator|==
operator|(
specifier|const
name|BasicSymbolRef
operator|&
name|Other
operator|)
specifier|const
block|{
return|return
name|SymbolPimpl
operator|==
name|Other
operator|.
name|SymbolPimpl
return|;
block|}
specifier|inline
name|bool
name|BasicSymbolRef
operator|::
name|operator
operator|<
operator|(
specifier|const
name|BasicSymbolRef
operator|&
name|Other
operator|)
specifier|const
block|{
return|return
name|SymbolPimpl
operator|<
name|Other
operator|.
name|SymbolPimpl
return|;
block|}
specifier|inline
name|void
name|BasicSymbolRef
operator|::
name|moveNext
argument_list|()
block|{
return|return
name|OwningObject
operator|->
name|moveSymbolNext
argument_list|(
name|SymbolPimpl
argument_list|)
return|;
block|}
specifier|inline
name|std
operator|::
name|error_code
name|BasicSymbolRef
operator|::
name|printName
argument_list|(
argument|raw_ostream&OS
argument_list|)
specifier|const
block|{
return|return
name|OwningObject
operator|->
name|printSymbolName
argument_list|(
name|OS
argument_list|,
name|SymbolPimpl
argument_list|)
return|;
block|}
specifier|inline
name|uint32_t
name|BasicSymbolRef
operator|::
name|getFlags
argument_list|()
specifier|const
block|{
return|return
name|OwningObject
operator|->
name|getSymbolFlags
argument_list|(
name|SymbolPimpl
argument_list|)
return|;
block|}
specifier|inline
name|DataRefImpl
name|BasicSymbolRef
operator|::
name|getRawDataRefImpl
argument_list|()
specifier|const
block|{
return|return
name|SymbolPimpl
return|;
block|}
specifier|inline
specifier|const
name|SymbolicFile
operator|*
name|BasicSymbolRef
operator|::
name|getObject
argument_list|()
specifier|const
block|{
return|return
name|OwningObject
return|;
block|}
expr|}
comment|// end namespace object
expr|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_OBJECT_SYMBOLICFILE_H
end_comment

end_unit

