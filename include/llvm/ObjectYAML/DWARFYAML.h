begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- DWARFYAML.h - DWARF YAMLIO implementation ----------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|/// \brief This file declares classes for handling the YAML representation
end_comment

begin_comment
comment|/// of DWARF Debug Info.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_OBJECTYAML_DWARFYAML_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_OBJECTYAML_DWARFYAML_H
end_define

begin_include
include|#
directive|include
file|"llvm/ObjectYAML/YAML.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Dwarf.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|DWARFYAML
block|{
struct|struct
name|AttributeAbbrev
block|{
name|llvm
operator|::
name|dwarf
operator|::
name|Attribute
name|Attribute
expr_stmt|;
name|llvm
operator|::
name|dwarf
operator|::
name|Form
name|Form
expr_stmt|;
block|}
struct|;
struct|struct
name|Abbrev
block|{
name|llvm
operator|::
name|yaml
operator|::
name|Hex32
name|Code
expr_stmt|;
name|llvm
operator|::
name|dwarf
operator|::
name|Tag
name|Tag
expr_stmt|;
name|llvm
operator|::
name|dwarf
operator|::
name|Constants
name|Children
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|AttributeAbbrev
operator|>
name|Attributes
expr_stmt|;
block|}
struct|;
struct|struct
name|ARangeDescriptor
block|{
name|llvm
operator|::
name|yaml
operator|::
name|Hex64
name|Address
expr_stmt|;
name|uint64_t
name|Length
decl_stmt|;
block|}
struct|;
struct|struct
name|ARange
block|{
name|uint32_t
name|Length
decl_stmt|;
name|uint16_t
name|Version
decl_stmt|;
name|uint32_t
name|CuOffset
decl_stmt|;
name|uint8_t
name|AddrSize
decl_stmt|;
name|uint8_t
name|SegSize
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|ARangeDescriptor
operator|>
name|Descriptors
expr_stmt|;
block|}
struct|;
struct|struct
name|PubEntry
block|{
name|llvm
operator|::
name|yaml
operator|::
name|Hex32
name|DieOffset
expr_stmt|;
name|llvm
operator|::
name|yaml
operator|::
name|Hex8
name|Descriptor
expr_stmt|;
name|StringRef
name|Name
decl_stmt|;
block|}
struct|;
struct|struct
name|PubSection
block|{
name|PubSection
argument_list|()
operator|:
name|IsGNUStyle
argument_list|(
argument|false
argument_list|)
block|{}
name|uint32_t
name|Length
expr_stmt|;
name|uint16_t
name|Version
decl_stmt|;
name|uint32_t
name|UnitOffset
decl_stmt|;
name|uint32_t
name|UnitSize
decl_stmt|;
name|bool
name|IsGNUStyle
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|PubEntry
operator|>
name|Entries
expr_stmt|;
block|}
struct|;
struct|struct
name|FormValue
block|{
name|llvm
operator|::
name|yaml
operator|::
name|Hex64
name|Value
expr_stmt|;
name|StringRef
name|CStr
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|llvm
operator|::
name|yaml
operator|::
name|Hex8
operator|>
name|BlockData
expr_stmt|;
block|}
struct|;
struct|struct
name|Entry
block|{
name|llvm
operator|::
name|yaml
operator|::
name|Hex32
name|AbbrCode
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|FormValue
operator|>
name|Values
expr_stmt|;
block|}
struct|;
struct|struct
name|Unit
block|{
name|uint32_t
name|Length
decl_stmt|;
name|uint16_t
name|Version
decl_stmt|;
name|uint32_t
name|AbbrOffset
decl_stmt|;
name|uint8_t
name|AddrSize
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|Entry
operator|>
name|Entries
expr_stmt|;
block|}
struct|;
struct|struct
name|Data
block|{
name|bool
name|IsLittleEndian
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|Abbrev
operator|>
name|AbbrevDecls
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|StringRef
operator|>
name|DebugStrings
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|ARange
operator|>
name|ARanges
expr_stmt|;
name|PubSection
name|PubNames
decl_stmt|;
name|PubSection
name|PubTypes
decl_stmt|;
name|PubSection
name|GNUPubNames
decl_stmt|;
name|PubSection
name|GNUPubTypes
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|Unit
operator|>
name|CompileUnits
expr_stmt|;
name|bool
name|isEmpty
argument_list|()
specifier|const
expr_stmt|;
block|}
struct|;
block|}
comment|// namespace llvm::DWARFYAML
block|}
end_decl_stmt

begin_comment
comment|// namespace llvm
end_comment

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|uint8_t
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::StringRef
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::yaml::Hex8
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::DWARFYAML::AttributeAbbrev
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::DWARFYAML::Abbrev
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::DWARFYAML::ARangeDescriptor
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::DWARFYAML::ARange
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::DWARFYAML::PubEntry
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::DWARFYAML::Unit
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::DWARFYAML::FormValue
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::DWARFYAML::Entry
argument_list|)
end_macro

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|yaml
block|{
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|DWARFYAML
operator|::
name|Data
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|DWARFYAML
operator|::
name|Data
operator|&
name|DWARF
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|DWARFYAML
operator|::
name|Abbrev
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|DWARFYAML
operator|::
name|Abbrev
operator|&
name|Abbrev
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|DWARFYAML
operator|::
name|AttributeAbbrev
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|DWARFYAML
operator|::
name|AttributeAbbrev
operator|&
name|AttAbbrev
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|DWARFYAML
operator|::
name|ARangeDescriptor
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|DWARFYAML
operator|::
name|ARangeDescriptor
operator|&
name|Descriptor
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|DWARFYAML
operator|::
name|ARange
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|DWARFYAML
operator|::
name|ARange
operator|&
name|Range
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|DWARFYAML
operator|::
name|PubEntry
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|DWARFYAML
operator|::
name|PubEntry
operator|&
name|Entry
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|DWARFYAML
operator|::
name|PubSection
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|DWARFYAML
operator|::
name|PubSection
operator|&
name|Section
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|DWARFYAML
operator|::
name|Unit
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|DWARFYAML
operator|::
name|Unit
operator|&
name|Unit
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|DWARFYAML
operator|::
name|Entry
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|DWARFYAML
operator|::
name|Entry
operator|&
name|Entry
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|DWARFYAML
operator|::
name|FormValue
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|DWARFYAML
operator|::
name|FormValue
operator|&
name|FormValue
argument_list|)
block|; }
expr_stmt|;
define|#
directive|define
name|HANDLE_DW_TAG
parameter_list|(
name|unused
parameter_list|,
name|name
parameter_list|)
define|\
value|io.enumCase(value, "DW_TAG_" #name, dwarf::DW_TAG_##name);
name|template
operator|<
operator|>
expr|struct
name|ScalarEnumerationTraits
operator|<
name|dwarf
operator|::
name|Tag
operator|>
block|{
specifier|static
name|void
name|enumeration
argument_list|(
argument|IO&io
argument_list|,
argument|dwarf::Tag&value
argument_list|)
block|{
include|#
directive|include
file|"llvm/Support/Dwarf.def"
name|io
operator|.
name|enumFallback
operator|<
name|Hex16
operator|>
operator|(
name|value
operator|)
block|;   }
block|}
expr_stmt|;
define|#
directive|define
name|HANDLE_DW_AT
parameter_list|(
name|unused
parameter_list|,
name|name
parameter_list|)
define|\
value|io.enumCase(value, "DW_AT_" #name, dwarf::DW_AT_##name);
name|template
operator|<
operator|>
expr|struct
name|ScalarEnumerationTraits
operator|<
name|dwarf
operator|::
name|Attribute
operator|>
block|{
specifier|static
name|void
name|enumeration
argument_list|(
argument|IO&io
argument_list|,
argument|dwarf::Attribute&value
argument_list|)
block|{
include|#
directive|include
file|"llvm/Support/Dwarf.def"
name|io
operator|.
name|enumFallback
operator|<
name|Hex16
operator|>
operator|(
name|value
operator|)
block|;   }
block|}
expr_stmt|;
define|#
directive|define
name|HANDLE_DW_FORM
parameter_list|(
name|unused
parameter_list|,
name|name
parameter_list|)
define|\
value|io.enumCase(value, "DW_FORM_" #name, dwarf::DW_FORM_##name);
name|template
operator|<
operator|>
expr|struct
name|ScalarEnumerationTraits
operator|<
name|dwarf
operator|::
name|Form
operator|>
block|{
specifier|static
name|void
name|enumeration
argument_list|(
argument|IO&io
argument_list|,
argument|dwarf::Form&value
argument_list|)
block|{
include|#
directive|include
file|"llvm/Support/Dwarf.def"
name|io
operator|.
name|enumFallback
operator|<
name|Hex16
operator|>
operator|(
name|value
operator|)
block|;   }
block|}
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|ScalarEnumerationTraits
operator|<
name|dwarf
operator|::
name|Constants
operator|>
block|{
specifier|static
name|void
name|enumeration
argument_list|(
argument|IO&io
argument_list|,
argument|dwarf::Constants&value
argument_list|)
block|{
name|io
operator|.
name|enumCase
argument_list|(
name|value
argument_list|,
literal|"DW_CHILDREN_no"
argument_list|,
name|dwarf
operator|::
name|DW_CHILDREN_no
argument_list|)
block|;
name|io
operator|.
name|enumCase
argument_list|(
name|value
argument_list|,
literal|"DW_CHILDREN_yes"
argument_list|,
name|dwarf
operator|::
name|DW_CHILDREN_yes
argument_list|)
block|;
name|io
operator|.
name|enumFallback
operator|<
name|Hex16
operator|>
operator|(
name|value
operator|)
block|;   }
block|}
expr_stmt|;
block|}
comment|// namespace llvm::yaml
block|}
end_decl_stmt

begin_comment
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

