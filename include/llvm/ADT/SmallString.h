begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- llvm/ADT/SmallString.h - 'Normally small' strings --------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines the SmallString class.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_ADT_SMALLSTRING_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_ADT_SMALLSTRING_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/DataTypes.h"
end_include

begin_include
include|#
directive|include
file|<cstring>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|/// SmallString - A SmallString is just a SmallVector with methods and accessors
comment|/// that make it work better as a string (e.g. operator+ etc).
name|template
operator|<
name|unsigned
name|InternalLen
operator|>
name|class
name|SmallString
operator|:
name|public
name|SmallVector
operator|<
name|char
operator|,
name|InternalLen
operator|>
block|{
name|public
operator|:
comment|// Default ctor - Initialize to empty.
name|SmallString
argument_list|()
block|{}
comment|// Initialize with a range.
name|template
operator|<
name|typename
name|ItTy
operator|>
name|SmallString
argument_list|(
argument|ItTy S
argument_list|,
argument|ItTy E
argument_list|)
operator|:
name|SmallVector
operator|<
name|char
block|,
name|InternalLen
operator|>
operator|(
name|S
operator|,
name|E
operator|)
block|{}
comment|// Copy ctor.
name|SmallString
argument_list|(
specifier|const
name|SmallString
operator|&
name|RHS
argument_list|)
operator|:
name|SmallVector
operator|<
name|char
block|,
name|InternalLen
operator|>
operator|(
name|RHS
operator|)
block|{}
comment|// Extra methods.
specifier|const
name|char
operator|*
name|c_str
argument_list|()
specifier|const
block|{
name|SmallString
operator|*
name|This
operator|=
name|const_cast
operator|<
name|SmallString
operator|*
operator|>
operator|(
name|this
operator|)
block|;
comment|// Ensure that there is a \0 at the end of the string.
name|This
operator|->
name|reserve
argument_list|(
name|this
operator|->
name|size
argument_list|()
operator|+
literal|1
argument_list|)
block|;
name|This
operator|->
name|End
index|[
literal|0
index|]
operator|=
literal|0
block|;
return|return
name|this
operator|->
name|begin
argument_list|()
return|;
block|}
comment|// Extra operators.
specifier|const
name|SmallString
operator|&
name|operator
operator|=
operator|(
specifier|const
name|char
operator|*
name|RHS
operator|)
block|{
name|this
operator|->
name|clear
argument_list|()
block|;
return|return
operator|*
name|this
operator|+=
name|RHS
return|;
block|}
name|SmallString
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|char
operator|*
name|RHS
operator|)
block|{
name|this
operator|->
name|append
argument_list|(
name|RHS
argument_list|,
name|RHS
operator|+
name|strlen
argument_list|(
name|RHS
argument_list|)
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
name|SmallString
operator|&
name|operator
operator|+=
operator|(
name|char
name|C
operator|)
block|{
name|this
operator|->
name|push_back
argument_list|(
name|C
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
name|SmallString
operator|&
name|append_uint_32
argument_list|(
argument|uint32_t N
argument_list|)
block|{
name|char
name|Buffer
index|[
literal|20
index|]
block|;
name|char
operator|*
name|BufPtr
operator|=
name|Buffer
operator|+
literal|20
block|;
if|if
condition|(
name|N
operator|==
literal|0
condition|)
operator|*
operator|--
name|BufPtr
operator|=
literal|'0'
expr_stmt|;
comment|// Handle special case.
while|while
condition|(
name|N
condition|)
block|{
operator|*
operator|--
name|BufPtr
operator|=
literal|'0'
operator|+
name|char
argument_list|(
name|N
operator|%
literal|10
argument_list|)
expr_stmt|;
name|N
operator|/=
literal|10
expr_stmt|;
block|}
name|this
operator|->
name|append
argument_list|(
name|BufPtr
argument_list|,
name|Buffer
operator|+
literal|20
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_decl_stmt

begin_function
name|SmallString
modifier|&
name|append_uint
parameter_list|(
name|uint64_t
name|N
parameter_list|)
block|{
if|if
condition|(
name|N
operator|==
name|uint32_t
argument_list|(
name|N
argument_list|)
condition|)
return|return
name|append_uint_32
argument_list|(
name|uint32_t
argument_list|(
name|N
argument_list|)
argument_list|)
return|;
name|char
name|Buffer
index|[
literal|40
index|]
decl_stmt|;
name|char
modifier|*
name|BufPtr
init|=
name|Buffer
operator|+
literal|40
decl_stmt|;
if|if
condition|(
name|N
operator|==
literal|0
condition|)
operator|*
operator|--
name|BufPtr
operator|=
literal|'0'
expr_stmt|;
comment|// Handle special case...
while|while
condition|(
name|N
condition|)
block|{
operator|*
operator|--
name|BufPtr
operator|=
literal|'0'
operator|+
name|char
argument_list|(
name|N
operator|%
literal|10
argument_list|)
expr_stmt|;
name|N
operator|/=
literal|10
expr_stmt|;
block|}
name|this
operator|->
name|append
argument_list|(
name|BufPtr
argument_list|,
name|Buffer
operator|+
literal|40
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function

begin_function
name|SmallString
modifier|&
name|append_sint
parameter_list|(
name|int64_t
name|N
parameter_list|)
block|{
comment|// TODO, wrong for minint64.
if|if
condition|(
name|N
operator|<
literal|0
condition|)
block|{
name|this
operator|->
name|push_back
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|N
operator|=
operator|-
name|N
expr_stmt|;
block|}
return|return
name|append_uint
argument_list|(
name|N
argument_list|)
return|;
block|}
end_function

begin_endif
unit|};   }
endif|#
directive|endif
end_endif

end_unit

