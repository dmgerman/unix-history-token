begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- llvm/ADT/PointerIntPair.h - Pair for pointer and int -----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines the PointerIntPair class.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_ADT_POINTERINTPAIR_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_ADT_POINTERINTPAIR_H
end_define

begin_include
include|#
directive|include
file|"llvm/Support/Compiler.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/PointerLikeTypeTraits.h"
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<limits>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|DenseMapInfo
expr_stmt|;
comment|/// PointerIntPair - This class implements a pair of a pointer and small
comment|/// integer.  It is designed to represent this in the space required by one
comment|/// pointer by bitmangling the integer into the low part of the pointer.  This
comment|/// can only be done for small integers: typically up to 3 bits, but it depends
comment|/// on the number of bits available according to PointerLikeTypeTraits for the
comment|/// type.
comment|///
comment|/// Note that PointerIntPair always puts the IntVal part in the highest bits
comment|/// possible.  For example, PointerIntPair<void*, 1, bool> will put the bit for
comment|/// the bool into bit #2, not bit #0, which allows the low two bits to be used
comment|/// for something else.  For example, this allows:
comment|///   PointerIntPair<PointerIntPair<void*, 1, bool>, 1, bool>
comment|/// ... and the two bools will land in different bits.
comment|///
name|template
operator|<
name|typename
name|PointerTy
operator|,
name|unsigned
name|IntBits
operator|,
name|typename
name|IntType
operator|=
name|unsigned
operator|,
name|typename
name|PtrTraits
operator|=
name|PointerLikeTypeTraits
operator|<
name|PointerTy
operator|>
expr|>
name|class
name|PointerIntPair
block|{
name|intptr_t
name|Value
block|;
name|static_assert
argument_list|(
name|PtrTraits
operator|::
name|NumLowBitsAvailable
operator|<
name|std
operator|::
name|numeric_limits
operator|<
name|uintptr_t
operator|>
operator|::
name|digits
argument_list|,
literal|"cannot use a pointer type that has all bits free"
argument_list|)
block|;
name|static_assert
argument_list|(
name|IntBits
operator|<=
name|PtrTraits
operator|::
name|NumLowBitsAvailable
argument_list|,
literal|"PointerIntPair with integer size too large for pointer"
argument_list|)
block|;   enum
operator|:
name|uintptr_t
block|{
comment|/// PointerBitMask - The bits that come from the pointer.
name|PointerBitMask
operator|=
operator|~
call|(
name|uintptr_t
call|)
argument_list|(
operator|(
operator|(
name|intptr_t
operator|)
literal|1
operator|<<
name|PtrTraits
operator|::
name|NumLowBitsAvailable
operator|)
operator|-
literal|1
argument_list|)
block|,
comment|/// IntShift - The number of low bits that we reserve for other uses, and
comment|/// keep zero.
name|IntShift
operator|=
operator|(
name|uintptr_t
operator|)
name|PtrTraits
operator|::
name|NumLowBitsAvailable
operator|-
name|IntBits
block|,
comment|/// IntMask - This is the unshifted mask for valid bits of the int type.
name|IntMask
operator|=
call|(
name|uintptr_t
call|)
argument_list|(
operator|(
operator|(
name|intptr_t
operator|)
literal|1
operator|<<
name|IntBits
operator|)
operator|-
literal|1
argument_list|)
block|,
comment|// ShiftedIntMask - This is the bits for the integer shifted in place.
name|ShiftedIntMask
operator|=
operator|(
name|uintptr_t
operator|)
operator|(
name|IntMask
operator|<<
name|IntShift
operator|)
block|}
block|;
name|public
operator|:
name|PointerIntPair
argument_list|()
operator|:
name|Value
argument_list|(
literal|0
argument_list|)
block|{}
name|PointerIntPair
argument_list|(
argument|PointerTy PtrVal
argument_list|,
argument|IntType IntVal
argument_list|)
block|{
name|setPointerAndInt
argument_list|(
name|PtrVal
argument_list|,
name|IntVal
argument_list|)
block|;   }
name|explicit
name|PointerIntPair
argument_list|(
argument|PointerTy PtrVal
argument_list|)
block|{
name|initWithPointer
argument_list|(
name|PtrVal
argument_list|)
block|;   }
name|PointerTy
name|getPointer
argument_list|()
specifier|const
block|{
return|return
name|PtrTraits
operator|::
name|getFromVoidPointer
argument_list|(
name|reinterpret_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|Value
operator|&
name|PointerBitMask
operator|)
argument_list|)
return|;
block|}
name|IntType
name|getInt
argument_list|()
specifier|const
block|{
return|return
call|(
name|IntType
call|)
argument_list|(
operator|(
name|Value
operator|>>
name|IntShift
operator|)
operator|&
name|IntMask
argument_list|)
return|;
block|}
name|void
name|setPointer
argument_list|(
argument|PointerTy PtrVal
argument_list|)
block|{
name|intptr_t
name|PtrWord
operator|=
name|reinterpret_cast
operator|<
name|intptr_t
operator|>
operator|(
name|PtrTraits
operator|::
name|getAsVoidPointer
argument_list|(
name|PtrVal
argument_list|)
operator|)
block|;
name|assert
argument_list|(
operator|(
name|PtrWord
operator|&
operator|~
name|PointerBitMask
operator|)
operator|==
literal|0
operator|&&
literal|"Pointer is not sufficiently aligned"
argument_list|)
block|;
comment|// Preserve all low bits, just update the pointer.
name|Value
operator|=
name|PtrWord
operator||
operator|(
name|Value
operator|&
operator|~
name|PointerBitMask
operator|)
block|;   }
name|void
name|setInt
argument_list|(
argument|IntType IntVal
argument_list|)
block|{
name|intptr_t
name|IntWord
operator|=
name|static_cast
operator|<
name|intptr_t
operator|>
operator|(
name|IntVal
operator|)
block|;
name|assert
argument_list|(
operator|(
name|IntWord
operator|&
operator|~
name|IntMask
operator|)
operator|==
literal|0
operator|&&
literal|"Integer too large for field"
argument_list|)
block|;
comment|// Preserve all bits other than the ones we are updating.
name|Value
operator|&=
operator|~
name|ShiftedIntMask
block|;
comment|// Remove integer field.
name|Value
operator||=
name|IntWord
operator|<<
name|IntShift
block|;
comment|// Set new integer.
block|}
name|void
name|initWithPointer
argument_list|(
argument|PointerTy PtrVal
argument_list|)
block|{
name|intptr_t
name|PtrWord
operator|=
name|reinterpret_cast
operator|<
name|intptr_t
operator|>
operator|(
name|PtrTraits
operator|::
name|getAsVoidPointer
argument_list|(
name|PtrVal
argument_list|)
operator|)
block|;
name|assert
argument_list|(
operator|(
name|PtrWord
operator|&
operator|~
name|PointerBitMask
operator|)
operator|==
literal|0
operator|&&
literal|"Pointer is not sufficiently aligned"
argument_list|)
block|;
name|Value
operator|=
name|PtrWord
block|;   }
name|void
name|setPointerAndInt
argument_list|(
argument|PointerTy PtrVal
argument_list|,
argument|IntType IntVal
argument_list|)
block|{
name|intptr_t
name|PtrWord
operator|=
name|reinterpret_cast
operator|<
name|intptr_t
operator|>
operator|(
name|PtrTraits
operator|::
name|getAsVoidPointer
argument_list|(
name|PtrVal
argument_list|)
operator|)
block|;
name|assert
argument_list|(
operator|(
name|PtrWord
operator|&
operator|~
name|PointerBitMask
operator|)
operator|==
literal|0
operator|&&
literal|"Pointer is not sufficiently aligned"
argument_list|)
block|;
name|intptr_t
name|IntWord
operator|=
name|static_cast
operator|<
name|intptr_t
operator|>
operator|(
name|IntVal
operator|)
block|;
name|assert
argument_list|(
operator|(
name|IntWord
operator|&
operator|~
name|IntMask
operator|)
operator|==
literal|0
operator|&&
literal|"Integer too large for field"
argument_list|)
block|;
name|Value
operator|=
name|PtrWord
operator||
operator|(
name|IntWord
operator|<<
name|IntShift
operator|)
block|;   }
name|PointerTy
specifier|const
operator|*
name|getAddrOfPointer
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|PointerIntPair
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|getAddrOfPointer
argument_list|()
return|;
block|}
name|PointerTy
operator|*
name|getAddrOfPointer
argument_list|()
block|{
name|assert
argument_list|(
name|Value
operator|==
name|reinterpret_cast
operator|<
name|intptr_t
operator|>
operator|(
name|getPointer
argument_list|()
operator|)
operator|&&
literal|"Can only return the address if IntBits is cleared and "
literal|"PtrTraits doesn't change the pointer"
argument_list|)
block|;
return|return
name|reinterpret_cast
operator|<
name|PointerTy
operator|*
operator|>
operator|(
operator|&
name|Value
operator|)
return|;
block|}
name|void
operator|*
name|getOpaqueValue
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|Value
operator|)
return|;
block|}
name|void
name|setFromOpaqueValue
argument_list|(
argument|void *Val
argument_list|)
block|{
name|Value
operator|=
name|reinterpret_cast
operator|<
name|intptr_t
operator|>
operator|(
name|Val
operator|)
block|;}
specifier|static
name|PointerIntPair
name|getFromOpaqueValue
argument_list|(
argument|void *V
argument_list|)
block|{
name|PointerIntPair
name|P
block|;
name|P
operator|.
name|setFromOpaqueValue
argument_list|(
name|V
argument_list|)
block|;
return|return
name|P
return|;
block|}
comment|// Allow PointerIntPairs to be created from const void * if and only if the
comment|// pointer type could be created from a const void *.
specifier|static
name|PointerIntPair
name|getFromOpaqueValue
argument_list|(
argument|const void *V
argument_list|)
block|{
operator|(
name|void
operator|)
name|PtrTraits
operator|::
name|getFromVoidPointer
argument_list|(
name|V
argument_list|)
block|;
return|return
name|getFromOpaqueValue
argument_list|(
name|const_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|PointerIntPair
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|Value
operator|==
name|RHS
operator|.
name|Value
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|PointerIntPair
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|Value
operator|!=
name|RHS
operator|.
name|Value
return|;
block|}
name|bool
name|operator
operator|<
operator|(
specifier|const
name|PointerIntPair
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|Value
operator|<
name|RHS
operator|.
name|Value
return|;
block|}
name|bool
name|operator
operator|>
operator|(
specifier|const
name|PointerIntPair
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|Value
operator|>
name|RHS
operator|.
name|Value
return|;
block|}
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|PointerIntPair
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|Value
operator|<=
name|RHS
operator|.
name|Value
return|;
block|}
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|PointerIntPair
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|Value
operator|>=
name|RHS
operator|.
name|Value
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|isPodLike
block|;
name|template
operator|<
name|typename
name|PointerTy
block|,
name|unsigned
name|IntBits
block|,
name|typename
name|IntType
operator|>
expr|struct
name|isPodLike
operator|<
name|PointerIntPair
operator|<
name|PointerTy
block|,
name|IntBits
block|,
name|IntType
operator|>
expr|>
block|{
specifier|static
specifier|const
name|bool
name|value
operator|=
name|true
block|; }
block|;
comment|// Provide specialization of DenseMapInfo for PointerIntPair.
name|template
operator|<
name|typename
name|PointerTy
block|,
name|unsigned
name|IntBits
block|,
name|typename
name|IntType
operator|>
expr|struct
name|DenseMapInfo
operator|<
name|PointerIntPair
operator|<
name|PointerTy
block|,
name|IntBits
block|,
name|IntType
operator|>
expr|>
block|{
typedef|typedef
name|PointerIntPair
operator|<
name|PointerTy
operator|,
name|IntBits
operator|,
name|IntType
operator|>
name|Ty
expr_stmt|;
specifier|static
name|Ty
name|getEmptyKey
argument_list|()
block|{
name|uintptr_t
name|Val
operator|=
name|static_cast
operator|<
name|uintptr_t
operator|>
operator|(
operator|-
literal|1
operator|)
block|;
name|Val
operator|<<=
name|PointerLikeTypeTraits
operator|<
name|Ty
operator|>
operator|::
name|NumLowBitsAvailable
block|;
return|return
name|Ty
operator|::
name|getFromOpaqueValue
argument_list|(
name|reinterpret_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|Val
operator|)
argument_list|)
return|;
block|}
specifier|static
name|Ty
name|getTombstoneKey
argument_list|()
block|{
name|uintptr_t
name|Val
operator|=
name|static_cast
operator|<
name|uintptr_t
operator|>
operator|(
operator|-
literal|2
operator|)
block|;
name|Val
operator|<<=
name|PointerLikeTypeTraits
operator|<
name|PointerTy
operator|>
operator|::
name|NumLowBitsAvailable
block|;
return|return
name|Ty
operator|::
name|getFromOpaqueValue
argument_list|(
name|reinterpret_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|Val
operator|)
argument_list|)
return|;
block|}
specifier|static
name|unsigned
name|getHashValue
argument_list|(
argument|Ty V
argument_list|)
block|{
name|uintptr_t
name|IV
operator|=
name|reinterpret_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|V
operator|.
name|getOpaqueValue
argument_list|()
operator|)
block|;
return|return
name|unsigned
argument_list|(
name|IV
argument_list|)
operator|^
name|unsigned
argument_list|(
name|IV
operator|>>
literal|9
argument_list|)
return|;
block|}
specifier|static
name|bool
name|isEqual
argument_list|(
argument|const Ty&LHS
argument_list|,
argument|const Ty&RHS
argument_list|)
block|{
return|return
name|LHS
operator|==
name|RHS
return|;
block|}
expr|}
block|;
comment|// Teach SmallPtrSet that PointerIntPair is "basically a pointer".
name|template
operator|<
name|typename
name|PointerTy
block|,
name|unsigned
name|IntBits
block|,
name|typename
name|IntType
block|,
name|typename
name|PtrTraits
operator|>
name|class
name|PointerLikeTypeTraits
operator|<
name|PointerIntPair
operator|<
name|PointerTy
block|,
name|IntBits
block|,
name|IntType
block|,
name|PtrTraits
operator|>
expr|>
block|{
name|public
operator|:
specifier|static
specifier|inline
name|void
operator|*
name|getAsVoidPointer
argument_list|(
argument|const PointerIntPair<PointerTy
argument_list|,
argument|IntBits
argument_list|,
argument|IntType>&P
argument_list|)
block|{
return|return
name|P
operator|.
name|getOpaqueValue
argument_list|()
return|;
block|}
specifier|static
specifier|inline
name|PointerIntPair
operator|<
name|PointerTy
block|,
name|IntBits
block|,
name|IntType
operator|>
name|getFromVoidPointer
argument_list|(
argument|void *P
argument_list|)
block|{
return|return
name|PointerIntPair
operator|<
name|PointerTy
operator|,
name|IntBits
operator|,
name|IntType
operator|>
operator|::
name|getFromOpaqueValue
argument_list|(
name|P
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|PointerIntPair
operator|<
name|PointerTy
block|,
name|IntBits
block|,
name|IntType
operator|>
name|getFromVoidPointer
argument_list|(
argument|const void *P
argument_list|)
block|{
return|return
name|PointerIntPair
operator|<
name|PointerTy
operator|,
name|IntBits
operator|,
name|IntType
operator|>
operator|::
name|getFromOpaqueValue
argument_list|(
name|P
argument_list|)
return|;
block|}
expr|enum
block|{
name|NumLowBitsAvailable
operator|=
name|PtrTraits
operator|::
name|NumLowBitsAvailable
operator|-
name|IntBits
block|}
block|; }
block|;  }
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

