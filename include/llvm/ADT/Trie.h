begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- llvm/ADT/Trie.h ---- Generic trie structure --------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This class defines a generic trie structure. The trie structure
end_comment

begin_comment
comment|// is immutable after creation, but the payload contained within it is not.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_ADT_TRIE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_ADT_TRIE_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/GraphTraits.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/DOTGraphTraits.h"
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|// FIXME:
comment|// - Labels are usually small, maybe it's better to use SmallString
comment|// - Should we use char* during construction?
comment|// - Should we templatize Empty with traits-like interface?
name|template
operator|<
name|class
name|Payload
operator|>
name|class
name|Trie
block|{
name|friend
name|class
name|GraphTraits
operator|<
name|Trie
operator|<
name|Payload
operator|>
expr|>
block|;
name|friend
name|class
name|DOTGraphTraits
operator|<
name|Trie
operator|<
name|Payload
operator|>
expr|>
block|;
name|public
operator|:
name|class
name|Node
block|{
name|friend
name|class
name|Trie
block|;
name|public
operator|:
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|Node
operator|*
operator|>
name|NodeVectorType
expr_stmt|;
typedef|typedef
name|typename
name|NodeVectorType
operator|::
name|iterator
name|iterator
expr_stmt|;
typedef|typedef
name|typename
name|NodeVectorType
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
name|private
label|:
enum|enum
name|QueryResult
block|{
name|Same
init|=
operator|-
literal|3
block|,
name|StringIsPrefix
init|=
operator|-
literal|2
block|,
name|LabelIsPrefix
init|=
operator|-
literal|1
block|,
name|DontMatch
init|=
literal|0
block|,
name|HaveCommonPart
block|}
enum|;
struct|struct
name|NodeCmp
block|{
name|bool
name|operator
argument_list|()
operator|(
name|Node
operator|*
name|N1
operator|,
name|Node
operator|*
name|N2
operator|)
block|{
return|return
operator|(
name|N1
operator|->
name|Label
index|[
literal|0
index|]
operator|<
name|N2
operator|->
name|Label
index|[
literal|0
index|]
operator|)
return|;
block|}
name|bool
name|operator
argument_list|()
operator|(
name|Node
operator|*
name|N
operator|,
name|char
name|Id
operator|)
block|{
return|return
operator|(
name|N
operator|->
name|Label
index|[
literal|0
index|]
operator|<
name|Id
operator|)
return|;
block|}
block|}
struct|;
name|std
operator|::
name|string
name|Label
expr_stmt|;
name|Payload
name|Data
decl_stmt|;
name|NodeVectorType
name|Children
decl_stmt|;
comment|// Do not implement
name|Node
argument_list|(
specifier|const
name|Node
operator|&
argument_list|)
expr_stmt|;
name|Node
modifier|&
name|operator
init|=
operator|(
specifier|const
name|Node
operator|&
operator|)
decl_stmt|;
specifier|inline
name|void
name|addEdge
parameter_list|(
name|Node
modifier|*
name|N
parameter_list|)
block|{
if|if
condition|(
name|Children
operator|.
name|empty
argument_list|()
condition|)
name|Children
operator|.
name|push_back
argument_list|(
name|N
argument_list|)
expr_stmt|;
else|else
block|{
name|iterator
name|I
init|=
name|std
operator|::
name|lower_bound
argument_list|(
name|Children
operator|.
name|begin
argument_list|()
argument_list|,
name|Children
operator|.
name|end
argument_list|()
argument_list|,
name|N
argument_list|,
name|NodeCmp
argument_list|()
argument_list|)
decl_stmt|;
comment|// FIXME: no dups are allowed
name|Children
operator|.
name|insert
argument_list|(
name|I
argument_list|,
name|N
argument_list|)
expr_stmt|;
block|}
block|}
specifier|inline
name|void
name|setEdge
parameter_list|(
name|Node
modifier|*
name|N
parameter_list|)
block|{
name|char
name|Id
init|=
name|N
operator|->
name|Label
index|[
literal|0
index|]
decl_stmt|;
name|iterator
name|I
init|=
name|std
operator|::
name|lower_bound
argument_list|(
name|Children
operator|.
name|begin
argument_list|()
argument_list|,
name|Children
operator|.
name|end
argument_list|()
argument_list|,
name|Id
argument_list|,
name|NodeCmp
argument_list|()
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|I
operator|!=
name|Children
operator|.
name|end
argument_list|()
operator|&&
literal|"Node does not exists!"
argument_list|)
expr_stmt|;
operator|*
name|I
operator|=
name|N
expr_stmt|;
block|}
name|QueryResult
name|query
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|s
argument_list|)
decl|const
block|{
name|unsigned
name|i
decl_stmt|,
name|l
decl_stmt|;
name|unsigned
name|l1
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
name|unsigned
name|l2
init|=
name|Label
operator|.
name|length
argument_list|()
decl_stmt|;
comment|// Find the length of common part
name|l
operator|=
name|std
operator|::
name|min
argument_list|(
name|l1
argument_list|,
name|l2
argument_list|)
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
while|while
condition|(
operator|(
name|i
operator|<
name|l
operator|)
operator|&&
operator|(
name|s
index|[
name|i
index|]
operator|==
name|Label
index|[
name|i
index|]
operator|)
condition|)
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|l
condition|)
block|{
comment|// One is prefix of another, find who is who
if|if
condition|(
name|l1
operator|==
name|l2
condition|)
return|return
name|Same
return|;
elseif|else
if|if
condition|(
name|i
operator|==
name|l1
condition|)
return|return
name|StringIsPrefix
return|;
else|else
return|return
name|LabelIsPrefix
return|;
block|}
else|else
comment|// s and Label have common (possible empty) part, return its length
return|return
operator|(
name|QueryResult
operator|)
name|i
return|;
block|}
name|public
label|:
specifier|inline
name|explicit
name|Node
argument_list|(
specifier|const
name|Payload
operator|&
name|data
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|label
operator|=
literal|""
argument_list|)
range|:
name|Label
argument_list|(
name|label
argument_list|)
decl_stmt|,
name|Data
argument_list|(
name|data
argument_list|)
block|{ }
specifier|inline
specifier|const
name|Payload
operator|&
name|data
argument_list|()
specifier|const
block|{
return|return
name|Data
return|;
block|}
specifier|inline
name|void
name|setData
parameter_list|(
specifier|const
name|Payload
modifier|&
name|data
parameter_list|)
block|{
name|Data
operator|=
name|data
expr_stmt|;
block|}
specifier|inline
specifier|const
name|std
operator|::
name|string
operator|&
name|label
argument_list|()
specifier|const
block|{
return|return
name|Label
return|;
block|}
if|#
directive|if
literal|0
block|inline void dump() {       llvm::cerr<< "Node: "<< this<< "\n"<< "Label: "<< Label<< "\n"<< "Children:\n";        for (iterator I = Children.begin(), E = Children.end(); I != E; ++I)         llvm::cerr<< (*I)->Label<< "\n";     }
endif|#
directive|endif
specifier|inline
name|Node
modifier|*
name|getEdge
parameter_list|(
name|char
name|Id
parameter_list|)
block|{
name|Node
modifier|*
name|fNode
init|=
name|NULL
decl_stmt|;
name|iterator
name|I
init|=
name|std
operator|::
name|lower_bound
argument_list|(
name|Children
operator|.
name|begin
argument_list|()
argument_list|,
name|Children
operator|.
name|end
argument_list|()
argument_list|,
name|Id
argument_list|,
name|NodeCmp
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|I
operator|!=
name|Children
operator|.
name|end
argument_list|()
operator|&&
operator|(
operator|*
name|I
operator|)
operator|->
name|Label
index|[
literal|0
index|]
operator|==
name|Id
condition|)
name|fNode
operator|=
operator|*
name|I
expr_stmt|;
return|return
name|fNode
return|;
block|}
specifier|inline
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|Children
operator|.
name|begin
argument_list|()
return|;
block|}
specifier|inline
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|Children
operator|.
name|begin
argument_list|()
return|;
block|}
specifier|inline
name|iterator
name|end
parameter_list|()
block|{
return|return
name|Children
operator|.
name|end
argument_list|()
return|;
block|}
specifier|inline
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|Children
operator|.
name|end
argument_list|()
return|;
block|}
specifier|inline
name|size_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|Children
operator|.
name|size
argument_list|()
return|;
block|}
specifier|inline
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|Children
operator|.
name|empty
argument_list|()
return|;
block|}
specifier|inline
specifier|const
name|Node
operator|*
operator|&
name|front
argument_list|()
specifier|const
block|{
return|return
name|Children
operator|.
name|front
argument_list|()
return|;
block|}
specifier|inline
name|Node
modifier|*
modifier|&
name|front
parameter_list|()
block|{
return|return
name|Children
operator|.
name|front
argument_list|()
return|;
block|}
specifier|inline
specifier|const
name|Node
operator|*
operator|&
name|back
argument_list|()
specifier|const
block|{
return|return
name|Children
operator|.
name|back
argument_list|()
return|;
block|}
specifier|inline
name|Node
modifier|*
modifier|&
name|back
parameter_list|()
block|{
return|return
name|Children
operator|.
name|back
argument_list|()
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|Node
operator|*
operator|>
name|Nodes
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|Payload
name|Empty
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|inline
name|Node
modifier|*
name|addNode
argument_list|(
specifier|const
name|Payload
operator|&
name|data
argument_list|,
specifier|const
name|std
operator|::
name|string
name|label
operator|=
literal|""
argument_list|)
block|{
name|Node
modifier|*
name|N
init|=
name|new
name|Node
argument_list|(
name|data
argument_list|,
name|label
argument_list|)
decl_stmt|;
name|Nodes
operator|.
name|push_back
argument_list|(
name|N
argument_list|)
expr_stmt|;
return|return
name|N
return|;
block|}
end_decl_stmt

begin_function
specifier|inline
name|Node
modifier|*
name|splitEdge
parameter_list|(
name|Node
modifier|*
name|N
parameter_list|,
name|char
name|Id
parameter_list|,
name|size_t
name|index
parameter_list|)
block|{
name|Node
modifier|*
name|eNode
init|=
name|N
operator|->
name|getEdge
argument_list|(
name|Id
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|eNode
operator|&&
literal|"Node doesn't exist"
argument_list|)
expr_stmt|;
specifier|const
name|std
operator|::
name|string
operator|&
name|l
operator|=
name|eNode
operator|->
name|Label
expr_stmt|;
name|assert
argument_list|(
name|index
operator|>
literal|0
operator|&&
name|index
operator|<
name|l
operator|.
name|length
argument_list|()
operator|&&
literal|"Trying to split too far!"
argument_list|)
expr_stmt|;
name|std
operator|::
name|string
name|l1
operator|=
name|l
operator|.
name|substr
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|std
operator|::
name|string
name|l2
operator|=
name|l
operator|.
name|substr
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|Node
modifier|*
name|nNode
init|=
name|addNode
argument_list|(
name|Empty
argument_list|,
name|l1
argument_list|)
decl_stmt|;
name|N
operator|->
name|setEdge
argument_list|(
name|nNode
argument_list|)
expr_stmt|;
name|eNode
operator|->
name|Label
operator|=
name|l2
expr_stmt|;
name|nNode
operator|->
name|addEdge
argument_list|(
name|eNode
argument_list|)
expr_stmt|;
return|return
name|nNode
return|;
block|}
end_function

begin_comment
comment|// Do not implement
end_comment

begin_expr_stmt
name|Trie
argument_list|(
specifier|const
name|Trie
operator|&
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|Trie
modifier|&
name|operator
init|=
operator|(
specifier|const
name|Trie
operator|&
operator|)
decl_stmt|;
end_decl_stmt

begin_label
name|public
label|:
end_label

begin_expr_stmt
specifier|inline
name|explicit
name|Trie
argument_list|(
specifier|const
name|Payload
operator|&
name|empty
argument_list|)
operator|:
name|Empty
argument_list|(
argument|empty
argument_list|)
block|{
name|addNode
argument_list|(
name|Empty
argument_list|)
block|;   }
specifier|inline
operator|~
name|Trie
argument_list|()
block|{
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|,
name|e
init|=
name|Nodes
operator|.
name|size
argument_list|()
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
name|delete
name|Nodes
index|[
name|i
index|]
decl_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Node
operator|*
name|getRoot
argument_list|()
specifier|const
block|{
return|return
name|Nodes
index|[
literal|0
index|]
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|bool
name|addString
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|s
argument_list|,
specifier|const
name|Payload
operator|&
name|data
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Payload
modifier|&
name|lookup
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|s
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_comment
unit|};
comment|// Define this out-of-line to dissuade the C++ compiler from inlining it.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|Payload
operator|>
name|bool
name|Trie
operator|<
name|Payload
operator|>
operator|::
name|addString
argument_list|(
argument|const std::string& s
argument_list|,
argument|const Payload& data
argument_list|)
block|{
name|Node
operator|*
name|cNode
operator|=
name|getRoot
argument_list|()
block|;
name|Node
operator|*
name|tNode
operator|=
name|NULL
block|;
name|std
operator|::
name|string
name|s1
argument_list|(
name|s
argument_list|)
block|;
while|while
condition|(
name|tNode
operator|==
name|NULL
condition|)
block|{
name|char
name|Id
init|=
name|s1
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|Node
modifier|*
name|nNode
init|=
name|cNode
operator|->
name|getEdge
argument_list|(
name|Id
argument_list|)
condition|)
block|{
name|typename
name|Node
operator|::
name|QueryResult
name|r
operator|=
name|nNode
operator|->
name|query
argument_list|(
name|s1
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|r
condition|)
block|{
case|case
name|Node
operator|::
name|Same
case|:
case|case
name|Node
operator|::
name|StringIsPrefix
case|:
comment|// Currently we don't allow to have two strings in the trie one
comment|// being a prefix of another. This should be fixed.
name|assert
argument_list|(
literal|0
operator|&&
literal|"FIXME!"
argument_list|)
expr_stmt|;
return|return
name|false
return|;
case|case
name|Node
operator|::
name|DontMatch
case|:
name|assert
argument_list|(
literal|0
operator|&&
literal|"Impossible!"
argument_list|)
expr_stmt|;
return|return
name|false
return|;
case|case
name|Node
operator|::
name|LabelIsPrefix
case|:
name|s1
operator|=
name|s1
operator|.
name|substr
argument_list|(
name|nNode
operator|->
name|label
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|cNode
operator|=
name|nNode
expr_stmt|;
break|break;
default|default:
name|nNode
operator|=
name|splitEdge
argument_list|(
name|cNode
argument_list|,
name|Id
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|tNode
operator|=
name|addNode
argument_list|(
name|data
argument_list|,
name|s1
operator|.
name|substr
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|nNode
operator|->
name|addEdge
argument_list|(
name|tNode
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_block
unit|} else
block|{
name|tNode
operator|=
name|addNode
argument_list|(
name|data
argument_list|,
name|s1
argument_list|)
expr_stmt|;
name|cNode
operator|->
name|addEdge
argument_list|(
name|tNode
argument_list|)
expr_stmt|;
block|}
end_block

begin_expr_stmt
unit|}    return
name|true
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|Payload
operator|>
specifier|const
name|Payload
operator|&
name|Trie
operator|<
name|Payload
operator|>
operator|::
name|lookup
argument_list|(
argument|const std::string& s
argument_list|)
specifier|const
block|{
name|Node
operator|*
name|cNode
operator|=
name|getRoot
argument_list|()
block|;
name|Node
operator|*
name|tNode
operator|=
name|NULL
block|;
name|std
operator|::
name|string
name|s1
argument_list|(
name|s
argument_list|)
block|;
while|while
condition|(
name|tNode
operator|==
name|NULL
condition|)
block|{
name|char
name|Id
init|=
name|s1
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|Node
modifier|*
name|nNode
init|=
name|cNode
operator|->
name|getEdge
argument_list|(
name|Id
argument_list|)
condition|)
block|{
name|typename
name|Node
operator|::
name|QueryResult
name|r
operator|=
name|nNode
operator|->
name|query
argument_list|(
name|s1
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|r
condition|)
block|{
case|case
name|Node
operator|::
name|Same
case|:
name|tNode
operator|=
name|nNode
expr_stmt|;
break|break;
case|case
name|Node
operator|::
name|StringIsPrefix
case|:
return|return
name|Empty
return|;
case|case
name|Node
operator|::
name|DontMatch
case|:
name|assert
argument_list|(
literal|0
operator|&&
literal|"Impossible!"
argument_list|)
expr_stmt|;
return|return
name|Empty
return|;
case|case
name|Node
operator|::
name|LabelIsPrefix
case|:
name|s1
operator|=
name|s1
operator|.
name|substr
argument_list|(
name|nNode
operator|->
name|label
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|cNode
operator|=
name|nNode
expr_stmt|;
break|break;
default|default:
return|return
name|Empty
return|;
block|}
end_expr_stmt

begin_return
unit|} else
return|return
name|Empty
return|;
end_return

begin_expr_stmt
unit|}    return
name|tNode
operator|->
name|data
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|Payload
operator|>
expr|struct
name|GraphTraits
operator|<
name|Trie
operator|<
name|Payload
operator|>
expr|>
block|{
typedef|typedef
name|Trie
operator|<
name|Payload
operator|>
name|TrieType
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|TrieType
operator|::
name|Node
name|NodeType
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|NodeType
operator|::
name|iterator
name|ChildIteratorType
expr_stmt|;
end_typedef

begin_function
specifier|static
specifier|inline
name|NodeType
modifier|*
name|getEntryNode
parameter_list|(
specifier|const
name|TrieType
modifier|&
name|T
parameter_list|)
block|{
return|return
name|T
operator|.
name|getRoot
argument_list|()
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|ChildIteratorType
name|child_begin
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
return|return
name|N
operator|->
name|begin
argument_list|()
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|ChildIteratorType
name|child_end
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
return|return
name|N
operator|->
name|end
argument_list|()
return|;
block|}
end_function

begin_typedef
typedef|typedef
name|typename
name|std
operator|::
name|vector
operator|<
name|NodeType
operator|*
operator|>
operator|::
name|const_iterator
name|nodes_iterator
expr_stmt|;
end_typedef

begin_function
specifier|static
specifier|inline
name|nodes_iterator
name|nodes_begin
parameter_list|(
specifier|const
name|TrieType
modifier|&
name|G
parameter_list|)
block|{
return|return
name|G
operator|.
name|Nodes
operator|.
name|begin
argument_list|()
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|nodes_iterator
name|nodes_end
parameter_list|(
specifier|const
name|TrieType
modifier|&
name|G
parameter_list|)
block|{
return|return
name|G
operator|.
name|Nodes
operator|.
name|end
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Payload
operator|>
expr|struct
name|DOTGraphTraits
operator|<
name|Trie
operator|<
name|Payload
operator|>
expr|>
operator|:
name|public
name|DefaultDOTGraphTraits
block|{
typedef|typedef
name|typename
name|Trie
operator|<
name|Payload
operator|>
operator|::
name|Node
name|NodeType
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|GraphTraits
operator|<
name|Trie
operator|<
name|Payload
operator|>
expr|>
operator|::
name|ChildIteratorType
name|EdgeIter
expr_stmt|;
end_typedef

begin_expr_stmt
specifier|static
name|std
operator|::
name|string
name|getGraphName
argument_list|(
argument|const Trie<Payload>& T
argument_list|)
block|{
return|return
literal|"Trie"
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|static
name|std
operator|::
name|string
name|getNodeLabel
argument_list|(
argument|NodeType* Node
argument_list|,
argument|const Trie<Payload>& T
argument_list|,
argument|bool ShortNames
argument_list|)
block|{
if|if
condition|(
name|T
operator|.
name|getRoot
argument_list|()
operator|==
name|Node
condition|)
return|return
literal|"<Root>"
return|;
else|else
return|return
name|Node
operator|->
name|label
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|static
name|std
operator|::
name|string
name|getEdgeSourceLabel
argument_list|(
argument|NodeType* Node
argument_list|,
argument|EdgeIter I
argument_list|)
block|{
name|NodeType
operator|*
name|N
operator|=
operator|*
name|I
block|;
return|return
name|N
operator|->
name|label
argument_list|()
operator|.
name|substr
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|static
name|std
operator|::
name|string
name|getNodeAttributes
argument_list|(
argument|const NodeType* Node
argument_list|,
argument|const Trie<Payload>& T
argument_list|)
block|{
if|if
condition|(
name|Node
operator|->
name|data
argument_list|()
operator|!=
name|T
operator|.
name|Empty
condition|)
return|return
literal|"color=blue"
return|;
end_expr_stmt

begin_return
return|return
literal|""
return|;
end_return

begin_empty_stmt
unit|}  }
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// end of llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_ADT_TRIE_H
end_comment

end_unit

