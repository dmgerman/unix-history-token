begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- llvm/ADT/DepthFirstIterator.h - Depth First iterator -----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file builds on the ADT/GraphTraits.h file to build generic depth
end_comment

begin_comment
comment|// first graph iterator.  This file exposes the following functions/types:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// df_begin/df_end/df_iterator
end_comment

begin_comment
comment|//   * Normal depth-first iteration - visit a node and then all of its children.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// idf_begin/idf_end/idf_iterator
end_comment

begin_comment
comment|//   * Depth-first iteration on the 'inverse' graph.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// df_ext_begin/df_ext_end/df_ext_iterator
end_comment

begin_comment
comment|//   * Normal depth-first iteration - visit a node and then all of its children.
end_comment

begin_comment
comment|//     This iterator stores the 'visited' set in an external set, which allows
end_comment

begin_comment
comment|//     it to be more efficient, and allows external clients to use the set for
end_comment

begin_comment
comment|//     other purposes.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// idf_ext_begin/idf_ext_end/idf_ext_iterator
end_comment

begin_comment
comment|//   * Depth-first iteration on the 'inverse' graph.
end_comment

begin_comment
comment|//     This iterator stores the 'visited' set in an external set, which allows
end_comment

begin_comment
comment|//     it to be more efficient, and allows external clients to use the set for
end_comment

begin_comment
comment|//     other purposes.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_ADT_DEPTHFIRSTITERATOR_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_ADT_DEPTHFIRSTITERATOR_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/GraphTraits.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/PointerIntPair.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallPtrSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/iterator_range.h"
end_include

begin_include
include|#
directive|include
file|<set>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|// df_iterator_storage - A private class which is used to figure out where to
comment|// store the visited set.
name|template
operator|<
name|class
name|SetType
operator|,
name|bool
name|External
operator|>
comment|// Non-external set
name|class
name|df_iterator_storage
block|{
name|public
operator|:
name|SetType
name|Visited
block|; }
expr_stmt|;
name|template
operator|<
name|class
name|SetType
operator|>
name|class
name|df_iterator_storage
operator|<
name|SetType
operator|,
name|true
operator|>
block|{
name|public
operator|:
name|df_iterator_storage
argument_list|(
name|SetType
operator|&
name|VSet
argument_list|)
operator|:
name|Visited
argument_list|(
argument|VSet
argument_list|)
block|{}
name|df_iterator_storage
argument_list|(
specifier|const
name|df_iterator_storage
operator|&
name|S
argument_list|)
operator|:
name|Visited
argument_list|(
argument|S.Visited
argument_list|)
block|{}
name|SetType
operator|&
name|Visited
block|; }
expr_stmt|;
comment|// Generic Depth First Iterator
name|template
operator|<
name|class
name|GraphT
operator|,
name|class
name|SetType
operator|=
name|llvm
operator|::
name|SmallPtrSet
operator|<
name|typename
name|GraphTraits
operator|<
name|GraphT
operator|>
operator|::
name|NodeType
operator|*
operator|,
literal|8
operator|>
operator|,
name|bool
name|ExtStorage
operator|=
name|false
operator|,
name|class
name|GT
operator|=
name|GraphTraits
operator|<
name|GraphT
operator|>
expr|>
name|class
name|df_iterator
operator|:
name|public
name|std
operator|::
name|iterator
operator|<
name|std
operator|::
name|forward_iterator_tag
operator|,
name|typename
name|GT
operator|::
name|NodeType
operator|,
name|ptrdiff_t
operator|>
operator|,
name|public
name|df_iterator_storage
operator|<
name|SetType
operator|,
name|ExtStorage
operator|>
block|{
typedef|typedef
name|std
operator|::
name|iterator
operator|<
name|std
operator|::
name|forward_iterator_tag
operator|,
name|typename
name|GT
operator|::
name|NodeType
operator|,
name|ptrdiff_t
operator|>
name|super
expr_stmt|;
typedef|typedef
name|typename
name|GT
operator|::
name|NodeType
name|NodeType
expr_stmt|;
typedef|typedef
name|typename
name|GT
operator|::
name|ChildIteratorType
name|ChildItTy
expr_stmt|;
typedef|typedef
name|PointerIntPair
operator|<
name|NodeType
operator|*
operator|,
literal|1
operator|>
name|PointerIntTy
expr_stmt|;
comment|// VisitStack - Used to maintain the ordering.  Top = current block
comment|// First element is node pointer, second is the 'next child' to visit
comment|// if the int in PointerIntTy is 0, the 'next child' to visit is invalid
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|pair
operator|<
name|PointerIntTy
operator|,
name|ChildItTy
operator|>>
name|VisitStack
expr_stmt|;
name|private
label|:
specifier|inline
name|df_iterator
argument_list|(
argument|NodeType *Node
argument_list|)
block|{
name|this
operator|->
name|Visited
operator|.
name|insert
argument_list|(
name|Node
argument_list|)
block|;
name|VisitStack
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|PointerIntTy
argument_list|(
name|Node
argument_list|,
literal|0
argument_list|)
argument_list|,
name|GT
operator|::
name|child_begin
argument_list|(
name|Node
argument_list|)
argument_list|)
argument_list|)
block|;   }
specifier|inline
name|df_iterator
argument_list|()
block|{
comment|// End is when stack is empty
block|}
specifier|inline
name|df_iterator
argument_list|(
name|NodeType
operator|*
name|Node
argument_list|,
name|SetType
operator|&
name|S
argument_list|)
operator|:
name|df_iterator_storage
operator|<
name|SetType
operator|,
name|ExtStorage
operator|>
operator|(
name|S
operator|)
block|{
if|if
condition|(
operator|!
name|S
operator|.
name|count
argument_list|(
name|Node
argument_list|)
condition|)
block|{
name|VisitStack
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|PointerIntTy
argument_list|(
name|Node
argument_list|,
literal|0
argument_list|)
argument_list|,
name|GT
operator|::
name|child_begin
argument_list|(
name|Node
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|->
name|Visited
operator|.
name|insert
argument_list|(
name|Node
argument_list|)
expr_stmt|;
block|}
block|}
specifier|inline
name|df_iterator
argument_list|(
name|SetType
operator|&
name|S
argument_list|)
operator|:
name|df_iterator_storage
operator|<
name|SetType
operator|,
name|ExtStorage
operator|>
operator|(
name|S
operator|)
block|{
comment|// End is when stack is empty
block|}
specifier|inline
name|void
name|toNext
argument_list|()
block|{
do|do
block|{
name|std
operator|::
name|pair
operator|<
name|PointerIntTy
operator|,
name|ChildItTy
operator|>
operator|&
name|Top
operator|=
name|VisitStack
operator|.
name|back
argument_list|()
expr_stmt|;
name|NodeType
modifier|*
name|Node
init|=
name|Top
operator|.
name|first
operator|.
name|getPointer
argument_list|()
decl_stmt|;
name|ChildItTy
modifier|&
name|It
init|=
name|Top
operator|.
name|second
decl_stmt|;
if|if
condition|(
operator|!
name|Top
operator|.
name|first
operator|.
name|getInt
argument_list|()
condition|)
block|{
comment|// now retrieve the real begin of the children before we dive in
name|It
operator|=
name|GT
operator|::
name|child_begin
argument_list|(
name|Node
argument_list|)
expr_stmt|;
name|Top
operator|.
name|first
operator|.
name|setInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|It
operator|!=
name|GT
operator|::
name|child_end
argument_list|(
name|Node
argument_list|)
condition|)
block|{
name|NodeType
modifier|*
name|Next
init|=
operator|*
name|It
operator|++
decl_stmt|;
comment|// Has our next sibling been visited?
if|if
condition|(
name|Next
operator|&&
name|this
operator|->
name|Visited
operator|.
name|insert
argument_list|(
name|Next
argument_list|)
operator|.
name|second
condition|)
block|{
comment|// No, do it now.
name|VisitStack
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|PointerIntTy
argument_list|(
name|Next
argument_list|,
literal|0
argument_list|)
argument_list|,
name|GT
operator|::
name|child_begin
argument_list|(
name|Next
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// Oops, ran out of successors... go up a level on the stack.
name|VisitStack
operator|.
name|pop_back
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|VisitStack
operator|.
name|empty
argument_list|()
condition|)
empty_stmt|;
do|}  public:   typedef typename super::pointer pointer;
comment|// Provide static begin and end methods as our public "constructors"
do|static df_iterator begin(const GraphT&G
block|)
block|{
return|return
name|df_iterator
argument_list|(
name|GT
operator|::
name|getEntryNode
argument_list|(
name|G
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|df_iterator
name|end
argument_list|(
argument|const GraphT&G
argument_list|)
block|{
return|return
name|df_iterator
argument_list|()
return|;
block|}
comment|// Static begin and end methods as our public ctors for external iterators
specifier|static
name|df_iterator
name|begin
argument_list|(
argument|const GraphT&G
argument_list|,
argument|SetType&S
argument_list|)
block|{
return|return
name|df_iterator
argument_list|(
name|GT
operator|::
name|getEntryNode
argument_list|(
name|G
argument_list|)
argument_list|,
name|S
argument_list|)
return|;
block|}
specifier|static
name|df_iterator
name|end
argument_list|(
argument|const GraphT&G
argument_list|,
argument|SetType&S
argument_list|)
block|{
return|return
name|df_iterator
argument_list|(
name|S
argument_list|)
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|df_iterator
operator|&
name|x
operator|)
specifier|const
block|{
return|return
name|VisitStack
operator|==
name|x
operator|.
name|VisitStack
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|df_iterator
operator|&
name|x
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|x
operator|)
return|;
block|}
name|pointer
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|VisitStack
operator|.
name|back
argument_list|()
operator|.
name|first
operator|.
name|getPointer
argument_list|()
return|;
block|}
comment|// This is a nonstandard operator-> that dereferences the pointer an extra
comment|// time... so that you can actually call methods ON the Node, because
comment|// the contained type is a pointer.  This allows BBIt->getTerminator() f.e.
comment|//
name|NodeType
operator|*
name|operator
operator|->
block|()
specifier|const
block|{
return|return
operator|*
operator|*
name|this
return|;
block|}
name|df_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
comment|// Preincrement
name|toNext
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
comment|/// \brief Skips all children of the current node and traverses to next node
comment|///
comment|/// Note: This function takes care of incrementing the iterator. If you
comment|/// always increment and call this function, you risk walking off the end.
name|df_iterator
modifier|&
name|skipChildren
parameter_list|()
block|{
name|VisitStack
operator|.
name|pop_back
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|VisitStack
operator|.
name|empty
argument_list|()
condition|)
name|toNext
argument_list|()
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|df_iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
comment|// Postincrement
name|df_iterator
name|tmp
operator|=
operator|*
name|this
block|;
operator|++
operator|*
name|this
block|;
return|return
name|tmp
return|;
block|}
comment|// nodeVisited - return true if this iterator has already visited the
comment|// specified node.  This is public, and will probably be used to iterate over
comment|// nodes that a depth first iteration did not find: ie unreachable nodes.
comment|//
name|bool
name|nodeVisited
argument_list|(
name|NodeType
operator|*
name|Node
argument_list|)
decl|const
block|{
return|return
name|this
operator|->
name|Visited
operator|.
name|count
argument_list|(
name|Node
argument_list|)
operator|!=
literal|0
return|;
block|}
comment|/// getPathLength - Return the length of the path from the entry node to the
comment|/// current node, counting both nodes.
name|unsigned
name|getPathLength
argument_list|()
specifier|const
block|{
return|return
name|VisitStack
operator|.
name|size
argument_list|()
return|;
block|}
comment|/// getPath - Return the n'th node in the path from the entry node to the
comment|/// current node.
name|NodeType
modifier|*
name|getPath
argument_list|(
name|unsigned
name|n
argument_list|)
decl|const
block|{
return|return
name|VisitStack
index|[
name|n
index|]
operator|.
name|first
operator|.
name|getPointer
argument_list|()
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// Provide global constructors that automatically figure out correct types...
end_comment

begin_comment
comment|//
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|df_iterator
operator|<
name|T
operator|>
name|df_begin
argument_list|(
argument|const T& G
argument_list|)
block|{
return|return
name|df_iterator
operator|<
name|T
operator|>
operator|::
name|begin
argument_list|(
name|G
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|df_iterator
operator|<
name|T
operator|>
name|df_end
argument_list|(
argument|const T& G
argument_list|)
block|{
return|return
name|df_iterator
operator|<
name|T
operator|>
operator|::
name|end
argument_list|(
name|G
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// Provide an accessor method to use them in range-based patterns.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|iterator_range
operator|<
name|df_iterator
operator|<
name|T
operator|>>
name|depth_first
argument_list|(
argument|const T& G
argument_list|)
block|{
return|return
name|make_range
argument_list|(
name|df_begin
argument_list|(
name|G
argument_list|)
argument_list|,
name|df_end
argument_list|(
name|G
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// Provide global definitions of external depth first iterators...
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|SetTy
operator|=
name|std
operator|::
name|set
operator|<
name|typename
name|GraphTraits
operator|<
name|T
operator|>
operator|::
name|NodeType
operator|*
operator|>
expr|> struct
name|df_ext_iterator
operator|:
name|public
name|df_iterator
operator|<
name|T
operator|,
name|SetTy
operator|,
name|true
operator|>
block|{
name|df_ext_iterator
argument_list|(
specifier|const
name|df_iterator
operator|<
name|T
argument_list|,
name|SetTy
argument_list|,
name|true
operator|>
operator|&
name|V
argument_list|)
operator|:
name|df_iterator
operator|<
name|T
block|,
name|SetTy
block|,
name|true
operator|>
operator|(
name|V
operator|)
block|{}
block|}
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|SetTy
operator|>
name|df_ext_iterator
operator|<
name|T
operator|,
name|SetTy
operator|>
name|df_ext_begin
argument_list|(
argument|const T& G
argument_list|,
argument|SetTy&S
argument_list|)
block|{
return|return
name|df_ext_iterator
operator|<
name|T
operator|,
name|SetTy
operator|>
operator|::
name|begin
argument_list|(
name|G
argument_list|,
name|S
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|SetTy
operator|>
name|df_ext_iterator
operator|<
name|T
operator|,
name|SetTy
operator|>
name|df_ext_end
argument_list|(
argument|const T& G
argument_list|,
argument|SetTy&S
argument_list|)
block|{
return|return
name|df_ext_iterator
operator|<
name|T
operator|,
name|SetTy
operator|>
operator|::
name|end
argument_list|(
name|G
argument_list|,
name|S
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|SetTy
operator|>
name|iterator_range
operator|<
name|df_ext_iterator
operator|<
name|T
operator|,
name|SetTy
operator|>>
name|depth_first_ext
argument_list|(
argument|const T& G
argument_list|,
argument|SetTy&S
argument_list|)
block|{
return|return
name|make_range
argument_list|(
name|df_ext_begin
argument_list|(
name|G
argument_list|,
name|S
argument_list|)
argument_list|,
name|df_ext_end
argument_list|(
name|G
argument_list|,
name|S
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// Provide global definitions of inverse depth first iterators...
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|SetTy
operator|=
name|llvm
operator|::
name|SmallPtrSet
operator|<
name|typename
name|GraphTraits
operator|<
name|T
operator|>
operator|::
name|NodeType
operator|*
operator|,
literal|8
operator|>
operator|,
name|bool
name|External
operator|=
name|false
operator|>
expr|struct
name|idf_iterator
operator|:
name|public
name|df_iterator
operator|<
name|Inverse
operator|<
name|T
operator|>
operator|,
name|SetTy
operator|,
name|External
operator|>
block|{
name|idf_iterator
argument_list|(
specifier|const
name|df_iterator
operator|<
name|Inverse
operator|<
name|T
operator|>
argument_list|,
name|SetTy
argument_list|,
name|External
operator|>
operator|&
name|V
argument_list|)
operator|:
name|df_iterator
operator|<
name|Inverse
operator|<
name|T
operator|>
block|,
name|SetTy
block|,
name|External
operator|>
operator|(
name|V
operator|)
block|{}
block|}
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|idf_iterator
operator|<
name|T
operator|>
name|idf_begin
argument_list|(
argument|const T& G
argument_list|)
block|{
return|return
name|idf_iterator
operator|<
name|T
operator|>
operator|::
name|begin
argument_list|(
name|Inverse
operator|<
name|T
operator|>
operator|(
name|G
operator|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|idf_iterator
operator|<
name|T
operator|>
name|idf_end
argument_list|(
argument|const T& G
argument_list|)
block|{
return|return
name|idf_iterator
operator|<
name|T
operator|>
operator|::
name|end
argument_list|(
name|Inverse
operator|<
name|T
operator|>
operator|(
name|G
operator|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// Provide an accessor method to use them in range-based patterns.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|iterator_range
operator|<
name|idf_iterator
operator|<
name|T
operator|>>
name|inverse_depth_first
argument_list|(
argument|const T& G
argument_list|)
block|{
return|return
name|make_range
argument_list|(
name|idf_begin
argument_list|(
name|G
argument_list|)
argument_list|,
name|idf_end
argument_list|(
name|G
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// Provide global definitions of external inverse depth first iterators...
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|SetTy
operator|=
name|std
operator|::
name|set
operator|<
name|typename
name|GraphTraits
operator|<
name|T
operator|>
operator|::
name|NodeType
operator|*
operator|>
expr|> struct
name|idf_ext_iterator
operator|:
name|public
name|idf_iterator
operator|<
name|T
operator|,
name|SetTy
operator|,
name|true
operator|>
block|{
name|idf_ext_iterator
argument_list|(
specifier|const
name|idf_iterator
operator|<
name|T
argument_list|,
name|SetTy
argument_list|,
name|true
operator|>
operator|&
name|V
argument_list|)
operator|:
name|idf_iterator
operator|<
name|T
block|,
name|SetTy
block|,
name|true
operator|>
operator|(
name|V
operator|)
block|{}
name|idf_ext_iterator
argument_list|(
specifier|const
name|df_iterator
operator|<
name|Inverse
operator|<
name|T
operator|>
argument_list|,
name|SetTy
argument_list|,
name|true
operator|>
operator|&
name|V
argument_list|)
operator|:
name|idf_iterator
operator|<
name|T
block|,
name|SetTy
block|,
name|true
operator|>
operator|(
name|V
operator|)
block|{}
block|}
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|SetTy
operator|>
name|idf_ext_iterator
operator|<
name|T
operator|,
name|SetTy
operator|>
name|idf_ext_begin
argument_list|(
argument|const T& G
argument_list|,
argument|SetTy&S
argument_list|)
block|{
return|return
name|idf_ext_iterator
operator|<
name|T
operator|,
name|SetTy
operator|>
operator|::
name|begin
argument_list|(
name|Inverse
operator|<
name|T
operator|>
operator|(
name|G
operator|)
argument_list|,
name|S
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|SetTy
operator|>
name|idf_ext_iterator
operator|<
name|T
operator|,
name|SetTy
operator|>
name|idf_ext_end
argument_list|(
argument|const T& G
argument_list|,
argument|SetTy&S
argument_list|)
block|{
return|return
name|idf_ext_iterator
operator|<
name|T
operator|,
name|SetTy
operator|>
operator|::
name|end
argument_list|(
name|Inverse
operator|<
name|T
operator|>
operator|(
name|G
operator|)
argument_list|,
name|S
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|SetTy
operator|>
name|iterator_range
operator|<
name|idf_ext_iterator
operator|<
name|T
operator|,
name|SetTy
operator|>>
name|inverse_depth_first_ext
argument_list|(
argument|const T& G
argument_list|,
argument|SetTy&S
argument_list|)
block|{
return|return
name|make_range
argument_list|(
name|idf_ext_begin
argument_list|(
name|G
argument_list|,
name|S
argument_list|)
argument_list|,
name|idf_ext_end
argument_list|(
name|G
argument_list|,
name|S
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
unit|}
comment|// End llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

