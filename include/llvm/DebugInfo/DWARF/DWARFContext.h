begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- DWARFContext.h -------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_DWARF_DWARFCONTEXT_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_DWARF_DWARFCONTEXT_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/iterator_range.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/MapVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallString.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/DIContext.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/DWARF/DWARFCompileUnit.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/DWARF/DWARFDebugAbbrev.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/DWARF/DWARFDebugAranges.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/DWARF/DWARFDebugFrame.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/DWARF/DWARFDebugLine.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/DWARF/DWARFDebugLoc.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/DWARF/DWARFDebugMacro.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/DWARF/DWARFGdbIndex.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/DWARF/DWARFSection.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/DWARF/DWARFTypeUnit.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/DWARF/DWARFUnit.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/DWARF/DWARFUnitIndex.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/ObjectFile.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Host.h"
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_include
include|#
directive|include
file|<deque>
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_include
include|#
directive|include
file|<memory>
end_include

begin_include
include|#
directive|include
file|<utility>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MemoryBuffer
decl_stmt|;
name|class
name|raw_ostream
decl_stmt|;
comment|/// Reads a value from data extractor and applies a relocation to the result if
comment|/// one exists for the given offset.
name|uint64_t
name|getRelocatedValue
parameter_list|(
specifier|const
name|DataExtractor
modifier|&
name|Data
parameter_list|,
name|uint32_t
name|Size
parameter_list|,
name|uint32_t
modifier|*
name|Off
parameter_list|,
specifier|const
name|RelocAddrMap
modifier|*
name|Relocs
parameter_list|,
name|uint64_t
modifier|*
name|SecNdx
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|/// DWARFContext
comment|/// This data structure is the top level entity that deals with dwarf debug
comment|/// information parsing. The actual data is supplied through pure virtual
comment|/// methods that a concrete implementation provides.
name|class
name|DWARFContext
range|:
name|public
name|DIContext
block|{
name|DWARFUnitSection
operator|<
name|DWARFCompileUnit
operator|>
name|CUs
block|;
name|std
operator|::
name|deque
operator|<
name|DWARFUnitSection
operator|<
name|DWARFTypeUnit
operator|>>
name|TUs
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|DWARFUnitIndex
operator|>
name|CUIndex
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|DWARFGdbIndex
operator|>
name|GdbIndex
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|DWARFUnitIndex
operator|>
name|TUIndex
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|DWARFDebugAbbrev
operator|>
name|Abbrev
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|DWARFDebugLoc
operator|>
name|Loc
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|DWARFDebugAranges
operator|>
name|Aranges
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|DWARFDebugLine
operator|>
name|Line
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|DWARFDebugFrame
operator|>
name|DebugFrame
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|DWARFDebugFrame
operator|>
name|EHFrame
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|DWARFDebugMacro
operator|>
name|Macro
block|;
name|DWARFUnitSection
operator|<
name|DWARFCompileUnit
operator|>
name|DWOCUs
block|;
name|std
operator|::
name|deque
operator|<
name|DWARFUnitSection
operator|<
name|DWARFTypeUnit
operator|>>
name|DWOTUs
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|DWARFDebugAbbrev
operator|>
name|AbbrevDWO
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|DWARFDebugLocDWO
operator|>
name|LocDWO
block|;    struct
name|DWOFile
block|{
name|object
operator|::
name|OwningBinary
operator|<
name|object
operator|::
name|ObjectFile
operator|>
name|File
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|DWARFContext
operator|>
name|Context
block|;   }
block|;
name|StringMap
operator|<
name|std
operator|::
name|weak_ptr
operator|<
name|DWOFile
operator|>>
name|DWOFiles
block|;
name|std
operator|::
name|weak_ptr
operator|<
name|DWOFile
operator|>
name|DWP
block|;
name|bool
name|CheckedForDWP
operator|=
name|false
block|;
comment|/// Read compile units from the debug_info section (if necessary)
comment|/// and store them in CUs.
name|void
name|parseCompileUnits
argument_list|()
block|;
comment|/// Read type units from the debug_types sections (if necessary)
comment|/// and store them in TUs.
name|void
name|parseTypeUnits
argument_list|()
block|;
comment|/// Read compile units from the debug_info.dwo section (if necessary)
comment|/// and store them in DWOCUs.
name|void
name|parseDWOCompileUnits
argument_list|()
block|;
comment|/// Read type units from the debug_types.dwo section (if necessary)
comment|/// and store them in DWOTUs.
name|void
name|parseDWOTypeUnits
argument_list|()
block|;
name|public
operator|:
name|DWARFContext
argument_list|()
operator|:
name|DIContext
argument_list|(
argument|CK_DWARF
argument_list|)
block|{}
name|DWARFContext
argument_list|(
name|DWARFContext
operator|&
argument_list|)
operator|=
name|delete
block|;
name|DWARFContext
operator|&
name|operator
operator|=
operator|(
name|DWARFContext
operator|&
operator|)
operator|=
name|delete
block|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const DIContext *DICtx
argument_list|)
block|{
return|return
name|DICtx
operator|->
name|getKind
argument_list|()
operator|==
name|CK_DWARF
return|;
block|}
name|void
name|dump
argument_list|(
argument|raw_ostream&OS
argument_list|,
argument|DIDumpOptions DumpOpts
argument_list|)
name|override
block|;
name|bool
name|verify
argument_list|(
argument|raw_ostream&OS
argument_list|,
argument|DIDumpType DumpType = DIDT_All
argument_list|)
name|override
block|;
typedef|typedef
name|DWARFUnitSection
operator|<
name|DWARFCompileUnit
operator|>
operator|::
name|iterator_range
name|cu_iterator_range
expr_stmt|;
typedef|typedef
name|DWARFUnitSection
operator|<
name|DWARFTypeUnit
operator|>
operator|::
name|iterator_range
name|tu_iterator_range
expr_stmt|;
typedef|typedef
name|iterator_range
operator|<
name|decltype
argument_list|(
name|TUs
argument_list|)
operator|::
name|iterator
operator|>
name|tu_section_iterator_range
expr_stmt|;
comment|/// Get compile units in this context.
name|cu_iterator_range
name|compile_units
parameter_list|()
block|{
name|parseCompileUnits
argument_list|()
expr_stmt|;
return|return
name|cu_iterator_range
argument_list|(
name|CUs
operator|.
name|begin
argument_list|()
argument_list|,
name|CUs
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
comment|/// Get type units in this context.
name|tu_section_iterator_range
name|type_unit_sections
parameter_list|()
block|{
name|parseTypeUnits
argument_list|()
expr_stmt|;
return|return
name|tu_section_iterator_range
argument_list|(
name|TUs
operator|.
name|begin
argument_list|()
argument_list|,
name|TUs
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
comment|/// Get compile units in the DWO context.
name|cu_iterator_range
name|dwo_compile_units
parameter_list|()
block|{
name|parseDWOCompileUnits
argument_list|()
expr_stmt|;
return|return
name|cu_iterator_range
argument_list|(
name|DWOCUs
operator|.
name|begin
argument_list|()
argument_list|,
name|DWOCUs
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
comment|/// Get type units in the DWO context.
name|tu_section_iterator_range
name|dwo_type_unit_sections
parameter_list|()
block|{
name|parseDWOTypeUnits
argument_list|()
expr_stmt|;
return|return
name|tu_section_iterator_range
argument_list|(
name|DWOTUs
operator|.
name|begin
argument_list|()
argument_list|,
name|DWOTUs
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
comment|/// Get the number of compile units in this context.
name|unsigned
name|getNumCompileUnits
parameter_list|()
block|{
name|parseCompileUnits
argument_list|()
expr_stmt|;
return|return
name|CUs
operator|.
name|size
argument_list|()
return|;
block|}
comment|/// Get the number of compile units in this context.
name|unsigned
name|getNumTypeUnits
parameter_list|()
block|{
name|parseTypeUnits
argument_list|()
expr_stmt|;
return|return
name|TUs
operator|.
name|size
argument_list|()
return|;
block|}
comment|/// Get the number of compile units in the DWO context.
name|unsigned
name|getNumDWOCompileUnits
parameter_list|()
block|{
name|parseDWOCompileUnits
argument_list|()
expr_stmt|;
return|return
name|DWOCUs
operator|.
name|size
argument_list|()
return|;
block|}
comment|/// Get the number of compile units in the DWO context.
name|unsigned
name|getNumDWOTypeUnits
parameter_list|()
block|{
name|parseDWOTypeUnits
argument_list|()
expr_stmt|;
return|return
name|DWOTUs
operator|.
name|size
argument_list|()
return|;
block|}
comment|/// Get the compile unit at the specified index for this compile unit.
name|DWARFCompileUnit
modifier|*
name|getCompileUnitAtIndex
parameter_list|(
name|unsigned
name|index
parameter_list|)
block|{
name|parseCompileUnits
argument_list|()
expr_stmt|;
return|return
name|CUs
index|[
name|index
index|]
operator|.
name|get
argument_list|()
return|;
block|}
comment|/// Get the compile unit at the specified index for the DWO compile units.
name|DWARFCompileUnit
modifier|*
name|getDWOCompileUnitAtIndex
parameter_list|(
name|unsigned
name|index
parameter_list|)
block|{
name|parseDWOCompileUnits
argument_list|()
expr_stmt|;
return|return
name|DWOCUs
index|[
name|index
index|]
operator|.
name|get
argument_list|()
return|;
block|}
name|DWARFCompileUnit
modifier|*
name|getDWOCompileUnitForHash
parameter_list|(
name|uint64_t
name|Hash
parameter_list|)
function_decl|;
comment|/// Get a DIE given an exact offset.
name|DWARFDie
name|getDIEForOffset
parameter_list|(
name|uint32_t
name|Offset
parameter_list|)
function_decl|;
specifier|const
name|DWARFUnitIndex
modifier|&
name|getCUIndex
parameter_list|()
function_decl|;
name|DWARFGdbIndex
modifier|&
name|getGdbIndex
parameter_list|()
function_decl|;
specifier|const
name|DWARFUnitIndex
modifier|&
name|getTUIndex
parameter_list|()
function_decl|;
comment|/// Get a pointer to the parsed DebugAbbrev object.
specifier|const
name|DWARFDebugAbbrev
modifier|*
name|getDebugAbbrev
parameter_list|()
function_decl|;
comment|/// Get a pointer to the parsed DebugLoc object.
specifier|const
name|DWARFDebugLoc
modifier|*
name|getDebugLoc
parameter_list|()
function_decl|;
comment|/// Get a pointer to the parsed dwo abbreviations object.
specifier|const
name|DWARFDebugAbbrev
modifier|*
name|getDebugAbbrevDWO
parameter_list|()
function_decl|;
comment|/// Get a pointer to the parsed DebugLoc object.
specifier|const
name|DWARFDebugLocDWO
modifier|*
name|getDebugLocDWO
parameter_list|()
function_decl|;
comment|/// Get a pointer to the parsed DebugAranges object.
specifier|const
name|DWARFDebugAranges
modifier|*
name|getDebugAranges
parameter_list|()
function_decl|;
comment|/// Get a pointer to the parsed frame information object.
specifier|const
name|DWARFDebugFrame
modifier|*
name|getDebugFrame
parameter_list|()
function_decl|;
comment|/// Get a pointer to the parsed eh frame information object.
specifier|const
name|DWARFDebugFrame
modifier|*
name|getEHFrame
parameter_list|()
function_decl|;
comment|/// Get a pointer to the parsed DebugMacro object.
specifier|const
name|DWARFDebugMacro
modifier|*
name|getDebugMacro
parameter_list|()
function_decl|;
comment|/// Get a pointer to a parsed line table corresponding to a compile unit.
specifier|const
name|DWARFDebugLine
operator|::
name|LineTable
operator|*
name|getLineTableForUnit
argument_list|(
name|DWARFUnit
operator|*
name|cu
argument_list|)
expr_stmt|;
name|DILineInfo
name|getLineInfoForAddress
argument_list|(
name|uint64_t
name|Address
argument_list|,
name|DILineInfoSpecifier
name|Specifier
operator|=
name|DILineInfoSpecifier
argument_list|()
argument_list|)
name|override
decl_stmt|;
name|DILineInfoTable
name|getLineInfoForAddressRange
argument_list|(
name|uint64_t
name|Address
argument_list|,
name|uint64_t
name|Size
argument_list|,
name|DILineInfoSpecifier
name|Specifier
operator|=
name|DILineInfoSpecifier
argument_list|()
argument_list|)
name|override
decl_stmt|;
name|DIInliningInfo
name|getInliningInfoForAddress
argument_list|(
name|uint64_t
name|Address
argument_list|,
name|DILineInfoSpecifier
name|Specifier
operator|=
name|DILineInfoSpecifier
argument_list|()
argument_list|)
name|override
decl_stmt|;
name|virtual
name|StringRef
name|getFileName
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|bool
name|isLittleEndian
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|uint8_t
name|getAddressSize
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
specifier|const
name|DWARFSection
modifier|&
name|getInfoSection
parameter_list|()
init|=
literal|0
function_decl|;
typedef|typedef
name|MapVector
operator|<
name|object
operator|::
name|SectionRef
operator|,
name|DWARFSection
operator|,
name|std
operator|::
name|map
operator|<
name|object
operator|::
name|SectionRef
operator|,
name|unsigned
operator|>>
name|TypeSectionMap
expr_stmt|;
name|virtual
specifier|const
name|TypeSectionMap
modifier|&
name|getTypesSections
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|StringRef
name|getAbbrevSection
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
specifier|const
name|DWARFSection
modifier|&
name|getLocSection
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|StringRef
name|getARangeSection
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|StringRef
name|getDebugFrameSection
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|StringRef
name|getEHFrameSection
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
specifier|const
name|DWARFSection
modifier|&
name|getLineSection
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|StringRef
name|getStringSection
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
specifier|const
name|DWARFSection
modifier|&
name|getRangeSection
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|StringRef
name|getMacinfoSection
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|StringRef
name|getPubNamesSection
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|StringRef
name|getPubTypesSection
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|StringRef
name|getGnuPubNamesSection
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|StringRef
name|getGnuPubTypesSection
parameter_list|()
init|=
literal|0
function_decl|;
comment|// Sections for DWARF5 split dwarf proposal.
name|virtual
specifier|const
name|DWARFSection
modifier|&
name|getInfoDWOSection
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
specifier|const
name|TypeSectionMap
modifier|&
name|getTypesDWOSections
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|StringRef
name|getAbbrevDWOSection
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
specifier|const
name|DWARFSection
modifier|&
name|getLineDWOSection
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
specifier|const
name|DWARFSection
modifier|&
name|getLocDWOSection
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|StringRef
name|getStringDWOSection
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|StringRef
name|getStringOffsetDWOSection
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
specifier|const
name|DWARFSection
modifier|&
name|getRangeDWOSection
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
specifier|const
name|DWARFSection
modifier|&
name|getAddrSection
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
specifier|const
name|DWARFSection
modifier|&
name|getAppleNamesSection
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
specifier|const
name|DWARFSection
modifier|&
name|getAppleTypesSection
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
specifier|const
name|DWARFSection
modifier|&
name|getAppleNamespacesSection
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
specifier|const
name|DWARFSection
modifier|&
name|getAppleObjCSection
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|StringRef
name|getCUIndexSection
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|StringRef
name|getGdbIndexSection
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|StringRef
name|getTUIndexSection
parameter_list|()
init|=
literal|0
function_decl|;
specifier|static
name|bool
name|isSupportedVersion
parameter_list|(
name|unsigned
name|version
parameter_list|)
block|{
return|return
name|version
operator|==
literal|2
operator|||
name|version
operator|==
literal|3
operator|||
name|version
operator|==
literal|4
operator|||
name|version
operator|==
literal|5
return|;
block|}
name|std
operator|::
name|shared_ptr
operator|<
name|DWARFContext
operator|>
name|getDWOContext
argument_list|(
argument|StringRef AbsolutePath
argument_list|)
expr_stmt|;
name|private
label|:
comment|/// Return the compile unit that includes an offset (relative to .debug_info).
name|DWARFCompileUnit
modifier|*
name|getCompileUnitForOffset
parameter_list|(
name|uint32_t
name|Offset
parameter_list|)
function_decl|;
comment|/// Return the compile unit which contains instruction with provided
comment|/// address.
name|DWARFCompileUnit
modifier|*
name|getCompileUnitForAddress
parameter_list|(
name|uint64_t
name|Address
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/// DWARFContextInMemory is the simplest possible implementation of a
end_comment

begin_comment
comment|/// DWARFContext. It assumes all content is available in memory and stores
end_comment

begin_comment
comment|/// pointers to it.
end_comment

begin_decl_stmt
name|class
name|DWARFContextInMemory
range|:
name|public
name|DWARFContext
block|{
name|virtual
name|void
name|anchor
argument_list|()
block|;
name|StringRef
name|FileName
block|;
name|bool
name|IsLittleEndian
block|;
name|uint8_t
name|AddressSize
block|;
name|DWARFSection
name|InfoSection
block|;
name|TypeSectionMap
name|TypesSections
block|;
name|StringRef
name|AbbrevSection
block|;
name|DWARFSection
name|LocSection
block|;
name|StringRef
name|ARangeSection
block|;
name|StringRef
name|DebugFrameSection
block|;
name|StringRef
name|EHFrameSection
block|;
name|DWARFSection
name|LineSection
block|;
name|StringRef
name|StringSection
block|;
name|DWARFSection
name|RangeSection
block|;
name|StringRef
name|MacinfoSection
block|;
name|StringRef
name|PubNamesSection
block|;
name|StringRef
name|PubTypesSection
block|;
name|StringRef
name|GnuPubNamesSection
block|;
name|StringRef
name|GnuPubTypesSection
block|;
comment|// Sections for DWARF5 split dwarf proposal.
name|DWARFSection
name|InfoDWOSection
block|;
name|TypeSectionMap
name|TypesDWOSections
block|;
name|StringRef
name|AbbrevDWOSection
block|;
name|DWARFSection
name|LineDWOSection
block|;
name|DWARFSection
name|LocDWOSection
block|;
name|StringRef
name|StringDWOSection
block|;
name|StringRef
name|StringOffsetDWOSection
block|;
name|DWARFSection
name|RangeDWOSection
block|;
name|DWARFSection
name|AddrSection
block|;
name|DWARFSection
name|AppleNamesSection
block|;
name|DWARFSection
name|AppleTypesSection
block|;
name|DWARFSection
name|AppleNamespacesSection
block|;
name|DWARFSection
name|AppleObjCSection
block|;
name|StringRef
name|CUIndexSection
block|;
name|StringRef
name|GdbIndexSection
block|;
name|StringRef
name|TUIndexSection
block|;
name|SmallVector
operator|<
name|SmallString
operator|<
literal|32
operator|>
block|,
literal|4
operator|>
name|UncompressedSections
block|;
name|StringRef
operator|*
name|MapSectionToMember
argument_list|(
argument|StringRef Name
argument_list|)
block|;
comment|/// If Sec is compressed section, decompresses and updates its contents
comment|/// provided by Data. Otherwise leaves it unchanged.
name|Error
name|maybeDecompress
argument_list|(
argument|const object::SectionRef&Sec
argument_list|,
argument|StringRef Name
argument_list|,
argument|StringRef&Data
argument_list|)
block|;
name|public
operator|:
name|DWARFContextInMemory
argument_list|(
specifier|const
name|object
operator|::
name|ObjectFile
operator|&
name|Obj
argument_list|,
specifier|const
name|LoadedObjectInfo
operator|*
name|L
operator|=
name|nullptr
argument_list|)
block|;
name|DWARFContextInMemory
argument_list|(
argument|const StringMap<std::unique_ptr<MemoryBuffer>>&Sections
argument_list|,
argument|uint8_t AddrSize
argument_list|,
argument|bool isLittleEndian = sys::IsLittleEndianHost
argument_list|)
block|;
name|StringRef
name|getFileName
argument_list|()
specifier|const
name|override
block|{
return|return
name|FileName
return|;
block|}
name|bool
name|isLittleEndian
argument_list|()
specifier|const
name|override
block|{
return|return
name|IsLittleEndian
return|;
block|}
name|uint8_t
name|getAddressSize
argument_list|()
specifier|const
name|override
block|{
return|return
name|AddressSize
return|;
block|}
specifier|const
name|DWARFSection
operator|&
name|getInfoSection
argument_list|()
name|override
block|{
return|return
name|InfoSection
return|;
block|}
specifier|const
name|TypeSectionMap
operator|&
name|getTypesSections
argument_list|()
name|override
block|{
return|return
name|TypesSections
return|;
block|}
name|StringRef
name|getAbbrevSection
argument_list|()
name|override
block|{
return|return
name|AbbrevSection
return|;
block|}
specifier|const
name|DWARFSection
operator|&
name|getLocSection
argument_list|()
name|override
block|{
return|return
name|LocSection
return|;
block|}
name|StringRef
name|getARangeSection
argument_list|()
name|override
block|{
return|return
name|ARangeSection
return|;
block|}
name|StringRef
name|getDebugFrameSection
argument_list|()
name|override
block|{
return|return
name|DebugFrameSection
return|;
block|}
name|StringRef
name|getEHFrameSection
argument_list|()
name|override
block|{
return|return
name|EHFrameSection
return|;
block|}
specifier|const
name|DWARFSection
operator|&
name|getLineSection
argument_list|()
name|override
block|{
return|return
name|LineSection
return|;
block|}
name|StringRef
name|getStringSection
argument_list|()
name|override
block|{
return|return
name|StringSection
return|;
block|}
specifier|const
name|DWARFSection
operator|&
name|getRangeSection
argument_list|()
name|override
block|{
return|return
name|RangeSection
return|;
block|}
name|StringRef
name|getMacinfoSection
argument_list|()
name|override
block|{
return|return
name|MacinfoSection
return|;
block|}
name|StringRef
name|getPubNamesSection
argument_list|()
name|override
block|{
return|return
name|PubNamesSection
return|;
block|}
name|StringRef
name|getPubTypesSection
argument_list|()
name|override
block|{
return|return
name|PubTypesSection
return|;
block|}
name|StringRef
name|getGnuPubNamesSection
argument_list|()
name|override
block|{
return|return
name|GnuPubNamesSection
return|;
block|}
name|StringRef
name|getGnuPubTypesSection
argument_list|()
name|override
block|{
return|return
name|GnuPubTypesSection
return|;
block|}
specifier|const
name|DWARFSection
operator|&
name|getAppleNamesSection
argument_list|()
name|override
block|{
return|return
name|AppleNamesSection
return|;
block|}
specifier|const
name|DWARFSection
operator|&
name|getAppleTypesSection
argument_list|()
name|override
block|{
return|return
name|AppleTypesSection
return|;
block|}
specifier|const
name|DWARFSection
operator|&
name|getAppleNamespacesSection
argument_list|()
name|override
block|{
return|return
name|AppleNamespacesSection
return|;
block|}
specifier|const
name|DWARFSection
operator|&
name|getAppleObjCSection
argument_list|()
name|override
block|{
return|return
name|AppleObjCSection
return|;
block|}
comment|// Sections for DWARF5 split dwarf proposal.
specifier|const
name|DWARFSection
operator|&
name|getInfoDWOSection
argument_list|()
name|override
block|{
return|return
name|InfoDWOSection
return|;
block|}
specifier|const
name|TypeSectionMap
operator|&
name|getTypesDWOSections
argument_list|()
name|override
block|{
return|return
name|TypesDWOSections
return|;
block|}
name|StringRef
name|getAbbrevDWOSection
argument_list|()
name|override
block|{
return|return
name|AbbrevDWOSection
return|;
block|}
specifier|const
name|DWARFSection
operator|&
name|getLineDWOSection
argument_list|()
name|override
block|{
return|return
name|LineDWOSection
return|;
block|}
specifier|const
name|DWARFSection
operator|&
name|getLocDWOSection
argument_list|()
name|override
block|{
return|return
name|LocDWOSection
return|;
block|}
name|StringRef
name|getStringDWOSection
argument_list|()
name|override
block|{
return|return
name|StringDWOSection
return|;
block|}
name|StringRef
name|getStringOffsetDWOSection
argument_list|()
name|override
block|{
return|return
name|StringOffsetDWOSection
return|;
block|}
specifier|const
name|DWARFSection
operator|&
name|getRangeDWOSection
argument_list|()
name|override
block|{
return|return
name|RangeDWOSection
return|;
block|}
specifier|const
name|DWARFSection
operator|&
name|getAddrSection
argument_list|()
name|override
block|{
return|return
name|AddrSection
return|;
block|}
name|StringRef
name|getCUIndexSection
argument_list|()
name|override
block|{
return|return
name|CUIndexSection
return|;
block|}
name|StringRef
name|getGdbIndexSection
argument_list|()
name|override
block|{
return|return
name|GdbIndexSection
return|;
block|}
name|StringRef
name|getTUIndexSection
argument_list|()
name|override
block|{
return|return
name|TUIndexSection
return|;
block|}
expr|}
block|;  }
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_DEBUGINFO_DWARF_DWARFCONTEXT_H
end_comment

end_unit

