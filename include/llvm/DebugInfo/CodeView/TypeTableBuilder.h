begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- TypeTableBuilder.h ---------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_CODEVIEW_TYPETABLEBUILDER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_CODEVIEW_TYPETABLEBUILDER_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/CodeView.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/TypeIndex.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/TypeRecord.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Compiler.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|codeview
block|{
name|class
name|FieldListRecordBuilder
decl_stmt|;
name|class
name|MethodListRecordBuilder
decl_stmt|;
name|class
name|TypeRecordBuilder
decl_stmt|;
name|class
name|TypeTableBuilder
block|{
name|private
label|:
name|TypeTableBuilder
argument_list|(
specifier|const
name|TypeTableBuilder
operator|&
argument_list|)
operator|=
name|delete
expr_stmt|;
name|TypeTableBuilder
modifier|&
name|operator
init|=
operator|(
specifier|const
name|TypeTableBuilder
operator|&
operator|)
operator|=
name|delete
decl_stmt|;
name|protected
label|:
name|TypeTableBuilder
argument_list|()
expr_stmt|;
name|public
label|:
name|virtual
operator|~
name|TypeTableBuilder
argument_list|()
expr_stmt|;
name|public
label|:
name|TypeIndex
name|writeModifier
parameter_list|(
specifier|const
name|ModifierRecord
modifier|&
name|Record
parameter_list|)
function_decl|;
name|TypeIndex
name|writeProcedure
parameter_list|(
specifier|const
name|ProcedureRecord
modifier|&
name|Record
parameter_list|)
function_decl|;
name|TypeIndex
name|writeMemberFunction
parameter_list|(
specifier|const
name|MemberFunctionRecord
modifier|&
name|Record
parameter_list|)
function_decl|;
name|TypeIndex
name|writeArgumentList
parameter_list|(
specifier|const
name|ArgumentListRecord
modifier|&
name|Record
parameter_list|)
function_decl|;
name|TypeIndex
name|writeRecord
parameter_list|(
name|TypeRecordBuilder
modifier|&
name|builder
parameter_list|)
function_decl|;
name|TypeIndex
name|writePointer
parameter_list|(
specifier|const
name|PointerRecord
modifier|&
name|Record
parameter_list|)
function_decl|;
name|TypeIndex
name|writePointerToMember
parameter_list|(
specifier|const
name|PointerToMemberRecord
modifier|&
name|Record
parameter_list|)
function_decl|;
name|TypeIndex
name|writeArray
parameter_list|(
specifier|const
name|ArrayRecord
modifier|&
name|Record
parameter_list|)
function_decl|;
name|TypeIndex
name|writeAggregate
parameter_list|(
specifier|const
name|AggregateRecord
modifier|&
name|Record
parameter_list|)
function_decl|;
name|TypeIndex
name|writeEnum
parameter_list|(
specifier|const
name|EnumRecord
modifier|&
name|Record
parameter_list|)
function_decl|;
name|TypeIndex
name|writeBitField
parameter_list|(
specifier|const
name|BitFieldRecord
modifier|&
name|Record
parameter_list|)
function_decl|;
name|TypeIndex
name|writeVirtualTableShape
parameter_list|(
specifier|const
name|VirtualTableShapeRecord
modifier|&
name|Record
parameter_list|)
function_decl|;
name|TypeIndex
name|writeFieldList
parameter_list|(
name|FieldListRecordBuilder
modifier|&
name|FieldList
parameter_list|)
function_decl|;
name|TypeIndex
name|writeMethodList
parameter_list|(
name|MethodListRecordBuilder
modifier|&
name|MethodList
parameter_list|)
function_decl|;
name|private
label|:
name|virtual
name|TypeIndex
name|writeRecord
argument_list|(
name|llvm
operator|::
name|StringRef
name|record
argument_list|)
init|=
literal|0
decl_stmt|;
block|}
empty_stmt|;
block|}
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

