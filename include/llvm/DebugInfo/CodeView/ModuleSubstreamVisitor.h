begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- ModuleSubstreamVisitor.h ---------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_CODEVIEW_MODULESUBSTREAMVISITOR_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_CODEVIEW_MODULESUBSTREAMVISITOR_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/CodeView.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/CodeViewError.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/Line.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/ModuleSubstream.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/BinaryStreamArray.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/BinaryStreamReader.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/BinaryStreamRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Endian.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Error.h"
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|codeview
block|{
struct|struct
name|LineColumnEntry
block|{
name|support
operator|::
name|ulittle32_t
name|NameIndex
expr_stmt|;
name|FixedStreamArray
operator|<
name|LineNumberEntry
operator|>
name|LineNumbers
expr_stmt|;
name|FixedStreamArray
operator|<
name|ColumnNumberEntry
operator|>
name|Columns
expr_stmt|;
block|}
struct|;
struct|struct
name|FileChecksumEntry
block|{
name|uint32_t
name|FileNameOffset
decl_stmt|;
comment|// Byte offset of filename in global stringtable.
name|FileChecksumKind
name|Kind
decl_stmt|;
comment|// The type of checksum.
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|Checksum
expr_stmt|;
comment|// The bytes of the checksum.
block|}
struct|;
typedef|typedef
name|VarStreamArray
operator|<
name|LineColumnEntry
operator|>
name|LineInfoArray
expr_stmt|;
typedef|typedef
name|VarStreamArray
operator|<
name|FileChecksumEntry
operator|>
name|FileChecksumArray
expr_stmt|;
name|class
name|IModuleSubstreamVisitor
block|{
name|public
label|:
name|virtual
operator|~
name|IModuleSubstreamVisitor
argument_list|()
operator|=
expr|default
expr_stmt|;
name|virtual
name|Error
name|visitUnknown
parameter_list|(
name|ModuleSubstreamKind
name|Kind
parameter_list|,
name|BinaryStreamRef
name|Data
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|Error
name|visitSymbols
parameter_list|(
name|BinaryStreamRef
name|Data
parameter_list|)
function_decl|;
name|virtual
name|Error
name|visitLines
parameter_list|(
name|BinaryStreamRef
name|Data
parameter_list|,
specifier|const
name|LineSubstreamHeader
modifier|*
name|Header
parameter_list|,
specifier|const
name|LineInfoArray
modifier|&
name|Lines
parameter_list|)
function_decl|;
name|virtual
name|Error
name|visitStringTable
parameter_list|(
name|BinaryStreamRef
name|Data
parameter_list|)
function_decl|;
name|virtual
name|Error
name|visitFileChecksums
parameter_list|(
name|BinaryStreamRef
name|Data
parameter_list|,
specifier|const
name|FileChecksumArray
modifier|&
name|Checksums
parameter_list|)
function_decl|;
name|virtual
name|Error
name|visitFrameData
parameter_list|(
name|BinaryStreamRef
name|Data
parameter_list|)
function_decl|;
name|virtual
name|Error
name|visitInlineeLines
parameter_list|(
name|BinaryStreamRef
name|Data
parameter_list|)
function_decl|;
name|virtual
name|Error
name|visitCrossScopeImports
parameter_list|(
name|BinaryStreamRef
name|Data
parameter_list|)
function_decl|;
name|virtual
name|Error
name|visitCrossScopeExports
parameter_list|(
name|BinaryStreamRef
name|Data
parameter_list|)
function_decl|;
name|virtual
name|Error
name|visitILLines
parameter_list|(
name|BinaryStreamRef
name|Data
parameter_list|)
function_decl|;
name|virtual
name|Error
name|visitFuncMDTokenMap
parameter_list|(
name|BinaryStreamRef
name|Data
parameter_list|)
function_decl|;
name|virtual
name|Error
name|visitTypeMDTokenMap
parameter_list|(
name|BinaryStreamRef
name|Data
parameter_list|)
function_decl|;
name|virtual
name|Error
name|visitMergedAssemblyInput
parameter_list|(
name|BinaryStreamRef
name|Data
parameter_list|)
function_decl|;
name|virtual
name|Error
name|visitCoffSymbolRVA
parameter_list|(
name|BinaryStreamRef
name|Data
parameter_list|)
function_decl|;
block|}
empty_stmt|;
name|Error
name|visitModuleSubstream
parameter_list|(
specifier|const
name|ModuleSubstream
modifier|&
name|R
parameter_list|,
name|IModuleSubstreamVisitor
modifier|&
name|V
parameter_list|)
function_decl|;
block|}
comment|// end namespace codeview
name|template
operator|<
operator|>
name|class
name|VarStreamArrayExtractor
operator|<
name|codeview
operator|::
name|LineColumnEntry
operator|>
block|{
name|public
operator|:
name|VarStreamArrayExtractor
argument_list|(
specifier|const
name|codeview
operator|::
name|LineSubstreamHeader
operator|*
name|Header
argument_list|)
operator|:
name|Header
argument_list|(
argument|Header
argument_list|)
block|{}
name|Error
name|operator
argument_list|()
operator|(
name|BinaryStreamRef
name|Stream
operator|,
name|uint32_t
operator|&
name|Len
operator|,
name|codeview
operator|::
name|LineColumnEntry
operator|&
name|Item
operator|)
specifier|const
block|{
name|using
name|namespace
name|codeview
block|;
specifier|const
name|LineFileBlockHeader
operator|*
name|BlockHeader
block|;
name|BinaryStreamReader
name|Reader
argument_list|(
name|Stream
argument_list|)
block|;
if|if
condition|(
name|auto
name|EC
init|=
name|Reader
operator|.
name|readObject
argument_list|(
name|BlockHeader
argument_list|)
condition|)
return|return
name|EC
return|;
name|bool
name|HasColumn
operator|=
name|Header
operator|->
name|Flags
operator|&
name|LineFlags
operator|::
name|HaveColumns
block|;
name|uint32_t
name|LineInfoSize
operator|=
name|BlockHeader
operator|->
name|NumLines
operator|*
operator|(
sizeof|sizeof
argument_list|(
name|LineNumberEntry
argument_list|)
operator|+
operator|(
name|HasColumn
condition|?
sizeof|sizeof
argument_list|(
name|ColumnNumberEntry
argument_list|)
else|:
literal|0
operator|)
operator|)
block|;
if|if
condition|(
name|BlockHeader
operator|->
name|BlockSize
operator|<
sizeof|sizeof
argument_list|(
name|LineFileBlockHeader
argument_list|)
condition|)
return|return
name|make_error
operator|<
name|CodeViewError
operator|>
operator|(
name|cv_error_code
operator|::
name|corrupt_record
operator|,
literal|"Invalid line block record size"
operator|)
return|;
name|uint32_t
name|Size
operator|=
name|BlockHeader
operator|->
name|BlockSize
operator|-
sizeof|sizeof
argument_list|(
name|LineFileBlockHeader
argument_list|)
expr_stmt|;
if|if
condition|(
name|LineInfoSize
operator|>
name|Size
condition|)
return|return
name|make_error
operator|<
name|CodeViewError
operator|>
operator|(
name|cv_error_code
operator|::
name|corrupt_record
operator|,
literal|"Invalid line block record size"
operator|)
return|;
comment|// The value recorded in BlockHeader->BlockSize includes the size of
comment|// LineFileBlockHeader.
name|Len
operator|=
name|BlockHeader
operator|->
name|BlockSize
expr_stmt|;
name|Item
operator|.
name|NameIndex
operator|=
name|BlockHeader
operator|->
name|NameIndex
expr_stmt|;
if|if
condition|(
name|auto
name|EC
init|=
name|Reader
operator|.
name|readArray
argument_list|(
name|Item
operator|.
name|LineNumbers
argument_list|,
name|BlockHeader
operator|->
name|NumLines
argument_list|)
condition|)
return|return
name|EC
return|;
if|if
condition|(
name|HasColumn
condition|)
block|{
if|if
condition|(
name|auto
name|EC
init|=
name|Reader
operator|.
name|readArray
argument_list|(
name|Item
operator|.
name|Columns
argument_list|,
name|BlockHeader
operator|->
name|NumLines
argument_list|)
condition|)
return|return
name|EC
return|;
block|}
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
end_decl_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
specifier|const
name|codeview
operator|::
name|LineSubstreamHeader
operator|*
name|Header
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
operator|>
name|class
name|VarStreamArrayExtractor
operator|<
name|codeview
operator|::
name|FileChecksumEntry
operator|>
block|{
name|public
operator|:
name|Error
name|operator
argument_list|()
operator|(
name|BinaryStreamRef
name|Stream
operator|,
name|uint32_t
operator|&
name|Len
operator|,
name|codeview
operator|::
name|FileChecksumEntry
operator|&
name|Item
operator|)
specifier|const
block|{
name|using
name|namespace
name|codeview
block|;
specifier|const
name|FileChecksum
operator|*
name|Header
block|;
name|BinaryStreamReader
name|Reader
argument_list|(
name|Stream
argument_list|)
block|;
if|if
condition|(
name|auto
name|EC
init|=
name|Reader
operator|.
name|readObject
argument_list|(
name|Header
argument_list|)
condition|)
return|return
name|EC
return|;
name|Item
operator|.
name|FileNameOffset
operator|=
name|Header
operator|->
name|FileNameOffset
block|;
name|Item
operator|.
name|Kind
operator|=
name|static_cast
operator|<
name|FileChecksumKind
operator|>
operator|(
name|Header
operator|->
name|ChecksumKind
operator|)
block|;
if|if
condition|(
name|auto
name|EC
init|=
name|Reader
operator|.
name|readBytes
argument_list|(
name|Item
operator|.
name|Checksum
argument_list|,
name|Header
operator|->
name|ChecksumSize
argument_list|)
condition|)
return|return
name|EC
return|;
name|Len
operator|=
sizeof|sizeof
argument_list|(
name|FileChecksum
argument_list|)
operator|+
name|Header
operator|->
name|ChecksumSize
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
end_return

begin_empty_stmt
unit|} }
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_DEBUGINFO_CODEVIEW_MODULESUBSTREAMVISITOR_H
end_comment

end_unit

