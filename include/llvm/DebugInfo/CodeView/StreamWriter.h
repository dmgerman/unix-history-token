begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- StreamWriter.h - Writes bytes and objects to a stream ----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_CODEVIEW_STREAMWRITER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_CODEVIEW_STREAMWRITER_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/CodeViewError.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/StreamArray.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/StreamInterface.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Endian.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Error.h"
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|codeview
block|{
name|class
name|StreamRef
decl_stmt|;
name|class
name|StreamWriter
block|{
name|public
label|:
name|StreamWriter
argument_list|(
argument|StreamRef Stream
argument_list|)
empty_stmt|;
name|Error
name|writeBytes
argument_list|(
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|Buffer
argument_list|)
decl_stmt|;
name|Error
name|writeInteger
parameter_list|(
name|uint16_t
name|Dest
parameter_list|)
function_decl|;
name|Error
name|writeInteger
parameter_list|(
name|uint32_t
name|Dest
parameter_list|)
function_decl|;
name|Error
name|writeZeroString
parameter_list|(
name|StringRef
name|Str
parameter_list|)
function_decl|;
name|Error
name|writeFixedString
parameter_list|(
name|StringRef
name|Str
parameter_list|)
function_decl|;
name|Error
name|writeStreamRef
parameter_list|(
name|StreamRef
name|Ref
parameter_list|)
function_decl|;
name|Error
name|writeStreamRef
parameter_list|(
name|StreamRef
name|Ref
parameter_list|,
name|uint32_t
name|Size
parameter_list|)
function_decl|;
name|template
operator|<
name|typename
name|T
operator|>
name|Error
name|writeEnum
argument_list|(
argument|T Num
argument_list|)
block|{
return|return
name|writeInteger
argument_list|(
argument|static_cast<typename std::underlying_type<T>::type>(Num)
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|Error
name|writeObject
argument_list|(
argument|const T&Obj
argument_list|)
block|{
name|static_assert
argument_list|(
operator|!
name|std
operator|::
name|is_pointer
operator|<
name|T
operator|>
operator|::
name|value
argument_list|,
literal|"writeObject should not be used with pointers, to write "
literal|"the pointed-to value dereference the pointer before calling "
literal|"writeObject"
argument_list|)
block|;
return|return
name|writeBytes
argument_list|(
name|ArrayRef
operator|<
name|uint8_t
operator|>
operator|(
name|reinterpret_cast
operator|<
specifier|const
name|uint8_t
operator|*
operator|>
operator|(
operator|&
name|Obj
operator|)
operator|,
sizeof|sizeof
argument_list|(
name|T
argument_list|)
operator|)
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|Error
name|writeArray
argument_list|(
argument|ArrayRef<T> Array
argument_list|)
block|{
if|if
condition|(
name|Array
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
if|if
condition|(
name|Array
operator|.
name|size
argument_list|()
operator|>
name|UINT32_MAX
operator|/
sizeof|sizeof
argument_list|(
name|T
argument_list|)
condition|)
return|return
name|make_error
operator|<
name|CodeViewError
operator|>
operator|(
name|cv_error_code
operator|::
name|insufficient_buffer
operator|)
return|;
return|return
name|writeBytes
argument_list|(
name|ArrayRef
operator|<
name|uint8_t
operator|>
operator|(
name|reinterpret_cast
operator|<
specifier|const
name|uint8_t
operator|*
operator|>
operator|(
name|Array
operator|.
name|data
argument_list|()
operator|)
operator|,
name|Array
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
operator|)
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|U
operator|>
name|Error
name|writeArray
argument_list|(
argument|VarStreamArray<T
argument_list|,
argument|U> Array
argument_list|)
block|{
return|return
name|writeStreamRef
argument_list|(
name|Array
operator|.
name|getUnderlyingStream
argument_list|()
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|Error
name|writeArray
argument_list|(
argument|FixedStreamArray<T> Array
argument_list|)
block|{
return|return
name|writeStreamRef
argument_list|(
name|Array
operator|.
name|getUnderlyingStream
argument_list|()
argument_list|)
return|;
block|}
name|void
name|setOffset
parameter_list|(
name|uint32_t
name|Off
parameter_list|)
block|{
name|Offset
operator|=
name|Off
expr_stmt|;
block|}
name|uint32_t
name|getOffset
argument_list|()
specifier|const
block|{
return|return
name|Offset
return|;
block|}
name|uint32_t
name|getLength
argument_list|()
specifier|const
block|{
return|return
name|Stream
operator|.
name|getLength
argument_list|()
return|;
block|}
name|uint32_t
name|bytesRemaining
argument_list|()
specifier|const
block|{
return|return
name|getLength
argument_list|()
operator|-
name|getOffset
argument_list|()
return|;
block|}
name|private
label|:
name|StreamRef
name|Stream
decl_stmt|;
name|uint32_t
name|Offset
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace codeview
end_comment

begin_comment
unit|}
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_DEBUGINFO_CODEVIEW_STREAMREADER_H
end_comment

end_unit

