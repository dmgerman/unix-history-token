begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- SymbolDeserializer.h -------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_CODEVIEW_SYMBOLDESERIALIZER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_CODEVIEW_SYMBOLDESERIALIZER_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/SymbolRecord.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/SymbolRecordMapping.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/SymbolVisitorCallbacks.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/SymbolVisitorDelegate.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/BinaryByteStream.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/BinaryStreamReader.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Error.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|codeview
block|{
name|class
name|SymbolVisitorDelegate
decl_stmt|;
name|class
name|SymbolDeserializer
range|:
name|public
name|SymbolVisitorCallbacks
block|{   struct
name|MappingInfo
block|{
name|explicit
name|MappingInfo
argument_list|(
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|RecordData
argument_list|)
operator|:
name|Stream
argument_list|(
name|RecordData
argument_list|,
name|llvm
operator|::
name|support
operator|::
name|little
argument_list|)
block|,
name|Reader
argument_list|(
name|Stream
argument_list|)
block|,
name|Mapping
argument_list|(
argument|Reader
argument_list|)
block|{}
name|BinaryByteStream
name|Stream
block|;
name|BinaryStreamReader
name|Reader
block|;
name|SymbolRecordMapping
name|Mapping
block|;   }
block|;
name|public
operator|:
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|Error
name|deserializeAs
argument_list|(
argument|CVSymbol Symbol
argument_list|,
argument|T&Record
argument_list|)
block|{
name|SymbolDeserializer
name|S
argument_list|(
name|nullptr
argument_list|)
block|;
if|if
condition|(
name|auto
name|EC
init|=
name|S
operator|.
name|visitSymbolBegin
argument_list|(
name|Symbol
argument_list|)
condition|)
return|return
name|EC
return|;
if|if
condition|(
name|auto
name|EC
init|=
name|S
operator|.
name|visitKnownRecord
argument_list|(
name|Symbol
argument_list|,
name|Record
argument_list|)
condition|)
return|return
name|EC
return|;
if|if
condition|(
name|auto
name|EC
init|=
name|S
operator|.
name|visitSymbolEnd
argument_list|(
name|Symbol
argument_list|)
condition|)
return|return
name|EC
return|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
name|explicit
name|SymbolDeserializer
argument_list|(
name|SymbolVisitorDelegate
operator|*
name|Delegate
argument_list|)
operator|:
name|Delegate
argument_list|(
argument|Delegate
argument_list|)
block|{}
name|Error
name|visitSymbolBegin
argument_list|(
argument|CVSymbol&Record
argument_list|)
name|override
block|{
name|assert
argument_list|(
operator|!
name|Mapping
operator|&&
literal|"Already in a symbol mapping!"
argument_list|)
block|;
name|Mapping
operator|=
name|llvm
operator|::
name|make_unique
operator|<
name|MappingInfo
operator|>
operator|(
name|Record
operator|.
name|content
argument_list|()
operator|)
block|;
return|return
name|Mapping
operator|->
name|Mapping
operator|.
name|visitSymbolBegin
argument_list|(
name|Record
argument_list|)
return|;
block|}
name|Error
name|visitSymbolEnd
parameter_list|(
name|CVSymbol
modifier|&
name|Record
parameter_list|)
function|override
block|{
name|assert
argument_list|(
name|Mapping
operator|&&
literal|"Not in a symbol mapping!"
argument_list|)
expr_stmt|;
name|auto
name|EC
init|=
name|Mapping
operator|->
name|Mapping
operator|.
name|visitSymbolEnd
argument_list|(
name|Record
argument_list|)
decl_stmt|;
name|Mapping
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
name|EC
return|;
block|}
define|#
directive|define
name|SYMBOL_RECORD
parameter_list|(
name|EnumName
parameter_list|,
name|EnumVal
parameter_list|,
name|Name
parameter_list|)
define|\
value|Error visitKnownRecord(CVSymbol&CVR, Name&Record) override {               \     return visitKnownRecordImpl(CVR, Record);                                  \   }
define|#
directive|define
name|SYMBOL_RECORD_ALIAS
parameter_list|(
name|EnumName
parameter_list|,
name|EnumVal
parameter_list|,
name|Name
parameter_list|,
name|AliasName
parameter_list|)
include|#
directive|include
file|"llvm/DebugInfo/CodeView/CodeViewSymbols.def"
name|private
label|:
name|template
operator|<
name|typename
name|T
operator|>
name|Error
name|visitKnownRecordImpl
argument_list|(
argument|CVSymbol&CVR
argument_list|,
argument|T&Record
argument_list|)
block|{
name|Record
operator|.
name|RecordOffset
operator|=
name|Delegate
operator|?
name|Delegate
operator|->
name|getRecordOffset
argument_list|(
name|Mapping
operator|->
name|Reader
argument_list|)
operator|:
literal|0
block|;
if|if
condition|(
name|auto
name|EC
init|=
name|Mapping
operator|->
name|Mapping
operator|.
name|visitKnownRecord
argument_list|(
name|CVR
argument_list|,
name|Record
argument_list|)
condition|)
return|return
name|EC
return|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|SymbolVisitorDelegate
modifier|*
name|Delegate
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|std
operator|::
name|unique_ptr
operator|<
name|MappingInfo
operator|>
name|Mapping
expr_stmt|;
end_expr_stmt

begin_endif
unit|}; } }
endif|#
directive|endif
end_endif

end_unit

