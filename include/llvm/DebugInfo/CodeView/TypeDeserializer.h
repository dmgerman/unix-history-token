begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- TypeDeserializer.h ---------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_CODEVIEW_TYPEDESERIALIZER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_CODEVIEW_TYPEDESERIALIZER_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/STLExtras.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/CodeView.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/TypeRecord.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/TypeRecordMapping.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/MSF/ByteStream.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/MSF/StreamReader.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Error.h"
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_include
include|#
directive|include
file|<memory>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|codeview
block|{
name|class
name|TypeDeserializer
range|:
name|public
name|TypeVisitorCallbacks
block|{   struct
name|MappingInfo
block|{
name|explicit
name|MappingInfo
argument_list|(
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|RecordData
argument_list|)
operator|:
name|Stream
argument_list|(
name|RecordData
argument_list|)
block|,
name|Reader
argument_list|(
name|Stream
argument_list|)
block|,
name|Mapping
argument_list|(
argument|Reader
argument_list|)
block|{}
name|msf
operator|::
name|ByteStream
name|Stream
block|;
name|msf
operator|::
name|StreamReader
name|Reader
block|;
name|TypeRecordMapping
name|Mapping
block|;   }
block|;
name|public
operator|:
name|TypeDeserializer
argument_list|()
operator|=
expr|default
block|;
name|Error
name|visitTypeBegin
argument_list|(
argument|CVType&Record
argument_list|)
name|override
block|{
name|assert
argument_list|(
operator|!
name|Mapping
operator|&&
literal|"Already in a type mapping!"
argument_list|)
block|;
name|Mapping
operator|=
name|llvm
operator|::
name|make_unique
operator|<
name|MappingInfo
operator|>
operator|(
name|Record
operator|.
name|content
argument_list|()
operator|)
block|;
return|return
name|Mapping
operator|->
name|Mapping
operator|.
name|visitTypeBegin
argument_list|(
name|Record
argument_list|)
return|;
block|}
name|Error
name|visitTypeEnd
argument_list|(
argument|CVType&Record
argument_list|)
name|override
block|{
name|assert
argument_list|(
name|Mapping
operator|&&
literal|"Not in a type mapping!"
argument_list|)
block|;
name|auto
name|EC
operator|=
name|Mapping
operator|->
name|Mapping
operator|.
name|visitTypeEnd
argument_list|(
name|Record
argument_list|)
block|;
name|Mapping
operator|.
name|reset
argument_list|()
block|;
return|return
name|EC
return|;
block|}
define|#
directive|define
name|TYPE_RECORD
parameter_list|(
name|EnumName
parameter_list|,
name|EnumVal
parameter_list|,
name|Name
parameter_list|)
define|\
value|Error visitKnownRecord(CVType&CVR, Name##Record&Record) override {         \     return visitKnownRecordImpl<Name##Record>(CVR, Record);                    \   }
define|#
directive|define
name|MEMBER_RECORD
parameter_list|(
name|EnumName
parameter_list|,
name|EnumVal
parameter_list|,
name|Name
parameter_list|)
define|#
directive|define
name|TYPE_RECORD_ALIAS
parameter_list|(
name|EnumName
parameter_list|,
name|EnumVal
parameter_list|,
name|Name
parameter_list|,
name|AliasName
parameter_list|)
define|#
directive|define
name|MEMBER_RECORD_ALIAS
parameter_list|(
name|EnumName
parameter_list|,
name|EnumVal
parameter_list|,
name|Name
parameter_list|,
name|AliasName
parameter_list|)
include|#
directive|include
file|"TypeRecords.def"
name|private
operator|:
name|template
operator|<
name|typename
name|RecordType
operator|>
name|Error
name|visitKnownRecordImpl
argument_list|(
argument|CVType&CVR
argument_list|,
argument|RecordType&Record
argument_list|)
block|{
return|return
name|Mapping
operator|->
name|Mapping
operator|.
name|visitKnownRecord
argument_list|(
name|CVR
argument_list|,
name|Record
argument_list|)
return|;
block|}
name|std
operator|::
name|unique_ptr
operator|<
name|MappingInfo
operator|>
name|Mapping
block|; }
decl_stmt|;
name|class
name|FieldListDeserializer
range|:
name|public
name|TypeVisitorCallbacks
block|{   struct
name|MappingInfo
block|{
name|explicit
name|MappingInfo
argument_list|(
name|msf
operator|::
name|StreamReader
operator|&
name|R
argument_list|)
operator|:
name|Reader
argument_list|(
name|R
argument_list|)
block|,
name|Mapping
argument_list|(
name|Reader
argument_list|)
block|,
name|StartOffset
argument_list|(
literal|0
argument_list|)
block|{}
name|msf
operator|::
name|StreamReader
operator|&
name|Reader
block|;
name|TypeRecordMapping
name|Mapping
block|;
name|uint32_t
name|StartOffset
block|;   }
block|;
name|public
operator|:
name|explicit
name|FieldListDeserializer
argument_list|(
name|msf
operator|::
name|StreamReader
operator|&
name|Reader
argument_list|)
operator|:
name|Mapping
argument_list|(
argument|Reader
argument_list|)
block|{
name|CVType
name|FieldList
block|;
name|FieldList
operator|.
name|Type
operator|=
name|TypeLeafKind
operator|::
name|LF_FIELDLIST
block|;
name|consumeError
argument_list|(
name|Mapping
operator|.
name|Mapping
operator|.
name|visitTypeBegin
argument_list|(
name|FieldList
argument_list|)
argument_list|)
block|;   }
operator|~
name|FieldListDeserializer
argument_list|()
name|override
block|{
name|CVType
name|FieldList
block|;
name|FieldList
operator|.
name|Type
operator|=
name|TypeLeafKind
operator|::
name|LF_FIELDLIST
block|;
name|consumeError
argument_list|(
name|Mapping
operator|.
name|Mapping
operator|.
name|visitTypeEnd
argument_list|(
name|FieldList
argument_list|)
argument_list|)
block|;   }
name|Error
name|visitMemberBegin
argument_list|(
argument|CVMemberRecord&Record
argument_list|)
name|override
block|{
name|Mapping
operator|.
name|StartOffset
operator|=
name|Mapping
operator|.
name|Reader
operator|.
name|getOffset
argument_list|()
block|;
return|return
name|Mapping
operator|.
name|Mapping
operator|.
name|visitMemberBegin
argument_list|(
name|Record
argument_list|)
return|;
block|}
name|Error
name|visitMemberEnd
argument_list|(
argument|CVMemberRecord&Record
argument_list|)
name|override
block|{
if|if
condition|(
name|auto
name|EC
init|=
name|Mapping
operator|.
name|Mapping
operator|.
name|visitMemberEnd
argument_list|(
name|Record
argument_list|)
condition|)
return|return
name|EC
return|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
define|#
directive|define
name|TYPE_RECORD
parameter_list|(
name|EnumName
parameter_list|,
name|EnumVal
parameter_list|,
name|Name
parameter_list|)
define|#
directive|define
name|MEMBER_RECORD
parameter_list|(
name|EnumName
parameter_list|,
name|EnumVal
parameter_list|,
name|Name
parameter_list|)
define|\
value|Error visitKnownMember(CVMemberRecord&CVR, Name##Record&Record) override { \     return visitKnownMemberImpl<Name##Record>(CVR, Record);                    \   }
define|#
directive|define
name|TYPE_RECORD_ALIAS
parameter_list|(
name|EnumName
parameter_list|,
name|EnumVal
parameter_list|,
name|Name
parameter_list|,
name|AliasName
parameter_list|)
define|#
directive|define
name|MEMBER_RECORD_ALIAS
parameter_list|(
name|EnumName
parameter_list|,
name|EnumVal
parameter_list|,
name|Name
parameter_list|,
name|AliasName
parameter_list|)
include|#
directive|include
file|"TypeRecords.def"
name|private
label|:
name|template
operator|<
name|typename
name|RecordType
operator|>
name|Error
name|visitKnownMemberImpl
argument_list|(
argument|CVMemberRecord&CVR
argument_list|,
argument|RecordType&Record
argument_list|)
block|{
if|if
condition|(
name|auto
name|EC
init|=
name|Mapping
operator|.
name|Mapping
operator|.
name|visitKnownMember
argument_list|(
name|CVR
argument_list|,
name|Record
argument_list|)
condition|)
return|return
name|EC
return|;
name|uint32_t
name|EndOffset
operator|=
name|Mapping
operator|.
name|Reader
operator|.
name|getOffset
argument_list|()
expr_stmt|;
name|uint32_t
name|RecordLength
init|=
name|EndOffset
operator|-
name|Mapping
operator|.
name|StartOffset
decl_stmt|;
name|Mapping
operator|.
name|Reader
operator|.
name|setOffset
argument_list|(
name|Mapping
operator|.
name|StartOffset
argument_list|)
expr_stmt|;
if|if
condition|(
name|auto
name|EC
init|=
name|Mapping
operator|.
name|Reader
operator|.
name|readBytes
argument_list|(
name|CVR
operator|.
name|Data
argument_list|,
name|RecordLength
argument_list|)
condition|)
return|return
name|EC
return|;
name|assert
argument_list|(
name|Mapping
operator|.
name|Reader
operator|.
name|getOffset
argument_list|()
operator|==
name|EndOffset
argument_list|)
expr_stmt|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
name|MappingInfo
name|Mapping
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// end namespace codeview
end_comment

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_DEBUGINFO_CODEVIEW_TYPEDESERIALIZER_H
end_comment

end_unit

