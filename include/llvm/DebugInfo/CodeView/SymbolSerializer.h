begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- symbolSerializer.h ---------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_CODEVIEW_SYMBOLSERIALIZER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_CODEVIEW_SYMBOLSERIALIZER_H
end_define

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/SymbolRecordMapping.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/SymbolVisitorCallbacks.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/Optional.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/iterator_range.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Allocator.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/BinaryByteStream.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/BinaryStreamWriter.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Error.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|BinaryStreamWriter
decl_stmt|;
name|namespace
name|codeview
block|{
name|class
name|SymbolSerializer
range|:
name|public
name|SymbolVisitorCallbacks
block|{
name|BumpPtrAllocator
operator|&
name|Storage
block|;
name|std
operator|::
name|vector
operator|<
name|uint8_t
operator|>
name|RecordBuffer
block|;
name|MutableBinaryByteStream
name|Stream
block|;
name|BinaryStreamWriter
name|Writer
block|;
name|SymbolRecordMapping
name|Mapping
block|;
name|Optional
operator|<
name|SymbolKind
operator|>
name|CurrentSymbol
block|;
name|Error
name|writeRecordPrefix
argument_list|(
argument|SymbolKind Kind
argument_list|)
block|{
name|RecordPrefix
name|Prefix
block|;
name|Prefix
operator|.
name|RecordKind
operator|=
name|Kind
block|;
name|Prefix
operator|.
name|RecordLen
operator|=
literal|0
block|;
if|if
condition|(
name|auto
name|EC
init|=
name|Writer
operator|.
name|writeObject
argument_list|(
name|Prefix
argument_list|)
condition|)
return|return
name|EC
return|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
name|public
label|:
name|template
operator|<
name|typename
name|SymType
operator|>
specifier|static
name|CVSymbol
name|writeOneSymbol
argument_list|(
argument|SymType&Sym
argument_list|,
argument|BumpPtrAllocator&Storage
argument_list|)
block|{
name|CVSymbol
name|Result
block|;
name|Result
operator|.
name|Type
operator|=
name|static_cast
operator|<
name|SymbolKind
operator|>
operator|(
name|Sym
operator|.
name|Kind
operator|)
block|;
name|SymbolSerializer
name|Serializer
argument_list|(
name|Storage
argument_list|)
block|;
name|consumeError
argument_list|(
name|Serializer
operator|.
name|visitSymbolBegin
argument_list|(
name|Result
argument_list|)
argument_list|)
block|;
name|consumeError
argument_list|(
name|Serializer
operator|.
name|visitKnownRecord
argument_list|(
name|Result
argument_list|,
name|Sym
argument_list|)
argument_list|)
block|;
name|consumeError
argument_list|(
name|Serializer
operator|.
name|visitSymbolEnd
argument_list|(
name|Result
argument_list|)
argument_list|)
block|;
return|return
name|Result
return|;
block|}
name|explicit
name|SymbolSerializer
parameter_list|(
name|BumpPtrAllocator
modifier|&
name|Storage
parameter_list|)
function_decl|;
name|virtual
name|Error
name|visitSymbolBegin
argument_list|(
name|CVSymbol
operator|&
name|Record
argument_list|)
name|override
decl_stmt|;
name|virtual
name|Error
name|visitSymbolEnd
argument_list|(
name|CVSymbol
operator|&
name|Record
argument_list|)
name|override
decl_stmt|;
define|#
directive|define
name|SYMBOL_RECORD
parameter_list|(
name|EnumName
parameter_list|,
name|EnumVal
parameter_list|,
name|Name
parameter_list|)
define|\
value|virtual Error visitKnownRecord(CVSymbol&CVR, Name&Record) override {       \     return visitKnownRecordImpl(CVR, Record);                                  \   }
define|#
directive|define
name|SYMBOL_RECORD_ALIAS
parameter_list|(
name|EnumName
parameter_list|,
name|EnumVal
parameter_list|,
name|Name
parameter_list|,
name|AliasName
parameter_list|)
include|#
directive|include
file|"llvm/DebugInfo/CodeView/CodeViewSymbols.def"
name|private
label|:
name|template
operator|<
name|typename
name|RecordKind
operator|>
name|Error
name|visitKnownRecordImpl
argument_list|(
argument|CVSymbol&CVR
argument_list|,
argument|RecordKind&Record
argument_list|)
block|{
return|return
name|Mapping
operator|.
name|visitKnownRecord
argument_list|(
name|CVR
argument_list|,
name|Record
argument_list|)
return|;
block|}
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

end_unit

