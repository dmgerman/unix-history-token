begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- CodeViewRecordIO.h ---------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_CODEVIEW_CODEVIEWRECORDIO_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_CODEVIEW_CODEVIEWRECORDIO_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/APSInt.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/None.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/Optional.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/CodeViewError.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/TypeRecord.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/BinaryStreamReader.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/BinaryStreamWriter.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Error.h"
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_include
include|#
directive|include
file|<type_traits>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|codeview
block|{
name|class
name|CodeViewRecordIO
block|{
name|uint32_t
name|getCurrentOffset
argument_list|()
specifier|const
block|{
return|return
operator|(
name|isWriting
argument_list|()
operator|)
operator|?
name|Writer
operator|->
name|getOffset
argument_list|()
operator|:
name|Reader
operator|->
name|getOffset
argument_list|()
return|;
block|}
name|public
label|:
name|explicit
name|CodeViewRecordIO
argument_list|(
name|BinaryStreamReader
operator|&
name|Reader
argument_list|)
operator|:
name|Reader
argument_list|(
argument|&Reader
argument_list|)
block|{}
name|explicit
name|CodeViewRecordIO
argument_list|(
name|BinaryStreamWriter
operator|&
name|Writer
argument_list|)
operator|:
name|Writer
argument_list|(
argument|&Writer
argument_list|)
block|{}
name|Error
name|beginRecord
argument_list|(
name|Optional
operator|<
name|uint32_t
operator|>
name|MaxLength
argument_list|)
expr_stmt|;
name|Error
name|endRecord
parameter_list|()
function_decl|;
name|Error
name|mapInteger
parameter_list|(
name|TypeIndex
modifier|&
name|TypeInd
parameter_list|)
function_decl|;
name|bool
name|isReading
argument_list|()
specifier|const
block|{
return|return
name|Reader
operator|!=
name|nullptr
return|;
block|}
name|bool
name|isWriting
argument_list|()
specifier|const
block|{
return|return
operator|!
name|isReading
argument_list|()
return|;
block|}
name|uint32_t
name|maxFieldLength
argument_list|()
specifier|const
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
name|Error
name|mapObject
argument_list|(
argument|T&Value
argument_list|)
block|{
if|if
condition|(
name|isWriting
argument_list|()
condition|)
return|return
name|Writer
operator|->
name|writeObject
argument_list|(
name|Value
argument_list|)
return|;
specifier|const
name|T
operator|*
name|ValuePtr
expr_stmt|;
if|if
condition|(
name|auto
name|EC
init|=
name|Reader
operator|->
name|readObject
argument_list|(
name|ValuePtr
argument_list|)
condition|)
return|return
name|EC
return|;
name|Value
operator|=
operator|*
name|ValuePtr
expr_stmt|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|Error
name|mapInteger
argument_list|(
argument|T&Value
argument_list|)
block|{
if|if
condition|(
name|isWriting
argument_list|()
condition|)
return|return
name|Writer
operator|->
name|writeInteger
argument_list|(
name|Value
argument_list|)
return|;
return|return
name|Reader
operator|->
name|readInteger
argument_list|(
name|Value
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|Error
name|mapEnum
argument_list|(
argument|T&Value
argument_list|)
block|{
if|if
condition|(
sizeof|sizeof
argument_list|(
name|Value
argument_list|)
operator|>
name|maxFieldLength
argument_list|()
condition|)
return|return
name|make_error
operator|<
name|CodeViewError
operator|>
operator|(
name|cv_error_code
operator|::
name|insufficient_buffer
operator|)
return|;
name|using
name|U
operator|=
name|typename
name|std
operator|::
name|underlying_type
operator|<
name|T
operator|>
operator|::
name|type
expr_stmt|;
name|U
name|X
decl_stmt|;
if|if
condition|(
name|isWriting
argument_list|()
condition|)
name|X
operator|=
name|static_cast
operator|<
name|U
operator|>
operator|(
name|Value
operator|)
expr_stmt|;
if|if
condition|(
name|auto
name|EC
init|=
name|mapInteger
argument_list|(
name|X
argument_list|)
condition|)
return|return
name|EC
return|;
if|if
condition|(
name|isReading
argument_list|()
condition|)
name|Value
operator|=
name|static_cast
operator|<
name|T
operator|>
operator|(
name|X
operator|)
expr_stmt|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
end_decl_stmt

begin_function_decl
name|Error
name|mapEncodedInteger
parameter_list|(
name|int64_t
modifier|&
name|Value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Error
name|mapEncodedInteger
parameter_list|(
name|uint64_t
modifier|&
name|Value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Error
name|mapEncodedInteger
parameter_list|(
name|APSInt
modifier|&
name|Value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Error
name|mapStringZ
parameter_list|(
name|StringRef
modifier|&
name|Value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Error
name|mapGuid
parameter_list|(
name|StringRef
modifier|&
name|Guid
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|Error
name|mapStringZVectorZ
argument_list|(
name|std
operator|::
name|vector
operator|<
name|StringRef
operator|>
operator|&
name|Value
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|SizeType
operator|,
name|typename
name|T
operator|,
name|typename
name|ElementMapper
operator|>
name|Error
name|mapVectorN
argument_list|(
argument|T&Items
argument_list|,
argument|const ElementMapper&Mapper
argument_list|)
block|{
name|SizeType
name|Size
block|;
if|if
condition|(
name|isWriting
argument_list|()
condition|)
block|{
name|Size
operator|=
name|static_cast
operator|<
name|SizeType
operator|>
operator|(
name|Items
operator|.
name|size
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|auto
name|EC
init|=
name|Writer
operator|->
name|writeInteger
argument_list|(
name|Size
argument_list|)
condition|)
return|return
name|EC
return|;
for|for
control|(
name|auto
operator|&
name|X
operator|:
name|Items
control|)
block|{
if|if
condition|(
name|auto
name|EC
init|=
name|Mapper
argument_list|(
operator|*
name|this
argument_list|,
name|X
argument_list|)
condition|)
return|return
name|EC
return|;
block|}
end_expr_stmt

begin_block
unit|} else
block|{
if|if
condition|(
name|auto
name|EC
init|=
name|Reader
operator|->
name|readInteger
argument_list|(
name|Size
argument_list|)
condition|)
return|return
name|EC
return|;
for|for
control|(
name|SizeType
name|I
init|=
literal|0
init|;
name|I
operator|<
name|Size
condition|;
operator|++
name|I
control|)
block|{
name|typename
name|T
operator|::
name|value_type
name|Item
expr_stmt|;
if|if
condition|(
name|auto
name|EC
init|=
name|Mapper
argument_list|(
operator|*
name|this
argument_list|,
name|Item
argument_list|)
condition|)
return|return
name|EC
return|;
name|Items
operator|.
name|push_back
argument_list|(
name|Item
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_return
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
end_return

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|T
operator|,
name|typename
name|ElementMapper
operator|>
name|Error
name|mapVectorTail
argument_list|(
argument|T&Items
argument_list|,
argument|const ElementMapper&Mapper
argument_list|)
block|{
if|if
condition|(
name|isWriting
argument_list|()
condition|)
block|{
for|for
control|(
name|auto
operator|&
name|Item
operator|:
name|Items
control|)
block|{
if|if
condition|(
name|auto
name|EC
init|=
name|Mapper
argument_list|(
operator|*
name|this
argument_list|,
name|Item
argument_list|)
condition|)
return|return
name|EC
return|;
block|}
end_expr_stmt

begin_block
unit|} else
block|{
name|typename
name|T
operator|::
name|value_type
name|Field
expr_stmt|;
comment|// Stop when we run out of bytes or we hit record padding bytes.
while|while
condition|(
operator|!
name|Reader
operator|->
name|empty
argument_list|()
operator|&&
name|Reader
operator|->
name|peek
argument_list|()
operator|<
literal|0xf0
comment|/* LF_PAD0 */
condition|)
block|{
if|if
condition|(
name|auto
name|EC
init|=
name|Mapper
argument_list|(
operator|*
name|this
argument_list|,
name|Field
argument_list|)
condition|)
return|return
name|EC
return|;
name|Items
operator|.
name|push_back
argument_list|(
name|Field
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_return
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
end_return

begin_expr_stmt
unit|}    Error
name|mapByteVectorTail
argument_list|(
name|ArrayRef
operator|<
name|uint8_t
operator|>
operator|&
name|Bytes
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|Error
name|mapByteVectorTail
argument_list|(
name|std
operator|::
name|vector
operator|<
name|uint8_t
operator|>
operator|&
name|Bytes
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|Error
name|skipPadding
parameter_list|()
function_decl|;
end_function_decl

begin_label
name|private
label|:
end_label

begin_function_decl
name|Error
name|writeEncodedSignedInteger
parameter_list|(
specifier|const
name|int64_t
modifier|&
name|Value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Error
name|writeEncodedUnsignedInteger
parameter_list|(
specifier|const
name|uint64_t
modifier|&
name|Value
parameter_list|)
function_decl|;
end_function_decl

begin_struct
struct|struct
name|RecordLimit
block|{
name|uint32_t
name|BeginOffset
decl_stmt|;
name|Optional
operator|<
name|uint32_t
operator|>
name|MaxLength
expr_stmt|;
name|Optional
operator|<
name|uint32_t
operator|>
name|bytesRemaining
argument_list|(
argument|uint32_t CurrentOffset
argument_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|MaxLength
operator|.
name|hasValue
argument_list|()
condition|)
return|return
name|None
return|;
name|assert
argument_list|(
name|CurrentOffset
operator|>=
name|BeginOffset
argument_list|)
expr_stmt|;
name|uint32_t
name|BytesUsed
init|=
name|CurrentOffset
operator|-
name|BeginOffset
decl_stmt|;
if|if
condition|(
name|BytesUsed
operator|>=
operator|*
name|MaxLength
condition|)
return|return
literal|0
return|;
return|return
operator|*
name|MaxLength
operator|-
name|BytesUsed
return|;
block|}
end_struct

begin_expr_stmt
unit|};
name|SmallVector
operator|<
name|RecordLimit
operator|,
literal|2
operator|>
name|Limits
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|BinaryStreamReader
modifier|*
name|Reader
init|=
name|nullptr
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|BinaryStreamWriter
modifier|*
name|Writer
init|=
name|nullptr
decl_stmt|;
end_decl_stmt

begin_comment
unit|};  }
comment|// end namespace codeview
end_comment

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_DEBUGINFO_CODEVIEW_CODEVIEWRECORDIO_H
end_comment

end_unit

