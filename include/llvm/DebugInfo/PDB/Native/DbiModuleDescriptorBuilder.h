begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- DbiModuleDescriptorBuilder.h - PDB module information ----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_PDB_RAW_DBIMODULEDESCRIPTORBUILDER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_PDB_RAW_DBIMODULEDESCRIPTORBUILDER_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/DebugChecksumsSubsection.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/DebugInlineeLinesSubsection.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/DebugLinesSubsection.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/SymbolRecord.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/PDB/Native/RawTypes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Error.h"
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|BinaryStreamWriter
decl_stmt|;
name|namespace
name|codeview
block|{
name|class
name|DebugSubsectionRecordBuilder
decl_stmt|;
block|}
name|namespace
name|msf
block|{
name|class
name|MSFBuilder
decl_stmt|;
struct_decl|struct
name|MSFLayout
struct_decl|;
block|}
name|namespace
name|pdb
block|{
name|class
name|DbiModuleDescriptorBuilder
block|{
name|friend
name|class
name|DbiStreamBuilder
decl_stmt|;
name|public
label|:
name|DbiModuleDescriptorBuilder
argument_list|(
argument|StringRef ModuleName
argument_list|,
argument|uint32_t ModIndex
argument_list|,
argument|msf::MSFBuilder&Msf
argument_list|)
empty_stmt|;
operator|~
name|DbiModuleDescriptorBuilder
argument_list|()
expr_stmt|;
name|DbiModuleDescriptorBuilder
argument_list|(
specifier|const
name|DbiModuleDescriptorBuilder
operator|&
argument_list|)
operator|=
name|delete
expr_stmt|;
name|DbiModuleDescriptorBuilder
modifier|&
name|operator
init|=
operator|(
specifier|const
name|DbiModuleDescriptorBuilder
operator|&
operator|)
operator|=
name|delete
decl_stmt|;
name|void
name|setObjFileName
parameter_list|(
name|StringRef
name|Name
parameter_list|)
function_decl|;
name|void
name|addSymbol
argument_list|(
name|codeview
operator|::
name|CVSymbol
name|Symbol
argument_list|)
decl_stmt|;
name|void
name|addDebugSubsection
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|codeview
operator|::
name|DebugSubsection
operator|>
name|Subsection
argument_list|)
decl_stmt|;
name|uint16_t
name|getStreamIndex
argument_list|()
specifier|const
expr_stmt|;
name|StringRef
name|getModuleName
argument_list|()
specifier|const
block|{
return|return
name|ModuleName
return|;
block|}
name|StringRef
name|getObjFileName
argument_list|()
specifier|const
block|{
return|return
name|ObjFileName
return|;
block|}
name|ArrayRef
operator|<
name|std
operator|::
name|string
operator|>
name|source_files
argument_list|()
specifier|const
block|{
return|return
name|makeArrayRef
argument_list|(
name|SourceFiles
argument_list|)
return|;
block|}
name|uint32_t
name|calculateSerializedLength
argument_list|()
specifier|const
expr_stmt|;
name|void
name|finalize
parameter_list|()
function_decl|;
name|Error
name|finalizeMsfLayout
parameter_list|()
function_decl|;
name|Error
name|commit
argument_list|(
name|BinaryStreamWriter
operator|&
name|ModiWriter
argument_list|,
specifier|const
name|msf
operator|::
name|MSFLayout
operator|&
name|MsfLayout
argument_list|,
name|WritableBinaryStreamRef
name|MsfBuffer
argument_list|)
decl_stmt|;
name|private
label|:
name|uint32_t
name|calculateC13DebugInfoSize
argument_list|()
specifier|const
expr_stmt|;
name|void
name|addSourceFile
parameter_list|(
name|StringRef
name|Path
parameter_list|)
function_decl|;
name|msf
operator|::
name|MSFBuilder
operator|&
name|MSF
expr_stmt|;
name|uint32_t
name|SymbolByteSize
init|=
literal|0
decl_stmt|;
name|std
operator|::
name|string
name|ModuleName
expr_stmt|;
name|std
operator|::
name|string
name|ObjFileName
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
name|SourceFiles
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|codeview
operator|::
name|CVSymbol
operator|>
name|Symbols
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|codeview
operator|::
name|DebugSubsectionRecordBuilder
operator|>>
name|C13Builders
expr_stmt|;
name|ModuleInfoHeader
name|Layout
decl_stmt|;
block|}
empty_stmt|;
block|}
comment|// end namespace pdb
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_DEBUGINFO_PDB_RAW_DBIMODULEDESCRIPTORBUILDER_H
end_comment

end_unit

