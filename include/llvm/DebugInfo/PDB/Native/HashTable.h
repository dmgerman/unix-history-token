begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- HashTable.h - PDB Hash Table -----------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_PDB_RAW_HASHTABLE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_PDB_RAW_HASHTABLE_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SparseBitVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/iterator.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/BinaryStreamArray.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/BinaryStreamReader.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/BinaryStreamWriter.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Endian.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Error.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/MathExtras.h"
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_include
include|#
directive|include
file|<utility>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|pdb
block|{
name|class
name|HashTableIterator
decl_stmt|;
name|class
name|HashTable
block|{
name|friend
name|class
name|HashTableIterator
decl_stmt|;
struct|struct
name|Header
block|{
name|support
operator|::
name|ulittle32_t
name|Size
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|Capacity
expr_stmt|;
block|}
struct|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|pair
operator|<
name|uint32_t
operator|,
name|uint32_t
operator|>>
name|BucketList
expr_stmt|;
name|public
label|:
name|HashTable
argument_list|()
expr_stmt|;
name|explicit
name|HashTable
parameter_list|(
name|uint32_t
name|Capacity
parameter_list|)
function_decl|;
name|Error
name|load
parameter_list|(
name|BinaryStreamReader
modifier|&
name|Stream
parameter_list|)
function_decl|;
name|uint32_t
name|calculateSerializedLength
argument_list|()
specifier|const
expr_stmt|;
name|Error
name|commit
argument_list|(
name|BinaryStreamWriter
operator|&
name|Writer
argument_list|)
decl|const
decl_stmt|;
name|void
name|clear
parameter_list|()
function_decl|;
name|uint32_t
name|capacity
argument_list|()
specifier|const
expr_stmt|;
name|uint32_t
name|size
argument_list|()
specifier|const
expr_stmt|;
name|HashTableIterator
name|begin
argument_list|()
specifier|const
expr_stmt|;
name|HashTableIterator
name|end
argument_list|()
specifier|const
expr_stmt|;
name|HashTableIterator
name|find
parameter_list|(
name|uint32_t
name|K
parameter_list|)
function_decl|;
name|void
name|set
parameter_list|(
name|uint32_t
name|K
parameter_list|,
name|uint32_t
name|V
parameter_list|)
function_decl|;
name|void
name|remove
parameter_list|(
name|uint32_t
name|K
parameter_list|)
function_decl|;
name|uint32_t
name|get
parameter_list|(
name|uint32_t
name|K
parameter_list|)
function_decl|;
name|protected
label|:
name|bool
name|isPresent
argument_list|(
name|uint32_t
name|K
argument_list|)
decl|const
block|{
return|return
name|Present
operator|.
name|test
argument_list|(
name|K
argument_list|)
return|;
block|}
name|bool
name|isDeleted
argument_list|(
name|uint32_t
name|K
argument_list|)
decl|const
block|{
return|return
name|Deleted
operator|.
name|test
argument_list|(
name|K
argument_list|)
return|;
block|}
name|BucketList
name|Buckets
decl_stmt|;
name|mutable
name|SparseBitVector
operator|<
operator|>
name|Present
expr_stmt|;
name|mutable
name|SparseBitVector
operator|<
operator|>
name|Deleted
expr_stmt|;
name|private
label|:
specifier|static
name|uint32_t
name|maxLoad
parameter_list|(
name|uint32_t
name|capacity
parameter_list|)
function_decl|;
name|void
name|grow
parameter_list|()
function_decl|;
specifier|static
name|Error
name|readSparseBitVector
argument_list|(
name|BinaryStreamReader
operator|&
name|Stream
argument_list|,
name|SparseBitVector
operator|<
operator|>
operator|&
name|V
argument_list|)
decl_stmt|;
specifier|static
name|Error
name|writeSparseBitVector
argument_list|(
name|BinaryStreamWriter
operator|&
name|Writer
argument_list|,
name|SparseBitVector
operator|<
operator|>
operator|&
name|Vec
argument_list|)
decl_stmt|;
block|}
empty_stmt|;
name|class
name|HashTableIterator
range|:
name|public
name|iterator_facade_base
operator|<
name|HashTableIterator
decl_stmt|,
name|std
decl|::
name|forward_iterator_tag
decl_stmt|,
name|std
decl|::
name|pair
decl|<
name|uint32_t
decl_stmt|,
name|uint32_t
decl|>>
block|{
name|friend
name|class
name|HashTable
decl_stmt|;
name|HashTableIterator
argument_list|(
argument|const HashTable&Map
argument_list|,
argument|uint32_t Index
argument_list|,
argument|bool IsEnd
argument_list|)
empty_stmt|;
name|public
label|:
name|HashTableIterator
argument_list|(
specifier|const
name|HashTable
operator|&
name|Map
argument_list|)
expr_stmt|;
name|HashTableIterator
modifier|&
name|operator
init|=
operator|(
specifier|const
name|HashTableIterator
operator|&
name|R
operator|)
decl_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|HashTableIterator
operator|&
name|R
operator|)
specifier|const
expr_stmt|;
specifier|const
name|std
operator|::
name|pair
operator|<
name|uint32_t
operator|,
name|uint32_t
operator|>
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
expr_stmt|;
name|HashTableIterator
operator|&
name|operator
operator|++
operator|(
operator|)
expr_stmt|;
name|private
label|:
name|bool
name|isEnd
argument_list|()
specifier|const
block|{
return|return
name|IsEnd
return|;
block|}
name|uint32_t
name|index
argument_list|()
specifier|const
block|{
return|return
name|Index
return|;
block|}
specifier|const
name|HashTable
modifier|*
name|Map
decl_stmt|;
name|uint32_t
name|Index
decl_stmt|;
name|bool
name|IsEnd
decl_stmt|;
block|}
empty_stmt|;
block|}
comment|// end namespace pdb
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_DEBUGINFO_PDB_RAW_HASHTABLE_H
end_comment

end_unit

