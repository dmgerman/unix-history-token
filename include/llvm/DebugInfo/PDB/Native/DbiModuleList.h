begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- DbiModuleList.h - PDB module information list ------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_PDB_RAW_DBIMODULELIST_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_PDB_RAW_DBIMODULELIST_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/iterator.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/PDB/Native/DbiModuleDescriptor.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/BinaryStreamArray.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/BinaryStreamRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Endian.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Error.h"
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|pdb
block|{
name|class
name|DbiModuleList
decl_stmt|;
struct_decl|struct
name|FileInfoSubstreamHeader
struct_decl|;
name|class
name|DbiModuleSourceFilesIterator
range|:
name|public
name|iterator_facade_base
operator|<
name|DbiModuleSourceFilesIterator
decl_stmt|,
name|std
decl|::
name|random_access_iterator_tag
decl_stmt|,
name|StringRef
decl|>
block|{
typedef|typedef
name|iterator_facade_base
operator|<
name|DbiModuleSourceFilesIterator
operator|,
name|std
operator|::
name|random_access_iterator_tag
operator|,
name|StringRef
operator|>
name|BaseType
expr_stmt|;
name|public
label|:
name|DbiModuleSourceFilesIterator
argument_list|(
argument|const DbiModuleList&Modules
argument_list|,
argument|uint32_t Modi
argument_list|,
argument|uint16_t Filei
argument_list|)
empty_stmt|;
name|DbiModuleSourceFilesIterator
argument_list|()
operator|=
expr|default
expr_stmt|;
name|DbiModuleSourceFilesIterator
modifier|&
name|operator
init|=
operator|(
specifier|const
name|DbiModuleSourceFilesIterator
operator|&
name|R
operator|)
operator|=
expr|default
decl_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|DbiModuleSourceFilesIterator
operator|&
name|R
operator|)
specifier|const
expr_stmt|;
specifier|const
name|StringRef
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|ThisValue
return|;
block|}
name|StringRef
modifier|&
name|operator
modifier|*
parameter_list|()
block|{
return|return
name|ThisValue
return|;
block|}
name|bool
name|operator
operator|<
operator|(
specifier|const
name|DbiModuleSourceFilesIterator
operator|&
name|RHS
operator|)
specifier|const
expr_stmt|;
name|std
operator|::
name|ptrdiff_t
name|operator
operator|-
operator|(
specifier|const
name|DbiModuleSourceFilesIterator
operator|&
name|R
operator|)
specifier|const
expr_stmt|;
name|DbiModuleSourceFilesIterator
operator|&
name|operator
operator|+=
operator|(
name|std
operator|::
name|ptrdiff_t
name|N
operator|)
expr_stmt|;
name|DbiModuleSourceFilesIterator
operator|&
name|operator
operator|-=
operator|(
name|std
operator|::
name|ptrdiff_t
name|N
operator|)
expr_stmt|;
name|private
label|:
name|void
name|setValue
parameter_list|()
function_decl|;
name|bool
name|isEnd
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isCompatible
argument_list|(
specifier|const
name|DbiModuleSourceFilesIterator
operator|&
name|R
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isUniversalEnd
argument_list|()
specifier|const
expr_stmt|;
name|StringRef
name|ThisValue
decl_stmt|;
specifier|const
name|DbiModuleList
modifier|*
name|Modules
block|{
name|nullptr
block|}
empty_stmt|;
name|uint32_t
name|Modi
block|{
literal|0
block|}
empty_stmt|;
name|uint16_t
name|Filei
block|{
literal|0
block|}
empty_stmt|;
block|}
empty_stmt|;
name|class
name|DbiModuleList
block|{
name|friend
name|DbiModuleSourceFilesIterator
decl_stmt|;
name|public
label|:
name|Error
name|initialize
parameter_list|(
name|BinaryStreamRef
name|ModInfo
parameter_list|,
name|BinaryStreamRef
name|FileInfo
parameter_list|)
function_decl|;
name|Expected
operator|<
name|StringRef
operator|>
name|getFileName
argument_list|(
argument|uint32_t Index
argument_list|)
specifier|const
expr_stmt|;
name|uint32_t
name|getModuleCount
argument_list|()
specifier|const
expr_stmt|;
name|uint32_t
name|getSourceFileCount
argument_list|()
specifier|const
expr_stmt|;
name|uint16_t
name|getSourceFileCount
argument_list|(
name|uint32_t
name|Modi
argument_list|)
decl|const
decl_stmt|;
name|iterator_range
operator|<
name|DbiModuleSourceFilesIterator
operator|>
name|source_files
argument_list|(
argument|uint32_t Modi
argument_list|)
specifier|const
expr_stmt|;
name|DbiModuleDescriptor
name|getModuleDescriptor
argument_list|(
name|uint32_t
name|Modi
argument_list|)
decl|const
decl_stmt|;
name|private
label|:
name|Error
name|initializeModInfo
parameter_list|(
name|BinaryStreamRef
name|ModInfo
parameter_list|)
function_decl|;
name|Error
name|initializeFileInfo
parameter_list|(
name|BinaryStreamRef
name|FileInfo
parameter_list|)
function_decl|;
name|VarStreamArray
operator|<
name|DbiModuleDescriptor
operator|>
name|Descriptors
expr_stmt|;
name|FixedStreamArray
operator|<
name|support
operator|::
name|little32_t
operator|>
name|FileNameOffsets
expr_stmt|;
name|FixedStreamArray
operator|<
name|support
operator|::
name|ulittle16_t
operator|>
name|ModFileCountArray
expr_stmt|;
comment|// For each module, there are multiple filenames, which can be obtained by
comment|// knowing the index of the file.  Given the index of the file, one can use
comment|// that as an offset into the FileNameOffsets array, which contains the
comment|// absolute offset of the file name in NamesBuffer.  Thus, for each module
comment|// we store the first index in the FileNameOffsets array for this module.
comment|// The number of files for the corresponding module is stored in
comment|// ModFileCountArray.
name|std
operator|::
name|vector
operator|<
name|uint32_t
operator|>
name|ModuleInitialFileIndex
expr_stmt|;
comment|// In order to provide random access into the Descriptors array, we iterate it
comment|// once up front to find the offsets of the individual items and store them in
comment|// this array.
name|std
operator|::
name|vector
operator|<
name|uint32_t
operator|>
name|ModuleDescriptorOffsets
expr_stmt|;
specifier|const
name|FileInfoSubstreamHeader
modifier|*
name|FileInfoHeader
init|=
name|nullptr
decl_stmt|;
name|BinaryStreamRef
name|ModInfoSubstream
decl_stmt|;
name|BinaryStreamRef
name|FileInfoSubstream
decl_stmt|;
name|BinaryStreamRef
name|NamesBuffer
decl_stmt|;
block|}
empty_stmt|;
block|}
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_DEBUGINFO_PDB_RAW_DBIMODULELIST_H
end_comment

end_unit

