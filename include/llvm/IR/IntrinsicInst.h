begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- llvm/IntrinsicInst.h - Intrinsic Instruction Wrappers ---*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines classes that make it really easy to deal with intrinsic
end_comment

begin_comment
comment|// functions with the isa/dyncast family of functions.  In particular, this
end_comment

begin_comment
comment|// allows you to do things like:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//     if (MemCpyInst *MCI = dyn_cast<MemCpyInst>(Inst))
end_comment

begin_comment
comment|//        ... MCI->getDest() ... MCI->getSource() ...
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// All intrinsic function calls are instances of the call instruction, so these
end_comment

begin_comment
comment|// are all subclasses of the CallInst class.  Note that none of these classes
end_comment

begin_comment
comment|// has state or virtual methods, which is an important part of this gross/neat
end_comment

begin_comment
comment|// hack working.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_IR_INTRINSICINST_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_IR_INTRINSICINST_H
end_define

begin_include
include|#
directive|include
file|"llvm/IR/Constants.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/DerivedTypes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Function.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/GlobalVariable.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Instructions.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Intrinsics.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Metadata.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Value.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Casting.h"
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|/// A wrapper class for inspecting calls to intrinsic functions.
comment|/// This allows the standard isa/dyncast/cast functionality to work with calls
comment|/// to intrinsic functions.
name|class
name|IntrinsicInst
range|:
name|public
name|CallInst
block|{
name|public
operator|:
name|IntrinsicInst
argument_list|()
operator|=
name|delete
block|;
name|IntrinsicInst
argument_list|(
specifier|const
name|IntrinsicInst
operator|&
argument_list|)
operator|=
name|delete
block|;
name|IntrinsicInst
operator|&
name|operator
operator|=
operator|(
specifier|const
name|IntrinsicInst
operator|&
operator|)
operator|=
name|delete
block|;
comment|/// Return the intrinsic ID of this intrinsic.
name|Intrinsic
operator|::
name|ID
name|getIntrinsicID
argument_list|()
specifier|const
block|{
return|return
name|getCalledFunction
argument_list|()
operator|->
name|getIntrinsicID
argument_list|()
return|;
block|}
comment|// Methods for support type inquiry through isa, cast, and dyn_cast:
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const CallInst *I
argument_list|)
block|{
if|if
condition|(
specifier|const
name|Function
modifier|*
name|CF
init|=
name|I
operator|->
name|getCalledFunction
argument_list|()
condition|)
return|return
name|CF
operator|->
name|isIntrinsic
argument_list|()
return|;
return|return
name|false
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
parameter_list|(
specifier|const
name|Value
modifier|*
name|V
parameter_list|)
block|{
return|return
name|isa
operator|<
name|CallInst
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|CallInst
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/// This is the common base class for debug info intrinsics.
end_comment

begin_decl_stmt
name|class
name|DbgInfoIntrinsic
range|:
name|public
name|IntrinsicInst
block|{
name|public
operator|:
comment|/// Get the location corresponding to the variable referenced by the debug
comment|/// info intrinsic.  Depending on the intrinsic, this could be the
comment|/// variable's value or its address.
name|Value
operator|*
name|getVariableLocation
argument_list|(
argument|bool AllowNullOp = true
argument_list|)
specifier|const
block|;
comment|// Methods for support type inquiry through isa, cast, and dyn_cast:
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const IntrinsicInst *I
argument_list|)
block|{
switch|switch
condition|(
name|I
operator|->
name|getIntrinsicID
argument_list|()
condition|)
block|{
case|case
name|Intrinsic
operator|::
name|dbg_declare
case|:
case|case
name|Intrinsic
operator|::
name|dbg_value
case|:
return|return
name|true
return|;
default|default:
return|return
name|false
return|;
block|}
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Value *V
argument_list|)
block|{
return|return
name|isa
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
expr|}
block|;
comment|/// This represents the llvm.dbg.declare instruction.
name|class
name|DbgDeclareInst
operator|:
name|public
name|DbgInfoIntrinsic
block|{
name|public
operator|:
name|Value
operator|*
name|getAddress
argument_list|()
specifier|const
block|{
return|return
name|getVariableLocation
argument_list|()
return|;
block|}
name|DILocalVariable
operator|*
name|getVariable
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|DILocalVariable
operator|>
operator|(
name|getRawVariable
argument_list|()
operator|)
return|;
block|}
name|DIExpression
operator|*
name|getExpression
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|DIExpression
operator|>
operator|(
name|getRawExpression
argument_list|()
operator|)
return|;
block|}
name|Metadata
operator|*
name|getRawVariable
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|MetadataAsValue
operator|>
operator|(
name|getArgOperand
argument_list|(
literal|1
argument_list|)
operator|)
operator|->
name|getMetadata
argument_list|()
return|;
block|}
name|Metadata
operator|*
name|getRawExpression
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|MetadataAsValue
operator|>
operator|(
name|getArgOperand
argument_list|(
literal|2
argument_list|)
operator|)
operator|->
name|getMetadata
argument_list|()
return|;
block|}
comment|// Methods for support type inquiry through isa, cast, and dyn_cast:
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const IntrinsicInst *I
argument_list|)
block|{
return|return
name|I
operator|->
name|getIntrinsicID
argument_list|()
operator|==
name|Intrinsic
operator|::
name|dbg_declare
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Value *V
argument_list|)
block|{
return|return
name|isa
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
expr|}
block|;
comment|/// This represents the llvm.dbg.value instruction.
name|class
name|DbgValueInst
operator|:
name|public
name|DbgInfoIntrinsic
block|{
name|public
operator|:
name|Value
operator|*
name|getValue
argument_list|()
specifier|const
block|{
return|return
name|getVariableLocation
argument_list|(
comment|/* AllowNullOp = */
name|false
argument_list|)
return|;
block|}
name|uint64_t
name|getOffset
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|ConstantInt
operator|>
operator|(
name|const_cast
operator|<
name|Value
operator|*
operator|>
operator|(
name|getArgOperand
argument_list|(
literal|1
argument_list|)
operator|)
operator|)
operator|->
name|getZExtValue
argument_list|()
return|;
block|}
name|DILocalVariable
operator|*
name|getVariable
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|DILocalVariable
operator|>
operator|(
name|getRawVariable
argument_list|()
operator|)
return|;
block|}
name|DIExpression
operator|*
name|getExpression
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|DIExpression
operator|>
operator|(
name|getRawExpression
argument_list|()
operator|)
return|;
block|}
name|Metadata
operator|*
name|getRawVariable
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|MetadataAsValue
operator|>
operator|(
name|getArgOperand
argument_list|(
literal|2
argument_list|)
operator|)
operator|->
name|getMetadata
argument_list|()
return|;
block|}
name|Metadata
operator|*
name|getRawExpression
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|MetadataAsValue
operator|>
operator|(
name|getArgOperand
argument_list|(
literal|3
argument_list|)
operator|)
operator|->
name|getMetadata
argument_list|()
return|;
block|}
comment|// Methods for support type inquiry through isa, cast, and dyn_cast:
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const IntrinsicInst *I
argument_list|)
block|{
return|return
name|I
operator|->
name|getIntrinsicID
argument_list|()
operator|==
name|Intrinsic
operator|::
name|dbg_value
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Value *V
argument_list|)
block|{
return|return
name|isa
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
expr|}
block|;
comment|/// This is the common base class for constrained floating point intrinsics.
name|class
name|ConstrainedFPIntrinsic
operator|:
name|public
name|IntrinsicInst
block|{
name|public
operator|:
expr|enum
name|RoundingMode
block|{
name|rmInvalid
block|,
name|rmDynamic
block|,
name|rmToNearest
block|,
name|rmDownward
block|,
name|rmUpward
block|,
name|rmTowardZero
block|}
block|;      enum
name|ExceptionBehavior
block|{
name|ebInvalid
block|,
name|ebIgnore
block|,
name|ebMayTrap
block|,
name|ebStrict
block|}
block|;
name|RoundingMode
name|getRoundingMode
argument_list|()
specifier|const
block|;
name|ExceptionBehavior
name|getExceptionBehavior
argument_list|()
specifier|const
block|;
comment|// Methods for support type inquiry through isa, cast, and dyn_cast:
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const IntrinsicInst *I
argument_list|)
block|{
switch|switch
condition|(
name|I
operator|->
name|getIntrinsicID
argument_list|()
condition|)
block|{
case|case
name|Intrinsic
operator|::
name|experimental_constrained_fadd
case|:
case|case
name|Intrinsic
operator|::
name|experimental_constrained_fsub
case|:
case|case
name|Intrinsic
operator|::
name|experimental_constrained_fmul
case|:
case|case
name|Intrinsic
operator|::
name|experimental_constrained_fdiv
case|:
case|case
name|Intrinsic
operator|::
name|experimental_constrained_frem
case|:
return|return
name|true
return|;
default|default:
return|return
name|false
return|;
block|}
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Value *V
argument_list|)
block|{
return|return
name|isa
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
expr|}
block|;
comment|/// This class represents atomic memcpy intrinsic
comment|/// TODO: Integrate this class into MemIntrinsic hierarchy.
name|class
name|ElementAtomicMemCpyInst
operator|:
name|public
name|IntrinsicInst
block|{
name|public
operator|:
name|Value
operator|*
name|getRawDest
argument_list|()
specifier|const
block|{
return|return
name|getArgOperand
argument_list|(
literal|0
argument_list|)
return|;
block|}
name|Value
operator|*
name|getRawSource
argument_list|()
specifier|const
block|{
return|return
name|getArgOperand
argument_list|(
literal|1
argument_list|)
return|;
block|}
name|Value
operator|*
name|getNumElements
argument_list|()
specifier|const
block|{
return|return
name|getArgOperand
argument_list|(
literal|2
argument_list|)
return|;
block|}
name|void
name|setNumElements
argument_list|(
argument|Value *V
argument_list|)
block|{
name|setArgOperand
argument_list|(
literal|2
argument_list|,
name|V
argument_list|)
block|; }
name|uint64_t
name|getSrcAlignment
argument_list|()
specifier|const
block|{
return|return
name|getParamAlignment
argument_list|(
literal|0
argument_list|)
return|;
block|}
name|uint64_t
name|getDstAlignment
argument_list|()
specifier|const
block|{
return|return
name|getParamAlignment
argument_list|(
literal|1
argument_list|)
return|;
block|}
name|uint64_t
name|getElementSizeInBytes
argument_list|()
specifier|const
block|{
name|Value
operator|*
name|Arg
operator|=
name|getArgOperand
argument_list|(
literal|3
argument_list|)
block|;
return|return
name|cast
operator|<
name|ConstantInt
operator|>
operator|(
name|Arg
operator|)
operator|->
name|getZExtValue
argument_list|()
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const IntrinsicInst *I
argument_list|)
block|{
return|return
name|I
operator|->
name|getIntrinsicID
argument_list|()
operator|==
name|Intrinsic
operator|::
name|memcpy_element_atomic
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Value *V
argument_list|)
block|{
return|return
name|isa
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
expr|}
block|;
comment|/// This is the common base class for memset/memcpy/memmove.
name|class
name|MemIntrinsic
operator|:
name|public
name|IntrinsicInst
block|{
name|public
operator|:
name|Value
operator|*
name|getRawDest
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|Value
operator|*
operator|>
operator|(
name|getArgOperand
argument_list|(
literal|0
argument_list|)
operator|)
return|;
block|}
specifier|const
name|Use
operator|&
name|getRawDestUse
argument_list|()
specifier|const
block|{
return|return
name|getArgOperandUse
argument_list|(
literal|0
argument_list|)
return|;
block|}
name|Use
operator|&
name|getRawDestUse
argument_list|()
block|{
return|return
name|getArgOperandUse
argument_list|(
literal|0
argument_list|)
return|;
block|}
name|Value
operator|*
name|getLength
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|Value
operator|*
operator|>
operator|(
name|getArgOperand
argument_list|(
literal|2
argument_list|)
operator|)
return|;
block|}
specifier|const
name|Use
operator|&
name|getLengthUse
argument_list|()
specifier|const
block|{
return|return
name|getArgOperandUse
argument_list|(
literal|2
argument_list|)
return|;
block|}
name|Use
operator|&
name|getLengthUse
argument_list|()
block|{
return|return
name|getArgOperandUse
argument_list|(
literal|2
argument_list|)
return|;
block|}
name|ConstantInt
operator|*
name|getAlignmentCst
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|ConstantInt
operator|>
operator|(
name|const_cast
operator|<
name|Value
operator|*
operator|>
operator|(
name|getArgOperand
argument_list|(
literal|3
argument_list|)
operator|)
operator|)
return|;
block|}
name|unsigned
name|getAlignment
argument_list|()
specifier|const
block|{
return|return
name|getAlignmentCst
argument_list|()
operator|->
name|getZExtValue
argument_list|()
return|;
block|}
name|ConstantInt
operator|*
name|getVolatileCst
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|ConstantInt
operator|>
operator|(
name|const_cast
operator|<
name|Value
operator|*
operator|>
operator|(
name|getArgOperand
argument_list|(
literal|4
argument_list|)
operator|)
operator|)
return|;
block|}
name|bool
name|isVolatile
argument_list|()
specifier|const
block|{
return|return
operator|!
name|getVolatileCst
argument_list|()
operator|->
name|isZero
argument_list|()
return|;
block|}
name|unsigned
name|getDestAddressSpace
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|PointerType
operator|>
operator|(
name|getRawDest
argument_list|()
operator|->
name|getType
argument_list|()
operator|)
operator|->
name|getAddressSpace
argument_list|()
return|;
block|}
comment|/// This is just like getRawDest, but it strips off any cast
comment|/// instructions that feed it, giving the original input.  The returned
comment|/// value is guaranteed to be a pointer.
name|Value
operator|*
name|getDest
argument_list|()
specifier|const
block|{
return|return
name|getRawDest
argument_list|()
operator|->
name|stripPointerCasts
argument_list|()
return|;
block|}
comment|/// Set the specified arguments of the instruction.
name|void
name|setDest
argument_list|(
argument|Value *Ptr
argument_list|)
block|{
name|assert
argument_list|(
name|getRawDest
argument_list|()
operator|->
name|getType
argument_list|()
operator|==
name|Ptr
operator|->
name|getType
argument_list|()
operator|&&
literal|"setDest called with pointer of wrong type!"
argument_list|)
block|;
name|setArgOperand
argument_list|(
literal|0
argument_list|,
name|Ptr
argument_list|)
block|;     }
name|void
name|setLength
argument_list|(
argument|Value *L
argument_list|)
block|{
name|assert
argument_list|(
name|getLength
argument_list|()
operator|->
name|getType
argument_list|()
operator|==
name|L
operator|->
name|getType
argument_list|()
operator|&&
literal|"setLength called with value of wrong type!"
argument_list|)
block|;
name|setArgOperand
argument_list|(
literal|2
argument_list|,
name|L
argument_list|)
block|;     }
name|void
name|setAlignment
argument_list|(
argument|Constant* A
argument_list|)
block|{
name|setArgOperand
argument_list|(
literal|3
argument_list|,
name|A
argument_list|)
block|;     }
name|void
name|setVolatile
argument_list|(
argument|Constant* V
argument_list|)
block|{
name|setArgOperand
argument_list|(
literal|4
argument_list|,
name|V
argument_list|)
block|;     }
name|Type
operator|*
name|getAlignmentType
argument_list|()
specifier|const
block|{
return|return
name|getArgOperand
argument_list|(
literal|3
argument_list|)
operator|->
name|getType
argument_list|()
return|;
block|}
comment|// Methods for support type inquiry through isa, cast, and dyn_cast:
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const IntrinsicInst *I
argument_list|)
block|{
switch|switch
condition|(
name|I
operator|->
name|getIntrinsicID
argument_list|()
condition|)
block|{
case|case
name|Intrinsic
operator|::
name|memcpy
case|:
case|case
name|Intrinsic
operator|::
name|memmove
case|:
case|case
name|Intrinsic
operator|::
name|memset
case|:
return|return
name|true
return|;
default|default:
return|return
name|false
return|;
block|}
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Value *V
argument_list|)
block|{
return|return
name|isa
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
expr|}
block|;
comment|/// This class wraps the llvm.memset intrinsic.
name|class
name|MemSetInst
operator|:
name|public
name|MemIntrinsic
block|{
name|public
operator|:
comment|/// Return the arguments to the instruction.
name|Value
operator|*
name|getValue
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|Value
operator|*
operator|>
operator|(
name|getArgOperand
argument_list|(
literal|1
argument_list|)
operator|)
return|;
block|}
specifier|const
name|Use
operator|&
name|getValueUse
argument_list|()
specifier|const
block|{
return|return
name|getArgOperandUse
argument_list|(
literal|1
argument_list|)
return|;
block|}
name|Use
operator|&
name|getValueUse
argument_list|()
block|{
return|return
name|getArgOperandUse
argument_list|(
literal|1
argument_list|)
return|;
block|}
name|void
name|setValue
argument_list|(
argument|Value *Val
argument_list|)
block|{
name|assert
argument_list|(
name|getValue
argument_list|()
operator|->
name|getType
argument_list|()
operator|==
name|Val
operator|->
name|getType
argument_list|()
operator|&&
literal|"setValue called with value of wrong type!"
argument_list|)
block|;
name|setArgOperand
argument_list|(
literal|1
argument_list|,
name|Val
argument_list|)
block|;     }
comment|// Methods for support type inquiry through isa, cast, and dyn_cast:
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const IntrinsicInst *I
argument_list|)
block|{
return|return
name|I
operator|->
name|getIntrinsicID
argument_list|()
operator|==
name|Intrinsic
operator|::
name|memset
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Value *V
argument_list|)
block|{
return|return
name|isa
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
expr|}
block|;
comment|/// This class wraps the llvm.memcpy/memmove intrinsics.
name|class
name|MemTransferInst
operator|:
name|public
name|MemIntrinsic
block|{
name|public
operator|:
comment|/// Return the arguments to the instruction.
name|Value
operator|*
name|getRawSource
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|Value
operator|*
operator|>
operator|(
name|getArgOperand
argument_list|(
literal|1
argument_list|)
operator|)
return|;
block|}
specifier|const
name|Use
operator|&
name|getRawSourceUse
argument_list|()
specifier|const
block|{
return|return
name|getArgOperandUse
argument_list|(
literal|1
argument_list|)
return|;
block|}
name|Use
operator|&
name|getRawSourceUse
argument_list|()
block|{
return|return
name|getArgOperandUse
argument_list|(
literal|1
argument_list|)
return|;
block|}
comment|/// This is just like getRawSource, but it strips off any cast
comment|/// instructions that feed it, giving the original input.  The returned
comment|/// value is guaranteed to be a pointer.
name|Value
operator|*
name|getSource
argument_list|()
specifier|const
block|{
return|return
name|getRawSource
argument_list|()
operator|->
name|stripPointerCasts
argument_list|()
return|;
block|}
name|unsigned
name|getSourceAddressSpace
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|PointerType
operator|>
operator|(
name|getRawSource
argument_list|()
operator|->
name|getType
argument_list|()
operator|)
operator|->
name|getAddressSpace
argument_list|()
return|;
block|}
name|void
name|setSource
argument_list|(
argument|Value *Ptr
argument_list|)
block|{
name|assert
argument_list|(
name|getRawSource
argument_list|()
operator|->
name|getType
argument_list|()
operator|==
name|Ptr
operator|->
name|getType
argument_list|()
operator|&&
literal|"setSource called with pointer of wrong type!"
argument_list|)
block|;
name|setArgOperand
argument_list|(
literal|1
argument_list|,
name|Ptr
argument_list|)
block|;     }
comment|// Methods for support type inquiry through isa, cast, and dyn_cast:
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const IntrinsicInst *I
argument_list|)
block|{
return|return
name|I
operator|->
name|getIntrinsicID
argument_list|()
operator|==
name|Intrinsic
operator|::
name|memcpy
operator|||
name|I
operator|->
name|getIntrinsicID
argument_list|()
operator|==
name|Intrinsic
operator|::
name|memmove
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Value *V
argument_list|)
block|{
return|return
name|isa
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
expr|}
block|;
comment|/// This class wraps the llvm.memcpy intrinsic.
name|class
name|MemCpyInst
operator|:
name|public
name|MemTransferInst
block|{
name|public
operator|:
comment|// Methods for support type inquiry through isa, cast, and dyn_cast:
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const IntrinsicInst *I
argument_list|)
block|{
return|return
name|I
operator|->
name|getIntrinsicID
argument_list|()
operator|==
name|Intrinsic
operator|::
name|memcpy
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Value *V
argument_list|)
block|{
return|return
name|isa
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
expr|}
block|;
comment|/// This class wraps the llvm.memmove intrinsic.
name|class
name|MemMoveInst
operator|:
name|public
name|MemTransferInst
block|{
name|public
operator|:
comment|// Methods for support type inquiry through isa, cast, and dyn_cast:
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const IntrinsicInst *I
argument_list|)
block|{
return|return
name|I
operator|->
name|getIntrinsicID
argument_list|()
operator|==
name|Intrinsic
operator|::
name|memmove
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Value *V
argument_list|)
block|{
return|return
name|isa
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
expr|}
block|;
comment|/// This represents the llvm.va_start intrinsic.
name|class
name|VAStartInst
operator|:
name|public
name|IntrinsicInst
block|{
name|public
operator|:
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const IntrinsicInst *I
argument_list|)
block|{
return|return
name|I
operator|->
name|getIntrinsicID
argument_list|()
operator|==
name|Intrinsic
operator|::
name|vastart
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Value *V
argument_list|)
block|{
return|return
name|isa
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
name|Value
operator|*
name|getArgList
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|Value
operator|*
operator|>
operator|(
name|getArgOperand
argument_list|(
literal|0
argument_list|)
operator|)
return|;
block|}
expr|}
block|;
comment|/// This represents the llvm.va_end intrinsic.
name|class
name|VAEndInst
operator|:
name|public
name|IntrinsicInst
block|{
name|public
operator|:
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const IntrinsicInst *I
argument_list|)
block|{
return|return
name|I
operator|->
name|getIntrinsicID
argument_list|()
operator|==
name|Intrinsic
operator|::
name|vaend
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Value *V
argument_list|)
block|{
return|return
name|isa
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
name|Value
operator|*
name|getArgList
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|Value
operator|*
operator|>
operator|(
name|getArgOperand
argument_list|(
literal|0
argument_list|)
operator|)
return|;
block|}
expr|}
block|;
comment|/// This represents the llvm.va_copy intrinsic.
name|class
name|VACopyInst
operator|:
name|public
name|IntrinsicInst
block|{
name|public
operator|:
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const IntrinsicInst *I
argument_list|)
block|{
return|return
name|I
operator|->
name|getIntrinsicID
argument_list|()
operator|==
name|Intrinsic
operator|::
name|vacopy
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Value *V
argument_list|)
block|{
return|return
name|isa
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
name|Value
operator|*
name|getDest
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|Value
operator|*
operator|>
operator|(
name|getArgOperand
argument_list|(
literal|0
argument_list|)
operator|)
return|;
block|}
name|Value
operator|*
name|getSrc
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|Value
operator|*
operator|>
operator|(
name|getArgOperand
argument_list|(
literal|1
argument_list|)
operator|)
return|;
block|}
expr|}
block|;
comment|/// This represents the llvm.instrprof_increment intrinsic.
name|class
name|InstrProfIncrementInst
operator|:
name|public
name|IntrinsicInst
block|{
name|public
operator|:
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const IntrinsicInst *I
argument_list|)
block|{
return|return
name|I
operator|->
name|getIntrinsicID
argument_list|()
operator|==
name|Intrinsic
operator|::
name|instrprof_increment
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Value *V
argument_list|)
block|{
return|return
name|isa
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
name|GlobalVariable
operator|*
name|getName
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|GlobalVariable
operator|>
operator|(
name|const_cast
operator|<
name|Value
operator|*
operator|>
operator|(
name|getArgOperand
argument_list|(
literal|0
argument_list|)
operator|)
operator|->
name|stripPointerCasts
argument_list|()
operator|)
return|;
block|}
name|ConstantInt
operator|*
name|getHash
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|ConstantInt
operator|>
operator|(
name|const_cast
operator|<
name|Value
operator|*
operator|>
operator|(
name|getArgOperand
argument_list|(
literal|1
argument_list|)
operator|)
operator|)
return|;
block|}
name|ConstantInt
operator|*
name|getNumCounters
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|ConstantInt
operator|>
operator|(
name|const_cast
operator|<
name|Value
operator|*
operator|>
operator|(
name|getArgOperand
argument_list|(
literal|2
argument_list|)
operator|)
operator|)
return|;
block|}
name|ConstantInt
operator|*
name|getIndex
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|ConstantInt
operator|>
operator|(
name|const_cast
operator|<
name|Value
operator|*
operator|>
operator|(
name|getArgOperand
argument_list|(
literal|3
argument_list|)
operator|)
operator|)
return|;
block|}
name|Value
operator|*
name|getStep
argument_list|()
specifier|const
block|;   }
block|;
name|class
name|InstrProfIncrementInstStep
operator|:
name|public
name|InstrProfIncrementInst
block|{
name|public
operator|:
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const IntrinsicInst *I
argument_list|)
block|{
return|return
name|I
operator|->
name|getIntrinsicID
argument_list|()
operator|==
name|Intrinsic
operator|::
name|instrprof_increment_step
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Value *V
argument_list|)
block|{
return|return
name|isa
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
expr|}
block|;
comment|/// This represents the llvm.instrprof_value_profile intrinsic.
name|class
name|InstrProfValueProfileInst
operator|:
name|public
name|IntrinsicInst
block|{
name|public
operator|:
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const IntrinsicInst *I
argument_list|)
block|{
return|return
name|I
operator|->
name|getIntrinsicID
argument_list|()
operator|==
name|Intrinsic
operator|::
name|instrprof_value_profile
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Value *V
argument_list|)
block|{
return|return
name|isa
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
name|GlobalVariable
operator|*
name|getName
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|GlobalVariable
operator|>
operator|(
name|const_cast
operator|<
name|Value
operator|*
operator|>
operator|(
name|getArgOperand
argument_list|(
literal|0
argument_list|)
operator|)
operator|->
name|stripPointerCasts
argument_list|()
operator|)
return|;
block|}
name|ConstantInt
operator|*
name|getHash
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|ConstantInt
operator|>
operator|(
name|const_cast
operator|<
name|Value
operator|*
operator|>
operator|(
name|getArgOperand
argument_list|(
literal|1
argument_list|)
operator|)
operator|)
return|;
block|}
name|Value
operator|*
name|getTargetValue
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|Value
operator|>
operator|(
name|const_cast
operator|<
name|Value
operator|*
operator|>
operator|(
name|getArgOperand
argument_list|(
literal|2
argument_list|)
operator|)
operator|)
return|;
block|}
name|ConstantInt
operator|*
name|getValueKind
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|ConstantInt
operator|>
operator|(
name|const_cast
operator|<
name|Value
operator|*
operator|>
operator|(
name|getArgOperand
argument_list|(
literal|3
argument_list|)
operator|)
operator|)
return|;
block|}
comment|// Returns the value site index.
name|ConstantInt
operator|*
name|getIndex
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|ConstantInt
operator|>
operator|(
name|const_cast
operator|<
name|Value
operator|*
operator|>
operator|(
name|getArgOperand
argument_list|(
literal|4
argument_list|)
operator|)
operator|)
return|;
block|}
expr|}
block|;  }
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_IR_INTRINSICINST_H
end_comment

end_unit

