begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- llvm/IR/Statepoint.h - gc.statepoint utilities ----------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file contains utility functions and a wrapper class analogous to
end_comment

begin_comment
comment|// CallSite for accessing the fields of gc.statepoint, gc.relocate,
end_comment

begin_comment
comment|// gc.result intrinsics; and some general utilities helpful when dealing with
end_comment

begin_comment
comment|// gc.statepoint.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_IR_STATEPOINT_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_IR_STATEPOINT_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/iterator_range.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/Optional.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Attributes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/BasicBlock.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/CallSite.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Constants.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Function.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Instructions.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/IntrinsicInst.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Intrinsics.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Casting.h"
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<cstddef>
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|/// The statepoint intrinsic accepts a set of flags as its third argument.
comment|/// Valid values come out of this set.
name|enum
name|class
name|StatepointFlags
block|{
name|None
operator|=
literal|0
operator|,
name|GCTransition
operator|=
literal|1
operator|,
comment|///< Indicates that this statepoint is a transition from
comment|///< GC-aware code to code that is not GC-aware.
comment|/// Mark the deopt arguments associated with the statepoint as only being
comment|/// "live-in". By default, deopt arguments are "live-through".  "live-through"
comment|/// requires that they the value be live on entry, on exit, and at any point
comment|/// during the call.  "live-in" only requires the value be available at the
comment|/// start of the call.  In particular, "live-in" values can be placed in
comment|/// unused argument registers or other non-callee saved registers.
name|DeoptLiveIn
operator|=
literal|2
operator|,
name|MaskAll
operator|=
literal|3
comment|///< A bitmask that includes all valid flags.
block|}
empty_stmt|;
name|class
name|GCRelocateInst
decl_stmt|;
name|class
name|GCResultInst
decl_stmt|;
name|bool
name|isStatepoint
parameter_list|(
name|ImmutableCallSite
name|CS
parameter_list|)
function_decl|;
name|bool
name|isStatepoint
parameter_list|(
specifier|const
name|Value
modifier|*
name|V
parameter_list|)
function_decl|;
name|bool
name|isStatepoint
parameter_list|(
specifier|const
name|Value
modifier|&
name|V
parameter_list|)
function_decl|;
name|bool
name|isGCRelocate
parameter_list|(
name|ImmutableCallSite
name|CS
parameter_list|)
function_decl|;
name|bool
name|isGCResult
parameter_list|(
name|ImmutableCallSite
name|CS
parameter_list|)
function_decl|;
comment|/// Analogous to CallSiteBase, this provides most of the actual
comment|/// functionality for Statepoint and ImmutableStatepoint.  It is
comment|/// templatized to allow easily specializing of const and non-const
comment|/// concrete subtypes.  This is structured analogous to CallSite
comment|/// rather than the IntrinsicInst.h helpers since we need to support
comment|/// invokable statepoints.
name|template
operator|<
name|typename
name|FunTy
operator|,
name|typename
name|InstructionTy
operator|,
name|typename
name|ValueTy
operator|,
name|typename
name|CallSiteTy
operator|>
name|class
name|StatepointBase
block|{
name|CallSiteTy
name|StatepointCS
block|;
name|protected
operator|:
name|explicit
name|StatepointBase
argument_list|(
argument|InstructionTy *I
argument_list|)
block|{
if|if
condition|(
name|isStatepoint
argument_list|(
name|I
argument_list|)
condition|)
block|{
name|StatepointCS
operator|=
name|CallSiteTy
argument_list|(
name|I
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|StatepointCS
operator|&&
literal|"isStatepoint implies CallSite"
argument_list|)
expr_stmt|;
block|}
block|}
name|explicit
name|StatepointBase
argument_list|(
argument|CallSiteTy CS
argument_list|)
block|{
if|if
condition|(
name|isStatepoint
argument_list|(
name|CS
argument_list|)
condition|)
name|StatepointCS
operator|=
name|CS
expr_stmt|;
block|}
name|public
operator|:
typedef|typedef
name|typename
name|CallSiteTy
operator|::
name|arg_iterator
name|arg_iterator
expr_stmt|;
block|enum
block|{
name|IDPos
operator|=
literal|0
block|,
name|NumPatchBytesPos
operator|=
literal|1
block|,
name|CalledFunctionPos
operator|=
literal|2
block|,
name|NumCallArgsPos
operator|=
literal|3
block|,
name|FlagsPos
operator|=
literal|4
block|,
name|CallArgsBeginPos
operator|=
literal|5
block|,   }
expr_stmt|;
name|void
modifier|*
name|operator
name|new
parameter_list|(
name|size_t
parameter_list|,
name|unsigned
parameter_list|)
init|=
name|delete
function_decl|;
name|void
modifier|*
name|operator
name|new
parameter_list|(
name|size_t
name|s
parameter_list|)
init|=
name|delete
function_decl|;
name|explicit
name|operator
name|bool
argument_list|()
specifier|const
block|{
comment|// We do not assign non-statepoint CallSites to StatepointCS.
return|return
operator|(
name|bool
operator|)
name|StatepointCS
return|;
block|}
comment|/// Return the underlying CallSite.
name|CallSiteTy
name|getCallSite
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
operator|*
name|this
operator|&&
literal|"check validity first!"
argument_list|)
block|;
return|return
name|StatepointCS
return|;
block|}
name|uint64_t
name|getFlags
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|ConstantInt
operator|>
operator|(
name|getCallSite
argument_list|()
operator|.
name|getArgument
argument_list|(
name|FlagsPos
argument_list|)
operator|)
operator|->
name|getZExtValue
argument_list|()
return|;
block|}
comment|/// Return the ID associated with this statepoint.
name|uint64_t
name|getID
argument_list|()
specifier|const
block|{
specifier|const
name|Value
operator|*
name|IDVal
operator|=
name|getCallSite
argument_list|()
operator|.
name|getArgument
argument_list|(
name|IDPos
argument_list|)
block|;
return|return
name|cast
operator|<
name|ConstantInt
operator|>
operator|(
name|IDVal
operator|)
operator|->
name|getZExtValue
argument_list|()
return|;
block|}
comment|/// Return the number of patchable bytes associated with this statepoint.
name|uint32_t
name|getNumPatchBytes
argument_list|()
specifier|const
block|{
specifier|const
name|Value
operator|*
name|NumPatchBytesVal
operator|=
name|getCallSite
argument_list|()
operator|.
name|getArgument
argument_list|(
name|NumPatchBytesPos
argument_list|)
block|;
name|uint64_t
name|NumPatchBytes
operator|=
name|cast
operator|<
name|ConstantInt
operator|>
operator|(
name|NumPatchBytesVal
operator|)
operator|->
name|getZExtValue
argument_list|()
block|;
name|assert
argument_list|(
name|isInt
operator|<
literal|32
operator|>
operator|(
name|NumPatchBytes
operator|)
operator|&&
literal|"should fit in 32 bits!"
argument_list|)
block|;
return|return
name|NumPatchBytes
return|;
block|}
comment|/// Return the value actually being called or invoked.
name|ValueTy
operator|*
name|getCalledValue
argument_list|()
specifier|const
block|{
return|return
name|getCallSite
argument_list|()
operator|.
name|getArgument
argument_list|(
name|CalledFunctionPos
argument_list|)
return|;
block|}
name|InstructionTy
operator|*
name|getInstruction
argument_list|()
specifier|const
block|{
return|return
name|getCallSite
argument_list|()
operator|.
name|getInstruction
argument_list|()
return|;
block|}
comment|/// Return the function being called if this is a direct call, otherwise
comment|/// return null (if it's an indirect call).
name|FunTy
operator|*
name|getCalledFunction
argument_list|()
specifier|const
block|{
return|return
name|dyn_cast
operator|<
name|Function
operator|>
operator|(
name|getCalledValue
argument_list|()
operator|)
return|;
block|}
comment|/// Return the caller function for this statepoint.
name|FunTy
operator|*
name|getCaller
argument_list|()
specifier|const
block|{
return|return
name|getCallSite
argument_list|()
operator|.
name|getCaller
argument_list|()
return|;
block|}
comment|/// Determine if the statepoint cannot unwind.
name|bool
name|doesNotThrow
argument_list|()
specifier|const
block|{
name|Function
operator|*
name|F
operator|=
name|getCalledFunction
argument_list|()
block|;
return|return
name|getCallSite
argument_list|()
operator|.
name|doesNotThrow
argument_list|()
operator|||
operator|(
name|F
condition|?
name|F
operator|->
name|doesNotThrow
argument_list|()
else|:
name|false
operator|)
return|;
block|}
comment|/// Return the type of the value returned by the call underlying the
comment|/// statepoint.
name|Type
operator|*
name|getActualReturnType
argument_list|()
specifier|const
block|{
name|auto
operator|*
name|FTy
operator|=
name|cast
operator|<
name|FunctionType
operator|>
operator|(
name|cast
operator|<
name|PointerType
operator|>
operator|(
name|getCalledValue
argument_list|()
operator|->
name|getType
argument_list|()
operator|)
operator|->
name|getElementType
argument_list|()
operator|)
block|;
return|return
name|FTy
operator|->
name|getReturnType
argument_list|()
return|;
block|}
comment|/// Number of arguments to be passed to the actual callee.
name|int
name|getNumCallArgs
argument_list|()
specifier|const
block|{
specifier|const
name|Value
operator|*
name|NumCallArgsVal
operator|=
name|getCallSite
argument_list|()
operator|.
name|getArgument
argument_list|(
name|NumCallArgsPos
argument_list|)
block|;
return|return
name|cast
operator|<
name|ConstantInt
operator|>
operator|(
name|NumCallArgsVal
operator|)
operator|->
name|getZExtValue
argument_list|()
return|;
block|}
name|size_t
name|arg_size
argument_list|()
specifier|const
block|{
return|return
name|getNumCallArgs
argument_list|()
return|;
block|}
name|typename
name|CallSiteTy
operator|::
name|arg_iterator
name|arg_begin
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|CallArgsBeginPos
operator|<=
operator|(
name|int
operator|)
name|getCallSite
argument_list|()
operator|.
name|arg_size
argument_list|()
argument_list|)
block|;
return|return
name|getCallSite
argument_list|()
operator|.
name|arg_begin
argument_list|()
operator|+
name|CallArgsBeginPos
return|;
block|}
name|typename
name|CallSiteTy
operator|::
name|arg_iterator
name|arg_end
argument_list|()
specifier|const
block|{
name|auto
name|I
operator|=
name|arg_begin
argument_list|()
operator|+
name|arg_size
argument_list|()
block|;
name|assert
argument_list|(
operator|(
name|getCallSite
argument_list|()
operator|.
name|arg_end
argument_list|()
operator|-
name|I
operator|)
operator|>=
literal|0
argument_list|)
block|;
return|return
name|I
return|;
block|}
name|ValueTy
modifier|*
name|getArgument
parameter_list|(
name|unsigned
name|Index
parameter_list|)
block|{
name|assert
argument_list|(
name|Index
operator|<
name|arg_size
argument_list|()
operator|&&
literal|"out of bounds!"
argument_list|)
expr_stmt|;
return|return
operator|*
operator|(
name|arg_begin
argument_list|()
operator|+
name|Index
operator|)
return|;
block|}
comment|/// range adapter for call arguments
name|iterator_range
operator|<
name|arg_iterator
operator|>
name|call_args
argument_list|()
specifier|const
block|{
return|return
name|make_range
argument_list|(
name|arg_begin
argument_list|()
argument_list|,
name|arg_end
argument_list|()
argument_list|)
return|;
block|}
comment|/// \brief Return true if the call or the callee has the given attribute.
name|bool
name|paramHasAttr
argument_list|(
name|unsigned
name|i
argument_list|,
name|Attribute
operator|::
name|AttrKind
name|A
argument_list|)
decl|const
block|{
name|Function
modifier|*
name|F
init|=
name|getCalledFunction
argument_list|()
decl_stmt|;
return|return
name|getCallSite
argument_list|()
operator|.
name|paramHasAttr
argument_list|(
name|i
operator|+
name|CallArgsBeginPos
argument_list|,
name|A
argument_list|)
operator|||
operator|(
name|F
condition|?
name|F
operator|->
name|getAttributes
argument_list|()
operator|.
name|hasAttribute
argument_list|(
name|i
argument_list|,
name|A
argument_list|)
else|:
name|false
operator|)
return|;
block|}
comment|/// Number of GC transition args.
name|int
name|getNumTotalGCTransitionArgs
argument_list|()
specifier|const
block|{
specifier|const
name|Value
operator|*
name|NumGCTransitionArgs
operator|=
operator|*
name|arg_end
argument_list|()
block|;
return|return
name|cast
operator|<
name|ConstantInt
operator|>
operator|(
name|NumGCTransitionArgs
operator|)
operator|->
name|getZExtValue
argument_list|()
return|;
block|}
name|typename
name|CallSiteTy
operator|::
name|arg_iterator
name|gc_transition_args_begin
argument_list|()
specifier|const
block|{
name|auto
name|I
operator|=
name|arg_end
argument_list|()
operator|+
literal|1
block|;
name|assert
argument_list|(
operator|(
name|getCallSite
argument_list|()
operator|.
name|arg_end
argument_list|()
operator|-
name|I
operator|)
operator|>=
literal|0
argument_list|)
block|;
return|return
name|I
return|;
block|}
name|typename
name|CallSiteTy
operator|::
name|arg_iterator
name|gc_transition_args_end
argument_list|()
specifier|const
block|{
name|auto
name|I
operator|=
name|gc_transition_args_begin
argument_list|()
operator|+
name|getNumTotalGCTransitionArgs
argument_list|()
block|;
name|assert
argument_list|(
operator|(
name|getCallSite
argument_list|()
operator|.
name|arg_end
argument_list|()
operator|-
name|I
operator|)
operator|>=
literal|0
argument_list|)
block|;
return|return
name|I
return|;
block|}
comment|/// range adapter for GC transition arguments
name|iterator_range
operator|<
name|arg_iterator
operator|>
name|gc_transition_args
argument_list|()
specifier|const
block|{
return|return
name|make_range
argument_list|(
name|gc_transition_args_begin
argument_list|()
argument_list|,
name|gc_transition_args_end
argument_list|()
argument_list|)
return|;
block|}
comment|/// Number of additional arguments excluding those intended
comment|/// for garbage collection.
name|int
name|getNumTotalVMSArgs
argument_list|()
specifier|const
block|{
specifier|const
name|Value
operator|*
name|NumVMSArgs
operator|=
operator|*
name|gc_transition_args_end
argument_list|()
block|;
return|return
name|cast
operator|<
name|ConstantInt
operator|>
operator|(
name|NumVMSArgs
operator|)
operator|->
name|getZExtValue
argument_list|()
return|;
block|}
name|typename
name|CallSiteTy
operator|::
name|arg_iterator
name|vm_state_begin
argument_list|()
specifier|const
block|{
name|auto
name|I
operator|=
name|gc_transition_args_end
argument_list|()
operator|+
literal|1
block|;
name|assert
argument_list|(
operator|(
name|getCallSite
argument_list|()
operator|.
name|arg_end
argument_list|()
operator|-
name|I
operator|)
operator|>=
literal|0
argument_list|)
block|;
return|return
name|I
return|;
block|}
name|typename
name|CallSiteTy
operator|::
name|arg_iterator
name|vm_state_end
argument_list|()
specifier|const
block|{
name|auto
name|I
operator|=
name|vm_state_begin
argument_list|()
operator|+
name|getNumTotalVMSArgs
argument_list|()
block|;
name|assert
argument_list|(
operator|(
name|getCallSite
argument_list|()
operator|.
name|arg_end
argument_list|()
operator|-
name|I
operator|)
operator|>=
literal|0
argument_list|)
block|;
return|return
name|I
return|;
block|}
comment|/// range adapter for vm state arguments
name|iterator_range
operator|<
name|arg_iterator
operator|>
name|vm_state_args
argument_list|()
specifier|const
block|{
return|return
name|make_range
argument_list|(
name|vm_state_begin
argument_list|()
argument_list|,
name|vm_state_end
argument_list|()
argument_list|)
return|;
block|}
name|typename
name|CallSiteTy
operator|::
name|arg_iterator
name|gc_args_begin
argument_list|()
specifier|const
block|{
return|return
name|vm_state_end
argument_list|()
return|;
block|}
name|typename
name|CallSiteTy
operator|::
name|arg_iterator
name|gc_args_end
argument_list|()
specifier|const
block|{
return|return
name|getCallSite
argument_list|()
operator|.
name|arg_end
argument_list|()
return|;
block|}
name|unsigned
name|gcArgsStartIdx
argument_list|()
specifier|const
block|{
return|return
name|gc_args_begin
argument_list|()
operator|-
name|getInstruction
argument_list|()
operator|->
name|op_begin
argument_list|()
return|;
block|}
comment|/// range adapter for gc arguments
name|iterator_range
operator|<
name|arg_iterator
operator|>
name|gc_args
argument_list|()
specifier|const
block|{
return|return
name|make_range
argument_list|(
name|gc_args_begin
argument_list|()
argument_list|,
name|gc_args_end
argument_list|()
argument_list|)
return|;
block|}
comment|/// Get list of all gc reloactes linked to this statepoint
comment|/// May contain several relocations for the same base/derived pair.
comment|/// For example this could happen due to relocations on unwinding
comment|/// path of invoke.
name|std
operator|::
name|vector
operator|<
specifier|const
name|GCRelocateInst
operator|*
operator|>
name|getRelocates
argument_list|()
specifier|const
expr_stmt|;
comment|/// Get the experimental_gc_result call tied to this statepoint.  Can be
comment|/// nullptr if there isn't a gc_result tied to this statepoint.  Guaranteed to
comment|/// be a CallInst if non-null.
specifier|const
name|GCResultInst
operator|*
name|getGCResult
argument_list|()
specifier|const
block|{
for|for
control|(
name|auto
operator|*
name|U
operator|:
name|getInstruction
argument_list|()
operator|->
name|users
argument_list|()
control|)
if|if
condition|(
name|auto
operator|*
name|GRI
operator|=
name|dyn_cast
operator|<
name|GCResultInst
operator|>
operator|(
name|U
operator|)
condition|)
return|return
name|GRI
return|;
return|return
name|nullptr
return|;
block|}
end_decl_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|NDEBUG
end_ifndef

begin_comment
comment|/// Asserts if this statepoint is malformed.  Common cases for failure
end_comment

begin_comment
comment|/// include incorrect length prefixes for variable length sections or
end_comment

begin_comment
comment|/// illegal values for parameters.
end_comment

begin_function
name|void
name|verify
parameter_list|()
block|{
name|assert
argument_list|(
name|getNumCallArgs
argument_list|()
operator|>=
literal|0
operator|&&
literal|"number of arguments to actually callee can't be negative"
argument_list|)
expr_stmt|;
comment|// The internal asserts in the iterator accessors do the rest.
operator|(
name|void
operator|)
name|arg_begin
argument_list|()
expr_stmt|;
operator|(
name|void
operator|)
name|arg_end
argument_list|()
expr_stmt|;
operator|(
name|void
operator|)
name|gc_transition_args_begin
argument_list|()
expr_stmt|;
operator|(
name|void
operator|)
name|gc_transition_args_end
argument_list|()
expr_stmt|;
operator|(
name|void
operator|)
name|vm_state_begin
argument_list|()
expr_stmt|;
operator|(
name|void
operator|)
name|vm_state_end
argument_list|()
expr_stmt|;
operator|(
name|void
operator|)
name|gc_args_begin
argument_list|()
expr_stmt|;
operator|(
name|void
operator|)
name|gc_args_end
argument_list|()
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
unit|};
comment|/// A specialization of it's base class for read only access
end_comment

begin_comment
comment|/// to a gc.statepoint.
end_comment

begin_decl_stmt
name|class
name|ImmutableStatepoint
range|:
name|public
name|StatepointBase
operator|<
specifier|const
name|Function
decl_stmt|, const
name|Instruction
decl_stmt|, const
name|Value
decl_stmt|,
name|ImmutableCallSite
decl|>
block|{
typedef|typedef
name|StatepointBase
operator|<
specifier|const
name|Function
operator|,
specifier|const
name|Instruction
operator|,
specifier|const
name|Value
operator|,
name|ImmutableCallSite
operator|>
name|Base
expr_stmt|;
name|public
label|:
name|explicit
name|ImmutableStatepoint
argument_list|(
specifier|const
name|Instruction
operator|*
name|I
argument_list|)
operator|:
name|Base
argument_list|(
argument|I
argument_list|)
block|{}
name|explicit
name|ImmutableStatepoint
argument_list|(
argument|ImmutableCallSite CS
argument_list|)
operator|:
name|Base
argument_list|(
argument|CS
argument_list|)
block|{}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/// A specialization of it's base class for read-write access
end_comment

begin_comment
comment|/// to a gc.statepoint.
end_comment

begin_decl_stmt
name|class
name|Statepoint
range|:
name|public
name|StatepointBase
operator|<
name|Function
decl_stmt|,
name|Instruction
decl_stmt|,
name|Value
decl_stmt|,
name|CallSite
decl|>
block|{
typedef|typedef
name|StatepointBase
operator|<
name|Function
operator|,
name|Instruction
operator|,
name|Value
operator|,
name|CallSite
operator|>
name|Base
expr_stmt|;
name|public
label|:
name|explicit
name|Statepoint
argument_list|(
name|Instruction
operator|*
name|I
argument_list|)
operator|:
name|Base
argument_list|(
argument|I
argument_list|)
block|{}
name|explicit
name|Statepoint
argument_list|(
argument|CallSite CS
argument_list|)
operator|:
name|Base
argument_list|(
argument|CS
argument_list|)
block|{}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/// Common base class for representing values projected from a statepoint.
end_comment

begin_comment
comment|/// Currently, the only projections available are gc.result and gc.relocate.
end_comment

begin_decl_stmt
name|class
name|GCProjectionInst
range|:
name|public
name|IntrinsicInst
block|{
name|public
operator|:
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const IntrinsicInst *I
argument_list|)
block|{
return|return
name|I
operator|->
name|getIntrinsicID
argument_list|()
operator|==
name|Intrinsic
operator|::
name|experimental_gc_relocate
operator|||
name|I
operator|->
name|getIntrinsicID
argument_list|()
operator|==
name|Intrinsic
operator|::
name|experimental_gc_result
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Value *V
argument_list|)
block|{
return|return
name|isa
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
comment|/// Return true if this relocate is tied to the invoke statepoint.
comment|/// This includes relocates which are on the unwinding path.
name|bool
name|isTiedToInvoke
argument_list|()
specifier|const
block|{
specifier|const
name|Value
operator|*
name|Token
operator|=
name|getArgOperand
argument_list|(
literal|0
argument_list|)
block|;
return|return
name|isa
operator|<
name|LandingPadInst
operator|>
operator|(
name|Token
operator|)
operator|||
name|isa
operator|<
name|InvokeInst
operator|>
operator|(
name|Token
operator|)
return|;
block|}
comment|/// The statepoint with which this gc.relocate is associated.
specifier|const
name|Instruction
operator|*
name|getStatepoint
argument_list|()
specifier|const
block|{
specifier|const
name|Value
operator|*
name|Token
operator|=
name|getArgOperand
argument_list|(
literal|0
argument_list|)
block|;
comment|// This takes care both of relocates for call statepoints and relocates
comment|// on normal path of invoke statepoint.
if|if
condition|(
operator|!
name|isa
operator|<
name|LandingPadInst
operator|>
operator|(
name|Token
operator|)
condition|)
block|{
name|assert
argument_list|(
name|isStatepoint
argument_list|(
name|Token
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cast
operator|<
name|Instruction
operator|>
operator|(
name|Token
operator|)
return|;
block|}
comment|// This relocate is on exceptional path of an invoke statepoint
specifier|const
name|BasicBlock
modifier|*
name|InvokeBB
init|=
name|cast
operator|<
name|Instruction
operator|>
operator|(
name|Token
operator|)
operator|->
name|getParent
argument_list|()
operator|->
name|getUniquePredecessor
argument_list|()
decl_stmt|;
name|assert
argument_list|(
name|InvokeBB
operator|&&
literal|"safepoints should have unique landingpads"
argument_list|)
block|;
name|assert
argument_list|(
name|InvokeBB
operator|->
name|getTerminator
argument_list|()
operator|&&
literal|"safepoint block should be well formed"
argument_list|)
block|;
name|assert
argument_list|(
name|isStatepoint
argument_list|(
name|InvokeBB
operator|->
name|getTerminator
argument_list|()
argument_list|)
argument_list|)
block|;
return|return
name|InvokeBB
operator|->
name|getTerminator
argument_list|()
return|;
block|}
end_decl_stmt

begin_comment
unit|};
comment|/// Represents calls to the gc.relocate intrinsic.
end_comment

begin_decl_stmt
name|class
name|GCRelocateInst
range|:
name|public
name|GCProjectionInst
block|{
name|public
operator|:
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const IntrinsicInst *I
argument_list|)
block|{
return|return
name|I
operator|->
name|getIntrinsicID
argument_list|()
operator|==
name|Intrinsic
operator|::
name|experimental_gc_relocate
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Value *V
argument_list|)
block|{
return|return
name|isa
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
comment|/// The index into the associate statepoint's argument list
comment|/// which contains the base pointer of the pointer whose
comment|/// relocation this gc.relocate describes.
name|unsigned
name|getBasePtrIndex
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|ConstantInt
operator|>
operator|(
name|getArgOperand
argument_list|(
literal|1
argument_list|)
operator|)
operator|->
name|getZExtValue
argument_list|()
return|;
block|}
comment|/// The index into the associate statepoint's argument list which
comment|/// contains the pointer whose relocation this gc.relocate describes.
name|unsigned
name|getDerivedPtrIndex
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|ConstantInt
operator|>
operator|(
name|getArgOperand
argument_list|(
literal|2
argument_list|)
operator|)
operator|->
name|getZExtValue
argument_list|()
return|;
block|}
name|Value
operator|*
name|getBasePtr
argument_list|()
specifier|const
block|{
name|ImmutableCallSite
name|CS
argument_list|(
name|getStatepoint
argument_list|()
argument_list|)
block|;
return|return
operator|*
operator|(
name|CS
operator|.
name|arg_begin
argument_list|()
operator|+
name|getBasePtrIndex
argument_list|()
operator|)
return|;
block|}
name|Value
operator|*
name|getDerivedPtr
argument_list|()
specifier|const
block|{
name|ImmutableCallSite
name|CS
argument_list|(
name|getStatepoint
argument_list|()
argument_list|)
block|;
return|return
operator|*
operator|(
name|CS
operator|.
name|arg_begin
argument_list|()
operator|+
name|getDerivedPtrIndex
argument_list|()
operator|)
return|;
block|}
expr|}
block|;
comment|/// Represents calls to the gc.result intrinsic.
name|class
name|GCResultInst
operator|:
name|public
name|GCProjectionInst
block|{
name|public
operator|:
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const IntrinsicInst *I
argument_list|)
block|{
return|return
name|I
operator|->
name|getIntrinsicID
argument_list|()
operator|==
name|Intrinsic
operator|::
name|experimental_gc_result
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Value *V
argument_list|)
block|{
return|return
name|isa
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|IntrinsicInst
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|FunTy
block|,
name|typename
name|InstructionTy
block|,
name|typename
name|ValueTy
block|,
name|typename
name|CallSiteTy
operator|>
name|std
operator|::
name|vector
operator|<
specifier|const
name|GCRelocateInst
operator|*
operator|>
name|StatepointBase
operator|<
name|FunTy
block|,
name|InstructionTy
block|,
name|ValueTy
block|,
name|CallSiteTy
operator|>
operator|::
name|getRelocates
argument_list|()
specifier|const
block|{
name|std
operator|::
name|vector
operator|<
specifier|const
name|GCRelocateInst
operator|*
operator|>
name|Result
block|;
name|CallSiteTy
name|StatepointCS
operator|=
name|getCallSite
argument_list|()
block|;
comment|// Search for relocated pointers.  Note that working backwards from the
comment|// gc_relocates ensures that we only get pairs which are actually relocated
comment|// and used after the statepoint.
for|for
control|(
specifier|const
name|User
modifier|*
name|U
range|:
name|getInstruction
argument_list|()
operator|->
name|users
argument_list|()
control|)
if|if
condition|(
name|auto
operator|*
name|Relocate
operator|=
name|dyn_cast
operator|<
name|GCRelocateInst
operator|>
operator|(
name|U
operator|)
condition|)
name|Result
operator|.
name|push_back
argument_list|(
name|Relocate
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|StatepointCS
operator|.
name|isInvoke
argument_list|()
condition|)
return|return
name|Result
return|;
comment|// We need to scan thorough exceptional relocations if it is invoke statepoint
name|LandingPadInst
operator|*
name|LandingPad
operator|=
name|cast
operator|<
name|InvokeInst
operator|>
operator|(
name|getInstruction
argument_list|()
operator|)
operator|->
name|getLandingPadInst
argument_list|()
block|;
comment|// Search for gc relocates that are attached to this landingpad.
for|for
control|(
specifier|const
name|User
modifier|*
name|LandingPadUser
range|:
name|LandingPad
operator|->
name|users
argument_list|()
control|)
block|{
if|if
condition|(
name|auto
operator|*
name|Relocate
operator|=
name|dyn_cast
operator|<
name|GCRelocateInst
operator|>
operator|(
name|LandingPadUser
operator|)
condition|)
name|Result
operator|.
name|push_back
argument_list|(
name|Relocate
argument_list|)
expr_stmt|;
block|}
return|return
name|Result
return|;
block|}
end_decl_stmt

begin_comment
comment|/// Call sites that get wrapped by a gc.statepoint (currently only in
end_comment

begin_comment
comment|/// RewriteStatepointsForGC and potentially in other passes in the future) can
end_comment

begin_comment
comment|/// have attributes that describe properties of gc.statepoint call they will be
end_comment

begin_comment
comment|/// eventually be wrapped in.  This struct is used represent such directives.
end_comment

begin_struct
struct|struct
name|StatepointDirectives
block|{
name|Optional
operator|<
name|uint32_t
operator|>
name|NumPatchBytes
expr_stmt|;
name|Optional
operator|<
name|uint64_t
operator|>
name|StatepointID
expr_stmt|;
specifier|static
specifier|const
name|uint64_t
name|DefaultStatepointID
init|=
literal|0xABCDEF00
decl_stmt|;
specifier|static
specifier|const
name|uint64_t
name|DeoptBundleStatepointID
init|=
literal|0xABCDEF0F
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/// Parse out statepoint directives from the function attributes present in \p
end_comment

begin_comment
comment|/// AS.
end_comment

begin_function_decl
name|StatepointDirectives
name|parseStatepointDirectivesFromAttrs
parameter_list|(
name|AttributeList
name|AS
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/// Return \c true if the the \p Attr is an attribute that is a statepoint
end_comment

begin_comment
comment|/// directive.
end_comment

begin_function_decl
name|bool
name|isStatepointDirectiveAttr
parameter_list|(
name|Attribute
name|Attr
parameter_list|)
function_decl|;
end_function_decl

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_IR_STATEPOINT_H
end_comment

end_unit

