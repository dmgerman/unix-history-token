begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- GetElementPtrTypeIterator.h ------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file implements an iterator for walking through the types indexed by
end_comment

begin_comment
comment|// getelementptr instructions.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_IR_GETELEMENTPTRTYPEITERATOR_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_IR_GETELEMENTPTRTYPEITERATOR_H
end_define

begin_include
include|#
directive|include
file|"llvm/IR/DerivedTypes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Operator.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/User.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/PointerIntPair.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|template
operator|<
name|typename
name|ItTy
operator|=
name|User
operator|::
name|const_op_iterator
operator|>
name|class
name|generic_gep_type_iterator
operator|:
name|public
name|std
operator|::
name|iterator
operator|<
name|std
operator|::
name|forward_iterator_tag
operator|,
name|Type
operator|*
operator|,
name|ptrdiff_t
operator|>
block|{
typedef|typedef
name|std
operator|::
name|iterator
operator|<
name|std
operator|::
name|forward_iterator_tag
operator|,
name|Type
operator|*
operator|,
name|ptrdiff_t
operator|>
name|super
expr_stmt|;
name|ItTy
name|OpIt
expr_stmt|;
name|PointerIntPair
operator|<
name|Type
operator|*
operator|,
literal|1
operator|>
name|CurTy
expr_stmt|;
name|unsigned
name|AddrSpace
decl_stmt|;
name|generic_gep_type_iterator
argument_list|()
block|{}
name|public
label|:
specifier|static
name|generic_gep_type_iterator
name|begin
parameter_list|(
name|Type
modifier|*
name|Ty
parameter_list|,
name|ItTy
name|It
parameter_list|)
block|{
name|generic_gep_type_iterator
name|I
decl_stmt|;
name|I
operator|.
name|CurTy
operator|.
name|setPointer
argument_list|(
name|Ty
argument_list|)
expr_stmt|;
name|I
operator|.
name|OpIt
operator|=
name|It
expr_stmt|;
return|return
name|I
return|;
block|}
specifier|static
name|generic_gep_type_iterator
name|begin
parameter_list|(
name|Type
modifier|*
name|Ty
parameter_list|,
name|unsigned
name|AddrSpace
parameter_list|,
name|ItTy
name|It
parameter_list|)
block|{
name|generic_gep_type_iterator
name|I
decl_stmt|;
name|I
operator|.
name|CurTy
operator|.
name|setPointer
argument_list|(
name|Ty
argument_list|)
expr_stmt|;
name|I
operator|.
name|CurTy
operator|.
name|setInt
argument_list|(
name|true
argument_list|)
expr_stmt|;
name|I
operator|.
name|AddrSpace
operator|=
name|AddrSpace
expr_stmt|;
name|I
operator|.
name|OpIt
operator|=
name|It
expr_stmt|;
return|return
name|I
return|;
block|}
specifier|static
name|generic_gep_type_iterator
name|end
parameter_list|(
name|ItTy
name|It
parameter_list|)
block|{
name|generic_gep_type_iterator
name|I
decl_stmt|;
name|I
operator|.
name|OpIt
operator|=
name|It
expr_stmt|;
return|return
name|I
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|generic_gep_type_iterator
operator|&
name|x
operator|)
specifier|const
block|{
return|return
name|OpIt
operator|==
name|x
operator|.
name|OpIt
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|generic_gep_type_iterator
operator|&
name|x
operator|)
specifier|const
block|{
return|return
operator|!
name|operator
operator|==
operator|(
name|x
operator|)
return|;
block|}
name|Type
operator|*
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
if|if
condition|(
name|CurTy
operator|.
name|getInt
argument_list|()
condition|)
return|return
name|CurTy
operator|.
name|getPointer
argument_list|()
operator|->
name|getPointerTo
argument_list|(
name|AddrSpace
argument_list|)
return|;
return|return
name|CurTy
operator|.
name|getPointer
argument_list|()
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|Type
operator|*
name|getIndexedType
argument_list|()
specifier|const
block|{
if|if
condition|(
name|CurTy
operator|.
name|getInt
argument_list|()
condition|)
return|return
name|CurTy
operator|.
name|getPointer
argument_list|()
return|;
name|CompositeType
operator|*
name|CT
operator|=
name|cast
operator|<
name|CompositeType
operator|>
operator|(
name|CurTy
operator|.
name|getPointer
argument_list|()
operator|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|CT
operator|->
name|getTypeAtIndex
argument_list|(
name|getOperand
argument_list|()
argument_list|)
return|;
end_return

begin_comment
unit|}
comment|// This is a non-standard operator->.  It allows you to call methods on the
end_comment

begin_comment
comment|// current type directly.
end_comment

begin_expr_stmt
unit|Type
operator|*
name|operator
operator|->
expr|(
end_expr_stmt

begin_expr_stmt
unit|)
specifier|const
block|{
return|return
name|operator
operator|*
operator|(
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|Value
operator|*
name|getOperand
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|Value
operator|*
operator|>
operator|(
operator|&
operator|*
operator|*
name|OpIt
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|generic_gep_type_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
comment|// Preincrement
if|if
condition|(
name|CurTy
operator|.
name|getInt
argument_list|()
condition|)
block|{
name|CurTy
operator|.
name|setInt
argument_list|(
name|false
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_elseif
elseif|else
if|if
condition|(
name|CompositeType
modifier|*
name|CT
init|=
name|dyn_cast
operator|<
name|CompositeType
operator|>
operator|(
name|CurTy
operator|.
name|getPointer
argument_list|()
operator|)
condition|)
block|{
name|CurTy
operator|.
name|setPointer
argument_list|(
name|CT
operator|->
name|getTypeAtIndex
argument_list|(
name|getOperand
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_elseif

begin_else
else|else
block|{
name|CurTy
operator|.
name|setPointer
argument_list|(
name|nullptr
argument_list|)
expr_stmt|;
block|}
end_else

begin_expr_stmt
operator|++
name|OpIt
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}      generic_gep_type_iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
comment|// Postincrement
name|generic_gep_type_iterator
name|tmp
operator|=
operator|*
name|this
block|;
operator|++
operator|*
name|this
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_typedef
unit|};
typedef|typedef
name|generic_gep_type_iterator
operator|<
operator|>
name|gep_type_iterator
expr_stmt|;
end_typedef

begin_function
specifier|inline
name|gep_type_iterator
name|gep_type_begin
parameter_list|(
specifier|const
name|User
modifier|*
name|GEP
parameter_list|)
block|{
name|auto
operator|*
name|GEPOp
operator|=
name|cast
operator|<
name|GEPOperator
operator|>
operator|(
name|GEP
operator|)
expr_stmt|;
return|return
name|gep_type_iterator
operator|::
name|begin
argument_list|(
name|GEPOp
operator|->
name|getSourceElementType
argument_list|()
argument_list|,
name|cast
operator|<
name|PointerType
operator|>
operator|(
name|GEPOp
operator|->
name|getPointerOperandType
argument_list|()
operator|->
name|getScalarType
argument_list|()
operator|)
operator|->
name|getAddressSpace
argument_list|()
argument_list|,
name|GEP
operator|->
name|op_begin
argument_list|()
operator|+
literal|1
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|gep_type_iterator
name|gep_type_end
parameter_list|(
specifier|const
name|User
modifier|*
name|GEP
parameter_list|)
block|{
return|return
name|gep_type_iterator
operator|::
name|end
argument_list|(
name|GEP
operator|->
name|op_end
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|gep_type_iterator
name|gep_type_begin
parameter_list|(
specifier|const
name|User
modifier|&
name|GEP
parameter_list|)
block|{
name|auto
operator|&
name|GEPOp
operator|=
name|cast
operator|<
name|GEPOperator
operator|>
operator|(
name|GEP
operator|)
expr_stmt|;
return|return
name|gep_type_iterator
operator|::
name|begin
argument_list|(
name|GEPOp
operator|.
name|getSourceElementType
argument_list|()
argument_list|,
name|cast
operator|<
name|PointerType
operator|>
operator|(
name|GEPOp
operator|.
name|getPointerOperandType
argument_list|()
operator|->
name|getScalarType
argument_list|()
operator|)
operator|->
name|getAddressSpace
argument_list|()
argument_list|,
name|GEP
operator|.
name|op_begin
argument_list|()
operator|+
literal|1
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|gep_type_iterator
name|gep_type_end
parameter_list|(
specifier|const
name|User
modifier|&
name|GEP
parameter_list|)
block|{
return|return
name|gep_type_iterator
operator|::
name|end
argument_list|(
name|GEP
operator|.
name|op_end
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|generic_gep_type_iterator
operator|<
specifier|const
name|T
operator|*
operator|>
name|gep_type_begin
argument_list|(
argument|Type *Op0
argument_list|,
argument|ArrayRef<T> A
argument_list|)
block|{
return|return
name|generic_gep_type_iterator
operator|<
specifier|const
name|T
operator|*
operator|>
operator|::
name|begin
argument_list|(
name|Op0
argument_list|,
name|A
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|generic_gep_type_iterator
operator|<
specifier|const
name|T
operator|*
operator|>
name|gep_type_end
argument_list|(
argument|Type *
comment|/*Op0*/
argument_list|,
argument|ArrayRef<T> A
argument_list|)
block|{
return|return
name|generic_gep_type_iterator
operator|<
specifier|const
name|T
operator|*
operator|>
operator|::
name|end
argument_list|(
name|A
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

