begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2011-2015 Samy Al Bahra.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CK_BRLOCK_H
end_ifndef

begin_define
define|#
directive|define
name|CK_BRLOCK_H
end_define

begin_comment
comment|/*  * Big reader spinlocks provide cache-local contention-free read  * lock acquisition in the absence of writers. This comes at the  * cost of O(n) write lock acquisition. They were first implemented  * in the Linux kernel by Ingo Molnar and David S. Miller around the  * year 2000.  *  * This implementation is thread-agnostic which comes at the cost  * of larger reader objects due to necessary linkage overhead. In  * order to cut down on TLB pressure, it is recommended to allocate  * these objects on the same page.  */
end_comment

begin_include
include|#
directive|include
file|<ck_pr.h>
end_include

begin_include
include|#
directive|include
file|<ck_stdbool.h>
end_include

begin_include
include|#
directive|include
file|<ck_stddef.h>
end_include

begin_struct
struct|struct
name|ck_brlock_reader
block|{
name|unsigned
name|int
name|n_readers
decl_stmt|;
name|struct
name|ck_brlock_reader
modifier|*
name|previous
decl_stmt|;
name|struct
name|ck_brlock_reader
modifier|*
name|next
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|ck_brlock_reader
name|ck_brlock_reader_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CK_BRLOCK_READER_INITIALIZER
value|{0}
end_define

begin_struct
struct|struct
name|ck_brlock
block|{
name|struct
name|ck_brlock_reader
modifier|*
name|readers
decl_stmt|;
name|unsigned
name|int
name|writer
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|ck_brlock
name|ck_brlock_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CK_BRLOCK_INITIALIZER
value|{NULL, false}
end_define

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_brlock_init
parameter_list|(
name|struct
name|ck_brlock
modifier|*
name|br
parameter_list|)
block|{
name|br
operator|->
name|readers
operator|=
name|NULL
expr_stmt|;
name|br
operator|->
name|writer
operator|=
name|false
expr_stmt|;
name|ck_pr_barrier
argument_list|()
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_brlock_write_lock
parameter_list|(
name|struct
name|ck_brlock
modifier|*
name|br
parameter_list|)
block|{
name|struct
name|ck_brlock_reader
modifier|*
name|cursor
decl_stmt|;
comment|/* 	 * As the frequency of write acquisitions should be low, 	 * there is no point to more advanced contention avoidance. 	 */
while|while
condition|(
name|ck_pr_fas_uint
argument_list|(
operator|&
name|br
operator|->
name|writer
argument_list|,
name|true
argument_list|)
operator|==
name|true
condition|)
name|ck_pr_stall
argument_list|()
expr_stmt|;
name|ck_pr_fence_atomic_load
argument_list|()
expr_stmt|;
comment|/* The reader list is protected under the writer br. */
for|for
control|(
name|cursor
operator|=
name|br
operator|->
name|readers
init|;
name|cursor
operator|!=
name|NULL
condition|;
name|cursor
operator|=
name|cursor
operator|->
name|next
control|)
block|{
while|while
condition|(
name|ck_pr_load_uint
argument_list|(
operator|&
name|cursor
operator|->
name|n_readers
argument_list|)
operator|!=
literal|0
condition|)
name|ck_pr_stall
argument_list|()
expr_stmt|;
block|}
name|ck_pr_fence_lock
argument_list|()
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_brlock_write_unlock
parameter_list|(
name|struct
name|ck_brlock
modifier|*
name|br
parameter_list|)
block|{
name|ck_pr_fence_unlock
argument_list|()
expr_stmt|;
name|ck_pr_store_uint
argument_list|(
operator|&
name|br
operator|->
name|writer
argument_list|,
name|false
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_brlock_write_trylock
parameter_list|(
name|struct
name|ck_brlock
modifier|*
name|br
parameter_list|,
name|unsigned
name|int
name|factor
parameter_list|)
block|{
name|struct
name|ck_brlock_reader
modifier|*
name|cursor
decl_stmt|;
name|unsigned
name|int
name|steps
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|ck_pr_fas_uint
argument_list|(
operator|&
name|br
operator|->
name|writer
argument_list|,
name|true
argument_list|)
operator|==
name|true
condition|)
block|{
if|if
condition|(
operator|++
name|steps
operator|>=
name|factor
condition|)
return|return
name|false
return|;
name|ck_pr_stall
argument_list|()
expr_stmt|;
block|}
comment|/* 	 * We do not require a strict fence here as atomic RMW operations 	 * are serializing. 	 */
name|ck_pr_fence_atomic_load
argument_list|()
expr_stmt|;
for|for
control|(
name|cursor
operator|=
name|br
operator|->
name|readers
init|;
name|cursor
operator|!=
name|NULL
condition|;
name|cursor
operator|=
name|cursor
operator|->
name|next
control|)
block|{
while|while
condition|(
name|ck_pr_load_uint
argument_list|(
operator|&
name|cursor
operator|->
name|n_readers
argument_list|)
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
operator|++
name|steps
operator|>=
name|factor
condition|)
block|{
name|ck_brlock_write_unlock
argument_list|(
name|br
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
name|ck_pr_stall
argument_list|()
expr_stmt|;
block|}
block|}
name|ck_pr_fence_lock
argument_list|()
expr_stmt|;
return|return
name|true
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_brlock_read_register
parameter_list|(
name|struct
name|ck_brlock
modifier|*
name|br
parameter_list|,
name|struct
name|ck_brlock_reader
modifier|*
name|reader
parameter_list|)
block|{
name|reader
operator|->
name|n_readers
operator|=
literal|0
expr_stmt|;
name|reader
operator|->
name|previous
operator|=
name|NULL
expr_stmt|;
comment|/* Implicit compiler barrier. */
name|ck_brlock_write_lock
argument_list|(
name|br
argument_list|)
expr_stmt|;
name|reader
operator|->
name|next
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|br
operator|->
name|readers
argument_list|)
expr_stmt|;
if|if
condition|(
name|reader
operator|->
name|next
operator|!=
name|NULL
condition|)
name|reader
operator|->
name|next
operator|->
name|previous
operator|=
name|reader
expr_stmt|;
name|ck_pr_store_ptr
argument_list|(
operator|&
name|br
operator|->
name|readers
argument_list|,
name|reader
argument_list|)
expr_stmt|;
name|ck_brlock_write_unlock
argument_list|(
name|br
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_brlock_read_unregister
parameter_list|(
name|struct
name|ck_brlock
modifier|*
name|br
parameter_list|,
name|struct
name|ck_brlock_reader
modifier|*
name|reader
parameter_list|)
block|{
name|ck_brlock_write_lock
argument_list|(
name|br
argument_list|)
expr_stmt|;
if|if
condition|(
name|reader
operator|->
name|next
operator|!=
name|NULL
condition|)
name|reader
operator|->
name|next
operator|->
name|previous
operator|=
name|reader
operator|->
name|previous
expr_stmt|;
if|if
condition|(
name|reader
operator|->
name|previous
operator|!=
name|NULL
condition|)
name|reader
operator|->
name|previous
operator|->
name|next
operator|=
name|reader
operator|->
name|next
expr_stmt|;
else|else
name|br
operator|->
name|readers
operator|=
name|reader
operator|->
name|next
expr_stmt|;
name|ck_brlock_write_unlock
argument_list|(
name|br
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_brlock_read_lock
parameter_list|(
name|struct
name|ck_brlock
modifier|*
name|br
parameter_list|,
name|struct
name|ck_brlock_reader
modifier|*
name|reader
parameter_list|)
block|{
if|if
condition|(
name|reader
operator|->
name|n_readers
operator|>=
literal|1
condition|)
block|{
name|ck_pr_store_uint
argument_list|(
operator|&
name|reader
operator|->
name|n_readers
argument_list|,
name|reader
operator|->
name|n_readers
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
init|;
condition|;
control|)
block|{
while|while
condition|(
name|ck_pr_load_uint
argument_list|(
operator|&
name|br
operator|->
name|writer
argument_list|)
operator|==
name|true
condition|)
name|ck_pr_stall
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__x86__
argument_list|)
operator|||
name|defined
argument_list|(
name|__x86_64__
argument_list|)
name|ck_pr_fas_uint
argument_list|(
operator|&
name|reader
operator|->
name|n_readers
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|/* 		 * Serialize reader counter update with respect to load of 		 * writer. 		 */
name|ck_pr_fence_atomic_load
argument_list|()
expr_stmt|;
else|#
directive|else
name|ck_pr_store_uint
argument_list|(
operator|&
name|reader
operator|->
name|n_readers
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|/* 		 * Serialize reader counter update with respect to load of 		 * writer. 		 */
name|ck_pr_fence_store_load
argument_list|()
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|ck_pr_load_uint
argument_list|(
operator|&
name|br
operator|->
name|writer
argument_list|)
operator|==
name|false
condition|)
break|break;
name|ck_pr_store_uint
argument_list|(
operator|&
name|reader
operator|->
name|n_readers
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|ck_pr_fence_lock
argument_list|()
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_brlock_read_trylock
parameter_list|(
name|struct
name|ck_brlock
modifier|*
name|br
parameter_list|,
name|struct
name|ck_brlock_reader
modifier|*
name|reader
parameter_list|,
name|unsigned
name|int
name|factor
parameter_list|)
block|{
name|unsigned
name|int
name|steps
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|reader
operator|->
name|n_readers
operator|>=
literal|1
condition|)
block|{
name|ck_pr_store_uint
argument_list|(
operator|&
name|reader
operator|->
name|n_readers
argument_list|,
name|reader
operator|->
name|n_readers
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
for|for
control|(
init|;
condition|;
control|)
block|{
while|while
condition|(
name|ck_pr_load_uint
argument_list|(
operator|&
name|br
operator|->
name|writer
argument_list|)
operator|==
name|true
condition|)
block|{
if|if
condition|(
operator|++
name|steps
operator|>=
name|factor
condition|)
return|return
name|false
return|;
name|ck_pr_stall
argument_list|()
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|__x86__
argument_list|)
operator|||
name|defined
argument_list|(
name|__x86_64__
argument_list|)
name|ck_pr_fas_uint
argument_list|(
operator|&
name|reader
operator|->
name|n_readers
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|/* 		 * Serialize reader counter update with respect to load of 		 * writer. 		 */
name|ck_pr_fence_atomic_load
argument_list|()
expr_stmt|;
else|#
directive|else
name|ck_pr_store_uint
argument_list|(
operator|&
name|reader
operator|->
name|n_readers
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|/* 		 * Serialize reader counter update with respect to load of 		 * writer. 		 */
name|ck_pr_fence_store_load
argument_list|()
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|ck_pr_load_uint
argument_list|(
operator|&
name|br
operator|->
name|writer
argument_list|)
operator|==
name|false
condition|)
break|break;
name|ck_pr_store_uint
argument_list|(
operator|&
name|reader
operator|->
name|n_readers
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|steps
operator|>=
name|factor
condition|)
return|return
name|false
return|;
block|}
name|ck_pr_fence_lock
argument_list|()
expr_stmt|;
return|return
name|true
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_brlock_read_unlock
parameter_list|(
name|struct
name|ck_brlock_reader
modifier|*
name|reader
parameter_list|)
block|{
name|ck_pr_fence_unlock
argument_list|()
expr_stmt|;
name|ck_pr_store_uint
argument_list|(
operator|&
name|reader
operator|->
name|n_readers
argument_list|,
name|reader
operator|->
name|n_readers
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CK_BRLOCK_H */
end_comment

end_unit

