begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// -*- C++ -*-
end_comment

begin_comment
comment|//===---------------------------- math.h ----------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is dual licensed under the MIT and the University of Illinois Open
end_comment

begin_comment
comment|// Source Licenses. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LIBCPP_MATH_H
end_ifndef

begin_define
define|#
directive|define
name|_LIBCPP_MATH_H
end_define

begin_comment
comment|/*     math.h synopsis  Macros:      HUGE_VAL     HUGE_VALF               // C99     HUGE_VALL               // C99     INFINITY                // C99     NAN                     // C99     FP_INFINITE             // C99     FP_NAN                  // C99     FP_NORMAL               // C99     FP_SUBNORMAL            // C99     FP_ZERO                 // C99     FP_FAST_FMA             // C99     FP_FAST_FMAF            // C99     FP_FAST_FMAL            // C99     FP_ILOGB0               // C99     FP_ILOGBNAN             // C99     MATH_ERRNO              // C99     MATH_ERREXCEPT          // C99     math_errhandling        // C99  Types:      float_t                 // C99     double_t                // C99  // C90  floating_point abs(floating_point x);  floating_point acos (arithmetic x); float          acosf(float x); long double    acosl(long double x);  floating_point asin (arithmetic x); float          asinf(float x); long double    asinl(long double x);  floating_point atan (arithmetic x); float          atanf(float x); long double    atanl(long double x);  floating_point atan2 (arithmetic y, arithmetic x); float          atan2f(float y, float x); long double    atan2l(long double y, long double x);  floating_point ceil (arithmetic x); float          ceilf(float x); long double    ceill(long double x);  floating_point cos (arithmetic x); float          cosf(float x); long double    cosl(long double x);  floating_point cosh (arithmetic x); float          coshf(float x); long double    coshl(long double x);  floating_point exp (arithmetic x); float          expf(float x); long double    expl(long double x);  floating_point fabs (arithmetic x); float          fabsf(float x); long double    fabsl(long double x);  floating_point floor (arithmetic x); float          floorf(float x); long double    floorl(long double x);  floating_point fmod (arithmetic x, arithmetic y); float          fmodf(float x, float y); long double    fmodl(long double x, long double y);  floating_point frexp (arithmetic value, int* exp); float          frexpf(float value, int* exp); long double    frexpl(long double value, int* exp);  floating_point ldexp (arithmetic value, int exp); float          ldexpf(float value, int exp); long double    ldexpl(long double value, int exp);  floating_point log (arithmetic x); float          logf(float x); long double    logl(long double x);  floating_point log10 (arithmetic x); float          log10f(float x); long double    log10l(long double x);  floating_point modf (floating_point value, floating_point* iptr); float          modff(float value, float* iptr); long double    modfl(long double value, long double* iptr);  floating_point pow (arithmetic x, arithmetic y); float          powf(float x, float y); long double    powl(long double x, long double y);  floating_point sin (arithmetic x); float          sinf(float x); long double    sinl(long double x);  floating_point sinh (arithmetic x); float          sinhf(float x); long double    sinhl(long double x);  floating_point sqrt (arithmetic x); float          sqrtf(float x); long double    sqrtl(long double x);  floating_point tan (arithmetic x); float          tanf(float x); long double    tanl(long double x);  floating_point tanh (arithmetic x); float          tanhf(float x); long double    tanhl(long double x);  //  C99  bool signbit(arithmetic x);  int fpclassify(arithmetic x);  bool isfinite(arithmetic x); bool isinf(arithmetic x); bool isnan(arithmetic x); bool isnormal(arithmetic x);  bool isgreater(arithmetic x, arithmetic y); bool isgreaterequal(arithmetic x, arithmetic y); bool isless(arithmetic x, arithmetic y); bool islessequal(arithmetic x, arithmetic y); bool islessgreater(arithmetic x, arithmetic y); bool isunordered(arithmetic x, arithmetic y);  floating_point acosh (arithmetic x); float          acoshf(float x); long double    acoshl(long double x);  floating_point asinh (arithmetic x); float          asinhf(float x); long double    asinhl(long double x);  floating_point atanh (arithmetic x); float          atanhf(float x); long double    atanhl(long double x);  floating_point cbrt (arithmetic x); float          cbrtf(float x); long double    cbrtl(long double x);  floating_point copysign (arithmetic x, arithmetic y); float          copysignf(float x, float y); long double    copysignl(long double x, long double y);  floating_point erf (arithmetic x); float          erff(float x); long double    erfl(long double x);  floating_point erfc (arithmetic x); float          erfcf(float x); long double    erfcl(long double x);  floating_point exp2 (arithmetic x); float          exp2f(float x); long double    exp2l(long double x);  floating_point expm1 (arithmetic x); float          expm1f(float x); long double    expm1l(long double x);  floating_point fdim (arithmetic x, arithmetic y); float          fdimf(float x, float y); long double    fdiml(long double x, long double y);  floating_point fma (arithmetic x, arithmetic y, arithmetic z); float          fmaf(float x, float y, float z); long double    fmal(long double x, long double y, long double z);  floating_point fmax (arithmetic x, arithmetic y); float          fmaxf(float x, float y); long double    fmaxl(long double x, long double y);  floating_point fmin (arithmetic x, arithmetic y); float          fminf(float x, float y); long double    fminl(long double x, long double y);  floating_point hypot (arithmetic x, arithmetic y); float          hypotf(float x, float y); long double    hypotl(long double x, long double y);  int ilogb (arithmetic x); int ilogbf(float x); int ilogbl(long double x);  floating_point lgamma (arithmetic x); float          lgammaf(float x); long double    lgammal(long double x);  long long llrint (arithmetic x); long long llrintf(float x); long long llrintl(long double x);  long long llround (arithmetic x); long long llroundf(float x); long long llroundl(long double x);  floating_point log1p (arithmetic x); float          log1pf(float x); long double    log1pl(long double x);  floating_point log2 (arithmetic x); float          log2f(float x); long double    log2l(long double x);  floating_point logb (arithmetic x); float          logbf(float x); long double    logbl(long double x);  long lrint (arithmetic x); long lrintf(float x); long lrintl(long double x);  long lround (arithmetic x); long lroundf(float x); long lroundl(long double x);  double      nan (const char* str); float       nanf(const char* str); long double nanl(const char* str);  floating_point nearbyint (arithmetic x); float          nearbyintf(float x); long double    nearbyintl(long double x);  floating_point nextafter (arithmetic x, arithmetic y); float          nextafterf(float x, float y); long double    nextafterl(long double x, long double y);  floating_point nexttoward (arithmetic x, long double y); float          nexttowardf(float x, long double y); long double    nexttowardl(long double x, long double y);  floating_point remainder (arithmetic x, arithmetic y); float          remainderf(float x, float y); long double    remainderl(long double x, long double y);  floating_point remquo (arithmetic x, arithmetic y, int* pquo); float          remquof(float x, float y, int* pquo); long double    remquol(long double x, long double y, int* pquo);  floating_point rint (arithmetic x); float          rintf(float x); long double    rintl(long double x);  floating_point round (arithmetic x); float          roundf(float x); long double    roundl(long double x);  floating_point scalbln (arithmetic x, long ex); float          scalblnf(float x, long ex); long double    scalblnl(long double x, long ex);  floating_point scalbn (arithmetic x, int ex); float          scalbnf(float x, int ex); long double    scalbnl(long double x, int ex);  floating_point tgamma (arithmetic x); float          tgammaf(float x); long double    tgammal(long double x);  floating_point trunc (arithmetic x); float          truncf(float x); long double    truncl(long double x);  */
end_comment

begin_include
include|#
directive|include
file|<__config>
end_include

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER
argument_list|)
end_if

begin_pragma
pragma|#
directive|pragma
name|GCC
name|system_header
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_empty
empty|#include_next<math.h>
end_empty

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_comment
comment|// We support including .h headers inside 'extern "C"' contexts, so switch
end_comment

begin_comment
comment|// back to C++ linkage before including these C++ headers.
end_comment

begin_extern
extern|extern
literal|"C++"
block|{
include|#
directive|include
file|<type_traits>
ifdef|#
directive|ifdef
name|_LIBCPP_MSVCRT
include|#
directive|include
file|"support/win32/math_win32.h"
endif|#
directive|endif
comment|// signbit
ifdef|#
directive|ifdef
name|signbit
name|template
operator|<
name|class
name|_A1
operator|>
name|_LIBCPP_ALWAYS_INLINE
name|bool
name|__libcpp_signbit
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|signbit
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
undef|#
directive|undef
name|signbit
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_arithmetic
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|bool
operator|>
operator|::
name|type
name|signbit
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|__libcpp_signbit
argument_list|(
operator|(
name|typename
name|std
operator|::
name|__promote
operator|<
name|_A1
operator|>
operator|::
name|type
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
endif|#
directive|endif
comment|// signbit
comment|// fpclassify
ifdef|#
directive|ifdef
name|fpclassify
name|template
operator|<
name|class
name|_A1
operator|>
name|_LIBCPP_ALWAYS_INLINE
name|int
name|__libcpp_fpclassify
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|fpclassify
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
undef|#
directive|undef
name|fpclassify
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_arithmetic
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|int
operator|>
operator|::
name|type
name|fpclassify
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|__libcpp_fpclassify
argument_list|(
operator|(
name|typename
name|std
operator|::
name|__promote
operator|<
name|_A1
operator|>
operator|::
name|type
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
endif|#
directive|endif
comment|// fpclassify
comment|// isfinite
ifdef|#
directive|ifdef
name|isfinite
name|template
operator|<
name|class
name|_A1
operator|>
name|_LIBCPP_ALWAYS_INLINE
name|bool
name|__libcpp_isfinite
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|isfinite
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
undef|#
directive|undef
name|isfinite
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_arithmetic
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|bool
operator|>
operator|::
name|type
name|isfinite
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|__libcpp_isfinite
argument_list|(
operator|(
name|typename
name|std
operator|::
name|__promote
operator|<
name|_A1
operator|>
operator|::
name|type
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
endif|#
directive|endif
comment|// isfinite
comment|// isinf
ifdef|#
directive|ifdef
name|isinf
name|template
operator|<
name|class
name|_A1
operator|>
name|_LIBCPP_ALWAYS_INLINE
name|bool
name|__libcpp_isinf
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|isinf
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
undef|#
directive|undef
name|isinf
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_arithmetic
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|bool
operator|>
operator|::
name|type
name|isinf
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|__libcpp_isinf
argument_list|(
operator|(
name|typename
name|std
operator|::
name|__promote
operator|<
name|_A1
operator|>
operator|::
name|type
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
endif|#
directive|endif
comment|// isinf
comment|// isnan
ifdef|#
directive|ifdef
name|isnan
name|template
operator|<
name|class
name|_A1
operator|>
name|_LIBCPP_ALWAYS_INLINE
name|bool
name|__libcpp_isnan
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|isnan
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
undef|#
directive|undef
name|isnan
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_arithmetic
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|bool
operator|>
operator|::
name|type
name|isnan
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|__libcpp_isnan
argument_list|(
operator|(
name|typename
name|std
operator|::
name|__promote
operator|<
name|_A1
operator|>
operator|::
name|type
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
endif|#
directive|endif
comment|// isnan
comment|// isnormal
ifdef|#
directive|ifdef
name|isnormal
name|template
operator|<
name|class
name|_A1
operator|>
name|_LIBCPP_ALWAYS_INLINE
name|bool
name|__libcpp_isnormal
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|isnormal
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
undef|#
directive|undef
name|isnormal
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_arithmetic
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|bool
operator|>
operator|::
name|type
name|isnormal
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|__libcpp_isnormal
argument_list|(
operator|(
name|typename
name|std
operator|::
name|__promote
operator|<
name|_A1
operator|>
operator|::
name|type
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
endif|#
directive|endif
comment|// isnormal
comment|// isgreater
ifdef|#
directive|ifdef
name|isgreater
name|template
operator|<
name|class
name|_A1
operator|,
name|class
name|_A2
operator|>
name|_LIBCPP_ALWAYS_INLINE
name|bool
name|__libcpp_isgreater
argument_list|(
argument|_A1 __lcpp_x
argument_list|,
argument|_A2 __lcpp_y
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|isgreater
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|)
return|;
block|}
undef|#
directive|undef
name|isgreater
name|template
operator|<
name|class
name|_A1
operator|,
name|class
name|_A2
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_arithmetic
operator|<
name|_A1
operator|>
operator|::
name|value
operator|&&
name|std
operator|::
name|is_arithmetic
operator|<
name|_A2
operator|>
operator|::
name|value
operator|,
name|bool
operator|>
operator|::
name|type
name|isgreater
argument_list|(
argument|_A1 __lcpp_x
argument_list|,
argument|_A2 __lcpp_y
argument_list|)
name|_NOEXCEPT
block|{
typedef|typedef
name|typename
name|std
operator|::
name|__promote
operator|<
name|_A1
operator|,
name|_A2
operator|>
operator|::
name|type
name|type
expr_stmt|;
return|return
name|__libcpp_isgreater
argument_list|(
operator|(
name|type
operator|)
name|__lcpp_x
argument_list|,
operator|(
name|type
operator|)
name|__lcpp_y
argument_list|)
return|;
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// isgreater
end_comment

begin_comment
comment|// isgreaterequal
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|isgreaterequal
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|,
name|class
name|_A2
operator|>
name|_LIBCPP_ALWAYS_INLINE
name|bool
name|__libcpp_isgreaterequal
argument_list|(
argument|_A1 __lcpp_x
argument_list|,
argument|_A2 __lcpp_y
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|isgreaterequal
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|)
return|;
block|}
end_expr_stmt

begin_undef
undef|#
directive|undef
name|isgreaterequal
end_undef

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|,
name|class
name|_A2
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_arithmetic
operator|<
name|_A1
operator|>
operator|::
name|value
operator|&&
name|std
operator|::
name|is_arithmetic
operator|<
name|_A2
operator|>
operator|::
name|value
operator|,
name|bool
operator|>
operator|::
name|type
name|isgreaterequal
argument_list|(
argument|_A1 __lcpp_x
argument_list|,
argument|_A2 __lcpp_y
argument_list|)
name|_NOEXCEPT
block|{
typedef|typedef
name|typename
name|std
operator|::
name|__promote
operator|<
name|_A1
operator|,
name|_A2
operator|>
operator|::
name|type
name|type
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__libcpp_isgreaterequal
argument_list|(
operator|(
name|type
operator|)
name|__lcpp_x
argument_list|,
operator|(
name|type
operator|)
name|__lcpp_y
argument_list|)
return|;
end_return

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|// isgreaterequal
end_comment

begin_comment
comment|// isless
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|isless
end_ifdef

begin_expr_stmt
unit|template
operator|<
name|class
name|_A1
operator|,
name|class
name|_A2
operator|>
name|_LIBCPP_ALWAYS_INLINE
name|bool
name|__libcpp_isless
argument_list|(
argument|_A1 __lcpp_x
argument_list|,
argument|_A2 __lcpp_y
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|isless
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|)
return|;
block|}
end_expr_stmt

begin_undef
undef|#
directive|undef
name|isless
end_undef

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|,
name|class
name|_A2
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_arithmetic
operator|<
name|_A1
operator|>
operator|::
name|value
operator|&&
name|std
operator|::
name|is_arithmetic
operator|<
name|_A2
operator|>
operator|::
name|value
operator|,
name|bool
operator|>
operator|::
name|type
name|isless
argument_list|(
argument|_A1 __lcpp_x
argument_list|,
argument|_A2 __lcpp_y
argument_list|)
name|_NOEXCEPT
block|{
typedef|typedef
name|typename
name|std
operator|::
name|__promote
operator|<
name|_A1
operator|,
name|_A2
operator|>
operator|::
name|type
name|type
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__libcpp_isless
argument_list|(
operator|(
name|type
operator|)
name|__lcpp_x
argument_list|,
operator|(
name|type
operator|)
name|__lcpp_y
argument_list|)
return|;
end_return

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|// isless
end_comment

begin_comment
comment|// islessequal
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|islessequal
end_ifdef

begin_expr_stmt
unit|template
operator|<
name|class
name|_A1
operator|,
name|class
name|_A2
operator|>
name|_LIBCPP_ALWAYS_INLINE
name|bool
name|__libcpp_islessequal
argument_list|(
argument|_A1 __lcpp_x
argument_list|,
argument|_A2 __lcpp_y
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|islessequal
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|)
return|;
block|}
end_expr_stmt

begin_undef
undef|#
directive|undef
name|islessequal
end_undef

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|,
name|class
name|_A2
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_arithmetic
operator|<
name|_A1
operator|>
operator|::
name|value
operator|&&
name|std
operator|::
name|is_arithmetic
operator|<
name|_A2
operator|>
operator|::
name|value
operator|,
name|bool
operator|>
operator|::
name|type
name|islessequal
argument_list|(
argument|_A1 __lcpp_x
argument_list|,
argument|_A2 __lcpp_y
argument_list|)
name|_NOEXCEPT
block|{
typedef|typedef
name|typename
name|std
operator|::
name|__promote
operator|<
name|_A1
operator|,
name|_A2
operator|>
operator|::
name|type
name|type
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__libcpp_islessequal
argument_list|(
operator|(
name|type
operator|)
name|__lcpp_x
argument_list|,
operator|(
name|type
operator|)
name|__lcpp_y
argument_list|)
return|;
end_return

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|// islessequal
end_comment

begin_comment
comment|// islessgreater
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|islessgreater
end_ifdef

begin_expr_stmt
unit|template
operator|<
name|class
name|_A1
operator|,
name|class
name|_A2
operator|>
name|_LIBCPP_ALWAYS_INLINE
name|bool
name|__libcpp_islessgreater
argument_list|(
argument|_A1 __lcpp_x
argument_list|,
argument|_A2 __lcpp_y
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|islessgreater
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|)
return|;
block|}
end_expr_stmt

begin_undef
undef|#
directive|undef
name|islessgreater
end_undef

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|,
name|class
name|_A2
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_arithmetic
operator|<
name|_A1
operator|>
operator|::
name|value
operator|&&
name|std
operator|::
name|is_arithmetic
operator|<
name|_A2
operator|>
operator|::
name|value
operator|,
name|bool
operator|>
operator|::
name|type
name|islessgreater
argument_list|(
argument|_A1 __lcpp_x
argument_list|,
argument|_A2 __lcpp_y
argument_list|)
name|_NOEXCEPT
block|{
typedef|typedef
name|typename
name|std
operator|::
name|__promote
operator|<
name|_A1
operator|,
name|_A2
operator|>
operator|::
name|type
name|type
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__libcpp_islessgreater
argument_list|(
operator|(
name|type
operator|)
name|__lcpp_x
argument_list|,
operator|(
name|type
operator|)
name|__lcpp_y
argument_list|)
return|;
end_return

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|// islessgreater
end_comment

begin_comment
comment|// isunordered
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|isunordered
end_ifdef

begin_expr_stmt
unit|template
operator|<
name|class
name|_A1
operator|,
name|class
name|_A2
operator|>
name|_LIBCPP_ALWAYS_INLINE
name|bool
name|__libcpp_isunordered
argument_list|(
argument|_A1 __lcpp_x
argument_list|,
argument|_A2 __lcpp_y
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|isunordered
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|)
return|;
block|}
end_expr_stmt

begin_undef
undef|#
directive|undef
name|isunordered
end_undef

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|,
name|class
name|_A2
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_arithmetic
operator|<
name|_A1
operator|>
operator|::
name|value
operator|&&
name|std
operator|::
name|is_arithmetic
operator|<
name|_A2
operator|>
operator|::
name|value
operator|,
name|bool
operator|>
operator|::
name|type
name|isunordered
argument_list|(
argument|_A1 __lcpp_x
argument_list|,
argument|_A2 __lcpp_y
argument_list|)
name|_NOEXCEPT
block|{
typedef|typedef
name|typename
name|std
operator|::
name|__promote
operator|<
name|_A1
operator|,
name|_A2
operator|>
operator|::
name|type
name|type
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__libcpp_isunordered
argument_list|(
operator|(
name|type
operator|)
name|__lcpp_x
argument_list|,
operator|(
name|type
operator|)
name|__lcpp_y
argument_list|)
return|;
end_return

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|// isunordered
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__sun__
end_ifndef

begin_comment
comment|// abs
end_comment

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_AIX
argument_list|)
end_if

begin_function
unit|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|abs
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|fabsf
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|double
name|abs
parameter_list|(
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|fabs
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|abs
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|fabsl
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// !defined(_AIX)
end_comment

begin_comment
comment|// acos
end_comment

begin_if
if|#
directive|if
operator|!
operator|(
name|defined
argument_list|(
name|_LIBCPP_MSVCRT
argument_list|)
operator|||
name|defined
argument_list|(
name|_AIX
argument_list|)
operator|)
end_if

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|acos
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|acosf
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|acos
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|acosl
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|acos
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|acos
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// asin
end_comment

begin_if
if|#
directive|if
operator|!
operator|(
name|defined
argument_list|(
name|_LIBCPP_MSVCRT
argument_list|)
operator|||
name|defined
argument_list|(
name|_AIX
argument_list|)
operator|)
end_if

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|asin
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|asinf
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|asin
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|asinl
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|asin
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|asin
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// atan
end_comment

begin_if
if|#
directive|if
operator|!
operator|(
name|defined
argument_list|(
name|_LIBCPP_MSVCRT
argument_list|)
operator|||
name|defined
argument_list|(
name|_AIX
argument_list|)
operator|)
end_if

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|atan
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|atanf
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|atan
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|atanl
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|atan
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|atan
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// atan2
end_comment

begin_if
if|#
directive|if
operator|!
operator|(
name|defined
argument_list|(
name|_LIBCPP_MSVCRT
argument_list|)
operator|||
name|defined
argument_list|(
name|_AIX
argument_list|)
operator|)
end_if

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|atan2
parameter_list|(
name|float
name|__lcpp_y
parameter_list|,
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|atan2f
argument_list|(
name|__lcpp_y
argument_list|,
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|atan2
parameter_list|(
name|long
name|double
name|__lcpp_y
parameter_list|,
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|atan2l
argument_list|(
name|__lcpp_y
argument_list|,
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|,
name|class
name|_A2
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|__lazy_enable_if
operator|<
name|std
operator|::
name|is_arithmetic
operator|<
name|_A1
operator|>
operator|::
name|value
operator|&&
name|std
operator|::
name|is_arithmetic
operator|<
name|_A2
operator|>
operator|::
name|value
operator|,
name|std
operator|::
name|__promote
operator|<
name|_A1
operator|,
name|_A2
operator|>
expr|>
operator|::
name|type
name|atan2
argument_list|(
argument|_A1 __lcpp_y
argument_list|,
argument|_A2 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
typedef|typedef
name|typename
name|std
operator|::
name|__promote
operator|<
name|_A1
operator|,
name|_A2
operator|>
operator|::
name|type
name|__result_type
expr_stmt|;
name|static_assert
argument_list|(
operator|(
operator|!
operator|(
name|std
operator|::
name|is_same
operator|<
name|_A1
operator|,
name|__result_type
operator|>
operator|::
name|value
operator|&&
name|std
operator|::
name|is_same
operator|<
name|_A2
operator|,
name|__result_type
operator|>
operator|::
name|value
operator|)
operator|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|atan2
argument_list|(
operator|(
name|__result_type
operator|)
name|__lcpp_y
argument_list|,
operator|(
name|__result_type
operator|)
name|__lcpp_x
argument_list|)
return|;
end_return

begin_comment
unit|}
comment|// ceil
end_comment

begin_if
if|#
directive|if
operator|!
operator|(
name|defined
argument_list|(
name|_LIBCPP_MSVCRT
argument_list|)
operator|||
name|defined
argument_list|(
name|_AIX
argument_list|)
operator|)
end_if

begin_function
unit|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|ceil
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|ceilf
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|ceil
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|ceill
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|ceil
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|ceil
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// cos
end_comment

begin_if
if|#
directive|if
operator|!
operator|(
name|defined
argument_list|(
name|_LIBCPP_MSVCRT
argument_list|)
operator|||
name|defined
argument_list|(
name|_AIX
argument_list|)
operator|)
end_if

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|cos
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|cosf
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|cos
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|cosl
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|cos
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|cos
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// cosh
end_comment

begin_if
if|#
directive|if
operator|!
operator|(
name|defined
argument_list|(
name|_LIBCPP_MSVCRT
argument_list|)
operator|||
name|defined
argument_list|(
name|_AIX
argument_list|)
operator|)
end_if

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|cosh
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|coshf
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|cosh
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|coshl
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|cosh
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|cosh
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// exp
end_comment

begin_if
if|#
directive|if
operator|!
operator|(
name|defined
argument_list|(
name|_LIBCPP_MSVCRT
argument_list|)
operator|||
name|defined
argument_list|(
name|_AIX
argument_list|)
operator|)
end_if

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|exp
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|expf
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|exp
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|expl
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|exp
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|exp
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// fabs
end_comment

begin_if
if|#
directive|if
operator|!
operator|(
name|defined
argument_list|(
name|_LIBCPP_MSVCRT
argument_list|)
operator|||
name|defined
argument_list|(
name|_AIX
argument_list|)
operator|)
end_if

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|fabs
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|fabsf
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|fabs
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|fabsl
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|fabs
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|fabs
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// floor
end_comment

begin_if
if|#
directive|if
operator|!
operator|(
name|defined
argument_list|(
name|_LIBCPP_MSVCRT
argument_list|)
operator|||
name|defined
argument_list|(
name|_AIX
argument_list|)
operator|)
end_if

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|floor
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|floorf
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|floor
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|floorl
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|floor
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|floor
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// fmod
end_comment

begin_if
if|#
directive|if
operator|!
operator|(
name|defined
argument_list|(
name|_LIBCPP_MSVCRT
argument_list|)
operator|||
name|defined
argument_list|(
name|_AIX
argument_list|)
operator|)
end_if

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|fmod
parameter_list|(
name|float
name|__lcpp_x
parameter_list|,
name|float
name|__lcpp_y
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|fmodf
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|fmod
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|,
name|long
name|double
name|__lcpp_y
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|fmodl
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|,
name|class
name|_A2
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|__lazy_enable_if
operator|<
name|std
operator|::
name|is_arithmetic
operator|<
name|_A1
operator|>
operator|::
name|value
operator|&&
name|std
operator|::
name|is_arithmetic
operator|<
name|_A2
operator|>
operator|::
name|value
operator|,
name|std
operator|::
name|__promote
operator|<
name|_A1
operator|,
name|_A2
operator|>
expr|>
operator|::
name|type
name|fmod
argument_list|(
argument|_A1 __lcpp_x
argument_list|,
argument|_A2 __lcpp_y
argument_list|)
name|_NOEXCEPT
block|{
typedef|typedef
name|typename
name|std
operator|::
name|__promote
operator|<
name|_A1
operator|,
name|_A2
operator|>
operator|::
name|type
name|__result_type
expr_stmt|;
name|static_assert
argument_list|(
operator|(
operator|!
operator|(
name|std
operator|::
name|is_same
operator|<
name|_A1
operator|,
name|__result_type
operator|>
operator|::
name|value
operator|&&
name|std
operator|::
name|is_same
operator|<
name|_A2
operator|,
name|__result_type
operator|>
operator|::
name|value
operator|)
operator|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|fmod
argument_list|(
operator|(
name|__result_type
operator|)
name|__lcpp_x
argument_list|,
operator|(
name|__result_type
operator|)
name|__lcpp_y
argument_list|)
return|;
end_return

begin_comment
unit|}
comment|// frexp
end_comment

begin_if
if|#
directive|if
operator|!
operator|(
name|defined
argument_list|(
name|_LIBCPP_MSVCRT
argument_list|)
operator|||
name|defined
argument_list|(
name|_AIX
argument_list|)
operator|)
end_if

begin_function
unit|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|frexp
parameter_list|(
name|float
name|__lcpp_x
parameter_list|,
name|int
modifier|*
name|__lcpp_e
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|frexpf
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_e
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|frexp
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|,
name|int
modifier|*
name|__lcpp_e
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|frexpl
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_e
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|frexp
argument_list|(
argument|_A1 __lcpp_x
argument_list|,
argument|int* __lcpp_e
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|frexp
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|,
name|__lcpp_e
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// ldexp
end_comment

begin_if
if|#
directive|if
operator|!
operator|(
name|defined
argument_list|(
name|_LIBCPP_MSVCRT
argument_list|)
operator|||
name|defined
argument_list|(
name|_AIX
argument_list|)
operator|)
end_if

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|ldexp
parameter_list|(
name|float
name|__lcpp_x
parameter_list|,
name|int
name|__lcpp_e
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|ldexpf
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_e
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|ldexp
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|,
name|int
name|__lcpp_e
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|ldexpl
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_e
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|ldexp
argument_list|(
argument|_A1 __lcpp_x
argument_list|,
argument|int __lcpp_e
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|ldexp
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|,
name|__lcpp_e
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// log
end_comment

begin_if
if|#
directive|if
operator|!
operator|(
name|defined
argument_list|(
name|_LIBCPP_MSVCRT
argument_list|)
operator|||
name|defined
argument_list|(
name|_AIX
argument_list|)
operator|)
end_if

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|log
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|logf
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|log
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|logl
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|log
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|log
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// log10
end_comment

begin_if
if|#
directive|if
operator|!
operator|(
name|defined
argument_list|(
name|_LIBCPP_MSVCRT
argument_list|)
operator|||
name|defined
argument_list|(
name|_AIX
argument_list|)
operator|)
end_if

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|log10
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|log10f
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|log10
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|log10l
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|log10
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|log10
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// modf
end_comment

begin_if
if|#
directive|if
operator|!
operator|(
name|defined
argument_list|(
name|_LIBCPP_MSVCRT
argument_list|)
operator|||
name|defined
argument_list|(
name|_AIX
argument_list|)
operator|)
end_if

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|modf
parameter_list|(
name|float
name|__lcpp_x
parameter_list|,
name|float
modifier|*
name|__lcpp_y
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|modff
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|modf
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|,
name|long
name|double
modifier|*
name|__lcpp_y
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|modfl
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// pow
end_comment

begin_if
if|#
directive|if
operator|!
operator|(
name|defined
argument_list|(
name|_LIBCPP_MSVCRT
argument_list|)
operator|||
name|defined
argument_list|(
name|_AIX
argument_list|)
operator|)
end_if

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|pow
parameter_list|(
name|float
name|__lcpp_x
parameter_list|,
name|float
name|__lcpp_y
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|powf
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|pow
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|,
name|long
name|double
name|__lcpp_y
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|powl
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|,
name|class
name|_A2
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|__lazy_enable_if
operator|<
name|std
operator|::
name|is_arithmetic
operator|<
name|_A1
operator|>
operator|::
name|value
operator|&&
name|std
operator|::
name|is_arithmetic
operator|<
name|_A2
operator|>
operator|::
name|value
operator|,
name|std
operator|::
name|__promote
operator|<
name|_A1
operator|,
name|_A2
operator|>
expr|>
operator|::
name|type
name|pow
argument_list|(
argument|_A1 __lcpp_x
argument_list|,
argument|_A2 __lcpp_y
argument_list|)
name|_NOEXCEPT
block|{
typedef|typedef
name|typename
name|std
operator|::
name|__promote
operator|<
name|_A1
operator|,
name|_A2
operator|>
operator|::
name|type
name|__result_type
expr_stmt|;
name|static_assert
argument_list|(
operator|(
operator|!
operator|(
name|std
operator|::
name|is_same
operator|<
name|_A1
operator|,
name|__result_type
operator|>
operator|::
name|value
operator|&&
name|std
operator|::
name|is_same
operator|<
name|_A2
operator|,
name|__result_type
operator|>
operator|::
name|value
operator|)
operator|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|pow
argument_list|(
operator|(
name|__result_type
operator|)
name|__lcpp_x
argument_list|,
operator|(
name|__result_type
operator|)
name|__lcpp_y
argument_list|)
return|;
end_return

begin_comment
unit|}
comment|// sin
end_comment

begin_if
if|#
directive|if
operator|!
operator|(
name|defined
argument_list|(
name|_LIBCPP_MSVCRT
argument_list|)
operator|||
name|defined
argument_list|(
name|_AIX
argument_list|)
operator|)
end_if

begin_function
unit|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|sin
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|sinf
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|sin
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|sinl
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|sin
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|sin
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// sinh
end_comment

begin_if
if|#
directive|if
operator|!
operator|(
name|defined
argument_list|(
name|_LIBCPP_MSVCRT
argument_list|)
operator|||
name|defined
argument_list|(
name|_AIX
argument_list|)
operator|)
end_if

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|sinh
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|sinhf
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|sinh
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|sinhl
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|sinh
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|sinh
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// sqrt
end_comment

begin_if
if|#
directive|if
operator|!
operator|(
name|defined
argument_list|(
name|_LIBCPP_MSVCRT
argument_list|)
operator|||
name|defined
argument_list|(
name|_AIX
argument_list|)
operator|)
end_if

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|sqrt
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|sqrtf
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|sqrt
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|sqrtl
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// __sun__
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|sqrt
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|sqrt
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|__sun__
end_ifndef

begin_comment
comment|// tan
end_comment

begin_if
if|#
directive|if
operator|!
operator|(
name|defined
argument_list|(
name|_LIBCPP_MSVCRT
argument_list|)
operator|||
name|defined
argument_list|(
name|_AIX
argument_list|)
operator|)
end_if

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|tan
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|tanf
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|tan
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|tanl
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|tan
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|tan
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// tanh
end_comment

begin_if
if|#
directive|if
operator|!
operator|(
name|defined
argument_list|(
name|_LIBCPP_MSVCRT
argument_list|)
operator|||
name|defined
argument_list|(
name|_AIX
argument_list|)
operator|)
end_if

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|tanh
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|tanhf
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|tanh
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|tanhl
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|tanh
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|tanh
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// acosh
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LIBCPP_MSVCRT
end_ifndef

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|acosh
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|acoshf
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|acosh
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|acoshl
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|acosh
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|acosh
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// asinh
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LIBCPP_MSVCRT
end_ifndef

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|asinh
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|asinhf
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|asinh
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|asinhl
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|asinh
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|asinh
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// atanh
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LIBCPP_MSVCRT
end_ifndef

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|atanh
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|atanhf
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|atanh
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|atanhl
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|atanh
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|atanh
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// cbrt
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LIBCPP_MSVCRT
end_ifndef

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|cbrt
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|cbrtf
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|cbrt
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|cbrtl
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|cbrt
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|cbrt
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// copysign
end_comment

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_VC_CRT_MAJOR_VERSION
argument_list|)
operator|||
operator|(
name|_VC_CRT_MAJOR_VERSION
operator|<
literal|12
operator|)
end_if

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|copysign
parameter_list|(
name|float
name|__lcpp_x
parameter_list|,
name|float
name|__lcpp_y
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|copysignf
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|copysign
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|,
name|long
name|double
name|__lcpp_y
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|copysignl
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|,
name|class
name|_A2
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|__lazy_enable_if
operator|<
name|std
operator|::
name|is_arithmetic
operator|<
name|_A1
operator|>
operator|::
name|value
operator|&&
name|std
operator|::
name|is_arithmetic
operator|<
name|_A2
operator|>
operator|::
name|value
operator|,
name|std
operator|::
name|__promote
operator|<
name|_A1
operator|,
name|_A2
operator|>
expr|>
operator|::
name|type
name|copysign
argument_list|(
argument|_A1 __lcpp_x
argument_list|,
argument|_A2 __lcpp_y
argument_list|)
name|_NOEXCEPT
block|{
typedef|typedef
name|typename
name|std
operator|::
name|__promote
operator|<
name|_A1
operator|,
name|_A2
operator|>
operator|::
name|type
name|__result_type
expr_stmt|;
name|static_assert
argument_list|(
operator|(
operator|!
operator|(
name|std
operator|::
name|is_same
operator|<
name|_A1
operator|,
name|__result_type
operator|>
operator|::
name|value
operator|&&
name|std
operator|::
name|is_same
operator|<
name|_A2
operator|,
name|__result_type
operator|>
operator|::
name|value
operator|)
operator|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|copysign
argument_list|(
operator|(
name|__result_type
operator|)
name|__lcpp_x
argument_list|,
operator|(
name|__result_type
operator|)
name|__lcpp_y
argument_list|)
return|;
end_return

begin_ifndef
unit|}
ifndef|#
directive|ifndef
name|_LIBCPP_MSVCRT
end_ifndef

begin_comment
comment|// erf
end_comment

begin_function
unit|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|erf
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|erff
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|erf
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|erfl
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|erf
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|erf
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// erfc
end_comment

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|erfc
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|erfcf
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|erfc
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|erfcl
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|erfc
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|erfc
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// exp2
end_comment

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|exp2
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|exp2f
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|exp2
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|exp2l
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|exp2
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|exp2
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// expm1
end_comment

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|expm1
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|expm1f
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|expm1
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|expm1l
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|expm1
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|expm1
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// fdim
end_comment

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|fdim
parameter_list|(
name|float
name|__lcpp_x
parameter_list|,
name|float
name|__lcpp_y
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|fdimf
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|fdim
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|,
name|long
name|double
name|__lcpp_y
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|fdiml
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|,
name|class
name|_A2
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|__lazy_enable_if
operator|<
name|std
operator|::
name|is_arithmetic
operator|<
name|_A1
operator|>
operator|::
name|value
operator|&&
name|std
operator|::
name|is_arithmetic
operator|<
name|_A2
operator|>
operator|::
name|value
operator|,
name|std
operator|::
name|__promote
operator|<
name|_A1
operator|,
name|_A2
operator|>
expr|>
operator|::
name|type
name|fdim
argument_list|(
argument|_A1 __lcpp_x
argument_list|,
argument|_A2 __lcpp_y
argument_list|)
name|_NOEXCEPT
block|{
typedef|typedef
name|typename
name|std
operator|::
name|__promote
operator|<
name|_A1
operator|,
name|_A2
operator|>
operator|::
name|type
name|__result_type
expr_stmt|;
name|static_assert
argument_list|(
operator|(
operator|!
operator|(
name|std
operator|::
name|is_same
operator|<
name|_A1
operator|,
name|__result_type
operator|>
operator|::
name|value
operator|&&
name|std
operator|::
name|is_same
operator|<
name|_A2
operator|,
name|__result_type
operator|>
operator|::
name|value
operator|)
operator|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|fdim
argument_list|(
operator|(
name|__result_type
operator|)
name|__lcpp_x
argument_list|,
operator|(
name|__result_type
operator|)
name|__lcpp_y
argument_list|)
return|;
end_return

begin_comment
unit|}
comment|// fma
end_comment

begin_function
unit|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|fma
parameter_list|(
name|float
name|__lcpp_x
parameter_list|,
name|float
name|__lcpp_y
parameter_list|,
name|float
name|__lcpp_z
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|fmaf
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|,
name|__lcpp_z
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|fma
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|,
name|long
name|double
name|__lcpp_y
parameter_list|,
name|long
name|double
name|__lcpp_z
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|fmal
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|,
name|__lcpp_z
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|,
name|class
name|_A2
operator|,
name|class
name|_A3
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|__lazy_enable_if
operator|<
name|std
operator|::
name|is_arithmetic
operator|<
name|_A1
operator|>
operator|::
name|value
operator|&&
name|std
operator|::
name|is_arithmetic
operator|<
name|_A2
operator|>
operator|::
name|value
operator|&&
name|std
operator|::
name|is_arithmetic
operator|<
name|_A3
operator|>
operator|::
name|value
operator|,
name|std
operator|::
name|__promote
operator|<
name|_A1
operator|,
name|_A2
operator|,
name|_A3
operator|>
expr|>
operator|::
name|type
name|fma
argument_list|(
argument|_A1 __lcpp_x
argument_list|,
argument|_A2 __lcpp_y
argument_list|,
argument|_A3 __lcpp_z
argument_list|)
name|_NOEXCEPT
block|{
typedef|typedef
name|typename
name|std
operator|::
name|__promote
operator|<
name|_A1
operator|,
name|_A2
operator|,
name|_A3
operator|>
operator|::
name|type
name|__result_type
expr_stmt|;
name|static_assert
argument_list|(
operator|(
operator|!
operator|(
name|std
operator|::
name|is_same
operator|<
name|_A1
operator|,
name|__result_type
operator|>
operator|::
name|value
operator|&&
name|std
operator|::
name|is_same
operator|<
name|_A2
operator|,
name|__result_type
operator|>
operator|::
name|value
operator|&&
name|std
operator|::
name|is_same
operator|<
name|_A3
operator|,
name|__result_type
operator|>
operator|::
name|value
operator|)
operator|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|fma
argument_list|(
operator|(
name|__result_type
operator|)
name|__lcpp_x
argument_list|,
operator|(
name|__result_type
operator|)
name|__lcpp_y
argument_list|,
operator|(
name|__result_type
operator|)
name|__lcpp_z
argument_list|)
return|;
end_return

begin_comment
unit|}
comment|// fmax
end_comment

begin_function
unit|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|fmax
parameter_list|(
name|float
name|__lcpp_x
parameter_list|,
name|float
name|__lcpp_y
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|fmaxf
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|fmax
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|,
name|long
name|double
name|__lcpp_y
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|fmaxl
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|,
name|class
name|_A2
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|__lazy_enable_if
operator|<
name|std
operator|::
name|is_arithmetic
operator|<
name|_A1
operator|>
operator|::
name|value
operator|&&
name|std
operator|::
name|is_arithmetic
operator|<
name|_A2
operator|>
operator|::
name|value
operator|,
name|std
operator|::
name|__promote
operator|<
name|_A1
operator|,
name|_A2
operator|>
expr|>
operator|::
name|type
name|fmax
argument_list|(
argument|_A1 __lcpp_x
argument_list|,
argument|_A2 __lcpp_y
argument_list|)
name|_NOEXCEPT
block|{
typedef|typedef
name|typename
name|std
operator|::
name|__promote
operator|<
name|_A1
operator|,
name|_A2
operator|>
operator|::
name|type
name|__result_type
expr_stmt|;
name|static_assert
argument_list|(
operator|(
operator|!
operator|(
name|std
operator|::
name|is_same
operator|<
name|_A1
operator|,
name|__result_type
operator|>
operator|::
name|value
operator|&&
name|std
operator|::
name|is_same
operator|<
name|_A2
operator|,
name|__result_type
operator|>
operator|::
name|value
operator|)
operator|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|fmax
argument_list|(
operator|(
name|__result_type
operator|)
name|__lcpp_x
argument_list|,
operator|(
name|__result_type
operator|)
name|__lcpp_y
argument_list|)
return|;
end_return

begin_comment
unit|}
comment|// fmin
end_comment

begin_function
unit|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|fmin
parameter_list|(
name|float
name|__lcpp_x
parameter_list|,
name|float
name|__lcpp_y
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|fminf
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|fmin
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|,
name|long
name|double
name|__lcpp_y
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|fminl
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|,
name|class
name|_A2
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|__lazy_enable_if
operator|<
name|std
operator|::
name|is_arithmetic
operator|<
name|_A1
operator|>
operator|::
name|value
operator|&&
name|std
operator|::
name|is_arithmetic
operator|<
name|_A2
operator|>
operator|::
name|value
operator|,
name|std
operator|::
name|__promote
operator|<
name|_A1
operator|,
name|_A2
operator|>
expr|>
operator|::
name|type
name|fmin
argument_list|(
argument|_A1 __lcpp_x
argument_list|,
argument|_A2 __lcpp_y
argument_list|)
name|_NOEXCEPT
block|{
typedef|typedef
name|typename
name|std
operator|::
name|__promote
operator|<
name|_A1
operator|,
name|_A2
operator|>
operator|::
name|type
name|__result_type
expr_stmt|;
name|static_assert
argument_list|(
operator|(
operator|!
operator|(
name|std
operator|::
name|is_same
operator|<
name|_A1
operator|,
name|__result_type
operator|>
operator|::
name|value
operator|&&
name|std
operator|::
name|is_same
operator|<
name|_A2
operator|,
name|__result_type
operator|>
operator|::
name|value
operator|)
operator|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|fmin
argument_list|(
operator|(
name|__result_type
operator|)
name|__lcpp_x
argument_list|,
operator|(
name|__result_type
operator|)
name|__lcpp_y
argument_list|)
return|;
end_return

begin_comment
unit|}
comment|// hypot
end_comment

begin_function
unit|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|hypot
parameter_list|(
name|float
name|__lcpp_x
parameter_list|,
name|float
name|__lcpp_y
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|hypotf
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|hypot
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|,
name|long
name|double
name|__lcpp_y
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|hypotl
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|,
name|class
name|_A2
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|__lazy_enable_if
operator|<
name|std
operator|::
name|is_arithmetic
operator|<
name|_A1
operator|>
operator|::
name|value
operator|&&
name|std
operator|::
name|is_arithmetic
operator|<
name|_A2
operator|>
operator|::
name|value
operator|,
name|std
operator|::
name|__promote
operator|<
name|_A1
operator|,
name|_A2
operator|>
expr|>
operator|::
name|type
name|hypot
argument_list|(
argument|_A1 __lcpp_x
argument_list|,
argument|_A2 __lcpp_y
argument_list|)
name|_NOEXCEPT
block|{
typedef|typedef
name|typename
name|std
operator|::
name|__promote
operator|<
name|_A1
operator|,
name|_A2
operator|>
operator|::
name|type
name|__result_type
expr_stmt|;
name|static_assert
argument_list|(
operator|(
operator|!
operator|(
name|std
operator|::
name|is_same
operator|<
name|_A1
operator|,
name|__result_type
operator|>
operator|::
name|value
operator|&&
name|std
operator|::
name|is_same
operator|<
name|_A2
operator|,
name|__result_type
operator|>
operator|::
name|value
operator|)
operator|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|hypot
argument_list|(
operator|(
name|__result_type
operator|)
name|__lcpp_x
argument_list|,
operator|(
name|__result_type
operator|)
name|__lcpp_y
argument_list|)
return|;
end_return

begin_comment
unit|}
comment|// ilogb
end_comment

begin_function
unit|inline
name|_LIBCPP_INLINE_VISIBILITY
name|int
name|ilogb
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|ilogbf
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|int
name|ilogb
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|ilogbl
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|int
operator|>
operator|::
name|type
name|ilogb
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|ilogb
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// lgamma
end_comment

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|lgamma
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|lgammaf
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|lgamma
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|lgammal
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|lgamma
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|lgamma
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// llrint
end_comment

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|long
name|llrint
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|llrintf
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|long
name|llrint
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|llrintl
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|long
name|long
operator|>
operator|::
name|type
name|llrint
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|llrint
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// llround
end_comment

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|long
name|llround
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|llroundf
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|long
name|llround
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|llroundl
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|long
name|long
operator|>
operator|::
name|type
name|llround
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|llround
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// log1p
end_comment

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|log1p
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|log1pf
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|log1p
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|log1pl
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|log1p
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|log1p
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// log2
end_comment

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|log2
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|log2f
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|log2
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|log2l
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|log2
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|log2
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// logb
end_comment

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|logb
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|logbf
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|logb
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|logbl
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|logb
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|logb
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// lrint
end_comment

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|lrint
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|lrintf
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|lrint
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|lrintl
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|long
operator|>
operator|::
name|type
name|lrint
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|lrint
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// lround
end_comment

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|lround
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|lroundf
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|lround
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|lroundl
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|long
operator|>
operator|::
name|type
name|lround
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|lround
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// nan
end_comment

begin_comment
comment|// nearbyint
end_comment

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|nearbyint
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|nearbyintf
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|nearbyint
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|nearbyintl
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|nearbyint
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|nearbyint
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// nextafter
end_comment

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|nextafter
parameter_list|(
name|float
name|__lcpp_x
parameter_list|,
name|float
name|__lcpp_y
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|nextafterf
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|nextafter
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|,
name|long
name|double
name|__lcpp_y
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|nextafterl
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|,
name|class
name|_A2
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|__lazy_enable_if
operator|<
name|std
operator|::
name|is_arithmetic
operator|<
name|_A1
operator|>
operator|::
name|value
operator|&&
name|std
operator|::
name|is_arithmetic
operator|<
name|_A2
operator|>
operator|::
name|value
operator|,
name|std
operator|::
name|__promote
operator|<
name|_A1
operator|,
name|_A2
operator|>
expr|>
operator|::
name|type
name|nextafter
argument_list|(
argument|_A1 __lcpp_x
argument_list|,
argument|_A2 __lcpp_y
argument_list|)
name|_NOEXCEPT
block|{
typedef|typedef
name|typename
name|std
operator|::
name|__promote
operator|<
name|_A1
operator|,
name|_A2
operator|>
operator|::
name|type
name|__result_type
expr_stmt|;
name|static_assert
argument_list|(
operator|(
operator|!
operator|(
name|std
operator|::
name|is_same
operator|<
name|_A1
operator|,
name|__result_type
operator|>
operator|::
name|value
operator|&&
name|std
operator|::
name|is_same
operator|<
name|_A2
operator|,
name|__result_type
operator|>
operator|::
name|value
operator|)
operator|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|nextafter
argument_list|(
operator|(
name|__result_type
operator|)
name|__lcpp_x
argument_list|,
operator|(
name|__result_type
operator|)
name|__lcpp_y
argument_list|)
return|;
end_return

begin_comment
unit|}
comment|// nexttoward
end_comment

begin_function
unit|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|nexttoward
parameter_list|(
name|float
name|__lcpp_x
parameter_list|,
name|long
name|double
name|__lcpp_y
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|nexttowardf
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|nexttoward
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|,
name|long
name|double
name|__lcpp_y
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|nexttowardl
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|nexttoward
argument_list|(
argument|_A1 __lcpp_x
argument_list|,
argument|long double __lcpp_y
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|nexttoward
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// remainder
end_comment

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|remainder
parameter_list|(
name|float
name|__lcpp_x
parameter_list|,
name|float
name|__lcpp_y
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|remainderf
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|remainder
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|,
name|long
name|double
name|__lcpp_y
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|remainderl
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|,
name|class
name|_A2
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|__lazy_enable_if
operator|<
name|std
operator|::
name|is_arithmetic
operator|<
name|_A1
operator|>
operator|::
name|value
operator|&&
name|std
operator|::
name|is_arithmetic
operator|<
name|_A2
operator|>
operator|::
name|value
operator|,
name|std
operator|::
name|__promote
operator|<
name|_A1
operator|,
name|_A2
operator|>
expr|>
operator|::
name|type
name|remainder
argument_list|(
argument|_A1 __lcpp_x
argument_list|,
argument|_A2 __lcpp_y
argument_list|)
name|_NOEXCEPT
block|{
typedef|typedef
name|typename
name|std
operator|::
name|__promote
operator|<
name|_A1
operator|,
name|_A2
operator|>
operator|::
name|type
name|__result_type
expr_stmt|;
name|static_assert
argument_list|(
operator|(
operator|!
operator|(
name|std
operator|::
name|is_same
operator|<
name|_A1
operator|,
name|__result_type
operator|>
operator|::
name|value
operator|&&
name|std
operator|::
name|is_same
operator|<
name|_A2
operator|,
name|__result_type
operator|>
operator|::
name|value
operator|)
operator|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|remainder
argument_list|(
operator|(
name|__result_type
operator|)
name|__lcpp_x
argument_list|,
operator|(
name|__result_type
operator|)
name|__lcpp_y
argument_list|)
return|;
end_return

begin_comment
unit|}
comment|// remquo
end_comment

begin_function
unit|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|remquo
parameter_list|(
name|float
name|__lcpp_x
parameter_list|,
name|float
name|__lcpp_y
parameter_list|,
name|int
modifier|*
name|__lcpp_z
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|remquof
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|,
name|__lcpp_z
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|remquo
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|,
name|long
name|double
name|__lcpp_y
parameter_list|,
name|int
modifier|*
name|__lcpp_z
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|remquol
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|,
name|__lcpp_z
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|,
name|class
name|_A2
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|__lazy_enable_if
operator|<
name|std
operator|::
name|is_arithmetic
operator|<
name|_A1
operator|>
operator|::
name|value
operator|&&
name|std
operator|::
name|is_arithmetic
operator|<
name|_A2
operator|>
operator|::
name|value
operator|,
name|std
operator|::
name|__promote
operator|<
name|_A1
operator|,
name|_A2
operator|>
expr|>
operator|::
name|type
name|remquo
argument_list|(
argument|_A1 __lcpp_x
argument_list|,
argument|_A2 __lcpp_y
argument_list|,
argument|int* __lcpp_z
argument_list|)
name|_NOEXCEPT
block|{
typedef|typedef
name|typename
name|std
operator|::
name|__promote
operator|<
name|_A1
operator|,
name|_A2
operator|>
operator|::
name|type
name|__result_type
expr_stmt|;
name|static_assert
argument_list|(
operator|(
operator|!
operator|(
name|std
operator|::
name|is_same
operator|<
name|_A1
operator|,
name|__result_type
operator|>
operator|::
name|value
operator|&&
name|std
operator|::
name|is_same
operator|<
name|_A2
operator|,
name|__result_type
operator|>
operator|::
name|value
operator|)
operator|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|remquo
argument_list|(
operator|(
name|__result_type
operator|)
name|__lcpp_x
argument_list|,
operator|(
name|__result_type
operator|)
name|__lcpp_y
argument_list|,
name|__lcpp_z
argument_list|)
return|;
end_return

begin_comment
unit|}
comment|// rint
end_comment

begin_function
unit|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|rint
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|rintf
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|rint
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|rintl
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|rint
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|rint
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// round
end_comment

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|round
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|roundf
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|round
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|roundl
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|round
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|round
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// scalbln
end_comment

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|scalbln
parameter_list|(
name|float
name|__lcpp_x
parameter_list|,
name|long
name|__lcpp_y
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|scalblnf
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|scalbln
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|,
name|long
name|__lcpp_y
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|scalblnl
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|scalbln
argument_list|(
argument|_A1 __lcpp_x
argument_list|,
argument|long __lcpp_y
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|scalbln
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// scalbn
end_comment

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|scalbn
parameter_list|(
name|float
name|__lcpp_x
parameter_list|,
name|int
name|__lcpp_y
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|scalbnf
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|scalbn
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|,
name|int
name|__lcpp_y
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|scalbnl
argument_list|(
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|scalbn
argument_list|(
argument|_A1 __lcpp_x
argument_list|,
argument|int __lcpp_y
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|scalbn
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|,
name|__lcpp_y
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// tgamma
end_comment

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|tgamma
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|tgammaf
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|tgamma
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|tgammal
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|tgamma
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|tgamma
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// trunc
end_comment

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|float
name|trunc
parameter_list|(
name|float
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|truncf
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|long
name|double
name|trunc
parameter_list|(
name|long
name|double
name|__lcpp_x
parameter_list|)
function|_NOEXCEPT
block|{
return|return
name|truncl
argument_list|(
name|__lcpp_x
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_A1
operator|>
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|_A1
operator|>
operator|::
name|value
operator|,
name|double
operator|>
operator|::
name|type
name|trunc
argument_list|(
argument|_A1 __lcpp_x
argument_list|)
name|_NOEXCEPT
block|{
return|return
name|trunc
argument_list|(
operator|(
name|double
operator|)
name|__lcpp_x
argument_list|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// !_LIBCPP_MSVCRT
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// __sun__
end_comment

begin_comment
unit|}
comment|// extern "C++"
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// __cplusplus
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// _LIBCPP_MATH_H
end_comment

end_unit

