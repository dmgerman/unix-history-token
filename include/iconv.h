begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$FreeBSD$	*/
end_comment

begin_comment
comment|/*	$NetBSD: iconv.h,v 1.6 2005/02/03 04:39:32 perry Exp $	*/
end_comment

begin_comment
comment|/*-  * Copyright (c) 2003 Citrus Project,  * Copyright (c) 2009, 2010 Gabor Kovesdan<gabor@FreeBSD.org>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_ICONV_H_
end_ifndef

begin_define
define|#
directive|define
name|_ICONV_H_
end_define

begin_include
include|#
directive|include
file|<sys/cdefs.h>
end_include

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<wchar.h>
end_include

begin_include
include|#
directive|include
file|<sys/cdefs.h>
end_include

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_typedef
typedef|typedef
name|bool
name|__iconv_bool
typedef|;
end_typedef

begin_elif
elif|#
directive|elif
name|__STDC_VERSION__
operator|>=
literal|199901L
end_elif

begin_typedef
typedef|typedef
name|_Bool
name|__iconv_bool
typedef|;
end_typedef

begin_else
else|#
directive|else
end_else

begin_typedef
typedef|typedef
name|int
name|__iconv_bool
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_struct_decl
struct_decl|struct
name|__tag_iconv_t
struct_decl|;
end_struct_decl

begin_typedef
typedef|typedef
name|struct
name|__tag_iconv_t
modifier|*
name|iconv_t
typedef|;
end_typedef

begin_function_decl
name|__BEGIN_DECLS
name|iconv_t
name|iconv_open
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|iconv
parameter_list|(
name|iconv_t
parameter_list|,
name|char
modifier|*
modifier|*
name|__restrict
parameter_list|,
name|size_t
modifier|*
name|__restrict
parameter_list|,
name|char
modifier|*
modifier|*
name|__restrict
parameter_list|,
name|size_t
modifier|*
name|__restrict
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|iconv_close
parameter_list|(
name|iconv_t
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * non-portable interfaces for iconv  */
end_comment

begin_function_decl
name|int
name|__iconv_get_list
parameter_list|(
name|char
modifier|*
modifier|*
modifier|*
parameter_list|,
name|size_t
modifier|*
parameter_list|,
name|__iconv_bool
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|__iconv_free_list
parameter_list|(
name|char
modifier|*
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|__iconv
parameter_list|(
name|iconv_t
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|,
name|size_t
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|,
name|size_t
modifier|*
parameter_list|,
name|__uint32_t
parameter_list|,
name|size_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|__ICONV_F_HIDE_INVALID
value|0x0001
end_define

begin_comment
comment|/*  * GNU interfaces for iconv  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|void
modifier|*
name|spaceholder
index|[
literal|64
index|]
decl_stmt|;
block|}
name|iconv_allocation_t
typedef|;
end_typedef

begin_function_decl
name|int
name|iconv_open_into
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|iconv_allocation_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|iconv_set_relocation_prefix
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * iconvctl() request macros  */
end_comment

begin_define
define|#
directive|define
name|ICONV_TRIVIALP
value|0
end_define

begin_define
define|#
directive|define
name|ICONV_GET_TRANSLITERATE
value|1
end_define

begin_define
define|#
directive|define
name|ICONV_SET_TRANSLITERATE
value|2
end_define

begin_define
define|#
directive|define
name|ICONV_GET_DISCARD_ILSEQ
value|3
end_define

begin_define
define|#
directive|define
name|ICONV_SET_DISCARD_ILSEQ
value|4
end_define

begin_define
define|#
directive|define
name|ICONV_SET_HOOKS
value|5
end_define

begin_define
define|#
directive|define
name|ICONV_SET_FALLBACKS
value|6
end_define

begin_define
define|#
directive|define
name|ICONV_GET_ILSEQ_INVALID
value|128
end_define

begin_define
define|#
directive|define
name|ICONV_SET_ILSEQ_INVALID
value|129
end_define

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|iconv_unicode_char_hook
function_decl|)
parameter_list|(
name|unsigned
name|int
name|mbr
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|iconv_wide_char_hook
function_decl|)
parameter_list|(
name|wchar_t
name|wc
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
end_typedef

begin_struct
struct|struct
name|iconv_hooks
block|{
name|iconv_unicode_char_hook
name|uc_hook
decl_stmt|;
name|iconv_wide_char_hook
name|wc_hook
decl_stmt|;
name|void
modifier|*
name|data
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Fallbacks aren't supported but type definitions are provided for  * source compatibility.  */
end_comment

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|iconv_unicode_mb_to_uc_fallback
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|void
function_decl|(
modifier|*
name|write_replacement
function_decl|)
parameter_list|(
specifier|const
name|unsigned
name|int
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|iconv_unicode_uc_to_mb_fallback
function_decl|)
parameter_list|(
name|unsigned
name|int
parameter_list|,
name|void
function_decl|(
modifier|*
name|write_replacement
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|iconv_wchar_mb_to_wc_fallback
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|void
function_decl|(
modifier|*
name|write_replacement
function_decl|)
parameter_list|(
specifier|const
name|wchar_t
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|iconv_wchar_wc_to_mb_fallback
function_decl|)
parameter_list|(
name|wchar_t
parameter_list|,
name|void
function_decl|(
modifier|*
name|write_replacement
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_struct
struct|struct
name|iconv_fallbacks
block|{
name|iconv_unicode_mb_to_uc_fallback
name|mb_to_uc_fallback
decl_stmt|;
name|iconv_unicode_uc_to_mb_fallback
name|uc_to_mb_fallback
decl_stmt|;
name|iconv_wchar_mb_to_wc_fallback
name|mb_to_wc_fallback
decl_stmt|;
name|iconv_wchar_wc_to_mb_fallback
name|wc_to_mb_fallback
decl_stmt|;
name|void
modifier|*
name|data
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|void
name|iconvlist
parameter_list|(
name|int
function_decl|(
modifier|*
name|do_one
function_decl|)
parameter_list|(
name|unsigned
name|int
parameter_list|,
specifier|const
name|char
modifier|*
specifier|const
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|iconv_canonicalize
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|iconvctl
parameter_list|(
name|iconv_t
parameter_list|,
name|int
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_macro
name|__END_DECLS
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_ICONV_H_ */
end_comment

end_unit

