begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// -*- C++ -*-
end_comment

begin_comment
comment|//===--------------------------- string.h ---------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LIBCPP_STRING_H
end_ifndef

begin_define
define|#
directive|define
name|_LIBCPP_STRING_H
end_define

begin_comment
comment|/*     string.h synopsis  Macros:      NULL  Types:      size_t  void* memcpy(void* restrict s1, const void* restrict s2, size_t n); void* memmove(void* s1, const void* s2, size_t n); char* strcpy (char* restrict s1, const char* restrict s2); char* strncpy(char* restrict s1, const char* restrict s2, size_t n); char* strcat (char* restrict s1, const char* restrict s2); char* strncat(char* restrict s1, const char* restrict s2, size_t n); int memcmp(const void* s1, const void* s2, size_t n); int strcmp (const char* s1, const char* s2); int strncmp(const char* s1, const char* s2, size_t n); int strcoll(const char* s1, const char* s2); size_t strxfrm(char* restrict s1, const char* restrict s2, size_t n); const void* memchr(const void* s, int c, size_t n);       void* memchr(      void* s, int c, size_t n); const char* strchr(const char* s, int c);       char* strchr(      char* s, int c); size_t strcspn(const char* s1, const char* s2); const char* strpbrk(const char* s1, const char* s2);       char* strpbrk(      char* s1, const char* s2); const char* strrchr(const char* s, int c);       char* strrchr(      char* s, int c); size_t strspn(const char* s1, const char* s2); const char* strstr(const char* s1, const char* s2);       char* strstr(      char* s1, const char* s2); char* strtok(char* restrict s1, const char* restrict s2); void* memset(void* s, int c, size_t n); char* strerror(int errnum); size_t strlen(const char* s);  */
end_comment

begin_include
include|#
directive|include
file|<__config>
end_include

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER
argument_list|)
end_if

begin_pragma
pragma|#
directive|pragma
name|GCC
name|system_header
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_empty
empty|#include_next<string.h>
end_empty

begin_comment
comment|// MSVCRT, GNU libc and its derivates may already have the correct prototype in
end_comment

begin_comment
comment|//<string.h>. This macro can be defined by users if their C library provides
end_comment

begin_comment
comment|// the right signature.
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__CORRECT_ISO_CPP_STRING_H_PROTO
argument_list|)
operator|||
name|defined
argument_list|(
name|_LIBCPP_MSVCRT
argument_list|)
operator|||
expr|\
name|defined
argument_list|(
name|__sun__
argument_list|)
operator|||
name|defined
argument_list|(
name|_STRING_H_CPLUSPLUS_98_CONFORMANCE_
argument_list|)
end_if

begin_define
define|#
directive|define
name|_LIBCPP_STRING_H_HAS_CONST_OVERLOADS
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|_LIBCPP_STRING_H_HAS_CONST_OVERLOADS
argument_list|)
operator|&&
name|defined
argument_list|(
name|_LIBCPP_PREFERRED_OVERLOAD
argument_list|)
end_if

begin_extern
extern|extern
literal|"C++"
block|{
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|char
modifier|*
name|__libcpp_strchr
parameter_list|(
specifier|const
name|char
modifier|*
name|__s
parameter_list|,
name|int
name|__c
parameter_list|)
block|{
return|return
operator|(
name|char
operator|*
operator|)
name|strchr
argument_list|(
name|__s
argument_list|,
name|__c
argument_list|)
return|;
block|}
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|_LIBCPP_PREFERRED_OVERLOAD
specifier|const
name|char
modifier|*
name|strchr
parameter_list|(
specifier|const
name|char
modifier|*
name|__s
parameter_list|,
name|int
name|__c
parameter_list|)
block|{
return|return
name|__libcpp_strchr
argument_list|(
name|__s
argument_list|,
name|__c
argument_list|)
return|;
block|}
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|_LIBCPP_PREFERRED_OVERLOAD
name|char
modifier|*
name|strchr
parameter_list|(
name|char
modifier|*
name|__s
parameter_list|,
name|int
name|__c
parameter_list|)
block|{
return|return
name|__libcpp_strchr
argument_list|(
name|__s
argument_list|,
name|__c
argument_list|)
return|;
block|}
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|char
modifier|*
name|__libcpp_strpbrk
parameter_list|(
specifier|const
name|char
modifier|*
name|__s1
parameter_list|,
specifier|const
name|char
modifier|*
name|__s2
parameter_list|)
block|{
return|return
operator|(
name|char
operator|*
operator|)
name|strpbrk
argument_list|(
name|__s1
argument_list|,
name|__s2
argument_list|)
return|;
block|}
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|_LIBCPP_PREFERRED_OVERLOAD
specifier|const
name|char
modifier|*
name|strpbrk
parameter_list|(
specifier|const
name|char
modifier|*
name|__s1
parameter_list|,
specifier|const
name|char
modifier|*
name|__s2
parameter_list|)
block|{
return|return
name|__libcpp_strpbrk
argument_list|(
name|__s1
argument_list|,
name|__s2
argument_list|)
return|;
block|}
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|_LIBCPP_PREFERRED_OVERLOAD
name|char
modifier|*
name|strpbrk
parameter_list|(
name|char
modifier|*
name|__s1
parameter_list|,
specifier|const
name|char
modifier|*
name|__s2
parameter_list|)
block|{
return|return
name|__libcpp_strpbrk
argument_list|(
name|__s1
argument_list|,
name|__s2
argument_list|)
return|;
block|}
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|char
modifier|*
name|__libcpp_strrchr
parameter_list|(
specifier|const
name|char
modifier|*
name|__s
parameter_list|,
name|int
name|__c
parameter_list|)
block|{
return|return
operator|(
name|char
operator|*
operator|)
name|strrchr
argument_list|(
name|__s
argument_list|,
name|__c
argument_list|)
return|;
block|}
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|_LIBCPP_PREFERRED_OVERLOAD
specifier|const
name|char
modifier|*
name|strrchr
parameter_list|(
specifier|const
name|char
modifier|*
name|__s
parameter_list|,
name|int
name|__c
parameter_list|)
block|{
return|return
name|__libcpp_strrchr
argument_list|(
name|__s
argument_list|,
name|__c
argument_list|)
return|;
block|}
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|_LIBCPP_PREFERRED_OVERLOAD
name|char
modifier|*
name|strrchr
parameter_list|(
name|char
modifier|*
name|__s
parameter_list|,
name|int
name|__c
parameter_list|)
block|{
return|return
name|__libcpp_strrchr
argument_list|(
name|__s
argument_list|,
name|__c
argument_list|)
return|;
block|}
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|void
modifier|*
name|__libcpp_memchr
parameter_list|(
specifier|const
name|void
modifier|*
name|__s
parameter_list|,
name|int
name|__c
parameter_list|,
name|size_t
name|__n
parameter_list|)
block|{
return|return
operator|(
name|void
operator|*
operator|)
name|memchr
argument_list|(
name|__s
argument_list|,
name|__c
argument_list|,
name|__n
argument_list|)
return|;
block|}
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|_LIBCPP_PREFERRED_OVERLOAD
specifier|const
name|void
modifier|*
name|memchr
parameter_list|(
specifier|const
name|void
modifier|*
name|__s
parameter_list|,
name|int
name|__c
parameter_list|,
name|size_t
name|__n
parameter_list|)
block|{
return|return
name|__libcpp_memchr
argument_list|(
name|__s
argument_list|,
name|__c
argument_list|,
name|__n
argument_list|)
return|;
block|}
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|_LIBCPP_PREFERRED_OVERLOAD
name|void
modifier|*
name|memchr
parameter_list|(
name|void
modifier|*
name|__s
parameter_list|,
name|int
name|__c
parameter_list|,
name|size_t
name|__n
parameter_list|)
block|{
return|return
name|__libcpp_memchr
argument_list|(
name|__s
argument_list|,
name|__c
argument_list|,
name|__n
argument_list|)
return|;
block|}
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|char
modifier|*
name|__libcpp_strstr
parameter_list|(
specifier|const
name|char
modifier|*
name|__s1
parameter_list|,
specifier|const
name|char
modifier|*
name|__s2
parameter_list|)
block|{
return|return
operator|(
name|char
operator|*
operator|)
name|strstr
argument_list|(
name|__s1
argument_list|,
name|__s2
argument_list|)
return|;
block|}
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|_LIBCPP_PREFERRED_OVERLOAD
specifier|const
name|char
modifier|*
name|strstr
parameter_list|(
specifier|const
name|char
modifier|*
name|__s1
parameter_list|,
specifier|const
name|char
modifier|*
name|__s2
parameter_list|)
block|{
return|return
name|__libcpp_strstr
argument_list|(
name|__s1
argument_list|,
name|__s2
argument_list|)
return|;
block|}
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|_LIBCPP_PREFERRED_OVERLOAD
name|char
modifier|*
name|strstr
parameter_list|(
name|char
modifier|*
name|__s1
parameter_list|,
specifier|const
name|char
modifier|*
name|__s2
parameter_list|)
block|{
return|return
name|__libcpp_strstr
argument_list|(
name|__s1
argument_list|,
name|__s2
argument_list|)
return|;
block|}
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// _LIBCPP_STRING_H
end_comment

end_unit

