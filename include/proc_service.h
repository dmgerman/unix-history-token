begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2004 David Xu<davidxu@freebsd.org>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *	This product includes software developed by the University of  *	California, Berkeley and its contributors.  * 4. Neither the name of the University nor the names of its contributors  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_PROC_SERVICE_H_
end_ifndef

begin_define
define|#
directive|define
name|_PROC_SERVICE_H_
end_define

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<sys/procfs.h>
end_include

begin_struct_decl
struct_decl|struct
name|ps_prochandle
struct_decl|;
end_struct_decl

begin_typedef
typedef|typedef
enum|enum
block|{
name|PS_OK
block|,
name|PS_ERR
block|,
name|PS_BADPID
block|,
name|PS_BADLID
block|,
name|PS_BADADDR
block|,
name|PS_NOSYM
block|,
name|PS_NOFREGS
block|}
name|ps_err_e
typedef|;
end_typedef

begin_comment
comment|/*  * Every program that links libthread_db must provide a set of process control  * primitives to access memory and registers in the target process, to start  * and to stop the target process, and to look up symbols in the target process.  */
end_comment

begin_if
if|#
directive|if
literal|0
end_if

begin_endif
unit|ps_err_e ps_pdmodel(struct ps_prochandle *ph, int *data_model);
endif|#
directive|endif
end_endif

begin_function_decl
name|ps_err_e
name|ps_pglobal_lookup
parameter_list|(
name|struct
name|ps_prochandle
modifier|*
name|ph
parameter_list|,
specifier|const
name|char
modifier|*
name|object_name
parameter_list|,
specifier|const
name|char
modifier|*
name|sym_name
parameter_list|,
name|psaddr_t
modifier|*
name|sym_addr
parameter_list|)
function_decl|;
end_function_decl

begin_if
if|#
directive|if
literal|0
end_if

begin_endif
unit|ps_err_e ps_pglobal_sym(struct ps_prochandle *ph, const char *object_name, 		const char *sym_name , ps_sym_t *sym); ps_err_e ps_pread(struct ps_prochandle *ph, psaddr_t addr, void *buf, 		size_t size); ps_err_e ps_pwrite(struct ps_prochandle *ph, psaddr_t addr, const void *buf, 		size_t size);
endif|#
directive|endif
end_endif

begin_function_decl
name|ps_err_e
name|ps_pdread
parameter_list|(
name|struct
name|ps_prochandle
modifier|*
name|ph
parameter_list|,
name|psaddr_t
name|addr
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ps_err_e
name|ps_pdwrite
parameter_list|(
name|struct
name|ps_prochandle
modifier|*
name|ph
parameter_list|,
name|psaddr_t
name|addr
parameter_list|,
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ps_err_e
name|ps_ptread
parameter_list|(
name|struct
name|ps_prochandle
modifier|*
name|ph
parameter_list|,
name|psaddr_t
name|addr
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ps_err_e
name|ps_ptwrite
parameter_list|(
name|struct
name|ps_prochandle
modifier|*
name|ph
parameter_list|,
name|psaddr_t
name|addr
parameter_list|,
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ps_err_e
name|ps_pstop
parameter_list|(
name|struct
name|ps_prochandle
modifier|*
name|ph
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ps_err_e
name|ps_pcontinue
parameter_list|(
name|struct
name|ps_prochandle
modifier|*
name|ph
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ps_err_e
name|ps_lstop
parameter_list|(
name|struct
name|ps_prochandle
modifier|*
name|ph
parameter_list|,
name|lwpid_t
name|lwpid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ps_err_e
name|ps_lcontinue
parameter_list|(
name|struct
name|ps_prochandle
modifier|*
name|ph
parameter_list|,
name|lwpid_t
name|lwpid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ps_err_e
name|ps_lgetregs
parameter_list|(
name|struct
name|ps_prochandle
modifier|*
name|ph
parameter_list|,
name|lwpid_t
name|lwpid
parameter_list|,
name|prgregset_t
name|gregset
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ps_err_e
name|ps_lsetregs
parameter_list|(
name|struct
name|ps_prochandle
modifier|*
name|ph
parameter_list|,
name|lwpid_t
name|lwpid
parameter_list|,
specifier|const
name|prgregset_t
name|gregset
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ps_err_e
name|ps_lgetfpregs
parameter_list|(
name|struct
name|ps_prochandle
modifier|*
name|ph
parameter_list|,
name|lwpid_t
name|lwpid
parameter_list|,
name|prfpregset_t
modifier|*
name|fpregset
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ps_err_e
name|ps_lsetfpregs
parameter_list|(
name|struct
name|ps_prochandle
modifier|*
name|ph
parameter_list|,
name|lwpid_t
name|lwpid
parameter_list|,
specifier|const
name|prfpregset_t
modifier|*
name|fpregset
parameter_list|)
function_decl|;
end_function_decl

begin_if
if|#
directive|if
literal|0
end_if

begin_endif
unit|ps_err_e ps_pauxv(struct ps_prochandle *ph, const auxv_t **auxp); ps_err_e ps_kill(struct ps_prochandle *ph, int sig); ps_err_e ps_lrolltoaddr(struct ps_prochandle *ph, lwpid_t lwpid, 		psaddr_t go_addr, psaddr_t stop_addr);
endif|#
directive|endif
end_endif

begin_function_decl
name|void
name|ps_plog
parameter_list|(
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|pid_t
name|ps_getpid
parameter_list|(
name|struct
name|ps_prochandle
modifier|*
name|ph
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

end_unit

