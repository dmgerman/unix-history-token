begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- lld/Driver/WinLinkModuleDef.h --------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|/// \brief Windows module definition file parser.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_DRIVER_WIN_LINK_MODULE_DEF_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_DRIVER_WIN_LINK_MODULE_DEF_H
end_define

begin_include
include|#
directive|include
file|"lld/Core/LLVM.h"
end_include

begin_include
include|#
directive|include
file|"lld/ReaderWriter/PECOFFLinkingContext.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/Optional.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Allocator.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|moduledef
block|{
name|enum
name|class
name|Kind
block|{
name|unknown
operator|,
name|eof
operator|,
name|identifier
operator|,
name|comma
operator|,
name|equal
operator|,
name|kw_base
operator|,
name|kw_data
operator|,
name|kw_exports
operator|,
name|kw_heapsize
operator|,
name|kw_library
operator|,
name|kw_name
operator|,
name|kw_noname
operator|,
name|kw_private
operator|,
name|kw_stacksize
operator|,
name|kw_version
operator|,
block|}
empty_stmt|;
name|class
name|Token
block|{
name|public
label|:
name|Token
argument_list|()
operator|:
name|_kind
argument_list|(
argument|Kind::unknown
argument_list|)
block|{}
name|Token
argument_list|(
argument|Kind kind
argument_list|,
argument|StringRef range
argument_list|)
operator|:
name|_kind
argument_list|(
name|kind
argument_list|)
operator|,
name|_range
argument_list|(
argument|range
argument_list|)
block|{}
name|Kind
name|_kind
expr_stmt|;
name|StringRef
name|_range
decl_stmt|;
block|}
empty_stmt|;
name|class
name|Lexer
block|{
name|public
label|:
name|explicit
name|Lexer
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|MemoryBuffer
operator|>
name|mb
argument_list|)
range|:
name|_buffer
argument_list|(
argument|mb->getBuffer()
argument_list|)
block|{
name|_sourceManager
operator|.
name|AddNewSourceBuffer
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|mb
argument_list|)
argument_list|,
name|llvm
operator|::
name|SMLoc
argument_list|()
argument_list|)
block|;   }
name|Token
name|lex
argument_list|()
decl_stmt|;
specifier|const
name|llvm
operator|::
name|SourceMgr
operator|&
name|getSourceMgr
argument_list|()
specifier|const
block|{
return|return
name|_sourceManager
return|;
block|}
name|private
label|:
name|StringRef
name|_buffer
decl_stmt|;
name|llvm
operator|::
name|SourceMgr
name|_sourceManager
expr_stmt|;
block|}
empty_stmt|;
name|class
name|Directive
block|{
name|public
label|:
name|enum
name|class
name|Kind
block|{
name|exports
operator|,
name|heapsize
operator|,
name|library
operator|,
name|name
operator|,
name|stacksize
operator|,
name|version
block|}
empty_stmt|;
name|Kind
name|getKind
argument_list|()
specifier|const
block|{
return|return
name|_kind
return|;
block|}
name|virtual
operator|~
name|Directive
argument_list|()
block|{}
name|protected
operator|:
name|explicit
name|Directive
argument_list|(
argument|Kind k
argument_list|)
operator|:
name|_kind
argument_list|(
argument|k
argument_list|)
block|{}
name|private
operator|:
name|Kind
name|_kind
expr_stmt|;
block|}
empty_stmt|;
name|class
name|Exports
range|:
name|public
name|Directive
block|{
name|public
operator|:
name|explicit
name|Exports
argument_list|(
specifier|const
name|std
operator|::
name|vector
operator|<
name|PECOFFLinkingContext
operator|::
name|ExportDesc
operator|>
operator|&
name|exports
argument_list|)
operator|:
name|Directive
argument_list|(
name|Kind
operator|::
name|exports
argument_list|)
block|,
name|_exports
argument_list|(
argument|exports
argument_list|)
block|{}
specifier|static
name|bool
name|classof
argument_list|(
argument|const Directive *dir
argument_list|)
block|{
return|return
name|dir
operator|->
name|getKind
argument_list|()
operator|==
name|Kind
operator|::
name|exports
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
name|PECOFFLinkingContext
operator|::
name|ExportDesc
operator|>
operator|&
name|getExports
argument_list|()
specifier|const
block|{
return|return
name|_exports
return|;
block|}
name|private
operator|:
specifier|const
name|std
operator|::
name|vector
operator|<
name|PECOFFLinkingContext
operator|::
name|ExportDesc
operator|>
name|_exports
block|; }
decl_stmt|;
name|template
operator|<
name|Directive
operator|::
name|Kind
name|kind
operator|>
name|class
name|MemorySize
operator|:
name|public
name|Directive
block|{
name|public
operator|:
name|MemorySize
argument_list|(
argument|uint64_t reserve
argument_list|,
argument|uint64_t commit
argument_list|)
operator|:
name|Directive
argument_list|(
name|kind
argument_list|)
block|,
name|_reserve
argument_list|(
name|reserve
argument_list|)
block|,
name|_commit
argument_list|(
argument|commit
argument_list|)
block|{}
specifier|static
name|bool
name|classof
argument_list|(
argument|const Directive *dir
argument_list|)
block|{
return|return
name|dir
operator|->
name|getKind
argument_list|()
operator|==
name|kind
return|;
block|}
name|uint64_t
name|getReserve
argument_list|()
specifier|const
block|{
return|return
name|_reserve
return|;
block|}
name|uint64_t
name|getCommit
argument_list|()
specifier|const
block|{
return|return
name|_commit
return|;
block|}
name|private
operator|:
specifier|const
name|uint64_t
name|_reserve
block|;
specifier|const
name|uint64_t
name|_commit
block|; }
expr_stmt|;
typedef|typedef
name|MemorySize
operator|<
name|Directive
operator|::
name|Kind
operator|::
name|heapsize
operator|>
name|Heapsize
expr_stmt|;
typedef|typedef
name|MemorySize
operator|<
name|Directive
operator|::
name|Kind
operator|::
name|stacksize
operator|>
name|Stacksize
expr_stmt|;
name|class
name|Name
range|:
name|public
name|Directive
block|{
name|public
operator|:
name|Name
argument_list|(
argument|StringRef outputPath
argument_list|,
argument|uint64_t baseaddr
argument_list|)
operator|:
name|Directive
argument_list|(
name|Kind
operator|::
name|name
argument_list|)
block|,
name|_outputPath
argument_list|(
name|outputPath
argument_list|)
block|,
name|_baseaddr
argument_list|(
argument|baseaddr
argument_list|)
block|{}
specifier|static
name|bool
name|classof
argument_list|(
argument|const Directive *dir
argument_list|)
block|{
return|return
name|dir
operator|->
name|getKind
argument_list|()
operator|==
name|Kind
operator|::
name|name
return|;
block|}
name|StringRef
name|getOutputPath
argument_list|()
specifier|const
block|{
return|return
name|_outputPath
return|;
block|}
name|uint64_t
name|getBaseAddress
argument_list|()
specifier|const
block|{
return|return
name|_baseaddr
return|;
block|}
name|private
operator|:
specifier|const
name|std
operator|::
name|string
name|_outputPath
block|;
specifier|const
name|uint64_t
name|_baseaddr
block|; }
decl_stmt|;
name|class
name|Library
range|:
name|public
name|Directive
block|{
name|public
operator|:
name|Library
argument_list|(
argument|StringRef name
argument_list|,
argument|uint64_t baseaddr
argument_list|)
operator|:
name|Directive
argument_list|(
name|Kind
operator|::
name|library
argument_list|)
block|,
name|_name
argument_list|(
name|name
argument_list|)
block|,
name|_baseaddr
argument_list|(
argument|baseaddr
argument_list|)
block|{}
specifier|static
name|bool
name|classof
argument_list|(
argument|const Directive *dir
argument_list|)
block|{
return|return
name|dir
operator|->
name|getKind
argument_list|()
operator|==
name|Kind
operator|::
name|library
return|;
block|}
name|StringRef
name|getName
argument_list|()
specifier|const
block|{
return|return
name|_name
return|;
block|}
name|uint64_t
name|getBaseAddress
argument_list|()
specifier|const
block|{
return|return
name|_baseaddr
return|;
block|}
name|private
operator|:
specifier|const
name|std
operator|::
name|string
name|_name
block|;
specifier|const
name|uint64_t
name|_baseaddr
block|; }
decl_stmt|;
name|class
name|Version
range|:
name|public
name|Directive
block|{
name|public
operator|:
name|Version
argument_list|(
argument|int major
argument_list|,
argument|int minor
argument_list|)
operator|:
name|Directive
argument_list|(
name|Kind
operator|::
name|version
argument_list|)
block|,
name|_major
argument_list|(
name|major
argument_list|)
block|,
name|_minor
argument_list|(
argument|minor
argument_list|)
block|{}
specifier|static
name|bool
name|classof
argument_list|(
argument|const Directive *dir
argument_list|)
block|{
return|return
name|dir
operator|->
name|getKind
argument_list|()
operator|==
name|Kind
operator|::
name|version
return|;
block|}
name|int
name|getMajorVersion
argument_list|()
specifier|const
block|{
return|return
name|_major
return|;
block|}
name|int
name|getMinorVersion
argument_list|()
specifier|const
block|{
return|return
name|_minor
return|;
block|}
name|private
operator|:
specifier|const
name|int
name|_major
block|;
specifier|const
name|int
name|_minor
block|; }
decl_stmt|;
name|class
name|Parser
block|{
name|public
label|:
name|Parser
argument_list|(
name|Lexer
operator|&
name|lex
argument_list|,
name|llvm
operator|::
name|BumpPtrAllocator
operator|&
name|alloc
argument_list|)
operator|:
name|_lex
argument_list|(
name|lex
argument_list|)
operator|,
name|_alloc
argument_list|(
argument|alloc
argument_list|)
block|{}
name|bool
name|parse
argument_list|(
name|std
operator|::
name|vector
operator|<
name|Directive
operator|*
operator|>
operator|&
name|ret
argument_list|)
expr_stmt|;
name|private
label|:
name|void
name|consumeToken
parameter_list|()
function_decl|;
name|bool
name|consumeTokenAsInt
parameter_list|(
name|uint64_t
modifier|&
name|result
parameter_list|)
function_decl|;
name|bool
name|expectAndConsume
parameter_list|(
name|Kind
name|kind
parameter_list|,
name|Twine
name|msg
parameter_list|)
function_decl|;
name|void
name|ungetToken
parameter_list|()
function_decl|;
name|void
name|error
parameter_list|(
specifier|const
name|Token
modifier|&
name|tok
parameter_list|,
name|Twine
name|msg
parameter_list|)
function_decl|;
name|bool
name|parseOne
parameter_list|(
name|Directive
modifier|*
modifier|&
name|dir
parameter_list|)
function_decl|;
name|bool
name|parseExport
argument_list|(
name|PECOFFLinkingContext
operator|::
name|ExportDesc
operator|&
name|result
argument_list|)
decl_stmt|;
name|bool
name|parseMemorySize
parameter_list|(
name|uint64_t
modifier|&
name|reserve
parameter_list|,
name|uint64_t
modifier|&
name|commit
parameter_list|)
function_decl|;
name|bool
name|parseName
argument_list|(
name|std
operator|::
name|string
operator|&
name|outfile
argument_list|,
name|uint64_t
operator|&
name|baseaddr
argument_list|)
decl_stmt|;
name|bool
name|parseVersion
parameter_list|(
name|int
modifier|&
name|major
parameter_list|,
name|int
modifier|&
name|minor
parameter_list|)
function_decl|;
name|Lexer
modifier|&
name|_lex
decl_stmt|;
name|llvm
operator|::
name|BumpPtrAllocator
operator|&
name|_alloc
expr_stmt|;
name|Token
name|_tok
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|Token
operator|>
name|_tokBuf
expr_stmt|;
block|}
empty_stmt|;
block|}
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

