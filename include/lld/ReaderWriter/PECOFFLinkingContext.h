begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- lld/ReaderWriter/PECOFFLinkingContext.h ----------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_READER_WRITER_PECOFF_LINKING_CONTEXT_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_READER_WRITER_PECOFF_LINKING_CONTEXT_H
end_define

begin_include
include|#
directive|include
file|"lld/Core/LinkingContext.h"
end_include

begin_include
include|#
directive|include
file|"lld/Core/Reader.h"
end_include

begin_include
include|#
directive|include
file|"lld/Core/Writer.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Allocator.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/COFF.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ErrorHandling.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/FileUtilities.h"
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_include
include|#
directive|include
file|<mutex>
end_include

begin_include
include|#
directive|include
file|<set>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_expr_stmt
name|using
name|llvm
operator|::
name|COFF
operator|::
name|MachineTypes
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|llvm
operator|::
name|COFF
operator|::
name|WindowsSubsystem
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|static
specifier|const
name|uint8_t
name|DEFAULT_DOS_STUB
index|[
literal|128
index|]
init|=
block|{
literal|'M'
block|,
literal|'Z'
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|namespace
name|lld
block|{
name|class
name|PECOFFLinkingContext
range|:
name|public
name|LinkingContext
block|{
name|public
operator|:
name|PECOFFLinkingContext
argument_list|()
operator|:
name|_mutex
argument_list|()
block|,
name|_allocMutex
argument_list|()
block|,
name|_hasEntry
argument_list|(
name|true
argument_list|)
block|,
name|_baseAddress
argument_list|(
name|invalidBaseAddress
argument_list|)
block|,
name|_stackReserve
argument_list|(
literal|1024
operator|*
literal|1024
argument_list|)
block|,
name|_stackCommit
argument_list|(
literal|4096
argument_list|)
block|,
name|_heapReserve
argument_list|(
literal|1024
operator|*
literal|1024
argument_list|)
block|,
name|_heapCommit
argument_list|(
literal|4096
argument_list|)
block|,
name|_noDefaultLibAll
argument_list|(
name|false
argument_list|)
block|,
name|_sectionDefaultAlignment
argument_list|(
literal|4096
argument_list|)
block|,
name|_subsystem
argument_list|(
name|llvm
operator|::
name|COFF
operator|::
name|IMAGE_SUBSYSTEM_UNKNOWN
argument_list|)
block|,
name|_machineType
argument_list|(
name|llvm
operator|::
name|COFF
operator|::
name|IMAGE_FILE_MACHINE_I386
argument_list|)
block|,
name|_imageVersion
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
block|,
name|_minOSVersion
argument_list|(
literal|6
argument_list|,
literal|0
argument_list|)
block|,
name|_nxCompat
argument_list|(
name|true
argument_list|)
block|,
name|_largeAddressAware
argument_list|(
name|false
argument_list|)
block|,
name|_allowBind
argument_list|(
name|true
argument_list|)
block|,
name|_allowIsolation
argument_list|(
name|true
argument_list|)
block|,
name|_swapRunFromCD
argument_list|(
name|false
argument_list|)
block|,
name|_swapRunFromNet
argument_list|(
name|false
argument_list|)
block|,
name|_baseRelocationEnabled
argument_list|(
name|true
argument_list|)
block|,
name|_terminalServerAware
argument_list|(
name|true
argument_list|)
block|,
name|_dynamicBaseEnabled
argument_list|(
name|true
argument_list|)
block|,
name|_createManifest
argument_list|(
name|true
argument_list|)
block|,
name|_embedManifest
argument_list|(
name|false
argument_list|)
block|,
name|_manifestId
argument_list|(
literal|1
argument_list|)
block|,
name|_manifestUAC
argument_list|(
name|true
argument_list|)
block|,
name|_manifestLevel
argument_list|(
literal|"'asInvoker'"
argument_list|)
block|,
name|_manifestUiAccess
argument_list|(
literal|"'false'"
argument_list|)
block|,
name|_isDll
argument_list|(
name|false
argument_list|)
block|,
name|_highEntropyVA
argument_list|(
name|true
argument_list|)
block|,
name|_requireSEH
argument_list|(
name|false
argument_list|)
block|,
name|_noSEH
argument_list|(
name|false
argument_list|)
block|,
name|_implib
argument_list|(
literal|""
argument_list|)
block|,
name|_debug
argument_list|(
name|false
argument_list|)
block|,
name|_pdbFilePath
argument_list|(
literal|""
argument_list|)
block|,
name|_dosStub
argument_list|(
name|llvm
operator|::
name|makeArrayRef
argument_list|(
name|DEFAULT_DOS_STUB
argument_list|)
argument_list|)
block|,
name|_parseDirectives
argument_list|(
argument|nullptr
argument_list|)
block|{
name|setDeadStripping
argument_list|(
name|true
argument_list|)
block|;   }
expr|struct
name|Version
block|{
name|Version
argument_list|(
argument|int v1
argument_list|,
argument|int v2
argument_list|)
operator|:
name|majorVersion
argument_list|(
name|v1
argument_list|)
block|,
name|minorVersion
argument_list|(
argument|v2
argument_list|)
block|{}
name|int
name|majorVersion
block|;
name|int
name|minorVersion
block|;   }
block|;    struct
name|ExportDesc
block|{
name|ExportDesc
argument_list|()
operator|:
name|ordinal
argument_list|(
operator|-
literal|1
argument_list|)
block|,
name|noname
argument_list|(
name|false
argument_list|)
block|,
name|isData
argument_list|(
name|false
argument_list|)
block|,
name|isPrivate
argument_list|(
argument|false
argument_list|)
block|{}
name|bool
name|operator
operator|<
operator|(
specifier|const
name|ExportDesc
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|getExternalName
argument_list|()
operator|.
name|compare
argument_list|(
name|other
operator|.
name|getExternalName
argument_list|()
argument_list|)
operator|<
literal|0
return|;
block|}
name|StringRef
name|getRealName
argument_list|()
specifier|const
block|{
return|return
name|mangledName
operator|.
name|empty
argument_list|()
operator|?
name|name
operator|:
name|mangledName
return|;
block|}
name|StringRef
name|getExternalName
argument_list|()
specifier|const
block|{
return|return
name|externalName
operator|.
name|empty
argument_list|()
condition|?
name|name
else|:
name|externalName
return|;
block|}
name|std
operator|::
name|string
name|name
block|;
name|std
operator|::
name|string
name|externalName
block|;
name|std
operator|::
name|string
name|mangledName
block|;
name|int
name|ordinal
block|;
name|bool
name|noname
block|;
name|bool
name|isData
block|;
name|bool
name|isPrivate
block|;   }
block|;
typedef|typedef
name|bool
function_decl|(
modifier|*
name|ParseDirectives
function_decl|)
parameter_list|(
name|int
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
parameter_list|,
name|PECOFFLinkingContext
modifier|&
parameter_list|,
name|raw_ostream
modifier|&
parameter_list|)
function_decl|;
comment|/// \brief Casting support
specifier|static
name|bool
name|classof
argument_list|(
argument|const LinkingContext *info
argument_list|)
block|{
return|return
name|true
return|;
block|}
name|Writer
operator|&
name|writer
argument_list|()
specifier|const
name|override
decl_stmt|;
name|bool
name|validateImpl
argument_list|(
name|raw_ostream
operator|&
name|diagnostics
argument_list|)
name|override
decl_stmt|;
name|void
name|addPasses
argument_list|(
name|PassManager
operator|&
name|pm
argument_list|)
name|override
decl_stmt|;
name|bool
name|createImplicitFiles
argument_list|(
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|File
operator|>
expr|>
operator|&
name|result
argument_list|)
name|override
decl_stmt|;
name|bool
name|is64Bit
argument_list|()
specifier|const
block|{
return|return
name|_machineType
operator|==
name|llvm
operator|::
name|COFF
operator|::
name|IMAGE_FILE_MACHINE_AMD64
return|;
block|}
comment|// Returns a set of all defined symbols in input files.
specifier|const
name|std
operator|::
name|set
operator|<
name|std
operator|::
name|string
operator|>
operator|&
name|definedSymbols
argument_list|()
expr_stmt|;
comment|/// Page size of x86 processor. Some data needs to be aligned at page boundary
comment|/// when loaded into memory.
name|uint64_t
name|getPageSize
argument_list|()
specifier|const
block|{
return|return
literal|0x1000
return|;
block|}
name|void
name|appendInputSearchPath
parameter_list|(
name|StringRef
name|dirPath
parameter_list|)
block|{
name|_inputSearchPaths
operator|.
name|push_back
argument_list|(
name|dirPath
argument_list|)
expr_stmt|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
name|StringRef
operator|>
name|getInputSearchPaths
argument_list|()
block|{
return|return
name|_inputSearchPaths
return|;
block|}
name|void
name|registerTemporaryFile
parameter_list|(
name|StringRef
name|path
parameter_list|)
block|{
name|std
operator|::
name|unique_ptr
operator|<
name|llvm
operator|::
name|FileRemover
operator|>
name|fileRemover
argument_list|(
argument|new llvm::FileRemover(Twine(allocate(path)))
argument_list|)
expr_stmt|;
name|_tempFiles
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|fileRemover
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|StringRef
name|searchLibraryFile
argument_list|(
name|StringRef
name|path
argument_list|)
decl|const
decl_stmt|;
name|StringRef
name|decorateSymbol
argument_list|(
name|StringRef
name|name
argument_list|)
decl|const
decl_stmt|;
name|StringRef
name|undecorateSymbol
argument_list|(
name|StringRef
name|name
argument_list|)
decl|const
decl_stmt|;
name|void
name|setEntrySymbolName
parameter_list|(
name|StringRef
name|name
parameter_list|)
block|{
name|_entry
operator|=
name|name
expr_stmt|;
block|}
name|StringRef
name|getEntrySymbolName
argument_list|()
specifier|const
block|{
return|return
name|_entry
return|;
block|}
name|void
name|setHasEntry
parameter_list|(
name|bool
name|val
parameter_list|)
block|{
name|_hasEntry
operator|=
name|val
expr_stmt|;
block|}
name|bool
name|hasEntry
argument_list|()
specifier|const
block|{
return|return
name|_hasEntry
return|;
block|}
name|void
name|setBaseAddress
parameter_list|(
name|uint64_t
name|addr
parameter_list|)
block|{
name|_baseAddress
operator|=
name|addr
expr_stmt|;
block|}
name|uint64_t
name|getBaseAddress
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setStackReserve
parameter_list|(
name|uint64_t
name|size
parameter_list|)
block|{
name|_stackReserve
operator|=
name|size
expr_stmt|;
block|}
name|void
name|setStackCommit
parameter_list|(
name|uint64_t
name|size
parameter_list|)
block|{
name|_stackCommit
operator|=
name|size
expr_stmt|;
block|}
name|uint64_t
name|getStackReserve
argument_list|()
specifier|const
block|{
return|return
name|_stackReserve
return|;
block|}
name|uint64_t
name|getStackCommit
argument_list|()
specifier|const
block|{
return|return
name|_stackCommit
return|;
block|}
name|void
name|setHeapReserve
parameter_list|(
name|uint64_t
name|size
parameter_list|)
block|{
name|_heapReserve
operator|=
name|size
expr_stmt|;
block|}
name|void
name|setHeapCommit
parameter_list|(
name|uint64_t
name|size
parameter_list|)
block|{
name|_heapCommit
operator|=
name|size
expr_stmt|;
block|}
name|uint64_t
name|getHeapReserve
argument_list|()
specifier|const
block|{
return|return
name|_heapReserve
return|;
block|}
name|uint64_t
name|getHeapCommit
argument_list|()
specifier|const
block|{
return|return
name|_heapCommit
return|;
block|}
name|void
name|setSectionDefaultAlignment
parameter_list|(
name|uint32_t
name|val
parameter_list|)
block|{
name|_sectionDefaultAlignment
operator|=
name|val
expr_stmt|;
block|}
name|uint32_t
name|getSectionDefaultAlignment
argument_list|()
specifier|const
block|{
return|return
name|_sectionDefaultAlignment
return|;
block|}
name|void
name|setSubsystem
parameter_list|(
name|WindowsSubsystem
name|ss
parameter_list|)
block|{
name|_subsystem
operator|=
name|ss
expr_stmt|;
block|}
name|WindowsSubsystem
name|getSubsystem
argument_list|()
specifier|const
block|{
return|return
name|_subsystem
return|;
block|}
name|void
name|setMachineType
parameter_list|(
name|MachineTypes
name|type
parameter_list|)
block|{
name|_machineType
operator|=
name|type
expr_stmt|;
block|}
name|MachineTypes
name|getMachineType
argument_list|()
specifier|const
block|{
return|return
name|_machineType
return|;
block|}
name|void
name|setImageVersion
parameter_list|(
specifier|const
name|Version
modifier|&
name|version
parameter_list|)
block|{
name|_imageVersion
operator|=
name|version
expr_stmt|;
block|}
name|Version
name|getImageVersion
argument_list|()
specifier|const
block|{
return|return
name|_imageVersion
return|;
block|}
name|void
name|setMinOSVersion
parameter_list|(
specifier|const
name|Version
modifier|&
name|version
parameter_list|)
block|{
name|_minOSVersion
operator|=
name|version
expr_stmt|;
block|}
name|Version
name|getMinOSVersion
argument_list|()
specifier|const
block|{
return|return
name|_minOSVersion
return|;
block|}
name|void
name|setNxCompat
parameter_list|(
name|bool
name|nxCompat
parameter_list|)
block|{
name|_nxCompat
operator|=
name|nxCompat
expr_stmt|;
block|}
name|bool
name|isNxCompat
argument_list|()
specifier|const
block|{
return|return
name|_nxCompat
return|;
block|}
name|void
name|setLargeAddressAware
parameter_list|(
name|bool
name|val
parameter_list|)
block|{
name|_largeAddressAware
operator|=
name|val
expr_stmt|;
block|}
name|bool
name|getLargeAddressAware
argument_list|()
specifier|const
block|{
return|return
name|_largeAddressAware
return|;
block|}
name|void
name|setAllowBind
parameter_list|(
name|bool
name|val
parameter_list|)
block|{
name|_allowBind
operator|=
name|val
expr_stmt|;
block|}
name|bool
name|getAllowBind
argument_list|()
specifier|const
block|{
return|return
name|_allowBind
return|;
block|}
name|void
name|setAllowIsolation
parameter_list|(
name|bool
name|val
parameter_list|)
block|{
name|_allowIsolation
operator|=
name|val
expr_stmt|;
block|}
name|bool
name|getAllowIsolation
argument_list|()
specifier|const
block|{
return|return
name|_allowIsolation
return|;
block|}
name|void
name|setSwapRunFromCD
parameter_list|(
name|bool
name|val
parameter_list|)
block|{
name|_swapRunFromCD
operator|=
name|val
expr_stmt|;
block|}
name|bool
name|getSwapRunFromCD
argument_list|()
specifier|const
block|{
return|return
name|_swapRunFromCD
return|;
block|}
name|void
name|setSwapRunFromNet
parameter_list|(
name|bool
name|val
parameter_list|)
block|{
name|_swapRunFromNet
operator|=
name|val
expr_stmt|;
block|}
name|bool
name|getSwapRunFromNet
argument_list|()
specifier|const
block|{
return|return
name|_swapRunFromNet
return|;
block|}
name|void
name|setBaseRelocationEnabled
parameter_list|(
name|bool
name|val
parameter_list|)
block|{
name|_baseRelocationEnabled
operator|=
name|val
expr_stmt|;
block|}
name|bool
name|getBaseRelocationEnabled
argument_list|()
specifier|const
block|{
return|return
name|_baseRelocationEnabled
return|;
block|}
name|void
name|setTerminalServerAware
parameter_list|(
name|bool
name|val
parameter_list|)
block|{
name|_terminalServerAware
operator|=
name|val
expr_stmt|;
block|}
name|bool
name|isTerminalServerAware
argument_list|()
specifier|const
block|{
return|return
name|_terminalServerAware
return|;
block|}
name|void
name|setDynamicBaseEnabled
parameter_list|(
name|bool
name|val
parameter_list|)
block|{
name|_dynamicBaseEnabled
operator|=
name|val
expr_stmt|;
block|}
name|bool
name|getDynamicBaseEnabled
argument_list|()
specifier|const
block|{
return|return
name|_dynamicBaseEnabled
return|;
block|}
name|void
name|setCreateManifest
parameter_list|(
name|bool
name|val
parameter_list|)
block|{
name|_createManifest
operator|=
name|val
expr_stmt|;
block|}
name|bool
name|getCreateManifest
argument_list|()
specifier|const
block|{
return|return
name|_createManifest
return|;
block|}
name|void
name|setManifestOutputPath
argument_list|(
name|std
operator|::
name|string
name|val
argument_list|)
block|{
name|_manifestOutputPath
operator|=
name|val
expr_stmt|;
block|}
specifier|const
name|std
operator|::
name|string
operator|&
name|getManifestOutputPath
argument_list|()
specifier|const
block|{
return|return
name|_manifestOutputPath
return|;
block|}
name|void
name|setEmbedManifest
parameter_list|(
name|bool
name|val
parameter_list|)
block|{
name|_embedManifest
operator|=
name|val
expr_stmt|;
block|}
name|bool
name|getEmbedManifest
argument_list|()
specifier|const
block|{
return|return
name|_embedManifest
return|;
block|}
name|void
name|setManifestId
parameter_list|(
name|int
name|val
parameter_list|)
block|{
name|_manifestId
operator|=
name|val
expr_stmt|;
block|}
name|int
name|getManifestId
argument_list|()
specifier|const
block|{
return|return
name|_manifestId
return|;
block|}
name|void
name|setManifestUAC
parameter_list|(
name|bool
name|val
parameter_list|)
block|{
name|_manifestUAC
operator|=
name|val
expr_stmt|;
block|}
name|bool
name|getManifestUAC
argument_list|()
specifier|const
block|{
return|return
name|_manifestUAC
return|;
block|}
name|void
name|setManifestLevel
argument_list|(
name|std
operator|::
name|string
name|val
argument_list|)
block|{
name|_manifestLevel
operator|=
name|std
operator|::
name|move
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
specifier|const
name|std
operator|::
name|string
operator|&
name|getManifestLevel
argument_list|()
specifier|const
block|{
return|return
name|_manifestLevel
return|;
block|}
name|void
name|setManifestUiAccess
argument_list|(
name|std
operator|::
name|string
name|val
argument_list|)
block|{
name|_manifestUiAccess
operator|=
name|val
expr_stmt|;
block|}
specifier|const
name|std
operator|::
name|string
operator|&
name|getManifestUiAccess
argument_list|()
specifier|const
block|{
return|return
name|_manifestUiAccess
return|;
block|}
name|void
name|setManifestDependency
argument_list|(
name|std
operator|::
name|string
name|val
argument_list|)
block|{
name|_manifestDependency
operator|=
name|val
expr_stmt|;
block|}
specifier|const
name|std
operator|::
name|string
operator|&
name|getManifestDependency
argument_list|()
specifier|const
block|{
return|return
name|_manifestDependency
return|;
block|}
name|void
name|setIsDll
parameter_list|(
name|bool
name|val
parameter_list|)
block|{
name|_isDll
operator|=
name|val
expr_stmt|;
block|}
name|bool
name|isDll
argument_list|()
specifier|const
block|{
return|return
name|_isDll
return|;
block|}
name|void
name|setSafeSEH
parameter_list|(
name|bool
name|val
parameter_list|)
block|{
if|if
condition|(
name|val
condition|)
name|_requireSEH
operator|=
name|true
expr_stmt|;
else|else
name|_noSEH
operator|=
name|true
expr_stmt|;
block|}
name|bool
name|requireSEH
argument_list|()
specifier|const
block|{
return|return
name|_requireSEH
return|;
block|}
name|bool
name|noSEH
argument_list|()
specifier|const
block|{
return|return
name|_noSEH
return|;
block|}
name|void
name|setHighEntropyVA
parameter_list|(
name|bool
name|val
parameter_list|)
block|{
name|_highEntropyVA
operator|=
name|val
expr_stmt|;
block|}
name|bool
name|getHighEntropyVA
argument_list|()
specifier|const
block|{
return|return
name|_highEntropyVA
return|;
block|}
name|void
name|setOutputImportLibraryPath
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|val
argument_list|)
block|{
name|_implib
operator|=
name|val
expr_stmt|;
block|}
name|std
operator|::
name|string
name|getOutputImportLibraryPath
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setDebug
parameter_list|(
name|bool
name|val
parameter_list|)
block|{
name|_debug
operator|=
name|val
expr_stmt|;
block|}
name|bool
name|getDebug
parameter_list|()
block|{
return|return
name|_debug
return|;
block|}
name|void
name|setPDBFilePath
parameter_list|(
name|StringRef
name|str
parameter_list|)
block|{
name|_pdbFilePath
operator|=
name|str
expr_stmt|;
block|}
name|std
operator|::
name|string
name|getPDBFilePath
argument_list|()
specifier|const
expr_stmt|;
name|void
name|addDelayLoadDLL
parameter_list|(
name|StringRef
name|dll
parameter_list|)
block|{
name|_delayLoadDLLs
operator|.
name|insert
argument_list|(
name|dll
operator|.
name|lower
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|bool
name|isDelayLoadDLL
argument_list|(
name|StringRef
name|dll
argument_list|)
decl|const
block|{
return|return
name|_delayLoadDLLs
operator|.
name|count
argument_list|(
name|dll
operator|.
name|lower
argument_list|()
argument_list|)
operator|==
literal|1
return|;
block|}
name|StringRef
name|getOutputSectionName
argument_list|(
name|StringRef
name|sectionName
argument_list|)
decl|const
decl_stmt|;
name|bool
name|addSectionRenaming
parameter_list|(
name|raw_ostream
modifier|&
name|diagnostics
parameter_list|,
name|StringRef
name|from
parameter_list|,
name|StringRef
name|to
parameter_list|)
function_decl|;
specifier|const
name|std
operator|::
name|set
operator|<
name|std
operator|::
name|string
operator|>
operator|&
name|getAlternateNames
argument_list|(
argument|StringRef name
argument_list|)
block|{
return|return
name|_alternateNames
index|[
name|name
index|]
return|;
block|}
name|void
name|addAlternateName
parameter_list|(
name|StringRef
name|weak
parameter_list|,
name|StringRef
name|def
parameter_list|)
block|{
name|_alternateNames
index|[
name|def
index|]
operator|.
name|insert
argument_list|(
name|weak
argument_list|)
expr_stmt|;
block|}
name|void
name|addNoDefaultLib
parameter_list|(
name|StringRef
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|endswith_lower
argument_list|(
literal|".lib"
argument_list|)
condition|)
name|_noDefaultLibs
operator|.
name|insert
argument_list|(
name|path
operator|.
name|drop_back
argument_list|(
literal|4
argument_list|)
operator|.
name|lower
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|_noDefaultLibs
operator|.
name|insert
argument_list|(
name|path
operator|.
name|lower
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|bool
name|hasNoDefaultLib
argument_list|(
name|StringRef
name|path
argument_list|)
decl|const
block|{
if|if
condition|(
name|path
operator|.
name|endswith_lower
argument_list|(
literal|".lib"
argument_list|)
condition|)
return|return
name|_noDefaultLibs
operator|.
name|count
argument_list|(
name|path
operator|.
name|drop_back
argument_list|(
literal|4
argument_list|)
operator|.
name|lower
argument_list|()
argument_list|)
operator|>
literal|0
return|;
return|return
name|_noDefaultLibs
operator|.
name|count
argument_list|(
name|path
operator|.
name|lower
argument_list|()
argument_list|)
operator|>
literal|0
return|;
block|}
name|void
name|setNoDefaultLibAll
parameter_list|(
name|bool
name|val
parameter_list|)
block|{
name|_noDefaultLibAll
operator|=
name|val
expr_stmt|;
block|}
name|bool
name|getNoDefaultLibAll
argument_list|()
specifier|const
block|{
return|return
name|_noDefaultLibAll
return|;
block|}
name|void
name|setSectionSetMask
parameter_list|(
name|StringRef
name|sectionName
parameter_list|,
name|uint32_t
name|flags
parameter_list|)
function_decl|;
name|void
name|setSectionClearMask
parameter_list|(
name|StringRef
name|sectionName
parameter_list|,
name|uint32_t
name|flags
parameter_list|)
function_decl|;
name|uint32_t
name|getSectionAttributes
argument_list|(
name|StringRef
name|sectionName
argument_list|,
name|uint32_t
name|flags
argument_list|)
decl|const
decl_stmt|;
name|void
name|setDosStub
argument_list|(
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|data
argument_list|)
block|{
name|_dosStub
operator|=
name|data
expr_stmt|;
block|}
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|getDosStub
argument_list|()
specifier|const
block|{
return|return
name|_dosStub
return|;
block|}
name|void
name|addDllExport
parameter_list|(
name|ExportDesc
modifier|&
name|desc
parameter_list|)
function_decl|;
name|std
operator|::
name|vector
operator|<
name|ExportDesc
operator|>
operator|&
name|getDllExports
argument_list|()
block|{
return|return
name|_dllExports
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
name|ExportDesc
operator|>
operator|&
name|getDllExports
argument_list|()
specifier|const
block|{
return|return
name|_dllExports
return|;
block|}
name|StringRef
name|getDelayLoadHelperName
argument_list|()
specifier|const
block|{
return|return
name|is64Bit
argument_list|()
operator|?
literal|"__delayLoadHelper2"
operator|:
literal|"___delayLoadHelper2@8"
return|;
block|}
name|StringRef
name|allocate
argument_list|(
name|StringRef
name|ref
argument_list|)
decl|const
block|{
name|_allocMutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|char
modifier|*
name|x
init|=
name|_allocator
operator|.
name|Allocate
operator|<
name|char
operator|>
operator|(
name|ref
operator|.
name|size
argument_list|()
operator|+
literal|1
operator|)
decl_stmt|;
name|_allocMutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|memcpy
argument_list|(
name|x
argument_list|,
name|ref
operator|.
name|data
argument_list|()
argument_list|,
name|ref
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|x
index|[
name|ref
operator|.
name|size
argument_list|()
index|]
operator|=
literal|'\0'
expr_stmt|;
return|return
name|x
return|;
block|}
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|allocate
argument_list|(
argument|ArrayRef<uint8_t> array
argument_list|)
specifier|const
block|{
name|size_t
name|size
operator|=
name|array
operator|.
name|size
argument_list|()
block|;
name|_allocMutex
operator|.
name|lock
argument_list|()
block|;
name|uint8_t
operator|*
name|p
operator|=
name|_allocator
operator|.
name|Allocate
operator|<
name|uint8_t
operator|>
operator|(
name|size
operator|)
block|;
name|_allocMutex
operator|.
name|unlock
argument_list|()
block|;
name|memcpy
argument_list|(
name|p
argument_list|,
name|array
operator|.
name|data
argument_list|()
argument_list|,
name|size
argument_list|)
block|;
return|return
name|ArrayRef
operator|<
name|uint8_t
operator|>
operator|(
name|p
operator|,
name|p
operator|+
name|array
operator|.
name|size
argument_list|()
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|T
operator|&
name|allocateCopy
argument_list|(
argument|const T&x
argument_list|)
specifier|const
block|{
name|_allocMutex
operator|.
name|lock
argument_list|()
block|;
name|T
operator|*
name|r
operator|=
name|new
argument_list|(
argument|_allocator
argument_list|)
name|T
argument_list|(
name|x
argument_list|)
block|;
name|_allocMutex
operator|.
name|unlock
argument_list|()
block|;
return|return
operator|*
name|r
return|;
block|}
name|void
name|addLibraryFile
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|FileNode
operator|>
name|file
argument_list|)
decl_stmt|;
name|void
name|setModuleDefinitionFile
argument_list|(
specifier|const
name|std
operator|::
name|string
name|val
argument_list|)
block|{
name|_moduleDefinitionFile
operator|=
name|val
expr_stmt|;
block|}
name|std
operator|::
name|string
name|getModuleDefinitionFile
argument_list|()
specifier|const
block|{
return|return
name|_moduleDefinitionFile
return|;
block|}
name|std
operator|::
name|recursive_mutex
operator|&
name|getMutex
argument_list|()
block|{
return|return
name|_mutex
return|;
block|}
name|void
name|setParseDirectives
parameter_list|(
name|ParseDirectives
name|parseDirectives
parameter_list|)
block|{
name|_parseDirectives
operator|=
name|parseDirectives
expr_stmt|;
block|}
name|ParseDirectives
name|getParseDirectives
parameter_list|()
block|{
return|return
name|_parseDirectives
return|;
block|}
name|protected
label|:
comment|/// Method to create a internal file for the entry symbol
name|std
operator|::
name|unique_ptr
operator|<
name|File
operator|>
name|createEntrySymbolFile
argument_list|()
specifier|const
name|override
expr_stmt|;
comment|/// Method to create a internal file for an undefined symbol
name|std
operator|::
name|unique_ptr
operator|<
name|File
operator|>
name|createUndefinedSymbolFile
argument_list|()
specifier|const
name|override
expr_stmt|;
name|private
label|:
enum_decl|enum :
name|uint64_t
block|{
name|invalidBaseAddress
init|=
name|UINT64_MAX
block|,
name|pe32DefaultBaseAddress
init|=
literal|0x400000U
block|,
name|pe32PlusDefaultBaseAddress
init|=
literal|0x140000000U
block|}
enum_decl|;
name|std
operator|::
name|recursive_mutex
name|_mutex
expr_stmt|;
name|mutable
name|std
operator|::
name|mutex
name|_allocMutex
expr_stmt|;
name|std
operator|::
name|string
name|_entry
expr_stmt|;
comment|// False if /noentry option is given.
name|bool
name|_hasEntry
decl_stmt|;
comment|// The start address for the program. The default value for the executable is
comment|// 0x400000, but can be altered using /base command line option.
name|uint64_t
name|_baseAddress
decl_stmt|;
name|uint64_t
name|_stackReserve
decl_stmt|;
name|uint64_t
name|_stackCommit
decl_stmt|;
name|uint64_t
name|_heapReserve
decl_stmt|;
name|uint64_t
name|_heapCommit
decl_stmt|;
name|bool
name|_noDefaultLibAll
decl_stmt|;
name|uint32_t
name|_sectionDefaultAlignment
decl_stmt|;
name|WindowsSubsystem
name|_subsystem
decl_stmt|;
name|MachineTypes
name|_machineType
decl_stmt|;
name|Version
name|_imageVersion
decl_stmt|;
name|Version
name|_minOSVersion
decl_stmt|;
name|bool
name|_nxCompat
decl_stmt|;
name|bool
name|_largeAddressAware
decl_stmt|;
name|bool
name|_allowBind
decl_stmt|;
name|bool
name|_allowIsolation
decl_stmt|;
name|bool
name|_swapRunFromCD
decl_stmt|;
name|bool
name|_swapRunFromNet
decl_stmt|;
name|bool
name|_baseRelocationEnabled
decl_stmt|;
name|bool
name|_terminalServerAware
decl_stmt|;
name|bool
name|_dynamicBaseEnabled
decl_stmt|;
name|bool
name|_createManifest
decl_stmt|;
name|std
operator|::
name|string
name|_manifestOutputPath
expr_stmt|;
name|bool
name|_embedManifest
decl_stmt|;
name|int
name|_manifestId
decl_stmt|;
name|bool
name|_manifestUAC
decl_stmt|;
name|std
operator|::
name|string
name|_manifestLevel
expr_stmt|;
name|std
operator|::
name|string
name|_manifestUiAccess
expr_stmt|;
name|std
operator|::
name|string
name|_manifestDependency
expr_stmt|;
name|bool
name|_isDll
decl_stmt|;
name|bool
name|_highEntropyVA
decl_stmt|;
comment|// True if /SAFESEH option is specified. Valid only for x86. If true, LLD will
comment|// produce an image with SEH table. If any modules were not compatible with
comment|// SEH, LLD will exit with an error.
name|bool
name|_requireSEH
decl_stmt|;
comment|// True if /SAFESEH:no option is specified. Valid only for x86. If true, LLD
comment|// will not produce an image with SEH table even if all input object files are
comment|// compatible with SEH.
name|bool
name|_noSEH
decl_stmt|;
comment|// /IMPLIB command line option.
name|std
operator|::
name|string
name|_implib
expr_stmt|;
comment|// True if /DEBUG is given.
name|bool
name|_debug
decl_stmt|;
comment|// PDB file output path. NB: this is dummy -- LLD just creates the empty file.
name|std
operator|::
name|string
name|_pdbFilePath
expr_stmt|;
comment|// /DELAYLOAD option.
name|std
operator|::
name|set
operator|<
name|std
operator|::
name|string
operator|>
name|_delayLoadDLLs
expr_stmt|;
comment|// The set to store /nodefaultlib arguments.
name|std
operator|::
name|set
operator|<
name|std
operator|::
name|string
operator|>
name|_noDefaultLibs
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|StringRef
operator|>
name|_inputSearchPaths
expr_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|Writer
operator|>
name|_writer
expr_stmt|;
comment|// A map for weak aliases.
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|string
operator|,
name|std
operator|::
name|set
operator|<
name|std
operator|::
name|string
operator|>>
name|_alternateNames
expr_stmt|;
comment|// A map for section renaming. For example, if there is an entry in the map
comment|// whose value is .rdata -> .text, the section contens of .rdata will be
comment|// merged to .text in the resulting executable.
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|string
operator|,
name|std
operator|::
name|string
operator|>
name|_renamedSections
expr_stmt|;
comment|// Section attributes specified by /section option.
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|string
operator|,
name|uint32_t
operator|>
name|_sectionSetMask
expr_stmt|;
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|string
operator|,
name|uint32_t
operator|>
name|_sectionClearMask
expr_stmt|;
comment|// DLLExport'ed symbols.
name|std
operator|::
name|vector
operator|<
name|ExportDesc
operator|>
name|_dllExports
expr_stmt|;
comment|// List of files that will be removed on destruction.
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|llvm
operator|::
name|FileRemover
operator|>
expr|>
name|_tempFiles
expr_stmt|;
comment|// DOS Stub. DOS stub is data located at the beginning of PE/COFF file.
comment|// Windows loader do not really care about DOS stub contents, but it's usually
comment|// a small DOS program that prints out a message "This program requires
comment|// Microsoft Windows." This feature was somewhat useful before Windows 95.
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|_dosStub
expr_stmt|;
comment|// Name of the temporary file for lib.exe subcommand. For debugging
comment|// only.
name|std
operator|::
name|string
name|_moduleDefinitionFile
expr_stmt|;
name|std
operator|::
name|set
operator|<
name|std
operator|::
name|string
operator|>
name|_definedSyms
expr_stmt|;
name|std
operator|::
name|set
operator|<
name|Node
operator|*
operator|>
name|_seen
expr_stmt|;
name|ParseDirectives
name|_parseDirectives
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// end namespace lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

