begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- Core/SymbolTable.h - Main Symbol Table -----------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_CORE_SYMBOL_TABLE_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_CORE_SYMBOL_TABLE_H
end_define

begin_include
include|#
directive|include
file|"lld/Core/LLVM.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringExtras.h"
end_include

begin_include
include|#
directive|include
file|<cstring>
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|lld
block|{
name|class
name|AbsoluteAtom
decl_stmt|;
name|class
name|Atom
decl_stmt|;
name|class
name|DefinedAtom
decl_stmt|;
name|class
name|LinkingContext
decl_stmt|;
name|class
name|ResolverOptions
decl_stmt|;
name|class
name|SharedLibraryAtom
decl_stmt|;
name|class
name|UndefinedAtom
decl_stmt|;
comment|/// \brief The SymbolTable class is responsible for coalescing atoms.
comment|///
comment|/// All atoms coalescable by-name or by-content should be added.
comment|/// The method replacement() can be used to find the replacement atom
comment|/// if an atom has been coalesced away.
name|class
name|SymbolTable
block|{
name|public
label|:
comment|/// @brief add atom to symbol table
name|bool
name|add
parameter_list|(
specifier|const
name|DefinedAtom
modifier|&
parameter_list|)
function_decl|;
comment|/// @brief add atom to symbol table
name|bool
name|add
parameter_list|(
specifier|const
name|UndefinedAtom
modifier|&
parameter_list|)
function_decl|;
comment|/// @brief add atom to symbol table
name|bool
name|add
parameter_list|(
specifier|const
name|SharedLibraryAtom
modifier|&
parameter_list|)
function_decl|;
comment|/// @brief add atom to symbol table
name|bool
name|add
parameter_list|(
specifier|const
name|AbsoluteAtom
modifier|&
parameter_list|)
function_decl|;
comment|/// @brief checks if name is in symbol table and if so atom is not
comment|///        UndefinedAtom
name|bool
name|isDefined
parameter_list|(
name|StringRef
name|sym
parameter_list|)
function_decl|;
comment|/// @brief returns atom in symbol table for specified name (or nullptr)
specifier|const
name|Atom
modifier|*
name|findByName
parameter_list|(
name|StringRef
name|sym
parameter_list|)
function_decl|;
comment|/// @brief returns vector of remaining UndefinedAtoms
name|std
operator|::
name|vector
operator|<
specifier|const
name|UndefinedAtom
operator|*
operator|>
name|undefines
argument_list|()
expr_stmt|;
comment|/// returns vector of tentative definitions
name|std
operator|::
name|vector
operator|<
name|StringRef
operator|>
name|tentativeDefinitions
argument_list|()
expr_stmt|;
comment|/// @brief add atom to replacement table
name|void
name|addReplacement
parameter_list|(
specifier|const
name|Atom
modifier|*
name|replaced
parameter_list|,
specifier|const
name|Atom
modifier|*
name|replacement
parameter_list|)
function_decl|;
comment|/// @brief if atom has been coalesced away, return replacement, else return atom
specifier|const
name|Atom
modifier|*
name|replacement
parameter_list|(
specifier|const
name|Atom
modifier|*
parameter_list|)
function_decl|;
comment|/// @brief if atom has been coalesced away, return true
name|bool
name|isCoalescedAway
parameter_list|(
specifier|const
name|Atom
modifier|*
parameter_list|)
function_decl|;
name|private
label|:
typedef|typedef
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|Atom
operator|*
operator|,
specifier|const
name|Atom
operator|*
operator|>
name|AtomToAtom
expr_stmt|;
struct|struct
name|StringRefMappingInfo
block|{
specifier|static
name|StringRef
name|getEmptyKey
parameter_list|()
block|{
return|return
name|StringRef
argument_list|()
return|;
block|}
specifier|static
name|StringRef
name|getTombstoneKey
parameter_list|()
block|{
return|return
name|StringRef
argument_list|(
literal|" "
argument_list|,
literal|1
argument_list|)
return|;
block|}
specifier|static
name|unsigned
name|getHashValue
parameter_list|(
name|StringRef
specifier|const
name|val
parameter_list|)
block|{
return|return
name|llvm
operator|::
name|HashString
argument_list|(
name|val
argument_list|)
return|;
block|}
specifier|static
name|bool
name|isEqual
parameter_list|(
name|StringRef
specifier|const
name|lhs
parameter_list|,
name|StringRef
specifier|const
name|rhs
parameter_list|)
block|{
return|return
name|lhs
operator|.
name|equals
argument_list|(
name|rhs
argument_list|)
return|;
block|}
block|}
struct|;
typedef|typedef
name|llvm
operator|::
name|DenseMap
operator|<
name|StringRef
operator|,
specifier|const
name|Atom
operator|*
operator|,
name|StringRefMappingInfo
operator|>
name|NameToAtom
expr_stmt|;
struct|struct
name|AtomMappingInfo
block|{
specifier|static
specifier|const
name|DefinedAtom
modifier|*
name|getEmptyKey
parameter_list|()
block|{
return|return
name|nullptr
return|;
block|}
specifier|static
specifier|const
name|DefinedAtom
modifier|*
name|getTombstoneKey
parameter_list|()
block|{
return|return
operator|(
name|DefinedAtom
operator|*
operator|)
operator|(
operator|-
literal|1
operator|)
return|;
block|}
specifier|static
name|unsigned
name|getHashValue
parameter_list|(
specifier|const
name|DefinedAtom
modifier|*
specifier|const
name|Val
parameter_list|)
function_decl|;
specifier|static
name|bool
name|isEqual
parameter_list|(
specifier|const
name|DefinedAtom
modifier|*
specifier|const
name|LHS
parameter_list|,
specifier|const
name|DefinedAtom
modifier|*
specifier|const
name|RHS
parameter_list|)
function_decl|;
block|}
struct|;
typedef|typedef
name|llvm
operator|::
name|DenseSet
operator|<
specifier|const
name|DefinedAtom
operator|*
operator|,
name|AtomMappingInfo
operator|>
name|AtomContentSet
expr_stmt|;
name|bool
name|addByName
parameter_list|(
specifier|const
name|Atom
modifier|&
parameter_list|)
function_decl|;
name|bool
name|addByContent
parameter_list|(
specifier|const
name|DefinedAtom
modifier|&
parameter_list|)
function_decl|;
name|AtomToAtom
name|_replacedAtoms
decl_stmt|;
name|NameToAtom
name|_nameTable
decl_stmt|;
name|AtomContentSet
name|_contentTable
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLD_CORE_SYMBOL_TABLE_H
end_comment

end_unit

