begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- lld/Core/Alias.h - Alias atoms -------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|/// \brief Provide alias atoms.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_CORE_ALIAS_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_CORE_ALIAS_H
end_define

begin_include
include|#
directive|include
file|"lld/Core/LLVM.h"
end_include

begin_include
include|#
directive|include
file|"lld/Core/Simple.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/Optional.h"
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_decl_stmt
name|namespace
name|lld
block|{
comment|// An AliasAtom is a zero-size atom representing an alias for other atom. It has
comment|// a LayoutAfter reference to the target atom, so that this atom and the target
comment|// atom will be laid out at the same location in the final result. Initially
comment|// the target atom is an undefined atom. Resolver will replace it with a defined
comment|// one.
comment|//
comment|// It does not have attributes itself. Most member function calls are forwarded
comment|// to the target atom.
name|class
name|AliasAtom
range|:
name|public
name|SimpleDefinedAtom
block|{
name|public
operator|:
name|AliasAtom
argument_list|(
argument|const File&file
argument_list|,
argument|StringRef name
argument_list|)
operator|:
name|SimpleDefinedAtom
argument_list|(
name|file
argument_list|)
block|,
name|_target
argument_list|(
name|nullptr
argument_list|)
block|,
name|_name
argument_list|(
name|name
argument_list|)
block|,
name|_merge
argument_list|(
name|DefinedAtom
operator|::
name|mergeNo
argument_list|)
block|,
name|_deadStrip
argument_list|(
argument|DefinedAtom::deadStripNormal
argument_list|)
block|{   }
name|StringRef
name|name
argument_list|()
specifier|const
name|override
block|{
return|return
name|_name
return|;
block|}
name|uint64_t
name|size
argument_list|()
specifier|const
name|override
block|{
return|return
literal|0
return|;
block|}
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|rawContent
argument_list|()
specifier|const
name|override
block|{
return|return
name|ArrayRef
operator|<
name|uint8_t
operator|>
operator|(
operator|)
return|;
block|}
name|Scope
name|scope
argument_list|()
specifier|const
name|override
block|{
name|getTarget
argument_list|()
block|;
return|return
name|_target
condition|?
name|_target
operator|->
name|scope
argument_list|()
else|:
name|scopeLinkageUnit
return|;
block|}
name|Merge
name|merge
argument_list|()
specifier|const
name|override
block|{
if|if
condition|(
name|_merge
operator|.
name|hasValue
argument_list|()
condition|)
return|return
name|_merge
operator|.
name|getValue
argument_list|()
return|;
name|getTarget
argument_list|()
block|;
return|return
name|_target
condition|?
name|_target
operator|->
name|merge
argument_list|()
else|:
name|mergeNo
return|;
block|}
name|void
name|setMerge
parameter_list|(
name|Merge
name|val
parameter_list|)
block|{
name|_merge
operator|=
name|val
expr_stmt|;
block|}
name|ContentType
name|contentType
argument_list|()
specifier|const
name|override
block|{
name|getTarget
argument_list|()
block|;
return|return
name|_target
condition|?
name|_target
operator|->
name|contentType
argument_list|()
else|:
name|typeUnknown
return|;
block|}
name|Interposable
name|interposable
argument_list|()
specifier|const
name|override
block|{
name|getTarget
argument_list|()
block|;
return|return
name|_target
condition|?
name|_target
operator|->
name|interposable
argument_list|()
else|:
name|interposeNo
return|;
block|}
name|SectionChoice
name|sectionChoice
argument_list|()
specifier|const
name|override
block|{
name|getTarget
argument_list|()
block|;
return|return
name|_target
condition|?
name|_target
operator|->
name|sectionChoice
argument_list|()
else|:
name|sectionBasedOnContent
return|;
block|}
name|StringRef
name|customSectionName
argument_list|()
specifier|const
name|override
block|{
name|getTarget
argument_list|()
block|;
return|return
name|_target
condition|?
name|_target
operator|->
name|customSectionName
argument_list|()
else|:
name|StringRef
argument_list|(
literal|""
argument_list|)
return|;
block|}
name|DeadStripKind
name|deadStrip
argument_list|()
specifier|const
name|override
block|{
return|return
name|_deadStrip
return|;
block|}
name|void
name|setDeadStrip
parameter_list|(
name|DeadStripKind
name|val
parameter_list|)
block|{
name|_deadStrip
operator|=
name|val
expr_stmt|;
block|}
name|private
label|:
name|void
name|getTarget
argument_list|()
specifier|const
block|{
if|if
condition|(
name|_target
condition|)
return|return;
for|for
control|(
specifier|const
name|Reference
modifier|*
name|r
range|:
operator|*
name|this
control|)
block|{
if|if
condition|(
name|r
operator|->
name|kindNamespace
argument_list|()
operator|==
name|lld
operator|::
name|Reference
operator|::
name|KindNamespace
operator|::
name|all
operator|&&
name|r
operator|->
name|kindValue
argument_list|()
operator|==
name|lld
operator|::
name|Reference
operator|::
name|kindLayoutAfter
condition|)
block|{
name|_target
operator|=
name|dyn_cast
operator|<
name|DefinedAtom
operator|>
operator|(
name|r
operator|->
name|target
argument_list|()
operator|)
expr_stmt|;
return|return;
block|}
block|}
block|}
end_decl_stmt

begin_decl_stmt
name|mutable
specifier|const
name|DefinedAtom
modifier|*
name|_target
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|std
operator|::
name|string
name|_name
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|llvm
operator|::
name|Optional
operator|<
name|Merge
operator|>
name|_merge
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|DeadStripKind
name|_deadStrip
decl_stmt|;
end_decl_stmt

begin_comment
unit|};  }
comment|// end namespace lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

