begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// -*- C++ -*-
end_comment

begin_comment
comment|//===---------------------- support/win32/math_win32.h --------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is dual licensed under the MIT and the University of Illinois Open
end_comment

begin_comment
comment|// Source Licenses. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LIBCPP_SUPPORT_WIN32_MATH_WIN32_H
end_ifndef

begin_define
define|#
directive|define
name|_LIBCPP_SUPPORT_WIN32_MATH_WIN32_H
end_define

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_LIBCPP_MSVCRT
argument_list|)
end_if

begin_error
error|#
directive|error
literal|"This header complements Microsoft's C Runtime library, and should not be included otherwise."
end_error

begin_else
else|#
directive|else
end_else

begin_include
include|#
directive|include
file|<math.h>
end_include

begin_include
include|#
directive|include
file|<float.h>
end_include

begin_comment
comment|// _FPCLASS_PN etc.
end_comment

begin_include
include|#
directive|include
file|<crtversion.h>
end_include

begin_if
if|#
directive|if
operator|(
operator|(
name|_VC_CRT_MAJOR_VERSION
operator|-
literal|0
operator|)
operator|<
literal|12
operator|)
end_if

begin_comment
comment|// Necessary?
end_comment

begin_typedef
typedef|typedef
name|float
name|float_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|double
name|double_t
typedef|;
end_typedef

begin_function
name|_LIBCPP_ALWAYS_INLINE
name|bool
name|isfinite
parameter_list|(
name|double
name|num
parameter_list|)
block|{
return|return
name|_finite
argument_list|(
name|num
argument_list|)
operator|!=
literal|0
return|;
block|}
end_function

begin_function
name|_LIBCPP_ALWAYS_INLINE
name|bool
name|isinf
parameter_list|(
name|double
name|num
parameter_list|)
block|{
return|return
operator|!
name|isfinite
argument_list|(
name|num
argument_list|)
operator|&&
operator|!
name|_isnan
argument_list|(
name|num
argument_list|)
return|;
block|}
end_function

begin_function
name|_LIBCPP_ALWAYS_INLINE
name|bool
name|isnan
parameter_list|(
name|double
name|num
parameter_list|)
block|{
return|return
name|_isnan
argument_list|(
name|num
argument_list|)
operator|!=
literal|0
return|;
block|}
end_function

begin_function
name|_LIBCPP_ALWAYS_INLINE
name|bool
name|isnormal
parameter_list|(
name|double
name|num
parameter_list|)
block|{
name|int
name|class_
init|=
name|_fpclass
argument_list|(
name|num
argument_list|)
decl_stmt|;
return|return
name|class_
operator|==
name|_FPCLASS_NN
operator|||
name|class_
operator|==
name|_FPCLASS_PN
return|;
block|}
end_function

begin_function
name|_LIBCPP_ALWAYS_INLINE
name|bool
name|isgreater
parameter_list|(
name|double
name|x
parameter_list|,
name|double
name|y
parameter_list|)
block|{
if|if
condition|(
name|_fpclass
argument_list|(
name|x
argument_list|)
operator|==
name|_FPCLASS_SNAN
operator|||
name|_fpclass
argument_list|(
name|y
argument_list|)
operator|==
name|_FPCLASS_SNAN
condition|)
return|return
name|false
return|;
else|else
return|return
name|x
operator|>
name|y
return|;
block|}
end_function

begin_function
name|_LIBCPP_ALWAYS_INLINE
name|bool
name|isgreaterequal
parameter_list|(
name|double
name|x
parameter_list|,
name|double
name|y
parameter_list|)
block|{
if|if
condition|(
name|_fpclass
argument_list|(
name|x
argument_list|)
operator|==
name|_FPCLASS_SNAN
operator|||
name|_fpclass
argument_list|(
name|y
argument_list|)
operator|==
name|_FPCLASS_SNAN
condition|)
return|return
name|false
return|;
else|else
return|return
name|x
operator|>=
name|y
return|;
block|}
end_function

begin_function
name|_LIBCPP_ALWAYS_INLINE
name|bool
name|isless
parameter_list|(
name|double
name|x
parameter_list|,
name|double
name|y
parameter_list|)
block|{
if|if
condition|(
name|_fpclass
argument_list|(
name|x
argument_list|)
operator|==
name|_FPCLASS_SNAN
operator|||
name|_fpclass
argument_list|(
name|y
argument_list|)
operator|==
name|_FPCLASS_SNAN
condition|)
return|return
name|false
return|;
else|else
return|return
name|x
operator|<
name|y
return|;
block|}
end_function

begin_function
name|_LIBCPP_ALWAYS_INLINE
name|bool
name|islessequal
parameter_list|(
name|double
name|x
parameter_list|,
name|double
name|y
parameter_list|)
block|{
if|if
condition|(
operator|::
name|_fpclass
argument_list|(
name|x
argument_list|)
operator|==
name|_FPCLASS_SNAN
operator|||
operator|::
name|_fpclass
argument_list|(
name|y
argument_list|)
operator|==
name|_FPCLASS_SNAN
condition|)
return|return
name|false
return|;
else|else
return|return
name|x
operator|<=
name|y
return|;
block|}
end_function

begin_function
name|_LIBCPP_ALWAYS_INLINE
name|bool
name|islessgreater
parameter_list|(
name|double
name|x
parameter_list|,
name|double
name|y
parameter_list|)
block|{
if|if
condition|(
operator|::
name|_fpclass
argument_list|(
name|x
argument_list|)
operator|==
name|_FPCLASS_SNAN
operator|||
operator|::
name|_fpclass
argument_list|(
name|y
argument_list|)
operator|==
name|_FPCLASS_SNAN
condition|)
return|return
name|false
return|;
else|else
return|return
name|x
operator|<
name|y
operator|||
name|x
operator|>
name|y
return|;
block|}
end_function

begin_function
name|_LIBCPP_ALWAYS_INLINE
name|bool
name|isunordered
parameter_list|(
name|double
name|x
parameter_list|,
name|double
name|y
parameter_list|)
block|{
return|return
name|isnan
argument_list|(
name|x
argument_list|)
operator|||
name|isnan
argument_list|(
name|y
argument_list|)
return|;
block|}
end_function

begin_function
name|_LIBCPP_ALWAYS_INLINE
name|bool
name|signbit
parameter_list|(
name|double
name|num
parameter_list|)
block|{
switch|switch
condition|(
name|_fpclass
argument_list|(
name|num
argument_list|)
condition|)
block|{
case|case
name|_FPCLASS_SNAN
case|:
case|case
name|_FPCLASS_QNAN
case|:
case|case
name|_FPCLASS_NINF
case|:
case|case
name|_FPCLASS_NN
case|:
case|case
name|_FPCLASS_ND
case|:
case|case
name|_FPCLASS_NZ
case|:
return|return
name|true
return|;
case|case
name|_FPCLASS_PZ
case|:
case|case
name|_FPCLASS_PD
case|:
case|case
name|_FPCLASS_PN
case|:
case|case
name|_FPCLASS_PINF
case|:
return|return
name|false
return|;
block|}
return|return
name|false
return|;
block|}
end_function

begin_function
name|_LIBCPP_ALWAYS_INLINE
name|float
name|copysignf
parameter_list|(
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|)
block|{
return|return
operator|(
name|signbit
argument_list|(
name|x
argument_list|)
operator|!=
name|signbit
argument_list|(
name|y
argument_list|)
condition|?
operator|-
name|x
else|:
name|x
operator|)
return|;
block|}
end_function

begin_function
name|_LIBCPP_ALWAYS_INLINE
name|double
name|copysign
parameter_list|(
name|double
name|x
parameter_list|,
name|double
name|y
parameter_list|)
block|{
return|return
operator|::
name|_copysign
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
return|;
block|}
end_function

begin_function
name|_LIBCPP_ALWAYS_INLINE
name|double
name|copysignl
parameter_list|(
name|long
name|double
name|x
parameter_list|,
name|long
name|double
name|y
parameter_list|)
block|{
return|return
operator|::
name|_copysignl
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
return|;
block|}
end_function

begin_function
name|_LIBCPP_ALWAYS_INLINE
name|int
name|fpclassify
parameter_list|(
name|double
name|num
parameter_list|)
block|{
return|return
name|_fpclass
argument_list|(
name|num
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// _LIBCPP_MSVCRT
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// _LIBCPP_SUPPORT_WIN32_MATH_WIN32_H
end_comment

end_unit

