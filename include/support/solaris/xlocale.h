begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is dual licensed under the MIT and the University of Illinois Open
end_comment

begin_comment
comment|// Source Licenses. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|////////////////////////////////////////////////////////////////////////////////
end_comment

begin_comment
comment|// Minimal xlocale implementation for Solaris.  This implements the subset of
end_comment

begin_comment
comment|// the xlocale APIs that libc++ depends on.
end_comment

begin_comment
comment|////////////////////////////////////////////////////////////////////////////////
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__XLOCALE_H_INCLUDED
end_ifndef

begin_define
define|#
directive|define
name|__XLOCALE_H_INCLUDED
end_define

begin_include
include|#
directive|include
file|<stdlib.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
name|int
name|snprintf_l
parameter_list|(
name|char
modifier|*
name|__s
parameter_list|,
name|size_t
name|__n
parameter_list|,
name|locale_t
name|__l
parameter_list|,
specifier|const
name|char
modifier|*
name|__format
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
name|int
name|asprintf_l
parameter_list|(
name|char
modifier|*
modifier|*
name|__s
parameter_list|,
name|locale_t
name|__l
parameter_list|,
specifier|const
name|char
modifier|*
name|__format
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
name|int
name|sscanf_l
parameter_list|(
specifier|const
name|char
modifier|*
name|__s
parameter_list|,
name|locale_t
name|__l
parameter_list|,
specifier|const
name|char
modifier|*
name|__format
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
name|int
name|toupper_l
parameter_list|(
name|int
name|__c
parameter_list|,
name|locale_t
name|__l
parameter_list|)
function_decl|;
name|int
name|tolower_l
parameter_list|(
name|int
name|__c
parameter_list|,
name|locale_t
name|__l
parameter_list|)
function_decl|;
name|struct
name|lconv
modifier|*
name|localeconv
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|struct
name|lconv
modifier|*
name|localeconv_l
parameter_list|(
name|locale_t
name|__l
parameter_list|)
function_decl|;
comment|// FIXME: These are quick-and-dirty hacks to make things pretend to work
specifier|static
specifier|inline
name|long
name|long
name|strtoll_l
parameter_list|(
specifier|const
name|char
modifier|*
name|__nptr
parameter_list|,
name|char
modifier|*
modifier|*
name|__endptr
parameter_list|,
name|int
name|__base
parameter_list|,
name|locale_t
name|__loc
parameter_list|)
block|{
return|return
name|strtoll
argument_list|(
name|__nptr
argument_list|,
name|__endptr
argument_list|,
name|__base
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|long
name|strtol_l
parameter_list|(
specifier|const
name|char
modifier|*
name|__nptr
parameter_list|,
name|char
modifier|*
modifier|*
name|__endptr
parameter_list|,
name|int
name|__base
parameter_list|,
name|locale_t
name|__loc
parameter_list|)
block|{
return|return
name|strtol
argument_list|(
name|__nptr
argument_list|,
name|__endptr
argument_list|,
name|__base
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|unsigned
name|long
name|long
name|strtoull_l
parameter_list|(
specifier|const
name|char
modifier|*
name|__nptr
parameter_list|,
name|char
modifier|*
modifier|*
name|__endptr
parameter_list|,
name|int
name|__base
parameter_list|,
name|locale_t
name|__loc
parameter_list|)
block|{
return|return
name|strtoull
argument_list|(
name|__nptr
argument_list|,
name|__endptr
argument_list|,
name|__base
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|unsigned
name|long
name|strtoul_l
parameter_list|(
specifier|const
name|char
modifier|*
name|__nptr
parameter_list|,
name|char
modifier|*
modifier|*
name|__endptr
parameter_list|,
name|int
name|__base
parameter_list|,
name|locale_t
name|__loc
parameter_list|)
block|{
return|return
name|strtoul
argument_list|(
name|__nptr
argument_list|,
name|__endptr
argument_list|,
name|__base
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|float
name|strtof_l
parameter_list|(
specifier|const
name|char
modifier|*
name|__nptr
parameter_list|,
name|char
modifier|*
modifier|*
name|__endptr
parameter_list|,
name|locale_t
name|__loc
parameter_list|)
block|{
return|return
name|strtof
argument_list|(
name|__nptr
argument_list|,
name|__endptr
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|double
name|strtod_l
parameter_list|(
specifier|const
name|char
modifier|*
name|__nptr
parameter_list|,
name|char
modifier|*
modifier|*
name|__endptr
parameter_list|,
name|locale_t
name|__loc
parameter_list|)
block|{
return|return
name|strtod
argument_list|(
name|__nptr
argument_list|,
name|__endptr
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|long
name|double
name|strtold_l
parameter_list|(
specifier|const
name|char
modifier|*
name|__nptr
parameter_list|,
name|char
modifier|*
modifier|*
name|__endptr
parameter_list|,
name|locale_t
name|__loc
parameter_list|)
block|{
return|return
name|strtold
argument_list|(
name|__nptr
argument_list|,
name|__endptr
argument_list|)
return|;
block|}
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

