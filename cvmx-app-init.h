begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/***********************license start***************  * Copyright (c) 2003-2012  Cavium Inc. (support@cavium.com). All rights  * reserved.  *  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *  *   * Redistributions in binary form must reproduce the above  *     copyright notice, this list of conditions and the following  *     disclaimer in the documentation and/or other materials provided  *     with the distribution.   *   * Neither the name of Cavium Inc. nor the names of  *     its contributors may be used to endorse or promote products  *     derived from this software without specific prior written  *     permission.   * This Software, including technical data, may be subject to U.S. export  control  * laws, including the U.S. Export Administration Act and its  associated  * regulations, and may be subject to export or import  regulations in other  * countries.   * TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"  * AND WITH ALL FAULTS AND CAVIUM INC. MAKES NO PROMISES, REPRESENTATIONS OR  * WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO  * THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY REPRESENTATION OR  * DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT DEFECTS, AND CAVIUM  * SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES OF TITLE,  * MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF  * VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR  * CORRESPONDENCE TO DESCRIPTION. THE ENTIRE  RISK ARISING OUT OF USE OR  * PERFORMANCE OF THE SOFTWARE LIES WITH YOU.  ***********************license end**************************************/
end_comment

begin_comment
comment|/**  * @file  * Header file for simple executive application initialization.  This defines  * part of the ABI between the bootloader and the application.  *<hr>$Revision: 70327 $<hr>  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CVMX_APP_INIT_H__
end_ifndef

begin_define
define|#
directive|define
name|__CVMX_APP_INIT_H__
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* Current major and minor versions of the CVMX bootinfo block that is passed ** from the bootloader to the application.  This is versioned so that applications ** can properly handle multiple bootloader versions. */
define|#
directive|define
name|CVMX_BOOTINFO_MAJ_VER
value|1
define|#
directive|define
name|CVMX_BOOTINFO_MIN_VER
value|3
if|#
directive|if
operator|(
name|CVMX_BOOTINFO_MAJ_VER
operator|==
literal|1
operator|)
define|#
directive|define
name|CVMX_BOOTINFO_OCTEON_SERIAL_LEN
value|20
comment|/* This structure is populated by the bootloader.  For binary ** compatibility the only changes that should be made are ** adding members to the end of the structure, and the minor ** version should be incremented at that time. ** If an incompatible change is made, the major version ** must be incremented, and the minor version should be reset ** to 0. */
struct|struct
name|cvmx_bootinfo
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|major_version
decl_stmt|;
name|uint32_t
name|minor_version
decl_stmt|;
name|uint64_t
name|stack_top
decl_stmt|;
name|uint64_t
name|heap_base
decl_stmt|;
name|uint64_t
name|heap_end
decl_stmt|;
name|uint64_t
name|desc_vaddr
decl_stmt|;
name|uint32_t
name|exception_base_addr
decl_stmt|;
name|uint32_t
name|stack_size
decl_stmt|;
name|uint32_t
name|flags
decl_stmt|;
name|uint32_t
name|core_mask
decl_stmt|;
name|uint32_t
name|dram_size
decl_stmt|;
comment|/**< DRAM size in megabytes */
name|uint32_t
name|phy_mem_desc_addr
decl_stmt|;
comment|/**< physical address of free memory descriptor block*/
name|uint32_t
name|debugger_flags_base_addr
decl_stmt|;
comment|/**< used to pass flags from app to debugger */
name|uint32_t
name|eclock_hz
decl_stmt|;
comment|/**< CPU clock speed, in hz */
name|uint32_t
name|dclock_hz
decl_stmt|;
comment|/**< DRAM clock speed, in hz */
name|uint32_t
name|reserved0
decl_stmt|;
name|uint16_t
name|board_type
decl_stmt|;
name|uint8_t
name|board_rev_major
decl_stmt|;
name|uint8_t
name|board_rev_minor
decl_stmt|;
name|uint16_t
name|reserved1
decl_stmt|;
name|uint8_t
name|reserved2
decl_stmt|;
name|uint8_t
name|reserved3
decl_stmt|;
name|char
name|board_serial_number
index|[
name|CVMX_BOOTINFO_OCTEON_SERIAL_LEN
index|]
decl_stmt|;
name|uint8_t
name|mac_addr_base
index|[
literal|6
index|]
decl_stmt|;
name|uint8_t
name|mac_addr_count
decl_stmt|;
if|#
directive|if
operator|(
name|CVMX_BOOTINFO_MIN_VER
operator|>=
literal|1
operator|)
comment|/* Several boards support compact flash on the Octeon boot bus.  The CF     ** memory spaces may be mapped to different addresses on different boards.     ** These are the physical addresses, so care must be taken to use the correct     ** XKPHYS/KSEG0 addressing depending on the application's ABI.     ** These values will be 0 if CF is not present */
name|uint64_t
name|compact_flash_common_base_addr
decl_stmt|;
name|uint64_t
name|compact_flash_attribute_base_addr
decl_stmt|;
comment|/* Base address of the LED display (as on EBT3000 board)     ** This will be 0 if LED display not present. */
name|uint64_t
name|led_display_base_addr
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
operator|(
name|CVMX_BOOTINFO_MIN_VER
operator|>=
literal|2
operator|)
name|uint32_t
name|dfa_ref_clock_hz
decl_stmt|;
comment|/**< DFA reference clock in hz (if applicable)*/
name|uint32_t
name|config_flags
decl_stmt|;
comment|/**< flags indicating various configuration options.  These flags supercede                             ** the 'flags' variable and should be used instead if available */
endif|#
directive|endif
if|#
directive|if
operator|(
name|CVMX_BOOTINFO_MIN_VER
operator|>=
literal|3
operator|)
name|uint64_t
name|fdt_addr
decl_stmt|;
comment|/**< Address of the OF Flattened Device Tree structure describing the board. */
endif|#
directive|endif
else|#
directive|else
comment|/* __BIG_ENDIAN */
comment|/* 	 * Little-Endian: When the CPU mode is switched to 	 * little-endian, the view of the structure has some of the 	 * fields swapped. 	 */
name|uint32_t
name|minor_version
decl_stmt|;
name|uint32_t
name|major_version
decl_stmt|;
name|uint64_t
name|stack_top
decl_stmt|;
name|uint64_t
name|heap_base
decl_stmt|;
name|uint64_t
name|heap_end
decl_stmt|;
name|uint64_t
name|desc_vaddr
decl_stmt|;
name|uint32_t
name|stack_size
decl_stmt|;
name|uint32_t
name|exception_base_addr
decl_stmt|;
name|uint32_t
name|core_mask
decl_stmt|;
name|uint32_t
name|flags
decl_stmt|;
name|uint32_t
name|phy_mem_desc_addr
decl_stmt|;
name|uint32_t
name|dram_size
decl_stmt|;
name|uint32_t
name|eclock_hz
decl_stmt|;
name|uint32_t
name|debugger_flags_base_addr
decl_stmt|;
name|uint32_t
name|reserved0
decl_stmt|;
name|uint32_t
name|dclock_hz
decl_stmt|;
name|uint8_t
name|reserved3
decl_stmt|;
name|uint8_t
name|reserved2
decl_stmt|;
name|uint16_t
name|reserved1
decl_stmt|;
name|uint8_t
name|board_rev_minor
decl_stmt|;
name|uint8_t
name|board_rev_major
decl_stmt|;
name|uint16_t
name|board_type
decl_stmt|;
union|union
name|cvmx_bootinfo_scramble
block|{
comment|/* Must byteswap these four words so that...*/
name|uint64_t
name|s
index|[
literal|4
index|]
decl_stmt|;
comment|/* ... this strucure has the proper data arrangement. */
struct|struct
block|{
name|char
name|board_serial_number
index|[
name|CVMX_BOOTINFO_OCTEON_SERIAL_LEN
index|]
decl_stmt|;
name|uint8_t
name|mac_addr_base
index|[
literal|6
index|]
decl_stmt|;
name|uint8_t
name|mac_addr_count
decl_stmt|;
name|uint8_t
name|pad
index|[
literal|5
index|]
decl_stmt|;
block|}
name|le
struct|;
block|}
name|scramble1
union|;
if|#
directive|if
operator|(
name|CVMX_BOOTINFO_MIN_VER
operator|>=
literal|1
operator|)
name|uint64_t
name|compact_flash_common_base_addr
decl_stmt|;
name|uint64_t
name|compact_flash_attribute_base_addr
decl_stmt|;
name|uint64_t
name|led_display_base_addr
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
operator|(
name|CVMX_BOOTINFO_MIN_VER
operator|>=
literal|2
operator|)
name|uint32_t
name|config_flags
decl_stmt|;
name|uint32_t
name|dfa_ref_clock_hz
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
operator|(
name|CVMX_BOOTINFO_MIN_VER
operator|>=
literal|3
operator|)
name|uint64_t
name|fdt_addr
decl_stmt|;
endif|#
directive|endif
endif|#
directive|endif
block|}
struct|;
typedef|typedef
name|struct
name|cvmx_bootinfo
name|cvmx_bootinfo_t
typedef|;
define|#
directive|define
name|CVMX_BOOTINFO_CFG_FLAG_PCI_HOST
value|(1ull<< 0)
define|#
directive|define
name|CVMX_BOOTINFO_CFG_FLAG_PCI_TARGET
value|(1ull<< 1)
define|#
directive|define
name|CVMX_BOOTINFO_CFG_FLAG_DEBUG
value|(1ull<< 2)
define|#
directive|define
name|CVMX_BOOTINFO_CFG_FLAG_NO_MAGIC
value|(1ull<< 3)
comment|/* This flag is set if the TLB mappings are not contained in the ** 0x10000000 - 0x20000000 boot bus region. */
define|#
directive|define
name|CVMX_BOOTINFO_CFG_FLAG_OVERSIZE_TLB_MAPPING
value|(1ull<< 4)
define|#
directive|define
name|CVMX_BOOTINFO_CFG_FLAG_BREAK
value|(1ull<< 5)
endif|#
directive|endif
comment|/*   (CVMX_BOOTINFO_MAJ_VER == 1) */
comment|/* Type defines for board and chip types */
enum|enum
name|cvmx_board_types_enum
block|{
name|CVMX_BOARD_TYPE_NULL
init|=
literal|0
block|,
name|CVMX_BOARD_TYPE_SIM
init|=
literal|1
block|,
name|CVMX_BOARD_TYPE_EBT3000
init|=
literal|2
block|,
name|CVMX_BOARD_TYPE_KODAMA
init|=
literal|3
block|,
name|CVMX_BOARD_TYPE_NIAGARA
init|=
literal|4
block|,
comment|/* Obsolete, no longer supported */
name|CVMX_BOARD_TYPE_NAC38
init|=
literal|5
block|,
comment|/* Obsolete, no longer supported */
name|CVMX_BOARD_TYPE_THUNDER
init|=
literal|6
block|,
name|CVMX_BOARD_TYPE_TRANTOR
init|=
literal|7
block|,
comment|/* Obsolete, no longer supported */
name|CVMX_BOARD_TYPE_EBH3000
init|=
literal|8
block|,
name|CVMX_BOARD_TYPE_EBH3100
init|=
literal|9
block|,
name|CVMX_BOARD_TYPE_HIKARI
init|=
literal|10
block|,
name|CVMX_BOARD_TYPE_CN3010_EVB_HS5
init|=
literal|11
block|,
name|CVMX_BOARD_TYPE_CN3005_EVB_HS5
init|=
literal|12
block|,
name|CVMX_BOARD_TYPE_KBP
init|=
literal|13
block|,
name|CVMX_BOARD_TYPE_CN3020_EVB_HS5
init|=
literal|14
block|,
comment|/* Deprecated, CVMX_BOARD_TYPE_CN3010_EVB_HS5 supports the CN3020 */
name|CVMX_BOARD_TYPE_EBT5800
init|=
literal|15
block|,
name|CVMX_BOARD_TYPE_NICPRO2
init|=
literal|16
block|,
name|CVMX_BOARD_TYPE_EBH5600
init|=
literal|17
block|,
name|CVMX_BOARD_TYPE_EBH5601
init|=
literal|18
block|,
name|CVMX_BOARD_TYPE_EBH5200
init|=
literal|19
block|,
name|CVMX_BOARD_TYPE_BBGW_REF
init|=
literal|20
block|,
name|CVMX_BOARD_TYPE_NIC_XLE_4G
init|=
literal|21
block|,
name|CVMX_BOARD_TYPE_EBT5600
init|=
literal|22
block|,
name|CVMX_BOARD_TYPE_EBH5201
init|=
literal|23
block|,
name|CVMX_BOARD_TYPE_EBT5200
init|=
literal|24
block|,
name|CVMX_BOARD_TYPE_CB5600
init|=
literal|25
block|,
name|CVMX_BOARD_TYPE_CB5601
init|=
literal|26
block|,
name|CVMX_BOARD_TYPE_CB5200
init|=
literal|27
block|,
name|CVMX_BOARD_TYPE_GENERIC
init|=
literal|28
block|,
comment|/* Special 'generic' board type, supports many boards */
name|CVMX_BOARD_TYPE_EBH5610
init|=
literal|29
block|,
name|CVMX_BOARD_TYPE_LANAI2_A
init|=
literal|30
block|,
name|CVMX_BOARD_TYPE_LANAI2_U
init|=
literal|31
block|,
name|CVMX_BOARD_TYPE_EBB5600
init|=
literal|32
block|,
name|CVMX_BOARD_TYPE_EBB6300
init|=
literal|33
block|,
name|CVMX_BOARD_TYPE_NIC_XLE_10G
init|=
literal|34
block|,
name|CVMX_BOARD_TYPE_LANAI2_G
init|=
literal|35
block|,
name|CVMX_BOARD_TYPE_EBT5810
init|=
literal|36
block|,
name|CVMX_BOARD_TYPE_NIC10E
init|=
literal|37
block|,
name|CVMX_BOARD_TYPE_EP6300C
init|=
literal|38
block|,
name|CVMX_BOARD_TYPE_EBB6800
init|=
literal|39
block|,
name|CVMX_BOARD_TYPE_NIC4E
init|=
literal|40
block|,
name|CVMX_BOARD_TYPE_NIC2E
init|=
literal|41
block|,
name|CVMX_BOARD_TYPE_EBB6600
init|=
literal|42
block|,
name|CVMX_BOARD_TYPE_REDWING
init|=
literal|43
block|,
name|CVMX_BOARD_TYPE_NIC68_4
init|=
literal|44
block|,
name|CVMX_BOARD_TYPE_NIC10E_66
init|=
literal|45
block|,
name|CVMX_BOARD_TYPE_EBB6100
init|=
literal|46
block|,
name|CVMX_BOARD_TYPE_EVB7100
init|=
literal|47
block|,
name|CVMX_BOARD_TYPE_MAX
block|,
comment|/* NOTE:  256-257 are being used by a customer. */
comment|/* The range from CVMX_BOARD_TYPE_MAX to CVMX_BOARD_TYPE_CUST_DEFINED_MIN is reserved     ** for future SDK use. */
comment|/* Set aside a range for customer boards.  These numbers are managed     ** by Cavium.     */
name|CVMX_BOARD_TYPE_CUST_DEFINED_MIN
init|=
literal|10000
block|,
name|CVMX_BOARD_TYPE_CUST_WSX16
init|=
literal|10001
block|,
name|CVMX_BOARD_TYPE_CUST_NS0216
init|=
literal|10002
block|,
name|CVMX_BOARD_TYPE_CUST_NB5
init|=
literal|10003
block|,
name|CVMX_BOARD_TYPE_CUST_WMR500
init|=
literal|10004
block|,
name|CVMX_BOARD_TYPE_CUST_ITB101
init|=
literal|10005
block|,
name|CVMX_BOARD_TYPE_CUST_NTE102
init|=
literal|10006
block|,
name|CVMX_BOARD_TYPE_CUST_AGS103
init|=
literal|10007
block|,
name|CVMX_BOARD_TYPE_CUST_GST104
init|=
literal|10008
block|,
name|CVMX_BOARD_TYPE_CUST_GCT105
init|=
literal|10009
block|,
name|CVMX_BOARD_TYPE_CUST_AGS106
init|=
literal|10010
block|,
name|CVMX_BOARD_TYPE_CUST_SGM107
init|=
literal|10011
block|,
name|CVMX_BOARD_TYPE_CUST_GCT108
init|=
literal|10012
block|,
name|CVMX_BOARD_TYPE_CUST_AGS109
init|=
literal|10013
block|,
name|CVMX_BOARD_TYPE_CUST_GCT110
init|=
literal|10014
block|,
name|CVMX_BOARD_TYPE_CUST_L2_AIR_SENDER
init|=
literal|10015
block|,
name|CVMX_BOARD_TYPE_CUST_L2_AIR_RECEIVER
init|=
literal|10016
block|,
name|CVMX_BOARD_TYPE_CUST_L2_ACCTON2_TX
init|=
literal|10017
block|,
name|CVMX_BOARD_TYPE_CUST_L2_ACCTON2_RX
init|=
literal|10018
block|,
name|CVMX_BOARD_TYPE_CUST_L2_WSTRNSNIC_TX
init|=
literal|10019
block|,
name|CVMX_BOARD_TYPE_CUST_L2_WSTRNSNIC_RX
init|=
literal|10020
block|,
name|CVMX_BOARD_TYPE_CUST_L2_ZINWELL
init|=
literal|10021
block|,
name|CVMX_BOARD_TYPE_CUST_DEFINED_MAX
init|=
literal|20000
block|,
comment|/* Set aside a range for customer private use.  The SDK won't     ** use any numbers in this range. */
name|CVMX_BOARD_TYPE_CUST_PRIVATE_MIN
init|=
literal|20001
block|,
name|CVMX_BOARD_TYPE_CUST_PRIVATE_MAX
init|=
literal|30000
block|,
comment|/* Range for IO modules */
name|CVMX_BOARD_TYPE_MODULE_MIN
init|=
literal|30001
block|,
name|CVMX_BOARD_TYPE_MODULE_PCIE_RC_4X
init|=
literal|30002
block|,
name|CVMX_BOARD_TYPE_MODULE_PCIE_EP_4X
init|=
literal|30003
block|,
name|CVMX_BOARD_TYPE_MODULE_SGMII_MARVEL
init|=
literal|30004
block|,
name|CVMX_BOARD_TYPE_MODULE_SFPPLUS_BCM
init|=
literal|30005
block|,
name|CVMX_BOARD_TYPE_MODULE_SRIO
init|=
literal|30006
block|,
name|CVMX_BOARD_TYPE_MODULE_EBB5600_QLM0
init|=
literal|30007
block|,
name|CVMX_BOARD_TYPE_MODULE_EBB5600_QLM1
init|=
literal|30008
block|,
name|CVMX_BOARD_TYPE_MODULE_EBB5600_QLM2
init|=
literal|30009
block|,
name|CVMX_BOARD_TYPE_MODULE_EBB5600_QLM3
init|=
literal|30010
block|,
name|CVMX_BOARD_TYPE_MODULE_MAX
init|=
literal|31000
comment|/* The remaining range is reserved for future use. */
block|}
enum|;
enum|enum
name|cvmx_chip_types_enum
block|{
name|CVMX_CHIP_TYPE_NULL
init|=
literal|0
block|,
name|CVMX_CHIP_SIM_TYPE_DEPRECATED
init|=
literal|1
block|,
name|CVMX_CHIP_TYPE_OCTEON_SAMPLE
init|=
literal|2
block|,
name|CVMX_CHIP_TYPE_MAX
block|}
enum|;
comment|/* Compatability alias for NAC38 name change, planned to be removed from SDK 1.7 */
define|#
directive|define
name|CVMX_BOARD_TYPE_NAO38
value|CVMX_BOARD_TYPE_NAC38
comment|/* Functions to return string based on type */
define|#
directive|define
name|ENUM_BRD_TYPE_CASE
parameter_list|(
name|x
parameter_list|)
value|case x: return(#x + 16);
comment|/* Skip CVMX_BOARD_TYPE_ */
specifier|static
specifier|inline
specifier|const
name|char
modifier|*
name|cvmx_board_type_to_string
parameter_list|(
name|enum
name|cvmx_board_types_enum
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_NULL
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_SIM
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_EBT3000
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_KODAMA
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_NIAGARA
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_NAC38
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_THUNDER
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_TRANTOR
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_EBH3000
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_EBH3100
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_HIKARI
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_CN3010_EVB_HS5
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_CN3005_EVB_HS5
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_KBP
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_CN3020_EVB_HS5
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_EBT5800
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_NICPRO2
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_EBH5600
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_EBH5601
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_EBH5200
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_BBGW_REF
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_NIC_XLE_4G
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_EBT5600
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_EBH5201
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_EBT5200
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_CB5600
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_CB5601
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_CB5200
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_GENERIC
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_EBH5610
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_LANAI2_A
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_LANAI2_U
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_EBB5600
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_EBB6300
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_NIC_XLE_10G
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_LANAI2_G
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_EBT5810
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_NIC10E
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_EP6300C
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_EBB6800
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_NIC4E
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_NIC2E
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_EBB6600
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_REDWING
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_NIC68_4
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_NIC10E_66
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_EBB6100
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_EVB7100
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_MAX
argument_list|)
comment|/* Customer boards listed here */
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_CUST_DEFINED_MIN
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_CUST_WSX16
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_CUST_NS0216
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_CUST_NB5
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_CUST_WMR500
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_CUST_ITB101
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_CUST_NTE102
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_CUST_AGS103
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_CUST_GST104
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_CUST_GCT105
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_CUST_AGS106
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_CUST_SGM107
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_CUST_GCT108
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_CUST_AGS109
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_CUST_GCT110
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_CUST_L2_AIR_SENDER
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_CUST_L2_AIR_RECEIVER
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_CUST_L2_ACCTON2_TX
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_CUST_L2_ACCTON2_RX
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_CUST_L2_WSTRNSNIC_TX
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_CUST_L2_WSTRNSNIC_RX
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_CUST_L2_ZINWELL
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_CUST_DEFINED_MAX
argument_list|)
comment|/* Customer private range */
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_CUST_PRIVATE_MIN
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_CUST_PRIVATE_MAX
argument_list|)
comment|/* Module range */
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_MODULE_MIN
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_MODULE_PCIE_RC_4X
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_MODULE_PCIE_EP_4X
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_MODULE_SGMII_MARVEL
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_MODULE_SFPPLUS_BCM
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_MODULE_SRIO
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_MODULE_EBB5600_QLM0
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_MODULE_EBB5600_QLM1
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_MODULE_EBB5600_QLM2
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_MODULE_EBB5600_QLM3
argument_list|)
name|ENUM_BRD_TYPE_CASE
argument_list|(
argument|CVMX_BOARD_TYPE_MODULE_MAX
argument_list|)
block|}
return|return
literal|"Unsupported Board"
return|;
block|}
define|#
directive|define
name|ENUM_CHIP_TYPE_CASE
parameter_list|(
name|x
parameter_list|)
value|case x: return(#x + 15);
comment|/* Skip CVMX_CHIP_TYPE */
specifier|static
specifier|inline
specifier|const
name|char
modifier|*
name|cvmx_chip_type_to_string
parameter_list|(
name|enum
name|cvmx_chip_types_enum
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
name|ENUM_CHIP_TYPE_CASE
argument_list|(
argument|CVMX_CHIP_TYPE_NULL
argument_list|)
name|ENUM_CHIP_TYPE_CASE
argument_list|(
argument|CVMX_CHIP_SIM_TYPE_DEPRECATED
argument_list|)
name|ENUM_CHIP_TYPE_CASE
argument_list|(
argument|CVMX_CHIP_TYPE_OCTEON_SAMPLE
argument_list|)
name|ENUM_CHIP_TYPE_CASE
argument_list|(
argument|CVMX_CHIP_TYPE_MAX
argument_list|)
block|}
return|return
literal|"Unsupported Chip"
return|;
block|}
specifier|extern
name|int
name|cvmx_debug_uart
decl_stmt|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __CVMX_APP_INIT_H__ */
end_comment

end_unit

