begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===------------------------ __refstring ---------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is dual licensed under the MIT and the University of Illinois Open
end_comment

begin_comment
comment|// Source Licenses. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LIBCPP_REFSTRING_H
end_ifndef

begin_define
define|#
directive|define
name|_LIBCPP_REFSTRING_H
end_define

begin_include
include|#
directive|include
file|<__config>
end_include

begin_include
include|#
directive|include
file|<stdexcept>
end_include

begin_include
include|#
directive|include
file|<cstddef>
end_include

begin_include
include|#
directive|include
file|<cstring>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__APPLE__
end_ifdef

begin_include
include|#
directive|include
file|<dlfcn.h>
end_include

begin_include
include|#
directive|include
file|<mach-o/dyld.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
name|_LIBCPP_BEGIN_NAMESPACE_STD
name|namespace
name|__refstring_imp
block|{
name|namespace
block|{
typedef|typedef
name|int
name|count_t
typedef|;
struct|struct
name|_Rep_base
block|{
name|std
operator|::
name|size_t
name|len
expr_stmt|;
name|std
operator|::
name|size_t
name|cap
expr_stmt|;
name|count_t
name|count
decl_stmt|;
block|}
struct|;
specifier|inline
name|_Rep_base
modifier|*
name|rep_from_data
parameter_list|(
specifier|const
name|char
modifier|*
name|data_
parameter_list|)
function|noexcept
block|{
name|char
modifier|*
name|data
init|=
name|const_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|data_
operator|)
decl_stmt|;
return|return
name|reinterpret_cast
operator|<
name|_Rep_base
operator|*
operator|>
operator|(
name|data
operator|-
sizeof|sizeof
argument_list|(
name|_Rep_base
argument_list|)
operator|)
return|;
block|}
specifier|inline
name|char
modifier|*
name|data_from_rep
parameter_list|(
name|_Rep_base
modifier|*
name|rep
parameter_list|)
function|noexcept
block|{
name|char
modifier|*
name|data
init|=
name|reinterpret_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|rep
operator|)
decl_stmt|;
return|return
name|data
operator|+
sizeof|sizeof
argument_list|(
operator|*
name|rep
argument_list|)
return|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|__APPLE__
argument_list|)
specifier|inline
specifier|const
name|char
modifier|*
name|compute_gcc_empty_string_storage
parameter_list|()
function|_NOEXCEPT
block|{
name|void
modifier|*
name|handle
init|=
name|dlopen
argument_list|(
literal|"/usr/lib/libstdc++.6.dylib"
argument_list|,
name|RTLD_NOLOAD
argument_list|)
decl_stmt|;
if|if
condition|(
name|handle
operator|==
name|nullptr
condition|)
return|return
name|nullptr
return|;
name|void
modifier|*
name|sym
init|=
name|dlsym
argument_list|(
name|handle
argument_list|,
literal|"_ZNSs4_Rep20_S_empty_rep_storageE"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sym
operator|==
name|nullptr
condition|)
return|return
name|nullptr
return|;
return|return
name|data_from_rep
argument_list|(
name|reinterpret_cast
operator|<
name|_Rep_base
operator|*
operator|>
operator|(
name|sym
operator|)
argument_list|)
return|;
block|}
specifier|inline
specifier|const
name|char
modifier|*
name|get_gcc_empty_string_storage
parameter_list|()
function|_NOEXCEPT
block|{
specifier|static
specifier|const
name|char
modifier|*
name|p
init|=
name|compute_gcc_empty_string_storage
argument_list|()
decl_stmt|;
return|return
name|p
return|;
block|}
endif|#
directive|endif
block|}
block|}
end_decl_stmt

begin_comment
comment|// namespace __refstring_imp
end_comment

begin_decl_stmt
name|using
name|namespace
name|__refstring_imp
decl_stmt|;
end_decl_stmt

begin_expr_stmt
specifier|inline
name|__libcpp_refstring
operator|::
name|__libcpp_refstring
argument_list|(
argument|const char* msg
argument_list|)
block|{
name|std
operator|::
name|size_t
name|len
operator|=
name|strlen
argument_list|(
name|msg
argument_list|)
block|;
name|_Rep_base
operator|*
name|rep
operator|=
name|static_cast
operator|<
name|_Rep_base
operator|*
operator|>
operator|(
operator|::
name|operator
name|new
argument_list|(
sizeof|sizeof
argument_list|(
operator|*
name|rep
argument_list|)
operator|+
name|len
operator|+
literal|1
argument_list|)
operator|)
block|;
name|rep
operator|->
name|len
operator|=
name|len
block|;
name|rep
operator|->
name|cap
operator|=
name|len
block|;
name|rep
operator|->
name|count
operator|=
literal|0
block|;
name|char
operator|*
name|data
operator|=
name|data_from_rep
argument_list|(
name|rep
argument_list|)
block|;
name|std
operator|::
name|memcpy
argument_list|(
name|data
argument_list|,
name|msg
argument_list|,
name|len
operator|+
literal|1
argument_list|)
block|;
name|__imp_
operator|=
name|data
block|; }
specifier|inline
name|__libcpp_refstring
operator|::
name|__libcpp_refstring
argument_list|(
argument|const __libcpp_refstring&s
argument_list|)
name|_NOEXCEPT
operator|:
name|__imp_
argument_list|(
argument|s.__imp_
argument_list|)
block|{
if|if
condition|(
name|__uses_refcount
argument_list|()
condition|)
name|__sync_add_and_fetch
argument_list|(
operator|&
name|rep_from_data
argument_list|(
name|__imp_
argument_list|)
operator|->
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|__libcpp_refstring
operator|&
name|__libcpp_refstring
operator|::
name|operator
operator|=
operator|(
name|__libcpp_refstring
specifier|const
operator|&
name|s
operator|)
name|_NOEXCEPT
block|{
name|bool
name|adjust_old_count
operator|=
name|__uses_refcount
argument_list|()
block|;     struct
name|_Rep_base
operator|*
name|old_rep
operator|=
name|rep_from_data
argument_list|(
name|__imp_
argument_list|)
block|;
name|__imp_
operator|=
name|s
operator|.
name|__imp_
block|;
if|if
condition|(
name|__uses_refcount
argument_list|()
condition|)
name|__sync_add_and_fetch
argument_list|(
operator|&
name|rep_from_data
argument_list|(
name|__imp_
argument_list|)
operator|->
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|adjust_old_count
condition|)
block|{
if|if
condition|(
name|__sync_add_and_fetch
argument_list|(
operator|&
name|old_rep
operator|->
name|count
argument_list|,
name|count_t
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
operator|<
literal|0
condition|)
block|{
operator|::
name|operator
name|delete
argument_list|(
name|old_rep
argument_list|)
expr_stmt|;
block|}
block|}
end_if

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}  inline
name|__libcpp_refstring
operator|::
operator|~
name|__libcpp_refstring
argument_list|()
block|{
if|if
condition|(
name|__uses_refcount
argument_list|()
condition|)
block|{
name|_Rep_base
modifier|*
name|rep
init|=
name|rep_from_data
argument_list|(
name|__imp_
argument_list|)
decl_stmt|;
if|if
condition|(
name|__sync_add_and_fetch
argument_list|(
operator|&
name|rep
operator|->
name|count
argument_list|,
name|count_t
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
operator|<
literal|0
condition|)
block|{
operator|::
name|operator
name|delete
argument_list|(
name|rep
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|} }
specifier|inline
name|bool
name|__libcpp_refstring
operator|::
name|__uses_refcount
argument_list|()
specifier|const
block|{
ifdef|#
directive|ifdef
name|__APPLE__
return|return
name|__imp_
operator|!=
name|get_gcc_empty_string_storage
argument_list|()
return|;
end_expr_stmt

begin_else
else|#
directive|else
end_else

begin_return
return|return
name|true
return|;
end_return

begin_endif
endif|#
directive|endif
end_endif

begin_endif
unit|}  _LIBCPP_END_NAMESPACE_STD
endif|#
directive|endif
end_endif

begin_comment
comment|//_LIBCPP_REFSTRING_H
end_comment

end_unit

