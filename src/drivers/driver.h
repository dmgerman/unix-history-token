begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Driver interface definition  * Copyright (c) 2003-2010, Jouni Malinen<j@w1.fi>  *  * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License version 2 as  * published by the Free Software Foundation.  *  * Alternatively, this software may be distributed under the terms of BSD  * license.  *  * See README and COPYING for more details.  *  * This file defines a driver interface used by both %wpa_supplicant and  * hostapd. The first part of the file defines data structures used in various  * driver operations. This is followed by the struct wpa_driver_ops that each  * driver wrapper will beed to define with callback functions for requesting  * driver operations. After this, there are definitions for driver event  * reporting with wpa_supplicant_event() and some convenience helper functions  * that can be used to report events.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|DRIVER_H
end_ifndef

begin_define
define|#
directive|define
name|DRIVER_H
end_define

begin_define
define|#
directive|define
name|WPA_SUPPLICANT_DRIVER_VERSION
value|4
end_define

begin_include
include|#
directive|include
file|"common/defs.h"
end_include

begin_define
define|#
directive|define
name|HOSTAPD_CHAN_DISABLED
value|0x00000001
end_define

begin_define
define|#
directive|define
name|HOSTAPD_CHAN_PASSIVE_SCAN
value|0x00000002
end_define

begin_define
define|#
directive|define
name|HOSTAPD_CHAN_NO_IBSS
value|0x00000004
end_define

begin_define
define|#
directive|define
name|HOSTAPD_CHAN_RADAR
value|0x00000008
end_define

begin_comment
comment|/**  * struct hostapd_channel_data - Channel information  */
end_comment

begin_struct
struct|struct
name|hostapd_channel_data
block|{
comment|/** 	 * chan - Channel number (IEEE 802.11) 	 */
name|short
name|chan
decl_stmt|;
comment|/** 	 * freq - Frequency in MHz 	 */
name|short
name|freq
decl_stmt|;
comment|/** 	 * flag - Channel flags (HOSTAPD_CHAN_*) 	 */
name|int
name|flag
decl_stmt|;
comment|/** 	 * max_tx_power - maximum transmit power in dBm 	 */
name|u8
name|max_tx_power
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * struct hostapd_hw_modes - Supported hardware mode information  */
end_comment

begin_struct
struct|struct
name|hostapd_hw_modes
block|{
comment|/** 	 * mode - Hardware mode 	 */
name|enum
name|hostapd_hw_mode
name|mode
decl_stmt|;
comment|/** 	 * num_channels - Number of entries in the channels array 	 */
name|int
name|num_channels
decl_stmt|;
comment|/** 	 * channels - Array of supported channels 	 */
name|struct
name|hostapd_channel_data
modifier|*
name|channels
decl_stmt|;
comment|/** 	 * num_rates - Number of entries in the rates array 	 */
name|int
name|num_rates
decl_stmt|;
comment|/** 	 * rates - Array of supported rates in 100 kbps units 	 */
name|int
modifier|*
name|rates
decl_stmt|;
comment|/** 	 * ht_capab - HT (IEEE 802.11n) capabilities 	 */
name|u16
name|ht_capab
decl_stmt|;
comment|/** 	 * mcs_set - MCS (IEEE 802.11n) rate parameters 	 */
name|u8
name|mcs_set
index|[
literal|16
index|]
decl_stmt|;
comment|/** 	 * a_mpdu_params - A-MPDU (IEEE 802.11n) parameters 	 */
name|u8
name|a_mpdu_params
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|IEEE80211_MODE_INFRA
value|0
end_define

begin_define
define|#
directive|define
name|IEEE80211_MODE_IBSS
value|1
end_define

begin_define
define|#
directive|define
name|IEEE80211_MODE_AP
value|2
end_define

begin_define
define|#
directive|define
name|IEEE80211_CAP_ESS
value|0x0001
end_define

begin_define
define|#
directive|define
name|IEEE80211_CAP_IBSS
value|0x0002
end_define

begin_define
define|#
directive|define
name|IEEE80211_CAP_PRIVACY
value|0x0010
end_define

begin_define
define|#
directive|define
name|WPA_SCAN_QUAL_INVALID
value|BIT(0)
end_define

begin_define
define|#
directive|define
name|WPA_SCAN_NOISE_INVALID
value|BIT(1)
end_define

begin_define
define|#
directive|define
name|WPA_SCAN_LEVEL_INVALID
value|BIT(2)
end_define

begin_define
define|#
directive|define
name|WPA_SCAN_LEVEL_DBM
value|BIT(3)
end_define

begin_define
define|#
directive|define
name|WPA_SCAN_AUTHENTICATED
value|BIT(4)
end_define

begin_define
define|#
directive|define
name|WPA_SCAN_ASSOCIATED
value|BIT(5)
end_define

begin_comment
comment|/**  * struct wpa_scan_res - Scan result for an BSS/IBSS  * @flags: information flags about the BSS/IBSS (WPA_SCAN_*)  * @bssid: BSSID  * @freq: frequency of the channel in MHz (e.g., 2412 = channel 1)  * @beacon_int: beacon interval in TUs (host byte order)  * @caps: capability information field in host byte order  * @qual: signal quality  * @noise: noise level  * @level: signal level  * @tsf: Timestamp  * @age: Age of the information in milliseconds (i.e., how many milliseconds  * ago the last Beacon or Probe Response frame was received)  * @ie_len: length of the following IE field in octets  * @beacon_ie_len: length of the following Beacon IE field in octets  *  * This structure is used as a generic format for scan results from the  * driver. Each driver interface implementation is responsible for converting  * the driver or OS specific scan results into this format.  *  * If the driver does not support reporting all IEs, the IE data structure is  * constructed of the IEs that are available. This field will also need to  * include SSID in IE format. All drivers are encouraged to be extended to  * report all IEs to make it easier to support future additions.  */
end_comment

begin_struct
struct|struct
name|wpa_scan_res
block|{
name|unsigned
name|int
name|flags
decl_stmt|;
name|u8
name|bssid
index|[
name|ETH_ALEN
index|]
decl_stmt|;
name|int
name|freq
decl_stmt|;
name|u16
name|beacon_int
decl_stmt|;
name|u16
name|caps
decl_stmt|;
name|int
name|qual
decl_stmt|;
name|int
name|noise
decl_stmt|;
name|int
name|level
decl_stmt|;
name|u64
name|tsf
decl_stmt|;
name|unsigned
name|int
name|age
decl_stmt|;
name|size_t
name|ie_len
decl_stmt|;
name|size_t
name|beacon_ie_len
decl_stmt|;
comment|/* 	 * Followed by ie_len octets of IEs from Probe Response frame (or if 	 * the driver does not indicate source of IEs, these may also be from 	 * Beacon frame). After the first set of IEs, another set of IEs may 	 * follow (with beacon_ie_len octets of data) if the driver provides 	 * both IE sets. 	 */
block|}
struct|;
end_struct

begin_comment
comment|/**  * struct wpa_scan_results - Scan results  * @res: Array of pointers to allocated variable length scan result entries  * @num: Number of entries in the scan result array  */
end_comment

begin_struct
struct|struct
name|wpa_scan_results
block|{
name|struct
name|wpa_scan_res
modifier|*
modifier|*
name|res
decl_stmt|;
name|size_t
name|num
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * struct wpa_interface_info - Network interface information  * @next: Pointer to the next interface or NULL if this is the last one  * @ifname: Interface name that can be used with init() or init2()  * @desc: Human readable adapter description (e.g., vendor/model) or NULL if  *	not available  * @drv_name: struct wpa_driver_ops::name (note: unlike other strings, this one  *	is not an allocated copy, i.e., get_interfaces() caller will not free  *	this)  */
end_comment

begin_struct
struct|struct
name|wpa_interface_info
block|{
name|struct
name|wpa_interface_info
modifier|*
name|next
decl_stmt|;
name|char
modifier|*
name|ifname
decl_stmt|;
name|char
modifier|*
name|desc
decl_stmt|;
specifier|const
name|char
modifier|*
name|drv_name
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|WPAS_MAX_SCAN_SSIDS
value|4
end_define

begin_comment
comment|/**  * struct wpa_driver_scan_params - Scan parameters  * Data for struct wpa_driver_ops::scan2().  */
end_comment

begin_struct
struct|struct
name|wpa_driver_scan_params
block|{
comment|/** 	 * ssids - SSIDs to scan for 	 */
struct|struct
name|wpa_driver_scan_ssid
block|{
comment|/** 		 * ssid - specific SSID to scan for (ProbeReq) 		 * %NULL or zero-length SSID is used to indicate active scan 		 * with wildcard SSID. 		 */
specifier|const
name|u8
modifier|*
name|ssid
decl_stmt|;
comment|/** 		 * ssid_len: Length of the SSID in octets 		 */
name|size_t
name|ssid_len
decl_stmt|;
block|}
name|ssids
index|[
name|WPAS_MAX_SCAN_SSIDS
index|]
struct|;
comment|/** 	 * num_ssids - Number of entries in ssids array 	 * Zero indicates a request for a passive scan. 	 */
name|size_t
name|num_ssids
decl_stmt|;
comment|/** 	 * extra_ies - Extra IE(s) to add into Probe Request or %NULL 	 */
specifier|const
name|u8
modifier|*
name|extra_ies
decl_stmt|;
comment|/** 	 * extra_ies_len - Length of extra_ies in octets 	 */
name|size_t
name|extra_ies_len
decl_stmt|;
comment|/** 	 * freqs - Array of frequencies to scan or %NULL for all frequencies 	 * 	 * The frequency is set in MHz. The array is zero-terminated. 	 */
name|int
modifier|*
name|freqs
decl_stmt|;
comment|/** 	 * filter_ssids - Filter for reporting SSIDs 	 * 	 * This optional parameter can be used to request the driver wrapper to 	 * filter scan results to include only the specified SSIDs. %NULL 	 * indicates that no filtering is to be done. This can be used to 	 * reduce memory needs for scan results in environments that have large 	 * number of APs with different SSIDs. 	 * 	 * The driver wrapper is allowed to take this allocated buffer into its 	 * own use by setting the pointer to %NULL. In that case, the driver 	 * wrapper is responsible for freeing the buffer with os_free() once it 	 * is not needed anymore. 	 */
struct|struct
name|wpa_driver_scan_filter
block|{
name|u8
name|ssid
index|[
literal|32
index|]
decl_stmt|;
name|size_t
name|ssid_len
decl_stmt|;
block|}
modifier|*
name|filter_ssids
struct|;
comment|/** 	 * num_filter_ssids - Number of entries in filter_ssids array 	 */
name|size_t
name|num_filter_ssids
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * struct wpa_driver_auth_params - Authentication parameters  * Data for struct wpa_driver_ops::authenticate().  */
end_comment

begin_struct
struct|struct
name|wpa_driver_auth_params
block|{
name|int
name|freq
decl_stmt|;
specifier|const
name|u8
modifier|*
name|bssid
decl_stmt|;
specifier|const
name|u8
modifier|*
name|ssid
decl_stmt|;
name|size_t
name|ssid_len
decl_stmt|;
name|int
name|auth_alg
decl_stmt|;
specifier|const
name|u8
modifier|*
name|ie
decl_stmt|;
name|size_t
name|ie_len
decl_stmt|;
specifier|const
name|u8
modifier|*
name|wep_key
index|[
literal|4
index|]
decl_stmt|;
name|size_t
name|wep_key_len
index|[
literal|4
index|]
decl_stmt|;
name|int
name|wep_tx_keyidx
decl_stmt|;
name|int
name|local_state_change
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * struct wpa_driver_associate_params - Association parameters  * Data for struct wpa_driver_ops::associate().  */
end_comment

begin_struct
struct|struct
name|wpa_driver_associate_params
block|{
comment|/** 	 * bssid - BSSID of the selected AP 	 * This can be %NULL, if ap_scan=2 mode is used and the driver is 	 * responsible for selecting with which BSS to associate. */
specifier|const
name|u8
modifier|*
name|bssid
decl_stmt|;
comment|/** 	 * ssid - The selected SSID 	 */
specifier|const
name|u8
modifier|*
name|ssid
decl_stmt|;
comment|/** 	 * ssid_len - Length of the SSID (1..32) 	 */
name|size_t
name|ssid_len
decl_stmt|;
comment|/** 	 * freq - Frequency of the channel the selected AP is using 	 * Frequency that the selected AP is using (in MHz as 	 * reported in the scan results) 	 */
name|int
name|freq
decl_stmt|;
comment|/** 	 * wpa_ie - WPA information element for (Re)Association Request 	 * WPA information element to be included in (Re)Association 	 * Request (including information element id and length). Use 	 * of this WPA IE is optional. If the driver generates the WPA 	 * IE, it can use pairwise_suite, group_suite, and 	 * key_mgmt_suite to select proper algorithms. In this case, 	 * the driver has to notify wpa_supplicant about the used WPA 	 * IE by generating an event that the interface code will 	 * convert into EVENT_ASSOCINFO data (see below). 	 * 	 * When using WPA2/IEEE 802.11i, wpa_ie is used for RSN IE 	 * instead. The driver can determine which version is used by 	 * looking at the first byte of the IE (0xdd for WPA, 0x30 for 	 * WPA2/RSN). 	 * 	 * When using WPS, wpa_ie is used for WPS IE instead of WPA/RSN IE. 	 */
specifier|const
name|u8
modifier|*
name|wpa_ie
decl_stmt|;
comment|/** 	 * wpa_ie_len - length of the wpa_ie 	 */
name|size_t
name|wpa_ie_len
decl_stmt|;
comment|/** 	 * pairwise_suite - Selected pairwise cipher suite 	 * 	 * This is usually ignored if @wpa_ie is used. 	 */
name|enum
name|wpa_cipher
name|pairwise_suite
decl_stmt|;
comment|/** 	 * group_suite - Selected group cipher suite 	 * 	 * This is usually ignored if @wpa_ie is used. 	 */
name|enum
name|wpa_cipher
name|group_suite
decl_stmt|;
comment|/** 	 * key_mgmt_suite - Selected key management suite 	 * 	 * This is usually ignored if @wpa_ie is used. 	 */
name|enum
name|wpa_key_mgmt
name|key_mgmt_suite
decl_stmt|;
comment|/** 	 * auth_alg - Allowed authentication algorithms 	 * Bit field of WPA_AUTH_ALG_* 	 */
name|int
name|auth_alg
decl_stmt|;
comment|/** 	 * mode - Operation mode (infra/ibss) IEEE80211_MODE_* 	 */
name|int
name|mode
decl_stmt|;
comment|/** 	 * wep_key - WEP keys for static WEP configuration 	 */
specifier|const
name|u8
modifier|*
name|wep_key
index|[
literal|4
index|]
decl_stmt|;
comment|/** 	 * wep_key_len - WEP key length for static WEP configuration 	 */
name|size_t
name|wep_key_len
index|[
literal|4
index|]
decl_stmt|;
comment|/** 	 * wep_tx_keyidx - WEP TX key index for static WEP configuration 	 */
name|int
name|wep_tx_keyidx
decl_stmt|;
comment|/** 	 * mgmt_frame_protection - IEEE 802.11w management frame protection 	 */
name|enum
name|mfp_options
name|mgmt_frame_protection
decl_stmt|;
comment|/** 	 * ft_ies - IEEE 802.11r / FT information elements 	 * If the supplicant is using IEEE 802.11r (FT) and has the needed keys 	 * for fast transition, this parameter is set to include the IEs that 	 * are to be sent in the next FT Authentication Request message. 	 * update_ft_ies() handler is called to update the IEs for further 	 * FT messages in the sequence. 	 * 	 * The driver should use these IEs only if the target AP is advertising 	 * the same mobility domain as the one included in the MDIE here. 	 * 	 * In ap_scan=2 mode, the driver can use these IEs when moving to a new 	 * AP after the initial association. These IEs can only be used if the 	 * target AP is advertising support for FT and is using the same MDIE 	 * and SSID as the current AP. 	 * 	 * The driver is responsible for reporting the FT IEs received from the 	 * AP's response using wpa_supplicant_event() with EVENT_FT_RESPONSE 	 * type. update_ft_ies() handler will then be called with the FT IEs to 	 * include in the next frame in the authentication sequence. 	 */
specifier|const
name|u8
modifier|*
name|ft_ies
decl_stmt|;
comment|/** 	 * ft_ies_len - Length of ft_ies in bytes 	 */
name|size_t
name|ft_ies_len
decl_stmt|;
comment|/** 	 * ft_md - FT Mobility domain (6 octets) (also included inside ft_ies) 	 * 	 * This value is provided to allow the driver interface easier access 	 * to the current mobility domain. This value is set to %NULL if no 	 * mobility domain is currently active. 	 */
specifier|const
name|u8
modifier|*
name|ft_md
decl_stmt|;
comment|/** 	 * passphrase - RSN passphrase for PSK 	 * 	 * This value is made available only for WPA/WPA2-Personal (PSK) and 	 * only for drivers that set WPA_DRIVER_FLAGS_4WAY_HANDSHAKE. This is 	 * the 8..63 character ASCII passphrase, if available. Please note that 	 * this can be %NULL if passphrase was not used to generate the PSK. In 	 * that case, the psk field must be used to fetch the PSK. 	 */
specifier|const
name|char
modifier|*
name|passphrase
decl_stmt|;
comment|/** 	 * psk - RSN PSK (alternative for passphrase for PSK) 	 * 	 * This value is made available only for WPA/WPA2-Personal (PSK) and 	 * only for drivers that set WPA_DRIVER_FLAGS_4WAY_HANDSHAKE. This is 	 * the 32-octet (256-bit) PSK, if available. The driver wrapper should 	 * be prepared to handle %NULL value as an error. 	 */
specifier|const
name|u8
modifier|*
name|psk
decl_stmt|;
comment|/** 	 * drop_unencrypted - Enable/disable unencrypted frame filtering 	 * 	 * Configure the driver to drop all non-EAPOL frames (both receive and 	 * transmit paths). Unencrypted EAPOL frames (ethertype 0x888e) must 	 * still be allowed for key negotiation. 	 */
name|int
name|drop_unencrypted
decl_stmt|;
comment|/** 	 * prev_bssid - Previously used BSSID in this ESS 	 * 	 * When not %NULL, this is a request to use reassociation instead of 	 * association. 	 */
specifier|const
name|u8
modifier|*
name|prev_bssid
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * struct wpa_driver_capa - Driver capability information  */
end_comment

begin_struct
struct|struct
name|wpa_driver_capa
block|{
define|#
directive|define
name|WPA_DRIVER_CAPA_KEY_MGMT_WPA
value|0x00000001
define|#
directive|define
name|WPA_DRIVER_CAPA_KEY_MGMT_WPA2
value|0x00000002
define|#
directive|define
name|WPA_DRIVER_CAPA_KEY_MGMT_WPA_PSK
value|0x00000004
define|#
directive|define
name|WPA_DRIVER_CAPA_KEY_MGMT_WPA2_PSK
value|0x00000008
define|#
directive|define
name|WPA_DRIVER_CAPA_KEY_MGMT_WPA_NONE
value|0x00000010
define|#
directive|define
name|WPA_DRIVER_CAPA_KEY_MGMT_FT
value|0x00000020
define|#
directive|define
name|WPA_DRIVER_CAPA_KEY_MGMT_FT_PSK
value|0x00000040
name|unsigned
name|int
name|key_mgmt
decl_stmt|;
define|#
directive|define
name|WPA_DRIVER_CAPA_ENC_WEP40
value|0x00000001
define|#
directive|define
name|WPA_DRIVER_CAPA_ENC_WEP104
value|0x00000002
define|#
directive|define
name|WPA_DRIVER_CAPA_ENC_TKIP
value|0x00000004
define|#
directive|define
name|WPA_DRIVER_CAPA_ENC_CCMP
value|0x00000008
name|unsigned
name|int
name|enc
decl_stmt|;
define|#
directive|define
name|WPA_DRIVER_AUTH_OPEN
value|0x00000001
define|#
directive|define
name|WPA_DRIVER_AUTH_SHARED
value|0x00000002
define|#
directive|define
name|WPA_DRIVER_AUTH_LEAP
value|0x00000004
name|unsigned
name|int
name|auth
decl_stmt|;
comment|/* Driver generated WPA/RSN IE */
define|#
directive|define
name|WPA_DRIVER_FLAGS_DRIVER_IE
value|0x00000001
comment|/* Driver needs static WEP key setup after association command */
define|#
directive|define
name|WPA_DRIVER_FLAGS_SET_KEYS_AFTER_ASSOC
value|0x00000002
define|#
directive|define
name|WPA_DRIVER_FLAGS_USER_SPACE_MLME
value|0x00000004
comment|/* Driver takes care of RSN 4-way handshake internally; PMK is configured with  * struct wpa_driver_ops::set_key using alg = WPA_ALG_PMK */
define|#
directive|define
name|WPA_DRIVER_FLAGS_4WAY_HANDSHAKE
value|0x00000008
define|#
directive|define
name|WPA_DRIVER_FLAGS_WIRED
value|0x00000010
comment|/* Driver provides separate commands for authentication and association (SME in  * wpa_supplicant). */
define|#
directive|define
name|WPA_DRIVER_FLAGS_SME
value|0x00000020
comment|/* Driver supports AP mode */
define|#
directive|define
name|WPA_DRIVER_FLAGS_AP
value|0x00000040
comment|/* Driver needs static WEP key setup after association has been completed */
define|#
directive|define
name|WPA_DRIVER_FLAGS_SET_KEYS_AFTER_ASSOC_DONE
value|0x00000080
name|unsigned
name|int
name|flags
decl_stmt|;
name|int
name|max_scan_ssids
decl_stmt|;
comment|/** 	 * max_remain_on_chan - Maximum remain-on-channel duration in msec 	 */
name|unsigned
name|int
name|max_remain_on_chan
decl_stmt|;
block|}
struct|;
end_struct

begin_struct_decl
struct_decl|struct
name|hostapd_data
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|hostap_sta_driver_data
block|{
name|unsigned
name|long
name|rx_packets
decl_stmt|,
name|tx_packets
decl_stmt|,
name|rx_bytes
decl_stmt|,
name|tx_bytes
decl_stmt|;
name|unsigned
name|long
name|current_tx_rate
decl_stmt|;
name|unsigned
name|long
name|inactive_msec
decl_stmt|;
name|unsigned
name|long
name|flags
decl_stmt|;
name|unsigned
name|long
name|num_ps_buf_frames
decl_stmt|;
name|unsigned
name|long
name|tx_retry_failed
decl_stmt|;
name|unsigned
name|long
name|tx_retry_count
decl_stmt|;
name|int
name|last_rssi
decl_stmt|;
name|int
name|last_ack_rssi
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|hostapd_sta_add_params
block|{
specifier|const
name|u8
modifier|*
name|addr
decl_stmt|;
name|u16
name|aid
decl_stmt|;
name|u16
name|capability
decl_stmt|;
specifier|const
name|u8
modifier|*
name|supp_rates
decl_stmt|;
name|size_t
name|supp_rates_len
decl_stmt|;
name|u16
name|listen_interval
decl_stmt|;
specifier|const
name|struct
name|ieee80211_ht_capabilities
modifier|*
name|ht_capabilities
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|hostapd_freq_params
block|{
name|int
name|mode
decl_stmt|;
name|int
name|freq
decl_stmt|;
name|int
name|channel
decl_stmt|;
name|int
name|ht_enabled
decl_stmt|;
name|int
name|sec_channel_offset
decl_stmt|;
comment|/* 0 = HT40 disabled, -1 = HT40 enabled, 				 * secondary channel below primary, 1 = HT40 				 * enabled, secondary channel above primary */
block|}
struct|;
end_struct

begin_enum
enum|enum
name|wpa_driver_if_type
block|{
comment|/** 	 * WPA_IF_STATION - Station mode interface 	 */
name|WPA_IF_STATION
block|,
comment|/** 	 * WPA_IF_AP_VLAN - AP mode VLAN interface 	 * 	 * This interface shares its address and Beacon frame with the main 	 * BSS. 	 */
name|WPA_IF_AP_VLAN
block|,
comment|/** 	 * WPA_IF_AP_BSS - AP mode BSS interface 	 * 	 * This interface has its own address and Beacon frame. 	 */
name|WPA_IF_AP_BSS
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|wpa_init_params
block|{
specifier|const
name|u8
modifier|*
name|bssid
decl_stmt|;
specifier|const
name|char
modifier|*
name|ifname
decl_stmt|;
specifier|const
name|u8
modifier|*
name|ssid
decl_stmt|;
name|size_t
name|ssid_len
decl_stmt|;
specifier|const
name|char
modifier|*
name|test_socket
decl_stmt|;
name|int
name|use_pae_group_addr
decl_stmt|;
name|char
modifier|*
modifier|*
name|bridge
decl_stmt|;
name|size_t
name|num_bridge
decl_stmt|;
name|u8
modifier|*
name|own_addr
decl_stmt|;
comment|/* buffer for writing own MAC address */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|wpa_bss_params
block|{
comment|/** Interface name (for multi-SSID/VLAN support) */
specifier|const
name|char
modifier|*
name|ifname
decl_stmt|;
comment|/** Whether IEEE 802.1X or WPA/WPA2 is enabled */
name|int
name|enabled
decl_stmt|;
name|int
name|wpa
decl_stmt|;
name|int
name|ieee802_1x
decl_stmt|;
name|int
name|wpa_group
decl_stmt|;
name|int
name|wpa_pairwise
decl_stmt|;
name|int
name|wpa_key_mgmt
decl_stmt|;
name|int
name|rsn_preauth
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|WPA_STA_AUTHORIZED
value|BIT(0)
end_define

begin_define
define|#
directive|define
name|WPA_STA_WMM
value|BIT(1)
end_define

begin_define
define|#
directive|define
name|WPA_STA_SHORT_PREAMBLE
value|BIT(2)
end_define

begin_define
define|#
directive|define
name|WPA_STA_MFP
value|BIT(3)
end_define

begin_comment
comment|/**  * struct wpa_driver_ops - Driver interface API definition  *  * This structure defines the API that each driver interface needs to implement  * for core wpa_supplicant code. All driver specific functionality is captured  * in this wrapper.  */
end_comment

begin_struct
struct|struct
name|wpa_driver_ops
block|{
comment|/** Name of the driver interface */
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
comment|/** One line description of the driver interface */
specifier|const
name|char
modifier|*
name|desc
decl_stmt|;
comment|/** 	 * get_bssid - Get the current BSSID 	 * @priv: private driver interface data 	 * @bssid: buffer for BSSID (ETH_ALEN = 6 bytes) 	 * 	 * Returns: 0 on success, -1 on failure 	 * 	 * Query kernel driver for the current BSSID and copy it to bssid. 	 * Setting bssid to 00:00:00:00:00:00 is recommended if the STA is not 	 * associated. 	 */
name|int
function_decl|(
modifier|*
name|get_bssid
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|u8
modifier|*
name|bssid
parameter_list|)
function_decl|;
comment|/** 	 * get_ssid - Get the current SSID 	 * @priv: private driver interface data 	 * @ssid: buffer for SSID (at least 32 bytes) 	 * 	 * Returns: Length of the SSID on success, -1 on failure 	 * 	 * Query kernel driver for the current SSID and copy it to ssid. 	 * Returning zero is recommended if the STA is not associated. 	 * 	 * Note: SSID is an array of octets, i.e., it is not nul terminated and 	 * can, at least in theory, contain control characters (including nul) 	 * and as such, should be processed as binary data, not a printable 	 * string. 	 */
name|int
function_decl|(
modifier|*
name|get_ssid
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|u8
modifier|*
name|ssid
parameter_list|)
function_decl|;
comment|/** 	 * set_key - Configure encryption key 	 * @ifname: Interface name (for multi-SSID/VLAN support) 	 * @priv: private driver interface data 	 * @alg: encryption algorithm (%WPA_ALG_NONE, %WPA_ALG_WEP, 	 *	%WPA_ALG_TKIP, %WPA_ALG_CCMP, %WPA_ALG_IGTK, %WPA_ALG_PMK); 	 *	%WPA_ALG_NONE clears the key. 	 * @addr: address of the peer STA or ff:ff:ff:ff:ff:ff for 	 *	broadcast/default keys 	 * @key_idx: key index (0..3), usually 0 for unicast keys; 0..4095 for 	 *	IGTK 	 * @set_tx: configure this key as the default Tx key (only used when 	 *	driver does not support separate unicast/individual key 	 * @seq: sequence number/packet number, seq_len octets, the next 	 *	packet number to be used for in replay protection; configured 	 *	for Rx keys (in most cases, this is only used with broadcast 	 *	keys and set to zero for unicast keys) 	 * @seq_len: length of the seq, depends on the algorithm: 	 *	TKIP: 6 octets, CCMP: 6 octets, IGTK: 6 octets 	 * @key: key buffer; TKIP: 16-byte temporal key, 8-byte Tx Mic key, 	 *	8-byte Rx Mic Key 	 * @key_len: length of the key buffer in octets (WEP: 5 or 13, 	 *	TKIP: 32, CCMP: 16, IGTK: 16) 	 * 	 * Returns: 0 on success, -1 on failure 	 * 	 * Configure the given key for the kernel driver. If the driver 	 * supports separate individual keys (4 default keys + 1 individual), 	 * addr can be used to determine whether the key is default or 	 * individual. If only 4 keys are supported, the default key with key 	 * index 0 is used as the individual key. STA must be configured to use 	 * it as the default Tx key (set_tx is set) and accept Rx for all the 	 * key indexes. In most cases, WPA uses only key indexes 1 and 2 for 	 * broadcast keys, so key index 0 is available for this kind of 	 * configuration. 	 * 	 * Please note that TKIP keys include separate TX and RX MIC keys and 	 * some drivers may expect them in different order than wpa_supplicant 	 * is using. If the TX/RX keys are swapped, all TKIP encrypted packets 	 * will tricker Michael MIC errors. This can be fixed by changing the 	 * order of MIC keys by swapping te bytes 16..23 and 24..31 of the key 	 * in driver_*.c set_key() implementation, see driver_ndis.c for an 	 * example on how this can be done. 	 */
name|int
function_decl|(
modifier|*
name|set_key
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|ifname
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
name|enum
name|wpa_alg
name|alg
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
name|int
name|key_idx
parameter_list|,
name|int
name|set_tx
parameter_list|,
specifier|const
name|u8
modifier|*
name|seq
parameter_list|,
name|size_t
name|seq_len
parameter_list|,
specifier|const
name|u8
modifier|*
name|key
parameter_list|,
name|size_t
name|key_len
parameter_list|)
function_decl|;
comment|/** 	 * init - Initialize driver interface 	 * @ctx: context to be used when calling wpa_supplicant functions, 	 * e.g., wpa_supplicant_event() 	 * @ifname: interface name, e.g., wlan0 	 * 	 * Returns: Pointer to private data, %NULL on failure 	 * 	 * Initialize driver interface, including event processing for kernel 	 * driver events (e.g., associated, scan results, Michael MIC failure). 	 * This function can allocate a private configuration data area for 	 * @ctx, file descriptor, interface name, etc. information that may be 	 * needed in future driver operations. If this is not used, non-NULL 	 * value will need to be returned because %NULL is used to indicate 	 * failure. The returned value will be used as 'void *priv' data for 	 * all other driver_ops functions. 	 * 	 * The main event loop (eloop.c) of wpa_supplicant can be used to 	 * register callback for read sockets (eloop_register_read_sock()). 	 * 	 * See below for more information about events and 	 * wpa_supplicant_event() function. 	 */
name|void
modifier|*
function_decl|(
modifier|*
name|init
function_decl|)
parameter_list|(
name|void
modifier|*
name|ctx
parameter_list|,
specifier|const
name|char
modifier|*
name|ifname
parameter_list|)
function_decl|;
comment|/** 	 * deinit - Deinitialize driver interface 	 * @priv: private driver interface data from init() 	 * 	 * Shut down driver interface and processing of driver events. Free 	 * private data buffer if one was allocated in init() handler. 	 */
name|void
function_decl|(
modifier|*
name|deinit
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|)
function_decl|;
comment|/** 	 * set_param - Set driver configuration parameters 	 * @priv: private driver interface data from init() 	 * @param: driver specific configuration parameters 	 * 	 * Returns: 0 on success, -1 on failure 	 * 	 * Optional handler for notifying driver interface about configuration 	 * parameters (driver_param). 	 */
name|int
function_decl|(
modifier|*
name|set_param
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|char
modifier|*
name|param
parameter_list|)
function_decl|;
comment|/** 	 * set_countermeasures - Enable/disable TKIP countermeasures 	 * @priv: private driver interface data 	 * @enabled: 1 = countermeasures enabled, 0 = disabled 	 * 	 * Returns: 0 on success, -1 on failure 	 * 	 * Configure TKIP countermeasures. When these are enabled, the driver 	 * should drop all received and queued frames that are using TKIP. 	 */
name|int
function_decl|(
modifier|*
name|set_countermeasures
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|int
name|enabled
parameter_list|)
function_decl|;
comment|/** 	 * deauthenticate - Request driver to deauthenticate 	 * @priv: private driver interface data 	 * @addr: peer address (BSSID of the AP) 	 * @reason_code: 16-bit reason code to be sent in the deauthentication 	 *	frame 	 * 	 * Returns: 0 on success, -1 on failure 	 */
name|int
function_decl|(
modifier|*
name|deauthenticate
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
name|int
name|reason_code
parameter_list|)
function_decl|;
comment|/** 	 * disassociate - Request driver to disassociate 	 * @priv: private driver interface data 	 * @addr: peer address (BSSID of the AP) 	 * @reason_code: 16-bit reason code to be sent in the disassociation 	 *	frame 	 * 	 * Returns: 0 on success, -1 on failure 	 */
name|int
function_decl|(
modifier|*
name|disassociate
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
name|int
name|reason_code
parameter_list|)
function_decl|;
comment|/** 	 * associate - Request driver to associate 	 * @priv: private driver interface data 	 * @params: association parameters 	 * 	 * Returns: 0 on success, -1 on failure 	 */
name|int
function_decl|(
modifier|*
name|associate
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|struct
name|wpa_driver_associate_params
modifier|*
name|params
parameter_list|)
function_decl|;
comment|/** 	 * add_pmkid - Add PMKSA cache entry to the driver 	 * @priv: private driver interface data 	 * @bssid: BSSID for the PMKSA cache entry 	 * @pmkid: PMKID for the PMKSA cache entry 	 * 	 * Returns: 0 on success, -1 on failure 	 * 	 * This function is called when a new PMK is received, as a result of 	 * either normal authentication or RSN pre-authentication. 	 * 	 * If the driver generates RSN IE, i.e., it does not use wpa_ie in 	 * associate(), add_pmkid() can be used to add new PMKSA cache entries 	 * in the driver. If the driver uses wpa_ie from wpa_supplicant, this 	 * driver_ops function does not need to be implemented. Likewise, if 	 * the driver does not support WPA, this function is not needed. 	 */
name|int
function_decl|(
modifier|*
name|add_pmkid
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|bssid
parameter_list|,
specifier|const
name|u8
modifier|*
name|pmkid
parameter_list|)
function_decl|;
comment|/** 	 * remove_pmkid - Remove PMKSA cache entry to the driver 	 * @priv: private driver interface data 	 * @bssid: BSSID for the PMKSA cache entry 	 * @pmkid: PMKID for the PMKSA cache entry 	 * 	 * Returns: 0 on success, -1 on failure 	 * 	 * This function is called when the supplicant drops a PMKSA cache 	 * entry for any reason. 	 * 	 * If the driver generates RSN IE, i.e., it does not use wpa_ie in 	 * associate(), remove_pmkid() can be used to synchronize PMKSA caches 	 * between the driver and wpa_supplicant. If the driver uses wpa_ie 	 * from wpa_supplicant, this driver_ops function does not need to be 	 * implemented. Likewise, if the driver does not support WPA, this 	 * function is not needed. 	 */
name|int
function_decl|(
modifier|*
name|remove_pmkid
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|bssid
parameter_list|,
specifier|const
name|u8
modifier|*
name|pmkid
parameter_list|)
function_decl|;
comment|/** 	 * flush_pmkid - Flush PMKSA cache 	 * @priv: private driver interface data 	 * 	 * Returns: 0 on success, -1 on failure 	 * 	 * This function is called when the supplicant drops all PMKSA cache 	 * entries for any reason. 	 * 	 * If the driver generates RSN IE, i.e., it does not use wpa_ie in 	 * associate(), remove_pmkid() can be used to synchronize PMKSA caches 	 * between the driver and wpa_supplicant. If the driver uses wpa_ie 	 * from wpa_supplicant, this driver_ops function does not need to be 	 * implemented. Likewise, if the driver does not support WPA, this 	 * function is not needed. 	 */
name|int
function_decl|(
modifier|*
name|flush_pmkid
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|)
function_decl|;
comment|/** 	 * get_capa - Get driver capabilities 	 * @priv: private driver interface data 	 * 	 * Returns: 0 on success, -1 on failure 	 * 	 * Get driver/firmware/hardware capabilities. 	 */
name|int
function_decl|(
modifier|*
name|get_capa
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|struct
name|wpa_driver_capa
modifier|*
name|capa
parameter_list|)
function_decl|;
comment|/** 	 * poll - Poll driver for association information 	 * @priv: private driver interface data 	 * 	 * This is an option callback that can be used when the driver does not 	 * provide event mechanism for association events. This is called when 	 * receiving WPA EAPOL-Key messages that require association 	 * information. The driver interface is supposed to generate associnfo 	 * event before returning from this callback function. In addition, the 	 * driver interface should generate an association event after having 	 * sent out associnfo. 	 */
name|void
function_decl|(
modifier|*
name|poll
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|)
function_decl|;
comment|/** 	 * get_ifname - Get interface name 	 * @priv: private driver interface data 	 * 	 * Returns: Pointer to the interface name. This can differ from the 	 * interface name used in init() call. Init() is called first. 	 * 	 * This optional function can be used to allow the driver interface to 	 * replace the interface name with something else, e.g., based on an 	 * interface mapping from a more descriptive name. 	 */
specifier|const
name|char
modifier|*
function_decl|(
modifier|*
name|get_ifname
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|)
function_decl|;
comment|/** 	 * get_mac_addr - Get own MAC address 	 * @priv: private driver interface data 	 * 	 * Returns: Pointer to own MAC address or %NULL on failure 	 * 	 * This optional function can be used to get the own MAC address of the 	 * device from the driver interface code. This is only needed if the 	 * l2_packet implementation for the OS does not provide easy access to 	 * a MAC address. */
specifier|const
name|u8
modifier|*
function_decl|(
modifier|*
name|get_mac_addr
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|)
function_decl|;
comment|/** 	 * send_eapol - Optional function for sending EAPOL packets 	 * @priv: private driver interface data 	 * @dest: Destination MAC address 	 * @proto: Ethertype 	 * @data: EAPOL packet starting with IEEE 802.1X header 	 * @data_len: Size of the EAPOL packet 	 * 	 * Returns: 0 on success, -1 on failure 	 * 	 * This optional function can be used to override l2_packet operations 	 * with driver specific functionality. If this function pointer is set, 	 * l2_packet module is not used at all and the driver interface code is 	 * responsible for receiving and sending all EAPOL packets. The 	 * received EAPOL packets are sent to core code with EVENT_EAPOL_RX 	 * event. The driver interface is required to implement get_mac_addr() 	 * handler if send_eapol() is used. 	 */
name|int
function_decl|(
modifier|*
name|send_eapol
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|dest
parameter_list|,
name|u16
name|proto
parameter_list|,
specifier|const
name|u8
modifier|*
name|data
parameter_list|,
name|size_t
name|data_len
parameter_list|)
function_decl|;
comment|/** 	 * set_operstate - Sets device operating state to DORMANT or UP 	 * @priv: private driver interface data 	 * @state: 0 = dormant, 1 = up 	 * Returns: 0 on success, -1 on failure 	 * 	 * This is an optional function that can be used on operating systems 	 * that support a concept of controlling network device state from user 	 * space applications. This function, if set, gets called with 	 * state = 1 when authentication has been completed and with state = 0 	 * when connection is lost. 	 */
name|int
function_decl|(
modifier|*
name|set_operstate
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|int
name|state
parameter_list|)
function_decl|;
comment|/** 	 * mlme_setprotection - MLME-SETPROTECTION.request primitive 	 * @priv: Private driver interface data 	 * @addr: Address of the station for which to set protection (may be 	 * %NULL for group keys) 	 * @protect_type: MLME_SETPROTECTION_PROTECT_TYPE_* 	 * @key_type: MLME_SETPROTECTION_KEY_TYPE_* 	 * Returns: 0 on success, -1 on failure 	 * 	 * This is an optional function that can be used to set the driver to 	 * require protection for Tx and/or Rx frames. This uses the layer 	 * interface defined in IEEE 802.11i-2004 clause 10.3.22.1 	 * (MLME-SETPROTECTION.request). Many drivers do not use explicit 	 * set protection operation; instead, they set protection implicitly 	 * based on configured keys. 	 */
name|int
function_decl|(
modifier|*
name|mlme_setprotection
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
name|int
name|protect_type
parameter_list|,
name|int
name|key_type
parameter_list|)
function_decl|;
comment|/** 	 * get_hw_feature_data - Get hardware support data (channels and rates) 	 * @priv: Private driver interface data 	 * @num_modes: Variable for returning the number of returned modes 	 * flags: Variable for returning hardware feature flags 	 * Returns: Pointer to allocated hardware data on success or %NULL on 	 * failure. Caller is responsible for freeing this. 	 * 	 * This function is only needed for drivers that export MLME 	 * (management frame processing) to %wpa_supplicant or hostapd. 	 */
name|struct
name|hostapd_hw_modes
modifier|*
function_decl|(
modifier|*
name|get_hw_feature_data
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|u16
modifier|*
name|num_modes
parameter_list|,
name|u16
modifier|*
name|flags
parameter_list|)
function_decl|;
comment|/** 	 * set_channel - Set channel 	 * @priv: Private driver interface data 	 * @phymode: HOSTAPD_MODE_IEEE80211B, .. 	 * @chan: IEEE 802.11 channel number 	 * @freq: Frequency of the channel in MHz 	 * Returns: 0 on success, -1 on failure 	 * 	 * This function is only needed for drivers that export MLME 	 * (management frame processing) to wpa_supplicant. 	 */
name|int
function_decl|(
modifier|*
name|set_channel
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|enum
name|hostapd_hw_mode
name|phymode
parameter_list|,
name|int
name|chan
parameter_list|,
name|int
name|freq
parameter_list|)
function_decl|;
comment|/** 	 * set_ssid - Set SSID 	 * @priv: Private driver interface data 	 * @ssid: SSID 	 * @ssid_len: SSID length 	 * Returns: 0 on success, -1 on failure 	 * 	 * This function is only needed for drivers that export MLME 	 * (management frame processing) to wpa_supplicant. 	 */
name|int
function_decl|(
modifier|*
name|set_ssid
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|ssid
parameter_list|,
name|size_t
name|ssid_len
parameter_list|)
function_decl|;
comment|/** 	 * set_bssid - Set BSSID 	 * @priv: Private driver interface data 	 * @bssid: BSSID 	 * Returns: 0 on success, -1 on failure 	 * 	 * This function is only needed for drivers that export MLME 	 * (management frame processing) to wpa_supplicant. 	 */
name|int
function_decl|(
modifier|*
name|set_bssid
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|bssid
parameter_list|)
function_decl|;
comment|/** 	 * send_mlme - Send management frame from MLME 	 * @priv: Private driver interface data 	 * @data: IEEE 802.11 management frame with IEEE 802.11 header 	 * @data_len: Size of the management frame 	 * Returns: 0 on success, -1 on failure 	 * 	 * This function is only needed for drivers that export MLME 	 * (management frame processing) to wpa_supplicant. 	 */
name|int
function_decl|(
modifier|*
name|send_mlme
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|data
parameter_list|,
name|size_t
name|data_len
parameter_list|)
function_decl|;
comment|/** 	 * mlme_add_sta - Add a STA entry into the driver/netstack 	 * @priv: Private driver interface data 	 * @addr: MAC address of the STA (e.g., BSSID of the AP) 	 * @supp_rates: Supported rate set (from (Re)AssocResp); in IEEE 802.11 	 * format (one octet per rate, 1 = 0.5 Mbps) 	 * @supp_rates_len: Number of entries in supp_rates 	 * Returns: 0 on success, -1 on failure 	 * 	 * This function is only needed for drivers that export MLME 	 * (management frame processing) to wpa_supplicant. When the MLME code 	 * completes association with an AP, this function is called to 	 * configure the driver/netstack with a STA entry for data frame 	 * processing (TX rate control, encryption/decryption). 	 */
name|int
function_decl|(
modifier|*
name|mlme_add_sta
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
specifier|const
name|u8
modifier|*
name|supp_rates
parameter_list|,
name|size_t
name|supp_rates_len
parameter_list|)
function_decl|;
comment|/** 	 * mlme_remove_sta - Remove a STA entry from the driver/netstack 	 * @priv: Private driver interface data 	 * @addr: MAC address of the STA (e.g., BSSID of the AP) 	 * Returns: 0 on success, -1 on failure 	 * 	 * This function is only needed for drivers that export MLME 	 * (management frame processing) to wpa_supplicant. 	 */
name|int
function_decl|(
modifier|*
name|mlme_remove_sta
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|)
function_decl|;
comment|/** 	 * update_ft_ies - Update FT (IEEE 802.11r) IEs 	 * @priv: Private driver interface data 	 * @md: Mobility domain (2 octets) (also included inside ies) 	 * @ies: FT IEs (MDIE, FTIE, ...) or %NULL to remove IEs 	 * @ies_len: Length of FT IEs in bytes 	 * Returns: 0 on success, -1 on failure 	 * 	 * The supplicant uses this callback to let the driver know that keying 	 * material for FT is available and that the driver can use the 	 * provided IEs in the next message in FT authentication sequence. 	 * 	 * This function is only needed for driver that support IEEE 802.11r 	 * (Fast BSS Transition). 	 */
name|int
function_decl|(
modifier|*
name|update_ft_ies
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|md
parameter_list|,
specifier|const
name|u8
modifier|*
name|ies
parameter_list|,
name|size_t
name|ies_len
parameter_list|)
function_decl|;
comment|/** 	 * send_ft_action - Send FT Action frame (IEEE 802.11r) 	 * @priv: Private driver interface data 	 * @action: Action field value 	 * @target_ap: Target AP address 	 * @ies: FT IEs (MDIE, FTIE, ...) (FT Request action frame body) 	 * @ies_len: Length of FT IEs in bytes 	 * Returns: 0 on success, -1 on failure 	 * 	 * The supplicant uses this callback to request the driver to transmit 	 * an FT Action frame (action category 6) for over-the-DS fast BSS 	 * transition. 	 */
name|int
function_decl|(
modifier|*
name|send_ft_action
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|u8
name|action
parameter_list|,
specifier|const
name|u8
modifier|*
name|target_ap
parameter_list|,
specifier|const
name|u8
modifier|*
name|ies
parameter_list|,
name|size_t
name|ies_len
parameter_list|)
function_decl|;
comment|/** 	 * get_scan_results2 - Fetch the latest scan results 	 * @priv: private driver interface data 	 * 	 * Returns: Allocated buffer of scan results (caller is responsible for 	 * freeing the data structure) on success, NULL on failure 	 */
name|struct
name|wpa_scan_results
modifier|*
function_decl|(
modifier|*
name|get_scan_results2
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|)
function_decl|;
comment|/** 	 * set_country - Set country 	 * @priv: Private driver interface data 	 * @alpha2: country to which to switch to 	 * Returns: 0 on success, -1 on failure 	 * 	 * This function is for drivers which support some form 	 * of setting a regulatory domain. 	 */
name|int
function_decl|(
modifier|*
name|set_country
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|char
modifier|*
name|alpha2
parameter_list|)
function_decl|;
comment|/** 	 * global_init - Global driver initialization 	 * Returns: Pointer to private data (global), %NULL on failure 	 * 	 * This optional function is called to initialize the driver wrapper 	 * for global data, i.e., data that applies to all interfaces. If this 	 * function is implemented, global_deinit() will also need to be 	 * implemented to free the private data. The driver will also likely 	 * use init2() function instead of init() to get the pointer to global 	 * data available to per-interface initializer. 	 */
name|void
modifier|*
function_decl|(
modifier|*
name|global_init
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/** 	 * global_deinit - Global driver deinitialization 	 * @priv: private driver global data from global_init() 	 * 	 * Terminate any global driver related functionality and free the 	 * global data structure. 	 */
name|void
function_decl|(
modifier|*
name|global_deinit
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|)
function_decl|;
comment|/** 	 * init2 - Initialize driver interface (with global data) 	 * @ctx: context to be used when calling wpa_supplicant functions, 	 * e.g., wpa_supplicant_event() 	 * @ifname: interface name, e.g., wlan0 	 * @global_priv: private driver global data from global_init() 	 * Returns: Pointer to private data, %NULL on failure 	 * 	 * This function can be used instead of init() if the driver wrapper 	 * uses global data. 	 */
name|void
modifier|*
function_decl|(
modifier|*
name|init2
function_decl|)
parameter_list|(
name|void
modifier|*
name|ctx
parameter_list|,
specifier|const
name|char
modifier|*
name|ifname
parameter_list|,
name|void
modifier|*
name|global_priv
parameter_list|)
function_decl|;
comment|/** 	 * get_interfaces - Get information about available interfaces 	 * @global_priv: private driver global data from global_init() 	 * Returns: Allocated buffer of interface information (caller is 	 * responsible for freeing the data structure) on success, NULL on 	 * failure 	 */
name|struct
name|wpa_interface_info
modifier|*
function_decl|(
modifier|*
name|get_interfaces
function_decl|)
parameter_list|(
name|void
modifier|*
name|global_priv
parameter_list|)
function_decl|;
comment|/** 	 * scan2 - Request the driver to initiate scan 	 * @priv: private driver interface data 	 * @params: Scan parameters 	 * 	 * Returns: 0 on success, -1 on failure 	 * 	 * Once the scan results are ready, the driver should report scan 	 * results event for wpa_supplicant which will eventually request the 	 * results with wpa_driver_get_scan_results2(). 	 */
name|int
function_decl|(
modifier|*
name|scan2
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|struct
name|wpa_driver_scan_params
modifier|*
name|params
parameter_list|)
function_decl|;
comment|/** 	 * authenticate - Request driver to authenticate 	 * @priv: private driver interface data 	 * @params: authentication parameters 	 * Returns: 0 on success, -1 on failure 	 * 	 * This is an optional function that can be used with drivers that 	 * support separate authentication and association steps, i.e., when 	 * wpa_supplicant can act as the SME. If not implemented, associate() 	 * function is expected to take care of IEEE 802.11 authentication, 	 * too. 	 */
name|int
function_decl|(
modifier|*
name|authenticate
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|struct
name|wpa_driver_auth_params
modifier|*
name|params
parameter_list|)
function_decl|;
comment|/** 	 * set_beacon - Set Beacon frame template 	 * @priv: Private driver interface data 	 * @head: Beacon head from IEEE 802.11 header to IEs before TIM IE 	 * @head_len: Length of the head buffer in octets 	 * @tail: Beacon tail following TIM IE 	 * @tail_len: Length of the tail buffer in octets 	 * @dtim_period: DTIM period 	 * @beacon_int: Beacon interval 	 * Returns: 0 on success, -1 on failure 	 * 	 * This function is used to configure Beacon template for the driver in 	 * AP mode. The driver is responsible for building the full Beacon 	 * frame by concatenating the head part with TIM IE generated by the 	 * driver/firmware and finishing with the tail part. 	 */
name|int
function_decl|(
modifier|*
name|set_beacon
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|head
parameter_list|,
name|size_t
name|head_len
parameter_list|,
specifier|const
name|u8
modifier|*
name|tail
parameter_list|,
name|size_t
name|tail_len
parameter_list|,
name|int
name|dtim_period
parameter_list|,
name|int
name|beacon_int
parameter_list|)
function_decl|;
comment|/** 	 * hapd_init - Initialize driver interface (hostapd only) 	 * @hapd: Pointer to hostapd context 	 * @params: Configuration for the driver wrapper 	 * Returns: Pointer to private data, %NULL on failure 	 * 	 * This function is used instead of init() or init2() when the driver 	 * wrapper is used withh hostapd. 	 */
name|void
modifier|*
function_decl|(
modifier|*
name|hapd_init
function_decl|)
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|struct
name|wpa_init_params
modifier|*
name|params
parameter_list|)
function_decl|;
comment|/** 	 * hapd_deinit - Deinitialize driver interface (hostapd only) 	 * @priv: Private driver interface data from hapd_init() 	 */
name|void
function_decl|(
modifier|*
name|hapd_deinit
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|)
function_decl|;
comment|/** 	 * set_ieee8021x - Enable/disable IEEE 802.1X support (AP only) 	 * @priv: Private driver interface data 	 * @params: BSS parameters 	 * Returns: 0 on success, -1 on failure 	 * 	 * This is an optional function to configure the kernel driver to 	 * enable/disable IEEE 802.1X support and set WPA/WPA2 parameters. This 	 * can be left undefined (set to %NULL) if IEEE 802.1X support is 	 * always enabled and the driver uses set_beacon() to set WPA/RSN IE 	 * for Beacon frames. 	 */
name|int
function_decl|(
modifier|*
name|set_ieee8021x
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|struct
name|wpa_bss_params
modifier|*
name|params
parameter_list|)
function_decl|;
comment|/** 	 * set_privacy - Enable/disable privacy (AP only) 	 * @priv: Private driver interface data 	 * @enabled: 1 = privacy enabled, 0 = disabled 	 * Returns: 0 on success, -1 on failure 	 * 	 * This is an optional function to configure privacy field in the 	 * kernel driver for Beacon frames. This can be left undefined (set to 	 * %NULL) if the driver uses the Beacon template from set_beacon(). 	 */
name|int
function_decl|(
modifier|*
name|set_privacy
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|int
name|enabled
parameter_list|)
function_decl|;
comment|/** 	 * get_seqnum - Fetch the current TSC/packet number (AP only) 	 * @ifname: The interface name (main or virtual) 	 * @priv: Private driver interface data 	 * @addr: MAC address of the station or %NULL for group keys 	 * @idx: Key index 	 * @seq: Buffer for returning the latest used TSC/packet number 	 * Returns: 0 on success, -1 on failure 	 * 	 * This function is used to fetch the last used TSC/packet number for 	 * a TKIP, CCMP, or BIP/IGTK key. It is mainly used with group keys, so 	 * there is no strict requirement on implementing support for unicast 	 * keys (i.e., addr != %NULL). 	 */
name|int
function_decl|(
modifier|*
name|get_seqnum
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|ifname
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
name|int
name|idx
parameter_list|,
name|u8
modifier|*
name|seq
parameter_list|)
function_decl|;
comment|/** 	 * flush - Flush all association stations (AP only) 	 * @priv: Private driver interface data 	 * Returns: 0 on success, -1 on failure 	 * 	 * This function requests the driver to disassociate all associated 	 * stations. This function does not need to be implemented if the 	 * driver does not process association frames internally. 	 */
name|int
function_decl|(
modifier|*
name|flush
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|)
function_decl|;
comment|/** 	 * set_generic_elem - Add IEs into Beacon/Probe Response frames (AP) 	 * @priv: Private driver interface data 	 * @elem: Information elements 	 * @elem_len: Length of the elem buffer in octets 	 * Returns: 0 on success, -1 on failure 	 * 	 * This is an optional function to add information elements in the 	 * kernel driver for Beacon and Probe Response frames. This can be left 	 * undefined (set to %NULL) if the driver uses the Beacon template from 	 * set_beacon(). 	 */
name|int
function_decl|(
modifier|*
name|set_generic_elem
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|elem
parameter_list|,
name|size_t
name|elem_len
parameter_list|)
function_decl|;
comment|/** 	 * read_sta_data - Fetch station data (AP only) 	 * @priv: Private driver interface data 	 * @data: Buffer for returning station information 	 * @addr: MAC address of the station 	 * Returns: 0 on success, -1 on failure 	 */
name|int
function_decl|(
modifier|*
name|read_sta_data
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|struct
name|hostap_sta_driver_data
modifier|*
name|data
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|)
function_decl|;
comment|/** 	 * hapd_send_eapol - Send an EAPOL packet (AP only) 	 * @priv: private driver interface data 	 * @addr: Destination MAC address 	 * @data: EAPOL packet starting with IEEE 802.1X header 	 * @data_len: Length of the EAPOL packet in octets 	 * @encrypt: Whether the frame should be encrypted 	 * @own_addr: Source MAC address 	 * 	 * Returns: 0 on success, -1 on failure 	 */
name|int
function_decl|(
modifier|*
name|hapd_send_eapol
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
specifier|const
name|u8
modifier|*
name|data
parameter_list|,
name|size_t
name|data_len
parameter_list|,
name|int
name|encrypt
parameter_list|,
specifier|const
name|u8
modifier|*
name|own_addr
parameter_list|)
function_decl|;
comment|/** 	 * sta_deauth - Deauthenticate a station (AP only) 	 * @priv: Private driver interface data 	 * @own_addr: Source address and BSSID for the Deauthentication frame 	 * @addr: MAC address of the station to deauthenticate 	 * @reason: Reason code for the Deauthentiation frame 	 * Returns: 0 on success, -1 on failure 	 * 	 * This function requests a specific station to be deauthenticated and 	 * a Deauthentication frame to be sent to it. 	 */
name|int
function_decl|(
modifier|*
name|sta_deauth
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|own_addr
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
name|int
name|reason
parameter_list|)
function_decl|;
comment|/** 	 * sta_disassoc - Disassociate a station (AP only) 	 * @priv: Private driver interface data 	 * @own_addr: Source address and BSSID for the Disassociation frame 	 * @addr: MAC address of the station to disassociate 	 * @reason: Reason code for the Disassociation frame 	 * Returns: 0 on success, -1 on failure 	 * 	 * This function requests a specific station to be disassociated and 	 * a Disassociation frame to be sent to it. 	 */
name|int
function_decl|(
modifier|*
name|sta_disassoc
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|own_addr
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
name|int
name|reason
parameter_list|)
function_decl|;
comment|/** 	 * sta_remove - Remove a station entry (AP only) 	 * @priv: Private driver interface data 	 * @addr: MAC address of the station to be removed 	 * Returns: 0 on success, -1 on failure 	 */
name|int
function_decl|(
modifier|*
name|sta_remove
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|)
function_decl|;
comment|/** 	 * hapd_get_ssid - Get the current SSID (AP only) 	 * @priv: Private driver interface data 	 * @buf: Buffer for returning the SSID 	 * @len: Maximum length of the buffer 	 * Returns: Length of the SSID on success, -1 on failure 	 * 	 * This function need not be implemented if the driver uses Beacon 	 * template from set_beacon() and does not reply to Probe Request 	 * frames. 	 */
name|int
function_decl|(
modifier|*
name|hapd_get_ssid
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|u8
modifier|*
name|buf
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
comment|/** 	 * hapd_set_ssid - Set SSID (AP only) 	 * @priv: Private driver interface data 	 * @buf: SSID 	 * @len: Length of the SSID in octets 	 * Returns: 0 on success, -1 on failure 	 */
name|int
function_decl|(
modifier|*
name|hapd_set_ssid
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|buf
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
comment|/** 	 * hapd_set_countermeasures - Enable/disable TKIP countermeasures (AP) 	 * @priv: Private driver interface data 	 * @enabled: 1 = countermeasures enabled, 0 = disabled 	 * Returns: 0 on success, -1 on failure 	 * 	 * This need not be implemented if the driver does not take care of 	 * association processing. 	 */
name|int
function_decl|(
modifier|*
name|hapd_set_countermeasures
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|int
name|enabled
parameter_list|)
function_decl|;
comment|/** 	 * sta_add - Add a station entry 	 * @priv: Private driver interface data 	 * @params: Station parameters 	 * Returns: 0 on success, -1 on failure 	 * 	 * This function is used to add a station entry to the driver once the 	 * station has completed association. This is only used if the driver 	 * does not take care of association processing. 	 */
name|int
function_decl|(
modifier|*
name|sta_add
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|struct
name|hostapd_sta_add_params
modifier|*
name|params
parameter_list|)
function_decl|;
comment|/** 	 * get_inact_sec - Get station inactivity duration (AP only) 	 * @priv: Private driver interface data 	 * @addr: Station address 	 * Returns: Number of seconds station has been inactive, -1 on failure 	 */
name|int
function_decl|(
modifier|*
name|get_inact_sec
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|)
function_decl|;
comment|/** 	 * sta_clear_stats - Clear station statistics (AP only) 	 * @priv: Private driver interface data 	 * @addr: Station address 	 * Returns: 0 on success, -1 on failure 	 */
name|int
function_decl|(
modifier|*
name|sta_clear_stats
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|)
function_decl|;
comment|/** 	 * set_freq - Set channel/frequency (AP only) 	 * @priv: Private driver interface data 	 * @freq: Channel parameters 	 * Returns: 0 on success, -1 on failure 	 */
name|int
function_decl|(
modifier|*
name|set_freq
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|struct
name|hostapd_freq_params
modifier|*
name|freq
parameter_list|)
function_decl|;
comment|/** 	 * set_rts - Set RTS threshold 	 * @priv: Private driver interface data 	 * @rts: RTS threshold in octets 	 * Returns: 0 on success, -1 on failure 	 */
name|int
function_decl|(
modifier|*
name|set_rts
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|int
name|rts
parameter_list|)
function_decl|;
comment|/** 	 * set_frag - Set fragmentation threshold 	 * @priv: Private driver interface data 	 * @frag: Fragmentation threshold in octets 	 * Returns: 0 on success, -1 on failure 	 */
name|int
function_decl|(
modifier|*
name|set_frag
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|int
name|frag
parameter_list|)
function_decl|;
comment|/** 	 * sta_set_flags - Set station flags (AP only) 	 * @priv: Private driver interface data 	 * @addr: Station address 	 * @total_flags: Bitmap of all WPA_STA_* flags currently set 	 * @flags_or: Bitmap of WPA_STA_* flags to add 	 * @flags_and: Bitmap of WPA_STA_* flags to us as a mask 	 * Returns: 0 on success, -1 on failure 	 */
name|int
function_decl|(
modifier|*
name|sta_set_flags
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
name|int
name|total_flags
parameter_list|,
name|int
name|flags_or
parameter_list|,
name|int
name|flags_and
parameter_list|)
function_decl|;
comment|/** 	 * set_rate_sets - Set supported and basic rate sets (AP only) 	 * @priv: Private driver interface data 	 * @supp_rates: -1 terminated array of supported rates in 100 kbps 	 * @basic_rates: -1 terminated array of basic rates in 100 kbps 	 * @mode: hardware mode (HOSTAPD_MODE_*) 	 * Returns: 0 on success, -1 on failure 	 */
name|int
function_decl|(
modifier|*
name|set_rate_sets
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|int
modifier|*
name|supp_rates
parameter_list|,
name|int
modifier|*
name|basic_rates
parameter_list|,
name|int
name|mode
parameter_list|)
function_decl|;
comment|/** 	 * set_cts_protect - Set CTS protection mode (AP only) 	 * @priv: Private driver interface data 	 * @value: Whether CTS protection is enabled 	 * Returns: 0 on success, -1 on failure 	 */
name|int
function_decl|(
modifier|*
name|set_cts_protect
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|int
name|value
parameter_list|)
function_decl|;
comment|/** 	 * set_preamble - Set preamble mode (AP only) 	 * @priv: Private driver interface data 	 * @value: Whether short preamble is enabled 	 * Returns: 0 on success, -1 on failure 	 */
name|int
function_decl|(
modifier|*
name|set_preamble
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|int
name|value
parameter_list|)
function_decl|;
comment|/** 	 * set_short_slot_time - Set short slot time (AP only) 	 * @priv: Private driver interface data 	 * @value: Whether short slot time is enabled 	 * Returns: 0 on success, -1 on failure 	 */
name|int
function_decl|(
modifier|*
name|set_short_slot_time
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|int
name|value
parameter_list|)
function_decl|;
comment|/** 	 * set_tx_queue_params - Set TX queue parameters 	 * @priv: Private driver interface data 	 * @queue: Queue number 	 * @aifs: AIFS 	 * @cw_min: cwMin 	 * @cw_max: cwMax 	 * @burst_time: Maximum length for bursting in 0.1 msec units 	 */
name|int
function_decl|(
modifier|*
name|set_tx_queue_params
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|int
name|queue
parameter_list|,
name|int
name|aifs
parameter_list|,
name|int
name|cw_min
parameter_list|,
name|int
name|cw_max
parameter_list|,
name|int
name|burst_time
parameter_list|)
function_decl|;
comment|/** 	 * valid_bss_mask - Validate BSSID mask 	 * @priv: Private driver interface data 	 * @addr: Address 	 * @mask: Mask 	 * Returns: 0 if mask is valid, -1 if mask is not valid, 1 if mask can 	 * be used, but the main interface address must be the first address in 	 * the block if mask is applied 	 */
name|int
function_decl|(
modifier|*
name|valid_bss_mask
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
specifier|const
name|u8
modifier|*
name|mask
parameter_list|)
function_decl|;
comment|/** 	 * if_add - Add a virtual interface 	 * @priv: Private driver interface data 	 * @type: Interface type 	 * @ifname: Interface name for the new virtual interface 	 * @addr: Local address to use for the interface or %NULL to use the 	 *	parent interface address 	 * @bss_ctx: BSS context for %WPA_IF_AP_BSS interfaces 	 * @drv_priv: Pointer for overwriting the driver context or %NULL if 	 *	not allowed (applies only to %WPA_IF_AP_BSS type) 	 * @force_ifname: Buffer for returning an interface name that the 	 *	driver ended up using if it differs from the requested ifname 	 * @if_addr: Buffer for returning the allocated interface address 	 *	(this may differ from the requested addr if the driver cannot 	 *	change interface address) 	 * Returns: 0 on success, -1 on failure 	 */
name|int
function_decl|(
modifier|*
name|if_add
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|enum
name|wpa_driver_if_type
name|type
parameter_list|,
specifier|const
name|char
modifier|*
name|ifname
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
name|void
modifier|*
name|bss_ctx
parameter_list|,
name|void
modifier|*
modifier|*
name|drv_priv
parameter_list|,
name|char
modifier|*
name|force_ifname
parameter_list|,
name|u8
modifier|*
name|if_addr
parameter_list|)
function_decl|;
comment|/** 	 * if_remove - Remove a virtual interface 	 * @priv: Private driver interface data 	 * @type: Interface type 	 * @ifname: Interface name of the virtual interface to be removed 	 * Returns: 0 on success, -1 on failure 	 */
name|int
function_decl|(
modifier|*
name|if_remove
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|enum
name|wpa_driver_if_type
name|type
parameter_list|,
specifier|const
name|char
modifier|*
name|ifname
parameter_list|)
function_decl|;
comment|/** 	 * set_sta_vlan - Bind a station into a specific interface (AP only) 	 * @priv: Private driver interface data 	 * @ifname: Interface (main or virtual BSS or VLAN) 	 * @addr: MAC address of the associated station 	 * @vlan_id: VLAN ID 	 * Returns: 0 on success, -1 on failure 	 * 	 * This function is used to bind a station to a specific virtual 	 * interface. It is only used if when virtual interfaces are supported, 	 * e.g., to assign stations to different VLAN interfaces based on 	 * information from a RADIUS server. This allows separate broadcast 	 * domains to be used with a single BSS. 	 */
name|int
function_decl|(
modifier|*
name|set_sta_vlan
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
specifier|const
name|char
modifier|*
name|ifname
parameter_list|,
name|int
name|vlan_id
parameter_list|)
function_decl|;
comment|/** 	 * commit - Optional commit changes handler (AP only) 	 * @priv: driver private data 	 * Returns: 0 on success, -1 on failure 	 * 	 * This optional handler function can be registered if the driver 	 * interface implementation needs to commit changes (e.g., by setting 	 * network interface up) at the end of initial configuration. If set, 	 * this handler will be called after initial setup has been completed. 	 */
name|int
function_decl|(
modifier|*
name|commit
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|)
function_decl|;
comment|/** 	 * send_ether - Send an ethernet packet (AP only) 	 * @priv: private driver interface data 	 * @dst: Destination MAC address 	 * @src: Source MAC address 	 * @proto: Ethertype 	 * @data: EAPOL packet starting with IEEE 802.1X header 	 * @data_len: Length of the EAPOL packet in octets 	 * Returns: 0 on success, -1 on failure 	 */
name|int
function_decl|(
modifier|*
name|send_ether
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|dst
parameter_list|,
specifier|const
name|u8
modifier|*
name|src
parameter_list|,
name|u16
name|proto
parameter_list|,
specifier|const
name|u8
modifier|*
name|data
parameter_list|,
name|size_t
name|data_len
parameter_list|)
function_decl|;
comment|/** 	 * set_radius_acl_auth - Notification of RADIUS ACL change 	 * @priv: Private driver interface data 	 * @mac: MAC address of the station 	 * @accepted: Whether the station was accepted 	 * @session_timeout: Session timeout for the station 	 * Returns: 0 on success, -1 on failure 	 */
name|int
function_decl|(
modifier|*
name|set_radius_acl_auth
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|mac
parameter_list|,
name|int
name|accepted
parameter_list|,
name|u32
name|session_timeout
parameter_list|)
function_decl|;
comment|/** 	 * set_radius_acl_expire - Notification of RADIUS ACL expiration 	 * @priv: Private driver interface data 	 * @mac: MAC address of the station 	 * Returns: 0 on success, -1 on failure 	 */
name|int
function_decl|(
modifier|*
name|set_radius_acl_expire
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|mac
parameter_list|)
function_decl|;
comment|/** 	 * set_ht_params - Set HT parameters (AP only) 	 * @priv: Private driver interface data 	 * @ht_capab: HT Capabilities IE 	 * @ht_capab_len: Length of ht_capab in octets 	 * @ht_oper: HT Operation IE 	 * @ht_oper_len: Length of ht_oper in octets 	 * Returns: 0 on success, -1 on failure 	 */
name|int
function_decl|(
modifier|*
name|set_ht_params
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|ht_capab
parameter_list|,
name|size_t
name|ht_capab_len
parameter_list|,
specifier|const
name|u8
modifier|*
name|ht_oper
parameter_list|,
name|size_t
name|ht_oper_len
parameter_list|)
function_decl|;
comment|/** 	 * set_ap_wps_ie - Add WPS IE(s) into Beacon/Probe Response frames (AP) 	 * @priv: Private driver interface data 	 * @beacon: WPS IE(s) for Beacon frames or %NULL to remove extra IE(s) 	 * @proberesp: WPS IE(s) for Probe Response frames or %NULL to remove 	 *	extra IE(s) 	 * Returns: 0 on success, -1 on failure 	 * 	 * This is an optional function to add WPS IE in the kernel driver for 	 * Beacon and Probe Response frames. This can be left undefined (set 	 * to %NULL) if the driver uses the Beacon template from set_beacon() 	 * and does not process Probe Request frames. 	 */
name|int
function_decl|(
modifier|*
name|set_ap_wps_ie
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|struct
name|wpabuf
modifier|*
name|beacon
parameter_list|,
specifier|const
name|struct
name|wpabuf
modifier|*
name|proberesp
parameter_list|)
function_decl|;
comment|/** 	 * set_supp_port - Set IEEE 802.1X Supplicant Port status 	 * @priv: Private driver interface data 	 * @authorized: Whether the port is authorized 	 * Returns: 0 on success, -1 on failure 	 */
name|int
function_decl|(
modifier|*
name|set_supp_port
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|int
name|authorized
parameter_list|)
function_decl|;
comment|/** 	 * set_wds_sta - Bind a station into a 4-address WDS (AP only) 	 * @priv: Private driver interface data 	 * @addr: MAC address of the associated station 	 * @aid: Association ID 	 * @val: 1 = bind to 4-address WDS; 0 = unbind 	 * Returns: 0 on success, -1 on failure 	 */
name|int
function_decl|(
modifier|*
name|set_wds_sta
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
name|int
name|aid
parameter_list|,
name|int
name|val
parameter_list|)
function_decl|;
comment|/** 	 * send_action - Transmit an Action frame 	 * @priv: Private driver interface data 	 * @freq: Frequency (in MHz) of the channel 	 * @dst: Destination MAC address (Address 1) 	 * @src: Source MAC address (Address 2) 	 * @bssid: BSSID (Address 3) 	 * @data: Frame body 	 * @data_len: data length in octets 	 * Returns: 0 on success, -1 on failure 	 * 	 * This command can be used to request the driver to transmit an action 	 * frame to the specified destination. If a remain-on-channel duration 	 * is in progress, the frame is transmitted on that channel. Otherwise, 	 * the frame is transmitted on the current operational channel if in 	 * associated state in station mode or if operating as an AP. If none 	 * of these conditions is in effect, send_action() cannot be used. 	 */
name|int
function_decl|(
modifier|*
name|send_action
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|unsigned
name|int
name|freq
parameter_list|,
specifier|const
name|u8
modifier|*
name|dst
parameter_list|,
specifier|const
name|u8
modifier|*
name|src
parameter_list|,
specifier|const
name|u8
modifier|*
name|bssid
parameter_list|,
specifier|const
name|u8
modifier|*
name|data
parameter_list|,
name|size_t
name|data_len
parameter_list|)
function_decl|;
comment|/** 	 * remain_on_channel - Remain awake on a channel 	 * @priv: Private driver interface data 	 * @freq: Frequency (in MHz) of the channel 	 * @duration: Duration in milliseconds 	 * Returns: 0 on success, -1 on failure 	 * 	 * This command is used to request the driver to remain awake on the 	 * specified channel for the specified duration and report received 	 * Action frames with EVENT_RX_ACTION events. Optionally, received 	 * Probe Request frames may also be requested to be reported by calling 	 * probe_req_report(). These will be reported with EVENT_RX_PROBE_REQ. 	 * 	 * The driver may not be at the requested channel when this function 	 * returns, i.e., the return code is only indicating whether the 	 * request was accepted. The caller will need to wait until the 	 * EVENT_REMAIN_ON_CHANNEL event indicates that the driver has 	 * completed the channel change. This may take some time due to other 	 * need for the radio and the caller should be prepared to timing out 	 * its wait since there are no guarantees on when this request can be 	 * executed. 	 */
name|int
function_decl|(
modifier|*
name|remain_on_channel
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|unsigned
name|int
name|freq
parameter_list|,
name|unsigned
name|int
name|duration
parameter_list|)
function_decl|;
comment|/** 	 * cancel_remain_on_channel - Cancel remain-on-channel operation 	 * @priv: Private driver interface data 	 * 	 * This command can be used to cancel a remain-on-channel operation 	 * before its originally requested duration has passed. This could be 	 * used, e.g., when remain_on_channel() is used to request extra time 	 * to receive a response to an Action frame and the response is 	 * received when there is still unneeded time remaining on the 	 * remain-on-channel operation. 	 */
name|int
function_decl|(
modifier|*
name|cancel_remain_on_channel
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|)
function_decl|;
comment|/** 	 * probe_req_report - Request Probe Request frames to be indicated 	 * @priv: Private driver interface data 	 * @report: Whether to report received Probe Request frames 	 * Returns: 0 on success, -1 on failure (or if not supported) 	 * 	 * This command can be used to request the driver to indicate when 	 * Probe Request frames are received with EVENT_RX_PROBE_REQ events. 	 * Since this operation may require extra resources, e.g., due to less 	 * optimal hardware/firmware RX filtering, many drivers may disable 	 * Probe Request reporting at least in station mode. This command is 	 * used to notify the driver when the Probe Request frames need to be 	 * reported, e.g., during remain-on-channel operations. 	 */
name|int
function_decl|(
modifier|*
name|probe_req_report
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|int
name|report
parameter_list|)
function_decl|;
comment|/** 	 * disable_11b_rates - Set whether IEEE 802.11b rates are used for TX 	 * @priv: Private driver interface data 	 * @disabled: Whether IEEE 802.11b rates are disabled 	 * Returns: 0 on success, -1 on failure (or if not supported) 	 * 	 * This command is used to disable IEEE 802.11b rates (1, 2, 5.5, and 	 * 11 Mbps) as TX rates for data and management frames. This can be 	 * used to optimize channel use when there is no need to support IEEE 	 * 802.11b-only devices. 	 */
name|int
function_decl|(
modifier|*
name|disable_11b_rates
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|int
name|disabled
parameter_list|)
function_decl|;
comment|/** 	 * deinit_ap - Deinitialize AP mode 	 * @priv: Private driver interface data 	 * Returns: 0 on success, -1 on failure (or if not supported) 	 * 	 * This optional function can be used to disable AP mode related 	 * configuration and change the driver mode to station mode to allow 	 * normal station operations like scanning to be completed. 	 */
name|int
function_decl|(
modifier|*
name|deinit_ap
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|)
function_decl|;
comment|/** 	 * suspend - Notification on system suspend/hibernate event 	 * @priv: Private driver interface data 	 */
name|void
function_decl|(
modifier|*
name|suspend
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|)
function_decl|;
comment|/** 	 * resume - Notification on system resume/thaw event 	 * @priv: Private driver interface data 	 */
name|void
function_decl|(
modifier|*
name|resume
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|)
function_decl|;
comment|/** 	 * signal_monitor - Set signal monitoring parameters 	 * @priv: Private driver interface data 	 * @threshold: Threshold value for signal change events; 0 = disabled 	 * @hysteresis: Minimum change in signal strength before indicating a 	 *	new event 	 * Returns: 0 on success, -1 on failure (or if not supported) 	 * 	 * This function can be used to configure monitoring of signal strength 	 * with the current AP. Whenever signal strength drops below the 	 * %threshold value or increases above it, EVENT_SIGNAL_CHANGE event 	 * should be generated assuming the signal strength has changed at 	 * least %hysteresis from the previously indicated signal change event. 	 */
name|int
function_decl|(
modifier|*
name|signal_monitor
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|int
name|threshold
parameter_list|,
name|int
name|hysteresis
parameter_list|)
function_decl|;
comment|/** 	 * send_frame - Send IEEE 802.11 frame (testing use only) 	 * @priv: Private driver interface data 	 * @data: IEEE 802.11 frame with IEEE 802.11 header 	 * @data_len: Size of the frame 	 * @encrypt: Whether to encrypt the frame (if keys are set) 	 * Returns: 0 on success, -1 on failure 	 * 	 * This function is only used for debugging purposes and is not 	 * required to be implemented for normal operations. 	 */
name|int
function_decl|(
modifier|*
name|send_frame
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|data
parameter_list|,
name|size_t
name|data_len
parameter_list|,
name|int
name|encrypt
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * enum wpa_event_type - Event type for wpa_supplicant_event() calls  */
end_comment

begin_enum
enum|enum
name|wpa_event_type
block|{
comment|/** 	 * EVENT_ASSOC - Association completed 	 * 	 * This event needs to be delivered when the driver completes IEEE 	 * 802.11 association or reassociation successfully. 	 * wpa_driver_ops::get_bssid() is expected to provide the current BSSID 	 * after this event has been generated. In addition, optional 	 * EVENT_ASSOCINFO may be generated just before EVENT_ASSOC to provide 	 * more information about the association. If the driver interface gets 	 * both of these events at the same time, it can also include the 	 * assoc_info data in EVENT_ASSOC call. 	 */
name|EVENT_ASSOC
block|,
comment|/** 	 * EVENT_DISASSOC - Association lost 	 * 	 * This event should be called when association is lost either due to 	 * receiving deauthenticate or disassociate frame from the AP or when 	 * sending either of these frames to the current AP. If the driver 	 * supports separate deauthentication event, EVENT_DISASSOC should only 	 * be used for disassociation and EVENT_DEAUTH for deauthentication. 	 * In AP mode, union wpa_event_data::disassoc_info is required. 	 */
name|EVENT_DISASSOC
block|,
comment|/** 	 * EVENT_MICHAEL_MIC_FAILURE - Michael MIC (TKIP) detected 	 * 	 * This event must be delivered when a Michael MIC error is detected by 	 * the local driver. Additional data for event processing is 	 * provided with union wpa_event_data::michael_mic_failure. This 	 * information is used to request new encyption key and to initiate 	 * TKIP countermeasures if needed. 	 */
name|EVENT_MICHAEL_MIC_FAILURE
block|,
comment|/** 	 * EVENT_SCAN_RESULTS - Scan results available 	 * 	 * This event must be called whenever scan results are available to be 	 * fetched with struct wpa_driver_ops::get_scan_results(). This event 	 * is expected to be used some time after struct wpa_driver_ops::scan() 	 * is called. If the driver provides an unsolicited event when the scan 	 * has been completed, this event can be used to trigger 	 * EVENT_SCAN_RESULTS call. If such event is not available from the 	 * driver, the driver wrapper code is expected to use a registered 	 * timeout to generate EVENT_SCAN_RESULTS call after the time that the 	 * scan is expected to be completed. Optional information about 	 * completed scan can be provided with union wpa_event_data::scan_info. 	 */
name|EVENT_SCAN_RESULTS
block|,
comment|/** 	 * EVENT_ASSOCINFO - Report optional extra information for association 	 * 	 * This event can be used to report extra association information for 	 * EVENT_ASSOC processing. This extra information includes IEs from 	 * association frames and Beacon/Probe Response frames in union 	 * wpa_event_data::assoc_info. EVENT_ASSOCINFO must be send just before 	 * EVENT_ASSOC. Alternatively, the driver interface can include 	 * assoc_info data in the EVENT_ASSOC call if it has all the 	 * information available at the same point. 	 */
name|EVENT_ASSOCINFO
block|,
comment|/** 	 * EVENT_INTERFACE_STATUS - Report interface status changes 	 * 	 * This optional event can be used to report changes in interface 	 * status (interface added/removed) using union 	 * wpa_event_data::interface_status. This can be used to trigger 	 * wpa_supplicant to stop and re-start processing for the interface, 	 * e.g., when a cardbus card is ejected/inserted. 	 */
name|EVENT_INTERFACE_STATUS
block|,
comment|/** 	 * EVENT_PMKID_CANDIDATE - Report a candidate AP for pre-authentication 	 * 	 * This event can be used to inform wpa_supplicant about candidates for 	 * RSN (WPA2) pre-authentication. If wpa_supplicant is not responsible 	 * for scan request (ap_scan=2 mode), this event is required for 	 * pre-authentication. If wpa_supplicant is performing scan request 	 * (ap_scan=1), this event is optional since scan results can be used 	 * to add pre-authentication candidates. union 	 * wpa_event_data::pmkid_candidate is used to report the BSSID of the 	 * candidate and priority of the candidate, e.g., based on the signal 	 * strength, in order to try to pre-authenticate first with candidates 	 * that are most likely targets for re-association. 	 * 	 * EVENT_PMKID_CANDIDATE can be called whenever the driver has updates 	 * on the candidate list. In addition, it can be called for the current 	 * AP and APs that have existing PMKSA cache entries. wpa_supplicant 	 * will automatically skip pre-authentication in cases where a valid 	 * PMKSA exists. When more than one candidate exists, this event should 	 * be generated once for each candidate. 	 * 	 * Driver will be notified about successful pre-authentication with 	 * struct wpa_driver_ops::add_pmkid() calls. 	 */
name|EVENT_PMKID_CANDIDATE
block|,
comment|/** 	 * EVENT_STKSTART - Request STK handshake (MLME-STKSTART.request) 	 * 	 * This event can be used to inform wpa_supplicant about desire to set 	 * up secure direct link connection between two stations as defined in 	 * IEEE 802.11e with a new PeerKey mechanism that replaced the original 	 * STAKey negotiation. The caller will need to set peer address for the 	 * event. 	 */
name|EVENT_STKSTART
block|,
comment|/** 	 * EVENT_FT_RESPONSE - Report FT (IEEE 802.11r) response IEs 	 * 	 * The driver is expected to report the received FT IEs from 	 * FT authentication sequence from the AP. The FT IEs are included in 	 * the extra information in union wpa_event_data::ft_ies. 	 */
name|EVENT_FT_RESPONSE
block|,
comment|/** 	 * EVENT_IBSS_RSN_START - Request RSN authentication in IBSS 	 * 	 * The driver can use this event to inform wpa_supplicant about a STA 	 * in an IBSS with which protected frames could be exchanged. This 	 * event starts RSN authentication with the other STA to authenticate 	 * the STA and set up encryption keys with it. 	 */
name|EVENT_IBSS_RSN_START
block|,
comment|/** 	 * EVENT_AUTH - Authentication result 	 * 	 * This event should be called when authentication attempt has been 	 * completed. This is only used if the driver supports separate 	 * authentication step (struct wpa_driver_ops::authenticate). 	 * Information about authentication result is included in 	 * union wpa_event_data::auth. 	 */
name|EVENT_AUTH
block|,
comment|/** 	 * EVENT_DEAUTH - Authentication lost 	 * 	 * This event should be called when authentication is lost either due 	 * to receiving deauthenticate frame from the AP or when sending that 	 * frame to the current AP. 	 * In AP mode, union wpa_event_data::deauth_info is required. 	 */
name|EVENT_DEAUTH
block|,
comment|/** 	 * EVENT_ASSOC_REJECT - Association rejected 	 * 	 * This event should be called when (re)association attempt has been 	 * rejected by the AP. Information about authentication result is 	 * included in union wpa_event_data::assoc_reject. 	 */
name|EVENT_ASSOC_REJECT
block|,
comment|/** 	 * EVENT_AUTH_TIMED_OUT - Authentication timed out 	 */
name|EVENT_AUTH_TIMED_OUT
block|,
comment|/** 	 * EVENT_ASSOC_TIMED_OUT - Association timed out 	 */
name|EVENT_ASSOC_TIMED_OUT
block|,
comment|/** 	 * EVENT_FT_RRB_RX - FT (IEEE 802.11r) RRB frame received 	 */
name|EVENT_FT_RRB_RX
block|,
comment|/** 	 * EVENT_WPS_BUTTON_PUSHED - Report hardware push button press for WPS 	 */
name|EVENT_WPS_BUTTON_PUSHED
block|,
comment|/** 	 * EVENT_TX_STATUS - Report TX status 	 */
name|EVENT_TX_STATUS
block|,
comment|/** 	 * EVENT_RX_FROM_UNKNOWN - Report RX from unknown STA 	 */
name|EVENT_RX_FROM_UNKNOWN
block|,
comment|/** 	 * EVENT_RX_MGMT - Report RX of a management frame 	 */
name|EVENT_RX_MGMT
block|,
comment|/** 	 * EVENT_RX_ACTION - Action frame received 	 * 	 * This event is used to indicate when an Action frame has been 	 * received. Information about the received frame is included in 	 * union wpa_event_data::rx_action. 	 */
name|EVENT_RX_ACTION
block|,
comment|/** 	 * EVENT_REMAIN_ON_CHANNEL - Remain-on-channel duration started 	 * 	 * This event is used to indicate when the driver has started the 	 * requested remain-on-channel duration. Information about the 	 * operation is included in union wpa_event_data::remain_on_channel. 	 */
name|EVENT_REMAIN_ON_CHANNEL
block|,
comment|/** 	 * EVENT_CANCEL_REMAIN_ON_CHANNEL - Remain-on-channel timed out 	 * 	 * This event is used to indicate when the driver has completed 	 * remain-on-channel duration, i.e., may noot be available on the 	 * requested channel anymore. Information about the 	 * operation is included in union wpa_event_data::remain_on_channel. 	 */
name|EVENT_CANCEL_REMAIN_ON_CHANNEL
block|,
comment|/** 	 * EVENT_MLME_RX - Report reception of frame for MLME (test use only) 	 * 	 * This event is used only by driver_test.c and userspace MLME. 	 */
name|EVENT_MLME_RX
block|,
comment|/** 	 * EVENT_RX_PROBE_REQ - Indicate received Probe Request frame 	 * 	 * This event is used to indicate when a Probe Request frame has been 	 * received. Information about the received frame is included in 	 * union wpa_event_data::rx_probe_req. The driver is required to report 	 * these events only after successfully completed probe_req_report() 	 * commands to request the events (i.e., report parameter is non-zero) 	 * in station mode. In AP mode, Probe Request frames should always be 	 * reported. 	 */
name|EVENT_RX_PROBE_REQ
block|,
comment|/** 	 * EVENT_NEW_STA - New wired device noticed 	 * 	 * This event is used to indicate that a new device has been detected 	 * in a network that does not use association-like functionality (i.e., 	 * mainly wired Ethernet). This can be used to start EAPOL 	 * authenticator when receiving a frame from a device. The address of 	 * the device is included in union wpa_event_data::new_sta. 	 */
name|EVENT_NEW_STA
block|,
comment|/** 	 * EVENT_EAPOL_RX - Report received EAPOL frame 	 * 	 * When in AP mode with hostapd, this event is required to be used to 	 * deliver the receive EAPOL frames from the driver. With 	 * %wpa_supplicant, this event is used only if the send_eapol() handler 	 * is used to override the use of l2_packet for EAPOL frame TX. 	 */
name|EVENT_EAPOL_RX
block|,
comment|/** 	 * EVENT_SIGNAL_CHANGE - Indicate change in signal strength 	 * 	 * This event is used to indicate changes in the signal strength 	 * observed in frames received from the current AP if signal strength 	 * monitoring has been enabled with signal_monitor(). 	 */
name|EVENT_SIGNAL_CHANGE
block|}
enum|;
end_enum

begin_comment
comment|/**  * union wpa_event_data - Additional data for wpa_supplicant_event() calls  */
end_comment

begin_union
union|union
name|wpa_event_data
block|{
comment|/** 	 * struct assoc_info - Data for EVENT_ASSOC and EVENT_ASSOCINFO events 	 * 	 * This structure is optional for EVENT_ASSOC calls and required for 	 * EVENT_ASSOCINFO calls. By using EVENT_ASSOC with this data, the 	 * driver interface does not need to generate separate EVENT_ASSOCINFO 	 * calls. 	 */
struct|struct
name|assoc_info
block|{
comment|/** 		 * req_ies - (Re)Association Request IEs 		 * 		 * If the driver generates WPA/RSN IE, this event data must be 		 * returned for WPA handshake to have needed information. If 		 * wpa_supplicant-generated WPA/RSN IE is used, this 		 * information event is optional. 		 * 		 * This should start with the first IE (fixed fields before IEs 		 * are not included). 		 */
specifier|const
name|u8
modifier|*
name|req_ies
decl_stmt|;
comment|/** 		 * req_ies_len - Length of req_ies in bytes 		 */
name|size_t
name|req_ies_len
decl_stmt|;
comment|/** 		 * resp_ies - (Re)Association Response IEs 		 * 		 * Optional association data from the driver. This data is not 		 * required WPA, but may be useful for some protocols and as 		 * such, should be reported if this is available to the driver 		 * interface. 		 * 		 * This should start with the first IE (fixed fields before IEs 		 * are not included). 		 */
specifier|const
name|u8
modifier|*
name|resp_ies
decl_stmt|;
comment|/** 		 * resp_ies_len - Length of resp_ies in bytes 		 */
name|size_t
name|resp_ies_len
decl_stmt|;
comment|/** 		 * beacon_ies - Beacon or Probe Response IEs 		 * 		 * Optional Beacon/ProbeResp data: IEs included in Beacon or 		 * Probe Response frames from the current AP (i.e., the one 		 * that the client just associated with). This information is 		 * used to update WPA/RSN IE for the AP. If this field is not 		 * set, the results from previous scan will be used. If no 		 * data for the new AP is found, scan results will be requested 		 * again (without scan request). At this point, the driver is 		 * expected to provide WPA/RSN IE for the AP (if WPA/WPA2 is 		 * used). 		 * 		 * This should start with the first IE (fixed fields before IEs 		 * are not included). 		 */
specifier|const
name|u8
modifier|*
name|beacon_ies
decl_stmt|;
comment|/** 		 * beacon_ies_len - Length of beacon_ies */
name|size_t
name|beacon_ies_len
decl_stmt|;
comment|/** 		 * freq - Frequency of the operational channel in MHz 		 */
name|unsigned
name|int
name|freq
decl_stmt|;
comment|/** 		 * addr - Station address (for AP mode) 		 */
specifier|const
name|u8
modifier|*
name|addr
decl_stmt|;
block|}
name|assoc_info
struct|;
comment|/** 	 * struct disassoc_info - Data for EVENT_DISASSOC events 	 */
struct|struct
name|disassoc_info
block|{
comment|/** 		 * addr - Station address (for AP mode) 		 */
specifier|const
name|u8
modifier|*
name|addr
decl_stmt|;
comment|/** 		 * reason_code - Reason Code (host byte order) used in 		 *	Deauthentication frame 		 */
name|u16
name|reason_code
decl_stmt|;
block|}
name|disassoc_info
struct|;
comment|/** 	 * struct deauth_info - Data for EVENT_DEAUTH events 	 */
struct|struct
name|deauth_info
block|{
comment|/** 		 * addr - Station address (for AP mode) 		 */
specifier|const
name|u8
modifier|*
name|addr
decl_stmt|;
comment|/** 		 * reason_code - Reason Code (host byte order) used in 		 *	Deauthentication frame 		 */
name|u16
name|reason_code
decl_stmt|;
block|}
name|deauth_info
struct|;
comment|/** 	 * struct michael_mic_failure - Data for EVENT_MICHAEL_MIC_FAILURE 	 */
struct|struct
name|michael_mic_failure
block|{
name|int
name|unicast
decl_stmt|;
specifier|const
name|u8
modifier|*
name|src
decl_stmt|;
block|}
name|michael_mic_failure
struct|;
comment|/** 	 * struct interface_status - Data for EVENT_INTERFACE_STATUS 	 */
struct|struct
name|interface_status
block|{
name|char
name|ifname
index|[
literal|100
index|]
decl_stmt|;
enum|enum
block|{
name|EVENT_INTERFACE_ADDED
block|,
name|EVENT_INTERFACE_REMOVED
block|}
name|ievent
enum|;
block|}
name|interface_status
struct|;
comment|/** 	 * struct pmkid_candidate - Data for EVENT_PMKID_CANDIDATE 	 */
struct|struct
name|pmkid_candidate
block|{
comment|/** BSSID of the PMKID candidate */
name|u8
name|bssid
index|[
name|ETH_ALEN
index|]
decl_stmt|;
comment|/** Smaller the index, higher the priority */
name|int
name|index
decl_stmt|;
comment|/** Whether RSN IE includes pre-authenticate flag */
name|int
name|preauth
decl_stmt|;
block|}
name|pmkid_candidate
struct|;
comment|/** 	 * struct stkstart - Data for EVENT_STKSTART 	 */
struct|struct
name|stkstart
block|{
name|u8
name|peer
index|[
name|ETH_ALEN
index|]
decl_stmt|;
block|}
name|stkstart
struct|;
comment|/** 	 * struct ft_ies - FT information elements (EVENT_FT_RESPONSE) 	 * 	 * During FT (IEEE 802.11r) authentication sequence, the driver is 	 * expected to use this event to report received FT IEs (MDIE, FTIE, 	 * RSN IE, TIE, possible resource request) to the supplicant. The FT 	 * IEs for the next message will be delivered through the 	 * struct wpa_driver_ops::update_ft_ies() callback. 	 */
struct|struct
name|ft_ies
block|{
specifier|const
name|u8
modifier|*
name|ies
decl_stmt|;
name|size_t
name|ies_len
decl_stmt|;
name|int
name|ft_action
decl_stmt|;
name|u8
name|target_ap
index|[
name|ETH_ALEN
index|]
decl_stmt|;
comment|/** Optional IE(s), e.g., WMM TSPEC(s), for RIC-Request */
specifier|const
name|u8
modifier|*
name|ric_ies
decl_stmt|;
comment|/** Length of ric_ies buffer in octets */
name|size_t
name|ric_ies_len
decl_stmt|;
block|}
name|ft_ies
struct|;
comment|/** 	 * struct ibss_rsn_start - Data for EVENT_IBSS_RSN_START 	 */
struct|struct
name|ibss_rsn_start
block|{
name|u8
name|peer
index|[
name|ETH_ALEN
index|]
decl_stmt|;
block|}
name|ibss_rsn_start
struct|;
comment|/** 	 * struct auth_info - Data for EVENT_AUTH events 	 */
struct|struct
name|auth_info
block|{
name|u8
name|peer
index|[
name|ETH_ALEN
index|]
decl_stmt|;
name|u16
name|auth_type
decl_stmt|;
name|u16
name|status_code
decl_stmt|;
specifier|const
name|u8
modifier|*
name|ies
decl_stmt|;
name|size_t
name|ies_len
decl_stmt|;
block|}
name|auth
struct|;
comment|/** 	 * struct assoc_reject - Data for EVENT_ASSOC_REJECT events 	 */
struct|struct
name|assoc_reject
block|{
comment|/** 		 * resp_ies - (Re)Association Response IEs 		 * 		 * Optional association data from the driver. This data is not 		 * required WPA, but may be useful for some protocols and as 		 * such, should be reported if this is available to the driver 		 * interface. 		 * 		 * This should start with the first IE (fixed fields before IEs 		 * are not included). 		 */
name|u8
modifier|*
name|resp_ies
decl_stmt|;
comment|/** 		 * resp_ies_len - Length of resp_ies in bytes 		 */
name|size_t
name|resp_ies_len
decl_stmt|;
comment|/** 		 * status_code - Status Code from (Re)association Response 		 */
name|u16
name|status_code
decl_stmt|;
block|}
name|assoc_reject
struct|;
struct|struct
name|timeout_event
block|{
name|u8
name|addr
index|[
name|ETH_ALEN
index|]
decl_stmt|;
block|}
name|timeout_event
struct|;
comment|/** 	 * struct ft_rrb_rx - Data for EVENT_FT_RRB_RX events 	 */
struct|struct
name|ft_rrb_rx
block|{
specifier|const
name|u8
modifier|*
name|src
decl_stmt|;
specifier|const
name|u8
modifier|*
name|data
decl_stmt|;
name|size_t
name|data_len
decl_stmt|;
block|}
name|ft_rrb_rx
struct|;
comment|/** 	 * struct tx_status - Data for EVENT_TX_STATUS events 	 */
struct|struct
name|tx_status
block|{
name|u16
name|type
decl_stmt|;
name|u16
name|stype
decl_stmt|;
specifier|const
name|u8
modifier|*
name|dst
decl_stmt|;
specifier|const
name|u8
modifier|*
name|data
decl_stmt|;
name|size_t
name|data_len
decl_stmt|;
name|int
name|ack
decl_stmt|;
block|}
name|tx_status
struct|;
comment|/** 	 * struct rx_from_unknown - Data for EVENT_RX_FROM_UNKNOWN events 	 */
struct|struct
name|rx_from_unknown
block|{
specifier|const
name|u8
modifier|*
name|frame
decl_stmt|;
name|size_t
name|len
decl_stmt|;
block|}
name|rx_from_unknown
struct|;
comment|/** 	 * struct rx_mgmt - Data for EVENT_RX_MGMT events 	 */
struct|struct
name|rx_mgmt
block|{
specifier|const
name|u8
modifier|*
name|frame
decl_stmt|;
name|size_t
name|frame_len
decl_stmt|;
name|u32
name|datarate
decl_stmt|;
name|u32
name|ssi_signal
decl_stmt|;
block|}
name|rx_mgmt
struct|;
comment|/** 	 * struct rx_action - Data for EVENT_RX_ACTION events 	 */
struct|struct
name|rx_action
block|{
comment|/** 		 * da - Destination address of the received Action frame 		 */
specifier|const
name|u8
modifier|*
name|da
decl_stmt|;
comment|/** 		 * sa - Source address of the received Action frame 		 */
specifier|const
name|u8
modifier|*
name|sa
decl_stmt|;
comment|/** 		 * bssid - Address 3 of the received Action frame 		 */
specifier|const
name|u8
modifier|*
name|bssid
decl_stmt|;
comment|/** 		 * category - Action frame category 		 */
name|u8
name|category
decl_stmt|;
comment|/** 		 * data - Action frame body after category field 		 */
specifier|const
name|u8
modifier|*
name|data
decl_stmt|;
comment|/** 		 * len - Length of data in octets 		 */
name|size_t
name|len
decl_stmt|;
comment|/** 		 * freq - Frequency (in MHz) on which the frame was received 		 */
name|int
name|freq
decl_stmt|;
block|}
name|rx_action
struct|;
comment|/** 	 * struct remain_on_channel - Data for EVENT_REMAIN_ON_CHANNEL events 	 * 	 * This is also used with EVENT_CANCEL_REMAIN_ON_CHANNEL events. 	 */
struct|struct
name|remain_on_channel
block|{
comment|/** 		 * freq - Channel frequency in MHz 		 */
name|unsigned
name|int
name|freq
decl_stmt|;
comment|/** 		 * duration - Duration to remain on the channel in milliseconds 		 */
name|unsigned
name|int
name|duration
decl_stmt|;
block|}
name|remain_on_channel
struct|;
comment|/** 	 * struct scan_info - Optional data for EVENT_SCAN_RESULTS events 	 * @aborted: Whether the scan was aborted 	 * @freqs: Scanned frequencies in MHz (%NULL = all channels scanned) 	 * @num_freqs: Number of entries in freqs array 	 * @ssids: Scanned SSIDs (%NULL or zero-length SSID indicates wildcard 	 *	SSID) 	 * @num_ssids: Number of entries in ssids array 	 */
struct|struct
name|scan_info
block|{
name|int
name|aborted
decl_stmt|;
specifier|const
name|int
modifier|*
name|freqs
decl_stmt|;
name|size_t
name|num_freqs
decl_stmt|;
name|struct
name|wpa_driver_scan_ssid
name|ssids
index|[
name|WPAS_MAX_SCAN_SSIDS
index|]
decl_stmt|;
name|size_t
name|num_ssids
decl_stmt|;
block|}
name|scan_info
struct|;
comment|/** 	 * struct mlme_rx - Data for EVENT_MLME_RX events 	 */
struct|struct
name|mlme_rx
block|{
specifier|const
name|u8
modifier|*
name|buf
decl_stmt|;
name|size_t
name|len
decl_stmt|;
name|int
name|freq
decl_stmt|;
name|int
name|channel
decl_stmt|;
name|int
name|ssi
decl_stmt|;
block|}
name|mlme_rx
struct|;
comment|/** 	 * struct rx_probe_req - Data for EVENT_RX_PROBE_REQ events 	 */
struct|struct
name|rx_probe_req
block|{
comment|/** 		 * sa - Source address of the received Probe Request frame 		 */
specifier|const
name|u8
modifier|*
name|sa
decl_stmt|;
comment|/** 		 * ie - IEs from the Probe Request body 		 */
specifier|const
name|u8
modifier|*
name|ie
decl_stmt|;
comment|/** 		 * ie_len - Length of ie buffer in octets 		 */
name|size_t
name|ie_len
decl_stmt|;
block|}
name|rx_probe_req
struct|;
comment|/** 	 * struct new_sta - Data for EVENT_NEW_STA events 	 */
struct|struct
name|new_sta
block|{
specifier|const
name|u8
modifier|*
name|addr
decl_stmt|;
block|}
name|new_sta
struct|;
comment|/** 	 * struct eapol_rx - Data for EVENT_EAPOL_RX events 	 */
struct|struct
name|eapol_rx
block|{
specifier|const
name|u8
modifier|*
name|src
decl_stmt|;
specifier|const
name|u8
modifier|*
name|data
decl_stmt|;
name|size_t
name|data_len
decl_stmt|;
block|}
name|eapol_rx
struct|;
comment|/** 	 * struct signal_change - Data for EVENT_SIGNAL_CHANGE events 	 */
struct|struct
name|signal_change
block|{
name|int
name|above_threshold
decl_stmt|;
block|}
name|signal_change
struct|;
block|}
union|;
end_union

begin_comment
comment|/**  * wpa_supplicant_event - Report a driver event for wpa_supplicant  * @ctx: Context pointer (wpa_s); this is the ctx variable registered  *	with struct wpa_driver_ops::init()  * @event: event type (defined above)  * @data: possible extra data for the event  *  * Driver wrapper code should call this function whenever an event is received  * from the driver.  */
end_comment

begin_function_decl
name|void
name|wpa_supplicant_event
parameter_list|(
name|void
modifier|*
name|ctx
parameter_list|,
name|enum
name|wpa_event_type
name|event
parameter_list|,
name|union
name|wpa_event_data
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * The following inline functions are provided for convenience to simplify  * event indication for some of the common events.  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|drv_event_assoc
parameter_list|(
name|void
modifier|*
name|ctx
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
specifier|const
name|u8
modifier|*
name|ie
parameter_list|,
name|size_t
name|ielen
parameter_list|)
block|{
name|union
name|wpa_event_data
name|event
decl_stmt|;
name|os_memset
argument_list|(
operator|&
name|event
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|event
operator|.
name|assoc_info
operator|.
name|req_ies
operator|=
name|ie
expr_stmt|;
name|event
operator|.
name|assoc_info
operator|.
name|req_ies_len
operator|=
name|ielen
expr_stmt|;
name|event
operator|.
name|assoc_info
operator|.
name|addr
operator|=
name|addr
expr_stmt|;
name|wpa_supplicant_event
argument_list|(
name|ctx
argument_list|,
name|EVENT_ASSOC
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|drv_event_disassoc
parameter_list|(
name|void
modifier|*
name|ctx
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|)
block|{
name|union
name|wpa_event_data
name|event
decl_stmt|;
name|os_memset
argument_list|(
operator|&
name|event
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|event
operator|.
name|disassoc_info
operator|.
name|addr
operator|=
name|addr
expr_stmt|;
name|wpa_supplicant_event
argument_list|(
name|ctx
argument_list|,
name|EVENT_DISASSOC
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|drv_event_eapol_rx
parameter_list|(
name|void
modifier|*
name|ctx
parameter_list|,
specifier|const
name|u8
modifier|*
name|src
parameter_list|,
specifier|const
name|u8
modifier|*
name|data
parameter_list|,
name|size_t
name|data_len
parameter_list|)
block|{
name|union
name|wpa_event_data
name|event
decl_stmt|;
name|os_memset
argument_list|(
operator|&
name|event
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|event
operator|.
name|eapol_rx
operator|.
name|src
operator|=
name|src
expr_stmt|;
name|event
operator|.
name|eapol_rx
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|event
operator|.
name|eapol_rx
operator|.
name|data_len
operator|=
name|data_len
expr_stmt|;
name|wpa_supplicant_event
argument_list|(
name|ctx
argument_list|,
name|EVENT_EAPOL_RX
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* DRIVER_H */
end_comment

end_unit

