begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|APPLE80211_H
end_ifndef

begin_define
define|#
directive|define
name|APPLE80211_H
end_define

begin_comment
comment|/*  * Apple80211 framework definitions  * This is an undocumented interface and the definitions here are based on  * information from MacStumbler (http://www.macstumbler.com/Apple80211.h) and  * whatever related information can be found with google and experiments ;-).  */
end_comment

begin_typedef
typedef|typedef
name|struct
name|__WirelessRef
modifier|*
name|WirelessRef
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|SInt32
name|WirelessError
typedef|;
end_typedef

begin_define
define|#
directive|define
name|errWirelessNoError
value|0
end_define

begin_typedef
typedef|typedef
struct|struct
name|WirelessInfo
block|{
name|UInt16
name|link_qual
decl_stmt|;
name|UInt16
name|comms_qual
decl_stmt|;
name|UInt16
name|signal
decl_stmt|;
name|UInt16
name|noise
decl_stmt|;
name|UInt16
name|port_stat
decl_stmt|;
name|UInt16
name|client_mode
decl_stmt|;
name|UInt16
name|res1
decl_stmt|;
name|UInt16
name|power
decl_stmt|;
name|UInt16
name|res2
decl_stmt|;
name|UInt8
name|bssID
index|[
literal|6
index|]
decl_stmt|;
name|UInt8
name|ssid
index|[
literal|34
index|]
decl_stmt|;
block|}
name|WirelessInfo
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|WirelessInfo2
block|{
comment|/* TODO - these are probably not in correct order or complete */
name|WirelessInfo
name|info1
decl_stmt|;
name|UInt8
name|macAddress
index|[
literal|6
index|]
decl_stmt|;
block|}
name|WirelessInfo2
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|WirelessNetworkInfo
block|{
name|UInt16
name|channel
decl_stmt|;
name|UInt16
name|noise
decl_stmt|;
name|UInt16
name|signal
decl_stmt|;
name|UInt8
name|bssid
index|[
literal|6
index|]
decl_stmt|;
name|UInt16
name|beacon_int
decl_stmt|;
name|UInt16
name|capability
decl_stmt|;
name|UInt16
name|ssid_len
decl_stmt|;
name|UInt8
name|ssid
index|[
literal|32
index|]
decl_stmt|;
block|}
name|WirelessNetworkInfo
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|int
name|wirelessKeyType
typedef|;
end_typedef

begin_comment
comment|/* TODO */
end_comment

begin_function_decl
name|int
name|WirelessIsAvailable
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|WirelessError
name|WirelessAttach
parameter_list|(
name|WirelessRef
modifier|*
name|ref
parameter_list|,
name|UInt32
name|res
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|WirelessError
name|WirelessDetach
parameter_list|(
name|WirelessRef
name|ref
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|WirelessError
name|WirelessPrivate
parameter_list|(
name|WirelessRef
name|ref
parameter_list|,
name|void
modifier|*
name|in_ptr
parameter_list|,
name|int
name|in_bytes
parameter_list|,
name|void
modifier|*
name|out_ptr
parameter_list|,
name|int
name|out_bytes
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|WirelessError
name|WirelessSetEnabled
parameter_list|(
name|WirelessRef
name|ref
parameter_list|,
name|UInt8
name|enabled
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|WirelessError
name|WirelessGetEnabled
parameter_list|(
name|WirelessRef
name|ref
parameter_list|,
name|UInt8
modifier|*
name|enabled
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|WirelessError
name|WirelessSetPower
parameter_list|(
name|WirelessRef
name|ref
parameter_list|,
name|UInt8
name|power
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|WirelessError
name|WirelessGetPower
parameter_list|(
name|WirelessRef
name|ref
parameter_list|,
name|UInt8
modifier|*
name|power
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|WirelessError
name|WirelessGetInfo
parameter_list|(
name|WirelessRef
name|ref
parameter_list|,
name|WirelessInfo
modifier|*
name|info
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|WirelessError
name|WirelessGetInfo2
parameter_list|(
name|WirelessRef
name|ref
parameter_list|,
name|WirelessInfo2
modifier|*
name|info
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|WirelessError
name|WirelessScan
parameter_list|(
name|WirelessRef
name|ref
parameter_list|,
name|CFArrayRef
modifier|*
name|results
parameter_list|,
name|UInt32
name|strip_dups
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|WirelessError
name|WirelessScanSplit
parameter_list|(
name|WirelessRef
name|ref
parameter_list|,
name|CFArrayRef
modifier|*
name|ap_results
parameter_list|,
name|CFArrayRef
modifier|*
name|ibss_results
parameter_list|,
name|UInt32
name|strip_dups
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|WirelessError
name|WirelessDirectedScan
parameter_list|(
name|WirelessRef
name|ref
parameter_list|,
name|CFArrayRef
modifier|*
name|results
parameter_list|,
name|UInt32
name|strip_dups
parameter_list|,
name|CFStringRef
name|ssid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|WirelessError
name|WirelessDirectedScan2
parameter_list|(
name|WirelessRef
name|ref
parameter_list|,
name|CFDataRef
name|ssid
parameter_list|,
name|UInt32
name|strip_dups
parameter_list|,
name|CFArrayRef
modifier|*
name|results
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|WirelessError
name|WirelessJoin
parameter_list|(
name|WirelessRef
name|ref
parameter_list|,
name|CFStringRef
name|ssid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|WirelessError
name|WirelessJoinWEP
parameter_list|(
name|WirelessRef
name|ref
parameter_list|,
name|CFStringRef
name|ssid
parameter_list|,
name|CFStringRef
name|passwd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|WirelessError
name|WirelessJoin8021x
parameter_list|(
name|WirelessRef
name|ref
parameter_list|,
name|CFStringRef
name|ssid
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Set WEP key  * ref: wireless reference from WirelessAttach()  * type: ?  * key_idx: 0..3  * key_len: 13 for WEP-104 or 0 for clearing the key  * key: Pointer to the key or %NULL if key_len = 0  */
end_comment

begin_function_decl
name|WirelessError
name|WirelessSetKey
parameter_list|(
name|WirelessRef
name|ref
parameter_list|,
name|wirelessKeyType
name|type
parameter_list|,
name|int
name|key_idx
parameter_list|,
name|int
name|key_len
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|key
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Set WPA key (e.g., PMK for 4-way handshake)  * ref: wireless reference from WirelessAttach()  * type: 0..4; 1 = PMK  * key_len: 16, 32, or 0  * key: Pointer to the key or %NULL if key_len = 0  */
end_comment

begin_function_decl
name|WirelessError
name|WirelessSetWPAKey
parameter_list|(
name|WirelessRef
name|ref
parameter_list|,
name|wirelessKeyType
name|type
parameter_list|,
name|int
name|key_len
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|key
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|WirelessError
name|WirelessAssociate
parameter_list|(
name|WirelessRef
name|ref
parameter_list|,
name|int
name|type
parameter_list|,
name|CFDataRef
name|ssid
parameter_list|,
name|CFStringRef
name|key
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|WirelessError
name|WirelessAssociate2
parameter_list|(
name|WirelessRef
name|ref
parameter_list|,
name|CFDictionaryRef
name|scan_res
parameter_list|,
name|CFStringRef
name|key
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|WirelessError
name|WirelessDisassociate
parameter_list|(
name|WirelessRef
name|ref
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Get a copy of scan results for the given SSID  * The returned dictionary includes following entries:  * beaconInterval: CFNumber(kCFNumberSInt32Type)  * SSID: CFData buffer of the SSID  * isWPA: CFNumber(kCFNumberSInt32Type); 0 = not used, 1 = WPA, -128 = WPA2  * name: Name of the network (SSID string)  * BSSID: CFData buffer of the BSSID  * channel: CFNumber(kCFNumberSInt32Type)  * signal: CFNumber(kCFNumberSInt32Type)  * appleIE: CFData  * WPSNOPINRequired: CFBoolean  * noise: CFNumber(kCFNumberSInt32Type)  * capability: CFNumber(kCFNumberSInt32Type)  * uniCipher: CFArray of CFNumber(kCFNumberSInt32Type)  * appleIE_Version: CFNumber(kCFNumberSInt32Type)  * appleIE_Robust: CFBoolean  * WPSConfigured: CFBoolean  * scanWasDirected: CFBoolean  * appleIE_Product: CFNumber(kCFNumberSInt32Type)  * authModes: CFArray of CFNumber(kCFNumberSInt32Type)  * multiCipher: CFNumber(kCFNumberSInt32Type)  */
end_comment

begin_function_decl
name|CFDictionaryRef
name|WirelessSafeDirectedScanCopy
parameter_list|(
name|WirelessRef
name|ref
parameter_list|,
name|CFDataRef
name|ssid
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Get information about the current association  * The returned dictionary includes following entries:  * keyData: CFData buffer of the key (e.g., 32-octet PSK)  * multiCipher: CFNumber(kCFNumberSInt32Type); 0 = none, 5 = CCMP?  * channel: CFNumber(kCFNumberSInt32Type)  * isIBSS: CFBoolean  * authMode: CFNumber(kCFNumberSInt32Type); 2 = WPA-Personal; 3 = open,  *	129 = WPA2-Enterprise  * isWPA: CFNumber(kCFNumberSInt32Type); 0 = not used, 1 = WPA, -128 == WPA2  * SSID: CFData buffer of the SSID  * cipherMode: CFNumber(kCFNumberSInt32Type); 0 = none, 4 = CCMP?  */
end_comment

begin_function_decl
name|CFDictionaryRef
name|WirelessGetAssociationInfo
parameter_list|(
name|WirelessRef
name|ref
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|WirelessError
name|WirelessConfigure
parameter_list|(
name|WirelessRef
name|ref
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Get ASP information  * The returned dictionary includes following entries:  * Version: version number (e.g., 3.0)  * Channel: channel (e.g., 1)  * Vendor: vendor (e.g., 2)  */
end_comment

begin_function_decl
name|CFDictionaryRef
name|WirelessGetInfoASP
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Get a copy of the interface dictionary  * The returned dictionary has a key,value pairs for wireless interfaces.  * The key is the interface name and the value is the driver identifier, e.g.,  * en1: com.apple.driver.AirPort.Atheros  */
end_comment

begin_function_decl
name|CFDictionaryRef
name|WirelessCopyInterfaceDict
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* APPLE80211_H */
end_comment

end_unit

