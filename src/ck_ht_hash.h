begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2012-2015 Samy Al Bahra  * Copyright 2011-2014 AppNexus, Inc.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CK_HT_HASH_H
end_ifndef

begin_define
define|#
directive|define
name|CK_HT_HASH_H
end_define

begin_comment
comment|/*  * This is the Murmur hash written by Austin Appleby.  */
end_comment

begin_include
include|#
directive|include
file|<ck_stdint.h>
end_include

begin_include
include|#
directive|include
file|<ck_string.h>
end_include

begin_comment
comment|//-----------------------------------------------------------------------------
end_comment

begin_comment
comment|// MurmurHash3 was written by Austin Appleby, and is placed in the public
end_comment

begin_comment
comment|// domain. The author hereby disclaims copyright to this source code.
end_comment

begin_comment
comment|// Note - The x86 and x64 versions do _not_ produce the same results, as the
end_comment

begin_comment
comment|// algorithms are optimized for their respective platforms. You can still
end_comment

begin_comment
comment|// compile and run any of them on any platform, but your performance with the
end_comment

begin_comment
comment|// non-native version will be less than optimal.
end_comment

begin_comment
comment|//-----------------------------------------------------------------------------
end_comment

begin_comment
comment|// Platform-specific functions and macros
end_comment

begin_comment
comment|// Microsoft Visual Studio
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
end_if

begin_define
define|#
directive|define
name|FORCE_INLINE
value|__forceinline
end_define

begin_include
include|#
directive|include
file|<stdlib.h>
end_include

begin_define
define|#
directive|define
name|ROTL32
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|_rotl(x,y)
end_define

begin_define
define|#
directive|define
name|ROTL64
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|_rotl64(x,y)
end_define

begin_define
define|#
directive|define
name|BIG_CONSTANT
parameter_list|(
name|x
parameter_list|)
value|(x)
end_define

begin_comment
comment|// Other compilers
end_comment

begin_else
else|#
directive|else
end_else

begin_comment
comment|// defined(_MSC_VER)
end_comment

begin_define
define|#
directive|define
name|FORCE_INLINE
value|inline __attribute__((always_inline))
end_define

begin_function
specifier|static
specifier|inline
name|uint32_t
name|rotl32
parameter_list|(
name|uint32_t
name|x
parameter_list|,
name|int8_t
name|r
parameter_list|)
block|{
return|return
operator|(
name|x
operator|<<
name|r
operator|)
operator||
operator|(
name|x
operator|>>
operator|(
literal|32
operator|-
name|r
operator|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|rotl64
parameter_list|(
name|uint64_t
name|x
parameter_list|,
name|int8_t
name|r
parameter_list|)
block|{
return|return
operator|(
name|x
operator|<<
name|r
operator|)
operator||
operator|(
name|x
operator|>>
operator|(
literal|64
operator|-
name|r
operator|)
operator|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|ROTL32
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|rotl32(x,y)
end_define

begin_define
define|#
directive|define
name|ROTL64
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|rotl64(x,y)
end_define

begin_define
define|#
directive|define
name|BIG_CONSTANT
parameter_list|(
name|x
parameter_list|)
value|(x##LLU)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// !defined(_MSC_VER)
end_comment

begin_comment
comment|//-----------------------------------------------------------------------------
end_comment

begin_comment
comment|// Block read - if your platform needs to do endian-swapping or can only
end_comment

begin_comment
comment|// handle aligned reads, do the conversion here
end_comment

begin_function
name|FORCE_INLINE
specifier|static
name|uint32_t
name|getblock
parameter_list|(
specifier|const
name|uint32_t
modifier|*
name|p
parameter_list|,
name|int
name|i
parameter_list|)
block|{
return|return
name|p
index|[
name|i
index|]
return|;
block|}
end_function

begin_comment
comment|//-----------------------------------------------------------------------------
end_comment

begin_comment
comment|// Finalization mix - force all bits of a hash block to avalanche
end_comment

begin_function
name|FORCE_INLINE
specifier|static
name|uint32_t
name|fmix
parameter_list|(
name|uint32_t
name|h
parameter_list|)
block|{
name|h
operator|^=
name|h
operator|>>
literal|16
expr_stmt|;
name|h
operator|*=
literal|0x85ebca6b
expr_stmt|;
name|h
operator|^=
name|h
operator|>>
literal|13
expr_stmt|;
name|h
operator|*=
literal|0xc2b2ae35
expr_stmt|;
name|h
operator|^=
name|h
operator|>>
literal|16
expr_stmt|;
return|return
name|h
return|;
block|}
end_function

begin_comment
comment|//-----------------------------------------------------------------------------
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|MurmurHash3_x86_32
parameter_list|(
specifier|const
name|void
modifier|*
name|key
parameter_list|,
name|int
name|len
parameter_list|,
name|uint32_t
name|seed
parameter_list|,
name|uint32_t
modifier|*
name|out
parameter_list|)
block|{
specifier|const
name|uint8_t
modifier|*
name|data
init|=
operator|(
specifier|const
name|uint8_t
operator|*
operator|)
name|key
decl_stmt|;
specifier|const
name|int
name|nblocks
init|=
name|len
operator|/
literal|4
decl_stmt|;
name|int
name|i
decl_stmt|;
name|uint32_t
name|h1
init|=
name|seed
decl_stmt|;
name|uint32_t
name|c1
init|=
literal|0xcc9e2d51
decl_stmt|;
name|uint32_t
name|c2
init|=
literal|0x1b873593
decl_stmt|;
comment|//----------
comment|// body
specifier|const
name|uint32_t
modifier|*
name|blocks
init|=
operator|(
specifier|const
name|uint32_t
operator|*
operator|)
operator|(
specifier|const
name|void
operator|*
operator|)
operator|(
name|data
operator|+
name|nblocks
operator|*
literal|4
operator|)
decl_stmt|;
for|for
control|(
name|i
operator|=
operator|-
name|nblocks
init|;
name|i
condition|;
name|i
operator|++
control|)
block|{
name|uint32_t
name|k1
init|=
name|getblock
argument_list|(
name|blocks
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|k1
operator|*=
name|c1
expr_stmt|;
name|k1
operator|=
name|ROTL32
argument_list|(
name|k1
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|k1
operator|*=
name|c2
expr_stmt|;
name|h1
operator|^=
name|k1
expr_stmt|;
name|h1
operator|=
name|ROTL32
argument_list|(
name|h1
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|h1
operator|=
name|h1
operator|*
literal|5
operator|+
literal|0xe6546b64
expr_stmt|;
block|}
comment|//----------
comment|// tail
specifier|const
name|uint8_t
modifier|*
name|tail
init|=
operator|(
specifier|const
name|uint8_t
operator|*
operator|)
operator|(
name|data
operator|+
name|nblocks
operator|*
literal|4
operator|)
decl_stmt|;
name|uint32_t
name|k1
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|len
operator|&
literal|3
condition|)
block|{
case|case
literal|3
case|:
name|k1
operator|^=
name|tail
index|[
literal|2
index|]
operator|<<
literal|16
expr_stmt|;
case|case
literal|2
case|:
name|k1
operator|^=
name|tail
index|[
literal|1
index|]
operator|<<
literal|8
expr_stmt|;
case|case
literal|1
case|:
name|k1
operator|^=
name|tail
index|[
literal|0
index|]
expr_stmt|;
name|k1
operator|*=
name|c1
expr_stmt|;
name|k1
operator|=
name|ROTL32
argument_list|(
name|k1
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|k1
operator|*=
name|c2
expr_stmt|;
name|h1
operator|^=
name|k1
expr_stmt|;
block|}
empty_stmt|;
comment|//----------
comment|// finalization
name|h1
operator|^=
name|len
expr_stmt|;
name|h1
operator|=
name|fmix
argument_list|(
name|h1
argument_list|)
expr_stmt|;
operator|*
operator|(
name|uint32_t
operator|*
operator|)
name|out
operator|=
name|h1
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|MurmurHash64A
parameter_list|(
specifier|const
name|void
modifier|*
name|key
parameter_list|,
name|int
name|len
parameter_list|,
name|uint64_t
name|seed
parameter_list|)
block|{
specifier|const
name|uint64_t
name|m
init|=
name|BIG_CONSTANT
argument_list|(
literal|0xc6a4a7935bd1e995
argument_list|)
decl_stmt|;
specifier|const
name|int
name|r
init|=
literal|47
decl_stmt|;
name|uint64_t
name|h
init|=
name|seed
operator|^
operator|(
name|len
operator|*
name|m
operator|)
decl_stmt|;
specifier|const
name|uint64_t
modifier|*
name|data
init|=
operator|(
specifier|const
name|uint64_t
operator|*
operator|)
name|key
decl_stmt|;
specifier|const
name|uint64_t
modifier|*
name|end
init|=
name|data
operator|+
operator|(
name|len
operator|/
literal|8
operator|)
decl_stmt|;
while|while
condition|(
name|data
operator|!=
name|end
condition|)
block|{
name|uint64_t
name|k
decl_stmt|;
if|if
condition|(
operator|!
operator|(
operator|(
name|uintptr_t
operator|)
name|data
operator|&
literal|0x7
operator|)
condition|)
name|k
operator|=
operator|*
name|data
operator|++
expr_stmt|;
else|else
block|{
name|memcpy
argument_list|(
operator|&
name|k
argument_list|,
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|k
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|++
expr_stmt|;
block|}
name|k
operator|*=
name|m
expr_stmt|;
name|k
operator|^=
name|k
operator|>>
name|r
expr_stmt|;
name|k
operator|*=
name|m
expr_stmt|;
name|h
operator|^=
name|k
expr_stmt|;
name|h
operator|*=
name|m
expr_stmt|;
block|}
specifier|const
name|unsigned
name|char
modifier|*
name|data2
init|=
operator|(
specifier|const
name|unsigned
name|char
operator|*
operator|)
name|data
decl_stmt|;
switch|switch
condition|(
name|len
operator|&
literal|7
condition|)
block|{
case|case
literal|7
case|:
name|h
operator|^=
call|(
name|uint64_t
call|)
argument_list|(
name|data2
index|[
literal|6
index|]
argument_list|)
operator|<<
literal|48
expr_stmt|;
case|case
literal|6
case|:
name|h
operator|^=
call|(
name|uint64_t
call|)
argument_list|(
name|data2
index|[
literal|5
index|]
argument_list|)
operator|<<
literal|40
expr_stmt|;
case|case
literal|5
case|:
name|h
operator|^=
call|(
name|uint64_t
call|)
argument_list|(
name|data2
index|[
literal|4
index|]
argument_list|)
operator|<<
literal|32
expr_stmt|;
case|case
literal|4
case|:
name|h
operator|^=
call|(
name|uint64_t
call|)
argument_list|(
name|data2
index|[
literal|3
index|]
argument_list|)
operator|<<
literal|24
expr_stmt|;
case|case
literal|3
case|:
name|h
operator|^=
call|(
name|uint64_t
call|)
argument_list|(
name|data2
index|[
literal|2
index|]
argument_list|)
operator|<<
literal|16
expr_stmt|;
case|case
literal|2
case|:
name|h
operator|^=
call|(
name|uint64_t
call|)
argument_list|(
name|data2
index|[
literal|1
index|]
argument_list|)
operator|<<
literal|8
expr_stmt|;
case|case
literal|1
case|:
name|h
operator|^=
call|(
name|uint64_t
call|)
argument_list|(
name|data2
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|h
operator|*=
name|m
expr_stmt|;
block|}
empty_stmt|;
name|h
operator|^=
name|h
operator|>>
name|r
expr_stmt|;
name|h
operator|*=
name|m
expr_stmt|;
name|h
operator|^=
name|h
operator|>>
name|r
expr_stmt|;
return|return
name|h
return|;
block|}
end_function

begin_comment
comment|// 64-bit hash for 32-bit platforms
end_comment

begin_function
specifier|static
specifier|inline
name|uint64_t
name|MurmurHash64B
parameter_list|(
specifier|const
name|void
modifier|*
name|key
parameter_list|,
name|int
name|len
parameter_list|,
name|uint64_t
name|seed
parameter_list|)
block|{
specifier|const
name|uint32_t
name|m
init|=
literal|0x5bd1e995
decl_stmt|;
specifier|const
name|int
name|r
init|=
literal|24
decl_stmt|;
name|uint32_t
name|h1
init|=
call|(
name|uint32_t
call|)
argument_list|(
name|seed
argument_list|)
operator|^
name|len
decl_stmt|;
name|uint32_t
name|h2
init|=
call|(
name|uint32_t
call|)
argument_list|(
name|seed
operator|>>
literal|32
argument_list|)
decl_stmt|;
specifier|const
name|uint32_t
modifier|*
name|data
init|=
operator|(
specifier|const
name|uint32_t
operator|*
operator|)
name|key
decl_stmt|;
while|while
condition|(
name|len
operator|>=
literal|8
condition|)
block|{
name|uint32_t
name|k1
init|=
operator|*
name|data
operator|++
decl_stmt|;
name|k1
operator|*=
name|m
expr_stmt|;
name|k1
operator|^=
name|k1
operator|>>
name|r
expr_stmt|;
name|k1
operator|*=
name|m
expr_stmt|;
name|h1
operator|*=
name|m
expr_stmt|;
name|h1
operator|^=
name|k1
expr_stmt|;
name|len
operator|-=
literal|4
expr_stmt|;
name|uint32_t
name|k2
init|=
operator|*
name|data
operator|++
decl_stmt|;
name|k2
operator|*=
name|m
expr_stmt|;
name|k2
operator|^=
name|k2
operator|>>
name|r
expr_stmt|;
name|k2
operator|*=
name|m
expr_stmt|;
name|h2
operator|*=
name|m
expr_stmt|;
name|h2
operator|^=
name|k2
expr_stmt|;
name|len
operator|-=
literal|4
expr_stmt|;
block|}
if|if
condition|(
name|len
operator|>=
literal|4
condition|)
block|{
name|uint32_t
name|k1
init|=
operator|*
name|data
operator|++
decl_stmt|;
name|k1
operator|*=
name|m
expr_stmt|;
name|k1
operator|^=
name|k1
operator|>>
name|r
expr_stmt|;
name|k1
operator|*=
name|m
expr_stmt|;
name|h1
operator|*=
name|m
expr_stmt|;
name|h1
operator|^=
name|k1
expr_stmt|;
name|len
operator|-=
literal|4
expr_stmt|;
block|}
switch|switch
condition|(
name|len
condition|)
block|{
case|case
literal|3
case|:
name|h2
operator|^=
operator|(
operator|(
specifier|const
name|unsigned
name|char
operator|*
operator|)
name|data
operator|)
index|[
literal|2
index|]
operator|<<
literal|16
expr_stmt|;
case|case
literal|2
case|:
name|h2
operator|^=
operator|(
operator|(
specifier|const
name|unsigned
name|char
operator|*
operator|)
name|data
operator|)
index|[
literal|1
index|]
operator|<<
literal|8
expr_stmt|;
case|case
literal|1
case|:
name|h2
operator|^=
operator|(
operator|(
specifier|const
name|unsigned
name|char
operator|*
operator|)
name|data
operator|)
index|[
literal|0
index|]
expr_stmt|;
name|h2
operator|*=
name|m
expr_stmt|;
block|}
empty_stmt|;
name|h1
operator|^=
name|h2
operator|>>
literal|18
expr_stmt|;
name|h1
operator|*=
name|m
expr_stmt|;
name|h2
operator|^=
name|h1
operator|>>
literal|22
expr_stmt|;
name|h2
operator|*=
name|m
expr_stmt|;
name|h1
operator|^=
name|h2
operator|>>
literal|17
expr_stmt|;
name|h1
operator|*=
name|m
expr_stmt|;
name|h2
operator|^=
name|h1
operator|>>
literal|19
expr_stmt|;
name|h2
operator|*=
name|m
expr_stmt|;
name|uint64_t
name|h
init|=
name|h1
decl_stmt|;
name|h
operator|=
operator|(
name|h
operator|<<
literal|32
operator|)
operator||
name|h2
expr_stmt|;
return|return
name|h
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CK_HT_HASH_H */
end_comment

end_unit

