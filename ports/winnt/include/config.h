begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*   * ports/winnt/include/config.h - static Windows config.h  *  * On most systems config.h is generated by the configure script.  * For the Windows port, it's hand-maintained.  Compilers earlier  * than Visual C++ 2005 are no longer supported, enabling  * portable use of "long long" and "%lld".  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CONFIG_H
end_ifndef

begin_define
define|#
directive|define
name|CONFIG_H
end_define

begin_comment
comment|/*  * Known predifined MS compiler version codes:  *  1800: MSVC++ 12.0 (Visual Studio 2013)  *  1700: MSVC++ 11.0 (Visual Studio 2012)  *  1600: MSVC++ 10.0 (Visual Studio 2010)  *  1500: MSVC++ 9.0  (Visual Studio 2008)  *  1400: MSVC++ 8.0  (Visual Studio 2005)  *  1310: MSVC++ 7.1  (Visual Studio 2003)  *  1300: MSVC++ 7.0  *  1200: MSVC++ 6.0  (Visual C++ 6)  *  1100: MSVC++ 5.0  */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|&&
name|_MSC_VER
operator|<
literal|1400
end_if

begin_error
error|#
directive|error
error|Minimum supported Microsoft compiler is Visual C++ 2005.
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * We want structures and prototypes added after Windows NT 4.0 exposed  * by Windows header files, so we define _WIN32_WINNT to target Windows  * XP (version 5.1).  By default, _WIN32_WINNT also controls the minimum  * required Windows version to launch the .exe.  As we want a single  * binary to work on all supported Windows versions, we runtime link  * newer functions, and use the linker /version:0x0400 option to  * override the .EXE header minimum Windows version.  *  * When using the VC++ 2008 and later compilers, the resulting binaries  * will not work on versions earlier than Windows XP, due to runtime  * library dependencies.  That is, Visual C++ 2005 is the last version  * capable of producing binaries usable with Windows NT 4 and 2000.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_WIN32_WINNT
end_ifndef

begin_define
define|#
directive|define
name|_WIN32_WINNT
value|0x0501
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|__attribute__
parameter_list|(
name|x
parameter_list|)
end_define

begin_comment
comment|/* empty */
end_comment

begin_define
define|#
directive|define
name|_CRT_SECURE_NO_DEPRECATE
value|1
end_define

begin_comment
comment|/*  * ANSI C compliance enabled  */
end_comment

begin_define
define|#
directive|define
name|__STDC__
value|1
end_define

begin_comment
comment|/*  * Enable the debug build of MS C runtime to dump leaks  * at exit time (currently only if run under a debugger).  */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|&&
name|defined
argument_list|(
name|_DEBUG
argument_list|)
end_if

begin_define
define|#
directive|define
name|_CRTDBG_MAP_ALLOC
end_define

begin_include
include|#
directive|include
file|<stdlib.h>
end_include

begin_include
include|#
directive|include
file|<malloc.h>
end_include

begin_include
include|#
directive|include
file|<crtdbg.h>
end_include

begin_comment
comment|/* # define MALLOC_LINT */
end_comment

begin_comment
comment|/* defers free() */
end_comment

begin_define
define|#
directive|define
name|EREALLOC_IMPL
parameter_list|(
name|ptr
parameter_list|,
name|newsz
parameter_list|,
name|filenm
parameter_list|,
name|loc
parameter_list|)
define|\
value|_realloc_dbg(ptr, newsz, _NORMAL_BLOCK, filenm, loc)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * We need to include stdio.h first before we #define snprintf  * otherwise we can get errors during the build  */
end_comment

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_comment
comment|/* Prevent inclusion of winsock.h in windows.h */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_WINSOCKAPI_
end_ifndef

begin_define
define|#
directive|define
name|_WINSOCKAPI_
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__RPCASYNC_H__
end_ifndef

begin_define
define|#
directive|define
name|__RPCASYNC_H__
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * On Unix struct sock_timeval is equivalent to struct timeval.  * On Windows built with 64-bit time_t, sock_timeval.tv_sec is a long  * as required by Windows' socket() interface timeout argument, while  * timeval.tv_sec is time_t for the more common use as a UTC time   * within NTP.  *  * winsock.h unconditionally defines struct timeval with long tv_sec  * instead of time_t tv_sec.  We redirect its declaration to struct   * sock_timeval instead of struct timeval with a #define.  */
end_comment

begin_define
define|#
directive|define
name|timeval
value|sock_timeval
end_define

begin_comment
comment|/* Include Windows headers */
end_comment

begin_include
include|#
directive|include
file|<windows.h>
end_include

begin_include
include|#
directive|include
file|<winsock2.h>
end_include

begin_include
include|#
directive|include
file|<ws2tcpip.h>
end_include

begin_undef
undef|#
directive|undef
name|timeval
end_undef

begin_comment
comment|/* see sock_timeval #define and comment above */
end_comment

begin_comment
comment|/*  * Some definitions we are using are missing in the headers  * shipping with VC6. However, if the SDK is installed then the   * SDK's headers may declare the missing types. This is at least   * the case in the Oct 2001 SDK. That SDK and all subsequent   * versions also define the symbol _W64, so we can use that one  * to determine whether some types need to be defined, or not.  */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|_W64
end_ifdef

begin_comment
comment|/* VC6 can include wspiapi.h only if the SDK is installed */
end_comment

begin_include
include|#
directive|include
file|<wspiapi.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_undef
undef|#
directive|undef
name|interface
end_undef

begin_include
include|#
directive|include
file|<process.h>
end_include

begin_include
include|#
directive|include
file|<time.h>
end_include

begin_comment
comment|/* time_t for timeval decl */
end_comment

begin_include
include|#
directive|include
file|<io.h>
end_include

begin_include
include|#
directive|include
file|<isc/strerror.h>
end_include

begin_comment
comment|/* ---------------------------------------------------------------------  * Above this line are #include lines and the few #define lines  * needed before including headers.  */
end_comment

begin_struct
struct|struct
name|timeval
block|{
name|time_t
name|tv_sec
decl_stmt|;
name|long
name|tv_usec
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * ntohl and friends are actual functions on Windows, use our own  * macros instead to save the function call overhead.  All releases  * of Windows are little-endian.  */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|ntohl
end_ifdef

begin_error
error|#
directive|error
error|ntohl is already defined in ports/winnt/include/config.h
end_error

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|ntohl
parameter_list|(
name|ul
parameter_list|)
value|(((u_long)(ul)& 0xff)<< 24 |		\ 			 ((u_long)(ul)& 0xff00)<< 8 |		\ 			 ((u_long)(ul)& 0xff0000)>> 8 |	\ 			 ((u_long)(ul)& 0xff000000)>> 24)
end_define

begin_define
define|#
directive|define
name|htonl
parameter_list|(
name|ul
parameter_list|)
value|ntohl(ul)
end_define

begin_define
define|#
directive|define
name|ntohs
parameter_list|(
name|us
parameter_list|)
value|((u_short)				\ 			 (((u_short)(us)& 0xff)<< 8 |		\ 			  ((u_short)(us)& 0xff00)>> 8))
end_define

begin_define
define|#
directive|define
name|htons
parameter_list|(
name|us
parameter_list|)
value|ntohs(us)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * On Unix open() works for tty (serial) devices just fine, while on  * Windows refclock serial devices are opened using CreateFile, a lower  * level than the CRT-provided descriptors, because the C runtime lacks  * tty APIs.  For refclocks which wish to use open() as well as or   * instead of refclock_open(), tty_open() is equivalent to open() on  * Unix and  implemented in the Windows port similarly to  * refclock_open().  */
end_comment

begin_function_decl
specifier|extern
name|int
name|tty_open
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * disable use of __declspec(dllexport) by libisc routines  */
end_comment

begin_define
define|#
directive|define
name|ISC_STATIC_WIN
value|1
end_define

begin_comment
comment|/*  * ntp_rfc2553.h has cruft under #ifdef SYS_WINNT which is  * appropriate for older Microsoft IPv6 definitions, such  * as in_addr6 being the struct type.  We can differentiate  * the RFC2553-compliant newer headers because they have  *   #define in_addr6 in6_addr  * for backward compatibility.  With the newer headers,  * we define ISC_PLATFORM_HAVEIPV6 and disable the cruft.  */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|in_addr6
end_ifdef

begin_define
define|#
directive|define
name|WANT_IPV6
end_define

begin_define
define|#
directive|define
name|ISC_PLATFORM_HAVEIPV6
end_define

begin_define
define|#
directive|define
name|ISC_PLATFORM_HAVESCOPEID
end_define

begin_define
define|#
directive|define
name|HAVE_STRUCT_SOCKADDR_STORAGE
end_define

begin_define
define|#
directive|define
name|ISC_PLATFORM_HAVEIN6PKTINFO
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* in_addr6 / RFC2553-compliant IPv6 headers */
end_comment

begin_define
define|#
directive|define
name|NO_OPTION_NAME_WARNINGS
end_define

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_W64
argument_list|)
end_if

begin_comment
comment|/*    * if ULONG_PTR needs to be defined then the build environment    * is pure 32 bit Windows. Since ULONG_PTR and DWORD have     * the same size in 32 bit Windows we can safely define    * a replacement.    */
end_comment

begin_typedef
typedef|typedef
name|DWORD
name|ULONG_PTR
typedef|;
end_typedef

begin_comment
comment|/* VC6 doesn't know about socklen_t, except if the SDK is installed */
end_comment

begin_typedef
typedef|typedef
name|int
name|socklen_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _W64 */
end_comment

begin_define
define|#
directive|define
name|ISC_PLATFORM_NEEDIN6ADDRANY
end_define

begin_define
define|#
directive|define
name|HAVE_SOCKADDR_IN6
end_define

begin_comment
comment|/*  * The type of the socklen_t defined for getnameinfo() and getaddrinfo()  * is int for VS compilers on Windows but the type is already declared   */
end_comment

begin_define
define|#
directive|define
name|GETSOCKNAME_SOCKLEN_TYPE
value|socklen_t
end_define

begin_comment
comment|/*  * Older SDKs do not define SO_EXCLUSIVEADDRUSE in winsock2.h  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SO_EXCLUSIVEADDRUSE
end_ifndef

begin_define
define|#
directive|define
name|SO_EXCLUSIVEADDRUSE
value|((int)(~SO_REUSEADDR))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|defined
name|_MSC_VER
operator|&&
name|_MSC_VER
operator|<
literal|1400
end_if

begin_comment
comment|/*  * Use 32-bit time definitions for versions prior to VS 2005  * VS 2005 defaults to 64-bit time  */
end_comment

begin_define
define|#
directive|define
name|SIZEOF_TIME_T
value|4
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|SIZEOF_TIME_T
value|8
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * An attempt to cut down the number of warnings generated during compilation.  * All of these should be benign to disable.  */
end_comment

begin_pragma
pragma|#
directive|pragma
name|warning
name|(
name|disable
name|:
name|4100
name|)
end_pragma

begin_comment
comment|/* unreferenced formal parameter */
end_comment

begin_pragma
pragma|#
directive|pragma
name|warning
name|(
name|disable
name|:
name|4127
name|)
end_pragma

begin_comment
comment|/* conditional expression is constant */
end_comment

begin_pragma
pragma|#
directive|pragma
name|warning
name|(
name|disable
name|:
name|4996
name|)
end_pragma

begin_comment
comment|/* more secure replacement available */
end_comment

begin_comment
comment|/*  * Windows NT Configuration Values  */
end_comment

begin_if
if|#
directive|if
name|defined
name|_DEBUG
end_if

begin_comment
comment|/* Use VC standard macro definitions */
end_comment

begin_define
define|#
directive|define
name|DEBUG
value|1
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|__windows__
value|1
end_define

begin_comment
comment|/* Define if you have the ANSI C header files.  */
end_comment

begin_define
define|#
directive|define
name|STDC_HEADERS
value|1
end_define

begin_define
define|#
directive|define
name|OPEN_BCAST_SOCKET
value|1
end_define

begin_comment
comment|/* for ntp_io.c */
end_comment

begin_define
define|#
directive|define
name|TYPEOF_IP_MULTICAST_LOOP
value|BOOL
end_define

begin_define
define|#
directive|define
name|SETSOCKOPT_ARG_CAST
value|(const char *)
end_define

begin_define
define|#
directive|define
name|HAVE_RANDOM
end_define

begin_define
define|#
directive|define
name|SAVECONFIG
value|1
end_define

begin_comment
comment|/*  * Multimedia timer enable  */
end_comment

begin_define
define|#
directive|define
name|USE_MM_TIMER
end_define

begin_comment
comment|/* check for OpenSSL */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|OPENSSL
end_ifdef

begin_define
define|#
directive|define
name|USE_OPENSSL_CRYPTO_RAND
value|1
end_define

begin_define
define|#
directive|define
name|AUTOKEY
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
specifier|extern
name|void
name|arc4random_buf
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|nbytes
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Keywords and functions that Microsoft maps  * to other names  */
end_comment

begin_define
define|#
directive|define
name|inline
value|__inline
end_define

begin_define
define|#
directive|define
name|stricmp
value|_stricmp
end_define

begin_define
define|#
directive|define
name|strcasecmp
value|_stricmp
end_define

begin_define
define|#
directive|define
name|isascii
value|__isascii
end_define

begin_define
define|#
directive|define
name|finite
value|_finite
end_define

begin_define
define|#
directive|define
name|random
value|rand
end_define

begin_define
define|#
directive|define
name|srandom
value|srand
end_define

begin_define
define|#
directive|define
name|fdopen
value|_fdopen
end_define

begin_define
define|#
directive|define
name|read
value|_read
end_define

begin_define
define|#
directive|define
name|open
value|_open
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|close
end_ifndef

begin_define
define|#
directive|define
name|close
value|_close
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|write
value|_write
end_define

begin_define
define|#
directive|define
name|strdup
value|_strdup
end_define

begin_define
define|#
directive|define
name|alloca
value|_alloca
end_define

begin_define
define|#
directive|define
name|stat
value|_stat
end_define

begin_comment
comment|/*struct stat from<sys/stat.h> */
end_comment

begin_define
define|#
directive|define
name|fstat
value|_fstat
end_define

begin_define
define|#
directive|define
name|unlink
value|_unlink
end_define

begin_comment
comment|/*  * punt on fchmod on Windows  */
end_comment

begin_define
define|#
directive|define
name|fchmod
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|{}
end_define

begin_define
define|#
directive|define
name|lseek
value|_lseek
end_define

begin_define
define|#
directive|define
name|pipe
value|_pipe
end_define

begin_define
define|#
directive|define
name|dup2
value|_dup2
end_define

begin_comment
comment|/*  * scale, unix sleep is seconds, Windows Sleep is msec  */
end_comment

begin_define
define|#
directive|define
name|sleep
parameter_list|(
name|x
parameter_list|)
value|Sleep((unsigned)(x) * 1000)
end_define

begin_define
define|#
directive|define
name|fileno
value|_fileno
end_define

begin_define
define|#
directive|define
name|isatty
value|_isatty
end_define

begin_define
define|#
directive|define
name|mktemp
value|_mktemp
end_define

begin_define
define|#
directive|define
name|getpid
value|_getpid
end_define

begin_define
define|#
directive|define
name|timegm
value|_mkgmtime
end_define

begin_define
define|#
directive|define
name|errno_to_str
value|isc__strerror
end_define

begin_comment
comment|/*  * symbol returning the name of the current function  */
end_comment

begin_define
define|#
directive|define
name|__func__
value|__FUNCTION__
end_define

begin_typedef
typedef|typedef
name|int
name|pid_t
typedef|;
end_typedef

begin_comment
comment|/* PID is an int */
end_comment

begin_typedef
typedef|typedef
name|int
name|ssize_t
typedef|;
end_typedef

begin_comment
comment|/* ssize is an int */
end_comment

begin_comment
comment|/*  * Map the stream to the file number  */
end_comment

begin_define
define|#
directive|define
name|STDOUT_FILENO
value|_fileno(stdout)
end_define

begin_define
define|#
directive|define
name|STDERR_FILENO
value|_fileno(stderr)
end_define

begin_comment
comment|/*  * To minimize Windows-specific changes to the rest of the NTP code,  * particularly reference clocks, ntp_stdlib.h will  *  * #define strerror(e) ntp_strerror(e)  *  * to deal with our mixture of C runtime (open, write) and Windows  * (sockets, serial ports) error codes.  This is an ugly hack because  * both use the lowest values differently, but particularly for ntpd,  * it's not a problem.  */
end_comment

begin_define
define|#
directive|define
name|NTP_REDEFINE_STRERROR
end_define

begin_define
define|#
directive|define
name|MCAST
end_define

begin_comment
comment|/* Enable Multicast Support */
end_comment

begin_define
define|#
directive|define
name|MULTICAST_NONEWSOCKET
end_define

begin_comment
comment|/* Don't create a new socket for mcast address */
end_comment

begin_define
define|#
directive|define
name|REFCLOCK
end_define

begin_comment
comment|/* from ntpd.mak */
end_comment

begin_comment
comment|/* #define CLOCK_PARSE  */
end_comment

begin_define
define|#
directive|define
name|CLOCK_ACTS
end_define

begin_define
define|#
directive|define
name|CLOCK_ARBITER
end_define

begin_define
define|#
directive|define
name|CLOCK_ARCRON_MSF
end_define

begin_define
define|#
directive|define
name|OWN_PPS_NTP_TIMESTAMP_FROM_COUNTER
end_define

begin_comment
comment|/* timepps.h */
end_comment

begin_define
define|#
directive|define
name|HAVE_TIMEPPS_H
end_define

begin_define
define|#
directive|define
name|HAVE_PPSAPI
end_define

begin_define
define|#
directive|define
name|CLOCK_ATOM
end_define

begin_define
define|#
directive|define
name|CLOCK_CHU
end_define

begin_define
define|#
directive|define
name|CLOCK_CHRONOLOG
end_define

begin_define
define|#
directive|define
name|CLOCK_DUMBCLOCK
end_define

begin_define
define|#
directive|define
name|CLOCK_HOPF_SERIAL
end_define

begin_comment
comment|/* device 38, hopf DCF77/GPS serial line receiver  */
end_comment

begin_define
define|#
directive|define
name|CLOCK_HOPF_PCI
end_define

begin_comment
comment|/* device 39, hopf DCF77/GPS PCI-Bus receiver  */
end_comment

begin_define
define|#
directive|define
name|CLOCK_JUPITER
end_define

begin_define
define|#
directive|define
name|CLOCK_LOCAL
end_define

begin_define
define|#
directive|define
name|CLOCK_NMEA
end_define

begin_define
define|#
directive|define
name|CLOCK_ONCORE
end_define

begin_define
define|#
directive|define
name|CLOCK_PALISADE
end_define

begin_comment
comment|/* from ntpd.mak */
end_comment

begin_define
define|#
directive|define
name|CLOCK_PARSE
end_define

begin_comment
comment|/* parse component drivers */
end_comment

begin_define
define|#
directive|define
name|CLOCK_COMPUTIME
end_define

begin_define
define|#
directive|define
name|CLOCK_DCF7000
end_define

begin_define
define|#
directive|define
name|CLOCK_HOPF6021
end_define

begin_define
define|#
directive|define
name|CLOCK_MEINBERG
end_define

begin_define
define|#
directive|define
name|CLOCK_RAWDCF
end_define

begin_define
define|#
directive|define
name|CLOCK_RCC8000
end_define

begin_define
define|#
directive|define
name|CLOCK_SCHMID
end_define

begin_define
define|#
directive|define
name|CLOCK_TRIMTAIP
end_define

begin_define
define|#
directive|define
name|CLOCK_TRIMTSIP
end_define

begin_define
define|#
directive|define
name|CLOCK_VARITEXT
end_define

begin_define
define|#
directive|define
name|CLOCK_WHARTON_400A
end_define

begin_comment
comment|/* end parse component drivers */
end_comment

begin_comment
comment|/* # define CLOCK_SHM */
end_comment

begin_define
define|#
directive|define
name|CLOCK_SPECTRACOM
end_define

begin_comment
comment|/* refclock_wwvb.c */
end_comment

begin_define
define|#
directive|define
name|CLOCK_TRIMBLEDC
end_define

begin_define
define|#
directive|define
name|CLOCK_TRUETIME
end_define

begin_define
define|#
directive|define
name|NTP_LITTLE_ENDIAN
end_define

begin_comment
comment|/* from libntp.mak */
end_comment

begin_define
define|#
directive|define
name|NTP_POSIX_SOURCE
end_define

begin_define
define|#
directive|define
name|SYSLOG_FILE
end_define

begin_comment
comment|/* from libntp.mak */
end_comment

begin_define
define|#
directive|define
name|HAVE_LONG_LONG_INT
value|1
end_define

begin_define
define|#
directive|define
name|HAVE_UNSIGNED_LONG_LONG_INT
value|1
end_define

begin_define
define|#
directive|define
name|HAVE_SIZE_T
value|1
end_define

begin_define
define|#
directive|define
name|HAVE_PTRDIFF_T
value|1
end_define

begin_define
define|#
directive|define
name|SIZEOF_SIGNED_CHAR
value|1
end_define

begin_define
define|#
directive|define
name|SIZEOF_SHORT
value|2
end_define

begin_define
define|#
directive|define
name|SIZEOF_INT
value|4
end_define

begin_define
define|#
directive|define
name|SIZEOF_LONG
value|4
end_define

begin_define
define|#
directive|define
name|SIZEOF_LONG_LONG
value|8
end_define

begin_comment
comment|/* libntp/snprintf.c doesn't know %I64d */
end_comment

begin_define
define|#
directive|define
name|ISC_PLATFORM_QUADFORMAT
value|"ll"
end_define

begin_define
define|#
directive|define
name|HAVE_ERRNO_H
value|1
end_define

begin_define
define|#
directive|define
name|HAVE_FCNTL_H
value|1
end_define

begin_define
define|#
directive|define
name|HAVE_LIMITS_H
value|1
end_define

begin_define
define|#
directive|define
name|HAVE_STDARG_H
value|1
end_define

begin_define
define|#
directive|define
name|HAVE_SYS_RESOURCE_H
value|1
end_define

begin_define
define|#
directive|define
name|HAVE_SYS_TIME_H
value|1
end_define

begin_define
define|#
directive|define
name|HAVE_TERMIOS_H
value|1
end_define

begin_define
define|#
directive|define
name|HAVE_ALLOCA
value|1
end_define

begin_define
define|#
directive|define
name|HAVE_GETCLOCK
value|1
end_define

begin_define
define|#
directive|define
name|HAVE_MEMMOVE
value|1
end_define

begin_define
define|#
directive|define
name|HAVE_MKTIME
value|1
end_define

begin_define
define|#
directive|define
name|HAVE_SETVBUF
value|1
end_define

begin_define
define|#
directive|define
name|HAVE_STRCHR
value|1
end_define

begin_comment
comment|/* for libopts */
end_comment

begin_define
define|#
directive|define
name|HAVE_STRDUP
value|1
end_define

begin_define
define|#
directive|define
name|HAVE_TIMEGM
value|1
end_define

begin_comment
comment|/* actually _mkgmtime */
end_comment

begin_define
define|#
directive|define
name|HAVE_STRUCT_TIMESPEC
end_define

begin_define
define|#
directive|define
name|HAVE_IO_COMPLETION_PORT
end_define

begin_define
define|#
directive|define
name|ISC_PLATFORM_NEEDNTOP
end_define

begin_define
define|#
directive|define
name|ISC_PLATFORM_NEEDPTON
end_define

begin_define
define|#
directive|define
name|HAVE_BSD_NICE
end_define

begin_comment
comment|/* emulate BSD setpriority() */
end_comment

begin_define
define|#
directive|define
name|HW_WANT_RPL_VSNPRINTF
value|1
end_define

begin_define
define|#
directive|define
name|vsnprintf
value|rpl_vsnprintf
end_define

begin_include
include|#
directive|include
file|<stdarg.h>
end_include

begin_function_decl
name|int
name|rpl_vsnprintf
parameter_list|(
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|va_list
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|HW_WANT_RPL_SNPRINTF
value|1
end_define

begin_define
define|#
directive|define
name|snprintf
value|rpl_snprintf
end_define

begin_function_decl
name|int
name|rpl_snprintf
parameter_list|(
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|HAVE_VSNPRINTF
value|1
end_define

begin_define
define|#
directive|define
name|HAVE_SNPRINTF
value|1
end_define

begin_typedef
typedef|typedef
name|char
modifier|*
name|caddr_t
typedef|;
end_typedef

begin_ifdef
ifdef|#
directive|ifdef
name|_WCTYPE_T_DEFINED
end_ifdef

begin_comment
comment|/* see vc/include/crtdefs.h */
end_comment

begin_define
define|#
directive|define
name|HAVE_WINT_T
value|1
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|_INTPTR_T_DEFINED
end_ifndef

begin_typedef
typedef|typedef
name|long
name|intptr_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|_INTPTR_T_DEFINED
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|HAVE_INTPTR_T
value|1
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|_UINTPTR_T_DEFINED
end_ifndef

begin_typedef
typedef|typedef
name|unsigned
name|long
name|uintptr_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|_UINTPTR_T_DEFINED
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|HAVE_UINTPTR_T
value|1
end_define

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_W64
argument_list|)
end_if

begin_comment
comment|/*    * if DWORD_PTR needs to be defined then the build environment    * is pure 32 bit Windows. Since DWORD_PTR and DWORD have     * the same size in 32 bit Windows we can safely define    * a replacement.    */
end_comment

begin_typedef
typedef|typedef
name|DWORD
name|DWORD_PTR
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|NEED_S_CHAR_TYPEDEF
end_define

begin_comment
comment|/* C99 exact size integer support. */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|&&
name|_MSC_VER
operator|<
literal|1800
end_if

begin_define
define|#
directive|define
name|MISSING_INTTYPES_H
value|1
end_define

begin_comment
comment|/* not provided by VS2012 and earlier */
end_comment

begin_define
define|#
directive|define
name|MISSING_STDBOOL_H
value|1
end_define

begin_comment
comment|/* not provided by VS2012 and earlier */
end_comment

begin_define
define|#
directive|define
name|MISSING_C99_STRUCT_INIT
value|1
end_define

begin_comment
comment|/* see [Bug 2728] */
end_comment

begin_else
else|#
directive|else
end_else

begin_if
if|#
directive|if
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|&&
name|_MSC_VER
operator|>=
literal|1800
end_if

begin_comment
comment|/* VS2013 and above support C99 types */
end_comment

begin_define
define|#
directive|define
name|HAVE_INT8_T
value|1
end_define

begin_define
define|#
directive|define
name|HAVE_UINT8_T
value|1
end_define

begin_define
define|#
directive|define
name|HAVE_INT16_T
value|1
end_define

begin_define
define|#
directive|define
name|HAVE_UINT16_T
value|1
end_define

begin_define
define|#
directive|define
name|HAVE_INT32_T
value|1
end_define

begin_define
define|#
directive|define
name|HAVE_UINT32_T
value|1
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|MISSING_STDBOOL_H
argument_list|)
end_if

begin_define
define|#
directive|define
name|HAVE_STDBOOL_H
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|MISSING_INTTYPES_H
argument_list|)
end_if

begin_define
define|#
directive|define
name|HAVE_INTTYPES_H
value|1
end_define

begin_elif
elif|#
directive|elif
operator|!
name|defined
argument_list|(
name|MISSING_STDINT_H
argument_list|)
end_elif

begin_define
define|#
directive|define
name|HAVE_STDINT_H
value|1
end_define

begin_elif
elif|#
directive|elif
operator|!
name|defined
argument_list|(
name|ADDED_EXACT_SIZE_INTEGERS
argument_list|)
end_elif

begin_define
define|#
directive|define
name|ADDED_EXACT_SIZE_INTEGERS
value|1
end_define

begin_typedef
typedef|typedef
name|__int8
name|int8_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|unsigned
name|__int8
name|uint8_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|__int16
name|int16_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|unsigned
name|__int16
name|uint16_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|__int32
name|int32_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|unsigned
name|__int32
name|uint32_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|__int64
name|int64_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|unsigned
name|__int64
name|uint64_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Directory separator, usually / or \ */
end_comment

begin_define
define|#
directive|define
name|DIR_SEP
value|'\\'
end_define

begin_define
define|#
directive|define
name|POSIX_SHELL
value|"/bin/sh"
end_define

begin_comment
comment|/* libopts/makeshell.c */
end_comment

begin_define
define|#
directive|define
name|ULONG_CONST
parameter_list|(
name|a
parameter_list|)
value|a ## UL
end_define

begin_define
define|#
directive|define
name|NOKMEM
end_define

begin_define
define|#
directive|define
name|RETSIGTYPE
value|void
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|STR_SYSTEM
end_ifndef

begin_define
define|#
directive|define
name|STR_SYSTEM
value|"Windows"
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|STR_PROCESSOR
end_ifndef

begin_define
define|#
directive|define
name|STRINGIZE
parameter_list|(
name|arg
parameter_list|)
value|#arg
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|_M_IX86
end_ifdef

begin_ifndef
ifndef|#
directive|ifndef
name|_M_IX86_FP
end_ifndef

begin_define
define|#
directive|define
name|STR_PROCESSOR
value|"x86"
end_define

begin_else
else|#
directive|else
end_else

begin_if
if|#
directive|if
operator|!
name|_M_IX86_FP
end_if

begin_define
define|#
directive|define
name|STR_PROCESSOR
value|"x86"
end_define

begin_else
else|#
directive|else
end_else

begin_if
if|#
directive|if
name|_M_IX86_FP
operator|>
literal|2
end_if

begin_define
define|#
directive|define
name|STR_PROCESSOR
value|"x86-FP-" STRINGIZE(_M_IX86_FP)
end_define

begin_else
else|#
directive|else
end_else

begin_if
if|#
directive|if
name|_M_IX86_FP
operator|==
literal|2
end_if

begin_define
define|#
directive|define
name|STR_PROCESSOR
value|"x86-SSE2"
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|STR_PROCESSOR
value|"x86-SSE"
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _M_IX86 == 2 */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _M_IX86_FP> 2 */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_M_IX86_FP */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !defined(_M_IX86_FP) */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !defined(_M_IX86) */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|_M_IA64
end_ifdef

begin_define
define|#
directive|define
name|STR_PROCESSOR
value|"Itanium"
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|_M_X64
end_ifdef

begin_define
define|#
directive|define
name|STR_PROCESSOR
value|"x64"
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !defined(STR_PROCESSOR) */
end_comment

begin_undef
undef|#
directive|undef
name|STRINGIZE
end_undef

begin_define
define|#
directive|define
name|SIOCGIFFLAGS
value|SIO_GET_INTERFACE_LIST
end_define

begin_comment
comment|/* used in ntp_io.c */
end_comment

begin_comment
comment|/*  * Below this line are includes which must happen after the bulk of  * config.h is processed.  If you need to add another #include to this  * file the preferred location is near the top, above the similar  * line of hyphens.  * ---------------------------------------------------------------------  */
end_comment

begin_comment
comment|/*  * Include standard stat information  */
end_comment

begin_include
include|#
directive|include
file|<isc/stat.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CONFIG_H */
end_comment

end_unit

