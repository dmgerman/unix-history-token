begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// -*- C++ -*-
end_comment

begin_comment
comment|/* Copyright (C) 1989, 1990, 1991, 1992 Free Software Foundation, Inc.      Written by James Clark (jjc@jclark.com)  This file is part of groff.  groff is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  groff is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with groff; see the file COPYING.  If not, write to the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA. */
end_comment

begin_define
define|#
directive|define
name|DONT_STORE
value|1
end_define

begin_define
define|#
directive|define
name|MUST_ALREADY_EXIST
value|2
end_define

begin_decl_stmt
name|class
name|symbol
block|{
specifier|static
specifier|const
name|char
modifier|*
modifier|*
name|table
decl_stmt|;
specifier|static
name|int
name|table_used
decl_stmt|;
specifier|static
name|int
name|table_size
decl_stmt|;
specifier|static
name|char
modifier|*
name|block
decl_stmt|;
specifier|static
name|int
name|block_size
decl_stmt|;
specifier|const
name|char
modifier|*
name|s
decl_stmt|;
name|public
label|:
name|symbol
argument_list|(
argument|const char *p
argument_list|,
argument|int how =
literal|0
argument_list|)
empty_stmt|;
name|symbol
argument_list|()
expr_stmt|;
name|unsigned
name|long
name|hash
argument_list|()
specifier|const
expr_stmt|;
name|operator
operator|==
operator|(
name|symbol
operator|)
specifier|const
expr_stmt|;
name|operator
operator|!=
operator|(
name|symbol
operator|)
specifier|const
expr_stmt|;
specifier|const
name|char
operator|*
name|contents
argument_list|()
specifier|const
expr_stmt|;
name|int
name|is_null
argument_list|()
specifier|const
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|symbol
name|NULL_SYMBOL
decl_stmt|;
end_decl_stmt

begin_expr_stmt
specifier|inline
name|symbol
operator|::
name|symbol
argument_list|()
operator|:
name|s
argument_list|(
literal|0
argument_list|)
block|{ }
specifier|inline
name|int
name|symbol
operator|::
name|operator
operator|==
operator|(
name|symbol
name|p
operator|)
specifier|const
block|{
return|return
name|s
operator|==
name|p
operator|.
name|s
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|symbol
operator|::
name|operator
operator|!=
operator|(
name|symbol
name|p
operator|)
specifier|const
block|{
return|return
name|s
operator|!=
name|p
operator|.
name|s
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|unsigned
name|long
name|symbol
operator|::
name|hash
argument_list|()
specifier|const
block|{
return|return
operator|(
name|unsigned
name|long
operator|)
name|s
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
specifier|const
name|char
operator|*
name|symbol
operator|::
name|contents
argument_list|()
specifier|const
block|{
return|return
name|s
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|symbol
operator|::
name|is_null
argument_list|()
specifier|const
block|{
return|return
name|s
operator|==
literal|0
return|;
block|}
end_expr_stmt

begin_function_decl
name|symbol
name|concat
parameter_list|(
name|symbol
parameter_list|,
name|symbol
parameter_list|)
function_decl|;
end_function_decl

end_unit

