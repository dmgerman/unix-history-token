begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//    This is part of the iostream library, providing -*- C++ -*- input/output.
end_comment

begin_comment
comment|//    Copyright (C) 1991 Per Bothner.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//    This library is free software; you can redistribute it and/or
end_comment

begin_comment
comment|//    modify it under the terms of the GNU Library General Public
end_comment

begin_comment
comment|//    License as published by the Free Software Foundation; either
end_comment

begin_comment
comment|//    version 2 of the License, or (at your option) any later version.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//    This library is distributed in the hope that it will be useful,
end_comment

begin_comment
comment|//    but WITHOUT ANY WARRANTY; without even the implied warranty of
end_comment

begin_comment
comment|//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
end_comment

begin_comment
comment|//    Library General Public License for more details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//    You should have received a copy of the GNU Library General Public
end_comment

begin_comment
comment|//    License along with this library; if not, write to the Free
end_comment

begin_comment
comment|//    Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_IOSTREAM_H
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_pragma
pragma|#
directive|pragma
name|interface
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|_IOSTREAM_H
end_define

begin_include
include|#
directive|include
file|<streambuf.h>
end_include

begin_decl_stmt
name|class
name|istream
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|ostream
decl_stmt|;
end_decl_stmt

begin_typedef
typedef|typedef
name|ios
modifier|&
function_decl|(
modifier|*
name|__manip
function_decl|)
parameter_list|(
name|ios
modifier|&
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|istream
modifier|&
function_decl|(
modifier|*
name|__imanip
function_decl|)
parameter_list|(
name|istream
modifier|&
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ostream
modifier|&
function_decl|(
modifier|*
name|__omanip
function_decl|)
parameter_list|(
name|ostream
modifier|&
parameter_list|)
function_decl|;
end_typedef

begin_function_decl
specifier|extern
name|istream
modifier|&
name|ws
parameter_list|(
name|istream
modifier|&
name|ins
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|ostream
modifier|&
name|flush
parameter_list|(
name|ostream
modifier|&
name|outs
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|ostream
modifier|&
name|endl
parameter_list|(
name|ostream
modifier|&
name|outs
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|ostream
modifier|&
name|ends
parameter_list|(
name|ostream
modifier|&
name|outs
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|class
name|ostream
range|:
name|virtual
name|public
name|ios
block|{
comment|// NOTE: If fields are changed, you must fix _fake_ostream in stdstreams.C!
name|void
name|do_osfx
argument_list|()
block|;
name|public
operator|:
name|ostream
argument_list|()
block|{ }
name|ostream
argument_list|(
name|streambuf
operator|*
name|sb
argument_list|,
name|ostream
operator|*
name|tied
operator|=
name|NULL
argument_list|)
block|;
name|int
name|opfx
argument_list|()
block|{
if|if
condition|(
operator|!
name|good
argument_list|()
condition|)
return|return
literal|0
return|;
else|else
block|{
if|if
condition|(
name|_tie
condition|)
name|_tie
operator|->
name|flush
argument_list|()
expr_stmt|;
return|return
literal|1
return|;
block|}
block|}
name|void
name|osfx
argument_list|()
block|{
if|if
condition|(
name|flags
argument_list|()
operator|&
operator|(
name|ios
operator|::
name|unitbuf
operator||
name|ios
operator|::
name|stdio
operator|)
condition|)
name|do_osfx
argument_list|()
expr_stmt|;
block|}
name|streambuf
operator|*
name|ostreambuf
argument_list|()
specifier|const
block|{
return|return
name|_strbuf
return|;
block|}
name|ostream
operator|&
name|flush
argument_list|()
block|;
name|ostream
operator|&
name|put
argument_list|(
argument|char c
argument_list|)
block|{
name|_strbuf
operator|->
name|sputc
argument_list|(
name|c
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
name|ostream
operator|&
name|put
argument_list|(
argument|unsigned char c
argument_list|)
block|{
return|return
name|put
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
return|;
block|}
name|ostream
operator|&
name|write
argument_list|(
argument|const char *s
argument_list|,
argument|int n
argument_list|)
block|;
name|ostream
operator|&
name|write
argument_list|(
argument|const unsigned char *s
argument_list|,
argument|int n
argument_list|)
block|{
return|return
name|write
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|s
argument_list|,
name|n
argument_list|)
return|;
block|}
ifndef|#
directive|ifndef
name|_G_BROKEN_SIGNED_CHAR
name|ostream
operator|&
name|put
argument_list|(
argument|signed char c
argument_list|)
block|{
return|return
name|put
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
return|;
block|}
name|ostream
operator|&
name|write
argument_list|(
argument|const signed char *s
argument_list|,
argument|int n
argument_list|)
block|{
return|return
name|write
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|s
argument_list|,
name|n
argument_list|)
return|;
block|}
endif|#
directive|endif
name|ostream
operator|&
name|write
argument_list|(
argument|const void *s
argument_list|,
argument|int n
argument_list|)
block|{
return|return
name|write
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|s
argument_list|,
name|n
argument_list|)
return|;
block|}
name|ostream
operator|&
name|seekp
argument_list|(
name|streampos
argument_list|)
block|;
name|ostream
operator|&
name|seekp
argument_list|(
name|streamoff
argument_list|,
name|_seek_dir
argument_list|)
block|;
name|streampos
name|tellp
argument_list|()
block|;
name|ostream
operator|&
name|form
argument_list|(
specifier|const
name|char
operator|*
name|format
operator|...
argument_list|)
block|;
name|ostream
operator|&
name|vform
argument_list|(
argument|const char *format
argument_list|,
argument|_G_va_list args
argument_list|)
block|;
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|char
name|c
operator|)
block|;
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|unsigned
name|char
name|c
operator|)
block|{
return|return
operator|(
operator|*
name|this
operator|)
operator|<<
operator|(
name|char
operator|)
name|c
return|;
block|}
ifndef|#
directive|ifndef
name|_G_BROKEN_SIGNED_CHAR
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|signed
name|char
name|c
operator|)
block|{
return|return
operator|(
operator|*
name|this
operator|)
operator|<<
operator|(
name|char
operator|)
name|c
return|;
block|}
endif|#
directive|endif
name|ostream
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|char
operator|*
name|s
operator|)
block|;
name|ostream
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|unsigned
name|char
operator|*
name|s
operator|)
block|{
return|return
operator|(
operator|*
name|this
operator|)
operator|<<
operator|(
specifier|const
name|char
operator|*
operator|)
name|s
return|;
block|}
ifndef|#
directive|ifndef
name|_G_BROKEN_SIGNED_CHAR
name|ostream
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|signed
name|char
operator|*
name|s
operator|)
block|{
return|return
operator|(
operator|*
name|this
operator|)
operator|<<
operator|(
specifier|const
name|char
operator|*
operator|)
name|s
return|;
block|}
endif|#
directive|endif
name|ostream
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|void
operator|*
name|p
operator|)
block|;
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|int
name|n
operator|)
block|;
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|unsigned
name|int
name|n
operator|)
block|;
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|long
name|n
operator|)
block|;
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|unsigned
name|long
name|n
operator|)
block|;
ifdef|#
directive|ifdef
name|__GNUG__
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|long
name|long
name|n
operator|)
block|;
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|unsigned
name|long
name|long
name|n
operator|)
block|;
endif|#
directive|endif
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|short
name|n
operator|)
block|{
return|return
name|operator
operator|<<
operator|(
operator|(
name|int
operator|)
name|n
operator|)
return|;
block|}
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|unsigned
name|short
name|n
operator|)
block|{
return|return
name|operator
operator|<<
operator|(
operator|(
name|unsigned
name|int
operator|)
name|n
operator|)
return|;
block|}
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|double
name|n
operator|)
block|;
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|float
name|n
operator|)
block|{
return|return
name|operator
operator|<<
operator|(
operator|(
name|double
operator|)
name|n
operator|)
return|;
block|}
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|__omanip
name|func
operator|)
block|{
return|return
call|(
modifier|*
name|func
call|)
argument_list|(
operator|*
name|this
argument_list|)
return|;
block|}
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|__manip
name|func
operator|)
block|{
call|(
modifier|*
name|func
call|)
argument_list|(
operator|*
name|this
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|streambuf
operator|*
operator|)
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|istream
range|:
name|virtual
name|public
name|ios
block|{
comment|// NOTE: If fields are changed, you must fix _fake_istream in stdstreams.C!
name|_G_ssize_t
name|_gcount
block|;
name|int
name|_skip_ws
argument_list|()
block|;
name|public
operator|:
name|istream
argument_list|()
block|{
name|_gcount
operator|=
literal|0
block|; }
name|istream
argument_list|(
name|streambuf
operator|*
name|sb
argument_list|,
name|ostream
operator|*
name|tied
operator|=
name|NULL
argument_list|)
block|;
name|streambuf
operator|*
name|istreambuf
argument_list|()
specifier|const
block|{
return|return
name|_strbuf
return|;
block|}
name|istream
operator|&
name|get
argument_list|(
argument|char* ptr
argument_list|,
argument|int len
argument_list|,
argument|char delim =
literal|'\n'
argument_list|)
block|;
name|istream
operator|&
name|get
argument_list|(
argument|unsigned char* ptr
argument_list|,
argument|int len
argument_list|,
argument|char delim =
literal|'\n'
argument_list|)
block|{
return|return
name|get
argument_list|(
operator|(
name|char
operator|*
operator|)
name|ptr
argument_list|,
name|len
argument_list|,
name|delim
argument_list|)
return|;
block|}
name|istream
operator|&
name|get
argument_list|(
name|char
operator|&
name|c
argument_list|)
block|;
name|istream
operator|&
name|get
argument_list|(
argument|unsigned char& c
argument_list|)
block|{
return|return
name|get
argument_list|(
operator|(
name|char
operator|&
operator|)
name|c
argument_list|)
return|;
block|}
name|istream
operator|&
name|getline
argument_list|(
argument|char* ptr
argument_list|,
argument|int len
argument_list|,
argument|char delim =
literal|'\n'
argument_list|)
block|;
name|istream
operator|&
name|getline
argument_list|(
argument|unsigned char* ptr
argument_list|,
argument|int len
argument_list|,
argument|char delim =
literal|'\n'
argument_list|)
block|{
return|return
name|getline
argument_list|(
operator|(
name|char
operator|*
operator|)
name|ptr
argument_list|,
name|len
argument_list|,
name|delim
argument_list|)
return|;
block|}
ifndef|#
directive|ifndef
name|_G_BROKEN_SIGNED_CHAR
name|istream
operator|&
name|get
argument_list|(
argument|signed char& c
argument_list|)
block|{
return|return
name|get
argument_list|(
operator|(
name|char
operator|&
operator|)
name|c
argument_list|)
return|;
block|}
name|istream
operator|&
name|get
argument_list|(
argument|signed char* ptr
argument_list|,
argument|int len
argument_list|,
argument|char delim =
literal|'\n'
argument_list|)
block|{
return|return
name|get
argument_list|(
operator|(
name|char
operator|*
operator|)
name|ptr
argument_list|,
name|len
argument_list|,
name|delim
argument_list|)
return|;
block|}
name|istream
operator|&
name|getline
argument_list|(
argument|signed char* ptr
argument_list|,
argument|int len
argument_list|,
argument|char delim =
literal|'\n'
argument_list|)
block|{
return|return
name|getline
argument_list|(
operator|(
name|char
operator|*
operator|)
name|ptr
argument_list|,
name|len
argument_list|,
name|delim
argument_list|)
return|;
block|}
endif|#
directive|endif
name|istream
operator|&
name|read
argument_list|(
argument|char *ptr
argument_list|,
argument|int n
argument_list|)
block|;
name|istream
operator|&
name|read
argument_list|(
argument|unsigned char *ptr
argument_list|,
argument|int n
argument_list|)
block|{
return|return
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
name|ptr
argument_list|,
name|n
argument_list|)
return|;
block|}
ifndef|#
directive|ifndef
name|_G_BROKEN_SIGNED_CHAR
name|istream
operator|&
name|read
argument_list|(
argument|signed char *ptr
argument_list|,
argument|int n
argument_list|)
block|{
return|return
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
name|ptr
argument_list|,
name|n
argument_list|)
return|;
block|}
endif|#
directive|endif
name|istream
operator|&
name|read
argument_list|(
argument|void *ptr
argument_list|,
argument|int n
argument_list|)
block|{
return|return
name|read
argument_list|(
operator|(
name|char
operator|*
operator|)
name|ptr
argument_list|,
name|n
argument_list|)
return|;
block|}
name|istream
operator|&
name|get
argument_list|(
argument|streambuf& sb
argument_list|,
argument|char delim =
literal|'\n'
argument_list|)
block|;
name|istream
operator|&
name|gets
argument_list|(
argument|char **s
argument_list|,
argument|char delim =
literal|'\n'
argument_list|)
block|;
name|int
name|ipfx
argument_list|(
argument|int need
argument_list|)
block|{
if|if
condition|(
operator|!
name|good
argument_list|()
condition|)
block|{
name|set
argument_list|(
name|ios
operator|::
name|failbit
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
else|else
block|{
if|if
condition|(
name|_tie
operator|&&
operator|(
name|need
operator|==
literal|0
operator|||
name|rdbuf
argument_list|()
operator|->
name|in_avail
argument_list|()
operator|<
name|need
operator|)
condition|)
name|_tie
operator|->
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|need
operator|&&
operator|(
name|flags
argument_list|()
operator|&
name|ios
operator|::
name|skipws
operator|)
condition|)
return|return
name|_skip_ws
argument_list|()
return|;
else|else
return|return
literal|1
return|;
block|}
block|}
name|int
name|ipfx0
argument_list|()
block|{
comment|// Optimized version of ipfx(0).
if|if
condition|(
operator|!
name|good
argument_list|()
condition|)
block|{
name|set
argument_list|(
name|ios
operator|::
name|failbit
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
else|else
block|{
if|if
condition|(
name|_tie
condition|)
name|_tie
operator|->
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|flags
argument_list|()
operator|&
name|ios
operator|::
name|skipws
condition|)
return|return
name|_skip_ws
argument_list|()
return|;
else|else
return|return
literal|1
return|;
block|}
block|}
name|int
name|ipfx1
argument_list|()
block|{
comment|// Optimized version of ipfx(1).
if|if
condition|(
operator|!
name|good
argument_list|()
condition|)
block|{
name|set
argument_list|(
name|ios
operator|::
name|failbit
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
else|else
block|{
if|if
condition|(
name|_tie
operator|&&
name|rdbuf
argument_list|()
operator|->
name|in_avail
argument_list|()
operator|==
literal|0
condition|)
name|_tie
operator|->
name|flush
argument_list|()
expr_stmt|;
return|return
literal|1
return|;
block|}
block|}
name|void
name|isfx
argument_list|()
block|{ }
name|int
name|get
argument_list|()
block|{
if|if
condition|(
operator|!
name|ipfx1
argument_list|()
condition|)
return|return
name|EOF
return|;
else|else
block|{
name|int
name|ch
init|=
name|_strbuf
operator|->
name|sbumpc
argument_list|()
decl_stmt|;
if|if
condition|(
name|ch
operator|==
name|EOF
condition|)
name|set
argument_list|(
name|ios
operator|::
name|eofbit
argument_list|)
expr_stmt|;
return|return
name|ch
return|;
block|}
block|}
name|int
name|peek
argument_list|()
block|;
name|_G_ssize_t
name|gcount
argument_list|()
block|{
return|return
name|_gcount
return|;
block|}
name|istream
operator|&
name|ignore
argument_list|(
argument|int n=
literal|1
argument_list|,
argument|int delim = EOF
argument_list|)
block|;
name|istream
operator|&
name|seekg
argument_list|(
name|streampos
argument_list|)
block|;
name|istream
operator|&
name|seekg
argument_list|(
name|streamoff
argument_list|,
name|_seek_dir
argument_list|)
block|;
name|streampos
name|tellg
argument_list|()
block|;
name|istream
operator|&
name|putback
argument_list|(
argument|char ch
argument_list|)
block|{
if|if
condition|(
name|good
argument_list|()
operator|&&
name|_strbuf
operator|->
name|sputbackc
argument_list|(
name|ch
argument_list|)
operator|==
name|EOF
condition|)
name|clear
argument_list|(
name|ios
operator|::
name|badbit
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_decl_stmt

begin_function
name|istream
modifier|&
name|unget
parameter_list|()
block|{
if|if
condition|(
name|good
argument_list|()
operator|&&
name|_strbuf
operator|->
name|sungetc
argument_list|()
operator|==
name|EOF
condition|)
name|clear
argument_list|(
name|ios
operator|::
name|badbit
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function

begin_function_decl
name|istream
modifier|&
name|scan
parameter_list|(
specifier|const
name|char
modifier|*
name|format
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|istream
modifier|&
name|vscan
parameter_list|(
specifier|const
name|char
modifier|*
name|format
parameter_list|,
name|_G_va_list
name|args
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|_STREAM_COMPAT
end_ifdef

begin_function
name|istream
modifier|&
name|unget
parameter_list|(
name|char
name|ch
parameter_list|)
block|{
return|return
name|putback
argument_list|(
name|ch
argument_list|)
return|;
block|}
end_function

begin_function_decl
name|int
name|skip
parameter_list|(
name|int
name|i
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|istream
operator|&
name|operator
operator|>>
operator|(
name|char
operator|*
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|istream
operator|&
name|operator
operator|>>
operator|(
name|unsigned
name|char
operator|*
name|p
operator|)
block|{
return|return
name|operator
operator|>>
operator|(
operator|(
name|char
operator|*
operator|)
name|p
operator|)
return|;
block|}
end_expr_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|_G_BROKEN_SIGNED_CHAR
end_ifndef

begin_expr_stmt
name|istream
operator|&
name|operator
operator|>>
operator|(
name|signed
name|char
operator|*
name|p
operator|)
block|{
return|return
name|operator
operator|>>
operator|(
operator|(
name|char
operator|*
operator|)
name|p
operator|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|istream
operator|&
name|operator
operator|>>
operator|(
name|char
operator|&
name|c
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|istream
operator|&
name|operator
operator|>>
operator|(
name|unsigned
name|char
operator|&
name|c
operator|)
block|{
return|return
name|operator
operator|>>
operator|(
operator|(
name|char
operator|&
operator|)
name|c
operator|)
return|;
block|}
end_expr_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|_G_BROKEN_SIGNED_CHAR
end_ifndef

begin_expr_stmt
name|istream
operator|&
name|operator
operator|>>
operator|(
name|signed
name|char
operator|&
name|c
operator|)
block|{
return|return
name|operator
operator|>>
operator|(
operator|(
name|char
operator|&
operator|)
name|c
operator|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|istream
operator|&
name|operator
operator|>>
operator|(
name|int
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|istream
operator|&
name|operator
operator|>>
operator|(
name|long
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_expr_stmt
name|istream
operator|&
name|operator
operator|>>
operator|(
name|long
name|long
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|istream
operator|&
name|operator
operator|>>
operator|(
name|short
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|istream
operator|&
name|operator
operator|>>
operator|(
name|unsigned
name|int
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|istream
operator|&
name|operator
operator|>>
operator|(
name|unsigned
name|long
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_expr_stmt
name|istream
operator|&
name|operator
operator|>>
operator|(
name|unsigned
name|long
name|long
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|istream
operator|&
name|operator
operator|>>
operator|(
name|unsigned
name|short
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|istream
operator|&
name|operator
operator|>>
operator|(
name|float
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|istream
operator|&
name|operator
operator|>>
operator|(
name|double
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|istream
operator|&
name|operator
operator|>>
operator|(
name|__manip
name|func
operator|)
block|{
call|(
modifier|*
name|func
call|)
argument_list|(
operator|*
name|this
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|istream
operator|&
name|operator
operator|>>
operator|(
name|__imanip
name|func
operator|)
block|{
return|return
call|(
modifier|*
name|func
call|)
argument_list|(
operator|*
name|this
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|istream
operator|&
name|operator
operator|>>
operator|(
name|streambuf
operator|*
operator|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
unit|};
name|class
name|iostream
range|:
name|public
name|istream
decl_stmt|,
name|public
name|ostream
block|{
name|_G_ssize_t
name|_gcount
decl_stmt|;
name|public
label|:
name|iostream
argument_list|()
block|{
name|_gcount
operator|=
literal|0
expr_stmt|;
block|}
name|iostream
argument_list|(
name|streambuf
operator|*
name|sb
argument_list|,
name|ostream
operator|*
name|tied
operator|=
name|NULL
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
specifier|extern
name|istream
name|cin
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|ostream
name|cout
decl_stmt|,
name|cerr
decl_stmt|,
name|clog
decl_stmt|;
end_decl_stmt

begin_comment
comment|// clog->rdbuf() == cerr->rdbuf()
end_comment

begin_struct
struct|struct
name|Iostream_init
block|{ }
struct|;
end_struct

begin_comment
comment|// Compatibility hack for AT&T library.
end_comment

begin_function
specifier|inline
name|ios
modifier|&
name|dec
parameter_list|(
name|ios
modifier|&
name|i
parameter_list|)
block|{
name|i
operator|.
name|setf
argument_list|(
name|ios
operator|::
name|dec
argument_list|,
name|ios
operator|::
name|dec
operator||
name|ios
operator|::
name|hex
operator||
name|ios
operator|::
name|oct
argument_list|)
expr_stmt|;
return|return
name|i
return|;
block|}
end_function

begin_function
specifier|inline
name|ios
modifier|&
name|hex
parameter_list|(
name|ios
modifier|&
name|i
parameter_list|)
block|{
name|i
operator|.
name|setf
argument_list|(
name|ios
operator|::
name|hex
argument_list|,
name|ios
operator|::
name|dec
operator||
name|ios
operator|::
name|hex
operator||
name|ios
operator|::
name|oct
argument_list|)
expr_stmt|;
return|return
name|i
return|;
block|}
end_function

begin_function
specifier|inline
name|ios
modifier|&
name|oct
parameter_list|(
name|ios
modifier|&
name|i
parameter_list|)
block|{
name|i
operator|.
name|setf
argument_list|(
name|ios
operator|::
name|oct
argument_list|,
name|ios
operator|::
name|dec
operator||
name|ios
operator|::
name|hex
operator||
name|ios
operator|::
name|oct
argument_list|)
expr_stmt|;
return|return
name|i
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*!_IOSTREAM_H*/
end_comment

end_unit

