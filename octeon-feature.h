begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/***********************license start***************  * Copyright (c) 2003-2010  Cavium Inc. (support@cavium.com). All rights  * reserved.  *  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *  *   * Redistributions in binary form must reproduce the above  *     copyright notice, this list of conditions and the following  *     disclaimer in the documentation and/or other materials provided  *     with the distribution.   *   * Neither the name of Cavium Inc. nor the names of  *     its contributors may be used to endorse or promote products  *     derived from this software without specific prior written  *     permission.   * This Software, including technical data, may be subject to U.S. export  control  * laws, including the U.S. Export Administration Act and its  associated  * regulations, and may be subject to export or import  regulations in other  * countries.   * TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"  * AND WITH ALL FAULTS AND CAVIUM INC. MAKES NO PROMISES, REPRESENTATIONS OR  * WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO  * THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY REPRESENTATION OR  * DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT DEFECTS, AND CAVIUM  * SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES OF TITLE,  * MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF  * VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR  * CORRESPONDENCE TO DESCRIPTION. THE ENTIRE  RISK ARISING OUT OF USE OR  * PERFORMANCE OF THE SOFTWARE LIES WITH YOU.  ***********************license end**************************************/
end_comment

begin_comment
comment|/**  * @file  *  * File defining checks for different Octeon features.  *  *<hr>$Revision: 30468 $<hr>  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__OCTEON_FEATURE_H__
end_ifndef

begin_define
define|#
directive|define
name|__OCTEON_FEATURE_H__
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/*  * Errors  */
typedef|typedef
enum|enum
block|{
name|OCTEON_FEATURE_SUCCESS
init|=
literal|0
block|,
name|OCTEON_FEATURE_MAP_OVERFLOW
init|=
operator|-
literal|1
block|, }
name|octeon_feature_result_t
typedef|;
comment|/*  * Octeon models are declared after the macros in octeon-model.h with the  * suffix _FEATURE. The individual features are declared with the  * _FEATURE_ infix.  */
typedef|typedef
enum|enum
block|{
comment|/*      * Checks on the critical path are moved to the top (8 positions)      * so that the compiler generates one less insn than for the rest      * of the checks.      */
name|OCTEON_FEATURE_PKND
block|,
comment|/**<  CN68XX uses port kinds for packet interface */
name|OCTEON_FEATURE_CN68XX_WQE
block|,
comment|/**<  CN68XX has different fields in word0 - word2 */
comment|/*      * Features      */
name|OCTEON_FEATURE_SAAD
block|,
comment|/**<  Octeon models in the CN5XXX family and higher support atomic add instructions to memory (saa/saad) */
name|OCTEON_FEATURE_ZIP
block|,
comment|/**<  Does this Octeon support the ZIP offload engine? */
name|OCTEON_FEATURE_CRYPTO
block|,
comment|/**<  Does this Octeon support crypto acceleration using COP2? */
name|OCTEON_FEATURE_DORM_CRYPTO
block|,
comment|/**<  Can crypto be enabled by calling cvmx_crypto_dormant_enable()? */
name|OCTEON_FEATURE_PCIE
block|,
comment|/**<  Does this Octeon support PCI express? */
name|OCTEON_FEATURE_SRIO
block|,
comment|/**<  Does this Octeon support SRIO */
name|OCTEON_FEATURE_ILK
block|,
comment|/**<  Does this Octeon support Interlaken */
name|OCTEON_FEATURE_KEY_MEMORY
block|,
comment|/**<  Some Octeon models support internal memory for storing cryptographic keys */
name|OCTEON_FEATURE_LED_CONTROLLER
block|,
comment|/**<  Octeon has a LED controller for banks of external LEDs */
name|OCTEON_FEATURE_TRA
block|,
comment|/**<  Octeon has a trace buffer */
name|OCTEON_FEATURE_MGMT_PORT
block|,
comment|/**<  Octeon has a management port */
name|OCTEON_FEATURE_RAID
block|,
comment|/**<  Octeon has a raid unit */
name|OCTEON_FEATURE_USB
block|,
comment|/**<  Octeon has a builtin USB */
name|OCTEON_FEATURE_NO_WPTR
block|,
comment|/**<  Octeon IPD can run without using work queue entries */
name|OCTEON_FEATURE_DFA
block|,
comment|/**<  Octeon has DFA state machines */
name|OCTEON_FEATURE_MDIO_CLAUSE_45
block|,
comment|/**<  Octeon MDIO block supports clause 45 transactions for 10 Gig support */
name|OCTEON_FEATURE_NPEI
block|,
comment|/**<  CN52XX and CN56XX used a block named NPEI for PCIe access. Newer chips replaced this with SLI+DPI */
name|OCTEON_FEATURE_HFA
block|,
comment|/**<  Octeon has DFA/HFA */
name|OCTEON_FEATURE_DFM
block|,
comment|/**<  Octeon has DFM */
name|OCTEON_FEATURE_CIU2
block|,
comment|/**<  Octeon has CIU2 */
name|OCTEON_FEATURE_DICI_MODE
block|,
comment|/**<  Octeon has DMA Instruction Completion Interrupt mode */
name|OCTEON_FEATURE_BIT_EXTRACTOR
block|,
comment|/**<  Octeon has Bit Select Extractor schedulor */
name|OCTEON_FEATURE_NAND
block|,
comment|/**<  Octeon has NAND */
name|OCTEON_FEATURE_MMC
block|,
comment|/**<  Octeon has built-in MMC support */
name|OCTEON_MAX_FEATURE
block|}
name|octeon_feature_t
typedef|;
comment|/**  * Determine if the current Octeon supports a specific feature. These  * checks have been optimized to be fairly quick, but they should still  * be kept out of fast path code.  *  * @param feature Feature to check for. This should always be a constant so the  *                compiler can remove the switch statement through optimization.  *  * @return Non zero if the feature exists. Zero if the feature does not  *         exist.  *  * Note: This was octeon_has_feature before the feature map and is  * called only after model-checking is set up in octeon_feature_init().  */
specifier|static
specifier|inline
name|int
name|old_octeon_has_feature
parameter_list|(
name|octeon_feature_t
name|feature
parameter_list|)
block|{
switch|switch
condition|(
name|feature
condition|)
block|{
case|case
name|OCTEON_FEATURE_SAAD
case|:
return|return
operator|!
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
return|;
case|case
name|OCTEON_FEATURE_ZIP
case|:
if|if
condition|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
condition|)
return|return
literal|0
return|;
else|else
return|return
operator|!
name|cvmx_fuse_read
argument_list|(
literal|121
argument_list|)
return|;
case|case
name|OCTEON_FEATURE_CRYPTO
case|:
if|if
condition|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN6XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF7XXX
argument_list|)
condition|)
block|{
name|cvmx_mio_fus_dat2_t
name|fus_2
decl_stmt|;
name|fus_2
operator|.
name|u64
operator|=
name|cvmx_read_csr
argument_list|(
name|CVMX_MIO_FUS_DAT2
argument_list|)
expr_stmt|;
if|if
condition|(
name|fus_2
operator|.
name|s
operator|.
name|nocrypto
operator|||
name|fus_2
operator|.
name|s
operator|.
name|nomul
condition|)
block|{
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|fus_2
operator|.
name|s
operator|.
name|dorm_crypto
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
name|cvmx_rnm_ctl_status_t
name|st
decl_stmt|;
name|st
operator|.
name|u64
operator|=
name|cvmx_read_csr
argument_list|(
name|CVMX_RNM_CTL_STATUS
argument_list|)
expr_stmt|;
return|return
name|st
operator|.
name|s
operator|.
name|eer_val
return|;
block|}
block|}
else|else
block|{
return|return
operator|!
name|cvmx_fuse_read
argument_list|(
literal|90
argument_list|)
return|;
block|}
case|case
name|OCTEON_FEATURE_DORM_CRYPTO
case|:
if|if
condition|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN6XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF7XXX
argument_list|)
condition|)
block|{
name|cvmx_mio_fus_dat2_t
name|fus_2
decl_stmt|;
name|fus_2
operator|.
name|u64
operator|=
name|cvmx_read_csr
argument_list|(
name|CVMX_MIO_FUS_DAT2
argument_list|)
expr_stmt|;
return|return
operator|!
name|fus_2
operator|.
name|s
operator|.
name|nocrypto
operator|&&
operator|!
name|fus_2
operator|.
name|s
operator|.
name|nomul
operator|&&
name|fus_2
operator|.
name|s
operator|.
name|dorm_crypto
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
case|case
name|OCTEON_FEATURE_PCIE
case|:
return|return
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN6XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF7XXX
argument_list|)
operator|)
return|;
case|case
name|OCTEON_FEATURE_SRIO
case|:
return|return
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|)
return|;
case|case
name|OCTEON_FEATURE_ILK
case|:
return|return
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
return|;
case|case
name|OCTEON_FEATURE_KEY_MEMORY
case|:
return|return
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN6XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF7XXX
argument_list|)
operator|)
return|;
case|case
name|OCTEON_FEATURE_LED_CONTROLLER
case|:
return|return
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
return|;
case|case
name|OCTEON_FEATURE_TRA
case|:
return|return
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|)
return|;
case|case
name|OCTEON_FEATURE_MGMT_PORT
case|:
return|return
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN6XXX
argument_list|)
operator|)
return|;
case|case
name|OCTEON_FEATURE_RAID
case|:
return|return
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN6XXX
argument_list|)
return|;
case|case
name|OCTEON_FEATURE_USB
case|:
return|return
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
return|;
case|case
name|OCTEON_FEATURE_NO_WPTR
case|:
return|return
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN6XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF7XXX
argument_list|)
operator|)
operator|&&
operator|!
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX_PASS1_X
argument_list|)
operator|&&
operator|!
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX_PASS1_X
argument_list|)
operator|)
return|;
case|case
name|OCTEON_FEATURE_DFA
case|:
if|if
condition|(
operator|!
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|!
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|!
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
condition|)
return|return
literal|0
return|;
elseif|else
if|if
condition|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3020
argument_list|)
condition|)
return|return
literal|0
return|;
else|else
return|return
operator|!
name|cvmx_fuse_read
argument_list|(
literal|120
argument_list|)
return|;
case|case
name|OCTEON_FEATURE_HFA
case|:
if|if
condition|(
operator|!
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN6XXX
argument_list|)
condition|)
return|return
literal|0
return|;
else|else
return|return
operator|!
name|cvmx_fuse_read
argument_list|(
literal|90
argument_list|)
return|;
case|case
name|OCTEON_FEATURE_DFM
case|:
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|)
condition|)
return|return
literal|0
return|;
else|else
return|return
operator|!
name|cvmx_fuse_read
argument_list|(
literal|90
argument_list|)
return|;
case|case
name|OCTEON_FEATURE_MDIO_CLAUSE_45
case|:
return|return
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|)
return|;
case|case
name|OCTEON_FEATURE_NPEI
case|:
return|return
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|)
return|;
case|case
name|OCTEON_FEATURE_PKND
case|:
return|return
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
return|;
case|case
name|OCTEON_FEATURE_CN68XX_WQE
case|:
return|return
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
return|;
case|case
name|OCTEON_FEATURE_CIU2
case|:
return|return
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
return|;
case|case
name|OCTEON_FEATURE_NAND
case|:
return|return
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
return|;
case|case
name|OCTEON_FEATURE_DICI_MODE
case|:
return|return
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX_PASS2_X
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
return|;
case|case
name|OCTEON_FEATURE_BIT_EXTRACTOR
case|:
return|return
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX_PASS2_X
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
return|;
case|case
name|OCTEON_FEATURE_MMC
case|:
return|return
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
return|;
default|default:
break|break;
block|}
return|return
literal|0
return|;
block|}
comment|/*  * bit map for octeon features  */
define|#
directive|define
name|FEATURE_MAP_SIZE
value|128
specifier|extern
name|uint8_t
name|octeon_feature_map
index|[
name|FEATURE_MAP_SIZE
index|]
decl_stmt|;
comment|/*  * Answer ``Is the bit for feature set in the bitmap?''  * @param feature  * @return 1 when the feature is present and 0 otherwise, -1 in case of error.  */
if|#
directive|if
name|defined
argument_list|(
name|__U_BOOT__
argument_list|)
operator|||
name|defined
argument_list|(
name|CVMX_BUILD_FOR_LINUX_HOST
argument_list|)
operator|||
name|defined
argument_list|(
name|CVMX_BUILD_FOR_TOOLCHAIN
argument_list|)
define|#
directive|define
name|octeon_has_feature
value|old_octeon_has_feature
else|#
directive|else
if|#
directive|if
name|defined
argument_list|(
name|USE_RUNTIME_MODEL_CHECKS
argument_list|)
specifier|static
specifier|inline
name|int
name|octeon_has_feature
parameter_list|(
name|octeon_feature_t
name|feature
parameter_list|)
block|{
name|int
name|byte
decl_stmt|,
name|bit
decl_stmt|;
name|byte
operator|=
name|feature
operator|>>
literal|3
expr_stmt|;
name|bit
operator|=
name|feature
operator|&
literal|0x7
expr_stmt|;
if|if
condition|(
name|byte
operator|>=
name|FEATURE_MAP_SIZE
condition|)
block|{
ifdef|#
directive|ifdef
name|CVMX_BUILD_FOR_LINUX_KERNEL
name|printk
argument_list|(
literal|"ERROR: octeon_feature_map: Invalid Octeon Feature 0x%x\n"
argument_list|,
name|feature
argument_list|)
expr_stmt|;
else|#
directive|else
name|printf
argument_list|(
literal|"ERROR: octeon_feature_map: Invalid Octeon Feature 0x%x\n"
argument_list|,
name|feature
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
operator|-
literal|1
return|;
block|}
return|return
operator|(
name|octeon_feature_map
index|[
name|byte
index|]
operator|&
operator|(
operator|(
literal|1
operator|<<
name|bit
operator|)
operator|)
operator|)
condition|?
literal|1
else|:
literal|0
return|;
block|}
else|#
directive|else
define|#
directive|define
name|octeon_has_feature
value|old_octeon_has_feature
endif|#
directive|endif
endif|#
directive|endif
comment|/*  * initialize octeon_feature_map[]  */
specifier|extern
name|void
name|octeon_feature_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __OCTEON_FEATURE_H__ */
end_comment

end_unit

