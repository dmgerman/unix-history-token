begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * special zone file structures and functions for better dnssec handling  *  * A zone contains a SOA dnssec_zone_rrset, and an AVL tree of 'normal'  * dnssec_zone_rrsets, indexed by name and type  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LDNS_DNSSEC_ZONE_H
end_ifndef

begin_define
define|#
directive|define
name|LDNS_DNSSEC_ZONE_H
end_define

begin_include
include|#
directive|include
file|<ldns/ldns.h>
end_include

begin_include
include|#
directive|include
file|<ldns/rbtree.h>
end_include

begin_include
include|#
directive|include
file|<ldns/host2str.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/**  * Singly linked list of rrs  */
typedef|typedef
name|struct
name|ldns_struct_dnssec_rrs
name|ldns_dnssec_rrs
typedef|;
struct|struct
name|ldns_struct_dnssec_rrs
block|{
name|ldns_rr
modifier|*
name|rr
decl_stmt|;
name|ldns_dnssec_rrs
modifier|*
name|next
decl_stmt|;
block|}
struct|;
comment|/**  * Singly linked list of RRsets  */
typedef|typedef
name|struct
name|ldns_struct_dnssec_rrsets
name|ldns_dnssec_rrsets
typedef|;
struct|struct
name|ldns_struct_dnssec_rrsets
block|{
name|ldns_dnssec_rrs
modifier|*
name|rrs
decl_stmt|;
name|ldns_rr_type
name|type
decl_stmt|;
name|ldns_dnssec_rrs
modifier|*
name|signatures
decl_stmt|;
name|ldns_dnssec_rrsets
modifier|*
name|next
decl_stmt|;
block|}
struct|;
comment|/**  * Structure containing all resource records for a domain name  * Including the derived NSEC3, if present  */
typedef|typedef
name|struct
name|ldns_struct_dnssec_name
name|ldns_dnssec_name
typedef|;
struct|struct
name|ldns_struct_dnssec_name
block|{
comment|/** 	 * pointer to a dname containing the name. 	 * Usually points to the owner name of the first RR of the first RRset 	 */
name|ldns_rdf
modifier|*
name|name
decl_stmt|;
comment|/**  	 * Usually, the name is a pointer to the owner name of the first rr for 	 * this name, but sometimes there is no actual data to point to,  	 * for instance in 	 * names representing empty nonterminals. If so, set alloced to true to 	 * indicate that this data must also be freed when the name is freed 	 */
name|bool
name|name_alloced
decl_stmt|;
comment|/** 	 * The rrsets for this name 	 */
name|ldns_dnssec_rrsets
modifier|*
name|rrsets
decl_stmt|;
comment|/** 	 * NSEC pointing to the next name (or NSEC3 pointing to the next NSEC3) 	 */
name|ldns_rr
modifier|*
name|nsec
decl_stmt|;
comment|/** 	 * signatures for the NSEC record 	 */
name|ldns_dnssec_rrs
modifier|*
name|nsec_signatures
decl_stmt|;
comment|/** 	 * Unlike what the name is_glue suggests, this field is set to true by 	 * ldns_dnssec_zone_mark_glue() or ldns_dnssec_zone_mark_and_get_glue() 	 * when the name, this dnssec_name struct represents, is occluded. 	 * Names that contain other occluded rrsets and records with glue on 	 * the delegation point will NOT have this bool set to true. 	 * This field should NOT be read directly, but only via the  	 * ldns_dnssec_name_is_glue() function! 	 */
name|bool
name|is_glue
decl_stmt|;
comment|/** 	 * pointer to store the hashed name (only used when in an NSEC3 zone 	 */
name|ldns_rdf
modifier|*
name|hashed_name
decl_stmt|;
block|}
struct|;
comment|/**  * Structure containing a dnssec zone  */
struct|struct
name|ldns_struct_dnssec_zone
block|{
comment|/** points to the name containing the SOA RR */
name|ldns_dnssec_name
modifier|*
name|soa
decl_stmt|;
comment|/** tree of ldns_dnssec_names */
name|ldns_rbtree_t
modifier|*
name|names
decl_stmt|;
block|}
struct|;
typedef|typedef
name|struct
name|ldns_struct_dnssec_zone
name|ldns_dnssec_zone
typedef|;
comment|/**  * Creates a new entry for 1 pointer to an rr and 1 pointer to the next rrs  * \return the allocated data  */
name|ldns_dnssec_rrs
modifier|*
name|ldns_dnssec_rrs_new
parameter_list|()
function_decl|;
comment|/**  * Frees the list of rrs, but *not* the individual ldns_rr records  * contained in the list  *   * \param[in] rrs the data structure to free  */
name|void
name|ldns_dnssec_rrs_free
parameter_list|(
name|ldns_dnssec_rrs
modifier|*
name|rrs
parameter_list|)
function_decl|;
comment|/**  * Frees the list of rrs, and the individual ldns_rr records  * contained in the list  *   * \param[in] rrs the data structure to free  */
name|void
name|ldns_dnssec_rrs_deep_free
parameter_list|(
name|ldns_dnssec_rrs
modifier|*
name|rrs
parameter_list|)
function_decl|;
comment|/**  * Adds an RR to the list of RRs. The list will remain ordered  *  * \param[in] rrs the list to add to  * \param[in] rr the RR to add  * \return LDNS_STATUS_OK on success  */
name|ldns_status
name|ldns_dnssec_rrs_add_rr
parameter_list|(
name|ldns_dnssec_rrs
modifier|*
name|rrs
parameter_list|,
name|ldns_rr
modifier|*
name|rr
parameter_list|)
function_decl|;
comment|/**  * Prints the given rrs to the file descriptor  *  * \param[in] out the file descriptor to print to  * \param[in] rrs the list of RRs to print  */
name|void
name|ldns_dnssec_rrs_print
parameter_list|(
name|FILE
modifier|*
name|out
parameter_list|,
name|ldns_dnssec_rrs
modifier|*
name|rrs
parameter_list|)
function_decl|;
comment|/**  * Prints the given rrs to the file descriptor  *  * \param[in] out the file descriptor to print to  * \param[in] fmt the format of the textual representation  * \param[in] rrs the list of RRs to print  */
name|void
name|ldns_dnssec_rrs_print_fmt
parameter_list|(
name|FILE
modifier|*
name|out
parameter_list|,
specifier|const
name|ldns_output_format
modifier|*
name|fmt
parameter_list|,
name|ldns_dnssec_rrs
modifier|*
name|rrs
parameter_list|)
function_decl|;
comment|/**  * Creates a new list (entry) of RRsets  * \return the newly allocated structure  */
name|ldns_dnssec_rrsets
modifier|*
name|ldns_dnssec_rrsets_new
parameter_list|()
function_decl|;
comment|/**  * Frees the list of rrsets and their rrs, but *not* the ldns_rr  * records in the sets  *  * \param[in] rrsets the data structure to free  */
name|void
name|ldns_dnssec_rrsets_free
parameter_list|(
name|ldns_dnssec_rrsets
modifier|*
name|rrsets
parameter_list|)
function_decl|;
comment|/**  * Frees the list of rrsets and their rrs, and the ldns_rr  * records in the sets  *  * \param[in] rrsets the data structure to free  */
name|void
name|ldns_dnssec_rrsets_deep_free
parameter_list|(
name|ldns_dnssec_rrsets
modifier|*
name|rrsets
parameter_list|)
function_decl|;
comment|/**  * Returns the rr type of the rrset (that is head of the given list)  *  * \param[in] rrsets the rrset to get the type of  * \return the rr type  */
name|ldns_rr_type
name|ldns_dnssec_rrsets_type
parameter_list|(
name|ldns_dnssec_rrsets
modifier|*
name|rrsets
parameter_list|)
function_decl|;
comment|/**  * Sets the RR type of the rrset (that is head of the given list)  *  * \param[in] rrsets the rrset to set the type of  * \param[in] type the type to set  * \return LDNS_STATUS_OK on success  */
name|ldns_status
name|ldns_dnssec_rrsets_set_type
parameter_list|(
name|ldns_dnssec_rrsets
modifier|*
name|rrsets
parameter_list|,
name|ldns_rr_type
name|type
parameter_list|)
function_decl|;
comment|/**  * Add an ldns_rr to the corresponding RRset in the given list of RRsets.  * If it is not present, add it as a new RRset with 1 record.  *  * \param[in] rrsets the list of rrsets to add the RR to  * \param[in] rr the rr to add to the list of rrsets  * \return LDNS_STATUS_OK on success  */
name|ldns_status
name|ldns_dnssec_rrsets_add_rr
parameter_list|(
name|ldns_dnssec_rrsets
modifier|*
name|rrsets
parameter_list|,
name|ldns_rr
modifier|*
name|rr
parameter_list|)
function_decl|;
comment|/**  * Print the given list of rrsets to the fiven file descriptor  *   * \param[in] out the file descriptor to print to  * \param[in] rrsets the list of RRsets to print  * \param[in] follow if set to false, only print the first RRset  */
name|void
name|ldns_dnssec_rrsets_print
parameter_list|(
name|FILE
modifier|*
name|out
parameter_list|,
name|ldns_dnssec_rrsets
modifier|*
name|rrsets
parameter_list|,
name|bool
name|follow
parameter_list|)
function_decl|;
comment|/**  * Print the given list of rrsets to the fiven file descriptor  *   * \param[in] out the file descriptor to print to  * \param[in] fmt the format of the textual representation  * \param[in] rrsets the list of RRsets to print  * \param[in] follow if set to false, only print the first RRset  */
name|void
name|ldns_dnssec_rrsets_print_fmt
parameter_list|(
name|FILE
modifier|*
name|out
parameter_list|,
specifier|const
name|ldns_output_format
modifier|*
name|fmt
parameter_list|,
name|ldns_dnssec_rrsets
modifier|*
name|rrsets
parameter_list|,
name|bool
name|follow
parameter_list|)
function_decl|;
comment|/**  * Create a new data structure for a dnssec name  * \return the allocated structure  */
name|ldns_dnssec_name
modifier|*
name|ldns_dnssec_name_new
parameter_list|()
function_decl|;
comment|/**  * Create a new data structure for a dnssec name for the given RR  *  * \param[in] rr the RR to derive properties from, and to add to the name  */
name|ldns_dnssec_name
modifier|*
name|ldns_dnssec_name_new_frm_rr
parameter_list|(
name|ldns_rr
modifier|*
name|rr
parameter_list|)
function_decl|;
comment|/**  * Frees the name structure and its rrs and rrsets.  * Individual ldns_rr records therein are not freed  *  * \param[in] name the structure to free  */
name|void
name|ldns_dnssec_name_free
parameter_list|(
name|ldns_dnssec_name
modifier|*
name|name
parameter_list|)
function_decl|;
comment|/**  * Frees the name structure and its rrs and rrsets.  * Individual ldns_rr records contained in the name are also freed  *  * \param[in] name the structure to free  */
name|void
name|ldns_dnssec_name_deep_free
parameter_list|(
name|ldns_dnssec_name
modifier|*
name|name
parameter_list|)
function_decl|;
comment|/**  * Returns the domain name of the given dnssec_name structure  *  * \param[in] name the dnssec name to get the domain name from  * \return the domain name  */
name|ldns_rdf
modifier|*
name|ldns_dnssec_name_name
parameter_list|(
name|ldns_dnssec_name
modifier|*
name|name
parameter_list|)
function_decl|;
comment|/**  * Sets the domain name of the given dnssec_name structure  *  * \param[in] name the dnssec name to set the domain name of  * \param[in] dname the domain name to set it to. This data is *not* copied.  */
name|void
name|ldns_dnssec_name_set_name
parameter_list|(
name|ldns_dnssec_name
modifier|*
name|name
parameter_list|,
name|ldns_rdf
modifier|*
name|dname
parameter_list|)
function_decl|;
comment|/**  * Returns if dnssec_name structure is marked as glue.  * The ldns_dnssec_zone_mark_glue() function has to be called on a zone before  * using this function.  * Only names that have only glue rrsets will be marked.  * Names that have other occluded rrsets and names containing glue on the   * delegation point will NOT be marked!  *  * \param[in] name the dnssec name to get the domain name from  * \return true if the structure is marked as glue, false otherwise.  */
name|bool
name|ldns_dnssec_name_is_glue
parameter_list|(
name|ldns_dnssec_name
modifier|*
name|name
parameter_list|)
function_decl|;
comment|/**  * Sets the NSEC(3) RR of the given dnssec_name structure  *  * \param[in] name the dnssec name to set the domain name of  * \param[in] nsec the nsec rr to set it to. This data is *not* copied.  */
name|void
name|ldns_dnssec_name_set_nsec
parameter_list|(
name|ldns_dnssec_name
modifier|*
name|name
parameter_list|,
name|ldns_rr
modifier|*
name|nsec
parameter_list|)
function_decl|;
comment|/**  * Compares the domain names of the two arguments in their  * canonical ordening.  *   * \param[in] a The first dnssec_name to compare  * \param[in] b The second dnssec_name to compare  * \return -1 if the domain name of a comes before that of b in canonical  *            ordening, 1 if it is the other way around, and 0 if they are  *            equal  */
name|int
name|ldns_dnssec_name_cmp
parameter_list|(
specifier|const
name|void
modifier|*
name|a
parameter_list|,
specifier|const
name|void
modifier|*
name|b
parameter_list|)
function_decl|;
comment|/**  * Inserts the given rr at the right place in the current dnssec_name  * No checking is done whether the name matches  *  * \param[in] name The ldns_dnssec_name to add the RR to  * \param[in] rr The RR to add  * \return LDNS_STATUS_OK on success, error code otherwise  */
name|ldns_status
name|ldns_dnssec_name_add_rr
parameter_list|(
name|ldns_dnssec_name
modifier|*
name|name
parameter_list|,
name|ldns_rr
modifier|*
name|rr
parameter_list|)
function_decl|;
comment|/**  * Find the RRset with the given type in within this name structure  *  * \param[in] name the name to find the RRset in  * \param[in] type the type of the RRset to find  * \return the RRset, or NULL if not present  */
name|ldns_dnssec_rrsets
modifier|*
name|ldns_dnssec_name_find_rrset
parameter_list|(
name|ldns_dnssec_name
modifier|*
name|name
parameter_list|,
name|ldns_rr_type
name|type
parameter_list|)
function_decl|;
comment|/**  * Find the RRset with the given name and type in the zone  *  * \param[in] zone the zone structure to find the RRset in  * \param[in] dname the domain name of the RRset to find  * \param[in] type the type of the RRset to find  * \return the RRset, or NULL if not present  */
name|ldns_dnssec_rrsets
modifier|*
name|ldns_dnssec_zone_find_rrset
parameter_list|(
name|ldns_dnssec_zone
modifier|*
name|zone
parameter_list|,
name|ldns_rdf
modifier|*
name|dname
parameter_list|,
name|ldns_rr_type
name|type
parameter_list|)
function_decl|;
comment|/**  * Prints the RRs in the  dnssec name structure to the given  * file descriptor  *  * \param[in] out the file descriptor to print to  * \param[in] name the name structure to print the contents of  */
name|void
name|ldns_dnssec_name_print
parameter_list|(
name|FILE
modifier|*
name|out
parameter_list|,
name|ldns_dnssec_name
modifier|*
name|name
parameter_list|)
function_decl|;
comment|/**  * Prints the RRs in the  dnssec name structure to the given  * file descriptor  *  * \param[in] out the file descriptor to print to  * \param[in] fmt the format of the textual representation  * \param[in] name the name structure to print the contents of  */
name|void
name|ldns_dnssec_name_print_fmt
parameter_list|(
name|FILE
modifier|*
name|out
parameter_list|,
specifier|const
name|ldns_output_format
modifier|*
name|fmt
parameter_list|,
name|ldns_dnssec_name
modifier|*
name|name
parameter_list|)
function_decl|;
comment|/**  * Creates a new dnssec_zone structure  * \return the allocated structure  */
name|ldns_dnssec_zone
modifier|*
name|ldns_dnssec_zone_new
parameter_list|()
function_decl|;
comment|/**  * Create a new dnssec zone from a file.  * \param[out] z the new zone  * \param[in] *fp the filepointer to use  * \param[in] *origin the zones' origin  * \param[in] c default class to use (IN)  * \param[in] ttl default ttl to use  *  * \return ldns_status mesg with an error or LDNS_STATUS_OK  */
name|ldns_status
name|ldns_dnssec_zone_new_frm_fp
parameter_list|(
name|ldns_dnssec_zone
modifier|*
modifier|*
name|z
parameter_list|,
name|FILE
modifier|*
name|fp
parameter_list|,
name|ldns_rdf
modifier|*
name|origin
parameter_list|,
name|uint32_t
name|ttl
parameter_list|,
name|ldns_rr_class
name|c
parameter_list|)
function_decl|;
comment|/**  * Create a new dnssec zone from a file, keep track of the line numbering  * \param[out] z the new zone  * \param[in] *fp the filepointer to use  * \param[in] *origin the zones' origin  * \param[in] ttl default ttl to use  * \param[in] c default class to use (IN)  * \param[out] line_nr used for error msg, to get to the line number  *  * \return ldns_status mesg with an error or LDNS_STATUS_OK  */
name|ldns_status
name|ldns_dnssec_zone_new_frm_fp_l
parameter_list|(
name|ldns_dnssec_zone
modifier|*
modifier|*
name|z
parameter_list|,
name|FILE
modifier|*
name|fp
parameter_list|,
name|ldns_rdf
modifier|*
name|origin
parameter_list|,
name|uint32_t
name|ttl
parameter_list|,
name|ldns_rr_class
name|c
parameter_list|,
name|int
modifier|*
name|line_nr
parameter_list|)
function_decl|;
comment|/**  * Frees the given zone structure, and its rbtree of dnssec_names  * Individual ldns_rr RRs within those names are *not* freed  * \param[in] *zone the zone to free  */
name|void
name|ldns_dnssec_zone_free
parameter_list|(
name|ldns_dnssec_zone
modifier|*
name|zone
parameter_list|)
function_decl|;
comment|/**  * Frees the given zone structure, and its rbtree of dnssec_names  * Individual ldns_rr RRs within those names are also freed  * \param[in] *zone the zone to free  */
name|void
name|ldns_dnssec_zone_deep_free
parameter_list|(
name|ldns_dnssec_zone
modifier|*
name|zone
parameter_list|)
function_decl|;
comment|/**  * Adds the given RR to the zone.  * It find whether there is a dnssec_name with that name present.  * If so, add it to that, if not create a new one.   * Special handling of NSEC and RRSIG provided  *  * \param[in] zone the zone to add the RR to  * \param[in] rr The RR to add  * \return LDNS_STATUS_OK on success, an error code otherwise  */
name|ldns_status
name|ldns_dnssec_zone_add_rr
parameter_list|(
name|ldns_dnssec_zone
modifier|*
name|zone
parameter_list|,
name|ldns_rr
modifier|*
name|rr
parameter_list|)
function_decl|;
comment|/**  * Prints the rbtree of ldns_dnssec_name structures to the file descriptor  *  * \param[in] out the file descriptor to print the names to  * \param[in] tree the tree of ldns_dnssec_name structures to print  * \param[in] print_soa if true, print SOA records, if false, skip them  */
name|void
name|ldns_dnssec_zone_names_print
parameter_list|(
name|FILE
modifier|*
name|out
parameter_list|,
name|ldns_rbtree_t
modifier|*
name|tree
parameter_list|,
name|bool
name|print_soa
parameter_list|)
function_decl|;
comment|/**  * Prints the rbtree of ldns_dnssec_name structures to the file descriptor  *  * \param[in] out the file descriptor to print the names to  * \param[in] fmt the format of the textual representation  * \param[in] tree the tree of ldns_dnssec_name structures to print  * \param[in] print_soa if true, print SOA records, if false, skip them  */
name|void
name|ldns_dnssec_zone_names_print_fmt
parameter_list|(
name|FILE
modifier|*
name|out
parameter_list|,
specifier|const
name|ldns_output_format
modifier|*
name|fmt
parameter_list|,
name|ldns_rbtree_t
modifier|*
name|tree
parameter_list|,
name|bool
name|print_soa
parameter_list|)
function_decl|;
comment|/**  * Prints the complete zone to the given file descriptor  *  * \param[in] out the file descriptor to print to  * \param[in] zone the dnssec_zone to print  */
name|void
name|ldns_dnssec_zone_print
parameter_list|(
name|FILE
modifier|*
name|out
parameter_list|,
name|ldns_dnssec_zone
modifier|*
name|zone
parameter_list|)
function_decl|;
comment|/**  * Prints the complete zone to the given file descriptor  *  * \param[in] out the file descriptor to print to  * \param[in] fmt the format of the textual representation  * \param[in] zone the dnssec_zone to print  */
name|void
name|ldns_dnssec_zone_print_fmt
parameter_list|(
name|FILE
modifier|*
name|out
parameter_list|,
specifier|const
name|ldns_output_format
modifier|*
name|fmt
parameter_list|,
name|ldns_dnssec_zone
modifier|*
name|zone
parameter_list|)
function_decl|;
comment|/**  * Adds explicit dnssec_name structures for the empty nonterminals  * in this zone. (this is needed for NSEC3 generation)  *  * \param[in] zone the zone to check for empty nonterminals  * return LDNS_STATUS_OK on success.  */
name|ldns_status
name|ldns_dnssec_zone_add_empty_nonterminals
parameter_list|(
name|ldns_dnssec_zone
modifier|*
name|zone
parameter_list|)
function_decl|;
comment|/**  * If a NSEC3PARAM is available in the apex, walks the zone and returns true  * on the first optout nsec3.  *  * \param[in] zone the zone to check for nsec3 optout records  * return true when the zone has at least one nsec3 optout record.  */
name|bool
name|ldns_dnssec_zone_is_nsec3_optout
parameter_list|(
name|ldns_dnssec_zone
modifier|*
name|zone
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

