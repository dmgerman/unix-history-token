begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Block_private.h  *  * Copyright 2008-2010 Apple, Inc. Permission is hereby granted, free of charge,  * to any person obtaining a copy of this software and associated documentation  * files (the "Software"), to deal in the Software without restriction,  * including without limitation the rights to use, copy, modify, merge, publish,  * distribute, sublicense, and/or sell copies of the Software, and to permit  * persons to whom the Software is furnished to do so, subject to the following  * conditions:  *   * The above copyright notice and this permission notice shall be included in  * all copies or substantial portions of the Software.  *   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  * SOFTWARE.  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_BLOCK_PRIVATE_H_
end_ifndef

begin_define
define|#
directive|define
name|_BLOCK_PRIVATE_H_
end_define

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|BLOCK_EXPORT
argument_list|)
end_if

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
end_if

begin_define
define|#
directive|define
name|BLOCK_EXPORT
value|extern "C"
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|BLOCK_EXPORT
value|extern
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|_MSC_VER
end_ifndef

begin_include
include|#
directive|include
file|<stdbool.h>
end_include

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* MSVC doesn't have<stdbool.h>. Compensate. */
end_comment

begin_typedef
typedef|typedef
name|char
name|bool
typedef|;
end_typedef

begin_define
define|#
directive|define
name|true
value|(bool)1
end_define

begin_define
define|#
directive|define
name|false
value|(bool)0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
end_if

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
enum|enum
block|{
name|BLOCK_REFCOUNT_MASK
init|=
operator|(
literal|0xffff
operator|)
block|,
name|BLOCK_NEEDS_FREE
init|=
operator|(
literal|1
operator|<<
literal|24
operator|)
block|,
name|BLOCK_HAS_COPY_DISPOSE
init|=
operator|(
literal|1
operator|<<
literal|25
operator|)
block|,
name|BLOCK_HAS_CTOR
init|=
operator|(
literal|1
operator|<<
literal|26
operator|)
block|,
comment|/* Helpers have C++ code. */
name|BLOCK_IS_GC
init|=
operator|(
literal|1
operator|<<
literal|27
operator|)
block|,
name|BLOCK_IS_GLOBAL
init|=
operator|(
literal|1
operator|<<
literal|28
operator|)
block|,
name|BLOCK_HAS_DESCRIPTOR
init|=
operator|(
literal|1
operator|<<
literal|29
operator|)
block|}
enum|;
comment|/* Revised new layout. */
struct|struct
name|Block_descriptor
block|{
name|unsigned
name|long
name|int
name|reserved
decl_stmt|;
name|unsigned
name|long
name|int
name|size
decl_stmt|;
name|void
function_decl|(
modifier|*
name|copy
function_decl|)
parameter_list|(
name|void
modifier|*
name|dst
parameter_list|,
name|void
modifier|*
name|src
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|dispose
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
block|}
struct|;
struct|struct
name|Block_layout
block|{
name|void
modifier|*
name|isa
decl_stmt|;
name|int
name|flags
decl_stmt|;
name|int
name|reserved
decl_stmt|;
name|void
function_decl|(
modifier|*
name|invoke
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
name|struct
name|Block_descriptor
modifier|*
name|descriptor
decl_stmt|;
comment|/* Imported variables. */
block|}
struct|;
struct|struct
name|Block_byref
block|{
name|void
modifier|*
name|isa
decl_stmt|;
name|struct
name|Block_byref
modifier|*
name|forwarding
decl_stmt|;
name|int
name|flags
decl_stmt|;
comment|/* refcount; */
name|int
name|size
decl_stmt|;
name|void
function_decl|(
modifier|*
name|byref_keep
function_decl|)
parameter_list|(
name|struct
name|Block_byref
modifier|*
name|dst
parameter_list|,
name|struct
name|Block_byref
modifier|*
name|src
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|byref_destroy
function_decl|)
parameter_list|(
name|struct
name|Block_byref
modifier|*
parameter_list|)
function_decl|;
comment|/* long shared[0]; */
block|}
struct|;
struct|struct
name|Block_byref_header
block|{
name|void
modifier|*
name|isa
decl_stmt|;
name|struct
name|Block_byref
modifier|*
name|forwarding
decl_stmt|;
name|int
name|flags
decl_stmt|;
name|int
name|size
decl_stmt|;
block|}
struct|;
comment|/* Runtime support functions used by compiler when generating copy/dispose helpers. */
enum|enum
block|{
comment|/* See function implementation for a more complete description of these fields and combinations */
name|BLOCK_FIELD_IS_OBJECT
init|=
literal|3
block|,
comment|/* id, NSObject, __attribute__((NSObject)), block, ... */
name|BLOCK_FIELD_IS_BLOCK
init|=
literal|7
block|,
comment|/* a block variable */
name|BLOCK_FIELD_IS_BYREF
init|=
literal|8
block|,
comment|/* the on stack structure holding the __block variable */
name|BLOCK_FIELD_IS_WEAK
init|=
literal|16
block|,
comment|/* declared __weak, only used in byref copy helpers */
name|BLOCK_BYREF_CALLER
init|=
literal|128
comment|/* called from __block (byref) copy/dispose support routines. */
block|}
enum|;
comment|/* Runtime entry point called by compiler when assigning objects inside copy helper routines */
name|BLOCK_EXPORT
name|void
name|_Block_object_assign
parameter_list|(
name|void
modifier|*
name|destAddr
parameter_list|,
specifier|const
name|void
modifier|*
name|object
parameter_list|,
specifier|const
name|int
name|flags
parameter_list|)
function_decl|;
comment|/* BLOCK_FIELD_IS_BYREF is only used from within block copy helpers */
comment|/* runtime entry point called by the compiler when disposing of objects inside dispose helper routine */
name|BLOCK_EXPORT
name|void
name|_Block_object_dispose
parameter_list|(
specifier|const
name|void
modifier|*
name|object
parameter_list|,
specifier|const
name|int
name|flags
parameter_list|)
function_decl|;
comment|/* Other support functions */
comment|/* Runtime entry to get total size of a closure */
name|BLOCK_EXPORT
name|unsigned
name|long
name|int
name|Block_size
parameter_list|(
name|void
modifier|*
name|block_basic
parameter_list|)
function_decl|;
comment|/* the raw data space for runtime classes for blocks */
comment|/* class+meta used for stack, malloc, and collectable based blocks */
name|BLOCK_EXPORT
name|void
modifier|*
name|_NSConcreteStackBlock
index|[
literal|32
index|]
decl_stmt|;
name|BLOCK_EXPORT
name|void
modifier|*
name|_NSConcreteMallocBlock
index|[
literal|32
index|]
decl_stmt|;
name|BLOCK_EXPORT
name|void
modifier|*
name|_NSConcreteAutoBlock
index|[
literal|32
index|]
decl_stmt|;
name|BLOCK_EXPORT
name|void
modifier|*
name|_NSConcreteFinalizingBlock
index|[
literal|32
index|]
decl_stmt|;
name|BLOCK_EXPORT
name|void
modifier|*
name|_NSConcreteGlobalBlock
index|[
literal|32
index|]
decl_stmt|;
name|BLOCK_EXPORT
name|void
modifier|*
name|_NSConcreteWeakBlockVariable
index|[
literal|32
index|]
decl_stmt|;
comment|/* the intercept routines that must be used under GC */
name|BLOCK_EXPORT
name|void
name|_Block_use_GC
parameter_list|(
name|void
modifier|*
function_decl|(
modifier|*
name|alloc
function_decl|)
parameter_list|(
specifier|const
name|unsigned
name|long
parameter_list|,
specifier|const
name|bool
name|isOne
parameter_list|,
specifier|const
name|bool
name|isObject
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|setHasRefcount
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|,
specifier|const
name|bool
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|gc_assign_strong
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|void
modifier|*
modifier|*
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|gc_assign_weak
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|gc_memmove
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|unsigned
name|long
parameter_list|)
parameter_list|)
function_decl|;
comment|/* earlier version, now simply transitional */
name|BLOCK_EXPORT
name|void
name|_Block_use_GC5
parameter_list|(
name|void
modifier|*
function_decl|(
modifier|*
name|alloc
function_decl|)
parameter_list|(
specifier|const
name|unsigned
name|long
parameter_list|,
specifier|const
name|bool
name|isOne
parameter_list|,
specifier|const
name|bool
name|isObject
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|setHasRefcount
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|,
specifier|const
name|bool
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|gc_assign_strong
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|void
modifier|*
modifier|*
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|gc_assign_weak
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
name|BLOCK_EXPORT
name|void
name|_Block_use_RR
parameter_list|(
name|void
function_decl|(
modifier|*
name|retain
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|release
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
comment|/* make a collectable GC heap based Block.  Not useful under non-GC. */
name|BLOCK_EXPORT
name|void
modifier|*
name|_Block_copy_collectable
parameter_list|(
specifier|const
name|void
modifier|*
name|aBlock
parameter_list|)
function_decl|;
comment|/* thread-unsafe diagnostic */
name|BLOCK_EXPORT
specifier|const
name|char
modifier|*
name|_Block_dump
parameter_list|(
specifier|const
name|void
modifier|*
name|block
parameter_list|)
function_decl|;
comment|/* Obsolete */
comment|/* first layout */
struct|struct
name|Block_basic
block|{
name|void
modifier|*
name|isa
decl_stmt|;
name|int
name|Block_flags
decl_stmt|;
comment|/* int32_t */
name|int
name|Block_size
decl_stmt|;
comment|/* XXX should be packed into Block_flags */
name|void
function_decl|(
modifier|*
name|Block_invoke
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|Block_copy
function_decl|)
parameter_list|(
name|void
modifier|*
name|dst
parameter_list|,
name|void
modifier|*
name|src
parameter_list|)
function_decl|;
comment|/* iff BLOCK_HAS_COPY_DISPOSE */
name|void
function_decl|(
modifier|*
name|Block_dispose
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/* iff BLOCK_HAS_COPY_DISPOSE */
comment|/* long params[0];  // where const imports, __block storage references, etc. get laid down */
block|}
struct|;
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _BLOCK_PRIVATE_H_ */
end_comment

end_unit

