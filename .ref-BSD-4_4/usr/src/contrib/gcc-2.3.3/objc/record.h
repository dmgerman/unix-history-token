begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Implement a vector type that indicates its used size and allocated size.    Copyright (C) 1992 Free Software Foundation, Inc.  This file is part of GNU CC.  GNU CC is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  GNU CC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with GNU CC; see the file COPYING.  If not, write to the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
end_comment

begin_comment
comment|/* As a special exception, if you link this library with files    compiled with GCC to produce an executable, this does not cause    the resulting executable to be covered by the GNU General Public License.    This exception does not however invalidate any other reasons why    the executable file might be covered by the GNU General Public License.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__record_INCLUDE_GNU
end_ifndef

begin_define
define|#
directive|define
name|__record_INCLUDE_GNU
end_define

begin_include
include|#
directive|include
file|"assert.h"
end_include

begin_comment
comment|/* Structure to hold records.  */
end_comment

begin_struct
struct|struct
name|record
block|{
name|unsigned
name|int
name|capacity
decl_stmt|;
name|unsigned
name|int
name|used
decl_stmt|;
name|void
modifier|*
modifier|*
name|records
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
specifier|extern
name|void
modifier|*
name|__objc_xmalloc
parameter_list|(
name|unsigned
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
modifier|*
name|__objc_xcalloc
parameter_list|(
name|unsigned
name|int
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
modifier|*
name|__objc_xrealloc
parameter_list|(
name|void
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Allocate, initialize and return a new record structure.  */
end_comment

begin_function
specifier|static
specifier|inline
name|struct
name|record
modifier|*
name|record_new
parameter_list|()
block|{
name|struct
name|record
modifier|*
name|record
decl_stmt|;
name|record
operator|=
operator|(
expr|struct
name|record
operator|*
operator|)
name|__objc_xcalloc
argument_list|(
literal|1
argument_list|,
sizeof|sizeof
argument_list|(
expr|struct
name|record
argument_list|)
argument_list|)
expr_stmt|;
name|record
operator|->
name|capacity
operator|=
literal|8
expr_stmt|;
name|record
operator|->
name|records
operator|=
operator|(
name|void
operator|*
operator|*
operator|)
name|__objc_xcalloc
argument_list|(
name|record
operator|->
name|capacity
argument_list|,
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|record
return|;
block|}
end_function

begin_comment
comment|/* Delete the record.  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|record_delete
parameter_list|(
name|struct
name|record
modifier|*
name|record
parameter_list|)
block|{
name|free
argument_list|(
name|record
operator|->
name|records
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|record
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* Return the number of entries in the record.  */
end_comment

begin_function
specifier|static
specifier|inline
name|unsigned
name|int
name|record_entries
parameter_list|(
name|struct
name|record
modifier|*
name|record
parameter_list|)
block|{
return|return
name|record
operator|->
name|used
return|;
block|}
end_function

begin_comment
comment|/* Return the capacity of the record.  */
end_comment

begin_function
specifier|static
specifier|inline
name|unsigned
name|int
name|record_capacity
parameter_list|(
name|struct
name|record
modifier|*
name|record
parameter_list|)
block|{
return|return
name|record
operator|->
name|capacity
return|;
block|}
end_function

begin_comment
comment|/* Store an entry at the specified record location.  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|record_store_at
parameter_list|(
name|unsigned
name|int
name|i
parameter_list|,
name|void
modifier|*
name|value
parameter_list|,
name|struct
name|record
modifier|*
name|record
parameter_list|)
block|{
name|assert
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|i
operator|<=
name|record_entries
argument_list|(
name|record
argument_list|)
argument_list|)
expr_stmt|;
name|record
operator|->
name|records
index|[
name|i
index|]
operator|=
name|value
expr_stmt|;
block|}
end_function

begin_comment
comment|/* Make a record entry.  Expand the record's size if full.  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|record_store
parameter_list|(
name|void
modifier|*
name|value
parameter_list|,
name|struct
name|record
modifier|*
name|record
parameter_list|)
block|{
operator|++
name|record
operator|->
name|used
expr_stmt|;
if|if
condition|(
name|record_entries
argument_list|(
name|record
argument_list|)
operator|==
name|record_capacity
argument_list|(
name|record
argument_list|)
condition|)
block|{
name|record
operator|->
name|capacity
operator|*=
literal|2
expr_stmt|;
name|record
operator|->
name|records
operator|=
operator|(
name|void
operator|*
operator|*
operator|)
name|__objc_xrealloc
argument_list|(
name|record
operator|->
name|records
argument_list|,
name|record_capacity
argument_list|(
name|record
argument_list|)
operator|*
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|record_store_at
argument_list|(
name|record_entries
argument_list|(
name|record
argument_list|)
argument_list|,
name|value
argument_list|,
name|record
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* Get a value from the record.  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|record_get
parameter_list|(
name|unsigned
name|int
name|i
parameter_list|,
name|struct
name|record
modifier|*
name|record
parameter_list|)
block|{
name|assert
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|i
operator|<=
name|record_entries
argument_list|(
name|record
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|record
operator|->
name|records
index|[
name|i
index|]
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* not __record_INCLUDE_GNU */
end_comment

end_unit

