begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// This may look like C code, but it is really -*- C++ -*-
end_comment

begin_comment
comment|/*  Copyright (C) 1989, 1992 Free Software Foundation     written by Doug Lea (dl@rocky.oswego.edu)  This file is part of the GNU C++ Library.  This library is free software; you can redistribute it and/or modify it under the terms of the GNU Library General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for more details. You should have received a copy of the GNU Library General Public License along with this library; if not, write to the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA. */
end_comment

begin_comment
comment|/* *** Version 1.2 -- nearly 100% AT&T 1.2 compatible *** */
end_comment

begin_comment
comment|/* ostream.h now  separately includable */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_ostream_h
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_pragma
pragma|#
directive|pragma
name|interface
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|_ostream_h
value|1
end_define

begin_comment
comment|/* uncomment the next line to disable    ostream<< char */
end_comment

begin_comment
comment|//#define NO_OUTPUT_CHAR
end_comment

begin_include
include|#
directive|include
file|<File.h>
end_include

begin_include
include|#
directive|include
file|<streambuf.h>
end_include

begin_include
include|#
directive|include
file|<filebuf.h>
end_include

begin_include
include|#
directive|include
file|<Filebuf.h>
end_include

begin_decl_stmt
name|class
name|istream
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|ostream
block|{
name|friend
name|class
name|istream
decl_stmt|;
name|protected
label|:
name|streambuf
modifier|*
name|bp
decl_stmt|;
name|state_value
name|state
decl_stmt|;
comment|// _good/_eof/_fail/_bad
name|char
name|ownbuf
decl_stmt|;
comment|// true if we own *bp
name|public
label|:
name|ostream
argument_list|(
argument|const char* filename
argument_list|,
argument|io_mode m
argument_list|,
argument|access_mode a
argument_list|)
empty_stmt|;
name|ostream
argument_list|(
specifier|const
name|char
operator|*
name|filename
argument_list|,
specifier|const
name|char
operator|*
name|m
argument_list|)
expr_stmt|;
name|ostream
argument_list|(
argument|int filedesc
argument_list|,
argument|io_mode m
argument_list|)
empty_stmt|;
name|ostream
argument_list|(
name|FILE
operator|*
name|fileptr
argument_list|)
expr_stmt|;
name|ostream
argument_list|(
argument|int sz
argument_list|,
argument|char* buf
argument_list|)
empty_stmt|;
name|ostream
argument_list|(
argument|int filedesc
argument_list|,
argument|char* buf
argument_list|,
argument|int buflen
argument_list|)
empty_stmt|;
name|ostream
argument_list|(
argument|int filedesc
argument_list|)
empty_stmt|;
name|ostream
argument_list|(
name|streambuf
operator|*
name|s
argument_list|)
expr_stmt|;
operator|~
name|ostream
argument_list|()
expr_stmt|;
name|ostream
modifier|&
name|open
parameter_list|(
specifier|const
name|char
modifier|*
name|filename
parameter_list|,
name|io_mode
name|m
parameter_list|,
name|access_mode
name|a
parameter_list|)
function_decl|;
name|ostream
modifier|&
name|open
parameter_list|(
specifier|const
name|char
modifier|*
name|filename
parameter_list|,
specifier|const
name|char
modifier|*
name|m
parameter_list|)
function_decl|;
name|ostream
modifier|&
name|open
parameter_list|(
name|int
name|filedesc
parameter_list|,
name|io_mode
name|m
parameter_list|)
function_decl|;
name|ostream
modifier|&
name|open
parameter_list|(
name|FILE
modifier|*
name|fileptr
parameter_list|)
function_decl|;
name|ostream
modifier|&
name|open
parameter_list|(
specifier|const
name|char
modifier|*
name|filenam
parameter_list|,
name|open_mode
name|m
parameter_list|)
function_decl|;
name|ostream
modifier|&
name|close
parameter_list|()
function_decl|;
name|ostream
modifier|&
name|flush
parameter_list|()
function_decl|;
comment|// stream status
name|int
name|rdstate
parameter_list|()
function_decl|;
name|int
name|eof
parameter_list|()
function_decl|;
name|int
name|fail
parameter_list|()
function_decl|;
name|int
name|bad
parameter_list|()
function_decl|;
name|int
name|good
parameter_list|()
function_decl|;
comment|// other status queries
name|int
name|readable
parameter_list|()
function_decl|;
name|int
name|writable
parameter_list|()
function_decl|;
name|int
name|is_open
parameter_list|()
function_decl|;
name|operator
name|void
modifier|*
parameter_list|()
function_decl|;
name|int
name|operator
operator|!
operator|(
operator|)
expr_stmt|;
specifier|const
name|char
modifier|*
name|name
parameter_list|()
function_decl|;
name|char
modifier|*
name|bufptr
parameter_list|()
function_decl|;
comment|// error handling
name|void
name|error
parameter_list|()
function_decl|;
name|void
name|clear
parameter_list|(
name|state_value
name|f
init|=
name|_good
parameter_list|)
function_decl|;
comment|// poorly named
name|void
name|set
parameter_list|(
name|state_value
name|f
parameter_list|)
function_decl|;
comment|// set corresponding bit
name|void
name|unset
parameter_list|(
name|state_value
parameter_list|)
function_decl|;
comment|// clear corresponding bit
name|ostream
modifier|&
name|failif
parameter_list|(
name|int
name|cond
parameter_list|)
function_decl|;
comment|// unformatted IO
name|ostream
modifier|&
name|put
parameter_list|(
name|char
name|c
parameter_list|)
function_decl|;
name|ostream
modifier|&
name|put
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|)
function_decl|;
name|ostream
modifier|&
name|put
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|,
name|int
name|slen
parameter_list|)
function_decl|;
comment|// formatted IO
name|ostream
modifier|&
name|form
parameter_list|(
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|short
name|n
operator|)
expr_stmt|;
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|unsigned
name|short
name|n
operator|)
expr_stmt|;
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|int
name|n
operator|)
expr_stmt|;
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|unsigned
name|int
name|n
operator|)
expr_stmt|;
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|long
name|n
operator|)
expr_stmt|;
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|unsigned
name|long
name|n
operator|)
expr_stmt|;
ifdef|#
directive|ifdef
name|__GNUG__
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|long
name|long
name|n
operator|)
expr_stmt|;
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|unsigned
name|long
name|long
name|n
operator|)
expr_stmt|;
endif|#
directive|endif
comment|/* __GNUG__ */
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|float
name|n
operator|)
expr_stmt|;
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|double
name|n
operator|)
expr_stmt|;
name|ostream
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|char
operator|*
name|s
operator|)
expr_stmt|;
name|ostream
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|void
operator|*
name|ptr
operator|)
expr_stmt|;
ifndef|#
directive|ifndef
name|NO_OUTPUT_CHAR
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|char
name|c
operator|)
expr_stmt|;
endif|#
directive|endif
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
specifier|extern
name|ostream
name|cout
decl_stmt|;
end_decl_stmt

begin_comment
comment|// stdout
end_comment

begin_decl_stmt
specifier|extern
name|ostream
name|cerr
decl_stmt|;
end_decl_stmt

begin_comment
comment|// stderr
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__OPTIMIZE__
argument_list|)
operator|||
name|defined
argument_list|(
name|USE_LIBGXX_INLINES
argument_list|)
end_if

begin_expr_stmt
specifier|inline
name|void
name|ostream
operator|::
name|clear
argument_list|(
argument|state_value flag
argument_list|)
block|{
name|state
operator|=
name|flag
block|; }
specifier|inline
name|void
name|ostream
operator|::
name|set
argument_list|(
argument|state_value flag
argument_list|)
block|{
name|state
operator|=
name|state_value
argument_list|(
name|int
argument_list|(
name|state
argument_list|)
operator||
name|int
argument_list|(
name|flag
argument_list|)
argument_list|)
block|; }
specifier|inline
name|void
name|ostream
operator|::
name|unset
argument_list|(
argument|state_value flag
argument_list|)
block|{
name|state
operator|=
name|state_value
argument_list|(
name|int
argument_list|(
name|state
argument_list|)
operator|&
operator|~
name|int
argument_list|(
name|flag
argument_list|)
argument_list|)
block|; }
specifier|inline
name|int
name|ostream
operator|::
name|rdstate
argument_list|()
block|{
return|return
name|int
argument_list|(
name|state
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|ostream
operator|::
name|good
argument_list|()
block|{
return|return
name|state
operator|==
name|_good
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|ostream
operator|::
name|eof
argument_list|()
block|{
return|return
name|int
argument_list|(
name|state
argument_list|)
operator|&
name|int
argument_list|(
name|_eof
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|ostream
operator|::
name|fail
argument_list|()
block|{
return|return
name|int
argument_list|(
name|state
argument_list|)
operator|&
name|int
argument_list|(
name|_fail
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|ostream
operator|::
name|bad
argument_list|()
block|{
return|return
name|int
argument_list|(
name|state
argument_list|)
operator|&
name|int
argument_list|(
name|_bad
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|ostream
operator|::
name|operator
name|void
operator|*
operator|(
operator|)
block|{
return|return
operator|(
name|state
operator|==
name|_good
operator|)
operator|?
name|this
operator|:
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|ostream
operator|::
name|operator
operator|!
operator|(
operator|)
block|{
return|return
operator|(
name|state
operator|!=
name|_good
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|ostream
operator|&
name|ostream
operator|::
name|failif
argument_list|(
argument|int cond
argument_list|)
block|{
if|if
condition|(
name|cond
condition|)
name|set
argument_list|(
name|_fail
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}  inline
name|int
name|ostream
operator|::
name|is_open
argument_list|()
block|{
return|return
name|bp
operator|->
name|is_open
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|ostream
operator|::
name|readable
argument_list|()
block|{
return|return
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|ostream
operator|::
name|writable
argument_list|()
block|{
return|return
operator|(
name|bp
operator|!=
literal|0
operator|)
operator|&&
operator|(
name|state
operator|==
name|_good
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|char
operator|*
name|ostream
operator|::
name|bufptr
argument_list|()
block|{
return|return
name|bp
operator|->
name|base
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|ostream
operator|&
name|ostream
operator|::
name|flush
argument_list|()
block|{
name|bp
operator|->
name|overflow
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|ostream
operator|&
name|ostream
operator|::
name|close
argument_list|()
block|{
name|bp
operator|->
name|overflow
argument_list|()
block|;
name|bp
operator|->
name|close
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|ostream
operator|&
name|ostream
operator|::
name|put
argument_list|(
argument|char ch
argument_list|)
block|{
return|return
name|failif
argument_list|(
operator|(
name|state
operator|!=
name|_good
operator|)
operator|||
name|bp
operator|->
name|sputc
argument_list|(
operator|(
name|int
operator|)
name|ch
operator|&
literal|0xff
argument_list|)
operator|==
name|EOF
argument_list|)
return|;
block|}
end_expr_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|NO_OUTPUT_CHAR
end_ifndef

begin_expr_stmt
specifier|inline
name|ostream
operator|&
name|ostream
operator|::
name|operator
operator|<<
operator|(
name|char
name|ch
operator|)
block|{
return|return
name|failif
argument_list|(
operator|(
name|state
operator|!=
name|_good
operator|)
operator|||
name|bp
operator|->
name|sputc
argument_list|(
operator|(
name|int
operator|)
name|ch
operator|&
literal|0xff
argument_list|)
operator|==
name|EOF
argument_list|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
specifier|inline
name|ostream
operator|&
name|ostream
operator|::
name|put
argument_list|(
argument|const char* s
argument_list|)
block|{
return|return
name|failif
argument_list|(
operator|(
name|state
operator|!=
name|_good
operator|)
operator|||
name|bp
operator|->
name|sputs
argument_list|(
name|s
argument_list|)
operator|==
name|EOF
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|ostream
operator|&
name|ostream
operator|::
name|put
argument_list|(
argument|const char* s
argument_list|,
argument|int len
argument_list|)
block|{
return|return
name|failif
argument_list|(
operator|(
name|state
operator|!=
name|_good
operator|)
operator|||
name|bp
operator|->
name|sputsn
argument_list|(
name|s
argument_list|,
name|len
argument_list|)
operator|==
name|EOF
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|ostream
operator|&
name|ostream
operator|::
name|operator
operator|<<
operator|(
specifier|const
name|char
operator|*
name|s
operator|)
block|{
return|return
name|failif
argument_list|(
operator|(
name|state
operator|!=
name|_good
operator|)
operator|||
name|bp
operator|->
name|sputs
argument_list|(
name|s
argument_list|)
operator|==
name|EOF
argument_list|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

