begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// This may look like C code, but it is really -*- C++ -*-
end_comment

begin_comment
comment|/*  Copyright (C) 1988 Free Software Foundation     written by Doug Lea (dl@rocky.oswego.edu)  This file is part of the GNU C++ Library.  This library is free software; you can redistribute it and/or modify it under the terms of the GNU Library General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for more details. You should have received a copy of the GNU Library General Public License along with this library; if not, write to the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA. */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_compare_h
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_pragma
pragma|#
directive|pragma
name|interface
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|_compare_h
value|1
end_define

begin_include
include|#
directive|include
file|<builtin.h>
end_include

begin_function_decl
name|int
name|compare
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|compare
parameter_list|(
name|short
name|a
parameter_list|,
name|short
name|b
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|compare
parameter_list|(
name|unsigned
name|long
name|a
parameter_list|,
name|unsigned
name|long
name|b
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|compare
parameter_list|(
name|unsigned
name|int
name|a
parameter_list|,
name|unsigned
name|int
name|b
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|compare
parameter_list|(
name|unsigned
name|short
name|a
parameter_list|,
name|unsigned
name|short
name|b
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|compare
parameter_list|(
name|unsigned
name|char
name|a
parameter_list|,
name|unsigned
name|char
name|b
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|compare
parameter_list|(
name|signed
name|char
name|a
parameter_list|,
name|signed
name|char
name|b
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|compare
parameter_list|(
name|float
name|a
parameter_list|,
name|float
name|b
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|compare
parameter_list|(
name|double
name|a
parameter_list|,
name|double
name|b
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|compare
parameter_list|(
specifier|const
name|char
modifier|*
name|a
parameter_list|,
specifier|const
name|char
modifier|*
name|b
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|inline
name|int
name|compare
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
return|return
name|a
operator|-
name|b
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|compare
parameter_list|(
name|short
name|a
parameter_list|,
name|short
name|b
parameter_list|)
block|{
return|return
name|a
operator|-
name|b
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|compare
parameter_list|(
name|signed
name|char
name|a
parameter_list|,
name|signed
name|char
name|b
parameter_list|)
block|{
return|return
name|a
operator|-
name|b
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|compare
parameter_list|(
name|unsigned
name|long
name|a
parameter_list|,
name|unsigned
name|long
name|b
parameter_list|)
block|{
return|return
operator|(
name|a
operator|<
name|b
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
name|a
operator|>
name|b
operator|)
condition|?
literal|1
else|:
literal|0
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|compare
parameter_list|(
name|unsigned
name|int
name|a
parameter_list|,
name|unsigned
name|int
name|b
parameter_list|)
block|{
return|return
operator|(
name|a
operator|<
name|b
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
name|a
operator|>
name|b
operator|)
condition|?
literal|1
else|:
literal|0
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|compare
parameter_list|(
name|unsigned
name|short
name|a
parameter_list|,
name|unsigned
name|short
name|b
parameter_list|)
block|{
return|return
operator|(
name|a
operator|<
name|b
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
name|a
operator|>
name|b
operator|)
condition|?
literal|1
else|:
literal|0
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|compare
parameter_list|(
name|unsigned
name|char
name|a
parameter_list|,
name|unsigned
name|char
name|b
parameter_list|)
block|{
return|return
operator|(
name|a
operator|<
name|b
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
name|a
operator|>
name|b
operator|)
condition|?
literal|1
else|:
literal|0
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|compare
parameter_list|(
name|float
name|a
parameter_list|,
name|float
name|b
parameter_list|)
block|{
return|return
operator|(
name|a
operator|<
name|b
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
name|a
operator|>
name|b
operator|)
condition|?
literal|1
else|:
literal|0
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|compare
parameter_list|(
name|double
name|a
parameter_list|,
name|double
name|b
parameter_list|)
block|{
return|return
operator|(
name|a
operator|<
name|b
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
name|a
operator|>
name|b
operator|)
condition|?
literal|1
else|:
literal|0
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|compare
parameter_list|(
specifier|const
name|char
modifier|*
name|a
parameter_list|,
specifier|const
name|char
modifier|*
name|b
parameter_list|)
block|{
return|return
name|strcmp
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

end_unit

