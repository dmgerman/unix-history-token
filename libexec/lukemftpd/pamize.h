begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|USE_PAM
end_ifdef

begin_comment
comment|/*  * the following code is stolen from imap-uw PAM authentication module and  * login.c  */
end_comment

begin_define
define|#
directive|define
name|COPY_STRING
parameter_list|(
name|s
parameter_list|)
value|(s ? strdup(s) : NULL)
end_define

begin_struct
struct|struct
name|cred_t
block|{
specifier|const
name|char
modifier|*
name|uname
decl_stmt|;
comment|/* user name */
specifier|const
name|char
modifier|*
name|pass
decl_stmt|;
comment|/* password */
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|cred_t
name|cred_t
typedef|;
end_typedef

begin_function
specifier|static
name|int
name|auth_conv
parameter_list|(
name|int
name|num_msg
parameter_list|,
specifier|const
name|struct
name|pam_message
modifier|*
modifier|*
name|msg
parameter_list|,
name|struct
name|pam_response
modifier|*
modifier|*
name|resp
parameter_list|,
name|void
modifier|*
name|appdata
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
name|cred_t
modifier|*
name|cred
init|=
operator|(
name|cred_t
operator|*
operator|)
name|appdata
decl_stmt|;
name|struct
name|pam_response
modifier|*
name|reply
decl_stmt|;
name|reply
operator|=
name|calloc
argument_list|(
name|num_msg
argument_list|,
sizeof|sizeof
expr|*
name|reply
argument_list|)
expr_stmt|;
if|if
condition|(
name|reply
operator|==
name|NULL
condition|)
return|return
name|PAM_BUF_ERR
return|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|num_msg
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|msg
index|[
name|i
index|]
operator|->
name|msg_style
condition|)
block|{
case|case
name|PAM_PROMPT_ECHO_ON
case|:
comment|/* assume want user name */
name|reply
index|[
name|i
index|]
operator|.
name|resp_retcode
operator|=
name|PAM_SUCCESS
expr_stmt|;
name|reply
index|[
name|i
index|]
operator|.
name|resp
operator|=
name|COPY_STRING
argument_list|(
name|cred
operator|->
name|uname
argument_list|)
expr_stmt|;
comment|/* PAM frees resp. */
break|break;
case|case
name|PAM_PROMPT_ECHO_OFF
case|:
comment|/* assume want password */
name|reply
index|[
name|i
index|]
operator|.
name|resp_retcode
operator|=
name|PAM_SUCCESS
expr_stmt|;
name|reply
index|[
name|i
index|]
operator|.
name|resp
operator|=
name|COPY_STRING
argument_list|(
name|cred
operator|->
name|pass
argument_list|)
expr_stmt|;
comment|/* PAM frees resp. */
break|break;
case|case
name|PAM_TEXT_INFO
case|:
case|case
name|PAM_ERROR_MSG
case|:
name|reply
index|[
name|i
index|]
operator|.
name|resp_retcode
operator|=
name|PAM_SUCCESS
expr_stmt|;
name|reply
index|[
name|i
index|]
operator|.
name|resp
operator|=
name|NULL
expr_stmt|;
break|break;
default|default:
comment|/* unknown message style */
name|free
argument_list|(
name|reply
argument_list|)
expr_stmt|;
return|return
name|PAM_CONV_ERR
return|;
block|}
block|}
operator|*
name|resp
operator|=
name|reply
expr_stmt|;
return|return
name|PAM_SUCCESS
return|;
block|}
end_function

begin_comment
comment|/*  * Attempt to authenticate the user using PAM.  Returns 0 if the user is  * authenticated, or 1 if not authenticated.  If some sort of PAM system  * error occurs (e.g., the "/etc/pam.conf" file is missing) then this  * function returns -1.  This can be used as an indication that we should  * fall back to a different authentication mechanism.  */
end_comment

begin_function
specifier|static
name|int
name|auth_pam
parameter_list|(
name|struct
name|passwd
modifier|*
modifier|*
name|ppw
parameter_list|,
specifier|const
name|char
modifier|*
name|pass
parameter_list|)
block|{
name|pam_handle_t
modifier|*
name|pamh
init|=
name|NULL
decl_stmt|;
specifier|const
name|char
modifier|*
name|tmpl_user
decl_stmt|;
specifier|const
name|void
modifier|*
name|item
decl_stmt|;
name|int
name|rval
decl_stmt|;
name|int
name|e
decl_stmt|;
name|cred_t
name|auth_cred
init|=
block|{
operator|(
operator|*
name|ppw
operator|)
operator|->
name|pw_name
block|,
name|pass
block|}
decl_stmt|;
name|struct
name|pam_conv
name|conv
init|=
block|{
operator|&
name|auth_conv
block|,
operator|&
name|auth_cred
block|}
decl_stmt|;
name|e
operator|=
name|pam_start
argument_list|(
literal|"ftpd"
argument_list|,
operator|(
operator|*
name|ppw
operator|)
operator|->
name|pw_name
argument_list|,
operator|&
name|conv
argument_list|,
operator|&
name|pamh
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|!=
name|PAM_SUCCESS
condition|)
block|{
name|syslog
argument_list|(
name|LOG_ERR
argument_list|,
literal|"pam_start: %s"
argument_list|,
name|pam_strerror
argument_list|(
name|pamh
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|e
operator|=
name|pam_set_item
argument_list|(
name|pamh
argument_list|,
name|PAM_RHOST
argument_list|,
name|remotehost
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|!=
name|PAM_SUCCESS
condition|)
block|{
name|syslog
argument_list|(
name|LOG_ERR
argument_list|,
literal|"pam_set_item(PAM_RHOST): %s"
argument_list|,
name|pam_strerror
argument_list|(
name|pamh
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|e
operator|=
name|pam_authenticate
argument_list|(
name|pamh
argument_list|,
literal|0
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|e
condition|)
block|{
case|case
name|PAM_SUCCESS
case|:
comment|/* 		 * With PAM we support the concept of a "template" 		 * user.  The user enters a login name which is 		 * authenticated by PAM, usually via a remote service 		 * such as RADIUS or TACACS+.  If authentication 		 * succeeds, a different but related "template" name 		 * is used for setting the credentials, shell, and 		 * home directory.  The name the user enters need only 		 * exist on the remote authentication server, but the 		 * template name must be present in the local password 		 * database. 		 * 		 * This is supported by two various mechanisms in the 		 * individual modules.  However, from the application's 		 * point of view, the template user is always passed 		 * back as a changed value of the PAM_USER item. 		 */
if|if
condition|(
operator|(
name|e
operator|=
name|pam_get_item
argument_list|(
name|pamh
argument_list|,
name|PAM_USER
argument_list|,
operator|&
name|item
argument_list|)
operator|)
operator|==
name|PAM_SUCCESS
condition|)
block|{
name|tmpl_user
operator|=
operator|(
specifier|const
name|char
operator|*
operator|)
name|item
expr_stmt|;
if|if
condition|(
name|strcmp
argument_list|(
operator|(
operator|*
name|ppw
operator|)
operator|->
name|pw_name
argument_list|,
name|tmpl_user
argument_list|)
operator|!=
literal|0
condition|)
operator|*
name|ppw
operator|=
name|getpwnam
argument_list|(
name|tmpl_user
argument_list|)
expr_stmt|;
block|}
else|else
name|syslog
argument_list|(
name|LOG_ERR
argument_list|,
literal|"Couldn't get PAM_USER: %s"
argument_list|,
name|pam_strerror
argument_list|(
name|pamh
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|rval
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|PAM_AUTH_ERR
case|:
case|case
name|PAM_USER_UNKNOWN
case|:
case|case
name|PAM_MAXTRIES
case|:
name|rval
operator|=
literal|1
expr_stmt|;
break|break;
default|default:
name|syslog
argument_list|(
name|LOG_ERR
argument_list|,
literal|"pam_authenticate: %s"
argument_list|,
name|pam_strerror
argument_list|(
name|pamh
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|rval
operator|=
operator|-
literal|1
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|rval
operator|==
literal|0
condition|)
block|{
name|e
operator|=
name|pam_acct_mgmt
argument_list|(
name|pamh
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|==
name|PAM_NEW_AUTHTOK_REQD
condition|)
block|{
name|e
operator|=
name|pam_chauthtok
argument_list|(
name|pamh
argument_list|,
name|PAM_CHANGE_EXPIRED_AUTHTOK
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|!=
name|PAM_SUCCESS
condition|)
block|{
name|syslog
argument_list|(
name|LOG_ERR
argument_list|,
literal|"pam_chauthtok: %s"
argument_list|,
name|pam_strerror
argument_list|(
name|pamh
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|rval
operator|=
literal|1
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|e
operator|!=
name|PAM_SUCCESS
condition|)
block|{
name|rval
operator|=
literal|1
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rval
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
operator|(
name|e
operator|=
name|pam_end
argument_list|(
name|pamh
argument_list|,
name|e
argument_list|)
operator|)
operator|!=
name|PAM_SUCCESS
condition|)
block|{
name|syslog
argument_list|(
name|LOG_ERR
argument_list|,
literal|"pam_end: %s"
argument_list|,
name|pam_strerror
argument_list|(
name|pamh
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|pamh
operator|=
name|NULL
expr_stmt|;
block|}
return|return
name|rval
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* USE_PAM */
end_comment

end_unit

