begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2015, Vsevolod Stakhov  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *	 * Redistributions of source code must retain the above copyright  *	   notice, this list of conditions and the following disclaimer.  *	 * Redistributions in binary form must reproduce the above copyright  *	   notice, this list of conditions and the following disclaimer in the  *	   documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY AUTHOR ''AS IS'' AND ANY  * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED. IN NO EVENT SHALL AUTHOR BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_pragma
pragma|#
directive|pragma
name|once
end_pragma

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<memory>
end_include

begin_include
include|#
directive|include
file|<iostream>
end_include

begin_include
include|#
directive|include
file|"ucl.h"
end_include

begin_comment
comment|// C++11 API inspired by json11: https://github.com/dropbox/json11/
end_comment

begin_decl_stmt
name|namespace
name|ucl
block|{
struct|struct
name|ucl_map_construct_t
block|{ }
struct|;
name|constexpr
name|ucl_map_construct_t
name|ucl_map_construct
init|=
name|ucl_map_construct_t
argument_list|()
decl_stmt|;
struct|struct
name|ucl_array_construct_t
block|{ }
struct|;
name|constexpr
name|ucl_array_construct_t
name|ucl_array_construct
init|=
name|ucl_array_construct_t
argument_list|()
decl_stmt|;
name|class
name|Ucl
name|final
block|{
name|private
label|:
struct|struct
name|ucl_deleter
block|{
name|void
name|operator
argument_list|()
operator|(
name|ucl_object_t
operator|*
name|obj
operator|)
block|{
name|ucl_object_unref
argument_list|(
name|obj
argument_list|)
block|; 		}
block|}
struct|;
specifier|static
name|int
name|append_char
parameter_list|(
name|unsigned
name|char
name|c
parameter_list|,
name|size_t
name|nchars
parameter_list|,
name|void
modifier|*
name|ud
parameter_list|)
block|{
name|std
operator|::
name|string
operator|*
name|out
operator|=
name|reinterpret_cast
operator|<
name|std
operator|::
name|string
operator|*
operator|>
operator|(
name|ud
operator|)
expr_stmt|;
name|out
operator|->
name|append
argument_list|(
name|nchars
argument_list|,
operator|(
name|char
operator|)
name|c
argument_list|)
expr_stmt|;
return|return
name|nchars
return|;
block|}
specifier|static
name|int
name|append_len
parameter_list|(
name|unsigned
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|size_t
name|len
parameter_list|,
name|void
modifier|*
name|ud
parameter_list|)
block|{
name|std
operator|::
name|string
operator|*
name|out
operator|=
name|reinterpret_cast
operator|<
name|std
operator|::
name|string
operator|*
operator|>
operator|(
name|ud
operator|)
expr_stmt|;
name|out
operator|->
name|append
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|str
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|len
return|;
block|}
specifier|static
name|int
name|append_int
parameter_list|(
name|int64_t
name|elt
parameter_list|,
name|void
modifier|*
name|ud
parameter_list|)
block|{
name|std
operator|::
name|string
operator|*
name|out
operator|=
name|reinterpret_cast
operator|<
name|std
operator|::
name|string
operator|*
operator|>
operator|(
name|ud
operator|)
expr_stmt|;
name|auto
name|nstr
init|=
name|std
operator|::
name|to_string
argument_list|(
name|elt
argument_list|)
decl_stmt|;
name|out
operator|->
name|append
argument_list|(
name|nstr
argument_list|)
expr_stmt|;
return|return
name|nstr
operator|.
name|size
argument_list|()
return|;
block|}
specifier|static
name|int
name|append_double
parameter_list|(
name|double
name|elt
parameter_list|,
name|void
modifier|*
name|ud
parameter_list|)
block|{
name|std
operator|::
name|string
operator|*
name|out
operator|=
name|reinterpret_cast
operator|<
name|std
operator|::
name|string
operator|*
operator|>
operator|(
name|ud
operator|)
expr_stmt|;
name|auto
name|nstr
init|=
name|std
operator|::
name|to_string
argument_list|(
name|elt
argument_list|)
decl_stmt|;
name|out
operator|->
name|append
argument_list|(
name|nstr
argument_list|)
expr_stmt|;
return|return
name|nstr
operator|.
name|size
argument_list|()
return|;
block|}
specifier|static
name|struct
name|ucl_emitter_functions
name|default_emit_funcs
parameter_list|()
block|{
name|struct
name|ucl_emitter_functions
name|func
init|=
block|{
name|Ucl
operator|::
name|append_char
block|,
name|Ucl
operator|::
name|append_len
block|,
name|Ucl
operator|::
name|append_int
block|,
name|Ucl
operator|::
name|append_double
block|,
name|nullptr
block|,
name|nullptr
block|}
decl_stmt|;
return|return
name|func
return|;
block|}
empty_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|ucl_object_t
operator|,
name|ucl_deleter
operator|>
name|obj
expr_stmt|;
name|public
label|:
name|class
name|const_iterator
block|{
name|private
label|:
struct|struct
name|ucl_iter_deleter
block|{
name|void
name|operator
argument_list|()
operator|(
name|ucl_object_iter_t
name|it
operator|)
block|{
name|ucl_object_iterate_free
argument_list|(
name|it
argument_list|)
block|; 			}
block|}
struct|;
name|std
operator|::
name|shared_ptr
operator|<
name|void
operator|>
name|it
expr_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|Ucl
operator|>
name|cur
expr_stmt|;
name|public
label|:
typedef|typedef
name|std
operator|::
name|forward_iterator_tag
name|iterator_category
expr_stmt|;
name|const_iterator
argument_list|(
argument|const Ucl&obj
argument_list|)
block|{
name|it
operator|=
name|std
operator|::
name|shared_ptr
operator|<
name|void
operator|>
operator|(
name|ucl_object_iterate_new
argument_list|(
name|obj
operator|.
name|obj
operator|.
name|get
argument_list|()
argument_list|)
operator|,
name|ucl_iter_deleter
argument_list|()
operator|)
expr_stmt|;
name|cur
operator|.
name|reset
argument_list|(
argument|new Ucl(ucl_object_iterate_safe (it.get(), true))
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|*
name|cur
condition|)
block|{
name|it
operator|.
name|reset
argument_list|()
expr_stmt|;
name|cur
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
name|const_iterator
argument_list|()
block|{}
name|const_iterator
argument_list|(
specifier|const
name|const_iterator
operator|&
name|other
argument_list|)
operator|=
name|delete
expr_stmt|;
name|const_iterator
argument_list|(
name|const_iterator
operator|&&
name|other
argument_list|)
operator|=
expr|default
expr_stmt|;
operator|~
name|const_iterator
argument_list|()
block|{}
name|const_iterator
operator|&
name|operator
operator|=
operator|(
specifier|const
name|const_iterator
operator|&
name|other
operator|)
operator|=
name|delete
expr_stmt|;
name|const_iterator
modifier|&
name|operator
init|=
operator|(
name|const_iterator
operator|&&
name|other
operator|)
operator|=
expr|default
decl_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|const_iterator
operator|&
name|other
operator|)
specifier|const
block|{
if|if
condition|(
name|cur
operator|&&
name|other
operator|.
name|cur
condition|)
block|{
return|return
name|cur
operator|->
name|obj
operator|.
name|get
argument_list|()
operator|==
name|other
operator|.
name|cur
operator|->
name|obj
operator|.
name|get
argument_list|()
return|;
block|}
return|return
operator|!
name|cur
operator|&&
operator|!
name|other
operator|.
name|cur
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|const_iterator
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|other
operator|)
return|;
block|}
name|const_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
if|if
condition|(
name|it
condition|)
block|{
name|cur
operator|.
name|reset
argument_list|(
argument|new Ucl(ucl_object_iterate_safe (it.get(), true))
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|*
name|cur
condition|)
block|{
name|it
operator|.
name|reset
argument_list|()
expr_stmt|;
name|cur
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
return|return
operator|*
name|this
return|;
block|}
specifier|const
name|Ucl
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|cur
return|;
block|}
specifier|const
name|Ucl
operator|*
name|operator
operator|->
expr|(
block|)
decl|const
block|{
return|return
name|cur
operator|.
name|get
argument_list|()
return|;
block|}
block|}
empty_stmt|;
comment|// We grab ownership if get non-const ucl_object_t
name|Ucl
argument_list|(
argument|ucl_object_t *other
argument_list|)
block|{
name|obj
operator|.
name|reset
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
comment|// Shared ownership
name|Ucl
argument_list|(
argument|const ucl_object_t *other
argument_list|)
block|{
name|obj
operator|.
name|reset
argument_list|(
name|ucl_object_ref
argument_list|(
name|other
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Ucl
argument_list|(
argument|const Ucl&other
argument_list|)
block|{
name|obj
operator|.
name|reset
argument_list|(
name|ucl_object_ref
argument_list|(
name|other
operator|.
name|obj
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Ucl
argument_list|(
argument|Ucl&&other
argument_list|)
block|{
name|obj
operator|.
name|swap
argument_list|(
name|other
operator|.
name|obj
argument_list|)
expr_stmt|;
block|}
name|Ucl
argument_list|()
name|noexcept
block|{
name|obj
operator|.
name|reset
argument_list|(
name|ucl_object_typed_new
argument_list|(
name|UCL_NULL
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Ucl
argument_list|(
argument|std::nullptr_t
argument_list|)
name|noexcept
block|{
name|obj
operator|.
name|reset
argument_list|(
name|ucl_object_typed_new
argument_list|(
name|UCL_NULL
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Ucl
argument_list|(
argument|double value
argument_list|)
block|{
name|obj
operator|.
name|reset
argument_list|(
name|ucl_object_typed_new
argument_list|(
name|UCL_FLOAT
argument_list|)
argument_list|)
expr_stmt|;
name|obj
operator|->
name|value
operator|.
name|dv
operator|=
name|value
expr_stmt|;
block|}
name|Ucl
argument_list|(
argument|int64_t value
argument_list|)
block|{
name|obj
operator|.
name|reset
argument_list|(
name|ucl_object_typed_new
argument_list|(
name|UCL_INT
argument_list|)
argument_list|)
expr_stmt|;
name|obj
operator|->
name|value
operator|.
name|iv
operator|=
name|value
expr_stmt|;
block|}
name|Ucl
argument_list|(
argument|bool value
argument_list|)
block|{
name|obj
operator|.
name|reset
argument_list|(
name|ucl_object_typed_new
argument_list|(
name|UCL_BOOLEAN
argument_list|)
argument_list|)
expr_stmt|;
name|obj
operator|->
name|value
operator|.
name|iv
operator|=
name|static_cast
operator|<
name|int64_t
operator|>
operator|(
name|value
operator|)
expr_stmt|;
block|}
name|Ucl
argument_list|(
argument|const std::string&value
argument_list|)
block|{
name|obj
operator|.
name|reset
argument_list|(
name|ucl_object_fromstring_common
argument_list|(
name|value
operator|.
name|data
argument_list|()
argument_list|,
name|value
operator|.
name|size
argument_list|()
argument_list|,
name|UCL_STRING_RAW
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Ucl
argument_list|(
argument|const char * value
argument_list|)
block|{
name|obj
operator|.
name|reset
argument_list|(
name|ucl_object_fromstring_common
argument_list|(
name|value
argument_list|,
literal|0
argument_list|,
name|UCL_STRING_RAW
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Implicit constructor: anything with a to_json() function.
name|template
operator|<
name|class
name|T
operator|,
name|class
operator|=
name|decltype
argument_list|(
operator|&
name|T
operator|::
name|to_ucl
argument_list|)
operator|>
name|Ucl
argument_list|(
specifier|const
name|T
operator|&
name|t
argument_list|)
operator|:
name|Ucl
argument_list|(
argument|t.to_ucl()
argument_list|)
block|{}
comment|// Implicit constructor: map-like objects (std::map, std::unordered_map, etc)
name|template
operator|<
name|class
name|M
operator|,
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_constructible
operator|<
name|std
operator|::
name|string
operator|,
name|typename
name|M
operator|::
name|key_type
operator|>
operator|::
name|value
operator|&&
name|std
operator|::
name|is_constructible
operator|<
name|Ucl
operator|,
name|typename
name|M
operator|::
name|mapped_type
operator|>
operator|::
name|value
operator|,
name|int
operator|>
operator|::
name|type
operator|=
literal|0
operator|>
name|Ucl
argument_list|(
argument|const M& m
argument_list|)
block|{
name|obj
operator|.
name|reset
argument_list|(
name|ucl_object_typed_new
argument_list|(
name|UCL_OBJECT
argument_list|)
argument_list|)
block|;
name|auto
name|cobj
operator|=
name|obj
operator|.
name|get
argument_list|()
block|;
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|e
range|:
name|m
control|)
block|{
name|ucl_object_insert_key
argument_list|(
name|cobj
argument_list|,
name|ucl_object_ref
argument_list|(
name|e
operator|.
name|second
operator|.
name|obj
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
name|e
operator|.
name|first
operator|.
name|data
argument_list|()
argument_list|,
name|e
operator|.
name|first
operator|.
name|size
argument_list|()
argument_list|,
name|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Implicit constructor: vector-like objects (std::list, std::vector, std::set, etc)
name|template
operator|<
name|class
name|V
operator|,
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_constructible
operator|<
name|Ucl
operator|,
name|typename
name|V
operator|::
name|value_type
operator|>
operator|::
name|value
operator|,
name|int
operator|>
operator|::
name|type
operator|=
literal|0
operator|>
name|Ucl
argument_list|(
argument|const V& v
argument_list|)
block|{
name|obj
operator|.
name|reset
argument_list|(
name|ucl_object_typed_new
argument_list|(
name|UCL_ARRAY
argument_list|)
argument_list|)
block|;
name|auto
name|cobj
operator|=
name|obj
operator|.
name|get
argument_list|()
block|;
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|e
range|:
name|v
control|)
block|{
name|ucl_array_append
argument_list|(
name|cobj
argument_list|,
name|ucl_object_ref
argument_list|(
name|e
operator|.
name|obj
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ucl_type_t
name|type
argument_list|()
specifier|const
block|{
if|if
condition|(
name|obj
condition|)
block|{
return|return
name|ucl_object_type
argument_list|(
name|obj
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
return|return
name|UCL_NULL
return|;
block|}
specifier|const
name|std
operator|::
name|string
name|key
argument_list|()
specifier|const
block|{
name|std
operator|::
name|string
name|res
block|;
if|if
condition|(
name|obj
operator|->
name|key
condition|)
block|{
name|res
operator|.
name|assign
argument_list|(
name|obj
operator|->
name|key
argument_list|,
name|obj
operator|->
name|keylen
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
name|double
name|number_value
argument_list|(
specifier|const
name|double
name|default_val
operator|=
literal|0.0
argument_list|)
decl|const
block|{
name|double
name|res
decl_stmt|;
if|if
condition|(
name|ucl_object_todouble_safe
argument_list|(
name|obj
operator|.
name|get
argument_list|()
argument_list|,
operator|&
name|res
argument_list|)
condition|)
block|{
return|return
name|res
return|;
block|}
return|return
name|default_val
return|;
block|}
name|int64_t
name|int_value
argument_list|(
specifier|const
name|int64_t
name|default_val
operator|=
literal|0
argument_list|)
decl|const
block|{
name|int64_t
name|res
decl_stmt|;
if|if
condition|(
name|ucl_object_toint_safe
argument_list|(
name|obj
operator|.
name|get
argument_list|()
argument_list|,
operator|&
name|res
argument_list|)
condition|)
block|{
return|return
name|res
return|;
block|}
return|return
name|default_val
return|;
block|}
name|bool
name|bool_value
argument_list|(
specifier|const
name|bool
name|default_val
operator|=
name|false
argument_list|)
decl|const
block|{
name|bool
name|res
decl_stmt|;
if|if
condition|(
name|ucl_object_toboolean_safe
argument_list|(
name|obj
operator|.
name|get
argument_list|()
argument_list|,
operator|&
name|res
argument_list|)
condition|)
block|{
return|return
name|res
return|;
block|}
return|return
name|default_val
return|;
block|}
specifier|const
name|std
operator|::
name|string
name|string_value
argument_list|(
argument|const std::string& default_val =
literal|""
argument_list|)
specifier|const
block|{
specifier|const
name|char
operator|*
name|res
operator|=
name|nullptr
block|;
if|if
condition|(
name|ucl_object_tostring_safe
argument_list|(
name|obj
operator|.
name|get
argument_list|()
argument_list|,
operator|&
name|res
argument_list|)
condition|)
block|{
return|return
name|res
return|;
block|}
return|return
name|default_val
return|;
block|}
specifier|const
name|Ucl
name|at
argument_list|(
name|size_t
name|i
argument_list|)
decl|const
block|{
if|if
condition|(
name|type
argument_list|()
operator|==
name|UCL_ARRAY
condition|)
block|{
return|return
name|Ucl
argument_list|(
name|ucl_array_find_index
argument_list|(
name|obj
operator|.
name|get
argument_list|()
argument_list|,
name|i
argument_list|)
argument_list|)
return|;
block|}
return|return
name|Ucl
argument_list|(
name|nullptr
argument_list|)
return|;
block|}
specifier|const
name|Ucl
name|lookup
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|key
argument_list|)
decl|const
block|{
if|if
condition|(
name|type
argument_list|()
operator|==
name|UCL_OBJECT
condition|)
block|{
return|return
name|Ucl
argument_list|(
name|ucl_object_lookup_len
argument_list|(
name|obj
operator|.
name|get
argument_list|()
argument_list|,
name|key
operator|.
name|data
argument_list|()
argument_list|,
name|key
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
return|return
name|Ucl
argument_list|(
name|nullptr
argument_list|)
return|;
block|}
specifier|inline
specifier|const
name|Ucl
name|operator
index|[]
argument_list|(
name|size_t
name|i
argument_list|)
decl|const
block|{
return|return
name|at
argument_list|(
name|i
argument_list|)
return|;
block|}
specifier|inline
specifier|const
name|Ucl
name|operator
index|[]
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|key
argument_list|)
decl|const
block|{
return|return
name|lookup
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|// Serialize.
name|void
name|dump
argument_list|(
name|std
operator|::
name|string
operator|&
name|out
argument_list|,
name|ucl_emitter_t
name|type
operator|=
name|UCL_EMIT_JSON
argument_list|)
decl|const
block|{
name|struct
name|ucl_emitter_functions
name|cbdata
decl_stmt|;
name|cbdata
operator|=
name|Ucl
operator|::
name|default_emit_funcs
argument_list|()
expr_stmt|;
name|cbdata
operator|.
name|ud
operator|=
name|reinterpret_cast
operator|<
name|void
operator|*
operator|>
operator|(
operator|&
name|out
operator|)
expr_stmt|;
name|ucl_object_emit_full
argument_list|(
name|obj
operator|.
name|get
argument_list|()
argument_list|,
name|type
argument_list|,
operator|&
name|cbdata
argument_list|,
name|nullptr
argument_list|)
expr_stmt|;
block|}
name|std
operator|::
name|string
name|dump
argument_list|(
argument|ucl_emitter_t type = UCL_EMIT_JSON
argument_list|)
specifier|const
block|{
name|std
operator|::
name|string
name|out
block|;
name|dump
argument_list|(
name|out
argument_list|,
name|type
argument_list|)
block|;
return|return
name|out
return|;
block|}
specifier|static
name|Ucl
name|parse
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|in
argument_list|,
name|std
operator|::
name|string
operator|&
name|err
argument_list|)
block|{
name|auto
name|parser
init|=
name|ucl_parser_new
argument_list|(
name|UCL_PARSER_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ucl_parser_add_chunk
argument_list|(
name|parser
argument_list|,
operator|(
specifier|const
name|unsigned
name|char
operator|*
operator|)
name|in
operator|.
name|data
argument_list|()
argument_list|,
name|in
operator|.
name|size
argument_list|()
argument_list|)
condition|)
block|{
name|err
operator|.
name|assign
argument_list|(
name|ucl_parser_get_error
argument_list|(
name|parser
argument_list|)
argument_list|)
expr_stmt|;
name|ucl_parser_free
argument_list|(
name|parser
argument_list|)
expr_stmt|;
return|return
name|nullptr
return|;
block|}
name|auto
name|obj
init|=
name|ucl_parser_get_object
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|ucl_parser_free
argument_list|(
name|parser
argument_list|)
expr_stmt|;
comment|// Obj will handle ownership
return|return
name|Ucl
argument_list|(
name|obj
argument_list|)
return|;
block|}
specifier|static
name|Ucl
name|parse
argument_list|(
specifier|const
name|char
operator|*
name|in
argument_list|,
name|std
operator|::
name|string
operator|&
name|err
argument_list|)
block|{
if|if
condition|(
name|in
condition|)
block|{
return|return
name|parse
argument_list|(
name|std
operator|::
name|string
argument_list|(
name|in
argument_list|)
argument_list|,
name|err
argument_list|)
return|;
block|}
else|else
block|{
name|err
operator|=
literal|"null input"
expr_stmt|;
return|return
name|nullptr
return|;
block|}
block|}
specifier|static
name|Ucl
name|parse
argument_list|(
name|std
operator|::
name|istream
operator|&
name|ifs
argument_list|,
name|std
operator|::
name|string
operator|&
name|err
argument_list|)
block|{
return|return
name|Ucl
operator|::
name|parse
argument_list|(
name|std
operator|::
name|string
argument_list|(
name|std
operator|::
name|istreambuf_iterator
operator|<
name|char
operator|>
operator|(
name|ifs
operator|)
argument_list|,
name|std
operator|::
name|istreambuf_iterator
operator|<
name|char
operator|>
operator|(
operator|)
argument_list|)
argument_list|,
name|err
argument_list|)
return|;
block|}
name|Ucl
modifier|&
name|operator
init|=
operator|(
name|Ucl
name|rhs
operator|)
block|{
name|obj
operator|.
name|swap
argument_list|(
name|rhs
operator|.
name|obj
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|Ucl
operator|&
name|rhs
operator|)
specifier|const
block|{
return|return
name|ucl_object_compare
argument_list|(
name|obj
operator|.
name|get
argument_list|()
argument_list|,
name|rhs
operator|.
name|obj
operator|.
name|get
argument_list|()
argument_list|)
operator|==
literal|0
return|;
block|}
name|bool
name|operator
operator|<
operator|(
specifier|const
name|Ucl
operator|&
name|rhs
operator|)
specifier|const
block|{
return|return
name|ucl_object_compare
argument_list|(
name|obj
operator|.
name|get
argument_list|()
argument_list|,
name|rhs
operator|.
name|obj
operator|.
name|get
argument_list|()
argument_list|)
operator|<
literal|0
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|Ucl
operator|&
name|rhs
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|rhs
operator|)
return|;
block|}
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|Ucl
operator|&
name|rhs
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
name|rhs
operator|<
operator|*
name|this
operator|)
return|;
block|}
name|bool
name|operator
operator|>
operator|(
specifier|const
name|Ucl
operator|&
name|rhs
operator|)
specifier|const
block|{
return|return
operator|(
name|rhs
operator|<
operator|*
name|this
operator|)
return|;
block|}
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|Ucl
operator|&
name|rhs
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|<
name|rhs
operator|)
return|;
block|}
name|explicit
name|operator
name|bool
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|obj
operator|||
name|type
argument_list|()
operator|==
name|UCL_NULL
condition|)
block|{
return|return
name|false
return|;
block|}
if|if
condition|(
name|type
argument_list|()
operator|==
name|UCL_BOOLEAN
condition|)
block|{
return|return
name|bool_value
argument_list|()
return|;
block|}
return|return
name|true
return|;
block|}
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
operator|*
name|this
argument_list|)
return|;
block|}
name|const_iterator
name|cbegin
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
operator|*
name|this
argument_list|)
return|;
block|}
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|()
return|;
block|}
name|const_iterator
name|cend
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|()
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

unit|};
end_unit

