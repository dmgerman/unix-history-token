begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* This is part of the iostream/stdio library, providing -*- C -*- I/O.    Define ANSI C stdio on top of C++ iostreams.    Copyright (C) 1991, 1994 Free Software Foundation  This library is free software; you can redistribute it and/or modify it under the terms of the GNU Library General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.   This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for more details.  You should have received a copy of the GNU Library General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. */
end_comment

begin_comment
comment|/*  *	ANSI Standard: 4.9 INPUT/OUTPUT<stdio.h>  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_STDIO_H
end_ifndef

begin_define
define|#
directive|define
name|_STDIO_H
end_define

begin_define
define|#
directive|define
name|_STDIO_USES_IOSTREAM
end_define

begin_include
include|#
directive|include
file|<libio.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|NULL
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_define
define|#
directive|define
name|NULL
value|0
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|NULL
value|(void*)0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|EOF
end_ifndef

begin_define
define|#
directive|define
name|EOF
value|(-1)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|BUFSIZ
end_ifndef

begin_define
define|#
directive|define
name|BUFSIZ
value|1024
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|_IOFBF
value|0
end_define

begin_comment
comment|/* Fully buffered. */
end_comment

begin_define
define|#
directive|define
name|_IOLBF
value|1
end_define

begin_comment
comment|/* Line buffered. */
end_comment

begin_define
define|#
directive|define
name|_IONBF
value|2
end_define

begin_comment
comment|/* No buffering. */
end_comment

begin_define
define|#
directive|define
name|SEEK_SET
value|0
end_define

begin_define
define|#
directive|define
name|SEEK_CUR
value|1
end_define

begin_define
define|#
directive|define
name|SEEK_END
value|2
end_define

begin_comment
comment|/* define size_t.  Crud in case<sys/types.h> has defined it. */
end_comment

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_SIZE_T
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|_T_SIZE_
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|_T_SIZE
argument_list|)
end_if

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__SIZE_T
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|_SIZE_T_
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|___int_size_t_h
argument_list|)
end_if

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_GCC_SIZE_T
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|_SIZET_
argument_list|)
end_if

begin_define
define|#
directive|define
name|_SIZE_T
end_define

begin_define
define|#
directive|define
name|_T_SIZE_
end_define

begin_define
define|#
directive|define
name|_T_SIZE
end_define

begin_define
define|#
directive|define
name|__SIZE_T
end_define

begin_define
define|#
directive|define
name|_SIZE_T_
end_define

begin_define
define|#
directive|define
name|___int_size_t_h
end_define

begin_define
define|#
directive|define
name|_GCC_SIZE_T
end_define

begin_define
define|#
directive|define
name|_SIZET_
end_define

begin_typedef
typedef|typedef
name|_IO_size_t
name|size_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_typedef
typedef|typedef
name|struct
name|_IO_FILE
name|FILE
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_IO_fpos_t
name|fpos_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|FOPEN_MAX
value|_G_FOPEN_MAX
end_define

begin_define
define|#
directive|define
name|FILENAME_MAX
value|_G_FILENAME_MAX
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|TMP_MAX
end_ifndef

begin_define
define|#
directive|define
name|TMP_MAX
value|999
end_define

begin_comment
comment|/* Only limited by filename length */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|L_ctermid
value|9
end_define

begin_define
define|#
directive|define
name|L_cuserid
value|9
end_define

begin_define
define|#
directive|define
name|P_tmpdir
value|"/tmp"
end_define

begin_define
define|#
directive|define
name|L_tmpnam
value|20
end_define

begin_comment
comment|/* For use by debuggers. These are linked in if printf or fprintf are used. */
end_comment

begin_decl_stmt
specifier|extern
name|FILE
modifier|*
name|stdin
decl_stmt|,
modifier|*
name|stdout
decl_stmt|,
modifier|*
name|stderr
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* TODO */
end_comment

begin_define
define|#
directive|define
name|stdin
value|_IO_stdin
end_define

begin_define
define|#
directive|define
name|stdout
value|_IO_stdout
end_define

begin_define
define|#
directive|define
name|stderr
value|_IO_stderr
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
ifndef|#
directive|ifndef
name|__P
if|#
directive|if
name|defined
argument_list|(
name|__STDC__
argument_list|)
operator|||
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|||
name|defined
argument_list|(
name|c_plusplus
argument_list|)
define|#
directive|define
name|__P
parameter_list|(
name|args
parameter_list|)
value|args
else|#
directive|else
define|#
directive|define
name|__P
parameter_list|(
name|args
parameter_list|)
value|()
endif|#
directive|endif
endif|#
directive|endif
comment|/*!__P*/
specifier|extern
name|void
name|clearerr
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|fclose
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|feof
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|ferror
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|fflush
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|fgetc
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|fgetpos
name|__P
argument_list|(
operator|(
name|FILE
operator|*
name|fp
operator|,
name|fpos_t
operator|*
name|pos
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|char
modifier|*
name|fgets
name|__P
argument_list|(
operator|(
name|char
operator|*
operator|,
name|int
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|FILE
modifier|*
name|fopen
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|fprintf
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|,
specifier|const
name|char
operator|*
name|format
operator|,
operator|...
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|fputc
name|__P
argument_list|(
operator|(
name|int
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|fputs
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|str
operator|,
name|FILE
operator|*
name|fp
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|size_t
name|fread
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|size_t
operator|,
name|size_t
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|FILE
modifier|*
name|freopen
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|fscanf
name|__P
argument_list|(
operator|(
name|FILE
operator|*
name|fp
operator|,
specifier|const
name|char
operator|*
name|format
operator|,
operator|...
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|fseek
name|__P
argument_list|(
operator|(
name|FILE
operator|*
name|fp
operator|,
name|long
name|int
name|offset
operator|,
name|int
name|whence
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|fsetpos
name|__P
argument_list|(
operator|(
name|FILE
operator|*
name|fp
operator|,
specifier|const
name|fpos_t
operator|*
name|pos
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|long
name|int
name|ftell
name|__P
argument_list|(
operator|(
name|FILE
operator|*
name|fp
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|size_t
name|fwrite
name|__P
argument_list|(
operator|(
specifier|const
name|void
operator|*
operator|,
name|size_t
operator|,
name|size_t
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|getc
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|getchar
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|char
modifier|*
name|gets
name|__P
argument_list|(
operator|(
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|perror
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|printf
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|format
operator|,
operator|...
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|putc
name|__P
argument_list|(
operator|(
name|int
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|putchar
name|__P
argument_list|(
operator|(
name|int
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|puts
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|str
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|remove
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|rename
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|_old
operator|,
specifier|const
name|char
operator|*
name|_new
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|rewind
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|scanf
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|format
operator|,
operator|...
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|setbuf
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|setlinebuf
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|setbuffer
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|setvbuf
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|char
operator|*
operator|,
name|int
name|mode
operator|,
name|size_t
name|size
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|sprintf
name|__P
argument_list|(
operator|(
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
name|format
operator|,
operator|...
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|sscanf
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|string
operator|,
specifier|const
name|char
operator|*
name|format
operator|,
operator|...
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|FILE
modifier|*
name|tmpfile
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|char
modifier|*
name|tmpnam
name|__P
argument_list|(
operator|(
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|ungetc
name|__P
argument_list|(
operator|(
name|int
name|c
operator|,
name|FILE
operator|*
name|fp
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|vfprintf
name|__P
argument_list|(
operator|(
name|FILE
operator|*
name|fp
operator|,
name|char
specifier|const
operator|*
name|fmt0
operator|,
name|_IO_va_list
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|vprintf
name|__P
argument_list|(
operator|(
name|char
specifier|const
operator|*
name|fmt
operator|,
name|_IO_va_list
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|vsprintf
name|__P
argument_list|(
operator|(
name|char
operator|*
name|string
operator|,
specifier|const
name|char
operator|*
name|format
operator|,
name|_IO_va_list
operator|)
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|__STRICT_ANSI__
specifier|extern
name|int
name|vfscanf
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|_IO_va_list
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|vscanf
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
name|_IO_va_list
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|vsscanf
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|_IO_va_list
operator|)
argument_list|)
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__STRICT_ANSI__
argument_list|)
operator|||
name|defined
argument_list|(
name|_POSIX_SOURCE
argument_list|)
specifier|extern
name|FILE
modifier|*
name|fdopen
name|__P
argument_list|(
operator|(
name|int
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|fileno
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|FILE
modifier|*
name|popen
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|pclose
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__USE_GNU
specifier|extern
name|_IO_ssize_t
name|getdelim
name|__P
argument_list|(
operator|(
name|char
operator|*
operator|*
operator|,
name|size_t
operator|*
operator|,
name|int
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|_IO_ssize_t
name|getline
name|__P
argument_list|(
operator|(
name|char
operator|*
operator|*
operator|,
name|size_t
operator|*
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|snprintf
name|__P
argument_list|(
operator|(
name|char
operator|*
operator|,
name|size_t
operator|,
specifier|const
name|char
operator|*
operator|,
operator|...
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|vsnprintf
name|__P
argument_list|(
operator|(
name|char
operator|*
operator|,
name|size_t
operator|,
specifier|const
name|char
operator|*
operator|,
name|_IO_va_list
operator|)
argument_list|)
decl_stmt|;
endif|#
directive|endif
specifier|extern
name|int
name|__underflow
name|__P
argument_list|(
operator|(
expr|struct
name|_IO_FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|__overflow
name|__P
argument_list|(
operator|(
expr|struct
name|_IO_FILE
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
comment|/* Handle locking of streams.  */
if|#
directive|if
name|defined
name|_REENTRANT
operator|||
name|defined
name|_THREAD_SAFE
specifier|extern
name|void
name|clearerr_locked
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|clearerr_unlocked
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|feof_locked
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|feof_unlocked
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|ferror_locked
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|ferror_unlocked
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|fileno_locked
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|fileno_unlocked
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|flockfile
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|funlockfile
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|ftrylockfile
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|fclose_unlocked
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|fflush_locked
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|fflush_unlocked
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|size_t
name|fread_unlocked
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|size_t
operator|,
name|size_t
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|size_t
name|fwrite_unlocked
name|__P
argument_list|(
operator|(
specifier|const
name|void
operator|*
operator|,
name|size_t
operator|,
name|size_t
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|fputc_locked
name|__P
argument_list|(
operator|(
name|int
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|fputc_unlocked
name|__P
argument_list|(
operator|(
name|int
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|getc_locked
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|getc_unlocked
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|getchar_locked
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|getchar_unlocked
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|putc_locked
name|__P
argument_list|(
operator|(
name|int
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|putc_unlocked
name|__P
argument_list|(
operator|(
name|int
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|putchar_locked
name|__P
argument_list|(
operator|(
name|int
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|putchar_unlocked
name|__P
argument_list|(
operator|(
name|int
operator|)
argument_list|)
decl_stmt|;
define|#
directive|define
name|getc_unlocked
parameter_list|(
name|fp
parameter_list|)
value|_IO_getc_unlocked (fp)
define|#
directive|define
name|getc_locked
parameter_list|(
name|fp
parameter_list|)
value|_IO_getc (fp)
define|#
directive|define
name|getchar_unlocked
parameter_list|()
value|_IO_getc_unlocked (stdin)
define|#
directive|define
name|getchar_locked
parameter_list|()
value|_IO_getc (stdin)
define|#
directive|define
name|putchar_unlocked
parameter_list|(
name|c
parameter_list|)
value|_IO_putc_unlocked (c, stdout)
define|#
directive|define
name|putchar_locked
parameter_list|(
name|c
parameter_list|)
value|_IO_putc (c, stdout)
endif|#
directive|endif
comment|/* __USE_REENTRANT */
define|#
directive|define
name|getc
parameter_list|(
name|fp
parameter_list|)
value|_IO_getc(fp)
define|#
directive|define
name|putc
parameter_list|(
name|c
parameter_list|,
name|fp
parameter_list|)
value|_IO_putc(c, fp)
define|#
directive|define
name|putchar
parameter_list|(
name|c
parameter_list|)
value|_IO_putc(c, stdout)
define|#
directive|define
name|getchar
parameter_list|()
value|_IO_getc(stdin)
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*!_STDIO_H*/
end_comment

end_unit

