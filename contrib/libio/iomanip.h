begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* This is part of libio/iostream, providing -*- C++ -*- input/output. Copyright (C) 1993 Free Software Foundation  This file is part of the GNU IO Library.  This library is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this library; see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  As a special exception, if you link this library with files compiled with a GNU compiler to produce an executable, this does not cause the resulting executable to be covered by the GNU General Public License. This exception does not however invalidate any other reasons why the executable file might be covered by the GNU General Public License. */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_IOMANIP_H
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_pragma
pragma|#
directive|pragma
name|interface
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|_IOMANIP_H
end_define

begin_include
include|#
directive|include
file|<iostream.h>
end_include

begin_extern
extern|extern
literal|"C++"
block|{
comment|//-----------------------------------------------------------------------------
comment|//	Parametrized Manipulators as specified by ANSI draft
comment|//-----------------------------------------------------------------------------
comment|//-----------------------------------------------------------------------------
comment|//	Stream Manipulators
comment|//-----------------------------------------------------------------------------
comment|//
name|template
operator|<
name|class
name|TP
operator|>
name|class
name|smanip
expr_stmt|;
comment|// TP = Type Param
name|template
operator|<
name|class
name|TP
operator|>
name|class
name|sapp
block|{
name|ios
operator|&
call|(
modifier|*
name|_f
call|)
argument_list|(
name|ios
operator|&
argument_list|,
name|TP
argument_list|)
block|;
name|public
operator|:
name|sapp
argument_list|(
name|ios
operator|&
call|(
modifier|*
name|f
call|)
argument_list|(
name|ios
operator|&
argument_list|,
name|TP
argument_list|)
argument_list|)
operator|:
name|_f
argument_list|(
argument|f
argument_list|)
block|{}
comment|//
name|smanip
operator|<
name|TP
operator|>
name|operator
argument_list|()
operator|(
name|TP
name|a
operator|)
block|{
return|return
name|smanip
operator|<
name|TP
operator|>
operator|(
name|_f
operator|,
name|a
operator|)
return|;
block|}
block|}
end_extern

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|TP
operator|>
specifier|inline
name|istream
operator|&
name|operator
operator|>>
operator|(
name|istream
operator|&
name|i
operator|,
specifier|const
name|smanip
operator|<
name|TP
operator|>
operator|&
name|m
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|TP
operator|>
specifier|inline
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|ostream
operator|&
name|o
operator|,
specifier|const
name|smanip
operator|<
name|TP
operator|>
operator|&
name|m
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|TP
operator|>
name|class
name|smanip
block|{
name|ios
operator|&
call|(
modifier|*
name|_f
call|)
argument_list|(
name|ios
operator|&
argument_list|,
name|TP
argument_list|)
block|;
name|TP
name|_a
block|;
name|public
operator|:
name|smanip
argument_list|(
argument|ios& (*f)(ios&, TP)
argument_list|,
argument|TP a
argument_list|)
operator|:
name|_f
argument_list|(
name|f
argument_list|)
block|,
name|_a
argument_list|(
argument|a
argument_list|)
block|{}
comment|//
name|friend
name|istream
operator|&
name|operator
operator|>>
operator|<
operator|>
operator|(
name|istream
operator|&
name|i
operator|,
specifier|const
name|smanip
operator|<
name|TP
operator|>
operator|&
name|m
operator|)
block|;
name|friend
name|ostream
operator|&
name|operator
operator|<<
operator|<
operator|>
operator|(
name|ostream
operator|&
name|o
operator|,
specifier|const
name|smanip
operator|<
name|TP
operator|>
operator|&
name|m
operator|)
block|; }
expr_stmt|;
end_expr_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_extern
extern|extern template class smanip<int>;
end_extern

begin_extern
extern|extern template class smanip<ios::fmtflags>;
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|TP
operator|>
specifier|inline
name|istream
operator|&
name|operator
operator|>>
operator|(
name|istream
operator|&
name|i
operator|,
specifier|const
name|smanip
operator|<
name|TP
operator|>
operator|&
name|m
operator|)
block|{
call|(
modifier|*
name|m
operator|.
name|_f
call|)
argument_list|(
name|i
argument_list|,
name|m
operator|.
name|_a
argument_list|)
block|;
return|return
name|i
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|TP
operator|>
specifier|inline
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|ostream
operator|&
name|o
operator|,
specifier|const
name|smanip
operator|<
name|TP
operator|>
operator|&
name|m
operator|)
block|{
call|(
modifier|*
name|m
operator|.
name|_f
call|)
argument_list|(
name|o
argument_list|,
name|m
operator|.
name|_a
argument_list|)
block|;
return|return
name|o
return|;
block|}
end_expr_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_extern
extern|extern template istream& operator>>(istream&
operator|,
extern|const smanip<int>&
end_extern

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_extern
extern|extern template istream& operator>>(istream&
operator|,
extern|const smanip<ios::fmtflags>&
end_extern

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_extern
extern|extern template ostream& operator<<(ostream&
operator|,
extern|const smanip<int>&
end_extern

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_extern
extern|extern template ostream& operator<<(ostream&
operator|,
extern|const smanip<ios::fmtflags>&
end_extern

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|//-----------------------------------------------------------------------------
end_comment

begin_comment
comment|//	Input-Stream Manipulators
end_comment

begin_comment
comment|//-----------------------------------------------------------------------------
end_comment

begin_comment
comment|//
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|TP
operator|>
name|class
name|imanip
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|TP
operator|>
name|class
name|iapp
block|{
name|istream
operator|&
call|(
modifier|*
name|_f
call|)
argument_list|(
name|istream
operator|&
argument_list|,
name|TP
argument_list|)
block|;
name|public
operator|:
name|iapp
argument_list|(
name|istream
operator|&
call|(
modifier|*
name|f
call|)
argument_list|(
name|istream
operator|&
argument_list|,
name|TP
argument_list|)
argument_list|)
operator|:
name|_f
argument_list|(
argument|f
argument_list|)
block|{}
comment|//
name|imanip
operator|<
name|TP
operator|>
name|operator
argument_list|()
operator|(
name|TP
name|a
operator|)
block|{
return|return
name|imanip
operator|<
name|TP
operator|>
operator|(
name|_f
operator|,
name|a
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|TP
operator|>
specifier|inline
name|istream
operator|&
name|operator
operator|>>
operator|(
name|istream
operator|&
operator|,
specifier|const
name|imanip
operator|<
name|TP
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|TP
operator|>
name|class
name|imanip
block|{
name|istream
operator|&
call|(
modifier|*
name|_f
call|)
argument_list|(
name|istream
operator|&
argument_list|,
name|TP
argument_list|)
block|;
name|TP
name|_a
block|;
name|public
operator|:
name|imanip
argument_list|(
argument|istream& (*f)(istream&, TP)
argument_list|,
argument|TP a
argument_list|)
operator|:
name|_f
argument_list|(
name|f
argument_list|)
block|,
name|_a
argument_list|(
argument|a
argument_list|)
block|{}
comment|//
name|friend
name|istream
operator|&
name|operator
operator|>>
operator|<
operator|>
operator|(
name|istream
operator|&
name|i
operator|,
specifier|const
name|imanip
operator|<
name|TP
operator|>
operator|&
name|m
operator|)
block|; }
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|TP
operator|>
specifier|inline
name|istream
operator|&
name|operator
operator|>>
operator|(
name|istream
operator|&
name|i
operator|,
specifier|const
name|imanip
operator|<
name|TP
operator|>
operator|&
name|m
operator|)
block|{
return|return
call|(
modifier|*
name|m
operator|.
name|_f
call|)
argument_list|(
name|i
argument_list|,
name|m
operator|.
name|_a
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|//-----------------------------------------------------------------------------
end_comment

begin_comment
comment|//	Output-Stream Manipulators
end_comment

begin_comment
comment|//-----------------------------------------------------------------------------
end_comment

begin_comment
comment|//
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|TP
operator|>
name|class
name|omanip
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|TP
operator|>
name|class
name|oapp
block|{
name|ostream
operator|&
call|(
modifier|*
name|_f
call|)
argument_list|(
name|ostream
operator|&
argument_list|,
name|TP
argument_list|)
block|;
name|public
operator|:
name|oapp
argument_list|(
name|ostream
operator|&
call|(
modifier|*
name|f
call|)
argument_list|(
name|ostream
operator|&
argument_list|,
name|TP
argument_list|)
argument_list|)
operator|:
name|_f
argument_list|(
argument|f
argument_list|)
block|{}
comment|//
name|omanip
operator|<
name|TP
operator|>
name|operator
argument_list|()
operator|(
name|TP
name|a
operator|)
block|{
return|return
name|omanip
operator|<
name|TP
operator|>
operator|(
name|_f
operator|,
name|a
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|TP
operator|>
specifier|inline
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|ostream
operator|&
operator|,
specifier|const
name|omanip
operator|<
name|TP
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|TP
operator|>
name|class
name|omanip
block|{
name|ostream
operator|&
call|(
modifier|*
name|_f
call|)
argument_list|(
name|ostream
operator|&
argument_list|,
name|TP
argument_list|)
block|;
name|TP
name|_a
block|;
name|public
operator|:
name|omanip
argument_list|(
argument|ostream& (*f)(ostream&, TP)
argument_list|,
argument|TP a
argument_list|)
operator|:
name|_f
argument_list|(
name|f
argument_list|)
block|,
name|_a
argument_list|(
argument|a
argument_list|)
block|{}
comment|//
name|friend
name|ostream
operator|&
name|operator
operator|<<
operator|<
operator|>
operator|(
name|ostream
operator|&
name|o
operator|,
specifier|const
name|omanip
operator|<
name|TP
operator|>
operator|&
name|m
operator|)
block|; }
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|TP
operator|>
specifier|inline
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|ostream
operator|&
name|o
operator|,
specifier|const
name|omanip
operator|<
name|TP
operator|>
operator|&
name|m
operator|)
block|{
return|return
call|(
modifier|*
name|m
operator|.
name|_f
call|)
argument_list|(
name|o
argument_list|,
name|m
operator|.
name|_a
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|//-----------------------------------------------------------------------------
end_comment

begin_comment
comment|//	Available Manipulators
end_comment

begin_comment
comment|//-----------------------------------------------------------------------------
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Macro to define an iomanip function, with one argument
end_comment

begin_comment
comment|// The underlying function is `__iomanip_<name>'
end_comment

begin_comment
comment|//
end_comment

begin_define
define|#
directive|define
name|__DEFINE_IOMANIP_FN1
parameter_list|(
name|type
parameter_list|,
name|param
parameter_list|,
name|function
parameter_list|)
define|\
value|extern ios& __iomanip_##function (ios&, param); \ 	inline type<param> function (param n)           \ 		        { return type<param> (__iomanip_##function, n); }
end_define

begin_macro
name|__DEFINE_IOMANIP_FN1
argument_list|(
argument|smanip
argument_list|,
argument|int
argument_list|,
argument|setbase
argument_list|)
end_macro

begin_macro
name|__DEFINE_IOMANIP_FN1
argument_list|(
argument|smanip
argument_list|,
argument|int
argument_list|,
argument|setfill
argument_list|)
end_macro

begin_macro
name|__DEFINE_IOMANIP_FN1
argument_list|(
argument|smanip
argument_list|,
argument|int
argument_list|,
argument|setprecision
argument_list|)
end_macro

begin_macro
name|__DEFINE_IOMANIP_FN1
argument_list|(
argument|smanip
argument_list|,
argument|int
argument_list|,
argument|setw
argument_list|)
end_macro

begin_macro
name|__DEFINE_IOMANIP_FN1
argument_list|(
argument|smanip
argument_list|,
argument|ios::fmtflags
argument_list|,
argument|resetiosflags
argument_list|)
end_macro

begin_macro
name|__DEFINE_IOMANIP_FN1
argument_list|(
argument|smanip
argument_list|,
argument|ios::fmtflags
argument_list|,
argument|setiosflags
argument_list|)
end_macro

begin_comment
unit|}
comment|// extern "C++"
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*!_IOMANIP_H*/
end_comment

end_unit

