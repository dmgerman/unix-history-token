begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * ipsend.h (C) 1997-1998 Darren Reed  *  * This was written to test what size TCP fragments would get through  * various TCP/IP packet filters, as used in IP firewalls.  In certain  * conditions, enough of the TCP header is missing for unpredictable  * results unless the filter is aware that this can happen.  *  * The author provides this program as-is, with no gaurantee for its  * suitability for any specific purpose.  The author takes no responsibility  * for the misuse/abuse of this program and provides it for the sole purpose  * of testing packet filter policies.  This file maybe distributed freely  * providing it is not modified and that this notice remains in tact.  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__P
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|__STDC__
end_ifdef

begin_define
define|#
directive|define
name|__P
parameter_list|(
name|x
parameter_list|)
value|x
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|__P
parameter_list|(
name|x
parameter_list|)
value|()
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|"ip_compat.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|linux
end_ifdef

begin_include
include|#
directive|include
file|<linux/sockios.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|"tcpip.h"
end_include

begin_include
include|#
directive|include
file|"ipt.h"
end_include

begin_include
include|#
directive|include
file|"ipf.h"
end_include

begin_decl_stmt
specifier|extern
name|int
name|resolve
name|__P
argument_list|(
operator|(
name|char
operator|*
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|arp
name|__P
argument_list|(
operator|(
name|char
operator|*
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_short
name|chksum
name|__P
argument_list|(
operator|(
name|u_short
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|send_ether
name|__P
argument_list|(
operator|(
name|int
operator|,
name|char
operator|*
operator|,
name|int
operator|,
expr|struct
name|in_addr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|send_ip
name|__P
argument_list|(
operator|(
name|int
operator|,
name|int
operator|,
name|ip_t
operator|*
operator|,
expr|struct
name|in_addr
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|send_tcp
name|__P
argument_list|(
operator|(
name|int
operator|,
name|int
operator|,
name|ip_t
operator|*
operator|,
expr|struct
name|in_addr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|send_udp
name|__P
argument_list|(
operator|(
name|int
operator|,
name|int
operator|,
name|ip_t
operator|*
operator|,
expr|struct
name|in_addr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|send_icmp
name|__P
argument_list|(
operator|(
name|int
operator|,
name|int
operator|,
name|ip_t
operator|*
operator|,
expr|struct
name|in_addr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|send_packet
name|__P
argument_list|(
operator|(
name|int
operator|,
name|int
operator|,
name|ip_t
operator|*
operator|,
expr|struct
name|in_addr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|send_packets
name|__P
argument_list|(
operator|(
name|char
operator|*
operator|,
name|int
operator|,
name|ip_t
operator|*
operator|,
expr|struct
name|in_addr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_short
name|seclevel
name|__P
argument_list|(
operator|(
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_32_t
name|buildopts
name|__P
argument_list|(
operator|(
name|char
operator|*
operator|,
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|addipopt
name|__P
argument_list|(
operator|(
name|char
operator|*
operator|,
expr|struct
name|ipopt_names
operator|*
operator|,
name|int
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|initdevice
name|__P
argument_list|(
operator|(
name|char
operator|*
operator|,
name|int
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|sendip
name|__P
argument_list|(
operator|(
name|int
operator|,
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|linux
end_ifdef

begin_decl_stmt
specifier|extern
name|struct
name|sock
modifier|*
name|find_tcp
name|__P
argument_list|(
operator|(
name|int
operator|,
expr|struct
name|tcpiphdr
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_else
else|#
directive|else
end_else

begin_decl_stmt
specifier|extern
name|struct
name|tcpcb
modifier|*
name|find_tcp
name|__P
argument_list|(
operator|(
name|int
operator|,
expr|struct
name|tcpiphdr
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
specifier|extern
name|int
name|ip_resend
name|__P
argument_list|(
operator|(
name|char
operator|*
operator|,
name|int
operator|,
expr|struct
name|ipread
operator|*
operator|,
expr|struct
name|in_addr
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|ip_test1
name|__P
argument_list|(
operator|(
name|char
operator|*
operator|,
name|int
operator|,
name|ip_t
operator|*
operator|,
expr|struct
name|in_addr
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|ip_test2
name|__P
argument_list|(
operator|(
name|char
operator|*
operator|,
name|int
operator|,
name|ip_t
operator|*
operator|,
expr|struct
name|in_addr
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|ip_test3
name|__P
argument_list|(
operator|(
name|char
operator|*
operator|,
name|int
operator|,
name|ip_t
operator|*
operator|,
expr|struct
name|in_addr
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|ip_test4
name|__P
argument_list|(
operator|(
name|char
operator|*
operator|,
name|int
operator|,
name|ip_t
operator|*
operator|,
expr|struct
name|in_addr
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|ip_test5
name|__P
argument_list|(
operator|(
name|char
operator|*
operator|,
name|int
operator|,
name|ip_t
operator|*
operator|,
expr|struct
name|in_addr
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|ip_test6
name|__P
argument_list|(
operator|(
name|char
operator|*
operator|,
name|int
operator|,
name|ip_t
operator|*
operator|,
expr|struct
name|in_addr
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|ip_test7
name|__P
argument_list|(
operator|(
name|char
operator|*
operator|,
name|int
operator|,
name|ip_t
operator|*
operator|,
expr|struct
name|in_addr
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|do_socket
name|__P
argument_list|(
operator|(
name|char
operator|*
operator|,
name|int
operator|,
expr|struct
name|tcpiphdr
operator|*
operator|,
expr|struct
name|in_addr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|openkmem
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|kmemcpy
name|__P
argument_list|(
operator|(
name|char
operator|*
operator|,
name|void
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|KMCPY
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|kmemcpy((char *)(a), (void *)(b), (int)(c))
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|OPT_RAW
end_ifndef

begin_define
define|#
directive|define
name|OPT_RAW
value|0x80000
end_define

begin_endif
endif|#
directive|endif
end_endif

end_unit

