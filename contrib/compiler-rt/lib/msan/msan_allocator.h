begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- msan_allocator.h ----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is a part of MemorySanitizer.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|MSAN_ALLOCATOR_H
end_ifndef

begin_define
define|#
directive|define
name|MSAN_ALLOCATOR_H
end_define

begin_include
include|#
directive|include
file|"sanitizer_common/sanitizer_common.h"
end_include

begin_include
include|#
directive|include
file|"sanitizer_common/sanitizer_allocator.h"
end_include

begin_include
include|#
directive|include
file|"sanitizer_common/sanitizer_allocator_interface.h"
end_include

begin_decl_stmt
name|namespace
name|__msan
block|{
struct|struct
name|Metadata
block|{
name|uptr
name|requested_size
decl_stmt|;
block|}
struct|;
struct|struct
name|MsanMapUnmapCallback
block|{
name|void
name|OnMap
argument_list|(
name|uptr
name|p
argument_list|,
name|uptr
name|size
argument_list|)
decl|const
block|{}
name|void
name|OnUnmap
argument_list|(
name|uptr
name|p
argument_list|,
name|uptr
name|size
argument_list|)
decl|const
block|{
name|__msan_unpoison
argument_list|(
operator|(
name|void
operator|*
operator|)
name|p
argument_list|,
name|size
argument_list|)
expr_stmt|;
comment|// We are about to unmap a chunk of user memory.
comment|// Mark the corresponding shadow memory as not needed.
name|uptr
name|shadow_p
init|=
name|MEM_TO_SHADOW
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|ReleaseMemoryPagesToOS
argument_list|(
name|shadow_p
argument_list|,
name|shadow_p
operator|+
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|__msan_get_track_origins
argument_list|()
condition|)
block|{
name|uptr
name|origin_p
init|=
name|MEM_TO_ORIGIN
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|ReleaseMemoryPagesToOS
argument_list|(
name|origin_p
argument_list|,
name|origin_p
operator|+
name|size
argument_list|)
expr_stmt|;
block|}
block|}
block|}
struct|;
if|#
directive|if
name|defined
argument_list|(
name|__mips64
argument_list|)
specifier|static
specifier|const
name|uptr
name|kMaxAllowedMallocSize
init|=
literal|2UL
operator|<<
literal|30
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kRegionSizeLog
init|=
literal|20
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kNumRegions
init|=
name|SANITIZER_MMAP_RANGE_SIZE
operator|>>
name|kRegionSizeLog
decl_stmt|;
typedef|typedef
name|TwoLevelByteMap
operator|<
operator|(
name|kNumRegions
operator|>>
literal|12
operator|)
operator|,
literal|1
operator|<<
literal|12
operator|>
name|ByteMap
expr_stmt|;
struct|struct
name|AP32
block|{
specifier|static
specifier|const
name|uptr
name|kSpaceBeg
init|=
literal|0
decl_stmt|;
specifier|static
specifier|const
name|u64
name|kSpaceSize
init|=
name|SANITIZER_MMAP_RANGE_SIZE
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kMetadataSize
init|=
sizeof|sizeof
argument_list|(
name|Metadata
argument_list|)
decl_stmt|;
typedef|typedef
name|__sanitizer
operator|::
name|CompactSizeClassMap
name|SizeClassMap
expr_stmt|;
specifier|static
specifier|const
name|uptr
name|kRegionSizeLog
init|=
name|__msan
operator|::
name|kRegionSizeLog
decl_stmt|;
typedef|typedef
name|__msan
operator|::
name|ByteMap
name|ByteMap
expr_stmt|;
typedef|typedef
name|MsanMapUnmapCallback
name|MapUnmapCallback
typedef|;
specifier|static
specifier|const
name|uptr
name|kFlags
init|=
literal|0
decl_stmt|;
block|}
struct|;
typedef|typedef
name|SizeClassAllocator32
operator|<
name|AP32
operator|>
name|PrimaryAllocator
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__x86_64__
argument_list|)
if|#
directive|if
name|SANITIZER_LINUX
operator|&&
operator|!
name|defined
argument_list|(
name|MSAN_LINUX_X86_64_OLD_MAPPING
argument_list|)
specifier|static
specifier|const
name|uptr
name|kAllocatorSpace
init|=
literal|0x700000000000ULL
decl_stmt|;
else|#
directive|else
specifier|static
specifier|const
name|uptr
name|kAllocatorSpace
init|=
literal|0x600000000000ULL
decl_stmt|;
endif|#
directive|endif
specifier|static
specifier|const
name|uptr
name|kMaxAllowedMallocSize
init|=
literal|8UL
operator|<<
literal|30
decl_stmt|;
struct|struct
name|AP64
block|{
comment|// Allocator64 parameters. Deliberately using a short name.
specifier|static
specifier|const
name|uptr
name|kSpaceBeg
init|=
name|kAllocatorSpace
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kSpaceSize
init|=
literal|0x40000000000
decl_stmt|;
comment|// 4T.
specifier|static
specifier|const
name|uptr
name|kMetadataSize
init|=
sizeof|sizeof
argument_list|(
name|Metadata
argument_list|)
decl_stmt|;
typedef|typedef
name|DefaultSizeClassMap
name|SizeClassMap
typedef|;
typedef|typedef
name|MsanMapUnmapCallback
name|MapUnmapCallback
typedef|;
specifier|static
specifier|const
name|uptr
name|kFlags
init|=
literal|0
decl_stmt|;
block|}
struct|;
typedef|typedef
name|SizeClassAllocator64
operator|<
name|AP64
operator|>
name|PrimaryAllocator
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__powerpc64__
argument_list|)
specifier|static
specifier|const
name|uptr
name|kMaxAllowedMallocSize
init|=
literal|2UL
operator|<<
literal|30
decl_stmt|;
comment|// 2G
struct|struct
name|AP64
block|{
comment|// Allocator64 parameters. Deliberately using a short name.
specifier|static
specifier|const
name|uptr
name|kSpaceBeg
init|=
literal|0x300000000000
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kSpaceSize
init|=
literal|0x020000000000
decl_stmt|;
comment|// 2T.
specifier|static
specifier|const
name|uptr
name|kMetadataSize
init|=
sizeof|sizeof
argument_list|(
name|Metadata
argument_list|)
decl_stmt|;
typedef|typedef
name|DefaultSizeClassMap
name|SizeClassMap
typedef|;
typedef|typedef
name|MsanMapUnmapCallback
name|MapUnmapCallback
typedef|;
specifier|static
specifier|const
name|uptr
name|kFlags
init|=
literal|0
decl_stmt|;
block|}
struct|;
typedef|typedef
name|SizeClassAllocator64
operator|<
name|AP64
operator|>
name|PrimaryAllocator
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__aarch64__
argument_list|)
specifier|static
specifier|const
name|uptr
name|kMaxAllowedMallocSize
init|=
literal|2UL
operator|<<
literal|30
decl_stmt|;
comment|// 2G
specifier|static
specifier|const
name|uptr
name|kRegionSizeLog
init|=
literal|20
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kNumRegions
init|=
name|SANITIZER_MMAP_RANGE_SIZE
operator|>>
name|kRegionSizeLog
decl_stmt|;
typedef|typedef
name|TwoLevelByteMap
operator|<
operator|(
name|kNumRegions
operator|>>
literal|12
operator|)
operator|,
literal|1
operator|<<
literal|12
operator|>
name|ByteMap
expr_stmt|;
struct|struct
name|AP32
block|{
specifier|static
specifier|const
name|uptr
name|kSpaceBeg
init|=
literal|0
decl_stmt|;
specifier|static
specifier|const
name|u64
name|kSpaceSize
init|=
name|SANITIZER_MMAP_RANGE_SIZE
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kMetadataSize
init|=
sizeof|sizeof
argument_list|(
name|Metadata
argument_list|)
decl_stmt|;
typedef|typedef
name|__sanitizer
operator|::
name|CompactSizeClassMap
name|SizeClassMap
expr_stmt|;
specifier|static
specifier|const
name|uptr
name|kRegionSizeLog
init|=
name|__msan
operator|::
name|kRegionSizeLog
decl_stmt|;
typedef|typedef
name|__msan
operator|::
name|ByteMap
name|ByteMap
expr_stmt|;
typedef|typedef
name|MsanMapUnmapCallback
name|MapUnmapCallback
typedef|;
specifier|static
specifier|const
name|uptr
name|kFlags
init|=
literal|0
decl_stmt|;
block|}
struct|;
typedef|typedef
name|SizeClassAllocator32
operator|<
name|AP32
operator|>
name|PrimaryAllocator
expr_stmt|;
endif|#
directive|endif
typedef|typedef
name|SizeClassAllocatorLocalCache
operator|<
name|PrimaryAllocator
operator|>
name|AllocatorCache
expr_stmt|;
typedef|typedef
name|LargeMmapAllocator
operator|<
name|MsanMapUnmapCallback
operator|>
name|SecondaryAllocator
expr_stmt|;
typedef|typedef
name|CombinedAllocator
operator|<
name|PrimaryAllocator
operator|,
name|AllocatorCache
operator|,
name|SecondaryAllocator
operator|>
name|Allocator
expr_stmt|;
name|Allocator
modifier|&
name|get_allocator
parameter_list|()
function_decl|;
struct|struct
name|MsanThreadLocalMallocStorage
block|{
name|uptr
name|quarantine_cache
index|[
literal|16
index|]
decl_stmt|;
comment|// Allocator cache contains atomic_uint64_t which must be 8-byte aligned.
name|ALIGNED
argument_list|(
literal|8
argument_list|)
name|uptr
name|allocator_cache
index|[
literal|96
operator|*
operator|(
literal|512
operator|*
literal|8
operator|+
literal|16
operator|)
index|]
decl_stmt|;
comment|// Opaque.
name|void
name|CommitBack
parameter_list|()
function_decl|;
name|private
label|:
comment|// These objects are allocated via mmap() and are zero-initialized.
name|MsanThreadLocalMallocStorage
argument_list|()
block|{}
block|}
struct|;
block|}
end_decl_stmt

begin_comment
comment|// namespace __msan
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// MSAN_ALLOCATOR_H
end_comment

end_unit

