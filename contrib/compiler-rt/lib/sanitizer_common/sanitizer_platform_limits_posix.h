begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- sanitizer_platform_limits_posix.h ---------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is a part of Sanitizer common code.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Sizes and layouts of platform-specific POSIX data structures.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SANITIZER_PLATFORM_LIMITS_POSIX_H
end_ifndef

begin_define
define|#
directive|define
name|SANITIZER_PLATFORM_LIMITS_POSIX_H
end_define

begin_include
include|#
directive|include
file|"sanitizer_internal_defs.h"
end_include

begin_include
include|#
directive|include
file|"sanitizer_platform.h"
end_include

begin_if
if|#
directive|if
name|SANITIZER_FREEBSD
end_if

begin_comment
comment|// FreeBSD's dlopen() returns a pointer to an Obj_Entry structure that
end_comment

begin_comment
comment|// incorporates the map structure.
end_comment

begin_define
define|#
directive|define
name|GET_LINK_MAP_BY_DLOPEN_HANDLE
parameter_list|(
name|handle
parameter_list|)
define|\
value|((link_map*)((handle) == nullptr ? nullptr : ((char*)(handle) + 544)))
end_define

begin_comment
comment|// Get sys/_types.h, because that tells us whether 64-bit inodes are
end_comment

begin_comment
comment|// used in struct dirent below.
end_comment

begin_include
include|#
directive|include
file|<sys/_types.h>
end_include

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|GET_LINK_MAP_BY_DLOPEN_HANDLE
parameter_list|(
name|handle
parameter_list|)
value|((link_map*)(handle))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// !SANITIZER_FREEBSD
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__GLIBC_PREREQ
end_ifndef

begin_define
define|#
directive|define
name|__GLIBC_PREREQ
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
name|namespace
name|__sanitizer
block|{
specifier|extern
name|unsigned
name|struct_utsname_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_stat_sz
decl_stmt|;
if|#
directive|if
operator|!
name|SANITIZER_FREEBSD
operator|&&
operator|!
name|SANITIZER_IOS
specifier|extern
name|unsigned
name|struct_stat64_sz
decl_stmt|;
endif|#
directive|endif
specifier|extern
name|unsigned
name|struct_rusage_sz
decl_stmt|;
specifier|extern
name|unsigned
name|siginfo_t_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_itimerval_sz
decl_stmt|;
specifier|extern
name|unsigned
name|pthread_t_sz
decl_stmt|;
specifier|extern
name|unsigned
name|pthread_cond_t_sz
decl_stmt|;
specifier|extern
name|unsigned
name|pid_t_sz
decl_stmt|;
specifier|extern
name|unsigned
name|timeval_sz
decl_stmt|;
specifier|extern
name|unsigned
name|uid_t_sz
decl_stmt|;
specifier|extern
name|unsigned
name|gid_t_sz
decl_stmt|;
specifier|extern
name|unsigned
name|mbstate_t_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_timezone_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_tms_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_itimerspec_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_sigevent_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_sched_param_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_statfs64_sz
decl_stmt|;
if|#
directive|if
operator|!
name|SANITIZER_ANDROID
specifier|extern
name|unsigned
name|struct_statfs_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_sockaddr_sz
decl_stmt|;
specifier|extern
name|unsigned
name|ucontext_t_sz
decl_stmt|;
endif|#
directive|endif
comment|// !SANITIZER_ANDROID
if|#
directive|if
name|SANITIZER_LINUX
if|#
directive|if
name|defined
argument_list|(
name|__x86_64__
argument_list|)
specifier|const
name|unsigned
name|struct_kernel_stat_sz
init|=
literal|144
decl_stmt|;
specifier|const
name|unsigned
name|struct_kernel_stat64_sz
init|=
literal|0
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__i386__
argument_list|)
specifier|const
name|unsigned
name|struct_kernel_stat_sz
init|=
literal|64
decl_stmt|;
specifier|const
name|unsigned
name|struct_kernel_stat64_sz
init|=
literal|96
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__arm__
argument_list|)
specifier|const
name|unsigned
name|struct_kernel_stat_sz
init|=
literal|64
decl_stmt|;
specifier|const
name|unsigned
name|struct_kernel_stat64_sz
init|=
literal|104
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__aarch64__
argument_list|)
specifier|const
name|unsigned
name|struct_kernel_stat_sz
init|=
literal|128
decl_stmt|;
specifier|const
name|unsigned
name|struct_kernel_stat64_sz
init|=
literal|104
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__powerpc__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__powerpc64__
argument_list|)
specifier|const
name|unsigned
name|struct_kernel_stat_sz
init|=
literal|72
decl_stmt|;
specifier|const
name|unsigned
name|struct_kernel_stat64_sz
init|=
literal|104
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__powerpc64__
argument_list|)
specifier|const
name|unsigned
name|struct_kernel_stat_sz
init|=
literal|144
decl_stmt|;
specifier|const
name|unsigned
name|struct_kernel_stat64_sz
init|=
literal|104
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__riscv__
argument_list|)
comment|/* RISCVTODO: check that these values are correct */
specifier|const
name|unsigned
name|struct_kernel_stat_sz
init|=
literal|128
decl_stmt|;
specifier|const
name|unsigned
name|struct_kernel_stat64_sz
init|=
literal|128
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__mips__
argument_list|)
specifier|const
name|unsigned
name|struct_kernel_stat_sz
init|=
name|SANITIZER_ANDROID
condition|?
name|FIRST_32_SECOND_64
argument_list|(
literal|104
argument_list|,
literal|128
argument_list|)
else|:
name|FIRST_32_SECOND_64
argument_list|(
literal|160
argument_list|,
literal|216
argument_list|)
decl_stmt|;
specifier|const
name|unsigned
name|struct_kernel_stat64_sz
init|=
literal|104
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__s390__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__s390x__
argument_list|)
specifier|const
name|unsigned
name|struct_kernel_stat_sz
init|=
literal|64
decl_stmt|;
specifier|const
name|unsigned
name|struct_kernel_stat64_sz
init|=
literal|104
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__s390x__
argument_list|)
specifier|const
name|unsigned
name|struct_kernel_stat_sz
init|=
literal|144
decl_stmt|;
specifier|const
name|unsigned
name|struct_kernel_stat64_sz
init|=
literal|0
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__sparc__
argument_list|)
operator|&&
name|defined
argument_list|(
name|__arch64__
argument_list|)
specifier|const
name|unsigned
name|struct___old_kernel_stat_sz
init|=
literal|0
decl_stmt|;
specifier|const
name|unsigned
name|struct_kernel_stat_sz
init|=
literal|104
decl_stmt|;
specifier|const
name|unsigned
name|struct_kernel_stat64_sz
init|=
literal|144
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__sparc__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__arch64__
argument_list|)
specifier|const
name|unsigned
name|struct___old_kernel_stat_sz
init|=
literal|0
decl_stmt|;
specifier|const
name|unsigned
name|struct_kernel_stat_sz
init|=
literal|64
decl_stmt|;
specifier|const
name|unsigned
name|struct_kernel_stat64_sz
init|=
literal|104
decl_stmt|;
endif|#
directive|endif
struct|struct
name|__sanitizer_perf_event_attr
block|{
name|unsigned
name|type
decl_stmt|;
name|unsigned
name|size
decl_stmt|;
comment|// More fields that vary with the kernel version.
block|}
struct|;
specifier|extern
name|unsigned
name|struct_epoll_event_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_sysinfo_sz
decl_stmt|;
specifier|extern
name|unsigned
name|__user_cap_header_struct_sz
decl_stmt|;
specifier|extern
name|unsigned
name|__user_cap_data_struct_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_new_utsname_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_old_utsname_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_oldold_utsname_sz
decl_stmt|;
specifier|const
name|unsigned
name|struct_kexec_segment_sz
init|=
literal|4
operator|*
expr|sizeof
operator|(
name|unsigned
name|long
operator|)
decl_stmt|;
endif|#
directive|endif
comment|// SANITIZER_LINUX
if|#
directive|if
name|SANITIZER_LINUX
operator|||
name|SANITIZER_FREEBSD
if|#
directive|if
name|defined
argument_list|(
name|__powerpc64__
argument_list|)
operator|||
name|defined
argument_list|(
name|__riscv__
argument_list|)
operator|||
name|defined
argument_list|(
name|__s390__
argument_list|)
specifier|const
name|unsigned
name|struct___old_kernel_stat_sz
init|=
literal|0
decl_stmt|;
elif|#
directive|elif
operator|!
name|defined
argument_list|(
name|__sparc__
argument_list|)
specifier|const
name|unsigned
name|struct___old_kernel_stat_sz
init|=
literal|32
decl_stmt|;
endif|#
directive|endif
specifier|extern
name|unsigned
name|struct_rlimit_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_utimbuf_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_timespec_sz
decl_stmt|;
struct|struct
name|__sanitizer_iocb
block|{
name|u64
name|aio_data
decl_stmt|;
name|u32
name|aio_key_or_aio_reserved1
decl_stmt|;
comment|// Simply crazy.
name|u32
name|aio_reserved1_or_aio_key
decl_stmt|;
comment|// Luckily, we don't need these.
name|u16
name|aio_lio_opcode
decl_stmt|;
name|s16
name|aio_reqprio
decl_stmt|;
name|u32
name|aio_fildes
decl_stmt|;
name|u64
name|aio_buf
decl_stmt|;
name|u64
name|aio_nbytes
decl_stmt|;
name|s64
name|aio_offset
decl_stmt|;
name|u64
name|aio_reserved2
decl_stmt|;
name|u64
name|aio_reserved3
decl_stmt|;
block|}
struct|;
struct|struct
name|__sanitizer_io_event
block|{
name|u64
name|data
decl_stmt|;
name|u64
name|obj
decl_stmt|;
name|u64
name|res
decl_stmt|;
name|u64
name|res2
decl_stmt|;
block|}
struct|;
specifier|const
name|unsigned
name|iocb_cmd_pread
init|=
literal|0
decl_stmt|;
specifier|const
name|unsigned
name|iocb_cmd_pwrite
init|=
literal|1
decl_stmt|;
specifier|const
name|unsigned
name|iocb_cmd_preadv
init|=
literal|7
decl_stmt|;
specifier|const
name|unsigned
name|iocb_cmd_pwritev
init|=
literal|8
decl_stmt|;
struct|struct
name|__sanitizer___sysctl_args
block|{
name|int
modifier|*
name|name
decl_stmt|;
name|int
name|nlen
decl_stmt|;
name|void
modifier|*
name|oldval
decl_stmt|;
name|uptr
modifier|*
name|oldlenp
decl_stmt|;
name|void
modifier|*
name|newval
decl_stmt|;
name|uptr
name|newlen
decl_stmt|;
name|unsigned
name|long
name|___unused
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
specifier|const
name|unsigned
name|old_sigset_t_sz
init|=
expr|sizeof
operator|(
name|unsigned
name|long
operator|)
decl_stmt|;
struct|struct
name|__sanitizer_sem_t
block|{
if|#
directive|if
name|SANITIZER_ANDROID
operator|&&
name|defined
argument_list|(
name|_LP64
argument_list|)
name|int
name|data
index|[
literal|4
index|]
decl_stmt|;
elif|#
directive|elif
name|SANITIZER_ANDROID
operator|&&
operator|!
name|defined
argument_list|(
name|_LP64
argument_list|)
name|int
name|data
decl_stmt|;
elif|#
directive|elif
name|SANITIZER_LINUX
name|uptr
name|data
index|[
literal|4
index|]
decl_stmt|;
elif|#
directive|elif
name|SANITIZER_FREEBSD
name|u32
name|data
index|[
literal|4
index|]
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
endif|#
directive|endif
comment|// SANITIZER_LINUX || SANITIZER_FREEBSD
if|#
directive|if
name|SANITIZER_ANDROID
struct|struct
name|__sanitizer_mallinfo
block|{
name|uptr
name|v
index|[
literal|10
index|]
decl_stmt|;
block|}
struct|;
endif|#
directive|endif
if|#
directive|if
name|SANITIZER_LINUX
operator|&&
operator|!
name|SANITIZER_ANDROID
struct|struct
name|__sanitizer_mallinfo
block|{
name|int
name|v
index|[
literal|10
index|]
decl_stmt|;
block|}
struct|;
specifier|extern
name|unsigned
name|struct_ustat_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_rlimit64_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_statvfs64_sz
decl_stmt|;
struct|struct
name|__sanitizer_ipc_perm
block|{
name|int
name|__key
decl_stmt|;
name|int
name|uid
decl_stmt|;
name|int
name|gid
decl_stmt|;
name|int
name|cuid
decl_stmt|;
name|int
name|cgid
decl_stmt|;
ifdef|#
directive|ifdef
name|__powerpc__
name|unsigned
name|mode
decl_stmt|;
name|unsigned
name|__seq
decl_stmt|;
name|u64
name|__unused1
decl_stmt|;
name|u64
name|__unused2
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__sparc__
argument_list|)
if|#
directive|if
name|defined
argument_list|(
name|__arch64__
argument_list|)
name|unsigned
name|mode
decl_stmt|;
name|unsigned
name|short
name|__pad1
decl_stmt|;
else|#
directive|else
name|unsigned
name|short
name|__pad1
decl_stmt|;
name|unsigned
name|short
name|mode
decl_stmt|;
name|unsigned
name|short
name|__pad2
decl_stmt|;
endif|#
directive|endif
name|unsigned
name|short
name|__seq
decl_stmt|;
name|unsigned
name|long
name|long
name|__unused1
decl_stmt|;
name|unsigned
name|long
name|long
name|__unused2
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__mips__
argument_list|)
operator|||
name|defined
argument_list|(
name|__aarch64__
argument_list|)
operator|||
name|defined
argument_list|(
name|__s390x__
argument_list|)
name|unsigned
name|int
name|mode
decl_stmt|;
name|unsigned
name|short
name|__seq
decl_stmt|;
name|unsigned
name|short
name|__pad1
decl_stmt|;
name|unsigned
name|long
name|__unused1
decl_stmt|;
name|unsigned
name|long
name|__unused2
decl_stmt|;
else|#
directive|else
name|unsigned
name|short
name|mode
decl_stmt|;
name|unsigned
name|short
name|__pad1
decl_stmt|;
name|unsigned
name|short
name|__seq
decl_stmt|;
name|unsigned
name|short
name|__pad2
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__x86_64__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|_LP64
argument_list|)
name|u64
name|__unused1
decl_stmt|;
name|u64
name|__unused2
decl_stmt|;
else|#
directive|else
name|unsigned
name|long
name|__unused1
decl_stmt|;
name|unsigned
name|long
name|__unused2
decl_stmt|;
endif|#
directive|endif
endif|#
directive|endif
block|}
struct|;
struct|struct
name|__sanitizer_shmid_ds
block|{
name|__sanitizer_ipc_perm
name|shm_perm
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__sparc__
argument_list|)
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__arch64__
argument_list|)
name|u32
name|__pad1
decl_stmt|;
endif|#
directive|endif
name|long
name|shm_atime
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__arch64__
argument_list|)
name|u32
name|__pad2
decl_stmt|;
endif|#
directive|endif
name|long
name|shm_dtime
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__arch64__
argument_list|)
name|u32
name|__pad3
decl_stmt|;
endif|#
directive|endif
name|long
name|shm_ctime
decl_stmt|;
name|uptr
name|shm_segsz
decl_stmt|;
name|int
name|shm_cpid
decl_stmt|;
name|int
name|shm_lpid
decl_stmt|;
name|unsigned
name|long
name|shm_nattch
decl_stmt|;
name|unsigned
name|long
name|__glibc_reserved1
decl_stmt|;
name|unsigned
name|long
name|__glibc_reserved2
decl_stmt|;
else|#
directive|else
ifndef|#
directive|ifndef
name|__powerpc__
name|uptr
name|shm_segsz
decl_stmt|;
elif|#
directive|elif
operator|!
name|defined
argument_list|(
name|__powerpc64__
argument_list|)
name|uptr
name|__unused0
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__x86_64__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|_LP64
argument_list|)
name|u64
name|shm_atime
decl_stmt|;
name|u64
name|shm_dtime
decl_stmt|;
name|u64
name|shm_ctime
decl_stmt|;
else|#
directive|else
name|uptr
name|shm_atime
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_LP64
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__mips__
argument_list|)
name|uptr
name|__unused1
decl_stmt|;
endif|#
directive|endif
name|uptr
name|shm_dtime
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_LP64
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__mips__
argument_list|)
name|uptr
name|__unused2
decl_stmt|;
endif|#
directive|endif
name|uptr
name|shm_ctime
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_LP64
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__mips__
argument_list|)
name|uptr
name|__unused3
decl_stmt|;
endif|#
directive|endif
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__powerpc__
name|uptr
name|shm_segsz
decl_stmt|;
endif|#
directive|endif
name|int
name|shm_cpid
decl_stmt|;
name|int
name|shm_lpid
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__x86_64__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|_LP64
argument_list|)
name|u64
name|shm_nattch
decl_stmt|;
name|u64
name|__unused4
decl_stmt|;
name|u64
name|__unused5
decl_stmt|;
else|#
directive|else
name|uptr
name|shm_nattch
decl_stmt|;
name|uptr
name|__unused4
decl_stmt|;
name|uptr
name|__unused5
decl_stmt|;
endif|#
directive|endif
endif|#
directive|endif
block|}
struct|;
elif|#
directive|elif
name|SANITIZER_FREEBSD
struct|struct
name|__sanitizer_ipc_perm
block|{
name|unsigned
name|int
name|cuid
decl_stmt|;
name|unsigned
name|int
name|cgid
decl_stmt|;
name|unsigned
name|int
name|uid
decl_stmt|;
name|unsigned
name|int
name|gid
decl_stmt|;
name|unsigned
name|short
name|mode
decl_stmt|;
name|unsigned
name|short
name|seq
decl_stmt|;
name|long
name|key
decl_stmt|;
block|}
struct|;
struct|struct
name|__sanitizer_shmid_ds
block|{
name|__sanitizer_ipc_perm
name|shm_perm
decl_stmt|;
name|unsigned
name|long
name|shm_segsz
decl_stmt|;
name|unsigned
name|int
name|shm_lpid
decl_stmt|;
name|unsigned
name|int
name|shm_cpid
decl_stmt|;
name|int
name|shm_nattch
decl_stmt|;
name|unsigned
name|long
name|shm_atime
decl_stmt|;
name|unsigned
name|long
name|shm_dtime
decl_stmt|;
name|unsigned
name|long
name|shm_ctime
decl_stmt|;
block|}
struct|;
endif|#
directive|endif
if|#
directive|if
operator|(
name|SANITIZER_LINUX
operator|||
name|SANITIZER_FREEBSD
operator|)
operator|&&
operator|!
name|SANITIZER_ANDROID
specifier|extern
name|unsigned
name|struct_msqid_ds_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_mq_attr_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_timex_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_statvfs_sz
decl_stmt|;
endif|#
directive|endif
comment|// (SANITIZER_LINUX || SANITIZER_FREEBSD)&& !SANITIZER_ANDROID
struct|struct
name|__sanitizer_iovec
block|{
name|void
modifier|*
name|iov_base
decl_stmt|;
name|uptr
name|iov_len
decl_stmt|;
block|}
struct|;
if|#
directive|if
operator|!
name|SANITIZER_ANDROID
struct|struct
name|__sanitizer_ifaddrs
block|{
name|struct
name|__sanitizer_ifaddrs
modifier|*
name|ifa_next
decl_stmt|;
name|char
modifier|*
name|ifa_name
decl_stmt|;
name|unsigned
name|int
name|ifa_flags
decl_stmt|;
name|void
modifier|*
name|ifa_addr
decl_stmt|;
comment|// (struct sockaddr *)
name|void
modifier|*
name|ifa_netmask
decl_stmt|;
comment|// (struct sockaddr *)
comment|// This is a union on Linux.
ifdef|#
directive|ifdef
name|ifa_dstaddr
undef|#
directive|undef
name|ifa_dstaddr
endif|#
directive|endif
name|void
modifier|*
name|ifa_dstaddr
decl_stmt|;
comment|// (struct sockaddr *)
name|void
modifier|*
name|ifa_data
decl_stmt|;
block|}
struct|;
endif|#
directive|endif
comment|// !SANITIZER_ANDROID
if|#
directive|if
name|SANITIZER_MAC
typedef|typedef
name|unsigned
name|long
name|__sanitizer_pthread_key_t
typedef|;
else|#
directive|else
typedef|typedef
name|unsigned
name|__sanitizer_pthread_key_t
typedef|;
endif|#
directive|endif
if|#
directive|if
name|SANITIZER_LINUX
operator|&&
operator|!
name|SANITIZER_ANDROID
struct|struct
name|__sanitizer_XDR
block|{
name|int
name|x_op
decl_stmt|;
name|void
modifier|*
name|x_ops
decl_stmt|;
name|uptr
name|x_public
decl_stmt|;
name|uptr
name|x_private
decl_stmt|;
name|uptr
name|x_base
decl_stmt|;
name|unsigned
name|x_handy
decl_stmt|;
block|}
struct|;
specifier|const
name|int
name|__sanitizer_XDR_ENCODE
init|=
literal|0
decl_stmt|;
specifier|const
name|int
name|__sanitizer_XDR_DECODE
init|=
literal|1
decl_stmt|;
specifier|const
name|int
name|__sanitizer_XDR_FREE
init|=
literal|2
decl_stmt|;
endif|#
directive|endif
struct|struct
name|__sanitizer_passwd
block|{
name|char
modifier|*
name|pw_name
decl_stmt|;
name|char
modifier|*
name|pw_passwd
decl_stmt|;
name|int
name|pw_uid
decl_stmt|;
name|int
name|pw_gid
decl_stmt|;
if|#
directive|if
name|SANITIZER_MAC
operator|||
name|SANITIZER_FREEBSD
name|long
name|pw_change
decl_stmt|;
name|char
modifier|*
name|pw_class
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
operator|!
operator|(
name|SANITIZER_ANDROID
operator|&&
operator|(
name|SANITIZER_WORDSIZE
operator|==
literal|32
operator|)
operator|)
name|char
modifier|*
name|pw_gecos
decl_stmt|;
endif|#
directive|endif
name|char
modifier|*
name|pw_dir
decl_stmt|;
name|char
modifier|*
name|pw_shell
decl_stmt|;
if|#
directive|if
name|SANITIZER_MAC
operator|||
name|SANITIZER_FREEBSD
name|long
name|pw_expire
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|SANITIZER_FREEBSD
name|int
name|pw_fields
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
struct|struct
name|__sanitizer_group
block|{
name|char
modifier|*
name|gr_name
decl_stmt|;
name|char
modifier|*
name|gr_passwd
decl_stmt|;
name|int
name|gr_gid
decl_stmt|;
name|char
modifier|*
modifier|*
name|gr_mem
decl_stmt|;
block|}
struct|;
if|#
directive|if
name|defined
argument_list|(
name|__x86_64__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|_LP64
argument_list|)
typedef|typedef
name|long
name|long
name|__sanitizer_time_t
typedef|;
else|#
directive|else
typedef|typedef
name|long
name|__sanitizer_time_t
typedef|;
endif|#
directive|endif
struct|struct
name|__sanitizer_timeb
block|{
name|__sanitizer_time_t
name|time
decl_stmt|;
name|unsigned
name|short
name|millitm
decl_stmt|;
name|short
name|timezone
decl_stmt|;
name|short
name|dstflag
decl_stmt|;
block|}
struct|;
struct|struct
name|__sanitizer_ether_addr
block|{
name|u8
name|octet
index|[
literal|6
index|]
decl_stmt|;
block|}
struct|;
struct|struct
name|__sanitizer_tm
block|{
name|int
name|tm_sec
decl_stmt|;
name|int
name|tm_min
decl_stmt|;
name|int
name|tm_hour
decl_stmt|;
name|int
name|tm_mday
decl_stmt|;
name|int
name|tm_mon
decl_stmt|;
name|int
name|tm_year
decl_stmt|;
name|int
name|tm_wday
decl_stmt|;
name|int
name|tm_yday
decl_stmt|;
name|int
name|tm_isdst
decl_stmt|;
name|long
name|int
name|tm_gmtoff
decl_stmt|;
specifier|const
name|char
modifier|*
name|tm_zone
decl_stmt|;
block|}
struct|;
if|#
directive|if
name|SANITIZER_LINUX
struct|struct
name|__sanitizer_mntent
block|{
name|char
modifier|*
name|mnt_fsname
decl_stmt|;
name|char
modifier|*
name|mnt_dir
decl_stmt|;
name|char
modifier|*
name|mnt_type
decl_stmt|;
name|char
modifier|*
name|mnt_opts
decl_stmt|;
name|int
name|mnt_freq
decl_stmt|;
name|int
name|mnt_passno
decl_stmt|;
block|}
struct|;
endif|#
directive|endif
if|#
directive|if
name|SANITIZER_MAC
operator|||
name|SANITIZER_FREEBSD
struct|struct
name|__sanitizer_msghdr
block|{
name|void
modifier|*
name|msg_name
decl_stmt|;
name|unsigned
name|msg_namelen
decl_stmt|;
name|struct
name|__sanitizer_iovec
modifier|*
name|msg_iov
decl_stmt|;
name|unsigned
name|msg_iovlen
decl_stmt|;
name|void
modifier|*
name|msg_control
decl_stmt|;
name|unsigned
name|msg_controllen
decl_stmt|;
name|int
name|msg_flags
decl_stmt|;
block|}
struct|;
struct|struct
name|__sanitizer_cmsghdr
block|{
name|unsigned
name|cmsg_len
decl_stmt|;
name|int
name|cmsg_level
decl_stmt|;
name|int
name|cmsg_type
decl_stmt|;
block|}
struct|;
else|#
directive|else
struct|struct
name|__sanitizer_msghdr
block|{
name|void
modifier|*
name|msg_name
decl_stmt|;
name|unsigned
name|msg_namelen
decl_stmt|;
name|struct
name|__sanitizer_iovec
modifier|*
name|msg_iov
decl_stmt|;
name|uptr
name|msg_iovlen
decl_stmt|;
name|void
modifier|*
name|msg_control
decl_stmt|;
name|uptr
name|msg_controllen
decl_stmt|;
name|int
name|msg_flags
decl_stmt|;
block|}
struct|;
struct|struct
name|__sanitizer_cmsghdr
block|{
name|uptr
name|cmsg_len
decl_stmt|;
name|int
name|cmsg_level
decl_stmt|;
name|int
name|cmsg_type
decl_stmt|;
block|}
struct|;
endif|#
directive|endif
if|#
directive|if
name|SANITIZER_MAC
struct|struct
name|__sanitizer_dirent
block|{
name|unsigned
name|long
name|long
name|d_ino
decl_stmt|;
name|unsigned
name|long
name|long
name|d_seekoff
decl_stmt|;
name|unsigned
name|short
name|d_reclen
decl_stmt|;
comment|// more fields that we don't care about
block|}
struct|;
elif|#
directive|elif
name|SANITIZER_FREEBSD
struct|struct
name|__sanitizer_dirent
block|{
if|#
directive|if
name|defined
argument_list|(
name|__INO64
argument_list|)
name|unsigned
name|long
name|long
name|d_fileno
decl_stmt|;
name|unsigned
name|long
name|long
name|d_off
decl_stmt|;
else|#
directive|else
name|unsigned
name|int
name|d_fileno
decl_stmt|;
endif|#
directive|endif
name|unsigned
name|short
name|d_reclen
decl_stmt|;
comment|// more fields that we don't care about
block|}
struct|;
elif|#
directive|elif
name|SANITIZER_ANDROID
operator|||
name|defined
argument_list|(
name|__x86_64__
argument_list|)
struct|struct
name|__sanitizer_dirent
block|{
name|unsigned
name|long
name|long
name|d_ino
decl_stmt|;
name|unsigned
name|long
name|long
name|d_off
decl_stmt|;
name|unsigned
name|short
name|d_reclen
decl_stmt|;
comment|// more fields that we don't care about
block|}
struct|;
else|#
directive|else
struct|struct
name|__sanitizer_dirent
block|{
name|uptr
name|d_ino
decl_stmt|;
name|uptr
name|d_off
decl_stmt|;
name|unsigned
name|short
name|d_reclen
decl_stmt|;
comment|// more fields that we don't care about
block|}
struct|;
endif|#
directive|endif
if|#
directive|if
name|SANITIZER_LINUX
operator|&&
operator|!
name|SANITIZER_ANDROID
struct|struct
name|__sanitizer_dirent64
block|{
name|unsigned
name|long
name|long
name|d_ino
decl_stmt|;
name|unsigned
name|long
name|long
name|d_off
decl_stmt|;
name|unsigned
name|short
name|d_reclen
decl_stmt|;
comment|// more fields that we don't care about
block|}
struct|;
endif|#
directive|endif
comment|// 'clock_t' is 32 bits wide on x64 FreeBSD
if|#
directive|if
name|SANITIZER_FREEBSD
typedef|typedef
name|int
name|__sanitizer_clock_t
typedef|;
elif|#
directive|elif
name|defined
argument_list|(
name|__x86_64__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|_LP64
argument_list|)
typedef|typedef
name|long
name|long
name|__sanitizer_clock_t
typedef|;
else|#
directive|else
typedef|typedef
name|long
name|__sanitizer_clock_t
typedef|;
endif|#
directive|endif
if|#
directive|if
name|SANITIZER_LINUX
typedef|typedef
name|int
name|__sanitizer_clockid_t
typedef|;
endif|#
directive|endif
if|#
directive|if
name|SANITIZER_LINUX
operator|||
name|SANITIZER_FREEBSD
if|#
directive|if
name|defined
argument_list|(
name|_LP64
argument_list|)
operator|||
name|defined
argument_list|(
name|__x86_64__
argument_list|)
operator|||
name|defined
argument_list|(
name|__powerpc__
argument_list|)
expr|\
operator|||
name|defined
argument_list|(
name|__mips__
argument_list|)
typedef|typedef
name|unsigned
name|__sanitizer___kernel_uid_t
typedef|;
typedef|typedef
name|unsigned
name|__sanitizer___kernel_gid_t
typedef|;
else|#
directive|else
typedef|typedef
name|unsigned
name|short
name|__sanitizer___kernel_uid_t
typedef|;
typedef|typedef
name|unsigned
name|short
name|__sanitizer___kernel_gid_t
typedef|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__x86_64__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|_LP64
argument_list|)
typedef|typedef
name|long
name|long
name|__sanitizer___kernel_off_t
typedef|;
else|#
directive|else
typedef|typedef
name|long
name|__sanitizer___kernel_off_t
typedef|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__powerpc__
argument_list|)
operator|||
name|defined
argument_list|(
name|__mips__
argument_list|)
operator|||
name|defined
argument_list|(
name|__riscv__
argument_list|)
typedef|typedef
name|unsigned
name|int
name|__sanitizer___kernel_old_uid_t
typedef|;
typedef|typedef
name|unsigned
name|int
name|__sanitizer___kernel_old_gid_t
typedef|;
else|#
directive|else
typedef|typedef
name|unsigned
name|short
name|__sanitizer___kernel_old_uid_t
typedef|;
typedef|typedef
name|unsigned
name|short
name|__sanitizer___kernel_old_gid_t
typedef|;
endif|#
directive|endif
typedef|typedef
name|long
name|long
name|__sanitizer___kernel_loff_t
typedef|;
typedef|typedef
struct|struct
block|{
name|unsigned
name|long
name|fds_bits
index|[
literal|1024
operator|/
operator|(
literal|8
operator|*
sizeof|sizeof
argument_list|(
name|long
argument_list|)
operator|)
index|]
decl_stmt|;
block|}
name|__sanitizer___kernel_fd_set
typedef|;
endif|#
directive|endif
comment|// This thing depends on the platform. We are only interested in the upper
comment|// limit. Verified with a compiler assert in .cc.
specifier|const
name|int
name|pthread_attr_t_max_sz
init|=
literal|128
decl_stmt|;
union|union
name|__sanitizer_pthread_attr_t
block|{
name|char
name|size
index|[
name|pthread_attr_t_max_sz
index|]
decl_stmt|;
comment|// NOLINT
name|void
modifier|*
name|align
decl_stmt|;
block|}
union|;
if|#
directive|if
name|SANITIZER_ANDROID
if|#
directive|if
name|SANITIZER_MIPS
typedef|typedef
name|unsigned
name|long
name|__sanitizer_sigset_t
index|[
literal|16
operator|/
expr|sizeof
operator|(
name|unsigned
name|long
operator|)
expr|]
expr_stmt|;
else|#
directive|else
typedef|typedef
name|unsigned
name|long
name|__sanitizer_sigset_t
typedef|;
endif|#
directive|endif
elif|#
directive|elif
name|SANITIZER_MAC
typedef|typedef
name|unsigned
name|__sanitizer_sigset_t
typedef|;
elif|#
directive|elif
name|SANITIZER_LINUX
struct|struct
name|__sanitizer_sigset_t
block|{
comment|// The size is determined by looking at sizeof of real sigset_t on linux.
name|uptr
name|val
index|[
literal|128
operator|/
sizeof|sizeof
argument_list|(
name|uptr
argument_list|)
index|]
decl_stmt|;
block|}
struct|;
elif|#
directive|elif
name|SANITIZER_FREEBSD
struct|struct
name|__sanitizer_sigset_t
block|{
comment|// uint32_t * 4
name|unsigned
name|int
name|__bits
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
endif|#
directive|endif
comment|// Linux system headers define the 'sa_handler' and 'sa_sigaction' macros.
if|#
directive|if
name|SANITIZER_ANDROID
operator|&&
operator|(
name|SANITIZER_WORDSIZE
operator|==
literal|64
operator|)
struct|struct
name|__sanitizer_sigaction
block|{
name|unsigned
name|sa_flags
decl_stmt|;
union|union
block|{
name|void
function_decl|(
modifier|*
name|sigaction
function_decl|)
parameter_list|(
name|int
name|sig
parameter_list|,
name|void
modifier|*
name|siginfo
parameter_list|,
name|void
modifier|*
name|uctx
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|handler
function_decl|)
parameter_list|(
name|int
name|sig
parameter_list|)
function_decl|;
block|}
union|;
name|__sanitizer_sigset_t
name|sa_mask
decl_stmt|;
name|void
function_decl|(
modifier|*
name|sa_restorer
function_decl|)
parameter_list|()
function_decl|;
block|}
struct|;
elif|#
directive|elif
name|SANITIZER_ANDROID
operator|&&
name|SANITIZER_MIPS32
comment|// check this before WORDSIZE == 32
struct|struct
name|__sanitizer_sigaction
block|{
name|unsigned
name|sa_flags
decl_stmt|;
union|union
block|{
name|void
function_decl|(
modifier|*
name|sigaction
function_decl|)
parameter_list|(
name|int
name|sig
parameter_list|,
name|void
modifier|*
name|siginfo
parameter_list|,
name|void
modifier|*
name|uctx
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|handler
function_decl|)
parameter_list|(
name|int
name|sig
parameter_list|)
function_decl|;
block|}
union|;
name|__sanitizer_sigset_t
name|sa_mask
decl_stmt|;
block|}
struct|;
elif|#
directive|elif
name|SANITIZER_ANDROID
operator|&&
operator|(
name|SANITIZER_WORDSIZE
operator|==
literal|32
operator|)
struct|struct
name|__sanitizer_sigaction
block|{
union|union
block|{
name|void
function_decl|(
modifier|*
name|sigaction
function_decl|)
parameter_list|(
name|int
name|sig
parameter_list|,
name|void
modifier|*
name|siginfo
parameter_list|,
name|void
modifier|*
name|uctx
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|handler
function_decl|)
parameter_list|(
name|int
name|sig
parameter_list|)
function_decl|;
block|}
union|;
name|__sanitizer_sigset_t
name|sa_mask
decl_stmt|;
name|uptr
name|sa_flags
decl_stmt|;
name|void
function_decl|(
modifier|*
name|sa_restorer
function_decl|)
parameter_list|()
function_decl|;
block|}
struct|;
else|#
directive|else
comment|// !SANITIZER_ANDROID
struct|struct
name|__sanitizer_sigaction
block|{
if|#
directive|if
name|defined
argument_list|(
name|__mips__
argument_list|)
operator|&&
operator|!
name|SANITIZER_FREEBSD
name|unsigned
name|int
name|sa_flags
decl_stmt|;
endif|#
directive|endif
union|union
block|{
name|void
function_decl|(
modifier|*
name|sigaction
function_decl|)
parameter_list|(
name|int
name|sig
parameter_list|,
name|void
modifier|*
name|siginfo
parameter_list|,
name|void
modifier|*
name|uctx
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|handler
function_decl|)
parameter_list|(
name|int
name|sig
parameter_list|)
function_decl|;
block|}
union|;
if|#
directive|if
name|SANITIZER_FREEBSD
name|int
name|sa_flags
decl_stmt|;
name|__sanitizer_sigset_t
name|sa_mask
decl_stmt|;
else|#
directive|else
if|#
directive|if
name|defined
argument_list|(
name|__s390x__
argument_list|)
name|int
name|sa_resv
decl_stmt|;
else|#
directive|else
name|__sanitizer_sigset_t
name|sa_mask
decl_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|__mips__
if|#
directive|if
name|defined
argument_list|(
name|__sparc__
argument_list|)
if|#
directive|if
name|__GLIBC_PREREQ
argument_list|(
literal|2
operator|,
literal|20
argument_list|)
comment|// On sparc glibc 2.19 and earlier sa_flags was unsigned long.
if|#
directive|if
name|defined
argument_list|(
name|__arch64__
argument_list|)
comment|// To maintain ABI compatibility on sparc64 when switching to an int,
comment|// __glibc_reserved0 was added.
name|int
name|__glibc_reserved0
decl_stmt|;
endif|#
directive|endif
name|int
name|sa_flags
decl_stmt|;
else|#
directive|else
name|unsigned
name|long
name|sa_flags
decl_stmt|;
endif|#
directive|endif
else|#
directive|else
name|int
name|sa_flags
decl_stmt|;
endif|#
directive|endif
endif|#
directive|endif
endif|#
directive|endif
if|#
directive|if
name|SANITIZER_LINUX
name|void
function_decl|(
modifier|*
name|sa_restorer
function_decl|)
parameter_list|()
function_decl|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__mips__
argument_list|)
operator|&&
operator|(
name|SANITIZER_WORDSIZE
operator|==
literal|32
operator|)
name|int
name|sa_resv
index|[
literal|1
index|]
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__s390x__
argument_list|)
name|__sanitizer_sigset_t
name|sa_mask
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
endif|#
directive|endif
comment|// !SANITIZER_ANDROID
if|#
directive|if
name|SANITIZER_FREEBSD
typedef|typedef
name|__sanitizer_sigset_t
name|__sanitizer_kernel_sigset_t
typedef|;
elif|#
directive|elif
name|defined
argument_list|(
name|__mips__
argument_list|)
struct|struct
name|__sanitizer_kernel_sigset_t
block|{
name|uptr
name|sig
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
else|#
directive|else
struct|struct
name|__sanitizer_kernel_sigset_t
block|{
name|u8
name|sig
index|[
literal|8
index|]
decl_stmt|;
block|}
struct|;
endif|#
directive|endif
comment|// Linux system headers define the 'sa_handler' and 'sa_sigaction' macros.
if|#
directive|if
name|SANITIZER_MIPS
struct|struct
name|__sanitizer_kernel_sigaction_t
block|{
name|unsigned
name|int
name|sa_flags
decl_stmt|;
union|union
block|{
name|void
function_decl|(
modifier|*
name|handler
function_decl|)
parameter_list|(
name|int
name|signo
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|sigaction
function_decl|)
parameter_list|(
name|int
name|signo
parameter_list|,
name|void
modifier|*
name|info
parameter_list|,
name|void
modifier|*
name|ctx
parameter_list|)
function_decl|;
block|}
union|;
name|__sanitizer_kernel_sigset_t
name|sa_mask
decl_stmt|;
name|void
function_decl|(
modifier|*
name|sa_restorer
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
block|}
struct|;
else|#
directive|else
struct|struct
name|__sanitizer_kernel_sigaction_t
block|{
union|union
block|{
name|void
function_decl|(
modifier|*
name|handler
function_decl|)
parameter_list|(
name|int
name|signo
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|sigaction
function_decl|)
parameter_list|(
name|int
name|signo
parameter_list|,
name|void
modifier|*
name|info
parameter_list|,
name|void
modifier|*
name|ctx
parameter_list|)
function_decl|;
block|}
union|;
name|unsigned
name|long
name|sa_flags
decl_stmt|;
name|void
function_decl|(
modifier|*
name|sa_restorer
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|__sanitizer_kernel_sigset_t
name|sa_mask
decl_stmt|;
block|}
struct|;
endif|#
directive|endif
specifier|extern
name|uptr
name|sig_ign
decl_stmt|;
specifier|extern
name|uptr
name|sig_dfl
decl_stmt|;
specifier|extern
name|uptr
name|sa_siginfo
decl_stmt|;
if|#
directive|if
name|SANITIZER_LINUX
specifier|extern
name|int
name|e_tabsz
decl_stmt|;
endif|#
directive|endif
specifier|extern
name|int
name|af_inet
decl_stmt|;
specifier|extern
name|int
name|af_inet6
decl_stmt|;
name|uptr
name|__sanitizer_in_addr_sz
parameter_list|(
name|int
name|af
parameter_list|)
function_decl|;
if|#
directive|if
name|SANITIZER_LINUX
operator|||
name|SANITIZER_FREEBSD
struct|struct
name|__sanitizer_dl_phdr_info
block|{
name|uptr
name|dlpi_addr
decl_stmt|;
specifier|const
name|char
modifier|*
name|dlpi_name
decl_stmt|;
specifier|const
name|void
modifier|*
name|dlpi_phdr
decl_stmt|;
name|short
name|dlpi_phnum
decl_stmt|;
block|}
struct|;
specifier|extern
name|unsigned
name|struct_ElfW_Phdr_sz
decl_stmt|;
endif|#
directive|endif
struct|struct
name|__sanitizer_addrinfo
block|{
name|int
name|ai_flags
decl_stmt|;
name|int
name|ai_family
decl_stmt|;
name|int
name|ai_socktype
decl_stmt|;
name|int
name|ai_protocol
decl_stmt|;
if|#
directive|if
name|SANITIZER_ANDROID
operator|||
name|SANITIZER_MAC
operator|||
name|SANITIZER_FREEBSD
name|unsigned
name|ai_addrlen
decl_stmt|;
name|char
modifier|*
name|ai_canonname
decl_stmt|;
name|void
modifier|*
name|ai_addr
decl_stmt|;
else|#
directive|else
comment|// LINUX
name|unsigned
name|ai_addrlen
decl_stmt|;
name|void
modifier|*
name|ai_addr
decl_stmt|;
name|char
modifier|*
name|ai_canonname
decl_stmt|;
endif|#
directive|endif
name|struct
name|__sanitizer_addrinfo
modifier|*
name|ai_next
decl_stmt|;
block|}
struct|;
struct|struct
name|__sanitizer_hostent
block|{
name|char
modifier|*
name|h_name
decl_stmt|;
name|char
modifier|*
modifier|*
name|h_aliases
decl_stmt|;
name|int
name|h_addrtype
decl_stmt|;
name|int
name|h_length
decl_stmt|;
name|char
modifier|*
modifier|*
name|h_addr_list
decl_stmt|;
block|}
struct|;
struct|struct
name|__sanitizer_pollfd
block|{
name|int
name|fd
decl_stmt|;
name|short
name|events
decl_stmt|;
name|short
name|revents
decl_stmt|;
block|}
struct|;
if|#
directive|if
name|SANITIZER_ANDROID
operator|||
name|SANITIZER_MAC
operator|||
name|SANITIZER_FREEBSD
typedef|typedef
name|unsigned
name|__sanitizer_nfds_t
typedef|;
else|#
directive|else
typedef|typedef
name|unsigned
name|long
name|__sanitizer_nfds_t
typedef|;
endif|#
directive|endif
if|#
directive|if
operator|!
name|SANITIZER_ANDROID
if|#
directive|if
name|SANITIZER_LINUX
struct|struct
name|__sanitizer_glob_t
block|{
name|uptr
name|gl_pathc
decl_stmt|;
name|char
modifier|*
modifier|*
name|gl_pathv
decl_stmt|;
name|uptr
name|gl_offs
decl_stmt|;
name|int
name|gl_flags
decl_stmt|;
name|void
function_decl|(
modifier|*
name|gl_closedir
function_decl|)
parameter_list|(
name|void
modifier|*
name|dirp
parameter_list|)
function_decl|;
name|void
modifier|*
function_decl|(
modifier|*
name|gl_readdir
function_decl|)
parameter_list|(
name|void
modifier|*
name|dirp
parameter_list|)
function_decl|;
name|void
modifier|*
function_decl|(
modifier|*
name|gl_opendir
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|gl_lstat
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|gl_stat
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
block|}
struct|;
elif|#
directive|elif
name|SANITIZER_FREEBSD
struct|struct
name|__sanitizer_glob_t
block|{
name|uptr
name|gl_pathc
decl_stmt|;
name|uptr
name|gl_matchc
decl_stmt|;
name|uptr
name|gl_offs
decl_stmt|;
name|int
name|gl_flags
decl_stmt|;
name|char
modifier|*
modifier|*
name|gl_pathv
decl_stmt|;
name|int
function_decl|(
modifier|*
name|gl_errfunc
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|gl_closedir
function_decl|)
parameter_list|(
name|void
modifier|*
name|dirp
parameter_list|)
function_decl|;
name|struct
name|dirent
modifier|*
function_decl|(
modifier|*
name|gl_readdir
function_decl|)
parameter_list|(
name|void
modifier|*
name|dirp
parameter_list|)
function_decl|;
name|void
modifier|*
function_decl|(
modifier|*
name|gl_opendir
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|gl_lstat
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|void
modifier|*
comment|/* struct stat* */
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|gl_stat
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|void
modifier|*
comment|/* struct stat* */
parameter_list|)
function_decl|;
block|}
struct|;
endif|#
directive|endif
comment|// SANITIZER_FREEBSD
if|#
directive|if
name|SANITIZER_LINUX
operator|||
name|SANITIZER_FREEBSD
specifier|extern
name|int
name|glob_nomatch
decl_stmt|;
specifier|extern
name|int
name|glob_altdirfunc
decl_stmt|;
endif|#
directive|endif
endif|#
directive|endif
comment|// !SANITIZER_ANDROID
specifier|extern
name|unsigned
name|path_max
decl_stmt|;
struct|struct
name|__sanitizer_wordexp_t
block|{
name|uptr
name|we_wordc
decl_stmt|;
name|char
modifier|*
modifier|*
name|we_wordv
decl_stmt|;
name|uptr
name|we_offs
decl_stmt|;
if|#
directive|if
name|SANITIZER_FREEBSD
name|char
modifier|*
name|we_strings
decl_stmt|;
name|uptr
name|we_nbytes
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
if|#
directive|if
name|SANITIZER_LINUX
operator|&&
operator|!
name|SANITIZER_ANDROID
struct|struct
name|__sanitizer_FILE
block|{
name|int
name|_flags
decl_stmt|;
name|char
modifier|*
name|_IO_read_ptr
decl_stmt|;
name|char
modifier|*
name|_IO_read_end
decl_stmt|;
name|char
modifier|*
name|_IO_read_base
decl_stmt|;
name|char
modifier|*
name|_IO_write_base
decl_stmt|;
name|char
modifier|*
name|_IO_write_ptr
decl_stmt|;
name|char
modifier|*
name|_IO_write_end
decl_stmt|;
name|char
modifier|*
name|_IO_buf_base
decl_stmt|;
name|char
modifier|*
name|_IO_buf_end
decl_stmt|;
name|char
modifier|*
name|_IO_save_base
decl_stmt|;
name|char
modifier|*
name|_IO_backup_base
decl_stmt|;
name|char
modifier|*
name|_IO_save_end
decl_stmt|;
name|void
modifier|*
name|_markers
decl_stmt|;
name|__sanitizer_FILE
modifier|*
name|_chain
decl_stmt|;
name|int
name|_fileno
decl_stmt|;
block|}
struct|;
define|#
directive|define
name|SANITIZER_HAS_STRUCT_FILE
value|1
else|#
directive|else
typedef|typedef
name|void
name|__sanitizer_FILE
typedef|;
define|#
directive|define
name|SANITIZER_HAS_STRUCT_FILE
value|0
endif|#
directive|endif
if|#
directive|if
name|SANITIZER_LINUX
operator|&&
operator|!
name|SANITIZER_ANDROID
operator|&&
expr|\
operator|(
name|defined
argument_list|(
name|__i386
argument_list|)
operator|||
name|defined
argument_list|(
name|__x86_64
argument_list|)
operator|||
name|defined
argument_list|(
name|__mips64
argument_list|)
operator|||
expr|\
name|defined
argument_list|(
name|__powerpc64__
argument_list|)
operator|||
name|defined
argument_list|(
name|__aarch64__
argument_list|)
operator|||
name|defined
argument_list|(
name|__arm__
argument_list|)
operator|||
expr|\
name|defined
argument_list|(
name|__s390__
argument_list|)
operator|)
specifier|extern
name|unsigned
name|struct_user_regs_struct_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_user_fpregs_struct_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_user_fpxregs_struct_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_user_vfpregs_struct_sz
decl_stmt|;
specifier|extern
name|int
name|ptrace_peektext
decl_stmt|;
specifier|extern
name|int
name|ptrace_peekdata
decl_stmt|;
specifier|extern
name|int
name|ptrace_peekuser
decl_stmt|;
specifier|extern
name|int
name|ptrace_getregs
decl_stmt|;
specifier|extern
name|int
name|ptrace_setregs
decl_stmt|;
specifier|extern
name|int
name|ptrace_getfpregs
decl_stmt|;
specifier|extern
name|int
name|ptrace_setfpregs
decl_stmt|;
specifier|extern
name|int
name|ptrace_getfpxregs
decl_stmt|;
specifier|extern
name|int
name|ptrace_setfpxregs
decl_stmt|;
specifier|extern
name|int
name|ptrace_getvfpregs
decl_stmt|;
specifier|extern
name|int
name|ptrace_setvfpregs
decl_stmt|;
specifier|extern
name|int
name|ptrace_getsiginfo
decl_stmt|;
specifier|extern
name|int
name|ptrace_setsiginfo
decl_stmt|;
specifier|extern
name|int
name|ptrace_getregset
decl_stmt|;
specifier|extern
name|int
name|ptrace_setregset
decl_stmt|;
specifier|extern
name|int
name|ptrace_geteventmsg
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
operator|(
name|SANITIZER_LINUX
operator|||
name|SANITIZER_FREEBSD
operator|)
operator|&&
operator|!
name|SANITIZER_ANDROID
specifier|extern
name|unsigned
name|struct_shminfo_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_shm_info_sz
decl_stmt|;
specifier|extern
name|int
name|shmctl_ipc_stat
decl_stmt|;
specifier|extern
name|int
name|shmctl_ipc_info
decl_stmt|;
specifier|extern
name|int
name|shmctl_shm_info
decl_stmt|;
specifier|extern
name|int
name|shmctl_shm_stat
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
operator|!
name|SANITIZER_MAC
operator|&&
operator|!
name|SANITIZER_FREEBSD
specifier|extern
name|unsigned
name|struct_utmp_sz
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
operator|!
name|SANITIZER_ANDROID
specifier|extern
name|unsigned
name|struct_utmpx_sz
decl_stmt|;
endif|#
directive|endif
specifier|extern
name|int
name|map_fixed
decl_stmt|;
comment|// ioctl arguments
struct|struct
name|__sanitizer_ifconf
block|{
name|int
name|ifc_len
decl_stmt|;
union|union
block|{
name|void
modifier|*
name|ifcu_req
decl_stmt|;
block|}
name|ifc_ifcu
union|;
if|#
directive|if
name|SANITIZER_MAC
block|}
name|__attribute__
argument_list|(
operator|(
name|packed
operator|)
argument_list|)
struct|;
else|#
directive|else
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|SANITIZER_LINUX
operator|&&
operator|!
name|SANITIZER_ANDROID
end_if

begin_struct
struct|struct
name|__sanitizer__obstack_chunk
block|{
name|char
modifier|*
name|limit
decl_stmt|;
name|struct
name|__sanitizer__obstack_chunk
modifier|*
name|prev
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|__sanitizer_obstack
block|{
name|long
name|chunk_size
decl_stmt|;
name|struct
name|__sanitizer__obstack_chunk
modifier|*
name|chunk
decl_stmt|;
name|char
modifier|*
name|object_base
decl_stmt|;
name|char
modifier|*
name|next_free
decl_stmt|;
name|uptr
name|more_fields
index|[
literal|7
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|uptr
function_decl|(
modifier|*
name|__sanitizer_cookie_io_read
function_decl|)
parameter_list|(
name|void
modifier|*
name|cookie
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|,
name|uptr
name|size
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|uptr
function_decl|(
modifier|*
name|__sanitizer_cookie_io_write
function_decl|)
parameter_list|(
name|void
modifier|*
name|cookie
parameter_list|,
specifier|const
name|char
modifier|*
name|buf
parameter_list|,
name|uptr
name|size
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
modifier|*
name|__sanitizer_cookie_io_seek
function_decl|)
parameter_list|(
name|void
modifier|*
name|cookie
parameter_list|,
name|u64
modifier|*
name|offset
parameter_list|,
name|int
name|whence
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
modifier|*
name|__sanitizer_cookie_io_close
function_decl|)
parameter_list|(
name|void
modifier|*
name|cookie
parameter_list|)
function_decl|;
end_typedef

begin_struct
struct|struct
name|__sanitizer_cookie_io_functions_t
block|{
name|__sanitizer_cookie_io_read
name|read
decl_stmt|;
name|__sanitizer_cookie_io_write
name|write
decl_stmt|;
name|__sanitizer_cookie_io_seek
name|seek
decl_stmt|;
name|__sanitizer_cookie_io_close
name|close
decl_stmt|;
block|}
struct|;
end_struct

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|IOC_NRBITS
value|8
end_define

begin_define
define|#
directive|define
name|IOC_TYPEBITS
value|8
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__powerpc__
argument_list|)
operator|||
name|defined
argument_list|(
name|__powerpc64__
argument_list|)
operator|||
name|defined
argument_list|(
name|__mips__
argument_list|)
operator|||
expr|\
name|defined
argument_list|(
name|__sparc__
argument_list|)
end_if

begin_define
define|#
directive|define
name|IOC_SIZEBITS
value|13
end_define

begin_define
define|#
directive|define
name|IOC_DIRBITS
value|3
end_define

begin_define
define|#
directive|define
name|IOC_NONE
value|1U
end_define

begin_define
define|#
directive|define
name|IOC_WRITE
value|4U
end_define

begin_define
define|#
directive|define
name|IOC_READ
value|2U
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|IOC_SIZEBITS
value|14
end_define

begin_define
define|#
directive|define
name|IOC_DIRBITS
value|2
end_define

begin_define
define|#
directive|define
name|IOC_NONE
value|0U
end_define

begin_define
define|#
directive|define
name|IOC_WRITE
value|1U
end_define

begin_define
define|#
directive|define
name|IOC_READ
value|2U
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|IOC_NRMASK
value|((1<< IOC_NRBITS) - 1)
end_define

begin_define
define|#
directive|define
name|IOC_TYPEMASK
value|((1<< IOC_TYPEBITS) - 1)
end_define

begin_define
define|#
directive|define
name|IOC_SIZEMASK
value|((1<< IOC_SIZEBITS) - 1)
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|IOC_DIRMASK
argument_list|)
end_if

begin_undef
undef|#
directive|undef
name|IOC_DIRMASK
end_undef

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|IOC_DIRMASK
value|((1<< IOC_DIRBITS) - 1)
end_define

begin_define
define|#
directive|define
name|IOC_NRSHIFT
value|0
end_define

begin_define
define|#
directive|define
name|IOC_TYPESHIFT
value|(IOC_NRSHIFT + IOC_NRBITS)
end_define

begin_define
define|#
directive|define
name|IOC_SIZESHIFT
value|(IOC_TYPESHIFT + IOC_TYPEBITS)
end_define

begin_define
define|#
directive|define
name|IOC_DIRSHIFT
value|(IOC_SIZESHIFT + IOC_SIZEBITS)
end_define

begin_define
define|#
directive|define
name|EVIOC_EV_MAX
value|0x1f
end_define

begin_define
define|#
directive|define
name|EVIOC_ABS_MAX
value|0x3f
end_define

begin_define
define|#
directive|define
name|IOC_DIR
parameter_list|(
name|nr
parameter_list|)
value|(((nr)>> IOC_DIRSHIFT)& IOC_DIRMASK)
end_define

begin_define
define|#
directive|define
name|IOC_TYPE
parameter_list|(
name|nr
parameter_list|)
value|(((nr)>> IOC_TYPESHIFT)& IOC_TYPEMASK)
end_define

begin_define
define|#
directive|define
name|IOC_NR
parameter_list|(
name|nr
parameter_list|)
value|(((nr)>> IOC_NRSHIFT)& IOC_NRMASK)
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__sparc__
argument_list|)
end_if

begin_comment
comment|// In sparc the 14 bits SIZE field overlaps with the
end_comment

begin_comment
comment|// least significant bit of DIR, so either IOC_READ or
end_comment

begin_comment
comment|// IOC_WRITE shall be 1 in order to get a non-zero SIZE.
end_comment

begin_define
define|#
directive|define
name|IOC_SIZE
parameter_list|(
name|nr
parameter_list|)
define|\
value|((((((nr)>> 29)& 0x7)& (4U | 2U)) == 0) ? 0 : (((nr)>> 16)& 0x3fff))
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|IOC_SIZE
parameter_list|(
name|nr
parameter_list|)
value|(((nr)>> IOC_SIZESHIFT)& IOC_SIZEMASK)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_ifreq_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_termios_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_winsize_sz
decl_stmt|;
end_decl_stmt

begin_if
if|#
directive|if
name|SANITIZER_LINUX
end_if

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_arpreq_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_cdrom_msf_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_cdrom_multisession_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_cdrom_read_audio_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_cdrom_subchnl_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_cdrom_ti_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_cdrom_tocentry_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_cdrom_tochdr_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_cdrom_volctrl_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_ff_effect_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_floppy_drive_params_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_floppy_drive_struct_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_floppy_fdc_state_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_floppy_max_errors_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_floppy_raw_cmd_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_floppy_struct_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_floppy_write_errors_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_format_descr_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_hd_driveid_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_hd_geometry_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_input_absinfo_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_input_id_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_mtpos_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_termio_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_vt_consize_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_vt_sizes_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_vt_stat_sz
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// SANITIZER_LINUX
end_comment

begin_if
if|#
directive|if
name|SANITIZER_LINUX
operator|||
name|SANITIZER_FREEBSD
end_if

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_copr_buffer_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_copr_debug_buf_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_copr_msg_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_midi_info_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_mtget_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_mtop_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_rtentry_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_sbi_instrument_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_seq_event_rec_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_synth_info_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_vt_mode_sz
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// SANITIZER_LINUX || SANITIZER_FREEBSD
end_comment

begin_if
if|#
directive|if
name|SANITIZER_LINUX
operator|&&
operator|!
name|SANITIZER_ANDROID
end_if

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_ax25_parms_struct_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_cyclades_monitor_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_input_keymap_entry_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_ipx_config_data_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_kbdiacrs_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_kbentry_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_kbkeycode_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_kbsentry_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_mtconfiginfo_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_nr_parms_struct_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_scc_modem_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_scc_stat_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_serial_multiport_struct_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_serial_struct_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_sockaddr_ax25_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_unimapdesc_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_unimapinit_sz
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// SANITIZER_LINUX&& !SANITIZER_ANDROID
end_comment

begin_if
if|#
directive|if
operator|(
name|SANITIZER_LINUX
operator|||
name|SANITIZER_FREEBSD
operator|)
operator|&&
operator|!
name|SANITIZER_ANDROID
end_if

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_audio_buf_info_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_ppp_stats_sz
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// (SANITIZER_LINUX || SANITIZER_FREEBSD)&& !SANITIZER_ANDROID
end_comment

begin_if
if|#
directive|if
operator|!
name|SANITIZER_ANDROID
operator|&&
operator|!
name|SANITIZER_MAC
end_if

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_sioc_sg_req_sz
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|struct_sioc_vif_req_sz
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// ioctl request identifiers
end_comment

begin_comment
comment|// A special value to mark ioctls that are not present on the target platform,
end_comment

begin_comment
comment|// when it can not be determined without including any system headers.
end_comment

begin_decl_stmt
specifier|extern
specifier|const
name|unsigned
name|IOCTL_NOT_PRESENT
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_FIOASYNC
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_FIOCLEX
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_FIOGETOWN
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_FIONBIO
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_FIONCLEX
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_FIOSETOWN
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCADDMULTI
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCATMARK
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCDELMULTI
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCGIFADDR
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCGIFBRDADDR
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCGIFCONF
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCGIFDSTADDR
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCGIFFLAGS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCGIFMETRIC
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCGIFMTU
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCGIFNETMASK
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCGPGRP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCSIFADDR
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCSIFBRDADDR
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCSIFDSTADDR
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCSIFFLAGS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCSIFMETRIC
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCSIFMTU
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCSIFNETMASK
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCSPGRP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TIOCCONS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TIOCEXCL
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TIOCGETD
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TIOCGPGRP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TIOCGWINSZ
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TIOCMBIC
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TIOCMBIS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TIOCMGET
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TIOCMSET
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TIOCNOTTY
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TIOCNXCL
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TIOCOUTQ
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TIOCPKT
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TIOCSCTTY
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TIOCSETD
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TIOCSPGRP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TIOCSTI
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TIOCSWINSZ
decl_stmt|;
end_decl_stmt

begin_if
if|#
directive|if
operator|(
name|SANITIZER_LINUX
operator|||
name|SANITIZER_FREEBSD
operator|)
operator|&&
operator|!
name|SANITIZER_ANDROID
end_if

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCGETSGCNT
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCGETVIFCNT
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|SANITIZER_LINUX
end_if

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_EVIOCGABS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_EVIOCGBIT
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_EVIOCGEFFECTS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_EVIOCGID
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_EVIOCGKEY
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_EVIOCGKEYCODE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_EVIOCGLED
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_EVIOCGNAME
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_EVIOCGPHYS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_EVIOCGRAB
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_EVIOCGREP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_EVIOCGSND
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_EVIOCGSW
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_EVIOCGUNIQ
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_EVIOCGVERSION
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_EVIOCRMFF
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_EVIOCSABS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_EVIOCSFF
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_EVIOCSKEYCODE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_EVIOCSREP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_BLKFLSBUF
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_BLKGETSIZE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_BLKRAGET
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_BLKRASET
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_BLKROGET
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_BLKROSET
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_BLKRRPART
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_CDROMAUDIOBUFSIZ
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_CDROMEJECT
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_CDROMEJECT_SW
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_CDROMMULTISESSION
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_CDROMPAUSE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_CDROMPLAYMSF
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_CDROMPLAYTRKIND
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_CDROMREADAUDIO
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_CDROMREADCOOKED
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_CDROMREADMODE1
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_CDROMREADMODE2
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_CDROMREADRAW
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_CDROMREADTOCENTRY
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_CDROMREADTOCHDR
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_CDROMRESET
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_CDROMRESUME
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_CDROMSEEK
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_CDROMSTART
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_CDROMSTOP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_CDROMSUBCHNL
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_CDROMVOLCTRL
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_CDROMVOLREAD
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_CDROM_GET_UPC
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_FDCLRPRM
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_FDDEFPRM
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_FDFLUSH
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_FDFMTBEG
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_FDFMTEND
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_FDFMTTRK
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_FDGETDRVPRM
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_FDGETDRVSTAT
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_FDGETDRVTYP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_FDGETFDCSTAT
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_FDGETMAXERRS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_FDGETPRM
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_FDMSGOFF
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_FDMSGON
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_FDPOLLDRVSTAT
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_FDRAWCMD
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_FDRESET
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_FDSETDRVPRM
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_FDSETEMSGTRESH
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_FDSETMAXERRS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_FDSETPRM
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_FDTWADDLE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_FDWERRORCLR
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_FDWERRORGET
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_HDIO_DRIVE_CMD
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_HDIO_GETGEO
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_HDIO_GET_32BIT
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_HDIO_GET_DMA
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_HDIO_GET_IDENTITY
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_HDIO_GET_KEEPSETTINGS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_HDIO_GET_MULTCOUNT
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_HDIO_GET_NOWERR
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_HDIO_GET_UNMASKINTR
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_HDIO_SET_32BIT
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_HDIO_SET_DMA
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_HDIO_SET_KEEPSETTINGS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_HDIO_SET_MULTCOUNT
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_HDIO_SET_NOWERR
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_HDIO_SET_UNMASKINTR
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_MTIOCPOS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_PPPIOCGASYNCMAP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_PPPIOCGDEBUG
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_PPPIOCGFLAGS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_PPPIOCGUNIT
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_PPPIOCGXASYNCMAP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_PPPIOCSASYNCMAP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_PPPIOCSDEBUG
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_PPPIOCSFLAGS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_PPPIOCSMAXCID
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_PPPIOCSMRU
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_PPPIOCSXASYNCMAP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCDARP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCDRARP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCGARP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCGIFENCAP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCGIFHWADDR
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCGIFMAP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCGIFMEM
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCGIFNAME
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCGIFSLAVE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCGRARP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCGSTAMP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCSARP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCSIFENCAP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCSIFHWADDR
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCSIFLINK
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCSIFMAP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCSIFMEM
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCSIFSLAVE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCSRARP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_COPR_HALT
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_COPR_LOAD
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_COPR_RCODE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_COPR_RCVMSG
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_COPR_RDATA
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_COPR_RESET
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_COPR_RUN
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_COPR_SENDMSG
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_COPR_WCODE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_COPR_WDATA
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TCFLSH
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TCGETA
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TCGETS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TCSBRK
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TCSBRKP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TCSETA
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TCSETAF
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TCSETAW
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TCSETS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TCSETSF
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TCSETSW
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TCXONC
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TIOCGLCKTRMIOS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TIOCGSOFTCAR
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TIOCINQ
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TIOCLINUX
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TIOCSERCONFIG
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TIOCSERGETLSR
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TIOCSERGWILD
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TIOCSERSWILD
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TIOCSLCKTRMIOS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TIOCSSOFTCAR
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_VT_DISALLOCATE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_VT_GETSTATE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_VT_RESIZE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_VT_RESIZEX
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_VT_SENDSIG
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// SANITIZER_LINUX
end_comment

begin_if
if|#
directive|if
name|SANITIZER_LINUX
operator|||
name|SANITIZER_FREEBSD
end_if

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_MTIOCGET
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_MTIOCTOP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCADDRT
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCDELRT
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_DSP_GETBLKSIZE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_DSP_GETFMTS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_DSP_NONBLOCK
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_DSP_POST
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_DSP_RESET
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_DSP_SETFMT
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_DSP_SETFRAGMENT
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_DSP_SPEED
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_DSP_STEREO
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_DSP_SUBDIVIDE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_DSP_SYNC
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_FM_4OP_ENABLE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_FM_LOAD_INSTR
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_MIDI_INFO
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_MIDI_PRETIME
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_SEQ_CTRLRATE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_SEQ_GETINCOUNT
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_SEQ_GETOUTCOUNT
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_SEQ_NRMIDIS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_SEQ_NRSYNTHS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_SEQ_OUTOFBAND
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_SEQ_PANIC
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_SEQ_PERCMODE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_SEQ_RESET
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_SEQ_RESETSAMPLES
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_SEQ_SYNC
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_SEQ_TESTMIDI
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_SEQ_THRESHOLD
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_SYNTH_INFO
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_SYNTH_MEMAVL
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_TMR_CONTINUE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_TMR_METRONOME
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_TMR_SELECT
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_TMR_SOURCE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_TMR_START
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_TMR_STOP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_TMR_TEMPO
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_TMR_TIMEBASE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_READ_ALTPCM
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_READ_BASS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_READ_CAPS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_READ_CD
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_READ_DEVMASK
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_READ_ENHANCE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_READ_IGAIN
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_READ_IMIX
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_READ_LINE1
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_READ_LINE2
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_READ_LINE3
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_READ_LINE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_READ_LOUD
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_READ_MIC
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_READ_MUTE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_READ_OGAIN
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_READ_PCM
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_READ_RECLEV
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_READ_RECMASK
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_READ_RECSRC
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_READ_SPEAKER
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_READ_STEREODEVS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_READ_SYNTH
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_READ_TREBLE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_READ_VOLUME
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_WRITE_ALTPCM
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_WRITE_BASS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_WRITE_CD
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_WRITE_ENHANCE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_WRITE_IGAIN
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_WRITE_IMIX
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_WRITE_LINE1
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_WRITE_LINE2
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_WRITE_LINE3
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_WRITE_LINE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_WRITE_LOUD
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_WRITE_MIC
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_WRITE_MUTE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_WRITE_OGAIN
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_WRITE_PCM
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_WRITE_RECLEV
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_WRITE_RECSRC
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_WRITE_SPEAKER
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_WRITE_SYNTH
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_WRITE_TREBLE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_MIXER_WRITE_VOLUME
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_PCM_READ_BITS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_PCM_READ_CHANNELS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_PCM_READ_FILTER
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_PCM_READ_RATE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_PCM_WRITE_CHANNELS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SOUND_PCM_WRITE_FILTER
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_VT_ACTIVATE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_VT_GETMODE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_VT_OPENQRY
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_VT_RELDISP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_VT_SETMODE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_VT_WAITACTIVE
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// SANITIZER_LINUX || SANITIZER_FREEBSD
end_comment

begin_if
if|#
directive|if
name|SANITIZER_LINUX
operator|&&
operator|!
name|SANITIZER_ANDROID
end_if

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_CYGETDEFTHRESH
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_CYGETDEFTIMEOUT
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_CYGETMON
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_CYGETTHRESH
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_CYGETTIMEOUT
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_CYSETDEFTHRESH
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_CYSETDEFTIMEOUT
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_CYSETTHRESH
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_CYSETTIMEOUT
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_EQL_EMANCIPATE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_EQL_ENSLAVE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_EQL_GETMASTRCFG
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_EQL_GETSLAVECFG
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_EQL_SETMASTRCFG
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_EQL_SETSLAVECFG
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_EVIOCGKEYCODE_V2
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_EVIOCGPROP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_EVIOCSKEYCODE_V2
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_FS_IOC_GETFLAGS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_FS_IOC_GETVERSION
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_FS_IOC_SETFLAGS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_FS_IOC_SETVERSION
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_GIO_CMAP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_GIO_FONT
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_GIO_UNIMAP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_GIO_UNISCRNMAP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_KDADDIO
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_KDDELIO
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_KDGETKEYCODE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_KDGKBDIACR
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_KDGKBENT
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_KDGKBLED
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_KDGKBMETA
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_KDGKBSENT
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_KDMAPDISP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_KDSETKEYCODE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_KDSIGACCEPT
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_KDSKBDIACR
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_KDSKBENT
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_KDSKBLED
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_KDSKBMETA
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_KDSKBSENT
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_KDUNMAPDISP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_LPABORT
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_LPABORTOPEN
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_LPCAREFUL
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_LPCHAR
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_LPGETIRQ
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_LPGETSTATUS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_LPRESET
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_LPSETIRQ
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_LPTIME
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_LPWAIT
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_MTIOCGETCONFIG
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_MTIOCSETCONFIG
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_PIO_CMAP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_PIO_FONT
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_PIO_UNIMAP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_PIO_UNIMAPCLR
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_PIO_UNISCRNMAP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SCSI_IOCTL_GET_IDLUN
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SCSI_IOCTL_PROBE_HOST
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SCSI_IOCTL_TAGGED_DISABLE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SCSI_IOCTL_TAGGED_ENABLE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCAIPXITFCRT
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCAIPXPRISLT
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCAX25ADDUID
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCAX25DELUID
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCAX25GETPARMS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCAX25GETUID
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCAX25NOUID
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCAX25SETPARMS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCDEVPLIP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCIPXCFGDATA
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCNRDECOBS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCNRGETPARMS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCNRRTCTL
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SIOCNRSETPARMS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_DSP_GETISPACE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_SNDCTL_DSP_GETOSPACE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TIOCGSERIAL
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TIOCSERGETMULTI
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TIOCSERSETMULTI
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_TIOCSSERIAL
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// SANITIZER_LINUX&& !SANITIZER_ANDROID
end_comment

begin_if
if|#
directive|if
operator|(
name|SANITIZER_LINUX
operator|||
name|SANITIZER_FREEBSD
operator|)
operator|&&
operator|!
name|SANITIZER_ANDROID
end_if

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_GIO_SCRNMAP
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_KDDISABIO
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_KDENABIO
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_KDGETLED
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_KDGETMODE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_KDGKBMODE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_KDGKBTYPE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_KDMKTONE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_KDSETLED
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_KDSETMODE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_KDSKBMODE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_KIOCSOUND
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|IOCTL_PIO_SCRNMAP
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
specifier|extern
specifier|const
name|int
name|errno_EINVAL
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|int
name|errno_EOWNERDEAD
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|int
name|si_SEGV_MAPERR
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|int
name|si_SEGV_ACCERR
decl_stmt|;
end_decl_stmt

begin_comment
unit|}
comment|// namespace __sanitizer
end_comment

begin_define
define|#
directive|define
name|CHECK_TYPE_SIZE
parameter_list|(
name|TYPE
parameter_list|)
define|\
value|COMPILER_CHECK(sizeof(__sanitizer_##TYPE) == sizeof(TYPE))
end_define

begin_define
define|#
directive|define
name|CHECK_SIZE_AND_OFFSET
parameter_list|(
name|CLASS
parameter_list|,
name|MEMBER
parameter_list|)
define|\
value|COMPILER_CHECK(sizeof(((__sanitizer_##CLASS *) NULL)->MEMBER) == \                  sizeof(((CLASS *) NULL)->MEMBER));                \   COMPILER_CHECK(offsetof(__sanitizer_##CLASS, MEMBER) ==          \                  offsetof(CLASS, MEMBER))
end_define

begin_comment
comment|// For sigaction, which is a function and struct at the same time,
end_comment

begin_comment
comment|// and thus requires explicit "struct" in sizeof() expression.
end_comment

begin_define
define|#
directive|define
name|CHECK_STRUCT_SIZE_AND_OFFSET
parameter_list|(
name|CLASS
parameter_list|,
name|MEMBER
parameter_list|)
define|\
value|COMPILER_CHECK(sizeof(((struct __sanitizer_##CLASS *) NULL)->MEMBER) == \                  sizeof(((struct CLASS *) NULL)->MEMBER));                \   COMPILER_CHECK(offsetof(struct __sanitizer_##CLASS, MEMBER) ==          \                  offsetof(struct CLASS, MEMBER))
end_define

begin_endif
endif|#
directive|endif
end_endif

end_unit

