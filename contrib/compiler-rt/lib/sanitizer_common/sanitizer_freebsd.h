begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- sanitizer_freebsd.h -------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is a part of Sanitizer runtime. It contains FreeBSD-specific
end_comment

begin_comment
comment|// definitions.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SANITIZER_FREEBSD_H
end_ifndef

begin_define
define|#
directive|define
name|SANITIZER_FREEBSD_H
end_define

begin_include
include|#
directive|include
file|"sanitizer_internal_defs.h"
end_include

begin_comment
comment|// x86-64 FreeBSD 9.2 and older define 'ucontext_t' incorrectly in
end_comment

begin_comment
comment|// 32-bit mode.
end_comment

begin_if
if|#
directive|if
name|SANITIZER_FREEBSD
operator|&&
operator|(
name|SANITIZER_WORDSIZE
operator|==
literal|32
operator|)
end_if

begin_include
include|#
directive|include
file|<osreldate.h>
end_include

begin_if
if|#
directive|if
name|__FreeBSD_version
operator|<=
literal|902001
end_if

begin_comment
comment|// v9.2
end_comment

begin_include
include|#
directive|include
file|<link.h>
end_include

begin_include
include|#
directive|include
file|<sys/param.h>
end_include

begin_include
include|#
directive|include
file|<ucontext.h>
end_include

begin_decl_stmt
name|namespace
name|__sanitizer
block|{
typedef|typedef
name|unsigned
name|long
name|long
name|__xuint64_t
typedef|;
typedef|typedef
name|__int32_t
name|__xregister_t
typedef|;
typedef|typedef
struct|struct
name|__xmcontext
block|{
name|__xregister_t
name|mc_onstack
decl_stmt|;
name|__xregister_t
name|mc_gs
decl_stmt|;
name|__xregister_t
name|mc_fs
decl_stmt|;
name|__xregister_t
name|mc_es
decl_stmt|;
name|__xregister_t
name|mc_ds
decl_stmt|;
name|__xregister_t
name|mc_edi
decl_stmt|;
name|__xregister_t
name|mc_esi
decl_stmt|;
name|__xregister_t
name|mc_ebp
decl_stmt|;
name|__xregister_t
name|mc_isp
decl_stmt|;
name|__xregister_t
name|mc_ebx
decl_stmt|;
name|__xregister_t
name|mc_edx
decl_stmt|;
name|__xregister_t
name|mc_ecx
decl_stmt|;
name|__xregister_t
name|mc_eax
decl_stmt|;
name|__xregister_t
name|mc_trapno
decl_stmt|;
name|__xregister_t
name|mc_err
decl_stmt|;
name|__xregister_t
name|mc_eip
decl_stmt|;
name|__xregister_t
name|mc_cs
decl_stmt|;
name|__xregister_t
name|mc_eflags
decl_stmt|;
name|__xregister_t
name|mc_esp
decl_stmt|;
name|__xregister_t
name|mc_ss
decl_stmt|;
name|int
name|mc_len
decl_stmt|;
name|int
name|mc_fpformat
decl_stmt|;
name|int
name|mc_ownedfp
decl_stmt|;
name|__xregister_t
name|mc_flags
decl_stmt|;
name|int
name|mc_fpstate
index|[
literal|128
index|]
name|__aligned
decl|(16
decl_stmt|);
name|__xregister_t
name|mc_fsbase
decl_stmt|;
name|__xregister_t
name|mc_gsbase
decl_stmt|;
name|__xregister_t
name|mc_xfpustate
decl_stmt|;
name|__xregister_t
name|mc_xfpustate_len
decl_stmt|;
name|int
name|mc_spare2
index|[
literal|4
index|]
decl_stmt|;
block|}
name|xmcontext_t
typedef|;
typedef|typedef
struct|struct
name|__xucontext
block|{
name|sigset_t
name|uc_sigmask
decl_stmt|;
name|xmcontext_t
name|uc_mcontext
decl_stmt|;
name|struct
name|__ucontext
modifier|*
name|uc_link
decl_stmt|;
name|stack_t
name|uc_stack
decl_stmt|;
name|int
name|uc_flags
decl_stmt|;
name|int
name|__spare__
index|[
literal|4
index|]
decl_stmt|;
block|}
name|xucontext_t
typedef|;
struct|struct
name|xkinfo_vmentry
block|{
name|int
name|kve_structsize
decl_stmt|;
name|int
name|kve_type
decl_stmt|;
name|__xuint64_t
name|kve_start
decl_stmt|;
name|__xuint64_t
name|kve_end
decl_stmt|;
name|__xuint64_t
name|kve_offset
decl_stmt|;
name|__xuint64_t
name|kve_vn_fileid
decl_stmt|;
name|__uint32_t
name|kve_vn_fsid
decl_stmt|;
name|int
name|kve_flags
decl_stmt|;
name|int
name|kve_resident
decl_stmt|;
name|int
name|kve_private_resident
decl_stmt|;
name|int
name|kve_protection
decl_stmt|;
name|int
name|kve_ref_count
decl_stmt|;
name|int
name|kve_shadow_count
decl_stmt|;
name|int
name|kve_vn_type
decl_stmt|;
name|__xuint64_t
name|kve_vn_size
decl_stmt|;
name|__uint32_t
name|kve_vn_rdev
decl_stmt|;
name|__uint16_t
name|kve_vn_mode
decl_stmt|;
name|__uint16_t
name|kve_status
decl_stmt|;
name|int
name|_kve_ispare
index|[
literal|12
index|]
decl_stmt|;
name|char
name|kve_path
index|[
name|PATH_MAX
index|]
decl_stmt|;
block|}
struct|;
typedef|typedef
struct|struct
block|{
name|__uint32_t
name|p_type
decl_stmt|;
name|__uint32_t
name|p_offset
decl_stmt|;
name|__uint32_t
name|p_vaddr
decl_stmt|;
name|__uint32_t
name|p_paddr
decl_stmt|;
name|__uint32_t
name|p_filesz
decl_stmt|;
name|__uint32_t
name|p_memsz
decl_stmt|;
name|__uint32_t
name|p_flags
decl_stmt|;
name|__uint32_t
name|p_align
decl_stmt|;
block|}
name|XElf32_Phdr
typedef|;
struct|struct
name|xdl_phdr_info
block|{
name|Elf_Addr
name|dlpi_addr
decl_stmt|;
specifier|const
name|char
modifier|*
name|dlpi_name
decl_stmt|;
specifier|const
name|XElf32_Phdr
modifier|*
name|dlpi_phdr
decl_stmt|;
name|Elf_Half
name|dlpi_phnum
decl_stmt|;
name|unsigned
name|long
name|long
name|int
name|dlpi_adds
decl_stmt|;
name|unsigned
name|long
name|long
name|int
name|dlpi_subs
decl_stmt|;
name|size_t
name|dlpi_tls_modid
decl_stmt|;
name|void
modifier|*
name|dlpi_tls_data
decl_stmt|;
block|}
struct|;
typedef|typedef
name|int
function_decl|(
modifier|*
name|__xdl_iterate_hdr_callback
function_decl|)
parameter_list|(
name|struct
name|xdl_phdr_info
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|int
name|xdl_iterate_phdr_t
parameter_list|(
name|__xdl_iterate_hdr_callback
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
define|#
directive|define
name|xdl_iterate_phdr
parameter_list|(
name|callback
parameter_list|,
name|param
parameter_list|)
define|\
value|(((xdl_iterate_phdr_t*) dl_iterate_phdr)((callback), (param)))
block|}
end_decl_stmt

begin_comment
comment|// namespace __sanitizer
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// __FreeBSD_version<= 902001
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// SANITIZER_FREEBSD&& (SANITIZER_WORDSIZE == 32)
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// SANITIZER_FREEBSD_H
end_comment

end_unit

