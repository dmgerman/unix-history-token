begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- sanitizer_stackdepotbase.h ------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Implementation of a mapping from arbitrary values to unique 32-bit
end_comment

begin_comment
comment|// identifiers.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SANITIZER_STACKDEPOTBASE_H
end_ifndef

begin_define
define|#
directive|define
name|SANITIZER_STACKDEPOTBASE_H
end_define

begin_include
include|#
directive|include
file|"sanitizer_internal_defs.h"
end_include

begin_include
include|#
directive|include
file|"sanitizer_mutex.h"
end_include

begin_include
include|#
directive|include
file|"sanitizer_atomic.h"
end_include

begin_include
include|#
directive|include
file|"sanitizer_persistent_allocator.h"
end_include

begin_decl_stmt
name|namespace
name|__sanitizer
block|{
name|template
operator|<
name|class
name|Node
operator|,
name|int
name|kReservedBits
operator|,
name|int
name|kTabSizeLog
operator|>
name|class
name|StackDepotBase
block|{
name|public
operator|:
typedef|typedef
name|typename
name|Node
operator|::
name|args_type
name|args_type
expr_stmt|;
typedef|typedef
name|typename
name|Node
operator|::
name|handle_type
name|handle_type
expr_stmt|;
comment|// Maps stack trace to an unique id.
name|handle_type
name|Put
parameter_list|(
name|args_type
name|args
parameter_list|,
name|bool
modifier|*
name|inserted
init|=
literal|0
parameter_list|)
function_decl|;
comment|// Retrieves a stored stack trace by the id.
name|args_type
name|Get
parameter_list|(
name|u32
name|id
parameter_list|)
function_decl|;
name|StackDepotStats
modifier|*
name|GetStats
parameter_list|()
block|{
return|return
operator|&
name|stats
return|;
block|}
name|void
name|LockAll
parameter_list|()
function_decl|;
name|void
name|UnlockAll
parameter_list|()
function_decl|;
name|private
label|:
specifier|static
name|Node
modifier|*
name|find
parameter_list|(
name|Node
modifier|*
name|s
parameter_list|,
name|args_type
name|args
parameter_list|,
name|u32
name|hash
parameter_list|)
function_decl|;
specifier|static
name|Node
modifier|*
name|lock
parameter_list|(
name|atomic_uintptr_t
modifier|*
name|p
parameter_list|)
function_decl|;
specifier|static
name|void
name|unlock
parameter_list|(
name|atomic_uintptr_t
modifier|*
name|p
parameter_list|,
name|Node
modifier|*
name|s
parameter_list|)
function_decl|;
specifier|static
specifier|const
name|int
name|kTabSize
init|=
literal|1
operator|<<
name|kTabSizeLog
decl_stmt|;
comment|// Hash table size.
specifier|static
specifier|const
name|int
name|kPartBits
init|=
literal|8
decl_stmt|;
specifier|static
specifier|const
name|int
name|kPartShift
init|=
sizeof|sizeof
argument_list|(
name|u32
argument_list|)
operator|*
literal|8
operator|-
name|kPartBits
operator|-
name|kReservedBits
decl_stmt|;
specifier|static
specifier|const
name|int
name|kPartCount
init|=
literal|1
operator|<<
name|kPartBits
decl_stmt|;
comment|// Number of subparts in the table.
specifier|static
specifier|const
name|int
name|kPartSize
init|=
name|kTabSize
operator|/
name|kPartCount
decl_stmt|;
specifier|static
specifier|const
name|int
name|kMaxId
init|=
literal|1
operator|<<
name|kPartShift
decl_stmt|;
name|atomic_uintptr_t
name|tab
index|[
name|kTabSize
index|]
decl_stmt|;
comment|// Hash table of Node's.
name|atomic_uint32_t
name|seq
index|[
name|kPartCount
index|]
decl_stmt|;
comment|// Unique id generators.
name|StackDepotStats
name|stats
decl_stmt|;
name|friend
name|class
name|StackDepotReverseMap
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Node
operator|,
name|int
name|kReservedBits
operator|,
name|int
name|kTabSizeLog
operator|>
name|Node
operator|*
name|StackDepotBase
operator|<
name|Node
operator|,
name|kReservedBits
operator|,
name|kTabSizeLog
operator|>
operator|::
name|find
argument_list|(
argument|Node *s
argument_list|,
argument|args_type args
argument_list|,
argument|u32 hash
argument_list|)
block|{
comment|// Searches linked list s for the stack, returns its id.
for|for
control|(
init|;
name|s
condition|;
name|s
operator|=
name|s
operator|->
name|link
control|)
block|{
if|if
condition|(
name|s
operator|->
name|eq
argument_list|(
name|hash
argument_list|,
name|args
argument_list|)
condition|)
block|{
return|return
name|s
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}   return
literal|0
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|Node
operator|,
name|int
name|kReservedBits
operator|,
name|int
name|kTabSizeLog
operator|>
name|Node
operator|*
name|StackDepotBase
operator|<
name|Node
operator|,
name|kReservedBits
operator|,
name|kTabSizeLog
operator|>
operator|::
name|lock
argument_list|(
argument|atomic_uintptr_t *p
argument_list|)
block|{
comment|// Uses the pointer lsb as mutex.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
condition|;
name|i
operator|++
control|)
block|{
name|uptr
name|cmp
init|=
name|atomic_load
argument_list|(
name|p
argument_list|,
name|memory_order_relaxed
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|cmp
operator|&
literal|1
operator|)
operator|==
literal|0
operator|&&
name|atomic_compare_exchange_weak
argument_list|(
name|p
argument_list|,
operator|&
name|cmp
argument_list|,
name|cmp
operator||
literal|1
argument_list|,
name|memory_order_acquire
argument_list|)
condition|)
return|return
operator|(
name|Node
operator|*
operator|)
name|cmp
return|;
if|if
condition|(
name|i
operator|<
literal|10
condition|)
name|proc_yield
argument_list|(
literal|10
argument_list|)
expr_stmt|;
else|else
name|internal_sched_yield
argument_list|()
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|Node
operator|,
name|int
name|kReservedBits
operator|,
name|int
name|kTabSizeLog
operator|>
name|void
name|StackDepotBase
operator|<
name|Node
operator|,
name|kReservedBits
operator|,
name|kTabSizeLog
operator|>
operator|::
name|unlock
argument_list|(
argument|atomic_uintptr_t *p
argument_list|,
argument|Node *s
argument_list|)
block|{
name|DCHECK_EQ
argument_list|(
operator|(
name|uptr
operator|)
name|s
operator|&
literal|1
argument_list|,
literal|0
argument_list|)
block|;
name|atomic_store
argument_list|(
name|p
argument_list|,
operator|(
name|uptr
operator|)
name|s
argument_list|,
name|memory_order_release
argument_list|)
block|; }
name|template
operator|<
name|class
name|Node
operator|,
name|int
name|kReservedBits
operator|,
name|int
name|kTabSizeLog
operator|>
name|typename
name|StackDepotBase
operator|<
name|Node
operator|,
name|kReservedBits
operator|,
name|kTabSizeLog
operator|>
operator|::
name|handle_type
name|StackDepotBase
operator|<
name|Node
operator|,
name|kReservedBits
operator|,
name|kTabSizeLog
operator|>
operator|::
name|Put
argument_list|(
argument|args_type args
argument_list|,
argument|bool *inserted
argument_list|)
block|{
if|if
condition|(
name|inserted
condition|)
operator|*
name|inserted
operator|=
name|false
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
operator|!
name|Node
operator|::
name|is_valid
argument_list|(
name|args
argument_list|)
condition|)
return|return
name|handle_type
argument_list|()
return|;
end_if

begin_decl_stmt
name|uptr
name|h
init|=
name|Node
operator|::
name|hash
argument_list|(
name|args
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|atomic_uintptr_t
modifier|*
name|p
init|=
operator|&
name|tab
index|[
name|h
operator|%
name|kTabSize
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uptr
name|v
init|=
name|atomic_load
argument_list|(
name|p
argument_list|,
name|memory_order_consume
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|Node
modifier|*
name|s
init|=
operator|(
name|Node
operator|*
operator|)
operator|(
name|v
operator|&
operator|~
literal|1
operator|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|// First, try to find the existing stack.
end_comment

begin_decl_stmt
name|Node
modifier|*
name|node
init|=
name|find
argument_list|(
name|s
argument_list|,
name|args
argument_list|,
name|h
argument_list|)
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|node
condition|)
return|return
name|node
operator|->
name|get_handle
argument_list|()
return|;
end_if

begin_comment
comment|// If failed, lock, retry and insert new.
end_comment

begin_decl_stmt
name|Node
modifier|*
name|s2
init|=
name|lock
argument_list|(
name|p
argument_list|)
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|s2
operator|!=
name|s
condition|)
block|{
name|node
operator|=
name|find
argument_list|(
name|s2
argument_list|,
name|args
argument_list|,
name|h
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
condition|)
block|{
name|unlock
argument_list|(
name|p
argument_list|,
name|s2
argument_list|)
expr_stmt|;
return|return
name|node
operator|->
name|get_handle
argument_list|()
return|;
block|}
block|}
end_if

begin_decl_stmt
name|uptr
name|part
init|=
operator|(
name|h
operator|%
name|kTabSize
operator|)
operator|/
name|kPartSize
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|u32
name|id
init|=
name|atomic_fetch_add
argument_list|(
operator|&
name|seq
index|[
name|part
index|]
argument_list|,
literal|1
argument_list|,
name|memory_order_relaxed
argument_list|)
operator|+
literal|1
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|stats
operator|.
name|n_uniq_ids
operator|++
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|CHECK_LT
argument_list|(
name|id
argument_list|,
name|kMaxId
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|id
operator||=
name|part
operator|<<
name|kPartShift
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|CHECK_NE
argument_list|(
name|id
argument_list|,
literal|0
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|CHECK_EQ
argument_list|(
name|id
operator|&
operator|(
operator|(
operator|(
name|u32
operator|)
operator|-
literal|1
operator|)
operator|>>
name|kReservedBits
operator|)
argument_list|,
name|id
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|uptr
name|memsz
init|=
name|Node
operator|::
name|storage_size
argument_list|(
name|args
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|s
operator|=
operator|(
name|Node
operator|*
operator|)
name|PersistentAlloc
argument_list|(
name|memsz
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|stats
operator|.
name|allocated
operator|+=
name|memsz
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|s
operator|->
name|id
operator|=
name|id
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|s
operator|->
name|store
argument_list|(
name|args
argument_list|,
name|h
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|s
operator|->
name|link
operator|=
name|s2
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|unlock
argument_list|(
name|p
argument_list|,
name|s
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|inserted
condition|)
operator|*
name|inserted
operator|=
name|true
expr_stmt|;
end_if

begin_return
return|return
name|s
operator|->
name|get_handle
argument_list|()
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|Node
operator|,
name|int
name|kReservedBits
operator|,
name|int
name|kTabSizeLog
operator|>
name|typename
name|StackDepotBase
operator|<
name|Node
operator|,
name|kReservedBits
operator|,
name|kTabSizeLog
operator|>
operator|::
name|args_type
name|StackDepotBase
operator|<
name|Node
operator|,
name|kReservedBits
operator|,
name|kTabSizeLog
operator|>
operator|::
name|Get
argument_list|(
argument|u32 id
argument_list|)
block|{
if|if
condition|(
name|id
operator|==
literal|0
condition|)
block|{
return|return
name|args_type
argument_list|()
return|;
block|}
name|CHECK_EQ
argument_list|(
name|id
operator|&
operator|(
operator|(
operator|(
name|u32
operator|)
operator|-
literal|1
operator|)
operator|>>
name|kReservedBits
operator|)
argument_list|,
name|id
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// High kPartBits contain part id, so we need to scan at most kPartSize lists.
end_comment

begin_decl_stmt
name|uptr
name|part
init|=
name|id
operator|>>
name|kPartShift
decl_stmt|;
end_decl_stmt

begin_for
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|kPartSize
condition|;
name|i
operator|++
control|)
block|{
name|uptr
name|idx
init|=
name|part
operator|*
name|kPartSize
operator|+
name|i
decl_stmt|;
name|CHECK_LT
argument_list|(
name|idx
argument_list|,
name|kTabSize
argument_list|)
expr_stmt|;
name|atomic_uintptr_t
modifier|*
name|p
init|=
operator|&
name|tab
index|[
name|idx
index|]
decl_stmt|;
name|uptr
name|v
init|=
name|atomic_load
argument_list|(
name|p
argument_list|,
name|memory_order_consume
argument_list|)
decl_stmt|;
name|Node
modifier|*
name|s
init|=
operator|(
name|Node
operator|*
operator|)
operator|(
name|v
operator|&
operator|~
literal|1
operator|)
decl_stmt|;
for|for
control|(
init|;
name|s
condition|;
name|s
operator|=
name|s
operator|->
name|link
control|)
block|{
if|if
condition|(
name|s
operator|->
name|id
operator|==
name|id
condition|)
block|{
return|return
name|s
operator|->
name|load
argument_list|()
return|;
block|}
block|}
block|}
end_for

begin_return
return|return
name|args_type
argument_list|()
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|Node
operator|,
name|int
name|kReservedBits
operator|,
name|int
name|kTabSizeLog
operator|>
name|void
name|StackDepotBase
operator|<
name|Node
operator|,
name|kReservedBits
operator|,
name|kTabSizeLog
operator|>
operator|::
name|LockAll
argument_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|kTabSize
condition|;
operator|++
name|i
control|)
block|{
name|lock
argument_list|(
operator|&
name|tab
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|Node
operator|,
name|int
name|kReservedBits
operator|,
name|int
name|kTabSizeLog
operator|>
name|void
name|StackDepotBase
operator|<
name|Node
operator|,
name|kReservedBits
operator|,
name|kTabSizeLog
operator|>
operator|::
name|UnlockAll
argument_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|kTabSize
condition|;
operator|++
name|i
control|)
block|{
name|atomic_uintptr_t
modifier|*
name|p
init|=
operator|&
name|tab
index|[
name|i
index|]
decl_stmt|;
name|uptr
name|s
init|=
name|atomic_load
argument_list|(
name|p
argument_list|,
name|memory_order_relaxed
argument_list|)
decl_stmt|;
name|unlock
argument_list|(
name|p
argument_list|,
operator|(
name|Node
operator|*
operator|)
operator|(
name|s
operator|&
operator|~
literal|1UL
operator|)
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_comment
unit|}  }
comment|// namespace __sanitizer
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// SANITIZER_STACKDEPOTBASE_H
end_comment

end_unit

