begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- sanitizer_allocator_primary32.h -------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Part of the Sanitizer Allocator.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SANITIZER_ALLOCATOR_H
end_ifndef

begin_error
error|#
directive|error
error|This file must be included inside sanitizer_allocator.h
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|SizeClassAllocator
operator|>
expr|struct
name|SizeClassAllocator32LocalCache
expr_stmt|;
end_expr_stmt

begin_comment
comment|// SizeClassAllocator32 -- allocator for 32-bit address space.
end_comment

begin_comment
comment|// This allocator can theoretically be used on 64-bit arch, but there it is less
end_comment

begin_comment
comment|// efficient than SizeClassAllocator64.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// [kSpaceBeg, kSpaceBeg + kSpaceSize) is the range of addresses which can
end_comment

begin_comment
comment|// be returned by MmapOrDie().
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Region:
end_comment

begin_comment
comment|//   a result of a single call to MmapAlignedOrDieOnFatalError(kRegionSize,
end_comment

begin_comment
comment|//                                                             kRegionSize).
end_comment

begin_comment
comment|// Since the regions are aligned by kRegionSize, there are exactly
end_comment

begin_comment
comment|// kNumPossibleRegions possible regions in the address space and so we keep
end_comment

begin_comment
comment|// a ByteMap possible_regions to store the size classes of each Region.
end_comment

begin_comment
comment|// 0 size class means the region is not used by the allocator.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// One Region is used to allocate chunks of a single size class.
end_comment

begin_comment
comment|// A Region looks like this:
end_comment

begin_comment
comment|// UserChunk1 .. UserChunkN<gap> MetaChunkN .. MetaChunk1
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// In order to avoid false sharing the objects of this class should be
end_comment

begin_comment
comment|// chache-line aligned.
end_comment

begin_struct
struct|struct
name|SizeClassAllocator32FlagMasks
block|{
comment|//  Bit masks.
enum|enum
block|{
name|kRandomShuffleChunks
init|=
literal|1
block|,   }
enum|;
block|}
struct|;
end_struct

begin_expr_stmt
name|template
operator|<
name|class
name|Params
operator|>
name|class
name|SizeClassAllocator32
block|{
name|public
operator|:
specifier|static
specifier|const
name|uptr
name|kSpaceBeg
operator|=
name|Params
operator|::
name|kSpaceBeg
block|;
specifier|static
specifier|const
name|u64
name|kSpaceSize
operator|=
name|Params
operator|::
name|kSpaceSize
block|;
specifier|static
specifier|const
name|uptr
name|kMetadataSize
operator|=
name|Params
operator|::
name|kMetadataSize
block|;
typedef|typedef
name|typename
name|Params
operator|::
name|SizeClassMap
name|SizeClassMap
expr_stmt|;
specifier|static
specifier|const
name|uptr
name|kRegionSizeLog
operator|=
name|Params
operator|::
name|kRegionSizeLog
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|Params
operator|::
name|ByteMap
name|ByteMap
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|Params
operator|::
name|MapUnmapCallback
name|MapUnmapCallback
expr_stmt|;
end_typedef

begin_decl_stmt
specifier|static
specifier|const
name|bool
name|kRandomShuffleChunks
init|=
name|Params
operator|::
name|kFlags
operator|&
name|SizeClassAllocator32FlagMasks
operator|::
name|kRandomShuffleChunks
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|TransferBatch
block|{
specifier|static
specifier|const
name|uptr
name|kMaxNumCached
init|=
name|SizeClassMap
operator|::
name|kMaxNumCachedHint
operator|-
literal|2
decl_stmt|;
name|void
name|SetFromArray
parameter_list|(
name|uptr
name|region_beg_unused
parameter_list|,
name|void
modifier|*
name|batch
index|[]
parameter_list|,
name|uptr
name|count
parameter_list|)
block|{
name|count_
operator|=
name|count
expr_stmt|;
name|CHECK_LE
argument_list|(
name|count_
argument_list|,
name|kMaxNumCached
argument_list|)
expr_stmt|;
for|for
control|(
name|uptr
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
name|batch_
index|[
name|i
index|]
operator|=
name|batch
index|[
name|i
index|]
expr_stmt|;
block|}
name|uptr
name|Count
argument_list|()
specifier|const
block|{
return|return
name|count_
return|;
block|}
name|void
name|Clear
parameter_list|()
block|{
name|count_
operator|=
literal|0
expr_stmt|;
block|}
name|void
name|Add
parameter_list|(
name|void
modifier|*
name|ptr
parameter_list|)
block|{
name|batch_
index|[
name|count_
operator|++
index|]
operator|=
name|ptr
expr_stmt|;
name|CHECK_LE
argument_list|(
name|count_
argument_list|,
name|kMaxNumCached
argument_list|)
expr_stmt|;
block|}
name|void
name|CopyToArray
parameter_list|(
name|void
modifier|*
name|to_batch
index|[]
parameter_list|)
block|{
for|for
control|(
name|uptr
name|i
init|=
literal|0
init|,
name|n
init|=
name|Count
argument_list|()
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
name|to_batch
index|[
name|i
index|]
operator|=
name|batch_
index|[
name|i
index|]
expr_stmt|;
block|}
comment|// How much memory do we need for a batch containing n elements.
specifier|static
name|uptr
name|AllocationSizeRequiredForNElements
parameter_list|(
name|uptr
name|n
parameter_list|)
block|{
return|return
sizeof|sizeof
argument_list|(
name|uptr
argument_list|)
operator|*
literal|2
operator|+
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
operator|*
name|n
return|;
block|}
specifier|static
name|uptr
name|MaxCached
parameter_list|(
name|uptr
name|class_id
parameter_list|)
block|{
return|return
name|Min
argument_list|(
name|kMaxNumCached
argument_list|,
name|SizeClassMap
operator|::
name|MaxCachedHint
argument_list|(
name|class_id
argument_list|)
argument_list|)
return|;
block|}
name|TransferBatch
modifier|*
name|next
decl_stmt|;
name|private
label|:
name|uptr
name|count_
decl_stmt|;
name|void
modifier|*
name|batch_
index|[
name|kMaxNumCached
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|static
specifier|const
name|uptr
name|kBatchSize
init|=
sizeof|sizeof
argument_list|(
name|TransferBatch
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|COMPILER_CHECK
argument_list|(
operator|(
name|kBatchSize
operator|&
operator|(
name|kBatchSize
operator|-
literal|1
operator|)
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|COMPILER_CHECK
argument_list|(
sizeof|sizeof
argument_list|(
name|TransferBatch
argument_list|)
operator|==
name|SizeClassMap
operator|::
name|kMaxNumCachedHint
operator|*
sizeof|sizeof
argument_list|(
name|uptr
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
specifier|static
name|uptr
name|ClassIdToSize
parameter_list|(
name|uptr
name|class_id
parameter_list|)
block|{
return|return
name|SizeClassMap
operator|::
name|Size
argument_list|(
name|class_id
argument_list|)
return|;
block|}
end_function

begin_typedef
typedef|typedef
name|SizeClassAllocator32
operator|<
name|Params
operator|>
name|ThisT
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|SizeClassAllocator32LocalCache
operator|<
name|ThisT
operator|>
name|AllocatorCache
expr_stmt|;
end_typedef

begin_function
name|void
name|Init
parameter_list|(
name|s32
name|release_to_os_interval_ms
parameter_list|)
block|{
name|possible_regions
operator|.
name|TestOnlyInit
argument_list|()
expr_stmt|;
name|internal_memset
argument_list|(
name|size_class_info_array
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|size_class_info_array
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|s32
name|ReleaseToOSIntervalMs
argument_list|()
specifier|const
block|{
return|return
name|kReleaseToOSIntervalNever
return|;
block|}
end_expr_stmt

begin_function
name|void
name|SetReleaseToOSIntervalMs
parameter_list|(
name|s32
name|release_to_os_interval_ms
parameter_list|)
block|{
comment|// This is empty here. Currently only implemented in 64-bit allocator.
block|}
end_function

begin_function
name|void
modifier|*
name|MapWithCallback
parameter_list|(
name|uptr
name|size
parameter_list|)
block|{
name|size
operator|=
name|RoundUpTo
argument_list|(
name|size
argument_list|,
name|GetPageSizeCached
argument_list|()
argument_list|)
expr_stmt|;
name|void
modifier|*
name|res
init|=
name|MmapOrDie
argument_list|(
name|size
argument_list|,
literal|"SizeClassAllocator32"
argument_list|)
decl_stmt|;
name|MapUnmapCallback
argument_list|()
operator|.
name|OnMap
argument_list|(
operator|(
name|uptr
operator|)
name|res
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function

begin_function
name|void
name|UnmapWithCallback
parameter_list|(
name|uptr
name|beg
parameter_list|,
name|uptr
name|size
parameter_list|)
block|{
name|MapUnmapCallback
argument_list|()
operator|.
name|OnUnmap
argument_list|(
name|beg
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|UnmapOrDie
argument_list|(
name|reinterpret_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|beg
operator|)
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|bool
name|CanAllocate
parameter_list|(
name|uptr
name|size
parameter_list|,
name|uptr
name|alignment
parameter_list|)
block|{
return|return
name|size
operator|<=
name|SizeClassMap
operator|::
name|kMaxSize
operator|&&
name|alignment
operator|<=
name|SizeClassMap
operator|::
name|kMaxSize
return|;
block|}
end_function

begin_function
name|void
modifier|*
name|GetMetaData
parameter_list|(
specifier|const
name|void
modifier|*
name|p
parameter_list|)
block|{
name|CHECK
argument_list|(
name|PointerIsMine
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|uptr
name|mem
init|=
name|reinterpret_cast
operator|<
name|uptr
operator|>
operator|(
name|p
operator|)
decl_stmt|;
name|uptr
name|beg
init|=
name|ComputeRegionBeg
argument_list|(
name|mem
argument_list|)
decl_stmt|;
name|uptr
name|size
init|=
name|ClassIdToSize
argument_list|(
name|GetSizeClass
argument_list|(
name|p
argument_list|)
argument_list|)
decl_stmt|;
name|u32
name|offset
init|=
name|mem
operator|-
name|beg
decl_stmt|;
name|uptr
name|n
init|=
name|offset
operator|/
operator|(
name|u32
operator|)
name|size
decl_stmt|;
comment|// 32-bit division
name|uptr
name|meta
init|=
operator|(
name|beg
operator|+
name|kRegionSize
operator|)
operator|-
operator|(
name|n
operator|+
literal|1
operator|)
operator|*
name|kMetadataSize
decl_stmt|;
return|return
name|reinterpret_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|meta
operator|)
return|;
block|}
end_function

begin_function
name|NOINLINE
name|TransferBatch
modifier|*
name|AllocateBatch
parameter_list|(
name|AllocatorStats
modifier|*
name|stat
parameter_list|,
name|AllocatorCache
modifier|*
name|c
parameter_list|,
name|uptr
name|class_id
parameter_list|)
block|{
name|CHECK_LT
argument_list|(
name|class_id
argument_list|,
name|kNumClasses
argument_list|)
expr_stmt|;
name|SizeClassInfo
modifier|*
name|sci
init|=
name|GetSizeClassInfo
argument_list|(
name|class_id
argument_list|)
decl_stmt|;
name|SpinMutexLock
name|l
argument_list|(
operator|&
name|sci
operator|->
name|mutex
argument_list|)
decl_stmt|;
if|if
condition|(
name|sci
operator|->
name|free_list
operator|.
name|empty
argument_list|()
operator|&&
name|UNLIKELY
argument_list|(
operator|!
name|PopulateFreeList
argument_list|(
name|stat
argument_list|,
name|c
argument_list|,
name|sci
argument_list|,
name|class_id
argument_list|)
argument_list|)
condition|)
return|return
name|nullptr
return|;
name|CHECK
argument_list|(
operator|!
name|sci
operator|->
name|free_list
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|TransferBatch
modifier|*
name|b
init|=
name|sci
operator|->
name|free_list
operator|.
name|front
argument_list|()
decl_stmt|;
name|sci
operator|->
name|free_list
operator|.
name|pop_front
argument_list|()
expr_stmt|;
return|return
name|b
return|;
block|}
end_function

begin_function
name|NOINLINE
name|void
name|DeallocateBatch
parameter_list|(
name|AllocatorStats
modifier|*
name|stat
parameter_list|,
name|uptr
name|class_id
parameter_list|,
name|TransferBatch
modifier|*
name|b
parameter_list|)
block|{
name|CHECK_LT
argument_list|(
name|class_id
argument_list|,
name|kNumClasses
argument_list|)
expr_stmt|;
name|SizeClassInfo
modifier|*
name|sci
init|=
name|GetSizeClassInfo
argument_list|(
name|class_id
argument_list|)
decl_stmt|;
name|SpinMutexLock
name|l
argument_list|(
operator|&
name|sci
operator|->
name|mutex
argument_list|)
decl_stmt|;
name|CHECK_GT
argument_list|(
name|b
operator|->
name|Count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sci
operator|->
name|free_list
operator|.
name|push_front
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|uptr
name|GetRegionBeginBySizeClass
parameter_list|(
name|uptr
name|class_id
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function

begin_function
name|bool
name|PointerIsMine
parameter_list|(
specifier|const
name|void
modifier|*
name|p
parameter_list|)
block|{
name|uptr
name|mem
init|=
name|reinterpret_cast
operator|<
name|uptr
operator|>
operator|(
name|p
operator|)
decl_stmt|;
if|if
condition|(
name|mem
operator|<
name|kSpaceBeg
operator|||
name|mem
operator|>=
name|kSpaceBeg
operator|+
name|kSpaceSize
condition|)
return|return
name|false
return|;
return|return
name|GetSizeClass
argument_list|(
name|p
argument_list|)
operator|!=
literal|0
return|;
block|}
end_function

begin_function
name|uptr
name|GetSizeClass
parameter_list|(
specifier|const
name|void
modifier|*
name|p
parameter_list|)
block|{
return|return
name|possible_regions
index|[
name|ComputeRegionId
argument_list|(
name|reinterpret_cast
operator|<
name|uptr
operator|>
operator|(
name|p
operator|)
argument_list|)
index|]
return|;
block|}
end_function

begin_function
name|void
modifier|*
name|GetBlockBegin
parameter_list|(
specifier|const
name|void
modifier|*
name|p
parameter_list|)
block|{
name|CHECK
argument_list|(
name|PointerIsMine
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|uptr
name|mem
init|=
name|reinterpret_cast
operator|<
name|uptr
operator|>
operator|(
name|p
operator|)
decl_stmt|;
name|uptr
name|beg
init|=
name|ComputeRegionBeg
argument_list|(
name|mem
argument_list|)
decl_stmt|;
name|uptr
name|size
init|=
name|ClassIdToSize
argument_list|(
name|GetSizeClass
argument_list|(
name|p
argument_list|)
argument_list|)
decl_stmt|;
name|u32
name|offset
init|=
name|mem
operator|-
name|beg
decl_stmt|;
name|u32
name|n
init|=
name|offset
operator|/
operator|(
name|u32
operator|)
name|size
decl_stmt|;
comment|// 32-bit division
name|uptr
name|res
init|=
name|beg
operator|+
operator|(
name|n
operator|*
operator|(
name|u32
operator|)
name|size
operator|)
decl_stmt|;
return|return
name|reinterpret_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|res
operator|)
return|;
block|}
end_function

begin_function
name|uptr
name|GetActuallyAllocatedSize
parameter_list|(
name|void
modifier|*
name|p
parameter_list|)
block|{
name|CHECK
argument_list|(
name|PointerIsMine
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ClassIdToSize
argument_list|(
name|GetSizeClass
argument_list|(
name|p
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
name|uptr
name|ClassID
parameter_list|(
name|uptr
name|size
parameter_list|)
block|{
return|return
name|SizeClassMap
operator|::
name|ClassID
argument_list|(
name|size
argument_list|)
return|;
block|}
end_function

begin_function
name|uptr
name|TotalMemoryUsed
parameter_list|()
block|{
comment|// No need to lock here.
name|uptr
name|res
init|=
literal|0
decl_stmt|;
for|for
control|(
name|uptr
name|i
init|=
literal|0
init|;
name|i
operator|<
name|kNumPossibleRegions
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|possible_regions
index|[
name|i
index|]
condition|)
name|res
operator|+=
name|kRegionSize
expr_stmt|;
return|return
name|res
return|;
block|}
end_function

begin_function
name|void
name|TestOnlyUnmap
parameter_list|()
block|{
for|for
control|(
name|uptr
name|i
init|=
literal|0
init|;
name|i
operator|<
name|kNumPossibleRegions
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|possible_regions
index|[
name|i
index|]
condition|)
name|UnmapWithCallback
argument_list|(
operator|(
name|i
operator|*
name|kRegionSize
operator|)
argument_list|,
name|kRegionSize
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|// ForceLock() and ForceUnlock() are needed to implement Darwin malloc zone
end_comment

begin_comment
comment|// introspection API.
end_comment

begin_function
name|void
name|ForceLock
parameter_list|()
block|{
for|for
control|(
name|uptr
name|i
init|=
literal|0
init|;
name|i
operator|<
name|kNumClasses
condition|;
name|i
operator|++
control|)
block|{
name|GetSizeClassInfo
argument_list|(
name|i
argument_list|)
operator|->
name|mutex
operator|.
name|Lock
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
name|void
name|ForceUnlock
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
name|kNumClasses
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|GetSizeClassInfo
argument_list|(
name|i
argument_list|)
operator|->
name|mutex
operator|.
name|Unlock
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|// Iterate over all existing chunks.
end_comment

begin_comment
comment|// The allocator must be locked when calling this function.
end_comment

begin_function
name|void
name|ForEachChunk
parameter_list|(
name|ForEachChunkCallback
name|callback
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
block|{
for|for
control|(
name|uptr
name|region
init|=
literal|0
init|;
name|region
operator|<
name|kNumPossibleRegions
condition|;
name|region
operator|++
control|)
if|if
condition|(
name|possible_regions
index|[
name|region
index|]
condition|)
block|{
name|uptr
name|chunk_size
init|=
name|ClassIdToSize
argument_list|(
name|possible_regions
index|[
name|region
index|]
argument_list|)
decl_stmt|;
name|uptr
name|max_chunks_in_region
init|=
name|kRegionSize
operator|/
operator|(
name|chunk_size
operator|+
name|kMetadataSize
operator|)
decl_stmt|;
name|uptr
name|region_beg
init|=
name|region
operator|*
name|kRegionSize
decl_stmt|;
for|for
control|(
name|uptr
name|chunk
init|=
name|region_beg
init|;
name|chunk
operator|<
name|region_beg
operator|+
name|max_chunks_in_region
operator|*
name|chunk_size
condition|;
name|chunk
operator|+=
name|chunk_size
control|)
block|{
comment|// Too slow: CHECK_EQ((void *)chunk, GetBlockBegin((void *)chunk));
name|callback
argument_list|(
name|chunk
argument_list|,
name|arg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
name|void
name|PrintStats
parameter_list|()
block|{   }
end_function

begin_function
specifier|static
name|uptr
name|AdditionalSize
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
end_function

begin_typedef
typedef|typedef
name|SizeClassMap
name|SizeClassMapT
typedef|;
end_typedef

begin_decl_stmt
specifier|static
specifier|const
name|uptr
name|kNumClasses
init|=
name|SizeClassMap
operator|::
name|kNumClasses
decl_stmt|;
end_decl_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
specifier|static
specifier|const
name|uptr
name|kRegionSize
init|=
literal|1
operator|<<
name|kRegionSizeLog
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|uptr
name|kNumPossibleRegions
init|=
name|kSpaceSize
operator|/
name|kRegionSize
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|SizeClassInfo
block|{
name|SpinMutex
name|mutex
decl_stmt|;
name|IntrusiveList
operator|<
name|TransferBatch
operator|>
name|free_list
expr_stmt|;
name|char
name|padding
index|[
name|kCacheLineSize
operator|-
sizeof|sizeof
argument_list|(
name|uptr
argument_list|)
operator|-
sizeof|sizeof
argument_list|(
name|IntrusiveList
operator|<
name|TransferBatch
operator|>
argument_list|)
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_expr_stmt
name|COMPILER_CHECK
argument_list|(
sizeof|sizeof
argument_list|(
name|SizeClassInfo
argument_list|)
operator|==
name|kCacheLineSize
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
name|uptr
name|ComputeRegionId
parameter_list|(
name|uptr
name|mem
parameter_list|)
block|{
name|uptr
name|res
init|=
name|mem
operator|>>
name|kRegionSizeLog
decl_stmt|;
name|CHECK_LT
argument_list|(
name|res
argument_list|,
name|kNumPossibleRegions
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function

begin_function
name|uptr
name|ComputeRegionBeg
parameter_list|(
name|uptr
name|mem
parameter_list|)
block|{
return|return
name|mem
operator|&
operator|~
operator|(
name|kRegionSize
operator|-
literal|1
operator|)
return|;
block|}
end_function

begin_function
name|uptr
name|AllocateRegion
parameter_list|(
name|AllocatorStats
modifier|*
name|stat
parameter_list|,
name|uptr
name|class_id
parameter_list|)
block|{
name|CHECK_LT
argument_list|(
name|class_id
argument_list|,
name|kNumClasses
argument_list|)
expr_stmt|;
name|uptr
name|res
init|=
name|reinterpret_cast
operator|<
name|uptr
operator|>
operator|(
name|MmapAlignedOrDieOnFatalError
argument_list|(
name|kRegionSize
argument_list|,
name|kRegionSize
argument_list|,
literal|"SizeClassAllocator32"
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|UNLIKELY
argument_list|(
operator|!
name|res
argument_list|)
condition|)
return|return
literal|0
return|;
name|MapUnmapCallback
argument_list|()
operator|.
name|OnMap
argument_list|(
name|res
argument_list|,
name|kRegionSize
argument_list|)
expr_stmt|;
name|stat
operator|->
name|Add
argument_list|(
name|AllocatorStatMapped
argument_list|,
name|kRegionSize
argument_list|)
expr_stmt|;
name|CHECK_EQ
argument_list|(
literal|0U
argument_list|,
operator|(
name|res
operator|&
operator|(
name|kRegionSize
operator|-
literal|1
operator|)
operator|)
argument_list|)
expr_stmt|;
name|possible_regions
operator|.
name|set
argument_list|(
name|ComputeRegionId
argument_list|(
name|res
argument_list|)
argument_list|,
name|static_cast
operator|<
name|u8
operator|>
operator|(
name|class_id
operator|)
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function

begin_function
name|SizeClassInfo
modifier|*
name|GetSizeClassInfo
parameter_list|(
name|uptr
name|class_id
parameter_list|)
block|{
name|CHECK_LT
argument_list|(
name|class_id
argument_list|,
name|kNumClasses
argument_list|)
expr_stmt|;
return|return
operator|&
name|size_class_info_array
index|[
name|class_id
index|]
return|;
block|}
end_function

begin_function
name|bool
name|PopulateFreeList
parameter_list|(
name|AllocatorStats
modifier|*
name|stat
parameter_list|,
name|AllocatorCache
modifier|*
name|c
parameter_list|,
name|SizeClassInfo
modifier|*
name|sci
parameter_list|,
name|uptr
name|class_id
parameter_list|)
block|{
name|uptr
name|size
init|=
name|ClassIdToSize
argument_list|(
name|class_id
argument_list|)
decl_stmt|;
name|uptr
name|reg
init|=
name|AllocateRegion
argument_list|(
name|stat
argument_list|,
name|class_id
argument_list|)
decl_stmt|;
if|if
condition|(
name|UNLIKELY
argument_list|(
operator|!
name|reg
argument_list|)
condition|)
return|return
name|false
return|;
name|uptr
name|n_chunks
init|=
name|kRegionSize
operator|/
operator|(
name|size
operator|+
name|kMetadataSize
operator|)
decl_stmt|;
name|uptr
name|max_count
init|=
name|TransferBatch
operator|::
name|MaxCached
argument_list|(
name|class_id
argument_list|)
decl_stmt|;
name|TransferBatch
modifier|*
name|b
init|=
name|nullptr
decl_stmt|;
for|for
control|(
name|uptr
name|i
init|=
name|reg
init|;
name|i
operator|<
name|reg
operator|+
name|n_chunks
operator|*
name|size
condition|;
name|i
operator|+=
name|size
control|)
block|{
if|if
condition|(
operator|!
name|b
condition|)
block|{
name|b
operator|=
name|c
operator|->
name|CreateBatch
argument_list|(
name|class_id
argument_list|,
name|this
argument_list|,
operator|(
name|TransferBatch
operator|*
operator|)
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|b
condition|)
return|return
name|false
return|;
name|b
operator|->
name|Clear
argument_list|()
expr_stmt|;
block|}
name|b
operator|->
name|Add
argument_list|(
operator|(
name|void
operator|*
operator|)
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
operator|->
name|Count
argument_list|()
operator|==
name|max_count
condition|)
block|{
name|CHECK_GT
argument_list|(
name|b
operator|->
name|Count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sci
operator|->
name|free_list
operator|.
name|push_back
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|b
operator|=
name|nullptr
expr_stmt|;
block|}
block|}
if|if
condition|(
name|b
condition|)
block|{
name|CHECK_GT
argument_list|(
name|b
operator|->
name|Count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sci
operator|->
name|free_list
operator|.
name|push_back
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
return|return
name|true
return|;
block|}
end_function

begin_decl_stmt
name|ByteMap
name|possible_regions
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|SizeClassInfo
name|size_class_info_array
index|[
name|kNumClasses
index|]
decl_stmt|;
end_decl_stmt

unit|};
end_unit

