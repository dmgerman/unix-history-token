begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- sanitizer_libc.h ----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is shared between AddressSanitizer and ThreadSanitizer
end_comment

begin_comment
comment|// run-time libraries.
end_comment

begin_comment
comment|// These tools can not use some of the libc functions directly because those
end_comment

begin_comment
comment|// functions are intercepted. Instead, we implement a tiny subset of libc here.
end_comment

begin_comment
comment|// FIXME: Some of functions declared in this file are in fact POSIX, not libc.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SANITIZER_LIBC_H
end_ifndef

begin_define
define|#
directive|define
name|SANITIZER_LIBC_H
end_define

begin_comment
comment|// ----------- ATTENTION -------------
end_comment

begin_comment
comment|// This header should NOT include any other headers from sanitizer runtime.
end_comment

begin_include
include|#
directive|include
file|"sanitizer_internal_defs.h"
end_include

begin_decl_stmt
name|namespace
name|__sanitizer
block|{
comment|// internal_X() is a custom implementation of X() for use in RTL.
comment|// String functions
name|s64
name|internal_atoll
parameter_list|(
specifier|const
name|char
modifier|*
name|nptr
parameter_list|)
function_decl|;
name|void
modifier|*
name|internal_memchr
parameter_list|(
specifier|const
name|void
modifier|*
name|s
parameter_list|,
name|int
name|c
parameter_list|,
name|uptr
name|n
parameter_list|)
function_decl|;
name|void
modifier|*
name|internal_memrchr
parameter_list|(
specifier|const
name|void
modifier|*
name|s
parameter_list|,
name|int
name|c
parameter_list|,
name|uptr
name|n
parameter_list|)
function_decl|;
name|int
name|internal_memcmp
parameter_list|(
specifier|const
name|void
modifier|*
name|s1
parameter_list|,
specifier|const
name|void
modifier|*
name|s2
parameter_list|,
name|uptr
name|n
parameter_list|)
function_decl|;
name|void
modifier|*
name|internal_memcpy
parameter_list|(
name|void
modifier|*
name|dest
parameter_list|,
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|uptr
name|n
parameter_list|)
function_decl|;
name|void
modifier|*
name|internal_memmove
parameter_list|(
name|void
modifier|*
name|dest
parameter_list|,
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|uptr
name|n
parameter_list|)
function_decl|;
comment|// Set [s, s + n) to 0. Both s and n should be 16-aligned.
name|void
name|internal_bzero_aligned16
parameter_list|(
name|void
modifier|*
name|s
parameter_list|,
name|uptr
name|n
parameter_list|)
function_decl|;
comment|// Should not be used in performance-critical places.
name|void
modifier|*
name|internal_memset
parameter_list|(
name|void
modifier|*
name|s
parameter_list|,
name|int
name|c
parameter_list|,
name|uptr
name|n
parameter_list|)
function_decl|;
name|char
modifier|*
name|internal_strchr
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|,
name|int
name|c
parameter_list|)
function_decl|;
name|char
modifier|*
name|internal_strchrnul
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|,
name|int
name|c
parameter_list|)
function_decl|;
name|int
name|internal_strcmp
parameter_list|(
specifier|const
name|char
modifier|*
name|s1
parameter_list|,
specifier|const
name|char
modifier|*
name|s2
parameter_list|)
function_decl|;
name|uptr
name|internal_strcspn
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|,
specifier|const
name|char
modifier|*
name|reject
parameter_list|)
function_decl|;
name|char
modifier|*
name|internal_strdup
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|)
function_decl|;
name|char
modifier|*
name|internal_strndup
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|,
name|uptr
name|n
parameter_list|)
function_decl|;
name|uptr
name|internal_strlen
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|)
function_decl|;
name|char
modifier|*
name|internal_strncat
parameter_list|(
name|char
modifier|*
name|dst
parameter_list|,
specifier|const
name|char
modifier|*
name|src
parameter_list|,
name|uptr
name|n
parameter_list|)
function_decl|;
name|int
name|internal_strncmp
parameter_list|(
specifier|const
name|char
modifier|*
name|s1
parameter_list|,
specifier|const
name|char
modifier|*
name|s2
parameter_list|,
name|uptr
name|n
parameter_list|)
function_decl|;
name|char
modifier|*
name|internal_strncpy
parameter_list|(
name|char
modifier|*
name|dst
parameter_list|,
specifier|const
name|char
modifier|*
name|src
parameter_list|,
name|uptr
name|n
parameter_list|)
function_decl|;
name|uptr
name|internal_strnlen
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|,
name|uptr
name|maxlen
parameter_list|)
function_decl|;
name|char
modifier|*
name|internal_strrchr
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|,
name|int
name|c
parameter_list|)
function_decl|;
comment|// This is O(N^2), but we are not using it in hot places.
name|char
modifier|*
name|internal_strstr
parameter_list|(
specifier|const
name|char
modifier|*
name|haystack
parameter_list|,
specifier|const
name|char
modifier|*
name|needle
parameter_list|)
function_decl|;
comment|// Works only for base=10 and doesn't set errno.
name|s64
name|internal_simple_strtoll
parameter_list|(
specifier|const
name|char
modifier|*
name|nptr
parameter_list|,
name|char
modifier|*
modifier|*
name|endptr
parameter_list|,
name|int
name|base
parameter_list|)
function_decl|;
name|int
name|internal_snprintf
parameter_list|(
name|char
modifier|*
name|buffer
parameter_list|,
name|uptr
name|length
parameter_list|,
specifier|const
name|char
modifier|*
name|format
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
comment|// Return true if all bytes in [mem, mem+size) are zero.
comment|// Optimized for the case when the result is true.
name|bool
name|mem_is_zero
parameter_list|(
specifier|const
name|char
modifier|*
name|mem
parameter_list|,
name|uptr
name|size
parameter_list|)
function_decl|;
comment|// I/O
specifier|const
name|fd_t
name|kInvalidFd
init|=
operator|(
name|fd_t
operator|)
operator|-
literal|1
decl_stmt|;
specifier|const
name|fd_t
name|kStdinFd
init|=
literal|0
decl_stmt|;
specifier|const
name|fd_t
name|kStdoutFd
init|=
operator|(
name|fd_t
operator|)
literal|1
decl_stmt|;
specifier|const
name|fd_t
name|kStderrFd
init|=
operator|(
name|fd_t
operator|)
literal|2
decl_stmt|;
name|uptr
name|internal_ftruncate
parameter_list|(
name|fd_t
name|fd
parameter_list|,
name|uptr
name|size
parameter_list|)
function_decl|;
comment|// OS
name|void
name|NORETURN
name|internal__exit
parameter_list|(
name|int
name|exitcode
parameter_list|)
function_decl|;
name|uptr
name|internal_getpid
parameter_list|()
function_decl|;
name|uptr
name|internal_getppid
parameter_list|()
function_decl|;
comment|// Threading
name|uptr
name|internal_sched_yield
parameter_list|()
function_decl|;
comment|// Error handling
name|bool
name|internal_iserror
parameter_list|(
name|uptr
name|retval
parameter_list|,
name|int
modifier|*
name|rverrno
init|=
literal|0
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_comment
comment|// namespace __sanitizer
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// SANITIZER_LIBC_H
end_comment

end_unit

