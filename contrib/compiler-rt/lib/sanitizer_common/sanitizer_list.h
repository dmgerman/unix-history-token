begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- sanitizer_list.h ----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file contains implementation of a list class to be used by
end_comment

begin_comment
comment|// ThreadSanitizer, etc run-times.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SANITIZER_LIST_H
end_ifndef

begin_define
define|#
directive|define
name|SANITIZER_LIST_H
end_define

begin_include
include|#
directive|include
file|"sanitizer_internal_defs.h"
end_include

begin_decl_stmt
name|namespace
name|__sanitizer
block|{
comment|// Intrusive singly-linked list with size(), push_back(), push_front()
comment|// pop_front(), append_front() and append_back().
comment|// This class should be a POD (so that it can be put into TLS)
comment|// and an object with all zero fields should represent a valid empty list.
comment|// This class does not have a CTOR, so clear() should be called on all
comment|// non-zero-initialized objects before using.
name|template
operator|<
name|class
name|Item
operator|>
expr|struct
name|IntrusiveList
block|{
name|friend
name|class
name|Iterator
block|;
name|void
name|clear
argument_list|()
block|{
name|first_
operator|=
name|last_
operator|=
name|nullptr
block|;
name|size_
operator|=
literal|0
block|;   }
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|size_
operator|==
literal|0
return|;
block|}
name|uptr
name|size
argument_list|()
specifier|const
block|{
return|return
name|size_
return|;
block|}
name|void
name|push_back
argument_list|(
argument|Item *x
argument_list|)
block|{
if|if
condition|(
name|empty
argument_list|()
condition|)
block|{
name|x
operator|->
name|next
operator|=
name|nullptr
expr_stmt|;
name|first_
operator|=
name|last_
operator|=
name|x
expr_stmt|;
name|size_
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|x
operator|->
name|next
operator|=
name|nullptr
expr_stmt|;
name|last_
operator|->
name|next
operator|=
name|x
expr_stmt|;
name|last_
operator|=
name|x
expr_stmt|;
name|size_
operator|++
expr_stmt|;
block|}
block|}
name|void
name|push_front
argument_list|(
argument|Item *x
argument_list|)
block|{
if|if
condition|(
name|empty
argument_list|()
condition|)
block|{
name|x
operator|->
name|next
operator|=
name|nullptr
expr_stmt|;
name|first_
operator|=
name|last_
operator|=
name|x
expr_stmt|;
name|size_
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|x
operator|->
name|next
operator|=
name|first_
expr_stmt|;
name|first_
operator|=
name|x
expr_stmt|;
name|size_
operator|++
expr_stmt|;
block|}
block|}
name|void
name|pop_front
argument_list|()
block|{
name|CHECK
argument_list|(
operator|!
name|empty
argument_list|()
argument_list|)
block|;
name|first_
operator|=
name|first_
operator|->
name|next
block|;
if|if
condition|(
operator|!
name|first_
condition|)
name|last_
operator|=
name|nullptr
expr_stmt|;
name|size_
operator|--
block|;   }
name|void
name|extract
argument_list|(
argument|Item *prev
argument_list|,
argument|Item *x
argument_list|)
block|{
name|CHECK
argument_list|(
operator|!
name|empty
argument_list|()
argument_list|)
block|;
name|CHECK_NE
argument_list|(
name|prev
argument_list|,
name|nullptr
argument_list|)
block|;
name|CHECK_NE
argument_list|(
name|x
argument_list|,
name|nullptr
argument_list|)
block|;
name|CHECK_EQ
argument_list|(
name|prev
operator|->
name|next
argument_list|,
name|x
argument_list|)
block|;
name|prev
operator|->
name|next
operator|=
name|x
operator|->
name|next
block|;
if|if
condition|(
name|last_
operator|==
name|x
condition|)
name|last_
operator|=
name|prev
expr_stmt|;
name|size_
operator|--
expr_stmt|;
block|}
end_decl_stmt

begin_function
name|Item
modifier|*
name|front
parameter_list|()
block|{
return|return
name|first_
return|;
block|}
end_function

begin_expr_stmt
specifier|const
name|Item
operator|*
name|front
argument_list|()
specifier|const
block|{
return|return
name|first_
return|;
block|}
end_expr_stmt

begin_function
name|Item
modifier|*
name|back
parameter_list|()
block|{
return|return
name|last_
return|;
block|}
end_function

begin_expr_stmt
specifier|const
name|Item
operator|*
name|back
argument_list|()
specifier|const
block|{
return|return
name|last_
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|void
name|append_front
argument_list|(
name|IntrusiveList
operator|<
name|Item
operator|>
operator|*
name|l
argument_list|)
block|{
name|CHECK_NE
argument_list|(
name|this
argument_list|,
name|l
argument_list|)
expr_stmt|;
if|if
condition|(
name|l
operator|->
name|empty
argument_list|()
condition|)
return|return;
if|if
condition|(
name|empty
argument_list|()
condition|)
block|{
operator|*
name|this
operator|=
operator|*
name|l
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|l
operator|->
name|empty
argument_list|()
condition|)
block|{
name|l
operator|->
name|last_
operator|->
name|next
operator|=
name|first_
expr_stmt|;
name|first_
operator|=
name|l
operator|->
name|first_
expr_stmt|;
name|size_
operator|+=
name|l
operator|->
name|size
argument_list|()
expr_stmt|;
block|}
name|l
operator|->
name|clear
argument_list|()
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|void
name|append_back
argument_list|(
name|IntrusiveList
operator|<
name|Item
operator|>
operator|*
name|l
argument_list|)
block|{
name|CHECK_NE
argument_list|(
name|this
argument_list|,
name|l
argument_list|)
expr_stmt|;
if|if
condition|(
name|l
operator|->
name|empty
argument_list|()
condition|)
return|return;
if|if
condition|(
name|empty
argument_list|()
condition|)
block|{
operator|*
name|this
operator|=
operator|*
name|l
expr_stmt|;
block|}
else|else
block|{
name|last_
operator|->
name|next
operator|=
name|l
operator|->
name|first_
expr_stmt|;
name|last_
operator|=
name|l
operator|->
name|last_
expr_stmt|;
name|size_
operator|+=
name|l
operator|->
name|size
argument_list|()
expr_stmt|;
block|}
name|l
operator|->
name|clear
argument_list|()
expr_stmt|;
block|}
end_decl_stmt

begin_function
name|void
name|CheckConsistency
parameter_list|()
block|{
if|if
condition|(
name|size_
operator|==
literal|0
condition|)
block|{
name|CHECK_EQ
argument_list|(
name|first_
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|CHECK_EQ
argument_list|(
name|last_
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|uptr
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Item
modifier|*
name|i
init|=
name|first_
init|;
condition|;
name|i
operator|=
name|i
operator|->
name|next
control|)
block|{
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|last_
condition|)
break|break;
block|}
name|CHECK_EQ
argument_list|(
name|size
argument_list|()
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|CHECK_EQ
argument_list|(
name|last_
operator|->
name|next
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|ItemTy
operator|>
name|class
name|IteratorBase
block|{
name|public
operator|:
name|explicit
name|IteratorBase
argument_list|(
name|ItemTy
operator|*
name|current
argument_list|)
operator|:
name|current_
argument_list|(
argument|current
argument_list|)
block|{}
name|IteratorBase
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|current_
operator|=
name|current_
operator|->
name|next
block|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
name|IteratorBase
name|other
operator|)
specifier|const
block|{
return|return
name|current_
operator|!=
name|other
operator|.
name|current_
return|;
block|}
end_expr_stmt

begin_function
name|ItemTy
modifier|&
name|operator
modifier|*
parameter_list|()
block|{
return|return
operator|*
name|current_
return|;
block|}
end_function

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|ItemTy
modifier|*
name|current_
decl_stmt|;
end_decl_stmt

begin_typedef
unit|};
typedef|typedef
name|IteratorBase
operator|<
name|Item
operator|>
name|Iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|IteratorBase
operator|<
specifier|const
name|Item
operator|>
name|ConstIterator
expr_stmt|;
end_typedef

begin_function
name|Iterator
name|begin
parameter_list|()
block|{
return|return
name|Iterator
argument_list|(
name|first_
argument_list|)
return|;
block|}
end_function

begin_function
name|Iterator
name|end
parameter_list|()
block|{
return|return
name|Iterator
argument_list|(
literal|0
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|ConstIterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|ConstIterator
argument_list|(
name|first_
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|ConstIterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|ConstIterator
argument_list|(
literal|0
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// private, don't use directly.
end_comment

begin_decl_stmt
name|uptr
name|size_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|Item
modifier|*
name|first_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|Item
modifier|*
name|last_
decl_stmt|;
end_decl_stmt

begin_comment
unit|};  }
comment|// namespace __sanitizer
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// SANITIZER_LIST_H
end_comment

end_unit

