begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- sanitizer_posix.h -------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is shared between AddressSanitizer and ThreadSanitizer
end_comment

begin_comment
comment|// run-time libraries and declares some useful POSIX-specific functions.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SANITIZER_POSIX_H
end_ifndef

begin_define
define|#
directive|define
name|SANITIZER_POSIX_H
end_define

begin_comment
comment|// ----------- ATTENTION -------------
end_comment

begin_comment
comment|// This header should NOT include any other headers from sanitizer runtime.
end_comment

begin_include
include|#
directive|include
file|"sanitizer_internal_defs.h"
end_include

begin_include
include|#
directive|include
file|"sanitizer_platform_limits_posix.h"
end_include

begin_if
if|#
directive|if
operator|!
name|SANITIZER_POSIX
end_if

begin_comment
comment|// Make it hard to accidentally use any of functions declared in this file:
end_comment

begin_error
error|#
directive|error
error|This file should only be included on POSIX
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
name|namespace
name|__sanitizer
block|{
comment|// I/O
comment|// Don't use directly, use __sanitizer::OpenFile() instead.
name|uptr
name|internal_open
parameter_list|(
specifier|const
name|char
modifier|*
name|filename
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
name|uptr
name|internal_open
parameter_list|(
specifier|const
name|char
modifier|*
name|filename
parameter_list|,
name|int
name|flags
parameter_list|,
name|u32
name|mode
parameter_list|)
function_decl|;
name|uptr
name|internal_close
parameter_list|(
name|fd_t
name|fd
parameter_list|)
function_decl|;
name|uptr
name|internal_read
parameter_list|(
name|fd_t
name|fd
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|uptr
name|count
parameter_list|)
function_decl|;
name|uptr
name|internal_write
parameter_list|(
name|fd_t
name|fd
parameter_list|,
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|uptr
name|count
parameter_list|)
function_decl|;
comment|// Memory
name|uptr
name|internal_mmap
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|,
name|uptr
name|length
parameter_list|,
name|int
name|prot
parameter_list|,
name|int
name|flags
parameter_list|,
name|int
name|fd
parameter_list|,
name|OFF_T
name|offset
parameter_list|)
function_decl|;
name|uptr
name|internal_munmap
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|,
name|uptr
name|length
parameter_list|)
function_decl|;
name|int
name|internal_mprotect
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|,
name|uptr
name|length
parameter_list|,
name|int
name|prot
parameter_list|)
function_decl|;
comment|// OS
name|uptr
name|internal_filesize
parameter_list|(
name|fd_t
name|fd
parameter_list|)
function_decl|;
comment|// -1 on error.
name|uptr
name|internal_stat
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|)
function_decl|;
name|uptr
name|internal_lstat
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|)
function_decl|;
name|uptr
name|internal_fstat
parameter_list|(
name|fd_t
name|fd
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|)
function_decl|;
name|uptr
name|internal_dup2
parameter_list|(
name|int
name|oldfd
parameter_list|,
name|int
name|newfd
parameter_list|)
function_decl|;
name|uptr
name|internal_readlink
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|,
name|uptr
name|bufsize
parameter_list|)
function_decl|;
name|uptr
name|internal_unlink
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
name|uptr
name|internal_rename
parameter_list|(
specifier|const
name|char
modifier|*
name|oldpath
parameter_list|,
specifier|const
name|char
modifier|*
name|newpath
parameter_list|)
function_decl|;
name|uptr
name|internal_lseek
parameter_list|(
name|fd_t
name|fd
parameter_list|,
name|OFF_T
name|offset
parameter_list|,
name|int
name|whence
parameter_list|)
function_decl|;
name|uptr
name|internal_ptrace
parameter_list|(
name|int
name|request
parameter_list|,
name|int
name|pid
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
name|uptr
name|internal_waitpid
parameter_list|(
name|int
name|pid
parameter_list|,
name|int
modifier|*
name|status
parameter_list|,
name|int
name|options
parameter_list|)
function_decl|;
name|int
name|internal_fork
parameter_list|()
function_decl|;
name|int
name|internal_forkpty
parameter_list|(
name|int
modifier|*
name|amaster
parameter_list|)
function_decl|;
comment|// These functions call appropriate pthread_ functions directly, bypassing
comment|// the interceptor. They are weak and may not be present in some tools.
name|SANITIZER_WEAK_ATTRIBUTE
name|int
name|real_pthread_create
parameter_list|(
name|void
modifier|*
name|th
parameter_list|,
name|void
modifier|*
name|attr
parameter_list|,
name|void
modifier|*
function_decl|(
modifier|*
name|callback
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
name|param
parameter_list|)
function_decl|;
name|SANITIZER_WEAK_ATTRIBUTE
name|int
name|real_pthread_join
parameter_list|(
name|void
modifier|*
name|th
parameter_list|,
name|void
modifier|*
modifier|*
name|ret
parameter_list|)
function_decl|;
define|#
directive|define
name|DEFINE_REAL_PTHREAD_FUNCTIONS
define|\
value|namespace __sanitizer {                                                      \   int real_pthread_create(void *th, void *attr, void *(*callback)(void *),     \                           void *param) {                                       \     return REAL(pthread_create)(th, attr, callback, param);                    \   }                                                                            \   int real_pthread_join(void *th, void **ret) {                                \     return REAL(pthread_join(th, ret));                                        \   }                                                                            \   }
comment|// namespace __sanitizer
name|int
name|my_pthread_attr_getstack
parameter_list|(
name|void
modifier|*
name|attr
parameter_list|,
name|void
modifier|*
modifier|*
name|addr
parameter_list|,
name|uptr
modifier|*
name|size
parameter_list|)
function_decl|;
comment|// A routine named real_sigaction() must be implemented by each sanitizer in
comment|// order for internal_sigaction() to bypass interceptors.
name|int
name|internal_sigaction
parameter_list|(
name|int
name|signum
parameter_list|,
specifier|const
name|void
modifier|*
name|act
parameter_list|,
name|void
modifier|*
name|oldact
parameter_list|)
function_decl|;
name|void
name|internal_sigfillset
parameter_list|(
name|__sanitizer_sigset_t
modifier|*
name|set
parameter_list|)
function_decl|;
name|void
name|internal_sigemptyset
parameter_list|(
name|__sanitizer_sigset_t
modifier|*
name|set
parameter_list|)
function_decl|;
name|bool
name|internal_sigismember
parameter_list|(
name|__sanitizer_sigset_t
modifier|*
name|set
parameter_list|,
name|int
name|signum
parameter_list|)
function_decl|;
name|uptr
name|internal_execve
parameter_list|(
specifier|const
name|char
modifier|*
name|filename
parameter_list|,
name|char
modifier|*
specifier|const
name|argv
index|[]
parameter_list|,
name|char
modifier|*
specifier|const
name|envp
index|[]
parameter_list|)
function_decl|;
name|bool
name|IsStateDetached
parameter_list|(
name|int
name|state
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_comment
comment|// namespace __sanitizer
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// SANITIZER_POSIX_H
end_comment

end_unit

