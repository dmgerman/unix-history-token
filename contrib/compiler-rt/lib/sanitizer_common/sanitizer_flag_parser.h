begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- sanitizer_flag_parser.h ---------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is a part of ThreadSanitizer/AddressSanitizer runtime.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SANITIZER_FLAG_REGISTRY_H
end_ifndef

begin_define
define|#
directive|define
name|SANITIZER_FLAG_REGISTRY_H
end_define

begin_include
include|#
directive|include
file|"sanitizer_internal_defs.h"
end_include

begin_include
include|#
directive|include
file|"sanitizer_libc.h"
end_include

begin_include
include|#
directive|include
file|"sanitizer_common.h"
end_include

begin_decl_stmt
name|namespace
name|__sanitizer
block|{
name|class
name|FlagHandlerBase
block|{
name|public
label|:
name|virtual
name|bool
name|Parse
parameter_list|(
specifier|const
name|char
modifier|*
name|value
parameter_list|)
block|{
return|return
name|false
return|;
block|}
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|FlagHandler
operator|:
name|public
name|FlagHandlerBase
block|{
name|T
operator|*
name|t_
block|;
name|public
operator|:
name|explicit
name|FlagHandler
argument_list|(
name|T
operator|*
name|t
argument_list|)
operator|:
name|t_
argument_list|(
argument|t
argument_list|)
block|{}
name|bool
name|Parse
argument_list|(
argument|const char *value
argument_list|)
name|final
block|; }
expr_stmt|;
specifier|inline
name|bool
name|ParseBool
parameter_list|(
specifier|const
name|char
modifier|*
name|value
parameter_list|,
name|bool
modifier|*
name|b
parameter_list|)
block|{
if|if
condition|(
name|internal_strcmp
argument_list|(
name|value
argument_list|,
literal|"0"
argument_list|)
operator|==
literal|0
operator|||
name|internal_strcmp
argument_list|(
name|value
argument_list|,
literal|"no"
argument_list|)
operator|==
literal|0
operator|||
name|internal_strcmp
argument_list|(
name|value
argument_list|,
literal|"false"
argument_list|)
operator|==
literal|0
condition|)
block|{
operator|*
name|b
operator|=
name|false
expr_stmt|;
return|return
name|true
return|;
block|}
if|if
condition|(
name|internal_strcmp
argument_list|(
name|value
argument_list|,
literal|"1"
argument_list|)
operator|==
literal|0
operator|||
name|internal_strcmp
argument_list|(
name|value
argument_list|,
literal|"yes"
argument_list|)
operator|==
literal|0
operator|||
name|internal_strcmp
argument_list|(
name|value
argument_list|,
literal|"true"
argument_list|)
operator|==
literal|0
condition|)
block|{
operator|*
name|b
operator|=
name|true
expr_stmt|;
return|return
name|true
return|;
block|}
return|return
name|false
return|;
block|}
name|template
operator|<
operator|>
specifier|inline
name|bool
name|FlagHandler
operator|<
name|bool
operator|>
operator|::
name|Parse
argument_list|(
argument|const char *value
argument_list|)
block|{
if|if
condition|(
name|ParseBool
argument_list|(
name|value
argument_list|,
name|t_
argument_list|)
condition|)
return|return
name|true
return|;
name|Printf
argument_list|(
literal|"ERROR: Invalid value for bool option: '%s'\n"
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|template
operator|<
operator|>
specifier|inline
name|bool
name|FlagHandler
operator|<
name|HandleSignalMode
operator|>
operator|::
name|Parse
argument_list|(
argument|const char *value
argument_list|)
block|{
name|bool
name|b
block|;
if|if
condition|(
name|ParseBool
argument_list|(
name|value
argument_list|,
operator|&
name|b
argument_list|)
condition|)
block|{
operator|*
name|t_
operator|=
name|b
condition|?
name|kHandleSignalYes
else|:
name|kHandleSignalNo
expr_stmt|;
return|return
name|true
return|;
block|}
end_expr_stmt

begin_if
if|if
condition|(
name|internal_strcmp
argument_list|(
name|value
argument_list|,
literal|"2"
argument_list|)
operator|==
literal|0
operator|||
name|internal_strcmp
argument_list|(
name|value
argument_list|,
literal|"exclusive"
argument_list|)
operator|==
literal|0
condition|)
block|{
operator|*
name|t_
operator|=
name|kHandleSignalExclusive
expr_stmt|;
return|return
name|true
return|;
block|}
end_if

begin_expr_stmt
name|Printf
argument_list|(
literal|"ERROR: Invalid value for signal handler option: '%s'\n"
argument_list|,
name|value
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|false
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
operator|>
specifier|inline
name|bool
name|FlagHandler
operator|<
specifier|const
name|char
operator|*
operator|>
operator|::
name|Parse
argument_list|(
argument|const char *value
argument_list|)
block|{
operator|*
name|t_
operator|=
name|internal_strdup
argument_list|(
name|value
argument_list|)
block|;
return|return
name|true
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
operator|>
specifier|inline
name|bool
name|FlagHandler
operator|<
name|int
operator|>
operator|::
name|Parse
argument_list|(
argument|const char *value
argument_list|)
block|{
name|char
operator|*
name|value_end
block|;
operator|*
name|t_
operator|=
name|internal_simple_strtoll
argument_list|(
name|value
argument_list|,
operator|&
name|value_end
argument_list|,
literal|10
argument_list|)
block|;
name|bool
name|ok
operator|=
operator|*
name|value_end
operator|==
literal|0
block|;
if|if
condition|(
operator|!
name|ok
condition|)
name|Printf
argument_list|(
literal|"ERROR: Invalid value for int option: '%s'\n"
argument_list|,
name|value
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|ok
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
operator|>
specifier|inline
name|bool
name|FlagHandler
operator|<
name|uptr
operator|>
operator|::
name|Parse
argument_list|(
argument|const char *value
argument_list|)
block|{
name|char
operator|*
name|value_end
block|;
operator|*
name|t_
operator|=
name|internal_simple_strtoll
argument_list|(
name|value
argument_list|,
operator|&
name|value_end
argument_list|,
literal|10
argument_list|)
block|;
name|bool
name|ok
operator|=
operator|*
name|value_end
operator|==
literal|0
block|;
if|if
condition|(
operator|!
name|ok
condition|)
name|Printf
argument_list|(
literal|"ERROR: Invalid value for uptr option: '%s'\n"
argument_list|,
name|value
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|ok
return|;
end_return

begin_macro
unit|}  class
name|FlagParser
end_macro

begin_block
block|{
specifier|static
specifier|const
name|int
name|kMaxFlags
init|=
literal|200
decl_stmt|;
struct|struct
name|Flag
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
specifier|const
name|char
modifier|*
name|desc
decl_stmt|;
name|FlagHandlerBase
modifier|*
name|handler
decl_stmt|;
block|}
modifier|*
name|flags_
struct|;
name|int
name|n_flags_
decl_stmt|;
specifier|const
name|char
modifier|*
name|buf_
decl_stmt|;
name|uptr
name|pos_
decl_stmt|;
name|public
label|:
name|FlagParser
argument_list|()
expr_stmt|;
name|void
name|RegisterHandler
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|FlagHandlerBase
modifier|*
name|handler
parameter_list|,
specifier|const
name|char
modifier|*
name|desc
parameter_list|)
function_decl|;
name|void
name|ParseString
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|)
function_decl|;
name|bool
name|ParseFile
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|bool
name|ignore_missing
parameter_list|)
function_decl|;
name|void
name|PrintFlagDescriptions
parameter_list|()
function_decl|;
specifier|static
name|LowLevelAllocator
name|Alloc
decl_stmt|;
name|private
label|:
name|void
name|fatal_error
parameter_list|(
specifier|const
name|char
modifier|*
name|err
parameter_list|)
function_decl|;
name|bool
name|is_space
parameter_list|(
name|char
name|c
parameter_list|)
function_decl|;
name|void
name|skip_whitespace
parameter_list|()
function_decl|;
name|void
name|parse_flags
parameter_list|()
function_decl|;
name|void
name|parse_flag
parameter_list|()
function_decl|;
name|bool
name|run_handler
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|value
parameter_list|)
function_decl|;
name|char
modifier|*
name|ll_strndup
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|,
name|uptr
name|n
parameter_list|)
function_decl|;
block|}
end_block

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|void
name|RegisterFlag
argument_list|(
argument|FlagParser *parser
argument_list|,
argument|const char *name
argument_list|,
argument|const char *desc
argument_list|,
argument|T *var
argument_list|)
block|{
name|FlagHandler
operator|<
name|T
operator|>
operator|*
name|fh
operator|=
name|new
argument_list|(
argument|FlagParser::Alloc
argument_list|)
name|FlagHandler
operator|<
name|T
operator|>
operator|(
name|var
operator|)
block|;
comment|// NOLINT
name|parser
operator|->
name|RegisterHandler
argument_list|(
name|name
argument_list|,
name|fh
argument_list|,
name|desc
argument_list|)
block|; }
name|void
name|ReportUnrecognizedFlags
argument_list|()
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|// namespace __sanitizer
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// SANITIZER_FLAG_REGISTRY_H
end_comment

end_unit

