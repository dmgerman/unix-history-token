begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- tsan_test_util.h ----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is a part of ThreadSanitizer (TSan), a race detector.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Test utils.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|TSAN_TEST_UTIL_H
end_ifndef

begin_define
define|#
directive|define
name|TSAN_TEST_UTIL_H
end_define

begin_function_decl
name|void
name|TestMutexBeforeInit
parameter_list|()
function_decl|;
end_function_decl

begin_comment
comment|// A location of memory on which a race may be detected.
end_comment

begin_decl_stmt
name|class
name|MemLoc
block|{
name|public
label|:
name|explicit
name|MemLoc
parameter_list|(
name|int
name|offset_from_aligned
init|=
literal|0
parameter_list|)
function_decl|;
name|explicit
name|MemLoc
argument_list|(
name|void
operator|*
specifier|const
name|real_addr
argument_list|)
operator|:
name|loc_
argument_list|(
argument|real_addr
argument_list|)
block|{ }
operator|~
name|MemLoc
argument_list|()
expr_stmt|;
name|void
operator|*
name|loc
argument_list|()
specifier|const
block|{
return|return
name|loc_
return|;
block|}
name|private
label|:
name|void
modifier|*
specifier|const
name|loc_
decl_stmt|;
name|MemLoc
argument_list|(
specifier|const
name|MemLoc
operator|&
argument_list|)
expr_stmt|;
name|void
name|operator
init|=
operator|(
specifier|const
name|MemLoc
operator|&
operator|)
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|Mutex
block|{
name|public
label|:
enum|enum
name|Type
block|{
name|Normal
block|,
name|Spin
block|,
name|RW
block|}
enum|;
name|explicit
name|Mutex
parameter_list|(
name|Type
name|type
init|=
name|Normal
parameter_list|)
function_decl|;
operator|~
name|Mutex
argument_list|()
expr_stmt|;
name|void
name|Init
parameter_list|()
function_decl|;
name|void
name|StaticInit
parameter_list|()
function_decl|;
comment|// Emulates static initialization (tsan invisible).
name|void
name|Destroy
parameter_list|()
function_decl|;
name|void
name|Lock
parameter_list|()
function_decl|;
name|bool
name|TryLock
parameter_list|()
function_decl|;
name|void
name|Unlock
parameter_list|()
function_decl|;
name|void
name|ReadLock
parameter_list|()
function_decl|;
name|bool
name|TryReadLock
parameter_list|()
function_decl|;
name|void
name|ReadUnlock
parameter_list|()
function_decl|;
name|private
label|:
comment|// Placeholder for pthread_mutex_t, CRITICAL_SECTION or whatever.
name|void
modifier|*
name|mtx_
index|[
literal|128
index|]
decl_stmt|;
name|bool
name|alive_
decl_stmt|;
specifier|const
name|Type
name|type_
decl_stmt|;
name|Mutex
argument_list|(
specifier|const
name|Mutex
operator|&
argument_list|)
expr_stmt|;
name|void
name|operator
init|=
operator|(
specifier|const
name|Mutex
operator|&
operator|)
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// A thread is started in CTOR and joined in DTOR.
end_comment

begin_decl_stmt
name|class
name|ScopedThread
block|{
name|public
label|:
name|explicit
name|ScopedThread
argument_list|(
name|bool
name|detached
operator|=
name|false
argument_list|,
name|bool
expr|main
operator|=
name|false
argument_list|)
decl_stmt|;
operator|~
name|ScopedThread
argument_list|()
expr_stmt|;
name|void
name|Detach
parameter_list|()
function_decl|;
name|void
name|Access
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|,
name|bool
name|is_write
parameter_list|,
name|int
name|size
parameter_list|,
name|bool
name|expect_race
parameter_list|)
function_decl|;
name|void
name|Read
parameter_list|(
specifier|const
name|MemLoc
modifier|&
name|ml
parameter_list|,
name|int
name|size
parameter_list|,
name|bool
name|expect_race
init|=
name|false
parameter_list|)
block|{
name|Access
argument_list|(
name|ml
operator|.
name|loc
argument_list|()
argument_list|,
name|false
argument_list|,
name|size
argument_list|,
name|expect_race
argument_list|)
expr_stmt|;
block|}
name|void
name|Write
parameter_list|(
specifier|const
name|MemLoc
modifier|&
name|ml
parameter_list|,
name|int
name|size
parameter_list|,
name|bool
name|expect_race
init|=
name|false
parameter_list|)
block|{
name|Access
argument_list|(
name|ml
operator|.
name|loc
argument_list|()
argument_list|,
name|true
argument_list|,
name|size
argument_list|,
name|expect_race
argument_list|)
expr_stmt|;
block|}
name|void
name|Read1
parameter_list|(
specifier|const
name|MemLoc
modifier|&
name|ml
parameter_list|,
name|bool
name|expect_race
init|=
name|false
parameter_list|)
block|{
name|Read
argument_list|(
name|ml
argument_list|,
literal|1
argument_list|,
name|expect_race
argument_list|)
expr_stmt|;
block|}
name|void
name|Read2
parameter_list|(
specifier|const
name|MemLoc
modifier|&
name|ml
parameter_list|,
name|bool
name|expect_race
init|=
name|false
parameter_list|)
block|{
name|Read
argument_list|(
name|ml
argument_list|,
literal|2
argument_list|,
name|expect_race
argument_list|)
expr_stmt|;
block|}
name|void
name|Read4
parameter_list|(
specifier|const
name|MemLoc
modifier|&
name|ml
parameter_list|,
name|bool
name|expect_race
init|=
name|false
parameter_list|)
block|{
name|Read
argument_list|(
name|ml
argument_list|,
literal|4
argument_list|,
name|expect_race
argument_list|)
expr_stmt|;
block|}
name|void
name|Read8
parameter_list|(
specifier|const
name|MemLoc
modifier|&
name|ml
parameter_list|,
name|bool
name|expect_race
init|=
name|false
parameter_list|)
block|{
name|Read
argument_list|(
name|ml
argument_list|,
literal|8
argument_list|,
name|expect_race
argument_list|)
expr_stmt|;
block|}
name|void
name|Write1
parameter_list|(
specifier|const
name|MemLoc
modifier|&
name|ml
parameter_list|,
name|bool
name|expect_race
init|=
name|false
parameter_list|)
block|{
name|Write
argument_list|(
name|ml
argument_list|,
literal|1
argument_list|,
name|expect_race
argument_list|)
expr_stmt|;
block|}
name|void
name|Write2
parameter_list|(
specifier|const
name|MemLoc
modifier|&
name|ml
parameter_list|,
name|bool
name|expect_race
init|=
name|false
parameter_list|)
block|{
name|Write
argument_list|(
name|ml
argument_list|,
literal|2
argument_list|,
name|expect_race
argument_list|)
expr_stmt|;
block|}
name|void
name|Write4
parameter_list|(
specifier|const
name|MemLoc
modifier|&
name|ml
parameter_list|,
name|bool
name|expect_race
init|=
name|false
parameter_list|)
block|{
name|Write
argument_list|(
name|ml
argument_list|,
literal|4
argument_list|,
name|expect_race
argument_list|)
expr_stmt|;
block|}
name|void
name|Write8
parameter_list|(
specifier|const
name|MemLoc
modifier|&
name|ml
parameter_list|,
name|bool
name|expect_race
init|=
name|false
parameter_list|)
block|{
name|Write
argument_list|(
name|ml
argument_list|,
literal|8
argument_list|,
name|expect_race
argument_list|)
expr_stmt|;
block|}
name|void
name|VptrUpdate
parameter_list|(
specifier|const
name|MemLoc
modifier|&
name|vptr
parameter_list|,
specifier|const
name|MemLoc
modifier|&
name|new_val
parameter_list|,
name|bool
name|expect_race
init|=
name|false
parameter_list|)
function_decl|;
name|void
name|Call
parameter_list|(
name|void
function_decl|(
modifier|*
name|pc
function_decl|)
parameter_list|()
parameter_list|)
function_decl|;
name|void
name|Return
parameter_list|()
function_decl|;
name|void
name|Create
parameter_list|(
specifier|const
name|Mutex
modifier|&
name|m
parameter_list|)
function_decl|;
name|void
name|Destroy
parameter_list|(
specifier|const
name|Mutex
modifier|&
name|m
parameter_list|)
function_decl|;
name|void
name|Lock
parameter_list|(
specifier|const
name|Mutex
modifier|&
name|m
parameter_list|)
function_decl|;
name|bool
name|TryLock
parameter_list|(
specifier|const
name|Mutex
modifier|&
name|m
parameter_list|)
function_decl|;
name|void
name|Unlock
parameter_list|(
specifier|const
name|Mutex
modifier|&
name|m
parameter_list|)
function_decl|;
name|void
name|ReadLock
parameter_list|(
specifier|const
name|Mutex
modifier|&
name|m
parameter_list|)
function_decl|;
name|bool
name|TryReadLock
parameter_list|(
specifier|const
name|Mutex
modifier|&
name|m
parameter_list|)
function_decl|;
name|void
name|ReadUnlock
parameter_list|(
specifier|const
name|Mutex
modifier|&
name|m
parameter_list|)
function_decl|;
name|void
name|Memcpy
parameter_list|(
name|void
modifier|*
name|dst
parameter_list|,
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|int
name|size
parameter_list|,
name|bool
name|expect_race
init|=
name|false
parameter_list|)
function_decl|;
name|void
name|Memset
parameter_list|(
name|void
modifier|*
name|dst
parameter_list|,
name|int
name|val
parameter_list|,
name|int
name|size
parameter_list|,
name|bool
name|expect_race
init|=
name|false
parameter_list|)
function_decl|;
name|private
label|:
struct_decl|struct
name|Impl
struct_decl|;
name|Impl
modifier|*
name|impl_
decl_stmt|;
name|ScopedThread
argument_list|(
specifier|const
name|ScopedThread
operator|&
argument_list|)
expr_stmt|;
comment|// Not implemented.
name|void
name|operator
init|=
operator|(
specifier|const
name|ScopedThread
operator|&
operator|)
decl_stmt|;
comment|// Not implemented.
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|MainThread
range|:
name|public
name|ScopedThread
block|{
name|public
operator|:
name|MainThread
argument_list|()
operator|:
name|ScopedThread
argument_list|(
argument|false
argument_list|,
argument|true
argument_list|)
block|{   }
block|}
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// #ifndef TSAN_TEST_UTIL_H
end_comment

end_unit

