begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- tsan_interface.h ----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is a part of ThreadSanitizer (TSan), a race detector.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// The functions declared in this header will be inserted by the instrumentation
end_comment

begin_comment
comment|// module.
end_comment

begin_comment
comment|// This header can be included by the instrumented program or by TSan tests.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|TSAN_INTERFACE_H
end_ifndef

begin_define
define|#
directive|define
name|TSAN_INTERFACE_H
end_define

begin_include
include|#
directive|include
file|<sanitizer_common/sanitizer_internal_defs.h>
end_include

begin_expr_stmt
name|using
name|__sanitizer
operator|::
name|uptr
expr_stmt|;
end_expr_stmt

begin_comment
comment|// This header should NOT include any other headers.
end_comment

begin_comment
comment|// All functions in this header are extern "C" and start with __tsan_.
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
if|#
directive|if
operator|!
name|SANITIZER_GO
comment|// This function should be called at the very beginning of the process,
comment|// before any instrumented code is executed and before any call to malloc.
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_init
parameter_list|()
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_flush_memory
parameter_list|()
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_read1
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_read2
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_read4
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_read8
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_read16
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_write1
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_write2
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_write4
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_write8
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_write16
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_unaligned_read2
parameter_list|(
specifier|const
name|void
modifier|*
name|addr
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_unaligned_read4
parameter_list|(
specifier|const
name|void
modifier|*
name|addr
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_unaligned_read8
parameter_list|(
specifier|const
name|void
modifier|*
name|addr
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_unaligned_read16
parameter_list|(
specifier|const
name|void
modifier|*
name|addr
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_unaligned_write2
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_unaligned_write4
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_unaligned_write8
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_unaligned_write16
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_read1_pc
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|,
name|void
modifier|*
name|pc
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_read2_pc
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|,
name|void
modifier|*
name|pc
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_read4_pc
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|,
name|void
modifier|*
name|pc
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_read8_pc
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|,
name|void
modifier|*
name|pc
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_read16_pc
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|,
name|void
modifier|*
name|pc
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_write1_pc
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|,
name|void
modifier|*
name|pc
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_write2_pc
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|,
name|void
modifier|*
name|pc
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_write4_pc
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|,
name|void
modifier|*
name|pc
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_write8_pc
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|,
name|void
modifier|*
name|pc
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_write16_pc
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|,
name|void
modifier|*
name|pc
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_vptr_read
parameter_list|(
name|void
modifier|*
modifier|*
name|vptr_p
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_vptr_update
parameter_list|(
name|void
modifier|*
modifier|*
name|vptr_p
parameter_list|,
name|void
modifier|*
name|new_val
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_func_entry
parameter_list|(
name|void
modifier|*
name|call_pc
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_func_exit
parameter_list|()
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_ignore_thread_begin
parameter_list|()
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_ignore_thread_end
parameter_list|()
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_read_range
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|,
name|unsigned
name|long
name|size
parameter_list|)
function_decl|;
comment|// NOLINT
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_write_range
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|,
name|unsigned
name|long
name|size
parameter_list|)
function_decl|;
comment|// NOLINT
comment|// User may provide function that would be called right when TSan detects
comment|// an error. The argument 'report' is an opaque pointer that can be used to
comment|// gather additional information using other TSan report API functions.
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_on_report
parameter_list|(
name|void
modifier|*
name|report
parameter_list|)
function_decl|;
comment|// If TSan is currently reporting a detected issue on the current thread,
comment|// returns an opaque pointer to the current report. Otherwise returns NULL.
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
modifier|*
name|__tsan_get_current_report
parameter_list|()
function_decl|;
comment|// Returns a report's description (issue type), number of duplicate issues
comment|// found, counts of array data (stack traces, memory operations, locations,
comment|// mutexes, threads, unique thread IDs) and a stack trace of a sleep() call (if
comment|// one was involved in the issue).
name|SANITIZER_INTERFACE_ATTRIBUTE
name|int
name|__tsan_get_report_data
parameter_list|(
name|void
modifier|*
name|report
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|description
parameter_list|,
name|int
modifier|*
name|count
parameter_list|,
name|int
modifier|*
name|stack_count
parameter_list|,
name|int
modifier|*
name|mop_count
parameter_list|,
name|int
modifier|*
name|loc_count
parameter_list|,
name|int
modifier|*
name|mutex_count
parameter_list|,
name|int
modifier|*
name|thread_count
parameter_list|,
name|int
modifier|*
name|unique_tid_count
parameter_list|,
name|void
modifier|*
modifier|*
name|sleep_trace
parameter_list|,
name|uptr
name|trace_size
parameter_list|)
function_decl|;
comment|// Returns information about stack traces included in the report.
name|SANITIZER_INTERFACE_ATTRIBUTE
name|int
name|__tsan_get_report_stack
parameter_list|(
name|void
modifier|*
name|report
parameter_list|,
name|uptr
name|idx
parameter_list|,
name|void
modifier|*
modifier|*
name|trace
parameter_list|,
name|uptr
name|trace_size
parameter_list|)
function_decl|;
comment|// Returns information about memory operations included in the report.
name|SANITIZER_INTERFACE_ATTRIBUTE
name|int
name|__tsan_get_report_mop
parameter_list|(
name|void
modifier|*
name|report
parameter_list|,
name|uptr
name|idx
parameter_list|,
name|int
modifier|*
name|tid
parameter_list|,
name|void
modifier|*
modifier|*
name|addr
parameter_list|,
name|int
modifier|*
name|size
parameter_list|,
name|int
modifier|*
name|write
parameter_list|,
name|int
modifier|*
name|atomic
parameter_list|,
name|void
modifier|*
modifier|*
name|trace
parameter_list|,
name|uptr
name|trace_size
parameter_list|)
function_decl|;
comment|// Returns information about locations included in the report.
name|SANITIZER_INTERFACE_ATTRIBUTE
name|int
name|__tsan_get_report_loc
parameter_list|(
name|void
modifier|*
name|report
parameter_list|,
name|uptr
name|idx
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|type
parameter_list|,
name|void
modifier|*
modifier|*
name|addr
parameter_list|,
name|uptr
modifier|*
name|start
parameter_list|,
name|uptr
modifier|*
name|size
parameter_list|,
name|int
modifier|*
name|tid
parameter_list|,
name|int
modifier|*
name|fd
parameter_list|,
name|int
modifier|*
name|suppressable
parameter_list|,
name|void
modifier|*
modifier|*
name|trace
parameter_list|,
name|uptr
name|trace_size
parameter_list|)
function_decl|;
comment|// Returns information about mutexes included in the report.
name|SANITIZER_INTERFACE_ATTRIBUTE
name|int
name|__tsan_get_report_mutex
parameter_list|(
name|void
modifier|*
name|report
parameter_list|,
name|uptr
name|idx
parameter_list|,
name|uptr
modifier|*
name|mutex_id
parameter_list|,
name|void
modifier|*
modifier|*
name|addr
parameter_list|,
name|int
modifier|*
name|destroyed
parameter_list|,
name|void
modifier|*
modifier|*
name|trace
parameter_list|,
name|uptr
name|trace_size
parameter_list|)
function_decl|;
comment|// Returns information about threads included in the report.
name|SANITIZER_INTERFACE_ATTRIBUTE
name|int
name|__tsan_get_report_thread
parameter_list|(
name|void
modifier|*
name|report
parameter_list|,
name|uptr
name|idx
parameter_list|,
name|int
modifier|*
name|tid
parameter_list|,
name|uptr
modifier|*
name|os_id
parameter_list|,
name|int
modifier|*
name|running
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|name
parameter_list|,
name|int
modifier|*
name|parent_tid
parameter_list|,
name|void
modifier|*
modifier|*
name|trace
parameter_list|,
name|uptr
name|trace_size
parameter_list|)
function_decl|;
comment|// Returns information about unique thread IDs included in the report.
name|SANITIZER_INTERFACE_ATTRIBUTE
name|int
name|__tsan_get_report_unique_tid
parameter_list|(
name|void
modifier|*
name|report
parameter_list|,
name|uptr
name|idx
parameter_list|,
name|int
modifier|*
name|tid
parameter_list|)
function_decl|;
comment|// Returns the type of the pointer (heap, stack, global, ...) and if possible
comment|// also the starting address (e.g. of a heap allocation) and size.
name|SANITIZER_INTERFACE_ATTRIBUTE
specifier|const
name|char
modifier|*
name|__tsan_locate_address
parameter_list|(
name|uptr
name|addr
parameter_list|,
name|char
modifier|*
name|name
parameter_list|,
name|uptr
name|name_size
parameter_list|,
name|uptr
modifier|*
name|region_address
parameter_list|,
name|uptr
modifier|*
name|region_size
parameter_list|)
function_decl|;
comment|// Returns the allocation stack for a heap pointer.
name|SANITIZER_INTERFACE_ATTRIBUTE
name|int
name|__tsan_get_alloc_stack
parameter_list|(
name|uptr
name|addr
parameter_list|,
name|uptr
modifier|*
name|trace
parameter_list|,
name|uptr
name|size
parameter_list|,
name|int
modifier|*
name|thread_id
parameter_list|,
name|uptr
modifier|*
name|os_id
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|// SANITIZER_GO
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_comment
comment|// extern "C"
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
name|namespace
name|__tsan
block|{
comment|// These should match declarations from public tsan_interface_atomic.h header.
typedef|typedef
name|unsigned
name|char
name|a8
typedef|;
typedef|typedef
name|unsigned
name|short
name|a16
typedef|;
comment|// NOLINT
typedef|typedef
name|unsigned
name|int
name|a32
typedef|;
typedef|typedef
name|unsigned
name|long
name|long
name|a64
typedef|;
comment|// NOLINT
if|#
directive|if
operator|!
name|SANITIZER_GO
operator|&&
operator|(
name|defined
argument_list|(
name|__SIZEOF_INT128__
argument_list|)
expr|\
operator|||
operator|(
name|__clang_major__
operator|*
literal|100
operator|+
name|__clang_minor__
operator|>=
literal|302
operator|)
operator|)
operator|&&
operator|!
name|defined
argument_list|(
name|__mips64
argument_list|)
name|__extension__
typedef|typedef
name|__int128
name|a128
typedef|;
define|#
directive|define
name|__TSAN_HAS_INT128
value|1
else|#
directive|else
define|#
directive|define
name|__TSAN_HAS_INT128
value|0
endif|#
directive|endif
comment|// Part of ABI, do not change.
comment|// http://llvm.org/viewvc/llvm-project/libcxx/trunk/include/atomic?view=markup
typedef|typedef
enum|enum
block|{
name|mo_relaxed
block|,
name|mo_consume
block|,
name|mo_acquire
block|,
name|mo_release
block|,
name|mo_acq_rel
block|,
name|mo_seq_cst
block|}
name|morder
typedef|;
struct_decl|struct
name|ThreadState
struct_decl|;
extern|extern
literal|"C"
block|{
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a8
name|__tsan_atomic8_load
parameter_list|(
specifier|const
specifier|volatile
name|a8
modifier|*
name|a
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a16
name|__tsan_atomic16_load
parameter_list|(
specifier|const
specifier|volatile
name|a16
modifier|*
name|a
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a32
name|__tsan_atomic32_load
parameter_list|(
specifier|const
specifier|volatile
name|a32
modifier|*
name|a
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a64
name|__tsan_atomic64_load
parameter_list|(
specifier|const
specifier|volatile
name|a64
modifier|*
name|a
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
if|#
directive|if
name|__TSAN_HAS_INT128
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a128
name|__tsan_atomic128_load
parameter_list|(
specifier|const
specifier|volatile
name|a128
modifier|*
name|a
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
endif|#
directive|endif
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_atomic8_store
parameter_list|(
specifier|volatile
name|a8
modifier|*
name|a
parameter_list|,
name|a8
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_atomic16_store
parameter_list|(
specifier|volatile
name|a16
modifier|*
name|a
parameter_list|,
name|a16
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_atomic32_store
parameter_list|(
specifier|volatile
name|a32
modifier|*
name|a
parameter_list|,
name|a32
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_atomic64_store
parameter_list|(
specifier|volatile
name|a64
modifier|*
name|a
parameter_list|,
name|a64
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
if|#
directive|if
name|__TSAN_HAS_INT128
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_atomic128_store
parameter_list|(
specifier|volatile
name|a128
modifier|*
name|a
parameter_list|,
name|a128
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
endif|#
directive|endif
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a8
name|__tsan_atomic8_exchange
parameter_list|(
specifier|volatile
name|a8
modifier|*
name|a
parameter_list|,
name|a8
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a16
name|__tsan_atomic16_exchange
parameter_list|(
specifier|volatile
name|a16
modifier|*
name|a
parameter_list|,
name|a16
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a32
name|__tsan_atomic32_exchange
parameter_list|(
specifier|volatile
name|a32
modifier|*
name|a
parameter_list|,
name|a32
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a64
name|__tsan_atomic64_exchange
parameter_list|(
specifier|volatile
name|a64
modifier|*
name|a
parameter_list|,
name|a64
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
if|#
directive|if
name|__TSAN_HAS_INT128
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a128
name|__tsan_atomic128_exchange
parameter_list|(
specifier|volatile
name|a128
modifier|*
name|a
parameter_list|,
name|a128
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
endif|#
directive|endif
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a8
name|__tsan_atomic8_fetch_add
parameter_list|(
specifier|volatile
name|a8
modifier|*
name|a
parameter_list|,
name|a8
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a16
name|__tsan_atomic16_fetch_add
parameter_list|(
specifier|volatile
name|a16
modifier|*
name|a
parameter_list|,
name|a16
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a32
name|__tsan_atomic32_fetch_add
parameter_list|(
specifier|volatile
name|a32
modifier|*
name|a
parameter_list|,
name|a32
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a64
name|__tsan_atomic64_fetch_add
parameter_list|(
specifier|volatile
name|a64
modifier|*
name|a
parameter_list|,
name|a64
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
if|#
directive|if
name|__TSAN_HAS_INT128
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a128
name|__tsan_atomic128_fetch_add
parameter_list|(
specifier|volatile
name|a128
modifier|*
name|a
parameter_list|,
name|a128
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
endif|#
directive|endif
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a8
name|__tsan_atomic8_fetch_sub
parameter_list|(
specifier|volatile
name|a8
modifier|*
name|a
parameter_list|,
name|a8
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a16
name|__tsan_atomic16_fetch_sub
parameter_list|(
specifier|volatile
name|a16
modifier|*
name|a
parameter_list|,
name|a16
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a32
name|__tsan_atomic32_fetch_sub
parameter_list|(
specifier|volatile
name|a32
modifier|*
name|a
parameter_list|,
name|a32
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a64
name|__tsan_atomic64_fetch_sub
parameter_list|(
specifier|volatile
name|a64
modifier|*
name|a
parameter_list|,
name|a64
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
if|#
directive|if
name|__TSAN_HAS_INT128
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a128
name|__tsan_atomic128_fetch_sub
parameter_list|(
specifier|volatile
name|a128
modifier|*
name|a
parameter_list|,
name|a128
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
endif|#
directive|endif
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a8
name|__tsan_atomic8_fetch_and
parameter_list|(
specifier|volatile
name|a8
modifier|*
name|a
parameter_list|,
name|a8
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a16
name|__tsan_atomic16_fetch_and
parameter_list|(
specifier|volatile
name|a16
modifier|*
name|a
parameter_list|,
name|a16
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a32
name|__tsan_atomic32_fetch_and
parameter_list|(
specifier|volatile
name|a32
modifier|*
name|a
parameter_list|,
name|a32
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a64
name|__tsan_atomic64_fetch_and
parameter_list|(
specifier|volatile
name|a64
modifier|*
name|a
parameter_list|,
name|a64
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
if|#
directive|if
name|__TSAN_HAS_INT128
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a128
name|__tsan_atomic128_fetch_and
parameter_list|(
specifier|volatile
name|a128
modifier|*
name|a
parameter_list|,
name|a128
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
endif|#
directive|endif
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a8
name|__tsan_atomic8_fetch_or
parameter_list|(
specifier|volatile
name|a8
modifier|*
name|a
parameter_list|,
name|a8
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a16
name|__tsan_atomic16_fetch_or
parameter_list|(
specifier|volatile
name|a16
modifier|*
name|a
parameter_list|,
name|a16
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a32
name|__tsan_atomic32_fetch_or
parameter_list|(
specifier|volatile
name|a32
modifier|*
name|a
parameter_list|,
name|a32
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a64
name|__tsan_atomic64_fetch_or
parameter_list|(
specifier|volatile
name|a64
modifier|*
name|a
parameter_list|,
name|a64
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
if|#
directive|if
name|__TSAN_HAS_INT128
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a128
name|__tsan_atomic128_fetch_or
parameter_list|(
specifier|volatile
name|a128
modifier|*
name|a
parameter_list|,
name|a128
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
endif|#
directive|endif
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a8
name|__tsan_atomic8_fetch_xor
parameter_list|(
specifier|volatile
name|a8
modifier|*
name|a
parameter_list|,
name|a8
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a16
name|__tsan_atomic16_fetch_xor
parameter_list|(
specifier|volatile
name|a16
modifier|*
name|a
parameter_list|,
name|a16
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a32
name|__tsan_atomic32_fetch_xor
parameter_list|(
specifier|volatile
name|a32
modifier|*
name|a
parameter_list|,
name|a32
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a64
name|__tsan_atomic64_fetch_xor
parameter_list|(
specifier|volatile
name|a64
modifier|*
name|a
parameter_list|,
name|a64
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
if|#
directive|if
name|__TSAN_HAS_INT128
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a128
name|__tsan_atomic128_fetch_xor
parameter_list|(
specifier|volatile
name|a128
modifier|*
name|a
parameter_list|,
name|a128
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
endif|#
directive|endif
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a8
name|__tsan_atomic8_fetch_nand
parameter_list|(
specifier|volatile
name|a8
modifier|*
name|a
parameter_list|,
name|a8
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a16
name|__tsan_atomic16_fetch_nand
parameter_list|(
specifier|volatile
name|a16
modifier|*
name|a
parameter_list|,
name|a16
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a32
name|__tsan_atomic32_fetch_nand
parameter_list|(
specifier|volatile
name|a32
modifier|*
name|a
parameter_list|,
name|a32
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a64
name|__tsan_atomic64_fetch_nand
parameter_list|(
specifier|volatile
name|a64
modifier|*
name|a
parameter_list|,
name|a64
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
if|#
directive|if
name|__TSAN_HAS_INT128
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a128
name|__tsan_atomic128_fetch_nand
parameter_list|(
specifier|volatile
name|a128
modifier|*
name|a
parameter_list|,
name|a128
name|v
parameter_list|,
name|morder
name|mo
parameter_list|)
function_decl|;
endif|#
directive|endif
name|SANITIZER_INTERFACE_ATTRIBUTE
name|int
name|__tsan_atomic8_compare_exchange_strong
parameter_list|(
specifier|volatile
name|a8
modifier|*
name|a
parameter_list|,
name|a8
modifier|*
name|c
parameter_list|,
name|a8
name|v
parameter_list|,
name|morder
name|mo
parameter_list|,
name|morder
name|fmo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|int
name|__tsan_atomic16_compare_exchange_strong
parameter_list|(
specifier|volatile
name|a16
modifier|*
name|a
parameter_list|,
name|a16
modifier|*
name|c
parameter_list|,
name|a16
name|v
parameter_list|,
name|morder
name|mo
parameter_list|,
name|morder
name|fmo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|int
name|__tsan_atomic32_compare_exchange_strong
parameter_list|(
specifier|volatile
name|a32
modifier|*
name|a
parameter_list|,
name|a32
modifier|*
name|c
parameter_list|,
name|a32
name|v
parameter_list|,
name|morder
name|mo
parameter_list|,
name|morder
name|fmo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|int
name|__tsan_atomic64_compare_exchange_strong
parameter_list|(
specifier|volatile
name|a64
modifier|*
name|a
parameter_list|,
name|a64
modifier|*
name|c
parameter_list|,
name|a64
name|v
parameter_list|,
name|morder
name|mo
parameter_list|,
name|morder
name|fmo
parameter_list|)
function_decl|;
if|#
directive|if
name|__TSAN_HAS_INT128
name|SANITIZER_INTERFACE_ATTRIBUTE
name|int
name|__tsan_atomic128_compare_exchange_strong
parameter_list|(
specifier|volatile
name|a128
modifier|*
name|a
parameter_list|,
name|a128
modifier|*
name|c
parameter_list|,
name|a128
name|v
parameter_list|,
name|morder
name|mo
parameter_list|,
name|morder
name|fmo
parameter_list|)
function_decl|;
endif|#
directive|endif
name|SANITIZER_INTERFACE_ATTRIBUTE
name|int
name|__tsan_atomic8_compare_exchange_weak
parameter_list|(
specifier|volatile
name|a8
modifier|*
name|a
parameter_list|,
name|a8
modifier|*
name|c
parameter_list|,
name|a8
name|v
parameter_list|,
name|morder
name|mo
parameter_list|,
name|morder
name|fmo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|int
name|__tsan_atomic16_compare_exchange_weak
parameter_list|(
specifier|volatile
name|a16
modifier|*
name|a
parameter_list|,
name|a16
modifier|*
name|c
parameter_list|,
name|a16
name|v
parameter_list|,
name|morder
name|mo
parameter_list|,
name|morder
name|fmo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|int
name|__tsan_atomic32_compare_exchange_weak
parameter_list|(
specifier|volatile
name|a32
modifier|*
name|a
parameter_list|,
name|a32
modifier|*
name|c
parameter_list|,
name|a32
name|v
parameter_list|,
name|morder
name|mo
parameter_list|,
name|morder
name|fmo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|int
name|__tsan_atomic64_compare_exchange_weak
parameter_list|(
specifier|volatile
name|a64
modifier|*
name|a
parameter_list|,
name|a64
modifier|*
name|c
parameter_list|,
name|a64
name|v
parameter_list|,
name|morder
name|mo
parameter_list|,
name|morder
name|fmo
parameter_list|)
function_decl|;
if|#
directive|if
name|__TSAN_HAS_INT128
name|SANITIZER_INTERFACE_ATTRIBUTE
name|int
name|__tsan_atomic128_compare_exchange_weak
parameter_list|(
specifier|volatile
name|a128
modifier|*
name|a
parameter_list|,
name|a128
modifier|*
name|c
parameter_list|,
name|a128
name|v
parameter_list|,
name|morder
name|mo
parameter_list|,
name|morder
name|fmo
parameter_list|)
function_decl|;
endif|#
directive|endif
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a8
name|__tsan_atomic8_compare_exchange_val
parameter_list|(
specifier|volatile
name|a8
modifier|*
name|a
parameter_list|,
name|a8
name|c
parameter_list|,
name|a8
name|v
parameter_list|,
name|morder
name|mo
parameter_list|,
name|morder
name|fmo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a16
name|__tsan_atomic16_compare_exchange_val
parameter_list|(
specifier|volatile
name|a16
modifier|*
name|a
parameter_list|,
name|a16
name|c
parameter_list|,
name|a16
name|v
parameter_list|,
name|morder
name|mo
parameter_list|,
name|morder
name|fmo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a32
name|__tsan_atomic32_compare_exchange_val
parameter_list|(
specifier|volatile
name|a32
modifier|*
name|a
parameter_list|,
name|a32
name|c
parameter_list|,
name|a32
name|v
parameter_list|,
name|morder
name|mo
parameter_list|,
name|morder
name|fmo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a64
name|__tsan_atomic64_compare_exchange_val
parameter_list|(
specifier|volatile
name|a64
modifier|*
name|a
parameter_list|,
name|a64
name|c
parameter_list|,
name|a64
name|v
parameter_list|,
name|morder
name|mo
parameter_list|,
name|morder
name|fmo
parameter_list|)
function_decl|;
if|#
directive|if
name|__TSAN_HAS_INT128
name|SANITIZER_INTERFACE_ATTRIBUTE
name|a128
name|__tsan_atomic128_compare_exchange_val
parameter_list|(
specifier|volatile
name|a128
modifier|*
name|a
parameter_list|,
name|a128
name|c
parameter_list|,
name|a128
name|v
parameter_list|,
name|morder
name|mo
parameter_list|,
name|morder
name|fmo
parameter_list|)
function_decl|;
endif|#
directive|endif
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_atomic_thread_fence
parameter_list|(
name|morder
name|mo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_atomic_signal_fence
parameter_list|(
name|morder
name|mo
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_go_atomic32_load
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|cpc
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|u8
modifier|*
name|a
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_go_atomic64_load
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|cpc
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|u8
modifier|*
name|a
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_go_atomic32_store
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|cpc
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|u8
modifier|*
name|a
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_go_atomic64_store
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|cpc
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|u8
modifier|*
name|a
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_go_atomic32_fetch_add
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|cpc
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|u8
modifier|*
name|a
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_go_atomic64_fetch_add
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|cpc
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|u8
modifier|*
name|a
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_go_atomic32_exchange
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|cpc
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|u8
modifier|*
name|a
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_go_atomic64_exchange
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|cpc
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|u8
modifier|*
name|a
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_go_atomic32_compare_exchange
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|cpc
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|u8
modifier|*
name|a
parameter_list|)
function_decl|;
name|SANITIZER_INTERFACE_ATTRIBUTE
name|void
name|__tsan_go_atomic64_compare_exchange
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|cpc
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|u8
modifier|*
name|a
parameter_list|)
function_decl|;
block|}
comment|// extern "C"
block|}
end_decl_stmt

begin_comment
comment|// namespace __tsan
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// TSAN_INTERFACE_H
end_comment

end_unit

