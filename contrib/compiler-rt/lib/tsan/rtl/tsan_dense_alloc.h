begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- tsan_dense_alloc.h --------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is a part of ThreadSanitizer (TSan), a race detector.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// A DenseSlabAlloc is a freelist-based allocator of fixed-size objects.
end_comment

begin_comment
comment|// DenseSlabAllocCache is a thread-local cache for DenseSlabAlloc.
end_comment

begin_comment
comment|// The only difference with traditional slab allocators is that DenseSlabAlloc
end_comment

begin_comment
comment|// allocates/free indices of objects and provide a functionality to map
end_comment

begin_comment
comment|// the index onto the real pointer. The index is u32, that is, 2 times smaller
end_comment

begin_comment
comment|// than uptr (hense the Dense prefix).
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|TSAN_DENSE_ALLOC_H
end_ifndef

begin_define
define|#
directive|define
name|TSAN_DENSE_ALLOC_H
end_define

begin_include
include|#
directive|include
file|"sanitizer_common/sanitizer_common.h"
end_include

begin_include
include|#
directive|include
file|"tsan_defs.h"
end_include

begin_include
include|#
directive|include
file|"tsan_mutex.h"
end_include

begin_decl_stmt
name|namespace
name|__tsan
block|{
name|class
name|DenseSlabAllocCache
block|{
specifier|static
specifier|const
name|uptr
name|kSize
init|=
literal|128
decl_stmt|;
typedef|typedef
name|u32
name|IndexT
typedef|;
name|uptr
name|pos
decl_stmt|;
name|IndexT
name|cache
index|[
name|kSize
index|]
decl_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|uptr
name|kL1Size
operator|,
name|uptr
name|kL2Size
operator|>
name|friend
name|class
name|DenseSlabAlloc
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|uptr
name|kL1Size
operator|,
name|uptr
name|kL2Size
operator|>
name|class
name|DenseSlabAlloc
block|{
name|public
operator|:
typedef|typedef
name|DenseSlabAllocCache
name|Cache
typedef|;
typedef|typedef
name|typename
name|Cache
operator|::
name|IndexT
name|IndexT
expr_stmt|;
name|DenseSlabAlloc
argument_list|()
block|{
comment|// Check that kL1Size and kL2Size are sane.
name|CHECK_EQ
argument_list|(
name|kL1Size
operator|&
operator|(
name|kL1Size
operator|-
literal|1
operator|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|CHECK_EQ
argument_list|(
name|kL2Size
operator|&
operator|(
name|kL2Size
operator|-
literal|1
operator|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|CHECK_GE
argument_list|(
literal|1ull
operator|<<
operator|(
sizeof|sizeof
argument_list|(
name|IndexT
argument_list|)
operator|*
literal|8
operator|)
argument_list|,
name|kL1Size
operator|*
name|kL2Size
argument_list|)
expr_stmt|;
comment|// Check that it makes sense to use the dense alloc.
name|CHECK_GE
argument_list|(
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|,
sizeof|sizeof
argument_list|(
name|IndexT
argument_list|)
argument_list|)
expr_stmt|;
name|internal_memset
argument_list|(
name|map_
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|map_
argument_list|)
argument_list|)
expr_stmt|;
name|freelist_
operator|=
literal|0
expr_stmt|;
name|fillpos_
operator|=
literal|0
expr_stmt|;
block|}
operator|~
name|DenseSlabAlloc
argument_list|()
block|{
for|for
control|(
name|uptr
name|i
init|=
literal|0
init|;
name|i
operator|<
name|kL1Size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|map_
index|[
name|i
index|]
operator|!=
literal|0
condition|)
name|UnmapOrDie
argument_list|(
name|map_
index|[
name|i
index|]
argument_list|,
name|kL2Size
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|IndexT
name|Alloc
argument_list|(
argument|Cache *c
argument_list|)
block|{
if|if
condition|(
name|c
operator|->
name|pos
operator|==
literal|0
condition|)
name|Refill
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
name|c
operator|->
name|cache
index|[
operator|--
name|c
operator|->
name|pos
index|]
return|;
block|}
end_decl_stmt

begin_function
name|void
name|Free
parameter_list|(
name|Cache
modifier|*
name|c
parameter_list|,
name|IndexT
name|idx
parameter_list|)
block|{
name|DCHECK_NE
argument_list|(
name|idx
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|->
name|pos
operator|==
name|Cache
operator|::
name|kSize
condition|)
name|Drain
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|->
name|cache
index|[
name|c
operator|->
name|pos
operator|++
index|]
operator|=
name|idx
expr_stmt|;
block|}
end_function

begin_function
name|T
modifier|*
name|Map
parameter_list|(
name|IndexT
name|idx
parameter_list|)
block|{
name|DCHECK_NE
argument_list|(
name|idx
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DCHECK_LE
argument_list|(
name|idx
argument_list|,
name|kL1Size
operator|*
name|kL2Size
argument_list|)
expr_stmt|;
return|return
operator|&
name|map_
index|[
name|idx
operator|/
name|kL2Size
index|]
index|[
name|idx
operator|%
name|kL2Size
index|]
return|;
block|}
end_function

begin_function
name|void
name|FlushCache
parameter_list|(
name|Cache
modifier|*
name|c
parameter_list|)
block|{
name|SpinMutexLock
name|lock
argument_list|(
operator|&
name|mtx_
argument_list|)
decl_stmt|;
while|while
condition|(
name|c
operator|->
name|pos
condition|)
block|{
name|IndexT
name|idx
init|=
name|c
operator|->
name|cache
index|[
operator|--
name|c
operator|->
name|pos
index|]
decl_stmt|;
operator|*
operator|(
name|IndexT
operator|*
operator|)
name|Map
argument_list|(
name|idx
argument_list|)
operator|=
name|freelist_
expr_stmt|;
name|freelist_
operator|=
name|idx
expr_stmt|;
block|}
block|}
end_function

begin_function
name|void
name|InitCache
parameter_list|(
name|Cache
modifier|*
name|c
parameter_list|)
block|{
name|c
operator|->
name|pos
operator|=
literal|0
expr_stmt|;
name|internal_memset
argument_list|(
name|c
operator|->
name|cache
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|c
operator|->
name|cache
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|T
modifier|*
name|map_
index|[
name|kL1Size
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|SpinMutex
name|mtx_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|IndexT
name|freelist_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uptr
name|fillpos_
decl_stmt|;
end_decl_stmt

begin_function
name|void
name|Refill
parameter_list|(
name|Cache
modifier|*
name|c
parameter_list|)
block|{
name|SpinMutexLock
name|lock
argument_list|(
operator|&
name|mtx_
argument_list|)
decl_stmt|;
if|if
condition|(
name|freelist_
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|fillpos_
operator|==
name|kL1Size
condition|)
block|{
name|Printf
argument_list|(
literal|"ThreadSanitizer: DenseSlabAllocator overflow. Dying.\n"
argument_list|)
expr_stmt|;
name|Die
argument_list|()
expr_stmt|;
block|}
name|T
modifier|*
name|batch
init|=
operator|(
name|T
operator|*
operator|)
name|MmapOrDie
argument_list|(
name|kL2Size
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|,
literal|"DenseSlabAllocator"
argument_list|)
decl_stmt|;
comment|// Reserve 0 as invalid index.
name|IndexT
name|start
init|=
name|fillpos_
operator|==
literal|0
condition|?
literal|1
else|:
literal|0
decl_stmt|;
for|for
control|(
name|IndexT
name|i
init|=
name|start
init|;
name|i
operator|<
name|kL2Size
condition|;
name|i
operator|++
control|)
block|{
name|new
argument_list|(
argument|batch + i
argument_list|)
name|T
argument_list|()
expr_stmt|;
operator|*
operator|(
name|IndexT
operator|*
operator|)
operator|(
name|batch
operator|+
name|i
operator|)
operator|=
name|i
operator|+
literal|1
operator|+
name|fillpos_
operator|*
name|kL2Size
expr_stmt|;
block|}
operator|*
operator|(
name|IndexT
operator|*
operator|)
operator|(
name|batch
operator|+
name|kL2Size
operator|-
literal|1
operator|)
operator|=
literal|0
expr_stmt|;
name|freelist_
operator|=
name|fillpos_
operator|*
name|kL2Size
operator|+
name|start
expr_stmt|;
name|map_
index|[
name|fillpos_
operator|++
index|]
operator|=
name|batch
expr_stmt|;
block|}
for|for
control|(
name|uptr
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Cache
operator|::
name|kSize
operator|/
literal|2
operator|&&
name|freelist_
operator|!=
literal|0
condition|;
name|i
operator|++
control|)
block|{
name|IndexT
name|idx
init|=
name|freelist_
decl_stmt|;
name|c
operator|->
name|cache
index|[
name|c
operator|->
name|pos
operator|++
index|]
operator|=
name|idx
expr_stmt|;
name|freelist_
operator|=
operator|*
operator|(
name|IndexT
operator|*
operator|)
name|Map
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
name|void
name|Drain
parameter_list|(
name|Cache
modifier|*
name|c
parameter_list|)
block|{
name|SpinMutexLock
name|lock
argument_list|(
operator|&
name|mtx_
argument_list|)
decl_stmt|;
for|for
control|(
name|uptr
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Cache
operator|::
name|kSize
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|IndexT
name|idx
init|=
name|c
operator|->
name|cache
index|[
operator|--
name|c
operator|->
name|pos
index|]
decl_stmt|;
operator|*
operator|(
name|IndexT
operator|*
operator|)
name|Map
argument_list|(
name|idx
argument_list|)
operator|=
name|freelist_
expr_stmt|;
name|freelist_
operator|=
name|idx
expr_stmt|;
block|}
block|}
end_function

begin_comment
unit|};  }
comment|// namespace __tsan
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// TSAN_DENSE_ALLOC_H
end_comment

end_unit

