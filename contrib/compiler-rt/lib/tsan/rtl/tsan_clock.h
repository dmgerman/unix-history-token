begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- tsan_clock.h --------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is a part of ThreadSanitizer (TSan), a race detector.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|TSAN_CLOCK_H
end_ifndef

begin_define
define|#
directive|define
name|TSAN_CLOCK_H
end_define

begin_include
include|#
directive|include
file|"tsan_defs.h"
end_include

begin_include
include|#
directive|include
file|"tsan_dense_alloc.h"
end_include

begin_decl_stmt
name|namespace
name|__tsan
block|{
typedef|typedef
name|DenseSlabAlloc
operator|<
name|ClockBlock
operator|,
literal|1
operator|<<
literal|16
operator|,
literal|1
operator|<<
literal|10
operator|>
name|ClockAlloc
expr_stmt|;
typedef|typedef
name|DenseSlabAllocCache
name|ClockCache
typedef|;
comment|// The clock that lives in sync variables (mutexes, atomics, etc).
name|class
name|SyncClock
block|{
name|public
label|:
name|SyncClock
argument_list|()
expr_stmt|;
operator|~
name|SyncClock
argument_list|()
expr_stmt|;
name|uptr
name|size
argument_list|()
specifier|const
expr_stmt|;
comment|// These are used only in tests.
name|u64
name|get
argument_list|(
name|unsigned
name|tid
argument_list|)
decl|const
decl_stmt|;
name|u64
name|get_clean
parameter_list|(
name|unsigned
name|tid
parameter_list|)
function|const;
name|void
name|Resize
parameter_list|(
name|ClockCache
modifier|*
name|c
parameter_list|,
name|uptr
name|nclk
parameter_list|)
function_decl|;
name|void
name|Reset
parameter_list|(
name|ClockCache
modifier|*
name|c
parameter_list|)
function_decl|;
name|void
name|DebugDump
parameter_list|(
name|int
function_decl|(
modifier|*
name|printf
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|,
modifier|...
parameter_list|)
parameter_list|)
function_decl|;
comment|// Clock element iterator.
comment|// Note: it iterates only over the table without regard to dirty entries.
name|class
name|Iter
block|{
name|public
label|:
name|explicit
name|Iter
parameter_list|(
name|SyncClock
modifier|*
name|parent
parameter_list|)
function_decl|;
name|Iter
operator|&
name|operator
operator|++
operator|(
operator|)
expr_stmt|;
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|Iter
operator|&
name|other
operator|)
expr_stmt|;
name|ClockElem
modifier|&
name|operator
modifier|*
parameter_list|()
function_decl|;
name|private
label|:
name|SyncClock
modifier|*
name|parent_
decl_stmt|;
comment|// [pos_, end_) is the current continuous range of clock elements.
name|ClockElem
modifier|*
name|pos_
decl_stmt|;
name|ClockElem
modifier|*
name|end_
decl_stmt|;
name|int
name|block_
decl_stmt|;
comment|// Current number of second level block.
name|NOINLINE
name|void
name|Next
parameter_list|()
function_decl|;
block|}
empty_stmt|;
name|Iter
name|begin
parameter_list|()
function_decl|;
name|Iter
name|end
parameter_list|()
function_decl|;
name|private
label|:
name|friend
name|class
name|ThreadClock
decl_stmt|;
name|friend
name|class
name|Iter
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kDirtyTids
init|=
literal|2
decl_stmt|;
struct|struct
name|Dirty
block|{
name|u64
name|epoch
range|:
name|kClkBits
decl_stmt|;
name|u64
name|tid
range|:
literal|64
operator|-
name|kClkBits
decl_stmt|;
comment|// kInvalidId if not active
block|}
struct|;
name|unsigned
name|release_store_tid_
decl_stmt|;
name|unsigned
name|release_store_reused_
decl_stmt|;
name|Dirty
name|dirty_
index|[
name|kDirtyTids
index|]
decl_stmt|;
comment|// If size_ is 0, tab_ is nullptr.
comment|// If size<= 64 (kClockCount), tab_ contains pointer to an array with
comment|// 64 ClockElem's (ClockBlock::clock).
comment|// Otherwise, tab_ points to an array with up to 127 u32 elements,
comment|// each pointing to the second-level 512b block with 64 ClockElem's.
comment|// Unused space in the first level ClockBlock is used to store additional
comment|// clock elements.
comment|// The last u32 element in the first level ClockBlock is always used as
comment|// reference counter.
comment|//
comment|// See the following scheme for details.
comment|// All memory blocks are 512 bytes (allocated from ClockAlloc).
comment|// Clock (clk) elements are 64 bits.
comment|// Idx and ref are 32 bits.
comment|//
comment|// tab_
comment|//    |
comment|//    \/
comment|//    +----------------------------------------------------+
comment|//    | clk128 | clk129 | ...unused... | idx1 | idx0 | ref |
comment|//    +----------------------------------------------------+
comment|//                                        |      |
comment|//                                        |      \/
comment|//                                        |      +----------------+
comment|//                                        |      | clk0 ... clk63 |
comment|//                                        |      +----------------+
comment|//                                        \/
comment|//                                        +------------------+
comment|//                                        | clk64 ... clk127 |
comment|//                                        +------------------+
comment|//
comment|// Note: dirty entries, if active, always override what's stored in the clock.
name|ClockBlock
modifier|*
name|tab_
decl_stmt|;
name|u32
name|tab_idx_
decl_stmt|;
name|u16
name|size_
decl_stmt|;
name|u16
name|blocks_
decl_stmt|;
comment|// Number of second level blocks.
name|void
name|Unshare
parameter_list|(
name|ClockCache
modifier|*
name|c
parameter_list|)
function_decl|;
name|bool
name|IsShared
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|Cachable
argument_list|()
specifier|const
expr_stmt|;
name|void
name|ResetImpl
parameter_list|()
function_decl|;
name|void
name|FlushDirty
parameter_list|()
function_decl|;
name|uptr
name|capacity
argument_list|()
specifier|const
expr_stmt|;
name|u32
name|get_block
argument_list|(
name|uptr
name|bi
argument_list|)
decl|const
decl_stmt|;
name|void
name|append_block
parameter_list|(
name|u32
name|idx
parameter_list|)
function_decl|;
name|ClockElem
modifier|&
name|elem
argument_list|(
name|unsigned
name|tid
argument_list|)
decl|const
decl_stmt|;
block|}
empty_stmt|;
comment|// The clock that lives in threads.
name|class
name|ThreadClock
block|{
name|public
label|:
typedef|typedef
name|DenseSlabAllocCache
name|Cache
typedef|;
name|explicit
name|ThreadClock
parameter_list|(
name|unsigned
name|tid
parameter_list|,
name|unsigned
name|reused
init|=
literal|0
parameter_list|)
function_decl|;
name|u64
name|get
argument_list|(
name|unsigned
name|tid
argument_list|)
decl|const
decl_stmt|;
name|void
name|set
parameter_list|(
name|ClockCache
modifier|*
name|c
parameter_list|,
name|unsigned
name|tid
parameter_list|,
name|u64
name|v
parameter_list|)
function_decl|;
name|void
name|set
parameter_list|(
name|u64
name|v
parameter_list|)
function_decl|;
name|void
name|tick
parameter_list|()
function_decl|;
name|uptr
name|size
argument_list|()
specifier|const
expr_stmt|;
name|void
name|acquire
parameter_list|(
name|ClockCache
modifier|*
name|c
parameter_list|,
name|SyncClock
modifier|*
name|src
parameter_list|)
function_decl|;
name|void
name|release
parameter_list|(
name|ClockCache
modifier|*
name|c
parameter_list|,
name|SyncClock
modifier|*
name|dst
parameter_list|)
function_decl|;
name|void
name|acq_rel
parameter_list|(
name|ClockCache
modifier|*
name|c
parameter_list|,
name|SyncClock
modifier|*
name|dst
parameter_list|)
function_decl|;
name|void
name|ReleaseStore
parameter_list|(
name|ClockCache
modifier|*
name|c
parameter_list|,
name|SyncClock
modifier|*
name|dst
parameter_list|)
function_decl|;
name|void
name|ResetCached
parameter_list|(
name|ClockCache
modifier|*
name|c
parameter_list|)
function_decl|;
name|void
name|DebugReset
parameter_list|()
function_decl|;
name|void
name|DebugDump
parameter_list|(
name|int
function_decl|(
modifier|*
name|printf
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|,
modifier|...
parameter_list|)
parameter_list|)
function_decl|;
name|private
label|:
specifier|static
specifier|const
name|uptr
name|kDirtyTids
init|=
name|SyncClock
operator|::
name|kDirtyTids
decl_stmt|;
comment|// Index of the thread associated with he clock ("current thread").
specifier|const
name|unsigned
name|tid_
decl_stmt|;
specifier|const
name|unsigned
name|reused_
decl_stmt|;
comment|// tid_ reuse count.
comment|// Current thread time when it acquired something from other threads.
name|u64
name|last_acquire_
decl_stmt|;
comment|// Cached SyncClock (without dirty entries and release_store_tid_).
comment|// We reuse it for subsequent store-release operations without intervening
comment|// acquire operations. Since it is shared (and thus constant), clock value
comment|// for the current thread is then stored in dirty entries in the SyncClock.
comment|// We host a refernece to the table while it is cached here.
name|u32
name|cached_idx_
decl_stmt|;
name|u16
name|cached_size_
decl_stmt|;
name|u16
name|cached_blocks_
decl_stmt|;
comment|// Number of active elements in the clk_ table (the rest is zeros).
name|uptr
name|nclk_
decl_stmt|;
name|u64
name|clk_
index|[
name|kMaxTidInClock
index|]
decl_stmt|;
comment|// Fixed size vector clock.
name|bool
name|IsAlreadyAcquired
argument_list|(
specifier|const
name|SyncClock
operator|*
name|src
argument_list|)
decl|const
decl_stmt|;
name|void
name|UpdateCurrentThread
argument_list|(
name|ClockCache
operator|*
name|c
argument_list|,
name|SyncClock
operator|*
name|dst
argument_list|)
decl|const
decl_stmt|;
block|}
empty_stmt|;
name|ALWAYS_INLINE
name|u64
name|ThreadClock
operator|::
name|get
argument_list|(
argument|unsigned tid
argument_list|)
specifier|const
block|{
name|DCHECK_LT
argument_list|(
name|tid
argument_list|,
name|kMaxTidInClock
argument_list|)
block|;
return|return
name|clk_
index|[
name|tid
index|]
return|;
block|}
name|ALWAYS_INLINE
name|void
name|ThreadClock
operator|::
name|set
argument_list|(
argument|u64 v
argument_list|)
block|{
name|DCHECK_GE
argument_list|(
name|v
argument_list|,
name|clk_
index|[
name|tid_
index|]
argument_list|)
block|;
name|clk_
index|[
name|tid_
index|]
operator|=
name|v
block|; }
name|ALWAYS_INLINE
name|void
name|ThreadClock
operator|::
name|tick
argument_list|()
block|{
name|clk_
index|[
name|tid_
index|]
operator|++
block|; }
name|ALWAYS_INLINE
name|uptr
name|ThreadClock
operator|::
name|size
argument_list|()
specifier|const
block|{
return|return
name|nclk_
return|;
block|}
name|ALWAYS_INLINE
name|SyncClock
operator|::
name|Iter
name|SyncClock
operator|::
name|begin
argument_list|()
block|{
return|return
name|Iter
argument_list|(
name|this
argument_list|)
return|;
block|}
name|ALWAYS_INLINE
name|SyncClock
operator|::
name|Iter
name|SyncClock
operator|::
name|end
argument_list|()
block|{
return|return
name|Iter
argument_list|(
name|nullptr
argument_list|)
return|;
block|}
name|ALWAYS_INLINE
name|uptr
name|SyncClock
operator|::
name|size
argument_list|()
specifier|const
block|{
return|return
name|size_
return|;
block|}
name|ALWAYS_INLINE
name|SyncClock
operator|::
name|Iter
operator|::
name|Iter
argument_list|(
name|SyncClock
operator|*
name|parent
argument_list|)
operator|:
name|parent_
argument_list|(
name|parent
argument_list|)
operator|,
name|pos_
argument_list|(
name|nullptr
argument_list|)
operator|,
name|end_
argument_list|(
name|nullptr
argument_list|)
operator|,
name|block_
argument_list|(
argument|-
literal|1
argument_list|)
block|{
if|if
condition|(
name|parent
condition|)
name|Next
argument_list|()
expr_stmt|;
block|}
name|ALWAYS_INLINE
name|SyncClock
operator|::
name|Iter
operator|&
name|SyncClock
operator|::
name|Iter
operator|::
name|operator
operator|++
operator|(
operator|)
block|{
name|pos_
operator|++
block|;
if|if
condition|(
name|UNLIKELY
argument_list|(
name|pos_
operator|>=
name|end_
argument_list|)
condition|)
name|Next
argument_list|()
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|ALWAYS_INLINE
name|bool
name|SyncClock
operator|::
name|Iter
operator|::
name|operator
operator|!=
operator|(
specifier|const
name|SyncClock
operator|::
name|Iter
operator|&
name|other
operator|)
block|{
return|return
name|parent_
operator|!=
name|other
operator|.
name|parent_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|ALWAYS_INLINE
name|ClockElem
operator|&
name|SyncClock
operator|::
name|Iter
operator|::
name|operator
operator|*
operator|(
operator|)
block|{
return|return
operator|*
name|pos_
return|;
block|}
end_expr_stmt

begin_comment
unit|}
comment|// namespace __tsan
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// TSAN_CLOCK_H
end_comment

end_unit

