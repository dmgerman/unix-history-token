begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- tsan_clock.h --------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is a part of ThreadSanitizer (TSan), a race detector.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|TSAN_CLOCK_H
end_ifndef

begin_define
define|#
directive|define
name|TSAN_CLOCK_H
end_define

begin_include
include|#
directive|include
file|"tsan_defs.h"
end_include

begin_include
include|#
directive|include
file|"tsan_dense_alloc.h"
end_include

begin_decl_stmt
name|namespace
name|__tsan
block|{
struct|struct
name|ClockElem
block|{
name|u64
name|epoch
range|:
name|kClkBits
decl_stmt|;
name|u64
name|reused
range|:
literal|64
operator|-
name|kClkBits
decl_stmt|;
block|}
struct|;
struct|struct
name|ClockBlock
block|{
specifier|static
specifier|const
name|uptr
name|kSize
init|=
literal|512
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kTableSize
init|=
name|kSize
operator|/
sizeof|sizeof
argument_list|(
name|u32
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kClockCount
init|=
name|kSize
operator|/
sizeof|sizeof
argument_list|(
name|ClockElem
argument_list|)
decl_stmt|;
union|union
block|{
name|u32
name|table
index|[
name|kTableSize
index|]
decl_stmt|;
name|ClockElem
name|clock
index|[
name|kClockCount
index|]
decl_stmt|;
block|}
union|;
name|ClockBlock
argument_list|()
block|{   }
block|}
struct|;
typedef|typedef
name|DenseSlabAlloc
operator|<
name|ClockBlock
operator|,
literal|1
operator|<<
literal|16
operator|,
literal|1
operator|<<
literal|10
operator|>
name|ClockAlloc
expr_stmt|;
typedef|typedef
name|DenseSlabAllocCache
name|ClockCache
typedef|;
comment|// The clock that lives in sync variables (mutexes, atomics, etc).
name|class
name|SyncClock
block|{
name|public
label|:
name|SyncClock
argument_list|()
expr_stmt|;
operator|~
name|SyncClock
argument_list|()
expr_stmt|;
name|uptr
name|size
argument_list|()
specifier|const
block|{
return|return
name|size_
return|;
block|}
name|u64
name|get
argument_list|(
name|unsigned
name|tid
argument_list|)
decl|const
block|{
return|return
name|elem
argument_list|(
name|tid
argument_list|)
operator|.
name|epoch
return|;
block|}
name|void
name|Resize
parameter_list|(
name|ClockCache
modifier|*
name|c
parameter_list|,
name|uptr
name|nclk
parameter_list|)
function_decl|;
name|void
name|Reset
parameter_list|(
name|ClockCache
modifier|*
name|c
parameter_list|)
function_decl|;
name|void
name|DebugDump
parameter_list|(
name|int
function_decl|(
modifier|*
name|printf
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|,
modifier|...
parameter_list|)
parameter_list|)
function_decl|;
name|private
label|:
name|friend
struct_decl|struct
name|ThreadClock
struct_decl|;
specifier|static
specifier|const
name|uptr
name|kDirtyTids
init|=
literal|2
decl_stmt|;
name|unsigned
name|release_store_tid_
decl_stmt|;
name|unsigned
name|release_store_reused_
decl_stmt|;
name|unsigned
name|dirty_tids_
index|[
name|kDirtyTids
index|]
decl_stmt|;
comment|// tab_ contains indirect pointer to a 512b block using DenseSlabAlloc.
comment|// If size_<= 64, then tab_ points to an array with 64 ClockElem's.
comment|// Otherwise, tab_ points to an array with 128 u32 elements,
comment|// each pointing to the second-level 512b block with 64 ClockElem's.
name|ClockBlock
modifier|*
name|tab_
decl_stmt|;
name|u32
name|tab_idx_
decl_stmt|;
name|u32
name|size_
decl_stmt|;
name|ClockElem
modifier|&
name|elem
argument_list|(
name|unsigned
name|tid
argument_list|)
decl|const
decl_stmt|;
block|}
empty_stmt|;
comment|// The clock that lives in threads.
struct|struct
name|ThreadClock
block|{
name|public
label|:
typedef|typedef
name|DenseSlabAllocCache
name|Cache
typedef|;
name|explicit
name|ThreadClock
parameter_list|(
name|unsigned
name|tid
parameter_list|,
name|unsigned
name|reused
init|=
literal|0
parameter_list|)
function_decl|;
name|u64
name|get
argument_list|(
name|unsigned
name|tid
argument_list|)
decl|const
block|{
name|DCHECK_LT
argument_list|(
name|tid
argument_list|,
name|kMaxTidInClock
argument_list|)
expr_stmt|;
return|return
name|clk_
index|[
name|tid
index|]
operator|.
name|epoch
return|;
block|}
name|void
name|set
parameter_list|(
name|unsigned
name|tid
parameter_list|,
name|u64
name|v
parameter_list|)
function_decl|;
name|void
name|set
parameter_list|(
name|u64
name|v
parameter_list|)
block|{
name|DCHECK_GE
argument_list|(
name|v
argument_list|,
name|clk_
index|[
name|tid_
index|]
operator|.
name|epoch
argument_list|)
expr_stmt|;
name|clk_
index|[
name|tid_
index|]
operator|.
name|epoch
operator|=
name|v
expr_stmt|;
block|}
name|void
name|tick
parameter_list|()
block|{
name|clk_
index|[
name|tid_
index|]
operator|.
name|epoch
operator|++
expr_stmt|;
block|}
name|uptr
name|size
argument_list|()
specifier|const
block|{
return|return
name|nclk_
return|;
block|}
name|void
name|acquire
parameter_list|(
name|ClockCache
modifier|*
name|c
parameter_list|,
specifier|const
name|SyncClock
modifier|*
name|src
parameter_list|)
function_decl|;
name|void
name|release
argument_list|(
name|ClockCache
operator|*
name|c
argument_list|,
name|SyncClock
operator|*
name|dst
argument_list|)
decl|const
decl_stmt|;
name|void
name|acq_rel
parameter_list|(
name|ClockCache
modifier|*
name|c
parameter_list|,
name|SyncClock
modifier|*
name|dst
parameter_list|)
function_decl|;
name|void
name|ReleaseStore
argument_list|(
name|ClockCache
operator|*
name|c
argument_list|,
name|SyncClock
operator|*
name|dst
argument_list|)
decl|const
decl_stmt|;
name|void
name|DebugReset
parameter_list|()
function_decl|;
name|void
name|DebugDump
parameter_list|(
name|int
function_decl|(
modifier|*
name|printf
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|,
modifier|...
parameter_list|)
parameter_list|)
function_decl|;
name|private
label|:
specifier|static
specifier|const
name|uptr
name|kDirtyTids
init|=
name|SyncClock
operator|::
name|kDirtyTids
decl_stmt|;
specifier|const
name|unsigned
name|tid_
decl_stmt|;
specifier|const
name|unsigned
name|reused_
decl_stmt|;
name|u64
name|last_acquire_
decl_stmt|;
name|uptr
name|nclk_
decl_stmt|;
name|ClockElem
name|clk_
index|[
name|kMaxTidInClock
index|]
decl_stmt|;
name|bool
name|IsAlreadyAcquired
argument_list|(
specifier|const
name|SyncClock
operator|*
name|src
argument_list|)
decl|const
decl_stmt|;
name|void
name|UpdateCurrentThread
argument_list|(
name|SyncClock
operator|*
name|dst
argument_list|)
decl|const
decl_stmt|;
block|}
struct|;
block|}
end_decl_stmt

begin_comment
comment|// namespace __tsan
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// TSAN_CLOCK_H
end_comment

end_unit

