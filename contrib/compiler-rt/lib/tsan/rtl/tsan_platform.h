begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- tsan_platform.h -----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is a part of ThreadSanitizer (TSan), a race detector.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Platform-specific code.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|TSAN_PLATFORM_H
end_ifndef

begin_define
define|#
directive|define
name|TSAN_PLATFORM_H
end_define

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__LP64__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|_WIN64
argument_list|)
end_if

begin_error
error|#
directive|error
literal|"Only 64-bit is supported"
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|"tsan_defs.h"
end_include

begin_include
include|#
directive|include
file|"tsan_trace.h"
end_include

begin_decl_stmt
name|namespace
name|__tsan
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|SANITIZER_GO
argument_list|)
if|#
directive|if
name|defined
argument_list|(
name|__x86_64__
argument_list|)
comment|/* C/C++ on linux/x86_64 and freebsd/x86_64 0000 0000 1000 - 0100 0000 0000: main binary and/or MAP_32BIT mappings 0100 0000 0000 - 0200 0000 0000: - 0200 0000 0000 - 1000 0000 0000: shadow 1000 0000 0000 - 3000 0000 0000: - 3000 0000 0000 - 4000 0000 0000: metainfo (memory blocks and sync objects) 4000 0000 0000 - 6000 0000 0000: - 6000 0000 0000 - 6200 0000 0000: traces 6200 0000 0000 - 7d00 0000 0000: - 7d00 0000 0000 - 7e00 0000 0000: heap 7e00 0000 0000 - 7e80 0000 0000: - 7e80 0000 0000 - 8000 0000 0000: modules and main thread stack */
specifier|const
name|uptr
name|kMetaShadowBeg
init|=
literal|0x300000000000ull
decl_stmt|;
specifier|const
name|uptr
name|kMetaShadowEnd
init|=
literal|0x400000000000ull
decl_stmt|;
specifier|const
name|uptr
name|kTraceMemBeg
init|=
literal|0x600000000000ull
decl_stmt|;
specifier|const
name|uptr
name|kTraceMemEnd
init|=
literal|0x620000000000ull
decl_stmt|;
specifier|const
name|uptr
name|kShadowBeg
init|=
literal|0x020000000000ull
decl_stmt|;
specifier|const
name|uptr
name|kShadowEnd
init|=
literal|0x100000000000ull
decl_stmt|;
specifier|const
name|uptr
name|kHeapMemBeg
init|=
literal|0x7d0000000000ull
decl_stmt|;
specifier|const
name|uptr
name|kHeapMemEnd
init|=
literal|0x7e0000000000ull
decl_stmt|;
specifier|const
name|uptr
name|kLoAppMemBeg
init|=
literal|0x000000001000ull
decl_stmt|;
specifier|const
name|uptr
name|kLoAppMemEnd
init|=
literal|0x010000000000ull
decl_stmt|;
specifier|const
name|uptr
name|kHiAppMemBeg
init|=
literal|0x7e8000000000ull
decl_stmt|;
specifier|const
name|uptr
name|kHiAppMemEnd
init|=
literal|0x800000000000ull
decl_stmt|;
specifier|const
name|uptr
name|kAppMemMsk
init|=
literal|0x7c0000000000ull
decl_stmt|;
specifier|const
name|uptr
name|kAppMemXor
init|=
literal|0x020000000000ull
decl_stmt|;
specifier|const
name|uptr
name|kVdsoBeg
init|=
literal|0xf000000000000000ull
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__mips64
argument_list|)
comment|/* C/C++ on linux/mips64 0100 0000 00 - 0200 0000 00: main binary 0200 0000 00 - 1400 0000 00: - 1400 0000 00 - 2400 0000 00: shadow 2400 0000 00 - 3000 0000 00: - 3000 0000 00 - 4000 0000 00: metainfo (memory blocks and sync objects) 4000 0000 00 - 6000 0000 00: - 6000 0000 00 - 6200 0000 00: traces 6200 0000 00 - fe00 0000 00: - fe00 0000 00 - ff00 0000 00: heap ff00 0000 00 - ff80 0000 00: - ff80 0000 00 - ffff ffff ff: modules and main thread stack */
specifier|const
name|uptr
name|kMetaShadowBeg
init|=
literal|0x3000000000ull
decl_stmt|;
specifier|const
name|uptr
name|kMetaShadowEnd
init|=
literal|0x4000000000ull
decl_stmt|;
specifier|const
name|uptr
name|kTraceMemBeg
init|=
literal|0x6000000000ull
decl_stmt|;
specifier|const
name|uptr
name|kTraceMemEnd
init|=
literal|0x6200000000ull
decl_stmt|;
specifier|const
name|uptr
name|kShadowBeg
init|=
literal|0x1400000000ull
decl_stmt|;
specifier|const
name|uptr
name|kShadowEnd
init|=
literal|0x2400000000ull
decl_stmt|;
specifier|const
name|uptr
name|kHeapMemBeg
init|=
literal|0xfe00000000ull
decl_stmt|;
specifier|const
name|uptr
name|kHeapMemEnd
init|=
literal|0xff00000000ull
decl_stmt|;
specifier|const
name|uptr
name|kLoAppMemBeg
init|=
literal|0x0100000000ull
decl_stmt|;
specifier|const
name|uptr
name|kLoAppMemEnd
init|=
literal|0x0200000000ull
decl_stmt|;
specifier|const
name|uptr
name|kHiAppMemBeg
init|=
literal|0xff80000000ull
decl_stmt|;
specifier|const
name|uptr
name|kHiAppMemEnd
init|=
literal|0xffffffffffull
decl_stmt|;
specifier|const
name|uptr
name|kAppMemMsk
init|=
literal|0xfc00000000ull
decl_stmt|;
specifier|const
name|uptr
name|kAppMemXor
init|=
literal|0x0400000000ull
decl_stmt|;
specifier|const
name|uptr
name|kVdsoBeg
init|=
literal|0xfffff00000ull
decl_stmt|;
endif|#
directive|endif
name|ALWAYS_INLINE
name|bool
name|IsAppMem
parameter_list|(
name|uptr
name|mem
parameter_list|)
block|{
return|return
operator|(
name|mem
operator|>=
name|kHeapMemBeg
operator|&&
name|mem
operator|<
name|kHeapMemEnd
operator|)
operator|||
operator|(
name|mem
operator|>=
name|kLoAppMemBeg
operator|&&
name|mem
operator|<
name|kLoAppMemEnd
operator|)
operator|||
operator|(
name|mem
operator|>=
name|kHiAppMemBeg
operator|&&
name|mem
operator|<
name|kHiAppMemEnd
operator|)
return|;
block|}
name|ALWAYS_INLINE
name|bool
name|IsShadowMem
parameter_list|(
name|uptr
name|mem
parameter_list|)
block|{
return|return
name|mem
operator|>=
name|kShadowBeg
operator|&&
name|mem
operator|<=
name|kShadowEnd
return|;
block|}
name|ALWAYS_INLINE
name|bool
name|IsMetaMem
parameter_list|(
name|uptr
name|mem
parameter_list|)
block|{
return|return
name|mem
operator|>=
name|kMetaShadowBeg
operator|&&
name|mem
operator|<=
name|kMetaShadowEnd
return|;
block|}
name|ALWAYS_INLINE
name|uptr
name|MemToShadow
parameter_list|(
name|uptr
name|x
parameter_list|)
block|{
name|DCHECK
argument_list|(
name|IsAppMem
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
operator|(
name|x
operator|)
operator|&
operator|~
operator|(
name|kAppMemMsk
operator||
operator|(
name|kShadowCell
operator|-
literal|1
operator|)
operator|)
operator|)
operator|^
name|kAppMemXor
operator|)
operator|*
name|kShadowCnt
return|;
block|}
name|ALWAYS_INLINE
name|u32
modifier|*
name|MemToMeta
parameter_list|(
name|uptr
name|x
parameter_list|)
block|{
name|DCHECK
argument_list|(
name|IsAppMem
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|u32
operator|*
operator|)
operator|(
operator|(
operator|(
operator|(
operator|(
name|x
operator|)
operator|&
operator|~
operator|(
name|kAppMemMsk
operator||
operator|(
name|kMetaShadowCell
operator|-
literal|1
operator|)
operator|)
operator|)
operator|^
name|kAppMemXor
operator|)
operator|/
name|kMetaShadowCell
operator|*
name|kMetaShadowSize
operator|)
operator||
name|kMetaShadowBeg
operator|)
return|;
block|}
name|ALWAYS_INLINE
name|uptr
name|ShadowToMem
parameter_list|(
name|uptr
name|s
parameter_list|)
block|{
name|CHECK
argument_list|(
name|IsShadowMem
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|>=
name|MemToShadow
argument_list|(
name|kLoAppMemBeg
argument_list|)
operator|&&
name|s
operator|<=
name|MemToShadow
argument_list|(
name|kLoAppMemEnd
operator|-
literal|1
argument_list|)
condition|)
return|return
operator|(
name|s
operator|/
name|kShadowCnt
operator|)
operator|^
name|kAppMemXor
return|;
else|else
return|return
operator|(
operator|(
name|s
operator|/
name|kShadowCnt
operator|)
operator|^
name|kAppMemXor
operator|)
operator||
name|kAppMemMsk
return|;
block|}
specifier|static
name|USED
name|uptr
name|UserRegions
index|[]
init|=
block|{
name|kLoAppMemBeg
block|,
name|kLoAppMemEnd
block|,
name|kHiAppMemBeg
block|,
name|kHiAppMemEnd
block|,
name|kHeapMemBeg
block|,
name|kHeapMemEnd
block|, }
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|SANITIZER_GO
argument_list|)
operator|&&
operator|!
name|SANITIZER_WINDOWS
comment|/* Go on linux, darwin and freebsd 0000 0000 1000 - 0000 1000 0000: executable 0000 1000 0000 - 00c0 0000 0000: - 00c0 0000 0000 - 00e0 0000 0000: heap 00e0 0000 0000 - 2000 0000 0000: - 2000 0000 0000 - 2380 0000 0000: shadow 2380 0000 0000 - 3000 0000 0000: - 3000 0000 0000 - 4000 0000 0000: metainfo (memory blocks and sync objects) 4000 0000 0000 - 6000 0000 0000: - 6000 0000 0000 - 6200 0000 0000: traces 6200 0000 0000 - 8000 0000 0000: - */
specifier|const
name|uptr
name|kMetaShadowBeg
init|=
literal|0x300000000000ull
decl_stmt|;
specifier|const
name|uptr
name|kMetaShadowEnd
init|=
literal|0x400000000000ull
decl_stmt|;
specifier|const
name|uptr
name|kTraceMemBeg
init|=
literal|0x600000000000ull
decl_stmt|;
specifier|const
name|uptr
name|kTraceMemEnd
init|=
literal|0x620000000000ull
decl_stmt|;
specifier|const
name|uptr
name|kShadowBeg
init|=
literal|0x200000000000ull
decl_stmt|;
specifier|const
name|uptr
name|kShadowEnd
init|=
literal|0x238000000000ull
decl_stmt|;
specifier|const
name|uptr
name|kAppMemBeg
init|=
literal|0x000000001000ull
decl_stmt|;
specifier|const
name|uptr
name|kAppMemEnd
init|=
literal|0x00e000000000ull
decl_stmt|;
name|ALWAYS_INLINE
name|bool
name|IsAppMem
parameter_list|(
name|uptr
name|mem
parameter_list|)
block|{
return|return
name|mem
operator|>=
name|kAppMemBeg
operator|&&
name|mem
operator|<
name|kAppMemEnd
return|;
block|}
name|ALWAYS_INLINE
name|bool
name|IsShadowMem
parameter_list|(
name|uptr
name|mem
parameter_list|)
block|{
return|return
name|mem
operator|>=
name|kShadowBeg
operator|&&
name|mem
operator|<=
name|kShadowEnd
return|;
block|}
name|ALWAYS_INLINE
name|bool
name|IsMetaMem
parameter_list|(
name|uptr
name|mem
parameter_list|)
block|{
return|return
name|mem
operator|>=
name|kMetaShadowBeg
operator|&&
name|mem
operator|<=
name|kMetaShadowEnd
return|;
block|}
name|ALWAYS_INLINE
name|uptr
name|MemToShadow
parameter_list|(
name|uptr
name|x
parameter_list|)
block|{
name|DCHECK
argument_list|(
name|IsAppMem
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|x
operator|&
operator|~
operator|(
name|kShadowCell
operator|-
literal|1
operator|)
operator|)
operator|*
name|kShadowCnt
operator|)
operator||
name|kShadowBeg
return|;
block|}
name|ALWAYS_INLINE
name|u32
modifier|*
name|MemToMeta
parameter_list|(
name|uptr
name|x
parameter_list|)
block|{
name|DCHECK
argument_list|(
name|IsAppMem
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|u32
operator|*
operator|)
operator|(
operator|(
operator|(
name|x
operator|&
operator|~
operator|(
name|kMetaShadowCell
operator|-
literal|1
operator|)
operator|)
operator|/
expr|\
name|kMetaShadowCell
operator|*
name|kMetaShadowSize
operator|)
operator||
name|kMetaShadowBeg
operator|)
return|;
block|}
name|ALWAYS_INLINE
name|uptr
name|ShadowToMem
parameter_list|(
name|uptr
name|s
parameter_list|)
block|{
name|CHECK
argument_list|(
name|IsShadowMem
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|s
operator|&
operator|~
name|kShadowBeg
operator|)
operator|/
name|kShadowCnt
return|;
block|}
specifier|static
name|USED
name|uptr
name|UserRegions
index|[]
init|=
block|{
name|kAppMemBeg
block|,
name|kAppMemEnd
block|, }
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|SANITIZER_GO
argument_list|)
operator|&&
name|SANITIZER_WINDOWS
comment|/* Go on windows 0000 0000 1000 - 0000 1000 0000: executable 0000 1000 0000 - 00f8 0000 0000: - 00c0 0000 0000 - 00e0 0000 0000: heap 00e0 0000 0000 - 0100 0000 0000: - 0100 0000 0000 - 0500 0000 0000: shadow 0500 0000 0000 - 0560 0000 0000: - 0560 0000 0000 - 0760 0000 0000: traces 0760 0000 0000 - 07d0 0000 0000: metainfo (memory blocks and sync objects) 07d0 0000 0000 - 8000 0000 0000: - */
specifier|const
name|uptr
name|kMetaShadowBeg
init|=
literal|0x076000000000ull
decl_stmt|;
specifier|const
name|uptr
name|kMetaShadowEnd
init|=
literal|0x07d000000000ull
decl_stmt|;
specifier|const
name|uptr
name|kTraceMemBeg
init|=
literal|0x056000000000ull
decl_stmt|;
specifier|const
name|uptr
name|kTraceMemEnd
init|=
literal|0x076000000000ull
decl_stmt|;
specifier|const
name|uptr
name|kShadowBeg
init|=
literal|0x010000000000ull
decl_stmt|;
specifier|const
name|uptr
name|kShadowEnd
init|=
literal|0x050000000000ull
decl_stmt|;
specifier|const
name|uptr
name|kAppMemBeg
init|=
literal|0x000000001000ull
decl_stmt|;
specifier|const
name|uptr
name|kAppMemEnd
init|=
literal|0x00e000000000ull
decl_stmt|;
name|ALWAYS_INLINE
name|bool
name|IsAppMem
parameter_list|(
name|uptr
name|mem
parameter_list|)
block|{
return|return
name|mem
operator|>=
name|kAppMemBeg
operator|&&
name|mem
operator|<
name|kAppMemEnd
return|;
block|}
name|ALWAYS_INLINE
name|bool
name|IsShadowMem
parameter_list|(
name|uptr
name|mem
parameter_list|)
block|{
return|return
name|mem
operator|>=
name|kShadowBeg
operator|&&
name|mem
operator|<=
name|kShadowEnd
return|;
block|}
name|ALWAYS_INLINE
name|bool
name|IsMetaMem
parameter_list|(
name|uptr
name|mem
parameter_list|)
block|{
return|return
name|mem
operator|>=
name|kMetaShadowBeg
operator|&&
name|mem
operator|<=
name|kMetaShadowEnd
return|;
block|}
name|ALWAYS_INLINE
name|uptr
name|MemToShadow
parameter_list|(
name|uptr
name|x
parameter_list|)
block|{
name|DCHECK
argument_list|(
name|IsAppMem
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|x
operator|&
operator|~
operator|(
name|kShadowCell
operator|-
literal|1
operator|)
operator|)
operator|*
name|kShadowCnt
operator|)
operator|+
name|kShadowBeg
return|;
block|}
name|ALWAYS_INLINE
name|u32
modifier|*
name|MemToMeta
parameter_list|(
name|uptr
name|x
parameter_list|)
block|{
name|DCHECK
argument_list|(
name|IsAppMem
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|u32
operator|*
operator|)
operator|(
operator|(
operator|(
name|x
operator|&
operator|~
operator|(
name|kMetaShadowCell
operator|-
literal|1
operator|)
operator|)
operator|/
expr|\
name|kMetaShadowCell
operator|*
name|kMetaShadowSize
operator|)
operator||
name|kMetaShadowBeg
operator|)
return|;
block|}
name|ALWAYS_INLINE
name|uptr
name|ShadowToMem
parameter_list|(
name|uptr
name|s
parameter_list|)
block|{
name|CHECK
argument_list|(
name|IsShadowMem
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
comment|// FIXME(dvyukov): this is most likely wrong as the mapping is not bijection.
return|return
operator|(
name|s
operator|-
name|kShadowBeg
operator|)
operator|/
name|kShadowCnt
return|;
block|}
specifier|static
name|USED
name|uptr
name|UserRegions
index|[]
init|=
block|{
name|kAppMemBeg
block|,
name|kAppMemEnd
block|, }
decl_stmt|;
else|#
directive|else
error|#
directive|error
literal|"Unknown platform"
endif|#
directive|endif
comment|// The additional page is to catch shadow stack overflow as paging fault.
comment|// Windows wants 64K alignment for mmaps.
specifier|const
name|uptr
name|kTotalTraceSize
init|=
operator|(
name|kTraceSize
operator|*
sizeof|sizeof
argument_list|(
name|Event
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|Trace
argument_list|)
operator|+
operator|(
literal|64
operator|<<
literal|10
operator|)
operator|+
operator|(
literal|64
operator|<<
literal|10
operator|)
operator|-
literal|1
operator|)
operator|&
operator|~
operator|(
operator|(
literal|64
operator|<<
literal|10
operator|)
operator|-
literal|1
operator|)
decl_stmt|;
name|uptr
name|ALWAYS_INLINE
name|GetThreadTrace
parameter_list|(
name|int
name|tid
parameter_list|)
block|{
name|uptr
name|p
init|=
name|kTraceMemBeg
operator|+
operator|(
name|uptr
operator|)
name|tid
operator|*
name|kTotalTraceSize
decl_stmt|;
name|DCHECK_LT
argument_list|(
name|p
argument_list|,
name|kTraceMemEnd
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
name|uptr
name|ALWAYS_INLINE
name|GetThreadTraceHeader
parameter_list|(
name|int
name|tid
parameter_list|)
block|{
name|uptr
name|p
init|=
name|kTraceMemBeg
operator|+
operator|(
name|uptr
operator|)
name|tid
operator|*
name|kTotalTraceSize
operator|+
name|kTraceSize
operator|*
sizeof|sizeof
argument_list|(
name|Event
argument_list|)
decl_stmt|;
name|DCHECK_LT
argument_list|(
name|p
argument_list|,
name|kTraceMemEnd
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
name|void
name|InitializePlatform
parameter_list|()
function_decl|;
name|void
name|FlushShadowMemory
parameter_list|()
function_decl|;
name|void
name|WriteMemoryProfile
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|uptr
name|buf_size
parameter_list|,
name|uptr
name|nthread
parameter_list|,
name|uptr
name|nlive
parameter_list|)
function_decl|;
comment|// Says whether the addr relates to a global var.
comment|// Guesses with high probability, may yield both false positives and negatives.
name|bool
name|IsGlobalVar
parameter_list|(
name|uptr
name|addr
parameter_list|)
function_decl|;
name|int
name|ExtractResolvFDs
parameter_list|(
name|void
modifier|*
name|state
parameter_list|,
name|int
modifier|*
name|fds
parameter_list|,
name|int
name|nfd
parameter_list|)
function_decl|;
name|int
name|ExtractRecvmsgFDs
parameter_list|(
name|void
modifier|*
name|msg
parameter_list|,
name|int
modifier|*
name|fds
parameter_list|,
name|int
name|nfd
parameter_list|)
function_decl|;
name|int
name|call_pthread_cancel_with_cleanup
parameter_list|(
name|int
function_decl|(
modifier|*
name|fn
function_decl|)
parameter_list|(
name|void
modifier|*
name|c
parameter_list|,
name|void
modifier|*
name|m
parameter_list|,
name|void
modifier|*
name|abstime
parameter_list|)
parameter_list|,
name|void
modifier|*
name|c
parameter_list|,
name|void
modifier|*
name|m
parameter_list|,
name|void
modifier|*
name|abstime
parameter_list|,
name|void
function_decl|(
modifier|*
name|cleanup
function_decl|)
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|)
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_comment
comment|// namespace __tsan
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// TSAN_PLATFORM_H
end_comment

end_unit

