begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- tsan_platform.h -----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is a part of ThreadSanitizer (TSan), a race detector.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Platform-specific code.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|TSAN_PLATFORM_H
end_ifndef

begin_define
define|#
directive|define
name|TSAN_PLATFORM_H
end_define

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__LP64__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|_WIN64
argument_list|)
end_if

begin_error
error|#
directive|error
literal|"Only 64-bit is supported"
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|"tsan_defs.h"
end_include

begin_include
include|#
directive|include
file|"tsan_trace.h"
end_include

begin_decl_stmt
name|namespace
name|__tsan
block|{
if|#
directive|if
operator|!
name|SANITIZER_GO
if|#
directive|if
name|defined
argument_list|(
name|__x86_64__
argument_list|)
comment|/* C/C++ on linux/x86_64 and freebsd/x86_64 0000 0000 1000 - 0080 0000 0000: main binary and/or MAP_32BIT mappings (512GB) 0040 0000 0000 - 0100 0000 0000: - 0100 0000 0000 - 2000 0000 0000: shadow 2000 0000 0000 - 3000 0000 0000: - 3000 0000 0000 - 4000 0000 0000: metainfo (memory blocks and sync objects) 4000 0000 0000 - 5500 0000 0000: - 5500 0000 0000 - 5680 0000 0000: pie binaries without ASLR or on 4.1+ kernels 5680 0000 0000 - 6000 0000 0000: - 6000 0000 0000 - 6200 0000 0000: traces 6200 0000 0000 - 7d00 0000 0000: - 7b00 0000 0000 - 7c00 0000 0000: heap 7c00 0000 0000 - 7e80 0000 0000: - 7e80 0000 0000 - 8000 0000 0000: modules and main thread stack */
struct|struct
name|Mapping
block|{
specifier|static
specifier|const
name|uptr
name|kMetaShadowBeg
init|=
literal|0x300000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kMetaShadowEnd
init|=
literal|0x340000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kTraceMemBeg
init|=
literal|0x600000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kTraceMemEnd
init|=
literal|0x620000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kShadowBeg
init|=
literal|0x010000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kShadowEnd
init|=
literal|0x200000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kHeapMemBeg
init|=
literal|0x7b0000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kHeapMemEnd
init|=
literal|0x7c0000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kLoAppMemBeg
init|=
literal|0x000000001000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kLoAppMemEnd
init|=
literal|0x008000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kMidAppMemBeg
init|=
literal|0x550000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kMidAppMemEnd
init|=
literal|0x568000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kHiAppMemBeg
init|=
literal|0x7e8000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kHiAppMemEnd
init|=
literal|0x800000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kAppMemMsk
init|=
literal|0x780000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kAppMemXor
init|=
literal|0x040000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kVdsoBeg
init|=
literal|0xf000000000000000ull
decl_stmt|;
block|}
struct|;
define|#
directive|define
name|TSAN_MID_APP_RANGE
value|1
elif|#
directive|elif
name|defined
argument_list|(
name|__mips64
argument_list|)
comment|/* C/C++ on linux/mips64 0100 0000 00 - 0200 0000 00: main binary 0200 0000 00 - 1400 0000 00: - 1400 0000 00 - 2400 0000 00: shadow 2400 0000 00 - 3000 0000 00: - 3000 0000 00 - 4000 0000 00: metainfo (memory blocks and sync objects) 4000 0000 00 - 6000 0000 00: - 6000 0000 00 - 6200 0000 00: traces 6200 0000 00 - fe00 0000 00: - fe00 0000 00 - ff00 0000 00: heap ff00 0000 00 - ff80 0000 00: - ff80 0000 00 - ffff ffff ff: modules and main thread stack */
struct|struct
name|Mapping
block|{
specifier|static
specifier|const
name|uptr
name|kMetaShadowBeg
init|=
literal|0x4000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kMetaShadowEnd
init|=
literal|0x5000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kTraceMemBeg
init|=
literal|0xb000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kTraceMemEnd
init|=
literal|0xb200000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kShadowBeg
init|=
literal|0x2400000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kShadowEnd
init|=
literal|0x4000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kHeapMemBeg
init|=
literal|0xfe00000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kHeapMemEnd
init|=
literal|0xff00000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kLoAppMemBeg
init|=
literal|0x0100000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kLoAppMemEnd
init|=
literal|0x0200000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kMidAppMemBeg
init|=
literal|0xaa00000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kMidAppMemEnd
init|=
literal|0xab00000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kHiAppMemBeg
init|=
literal|0xff80000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kHiAppMemEnd
init|=
literal|0xffffffffffull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kAppMemMsk
init|=
literal|0xf800000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kAppMemXor
init|=
literal|0x0800000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kVdsoBeg
init|=
literal|0xfffff00000ull
decl_stmt|;
block|}
struct|;
define|#
directive|define
name|TSAN_MID_APP_RANGE
value|1
elif|#
directive|elif
name|defined
argument_list|(
name|__aarch64__
argument_list|)
operator|&&
name|defined
argument_list|(
name|__APPLE__
argument_list|)
comment|/* C/C++ on Darwin/iOS/ARM64 (36-bit VMA, 64 GB VM) 0000 0000 00 - 0100 0000 00: -                                    (4 GB) 0100 0000 00 - 0200 0000 00: main binary, modules, thread stacks  (4 GB) 0200 0000 00 - 0300 0000 00: heap                                 (4 GB) 0300 0000 00 - 0400 0000 00: -                                    (4 GB) 0400 0000 00 - 0c00 0000 00: shadow memory                       (32 GB) 0c00 0000 00 - 0d00 0000 00: -                                    (4 GB) 0d00 0000 00 - 0e00 0000 00: metainfo                             (4 GB) 0e00 0000 00 - 0f00 0000 00: -                                    (4 GB) 0f00 0000 00 - 1000 0000 00: traces                               (4 GB) */
struct|struct
name|Mapping
block|{
specifier|static
specifier|const
name|uptr
name|kLoAppMemBeg
init|=
literal|0x0100000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kLoAppMemEnd
init|=
literal|0x0200000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kHeapMemBeg
init|=
literal|0x0200000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kHeapMemEnd
init|=
literal|0x0300000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kShadowBeg
init|=
literal|0x0400000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kShadowEnd
init|=
literal|0x0c00000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kMetaShadowBeg
init|=
literal|0x0d00000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kMetaShadowEnd
init|=
literal|0x0e00000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kTraceMemBeg
init|=
literal|0x0f00000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kTraceMemEnd
init|=
literal|0x1000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kHiAppMemBeg
init|=
literal|0x1000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kHiAppMemEnd
init|=
literal|0x1000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kAppMemMsk
init|=
literal|0x0ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kAppMemXor
init|=
literal|0x0ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kVdsoBeg
init|=
literal|0x7000000000000000ull
decl_stmt|;
block|}
struct|;
elif|#
directive|elif
name|defined
argument_list|(
name|__aarch64__
argument_list|)
comment|// AArch64 supports multiple VMA which leads to multiple address transformation
comment|// functions.  To support these multiple VMAS transformations and mappings TSAN
comment|// runtime for AArch64 uses an external memory read (vmaSize) to select which
comment|// mapping to use.  Although slower, it make a same instrumented binary run on
comment|// multiple kernels.
comment|/* C/C++ on linux/aarch64 (39-bit VMA) 0000 0010 00 - 0100 0000 00: main binary 0100 0000 00 - 0800 0000 00: - 0800 0000 00 - 2000 0000 00: shadow memory 2000 0000 00 - 3100 0000 00: - 3100 0000 00 - 3400 0000 00: metainfo 3400 0000 00 - 5500 0000 00: - 5500 0000 00 - 5600 0000 00: main binary (PIE) 5600 0000 00 - 6000 0000 00: - 6000 0000 00 - 6200 0000 00: traces 6200 0000 00 - 7d00 0000 00: - 7c00 0000 00 - 7d00 0000 00: heap 7d00 0000 00 - 7fff ffff ff: modules and main thread stack */
struct|struct
name|Mapping39
block|{
specifier|static
specifier|const
name|uptr
name|kLoAppMemBeg
init|=
literal|0x0000001000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kLoAppMemEnd
init|=
literal|0x0100000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kShadowBeg
init|=
literal|0x0800000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kShadowEnd
init|=
literal|0x2000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kMetaShadowBeg
init|=
literal|0x3100000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kMetaShadowEnd
init|=
literal|0x3400000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kMidAppMemBeg
init|=
literal|0x5500000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kMidAppMemEnd
init|=
literal|0x5600000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kTraceMemBeg
init|=
literal|0x6000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kTraceMemEnd
init|=
literal|0x6200000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kHeapMemBeg
init|=
literal|0x7c00000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kHeapMemEnd
init|=
literal|0x7d00000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kHiAppMemBeg
init|=
literal|0x7e00000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kHiAppMemEnd
init|=
literal|0x7fffffffffull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kAppMemMsk
init|=
literal|0x7800000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kAppMemXor
init|=
literal|0x0200000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kVdsoBeg
init|=
literal|0x7f00000000ull
decl_stmt|;
block|}
struct|;
comment|/* C/C++ on linux/aarch64 (42-bit VMA) 00000 0010 00 - 01000 0000 00: main binary 01000 0000 00 - 10000 0000 00: - 10000 0000 00 - 20000 0000 00: shadow memory 20000 0000 00 - 26000 0000 00: - 26000 0000 00 - 28000 0000 00: metainfo 28000 0000 00 - 2aa00 0000 00: - 2aa00 0000 00 - 2ab00 0000 00: main binary (PIE) 2ab00 0000 00 - 36200 0000 00: - 36200 0000 00 - 36240 0000 00: traces 36240 0000 00 - 3e000 0000 00: - 3e000 0000 00 - 3f000 0000 00: heap 3f000 0000 00 - 3ffff ffff ff: modules and main thread stack */
struct|struct
name|Mapping42
block|{
specifier|static
specifier|const
name|uptr
name|kLoAppMemBeg
init|=
literal|0x00000001000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kLoAppMemEnd
init|=
literal|0x01000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kShadowBeg
init|=
literal|0x10000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kShadowEnd
init|=
literal|0x20000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kMetaShadowBeg
init|=
literal|0x26000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kMetaShadowEnd
init|=
literal|0x28000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kMidAppMemBeg
init|=
literal|0x2aa00000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kMidAppMemEnd
init|=
literal|0x2ab00000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kTraceMemBeg
init|=
literal|0x36200000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kTraceMemEnd
init|=
literal|0x36400000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kHeapMemBeg
init|=
literal|0x3e000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kHeapMemEnd
init|=
literal|0x3f000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kHiAppMemBeg
init|=
literal|0x3f000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kHiAppMemEnd
init|=
literal|0x3ffffffffffull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kAppMemMsk
init|=
literal|0x3c000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kAppMemXor
init|=
literal|0x04000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kVdsoBeg
init|=
literal|0x37f00000000ull
decl_stmt|;
block|}
struct|;
struct|struct
name|Mapping48
block|{
specifier|static
specifier|const
name|uptr
name|kLoAppMemBeg
init|=
literal|0x0000000001000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kLoAppMemEnd
init|=
literal|0x0000200000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kShadowBeg
init|=
literal|0x0002000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kShadowEnd
init|=
literal|0x0004000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kMetaShadowBeg
init|=
literal|0x0005000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kMetaShadowEnd
init|=
literal|0x0006000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kMidAppMemBeg
init|=
literal|0x0aaaa00000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kMidAppMemEnd
init|=
literal|0x0aaaf00000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kTraceMemBeg
init|=
literal|0x0f06000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kTraceMemEnd
init|=
literal|0x0f06200000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kHeapMemBeg
init|=
literal|0x0ffff00000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kHeapMemEnd
init|=
literal|0x0ffff00000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kHiAppMemBeg
init|=
literal|0x0ffff00000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kHiAppMemEnd
init|=
literal|0x1000000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kAppMemMsk
init|=
literal|0x0fff800000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kAppMemXor
init|=
literal|0x0000800000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kVdsoBeg
init|=
literal|0xffff000000000ull
decl_stmt|;
block|}
struct|;
comment|// Indicates the runtime will define the memory regions at runtime.
define|#
directive|define
name|TSAN_RUNTIME_VMA
value|1
comment|// Indicates that mapping defines a mid range memory segment.
define|#
directive|define
name|TSAN_MID_APP_RANGE
value|1
elif|#
directive|elif
name|defined
argument_list|(
name|__powerpc64__
argument_list|)
comment|// PPC64 supports multiple VMA which leads to multiple address transformation
comment|// functions.  To support these multiple VMAS transformations and mappings TSAN
comment|// runtime for PPC64 uses an external memory read (vmaSize) to select which
comment|// mapping to use.  Although slower, it make a same instrumented binary run on
comment|// multiple kernels.
comment|/* C/C++ on linux/powerpc64 (44-bit VMA) 0000 0000 0100 - 0001 0000 0000: main binary 0001 0000 0000 - 0001 0000 0000: - 0001 0000 0000 - 0b00 0000 0000: shadow 0b00 0000 0000 - 0b00 0000 0000: - 0b00 0000 0000 - 0d00 0000 0000: metainfo (memory blocks and sync objects) 0d00 0000 0000 - 0d00 0000 0000: - 0d00 0000 0000 - 0f00 0000 0000: traces 0f00 0000 0000 - 0f00 0000 0000: - 0f00 0000 0000 - 0f50 0000 0000: heap 0f50 0000 0000 - 0f60 0000 0000: - 0f60 0000 0000 - 1000 0000 0000: modules and main thread stack */
struct|struct
name|Mapping44
block|{
specifier|static
specifier|const
name|uptr
name|kMetaShadowBeg
init|=
literal|0x0b0000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kMetaShadowEnd
init|=
literal|0x0d0000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kTraceMemBeg
init|=
literal|0x0d0000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kTraceMemEnd
init|=
literal|0x0f0000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kShadowBeg
init|=
literal|0x000100000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kShadowEnd
init|=
literal|0x0b0000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kLoAppMemBeg
init|=
literal|0x000000000100ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kLoAppMemEnd
init|=
literal|0x000100000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kHeapMemBeg
init|=
literal|0x0f0000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kHeapMemEnd
init|=
literal|0x0f5000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kHiAppMemBeg
init|=
literal|0x0f6000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kHiAppMemEnd
init|=
literal|0x100000000000ull
decl_stmt|;
comment|// 44 bits
specifier|static
specifier|const
name|uptr
name|kAppMemMsk
init|=
literal|0x0f0000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kAppMemXor
init|=
literal|0x002100000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kVdsoBeg
init|=
literal|0x3c0000000000000ull
decl_stmt|;
block|}
struct|;
comment|/* C/C++ on linux/powerpc64 (46-bit VMA) 0000 0000 1000 - 0100 0000 0000: main binary 0100 0000 0000 - 0200 0000 0000: - 0100 0000 0000 - 1000 0000 0000: shadow 1000 0000 0000 - 1000 0000 0000: - 1000 0000 0000 - 2000 0000 0000: metainfo (memory blocks and sync objects) 2000 0000 0000 - 2000 0000 0000: - 2000 0000 0000 - 2200 0000 0000: traces 2200 0000 0000 - 3d00 0000 0000: - 3d00 0000 0000 - 3e00 0000 0000: heap 3e00 0000 0000 - 3e80 0000 0000: - 3e80 0000 0000 - 4000 0000 0000: modules and main thread stack */
struct|struct
name|Mapping46
block|{
specifier|static
specifier|const
name|uptr
name|kMetaShadowBeg
init|=
literal|0x100000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kMetaShadowEnd
init|=
literal|0x200000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kTraceMemBeg
init|=
literal|0x200000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kTraceMemEnd
init|=
literal|0x220000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kShadowBeg
init|=
literal|0x010000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kShadowEnd
init|=
literal|0x100000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kHeapMemBeg
init|=
literal|0x3d0000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kHeapMemEnd
init|=
literal|0x3e0000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kLoAppMemBeg
init|=
literal|0x000000001000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kLoAppMemEnd
init|=
literal|0x010000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kHiAppMemBeg
init|=
literal|0x3e8000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kHiAppMemEnd
init|=
literal|0x400000000000ull
decl_stmt|;
comment|// 46 bits
specifier|static
specifier|const
name|uptr
name|kAppMemMsk
init|=
literal|0x3c0000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kAppMemXor
init|=
literal|0x020000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kVdsoBeg
init|=
literal|0x7800000000000000ull
decl_stmt|;
block|}
struct|;
comment|// Indicates the runtime will define the memory regions at runtime.
define|#
directive|define
name|TSAN_RUNTIME_VMA
value|1
endif|#
directive|endif
elif|#
directive|elif
name|SANITIZER_GO
operator|&&
operator|!
name|SANITIZER_WINDOWS
comment|/* Go on linux, darwin and freebsd 0000 0000 1000 - 0000 1000 0000: executable 0000 1000 0000 - 00c0 0000 0000: - 00c0 0000 0000 - 00e0 0000 0000: heap 00e0 0000 0000 - 2000 0000 0000: - 2000 0000 0000 - 2380 0000 0000: shadow 2380 0000 0000 - 3000 0000 0000: - 3000 0000 0000 - 4000 0000 0000: metainfo (memory blocks and sync objects) 4000 0000 0000 - 6000 0000 0000: - 6000 0000 0000 - 6200 0000 0000: traces 6200 0000 0000 - 8000 0000 0000: - */
struct|struct
name|Mapping
block|{
specifier|static
specifier|const
name|uptr
name|kMetaShadowBeg
init|=
literal|0x300000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kMetaShadowEnd
init|=
literal|0x400000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kTraceMemBeg
init|=
literal|0x600000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kTraceMemEnd
init|=
literal|0x620000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kShadowBeg
init|=
literal|0x200000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kShadowEnd
init|=
literal|0x238000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kAppMemBeg
init|=
literal|0x000000001000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kAppMemEnd
init|=
literal|0x00e000000000ull
decl_stmt|;
block|}
struct|;
elif|#
directive|elif
name|SANITIZER_GO
operator|&&
name|SANITIZER_WINDOWS
comment|/* Go on windows 0000 0000 1000 - 0000 1000 0000: executable 0000 1000 0000 - 00f8 0000 0000: - 00c0 0000 0000 - 00e0 0000 0000: heap 00e0 0000 0000 - 0100 0000 0000: - 0100 0000 0000 - 0500 0000 0000: shadow 0500 0000 0000 - 0560 0000 0000: - 0560 0000 0000 - 0760 0000 0000: traces 0760 0000 0000 - 07d0 0000 0000: metainfo (memory blocks and sync objects) 07d0 0000 0000 - 8000 0000 0000: - */
struct|struct
name|Mapping
block|{
specifier|static
specifier|const
name|uptr
name|kMetaShadowBeg
init|=
literal|0x076000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kMetaShadowEnd
init|=
literal|0x07d000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kTraceMemBeg
init|=
literal|0x056000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kTraceMemEnd
init|=
literal|0x076000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kShadowBeg
init|=
literal|0x010000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kShadowEnd
init|=
literal|0x050000000000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kAppMemBeg
init|=
literal|0x000000001000ull
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kAppMemEnd
init|=
literal|0x00e000000000ull
decl_stmt|;
block|}
struct|;
else|#
directive|else
error|#
directive|error
literal|"Unknown platform"
endif|#
directive|endif
ifdef|#
directive|ifdef
name|TSAN_RUNTIME_VMA
specifier|extern
name|uptr
name|vmaSize
decl_stmt|;
endif|#
directive|endif
enum|enum
name|MappingType
block|{
name|MAPPING_LO_APP_BEG
block|,
name|MAPPING_LO_APP_END
block|,
name|MAPPING_HI_APP_BEG
block|,
name|MAPPING_HI_APP_END
block|,
ifdef|#
directive|ifdef
name|TSAN_MID_APP_RANGE
name|MAPPING_MID_APP_BEG
block|,
name|MAPPING_MID_APP_END
block|,
endif|#
directive|endif
name|MAPPING_HEAP_BEG
block|,
name|MAPPING_HEAP_END
block|,
name|MAPPING_APP_BEG
block|,
name|MAPPING_APP_END
block|,
name|MAPPING_SHADOW_BEG
block|,
name|MAPPING_SHADOW_END
block|,
name|MAPPING_META_SHADOW_BEG
block|,
name|MAPPING_META_SHADOW_END
block|,
name|MAPPING_TRACE_BEG
block|,
name|MAPPING_TRACE_END
block|,
name|MAPPING_VDSO_BEG
block|, }
enum|;
name|template
operator|<
name|typename
name|Mapping
operator|,
name|int
name|Type
operator|>
name|uptr
name|MappingImpl
argument_list|(
argument|void
argument_list|)
block|{
switch|switch
condition|(
name|Type
condition|)
block|{
if|#
directive|if
operator|!
name|SANITIZER_GO
case|case
name|MAPPING_LO_APP_BEG
case|:
return|return
name|Mapping
operator|::
name|kLoAppMemBeg
return|;
case|case
name|MAPPING_LO_APP_END
case|:
return|return
name|Mapping
operator|::
name|kLoAppMemEnd
return|;
ifdef|#
directive|ifdef
name|TSAN_MID_APP_RANGE
case|case
name|MAPPING_MID_APP_BEG
case|:
return|return
name|Mapping
operator|::
name|kMidAppMemBeg
return|;
case|case
name|MAPPING_MID_APP_END
case|:
return|return
name|Mapping
operator|::
name|kMidAppMemEnd
return|;
endif|#
directive|endif
case|case
name|MAPPING_HI_APP_BEG
case|:
return|return
name|Mapping
operator|::
name|kHiAppMemBeg
return|;
case|case
name|MAPPING_HI_APP_END
case|:
return|return
name|Mapping
operator|::
name|kHiAppMemEnd
return|;
case|case
name|MAPPING_HEAP_BEG
case|:
return|return
name|Mapping
operator|::
name|kHeapMemBeg
return|;
case|case
name|MAPPING_HEAP_END
case|:
return|return
name|Mapping
operator|::
name|kHeapMemEnd
return|;
case|case
name|MAPPING_VDSO_BEG
case|:
return|return
name|Mapping
operator|::
name|kVdsoBeg
return|;
else|#
directive|else
case|case
name|MAPPING_APP_BEG
case|:
return|return
name|Mapping
operator|::
name|kAppMemBeg
return|;
case|case
name|MAPPING_APP_END
case|:
return|return
name|Mapping
operator|::
name|kAppMemEnd
return|;
endif|#
directive|endif
case|case
name|MAPPING_SHADOW_BEG
case|:
return|return
name|Mapping
operator|::
name|kShadowBeg
return|;
case|case
name|MAPPING_SHADOW_END
case|:
return|return
name|Mapping
operator|::
name|kShadowEnd
return|;
case|case
name|MAPPING_META_SHADOW_BEG
case|:
return|return
name|Mapping
operator|::
name|kMetaShadowBeg
return|;
case|case
name|MAPPING_META_SHADOW_END
case|:
return|return
name|Mapping
operator|::
name|kMetaShadowEnd
return|;
case|case
name|MAPPING_TRACE_BEG
case|:
return|return
name|Mapping
operator|::
name|kTraceMemBeg
return|;
case|case
name|MAPPING_TRACE_END
case|:
return|return
name|Mapping
operator|::
name|kTraceMemEnd
return|;
block|}
block|}
name|template
operator|<
name|int
name|Type
operator|>
name|uptr
name|MappingArchImpl
argument_list|(
argument|void
argument_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|__aarch64__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__APPLE__
argument_list|)
switch|switch
condition|(
name|vmaSize
condition|)
block|{
case|case
literal|39
case|:
return|return
name|MappingImpl
operator|<
name|Mapping39
operator|,
name|Type
operator|>
operator|(
operator|)
return|;
case|case
literal|42
case|:
return|return
name|MappingImpl
operator|<
name|Mapping42
operator|,
name|Type
operator|>
operator|(
operator|)
return|;
case|case
literal|48
case|:
return|return
name|MappingImpl
operator|<
name|Mapping48
operator|,
name|Type
operator|>
operator|(
operator|)
return|;
block|}
name|DCHECK
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|__powerpc64__
argument_list|)
if|if
condition|(
name|vmaSize
operator|==
literal|44
condition|)
return|return
name|MappingImpl
operator|<
name|Mapping44
operator|,
name|Type
operator|>
operator|(
operator|)
return|;
else|else
return|return
name|MappingImpl
operator|<
name|Mapping46
operator|,
name|Type
operator|>
operator|(
operator|)
return|;
name|DCHECK
argument_list|(
literal|0
argument_list|)
expr_stmt|;
else|#
directive|else
return|return
name|MappingImpl
operator|<
name|Mapping
operator|,
name|Type
operator|>
operator|(
operator|)
return|;
endif|#
directive|endif
block|}
end_decl_stmt

begin_if
if|#
directive|if
operator|!
name|SANITIZER_GO
end_if

begin_function
name|ALWAYS_INLINE
name|uptr
name|LoAppMemBeg
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|MappingArchImpl
operator|<
name|MAPPING_LO_APP_BEG
operator|>
operator|(
operator|)
return|;
block|}
end_function

begin_function
name|ALWAYS_INLINE
name|uptr
name|LoAppMemEnd
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|MappingArchImpl
operator|<
name|MAPPING_LO_APP_END
operator|>
operator|(
operator|)
return|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|TSAN_MID_APP_RANGE
end_ifdef

begin_function
name|ALWAYS_INLINE
name|uptr
name|MidAppMemBeg
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|MappingArchImpl
operator|<
name|MAPPING_MID_APP_BEG
operator|>
operator|(
operator|)
return|;
block|}
end_function

begin_function
name|ALWAYS_INLINE
name|uptr
name|MidAppMemEnd
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|MappingArchImpl
operator|<
name|MAPPING_MID_APP_END
operator|>
operator|(
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_function
name|ALWAYS_INLINE
name|uptr
name|HeapMemBeg
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|MappingArchImpl
operator|<
name|MAPPING_HEAP_BEG
operator|>
operator|(
operator|)
return|;
block|}
end_function

begin_function
name|ALWAYS_INLINE
name|uptr
name|HeapMemEnd
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|MappingArchImpl
operator|<
name|MAPPING_HEAP_END
operator|>
operator|(
operator|)
return|;
block|}
end_function

begin_function
name|ALWAYS_INLINE
name|uptr
name|HiAppMemBeg
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|MappingArchImpl
operator|<
name|MAPPING_HI_APP_BEG
operator|>
operator|(
operator|)
return|;
block|}
end_function

begin_function
name|ALWAYS_INLINE
name|uptr
name|HiAppMemEnd
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|MappingArchImpl
operator|<
name|MAPPING_HI_APP_END
operator|>
operator|(
operator|)
return|;
block|}
end_function

begin_function
name|ALWAYS_INLINE
name|uptr
name|VdsoBeg
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|MappingArchImpl
operator|<
name|MAPPING_VDSO_BEG
operator|>
operator|(
operator|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_function
name|ALWAYS_INLINE
name|uptr
name|AppMemBeg
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|MappingArchImpl
operator|<
name|MAPPING_APP_BEG
operator|>
operator|(
operator|)
return|;
block|}
end_function

begin_function
name|ALWAYS_INLINE
name|uptr
name|AppMemEnd
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|MappingArchImpl
operator|<
name|MAPPING_APP_END
operator|>
operator|(
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_function
specifier|static
specifier|inline
name|bool
name|GetUserRegion
parameter_list|(
name|int
name|i
parameter_list|,
name|uptr
modifier|*
name|start
parameter_list|,
name|uptr
modifier|*
name|end
parameter_list|)
block|{
switch|switch
condition|(
name|i
condition|)
block|{
default|default:
return|return
name|false
return|;
if|#
directive|if
operator|!
name|SANITIZER_GO
case|case
literal|0
case|:
operator|*
name|start
operator|=
name|LoAppMemBeg
argument_list|()
expr_stmt|;
operator|*
name|end
operator|=
name|LoAppMemEnd
argument_list|()
expr_stmt|;
return|return
name|true
return|;
case|case
literal|1
case|:
operator|*
name|start
operator|=
name|HiAppMemBeg
argument_list|()
expr_stmt|;
operator|*
name|end
operator|=
name|HiAppMemEnd
argument_list|()
expr_stmt|;
return|return
name|true
return|;
case|case
literal|2
case|:
operator|*
name|start
operator|=
name|HeapMemBeg
argument_list|()
expr_stmt|;
operator|*
name|end
operator|=
name|HeapMemEnd
argument_list|()
expr_stmt|;
return|return
name|true
return|;
ifdef|#
directive|ifdef
name|TSAN_MID_APP_RANGE
case|case
literal|3
case|:
operator|*
name|start
operator|=
name|MidAppMemBeg
argument_list|()
expr_stmt|;
operator|*
name|end
operator|=
name|MidAppMemEnd
argument_list|()
expr_stmt|;
return|return
name|true
return|;
endif|#
directive|endif
else|#
directive|else
case|case
literal|0
case|:
operator|*
name|start
operator|=
name|AppMemBeg
argument_list|()
expr_stmt|;
operator|*
name|end
operator|=
name|AppMemEnd
argument_list|()
expr_stmt|;
return|return
name|true
return|;
endif|#
directive|endif
block|}
block|}
end_function

begin_function
name|ALWAYS_INLINE
name|uptr
name|ShadowBeg
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|MappingArchImpl
operator|<
name|MAPPING_SHADOW_BEG
operator|>
operator|(
operator|)
return|;
block|}
end_function

begin_function
name|ALWAYS_INLINE
name|uptr
name|ShadowEnd
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|MappingArchImpl
operator|<
name|MAPPING_SHADOW_END
operator|>
operator|(
operator|)
return|;
block|}
end_function

begin_function
name|ALWAYS_INLINE
name|uptr
name|MetaShadowBeg
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|MappingArchImpl
operator|<
name|MAPPING_META_SHADOW_BEG
operator|>
operator|(
operator|)
return|;
block|}
end_function

begin_function
name|ALWAYS_INLINE
name|uptr
name|MetaShadowEnd
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|MappingArchImpl
operator|<
name|MAPPING_META_SHADOW_END
operator|>
operator|(
operator|)
return|;
block|}
end_function

begin_function
name|ALWAYS_INLINE
name|uptr
name|TraceMemBeg
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|MappingArchImpl
operator|<
name|MAPPING_TRACE_BEG
operator|>
operator|(
operator|)
return|;
block|}
end_function

begin_function
name|ALWAYS_INLINE
name|uptr
name|TraceMemEnd
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|MappingArchImpl
operator|<
name|MAPPING_TRACE_END
operator|>
operator|(
operator|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|typename
name|Mapping
operator|>
name|bool
name|IsAppMemImpl
argument_list|(
argument|uptr mem
argument_list|)
block|{
if|#
directive|if
operator|!
name|SANITIZER_GO
return|return
operator|(
name|mem
operator|>=
name|Mapping
operator|::
name|kHeapMemBeg
operator|&&
name|mem
operator|<
name|Mapping
operator|::
name|kHeapMemEnd
operator|)
operator|||
ifdef|#
directive|ifdef
name|TSAN_MID_APP_RANGE
operator|(
name|mem
operator|>=
name|Mapping
operator|::
name|kMidAppMemBeg
operator|&&
name|mem
operator|<
name|Mapping
operator|::
name|kMidAppMemEnd
operator|)
operator|||
endif|#
directive|endif
operator|(
name|mem
operator|>=
name|Mapping
operator|::
name|kLoAppMemBeg
operator|&&
name|mem
operator|<
name|Mapping
operator|::
name|kLoAppMemEnd
operator|)
operator|||
operator|(
name|mem
operator|>=
name|Mapping
operator|::
name|kHiAppMemBeg
operator|&&
name|mem
operator|<
name|Mapping
operator|::
name|kHiAppMemEnd
operator|)
return|;
end_expr_stmt

begin_else
else|#
directive|else
end_else

begin_return
return|return
name|mem
operator|>=
name|Mapping
operator|::
name|kAppMemBeg
operator|&&
name|mem
operator|<
name|Mapping
operator|::
name|kAppMemEnd
return|;
end_return

begin_endif
endif|#
directive|endif
end_endif

begin_function
unit|}  ALWAYS_INLINE
name|bool
name|IsAppMem
parameter_list|(
name|uptr
name|mem
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|__aarch64__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__APPLE__
argument_list|)
switch|switch
condition|(
name|vmaSize
condition|)
block|{
case|case
literal|39
case|:
return|return
name|IsAppMemImpl
operator|<
name|Mapping39
operator|>
operator|(
name|mem
operator|)
return|;
case|case
literal|42
case|:
return|return
name|IsAppMemImpl
operator|<
name|Mapping42
operator|>
operator|(
name|mem
operator|)
return|;
case|case
literal|48
case|:
return|return
name|IsAppMemImpl
operator|<
name|Mapping48
operator|>
operator|(
name|mem
operator|)
return|;
block|}
name|DCHECK
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|false
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|__powerpc64__
argument_list|)
if|if
condition|(
name|vmaSize
operator|==
literal|44
condition|)
return|return
name|IsAppMemImpl
operator|<
name|Mapping44
operator|>
operator|(
name|mem
operator|)
return|;
else|else
return|return
name|IsAppMemImpl
operator|<
name|Mapping46
operator|>
operator|(
name|mem
operator|)
return|;
name|DCHECK
argument_list|(
literal|0
argument_list|)
expr_stmt|;
else|#
directive|else
return|return
name|IsAppMemImpl
operator|<
name|Mapping
operator|>
operator|(
name|mem
operator|)
return|;
endif|#
directive|endif
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|typename
name|Mapping
operator|>
name|bool
name|IsShadowMemImpl
argument_list|(
argument|uptr mem
argument_list|)
block|{
return|return
name|mem
operator|>=
name|Mapping
operator|::
name|kShadowBeg
operator|&&
name|mem
operator|<=
name|Mapping
operator|::
name|kShadowEnd
return|;
block|}
end_expr_stmt

begin_function
name|ALWAYS_INLINE
name|bool
name|IsShadowMem
parameter_list|(
name|uptr
name|mem
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|__aarch64__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__APPLE__
argument_list|)
switch|switch
condition|(
name|vmaSize
condition|)
block|{
case|case
literal|39
case|:
return|return
name|IsShadowMemImpl
operator|<
name|Mapping39
operator|>
operator|(
name|mem
operator|)
return|;
case|case
literal|42
case|:
return|return
name|IsShadowMemImpl
operator|<
name|Mapping42
operator|>
operator|(
name|mem
operator|)
return|;
case|case
literal|48
case|:
return|return
name|IsShadowMemImpl
operator|<
name|Mapping48
operator|>
operator|(
name|mem
operator|)
return|;
block|}
name|DCHECK
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|false
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|__powerpc64__
argument_list|)
if|if
condition|(
name|vmaSize
operator|==
literal|44
condition|)
return|return
name|IsShadowMemImpl
operator|<
name|Mapping44
operator|>
operator|(
name|mem
operator|)
return|;
else|else
return|return
name|IsShadowMemImpl
operator|<
name|Mapping46
operator|>
operator|(
name|mem
operator|)
return|;
name|DCHECK
argument_list|(
literal|0
argument_list|)
expr_stmt|;
else|#
directive|else
return|return
name|IsShadowMemImpl
operator|<
name|Mapping
operator|>
operator|(
name|mem
operator|)
return|;
endif|#
directive|endif
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|typename
name|Mapping
operator|>
name|bool
name|IsMetaMemImpl
argument_list|(
argument|uptr mem
argument_list|)
block|{
return|return
name|mem
operator|>=
name|Mapping
operator|::
name|kMetaShadowBeg
operator|&&
name|mem
operator|<=
name|Mapping
operator|::
name|kMetaShadowEnd
return|;
block|}
end_expr_stmt

begin_function
name|ALWAYS_INLINE
name|bool
name|IsMetaMem
parameter_list|(
name|uptr
name|mem
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|__aarch64__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__APPLE__
argument_list|)
switch|switch
condition|(
name|vmaSize
condition|)
block|{
case|case
literal|39
case|:
return|return
name|IsMetaMemImpl
operator|<
name|Mapping39
operator|>
operator|(
name|mem
operator|)
return|;
case|case
literal|42
case|:
return|return
name|IsMetaMemImpl
operator|<
name|Mapping42
operator|>
operator|(
name|mem
operator|)
return|;
case|case
literal|48
case|:
return|return
name|IsMetaMemImpl
operator|<
name|Mapping48
operator|>
operator|(
name|mem
operator|)
return|;
block|}
name|DCHECK
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|false
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|__powerpc64__
argument_list|)
if|if
condition|(
name|vmaSize
operator|==
literal|44
condition|)
return|return
name|IsMetaMemImpl
operator|<
name|Mapping44
operator|>
operator|(
name|mem
operator|)
return|;
else|else
return|return
name|IsMetaMemImpl
operator|<
name|Mapping46
operator|>
operator|(
name|mem
operator|)
return|;
name|DCHECK
argument_list|(
literal|0
argument_list|)
expr_stmt|;
else|#
directive|else
return|return
name|IsMetaMemImpl
operator|<
name|Mapping
operator|>
operator|(
name|mem
operator|)
return|;
endif|#
directive|endif
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|typename
name|Mapping
operator|>
name|uptr
name|MemToShadowImpl
argument_list|(
argument|uptr x
argument_list|)
block|{
name|DCHECK
argument_list|(
name|IsAppMem
argument_list|(
name|x
argument_list|)
argument_list|)
block|;
if|#
directive|if
operator|!
name|SANITIZER_GO
return|return
operator|(
operator|(
operator|(
name|x
operator|)
operator|&
operator|~
operator|(
name|Mapping
operator|::
name|kAppMemMsk
operator||
operator|(
name|kShadowCell
operator|-
literal|1
operator|)
operator|)
operator|)
operator|^
name|Mapping
operator|::
name|kAppMemXor
operator|)
operator|*
name|kShadowCnt
return|;
end_expr_stmt

begin_else
else|#
directive|else
end_else

begin_ifndef
ifndef|#
directive|ifndef
name|SANITIZER_WINDOWS
end_ifndef

begin_return
return|return
operator|(
operator|(
name|x
operator|&
operator|~
operator|(
name|kShadowCell
operator|-
literal|1
operator|)
operator|)
operator|*
name|kShadowCnt
operator|)
operator||
name|Mapping
operator|::
name|kShadowBeg
return|;
end_return

begin_else
else|#
directive|else
end_else

begin_return
return|return
operator|(
operator|(
name|x
operator|&
operator|~
operator|(
name|kShadowCell
operator|-
literal|1
operator|)
operator|)
operator|*
name|kShadowCnt
operator|)
operator|+
name|Mapping
operator|::
name|kShadowBeg
return|;
end_return

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_function
unit|}  ALWAYS_INLINE
name|uptr
name|MemToShadow
parameter_list|(
name|uptr
name|x
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|__aarch64__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__APPLE__
argument_list|)
switch|switch
condition|(
name|vmaSize
condition|)
block|{
case|case
literal|39
case|:
return|return
name|MemToShadowImpl
operator|<
name|Mapping39
operator|>
operator|(
name|x
operator|)
return|;
case|case
literal|42
case|:
return|return
name|MemToShadowImpl
operator|<
name|Mapping42
operator|>
operator|(
name|x
operator|)
return|;
case|case
literal|48
case|:
return|return
name|MemToShadowImpl
operator|<
name|Mapping48
operator|>
operator|(
name|x
operator|)
return|;
block|}
name|DCHECK
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|__powerpc64__
argument_list|)
if|if
condition|(
name|vmaSize
operator|==
literal|44
condition|)
return|return
name|MemToShadowImpl
operator|<
name|Mapping44
operator|>
operator|(
name|x
operator|)
return|;
else|else
return|return
name|MemToShadowImpl
operator|<
name|Mapping46
operator|>
operator|(
name|x
operator|)
return|;
name|DCHECK
argument_list|(
literal|0
argument_list|)
expr_stmt|;
else|#
directive|else
return|return
name|MemToShadowImpl
operator|<
name|Mapping
operator|>
operator|(
name|x
operator|)
return|;
endif|#
directive|endif
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|typename
name|Mapping
operator|>
name|u32
operator|*
name|MemToMetaImpl
argument_list|(
argument|uptr x
argument_list|)
block|{
name|DCHECK
argument_list|(
name|IsAppMem
argument_list|(
name|x
argument_list|)
argument_list|)
block|;
if|#
directive|if
operator|!
name|SANITIZER_GO
return|return
operator|(
name|u32
operator|*
operator|)
operator|(
operator|(
operator|(
operator|(
operator|(
name|x
operator|)
operator|&
operator|~
operator|(
name|Mapping
operator|::
name|kAppMemMsk
operator||
operator|(
name|kMetaShadowCell
operator|-
literal|1
operator|)
operator|)
operator|)
operator|)
operator|/
name|kMetaShadowCell
operator|*
name|kMetaShadowSize
operator|)
operator||
name|Mapping
operator|::
name|kMetaShadowBeg
operator|)
return|;
end_expr_stmt

begin_else
else|#
directive|else
end_else

begin_ifndef
ifndef|#
directive|ifndef
name|SANITIZER_WINDOWS
end_ifndef

begin_return
return|return
operator|(
name|u32
operator|*
operator|)
operator|(
operator|(
operator|(
name|x
operator|&
operator|~
operator|(
name|kMetaShadowCell
operator|-
literal|1
operator|)
operator|)
operator|/
expr|\
name|kMetaShadowCell
operator|*
name|kMetaShadowSize
operator|)
operator||
name|Mapping
operator|::
name|kMetaShadowBeg
operator|)
return|;
end_return

begin_else
else|#
directive|else
end_else

begin_return
return|return
operator|(
name|u32
operator|*
operator|)
operator|(
operator|(
operator|(
name|x
operator|&
operator|~
operator|(
name|kMetaShadowCell
operator|-
literal|1
operator|)
operator|)
operator|/
expr|\
name|kMetaShadowCell
operator|*
name|kMetaShadowSize
operator|)
operator|+
name|Mapping
operator|::
name|kMetaShadowBeg
operator|)
return|;
end_return

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_function
unit|}  ALWAYS_INLINE
name|u32
modifier|*
name|MemToMeta
parameter_list|(
name|uptr
name|x
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|__aarch64__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__APPLE__
argument_list|)
switch|switch
condition|(
name|vmaSize
condition|)
block|{
case|case
literal|39
case|:
return|return
name|MemToMetaImpl
operator|<
name|Mapping39
operator|>
operator|(
name|x
operator|)
return|;
case|case
literal|42
case|:
return|return
name|MemToMetaImpl
operator|<
name|Mapping42
operator|>
operator|(
name|x
operator|)
return|;
case|case
literal|48
case|:
return|return
name|MemToMetaImpl
operator|<
name|Mapping48
operator|>
operator|(
name|x
operator|)
return|;
block|}
name|DCHECK
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|__powerpc64__
argument_list|)
if|if
condition|(
name|vmaSize
operator|==
literal|44
condition|)
return|return
name|MemToMetaImpl
operator|<
name|Mapping44
operator|>
operator|(
name|x
operator|)
return|;
else|else
return|return
name|MemToMetaImpl
operator|<
name|Mapping46
operator|>
operator|(
name|x
operator|)
return|;
name|DCHECK
argument_list|(
literal|0
argument_list|)
expr_stmt|;
else|#
directive|else
return|return
name|MemToMetaImpl
operator|<
name|Mapping
operator|>
operator|(
name|x
operator|)
return|;
endif|#
directive|endif
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|typename
name|Mapping
operator|>
name|uptr
name|ShadowToMemImpl
argument_list|(
argument|uptr s
argument_list|)
block|{
name|DCHECK
argument_list|(
name|IsShadowMem
argument_list|(
name|s
argument_list|)
argument_list|)
block|;
if|#
directive|if
operator|!
name|SANITIZER_GO
comment|// The shadow mapping is non-linear and we've lost some bits, so we don't have
comment|// an easy way to restore the original app address. But the mapping is a
comment|// bijection, so we try to restore the address as belonging to low/mid/high
comment|// range consecutively and see if shadow->app->shadow mapping gives us the
comment|// same address.
name|uptr
name|p
operator|=
operator|(
name|s
operator|/
name|kShadowCnt
operator|)
operator|^
name|Mapping
operator|::
name|kAppMemXor
block|;
if|if
condition|(
name|p
operator|>=
name|Mapping
operator|::
name|kLoAppMemBeg
operator|&&
name|p
operator|<
name|Mapping
operator|::
name|kLoAppMemEnd
operator|&&
name|MemToShadow
argument_list|(
name|p
argument_list|)
operator|==
name|s
condition|)
return|return
name|p
return|;
ifdef|#
directive|ifdef
name|TSAN_MID_APP_RANGE
name|p
operator|=
operator|(
operator|(
name|s
operator|/
name|kShadowCnt
operator|)
operator|^
name|Mapping
operator|::
name|kAppMemXor
operator|)
operator|+
operator|(
name|Mapping
operator|::
name|kMidAppMemBeg
operator|&
name|Mapping
operator|::
name|kAppMemMsk
operator|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|p
operator|>=
name|Mapping
operator|::
name|kMidAppMemBeg
operator|&&
name|p
operator|<
name|Mapping
operator|::
name|kMidAppMemEnd
operator|&&
name|MemToShadow
argument_list|(
name|p
argument_list|)
operator|==
name|s
condition|)
return|return
name|p
return|;
end_if

begin_endif
endif|#
directive|endif
end_endif

begin_return
return|return
operator|(
operator|(
name|s
operator|/
name|kShadowCnt
operator|)
operator|^
name|Mapping
operator|::
name|kAppMemXor
operator|)
operator||
name|Mapping
operator|::
name|kAppMemMsk
return|;
end_return

begin_else
else|#
directive|else
end_else

begin_comment
comment|// #if !SANITIZER_GO
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SANITIZER_WINDOWS
end_ifndef

begin_return
return|return
operator|(
name|s
operator|&
operator|~
name|Mapping
operator|::
name|kShadowBeg
operator|)
operator|/
name|kShadowCnt
return|;
end_return

begin_else
else|#
directive|else
end_else

begin_return
return|return
operator|(
name|s
operator|-
name|Mapping
operator|::
name|kShadowBeg
operator|)
operator|/
name|kShadowCnt
return|;
end_return

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// SANITIZER_WINDOWS
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_function
unit|}  ALWAYS_INLINE
name|uptr
name|ShadowToMem
parameter_list|(
name|uptr
name|s
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|__aarch64__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__APPLE__
argument_list|)
switch|switch
condition|(
name|vmaSize
condition|)
block|{
case|case
literal|39
case|:
return|return
name|ShadowToMemImpl
operator|<
name|Mapping39
operator|>
operator|(
name|s
operator|)
return|;
case|case
literal|42
case|:
return|return
name|ShadowToMemImpl
operator|<
name|Mapping42
operator|>
operator|(
name|s
operator|)
return|;
case|case
literal|48
case|:
return|return
name|ShadowToMemImpl
operator|<
name|Mapping48
operator|>
operator|(
name|s
operator|)
return|;
block|}
name|DCHECK
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|__powerpc64__
argument_list|)
if|if
condition|(
name|vmaSize
operator|==
literal|44
condition|)
return|return
name|ShadowToMemImpl
operator|<
name|Mapping44
operator|>
operator|(
name|s
operator|)
return|;
else|else
return|return
name|ShadowToMemImpl
operator|<
name|Mapping46
operator|>
operator|(
name|s
operator|)
return|;
name|DCHECK
argument_list|(
literal|0
argument_list|)
expr_stmt|;
else|#
directive|else
return|return
name|ShadowToMemImpl
operator|<
name|Mapping
operator|>
operator|(
name|s
operator|)
return|;
endif|#
directive|endif
block|}
end_function

begin_comment
comment|// The additional page is to catch shadow stack overflow as paging fault.
end_comment

begin_comment
comment|// Windows wants 64K alignment for mmaps.
end_comment

begin_decl_stmt
specifier|const
name|uptr
name|kTotalTraceSize
init|=
operator|(
name|kTraceSize
operator|*
sizeof|sizeof
argument_list|(
name|Event
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|Trace
argument_list|)
operator|+
operator|(
literal|64
operator|<<
literal|10
operator|)
operator|+
operator|(
literal|64
operator|<<
literal|10
operator|)
operator|-
literal|1
operator|)
operator|&
operator|~
operator|(
operator|(
literal|64
operator|<<
literal|10
operator|)
operator|-
literal|1
operator|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|Mapping
operator|>
name|uptr
name|GetThreadTraceImpl
argument_list|(
argument|int tid
argument_list|)
block|{
name|uptr
name|p
operator|=
name|Mapping
operator|::
name|kTraceMemBeg
operator|+
operator|(
name|uptr
operator|)
name|tid
operator|*
name|kTotalTraceSize
block|;
name|DCHECK_LT
argument_list|(
name|p
argument_list|,
name|Mapping
operator|::
name|kTraceMemEnd
argument_list|)
block|;
return|return
name|p
return|;
block|}
end_expr_stmt

begin_function
name|ALWAYS_INLINE
name|uptr
name|GetThreadTrace
parameter_list|(
name|int
name|tid
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|__aarch64__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__APPLE__
argument_list|)
switch|switch
condition|(
name|vmaSize
condition|)
block|{
case|case
literal|39
case|:
return|return
name|GetThreadTraceImpl
operator|<
name|Mapping39
operator|>
operator|(
name|tid
operator|)
return|;
case|case
literal|42
case|:
return|return
name|GetThreadTraceImpl
operator|<
name|Mapping42
operator|>
operator|(
name|tid
operator|)
return|;
case|case
literal|48
case|:
return|return
name|GetThreadTraceImpl
operator|<
name|Mapping48
operator|>
operator|(
name|tid
operator|)
return|;
block|}
name|DCHECK
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|__powerpc64__
argument_list|)
if|if
condition|(
name|vmaSize
operator|==
literal|44
condition|)
return|return
name|GetThreadTraceImpl
operator|<
name|Mapping44
operator|>
operator|(
name|tid
operator|)
return|;
else|else
return|return
name|GetThreadTraceImpl
operator|<
name|Mapping46
operator|>
operator|(
name|tid
operator|)
return|;
name|DCHECK
argument_list|(
literal|0
argument_list|)
expr_stmt|;
else|#
directive|else
return|return
name|GetThreadTraceImpl
operator|<
name|Mapping
operator|>
operator|(
name|tid
operator|)
return|;
endif|#
directive|endif
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|typename
name|Mapping
operator|>
name|uptr
name|GetThreadTraceHeaderImpl
argument_list|(
argument|int tid
argument_list|)
block|{
name|uptr
name|p
operator|=
name|Mapping
operator|::
name|kTraceMemBeg
operator|+
operator|(
name|uptr
operator|)
name|tid
operator|*
name|kTotalTraceSize
operator|+
name|kTraceSize
operator|*
sizeof|sizeof
argument_list|(
name|Event
argument_list|)
block|;
name|DCHECK_LT
argument_list|(
name|p
argument_list|,
name|Mapping
operator|::
name|kTraceMemEnd
argument_list|)
block|;
return|return
name|p
return|;
block|}
end_expr_stmt

begin_function
name|ALWAYS_INLINE
name|uptr
name|GetThreadTraceHeader
parameter_list|(
name|int
name|tid
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|__aarch64__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__APPLE__
argument_list|)
switch|switch
condition|(
name|vmaSize
condition|)
block|{
case|case
literal|39
case|:
return|return
name|GetThreadTraceHeaderImpl
operator|<
name|Mapping39
operator|>
operator|(
name|tid
operator|)
return|;
case|case
literal|42
case|:
return|return
name|GetThreadTraceHeaderImpl
operator|<
name|Mapping42
operator|>
operator|(
name|tid
operator|)
return|;
case|case
literal|48
case|:
return|return
name|GetThreadTraceHeaderImpl
operator|<
name|Mapping48
operator|>
operator|(
name|tid
operator|)
return|;
block|}
name|DCHECK
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|__powerpc64__
argument_list|)
if|if
condition|(
name|vmaSize
operator|==
literal|44
condition|)
return|return
name|GetThreadTraceHeaderImpl
operator|<
name|Mapping44
operator|>
operator|(
name|tid
operator|)
return|;
else|else
return|return
name|GetThreadTraceHeaderImpl
operator|<
name|Mapping46
operator|>
operator|(
name|tid
operator|)
return|;
name|DCHECK
argument_list|(
literal|0
argument_list|)
expr_stmt|;
else|#
directive|else
return|return
name|GetThreadTraceHeaderImpl
operator|<
name|Mapping
operator|>
operator|(
name|tid
operator|)
return|;
endif|#
directive|endif
block|}
end_function

begin_function_decl
name|void
name|InitializePlatform
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|InitializePlatformEarly
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|CheckAndProtect
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|InitializeShadowMemoryPlatform
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|FlushShadowMemory
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|WriteMemoryProfile
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|uptr
name|buf_size
parameter_list|,
name|uptr
name|nthread
parameter_list|,
name|uptr
name|nlive
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ExtractResolvFDs
parameter_list|(
name|void
modifier|*
name|state
parameter_list|,
name|int
modifier|*
name|fds
parameter_list|,
name|int
name|nfd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ExtractRecvmsgFDs
parameter_list|(
name|void
modifier|*
name|msg
parameter_list|,
name|int
modifier|*
name|fds
parameter_list|,
name|int
name|nfd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ImitateTlsWrite
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|tls_addr
parameter_list|,
name|uptr
name|tls_size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|call_pthread_cancel_with_cleanup
parameter_list|(
name|int
function_decl|(
modifier|*
name|fn
function_decl|)
parameter_list|(
name|void
modifier|*
name|c
parameter_list|,
name|void
modifier|*
name|m
parameter_list|,
name|void
modifier|*
name|abstime
parameter_list|)
parameter_list|,
name|void
modifier|*
name|c
parameter_list|,
name|void
modifier|*
name|m
parameter_list|,
name|void
modifier|*
name|abstime
parameter_list|,
name|void
function_decl|(
modifier|*
name|cleanup
function_decl|)
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|)
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|DestroyThreadState
parameter_list|()
function_decl|;
end_function_decl

begin_comment
unit|}
comment|// namespace __tsan
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// TSAN_PLATFORM_H
end_comment

end_unit

