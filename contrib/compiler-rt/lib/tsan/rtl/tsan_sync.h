begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- tsan_sync.h ---------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is a part of ThreadSanitizer (TSan), a race detector.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|TSAN_SYNC_H
end_ifndef

begin_define
define|#
directive|define
name|TSAN_SYNC_H
end_define

begin_include
include|#
directive|include
file|"sanitizer_common/sanitizer_atomic.h"
end_include

begin_include
include|#
directive|include
file|"sanitizer_common/sanitizer_common.h"
end_include

begin_include
include|#
directive|include
file|"sanitizer_common/sanitizer_deadlock_detector_interface.h"
end_include

begin_include
include|#
directive|include
file|"tsan_defs.h"
end_include

begin_include
include|#
directive|include
file|"tsan_clock.h"
end_include

begin_include
include|#
directive|include
file|"tsan_mutex.h"
end_include

begin_include
include|#
directive|include
file|"tsan_dense_alloc.h"
end_include

begin_decl_stmt
name|namespace
name|__tsan
block|{
struct|struct
name|SyncVar
block|{
name|SyncVar
argument_list|()
expr_stmt|;
specifier|static
specifier|const
name|int
name|kInvalidTid
init|=
operator|-
literal|1
decl_stmt|;
name|uptr
name|addr
decl_stmt|;
comment|// overwritten by DenseSlabAlloc freelist
name|Mutex
name|mtx
decl_stmt|;
name|u64
name|uid
decl_stmt|;
comment|// Globally unique id.
name|u32
name|creation_stack_id
decl_stmt|;
name|int
name|owner_tid
decl_stmt|;
comment|// Set only by exclusive owners.
name|u64
name|last_lock
decl_stmt|;
name|int
name|recursion
decl_stmt|;
name|bool
name|is_rw
decl_stmt|;
name|bool
name|is_recursive
decl_stmt|;
name|bool
name|is_broken
decl_stmt|;
name|bool
name|is_linker_init
decl_stmt|;
name|u32
name|next
decl_stmt|;
comment|// in MetaMap
name|DDMutex
name|dd
decl_stmt|;
name|SyncClock
name|read_clock
decl_stmt|;
comment|// Used for rw mutexes only.
comment|// The clock is placed last, so that it is situated on a different cache line
comment|// with the mtx. This reduces contention for hot sync objects.
name|SyncClock
name|clock
decl_stmt|;
name|void
name|Init
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|uptr
name|addr
parameter_list|,
name|u64
name|uid
parameter_list|)
function_decl|;
name|void
name|Reset
parameter_list|(
name|Processor
modifier|*
name|proc
parameter_list|)
function_decl|;
name|u64
name|GetId
argument_list|()
specifier|const
block|{
comment|// 47 lsb is addr, then 14 bits is low part of uid, then 3 zero bits.
return|return
name|GetLsb
argument_list|(
operator|(
name|u64
operator|)
name|addr
operator||
operator|(
name|uid
operator|<<
literal|47
operator|)
argument_list|,
literal|61
argument_list|)
return|;
block|}
name|bool
name|CheckId
argument_list|(
name|u64
name|uid
argument_list|)
decl|const
block|{
name|CHECK_EQ
argument_list|(
name|uid
argument_list|,
name|GetLsb
argument_list|(
name|uid
argument_list|,
literal|14
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|GetLsb
argument_list|(
name|this
operator|->
name|uid
argument_list|,
literal|14
argument_list|)
operator|==
name|uid
return|;
block|}
specifier|static
name|uptr
name|SplitId
parameter_list|(
name|u64
name|id
parameter_list|,
name|u64
modifier|*
name|uid
parameter_list|)
block|{
operator|*
name|uid
operator|=
name|id
operator|>>
literal|47
expr_stmt|;
return|return
operator|(
name|uptr
operator|)
name|GetLsb
argument_list|(
name|id
argument_list|,
literal|47
argument_list|)
return|;
block|}
block|}
struct|;
comment|/* MetaMap allows to map arbitrary user pointers onto various descriptors.    Currently it maps pointers to heap block descriptors and sync var descs.    It uses 1/2 direct shadow, see tsan_platform.h. */
name|class
name|MetaMap
block|{
name|public
label|:
name|MetaMap
argument_list|()
expr_stmt|;
name|void
name|AllocBlock
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|uptr
name|p
parameter_list|,
name|uptr
name|sz
parameter_list|)
function_decl|;
name|uptr
name|FreeBlock
parameter_list|(
name|Processor
modifier|*
name|proc
parameter_list|,
name|uptr
name|p
parameter_list|)
function_decl|;
name|bool
name|FreeRange
parameter_list|(
name|Processor
modifier|*
name|proc
parameter_list|,
name|uptr
name|p
parameter_list|,
name|uptr
name|sz
parameter_list|)
function_decl|;
name|void
name|ResetRange
parameter_list|(
name|Processor
modifier|*
name|proc
parameter_list|,
name|uptr
name|p
parameter_list|,
name|uptr
name|sz
parameter_list|)
function_decl|;
name|MBlock
modifier|*
name|GetBlock
parameter_list|(
name|uptr
name|p
parameter_list|)
function_decl|;
name|SyncVar
modifier|*
name|GetOrCreateAndLock
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|uptr
name|addr
parameter_list|,
name|bool
name|write_lock
parameter_list|)
function_decl|;
name|SyncVar
modifier|*
name|GetIfExistsAndLock
parameter_list|(
name|uptr
name|addr
parameter_list|,
name|bool
name|write_lock
parameter_list|)
function_decl|;
name|void
name|MoveMemory
parameter_list|(
name|uptr
name|src
parameter_list|,
name|uptr
name|dst
parameter_list|,
name|uptr
name|sz
parameter_list|)
function_decl|;
name|void
name|OnProcIdle
parameter_list|(
name|Processor
modifier|*
name|proc
parameter_list|)
function_decl|;
name|private
label|:
specifier|static
specifier|const
name|u32
name|kFlagMask
init|=
literal|3u
operator|<<
literal|30
decl_stmt|;
specifier|static
specifier|const
name|u32
name|kFlagBlock
init|=
literal|1u
operator|<<
literal|30
decl_stmt|;
specifier|static
specifier|const
name|u32
name|kFlagSync
init|=
literal|2u
operator|<<
literal|30
decl_stmt|;
typedef|typedef
name|DenseSlabAlloc
operator|<
name|MBlock
operator|,
literal|1
operator|<<
literal|16
operator|,
literal|1
operator|<<
literal|12
operator|>
name|BlockAlloc
expr_stmt|;
typedef|typedef
name|DenseSlabAlloc
operator|<
name|SyncVar
operator|,
literal|1
operator|<<
literal|16
operator|,
literal|1
operator|<<
literal|10
operator|>
name|SyncAlloc
expr_stmt|;
name|BlockAlloc
name|block_alloc_
decl_stmt|;
name|SyncAlloc
name|sync_alloc_
decl_stmt|;
name|atomic_uint64_t
name|uid_gen_
decl_stmt|;
name|SyncVar
modifier|*
name|GetAndLock
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|uptr
name|addr
parameter_list|,
name|bool
name|write_lock
parameter_list|,
name|bool
name|create
parameter_list|)
function_decl|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace __tsan
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// TSAN_SYNC_H
end_comment

end_unit

