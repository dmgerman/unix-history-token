begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- asan_thread.h -------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is a part of AddressSanitizer, an address sanity checker.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// ASan-private header for asan_thread.cc.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ASAN_THREAD_H
end_ifndef

begin_define
define|#
directive|define
name|ASAN_THREAD_H
end_define

begin_include
include|#
directive|include
file|"asan_allocator.h"
end_include

begin_include
include|#
directive|include
file|"asan_internal.h"
end_include

begin_include
include|#
directive|include
file|"asan_fake_stack.h"
end_include

begin_include
include|#
directive|include
file|"asan_stats.h"
end_include

begin_include
include|#
directive|include
file|"sanitizer_common/sanitizer_common.h"
end_include

begin_include
include|#
directive|include
file|"sanitizer_common/sanitizer_libc.h"
end_include

begin_include
include|#
directive|include
file|"sanitizer_common/sanitizer_thread_registry.h"
end_include

begin_decl_stmt
name|namespace
name|__sanitizer
block|{
struct_decl|struct
name|DTLS
struct_decl|;
block|}
end_decl_stmt

begin_comment
comment|// namespace __sanitizer
end_comment

begin_decl_stmt
name|namespace
name|__asan
block|{
specifier|const
name|u32
name|kInvalidTid
init|=
literal|0xffffff
decl_stmt|;
comment|// Must fit into 24 bits.
specifier|const
name|u32
name|kMaxNumberOfThreads
init|=
operator|(
literal|1
operator|<<
literal|22
operator|)
decl_stmt|;
comment|// 4M
name|class
name|AsanThread
decl_stmt|;
comment|// These objects are created for every thread and are never deleted,
comment|// so we can find them by tid even if the thread is long dead.
name|class
name|AsanThreadContext
range|:
name|public
name|ThreadContextBase
block|{
name|public
operator|:
name|explicit
name|AsanThreadContext
argument_list|(
argument|int tid
argument_list|)
operator|:
name|ThreadContextBase
argument_list|(
name|tid
argument_list|)
block|,
name|announced
argument_list|(
name|false
argument_list|)
block|,
name|destructor_iterations
argument_list|(
name|GetPthreadDestructorIterations
argument_list|()
argument_list|)
block|,
name|stack_id
argument_list|(
literal|0
argument_list|)
block|,
name|thread
argument_list|(
argument|nullptr
argument_list|)
block|{}
name|bool
name|announced
block|;
name|u8
name|destructor_iterations
block|;
name|u32
name|stack_id
block|;
name|AsanThread
operator|*
name|thread
block|;
name|void
name|OnCreated
argument_list|(
argument|void *arg
argument_list|)
name|override
block|;
name|void
name|OnFinished
argument_list|()
name|override
block|; }
decl_stmt|;
comment|// AsanThreadContext objects are never freed, so we need many of them.
name|COMPILER_CHECK
argument_list|(
sizeof|sizeof
argument_list|(
name|AsanThreadContext
argument_list|)
operator|<=
literal|256
argument_list|)
expr_stmt|;
comment|// AsanThread are stored in TSD and destroyed when the thread dies.
name|class
name|AsanThread
block|{
name|public
label|:
specifier|static
name|AsanThread
modifier|*
name|Create
parameter_list|(
name|thread_callback_t
name|start_routine
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|,
name|u32
name|parent_tid
parameter_list|,
name|StackTrace
modifier|*
name|stack
parameter_list|,
name|bool
name|detached
parameter_list|)
function_decl|;
specifier|static
name|void
name|TSDDtor
parameter_list|(
name|void
modifier|*
name|tsd
parameter_list|)
function_decl|;
name|void
name|Destroy
parameter_list|()
function_decl|;
name|void
name|Init
parameter_list|()
function_decl|;
comment|// Should be called from the thread itself.
name|thread_return_t
name|ThreadStart
parameter_list|(
name|uptr
name|os_id
parameter_list|,
name|atomic_uintptr_t
modifier|*
name|signal_thread_is_registered
parameter_list|)
function_decl|;
name|uptr
name|stack_top
parameter_list|()
function_decl|;
name|uptr
name|stack_bottom
parameter_list|()
function_decl|;
name|uptr
name|stack_size
parameter_list|()
function_decl|;
name|uptr
name|tls_begin
parameter_list|()
block|{
return|return
name|tls_begin_
return|;
block|}
name|uptr
name|tls_end
parameter_list|()
block|{
return|return
name|tls_end_
return|;
block|}
name|DTLS
modifier|*
name|dtls
parameter_list|()
block|{
return|return
name|dtls_
return|;
block|}
name|u32
name|tid
parameter_list|()
block|{
return|return
name|context_
operator|->
name|tid
return|;
block|}
name|AsanThreadContext
modifier|*
name|context
parameter_list|()
block|{
return|return
name|context_
return|;
block|}
name|void
name|set_context
parameter_list|(
name|AsanThreadContext
modifier|*
name|context
parameter_list|)
block|{
name|context_
operator|=
name|context
expr_stmt|;
block|}
struct|struct
name|StackFrameAccess
block|{
name|uptr
name|offset
decl_stmt|;
name|uptr
name|frame_pc
decl_stmt|;
specifier|const
name|char
modifier|*
name|frame_descr
decl_stmt|;
block|}
struct|;
name|bool
name|GetStackFrameAccessByAddr
parameter_list|(
name|uptr
name|addr
parameter_list|,
name|StackFrameAccess
modifier|*
name|access
parameter_list|)
function_decl|;
name|bool
name|AddrIsInStack
parameter_list|(
name|uptr
name|addr
parameter_list|)
function_decl|;
name|void
name|DeleteFakeStack
parameter_list|(
name|int
name|tid
parameter_list|)
block|{
if|if
condition|(
operator|!
name|fake_stack_
condition|)
return|return;
name|FakeStack
modifier|*
name|t
init|=
name|fake_stack_
decl_stmt|;
name|fake_stack_
operator|=
name|nullptr
expr_stmt|;
name|SetTLSFakeStack
argument_list|(
name|nullptr
argument_list|)
expr_stmt|;
name|t
operator|->
name|Destroy
argument_list|(
name|tid
argument_list|)
expr_stmt|;
block|}
name|void
name|StartSwitchFiber
parameter_list|(
name|FakeStack
modifier|*
modifier|*
name|fake_stack_save
parameter_list|,
name|uptr
name|bottom
parameter_list|,
name|uptr
name|size
parameter_list|)
function_decl|;
name|void
name|FinishSwitchFiber
parameter_list|(
name|FakeStack
modifier|*
name|fake_stack_save
parameter_list|,
name|uptr
modifier|*
name|bottom_old
parameter_list|,
name|uptr
modifier|*
name|size_old
parameter_list|)
function_decl|;
name|bool
name|has_fake_stack
parameter_list|()
block|{
return|return
operator|!
name|atomic_load
argument_list|(
operator|&
name|stack_switching_
argument_list|,
name|memory_order_relaxed
argument_list|)
operator|&&
operator|(
name|reinterpret_cast
operator|<
name|uptr
operator|>
operator|(
name|fake_stack_
operator|)
operator|>
literal|1
operator|)
return|;
block|}
name|FakeStack
modifier|*
name|fake_stack
parameter_list|()
block|{
if|if
condition|(
operator|!
name|__asan_option_detect_stack_use_after_return
condition|)
return|return
name|nullptr
return|;
if|if
condition|(
name|atomic_load
argument_list|(
operator|&
name|stack_switching_
argument_list|,
name|memory_order_relaxed
argument_list|)
condition|)
return|return
name|nullptr
return|;
if|if
condition|(
operator|!
name|has_fake_stack
argument_list|()
condition|)
return|return
name|AsyncSignalSafeLazyInitFakeStack
argument_list|()
return|;
return|return
name|fake_stack_
return|;
block|}
comment|// True is this thread is currently unwinding stack (i.e. collecting a stack
comment|// trace). Used to prevent deadlocks on platforms where libc unwinder calls
comment|// malloc internally. See PR17116 for more details.
name|bool
name|isUnwinding
argument_list|()
specifier|const
block|{
return|return
name|unwinding_
return|;
block|}
name|void
name|setUnwinding
parameter_list|(
name|bool
name|b
parameter_list|)
block|{
name|unwinding_
operator|=
name|b
expr_stmt|;
block|}
comment|// True if we are in a deadly signal handler.
name|bool
name|isInDeadlySignal
argument_list|()
specifier|const
block|{
return|return
name|in_deadly_signal_
return|;
block|}
name|void
name|setInDeadlySignal
parameter_list|(
name|bool
name|b
parameter_list|)
block|{
name|in_deadly_signal_
operator|=
name|b
expr_stmt|;
block|}
name|AsanThreadLocalMallocStorage
modifier|&
name|malloc_storage
parameter_list|()
block|{
return|return
name|malloc_storage_
return|;
block|}
name|AsanStats
modifier|&
name|stats
parameter_list|()
block|{
return|return
name|stats_
return|;
block|}
name|private
label|:
comment|// NOTE: There is no AsanThread constructor. It is allocated
comment|// via mmap() and *must* be valid in zero-initialized state.
name|void
name|SetThreadStackAndTls
parameter_list|()
function_decl|;
name|void
name|ClearShadowForThreadStackAndTLS
parameter_list|()
function_decl|;
name|FakeStack
modifier|*
name|AsyncSignalSafeLazyInitFakeStack
parameter_list|()
function_decl|;
struct|struct
name|StackBounds
block|{
name|uptr
name|bottom
decl_stmt|;
name|uptr
name|top
decl_stmt|;
block|}
struct|;
name|StackBounds
name|GetStackBounds
argument_list|()
specifier|const
expr_stmt|;
name|AsanThreadContext
modifier|*
name|context_
decl_stmt|;
name|thread_callback_t
name|start_routine_
decl_stmt|;
name|void
modifier|*
name|arg_
decl_stmt|;
name|uptr
name|stack_top_
decl_stmt|;
name|uptr
name|stack_bottom_
decl_stmt|;
comment|// these variables are used when the thread is about to switch stack
name|uptr
name|next_stack_top_
decl_stmt|;
name|uptr
name|next_stack_bottom_
decl_stmt|;
comment|// true if switching is in progress
name|atomic_uint8_t
name|stack_switching_
decl_stmt|;
name|uptr
name|tls_begin_
decl_stmt|;
name|uptr
name|tls_end_
decl_stmt|;
name|DTLS
modifier|*
name|dtls_
decl_stmt|;
name|FakeStack
modifier|*
name|fake_stack_
decl_stmt|;
name|AsanThreadLocalMallocStorage
name|malloc_storage_
decl_stmt|;
name|AsanStats
name|stats_
decl_stmt|;
name|bool
name|unwinding_
decl_stmt|;
name|bool
name|in_deadly_signal_
decl_stmt|;
block|}
empty_stmt|;
comment|// ScopedUnwinding is a scope for stacktracing member of a context
name|class
name|ScopedUnwinding
block|{
name|public
label|:
name|explicit
name|ScopedUnwinding
argument_list|(
name|AsanThread
operator|*
name|t
argument_list|)
operator|:
name|thread
argument_list|(
argument|t
argument_list|)
block|{
name|t
operator|->
name|setUnwinding
argument_list|(
name|true
argument_list|)
block|;   }
operator|~
name|ScopedUnwinding
argument_list|()
block|{
name|thread
operator|->
name|setUnwinding
argument_list|(
name|false
argument_list|)
block|; }
name|private
operator|:
name|AsanThread
operator|*
name|thread
expr_stmt|;
block|}
empty_stmt|;
comment|// ScopedDeadlySignal is a scope for handling deadly signals.
name|class
name|ScopedDeadlySignal
block|{
name|public
label|:
name|explicit
name|ScopedDeadlySignal
argument_list|(
name|AsanThread
operator|*
name|t
argument_list|)
operator|:
name|thread
argument_list|(
argument|t
argument_list|)
block|{
if|if
condition|(
name|thread
condition|)
name|thread
operator|->
name|setInDeadlySignal
argument_list|(
name|true
argument_list|)
expr_stmt|;
block|}
operator|~
name|ScopedDeadlySignal
argument_list|()
block|{
if|if
condition|(
name|thread
condition|)
name|thread
operator|->
name|setInDeadlySignal
argument_list|(
name|false
argument_list|)
expr_stmt|;
block|}
name|private
label|:
name|AsanThread
modifier|*
name|thread
decl_stmt|;
block|}
empty_stmt|;
comment|// Returns a single instance of registry.
name|ThreadRegistry
modifier|&
name|asanThreadRegistry
parameter_list|()
function_decl|;
comment|// Must be called under ThreadRegistryLock.
name|AsanThreadContext
modifier|*
name|GetThreadContextByTidLocked
parameter_list|(
name|u32
name|tid
parameter_list|)
function_decl|;
comment|// Get the current thread. May return 0.
name|AsanThread
modifier|*
name|GetCurrentThread
parameter_list|()
function_decl|;
name|void
name|SetCurrentThread
parameter_list|(
name|AsanThread
modifier|*
name|t
parameter_list|)
function_decl|;
name|u32
name|GetCurrentTidOrInvalid
parameter_list|()
function_decl|;
name|AsanThread
modifier|*
name|FindThreadByStackAddress
parameter_list|(
name|uptr
name|addr
parameter_list|)
function_decl|;
comment|// Used to handle fork().
name|void
name|EnsureMainThreadIDIsCorrect
parameter_list|()
function_decl|;
block|}
end_decl_stmt

begin_comment
comment|// namespace __asan
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// ASAN_THREAD_H
end_comment

end_unit

