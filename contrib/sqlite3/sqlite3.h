begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* ** 2001 September 15 ** ** The author disclaims copyright to this source code.  In place of ** a legal notice, here is a blessing: ** **    May you do good and not evil. **    May you find forgiveness for yourself and forgive others. **    May you share freely, never taking more than you give. ** ************************************************************************* ** This header file defines the interface that the SQLite library ** presents to client programs.  If a C-function, structure, datatype, ** or constant definition does not appear in this file, then it is ** not a published API of SQLite, is subject to change without ** notice, and should not be referenced by programs that use SQLite. ** ** Some of the definitions that are in this file are marked as ** "experimental".  Experimental interfaces are normally new ** features recently added to SQLite.  We do not anticipate changes ** to experimental interfaces but reserve the right to make minor changes ** if experience from use "in the wild" suggest such changes are prudent. ** ** The official C-language API documentation for SQLite is derived ** from comments in this file.  This file is the authoritative source ** on how SQLite interfaces are supposed to operate. ** ** The name of this file under configuration management is "sqlite.h.in". ** The makefile makes some minor changes to this file (such as inserting ** the version number) and changes its name to "sqlite3.h" as ** part of the build process. */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SQLITE3_H_
end_ifndef

begin_define
define|#
directive|define
name|_SQLITE3_H_
end_define

begin_include
include|#
directive|include
file|<stdarg.h>
end_include

begin_comment
comment|/* Needed for the definition of va_list */
end_comment

begin_comment
comment|/* ** Make sure we can call this stuff from C++. */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* ** Provide the ability to override linkage features of the interface. */
ifndef|#
directive|ifndef
name|SQLITE_EXTERN
define|#
directive|define
name|SQLITE_EXTERN
value|extern
endif|#
directive|endif
ifndef|#
directive|ifndef
name|SQLITE_API
define|#
directive|define
name|SQLITE_API
endif|#
directive|endif
ifndef|#
directive|ifndef
name|SQLITE_CDECL
define|#
directive|define
name|SQLITE_CDECL
endif|#
directive|endif
ifndef|#
directive|ifndef
name|SQLITE_STDCALL
define|#
directive|define
name|SQLITE_STDCALL
endif|#
directive|endif
comment|/* ** These no-op macros are used in front of interfaces to mark those ** interfaces as either deprecated or experimental.  New applications ** should not use deprecated interfaces - they are supported for backwards ** compatibility only.  Application writers should be aware that ** experimental interfaces are subject to change in point releases. ** ** These macros used to resolve to various kinds of compiler magic that ** would generate warning messages when they were used.  But that ** compiler magic ended up generating such a flurry of bug reports ** that we have taken it all out and gone back to using simple ** noop macros. */
define|#
directive|define
name|SQLITE_DEPRECATED
define|#
directive|define
name|SQLITE_EXPERIMENTAL
comment|/* ** Ensure these symbols were not defined by some previous header file. */
ifdef|#
directive|ifdef
name|SQLITE_VERSION
undef|#
directive|undef
name|SQLITE_VERSION
endif|#
directive|endif
ifdef|#
directive|ifdef
name|SQLITE_VERSION_NUMBER
undef|#
directive|undef
name|SQLITE_VERSION_NUMBER
endif|#
directive|endif
comment|/* ** CAPI3REF: Compile-Time Library Version Numbers ** ** ^(The [SQLITE_VERSION] C preprocessor macro in the sqlite3.h header ** evaluates to a string literal that is the SQLite version in the ** format "X.Y.Z" where X is the major version number (always 3 for ** SQLite3) and Y is the minor version number and Z is the release number.)^ ** ^(The [SQLITE_VERSION_NUMBER] C preprocessor macro resolves to an integer ** with the value (X*1000000 + Y*1000 + Z) where X, Y, and Z are the same ** numbers used in [SQLITE_VERSION].)^ ** The SQLITE_VERSION_NUMBER for any given release of SQLite will also ** be larger than the release from which it is derived.  Either Y will ** be held constant and Z will be incremented or else Y will be incremented ** and Z will be reset to zero. ** ** Since version 3.6.18, SQLite source code has been stored in the **<a href="http://www.fossil-scm.org/">Fossil configuration management ** system</a>.  ^The SQLITE_SOURCE_ID macro evaluates to ** a string which identifies a particular check-in of SQLite ** within its configuration management system.  ^The SQLITE_SOURCE_ID ** string contains the date and time of the check-in (UTC) and an SHA1 ** hash of the entire source tree. ** ** See also: [sqlite3_libversion()], ** [sqlite3_libversion_number()], [sqlite3_sourceid()], ** [sqlite_version()] and [sqlite_source_id()]. */
define|#
directive|define
name|SQLITE_VERSION
value|"3.8.11.1"
define|#
directive|define
name|SQLITE_VERSION_NUMBER
value|3008011
define|#
directive|define
name|SQLITE_SOURCE_ID
value|"2015-07-29 20:00:57 cf538e2783e468bbc25e7cb2a9ee64d3e0e80b2f"
comment|/* ** CAPI3REF: Run-Time Library Version Numbers ** KEYWORDS: sqlite3_version, sqlite3_sourceid ** ** These interfaces provide the same information as the [SQLITE_VERSION], ** [SQLITE_VERSION_NUMBER], and [SQLITE_SOURCE_ID] C preprocessor macros ** but are associated with the library instead of the header file.  ^(Cautious ** programmers might include assert() statements in their application to ** verify that values returned by these interfaces match the macros in ** the header, and thus insure that the application is ** compiled with matching library and header files. ** **<blockquote><pre> ** assert( sqlite3_libversion_number()==SQLITE_VERSION_NUMBER ); ** assert( strcmp(sqlite3_sourceid(),SQLITE_SOURCE_ID)==0 ); ** assert( strcmp(sqlite3_libversion(),SQLITE_VERSION)==0 ); **</pre></blockquote>)^ ** ** ^The sqlite3_version[] string constant contains the text of [SQLITE_VERSION] ** macro.  ^The sqlite3_libversion() function returns a pointer to the ** to the sqlite3_version[] string constant.  The sqlite3_libversion() ** function is provided for use in DLLs since DLL users usually do not have ** direct access to string constants within the DLL.  ^The ** sqlite3_libversion_number() function returns an integer equal to ** [SQLITE_VERSION_NUMBER].  ^The sqlite3_sourceid() function returns  ** a pointer to a string constant whose value is the same as the  ** [SQLITE_SOURCE_ID] C preprocessor macro. ** ** See also: [sqlite_version()] and [sqlite_source_id()]. */
name|SQLITE_API
name|SQLITE_EXTERN
specifier|const
name|char
name|sqlite3_version
index|[]
decl_stmt|;
name|SQLITE_API
specifier|const
name|char
modifier|*
name|SQLITE_STDCALL
name|sqlite3_libversion
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|SQLITE_API
specifier|const
name|char
modifier|*
name|SQLITE_STDCALL
name|sqlite3_sourceid
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_libversion_number
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Run-Time Library Compilation Options Diagnostics ** ** ^The sqlite3_compileoption_used() function returns 0 or 1  ** indicating whether the specified option was defined at  ** compile time.  ^The SQLITE_ prefix may be omitted from the  ** option name passed to sqlite3_compileoption_used().   ** ** ^The sqlite3_compileoption_get() function allows iterating ** over the list of options that were defined at compile time by ** returning the N-th compile time option string.  ^If N is out of range, ** sqlite3_compileoption_get() returns a NULL pointer.  ^The SQLITE_  ** prefix is omitted from any strings returned by  ** sqlite3_compileoption_get(). ** ** ^Support for the diagnostic functions sqlite3_compileoption_used() ** and sqlite3_compileoption_get() may be omitted by specifying the  ** [SQLITE_OMIT_COMPILEOPTION_DIAGS] option at compile time. ** ** See also: SQL functions [sqlite_compileoption_used()] and ** [sqlite_compileoption_get()] and the [compile_options pragma]. */
ifndef|#
directive|ifndef
name|SQLITE_OMIT_COMPILEOPTION_DIAGS
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_compileoption_used
parameter_list|(
specifier|const
name|char
modifier|*
name|zOptName
parameter_list|)
function_decl|;
name|SQLITE_API
specifier|const
name|char
modifier|*
name|SQLITE_STDCALL
name|sqlite3_compileoption_get
parameter_list|(
name|int
name|N
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* ** CAPI3REF: Test To See If The Library Is Threadsafe ** ** ^The sqlite3_threadsafe() function returns zero if and only if ** SQLite was compiled with mutexing code omitted due to the ** [SQLITE_THREADSAFE] compile-time option being set to 0. ** ** SQLite can be compiled with or without mutexes.  When ** the [SQLITE_THREADSAFE] C preprocessor macro is 1 or 2, mutexes ** are enabled and SQLite is threadsafe.  When the ** [SQLITE_THREADSAFE] macro is 0,  ** the mutexes are omitted.  Without the mutexes, it is not safe ** to use SQLite concurrently from more than one thread. ** ** Enabling mutexes incurs a measurable performance penalty. ** So if speed is of utmost importance, it makes sense to disable ** the mutexes.  But for maximum safety, mutexes should be enabled. ** ^The default behavior is for mutexes to be enabled. ** ** This interface can be used by an application to make sure that the ** version of SQLite that it is linking against was compiled with ** the desired setting of the [SQLITE_THREADSAFE] macro. ** ** This interface only reports on the compile-time mutex setting ** of the [SQLITE_THREADSAFE] flag.  If SQLite is compiled with ** SQLITE_THREADSAFE=1 or =2 then mutexes are enabled by default but ** can be fully or partially disabled using a call to [sqlite3_config()] ** with the verbs [SQLITE_CONFIG_SINGLETHREAD], [SQLITE_CONFIG_MULTITHREAD], ** or [SQLITE_CONFIG_SERIALIZED].  ^(The return value of the ** sqlite3_threadsafe() function shows only the compile-time setting of ** thread safety, not any run-time changes to that setting made by ** sqlite3_config(). In other words, the return value from sqlite3_threadsafe() ** is unchanged by calls to sqlite3_config().)^ ** ** See the [threading mode] documentation for additional information. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_threadsafe
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Database Connection Handle ** KEYWORDS: {database connection} {database connections} ** ** Each open SQLite database is represented by a pointer to an instance of ** the opaque structure named "sqlite3".  It is useful to think of an sqlite3 ** pointer as an object.  The [sqlite3_open()], [sqlite3_open16()], and ** [sqlite3_open_v2()] interfaces are its constructors, and [sqlite3_close()] ** and [sqlite3_close_v2()] are its destructors.  There are many other ** interfaces (such as ** [sqlite3_prepare_v2()], [sqlite3_create_function()], and ** [sqlite3_busy_timeout()] to name but three) that are methods on an ** sqlite3 object. */
typedef|typedef
name|struct
name|sqlite3
name|sqlite3
typedef|;
comment|/* ** CAPI3REF: 64-Bit Integer Types ** KEYWORDS: sqlite_int64 sqlite_uint64 ** ** Because there is no cross-platform way to specify 64-bit integer types ** SQLite includes typedefs for 64-bit signed and unsigned integers. ** ** The sqlite3_int64 and sqlite3_uint64 are the preferred type definitions. ** The sqlite_int64 and sqlite_uint64 types are supported for backwards ** compatibility only. ** ** ^The sqlite3_int64 and sqlite_int64 types can store integer values ** between -9223372036854775808 and +9223372036854775807 inclusive.  ^The ** sqlite3_uint64 and sqlite_uint64 types can store integer values  ** between 0 and +18446744073709551615 inclusive. */
ifdef|#
directive|ifdef
name|SQLITE_INT64_TYPE
typedef|typedef
name|SQLITE_INT64_TYPE
name|sqlite_int64
typedef|;
typedef|typedef
name|unsigned
name|SQLITE_INT64_TYPE
name|sqlite_uint64
typedef|;
elif|#
directive|elif
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|||
name|defined
argument_list|(
name|__BORLANDC__
argument_list|)
typedef|typedef
name|__int64
name|sqlite_int64
typedef|;
typedef|typedef
name|unsigned
name|__int64
name|sqlite_uint64
typedef|;
else|#
directive|else
typedef|typedef
name|long
name|long
name|int
name|sqlite_int64
typedef|;
typedef|typedef
name|unsigned
name|long
name|long
name|int
name|sqlite_uint64
typedef|;
endif|#
directive|endif
typedef|typedef
name|sqlite_int64
name|sqlite3_int64
typedef|;
typedef|typedef
name|sqlite_uint64
name|sqlite3_uint64
typedef|;
comment|/* ** If compiling for a processor that lacks floating point support, ** substitute integer for floating-point. */
ifdef|#
directive|ifdef
name|SQLITE_OMIT_FLOATING_POINT
define|#
directive|define
name|double
value|sqlite3_int64
endif|#
directive|endif
comment|/* ** CAPI3REF: Closing A Database Connection ** DESTRUCTOR: sqlite3 ** ** ^The sqlite3_close() and sqlite3_close_v2() routines are destructors ** for the [sqlite3] object. ** ^Calls to sqlite3_close() and sqlite3_close_v2() return [SQLITE_OK] if ** the [sqlite3] object is successfully destroyed and all associated ** resources are deallocated. ** ** ^If the database connection is associated with unfinalized prepared ** statements or unfinished sqlite3_backup objects then sqlite3_close() ** will leave the database connection open and return [SQLITE_BUSY]. ** ^If sqlite3_close_v2() is called with unfinalized prepared statements ** and/or unfinished sqlite3_backups, then the database connection becomes ** an unusable "zombie" which will automatically be deallocated when the ** last prepared statement is finalized or the last sqlite3_backup is ** finished.  The sqlite3_close_v2() interface is intended for use with ** host languages that are garbage collected, and where the order in which ** destructors are called is arbitrary. ** ** Applications should [sqlite3_finalize | finalize] all [prepared statements], ** [sqlite3_blob_close | close] all [BLOB handles], and  ** [sqlite3_backup_finish | finish] all [sqlite3_backup] objects associated ** with the [sqlite3] object prior to attempting to close the object.  ^If ** sqlite3_close_v2() is called on a [database connection] that still has ** outstanding [prepared statements], [BLOB handles], and/or ** [sqlite3_backup] objects then it returns [SQLITE_OK] and the deallocation ** of resources is deferred until all [prepared statements], [BLOB handles], ** and [sqlite3_backup] objects are also destroyed. ** ** ^If an [sqlite3] object is destroyed while a transaction is open, ** the transaction is automatically rolled back. ** ** The C parameter to [sqlite3_close(C)] and [sqlite3_close_v2(C)] ** must be either a NULL ** pointer or an [sqlite3] object pointer obtained ** from [sqlite3_open()], [sqlite3_open16()], or ** [sqlite3_open_v2()], and not previously closed. ** ^Calling sqlite3_close() or sqlite3_close_v2() with a NULL pointer ** argument is a harmless no-op. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_close
parameter_list|(
name|sqlite3
modifier|*
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_close_v2
parameter_list|(
name|sqlite3
modifier|*
parameter_list|)
function_decl|;
comment|/* ** The type for a callback function. ** This is legacy and deprecated.  It is included for historical ** compatibility and is not documented. */
typedef|typedef
name|int
function_decl|(
modifier|*
name|sqlite3_callback
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: One-Step Query Execution Interface ** METHOD: sqlite3 ** ** The sqlite3_exec() interface is a convenience wrapper around ** [sqlite3_prepare_v2()], [sqlite3_step()], and [sqlite3_finalize()], ** that allows an application to run multiple statements of SQL ** without having to use a lot of C code.  ** ** ^The sqlite3_exec() interface runs zero or more UTF-8 encoded, ** semicolon-separate SQL statements passed into its 2nd argument, ** in the context of the [database connection] passed in as its 1st ** argument.  ^If the callback function of the 3rd argument to ** sqlite3_exec() is not NULL, then it is invoked for each result row ** coming out of the evaluated SQL statements.  ^The 4th argument to ** sqlite3_exec() is relayed through to the 1st argument of each ** callback invocation.  ^If the callback pointer to sqlite3_exec() ** is NULL, then no callback is ever invoked and result rows are ** ignored. ** ** ^If an error occurs while evaluating the SQL statements passed into ** sqlite3_exec(), then execution of the current statement stops and ** subsequent statements are skipped.  ^If the 5th parameter to sqlite3_exec() ** is not NULL then any error message is written into memory obtained ** from [sqlite3_malloc()] and passed back through the 5th parameter. ** To avoid memory leaks, the application should invoke [sqlite3_free()] ** on error message strings returned through the 5th parameter of ** of sqlite3_exec() after the error message string is no longer needed. ** ^If the 5th parameter to sqlite3_exec() is not NULL and no errors ** occur, then sqlite3_exec() sets the pointer in its 5th parameter to ** NULL before returning. ** ** ^If an sqlite3_exec() callback returns non-zero, the sqlite3_exec() ** routine returns SQLITE_ABORT without invoking the callback again and ** without running any subsequent SQL statements. ** ** ^The 2nd argument to the sqlite3_exec() callback function is the ** number of columns in the result.  ^The 3rd argument to the sqlite3_exec() ** callback is an array of pointers to strings obtained as if from ** [sqlite3_column_text()], one for each column.  ^If an element of a ** result row is NULL then the corresponding string pointer for the ** sqlite3_exec() callback is a NULL pointer.  ^The 4th argument to the ** sqlite3_exec() callback is an array of pointers to strings where each ** entry represents the name of corresponding result column as obtained ** from [sqlite3_column_name()]. ** ** ^If the 2nd parameter to sqlite3_exec() is a NULL pointer, a pointer ** to an empty string, or a pointer that contains only whitespace and/or  ** SQL comments, then no SQL statements are evaluated and the database ** is not changed. ** ** Restrictions: ** **<ul> **<li> The application must insure that the 1st parameter to sqlite3_exec() **      is a valid and open [database connection]. **<li> The application must not close the [database connection] specified by **      the 1st parameter to sqlite3_exec() while sqlite3_exec() is running. **<li> The application must not modify the SQL statement text passed into **      the 2nd parameter of sqlite3_exec() while sqlite3_exec() is running. **</ul> */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_exec
parameter_list|(
name|sqlite3
modifier|*
parameter_list|,
comment|/* An open database */
specifier|const
name|char
modifier|*
name|sql
parameter_list|,
comment|/* SQL to be evaluated */
name|int
function_decl|(
modifier|*
name|callback
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
parameter_list|,
comment|/* Callback function */
name|void
modifier|*
parameter_list|,
comment|/* 1st argument to callback */
name|char
modifier|*
modifier|*
name|errmsg
comment|/* Error msg written here */
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Result Codes ** KEYWORDS: {result code definitions} ** ** Many SQLite functions return an integer result code from the set shown ** here in order to indicate success or failure. ** ** New error codes may be added in future versions of SQLite. ** ** See also: [extended result code definitions] */
define|#
directive|define
name|SQLITE_OK
value|0
comment|/* Successful result */
comment|/* beginning-of-error-codes */
define|#
directive|define
name|SQLITE_ERROR
value|1
comment|/* SQL error or missing database */
define|#
directive|define
name|SQLITE_INTERNAL
value|2
comment|/* Internal logic error in SQLite */
define|#
directive|define
name|SQLITE_PERM
value|3
comment|/* Access permission denied */
define|#
directive|define
name|SQLITE_ABORT
value|4
comment|/* Callback routine requested an abort */
define|#
directive|define
name|SQLITE_BUSY
value|5
comment|/* The database file is locked */
define|#
directive|define
name|SQLITE_LOCKED
value|6
comment|/* A table in the database is locked */
define|#
directive|define
name|SQLITE_NOMEM
value|7
comment|/* A malloc() failed */
define|#
directive|define
name|SQLITE_READONLY
value|8
comment|/* Attempt to write a readonly database */
define|#
directive|define
name|SQLITE_INTERRUPT
value|9
comment|/* Operation terminated by sqlite3_interrupt()*/
define|#
directive|define
name|SQLITE_IOERR
value|10
comment|/* Some kind of disk I/O error occurred */
define|#
directive|define
name|SQLITE_CORRUPT
value|11
comment|/* The database disk image is malformed */
define|#
directive|define
name|SQLITE_NOTFOUND
value|12
comment|/* Unknown opcode in sqlite3_file_control() */
define|#
directive|define
name|SQLITE_FULL
value|13
comment|/* Insertion failed because database is full */
define|#
directive|define
name|SQLITE_CANTOPEN
value|14
comment|/* Unable to open the database file */
define|#
directive|define
name|SQLITE_PROTOCOL
value|15
comment|/* Database lock protocol error */
define|#
directive|define
name|SQLITE_EMPTY
value|16
comment|/* Database is empty */
define|#
directive|define
name|SQLITE_SCHEMA
value|17
comment|/* The database schema changed */
define|#
directive|define
name|SQLITE_TOOBIG
value|18
comment|/* String or BLOB exceeds size limit */
define|#
directive|define
name|SQLITE_CONSTRAINT
value|19
comment|/* Abort due to constraint violation */
define|#
directive|define
name|SQLITE_MISMATCH
value|20
comment|/* Data type mismatch */
define|#
directive|define
name|SQLITE_MISUSE
value|21
comment|/* Library used incorrectly */
define|#
directive|define
name|SQLITE_NOLFS
value|22
comment|/* Uses OS features not supported on host */
define|#
directive|define
name|SQLITE_AUTH
value|23
comment|/* Authorization denied */
define|#
directive|define
name|SQLITE_FORMAT
value|24
comment|/* Auxiliary database format error */
define|#
directive|define
name|SQLITE_RANGE
value|25
comment|/* 2nd parameter to sqlite3_bind out of range */
define|#
directive|define
name|SQLITE_NOTADB
value|26
comment|/* File opened that is not a database file */
define|#
directive|define
name|SQLITE_NOTICE
value|27
comment|/* Notifications from sqlite3_log() */
define|#
directive|define
name|SQLITE_WARNING
value|28
comment|/* Warnings from sqlite3_log() */
define|#
directive|define
name|SQLITE_ROW
value|100
comment|/* sqlite3_step() has another row ready */
define|#
directive|define
name|SQLITE_DONE
value|101
comment|/* sqlite3_step() has finished executing */
comment|/* end-of-error-codes */
comment|/* ** CAPI3REF: Extended Result Codes ** KEYWORDS: {extended result code definitions} ** ** In its default configuration, SQLite API routines return one of 30 integer ** [result codes].  However, experience has shown that many of ** these result codes are too coarse-grained.  They do not provide as ** much information about problems as programmers might like.  In an effort to ** address this, newer versions of SQLite (version 3.3.8 and later) include ** support for additional result codes that provide more detailed information ** about errors. These [extended result codes] are enabled or disabled ** on a per database connection basis using the ** [sqlite3_extended_result_codes()] API.  Or, the extended code for ** the most recent error can be obtained using ** [sqlite3_extended_errcode()]. */
define|#
directive|define
name|SQLITE_IOERR_READ
value|(SQLITE_IOERR | (1<<8))
define|#
directive|define
name|SQLITE_IOERR_SHORT_READ
value|(SQLITE_IOERR | (2<<8))
define|#
directive|define
name|SQLITE_IOERR_WRITE
value|(SQLITE_IOERR | (3<<8))
define|#
directive|define
name|SQLITE_IOERR_FSYNC
value|(SQLITE_IOERR | (4<<8))
define|#
directive|define
name|SQLITE_IOERR_DIR_FSYNC
value|(SQLITE_IOERR | (5<<8))
define|#
directive|define
name|SQLITE_IOERR_TRUNCATE
value|(SQLITE_IOERR | (6<<8))
define|#
directive|define
name|SQLITE_IOERR_FSTAT
value|(SQLITE_IOERR | (7<<8))
define|#
directive|define
name|SQLITE_IOERR_UNLOCK
value|(SQLITE_IOERR | (8<<8))
define|#
directive|define
name|SQLITE_IOERR_RDLOCK
value|(SQLITE_IOERR | (9<<8))
define|#
directive|define
name|SQLITE_IOERR_DELETE
value|(SQLITE_IOERR | (10<<8))
define|#
directive|define
name|SQLITE_IOERR_BLOCKED
value|(SQLITE_IOERR | (11<<8))
define|#
directive|define
name|SQLITE_IOERR_NOMEM
value|(SQLITE_IOERR | (12<<8))
define|#
directive|define
name|SQLITE_IOERR_ACCESS
value|(SQLITE_IOERR | (13<<8))
define|#
directive|define
name|SQLITE_IOERR_CHECKRESERVEDLOCK
value|(SQLITE_IOERR | (14<<8))
define|#
directive|define
name|SQLITE_IOERR_LOCK
value|(SQLITE_IOERR | (15<<8))
define|#
directive|define
name|SQLITE_IOERR_CLOSE
value|(SQLITE_IOERR | (16<<8))
define|#
directive|define
name|SQLITE_IOERR_DIR_CLOSE
value|(SQLITE_IOERR | (17<<8))
define|#
directive|define
name|SQLITE_IOERR_SHMOPEN
value|(SQLITE_IOERR | (18<<8))
define|#
directive|define
name|SQLITE_IOERR_SHMSIZE
value|(SQLITE_IOERR | (19<<8))
define|#
directive|define
name|SQLITE_IOERR_SHMLOCK
value|(SQLITE_IOERR | (20<<8))
define|#
directive|define
name|SQLITE_IOERR_SHMMAP
value|(SQLITE_IOERR | (21<<8))
define|#
directive|define
name|SQLITE_IOERR_SEEK
value|(SQLITE_IOERR | (22<<8))
define|#
directive|define
name|SQLITE_IOERR_DELETE_NOENT
value|(SQLITE_IOERR | (23<<8))
define|#
directive|define
name|SQLITE_IOERR_MMAP
value|(SQLITE_IOERR | (24<<8))
define|#
directive|define
name|SQLITE_IOERR_GETTEMPPATH
value|(SQLITE_IOERR | (25<<8))
define|#
directive|define
name|SQLITE_IOERR_CONVPATH
value|(SQLITE_IOERR | (26<<8))
define|#
directive|define
name|SQLITE_LOCKED_SHAREDCACHE
value|(SQLITE_LOCKED |  (1<<8))
define|#
directive|define
name|SQLITE_BUSY_RECOVERY
value|(SQLITE_BUSY   |  (1<<8))
define|#
directive|define
name|SQLITE_BUSY_SNAPSHOT
value|(SQLITE_BUSY   |  (2<<8))
define|#
directive|define
name|SQLITE_CANTOPEN_NOTEMPDIR
value|(SQLITE_CANTOPEN | (1<<8))
define|#
directive|define
name|SQLITE_CANTOPEN_ISDIR
value|(SQLITE_CANTOPEN | (2<<8))
define|#
directive|define
name|SQLITE_CANTOPEN_FULLPATH
value|(SQLITE_CANTOPEN | (3<<8))
define|#
directive|define
name|SQLITE_CANTOPEN_CONVPATH
value|(SQLITE_CANTOPEN | (4<<8))
define|#
directive|define
name|SQLITE_CORRUPT_VTAB
value|(SQLITE_CORRUPT | (1<<8))
define|#
directive|define
name|SQLITE_READONLY_RECOVERY
value|(SQLITE_READONLY | (1<<8))
define|#
directive|define
name|SQLITE_READONLY_CANTLOCK
value|(SQLITE_READONLY | (2<<8))
define|#
directive|define
name|SQLITE_READONLY_ROLLBACK
value|(SQLITE_READONLY | (3<<8))
define|#
directive|define
name|SQLITE_READONLY_DBMOVED
value|(SQLITE_READONLY | (4<<8))
define|#
directive|define
name|SQLITE_ABORT_ROLLBACK
value|(SQLITE_ABORT | (2<<8))
define|#
directive|define
name|SQLITE_CONSTRAINT_CHECK
value|(SQLITE_CONSTRAINT | (1<<8))
define|#
directive|define
name|SQLITE_CONSTRAINT_COMMITHOOK
value|(SQLITE_CONSTRAINT | (2<<8))
define|#
directive|define
name|SQLITE_CONSTRAINT_FOREIGNKEY
value|(SQLITE_CONSTRAINT | (3<<8))
define|#
directive|define
name|SQLITE_CONSTRAINT_FUNCTION
value|(SQLITE_CONSTRAINT | (4<<8))
define|#
directive|define
name|SQLITE_CONSTRAINT_NOTNULL
value|(SQLITE_CONSTRAINT | (5<<8))
define|#
directive|define
name|SQLITE_CONSTRAINT_PRIMARYKEY
value|(SQLITE_CONSTRAINT | (6<<8))
define|#
directive|define
name|SQLITE_CONSTRAINT_TRIGGER
value|(SQLITE_CONSTRAINT | (7<<8))
define|#
directive|define
name|SQLITE_CONSTRAINT_UNIQUE
value|(SQLITE_CONSTRAINT | (8<<8))
define|#
directive|define
name|SQLITE_CONSTRAINT_VTAB
value|(SQLITE_CONSTRAINT | (9<<8))
define|#
directive|define
name|SQLITE_CONSTRAINT_ROWID
value|(SQLITE_CONSTRAINT |(10<<8))
define|#
directive|define
name|SQLITE_NOTICE_RECOVER_WAL
value|(SQLITE_NOTICE | (1<<8))
define|#
directive|define
name|SQLITE_NOTICE_RECOVER_ROLLBACK
value|(SQLITE_NOTICE | (2<<8))
define|#
directive|define
name|SQLITE_WARNING_AUTOINDEX
value|(SQLITE_WARNING | (1<<8))
define|#
directive|define
name|SQLITE_AUTH_USER
value|(SQLITE_AUTH | (1<<8))
comment|/* ** CAPI3REF: Flags For File Open Operations ** ** These bit values are intended for use in the ** 3rd parameter to the [sqlite3_open_v2()] interface and ** in the 4th parameter to the [sqlite3_vfs.xOpen] method. */
define|#
directive|define
name|SQLITE_OPEN_READONLY
value|0x00000001
comment|/* Ok for sqlite3_open_v2() */
define|#
directive|define
name|SQLITE_OPEN_READWRITE
value|0x00000002
comment|/* Ok for sqlite3_open_v2() */
define|#
directive|define
name|SQLITE_OPEN_CREATE
value|0x00000004
comment|/* Ok for sqlite3_open_v2() */
define|#
directive|define
name|SQLITE_OPEN_DELETEONCLOSE
value|0x00000008
comment|/* VFS only */
define|#
directive|define
name|SQLITE_OPEN_EXCLUSIVE
value|0x00000010
comment|/* VFS only */
define|#
directive|define
name|SQLITE_OPEN_AUTOPROXY
value|0x00000020
comment|/* VFS only */
define|#
directive|define
name|SQLITE_OPEN_URI
value|0x00000040
comment|/* Ok for sqlite3_open_v2() */
define|#
directive|define
name|SQLITE_OPEN_MEMORY
value|0x00000080
comment|/* Ok for sqlite3_open_v2() */
define|#
directive|define
name|SQLITE_OPEN_MAIN_DB
value|0x00000100
comment|/* VFS only */
define|#
directive|define
name|SQLITE_OPEN_TEMP_DB
value|0x00000200
comment|/* VFS only */
define|#
directive|define
name|SQLITE_OPEN_TRANSIENT_DB
value|0x00000400
comment|/* VFS only */
define|#
directive|define
name|SQLITE_OPEN_MAIN_JOURNAL
value|0x00000800
comment|/* VFS only */
define|#
directive|define
name|SQLITE_OPEN_TEMP_JOURNAL
value|0x00001000
comment|/* VFS only */
define|#
directive|define
name|SQLITE_OPEN_SUBJOURNAL
value|0x00002000
comment|/* VFS only */
define|#
directive|define
name|SQLITE_OPEN_MASTER_JOURNAL
value|0x00004000
comment|/* VFS only */
define|#
directive|define
name|SQLITE_OPEN_NOMUTEX
value|0x00008000
comment|/* Ok for sqlite3_open_v2() */
define|#
directive|define
name|SQLITE_OPEN_FULLMUTEX
value|0x00010000
comment|/* Ok for sqlite3_open_v2() */
define|#
directive|define
name|SQLITE_OPEN_SHAREDCACHE
value|0x00020000
comment|/* Ok for sqlite3_open_v2() */
define|#
directive|define
name|SQLITE_OPEN_PRIVATECACHE
value|0x00040000
comment|/* Ok for sqlite3_open_v2() */
define|#
directive|define
name|SQLITE_OPEN_WAL
value|0x00080000
comment|/* VFS only */
comment|/* Reserved:                         0x00F00000 */
comment|/* ** CAPI3REF: Device Characteristics ** ** The xDeviceCharacteristics method of the [sqlite3_io_methods] ** object returns an integer which is a vector of these ** bit values expressing I/O characteristics of the mass storage ** device that holds the file that the [sqlite3_io_methods] ** refers to. ** ** The SQLITE_IOCAP_ATOMIC property means that all writes of ** any size are atomic.  The SQLITE_IOCAP_ATOMICnnn values ** mean that writes of blocks that are nnn bytes in size and ** are aligned to an address which is an integer multiple of ** nnn are atomic.  The SQLITE_IOCAP_SAFE_APPEND value means ** that when data is appended to a file, the data is appended ** first then the size of the file is extended, never the other ** way around.  The SQLITE_IOCAP_SEQUENTIAL property means that ** information is written to disk in the same order as calls ** to xWrite().  The SQLITE_IOCAP_POWERSAFE_OVERWRITE property means that ** after reboot following a crash or power loss, the only bytes in a ** file that were written at the application level might have changed ** and that adjacent bytes, even bytes within the same sector are ** guaranteed to be unchanged.  The SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN ** flag indicate that a file cannot be deleted when open.  The ** SQLITE_IOCAP_IMMUTABLE flag indicates that the file is on ** read-only media and cannot be changed even by processes with ** elevated privileges. */
define|#
directive|define
name|SQLITE_IOCAP_ATOMIC
value|0x00000001
define|#
directive|define
name|SQLITE_IOCAP_ATOMIC512
value|0x00000002
define|#
directive|define
name|SQLITE_IOCAP_ATOMIC1K
value|0x00000004
define|#
directive|define
name|SQLITE_IOCAP_ATOMIC2K
value|0x00000008
define|#
directive|define
name|SQLITE_IOCAP_ATOMIC4K
value|0x00000010
define|#
directive|define
name|SQLITE_IOCAP_ATOMIC8K
value|0x00000020
define|#
directive|define
name|SQLITE_IOCAP_ATOMIC16K
value|0x00000040
define|#
directive|define
name|SQLITE_IOCAP_ATOMIC32K
value|0x00000080
define|#
directive|define
name|SQLITE_IOCAP_ATOMIC64K
value|0x00000100
define|#
directive|define
name|SQLITE_IOCAP_SAFE_APPEND
value|0x00000200
define|#
directive|define
name|SQLITE_IOCAP_SEQUENTIAL
value|0x00000400
define|#
directive|define
name|SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN
value|0x00000800
define|#
directive|define
name|SQLITE_IOCAP_POWERSAFE_OVERWRITE
value|0x00001000
define|#
directive|define
name|SQLITE_IOCAP_IMMUTABLE
value|0x00002000
comment|/* ** CAPI3REF: File Locking Levels ** ** SQLite uses one of these integer values as the second ** argument to calls it makes to the xLock() and xUnlock() methods ** of an [sqlite3_io_methods] object. */
define|#
directive|define
name|SQLITE_LOCK_NONE
value|0
define|#
directive|define
name|SQLITE_LOCK_SHARED
value|1
define|#
directive|define
name|SQLITE_LOCK_RESERVED
value|2
define|#
directive|define
name|SQLITE_LOCK_PENDING
value|3
define|#
directive|define
name|SQLITE_LOCK_EXCLUSIVE
value|4
comment|/* ** CAPI3REF: Synchronization Type Flags ** ** When SQLite invokes the xSync() method of an ** [sqlite3_io_methods] object it uses a combination of ** these integer values as the second argument. ** ** When the SQLITE_SYNC_DATAONLY flag is used, it means that the ** sync operation only needs to flush data to mass storage.  Inode ** information need not be flushed. If the lower four bits of the flag ** equal SQLITE_SYNC_NORMAL, that means to use normal fsync() semantics. ** If the lower four bits equal SQLITE_SYNC_FULL, that means ** to use Mac OS X style fullsync instead of fsync(). ** ** Do not confuse the SQLITE_SYNC_NORMAL and SQLITE_SYNC_FULL flags ** with the [PRAGMA synchronous]=NORMAL and [PRAGMA synchronous]=FULL ** settings.  The [synchronous pragma] determines when calls to the ** xSync VFS method occur and applies uniformly across all platforms. ** The SQLITE_SYNC_NORMAL and SQLITE_SYNC_FULL flags determine how ** energetic or rigorous or forceful the sync operations are and ** only make a difference on Mac OSX for the default SQLite code. ** (Third-party VFS implementations might also make the distinction ** between SQLITE_SYNC_NORMAL and SQLITE_SYNC_FULL, but among the ** operating systems natively supported by SQLite, only Mac OSX ** cares about the difference.) */
define|#
directive|define
name|SQLITE_SYNC_NORMAL
value|0x00002
define|#
directive|define
name|SQLITE_SYNC_FULL
value|0x00003
define|#
directive|define
name|SQLITE_SYNC_DATAONLY
value|0x00010
comment|/* ** CAPI3REF: OS Interface Open File Handle ** ** An [sqlite3_file] object represents an open file in the  ** [sqlite3_vfs | OS interface layer].  Individual OS interface ** implementations will ** want to subclass this object by appending additional fields ** for their own use.  The pMethods entry is a pointer to an ** [sqlite3_io_methods] object that defines methods for performing ** I/O operations on the open file. */
typedef|typedef
name|struct
name|sqlite3_file
name|sqlite3_file
typedef|;
struct|struct
name|sqlite3_file
block|{
specifier|const
name|struct
name|sqlite3_io_methods
modifier|*
name|pMethods
decl_stmt|;
comment|/* Methods for an open file */
block|}
struct|;
comment|/* ** CAPI3REF: OS Interface File Virtual Methods Object ** ** Every file opened by the [sqlite3_vfs.xOpen] method populates an ** [sqlite3_file] object (or, more commonly, a subclass of the ** [sqlite3_file] object) with a pointer to an instance of this object. ** This object defines the methods used to perform various operations ** against the open file represented by the [sqlite3_file] object. ** ** If the [sqlite3_vfs.xOpen] method sets the sqlite3_file.pMethods element  ** to a non-NULL pointer, then the sqlite3_io_methods.xClose method ** may be invoked even if the [sqlite3_vfs.xOpen] reported that it failed.  The ** only way to prevent a call to xClose following a failed [sqlite3_vfs.xOpen] ** is for the [sqlite3_vfs.xOpen] to set the sqlite3_file.pMethods element ** to NULL. ** ** The flags argument to xSync may be one of [SQLITE_SYNC_NORMAL] or ** [SQLITE_SYNC_FULL].  The first choice is the normal fsync(). ** The second choice is a Mac OS X style fullsync.  The [SQLITE_SYNC_DATAONLY] ** flag may be ORed in to indicate that only the data of the file ** and not its inode needs to be synced. ** ** The integer values to xLock() and xUnlock() are one of **<ul> **<li> [SQLITE_LOCK_NONE], **<li> [SQLITE_LOCK_SHARED], **<li> [SQLITE_LOCK_RESERVED], **<li> [SQLITE_LOCK_PENDING], or **<li> [SQLITE_LOCK_EXCLUSIVE]. **</ul> ** xLock() increases the lock. xUnlock() decreases the lock. ** The xCheckReservedLock() method checks whether any database connection, ** either in this process or in some other process, is holding a RESERVED, ** PENDING, or EXCLUSIVE lock on the file.  It returns true ** if such a lock exists and false otherwise. ** ** The xFileControl() method is a generic interface that allows custom ** VFS implementations to directly control an open file using the ** [sqlite3_file_control()] interface.  The second "op" argument is an ** integer opcode.  The third argument is a generic pointer intended to ** point to a structure that may contain arguments or space in which to ** write return values.  Potential uses for xFileControl() might be ** functions to enable blocking locks with timeouts, to change the ** locking strategy (for example to use dot-file locks), to inquire ** about the status of a lock, or to break stale locks.  The SQLite ** core reserves all opcodes less than 100 for its own use. ** A [file control opcodes | list of opcodes] less than 100 is available. ** Applications that define a custom xFileControl method should use opcodes ** greater than 100 to avoid conflicts.  VFS implementations should ** return [SQLITE_NOTFOUND] for file control opcodes that they do not ** recognize. ** ** The xSectorSize() method returns the sector size of the ** device that underlies the file.  The sector size is the ** minimum write that can be performed without disturbing ** other bytes in the file.  The xDeviceCharacteristics() ** method returns a bit vector describing behaviors of the ** underlying device: ** **<ul> **<li> [SQLITE_IOCAP_ATOMIC] **<li> [SQLITE_IOCAP_ATOMIC512] **<li> [SQLITE_IOCAP_ATOMIC1K] **<li> [SQLITE_IOCAP_ATOMIC2K] **<li> [SQLITE_IOCAP_ATOMIC4K] **<li> [SQLITE_IOCAP_ATOMIC8K] **<li> [SQLITE_IOCAP_ATOMIC16K] **<li> [SQLITE_IOCAP_ATOMIC32K] **<li> [SQLITE_IOCAP_ATOMIC64K] **<li> [SQLITE_IOCAP_SAFE_APPEND] **<li> [SQLITE_IOCAP_SEQUENTIAL] **</ul> ** ** The SQLITE_IOCAP_ATOMIC property means that all writes of ** any size are atomic.  The SQLITE_IOCAP_ATOMICnnn values ** mean that writes of blocks that are nnn bytes in size and ** are aligned to an address which is an integer multiple of ** nnn are atomic.  The SQLITE_IOCAP_SAFE_APPEND value means ** that when data is appended to a file, the data is appended ** first then the size of the file is extended, never the other ** way around.  The SQLITE_IOCAP_SEQUENTIAL property means that ** information is written to disk in the same order as calls ** to xWrite(). ** ** If xRead() returns SQLITE_IOERR_SHORT_READ it must also fill ** in the unread portions of the buffer with zeros.  A VFS that ** fails to zero-fill short reads might seem to work.  However, ** failure to zero-fill short reads will eventually lead to ** database corruption. */
typedef|typedef
name|struct
name|sqlite3_io_methods
name|sqlite3_io_methods
typedef|;
struct|struct
name|sqlite3_io_methods
block|{
name|int
name|iVersion
decl_stmt|;
name|int
function_decl|(
modifier|*
name|xClose
function_decl|)
parameter_list|(
name|sqlite3_file
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xRead
function_decl|)
parameter_list|(
name|sqlite3_file
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|int
name|iAmt
parameter_list|,
name|sqlite3_int64
name|iOfst
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xWrite
function_decl|)
parameter_list|(
name|sqlite3_file
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|int
name|iAmt
parameter_list|,
name|sqlite3_int64
name|iOfst
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xTruncate
function_decl|)
parameter_list|(
name|sqlite3_file
modifier|*
parameter_list|,
name|sqlite3_int64
name|size
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xSync
function_decl|)
parameter_list|(
name|sqlite3_file
modifier|*
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xFileSize
function_decl|)
parameter_list|(
name|sqlite3_file
modifier|*
parameter_list|,
name|sqlite3_int64
modifier|*
name|pSize
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xLock
function_decl|)
parameter_list|(
name|sqlite3_file
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xUnlock
function_decl|)
parameter_list|(
name|sqlite3_file
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xCheckReservedLock
function_decl|)
parameter_list|(
name|sqlite3_file
modifier|*
parameter_list|,
name|int
modifier|*
name|pResOut
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xFileControl
function_decl|)
parameter_list|(
name|sqlite3_file
modifier|*
parameter_list|,
name|int
name|op
parameter_list|,
name|void
modifier|*
name|pArg
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xSectorSize
function_decl|)
parameter_list|(
name|sqlite3_file
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xDeviceCharacteristics
function_decl|)
parameter_list|(
name|sqlite3_file
modifier|*
parameter_list|)
function_decl|;
comment|/* Methods above are valid for version 1 */
name|int
function_decl|(
modifier|*
name|xShmMap
function_decl|)
parameter_list|(
name|sqlite3_file
modifier|*
parameter_list|,
name|int
name|iPg
parameter_list|,
name|int
name|pgsz
parameter_list|,
name|int
parameter_list|,
name|void
specifier|volatile
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xShmLock
function_decl|)
parameter_list|(
name|sqlite3_file
modifier|*
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|xShmBarrier
function_decl|)
parameter_list|(
name|sqlite3_file
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xShmUnmap
function_decl|)
parameter_list|(
name|sqlite3_file
modifier|*
parameter_list|,
name|int
name|deleteFlag
parameter_list|)
function_decl|;
comment|/* Methods above are valid for version 2 */
name|int
function_decl|(
modifier|*
name|xFetch
function_decl|)
parameter_list|(
name|sqlite3_file
modifier|*
parameter_list|,
name|sqlite3_int64
name|iOfst
parameter_list|,
name|int
name|iAmt
parameter_list|,
name|void
modifier|*
modifier|*
name|pp
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xUnfetch
function_decl|)
parameter_list|(
name|sqlite3_file
modifier|*
parameter_list|,
name|sqlite3_int64
name|iOfst
parameter_list|,
name|void
modifier|*
name|p
parameter_list|)
function_decl|;
comment|/* Methods above are valid for version 3 */
comment|/* Additional methods may be added in future releases */
block|}
struct|;
comment|/* ** CAPI3REF: Standard File Control Opcodes ** KEYWORDS: {file control opcodes} {file control opcode} ** ** These integer constants are opcodes for the xFileControl method ** of the [sqlite3_io_methods] object and for the [sqlite3_file_control()] ** interface. ** **<ul> **<li>[[SQLITE_FCNTL_LOCKSTATE]] ** The [SQLITE_FCNTL_LOCKSTATE] opcode is used for debugging.  This ** opcode causes the xFileControl method to write the current state of ** the lock (one of [SQLITE_LOCK_NONE], [SQLITE_LOCK_SHARED], ** [SQLITE_LOCK_RESERVED], [SQLITE_LOCK_PENDING], or [SQLITE_LOCK_EXCLUSIVE]) ** into an integer that the pArg argument points to. This capability ** is used during testing and is only available when the SQLITE_TEST ** compile-time option is used. ** **<li>[[SQLITE_FCNTL_SIZE_HINT]] ** The [SQLITE_FCNTL_SIZE_HINT] opcode is used by SQLite to give the VFS ** layer a hint of how large the database file will grow to be during the ** current transaction.  This hint is not guaranteed to be accurate but it ** is often close.  The underlying VFS might choose to preallocate database ** file space based on this hint in order to help writes to the database ** file run faster. ** **<li>[[SQLITE_FCNTL_CHUNK_SIZE]] ** The [SQLITE_FCNTL_CHUNK_SIZE] opcode is used to request that the VFS ** extends and truncates the database file in chunks of a size specified ** by the user. The fourth argument to [sqlite3_file_control()] should  ** point to an integer (type int) containing the new chunk-size to use ** for the nominated database. Allocating database file space in large ** chunks (say 1MB at a time), may reduce file-system fragmentation and ** improve performance on some systems. ** **<li>[[SQLITE_FCNTL_FILE_POINTER]] ** The [SQLITE_FCNTL_FILE_POINTER] opcode is used to obtain a pointer ** to the [sqlite3_file] object associated with a particular database ** connection.  See the [sqlite3_file_control()] documentation for ** additional information. ** **<li>[[SQLITE_FCNTL_SYNC_OMITTED]] ** No longer in use. ** **<li>[[SQLITE_FCNTL_SYNC]] ** The [SQLITE_FCNTL_SYNC] opcode is generated internally by SQLite and ** sent to the VFS immediately before the xSync method is invoked on a ** database file descriptor. Or, if the xSync method is not invoked  ** because the user has configured SQLite with  ** [PRAGMA synchronous | PRAGMA synchronous=OFF] it is invoked in place  ** of the xSync method. In most cases, the pointer argument passed with ** this file-control is NULL. However, if the database file is being synced ** as part of a multi-database commit, the argument points to a nul-terminated ** string containing the transactions master-journal file name. VFSes that  ** do not need this signal should silently ignore this opcode. Applications  ** should not call [sqlite3_file_control()] with this opcode as doing so may  ** disrupt the operation of the specialized VFSes that do require it.   ** **<li>[[SQLITE_FCNTL_COMMIT_PHASETWO]] ** The [SQLITE_FCNTL_COMMIT_PHASETWO] opcode is generated internally by SQLite ** and sent to the VFS after a transaction has been committed immediately ** but before the database is unlocked. VFSes that do not need this signal ** should silently ignore this opcode. Applications should not call ** [sqlite3_file_control()] with this opcode as doing so may disrupt the  ** operation of the specialized VFSes that do require it.   ** **<li>[[SQLITE_FCNTL_WIN32_AV_RETRY]] ** ^The [SQLITE_FCNTL_WIN32_AV_RETRY] opcode is used to configure automatic ** retry counts and intervals for certain disk I/O operations for the ** windows [VFS] in order to provide robustness in the presence of ** anti-virus programs.  By default, the windows VFS will retry file read, ** file write, and file delete operations up to 10 times, with a delay ** of 25 milliseconds before the first retry and with the delay increasing ** by an additional 25 milliseconds with each subsequent retry.  This ** opcode allows these two values (10 retries and 25 milliseconds of delay) ** to be adjusted.  The values are changed for all database connections ** within the same process.  The argument is a pointer to an array of two ** integers where the first integer i the new retry count and the second ** integer is the delay.  If either integer is negative, then the setting ** is not changed but instead the prior value of that setting is written ** into the array entry, allowing the current retry settings to be ** interrogated.  The zDbName parameter is ignored. ** **<li>[[SQLITE_FCNTL_PERSIST_WAL]] ** ^The [SQLITE_FCNTL_PERSIST_WAL] opcode is used to set or query the ** persistent [WAL | Write Ahead Log] setting.  By default, the auxiliary ** write ahead log and shared memory files used for transaction control ** are automatically deleted when the latest connection to the database ** closes.  Setting persistent WAL mode causes those files to persist after ** close.  Persisting the files is useful when other processes that do not ** have write permission on the directory containing the database file want ** to read the database file, as the WAL and shared memory files must exist ** in order for the database to be readable.  The fourth parameter to ** [sqlite3_file_control()] for this opcode should be a pointer to an integer. ** That integer is 0 to disable persistent WAL mode or 1 to enable persistent ** WAL mode.  If the integer is -1, then it is overwritten with the current ** WAL persistence setting. ** **<li>[[SQLITE_FCNTL_POWERSAFE_OVERWRITE]] ** ^The [SQLITE_FCNTL_POWERSAFE_OVERWRITE] opcode is used to set or query the ** persistent "powersafe-overwrite" or "PSOW" setting.  The PSOW setting ** determines the [SQLITE_IOCAP_POWERSAFE_OVERWRITE] bit of the ** xDeviceCharacteristics methods. The fourth parameter to ** [sqlite3_file_control()] for this opcode should be a pointer to an integer. ** That integer is 0 to disable zero-damage mode or 1 to enable zero-damage ** mode.  If the integer is -1, then it is overwritten with the current ** zero-damage mode setting. ** **<li>[[SQLITE_FCNTL_OVERWRITE]] ** ^The [SQLITE_FCNTL_OVERWRITE] opcode is invoked by SQLite after opening ** a write transaction to indicate that, unless it is rolled back for some ** reason, the entire database file will be overwritten by the current  ** transaction. This is used by VACUUM operations. ** **<li>[[SQLITE_FCNTL_VFSNAME]] ** ^The [SQLITE_FCNTL_VFSNAME] opcode can be used to obtain the names of ** all [VFSes] in the VFS stack.  The names are of all VFS shims and the ** final bottom-level VFS are written into memory obtained from  ** [sqlite3_malloc()] and the result is stored in the char* variable ** that the fourth parameter of [sqlite3_file_control()] points to. ** The caller is responsible for freeing the memory when done.  As with ** all file-control actions, there is no guarantee that this will actually ** do anything.  Callers should initialize the char* variable to a NULL ** pointer in case this file-control is not implemented.  This file-control ** is intended for diagnostic use only. ** **<li>[[SQLITE_FCNTL_PRAGMA]] ** ^Whenever a [PRAGMA] statement is parsed, an [SQLITE_FCNTL_PRAGMA]  ** file control is sent to the open [sqlite3_file] object corresponding ** to the database file to which the pragma statement refers. ^The argument ** to the [SQLITE_FCNTL_PRAGMA] file control is an array of ** pointers to strings (char**) in which the second element of the array ** is the name of the pragma and the third element is the argument to the ** pragma or NULL if the pragma has no argument.  ^The handler for an ** [SQLITE_FCNTL_PRAGMA] file control can optionally make the first element ** of the char** argument point to a string obtained from [sqlite3_mprintf()] ** or the equivalent and that string will become the result of the pragma or ** the error message if the pragma fails. ^If the ** [SQLITE_FCNTL_PRAGMA] file control returns [SQLITE_NOTFOUND], then normal  ** [PRAGMA] processing continues.  ^If the [SQLITE_FCNTL_PRAGMA] ** file control returns [SQLITE_OK], then the parser assumes that the ** VFS has handled the PRAGMA itself and the parser generates a no-op ** prepared statement if result string is NULL, or that returns a copy ** of the result string if the string is non-NULL. ** ^If the [SQLITE_FCNTL_PRAGMA] file control returns ** any result code other than [SQLITE_OK] or [SQLITE_NOTFOUND], that means ** that the VFS encountered an error while handling the [PRAGMA] and the ** compilation of the PRAGMA fails with an error.  ^The [SQLITE_FCNTL_PRAGMA] ** file control occurs at the beginning of pragma statement analysis and so ** it is able to override built-in [PRAGMA] statements. ** **<li>[[SQLITE_FCNTL_BUSYHANDLER]] ** ^The [SQLITE_FCNTL_BUSYHANDLER] ** file-control may be invoked by SQLite on the database file handle ** shortly after it is opened in order to provide a custom VFS with access ** to the connections busy-handler callback. The argument is of type (void **) ** - an array of two (void *) values. The first (void *) actually points ** to a function of type (int (*)(void *)). In order to invoke the connections ** busy-handler, this function should be invoked with the second (void *) in ** the array as the only argument. If it returns non-zero, then the operation ** should be retried. If it returns zero, the custom VFS should abandon the ** current operation. ** **<li>[[SQLITE_FCNTL_TEMPFILENAME]] ** ^Application can invoke the [SQLITE_FCNTL_TEMPFILENAME] file-control ** to have SQLite generate a ** temporary filename using the same algorithm that is followed to generate ** temporary filenames for TEMP tables and other internal uses.  The ** argument should be a char** which will be filled with the filename ** written into memory obtained from [sqlite3_malloc()].  The caller should ** invoke [sqlite3_free()] on the result to avoid a memory leak. ** **<li>[[SQLITE_FCNTL_MMAP_SIZE]] ** The [SQLITE_FCNTL_MMAP_SIZE] file control is used to query or set the ** maximum number of bytes that will be used for memory-mapped I/O. ** The argument is a pointer to a value of type sqlite3_int64 that ** is an advisory maximum number of bytes in the file to memory map.  The ** pointer is overwritten with the old value.  The limit is not changed if ** the value originally pointed to is negative, and so the current limit  ** can be queried by passing in a pointer to a negative number.  This ** file-control is used internally to implement [PRAGMA mmap_size]. ** **<li>[[SQLITE_FCNTL_TRACE]] ** The [SQLITE_FCNTL_TRACE] file control provides advisory information ** to the VFS about what the higher layers of the SQLite stack are doing. ** This file control is used by some VFS activity tracing [shims]. ** The argument is a zero-terminated string.  Higher layers in the ** SQLite stack may generate instances of this file control if ** the [SQLITE_USE_FCNTL_TRACE] compile-time option is enabled. ** **<li>[[SQLITE_FCNTL_HAS_MOVED]] ** The [SQLITE_FCNTL_HAS_MOVED] file control interprets its argument as a ** pointer to an integer and it writes a boolean into that integer depending ** on whether or not the file has been renamed, moved, or deleted since it ** was first opened. ** **<li>[[SQLITE_FCNTL_WIN32_SET_HANDLE]] ** The [SQLITE_FCNTL_WIN32_SET_HANDLE] opcode is used for debugging.  This ** opcode causes the xFileControl method to swap the file handle with the one ** pointed to by the pArg argument.  This capability is used during testing ** and only needs to be supported when SQLITE_TEST is defined. ** **<li>[[SQLITE_FCNTL_WAL_BLOCK]] ** The [SQLITE_FCNTL_WAL_BLOCK] is a signal to the VFS layer that it might ** be advantageous to block on the next WAL lock if the lock is not immediately ** available.  The WAL subsystem issues this signal during rare ** circumstances in order to fix a problem with priority inversion. ** Applications should<em>not</em> use this file-control. ** **<li>[[SQLITE_FCNTL_ZIPVFS]] ** The [SQLITE_FCNTL_ZIPVFS] opcode is implemented by zipvfs only. All other ** VFS should return SQLITE_NOTFOUND for this opcode. ** **<li>[[SQLITE_FCNTL_RBU]] ** The [SQLITE_FCNTL_RBU] opcode is implemented by the special VFS used by ** the RBU extension only.  All other VFS should return SQLITE_NOTFOUND for ** this opcode.   **</ul> */
define|#
directive|define
name|SQLITE_FCNTL_LOCKSTATE
value|1
define|#
directive|define
name|SQLITE_FCNTL_GET_LOCKPROXYFILE
value|2
define|#
directive|define
name|SQLITE_FCNTL_SET_LOCKPROXYFILE
value|3
define|#
directive|define
name|SQLITE_FCNTL_LAST_ERRNO
value|4
define|#
directive|define
name|SQLITE_FCNTL_SIZE_HINT
value|5
define|#
directive|define
name|SQLITE_FCNTL_CHUNK_SIZE
value|6
define|#
directive|define
name|SQLITE_FCNTL_FILE_POINTER
value|7
define|#
directive|define
name|SQLITE_FCNTL_SYNC_OMITTED
value|8
define|#
directive|define
name|SQLITE_FCNTL_WIN32_AV_RETRY
value|9
define|#
directive|define
name|SQLITE_FCNTL_PERSIST_WAL
value|10
define|#
directive|define
name|SQLITE_FCNTL_OVERWRITE
value|11
define|#
directive|define
name|SQLITE_FCNTL_VFSNAME
value|12
define|#
directive|define
name|SQLITE_FCNTL_POWERSAFE_OVERWRITE
value|13
define|#
directive|define
name|SQLITE_FCNTL_PRAGMA
value|14
define|#
directive|define
name|SQLITE_FCNTL_BUSYHANDLER
value|15
define|#
directive|define
name|SQLITE_FCNTL_TEMPFILENAME
value|16
define|#
directive|define
name|SQLITE_FCNTL_MMAP_SIZE
value|18
define|#
directive|define
name|SQLITE_FCNTL_TRACE
value|19
define|#
directive|define
name|SQLITE_FCNTL_HAS_MOVED
value|20
define|#
directive|define
name|SQLITE_FCNTL_SYNC
value|21
define|#
directive|define
name|SQLITE_FCNTL_COMMIT_PHASETWO
value|22
define|#
directive|define
name|SQLITE_FCNTL_WIN32_SET_HANDLE
value|23
define|#
directive|define
name|SQLITE_FCNTL_WAL_BLOCK
value|24
define|#
directive|define
name|SQLITE_FCNTL_ZIPVFS
value|25
define|#
directive|define
name|SQLITE_FCNTL_RBU
value|26
comment|/* deprecated names */
define|#
directive|define
name|SQLITE_GET_LOCKPROXYFILE
value|SQLITE_FCNTL_GET_LOCKPROXYFILE
define|#
directive|define
name|SQLITE_SET_LOCKPROXYFILE
value|SQLITE_FCNTL_SET_LOCKPROXYFILE
define|#
directive|define
name|SQLITE_LAST_ERRNO
value|SQLITE_FCNTL_LAST_ERRNO
comment|/* ** CAPI3REF: Mutex Handle ** ** The mutex module within SQLite defines [sqlite3_mutex] to be an ** abstract type for a mutex object.  The SQLite core never looks ** at the internal representation of an [sqlite3_mutex].  It only ** deals with pointers to the [sqlite3_mutex] object. ** ** Mutexes are created using [sqlite3_mutex_alloc()]. */
typedef|typedef
name|struct
name|sqlite3_mutex
name|sqlite3_mutex
typedef|;
comment|/* ** CAPI3REF: OS Interface Object ** ** An instance of the sqlite3_vfs object defines the interface between ** the SQLite core and the underlying operating system.  The "vfs" ** in the name of the object stands for "virtual file system".  See ** the [VFS | VFS documentation] for further information. ** ** The value of the iVersion field is initially 1 but may be larger in ** future versions of SQLite.  Additional fields may be appended to this ** object when the iVersion value is increased.  Note that the structure ** of the sqlite3_vfs object changes in the transaction between ** SQLite version 3.5.9 and 3.6.0 and yet the iVersion field was not ** modified. ** ** The szOsFile field is the size of the subclassed [sqlite3_file] ** structure used by this VFS.  mxPathname is the maximum length of ** a pathname in this VFS. ** ** Registered sqlite3_vfs objects are kept on a linked list formed by ** the pNext pointer.  The [sqlite3_vfs_register()] ** and [sqlite3_vfs_unregister()] interfaces manage this list ** in a thread-safe way.  The [sqlite3_vfs_find()] interface ** searches the list.  Neither the application code nor the VFS ** implementation should use the pNext pointer. ** ** The pNext field is the only field in the sqlite3_vfs ** structure that SQLite will ever modify.  SQLite will only access ** or modify this field while holding a particular static mutex. ** The application should never modify anything within the sqlite3_vfs ** object once the object has been registered. ** ** The zName field holds the name of the VFS module.  The name must ** be unique across all VFS modules. ** ** [[sqlite3_vfs.xOpen]] ** ^SQLite guarantees that the zFilename parameter to xOpen ** is either a NULL pointer or string obtained ** from xFullPathname() with an optional suffix added. ** ^If a suffix is added to the zFilename parameter, it will ** consist of a single "-" character followed by no more than ** 11 alphanumeric and/or "-" characters. ** ^SQLite further guarantees that ** the string will be valid and unchanged until xClose() is ** called. Because of the previous sentence, ** the [sqlite3_file] can safely store a pointer to the ** filename if it needs to remember the filename for some reason. ** If the zFilename parameter to xOpen is a NULL pointer then xOpen ** must invent its own temporary name for the file.  ^Whenever the  ** xFilename parameter is NULL it will also be the case that the ** flags parameter will include [SQLITE_OPEN_DELETEONCLOSE]. ** ** The flags argument to xOpen() includes all bits set in ** the flags argument to [sqlite3_open_v2()].  Or if [sqlite3_open()] ** or [sqlite3_open16()] is used, then flags includes at least ** [SQLITE_OPEN_READWRITE] | [SQLITE_OPEN_CREATE].  ** If xOpen() opens a file read-only then it sets *pOutFlags to ** include [SQLITE_OPEN_READONLY].  Other bits in *pOutFlags may be set. ** ** ^(SQLite will also add one of the following flags to the xOpen() ** call, depending on the object being opened: ** **<ul> **<li>  [SQLITE_OPEN_MAIN_DB] **<li>  [SQLITE_OPEN_MAIN_JOURNAL] **<li>  [SQLITE_OPEN_TEMP_DB] **<li>  [SQLITE_OPEN_TEMP_JOURNAL] **<li>  [SQLITE_OPEN_TRANSIENT_DB] **<li>  [SQLITE_OPEN_SUBJOURNAL] **<li>  [SQLITE_OPEN_MASTER_JOURNAL] **<li>  [SQLITE_OPEN_WAL] **</ul>)^ ** ** The file I/O implementation can use the object type flags to ** change the way it deals with files.  For example, an application ** that does not care about crash recovery or rollback might make ** the open of a journal file a no-op.  Writes to this journal would ** also be no-ops, and any attempt to read the journal would return ** SQLITE_IOERR.  Or the implementation might recognize that a database ** file will be doing page-aligned sector reads and writes in a random ** order and set up its I/O subsystem accordingly. ** ** SQLite might also add one of the following flags to the xOpen method: ** **<ul> **<li> [SQLITE_OPEN_DELETEONCLOSE] **<li> [SQLITE_OPEN_EXCLUSIVE] **</ul> ** ** The [SQLITE_OPEN_DELETEONCLOSE] flag means the file should be ** deleted when it is closed.  ^The [SQLITE_OPEN_DELETEONCLOSE] ** will be set for TEMP databases and their journals, transient ** databases, and subjournals. ** ** ^The [SQLITE_OPEN_EXCLUSIVE] flag is always used in conjunction ** with the [SQLITE_OPEN_CREATE] flag, which are both directly ** analogous to the O_EXCL and O_CREAT flags of the POSIX open() ** API.  The SQLITE_OPEN_EXCLUSIVE flag, when paired with the  ** SQLITE_OPEN_CREATE, is used to indicate that file should always ** be created, and that it is an error if it already exists. ** It is<i>not</i> used to indicate the file should be opened  ** for exclusive access. ** ** ^At least szOsFile bytes of memory are allocated by SQLite ** to hold the  [sqlite3_file] structure passed as the third ** argument to xOpen.  The xOpen method does not have to ** allocate the structure; it should just fill it in.  Note that ** the xOpen method must set the sqlite3_file.pMethods to either ** a valid [sqlite3_io_methods] object or to NULL.  xOpen must do ** this even if the open fails.  SQLite expects that the sqlite3_file.pMethods ** element will be valid after xOpen returns regardless of the success ** or failure of the xOpen call. ** ** [[sqlite3_vfs.xAccess]] ** ^The flags argument to xAccess() may be [SQLITE_ACCESS_EXISTS] ** to test for the existence of a file, or [SQLITE_ACCESS_READWRITE] to ** test whether a file is readable and writable, or [SQLITE_ACCESS_READ] ** to test whether a file is at least readable.   The file can be a ** directory. ** ** ^SQLite will always allocate at least mxPathname+1 bytes for the ** output buffer xFullPathname.  The exact size of the output buffer ** is also passed as a parameter to both  methods. If the output buffer ** is not large enough, [SQLITE_CANTOPEN] should be returned. Since this is ** handled as a fatal error by SQLite, vfs implementations should endeavor ** to prevent this by setting mxPathname to a sufficiently large value. ** ** The xRandomness(), xSleep(), xCurrentTime(), and xCurrentTimeInt64() ** interfaces are not strictly a part of the filesystem, but they are ** included in the VFS structure for completeness. ** The xRandomness() function attempts to return nBytes bytes ** of good-quality randomness into zOut.  The return value is ** the actual number of bytes of randomness obtained. ** The xSleep() method causes the calling thread to sleep for at ** least the number of microseconds given.  ^The xCurrentTime() ** method returns a Julian Day Number for the current date and time as ** a floating point value. ** ^The xCurrentTimeInt64() method returns, as an integer, the Julian ** Day Number multiplied by 86400000 (the number of milliseconds in  ** a 24-hour day).   ** ^SQLite will use the xCurrentTimeInt64() method to get the current ** date and time if that method is available (if iVersion is 2 or  ** greater and the function pointer is not NULL) and will fall back ** to xCurrentTime() if xCurrentTimeInt64() is unavailable. ** ** ^The xSetSystemCall(), xGetSystemCall(), and xNestSystemCall() interfaces ** are not used by the SQLite core.  These optional interfaces are provided ** by some VFSes to facilitate testing of the VFS code. By overriding  ** system calls with functions under its control, a test program can ** simulate faults and error conditions that would otherwise be difficult ** or impossible to induce.  The set of system calls that can be overridden ** varies from one VFS to another, and from one version of the same VFS to the ** next.  Applications that use these interfaces must be prepared for any ** or all of these interfaces to be NULL or for their behavior to change ** from one release to the next.  Applications must not attempt to access ** any of these methods if the iVersion of the VFS is less than 3. */
typedef|typedef
name|struct
name|sqlite3_vfs
name|sqlite3_vfs
typedef|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|sqlite3_syscall_ptr
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
struct|struct
name|sqlite3_vfs
block|{
name|int
name|iVersion
decl_stmt|;
comment|/* Structure version number (currently 3) */
name|int
name|szOsFile
decl_stmt|;
comment|/* Size of subclassed sqlite3_file */
name|int
name|mxPathname
decl_stmt|;
comment|/* Maximum file pathname length */
name|sqlite3_vfs
modifier|*
name|pNext
decl_stmt|;
comment|/* Next registered VFS */
specifier|const
name|char
modifier|*
name|zName
decl_stmt|;
comment|/* Name of this virtual file system */
name|void
modifier|*
name|pAppData
decl_stmt|;
comment|/* Pointer to application-specific data */
name|int
function_decl|(
modifier|*
name|xOpen
function_decl|)
parameter_list|(
name|sqlite3_vfs
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|zName
parameter_list|,
name|sqlite3_file
modifier|*
parameter_list|,
name|int
name|flags
parameter_list|,
name|int
modifier|*
name|pOutFlags
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xDelete
function_decl|)
parameter_list|(
name|sqlite3_vfs
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|zName
parameter_list|,
name|int
name|syncDir
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xAccess
function_decl|)
parameter_list|(
name|sqlite3_vfs
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|zName
parameter_list|,
name|int
name|flags
parameter_list|,
name|int
modifier|*
name|pResOut
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xFullPathname
function_decl|)
parameter_list|(
name|sqlite3_vfs
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|zName
parameter_list|,
name|int
name|nOut
parameter_list|,
name|char
modifier|*
name|zOut
parameter_list|)
function_decl|;
name|void
modifier|*
function_decl|(
modifier|*
name|xDlOpen
function_decl|)
parameter_list|(
name|sqlite3_vfs
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|zFilename
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|xDlError
function_decl|)
parameter_list|(
name|sqlite3_vfs
modifier|*
parameter_list|,
name|int
name|nByte
parameter_list|,
name|char
modifier|*
name|zErrMsg
parameter_list|)
function_decl|;
name|void
argument_list|(
operator|*
call|(
modifier|*
name|xDlSym
call|)
argument_list|(
name|sqlite3_vfs
operator|*
argument_list|,
name|void
operator|*
argument_list|,
specifier|const
name|char
operator|*
name|zSymbol
argument_list|)
argument_list|)
argument_list|(
name|void
argument_list|)
expr_stmt|;
name|void
function_decl|(
modifier|*
name|xDlClose
function_decl|)
parameter_list|(
name|sqlite3_vfs
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xRandomness
function_decl|)
parameter_list|(
name|sqlite3_vfs
modifier|*
parameter_list|,
name|int
name|nByte
parameter_list|,
name|char
modifier|*
name|zOut
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xSleep
function_decl|)
parameter_list|(
name|sqlite3_vfs
modifier|*
parameter_list|,
name|int
name|microseconds
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xCurrentTime
function_decl|)
parameter_list|(
name|sqlite3_vfs
modifier|*
parameter_list|,
name|double
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xGetLastError
function_decl|)
parameter_list|(
name|sqlite3_vfs
modifier|*
parameter_list|,
name|int
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
comment|/*   ** The methods above are in version 1 of the sqlite_vfs object   ** definition.  Those that follow are added in version 2 or later   */
name|int
function_decl|(
modifier|*
name|xCurrentTimeInt64
function_decl|)
parameter_list|(
name|sqlite3_vfs
modifier|*
parameter_list|,
name|sqlite3_int64
modifier|*
parameter_list|)
function_decl|;
comment|/*   ** The methods above are in versions 1 and 2 of the sqlite_vfs object.   ** Those below are for version 3 and greater.   */
name|int
function_decl|(
modifier|*
name|xSetSystemCall
function_decl|)
parameter_list|(
name|sqlite3_vfs
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|zName
parameter_list|,
name|sqlite3_syscall_ptr
parameter_list|)
function_decl|;
name|sqlite3_syscall_ptr
function_decl|(
modifier|*
name|xGetSystemCall
function_decl|)
parameter_list|(
name|sqlite3_vfs
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|zName
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
function_decl|(
modifier|*
name|xNextSystemCall
function_decl|)
parameter_list|(
name|sqlite3_vfs
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|zName
parameter_list|)
function_decl|;
comment|/*   ** The methods above are in versions 1 through 3 of the sqlite_vfs object.   ** New fields may be appended in figure versions.  The iVersion   ** value will increment whenever this happens.    */
block|}
struct|;
comment|/* ** CAPI3REF: Flags for the xAccess VFS method ** ** These integer constants can be used as the third parameter to ** the xAccess method of an [sqlite3_vfs] object.  They determine ** what kind of permissions the xAccess method is looking for. ** With SQLITE_ACCESS_EXISTS, the xAccess method ** simply checks whether the file exists. ** With SQLITE_ACCESS_READWRITE, the xAccess method ** checks whether the named directory is both readable and writable ** (in other words, if files can be added, removed, and renamed within ** the directory). ** The SQLITE_ACCESS_READWRITE constant is currently used only by the ** [temp_store_directory pragma], though this could change in a future ** release of SQLite. ** With SQLITE_ACCESS_READ, the xAccess method ** checks whether the file is readable.  The SQLITE_ACCESS_READ constant is ** currently unused, though it might be used in a future release of ** SQLite. */
define|#
directive|define
name|SQLITE_ACCESS_EXISTS
value|0
define|#
directive|define
name|SQLITE_ACCESS_READWRITE
value|1
comment|/* Used by PRAGMA temp_store_directory */
define|#
directive|define
name|SQLITE_ACCESS_READ
value|2
comment|/* Unused */
comment|/* ** CAPI3REF: Flags for the xShmLock VFS method ** ** These integer constants define the various locking operations ** allowed by the xShmLock method of [sqlite3_io_methods].  The ** following are the only legal combinations of flags to the ** xShmLock method: ** **<ul> **<li>  SQLITE_SHM_LOCK | SQLITE_SHM_SHARED **<li>  SQLITE_SHM_LOCK | SQLITE_SHM_EXCLUSIVE **<li>  SQLITE_SHM_UNLOCK | SQLITE_SHM_SHARED **<li>  SQLITE_SHM_UNLOCK | SQLITE_SHM_EXCLUSIVE **</ul> ** ** When unlocking, the same SHARED or EXCLUSIVE flag must be supplied as ** was given on the corresponding lock.   ** ** The xShmLock method can transition between unlocked and SHARED or ** between unlocked and EXCLUSIVE.  It cannot transition between SHARED ** and EXCLUSIVE. */
define|#
directive|define
name|SQLITE_SHM_UNLOCK
value|1
define|#
directive|define
name|SQLITE_SHM_LOCK
value|2
define|#
directive|define
name|SQLITE_SHM_SHARED
value|4
define|#
directive|define
name|SQLITE_SHM_EXCLUSIVE
value|8
comment|/* ** CAPI3REF: Maximum xShmLock index ** ** The xShmLock method on [sqlite3_io_methods] may use values ** between 0 and this upper bound as its "offset" argument. ** The SQLite core will never attempt to acquire or release a ** lock outside of this range */
define|#
directive|define
name|SQLITE_SHM_NLOCK
value|8
comment|/* ** CAPI3REF: Initialize The SQLite Library ** ** ^The sqlite3_initialize() routine initializes the ** SQLite library.  ^The sqlite3_shutdown() routine ** deallocates any resources that were allocated by sqlite3_initialize(). ** These routines are designed to aid in process initialization and ** shutdown on embedded systems.  Workstation applications using ** SQLite normally do not need to invoke either of these routines. ** ** A call to sqlite3_initialize() is an "effective" call if it is ** the first time sqlite3_initialize() is invoked during the lifetime of ** the process, or if it is the first time sqlite3_initialize() is invoked ** following a call to sqlite3_shutdown().  ^(Only an effective call ** of sqlite3_initialize() does any initialization.  All other calls ** are harmless no-ops.)^ ** ** A call to sqlite3_shutdown() is an "effective" call if it is the first ** call to sqlite3_shutdown() since the last sqlite3_initialize().  ^(Only ** an effective call to sqlite3_shutdown() does any deinitialization. ** All other valid calls to sqlite3_shutdown() are harmless no-ops.)^ ** ** The sqlite3_initialize() interface is threadsafe, but sqlite3_shutdown() ** is not.  The sqlite3_shutdown() interface must only be called from a ** single thread.  All open [database connections] must be closed and all ** other SQLite resources must be deallocated prior to invoking ** sqlite3_shutdown(). ** ** Among other things, ^sqlite3_initialize() will invoke ** sqlite3_os_init().  Similarly, ^sqlite3_shutdown() ** will invoke sqlite3_os_end(). ** ** ^The sqlite3_initialize() routine returns [SQLITE_OK] on success. ** ^If for some reason, sqlite3_initialize() is unable to initialize ** the library (perhaps it is unable to allocate a needed resource such ** as a mutex) it returns an [error code] other than [SQLITE_OK]. ** ** ^The sqlite3_initialize() routine is called internally by many other ** SQLite interfaces so that an application usually does not need to ** invoke sqlite3_initialize() directly.  For example, [sqlite3_open()] ** calls sqlite3_initialize() so the SQLite library will be automatically ** initialized when [sqlite3_open()] is called if it has not be initialized ** already.  ^However, if SQLite is compiled with the [SQLITE_OMIT_AUTOINIT] ** compile-time option, then the automatic calls to sqlite3_initialize() ** are omitted and the application must call sqlite3_initialize() directly ** prior to using any other SQLite interface.  For maximum portability, ** it is recommended that applications always invoke sqlite3_initialize() ** directly prior to using any other SQLite interface.  Future releases ** of SQLite may require this.  In other words, the behavior exhibited ** when SQLite is compiled with [SQLITE_OMIT_AUTOINIT] might become the ** default behavior in some future release of SQLite. ** ** The sqlite3_os_init() routine does operating-system specific ** initialization of the SQLite library.  The sqlite3_os_end() ** routine undoes the effect of sqlite3_os_init().  Typical tasks ** performed by these routines include allocation or deallocation ** of static resources, initialization of global variables, ** setting up a default [sqlite3_vfs] module, or setting up ** a default configuration using [sqlite3_config()]. ** ** The application should never invoke either sqlite3_os_init() ** or sqlite3_os_end() directly.  The application should only invoke ** sqlite3_initialize() and sqlite3_shutdown().  The sqlite3_os_init() ** interface is called automatically by sqlite3_initialize() and ** sqlite3_os_end() is called by sqlite3_shutdown().  Appropriate ** implementations for sqlite3_os_init() and sqlite3_os_end() ** are built into SQLite when it is compiled for Unix, Windows, or OS/2. ** When [custom builds | built for other platforms] ** (using the [SQLITE_OS_OTHER=1] compile-time ** option) the application must supply a suitable implementation for ** sqlite3_os_init() and sqlite3_os_end().  An application-supplied ** implementation of sqlite3_os_init() or sqlite3_os_end() ** must return [SQLITE_OK] on success and some other [error code] upon ** failure. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_initialize
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_shutdown
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_os_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_os_end
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Configuring The SQLite Library ** ** The sqlite3_config() interface is used to make global configuration ** changes to SQLite in order to tune SQLite to the specific needs of ** the application.  The default configuration is recommended for most ** applications and so this routine is usually not necessary.  It is ** provided to support rare applications with unusual needs. ** ** The sqlite3_config() interface is not threadsafe.  The application ** must insure that no other SQLite interfaces are invoked by other ** threads while sqlite3_config() is running.  Furthermore, sqlite3_config() ** may only be invoked prior to library initialization using ** [sqlite3_initialize()] or after shutdown by [sqlite3_shutdown()]. ** ^If sqlite3_config() is called after [sqlite3_initialize()] and before ** [sqlite3_shutdown()] then it will return SQLITE_MISUSE. ** Note, however, that ^sqlite3_config() can be called as part of the ** implementation of an application-defined [sqlite3_os_init()]. ** ** The first argument to sqlite3_config() is an integer ** [configuration option] that determines ** what property of SQLite is to be configured.  Subsequent arguments ** vary depending on the [configuration option] ** in the first argument. ** ** ^When a configuration option is set, sqlite3_config() returns [SQLITE_OK]. ** ^If the option is unknown or SQLite is unable to set the option ** then this routine returns a non-zero [error code]. */
name|SQLITE_API
name|int
name|SQLITE_CDECL
name|sqlite3_config
parameter_list|(
name|int
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Configure database connections ** METHOD: sqlite3 ** ** The sqlite3_db_config() interface is used to make configuration ** changes to a [database connection].  The interface is similar to ** [sqlite3_config()] except that the changes apply to a single ** [database connection] (specified in the first argument). ** ** The second argument to sqlite3_db_config(D,V,...)  is the ** [SQLITE_DBCONFIG_LOOKASIDE | configuration verb] - an integer code  ** that indicates what aspect of the [database connection] is being configured. ** Subsequent arguments vary depending on the configuration verb. ** ** ^Calls to sqlite3_db_config() return SQLITE_OK if and only if ** the call is considered successful. */
name|SQLITE_API
name|int
name|SQLITE_CDECL
name|sqlite3_db_config
parameter_list|(
name|sqlite3
modifier|*
parameter_list|,
name|int
name|op
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Memory Allocation Routines ** ** An instance of this object defines the interface between SQLite ** and low-level memory allocation routines. ** ** This object is used in only one place in the SQLite interface. ** A pointer to an instance of this object is the argument to ** [sqlite3_config()] when the configuration option is ** [SQLITE_CONFIG_MALLOC] or [SQLITE_CONFIG_GETMALLOC].   ** By creating an instance of this object ** and passing it to [sqlite3_config]([SQLITE_CONFIG_MALLOC]) ** during configuration, an application can specify an alternative ** memory allocation subsystem for SQLite to use for all of its ** dynamic memory needs. ** ** Note that SQLite comes with several [built-in memory allocators] ** that are perfectly adequate for the overwhelming majority of applications ** and that this object is only useful to a tiny minority of applications ** with specialized memory allocation requirements.  This object is ** also used during testing of SQLite in order to specify an alternative ** memory allocator that simulates memory out-of-memory conditions in ** order to verify that SQLite recovers gracefully from such ** conditions. ** ** The xMalloc, xRealloc, and xFree methods must work like the ** malloc(), realloc() and free() functions from the standard C library. ** ^SQLite guarantees that the second argument to ** xRealloc is always a value returned by a prior call to xRoundup. ** ** xSize should return the allocated size of a memory allocation ** previously obtained from xMalloc or xRealloc.  The allocated size ** is always at least as big as the requested size but may be larger. ** ** The xRoundup method returns what would be the allocated size of ** a memory allocation given a particular requested size.  Most memory ** allocators round up memory allocations at least to the next multiple ** of 8.  Some allocators round up to a larger multiple or to a power of 2. ** Every memory allocation request coming in through [sqlite3_malloc()] ** or [sqlite3_realloc()] first calls xRoundup.  If xRoundup returns 0,  ** that causes the corresponding memory allocation to fail. ** ** The xInit method initializes the memory allocator.  For example, ** it might allocate any require mutexes or initialize internal data ** structures.  The xShutdown method is invoked (indirectly) by ** [sqlite3_shutdown()] and should deallocate any resources acquired ** by xInit.  The pAppData pointer is used as the only parameter to ** xInit and xShutdown. ** ** SQLite holds the [SQLITE_MUTEX_STATIC_MASTER] mutex when it invokes ** the xInit method, so the xInit method need not be threadsafe.  The ** xShutdown method is only called from [sqlite3_shutdown()] so it does ** not need to be threadsafe either.  For all other methods, SQLite ** holds the [SQLITE_MUTEX_STATIC_MEM] mutex as long as the ** [SQLITE_CONFIG_MEMSTATUS] configuration option is turned on (which ** it is by default) and so the methods are automatically serialized. ** However, if [SQLITE_CONFIG_MEMSTATUS] is disabled, then the other ** methods must be threadsafe or else make their own arrangements for ** serialization. ** ** SQLite will never invoke xInit() more than once without an intervening ** call to xShutdown(). */
typedef|typedef
name|struct
name|sqlite3_mem_methods
name|sqlite3_mem_methods
typedef|;
struct|struct
name|sqlite3_mem_methods
block|{
name|void
modifier|*
function_decl|(
modifier|*
name|xMalloc
function_decl|)
parameter_list|(
name|int
parameter_list|)
function_decl|;
comment|/* Memory allocation function */
name|void
function_decl|(
modifier|*
name|xFree
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/* Free a prior allocation */
name|void
modifier|*
function_decl|(
modifier|*
name|xRealloc
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
comment|/* Resize an allocation */
name|int
function_decl|(
modifier|*
name|xSize
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/* Return the size of an allocation */
name|int
function_decl|(
modifier|*
name|xRoundup
function_decl|)
parameter_list|(
name|int
parameter_list|)
function_decl|;
comment|/* Round up request size to allocation size */
name|int
function_decl|(
modifier|*
name|xInit
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/* Initialize the memory allocator */
name|void
function_decl|(
modifier|*
name|xShutdown
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/* Deinitialize the memory allocator */
name|void
modifier|*
name|pAppData
decl_stmt|;
comment|/* Argument to xInit() and xShutdown() */
block|}
struct|;
comment|/* ** CAPI3REF: Configuration Options ** KEYWORDS: {configuration option} ** ** These constants are the available integer configuration options that ** can be passed as the first argument to the [sqlite3_config()] interface. ** ** New configuration options may be added in future releases of SQLite. ** Existing configuration options might be discontinued.  Applications ** should check the return code from [sqlite3_config()] to make sure that ** the call worked.  The [sqlite3_config()] interface will return a ** non-zero [error code] if a discontinued or unsupported configuration option ** is invoked. ** **<dl> ** [[SQLITE_CONFIG_SINGLETHREAD]]<dt>SQLITE_CONFIG_SINGLETHREAD</dt> **<dd>There are no arguments to this option.  ^This option sets the ** [threading mode] to Single-thread.  In other words, it disables ** all mutexing and puts SQLite into a mode where it can only be used ** by a single thread.   ^If SQLite is compiled with ** the [SQLITE_THREADSAFE | SQLITE_THREADSAFE=0] compile-time option then ** it is not possible to change the [threading mode] from its default ** value of Single-thread and so [sqlite3_config()] will return  ** [SQLITE_ERROR] if called with the SQLITE_CONFIG_SINGLETHREAD ** configuration option.</dd> ** ** [[SQLITE_CONFIG_MULTITHREAD]]<dt>SQLITE_CONFIG_MULTITHREAD</dt> **<dd>There are no arguments to this option.  ^This option sets the ** [threading mode] to Multi-thread.  In other words, it disables ** mutexing on [database connection] and [prepared statement] objects. ** The application is responsible for serializing access to ** [database connections] and [prepared statements].  But other mutexes ** are enabled so that SQLite will be safe to use in a multi-threaded ** environment as long as no two threads attempt to use the same ** [database connection] at the same time.  ^If SQLite is compiled with ** the [SQLITE_THREADSAFE | SQLITE_THREADSAFE=0] compile-time option then ** it is not possible to set the Multi-thread [threading mode] and ** [sqlite3_config()] will return [SQLITE_ERROR] if called with the ** SQLITE_CONFIG_MULTITHREAD configuration option.</dd> ** ** [[SQLITE_CONFIG_SERIALIZED]]<dt>SQLITE_CONFIG_SERIALIZED</dt> **<dd>There are no arguments to this option.  ^This option sets the ** [threading mode] to Serialized. In other words, this option enables ** all mutexes including the recursive ** mutexes on [database connection] and [prepared statement] objects. ** In this mode (which is the default when SQLite is compiled with ** [SQLITE_THREADSAFE=1]) the SQLite library will itself serialize access ** to [database connections] and [prepared statements] so that the ** application is free to use the same [database connection] or the ** same [prepared statement] in different threads at the same time. ** ^If SQLite is compiled with ** the [SQLITE_THREADSAFE | SQLITE_THREADSAFE=0] compile-time option then ** it is not possible to set the Serialized [threading mode] and ** [sqlite3_config()] will return [SQLITE_ERROR] if called with the ** SQLITE_CONFIG_SERIALIZED configuration option.</dd> ** ** [[SQLITE_CONFIG_MALLOC]]<dt>SQLITE_CONFIG_MALLOC</dt> **<dd> ^(The SQLITE_CONFIG_MALLOC option takes a single argument which is  ** a pointer to an instance of the [sqlite3_mem_methods] structure. ** The argument specifies ** alternative low-level memory allocation routines to be used in place of ** the memory allocation routines built into SQLite.)^ ^SQLite makes ** its own private copy of the content of the [sqlite3_mem_methods] structure ** before the [sqlite3_config()] call returns.</dd> ** ** [[SQLITE_CONFIG_GETMALLOC]]<dt>SQLITE_CONFIG_GETMALLOC</dt> **<dd> ^(The SQLITE_CONFIG_GETMALLOC option takes a single argument which ** is a pointer to an instance of the [sqlite3_mem_methods] structure. ** The [sqlite3_mem_methods] ** structure is filled with the currently defined memory allocation routines.)^ ** This option can be used to overload the default memory allocation ** routines with a wrapper that simulations memory allocation failure or ** tracks memory usage, for example.</dd> ** ** [[SQLITE_CONFIG_MEMSTATUS]]<dt>SQLITE_CONFIG_MEMSTATUS</dt> **<dd> ^The SQLITE_CONFIG_MEMSTATUS option takes single argument of type int, ** interpreted as a boolean, which enables or disables the collection of ** memory allocation statistics. ^(When memory allocation statistics are ** disabled, the following SQLite interfaces become non-operational: **<ul> **<li> [sqlite3_memory_used()] **<li> [sqlite3_memory_highwater()] **<li> [sqlite3_soft_heap_limit64()] **<li> [sqlite3_status64()] **</ul>)^ ** ^Memory allocation statistics are enabled by default unless SQLite is ** compiled with [SQLITE_DEFAULT_MEMSTATUS]=0 in which case memory ** allocation statistics are disabled by default. **</dd> ** ** [[SQLITE_CONFIG_SCRATCH]]<dt>SQLITE_CONFIG_SCRATCH</dt> **<dd> ^The SQLITE_CONFIG_SCRATCH option specifies a static memory buffer ** that SQLite can use for scratch memory.  ^(There are three arguments ** to SQLITE_CONFIG_SCRATCH:  A pointer an 8-byte ** aligned memory buffer from which the scratch allocations will be ** drawn, the size of each scratch allocation (sz), ** and the maximum number of scratch allocations (N).)^ ** The first argument must be a pointer to an 8-byte aligned buffer ** of at least sz*N bytes of memory. ** ^SQLite will not use more than one scratch buffers per thread. ** ^SQLite will never request a scratch buffer that is more than 6 ** times the database page size. ** ^If SQLite needs needs additional ** scratch memory beyond what is provided by this configuration option, then  ** [sqlite3_malloc()] will be used to obtain the memory needed.<p> ** ^When the application provides any amount of scratch memory using ** SQLITE_CONFIG_SCRATCH, SQLite avoids unnecessary large ** [sqlite3_malloc|heap allocations]. ** This can help [Robson proof|prevent memory allocation failures] due to heap ** fragmentation in low-memory embedded systems. **</dd> ** ** [[SQLITE_CONFIG_PAGECACHE]]<dt>SQLITE_CONFIG_PAGECACHE</dt> **<dd> ^The SQLITE_CONFIG_PAGECACHE option specifies a static memory buffer ** that SQLite can use for the database page cache with the default page ** cache implementation.   ** This configuration should not be used if an application-define page ** cache implementation is loaded using the [SQLITE_CONFIG_PCACHE2] ** configuration option. ** ^There are three arguments to SQLITE_CONFIG_PAGECACHE: A pointer to ** 8-byte aligned ** memory, the size of each page buffer (sz), and the number of pages (N). ** The sz argument should be the size of the largest database page ** (a power of two between 512 and 65536) plus some extra bytes for each ** page header.  ^The number of extra bytes needed by the page header ** can be determined using the [SQLITE_CONFIG_PCACHE_HDRSZ] option  ** to [sqlite3_config()]. ** ^It is harmless, apart from the wasted memory, ** for the sz parameter to be larger than necessary.  The first ** argument should pointer to an 8-byte aligned block of memory that ** is at least sz*N bytes of memory, otherwise subsequent behavior is ** undefined. ** ^SQLite will use the memory provided by the first argument to satisfy its ** memory needs for the first N pages that it adds to cache.  ^If additional ** page cache memory is needed beyond what is provided by this option, then ** SQLite goes to [sqlite3_malloc()] for the additional storage space.</dd> ** ** [[SQLITE_CONFIG_HEAP]]<dt>SQLITE_CONFIG_HEAP</dt> **<dd> ^The SQLITE_CONFIG_HEAP option specifies a static memory buffer  ** that SQLite will use for all of its dynamic memory allocation needs ** beyond those provided for by [SQLITE_CONFIG_SCRATCH] and ** [SQLITE_CONFIG_PAGECACHE]. ** ^The SQLITE_CONFIG_HEAP option is only available if SQLite is compiled ** with either [SQLITE_ENABLE_MEMSYS3] or [SQLITE_ENABLE_MEMSYS5] and returns ** [SQLITE_ERROR] if invoked otherwise. ** ^There are three arguments to SQLITE_CONFIG_HEAP: ** An 8-byte aligned pointer to the memory, ** the number of bytes in the memory buffer, and the minimum allocation size. ** ^If the first pointer (the memory pointer) is NULL, then SQLite reverts ** to using its default memory allocator (the system malloc() implementation), ** undoing any prior invocation of [SQLITE_CONFIG_MALLOC].  ^If the ** memory pointer is not NULL then the alternative memory ** allocator is engaged to handle all of SQLites memory allocation needs. ** The first pointer (the memory pointer) must be aligned to an 8-byte ** boundary or subsequent behavior of SQLite will be undefined. ** The minimum allocation size is capped at 2**12. Reasonable values ** for the minimum allocation size are 2**5 through 2**8.</dd> ** ** [[SQLITE_CONFIG_MUTEX]]<dt>SQLITE_CONFIG_MUTEX</dt> **<dd> ^(The SQLITE_CONFIG_MUTEX option takes a single argument which is a ** pointer to an instance of the [sqlite3_mutex_methods] structure. ** The argument specifies alternative low-level mutex routines to be used ** in place the mutex routines built into SQLite.)^  ^SQLite makes a copy of ** the content of the [sqlite3_mutex_methods] structure before the call to ** [sqlite3_config()] returns. ^If SQLite is compiled with ** the [SQLITE_THREADSAFE | SQLITE_THREADSAFE=0] compile-time option then ** the entire mutexing subsystem is omitted from the build and hence calls to ** [sqlite3_config()] with the SQLITE_CONFIG_MUTEX configuration option will ** return [SQLITE_ERROR].</dd> ** ** [[SQLITE_CONFIG_GETMUTEX]]<dt>SQLITE_CONFIG_GETMUTEX</dt> **<dd> ^(The SQLITE_CONFIG_GETMUTEX option takes a single argument which ** is a pointer to an instance of the [sqlite3_mutex_methods] structure.  The ** [sqlite3_mutex_methods] ** structure is filled with the currently defined mutex routines.)^ ** This option can be used to overload the default mutex allocation ** routines with a wrapper used to track mutex usage for performance ** profiling or testing, for example.   ^If SQLite is compiled with ** the [SQLITE_THREADSAFE | SQLITE_THREADSAFE=0] compile-time option then ** the entire mutexing subsystem is omitted from the build and hence calls to ** [sqlite3_config()] with the SQLITE_CONFIG_GETMUTEX configuration option will ** return [SQLITE_ERROR].</dd> ** ** [[SQLITE_CONFIG_LOOKASIDE]]<dt>SQLITE_CONFIG_LOOKASIDE</dt> **<dd> ^(The SQLITE_CONFIG_LOOKASIDE option takes two arguments that determine ** the default size of lookaside memory on each [database connection]. ** The first argument is the ** size of each lookaside buffer slot and the second is the number of ** slots allocated to each database connection.)^  ^(SQLITE_CONFIG_LOOKASIDE ** sets the<i>default</i> lookaside size. The [SQLITE_DBCONFIG_LOOKASIDE] ** option to [sqlite3_db_config()] can be used to change the lookaside ** configuration on individual connections.)^</dd> ** ** [[SQLITE_CONFIG_PCACHE2]]<dt>SQLITE_CONFIG_PCACHE2</dt> **<dd> ^(The SQLITE_CONFIG_PCACHE2 option takes a single argument which is  ** a pointer to an [sqlite3_pcache_methods2] object.  This object specifies ** the interface to a custom page cache implementation.)^ ** ^SQLite makes a copy of the [sqlite3_pcache_methods2] object.</dd> ** ** [[SQLITE_CONFIG_GETPCACHE2]]<dt>SQLITE_CONFIG_GETPCACHE2</dt> **<dd> ^(The SQLITE_CONFIG_GETPCACHE2 option takes a single argument which ** is a pointer to an [sqlite3_pcache_methods2] object.  SQLite copies of ** the current page cache implementation into that object.)^</dd> ** ** [[SQLITE_CONFIG_LOG]]<dt>SQLITE_CONFIG_LOG</dt> **<dd> The SQLITE_CONFIG_LOG option is used to configure the SQLite ** global [error log]. ** (^The SQLITE_CONFIG_LOG option takes two arguments: a pointer to a ** function with a call signature of void(*)(void*,int,const char*),  ** and a pointer to void. ^If the function pointer is not NULL, it is ** invoked by [sqlite3_log()] to process each logging event.  ^If the ** function pointer is NULL, the [sqlite3_log()] interface becomes a no-op. ** ^The void pointer that is the second argument to SQLITE_CONFIG_LOG is ** passed through as the first parameter to the application-defined logger ** function whenever that function is invoked.  ^The second parameter to ** the logger function is a copy of the first parameter to the corresponding ** [sqlite3_log()] call and is intended to be a [result code] or an ** [extended result code].  ^The third parameter passed to the logger is ** log message after formatting via [sqlite3_snprintf()]. ** The SQLite logging interface is not reentrant; the logger function ** supplied by the application must not invoke any SQLite interface. ** In a multi-threaded application, the application-defined logger ** function must be threadsafe.</dd> ** ** [[SQLITE_CONFIG_URI]]<dt>SQLITE_CONFIG_URI **<dd>^(The SQLITE_CONFIG_URI option takes a single argument of type int. ** If non-zero, then URI handling is globally enabled. If the parameter is zero, ** then URI handling is globally disabled.)^ ^If URI handling is globally ** enabled, all filenames passed to [sqlite3_open()], [sqlite3_open_v2()], ** [sqlite3_open16()] or ** specified as part of [ATTACH] commands are interpreted as URIs, regardless ** of whether or not the [SQLITE_OPEN_URI] flag is set when the database ** connection is opened. ^If it is globally disabled, filenames are ** only interpreted as URIs if the SQLITE_OPEN_URI flag is set when the ** database connection is opened. ^(By default, URI handling is globally ** disabled. The default value may be changed by compiling with the ** [SQLITE_USE_URI] symbol defined.)^ ** ** [[SQLITE_CONFIG_COVERING_INDEX_SCAN]]<dt>SQLITE_CONFIG_COVERING_INDEX_SCAN **<dd>^The SQLITE_CONFIG_COVERING_INDEX_SCAN option takes a single integer ** argument which is interpreted as a boolean in order to enable or disable ** the use of covering indices for full table scans in the query optimizer. ** ^The default setting is determined ** by the [SQLITE_ALLOW_COVERING_INDEX_SCAN] compile-time option, or is "on" ** if that compile-time option is omitted. ** The ability to disable the use of covering indices for full table scans ** is because some incorrectly coded legacy applications might malfunction ** when the optimization is enabled.  Providing the ability to ** disable the optimization allows the older, buggy application code to work ** without change even with newer versions of SQLite. ** ** [[SQLITE_CONFIG_PCACHE]] [[SQLITE_CONFIG_GETPCACHE]] **<dt>SQLITE_CONFIG_PCACHE and SQLITE_CONFIG_GETPCACHE **<dd> These options are obsolete and should not be used by new code. ** They are retained for backwards compatibility but are now no-ops. **</dd> ** ** [[SQLITE_CONFIG_SQLLOG]] **<dt>SQLITE_CONFIG_SQLLOG **<dd>This option is only available if sqlite is compiled with the ** [SQLITE_ENABLE_SQLLOG] pre-processor macro defined. The first argument should ** be a pointer to a function of type void(*)(void*,sqlite3*,const char*, int). ** The second should be of type (void*). The callback is invoked by the library ** in three separate circumstances, identified by the value passed as the ** fourth parameter. If the fourth parameter is 0, then the database connection ** passed as the second argument has just been opened. The third argument ** points to a buffer containing the name of the main database file. If the ** fourth parameter is 1, then the SQL statement that the third parameter ** points to has just been executed. Or, if the fourth parameter is 2, then ** the connection being passed as the second parameter is being closed. The ** third parameter is passed NULL In this case.  An example of using this ** configuration option can be seen in the "test_sqllog.c" source file in ** the canonical SQLite source tree.</dd> ** ** [[SQLITE_CONFIG_MMAP_SIZE]] **<dt>SQLITE_CONFIG_MMAP_SIZE **<dd>^SQLITE_CONFIG_MMAP_SIZE takes two 64-bit integer (sqlite3_int64) values ** that are the default mmap size limit (the default setting for ** [PRAGMA mmap_size]) and the maximum allowed mmap size limit. ** ^The default setting can be overridden by each database connection using ** either the [PRAGMA mmap_size] command, or by using the ** [SQLITE_FCNTL_MMAP_SIZE] file control.  ^(The maximum allowed mmap size ** will be silently truncated if necessary so that it does not exceed the ** compile-time maximum mmap size set by the ** [SQLITE_MAX_MMAP_SIZE] compile-time option.)^ ** ^If either argument to this option is negative, then that argument is ** changed to its compile-time default. ** ** [[SQLITE_CONFIG_WIN32_HEAPSIZE]] **<dt>SQLITE_CONFIG_WIN32_HEAPSIZE **<dd>^The SQLITE_CONFIG_WIN32_HEAPSIZE option is only available if SQLite is ** compiled for Windows with the [SQLITE_WIN32_MALLOC] pre-processor macro ** defined. ^SQLITE_CONFIG_WIN32_HEAPSIZE takes a 32-bit unsigned integer value ** that specifies the maximum size of the created heap. ** ** [[SQLITE_CONFIG_PCACHE_HDRSZ]] **<dt>SQLITE_CONFIG_PCACHE_HDRSZ **<dd>^The SQLITE_CONFIG_PCACHE_HDRSZ option takes a single parameter which ** is a pointer to an integer and writes into that integer the number of extra ** bytes per page required for each page in [SQLITE_CONFIG_PAGECACHE]. ** The amount of extra space required can change depending on the compiler, ** target platform, and SQLite version. ** ** [[SQLITE_CONFIG_PMASZ]] **<dt>SQLITE_CONFIG_PMASZ **<dd>^The SQLITE_CONFIG_PMASZ option takes a single parameter which ** is an unsigned integer and sets the "Minimum PMA Size" for the multithreaded ** sorter to that integer.  The default minimum PMA Size is set by the ** [SQLITE_SORTER_PMASZ] compile-time option.  New threads are launched ** to help with sort operations when multithreaded sorting ** is enabled (using the [PRAGMA threads] command) and the amount of content ** to be sorted exceeds the page size times the minimum of the ** [PRAGMA cache_size] setting and this value. **</dl> */
define|#
directive|define
name|SQLITE_CONFIG_SINGLETHREAD
value|1
comment|/* nil */
define|#
directive|define
name|SQLITE_CONFIG_MULTITHREAD
value|2
comment|/* nil */
define|#
directive|define
name|SQLITE_CONFIG_SERIALIZED
value|3
comment|/* nil */
define|#
directive|define
name|SQLITE_CONFIG_MALLOC
value|4
comment|/* sqlite3_mem_methods* */
define|#
directive|define
name|SQLITE_CONFIG_GETMALLOC
value|5
comment|/* sqlite3_mem_methods* */
define|#
directive|define
name|SQLITE_CONFIG_SCRATCH
value|6
comment|/* void*, int sz, int N */
define|#
directive|define
name|SQLITE_CONFIG_PAGECACHE
value|7
comment|/* void*, int sz, int N */
define|#
directive|define
name|SQLITE_CONFIG_HEAP
value|8
comment|/* void*, int nByte, int min */
define|#
directive|define
name|SQLITE_CONFIG_MEMSTATUS
value|9
comment|/* boolean */
define|#
directive|define
name|SQLITE_CONFIG_MUTEX
value|10
comment|/* sqlite3_mutex_methods* */
define|#
directive|define
name|SQLITE_CONFIG_GETMUTEX
value|11
comment|/* sqlite3_mutex_methods* */
comment|/* previously SQLITE_CONFIG_CHUNKALLOC 12 which is now unused. */
define|#
directive|define
name|SQLITE_CONFIG_LOOKASIDE
value|13
comment|/* int int */
define|#
directive|define
name|SQLITE_CONFIG_PCACHE
value|14
comment|/* no-op */
define|#
directive|define
name|SQLITE_CONFIG_GETPCACHE
value|15
comment|/* no-op */
define|#
directive|define
name|SQLITE_CONFIG_LOG
value|16
comment|/* xFunc, void* */
define|#
directive|define
name|SQLITE_CONFIG_URI
value|17
comment|/* int */
define|#
directive|define
name|SQLITE_CONFIG_PCACHE2
value|18
comment|/* sqlite3_pcache_methods2* */
define|#
directive|define
name|SQLITE_CONFIG_GETPCACHE2
value|19
comment|/* sqlite3_pcache_methods2* */
define|#
directive|define
name|SQLITE_CONFIG_COVERING_INDEX_SCAN
value|20
comment|/* int */
define|#
directive|define
name|SQLITE_CONFIG_SQLLOG
value|21
comment|/* xSqllog, void* */
define|#
directive|define
name|SQLITE_CONFIG_MMAP_SIZE
value|22
comment|/* sqlite3_int64, sqlite3_int64 */
define|#
directive|define
name|SQLITE_CONFIG_WIN32_HEAPSIZE
value|23
comment|/* int nByte */
define|#
directive|define
name|SQLITE_CONFIG_PCACHE_HDRSZ
value|24
comment|/* int *psz */
define|#
directive|define
name|SQLITE_CONFIG_PMASZ
value|25
comment|/* unsigned int szPma */
comment|/* ** CAPI3REF: Database Connection Configuration Options ** ** These constants are the available integer configuration options that ** can be passed as the second argument to the [sqlite3_db_config()] interface. ** ** New configuration options may be added in future releases of SQLite. ** Existing configuration options might be discontinued.  Applications ** should check the return code from [sqlite3_db_config()] to make sure that ** the call worked.  ^The [sqlite3_db_config()] interface will return a ** non-zero [error code] if a discontinued or unsupported configuration option ** is invoked. ** **<dl> **<dt>SQLITE_DBCONFIG_LOOKASIDE</dt> **<dd> ^This option takes three additional arguments that determine the  ** [lookaside memory allocator] configuration for the [database connection]. ** ^The first argument (the third parameter to [sqlite3_db_config()] is a ** pointer to a memory buffer to use for lookaside memory. ** ^The first argument after the SQLITE_DBCONFIG_LOOKASIDE verb ** may be NULL in which case SQLite will allocate the ** lookaside buffer itself using [sqlite3_malloc()]. ^The second argument is the ** size of each lookaside buffer slot.  ^The third argument is the number of ** slots.  The size of the buffer in the first argument must be greater than ** or equal to the product of the second and third arguments.  The buffer ** must be aligned to an 8-byte boundary.  ^If the second argument to ** SQLITE_DBCONFIG_LOOKASIDE is not a multiple of 8, it is internally ** rounded down to the next smaller multiple of 8.  ^(The lookaside memory ** configuration for a database connection can only be changed when that ** connection is not currently using lookaside memory, or in other words ** when the "current value" returned by ** [sqlite3_db_status](D,[SQLITE_CONFIG_LOOKASIDE],...) is zero. ** Any attempt to change the lookaside memory configuration when lookaside ** memory is in use leaves the configuration unchanged and returns  ** [SQLITE_BUSY].)^</dd> ** **<dt>SQLITE_DBCONFIG_ENABLE_FKEY</dt> **<dd> ^This option is used to enable or disable the enforcement of ** [foreign key constraints].  There should be two additional arguments. ** The first argument is an integer which is 0 to disable FK enforcement, ** positive to enable FK enforcement or negative to leave FK enforcement ** unchanged.  The second parameter is a pointer to an integer into which ** is written 0 or 1 to indicate whether FK enforcement is off or on ** following this call.  The second parameter may be a NULL pointer, in ** which case the FK enforcement setting is not reported back.</dd> ** **<dt>SQLITE_DBCONFIG_ENABLE_TRIGGER</dt> **<dd> ^This option is used to enable or disable [CREATE TRIGGER | triggers]. ** There should be two additional arguments. ** The first argument is an integer which is 0 to disable triggers, ** positive to enable triggers or negative to leave the setting unchanged. ** The second parameter is a pointer to an integer into which ** is written 0 or 1 to indicate whether triggers are disabled or enabled ** following this call.  The second parameter may be a NULL pointer, in ** which case the trigger setting is not reported back.</dd> ** **</dl> */
define|#
directive|define
name|SQLITE_DBCONFIG_LOOKASIDE
value|1001
comment|/* void* int int */
define|#
directive|define
name|SQLITE_DBCONFIG_ENABLE_FKEY
value|1002
comment|/* int int* */
define|#
directive|define
name|SQLITE_DBCONFIG_ENABLE_TRIGGER
value|1003
comment|/* int int* */
comment|/* ** CAPI3REF: Enable Or Disable Extended Result Codes ** METHOD: sqlite3 ** ** ^The sqlite3_extended_result_codes() routine enables or disables the ** [extended result codes] feature of SQLite. ^The extended result ** codes are disabled by default for historical compatibility. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_extended_result_codes
parameter_list|(
name|sqlite3
modifier|*
parameter_list|,
name|int
name|onoff
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Last Insert Rowid ** METHOD: sqlite3 ** ** ^Each entry in most SQLite tables (except for [WITHOUT ROWID] tables) ** has a unique 64-bit signed ** integer key called the [ROWID | "rowid"]. ^The rowid is always available ** as an undeclared column named ROWID, OID, or _ROWID_ as long as those ** names are not also used by explicitly declared columns. ^If ** the table has a column of type [INTEGER PRIMARY KEY] then that column ** is another alias for the rowid. ** ** ^The sqlite3_last_insert_rowid(D) interface returns the [rowid] of the  ** most recent successful [INSERT] into a rowid table or [virtual table] ** on database connection D. ** ^Inserts into [WITHOUT ROWID] tables are not recorded. ** ^If no successful [INSERT]s into rowid tables ** have ever occurred on the database connection D,  ** then sqlite3_last_insert_rowid(D) returns zero. ** ** ^(If an [INSERT] occurs within a trigger or within a [virtual table] ** method, then this routine will return the [rowid] of the inserted ** row as long as the trigger or virtual table method is running. ** But once the trigger or virtual table method ends, the value returned  ** by this routine reverts to what it was before the trigger or virtual ** table method began.)^ ** ** ^An [INSERT] that fails due to a constraint violation is not a ** successful [INSERT] and does not change the value returned by this ** routine.  ^Thus INSERT OR FAIL, INSERT OR IGNORE, INSERT OR ROLLBACK, ** and INSERT OR ABORT make no changes to the return value of this ** routine when their insertion fails.  ^(When INSERT OR REPLACE ** encounters a constraint violation, it does not fail.  The ** INSERT continues to completion after deleting rows that caused ** the constraint problem so INSERT OR REPLACE will always change ** the return value of this interface.)^ ** ** ^For the purposes of this routine, an [INSERT] is considered to ** be successful even if it is subsequently rolled back. ** ** This function is accessible to SQL statements via the ** [last_insert_rowid() SQL function]. ** ** If a separate thread performs a new [INSERT] on the same ** database connection while the [sqlite3_last_insert_rowid()] ** function is running and thus changes the last insert [rowid], ** then the value returned by [sqlite3_last_insert_rowid()] is ** unpredictable and might not equal either the old or the new ** last insert [rowid]. */
name|SQLITE_API
name|sqlite3_int64
name|SQLITE_STDCALL
name|sqlite3_last_insert_rowid
parameter_list|(
name|sqlite3
modifier|*
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Count The Number Of Rows Modified ** METHOD: sqlite3 ** ** ^This function returns the number of rows modified, inserted or ** deleted by the most recently completed INSERT, UPDATE or DELETE ** statement on the database connection specified by the only parameter. ** ^Executing any other type of SQL statement does not modify the value ** returned by this function. ** ** ^Only changes made directly by the INSERT, UPDATE or DELETE statement are ** considered - auxiliary changes caused by [CREATE TRIGGER | triggers],  ** [foreign key actions] or [REPLACE] constraint resolution are not counted. **  ** Changes to a view that are intercepted by  ** [INSTEAD OF trigger | INSTEAD OF triggers] are not counted. ^The value  ** returned by sqlite3_changes() immediately after an INSERT, UPDATE or  ** DELETE statement run on a view is always zero. Only changes made to real  ** tables are counted. ** ** Things are more complicated if the sqlite3_changes() function is ** executed while a trigger program is running. This may happen if the ** program uses the [changes() SQL function], or if some other callback ** function invokes sqlite3_changes() directly. Essentially: **  **<ul> **<li> ^(Before entering a trigger program the value returned by **        sqlite3_changes() function is saved. After the trigger program  **        has finished, the original value is restored.)^ **  **<li> ^(Within a trigger program each INSERT, UPDATE and DELETE  **        statement sets the value returned by sqlite3_changes()  **        upon completion as normal. Of course, this value will not include  **        any changes performed by sub-triggers, as the sqlite3_changes()  **        value will be saved and restored after each sub-trigger has run.)^ **</ul> **  ** ^This means that if the changes() SQL function (or similar) is used ** by the first INSERT, UPDATE or DELETE statement within a trigger, it  ** returns the value as set when the calling statement began executing. ** ^If it is used by the second or subsequent such statement within a trigger  ** program, the value returned reflects the number of rows modified by the  ** previous INSERT, UPDATE or DELETE statement within the same trigger. ** ** See also the [sqlite3_total_changes()] interface, the ** [count_changes pragma], and the [changes() SQL function]. ** ** If a separate thread makes changes on the same database connection ** while [sqlite3_changes()] is running then the value returned ** is unpredictable and not meaningful. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_changes
parameter_list|(
name|sqlite3
modifier|*
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Total Number Of Rows Modified ** METHOD: sqlite3 ** ** ^This function returns the total number of rows inserted, modified or ** deleted by all [INSERT], [UPDATE] or [DELETE] statements completed ** since the database connection was opened, including those executed as ** part of trigger programs. ^Executing any other type of SQL statement ** does not affect the value returned by sqlite3_total_changes(). **  ** ^Changes made as part of [foreign key actions] are included in the ** count, but those made as part of REPLACE constraint resolution are ** not. ^Changes to a view that are intercepted by INSTEAD OF triggers  ** are not counted. **  ** See also the [sqlite3_changes()] interface, the ** [count_changes pragma], and the [total_changes() SQL function]. ** ** If a separate thread makes changes on the same database connection ** while [sqlite3_total_changes()] is running then the value ** returned is unpredictable and not meaningful. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_total_changes
parameter_list|(
name|sqlite3
modifier|*
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Interrupt A Long-Running Query ** METHOD: sqlite3 ** ** ^This function causes any pending database operation to abort and ** return at its earliest opportunity. This routine is typically ** called in response to a user action such as pressing "Cancel" ** or Ctrl-C where the user wants a long query operation to halt ** immediately. ** ** ^It is safe to call this routine from a thread different from the ** thread that is currently running the database operation.  But it ** is not safe to call this routine with a [database connection] that ** is closed or might close before sqlite3_interrupt() returns. ** ** ^If an SQL operation is very nearly finished at the time when ** sqlite3_interrupt() is called, then it might not have an opportunity ** to be interrupted and might continue to completion. ** ** ^An SQL operation that is interrupted will return [SQLITE_INTERRUPT]. ** ^If the interrupted SQL operation is an INSERT, UPDATE, or DELETE ** that is inside an explicit transaction, then the entire transaction ** will be rolled back automatically. ** ** ^The sqlite3_interrupt(D) call is in effect until all currently running ** SQL statements on [database connection] D complete.  ^Any new SQL statements ** that are started after the sqlite3_interrupt() call and before the  ** running statements reaches zero are interrupted as if they had been ** running prior to the sqlite3_interrupt() call.  ^New SQL statements ** that are started after the running statement count reaches zero are ** not effected by the sqlite3_interrupt(). ** ^A call to sqlite3_interrupt(D) that occurs when there are no running ** SQL statements is a no-op and has no effect on SQL statements ** that are started after the sqlite3_interrupt() call returns. ** ** If the database connection closes while [sqlite3_interrupt()] ** is running then bad things will likely happen. */
name|SQLITE_API
name|void
name|SQLITE_STDCALL
name|sqlite3_interrupt
parameter_list|(
name|sqlite3
modifier|*
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Determine If An SQL Statement Is Complete ** ** These routines are useful during command-line input to determine if the ** currently entered text seems to form a complete SQL statement or ** if additional input is needed before sending the text into ** SQLite for parsing.  ^These routines return 1 if the input string ** appears to be a complete SQL statement.  ^A statement is judged to be ** complete if it ends with a semicolon token and is not a prefix of a ** well-formed CREATE TRIGGER statement.  ^Semicolons that are embedded within ** string literals or quoted identifier names or comments are not ** independent tokens (they are part of the token in which they are ** embedded) and thus do not count as a statement terminator.  ^Whitespace ** and comments that follow the final semicolon are ignored. ** ** ^These routines return 0 if the statement is incomplete.  ^If a ** memory allocation fails, then SQLITE_NOMEM is returned. ** ** ^These routines do not parse the SQL statements thus ** will not detect syntactically incorrect SQL. ** ** ^(If SQLite has not been initialized using [sqlite3_initialize()] prior  ** to invoking sqlite3_complete16() then sqlite3_initialize() is invoked ** automatically by sqlite3_complete16().  If that initialization fails, ** then the return value from sqlite3_complete16() will be non-zero ** regardless of whether or not the input SQL is complete.)^ ** ** The input to [sqlite3_complete()] must be a zero-terminated ** UTF-8 string. ** ** The input to [sqlite3_complete16()] must be a zero-terminated ** UTF-16 string in native byte order. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_complete
parameter_list|(
specifier|const
name|char
modifier|*
name|sql
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_complete16
parameter_list|(
specifier|const
name|void
modifier|*
name|sql
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Register A Callback To Handle SQLITE_BUSY Errors ** KEYWORDS: {busy-handler callback} {busy handler} ** METHOD: sqlite3 ** ** ^The sqlite3_busy_handler(D,X,P) routine sets a callback function X ** that might be invoked with argument P whenever ** an attempt is made to access a database table associated with ** [database connection] D when another thread ** or process has the table locked. ** The sqlite3_busy_handler() interface is used to implement ** [sqlite3_busy_timeout()] and [PRAGMA busy_timeout]. ** ** ^If the busy callback is NULL, then [SQLITE_BUSY] ** is returned immediately upon encountering the lock.  ^If the busy callback ** is not NULL, then the callback might be invoked with two arguments. ** ** ^The first argument to the busy handler is a copy of the void* pointer which ** is the third argument to sqlite3_busy_handler().  ^The second argument to ** the busy handler callback is the number of times that the busy handler has ** been invoked previously for the same locking event.  ^If the ** busy callback returns 0, then no additional attempts are made to ** access the database and [SQLITE_BUSY] is returned ** to the application. ** ^If the callback returns non-zero, then another attempt ** is made to access the database and the cycle repeats. ** ** The presence of a busy handler does not guarantee that it will be invoked ** when there is lock contention. ^If SQLite determines that invoking the busy ** handler could result in a deadlock, it will go ahead and return [SQLITE_BUSY] ** to the application instead of invoking the  ** busy handler. ** Consider a scenario where one process is holding a read lock that ** it is trying to promote to a reserved lock and ** a second process is holding a reserved lock that it is trying ** to promote to an exclusive lock.  The first process cannot proceed ** because it is blocked by the second and the second process cannot ** proceed because it is blocked by the first.  If both processes ** invoke the busy handlers, neither will make any progress.  Therefore, ** SQLite returns [SQLITE_BUSY] for the first process, hoping that this ** will induce the first process to release its read lock and allow ** the second process to proceed. ** ** ^The default busy callback is NULL. ** ** ^(There can only be a single busy handler defined for each ** [database connection].  Setting a new busy handler clears any ** previously set handler.)^  ^Note that calling [sqlite3_busy_timeout()] ** or evaluating [PRAGMA busy_timeout=N] will change the ** busy handler and thus clear any previously set busy handler. ** ** The busy callback should not take any actions which modify the ** database connection that invoked the busy handler.  In other words, ** the busy handler is not reentrant.  Any such actions ** result in undefined behavior. **  ** A busy handler must not close the database connection ** or [prepared statement] that invoked the busy handler. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_busy_handler
parameter_list|(
name|sqlite3
modifier|*
parameter_list|,
name|int
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|int
parameter_list|)
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Set A Busy Timeout ** METHOD: sqlite3 ** ** ^This routine sets a [sqlite3_busy_handler | busy handler] that sleeps ** for a specified amount of time when a table is locked.  ^The handler ** will sleep multiple times until at least "ms" milliseconds of sleeping ** have accumulated.  ^After at least "ms" milliseconds of sleeping, ** the handler returns 0 which causes [sqlite3_step()] to return ** [SQLITE_BUSY]. ** ** ^Calling this routine with an argument less than or equal to zero ** turns off all busy handlers. ** ** ^(There can only be a single busy handler for a particular ** [database connection] at any given moment.  If another busy handler ** was defined  (using [sqlite3_busy_handler()]) prior to calling ** this routine, that other busy handler is cleared.)^ ** ** See also:  [PRAGMA busy_timeout] */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_busy_timeout
parameter_list|(
name|sqlite3
modifier|*
parameter_list|,
name|int
name|ms
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Convenience Routines For Running Queries ** METHOD: sqlite3 ** ** This is a legacy interface that is preserved for backwards compatibility. ** Use of this interface is not recommended. ** ** Definition: A<b>result table</b> is memory data structure created by the ** [sqlite3_get_table()] interface.  A result table records the ** complete query results from one or more queries. ** ** The table conceptually has a number of rows and columns.  But ** these numbers are not part of the result table itself.  These ** numbers are obtained separately.  Let N be the number of rows ** and M be the number of columns. ** ** A result table is an array of pointers to zero-terminated UTF-8 strings. ** There are (N+1)*M elements in the array.  The first M pointers point ** to zero-terminated strings that  contain the names of the columns. ** The remaining entries all point to query results.  NULL values result ** in NULL pointers.  All other values are in their UTF-8 zero-terminated ** string representation as returned by [sqlite3_column_text()]. ** ** A result table might consist of one or more memory allocations. ** It is not safe to pass a result table directly to [sqlite3_free()]. ** A result table should be deallocated using [sqlite3_free_table()]. ** ** ^(As an example of the result table format, suppose a query result ** is as follows: ** **<blockquote><pre> **        Name        | Age **        ----------------------- **        Alice       | 43 **        Bob         | 28 **        Cindy       | 21 **</pre></blockquote> ** ** There are two column (M==2) and three rows (N==3).  Thus the ** result table has 8 entries.  Suppose the result table is stored ** in an array names azResult.  Then azResult holds this content: ** **<blockquote><pre> **        azResult&#91;0] = "Name"; **        azResult&#91;1] = "Age"; **        azResult&#91;2] = "Alice"; **        azResult&#91;3] = "43"; **        azResult&#91;4] = "Bob"; **        azResult&#91;5] = "28"; **        azResult&#91;6] = "Cindy"; **        azResult&#91;7] = "21"; **</pre></blockquote>)^ ** ** ^The sqlite3_get_table() function evaluates one or more ** semicolon-separated SQL statements in the zero-terminated UTF-8 ** string of its 2nd parameter and returns a result table to the ** pointer given in its 3rd parameter. ** ** After the application has finished with the result from sqlite3_get_table(), ** it must pass the result table pointer to sqlite3_free_table() in order to ** release the memory that was malloced.  Because of the way the ** [sqlite3_malloc()] happens within sqlite3_get_table(), the calling ** function must not try to call [sqlite3_free()] directly.  Only ** [sqlite3_free_table()] is able to release the memory properly and safely. ** ** The sqlite3_get_table() interface is implemented as a wrapper around ** [sqlite3_exec()].  The sqlite3_get_table() routine does not have access ** to any internal data structures of SQLite.  It uses only the public ** interface defined here.  As a consequence, errors that occur in the ** wrapper layer outside of the internal [sqlite3_exec()] call are not ** reflected in subsequent calls to [sqlite3_errcode()] or ** [sqlite3_errmsg()]. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_get_table
parameter_list|(
name|sqlite3
modifier|*
name|db
parameter_list|,
comment|/* An open database */
specifier|const
name|char
modifier|*
name|zSql
parameter_list|,
comment|/* SQL to be evaluated */
name|char
modifier|*
modifier|*
modifier|*
name|pazResult
parameter_list|,
comment|/* Results of the query */
name|int
modifier|*
name|pnRow
parameter_list|,
comment|/* Number of result rows written here */
name|int
modifier|*
name|pnColumn
parameter_list|,
comment|/* Number of result columns written here */
name|char
modifier|*
modifier|*
name|pzErrmsg
comment|/* Error msg written here */
parameter_list|)
function_decl|;
name|SQLITE_API
name|void
name|SQLITE_STDCALL
name|sqlite3_free_table
parameter_list|(
name|char
modifier|*
modifier|*
name|result
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Formatted String Printing Functions ** ** These routines are work-alikes of the "printf()" family of functions ** from the standard C library. ** These routines understand most of the common K&R formatting options, ** plus some additional non-standard formats, detailed below. ** Note that some of the more obscure formatting options from recent ** C-library standards are omitted from this implementation. ** ** ^The sqlite3_mprintf() and sqlite3_vmprintf() routines write their ** results into memory obtained from [sqlite3_malloc()]. ** The strings returned by these two routines should be ** released by [sqlite3_free()].  ^Both routines return a ** NULL pointer if [sqlite3_malloc()] is unable to allocate enough ** memory to hold the resulting string. ** ** ^(The sqlite3_snprintf() routine is similar to "snprintf()" from ** the standard C library.  The result is written into the ** buffer supplied as the second parameter whose size is given by ** the first parameter. Note that the order of the ** first two parameters is reversed from snprintf().)^  This is an ** historical accident that cannot be fixed without breaking ** backwards compatibility.  ^(Note also that sqlite3_snprintf() ** returns a pointer to its buffer instead of the number of ** characters actually written into the buffer.)^  We admit that ** the number of characters written would be a more useful return ** value but we cannot change the implementation of sqlite3_snprintf() ** now without breaking compatibility. ** ** ^As long as the buffer size is greater than zero, sqlite3_snprintf() ** guarantees that the buffer is always zero-terminated.  ^The first ** parameter "n" is the total size of the buffer, including space for ** the zero terminator.  So the longest string that can be completely ** written will be n-1 characters. ** ** ^The sqlite3_vsnprintf() routine is a varargs version of sqlite3_snprintf(). ** ** These routines all implement some additional formatting ** options that are useful for constructing SQL statements. ** All of the usual printf() formatting options apply.  In addition, there ** is are "%q", "%Q", "%w" and "%z" options. ** ** ^(The %q option works like %s in that it substitutes a nul-terminated ** string from the argument list.  But %q also doubles every '\'' character. ** %q is designed for use inside a string literal.)^  By doubling each '\'' ** character it escapes that character and allows it to be inserted into ** the string. ** ** For example, assume the string variable zText contains text as follows: ** **<blockquote><pre> **  char *zText = "It's a happy day!"; **</pre></blockquote> ** ** One can use this text in an SQL statement as follows: ** **<blockquote><pre> **  char *zSQL = sqlite3_mprintf("INSERT INTO table VALUES('%q')", zText); **  sqlite3_exec(db, zSQL, 0, 0, 0); **  sqlite3_free(zSQL); **</pre></blockquote> ** ** Because the %q format string is used, the '\'' character in zText ** is escaped and the SQL generated is as follows: ** **<blockquote><pre> **  INSERT INTO table1 VALUES('It''s a happy day!') **</pre></blockquote> ** ** This is correct.  Had we used %s instead of %q, the generated SQL ** would have looked like this: ** **<blockquote><pre> **  INSERT INTO table1 VALUES('It's a happy day!'); **</pre></blockquote> ** ** This second example is an SQL syntax error.  As a general rule you should ** always use %q instead of %s when inserting text into a string literal. ** ** ^(The %Q option works like %q except it also adds single quotes around ** the outside of the total string.  Additionally, if the parameter in the ** argument list is a NULL pointer, %Q substitutes the text "NULL" (without ** single quotes).)^  So, for example, one could say: ** **<blockquote><pre> **  char *zSQL = sqlite3_mprintf("INSERT INTO table VALUES(%Q)", zText); **  sqlite3_exec(db, zSQL, 0, 0, 0); **  sqlite3_free(zSQL); **</pre></blockquote> ** ** The code above will render a correct SQL statement in the zSQL ** variable even if the zText variable is a NULL pointer. ** ** ^(The "%w" formatting option is like "%q" except that it expects to ** be contained within double-quotes instead of single quotes, and it ** escapes the double-quote character instead of the single-quote ** character.)^  The "%w" formatting option is intended for safely inserting ** table and column names into a constructed SQL statement. ** ** ^(The "%z" formatting option works like "%s" but with the ** addition that after the string has been read and copied into ** the result, [sqlite3_free()] is called on the input string.)^ */
name|SQLITE_API
name|char
modifier|*
name|SQLITE_CDECL
name|sqlite3_mprintf
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
name|SQLITE_API
name|char
modifier|*
name|SQLITE_STDCALL
name|sqlite3_vmprintf
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|va_list
parameter_list|)
function_decl|;
name|SQLITE_API
name|char
modifier|*
name|SQLITE_CDECL
name|sqlite3_snprintf
parameter_list|(
name|int
parameter_list|,
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
name|SQLITE_API
name|char
modifier|*
name|SQLITE_STDCALL
name|sqlite3_vsnprintf
parameter_list|(
name|int
parameter_list|,
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|va_list
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Memory Allocation Subsystem ** ** The SQLite core uses these three routines for all of its own ** internal memory allocation needs. "Core" in the previous sentence ** does not include operating-system specific VFS implementation.  The ** Windows VFS uses native malloc() and free() for some operations. ** ** ^The sqlite3_malloc() routine returns a pointer to a block ** of memory at least N bytes in length, where N is the parameter. ** ^If sqlite3_malloc() is unable to obtain sufficient free ** memory, it returns a NULL pointer.  ^If the parameter N to ** sqlite3_malloc() is zero or negative then sqlite3_malloc() returns ** a NULL pointer. ** ** ^The sqlite3_malloc64(N) routine works just like ** sqlite3_malloc(N) except that N is an unsigned 64-bit integer instead ** of a signed 32-bit integer. ** ** ^Calling sqlite3_free() with a pointer previously returned ** by sqlite3_malloc() or sqlite3_realloc() releases that memory so ** that it might be reused.  ^The sqlite3_free() routine is ** a no-op if is called with a NULL pointer.  Passing a NULL pointer ** to sqlite3_free() is harmless.  After being freed, memory ** should neither be read nor written.  Even reading previously freed ** memory might result in a segmentation fault or other severe error. ** Memory corruption, a segmentation fault, or other severe error ** might result if sqlite3_free() is called with a non-NULL pointer that ** was not obtained from sqlite3_malloc() or sqlite3_realloc(). ** ** ^The sqlite3_realloc(X,N) interface attempts to resize a ** prior memory allocation X to be at least N bytes. ** ^If the X parameter to sqlite3_realloc(X,N) ** is a NULL pointer then its behavior is identical to calling ** sqlite3_malloc(N). ** ^If the N parameter to sqlite3_realloc(X,N) is zero or ** negative then the behavior is exactly the same as calling ** sqlite3_free(X). ** ^sqlite3_realloc(X,N) returns a pointer to a memory allocation ** of at least N bytes in size or NULL if insufficient memory is available. ** ^If M is the size of the prior allocation, then min(N,M) bytes ** of the prior allocation are copied into the beginning of buffer returned ** by sqlite3_realloc(X,N) and the prior allocation is freed. ** ^If sqlite3_realloc(X,N) returns NULL and N is positive, then the ** prior allocation is not freed. ** ** ^The sqlite3_realloc64(X,N) interfaces works the same as ** sqlite3_realloc(X,N) except that N is a 64-bit unsigned integer instead ** of a 32-bit signed integer. ** ** ^If X is a memory allocation previously obtained from sqlite3_malloc(), ** sqlite3_malloc64(), sqlite3_realloc(), or sqlite3_realloc64(), then ** sqlite3_msize(X) returns the size of that memory allocation in bytes. ** ^The value returned by sqlite3_msize(X) might be larger than the number ** of bytes requested when X was allocated.  ^If X is a NULL pointer then ** sqlite3_msize(X) returns zero.  If X points to something that is not ** the beginning of memory allocation, or if it points to a formerly ** valid memory allocation that has now been freed, then the behavior ** of sqlite3_msize(X) is undefined and possibly harmful. ** ** ^The memory returned by sqlite3_malloc(), sqlite3_realloc(), ** sqlite3_malloc64(), and sqlite3_realloc64() ** is always aligned to at least an 8 byte boundary, or to a ** 4 byte boundary if the [SQLITE_4_BYTE_ALIGNED_MALLOC] compile-time ** option is used. ** ** In SQLite version 3.5.0 and 3.5.1, it was possible to define ** the SQLITE_OMIT_MEMORY_ALLOCATION which would cause the built-in ** implementation of these routines to be omitted.  That capability ** is no longer provided.  Only built-in memory allocators can be used. ** ** Prior to SQLite version 3.7.10, the Windows OS interface layer called ** the system malloc() and free() directly when converting ** filenames between the UTF-8 encoding used by SQLite ** and whatever filename encoding is used by the particular Windows ** installation.  Memory allocation errors were detected, but ** they were reported back as [SQLITE_CANTOPEN] or ** [SQLITE_IOERR] rather than [SQLITE_NOMEM]. ** ** The pointer arguments to [sqlite3_free()] and [sqlite3_realloc()] ** must be either NULL or else pointers obtained from a prior ** invocation of [sqlite3_malloc()] or [sqlite3_realloc()] that have ** not yet been released. ** ** The application must not read or write any part of ** a block of memory after it has been released using ** [sqlite3_free()] or [sqlite3_realloc()]. */
name|SQLITE_API
name|void
modifier|*
name|SQLITE_STDCALL
name|sqlite3_malloc
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|SQLITE_API
name|void
modifier|*
name|SQLITE_STDCALL
name|sqlite3_malloc64
parameter_list|(
name|sqlite3_uint64
parameter_list|)
function_decl|;
name|SQLITE_API
name|void
modifier|*
name|SQLITE_STDCALL
name|sqlite3_realloc
parameter_list|(
name|void
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|SQLITE_API
name|void
modifier|*
name|SQLITE_STDCALL
name|sqlite3_realloc64
parameter_list|(
name|void
modifier|*
parameter_list|,
name|sqlite3_uint64
parameter_list|)
function_decl|;
name|SQLITE_API
name|void
name|SQLITE_STDCALL
name|sqlite3_free
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
name|SQLITE_API
name|sqlite3_uint64
name|SQLITE_STDCALL
name|sqlite3_msize
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Memory Allocator Statistics ** ** SQLite provides these two interfaces for reporting on the status ** of the [sqlite3_malloc()], [sqlite3_free()], and [sqlite3_realloc()] ** routines, which form the built-in memory allocation subsystem. ** ** ^The [sqlite3_memory_used()] routine returns the number of bytes ** of memory currently outstanding (malloced but not freed). ** ^The [sqlite3_memory_highwater()] routine returns the maximum ** value of [sqlite3_memory_used()] since the high-water mark ** was last reset.  ^The values returned by [sqlite3_memory_used()] and ** [sqlite3_memory_highwater()] include any overhead ** added by SQLite in its implementation of [sqlite3_malloc()], ** but not overhead added by the any underlying system library ** routines that [sqlite3_malloc()] may call. ** ** ^The memory high-water mark is reset to the current value of ** [sqlite3_memory_used()] if and only if the parameter to ** [sqlite3_memory_highwater()] is true.  ^The value returned ** by [sqlite3_memory_highwater(1)] is the high-water mark ** prior to the reset. */
name|SQLITE_API
name|sqlite3_int64
name|SQLITE_STDCALL
name|sqlite3_memory_used
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|SQLITE_API
name|sqlite3_int64
name|SQLITE_STDCALL
name|sqlite3_memory_highwater
parameter_list|(
name|int
name|resetFlag
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Pseudo-Random Number Generator ** ** SQLite contains a high-quality pseudo-random number generator (PRNG) used to ** select random [ROWID | ROWIDs] when inserting new records into a table that ** already uses the largest possible [ROWID].  The PRNG is also used for ** the build-in random() and randomblob() SQL functions.  This interface allows ** applications to access the same PRNG for other purposes. ** ** ^A call to this routine stores N bytes of randomness into buffer P. ** ^The P parameter can be a NULL pointer. ** ** ^If this routine has not been previously called or if the previous ** call had N less than one or a NULL pointer for P, then the PRNG is ** seeded using randomness obtained from the xRandomness method of ** the default [sqlite3_vfs] object. ** ^If the previous call to this routine had an N of 1 or more and a ** non-NULL P then the pseudo-randomness is generated ** internally and without recourse to the [sqlite3_vfs] xRandomness ** method. */
name|SQLITE_API
name|void
name|SQLITE_STDCALL
name|sqlite3_randomness
parameter_list|(
name|int
name|N
parameter_list|,
name|void
modifier|*
name|P
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Compile-Time Authorization Callbacks ** METHOD: sqlite3 ** ** ^This routine registers an authorizer callback with a particular ** [database connection], supplied in the first argument. ** ^The authorizer callback is invoked as SQL statements are being compiled ** by [sqlite3_prepare()] or its variants [sqlite3_prepare_v2()], ** [sqlite3_prepare16()] and [sqlite3_prepare16_v2()].  ^At various ** points during the compilation process, as logic is being created ** to perform various actions, the authorizer callback is invoked to ** see if those actions are allowed.  ^The authorizer callback should ** return [SQLITE_OK] to allow the action, [SQLITE_IGNORE] to disallow the ** specific action but allow the SQL statement to continue to be ** compiled, or [SQLITE_DENY] to cause the entire SQL statement to be ** rejected with an error.  ^If the authorizer callback returns ** any value other than [SQLITE_IGNORE], [SQLITE_OK], or [SQLITE_DENY] ** then the [sqlite3_prepare_v2()] or equivalent call that triggered ** the authorizer will fail with an error message. ** ** When the callback returns [SQLITE_OK], that means the operation ** requested is ok.  ^When the callback returns [SQLITE_DENY], the ** [sqlite3_prepare_v2()] or equivalent call that triggered the ** authorizer will fail with an error message explaining that ** access is denied.  ** ** ^The first parameter to the authorizer callback is a copy of the third ** parameter to the sqlite3_set_authorizer() interface. ^The second parameter ** to the callback is an integer [SQLITE_COPY | action code] that specifies ** the particular action to be authorized. ^The third through sixth parameters ** to the callback are zero-terminated strings that contain additional ** details about the action to be authorized. ** ** ^If the action code is [SQLITE_READ] ** and the callback returns [SQLITE_IGNORE] then the ** [prepared statement] statement is constructed to substitute ** a NULL value in place of the table column that would have ** been read if [SQLITE_OK] had been returned.  The [SQLITE_IGNORE] ** return can be used to deny an untrusted user access to individual ** columns of a table. ** ^If the action code is [SQLITE_DELETE] and the callback returns ** [SQLITE_IGNORE] then the [DELETE] operation proceeds but the ** [truncate optimization] is disabled and all rows are deleted individually. ** ** An authorizer is used when [sqlite3_prepare | preparing] ** SQL statements from an untrusted source, to ensure that the SQL statements ** do not try to access data they are not allowed to see, or that they do not ** try to execute malicious statements that damage the database.  For ** example, an application may allow a user to enter arbitrary ** SQL queries for evaluation by a database.  But the application does ** not want the user to be able to make arbitrary changes to the ** database.  An authorizer could then be put in place while the ** user-entered SQL is being [sqlite3_prepare | prepared] that ** disallows everything except [SELECT] statements. ** ** Applications that need to process SQL from untrusted sources ** might also consider lowering resource limits using [sqlite3_limit()] ** and limiting database size using the [max_page_count] [PRAGMA] ** in addition to using an authorizer. ** ** ^(Only a single authorizer can be in place on a database connection ** at a time.  Each call to sqlite3_set_authorizer overrides the ** previous call.)^  ^Disable the authorizer by installing a NULL callback. ** The authorizer is disabled by default. ** ** The authorizer callback must not do anything that will modify ** the database connection that invoked the authorizer callback. ** Note that [sqlite3_prepare_v2()] and [sqlite3_step()] both modify their ** database connections for the meaning of "modify" in this paragraph. ** ** ^When [sqlite3_prepare_v2()] is used to prepare a statement, the ** statement might be re-prepared during [sqlite3_step()] due to a  ** schema change.  Hence, the application should ensure that the ** correct authorizer callback remains in place during the [sqlite3_step()]. ** ** ^Note that the authorizer callback is invoked only during ** [sqlite3_prepare()] or its variants.  Authorization is not ** performed during statement evaluation in [sqlite3_step()], unless ** as stated in the previous paragraph, sqlite3_step() invokes ** sqlite3_prepare_v2() to reprepare a statement after a schema change. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_set_authorizer
parameter_list|(
name|sqlite3
modifier|*
parameter_list|,
name|int
function_decl|(
modifier|*
name|xAuth
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
name|pUserData
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Authorizer Return Codes ** ** The [sqlite3_set_authorizer | authorizer callback function] must ** return either [SQLITE_OK] or one of these two constants in order ** to signal SQLite whether or not the action is permitted.  See the ** [sqlite3_set_authorizer | authorizer documentation] for additional ** information. ** ** Note that SQLITE_IGNORE is also used as a [conflict resolution mode] ** returned from the [sqlite3_vtab_on_conflict()] interface. */
define|#
directive|define
name|SQLITE_DENY
value|1
comment|/* Abort the SQL statement with an error */
define|#
directive|define
name|SQLITE_IGNORE
value|2
comment|/* Don't allow access, but don't generate an error */
comment|/* ** CAPI3REF: Authorizer Action Codes ** ** The [sqlite3_set_authorizer()] interface registers a callback function ** that is invoked to authorize certain SQL statement actions.  The ** second parameter to the callback is an integer code that specifies ** what action is being authorized.  These are the integer action codes that ** the authorizer callback may be passed. ** ** These action code values signify what kind of operation is to be ** authorized.  The 3rd and 4th parameters to the authorization ** callback function will be parameters or NULL depending on which of these ** codes is used as the second parameter.  ^(The 5th parameter to the ** authorizer callback is the name of the database ("main", "temp", ** etc.) if applicable.)^  ^The 6th parameter to the authorizer callback ** is the name of the inner-most trigger or view that is responsible for ** the access attempt or NULL if this access attempt is directly from ** top-level SQL code. */
comment|/******************************************* 3rd ************ 4th ***********/
define|#
directive|define
name|SQLITE_CREATE_INDEX
value|1
comment|/* Index Name      Table Name      */
define|#
directive|define
name|SQLITE_CREATE_TABLE
value|2
comment|/* Table Name      NULL            */
define|#
directive|define
name|SQLITE_CREATE_TEMP_INDEX
value|3
comment|/* Index Name      Table Name      */
define|#
directive|define
name|SQLITE_CREATE_TEMP_TABLE
value|4
comment|/* Table Name      NULL            */
define|#
directive|define
name|SQLITE_CREATE_TEMP_TRIGGER
value|5
comment|/* Trigger Name    Table Name      */
define|#
directive|define
name|SQLITE_CREATE_TEMP_VIEW
value|6
comment|/* View Name       NULL            */
define|#
directive|define
name|SQLITE_CREATE_TRIGGER
value|7
comment|/* Trigger Name    Table Name      */
define|#
directive|define
name|SQLITE_CREATE_VIEW
value|8
comment|/* View Name       NULL            */
define|#
directive|define
name|SQLITE_DELETE
value|9
comment|/* Table Name      NULL            */
define|#
directive|define
name|SQLITE_DROP_INDEX
value|10
comment|/* Index Name      Table Name      */
define|#
directive|define
name|SQLITE_DROP_TABLE
value|11
comment|/* Table Name      NULL            */
define|#
directive|define
name|SQLITE_DROP_TEMP_INDEX
value|12
comment|/* Index Name      Table Name      */
define|#
directive|define
name|SQLITE_DROP_TEMP_TABLE
value|13
comment|/* Table Name      NULL            */
define|#
directive|define
name|SQLITE_DROP_TEMP_TRIGGER
value|14
comment|/* Trigger Name    Table Name      */
define|#
directive|define
name|SQLITE_DROP_TEMP_VIEW
value|15
comment|/* View Name       NULL            */
define|#
directive|define
name|SQLITE_DROP_TRIGGER
value|16
comment|/* Trigger Name    Table Name      */
define|#
directive|define
name|SQLITE_DROP_VIEW
value|17
comment|/* View Name       NULL            */
define|#
directive|define
name|SQLITE_INSERT
value|18
comment|/* Table Name      NULL            */
define|#
directive|define
name|SQLITE_PRAGMA
value|19
comment|/* Pragma Name     1st arg or NULL */
define|#
directive|define
name|SQLITE_READ
value|20
comment|/* Table Name      Column Name     */
define|#
directive|define
name|SQLITE_SELECT
value|21
comment|/* NULL            NULL            */
define|#
directive|define
name|SQLITE_TRANSACTION
value|22
comment|/* Operation       NULL            */
define|#
directive|define
name|SQLITE_UPDATE
value|23
comment|/* Table Name      Column Name     */
define|#
directive|define
name|SQLITE_ATTACH
value|24
comment|/* Filename        NULL            */
define|#
directive|define
name|SQLITE_DETACH
value|25
comment|/* Database Name   NULL            */
define|#
directive|define
name|SQLITE_ALTER_TABLE
value|26
comment|/* Database Name   Table Name      */
define|#
directive|define
name|SQLITE_REINDEX
value|27
comment|/* Index Name      NULL            */
define|#
directive|define
name|SQLITE_ANALYZE
value|28
comment|/* Table Name      NULL            */
define|#
directive|define
name|SQLITE_CREATE_VTABLE
value|29
comment|/* Table Name      Module Name     */
define|#
directive|define
name|SQLITE_DROP_VTABLE
value|30
comment|/* Table Name      Module Name     */
define|#
directive|define
name|SQLITE_FUNCTION
value|31
comment|/* NULL            Function Name   */
define|#
directive|define
name|SQLITE_SAVEPOINT
value|32
comment|/* Operation       Savepoint Name  */
define|#
directive|define
name|SQLITE_COPY
value|0
comment|/* No longer used */
define|#
directive|define
name|SQLITE_RECURSIVE
value|33
comment|/* NULL            NULL            */
comment|/* ** CAPI3REF: Tracing And Profiling Functions ** METHOD: sqlite3 ** ** These routines register callback functions that can be used for ** tracing and profiling the execution of SQL statements. ** ** ^The callback function registered by sqlite3_trace() is invoked at ** various times when an SQL statement is being run by [sqlite3_step()]. ** ^The sqlite3_trace() callback is invoked with a UTF-8 rendering of the ** SQL statement text as the statement first begins executing. ** ^(Additional sqlite3_trace() callbacks might occur ** as each triggered subprogram is entered.  The callbacks for triggers ** contain a UTF-8 SQL comment that identifies the trigger.)^ ** ** The [SQLITE_TRACE_SIZE_LIMIT] compile-time option can be used to limit ** the length of [bound parameter] expansion in the output of sqlite3_trace(). ** ** ^The callback function registered by sqlite3_profile() is invoked ** as each SQL statement finishes.  ^The profile callback contains ** the original statement text and an estimate of wall-clock time ** of how long that statement took to run.  ^The profile callback ** time is in units of nanoseconds, however the current implementation ** is only capable of millisecond resolution so the six least significant ** digits in the time are meaningless.  Future versions of SQLite ** might provide greater resolution on the profiler callback.  The ** sqlite3_profile() function is considered experimental and is ** subject to change in future versions of SQLite. */
name|SQLITE_API
name|void
modifier|*
name|SQLITE_STDCALL
name|sqlite3_trace
parameter_list|(
name|sqlite3
modifier|*
parameter_list|,
name|void
function_decl|(
modifier|*
name|xTrace
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|SQLITE_API
name|SQLITE_EXPERIMENTAL
name|void
modifier|*
name|SQLITE_STDCALL
name|sqlite3_profile
parameter_list|(
name|sqlite3
modifier|*
parameter_list|,
name|void
function_decl|(
modifier|*
name|xProfile
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|sqlite3_uint64
parameter_list|)
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Query Progress Callbacks ** METHOD: sqlite3 ** ** ^The sqlite3_progress_handler(D,N,X,P) interface causes the callback ** function X to be invoked periodically during long running calls to ** [sqlite3_exec()], [sqlite3_step()] and [sqlite3_get_table()] for ** database connection D.  An example use for this ** interface is to keep a GUI updated during a large query. ** ** ^The parameter P is passed through as the only parameter to the  ** callback function X.  ^The parameter N is the approximate number of  ** [virtual machine instructions] that are evaluated between successive ** invocations of the callback X.  ^If N is less than one then the progress ** handler is disabled. ** ** ^Only a single progress handler may be defined at one time per ** [database connection]; setting a new progress handler cancels the ** old one.  ^Setting parameter X to NULL disables the progress handler. ** ^The progress handler is also disabled by setting N to a value less ** than 1. ** ** ^If the progress callback returns non-zero, the operation is ** interrupted.  This feature can be used to implement a ** "Cancel" button on a GUI progress dialog box. ** ** The progress handler callback must not do anything that will modify ** the database connection that invoked the progress handler. ** Note that [sqlite3_prepare_v2()] and [sqlite3_step()] both modify their ** database connections for the meaning of "modify" in this paragraph. ** */
name|SQLITE_API
name|void
name|SQLITE_STDCALL
name|sqlite3_progress_handler
parameter_list|(
name|sqlite3
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Opening A New Database Connection ** CONSTRUCTOR: sqlite3 ** ** ^These routines open an SQLite database file as specified by the  ** filename argument. ^The filename argument is interpreted as UTF-8 for ** sqlite3_open() and sqlite3_open_v2() and as UTF-16 in the native byte ** order for sqlite3_open16(). ^(A [database connection] handle is usually ** returned in *ppDb, even if an error occurs.  The only exception is that ** if SQLite is unable to allocate memory to hold the [sqlite3] object, ** a NULL will be written into *ppDb instead of a pointer to the [sqlite3] ** object.)^ ^(If the database is opened (and/or created) successfully, then ** [SQLITE_OK] is returned.  Otherwise an [error code] is returned.)^ ^The ** [sqlite3_errmsg()] or [sqlite3_errmsg16()] routines can be used to obtain ** an English language description of the error following a failure of any ** of the sqlite3_open() routines. ** ** ^The default encoding will be UTF-8 for databases created using ** sqlite3_open() or sqlite3_open_v2().  ^The default encoding for databases ** created using sqlite3_open16() will be UTF-16 in the native byte order. ** ** Whether or not an error occurs when it is opened, resources ** associated with the [database connection] handle should be released by ** passing it to [sqlite3_close()] when it is no longer required. ** ** The sqlite3_open_v2() interface works like sqlite3_open() ** except that it accepts two additional parameters for additional control ** over the new database connection.  ^(The flags parameter to ** sqlite3_open_v2() can take one of ** the following three values, optionally combined with the  ** [SQLITE_OPEN_NOMUTEX], [SQLITE_OPEN_FULLMUTEX], [SQLITE_OPEN_SHAREDCACHE], ** [SQLITE_OPEN_PRIVATECACHE], and/or [SQLITE_OPEN_URI] flags:)^ ** **<dl> ** ^(<dt>[SQLITE_OPEN_READONLY]</dt> **<dd>The database is opened in read-only mode.  If the database does not ** already exist, an error is returned.</dd>)^ ** ** ^(<dt>[SQLITE_OPEN_READWRITE]</dt> **<dd>The database is opened for reading and writing if possible, or reading ** only if the file is write protected by the operating system.  In either ** case the database must already exist, otherwise an error is returned.</dd>)^ ** ** ^(<dt>[SQLITE_OPEN_READWRITE] | [SQLITE_OPEN_CREATE]</dt> **<dd>The database is opened for reading and writing, and is created if ** it does not already exist. This is the behavior that is always used for ** sqlite3_open() and sqlite3_open16().</dd>)^ **</dl> ** ** If the 3rd parameter to sqlite3_open_v2() is not one of the ** combinations shown above optionally combined with other ** [SQLITE_OPEN_READONLY | SQLITE_OPEN_* bits] ** then the behavior is undefined. ** ** ^If the [SQLITE_OPEN_NOMUTEX] flag is set, then the database connection ** opens in the multi-thread [threading mode] as long as the single-thread ** mode has not been set at compile-time or start-time.  ^If the ** [SQLITE_OPEN_FULLMUTEX] flag is set then the database connection opens ** in the serialized [threading mode] unless single-thread was ** previously selected at compile-time or start-time. ** ^The [SQLITE_OPEN_SHAREDCACHE] flag causes the database connection to be ** eligible to use [shared cache mode], regardless of whether or not shared ** cache is enabled using [sqlite3_enable_shared_cache()].  ^The ** [SQLITE_OPEN_PRIVATECACHE] flag causes the database connection to not ** participate in [shared cache mode] even if it is enabled. ** ** ^The fourth parameter to sqlite3_open_v2() is the name of the ** [sqlite3_vfs] object that defines the operating system interface that ** the new database connection should use.  ^If the fourth parameter is ** a NULL pointer then the default [sqlite3_vfs] object is used. ** ** ^If the filename is ":memory:", then a private, temporary in-memory database ** is created for the connection.  ^This in-memory database will vanish when ** the database connection is closed.  Future versions of SQLite might ** make use of additional special filenames that begin with the ":" character. ** It is recommended that when a database filename actually does begin with ** a ":" character you should prefix the filename with a pathname such as ** "./" to avoid ambiguity. ** ** ^If the filename is an empty string, then a private, temporary ** on-disk database will be created.  ^This private database will be ** automatically deleted as soon as the database connection is closed. ** ** [[URI filenames in sqlite3_open()]]<h3>URI Filenames</h3> ** ** ^If [URI filename] interpretation is enabled, and the filename argument ** begins with "file:", then the filename is interpreted as a URI. ^URI ** filename interpretation is enabled if the [SQLITE_OPEN_URI] flag is ** set in the fourth argument to sqlite3_open_v2(), or if it has ** been enabled globally using the [SQLITE_CONFIG_URI] option with the ** [sqlite3_config()] method or by the [SQLITE_USE_URI] compile-time option. ** As of SQLite version 3.7.7, URI filename interpretation is turned off ** by default, but future releases of SQLite might enable URI filename ** interpretation by default.  See "[URI filenames]" for additional ** information. ** ** URI filenames are parsed according to RFC 3986. ^If the URI contains an ** authority, then it must be either an empty string or the string  ** "localhost". ^If the authority is not an empty string or "localhost", an  ** error is returned to the caller. ^The fragment component of a URI, if  ** present, is ignored. ** ** ^SQLite uses the path component of the URI as the name of the disk file ** which contains the database. ^If the path begins with a '/' character,  ** then it is interpreted as an absolute path. ^If the path does not begin  ** with a '/' (meaning that the authority section is omitted from the URI) ** then the path is interpreted as a relative path.  ** ^(On windows, the first component of an absolute path  ** is a drive specification (e.g. "C:").)^ ** ** [[core URI query parameters]] ** The query component of a URI may contain parameters that are interpreted ** either by SQLite itself, or by a [VFS | custom VFS implementation]. ** SQLite and its built-in [VFSes] interpret the ** following query parameters: ** **<ul> **<li><b>vfs</b>: ^The "vfs" parameter may be used to specify the name of **     a VFS object that provides the operating system interface that should **     be used to access the database file on disk. ^If this option is set to **     an empty string the default VFS object is used. ^Specifying an unknown **     VFS is an error. ^If sqlite3_open_v2() is used and the vfs option is **     present, then the VFS specified by the option takes precedence over **     the value passed as the fourth parameter to sqlite3_open_v2(). ** **<li><b>mode</b>: ^(The mode parameter may be set to either "ro", "rw", **     "rwc", or "memory". Attempting to set it to any other value is **     an error)^.  **     ^If "ro" is specified, then the database is opened for read-only  **     access, just as if the [SQLITE_OPEN_READONLY] flag had been set in the  **     third argument to sqlite3_open_v2(). ^If the mode option is set to  **     "rw", then the database is opened for read-write (but not create)  **     access, as if SQLITE_OPEN_READWRITE (but not SQLITE_OPEN_CREATE) had  **     been set. ^Value "rwc" is equivalent to setting both  **     SQLITE_OPEN_READWRITE and SQLITE_OPEN_CREATE.  ^If the mode option is **     set to "memory" then a pure [in-memory database] that never reads **     or writes from disk is used. ^It is an error to specify a value for **     the mode parameter that is less restrictive than that specified by **     the flags passed in the third parameter to sqlite3_open_v2(). ** **<li><b>cache</b>: ^The cache parameter may be set to either "shared" or **     "private". ^Setting it to "shared" is equivalent to setting the **     SQLITE_OPEN_SHAREDCACHE bit in the flags argument passed to **     sqlite3_open_v2(). ^Setting the cache parameter to "private" is  **     equivalent to setting the SQLITE_OPEN_PRIVATECACHE bit. **     ^If sqlite3_open_v2() is used and the "cache" parameter is present in **     a URI filename, its value overrides any behavior requested by setting **     SQLITE_OPEN_PRIVATECACHE or SQLITE_OPEN_SHAREDCACHE flag. ** **<li><b>psow</b>: ^The psow parameter indicates whether or not the **     [powersafe overwrite] property does or does not apply to the **     storage media on which the database file resides. ** **<li><b>nolock</b>: ^The nolock parameter is a boolean query parameter **     which if set disables file locking in rollback journal modes.  This **     is useful for accessing a database on a filesystem that does not **     support locking.  Caution:  Database corruption might result if two **     or more processes write to the same database and any one of those **     processes uses nolock=1. ** **<li><b>immutable</b>: ^The immutable parameter is a boolean query **     parameter that indicates that the database file is stored on **     read-only media.  ^When immutable is set, SQLite assumes that the **     database file cannot be changed, even by a process with higher **     privilege, and so the database is opened read-only and all locking **     and change detection is disabled.  Caution: Setting the immutable **     property on a database file that does in fact change can result **     in incorrect query results and/or [SQLITE_CORRUPT] errors. **     See also: [SQLITE_IOCAP_IMMUTABLE]. **        **</ul> ** ** ^Specifying an unknown parameter in the query component of a URI is not an ** error.  Future versions of SQLite might understand additional query ** parameters.  See "[query parameters with special meaning to SQLite]" for ** additional information. ** ** [[URI filename examples]]<h3>URI filename examples</h3> ** **<table border="1" align=center cellpadding=5> **<tr><th> URI filenames<th> Results **<tr><td> file:data.db<td>  **          Open the file "data.db" in the current directory. **<tr><td> file:/home/fred/data.db<br> **          file:///home/fred/data.db<br>  **          file://localhost/home/fred/data.db<br><td>  **          Open the database file "/home/fred/data.db". **<tr><td> file://darkstar/home/fred/data.db<td>  **          An error. "darkstar" is not a recognized authority. **<tr><td style="white-space:nowrap">  **          file:///C:/Documents%20and%20Settings/fred/Desktop/data.db **<td> Windows only: Open the file "data.db" on fred's desktop on drive **          C:. Note that the %20 escaping in this example is not strictly  **          necessary - space characters can be used literally **          in URI filenames. **<tr><td> file:data.db?mode=ro&cache=private<td>  **          Open file "data.db" in the current directory for read-only access. **          Regardless of whether or not shared-cache mode is enabled by **          default, use a private cache. **<tr><td> file:/home/fred/data.db?vfs=unix-dotfile<td> **          Open file "/home/fred/data.db". Use the special VFS "unix-dotfile" **          that uses dot-files in place of posix advisory locking. **<tr><td> file:data.db?mode=readonly<td>  **          An error. "readonly" is not a valid option for the "mode" parameter. **</table> ** ** ^URI hexadecimal escape sequences (%HH) are supported within the path and ** query components of a URI. A hexadecimal escape sequence consists of a ** percent sign - "%" - followed by exactly two hexadecimal digits  ** specifying an octet value. ^Before the path or query components of a ** URI filename are interpreted, they are encoded using UTF-8 and all  ** hexadecimal escape sequences replaced by a single byte containing the ** corresponding octet. If this process generates an invalid UTF-8 encoding, ** the results are undefined. ** **<b>Note to Windows users:</b>  The encoding used for the filename argument ** of sqlite3_open() and sqlite3_open_v2() must be UTF-8, not whatever ** codepage is currently defined.  Filenames containing international ** characters must be converted to UTF-8 prior to passing them into ** sqlite3_open() or sqlite3_open_v2(). ** **<b>Note to Windows Runtime users:</b>  The temporary directory must be set ** prior to calling sqlite3_open() or sqlite3_open_v2().  Otherwise, various ** features that require the use of temporary files may fail. ** ** See also: [sqlite3_temp_directory] */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_open
parameter_list|(
specifier|const
name|char
modifier|*
name|filename
parameter_list|,
comment|/* Database filename (UTF-8) */
name|sqlite3
modifier|*
modifier|*
name|ppDb
comment|/* OUT: SQLite db handle */
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_open16
parameter_list|(
specifier|const
name|void
modifier|*
name|filename
parameter_list|,
comment|/* Database filename (UTF-16) */
name|sqlite3
modifier|*
modifier|*
name|ppDb
comment|/* OUT: SQLite db handle */
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_open_v2
parameter_list|(
specifier|const
name|char
modifier|*
name|filename
parameter_list|,
comment|/* Database filename (UTF-8) */
name|sqlite3
modifier|*
modifier|*
name|ppDb
parameter_list|,
comment|/* OUT: SQLite db handle */
name|int
name|flags
parameter_list|,
comment|/* Flags */
specifier|const
name|char
modifier|*
name|zVfs
comment|/* Name of VFS module to use */
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Obtain Values For URI Parameters ** ** These are utility routines, useful to VFS implementations, that check ** to see if a database file was a URI that contained a specific query  ** parameter, and if so obtains the value of that query parameter. ** ** If F is the database filename pointer passed into the xOpen() method of  ** a VFS implementation when the flags parameter to xOpen() has one or  ** more of the [SQLITE_OPEN_URI] or [SQLITE_OPEN_MAIN_DB] bits set and ** P is the name of the query parameter, then ** sqlite3_uri_parameter(F,P) returns the value of the P ** parameter if it exists or a NULL pointer if P does not appear as a  ** query parameter on F.  If P is a query parameter of F ** has no explicit value, then sqlite3_uri_parameter(F,P) returns ** a pointer to an empty string. ** ** The sqlite3_uri_boolean(F,P,B) routine assumes that P is a boolean ** parameter and returns true (1) or false (0) according to the value ** of P.  The sqlite3_uri_boolean(F,P,B) routine returns true (1) if the ** value of query parameter P is one of "yes", "true", or "on" in any ** case or if the value begins with a non-zero number.  The  ** sqlite3_uri_boolean(F,P,B) routines returns false (0) if the value of ** query parameter P is one of "no", "false", or "off" in any case or ** if the value begins with a numeric zero.  If P is not a query ** parameter on F or if the value of P is does not match any of the ** above, then sqlite3_uri_boolean(F,P,B) returns (B!=0). ** ** The sqlite3_uri_int64(F,P,D) routine converts the value of P into a ** 64-bit signed integer and returns that integer, or D if P does not ** exist.  If the value of P is something other than an integer, then ** zero is returned. **  ** If F is a NULL pointer, then sqlite3_uri_parameter(F,P) returns NULL and ** sqlite3_uri_boolean(F,P,B) returns B.  If F is not a NULL pointer and ** is not a database file pathname pointer that SQLite passed into the xOpen ** VFS method, then the behavior of this routine is undefined and probably ** undesirable. */
name|SQLITE_API
specifier|const
name|char
modifier|*
name|SQLITE_STDCALL
name|sqlite3_uri_parameter
parameter_list|(
specifier|const
name|char
modifier|*
name|zFilename
parameter_list|,
specifier|const
name|char
modifier|*
name|zParam
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_uri_boolean
parameter_list|(
specifier|const
name|char
modifier|*
name|zFile
parameter_list|,
specifier|const
name|char
modifier|*
name|zParam
parameter_list|,
name|int
name|bDefault
parameter_list|)
function_decl|;
name|SQLITE_API
name|sqlite3_int64
name|SQLITE_STDCALL
name|sqlite3_uri_int64
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|sqlite3_int64
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Error Codes And Messages ** METHOD: sqlite3 ** ** ^If the most recent sqlite3_* API call associated with  ** [database connection] D failed, then the sqlite3_errcode(D) interface ** returns the numeric [result code] or [extended result code] for that ** API call. ** If the most recent API call was successful, ** then the return value from sqlite3_errcode() is undefined. ** ^The sqlite3_extended_errcode() ** interface is the same except that it always returns the  ** [extended result code] even when extended result codes are ** disabled. ** ** ^The sqlite3_errmsg() and sqlite3_errmsg16() return English-language ** text that describes the error, as either UTF-8 or UTF-16 respectively. ** ^(Memory to hold the error message string is managed internally. ** The application does not need to worry about freeing the result. ** However, the error string might be overwritten or deallocated by ** subsequent calls to other SQLite interface functions.)^ ** ** ^The sqlite3_errstr() interface returns the English-language text ** that describes the [result code], as UTF-8. ** ^(Memory to hold the error message string is managed internally ** and must not be freed by the application)^. ** ** When the serialized [threading mode] is in use, it might be the ** case that a second error occurs on a separate thread in between ** the time of the first error and the call to these interfaces. ** When that happens, the second error will be reported since these ** interfaces always report the most recent result.  To avoid ** this, each thread can obtain exclusive use of the [database connection] D ** by invoking [sqlite3_mutex_enter]([sqlite3_db_mutex](D)) before beginning ** to use D and invoking [sqlite3_mutex_leave]([sqlite3_db_mutex](D)) after ** all calls to the interfaces listed here are completed. ** ** If an interface fails with SQLITE_MISUSE, that means the interface ** was invoked incorrectly by the application.  In that case, the ** error code and message may or may not be set. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_errcode
parameter_list|(
name|sqlite3
modifier|*
name|db
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_extended_errcode
parameter_list|(
name|sqlite3
modifier|*
name|db
parameter_list|)
function_decl|;
name|SQLITE_API
specifier|const
name|char
modifier|*
name|SQLITE_STDCALL
name|sqlite3_errmsg
parameter_list|(
name|sqlite3
modifier|*
parameter_list|)
function_decl|;
name|SQLITE_API
specifier|const
name|void
modifier|*
name|SQLITE_STDCALL
name|sqlite3_errmsg16
parameter_list|(
name|sqlite3
modifier|*
parameter_list|)
function_decl|;
name|SQLITE_API
specifier|const
name|char
modifier|*
name|SQLITE_STDCALL
name|sqlite3_errstr
parameter_list|(
name|int
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Prepared Statement Object ** KEYWORDS: {prepared statement} {prepared statements} ** ** An instance of this object represents a single SQL statement that ** has been compiled into binary form and is ready to be evaluated. ** ** Think of each SQL statement as a separate computer program.  The ** original SQL text is source code.  A prepared statement object  ** is the compiled object code.  All SQL must be converted into a ** prepared statement before it can be run. ** ** The life-cycle of a prepared statement object usually goes like this: ** **<ol> **<li> Create the prepared statement object using [sqlite3_prepare_v2()]. **<li> Bind values to [parameters] using the sqlite3_bind_*() **      interfaces. **<li> Run the SQL by calling [sqlite3_step()] one or more times. **<li> Reset the prepared statement using [sqlite3_reset()] then go back **      to step 2.  Do this zero or more times. **<li> Destroy the object using [sqlite3_finalize()]. **</ol> */
typedef|typedef
name|struct
name|sqlite3_stmt
name|sqlite3_stmt
typedef|;
comment|/* ** CAPI3REF: Run-time Limits ** METHOD: sqlite3 ** ** ^(This interface allows the size of various constructs to be limited ** on a connection by connection basis.  The first parameter is the ** [database connection] whose limit is to be set or queried.  The ** second parameter is one of the [limit categories] that define a ** class of constructs to be size limited.  The third parameter is the ** new limit for that construct.)^ ** ** ^If the new limit is a negative number, the limit is unchanged. ** ^(For each limit category SQLITE_LIMIT_<i>NAME</i> there is a  ** [limits | hard upper bound] ** set at compile-time by a C preprocessor macro called ** [limits | SQLITE_MAX_<i>NAME</i>]. ** (The "_LIMIT_" in the name is changed to "_MAX_".))^ ** ^Attempts to increase a limit above its hard upper bound are ** silently truncated to the hard upper bound. ** ** ^Regardless of whether or not the limit was changed, the  ** [sqlite3_limit()] interface returns the prior value of the limit. ** ^Hence, to find the current value of a limit without changing it, ** simply invoke this interface with the third parameter set to -1. ** ** Run-time limits are intended for use in applications that manage ** both their own internal database and also databases that are controlled ** by untrusted external sources.  An example application might be a ** web browser that has its own databases for storing history and ** separate databases controlled by JavaScript applications downloaded ** off the Internet.  The internal databases can be given the ** large, default limits.  Databases managed by external sources can ** be given much smaller limits designed to prevent a denial of service ** attack.  Developers might also want to use the [sqlite3_set_authorizer()] ** interface to further control untrusted SQL.  The size of the database ** created by an untrusted script can be contained using the ** [max_page_count] [PRAGMA]. ** ** New run-time limit categories may be added in future releases. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_limit
parameter_list|(
name|sqlite3
modifier|*
parameter_list|,
name|int
name|id
parameter_list|,
name|int
name|newVal
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Run-Time Limit Categories ** KEYWORDS: {limit category} {*limit categories} ** ** These constants define various performance limits ** that can be lowered at run-time using [sqlite3_limit()]. ** The synopsis of the meanings of the various limits is shown below. ** Additional information is available at [limits | Limits in SQLite]. ** **<dl> ** [[SQLITE_LIMIT_LENGTH]] ^(<dt>SQLITE_LIMIT_LENGTH</dt> **<dd>The maximum size of any string or BLOB or table row, in bytes.<dd>)^ ** ** [[SQLITE_LIMIT_SQL_LENGTH]] ^(<dt>SQLITE_LIMIT_SQL_LENGTH</dt> **<dd>The maximum length of an SQL statement, in bytes.</dd>)^ ** ** [[SQLITE_LIMIT_COLUMN]] ^(<dt>SQLITE_LIMIT_COLUMN</dt> **<dd>The maximum number of columns in a table definition or in the ** result set of a [SELECT] or the maximum number of columns in an index ** or in an ORDER BY or GROUP BY clause.</dd>)^ ** ** [[SQLITE_LIMIT_EXPR_DEPTH]] ^(<dt>SQLITE_LIMIT_EXPR_DEPTH</dt> **<dd>The maximum depth of the parse tree on any expression.</dd>)^ ** ** [[SQLITE_LIMIT_COMPOUND_SELECT]] ^(<dt>SQLITE_LIMIT_COMPOUND_SELECT</dt> **<dd>The maximum number of terms in a compound SELECT statement.</dd>)^ ** ** [[SQLITE_LIMIT_VDBE_OP]] ^(<dt>SQLITE_LIMIT_VDBE_OP</dt> **<dd>The maximum number of instructions in a virtual machine program ** used to implement an SQL statement.  This limit is not currently ** enforced, though that might be added in some future release of ** SQLite.</dd>)^ ** ** [[SQLITE_LIMIT_FUNCTION_ARG]] ^(<dt>SQLITE_LIMIT_FUNCTION_ARG</dt> **<dd>The maximum number of arguments on a function.</dd>)^ ** ** [[SQLITE_LIMIT_ATTACHED]] ^(<dt>SQLITE_LIMIT_ATTACHED</dt> **<dd>The maximum number of [ATTACH | attached databases].)^</dd> ** ** [[SQLITE_LIMIT_LIKE_PATTERN_LENGTH]] ** ^(<dt>SQLITE_LIMIT_LIKE_PATTERN_LENGTH</dt> **<dd>The maximum length of the pattern argument to the [LIKE] or ** [GLOB] operators.</dd>)^ ** ** [[SQLITE_LIMIT_VARIABLE_NUMBER]] ** ^(<dt>SQLITE_LIMIT_VARIABLE_NUMBER</dt> **<dd>The maximum index number of any [parameter] in an SQL statement.)^ ** ** [[SQLITE_LIMIT_TRIGGER_DEPTH]] ^(<dt>SQLITE_LIMIT_TRIGGER_DEPTH</dt> **<dd>The maximum depth of recursion for triggers.</dd>)^ ** ** [[SQLITE_LIMIT_WORKER_THREADS]] ^(<dt>SQLITE_LIMIT_WORKER_THREADS</dt> **<dd>The maximum number of auxiliary worker threads that a single ** [prepared statement] may start.</dd>)^ **</dl> */
define|#
directive|define
name|SQLITE_LIMIT_LENGTH
value|0
define|#
directive|define
name|SQLITE_LIMIT_SQL_LENGTH
value|1
define|#
directive|define
name|SQLITE_LIMIT_COLUMN
value|2
define|#
directive|define
name|SQLITE_LIMIT_EXPR_DEPTH
value|3
define|#
directive|define
name|SQLITE_LIMIT_COMPOUND_SELECT
value|4
define|#
directive|define
name|SQLITE_LIMIT_VDBE_OP
value|5
define|#
directive|define
name|SQLITE_LIMIT_FUNCTION_ARG
value|6
define|#
directive|define
name|SQLITE_LIMIT_ATTACHED
value|7
define|#
directive|define
name|SQLITE_LIMIT_LIKE_PATTERN_LENGTH
value|8
define|#
directive|define
name|SQLITE_LIMIT_VARIABLE_NUMBER
value|9
define|#
directive|define
name|SQLITE_LIMIT_TRIGGER_DEPTH
value|10
define|#
directive|define
name|SQLITE_LIMIT_WORKER_THREADS
value|11
comment|/* ** CAPI3REF: Compiling An SQL Statement ** KEYWORDS: {SQL statement compiler} ** METHOD: sqlite3 ** CONSTRUCTOR: sqlite3_stmt ** ** To execute an SQL query, it must first be compiled into a byte-code ** program using one of these routines. ** ** The first argument, "db", is a [database connection] obtained from a ** prior successful call to [sqlite3_open()], [sqlite3_open_v2()] or ** [sqlite3_open16()].  The database connection must not have been closed. ** ** The second argument, "zSql", is the statement to be compiled, encoded ** as either UTF-8 or UTF-16.  The sqlite3_prepare() and sqlite3_prepare_v2() ** interfaces use UTF-8, and sqlite3_prepare16() and sqlite3_prepare16_v2() ** use UTF-16. ** ** ^If the nByte argument is negative, then zSql is read up to the ** first zero terminator. ^If nByte is positive, then it is the ** number of bytes read from zSql.  ^If nByte is zero, then no prepared ** statement is generated. ** If the caller knows that the supplied string is nul-terminated, then ** there is a small performance advantage to passing an nByte parameter that ** is the number of bytes in the input string<i>including</i> ** the nul-terminator. ** ** ^If pzTail is not NULL then *pzTail is made to point to the first byte ** past the end of the first SQL statement in zSql.  These routines only ** compile the first statement in zSql, so *pzTail is left pointing to ** what remains uncompiled. ** ** ^*ppStmt is left pointing to a compiled [prepared statement] that can be ** executed using [sqlite3_step()].  ^If there is an error, *ppStmt is set ** to NULL.  ^If the input text contains no SQL (if the input is an empty ** string or a comment) then *ppStmt is set to NULL. ** The calling procedure is responsible for deleting the compiled ** SQL statement using [sqlite3_finalize()] after it has finished with it. ** ppStmt may not be NULL. ** ** ^On success, the sqlite3_prepare() family of routines return [SQLITE_OK]; ** otherwise an [error code] is returned. ** ** The sqlite3_prepare_v2() and sqlite3_prepare16_v2() interfaces are ** recommended for all new programs. The two older interfaces are retained ** for backwards compatibility, but their use is discouraged. ** ^In the "v2" interfaces, the prepared statement ** that is returned (the [sqlite3_stmt] object) contains a copy of the ** original SQL text. This causes the [sqlite3_step()] interface to ** behave differently in three ways: ** **<ol> **<li> ** ^If the database schema changes, instead of returning [SQLITE_SCHEMA] as it ** always used to do, [sqlite3_step()] will automatically recompile the SQL ** statement and try to run it again. As many as [SQLITE_MAX_SCHEMA_RETRY] ** retries will occur before sqlite3_step() gives up and returns an error. **</li> ** **<li> ** ^When an error occurs, [sqlite3_step()] will return one of the detailed ** [error codes] or [extended error codes].  ^The legacy behavior was that ** [sqlite3_step()] would only return a generic [SQLITE_ERROR] result code ** and the application would have to make a second call to [sqlite3_reset()] ** in order to find the underlying cause of the problem. With the "v2" prepare ** interfaces, the underlying reason for the error is returned immediately. **</li> ** **<li> ** ^If the specific value bound to [parameter | host parameter] in the  ** WHERE clause might influence the choice of query plan for a statement, ** then the statement will be automatically recompiled, as if there had been  ** a schema change, on the first  [sqlite3_step()] call following any change ** to the [sqlite3_bind_text | bindings] of that [parameter].  ** ^The specific value of WHERE-clause [parameter] might influence the  ** choice of query plan if the parameter is the left-hand side of a [LIKE] ** or [GLOB] operator or if the parameter is compared to an indexed column ** and the [SQLITE_ENABLE_STAT3] compile-time option is enabled. **</li> **</ol> */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_prepare
parameter_list|(
name|sqlite3
modifier|*
name|db
parameter_list|,
comment|/* Database handle */
specifier|const
name|char
modifier|*
name|zSql
parameter_list|,
comment|/* SQL statement, UTF-8 encoded */
name|int
name|nByte
parameter_list|,
comment|/* Maximum length of zSql in bytes. */
name|sqlite3_stmt
modifier|*
modifier|*
name|ppStmt
parameter_list|,
comment|/* OUT: Statement handle */
specifier|const
name|char
modifier|*
modifier|*
name|pzTail
comment|/* OUT: Pointer to unused portion of zSql */
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_prepare_v2
parameter_list|(
name|sqlite3
modifier|*
name|db
parameter_list|,
comment|/* Database handle */
specifier|const
name|char
modifier|*
name|zSql
parameter_list|,
comment|/* SQL statement, UTF-8 encoded */
name|int
name|nByte
parameter_list|,
comment|/* Maximum length of zSql in bytes. */
name|sqlite3_stmt
modifier|*
modifier|*
name|ppStmt
parameter_list|,
comment|/* OUT: Statement handle */
specifier|const
name|char
modifier|*
modifier|*
name|pzTail
comment|/* OUT: Pointer to unused portion of zSql */
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_prepare16
parameter_list|(
name|sqlite3
modifier|*
name|db
parameter_list|,
comment|/* Database handle */
specifier|const
name|void
modifier|*
name|zSql
parameter_list|,
comment|/* SQL statement, UTF-16 encoded */
name|int
name|nByte
parameter_list|,
comment|/* Maximum length of zSql in bytes. */
name|sqlite3_stmt
modifier|*
modifier|*
name|ppStmt
parameter_list|,
comment|/* OUT: Statement handle */
specifier|const
name|void
modifier|*
modifier|*
name|pzTail
comment|/* OUT: Pointer to unused portion of zSql */
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_prepare16_v2
parameter_list|(
name|sqlite3
modifier|*
name|db
parameter_list|,
comment|/* Database handle */
specifier|const
name|void
modifier|*
name|zSql
parameter_list|,
comment|/* SQL statement, UTF-16 encoded */
name|int
name|nByte
parameter_list|,
comment|/* Maximum length of zSql in bytes. */
name|sqlite3_stmt
modifier|*
modifier|*
name|ppStmt
parameter_list|,
comment|/* OUT: Statement handle */
specifier|const
name|void
modifier|*
modifier|*
name|pzTail
comment|/* OUT: Pointer to unused portion of zSql */
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Retrieving Statement SQL ** METHOD: sqlite3_stmt ** ** ^This interface can be used to retrieve a saved copy of the original ** SQL text used to create a [prepared statement] if that statement was ** compiled using either [sqlite3_prepare_v2()] or [sqlite3_prepare16_v2()]. */
name|SQLITE_API
specifier|const
name|char
modifier|*
name|SQLITE_STDCALL
name|sqlite3_sql
parameter_list|(
name|sqlite3_stmt
modifier|*
name|pStmt
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Determine If An SQL Statement Writes The Database ** METHOD: sqlite3_stmt ** ** ^The sqlite3_stmt_readonly(X) interface returns true (non-zero) if ** and only if the [prepared statement] X makes no direct changes to ** the content of the database file. ** ** Note that [application-defined SQL functions] or ** [virtual tables] might change the database indirectly as a side effect.   ** ^(For example, if an application defines a function "eval()" that  ** calls [sqlite3_exec()], then the following SQL statement would ** change the database file through side-effects: ** **<blockquote><pre> **    SELECT eval('DELETE FROM t1') FROM t2; **</pre></blockquote> ** ** But because the [SELECT] statement does not change the database file ** directly, sqlite3_stmt_readonly() would still return true.)^ ** ** ^Transaction control statements such as [BEGIN], [COMMIT], [ROLLBACK], ** [SAVEPOINT], and [RELEASE] cause sqlite3_stmt_readonly() to return true, ** since the statements themselves do not actually modify the database but ** rather they control the timing of when other statements modify the  ** database.  ^The [ATTACH] and [DETACH] statements also cause ** sqlite3_stmt_readonly() to return true since, while those statements ** change the configuration of a database connection, they do not make  ** changes to the content of the database files on disk. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_stmt_readonly
parameter_list|(
name|sqlite3_stmt
modifier|*
name|pStmt
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Determine If A Prepared Statement Has Been Reset ** METHOD: sqlite3_stmt ** ** ^The sqlite3_stmt_busy(S) interface returns true (non-zero) if the ** [prepared statement] S has been stepped at least once using  ** [sqlite3_step(S)] but has not run to completion and/or has not  ** been reset using [sqlite3_reset(S)].  ^The sqlite3_stmt_busy(S) ** interface returns false if S is a NULL pointer.  If S is not a  ** NULL pointer and is not a pointer to a valid [prepared statement] ** object, then the behavior is undefined and probably undesirable. ** ** This interface can be used in combination [sqlite3_next_stmt()] ** to locate all prepared statements associated with a database  ** connection that are in need of being reset.  This can be used, ** for example, in diagnostic routines to search for prepared  ** statements that are holding a transaction open. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_stmt_busy
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Dynamically Typed Value Object ** KEYWORDS: {protected sqlite3_value} {unprotected sqlite3_value} ** ** SQLite uses the sqlite3_value object to represent all values ** that can be stored in a database table. SQLite uses dynamic typing ** for the values it stores.  ^Values stored in sqlite3_value objects ** can be integers, floating point values, strings, BLOBs, or NULL. ** ** An sqlite3_value object may be either "protected" or "unprotected". ** Some interfaces require a protected sqlite3_value.  Other interfaces ** will accept either a protected or an unprotected sqlite3_value. ** Every interface that accepts sqlite3_value arguments specifies ** whether or not it requires a protected sqlite3_value.  The ** [sqlite3_value_dup()] interface can be used to construct a new  ** protected sqlite3_value from an unprotected sqlite3_value. ** ** The terms "protected" and "unprotected" refer to whether or not ** a mutex is held.  An internal mutex is held for a protected ** sqlite3_value object but no mutex is held for an unprotected ** sqlite3_value object.  If SQLite is compiled to be single-threaded ** (with [SQLITE_THREADSAFE=0] and with [sqlite3_threadsafe()] returning 0) ** or if SQLite is run in one of reduced mutex modes  ** [SQLITE_CONFIG_SINGLETHREAD] or [SQLITE_CONFIG_MULTITHREAD] ** then there is no distinction between protected and unprotected ** sqlite3_value objects and they can be used interchangeably.  However, ** for maximum code portability it is recommended that applications ** still make the distinction between protected and unprotected ** sqlite3_value objects even when not strictly required. ** ** ^The sqlite3_value objects that are passed as parameters into the ** implementation of [application-defined SQL functions] are protected. ** ^The sqlite3_value object returned by ** [sqlite3_column_value()] is unprotected. ** Unprotected sqlite3_value objects may only be used with ** [sqlite3_result_value()] and [sqlite3_bind_value()]. ** The [sqlite3_value_blob | sqlite3_value_type()] family of ** interfaces require protected sqlite3_value objects. */
typedef|typedef
name|struct
name|Mem
name|sqlite3_value
typedef|;
comment|/* ** CAPI3REF: SQL Function Context Object ** ** The context in which an SQL function executes is stored in an ** sqlite3_context object.  ^A pointer to an sqlite3_context object ** is always first parameter to [application-defined SQL functions]. ** The application-defined SQL function implementation will pass this ** pointer through into calls to [sqlite3_result_int | sqlite3_result()], ** [sqlite3_aggregate_context()], [sqlite3_user_data()], ** [sqlite3_context_db_handle()], [sqlite3_get_auxdata()], ** and/or [sqlite3_set_auxdata()]. */
typedef|typedef
name|struct
name|sqlite3_context
name|sqlite3_context
typedef|;
comment|/* ** CAPI3REF: Binding Values To Prepared Statements ** KEYWORDS: {host parameter} {host parameters} {host parameter name} ** KEYWORDS: {SQL parameter} {SQL parameters} {parameter binding} ** METHOD: sqlite3_stmt ** ** ^(In the SQL statement text input to [sqlite3_prepare_v2()] and its variants, ** literals may be replaced by a [parameter] that matches one of following ** templates: ** **<ul> **<li>  ? **<li>  ?NNN **<li>  :VVV **<li>  @VVV **<li>  $VVV **</ul> ** ** In the templates above, NNN represents an integer literal, ** and VVV represents an alphanumeric identifier.)^  ^The values of these ** parameters (also called "host parameter names" or "SQL parameters") ** can be set using the sqlite3_bind_*() routines defined here. ** ** ^The first argument to the sqlite3_bind_*() routines is always ** a pointer to the [sqlite3_stmt] object returned from ** [sqlite3_prepare_v2()] or its variants. ** ** ^The second argument is the index of the SQL parameter to be set. ** ^The leftmost SQL parameter has an index of 1.  ^When the same named ** SQL parameter is used more than once, second and subsequent ** occurrences have the same index as the first occurrence. ** ^The index for named parameters can be looked up using the ** [sqlite3_bind_parameter_index()] API if desired.  ^The index ** for "?NNN" parameters is the value of NNN. ** ^The NNN value must be between 1 and the [sqlite3_limit()] ** parameter [SQLITE_LIMIT_VARIABLE_NUMBER] (default value: 999). ** ** ^The third argument is the value to bind to the parameter. ** ^If the third parameter to sqlite3_bind_text() or sqlite3_bind_text16() ** or sqlite3_bind_blob() is a NULL pointer then the fourth parameter ** is ignored and the end result is the same as sqlite3_bind_null(). ** ** ^(In those routines that have a fourth argument, its value is the ** number of bytes in the parameter.  To be clear: the value is the ** number of<u>bytes</u> in the value, not the number of characters.)^ ** ^If the fourth parameter to sqlite3_bind_text() or sqlite3_bind_text16() ** is negative, then the length of the string is ** the number of bytes up to the first zero terminator. ** If the fourth parameter to sqlite3_bind_blob() is negative, then ** the behavior is undefined. ** If a non-negative fourth parameter is provided to sqlite3_bind_text() ** or sqlite3_bind_text16() or sqlite3_bind_text64() then ** that parameter must be the byte offset ** where the NUL terminator would occur assuming the string were NUL ** terminated.  If any NUL characters occur at byte offsets less than  ** the value of the fourth parameter then the resulting string value will ** contain embedded NULs.  The result of expressions involving strings ** with embedded NULs is undefined. ** ** ^The fifth argument to the BLOB and string binding interfaces ** is a destructor used to dispose of the BLOB or ** string after SQLite has finished with it.  ^The destructor is called ** to dispose of the BLOB or string even if the call to bind API fails. ** ^If the fifth argument is ** the special value [SQLITE_STATIC], then SQLite assumes that the ** information is in static, unmanaged space and does not need to be freed. ** ^If the fifth argument has the value [SQLITE_TRANSIENT], then ** SQLite makes its own private copy of the data immediately, before ** the sqlite3_bind_*() routine returns. ** ** ^The sixth argument to sqlite3_bind_text64() must be one of ** [SQLITE_UTF8], [SQLITE_UTF16], [SQLITE_UTF16BE], or [SQLITE_UTF16LE] ** to specify the encoding of the text in the third parameter.  If ** the sixth argument to sqlite3_bind_text64() is not one of the ** allowed values shown above, or if the text encoding is different ** from the encoding specified by the sixth parameter, then the behavior ** is undefined. ** ** ^The sqlite3_bind_zeroblob() routine binds a BLOB of length N that ** is filled with zeroes.  ^A zeroblob uses a fixed amount of memory ** (just an integer to hold its size) while it is being processed. ** Zeroblobs are intended to serve as placeholders for BLOBs whose ** content is later written using ** [sqlite3_blob_open | incremental BLOB I/O] routines. ** ^A negative value for the zeroblob results in a zero-length BLOB. ** ** ^If any of the sqlite3_bind_*() routines are called with a NULL pointer ** for the [prepared statement] or with a prepared statement for which ** [sqlite3_step()] has been called more recently than [sqlite3_reset()], ** then the call will return [SQLITE_MISUSE].  If any sqlite3_bind_() ** routine is passed a [prepared statement] that has been finalized, the ** result is undefined and probably harmful. ** ** ^Bindings are not cleared by the [sqlite3_reset()] routine. ** ^Unbound parameters are interpreted as NULL. ** ** ^The sqlite3_bind_* routines return [SQLITE_OK] on success or an ** [error code] if anything goes wrong. ** ^[SQLITE_TOOBIG] might be returned if the size of a string or BLOB ** exceeds limits imposed by [sqlite3_limit]([SQLITE_LIMIT_LENGTH]) or ** [SQLITE_MAX_LENGTH]. ** ^[SQLITE_RANGE] is returned if the parameter ** index is out of range.  ^[SQLITE_NOMEM] is returned if malloc() fails. ** ** See also: [sqlite3_bind_parameter_count()], ** [sqlite3_bind_parameter_name()], and [sqlite3_bind_parameter_index()]. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_bind_blob
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|int
name|n
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_bind_blob64
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|sqlite3_uint64
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_bind_double
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|,
name|int
parameter_list|,
name|double
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_bind_int
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_bind_int64
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|,
name|int
parameter_list|,
name|sqlite3_int64
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_bind_null
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_bind_text
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_bind_text16
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_bind_text64
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|sqlite3_uint64
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|,
name|unsigned
name|char
name|encoding
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_bind_value
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|sqlite3_value
modifier|*
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_bind_zeroblob
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_bind_zeroblob64
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|,
name|int
parameter_list|,
name|sqlite3_uint64
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Number Of SQL Parameters ** METHOD: sqlite3_stmt ** ** ^This routine can be used to find the number of [SQL parameters] ** in a [prepared statement].  SQL parameters are tokens of the ** form "?", "?NNN", ":AAA", "$AAA", or "@AAA" that serve as ** placeholders for values that are [sqlite3_bind_blob | bound] ** to the parameters at a later time. ** ** ^(This routine actually returns the index of the largest (rightmost) ** parameter. For all forms except ?NNN, this will correspond to the ** number of unique parameters.  If parameters of the ?NNN form are used, ** there may be gaps in the list.)^ ** ** See also: [sqlite3_bind_blob|sqlite3_bind()], ** [sqlite3_bind_parameter_name()], and ** [sqlite3_bind_parameter_index()]. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_bind_parameter_count
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Name Of A Host Parameter ** METHOD: sqlite3_stmt ** ** ^The sqlite3_bind_parameter_name(P,N) interface returns ** the name of the N-th [SQL parameter] in the [prepared statement] P. ** ^(SQL parameters of the form "?NNN" or ":AAA" or "@AAA" or "$AAA" ** have a name which is the string "?NNN" or ":AAA" or "@AAA" or "$AAA" ** respectively. ** In other words, the initial ":" or "$" or "@" or "?" ** is included as part of the name.)^ ** ^Parameters of the form "?" without a following integer have no name ** and are referred to as "nameless" or "anonymous parameters". ** ** ^The first host parameter has an index of 1, not 0. ** ** ^If the value N is out of range or if the N-th parameter is ** nameless, then NULL is returned.  ^The returned string is ** always in UTF-8 encoding even if the named parameter was ** originally specified as UTF-16 in [sqlite3_prepare16()] or ** [sqlite3_prepare16_v2()]. ** ** See also: [sqlite3_bind_blob|sqlite3_bind()], ** [sqlite3_bind_parameter_count()], and ** [sqlite3_bind_parameter_index()]. */
name|SQLITE_API
specifier|const
name|char
modifier|*
name|SQLITE_STDCALL
name|sqlite3_bind_parameter_name
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Index Of A Parameter With A Given Name ** METHOD: sqlite3_stmt ** ** ^Return the index of an SQL parameter given its name.  ^The ** index value returned is suitable for use as the second ** parameter to [sqlite3_bind_blob|sqlite3_bind()].  ^A zero ** is returned if no matching parameter is found.  ^The parameter ** name must be given in UTF-8 even if the original statement ** was prepared from UTF-16 text using [sqlite3_prepare16_v2()]. ** ** See also: [sqlite3_bind_blob|sqlite3_bind()], ** [sqlite3_bind_parameter_count()], and ** [sqlite3_bind_parameter_index()]. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_bind_parameter_index
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|zName
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Reset All Bindings On A Prepared Statement ** METHOD: sqlite3_stmt ** ** ^Contrary to the intuition of many, [sqlite3_reset()] does not reset ** the [sqlite3_bind_blob | bindings] on a [prepared statement]. ** ^Use this routine to reset all host parameters to NULL. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_clear_bindings
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Number Of Columns In A Result Set ** METHOD: sqlite3_stmt ** ** ^Return the number of columns in the result set returned by the ** [prepared statement]. ^This routine returns 0 if pStmt is an SQL ** statement that does not return data (for example an [UPDATE]). ** ** See also: [sqlite3_data_count()] */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_column_count
parameter_list|(
name|sqlite3_stmt
modifier|*
name|pStmt
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Column Names In A Result Set ** METHOD: sqlite3_stmt ** ** ^These routines return the name assigned to a particular column ** in the result set of a [SELECT] statement.  ^The sqlite3_column_name() ** interface returns a pointer to a zero-terminated UTF-8 string ** and sqlite3_column_name16() returns a pointer to a zero-terminated ** UTF-16 string.  ^The first parameter is the [prepared statement] ** that implements the [SELECT] statement. ^The second parameter is the ** column number.  ^The leftmost column is number 0. ** ** ^The returned string pointer is valid until either the [prepared statement] ** is destroyed by [sqlite3_finalize()] or until the statement is automatically ** reprepared by the first call to [sqlite3_step()] for a particular run ** or until the next call to ** sqlite3_column_name() or sqlite3_column_name16() on the same column. ** ** ^If sqlite3_malloc() fails during the processing of either routine ** (for example during a conversion from UTF-8 to UTF-16) then a ** NULL pointer is returned. ** ** ^The name of a result column is the value of the "AS" clause for ** that column, if there is an AS clause.  If there is no AS clause ** then the name of the column is unspecified and may change from ** one release of SQLite to the next. */
name|SQLITE_API
specifier|const
name|char
modifier|*
name|SQLITE_STDCALL
name|sqlite3_column_name
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|,
name|int
name|N
parameter_list|)
function_decl|;
name|SQLITE_API
specifier|const
name|void
modifier|*
name|SQLITE_STDCALL
name|sqlite3_column_name16
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|,
name|int
name|N
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Source Of Data In A Query Result ** METHOD: sqlite3_stmt ** ** ^These routines provide a means to determine the database, table, and ** table column that is the origin of a particular result column in ** [SELECT] statement. ** ^The name of the database or table or column can be returned as ** either a UTF-8 or UTF-16 string.  ^The _database_ routines return ** the database name, the _table_ routines return the table name, and ** the origin_ routines return the column name. ** ^The returned string is valid until the [prepared statement] is destroyed ** using [sqlite3_finalize()] or until the statement is automatically ** reprepared by the first call to [sqlite3_step()] for a particular run ** or until the same information is requested ** again in a different encoding. ** ** ^The names returned are the original un-aliased names of the ** database, table, and column. ** ** ^The first argument to these interfaces is a [prepared statement]. ** ^These functions return information about the Nth result column returned by ** the statement, where N is the second function argument. ** ^The left-most column is column 0 for these routines. ** ** ^If the Nth column returned by the statement is an expression or ** subquery and is not a column value, then all of these functions return ** NULL.  ^These routine might also return NULL if a memory allocation error ** occurs.  ^Otherwise, they return the name of the attached database, table, ** or column that query result column was extracted from. ** ** ^As with all other SQLite APIs, those whose names end with "16" return ** UTF-16 encoded strings and the other functions return UTF-8. ** ** ^These APIs are only available if the library was compiled with the ** [SQLITE_ENABLE_COLUMN_METADATA] C-preprocessor symbol. ** ** If two or more threads call one or more of these routines against the same ** prepared statement and column at the same time then the results are ** undefined. ** ** If two or more threads call one or more ** [sqlite3_column_database_name | column metadata interfaces] ** for the same [prepared statement] and result column ** at the same time then the results are undefined. */
name|SQLITE_API
specifier|const
name|char
modifier|*
name|SQLITE_STDCALL
name|sqlite3_column_database_name
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|SQLITE_API
specifier|const
name|void
modifier|*
name|SQLITE_STDCALL
name|sqlite3_column_database_name16
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|SQLITE_API
specifier|const
name|char
modifier|*
name|SQLITE_STDCALL
name|sqlite3_column_table_name
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|SQLITE_API
specifier|const
name|void
modifier|*
name|SQLITE_STDCALL
name|sqlite3_column_table_name16
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|SQLITE_API
specifier|const
name|char
modifier|*
name|SQLITE_STDCALL
name|sqlite3_column_origin_name
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|SQLITE_API
specifier|const
name|void
modifier|*
name|SQLITE_STDCALL
name|sqlite3_column_origin_name16
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Declared Datatype Of A Query Result ** METHOD: sqlite3_stmt ** ** ^(The first parameter is a [prepared statement]. ** If this statement is a [SELECT] statement and the Nth column of the ** returned result set of that [SELECT] is a table column (not an ** expression or subquery) then the declared type of the table ** column is returned.)^  ^If the Nth column of the result set is an ** expression or subquery, then a NULL pointer is returned. ** ^The returned string is always UTF-8 encoded. ** ** ^(For example, given the database schema: ** ** CREATE TABLE t1(c1 VARIANT); ** ** and the following statement to be compiled: ** ** SELECT c1 + 1, c1 FROM t1; ** ** this routine would return the string "VARIANT" for the second result ** column (i==1), and a NULL pointer for the first result column (i==0).)^ ** ** ^SQLite uses dynamic run-time typing.  ^So just because a column ** is declared to contain a particular type does not mean that the ** data stored in that column is of the declared type.  SQLite is ** strongly typed, but the typing is dynamic not static.  ^Type ** is associated with individual values, not with the containers ** used to hold those values. */
name|SQLITE_API
specifier|const
name|char
modifier|*
name|SQLITE_STDCALL
name|sqlite3_column_decltype
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|SQLITE_API
specifier|const
name|void
modifier|*
name|SQLITE_STDCALL
name|sqlite3_column_decltype16
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Evaluate An SQL Statement ** METHOD: sqlite3_stmt ** ** After a [prepared statement] has been prepared using either ** [sqlite3_prepare_v2()] or [sqlite3_prepare16_v2()] or one of the legacy ** interfaces [sqlite3_prepare()] or [sqlite3_prepare16()], this function ** must be called one or more times to evaluate the statement. ** ** The details of the behavior of the sqlite3_step() interface depend ** on whether the statement was prepared using the newer "v2" interface ** [sqlite3_prepare_v2()] and [sqlite3_prepare16_v2()] or the older legacy ** interface [sqlite3_prepare()] and [sqlite3_prepare16()].  The use of the ** new "v2" interface is recommended for new applications but the legacy ** interface will continue to be supported. ** ** ^In the legacy interface, the return value will be either [SQLITE_BUSY], ** [SQLITE_DONE], [SQLITE_ROW], [SQLITE_ERROR], or [SQLITE_MISUSE]. ** ^With the "v2" interface, any of the other [result codes] or ** [extended result codes] might be returned as well. ** ** ^[SQLITE_BUSY] means that the database engine was unable to acquire the ** database locks it needs to do its job.  ^If the statement is a [COMMIT] ** or occurs outside of an explicit transaction, then you can retry the ** statement.  If the statement is not a [COMMIT] and occurs within an ** explicit transaction then you should rollback the transaction before ** continuing. ** ** ^[SQLITE_DONE] means that the statement has finished executing ** successfully.  sqlite3_step() should not be called again on this virtual ** machine without first calling [sqlite3_reset()] to reset the virtual ** machine back to its initial state. ** ** ^If the SQL statement being executed returns any data, then [SQLITE_ROW] ** is returned each time a new row of data is ready for processing by the ** caller. The values may be accessed using the [column access functions]. ** sqlite3_step() is called again to retrieve the next row of data. ** ** ^[SQLITE_ERROR] means that a run-time error (such as a constraint ** violation) has occurred.  sqlite3_step() should not be called again on ** the VM. More information may be found by calling [sqlite3_errmsg()]. ** ^With the legacy interface, a more specific error code (for example, ** [SQLITE_INTERRUPT], [SQLITE_SCHEMA], [SQLITE_CORRUPT], and so forth) ** can be obtained by calling [sqlite3_reset()] on the ** [prepared statement].  ^In the "v2" interface, ** the more specific error code is returned directly by sqlite3_step(). ** ** [SQLITE_MISUSE] means that the this routine was called inappropriately. ** Perhaps it was called on a [prepared statement] that has ** already been [sqlite3_finalize | finalized] or on one that had ** previously returned [SQLITE_ERROR] or [SQLITE_DONE].  Or it could ** be the case that the same database connection is being used by two or ** more threads at the same moment in time. ** ** For all versions of SQLite up to and including 3.6.23.1, a call to ** [sqlite3_reset()] was required after sqlite3_step() returned anything ** other than [SQLITE_ROW] before any subsequent invocation of ** sqlite3_step().  Failure to reset the prepared statement using  ** [sqlite3_reset()] would result in an [SQLITE_MISUSE] return from ** sqlite3_step().  But after version 3.6.23.1, sqlite3_step() began ** calling [sqlite3_reset()] automatically in this circumstance rather ** than returning [SQLITE_MISUSE].  This is not considered a compatibility ** break because any application that ever receives an SQLITE_MISUSE error ** is broken by definition.  The [SQLITE_OMIT_AUTORESET] compile-time option ** can be used to restore the legacy behavior. ** **<b>Goofy Interface Alert:</b> In the legacy interface, the sqlite3_step() ** API always returns a generic error code, [SQLITE_ERROR], following any ** error other than [SQLITE_BUSY] and [SQLITE_MISUSE].  You must call ** [sqlite3_reset()] or [sqlite3_finalize()] in order to find one of the ** specific [error codes] that better describes the error. ** We admit that this is a goofy design.  The problem has been fixed ** with the "v2" interface.  If you prepare all of your SQL statements ** using either [sqlite3_prepare_v2()] or [sqlite3_prepare16_v2()] instead ** of the legacy [sqlite3_prepare()] and [sqlite3_prepare16()] interfaces, ** then the more specific [error codes] are returned directly ** by sqlite3_step().  The use of the "v2" interface is recommended. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_step
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Number of columns in a result set ** METHOD: sqlite3_stmt ** ** ^The sqlite3_data_count(P) interface returns the number of columns in the ** current row of the result set of [prepared statement] P. ** ^If prepared statement P does not have results ready to return ** (via calls to the [sqlite3_column_int | sqlite3_column_*()] of ** interfaces) then sqlite3_data_count(P) returns 0. ** ^The sqlite3_data_count(P) routine also returns 0 if P is a NULL pointer. ** ^The sqlite3_data_count(P) routine returns 0 if the previous call to ** [sqlite3_step](P) returned [SQLITE_DONE].  ^The sqlite3_data_count(P) ** will return non-zero if previous call to [sqlite3_step](P) returned ** [SQLITE_ROW], except in the case of the [PRAGMA incremental_vacuum] ** where it always returns zero since each step of that multi-step ** pragma returns 0 columns of data. ** ** See also: [sqlite3_column_count()] */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_data_count
parameter_list|(
name|sqlite3_stmt
modifier|*
name|pStmt
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Fundamental Datatypes ** KEYWORDS: SQLITE_TEXT ** ** ^(Every value in SQLite has one of five fundamental datatypes: ** **<ul> **<li> 64-bit signed integer **<li> 64-bit IEEE floating point number **<li> string **<li> BLOB **<li> NULL **</ul>)^ ** ** These constants are codes for each of those types. ** ** Note that the SQLITE_TEXT constant was also used in SQLite version 2 ** for a completely different meaning.  Software that links against both ** SQLite version 2 and SQLite version 3 should use SQLITE3_TEXT, not ** SQLITE_TEXT. */
define|#
directive|define
name|SQLITE_INTEGER
value|1
define|#
directive|define
name|SQLITE_FLOAT
value|2
define|#
directive|define
name|SQLITE_BLOB
value|4
define|#
directive|define
name|SQLITE_NULL
value|5
ifdef|#
directive|ifdef
name|SQLITE_TEXT
undef|#
directive|undef
name|SQLITE_TEXT
else|#
directive|else
define|#
directive|define
name|SQLITE_TEXT
value|3
endif|#
directive|endif
define|#
directive|define
name|SQLITE3_TEXT
value|3
comment|/* ** CAPI3REF: Result Values From A Query ** KEYWORDS: {column access functions} ** METHOD: sqlite3_stmt ** ** ^These routines return information about a single column of the current ** result row of a query.  ^In every case the first argument is a pointer ** to the [prepared statement] that is being evaluated (the [sqlite3_stmt*] ** that was returned from [sqlite3_prepare_v2()] or one of its variants) ** and the second argument is the index of the column for which information ** should be returned. ^The leftmost column of the result set has the index 0. ** ^The number of columns in the result can be determined using ** [sqlite3_column_count()]. ** ** If the SQL statement does not currently point to a valid row, or if the ** column index is out of range, the result is undefined. ** These routines may only be called when the most recent call to ** [sqlite3_step()] has returned [SQLITE_ROW] and neither ** [sqlite3_reset()] nor [sqlite3_finalize()] have been called subsequently. ** If any of these routines are called after [sqlite3_reset()] or ** [sqlite3_finalize()] or after [sqlite3_step()] has returned ** something other than [SQLITE_ROW], the results are undefined. ** If [sqlite3_step()] or [sqlite3_reset()] or [sqlite3_finalize()] ** are called from a different thread while any of these routines ** are pending, then the results are undefined. ** ** ^The sqlite3_column_type() routine returns the ** [SQLITE_INTEGER | datatype code] for the initial data type ** of the result column.  ^The returned value is one of [SQLITE_INTEGER], ** [SQLITE_FLOAT], [SQLITE_TEXT], [SQLITE_BLOB], or [SQLITE_NULL].  The value ** returned by sqlite3_column_type() is only meaningful if no type ** conversions have occurred as described below.  After a type conversion, ** the value returned by sqlite3_column_type() is undefined.  Future ** versions of SQLite may change the behavior of sqlite3_column_type() ** following a type conversion. ** ** ^If the result is a BLOB or UTF-8 string then the sqlite3_column_bytes() ** routine returns the number of bytes in that BLOB or string. ** ^If the result is a UTF-16 string, then sqlite3_column_bytes() converts ** the string to UTF-8 and then returns the number of bytes. ** ^If the result is a numeric value then sqlite3_column_bytes() uses ** [sqlite3_snprintf()] to convert that value to a UTF-8 string and returns ** the number of bytes in that string. ** ^If the result is NULL, then sqlite3_column_bytes() returns zero. ** ** ^If the result is a BLOB or UTF-16 string then the sqlite3_column_bytes16() ** routine returns the number of bytes in that BLOB or string. ** ^If the result is a UTF-8 string, then sqlite3_column_bytes16() converts ** the string to UTF-16 and then returns the number of bytes. ** ^If the result is a numeric value then sqlite3_column_bytes16() uses ** [sqlite3_snprintf()] to convert that value to a UTF-16 string and returns ** the number of bytes in that string. ** ^If the result is NULL, then sqlite3_column_bytes16() returns zero. ** ** ^The values returned by [sqlite3_column_bytes()] and  ** [sqlite3_column_bytes16()] do not include the zero terminators at the end ** of the string.  ^For clarity: the values returned by ** [sqlite3_column_bytes()] and [sqlite3_column_bytes16()] are the number of ** bytes in the string, not the number of characters. ** ** ^Strings returned by sqlite3_column_text() and sqlite3_column_text16(), ** even empty strings, are always zero-terminated.  ^The return ** value from sqlite3_column_blob() for a zero-length BLOB is a NULL pointer. ** **<b>Warning:</b> ^The object returned by [sqlite3_column_value()] is an ** [unprotected sqlite3_value] object.  In a multithreaded environment, ** an unprotected sqlite3_value object may only be used safely with ** [sqlite3_bind_value()] and [sqlite3_result_value()]. ** If the [unprotected sqlite3_value] object returned by ** [sqlite3_column_value()] is used in any other way, including calls ** to routines like [sqlite3_value_int()], [sqlite3_value_text()], ** or [sqlite3_value_bytes()], the behavior is not threadsafe. ** ** These routines attempt to convert the value where appropriate.  ^For ** example, if the internal representation is FLOAT and a text result ** is requested, [sqlite3_snprintf()] is used internally to perform the ** conversion automatically.  ^(The following table details the conversions ** that are applied: ** **<blockquote> **<table border="1"> **<tr><th> Internal<br>Type<th> Requested<br>Type<th>  Conversion ** **<tr><td>  NULL<td> INTEGER<td> Result is 0 **<tr><td>  NULL<td>  FLOAT<td> Result is 0.0 **<tr><td>  NULL<td>   TEXT<td> Result is a NULL pointer **<tr><td>  NULL<td>   BLOB<td> Result is a NULL pointer **<tr><td> INTEGER<td>  FLOAT<td> Convert from integer to float **<tr><td> INTEGER<td>   TEXT<td> ASCII rendering of the integer **<tr><td> INTEGER<td>   BLOB<td> Same as INTEGER->TEXT **<tr><td>  FLOAT<td> INTEGER<td> [CAST] to INTEGER **<tr><td>  FLOAT<td>   TEXT<td> ASCII rendering of the float **<tr><td>  FLOAT<td>   BLOB<td> [CAST] to BLOB **<tr><td>  TEXT<td> INTEGER<td> [CAST] to INTEGER **<tr><td>  TEXT<td>  FLOAT<td> [CAST] to REAL **<tr><td>  TEXT<td>   BLOB<td> No change **<tr><td>  BLOB<td> INTEGER<td> [CAST] to INTEGER **<tr><td>  BLOB<td>  FLOAT<td> [CAST] to REAL **<tr><td>  BLOB<td>   TEXT<td> Add a zero terminator if needed **</table> **</blockquote>)^ ** ** Note that when type conversions occur, pointers returned by prior ** calls to sqlite3_column_blob(), sqlite3_column_text(), and/or ** sqlite3_column_text16() may be invalidated. ** Type conversions and pointer invalidations might occur ** in the following cases: ** **<ul> **<li> The initial content is a BLOB and sqlite3_column_text() or **      sqlite3_column_text16() is called.  A zero-terminator might **      need to be added to the string.</li> **<li> The initial content is UTF-8 text and sqlite3_column_bytes16() or **      sqlite3_column_text16() is called.  The content must be converted **      to UTF-16.</li> **<li> The initial content is UTF-16 text and sqlite3_column_bytes() or **      sqlite3_column_text() is called.  The content must be converted **      to UTF-8.</li> **</ul> ** ** ^Conversions between UTF-16be and UTF-16le are always done in place and do ** not invalidate a prior pointer, though of course the content of the buffer ** that the prior pointer references will have been modified.  Other kinds ** of conversion are done in place when it is possible, but sometimes they ** are not possible and in those cases prior pointers are invalidated. ** ** The safest policy is to invoke these routines ** in one of the following ways: ** **<ul> **<li>sqlite3_column_text() followed by sqlite3_column_bytes()</li> **<li>sqlite3_column_blob() followed by sqlite3_column_bytes()</li> **<li>sqlite3_column_text16() followed by sqlite3_column_bytes16()</li> **</ul> ** ** In other words, you should call sqlite3_column_text(), ** sqlite3_column_blob(), or sqlite3_column_text16() first to force the result ** into the desired format, then invoke sqlite3_column_bytes() or ** sqlite3_column_bytes16() to find the size of the result.  Do not mix calls ** to sqlite3_column_text() or sqlite3_column_blob() with calls to ** sqlite3_column_bytes16(), and do not mix calls to sqlite3_column_text16() ** with calls to sqlite3_column_bytes(). ** ** ^The pointers returned are valid until a type conversion occurs as ** described above, or until [sqlite3_step()] or [sqlite3_reset()] or ** [sqlite3_finalize()] is called.  ^The memory space used to hold strings ** and BLOBs is freed automatically.  Do<em>not</em> pass the pointers returned ** from [sqlite3_column_blob()], [sqlite3_column_text()], etc. into ** [sqlite3_free()]. ** ** ^(If a memory allocation error occurs during the evaluation of any ** of these routines, a default value is returned.  The default value ** is either the integer 0, the floating point number 0.0, or a NULL ** pointer.  Subsequent calls to [sqlite3_errcode()] will return ** [SQLITE_NOMEM].)^ */
name|SQLITE_API
specifier|const
name|void
modifier|*
name|SQLITE_STDCALL
name|sqlite3_column_blob
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|,
name|int
name|iCol
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_column_bytes
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|,
name|int
name|iCol
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_column_bytes16
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|,
name|int
name|iCol
parameter_list|)
function_decl|;
name|SQLITE_API
name|double
name|SQLITE_STDCALL
name|sqlite3_column_double
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|,
name|int
name|iCol
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_column_int
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|,
name|int
name|iCol
parameter_list|)
function_decl|;
name|SQLITE_API
name|sqlite3_int64
name|SQLITE_STDCALL
name|sqlite3_column_int64
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|,
name|int
name|iCol
parameter_list|)
function_decl|;
name|SQLITE_API
specifier|const
name|unsigned
name|char
modifier|*
name|SQLITE_STDCALL
name|sqlite3_column_text
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|,
name|int
name|iCol
parameter_list|)
function_decl|;
name|SQLITE_API
specifier|const
name|void
modifier|*
name|SQLITE_STDCALL
name|sqlite3_column_text16
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|,
name|int
name|iCol
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_column_type
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|,
name|int
name|iCol
parameter_list|)
function_decl|;
name|SQLITE_API
name|sqlite3_value
modifier|*
name|SQLITE_STDCALL
name|sqlite3_column_value
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|,
name|int
name|iCol
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Destroy A Prepared Statement Object ** DESTRUCTOR: sqlite3_stmt ** ** ^The sqlite3_finalize() function is called to delete a [prepared statement]. ** ^If the most recent evaluation of the statement encountered no errors ** or if the statement is never been evaluated, then sqlite3_finalize() returns ** SQLITE_OK.  ^If the most recent evaluation of statement S failed, then ** sqlite3_finalize(S) returns the appropriate [error code] or ** [extended error code]. ** ** ^The sqlite3_finalize(S) routine can be called at any point during ** the life cycle of [prepared statement] S: ** before statement S is ever evaluated, after ** one or more calls to [sqlite3_reset()], or after any call ** to [sqlite3_step()] regardless of whether or not the statement has ** completed execution. ** ** ^Invoking sqlite3_finalize() on a NULL pointer is a harmless no-op. ** ** The application must finalize every [prepared statement] in order to avoid ** resource leaks.  It is a grievous error for the application to try to use ** a prepared statement after it has been finalized.  Any use of a prepared ** statement after it has been finalized can result in undefined and ** undesirable behavior such as segfaults and heap corruption. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_finalize
parameter_list|(
name|sqlite3_stmt
modifier|*
name|pStmt
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Reset A Prepared Statement Object ** METHOD: sqlite3_stmt ** ** The sqlite3_reset() function is called to reset a [prepared statement] ** object back to its initial state, ready to be re-executed. ** ^Any SQL statement variables that had values bound to them using ** the [sqlite3_bind_blob | sqlite3_bind_*() API] retain their values. ** Use [sqlite3_clear_bindings()] to reset the bindings. ** ** ^The [sqlite3_reset(S)] interface resets the [prepared statement] S ** back to the beginning of its program. ** ** ^If the most recent call to [sqlite3_step(S)] for the ** [prepared statement] S returned [SQLITE_ROW] or [SQLITE_DONE], ** or if [sqlite3_step(S)] has never before been called on S, ** then [sqlite3_reset(S)] returns [SQLITE_OK]. ** ** ^If the most recent call to [sqlite3_step(S)] for the ** [prepared statement] S indicated an error, then ** [sqlite3_reset(S)] returns an appropriate [error code]. ** ** ^The [sqlite3_reset(S)] interface does not change the values ** of any [sqlite3_bind_blob|bindings] on the [prepared statement] S. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_reset
parameter_list|(
name|sqlite3_stmt
modifier|*
name|pStmt
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Create Or Redefine SQL Functions ** KEYWORDS: {function creation routines} ** KEYWORDS: {application-defined SQL function} ** KEYWORDS: {application-defined SQL functions} ** METHOD: sqlite3 ** ** ^These functions (collectively known as "function creation routines") ** are used to add SQL functions or aggregates or to redefine the behavior ** of existing SQL functions or aggregates.  The only differences between ** these routines are the text encoding expected for ** the second parameter (the name of the function being created) ** and the presence or absence of a destructor callback for ** the application data pointer. ** ** ^The first parameter is the [database connection] to which the SQL ** function is to be added.  ^If an application uses more than one database ** connection then application-defined SQL functions must be added ** to each database connection separately. ** ** ^The second parameter is the name of the SQL function to be created or ** redefined.  ^The length of the name is limited to 255 bytes in a UTF-8 ** representation, exclusive of the zero-terminator.  ^Note that the name ** length limit is in UTF-8 bytes, not characters nor UTF-16 bytes.   ** ^Any attempt to create a function with a longer name ** will result in [SQLITE_MISUSE] being returned. ** ** ^The third parameter (nArg) ** is the number of arguments that the SQL function or ** aggregate takes. ^If this parameter is -1, then the SQL function or ** aggregate may take any number of arguments between 0 and the limit ** set by [sqlite3_limit]([SQLITE_LIMIT_FUNCTION_ARG]).  If the third ** parameter is less than -1 or greater than 127 then the behavior is ** undefined. ** ** ^The fourth parameter, eTextRep, specifies what ** [SQLITE_UTF8 | text encoding] this SQL function prefers for ** its parameters.  The application should set this parameter to ** [SQLITE_UTF16LE] if the function implementation invokes  ** [sqlite3_value_text16le()] on an input, or [SQLITE_UTF16BE] if the ** implementation invokes [sqlite3_value_text16be()] on an input, or ** [SQLITE_UTF16] if [sqlite3_value_text16()] is used, or [SQLITE_UTF8] ** otherwise.  ^The same SQL function may be registered multiple times using ** different preferred text encodings, with different implementations for ** each encoding. ** ^When multiple implementations of the same function are available, SQLite ** will pick the one that involves the least amount of data conversion. ** ** ^The fourth parameter may optionally be ORed with [SQLITE_DETERMINISTIC] ** to signal that the function will always return the same result given ** the same inputs within a single SQL statement.  Most SQL functions are ** deterministic.  The built-in [random()] SQL function is an example of a ** function that is not deterministic.  The SQLite query planner is able to ** perform additional optimizations on deterministic functions, so use ** of the [SQLITE_DETERMINISTIC] flag is recommended where possible. ** ** ^(The fifth parameter is an arbitrary pointer.  The implementation of the ** function can gain access to this pointer using [sqlite3_user_data()].)^ ** ** ^The sixth, seventh and eighth parameters, xFunc, xStep and xFinal, are ** pointers to C-language functions that implement the SQL function or ** aggregate. ^A scalar SQL function requires an implementation of the xFunc ** callback only; NULL pointers must be passed as the xStep and xFinal ** parameters. ^An aggregate SQL function requires an implementation of xStep ** and xFinal and NULL pointer must be passed for xFunc. ^To delete an existing ** SQL function or aggregate, pass NULL pointers for all three function ** callbacks. ** ** ^(If the ninth parameter to sqlite3_create_function_v2() is not NULL, ** then it is destructor for the application data pointer.  ** The destructor is invoked when the function is deleted, either by being ** overloaded or when the database connection closes.)^ ** ^The destructor is also invoked if the call to ** sqlite3_create_function_v2() fails. ** ^When the destructor callback of the tenth parameter is invoked, it ** is passed a single argument which is a copy of the application data  ** pointer which was the fifth parameter to sqlite3_create_function_v2(). ** ** ^It is permitted to register multiple implementations of the same ** functions with the same name but with either differing numbers of ** arguments or differing preferred text encodings.  ^SQLite will use ** the implementation that most closely matches the way in which the ** SQL function is used.  ^A function implementation with a non-negative ** nArg parameter is a better match than a function implementation with ** a negative nArg.  ^A function where the preferred text encoding ** matches the database encoding is a better ** match than a function where the encoding is different.   ** ^A function where the encoding difference is between UTF16le and UTF16be ** is a closer match than a function where the encoding difference is ** between UTF8 and UTF16. ** ** ^Built-in functions may be overloaded by new application-defined functions. ** ** ^An application-defined function is permitted to call other ** SQLite interfaces.  However, such calls must not ** close the database connection nor finalize or reset the prepared ** statement in which the function is running. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_create_function
parameter_list|(
name|sqlite3
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|zFunctionName
parameter_list|,
name|int
name|nArg
parameter_list|,
name|int
name|eTextRep
parameter_list|,
name|void
modifier|*
name|pApp
parameter_list|,
name|void
function_decl|(
modifier|*
name|xFunc
function_decl|)
parameter_list|(
name|sqlite3_context
modifier|*
parameter_list|,
name|int
parameter_list|,
name|sqlite3_value
modifier|*
modifier|*
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|xStep
function_decl|)
parameter_list|(
name|sqlite3_context
modifier|*
parameter_list|,
name|int
parameter_list|,
name|sqlite3_value
modifier|*
modifier|*
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|xFinal
function_decl|)
parameter_list|(
name|sqlite3_context
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_create_function16
parameter_list|(
name|sqlite3
modifier|*
name|db
parameter_list|,
specifier|const
name|void
modifier|*
name|zFunctionName
parameter_list|,
name|int
name|nArg
parameter_list|,
name|int
name|eTextRep
parameter_list|,
name|void
modifier|*
name|pApp
parameter_list|,
name|void
function_decl|(
modifier|*
name|xFunc
function_decl|)
parameter_list|(
name|sqlite3_context
modifier|*
parameter_list|,
name|int
parameter_list|,
name|sqlite3_value
modifier|*
modifier|*
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|xStep
function_decl|)
parameter_list|(
name|sqlite3_context
modifier|*
parameter_list|,
name|int
parameter_list|,
name|sqlite3_value
modifier|*
modifier|*
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|xFinal
function_decl|)
parameter_list|(
name|sqlite3_context
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_create_function_v2
parameter_list|(
name|sqlite3
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|zFunctionName
parameter_list|,
name|int
name|nArg
parameter_list|,
name|int
name|eTextRep
parameter_list|,
name|void
modifier|*
name|pApp
parameter_list|,
name|void
function_decl|(
modifier|*
name|xFunc
function_decl|)
parameter_list|(
name|sqlite3_context
modifier|*
parameter_list|,
name|int
parameter_list|,
name|sqlite3_value
modifier|*
modifier|*
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|xStep
function_decl|)
parameter_list|(
name|sqlite3_context
modifier|*
parameter_list|,
name|int
parameter_list|,
name|sqlite3_value
modifier|*
modifier|*
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|xFinal
function_decl|)
parameter_list|(
name|sqlite3_context
modifier|*
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|xDestroy
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Text Encodings ** ** These constant define integer codes that represent the various ** text encodings supported by SQLite. */
define|#
directive|define
name|SQLITE_UTF8
value|1
comment|/* IMP: R-37514-35566 */
define|#
directive|define
name|SQLITE_UTF16LE
value|2
comment|/* IMP: R-03371-37637 */
define|#
directive|define
name|SQLITE_UTF16BE
value|3
comment|/* IMP: R-51971-34154 */
define|#
directive|define
name|SQLITE_UTF16
value|4
comment|/* Use native byte order */
define|#
directive|define
name|SQLITE_ANY
value|5
comment|/* Deprecated */
define|#
directive|define
name|SQLITE_UTF16_ALIGNED
value|8
comment|/* sqlite3_create_collation only */
comment|/* ** CAPI3REF: Function Flags ** ** These constants may be ORed together with the  ** [SQLITE_UTF8 | preferred text encoding] as the fourth argument ** to [sqlite3_create_function()], [sqlite3_create_function16()], or ** [sqlite3_create_function_v2()]. */
define|#
directive|define
name|SQLITE_DETERMINISTIC
value|0x800
comment|/* ** CAPI3REF: Deprecated Functions ** DEPRECATED ** ** These functions are [deprecated].  In order to maintain ** backwards compatibility with older code, these functions continue  ** to be supported.  However, new applications should avoid ** the use of these functions.  To encourage programmers to avoid ** these functions, we will not explain what they do. */
ifndef|#
directive|ifndef
name|SQLITE_OMIT_DEPRECATED
name|SQLITE_API
name|SQLITE_DEPRECATED
name|int
name|SQLITE_STDCALL
name|sqlite3_aggregate_count
parameter_list|(
name|sqlite3_context
modifier|*
parameter_list|)
function_decl|;
name|SQLITE_API
name|SQLITE_DEPRECATED
name|int
name|SQLITE_STDCALL
name|sqlite3_expired
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|)
function_decl|;
name|SQLITE_API
name|SQLITE_DEPRECATED
name|int
name|SQLITE_STDCALL
name|sqlite3_transfer_bindings
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|,
name|sqlite3_stmt
modifier|*
parameter_list|)
function_decl|;
name|SQLITE_API
name|SQLITE_DEPRECATED
name|int
name|SQLITE_STDCALL
name|sqlite3_global_recover
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|SQLITE_API
name|SQLITE_DEPRECATED
name|void
name|SQLITE_STDCALL
name|sqlite3_thread_cleanup
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|SQLITE_API
name|SQLITE_DEPRECATED
name|int
name|SQLITE_STDCALL
name|sqlite3_memory_alarm
parameter_list|(
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|sqlite3_int64
parameter_list|,
name|int
parameter_list|)
parameter_list|,
name|void
modifier|*
parameter_list|,
name|sqlite3_int64
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* ** CAPI3REF: Obtaining SQL Values ** METHOD: sqlite3_value ** ** The C-language implementation of SQL functions and aggregates uses ** this set of interface routines to access the parameter values on ** the function or aggregate.   ** ** The xFunc (for scalar functions) or xStep (for aggregates) parameters ** to [sqlite3_create_function()] and [sqlite3_create_function16()] ** define callbacks that implement the SQL functions and aggregates. ** The 3rd parameter to these callbacks is an array of pointers to ** [protected sqlite3_value] objects.  There is one [sqlite3_value] object for ** each parameter to the SQL function.  These routines are used to ** extract values from the [sqlite3_value] objects. ** ** These routines work only with [protected sqlite3_value] objects. ** Any attempt to use these routines on an [unprotected sqlite3_value] ** object results in undefined behavior. ** ** ^These routines work just like the corresponding [column access functions] ** except that these routines take a single [protected sqlite3_value] object ** pointer instead of a [sqlite3_stmt*] pointer and an integer column number. ** ** ^The sqlite3_value_text16() interface extracts a UTF-16 string ** in the native byte-order of the host machine.  ^The ** sqlite3_value_text16be() and sqlite3_value_text16le() interfaces ** extract UTF-16 strings as big-endian and little-endian respectively. ** ** ^(The sqlite3_value_numeric_type() interface attempts to apply ** numeric affinity to the value.  This means that an attempt is ** made to convert the value to an integer or floating point.  If ** such a conversion is possible without loss of information (in other ** words, if the value is a string that looks like a number) ** then the conversion is performed.  Otherwise no conversion occurs. ** The [SQLITE_INTEGER | datatype] after conversion is returned.)^ ** ** Please pay particular attention to the fact that the pointer returned ** from [sqlite3_value_blob()], [sqlite3_value_text()], or ** [sqlite3_value_text16()] can be invalidated by a subsequent call to ** [sqlite3_value_bytes()], [sqlite3_value_bytes16()], [sqlite3_value_text()], ** or [sqlite3_value_text16()]. ** ** These routines must be called from the same thread as ** the SQL function that supplied the [sqlite3_value*] parameters. */
name|SQLITE_API
specifier|const
name|void
modifier|*
name|SQLITE_STDCALL
name|sqlite3_value_blob
parameter_list|(
name|sqlite3_value
modifier|*
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_value_bytes
parameter_list|(
name|sqlite3_value
modifier|*
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_value_bytes16
parameter_list|(
name|sqlite3_value
modifier|*
parameter_list|)
function_decl|;
name|SQLITE_API
name|double
name|SQLITE_STDCALL
name|sqlite3_value_double
parameter_list|(
name|sqlite3_value
modifier|*
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_value_int
parameter_list|(
name|sqlite3_value
modifier|*
parameter_list|)
function_decl|;
name|SQLITE_API
name|sqlite3_int64
name|SQLITE_STDCALL
name|sqlite3_value_int64
parameter_list|(
name|sqlite3_value
modifier|*
parameter_list|)
function_decl|;
name|SQLITE_API
specifier|const
name|unsigned
name|char
modifier|*
name|SQLITE_STDCALL
name|sqlite3_value_text
parameter_list|(
name|sqlite3_value
modifier|*
parameter_list|)
function_decl|;
name|SQLITE_API
specifier|const
name|void
modifier|*
name|SQLITE_STDCALL
name|sqlite3_value_text16
parameter_list|(
name|sqlite3_value
modifier|*
parameter_list|)
function_decl|;
name|SQLITE_API
specifier|const
name|void
modifier|*
name|SQLITE_STDCALL
name|sqlite3_value_text16le
parameter_list|(
name|sqlite3_value
modifier|*
parameter_list|)
function_decl|;
name|SQLITE_API
specifier|const
name|void
modifier|*
name|SQLITE_STDCALL
name|sqlite3_value_text16be
parameter_list|(
name|sqlite3_value
modifier|*
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_value_type
parameter_list|(
name|sqlite3_value
modifier|*
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_value_numeric_type
parameter_list|(
name|sqlite3_value
modifier|*
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Copy And Free SQL Values ** METHOD: sqlite3_value ** ** ^The sqlite3_value_dup(V) interface makes a copy of the [sqlite3_value] ** object D and returns a pointer to that copy.  ^The [sqlite3_value] returned ** is a [protected sqlite3_value] object even if the input is not. ** ^The sqlite3_value_dup(V) interface returns NULL if V is NULL or if a ** memory allocation fails. ** ** ^The sqlite3_value_free(V) interface frees an [sqlite3_value] object ** previously obtained from [sqlite3_value_dup()].  ^If V is a NULL pointer ** then sqlite3_value_free(V) is a harmless no-op. */
name|SQLITE_API
name|SQLITE_EXPERIMENTAL
name|sqlite3_value
modifier|*
name|SQLITE_STDCALL
name|sqlite3_value_dup
parameter_list|(
specifier|const
name|sqlite3_value
modifier|*
parameter_list|)
function_decl|;
name|SQLITE_API
name|SQLITE_EXPERIMENTAL
name|void
name|SQLITE_STDCALL
name|sqlite3_value_free
parameter_list|(
name|sqlite3_value
modifier|*
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Obtain Aggregate Function Context ** METHOD: sqlite3_context ** ** Implementations of aggregate SQL functions use this ** routine to allocate memory for storing their state. ** ** ^The first time the sqlite3_aggregate_context(C,N) routine is called  ** for a particular aggregate function, SQLite ** allocates N of memory, zeroes out that memory, and returns a pointer ** to the new memory. ^On second and subsequent calls to ** sqlite3_aggregate_context() for the same aggregate function instance, ** the same buffer is returned.  Sqlite3_aggregate_context() is normally ** called once for each invocation of the xStep callback and then one ** last time when the xFinal callback is invoked.  ^(When no rows match ** an aggregate query, the xStep() callback of the aggregate function ** implementation is never called and xFinal() is called exactly once. ** In those cases, sqlite3_aggregate_context() might be called for the ** first time from within xFinal().)^ ** ** ^The sqlite3_aggregate_context(C,N) routine returns a NULL pointer  ** when first called if N is less than or equal to zero or if a memory ** allocate error occurs. ** ** ^(The amount of space allocated by sqlite3_aggregate_context(C,N) is ** determined by the N parameter on first successful call.  Changing the ** value of N in subsequent call to sqlite3_aggregate_context() within ** the same aggregate function instance will not resize the memory ** allocation.)^  Within the xFinal callback, it is customary to set ** N=0 in calls to sqlite3_aggregate_context(C,N) so that no  ** pointless memory allocations occur. ** ** ^SQLite automatically frees the memory allocated by  ** sqlite3_aggregate_context() when the aggregate query concludes. ** ** The first parameter must be a copy of the ** [sqlite3_context | SQL function context] that is the first parameter ** to the xStep or xFinal callback routine that implements the aggregate ** function. ** ** This routine must be called from the same thread in which ** the aggregate SQL function is running. */
name|SQLITE_API
name|void
modifier|*
name|SQLITE_STDCALL
name|sqlite3_aggregate_context
parameter_list|(
name|sqlite3_context
modifier|*
parameter_list|,
name|int
name|nBytes
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: User Data For Functions ** METHOD: sqlite3_context ** ** ^The sqlite3_user_data() interface returns a copy of ** the pointer that was the pUserData parameter (the 5th parameter) ** of the [sqlite3_create_function()] ** and [sqlite3_create_function16()] routines that originally ** registered the application defined function. ** ** This routine must be called from the same thread in which ** the application-defined function is running. */
name|SQLITE_API
name|void
modifier|*
name|SQLITE_STDCALL
name|sqlite3_user_data
parameter_list|(
name|sqlite3_context
modifier|*
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Database Connection For Functions ** METHOD: sqlite3_context ** ** ^The sqlite3_context_db_handle() interface returns a copy of ** the pointer to the [database connection] (the 1st parameter) ** of the [sqlite3_create_function()] ** and [sqlite3_create_function16()] routines that originally ** registered the application defined function. */
name|SQLITE_API
name|sqlite3
modifier|*
name|SQLITE_STDCALL
name|sqlite3_context_db_handle
parameter_list|(
name|sqlite3_context
modifier|*
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Function Auxiliary Data ** METHOD: sqlite3_context ** ** These functions may be used by (non-aggregate) SQL functions to ** associate metadata with argument values. If the same value is passed to ** multiple invocations of the same SQL function during query execution, under ** some circumstances the associated metadata may be preserved.  An example ** of where this might be useful is in a regular-expression matching ** function. The compiled version of the regular expression can be stored as ** metadata associated with the pattern string.   ** Then as long as the pattern string remains the same, ** the compiled regular expression can be reused on multiple ** invocations of the same function. ** ** ^The sqlite3_get_auxdata() interface returns a pointer to the metadata ** associated by the sqlite3_set_auxdata() function with the Nth argument ** value to the application-defined function. ^If there is no metadata ** associated with the function argument, this sqlite3_get_auxdata() interface ** returns a NULL pointer. ** ** ^The sqlite3_set_auxdata(C,N,P,X) interface saves P as metadata for the N-th ** argument of the application-defined function.  ^Subsequent ** calls to sqlite3_get_auxdata(C,N) return P from the most recent ** sqlite3_set_auxdata(C,N,P,X) call if the metadata is still valid or ** NULL if the metadata has been discarded. ** ^After each call to sqlite3_set_auxdata(C,N,P,X) where X is not NULL, ** SQLite will invoke the destructor function X with parameter P exactly ** once, when the metadata is discarded. ** SQLite is free to discard the metadata at any time, including:<ul> **<li> when the corresponding function parameter changes, or **<li> when [sqlite3_reset()] or [sqlite3_finalize()] is called for the **      SQL statement, or **<li> when sqlite3_set_auxdata() is invoked again on the same parameter, or **<li> during the original sqlite3_set_auxdata() call when a memory  **      allocation error occurs.</ul>)^ ** ** Note the last bullet in particular.  The destructor X in  ** sqlite3_set_auxdata(C,N,P,X) might be called immediately, before the ** sqlite3_set_auxdata() interface even returns.  Hence sqlite3_set_auxdata() ** should be called near the end of the function implementation and the ** function implementation should not make any use of P after ** sqlite3_set_auxdata() has been called. ** ** ^(In practice, metadata is preserved between function calls for ** function parameters that are compile-time constants, including literal ** values and [parameters] and expressions composed from the same.)^ ** ** These routines must be called from the same thread in which ** the SQL function is running. */
name|SQLITE_API
name|void
modifier|*
name|SQLITE_STDCALL
name|sqlite3_get_auxdata
parameter_list|(
name|sqlite3_context
modifier|*
parameter_list|,
name|int
name|N
parameter_list|)
function_decl|;
name|SQLITE_API
name|void
name|SQLITE_STDCALL
name|sqlite3_set_auxdata
parameter_list|(
name|sqlite3_context
modifier|*
parameter_list|,
name|int
name|N
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Constants Defining Special Destructor Behavior ** ** These are special values for the destructor that is passed in as the ** final argument to routines like [sqlite3_result_blob()].  ^If the destructor ** argument is SQLITE_STATIC, it means that the content pointer is constant ** and will never change.  It does not need to be destroyed.  ^The ** SQLITE_TRANSIENT value means that the content will likely change in ** the near future and that SQLite should make its own private copy of ** the content before returning. ** ** The typedef is necessary to work around problems in certain ** C++ compilers. */
typedef|typedef
name|void
function_decl|(
modifier|*
name|sqlite3_destructor_type
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
define|#
directive|define
name|SQLITE_STATIC
value|((sqlite3_destructor_type)0)
define|#
directive|define
name|SQLITE_TRANSIENT
value|((sqlite3_destructor_type)-1)
comment|/* ** CAPI3REF: Setting The Result Of An SQL Function ** METHOD: sqlite3_context ** ** These routines are used by the xFunc or xFinal callbacks that ** implement SQL functions and aggregates.  See ** [sqlite3_create_function()] and [sqlite3_create_function16()] ** for additional information. ** ** These functions work very much like the [parameter binding] family of ** functions used to bind values to host parameters in prepared statements. ** Refer to the [SQL parameter] documentation for additional information. ** ** ^The sqlite3_result_blob() interface sets the result from ** an application-defined function to be the BLOB whose content is pointed ** to by the second parameter and which is N bytes long where N is the ** third parameter. ** ** ^The sqlite3_result_zeroblob(C,N) and sqlite3_result_zeroblob64(C,N) ** interfaces set the result of the application-defined function to be ** a BLOB containing all zero bytes and N bytes in size. ** ** ^The sqlite3_result_double() interface sets the result from ** an application-defined function to be a floating point value specified ** by its 2nd argument. ** ** ^The sqlite3_result_error() and sqlite3_result_error16() functions ** cause the implemented SQL function to throw an exception. ** ^SQLite uses the string pointed to by the ** 2nd parameter of sqlite3_result_error() or sqlite3_result_error16() ** as the text of an error message.  ^SQLite interprets the error ** message string from sqlite3_result_error() as UTF-8. ^SQLite ** interprets the string from sqlite3_result_error16() as UTF-16 in native ** byte order.  ^If the third parameter to sqlite3_result_error() ** or sqlite3_result_error16() is negative then SQLite takes as the error ** message all text up through the first zero character. ** ^If the third parameter to sqlite3_result_error() or ** sqlite3_result_error16() is non-negative then SQLite takes that many ** bytes (not characters) from the 2nd parameter as the error message. ** ^The sqlite3_result_error() and sqlite3_result_error16() ** routines make a private copy of the error message text before ** they return.  Hence, the calling function can deallocate or ** modify the text after they return without harm. ** ^The sqlite3_result_error_code() function changes the error code ** returned by SQLite as a result of an error in a function.  ^By default, ** the error code is SQLITE_ERROR.  ^A subsequent call to sqlite3_result_error() ** or sqlite3_result_error16() resets the error code to SQLITE_ERROR. ** ** ^The sqlite3_result_error_toobig() interface causes SQLite to throw an ** error indicating that a string or BLOB is too long to represent. ** ** ^The sqlite3_result_error_nomem() interface causes SQLite to throw an ** error indicating that a memory allocation failed. ** ** ^The sqlite3_result_int() interface sets the return value ** of the application-defined function to be the 32-bit signed integer ** value given in the 2nd argument. ** ^The sqlite3_result_int64() interface sets the return value ** of the application-defined function to be the 64-bit signed integer ** value given in the 2nd argument. ** ** ^The sqlite3_result_null() interface sets the return value ** of the application-defined function to be NULL. ** ** ^The sqlite3_result_text(), sqlite3_result_text16(), ** sqlite3_result_text16le(), and sqlite3_result_text16be() interfaces ** set the return value of the application-defined function to be ** a text string which is represented as UTF-8, UTF-16 native byte order, ** UTF-16 little endian, or UTF-16 big endian, respectively. ** ^The sqlite3_result_text64() interface sets the return value of an ** application-defined function to be a text string in an encoding ** specified by the fifth (and last) parameter, which must be one ** of [SQLITE_UTF8], [SQLITE_UTF16], [SQLITE_UTF16BE], or [SQLITE_UTF16LE]. ** ^SQLite takes the text result from the application from ** the 2nd parameter of the sqlite3_result_text* interfaces. ** ^If the 3rd parameter to the sqlite3_result_text* interfaces ** is negative, then SQLite takes result text from the 2nd parameter ** through the first zero character. ** ^If the 3rd parameter to the sqlite3_result_text* interfaces ** is non-negative, then as many bytes (not characters) of the text ** pointed to by the 2nd parameter are taken as the application-defined ** function result.  If the 3rd parameter is non-negative, then it ** must be the byte offset into the string where the NUL terminator would ** appear if the string where NUL terminated.  If any NUL characters occur ** in the string at a byte offset that is less than the value of the 3rd ** parameter, then the resulting string will contain embedded NULs and the ** result of expressions operating on strings with embedded NULs is undefined. ** ^If the 4th parameter to the sqlite3_result_text* interfaces ** or sqlite3_result_blob is a non-NULL pointer, then SQLite calls that ** function as the destructor on the text or BLOB result when it has ** finished using that result. ** ^If the 4th parameter to the sqlite3_result_text* interfaces or to ** sqlite3_result_blob is the special constant SQLITE_STATIC, then SQLite ** assumes that the text or BLOB result is in constant space and does not ** copy the content of the parameter nor call a destructor on the content ** when it has finished using that result. ** ^If the 4th parameter to the sqlite3_result_text* interfaces ** or sqlite3_result_blob is the special constant SQLITE_TRANSIENT ** then SQLite makes a copy of the result into space obtained from ** from [sqlite3_malloc()] before it returns. ** ** ^The sqlite3_result_value() interface sets the result of ** the application-defined function to be a copy of the ** [unprotected sqlite3_value] object specified by the 2nd parameter.  ^The ** sqlite3_result_value() interface makes a copy of the [sqlite3_value] ** so that the [sqlite3_value] specified in the parameter may change or ** be deallocated after sqlite3_result_value() returns without harm. ** ^A [protected sqlite3_value] object may always be used where an ** [unprotected sqlite3_value] object is required, so either ** kind of [sqlite3_value] object can be used with this interface. ** ** If these routines are called from within the different thread ** than the one containing the application-defined function that received ** the [sqlite3_context] pointer, the results are undefined. */
name|SQLITE_API
name|void
name|SQLITE_STDCALL
name|sqlite3_result_blob
parameter_list|(
name|sqlite3_context
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
name|SQLITE_API
name|void
name|SQLITE_STDCALL
name|sqlite3_result_blob64
parameter_list|(
name|sqlite3_context
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|sqlite3_uint64
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
name|SQLITE_API
name|void
name|SQLITE_STDCALL
name|sqlite3_result_double
parameter_list|(
name|sqlite3_context
modifier|*
parameter_list|,
name|double
parameter_list|)
function_decl|;
name|SQLITE_API
name|void
name|SQLITE_STDCALL
name|sqlite3_result_error
parameter_list|(
name|sqlite3_context
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|SQLITE_API
name|void
name|SQLITE_STDCALL
name|sqlite3_result_error16
parameter_list|(
name|sqlite3_context
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|SQLITE_API
name|void
name|SQLITE_STDCALL
name|sqlite3_result_error_toobig
parameter_list|(
name|sqlite3_context
modifier|*
parameter_list|)
function_decl|;
name|SQLITE_API
name|void
name|SQLITE_STDCALL
name|sqlite3_result_error_nomem
parameter_list|(
name|sqlite3_context
modifier|*
parameter_list|)
function_decl|;
name|SQLITE_API
name|void
name|SQLITE_STDCALL
name|sqlite3_result_error_code
parameter_list|(
name|sqlite3_context
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|SQLITE_API
name|void
name|SQLITE_STDCALL
name|sqlite3_result_int
parameter_list|(
name|sqlite3_context
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|SQLITE_API
name|void
name|SQLITE_STDCALL
name|sqlite3_result_int64
parameter_list|(
name|sqlite3_context
modifier|*
parameter_list|,
name|sqlite3_int64
parameter_list|)
function_decl|;
name|SQLITE_API
name|void
name|SQLITE_STDCALL
name|sqlite3_result_null
parameter_list|(
name|sqlite3_context
modifier|*
parameter_list|)
function_decl|;
name|SQLITE_API
name|void
name|SQLITE_STDCALL
name|sqlite3_result_text
parameter_list|(
name|sqlite3_context
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
name|SQLITE_API
name|void
name|SQLITE_STDCALL
name|sqlite3_result_text64
parameter_list|(
name|sqlite3_context
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|sqlite3_uint64
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|,
name|unsigned
name|char
name|encoding
parameter_list|)
function_decl|;
name|SQLITE_API
name|void
name|SQLITE_STDCALL
name|sqlite3_result_text16
parameter_list|(
name|sqlite3_context
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
name|SQLITE_API
name|void
name|SQLITE_STDCALL
name|sqlite3_result_text16le
parameter_list|(
name|sqlite3_context
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
name|SQLITE_API
name|void
name|SQLITE_STDCALL
name|sqlite3_result_text16be
parameter_list|(
name|sqlite3_context
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
name|SQLITE_API
name|void
name|SQLITE_STDCALL
name|sqlite3_result_value
parameter_list|(
name|sqlite3_context
modifier|*
parameter_list|,
name|sqlite3_value
modifier|*
parameter_list|)
function_decl|;
name|SQLITE_API
name|void
name|SQLITE_STDCALL
name|sqlite3_result_zeroblob
parameter_list|(
name|sqlite3_context
modifier|*
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_result_zeroblob64
parameter_list|(
name|sqlite3_context
modifier|*
parameter_list|,
name|sqlite3_uint64
name|n
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Define New Collating Sequences ** METHOD: sqlite3 ** ** ^These functions add, remove, or modify a [collation] associated ** with the [database connection] specified as the first argument. ** ** ^The name of the collation is a UTF-8 string ** for sqlite3_create_collation() and sqlite3_create_collation_v2() ** and a UTF-16 string in native byte order for sqlite3_create_collation16(). ** ^Collation names that compare equal according to [sqlite3_strnicmp()] are ** considered to be the same name. ** ** ^(The third argument (eTextRep) must be one of the constants: **<ul> **<li> [SQLITE_UTF8], **<li> [SQLITE_UTF16LE], **<li> [SQLITE_UTF16BE], **<li> [SQLITE_UTF16], or **<li> [SQLITE_UTF16_ALIGNED]. **</ul>)^ ** ^The eTextRep argument determines the encoding of strings passed ** to the collating function callback, xCallback. ** ^The [SQLITE_UTF16] and [SQLITE_UTF16_ALIGNED] values for eTextRep ** force strings to be UTF16 with native byte order. ** ^The [SQLITE_UTF16_ALIGNED] value for eTextRep forces strings to begin ** on an even byte address. ** ** ^The fourth argument, pArg, is an application data pointer that is passed ** through as the first argument to the collating function callback. ** ** ^The fifth argument, xCallback, is a pointer to the collating function. ** ^Multiple collating functions can be registered using the same name but ** with different eTextRep parameters and SQLite will use whichever ** function requires the least amount of data transformation. ** ^If the xCallback argument is NULL then the collating function is ** deleted.  ^When all collating functions having the same name are deleted, ** that collation is no longer usable. ** ** ^The collating function callback is invoked with a copy of the pArg  ** application data pointer and with two strings in the encoding specified ** by the eTextRep argument.  The collating function must return an ** integer that is negative, zero, or positive ** if the first string is less than, equal to, or greater than the second, ** respectively.  A collating function must always return the same answer ** given the same inputs.  If two or more collating functions are registered ** to the same collation name (using different eTextRep values) then all ** must give an equivalent answer when invoked with equivalent strings. ** The collating function must obey the following properties for all ** strings A, B, and C: ** **<ol> **<li> If A==B then B==A. **<li> If A==B and B==C then A==C. **<li> If A&lt;B THEN B&gt;A. **<li> If A&lt;B and B&lt;C then A&lt;C. **</ol> ** ** If a collating function fails any of the above constraints and that ** collating function is  registered and used, then the behavior of SQLite ** is undefined. ** ** ^The sqlite3_create_collation_v2() works like sqlite3_create_collation() ** with the addition that the xDestroy callback is invoked on pArg when ** the collating function is deleted. ** ^Collating functions are deleted when they are overridden by later ** calls to the collation creation functions or when the ** [database connection] is closed using [sqlite3_close()]. ** ** ^The xDestroy callback is<u>not</u> called if the  ** sqlite3_create_collation_v2() function fails.  Applications that invoke ** sqlite3_create_collation_v2() with a non-NULL xDestroy argument should  ** check the return code and dispose of the application data pointer ** themselves rather than expecting SQLite to deal with it for them. ** This is different from every other SQLite interface.  The inconsistency  ** is unfortunate but cannot be changed without breaking backwards  ** compatibility. ** ** See also:  [sqlite3_collation_needed()] and [sqlite3_collation_needed16()]. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_create_collation
parameter_list|(
name|sqlite3
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|zName
parameter_list|,
name|int
name|eTextRep
parameter_list|,
name|void
modifier|*
name|pArg
parameter_list|,
name|int
function_decl|(
modifier|*
name|xCompare
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_create_collation_v2
parameter_list|(
name|sqlite3
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|zName
parameter_list|,
name|int
name|eTextRep
parameter_list|,
name|void
modifier|*
name|pArg
parameter_list|,
name|int
function_decl|(
modifier|*
name|xCompare
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|xDestroy
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_create_collation16
parameter_list|(
name|sqlite3
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
name|zName
parameter_list|,
name|int
name|eTextRep
parameter_list|,
name|void
modifier|*
name|pArg
parameter_list|,
name|int
function_decl|(
modifier|*
name|xCompare
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Collation Needed Callbacks ** METHOD: sqlite3 ** ** ^To avoid having to register all collation sequences before a database ** can be used, a single callback function may be registered with the ** [database connection] to be invoked whenever an undefined collation ** sequence is required. ** ** ^If the function is registered using the sqlite3_collation_needed() API, ** then it is passed the names of undefined collation sequences as strings ** encoded in UTF-8. ^If sqlite3_collation_needed16() is used, ** the names are passed as UTF-16 in machine native byte order. ** ^A call to either function replaces the existing collation-needed callback. ** ** ^(When the callback is invoked, the first argument passed is a copy ** of the second argument to sqlite3_collation_needed() or ** sqlite3_collation_needed16().  The second argument is the database ** connection.  The third argument is one of [SQLITE_UTF8], [SQLITE_UTF16BE], ** or [SQLITE_UTF16LE], indicating the most desirable form of the collation ** sequence function required.  The fourth parameter is the name of the ** required collation sequence.)^ ** ** The callback function should register the desired collation using ** [sqlite3_create_collation()], [sqlite3_create_collation16()], or ** [sqlite3_create_collation_v2()]. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_collation_needed
parameter_list|(
name|sqlite3
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|sqlite3
modifier|*
parameter_list|,
name|int
name|eTextRep
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_collation_needed16
parameter_list|(
name|sqlite3
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|sqlite3
modifier|*
parameter_list|,
name|int
name|eTextRep
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|SQLITE_HAS_CODEC
comment|/* ** Specify the key for an encrypted database.  This routine should be ** called right after sqlite3_open(). ** ** The code to implement this API is not available in the public release ** of SQLite. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_key
parameter_list|(
name|sqlite3
modifier|*
name|db
parameter_list|,
comment|/* Database to be rekeyed */
specifier|const
name|void
modifier|*
name|pKey
parameter_list|,
name|int
name|nKey
comment|/* The key */
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_key_v2
parameter_list|(
name|sqlite3
modifier|*
name|db
parameter_list|,
comment|/* Database to be rekeyed */
specifier|const
name|char
modifier|*
name|zDbName
parameter_list|,
comment|/* Name of the database */
specifier|const
name|void
modifier|*
name|pKey
parameter_list|,
name|int
name|nKey
comment|/* The key */
parameter_list|)
function_decl|;
comment|/* ** Change the key on an open database.  If the current database is not ** encrypted, this routine will encrypt it.  If pNew==0 or nNew==0, the ** database is decrypted. ** ** The code to implement this API is not available in the public release ** of SQLite. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_rekey
parameter_list|(
name|sqlite3
modifier|*
name|db
parameter_list|,
comment|/* Database to be rekeyed */
specifier|const
name|void
modifier|*
name|pKey
parameter_list|,
name|int
name|nKey
comment|/* The new key */
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_rekey_v2
parameter_list|(
name|sqlite3
modifier|*
name|db
parameter_list|,
comment|/* Database to be rekeyed */
specifier|const
name|char
modifier|*
name|zDbName
parameter_list|,
comment|/* Name of the database */
specifier|const
name|void
modifier|*
name|pKey
parameter_list|,
name|int
name|nKey
comment|/* The new key */
parameter_list|)
function_decl|;
comment|/* ** Specify the activation key for a SEE database.  Unless  ** activated, none of the SEE routines will work. */
name|SQLITE_API
name|void
name|SQLITE_STDCALL
name|sqlite3_activate_see
parameter_list|(
specifier|const
name|char
modifier|*
name|zPassPhrase
comment|/* Activation phrase */
parameter_list|)
function_decl|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|SQLITE_ENABLE_CEROD
comment|/* ** Specify the activation key for a CEROD database.  Unless  ** activated, none of the CEROD routines will work. */
name|SQLITE_API
name|void
name|SQLITE_STDCALL
name|sqlite3_activate_cerod
parameter_list|(
specifier|const
name|char
modifier|*
name|zPassPhrase
comment|/* Activation phrase */
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* ** CAPI3REF: Suspend Execution For A Short Time ** ** The sqlite3_sleep() function causes the current thread to suspend execution ** for at least a number of milliseconds specified in its parameter. ** ** If the operating system does not support sleep requests with ** millisecond time resolution, then the time will be rounded up to ** the nearest second. The number of milliseconds of sleep actually ** requested from the operating system is returned. ** ** ^SQLite implements this interface by calling the xSleep() ** method of the default [sqlite3_vfs] object.  If the xSleep() method ** of the default VFS is not implemented correctly, or not implemented at ** all, then the behavior of sqlite3_sleep() may deviate from the description ** in the previous paragraphs. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_sleep
parameter_list|(
name|int
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Name Of The Folder Holding Temporary Files ** ** ^(If this global variable is made to point to a string which is ** the name of a folder (a.k.a. directory), then all temporary files ** created by SQLite when using a built-in [sqlite3_vfs | VFS] ** will be placed in that directory.)^  ^If this variable ** is a NULL pointer, then SQLite performs a search for an appropriate ** temporary file directory. ** ** Applications are strongly discouraged from using this global variable. ** It is required to set a temporary folder on Windows Runtime (WinRT). ** But for all other platforms, it is highly recommended that applications ** neither read nor write this variable.  This global variable is a relic ** that exists for backwards compatibility of legacy applications and should ** be avoided in new projects. ** ** It is not safe to read or modify this variable in more than one ** thread at a time.  It is not safe to read or modify this variable ** if a [database connection] is being used at the same time in a separate ** thread. ** It is intended that this variable be set once ** as part of process initialization and before any SQLite interface ** routines have been called and that this variable remain unchanged ** thereafter. ** ** ^The [temp_store_directory pragma] may modify this variable and cause ** it to point to memory obtained from [sqlite3_malloc].  ^Furthermore, ** the [temp_store_directory pragma] always assumes that any string ** that this variable points to is held in memory obtained from  ** [sqlite3_malloc] and the pragma may attempt to free that memory ** using [sqlite3_free]. ** Hence, if this variable is modified directly, either it should be ** made NULL or made to point to memory obtained from [sqlite3_malloc] ** or else the use of the [temp_store_directory pragma] should be avoided. ** Except when requested by the [temp_store_directory pragma], SQLite ** does not free the memory that sqlite3_temp_directory points to.  If ** the application wants that memory to be freed, it must do ** so itself, taking care to only do so after all [database connection] ** objects have been destroyed. ** **<b>Note to Windows Runtime users:</b>  The temporary directory must be set ** prior to calling [sqlite3_open] or [sqlite3_open_v2].  Otherwise, various ** features that require the use of temporary files may fail.  Here is an ** example of how to do this using C++ with the Windows Runtime: ** **<blockquote><pre> ** LPCWSTR zPath = Windows::Storage::ApplicationData::Current-> **&nbsp;     TemporaryFolder->Path->Data(); ** char zPathBuf&#91;MAX_PATH + 1&#93;; ** memset(zPathBuf, 0, sizeof(zPathBuf)); ** WideCharToMultiByte(CP_UTF8, 0, zPath, -1, zPathBuf, sizeof(zPathBuf), **&nbsp;     NULL, NULL); ** sqlite3_temp_directory = sqlite3_mprintf("%s", zPathBuf); **</pre></blockquote> */
name|SQLITE_API
name|SQLITE_EXTERN
name|char
modifier|*
name|sqlite3_temp_directory
decl_stmt|;
comment|/* ** CAPI3REF: Name Of The Folder Holding Database Files ** ** ^(If this global variable is made to point to a string which is ** the name of a folder (a.k.a. directory), then all database files ** specified with a relative pathname and created or accessed by ** SQLite when using a built-in windows [sqlite3_vfs | VFS] will be assumed ** to be relative to that directory.)^ ^If this variable is a NULL ** pointer, then SQLite assumes that all database files specified ** with a relative pathname are relative to the current directory ** for the process.  Only the windows VFS makes use of this global ** variable; it is ignored by the unix VFS. ** ** Changing the value of this variable while a database connection is ** open can result in a corrupt database. ** ** It is not safe to read or modify this variable in more than one ** thread at a time.  It is not safe to read or modify this variable ** if a [database connection] is being used at the same time in a separate ** thread. ** It is intended that this variable be set once ** as part of process initialization and before any SQLite interface ** routines have been called and that this variable remain unchanged ** thereafter. ** ** ^The [data_store_directory pragma] may modify this variable and cause ** it to point to memory obtained from [sqlite3_malloc].  ^Furthermore, ** the [data_store_directory pragma] always assumes that any string ** that this variable points to is held in memory obtained from  ** [sqlite3_malloc] and the pragma may attempt to free that memory ** using [sqlite3_free]. ** Hence, if this variable is modified directly, either it should be ** made NULL or made to point to memory obtained from [sqlite3_malloc] ** or else the use of the [data_store_directory pragma] should be avoided. */
name|SQLITE_API
name|SQLITE_EXTERN
name|char
modifier|*
name|sqlite3_data_directory
decl_stmt|;
comment|/* ** CAPI3REF: Test For Auto-Commit Mode ** KEYWORDS: {autocommit mode} ** METHOD: sqlite3 ** ** ^The sqlite3_get_autocommit() interface returns non-zero or ** zero if the given database connection is or is not in autocommit mode, ** respectively.  ^Autocommit mode is on by default. ** ^Autocommit mode is disabled by a [BEGIN] statement. ** ^Autocommit mode is re-enabled by a [COMMIT] or [ROLLBACK]. ** ** If certain kinds of errors occur on a statement within a multi-statement ** transaction (errors including [SQLITE_FULL], [SQLITE_IOERR], ** [SQLITE_NOMEM], [SQLITE_BUSY], and [SQLITE_INTERRUPT]) then the ** transaction might be rolled back automatically.  The only way to ** find out whether SQLite automatically rolled back the transaction after ** an error is to use this function. ** ** If another thread changes the autocommit status of the database ** connection while this routine is running, then the return value ** is undefined. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_get_autocommit
parameter_list|(
name|sqlite3
modifier|*
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Find The Database Handle Of A Prepared Statement ** METHOD: sqlite3_stmt ** ** ^The sqlite3_db_handle interface returns the [database connection] handle ** to which a [prepared statement] belongs.  ^The [database connection] ** returned by sqlite3_db_handle is the same [database connection] ** that was the first argument ** to the [sqlite3_prepare_v2()] call (or its variants) that was used to ** create the statement in the first place. */
name|SQLITE_API
name|sqlite3
modifier|*
name|SQLITE_STDCALL
name|sqlite3_db_handle
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Return The Filename For A Database Connection ** METHOD: sqlite3 ** ** ^The sqlite3_db_filename(D,N) interface returns a pointer to a filename ** associated with database N of connection D.  ^The main database file ** has the name "main".  If there is no attached database N on the database ** connection D, or if database N is a temporary or in-memory database, then ** a NULL pointer is returned. ** ** ^The filename returned by this function is the output of the ** xFullPathname method of the [VFS].  ^In other words, the filename ** will be an absolute pathname, even if the filename used ** to open the database originally was a URI or relative pathname. */
name|SQLITE_API
specifier|const
name|char
modifier|*
name|SQLITE_STDCALL
name|sqlite3_db_filename
parameter_list|(
name|sqlite3
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|zDbName
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Determine if a database is read-only ** METHOD: sqlite3 ** ** ^The sqlite3_db_readonly(D,N) interface returns 1 if the database N ** of connection D is read-only, 0 if it is read/write, or -1 if N is not ** the name of a database on connection D. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_db_readonly
parameter_list|(
name|sqlite3
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|zDbName
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Find the next prepared statement ** METHOD: sqlite3 ** ** ^This interface returns a pointer to the next [prepared statement] after ** pStmt associated with the [database connection] pDb.  ^If pStmt is NULL ** then this interface returns a pointer to the first prepared statement ** associated with the database connection pDb.  ^If no prepared statement ** satisfies the conditions of this routine, it returns NULL. ** ** The [database connection] pointer D in a call to ** [sqlite3_next_stmt(D,S)] must refer to an open database ** connection and in particular must not be a NULL pointer. */
name|SQLITE_API
name|sqlite3_stmt
modifier|*
name|SQLITE_STDCALL
name|sqlite3_next_stmt
parameter_list|(
name|sqlite3
modifier|*
name|pDb
parameter_list|,
name|sqlite3_stmt
modifier|*
name|pStmt
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Commit And Rollback Notification Callbacks ** METHOD: sqlite3 ** ** ^The sqlite3_commit_hook() interface registers a callback ** function to be invoked whenever a transaction is [COMMIT | committed]. ** ^Any callback set by a previous call to sqlite3_commit_hook() ** for the same database connection is overridden. ** ^The sqlite3_rollback_hook() interface registers a callback ** function to be invoked whenever a transaction is [ROLLBACK | rolled back]. ** ^Any callback set by a previous call to sqlite3_rollback_hook() ** for the same database connection is overridden. ** ^The pArg argument is passed through to the callback. ** ^If the callback on a commit hook function returns non-zero, ** then the commit is converted into a rollback. ** ** ^The sqlite3_commit_hook(D,C,P) and sqlite3_rollback_hook(D,C,P) functions ** return the P argument from the previous call of the same function ** on the same [database connection] D, or NULL for ** the first call for each function on D. ** ** The commit and rollback hook callbacks are not reentrant. ** The callback implementation must not do anything that will modify ** the database connection that invoked the callback.  Any actions ** to modify the database connection must be deferred until after the ** completion of the [sqlite3_step()] call that triggered the commit ** or rollback hook in the first place. ** Note that running any other SQL statements, including SELECT statements, ** or merely calling [sqlite3_prepare_v2()] and [sqlite3_step()] will modify ** the database connections for the meaning of "modify" in this paragraph. ** ** ^Registering a NULL function disables the callback. ** ** ^When the commit hook callback routine returns zero, the [COMMIT] ** operation is allowed to continue normally.  ^If the commit hook ** returns non-zero, then the [COMMIT] is converted into a [ROLLBACK]. ** ^The rollback hook is invoked on a rollback that results from a commit ** hook returning non-zero, just as it would be with any other rollback. ** ** ^For the purposes of this API, a transaction is said to have been ** rolled back if an explicit "ROLLBACK" statement is executed, or ** an error or constraint causes an implicit rollback to occur. ** ^The rollback callback is not invoked if a transaction is ** automatically rolled back because the database connection is closed. ** ** See also the [sqlite3_update_hook()] interface. */
name|SQLITE_API
name|void
modifier|*
name|SQLITE_STDCALL
name|sqlite3_commit_hook
parameter_list|(
name|sqlite3
modifier|*
parameter_list|,
name|int
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|SQLITE_API
name|void
modifier|*
name|SQLITE_STDCALL
name|sqlite3_rollback_hook
parameter_list|(
name|sqlite3
modifier|*
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Data Change Notification Callbacks ** METHOD: sqlite3 ** ** ^The sqlite3_update_hook() interface registers a callback function ** with the [database connection] identified by the first argument ** to be invoked whenever a row is updated, inserted or deleted in ** a rowid table. ** ^Any callback set by a previous call to this function ** for the same database connection is overridden. ** ** ^The second argument is a pointer to the function to invoke when a ** row is updated, inserted or deleted in a rowid table. ** ^The first argument to the callback is a copy of the third argument ** to sqlite3_update_hook(). ** ^The second callback argument is one of [SQLITE_INSERT], [SQLITE_DELETE], ** or [SQLITE_UPDATE], depending on the operation that caused the callback ** to be invoked. ** ^The third and fourth arguments to the callback contain pointers to the ** database and table name containing the affected row. ** ^The final callback parameter is the [rowid] of the row. ** ^In the case of an update, this is the [rowid] after the update takes place. ** ** ^(The update hook is not invoked when internal system tables are ** modified (i.e. sqlite_master and sqlite_sequence).)^ ** ^The update hook is not invoked when [WITHOUT ROWID] tables are modified. ** ** ^In the current implementation, the update hook ** is not invoked when duplication rows are deleted because of an ** [ON CONFLICT | ON CONFLICT REPLACE] clause.  ^Nor is the update hook ** invoked when rows are deleted using the [truncate optimization]. ** The exceptions defined in this paragraph might change in a future ** release of SQLite. ** ** The update hook implementation must not do anything that will modify ** the database connection that invoked the update hook.  Any actions ** to modify the database connection must be deferred until after the ** completion of the [sqlite3_step()] call that triggered the update hook. ** Note that [sqlite3_prepare_v2()] and [sqlite3_step()] both modify their ** database connections for the meaning of "modify" in this paragraph. ** ** ^The sqlite3_update_hook(D,C,P) function ** returns the P argument from the previous call ** on the same [database connection] D, or NULL for ** the first call on D. ** ** See also the [sqlite3_commit_hook()] and [sqlite3_rollback_hook()] ** interfaces. */
name|SQLITE_API
name|void
modifier|*
name|SQLITE_STDCALL
name|sqlite3_update_hook
parameter_list|(
name|sqlite3
modifier|*
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
name|char
specifier|const
modifier|*
parameter_list|,
name|char
specifier|const
modifier|*
parameter_list|,
name|sqlite3_int64
parameter_list|)
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Enable Or Disable Shared Pager Cache ** ** ^(This routine enables or disables the sharing of the database cache ** and schema data structures between [database connection | connections] ** to the same database. Sharing is enabled if the argument is true ** and disabled if the argument is false.)^ ** ** ^Cache sharing is enabled and disabled for an entire process. ** This is a change as of SQLite version 3.5.0. In prior versions of SQLite, ** sharing was enabled or disabled for each thread separately. ** ** ^(The cache sharing mode set by this interface effects all subsequent ** calls to [sqlite3_open()], [sqlite3_open_v2()], and [sqlite3_open16()]. ** Existing database connections continue use the sharing mode ** that was in effect at the time they were opened.)^ ** ** ^(This routine returns [SQLITE_OK] if shared cache was enabled or disabled ** successfully.  An [error code] is returned otherwise.)^ ** ** ^Shared cache is disabled by default. But this might change in ** future releases of SQLite.  Applications that care about shared ** cache setting should set it explicitly. ** ** Note: This method is disabled on MacOS X 10.7 and iOS version 5.0 ** and will always return SQLITE_MISUSE. On those systems,  ** shared cache mode should be enabled per-database connection via  ** [sqlite3_open_v2()] with [SQLITE_OPEN_SHAREDCACHE]. ** ** This interface is threadsafe on processors where writing a ** 32-bit integer is atomic. ** ** See Also:  [SQLite Shared-Cache Mode] */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_enable_shared_cache
parameter_list|(
name|int
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Attempt To Free Heap Memory ** ** ^The sqlite3_release_memory() interface attempts to free N bytes ** of heap memory by deallocating non-essential memory allocations ** held by the database library.   Memory used to cache database ** pages to improve performance is an example of non-essential memory. ** ^sqlite3_release_memory() returns the number of bytes actually freed, ** which might be more or less than the amount requested. ** ^The sqlite3_release_memory() routine is a no-op returning zero ** if SQLite is not compiled with [SQLITE_ENABLE_MEMORY_MANAGEMENT]. ** ** See also: [sqlite3_db_release_memory()] */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_release_memory
parameter_list|(
name|int
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Free Memory Used By A Database Connection ** METHOD: sqlite3 ** ** ^The sqlite3_db_release_memory(D) interface attempts to free as much heap ** memory as possible from database connection D. Unlike the ** [sqlite3_release_memory()] interface, this interface is in effect even ** when the [SQLITE_ENABLE_MEMORY_MANAGEMENT] compile-time option is ** omitted. ** ** See also: [sqlite3_release_memory()] */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_db_release_memory
parameter_list|(
name|sqlite3
modifier|*
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Impose A Limit On Heap Size ** ** ^The sqlite3_soft_heap_limit64() interface sets and/or queries the ** soft limit on the amount of heap memory that may be allocated by SQLite. ** ^SQLite strives to keep heap memory utilization below the soft heap ** limit by reducing the number of pages held in the page cache ** as heap memory usages approaches the limit. ** ^The soft heap limit is "soft" because even though SQLite strives to stay ** below the limit, it will exceed the limit rather than generate ** an [SQLITE_NOMEM] error.  In other words, the soft heap limit  ** is advisory only. ** ** ^The return value from sqlite3_soft_heap_limit64() is the size of ** the soft heap limit prior to the call, or negative in the case of an ** error.  ^If the argument N is negative ** then no change is made to the soft heap limit.  Hence, the current ** size of the soft heap limit can be determined by invoking ** sqlite3_soft_heap_limit64() with a negative argument. ** ** ^If the argument N is zero then the soft heap limit is disabled. ** ** ^(The soft heap limit is not enforced in the current implementation ** if one or more of following conditions are true: ** **<ul> **<li> The soft heap limit is set to zero. **<li> Memory accounting is disabled using a combination of the **      [sqlite3_config]([SQLITE_CONFIG_MEMSTATUS],...) start-time option and **      the [SQLITE_DEFAULT_MEMSTATUS] compile-time option. **<li> An alternative page cache implementation is specified using **      [sqlite3_config]([SQLITE_CONFIG_PCACHE2],...). **<li> The page cache allocates from its own memory pool supplied **      by [sqlite3_config]([SQLITE_CONFIG_PAGECACHE],...) rather than **      from the heap. **</ul>)^ ** ** Beginning with SQLite version 3.7.3, the soft heap limit is enforced ** regardless of whether or not the [SQLITE_ENABLE_MEMORY_MANAGEMENT] ** compile-time option is invoked.  With [SQLITE_ENABLE_MEMORY_MANAGEMENT], ** the soft heap limit is enforced on every memory allocation.  Without ** [SQLITE_ENABLE_MEMORY_MANAGEMENT], the soft heap limit is only enforced ** when memory is allocated by the page cache.  Testing suggests that because ** the page cache is the predominate memory user in SQLite, most ** applications will achieve adequate soft heap limit enforcement without ** the use of [SQLITE_ENABLE_MEMORY_MANAGEMENT]. ** ** The circumstances under which SQLite will enforce the soft heap limit may ** changes in future releases of SQLite. */
name|SQLITE_API
name|sqlite3_int64
name|SQLITE_STDCALL
name|sqlite3_soft_heap_limit64
parameter_list|(
name|sqlite3_int64
name|N
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Deprecated Soft Heap Limit Interface ** DEPRECATED ** ** This is a deprecated version of the [sqlite3_soft_heap_limit64()] ** interface.  This routine is provided for historical compatibility ** only.  All new applications should use the ** [sqlite3_soft_heap_limit64()] interface rather than this one. */
name|SQLITE_API
name|SQLITE_DEPRECATED
name|void
name|SQLITE_STDCALL
name|sqlite3_soft_heap_limit
parameter_list|(
name|int
name|N
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Extract Metadata About A Column Of A Table ** METHOD: sqlite3 ** ** ^(The sqlite3_table_column_metadata(X,D,T,C,....) routine returns ** information about column C of table T in database D ** on [database connection] X.)^  ^The sqlite3_table_column_metadata() ** interface returns SQLITE_OK and fills in the non-NULL pointers in ** the final five arguments with appropriate values if the specified ** column exists.  ^The sqlite3_table_column_metadata() interface returns ** SQLITE_ERROR and if the specified column does not exist. ** ^If the column-name parameter to sqlite3_table_column_metadata() is a ** NULL pointer, then this routine simply checks for the existance of the ** table and returns SQLITE_OK if the table exists and SQLITE_ERROR if it ** does not. ** ** ^The column is identified by the second, third and fourth parameters to ** this function. ^(The second parameter is either the name of the database ** (i.e. "main", "temp", or an attached database) containing the specified ** table or NULL.)^ ^If it is NULL, then all attached databases are searched ** for the table using the same algorithm used by the database engine to ** resolve unqualified table references. ** ** ^The third and fourth parameters to this function are the table and column ** name of the desired column, respectively. ** ** ^Metadata is returned by writing to the memory locations passed as the 5th ** and subsequent parameters to this function. ^Any of these arguments may be ** NULL, in which case the corresponding element of metadata is omitted. ** ** ^(<blockquote> **<table border="1"> **<tr><th> Parameter<th> Output<br>Type<th>  Description ** **<tr><td> 5th<td> const char*<td> Data type **<tr><td> 6th<td> const char*<td> Name of default collation sequence **<tr><td> 7th<td> int<td> True if column has a NOT NULL constraint **<tr><td> 8th<td> int<td> True if column is part of the PRIMARY KEY **<tr><td> 9th<td> int<td> True if column is [AUTOINCREMENT] **</table> **</blockquote>)^ ** ** ^The memory pointed to by the character pointers returned for the ** declaration type and collation sequence is valid until the next ** call to any SQLite API function. ** ** ^If the specified table is actually a view, an [error code] is returned. ** ** ^If the specified column is "rowid", "oid" or "_rowid_" and the table  ** is not a [WITHOUT ROWID] table and an ** [INTEGER PRIMARY KEY] column has been explicitly declared, then the output ** parameters are set for the explicitly declared column. ^(If there is no ** [INTEGER PRIMARY KEY] column, then the outputs ** for the [rowid] are set as follows: ** **<pre> **     data type: "INTEGER" **     collation sequence: "BINARY" **     not null: 0 **     primary key: 1 **     auto increment: 0 **</pre>)^ ** ** ^This function causes all database schemas to be read from disk and ** parsed, if that has not already been done, and returns an error if ** any errors are encountered while loading the schema. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_table_column_metadata
parameter_list|(
name|sqlite3
modifier|*
name|db
parameter_list|,
comment|/* Connection handle */
specifier|const
name|char
modifier|*
name|zDbName
parameter_list|,
comment|/* Database name or NULL */
specifier|const
name|char
modifier|*
name|zTableName
parameter_list|,
comment|/* Table name */
specifier|const
name|char
modifier|*
name|zColumnName
parameter_list|,
comment|/* Column name */
name|char
specifier|const
modifier|*
modifier|*
name|pzDataType
parameter_list|,
comment|/* OUTPUT: Declared data type */
name|char
specifier|const
modifier|*
modifier|*
name|pzCollSeq
parameter_list|,
comment|/* OUTPUT: Collation sequence name */
name|int
modifier|*
name|pNotNull
parameter_list|,
comment|/* OUTPUT: True if NOT NULL constraint exists */
name|int
modifier|*
name|pPrimaryKey
parameter_list|,
comment|/* OUTPUT: True if column part of PK */
name|int
modifier|*
name|pAutoinc
comment|/* OUTPUT: True if column is auto-increment */
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Load An Extension ** METHOD: sqlite3 ** ** ^This interface loads an SQLite extension library from the named file. ** ** ^The sqlite3_load_extension() interface attempts to load an ** [SQLite extension] library contained in the file zFile.  If ** the file cannot be loaded directly, attempts are made to load ** with various operating-system specific extensions added. ** So for example, if "samplelib" cannot be loaded, then names like ** "samplelib.so" or "samplelib.dylib" or "samplelib.dll" might ** be tried also. ** ** ^The entry point is zProc. ** ^(zProc may be 0, in which case SQLite will try to come up with an ** entry point name on its own.  It first tries "sqlite3_extension_init". ** If that does not work, it constructs a name "sqlite3_X_init" where the ** X is consists of the lower-case equivalent of all ASCII alphabetic ** characters in the filename from the last "/" to the first following ** "." and omitting any initial "lib".)^ ** ^The sqlite3_load_extension() interface returns ** [SQLITE_OK] on success and [SQLITE_ERROR] if something goes wrong. ** ^If an error occurs and pzErrMsg is not 0, then the ** [sqlite3_load_extension()] interface shall attempt to ** fill *pzErrMsg with error message text stored in memory ** obtained from [sqlite3_malloc()]. The calling function ** should free this memory by calling [sqlite3_free()]. ** ** ^Extension loading must be enabled using ** [sqlite3_enable_load_extension()] prior to calling this API, ** otherwise an error will be returned. ** ** See also the [load_extension() SQL function]. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_load_extension
parameter_list|(
name|sqlite3
modifier|*
name|db
parameter_list|,
comment|/* Load the extension into this database connection */
specifier|const
name|char
modifier|*
name|zFile
parameter_list|,
comment|/* Name of the shared library containing extension */
specifier|const
name|char
modifier|*
name|zProc
parameter_list|,
comment|/* Entry point.  Derived from zFile if 0 */
name|char
modifier|*
modifier|*
name|pzErrMsg
comment|/* Put error message here if not 0 */
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Enable Or Disable Extension Loading ** METHOD: sqlite3 ** ** ^So as not to open security holes in older applications that are ** unprepared to deal with [extension loading], and as a means of disabling ** [extension loading] while evaluating user-entered SQL, the following API ** is provided to turn the [sqlite3_load_extension()] mechanism on and off. ** ** ^Extension loading is off by default. ** ^Call the sqlite3_enable_load_extension() routine with onoff==1 ** to turn extension loading on and call it with onoff==0 to turn ** it back off again. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_enable_load_extension
parameter_list|(
name|sqlite3
modifier|*
name|db
parameter_list|,
name|int
name|onoff
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Automatically Load Statically Linked Extensions ** ** ^This interface causes the xEntryPoint() function to be invoked for ** each new [database connection] that is created.  The idea here is that ** xEntryPoint() is the entry point for a statically linked [SQLite extension] ** that is to be automatically loaded into all new database connections. ** ** ^(Even though the function prototype shows that xEntryPoint() takes ** no arguments and returns void, SQLite invokes xEntryPoint() with three ** arguments and expects and integer result as if the signature of the ** entry point where as follows: ** **<blockquote><pre> **&nbsp;  int xEntryPoint( **&nbsp;    sqlite3 *db, **&nbsp;    const char **pzErrMsg, **&nbsp;    const struct sqlite3_api_routines *pThunk **&nbsp;  ); **</pre></blockquote>)^ ** ** If the xEntryPoint routine encounters an error, it should make *pzErrMsg ** point to an appropriate error message (obtained from [sqlite3_mprintf()]) ** and return an appropriate [error code].  ^SQLite ensures that *pzErrMsg ** is NULL before calling the xEntryPoint().  ^SQLite will invoke ** [sqlite3_free()] on *pzErrMsg after xEntryPoint() returns.  ^If any ** xEntryPoint() returns an error, the [sqlite3_open()], [sqlite3_open16()], ** or [sqlite3_open_v2()] call that provoked the xEntryPoint() will fail. ** ** ^Calling sqlite3_auto_extension(X) with an entry point X that is already ** on the list of automatic extensions is a harmless no-op. ^No entry point ** will be called more than once for each database connection that is opened. ** ** See also: [sqlite3_reset_auto_extension()] ** and [sqlite3_cancel_auto_extension()] */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_auto_extension
parameter_list|(
name|void
function_decl|(
modifier|*
name|xEntryPoint
function_decl|)
parameter_list|(
name|void
parameter_list|)
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Cancel Automatic Extension Loading ** ** ^The [sqlite3_cancel_auto_extension(X)] interface unregisters the ** initialization routine X that was registered using a prior call to ** [sqlite3_auto_extension(X)].  ^The [sqlite3_cancel_auto_extension(X)] ** routine returns 1 if initialization routine X was successfully  ** unregistered and it returns 0 if X was not on the list of initialization ** routines. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_cancel_auto_extension
parameter_list|(
name|void
function_decl|(
modifier|*
name|xEntryPoint
function_decl|)
parameter_list|(
name|void
parameter_list|)
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Reset Automatic Extension Loading ** ** ^This interface disables all automatic extensions previously ** registered using [sqlite3_auto_extension()]. */
name|SQLITE_API
name|void
name|SQLITE_STDCALL
name|sqlite3_reset_auto_extension
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* ** The interface to the virtual-table mechanism is currently considered ** to be experimental.  The interface might change in incompatible ways. ** If this is a problem for you, do not use the interface at this time. ** ** When the virtual-table mechanism stabilizes, we will declare the ** interface fixed, support it indefinitely, and remove this comment. */
comment|/* ** Structures used by the virtual table interface */
typedef|typedef
name|struct
name|sqlite3_vtab
name|sqlite3_vtab
typedef|;
typedef|typedef
name|struct
name|sqlite3_index_info
name|sqlite3_index_info
typedef|;
typedef|typedef
name|struct
name|sqlite3_vtab_cursor
name|sqlite3_vtab_cursor
typedef|;
typedef|typedef
name|struct
name|sqlite3_module
name|sqlite3_module
typedef|;
comment|/* ** CAPI3REF: Virtual Table Object ** KEYWORDS: sqlite3_module {virtual table module} ** ** This structure, sometimes called a "virtual table module",  ** defines the implementation of a [virtual tables].   ** This structure consists mostly of methods for the module. ** ** ^A virtual table module is created by filling in a persistent ** instance of this structure and passing a pointer to that instance ** to [sqlite3_create_module()] or [sqlite3_create_module_v2()]. ** ^The registration remains valid until it is replaced by a different ** module or until the [database connection] closes.  The content ** of this structure must not change while it is registered with ** any database connection. */
struct|struct
name|sqlite3_module
block|{
name|int
name|iVersion
decl_stmt|;
name|int
function_decl|(
modifier|*
name|xCreate
function_decl|)
parameter_list|(
name|sqlite3
modifier|*
parameter_list|,
name|void
modifier|*
name|pAux
parameter_list|,
name|int
name|argc
parameter_list|,
specifier|const
name|char
modifier|*
specifier|const
modifier|*
name|argv
parameter_list|,
name|sqlite3_vtab
modifier|*
modifier|*
name|ppVTab
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xConnect
function_decl|)
parameter_list|(
name|sqlite3
modifier|*
parameter_list|,
name|void
modifier|*
name|pAux
parameter_list|,
name|int
name|argc
parameter_list|,
specifier|const
name|char
modifier|*
specifier|const
modifier|*
name|argv
parameter_list|,
name|sqlite3_vtab
modifier|*
modifier|*
name|ppVTab
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xBestIndex
function_decl|)
parameter_list|(
name|sqlite3_vtab
modifier|*
name|pVTab
parameter_list|,
name|sqlite3_index_info
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xDisconnect
function_decl|)
parameter_list|(
name|sqlite3_vtab
modifier|*
name|pVTab
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xDestroy
function_decl|)
parameter_list|(
name|sqlite3_vtab
modifier|*
name|pVTab
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xOpen
function_decl|)
parameter_list|(
name|sqlite3_vtab
modifier|*
name|pVTab
parameter_list|,
name|sqlite3_vtab_cursor
modifier|*
modifier|*
name|ppCursor
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xClose
function_decl|)
parameter_list|(
name|sqlite3_vtab_cursor
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xFilter
function_decl|)
parameter_list|(
name|sqlite3_vtab_cursor
modifier|*
parameter_list|,
name|int
name|idxNum
parameter_list|,
specifier|const
name|char
modifier|*
name|idxStr
parameter_list|,
name|int
name|argc
parameter_list|,
name|sqlite3_value
modifier|*
modifier|*
name|argv
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xNext
function_decl|)
parameter_list|(
name|sqlite3_vtab_cursor
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xEof
function_decl|)
parameter_list|(
name|sqlite3_vtab_cursor
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xColumn
function_decl|)
parameter_list|(
name|sqlite3_vtab_cursor
modifier|*
parameter_list|,
name|sqlite3_context
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xRowid
function_decl|)
parameter_list|(
name|sqlite3_vtab_cursor
modifier|*
parameter_list|,
name|sqlite3_int64
modifier|*
name|pRowid
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xUpdate
function_decl|)
parameter_list|(
name|sqlite3_vtab
modifier|*
parameter_list|,
name|int
parameter_list|,
name|sqlite3_value
modifier|*
modifier|*
parameter_list|,
name|sqlite3_int64
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xBegin
function_decl|)
parameter_list|(
name|sqlite3_vtab
modifier|*
name|pVTab
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xSync
function_decl|)
parameter_list|(
name|sqlite3_vtab
modifier|*
name|pVTab
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xCommit
function_decl|)
parameter_list|(
name|sqlite3_vtab
modifier|*
name|pVTab
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xRollback
function_decl|)
parameter_list|(
name|sqlite3_vtab
modifier|*
name|pVTab
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xFindFunction
function_decl|)
parameter_list|(
name|sqlite3_vtab
modifier|*
name|pVtab
parameter_list|,
name|int
name|nArg
parameter_list|,
specifier|const
name|char
modifier|*
name|zName
parameter_list|,
name|void
function_decl|(
modifier|*
modifier|*
name|pxFunc
function_decl|)
parameter_list|(
name|sqlite3_context
modifier|*
parameter_list|,
name|int
parameter_list|,
name|sqlite3_value
modifier|*
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
modifier|*
name|ppArg
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xRename
function_decl|)
parameter_list|(
name|sqlite3_vtab
modifier|*
name|pVtab
parameter_list|,
specifier|const
name|char
modifier|*
name|zNew
parameter_list|)
function_decl|;
comment|/* The methods above are in version 1 of the sqlite_module object. Those    ** below are for version 2 and greater. */
name|int
function_decl|(
modifier|*
name|xSavepoint
function_decl|)
parameter_list|(
name|sqlite3_vtab
modifier|*
name|pVTab
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xRelease
function_decl|)
parameter_list|(
name|sqlite3_vtab
modifier|*
name|pVTab
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xRollbackTo
function_decl|)
parameter_list|(
name|sqlite3_vtab
modifier|*
name|pVTab
parameter_list|,
name|int
parameter_list|)
function_decl|;
block|}
struct|;
comment|/* ** CAPI3REF: Virtual Table Indexing Information ** KEYWORDS: sqlite3_index_info ** ** The sqlite3_index_info structure and its substructures is used as part ** of the [virtual table] interface to ** pass information into and receive the reply from the [xBestIndex] ** method of a [virtual table module].  The fields under **Inputs** are the ** inputs to xBestIndex and are read-only.  xBestIndex inserts its ** results into the **Outputs** fields. ** ** ^(The aConstraint[] array records WHERE clause constraints of the form: ** **<blockquote>column OP expr</blockquote> ** ** where OP is =,&lt;,&lt;=,&gt;, or&gt;=.)^  ^(The particular operator is ** stored in aConstraint[].op using one of the ** [SQLITE_INDEX_CONSTRAINT_EQ | SQLITE_INDEX_CONSTRAINT_ values].)^ ** ^(The index of the column is stored in ** aConstraint[].iColumn.)^  ^(aConstraint[].usable is TRUE if the ** expr on the right-hand side can be evaluated (and thus the constraint ** is usable) and false if it cannot.)^ ** ** ^The optimizer automatically inverts terms of the form "expr OP column" ** and makes other simplifications to the WHERE clause in an attempt to ** get as many WHERE clause terms into the form shown above as possible. ** ^The aConstraint[] array only reports WHERE clause terms that are ** relevant to the particular virtual table being queried. ** ** ^Information about the ORDER BY clause is stored in aOrderBy[]. ** ^Each term of aOrderBy records a column of the ORDER BY clause. ** ** The [xBestIndex] method must fill aConstraintUsage[] with information ** about what parameters to pass to xFilter.  ^If argvIndex>0 then ** the right-hand side of the corresponding aConstraint[] is evaluated ** and becomes the argvIndex-th entry in argv.  ^(If aConstraintUsage[].omit ** is true, then the constraint is assumed to be fully handled by the ** virtual table and is not checked again by SQLite.)^ ** ** ^The idxNum and idxPtr values are recorded and passed into the ** [xFilter] method. ** ^[sqlite3_free()] is used to free idxPtr if and only if ** needToFreeIdxPtr is true. ** ** ^The orderByConsumed means that output from [xFilter]/[xNext] will occur in ** the correct order to satisfy the ORDER BY clause so that no separate ** sorting step is required. ** ** ^The estimatedCost value is an estimate of the cost of a particular ** strategy. A cost of N indicates that the cost of the strategy is similar ** to a linear scan of an SQLite table with N rows. A cost of log(N)  ** indicates that the expense of the operation is similar to that of a ** binary search on a unique indexed field of an SQLite table with N rows. ** ** ^The estimatedRows value is an estimate of the number of rows that ** will be returned by the strategy. ** ** IMPORTANT: The estimatedRows field was added to the sqlite3_index_info ** structure for SQLite version 3.8.2. If a virtual table extension is ** used with an SQLite version earlier than 3.8.2, the results of attempting  ** to read or write the estimatedRows field are undefined (but are likely  ** to included crashing the application). The estimatedRows field should ** therefore only be used if [sqlite3_libversion_number()] returns a ** value greater than or equal to 3008002. */
struct|struct
name|sqlite3_index_info
block|{
comment|/* Inputs */
name|int
name|nConstraint
decl_stmt|;
comment|/* Number of entries in aConstraint */
struct|struct
name|sqlite3_index_constraint
block|{
name|int
name|iColumn
decl_stmt|;
comment|/* Column on left-hand side of constraint */
name|unsigned
name|char
name|op
decl_stmt|;
comment|/* Constraint operator */
name|unsigned
name|char
name|usable
decl_stmt|;
comment|/* True if this constraint is usable */
name|int
name|iTermOffset
decl_stmt|;
comment|/* Used internally - xBestIndex should ignore */
block|}
modifier|*
name|aConstraint
struct|;
comment|/* Table of WHERE clause constraints */
name|int
name|nOrderBy
decl_stmt|;
comment|/* Number of terms in the ORDER BY clause */
struct|struct
name|sqlite3_index_orderby
block|{
name|int
name|iColumn
decl_stmt|;
comment|/* Column number */
name|unsigned
name|char
name|desc
decl_stmt|;
comment|/* True for DESC.  False for ASC. */
block|}
modifier|*
name|aOrderBy
struct|;
comment|/* The ORDER BY clause */
comment|/* Outputs */
struct|struct
name|sqlite3_index_constraint_usage
block|{
name|int
name|argvIndex
decl_stmt|;
comment|/* if>0, constraint is part of argv to xFilter */
name|unsigned
name|char
name|omit
decl_stmt|;
comment|/* Do not code a test for this constraint */
block|}
modifier|*
name|aConstraintUsage
struct|;
name|int
name|idxNum
decl_stmt|;
comment|/* Number used to identify the index */
name|char
modifier|*
name|idxStr
decl_stmt|;
comment|/* String, possibly obtained from sqlite3_malloc */
name|int
name|needToFreeIdxStr
decl_stmt|;
comment|/* Free idxStr using sqlite3_free() if true */
name|int
name|orderByConsumed
decl_stmt|;
comment|/* True if output is already ordered */
name|double
name|estimatedCost
decl_stmt|;
comment|/* Estimated cost of using this index */
comment|/* Fields below are only available in SQLite 3.8.2 and later */
name|sqlite3_int64
name|estimatedRows
decl_stmt|;
comment|/* Estimated number of rows returned */
block|}
struct|;
comment|/* ** CAPI3REF: Virtual Table Constraint Operator Codes ** ** These macros defined the allowed values for the ** [sqlite3_index_info].aConstraint[].op field.  Each value represents ** an operator that is part of a constraint term in the wHERE clause of ** a query that uses a [virtual table]. */
define|#
directive|define
name|SQLITE_INDEX_CONSTRAINT_EQ
value|2
define|#
directive|define
name|SQLITE_INDEX_CONSTRAINT_GT
value|4
define|#
directive|define
name|SQLITE_INDEX_CONSTRAINT_LE
value|8
define|#
directive|define
name|SQLITE_INDEX_CONSTRAINT_LT
value|16
define|#
directive|define
name|SQLITE_INDEX_CONSTRAINT_GE
value|32
define|#
directive|define
name|SQLITE_INDEX_CONSTRAINT_MATCH
value|64
comment|/* ** CAPI3REF: Register A Virtual Table Implementation ** METHOD: sqlite3 ** ** ^These routines are used to register a new [virtual table module] name. ** ^Module names must be registered before ** creating a new [virtual table] using the module and before using a ** preexisting [virtual table] for the module. ** ** ^The module name is registered on the [database connection] specified ** by the first parameter.  ^The name of the module is given by the  ** second parameter.  ^The third parameter is a pointer to ** the implementation of the [virtual table module].   ^The fourth ** parameter is an arbitrary client data pointer that is passed through ** into the [xCreate] and [xConnect] methods of the virtual table module ** when a new virtual table is be being created or reinitialized. ** ** ^The sqlite3_create_module_v2() interface has a fifth parameter which ** is a pointer to a destructor for the pClientData.  ^SQLite will ** invoke the destructor function (if it is not NULL) when SQLite ** no longer needs the pClientData pointer.  ^The destructor will also ** be invoked if the call to sqlite3_create_module_v2() fails. ** ^The sqlite3_create_module() ** interface is equivalent to sqlite3_create_module_v2() with a NULL ** destructor. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_create_module
parameter_list|(
name|sqlite3
modifier|*
name|db
parameter_list|,
comment|/* SQLite connection to register module with */
specifier|const
name|char
modifier|*
name|zName
parameter_list|,
comment|/* Name of the module */
specifier|const
name|sqlite3_module
modifier|*
name|p
parameter_list|,
comment|/* Methods for the module */
name|void
modifier|*
name|pClientData
comment|/* Client data for xCreate/xConnect */
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_create_module_v2
parameter_list|(
name|sqlite3
modifier|*
name|db
parameter_list|,
comment|/* SQLite connection to register module with */
specifier|const
name|char
modifier|*
name|zName
parameter_list|,
comment|/* Name of the module */
specifier|const
name|sqlite3_module
modifier|*
name|p
parameter_list|,
comment|/* Methods for the module */
name|void
modifier|*
name|pClientData
parameter_list|,
comment|/* Client data for xCreate/xConnect */
name|void
function_decl|(
modifier|*
name|xDestroy
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
comment|/* Module destructor function */
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Virtual Table Instance Object ** KEYWORDS: sqlite3_vtab ** ** Every [virtual table module] implementation uses a subclass ** of this object to describe a particular instance ** of the [virtual table].  Each subclass will ** be tailored to the specific needs of the module implementation. ** The purpose of this superclass is to define certain fields that are ** common to all module implementations. ** ** ^Virtual tables methods can set an error message by assigning a ** string obtained from [sqlite3_mprintf()] to zErrMsg.  The method should ** take care that any prior string is freed by a call to [sqlite3_free()] ** prior to assigning a new string to zErrMsg.  ^After the error message ** is delivered up to the client application, the string will be automatically ** freed by sqlite3_free() and the zErrMsg field will be zeroed. */
struct|struct
name|sqlite3_vtab
block|{
specifier|const
name|sqlite3_module
modifier|*
name|pModule
decl_stmt|;
comment|/* The module for this virtual table */
name|int
name|nRef
decl_stmt|;
comment|/* Number of open cursors */
name|char
modifier|*
name|zErrMsg
decl_stmt|;
comment|/* Error message from sqlite3_mprintf() */
comment|/* Virtual table implementations will typically add additional fields */
block|}
struct|;
comment|/* ** CAPI3REF: Virtual Table Cursor Object ** KEYWORDS: sqlite3_vtab_cursor {virtual table cursor} ** ** Every [virtual table module] implementation uses a subclass of the ** following structure to describe cursors that point into the ** [virtual table] and are used ** to loop through the virtual table.  Cursors are created using the ** [sqlite3_module.xOpen | xOpen] method of the module and are destroyed ** by the [sqlite3_module.xClose | xClose] method.  Cursors are used ** by the [xFilter], [xNext], [xEof], [xColumn], and [xRowid] methods ** of the module.  Each module implementation will define ** the content of a cursor structure to suit its own needs. ** ** This superclass exists in order to define fields of the cursor that ** are common to all implementations. */
struct|struct
name|sqlite3_vtab_cursor
block|{
name|sqlite3_vtab
modifier|*
name|pVtab
decl_stmt|;
comment|/* Virtual table of this cursor */
comment|/* Virtual table implementations will typically add additional fields */
block|}
struct|;
comment|/* ** CAPI3REF: Declare The Schema Of A Virtual Table ** ** ^The [xCreate] and [xConnect] methods of a ** [virtual table module] call this interface ** to declare the format (the names and datatypes of the columns) of ** the virtual tables they implement. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_declare_vtab
parameter_list|(
name|sqlite3
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|zSQL
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Overload A Function For A Virtual Table ** METHOD: sqlite3 ** ** ^(Virtual tables can provide alternative implementations of functions ** using the [xFindFunction] method of the [virtual table module].   ** But global versions of those functions ** must exist in order to be overloaded.)^ ** ** ^(This API makes sure a global version of a function with a particular ** name and number of parameters exists.  If no such function exists ** before this API is called, a new function is created.)^  ^The implementation ** of the new function always causes an exception to be thrown.  So ** the new function is not good for anything by itself.  Its only ** purpose is to be a placeholder function that can be overloaded ** by a [virtual table]. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_overload_function
parameter_list|(
name|sqlite3
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|zFuncName
parameter_list|,
name|int
name|nArg
parameter_list|)
function_decl|;
comment|/* ** The interface to the virtual-table mechanism defined above (back up ** to a comment remarkably similar to this one) is currently considered ** to be experimental.  The interface might change in incompatible ways. ** If this is a problem for you, do not use the interface at this time. ** ** When the virtual-table mechanism stabilizes, we will declare the ** interface fixed, support it indefinitely, and remove this comment. */
comment|/* ** CAPI3REF: A Handle To An Open BLOB ** KEYWORDS: {BLOB handle} {BLOB handles} ** ** An instance of this object represents an open BLOB on which ** [sqlite3_blob_open | incremental BLOB I/O] can be performed. ** ^Objects of this type are created by [sqlite3_blob_open()] ** and destroyed by [sqlite3_blob_close()]. ** ^The [sqlite3_blob_read()] and [sqlite3_blob_write()] interfaces ** can be used to read or write small subsections of the BLOB. ** ^The [sqlite3_blob_bytes()] interface returns the size of the BLOB in bytes. */
typedef|typedef
name|struct
name|sqlite3_blob
name|sqlite3_blob
typedef|;
comment|/* ** CAPI3REF: Open A BLOB For Incremental I/O ** METHOD: sqlite3 ** CONSTRUCTOR: sqlite3_blob ** ** ^(This interfaces opens a [BLOB handle | handle] to the BLOB located ** in row iRow, column zColumn, table zTable in database zDb; ** in other words, the same BLOB that would be selected by: ** **<pre> **     SELECT zColumn FROM zDb.zTable WHERE [rowid] = iRow; **</pre>)^ ** ** ^(Parameter zDb is not the filename that contains the database, but  ** rather the symbolic name of the database. For attached databases, this is ** the name that appears after the AS keyword in the [ATTACH] statement. ** For the main database file, the database name is "main". For TEMP ** tables, the database name is "temp".)^ ** ** ^If the flags parameter is non-zero, then the BLOB is opened for read ** and write access. ^If the flags parameter is zero, the BLOB is opened for ** read-only access. ** ** ^(On success, [SQLITE_OK] is returned and the new [BLOB handle] is stored ** in *ppBlob. Otherwise an [error code] is returned and, unless the error ** code is SQLITE_MISUSE, *ppBlob is set to NULL.)^ ^This means that, provided ** the API is not misused, it is always safe to call [sqlite3_blob_close()]  ** on *ppBlob after this function it returns. ** ** This function fails with SQLITE_ERROR if any of the following are true: **<ul> **<li> ^(Database zDb does not exist)^,  **<li> ^(Table zTable does not exist within database zDb)^,  **<li> ^(Table zTable is a WITHOUT ROWID table)^,  **<li> ^(Column zColumn does not exist)^, **<li> ^(Row iRow is not present in the table)^, **<li> ^(The specified column of row iRow contains a value that is not **         a TEXT or BLOB value)^, **<li> ^(Column zColumn is part of an index, PRIMARY KEY or UNIQUE  **         constraint and the blob is being opened for read/write access)^, **<li> ^([foreign key constraints | Foreign key constraints] are enabled,  **         column zColumn is part of a [child key] definition and the blob is **         being opened for read/write access)^. **</ul> ** ** ^Unless it returns SQLITE_MISUSE, this function sets the  ** [database connection] error code and message accessible via  ** [sqlite3_errcode()] and [sqlite3_errmsg()] and related functions.  ** ** ** ^(If the row that a BLOB handle points to is modified by an ** [UPDATE], [DELETE], or by [ON CONFLICT] side-effects ** then the BLOB handle is marked as "expired". ** This is true if any column of the row is changed, even a column ** other than the one the BLOB handle is open on.)^ ** ^Calls to [sqlite3_blob_read()] and [sqlite3_blob_write()] for ** an expired BLOB handle fail with a return code of [SQLITE_ABORT]. ** ^(Changes written into a BLOB prior to the BLOB expiring are not ** rolled back by the expiration of the BLOB.  Such changes will eventually ** commit if the transaction continues to completion.)^ ** ** ^Use the [sqlite3_blob_bytes()] interface to determine the size of ** the opened blob.  ^The size of a blob may not be changed by this ** interface.  Use the [UPDATE] SQL command to change the size of a ** blob. ** ** ^The [sqlite3_bind_zeroblob()] and [sqlite3_result_zeroblob()] interfaces ** and the built-in [zeroblob] SQL function may be used to create a  ** zero-filled blob to read or write using the incremental-blob interface. ** ** To avoid a resource leak, every open [BLOB handle] should eventually ** be released by a call to [sqlite3_blob_close()]. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_blob_open
parameter_list|(
name|sqlite3
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|zDb
parameter_list|,
specifier|const
name|char
modifier|*
name|zTable
parameter_list|,
specifier|const
name|char
modifier|*
name|zColumn
parameter_list|,
name|sqlite3_int64
name|iRow
parameter_list|,
name|int
name|flags
parameter_list|,
name|sqlite3_blob
modifier|*
modifier|*
name|ppBlob
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Move a BLOB Handle to a New Row ** METHOD: sqlite3_blob ** ** ^This function is used to move an existing blob handle so that it points ** to a different row of the same database table. ^The new row is identified ** by the rowid value passed as the second argument. Only the row can be ** changed. ^The database, table and column on which the blob handle is open ** remain the same. Moving an existing blob handle to a new row can be ** faster than closing the existing handle and opening a new one. ** ** ^(The new row must meet the same criteria as for [sqlite3_blob_open()] - ** it must exist and there must be either a blob or text value stored in ** the nominated column.)^ ^If the new row is not present in the table, or if ** it does not contain a blob or text value, or if another error occurs, an ** SQLite error code is returned and the blob handle is considered aborted. ** ^All subsequent calls to [sqlite3_blob_read()], [sqlite3_blob_write()] or ** [sqlite3_blob_reopen()] on an aborted blob handle immediately return ** SQLITE_ABORT. ^Calling [sqlite3_blob_bytes()] on an aborted blob handle ** always returns zero. ** ** ^This function sets the database handle error code and message. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_blob_reopen
parameter_list|(
name|sqlite3_blob
modifier|*
parameter_list|,
name|sqlite3_int64
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Close A BLOB Handle ** DESTRUCTOR: sqlite3_blob ** ** ^This function closes an open [BLOB handle]. ^(The BLOB handle is closed ** unconditionally.  Even if this routine returns an error code, the  ** handle is still closed.)^ ** ** ^If the blob handle being closed was opened for read-write access, and if ** the database is in auto-commit mode and there are no other open read-write ** blob handles or active write statements, the current transaction is ** committed. ^If an error occurs while committing the transaction, an error ** code is returned and the transaction rolled back. ** ** Calling this function with an argument that is not a NULL pointer or an ** open blob handle results in undefined behaviour. ^Calling this routine  ** with a null pointer (such as would be returned by a failed call to  ** [sqlite3_blob_open()]) is a harmless no-op. ^Otherwise, if this function ** is passed a valid open blob handle, the values returned by the  ** sqlite3_errcode() and sqlite3_errmsg() functions are set before returning. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_blob_close
parameter_list|(
name|sqlite3_blob
modifier|*
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Return The Size Of An Open BLOB ** METHOD: sqlite3_blob ** ** ^Returns the size in bytes of the BLOB accessible via the  ** successfully opened [BLOB handle] in its only argument.  ^The ** incremental blob I/O routines can only read or overwriting existing ** blob content; they cannot change the size of a blob. ** ** This routine only works on a [BLOB handle] which has been created ** by a prior successful call to [sqlite3_blob_open()] and which has not ** been closed by [sqlite3_blob_close()].  Passing any other pointer in ** to this routine results in undefined and probably undesirable behavior. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_blob_bytes
parameter_list|(
name|sqlite3_blob
modifier|*
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Read Data From A BLOB Incrementally ** METHOD: sqlite3_blob ** ** ^(This function is used to read data from an open [BLOB handle] into a ** caller-supplied buffer. N bytes of data are copied into buffer Z ** from the open BLOB, starting at offset iOffset.)^ ** ** ^If offset iOffset is less than N bytes from the end of the BLOB, ** [SQLITE_ERROR] is returned and no data is read.  ^If N or iOffset is ** less than zero, [SQLITE_ERROR] is returned and no data is read. ** ^The size of the blob (and hence the maximum value of N+iOffset) ** can be determined using the [sqlite3_blob_bytes()] interface. ** ** ^An attempt to read from an expired [BLOB handle] fails with an ** error code of [SQLITE_ABORT]. ** ** ^(On success, sqlite3_blob_read() returns SQLITE_OK. ** Otherwise, an [error code] or an [extended error code] is returned.)^ ** ** This routine only works on a [BLOB handle] which has been created ** by a prior successful call to [sqlite3_blob_open()] and which has not ** been closed by [sqlite3_blob_close()].  Passing any other pointer in ** to this routine results in undefined and probably undesirable behavior. ** ** See also: [sqlite3_blob_write()]. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_blob_read
parameter_list|(
name|sqlite3_blob
modifier|*
parameter_list|,
name|void
modifier|*
name|Z
parameter_list|,
name|int
name|N
parameter_list|,
name|int
name|iOffset
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Write Data Into A BLOB Incrementally ** METHOD: sqlite3_blob ** ** ^(This function is used to write data into an open [BLOB handle] from a ** caller-supplied buffer. N bytes of data are copied from the buffer Z ** into the open BLOB, starting at offset iOffset.)^ ** ** ^(On success, sqlite3_blob_write() returns SQLITE_OK. ** Otherwise, an  [error code] or an [extended error code] is returned.)^ ** ^Unless SQLITE_MISUSE is returned, this function sets the  ** [database connection] error code and message accessible via  ** [sqlite3_errcode()] and [sqlite3_errmsg()] and related functions.  ** ** ^If the [BLOB handle] passed as the first argument was not opened for ** writing (the flags parameter to [sqlite3_blob_open()] was zero), ** this function returns [SQLITE_READONLY]. ** ** This function may only modify the contents of the BLOB; it is ** not possible to increase the size of a BLOB using this API. ** ^If offset iOffset is less than N bytes from the end of the BLOB, ** [SQLITE_ERROR] is returned and no data is written. The size of the  ** BLOB (and hence the maximum value of N+iOffset) can be determined  ** using the [sqlite3_blob_bytes()] interface. ^If N or iOffset are less  ** than zero [SQLITE_ERROR] is returned and no data is written. ** ** ^An attempt to write to an expired [BLOB handle] fails with an ** error code of [SQLITE_ABORT].  ^Writes to the BLOB that occurred ** before the [BLOB handle] expired are not rolled back by the ** expiration of the handle, though of course those changes might ** have been overwritten by the statement that expired the BLOB handle ** or by other independent statements. ** ** This routine only works on a [BLOB handle] which has been created ** by a prior successful call to [sqlite3_blob_open()] and which has not ** been closed by [sqlite3_blob_close()].  Passing any other pointer in ** to this routine results in undefined and probably undesirable behavior. ** ** See also: [sqlite3_blob_read()]. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_blob_write
parameter_list|(
name|sqlite3_blob
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
name|z
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|iOffset
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Virtual File System Objects ** ** A virtual filesystem (VFS) is an [sqlite3_vfs] object ** that SQLite uses to interact ** with the underlying operating system.  Most SQLite builds come with a ** single default VFS that is appropriate for the host computer. ** New VFSes can be registered and existing VFSes can be unregistered. ** The following interfaces are provided. ** ** ^The sqlite3_vfs_find() interface returns a pointer to a VFS given its name. ** ^Names are case sensitive. ** ^Names are zero-terminated UTF-8 strings. ** ^If there is no match, a NULL pointer is returned. ** ^If zVfsName is NULL then the default VFS is returned. ** ** ^New VFSes are registered with sqlite3_vfs_register(). ** ^Each new VFS becomes the default VFS if the makeDflt flag is set. ** ^The same VFS can be registered multiple times without injury. ** ^To make an existing VFS into the default VFS, register it again ** with the makeDflt flag set.  If two different VFSes with the ** same name are registered, the behavior is undefined.  If a ** VFS is registered with a name that is NULL or an empty string, ** then the behavior is undefined. ** ** ^Unregister a VFS with the sqlite3_vfs_unregister() interface. ** ^(If the default VFS is unregistered, another VFS is chosen as ** the default.  The choice for the new VFS is arbitrary.)^ */
name|SQLITE_API
name|sqlite3_vfs
modifier|*
name|SQLITE_STDCALL
name|sqlite3_vfs_find
parameter_list|(
specifier|const
name|char
modifier|*
name|zVfsName
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_vfs_register
parameter_list|(
name|sqlite3_vfs
modifier|*
parameter_list|,
name|int
name|makeDflt
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_vfs_unregister
parameter_list|(
name|sqlite3_vfs
modifier|*
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Mutexes ** ** The SQLite core uses these routines for thread ** synchronization. Though they are intended for internal ** use by SQLite, code that links against SQLite is ** permitted to use any of these routines. ** ** The SQLite source code contains multiple implementations ** of these mutex routines.  An appropriate implementation ** is selected automatically at compile-time.  The following ** implementations are available in the SQLite core: ** **<ul> **<li>   SQLITE_MUTEX_PTHREADS **<li>   SQLITE_MUTEX_W32 **<li>   SQLITE_MUTEX_NOOP **</ul> ** ** The SQLITE_MUTEX_NOOP implementation is a set of routines ** that does no real locking and is appropriate for use in ** a single-threaded application.  The SQLITE_MUTEX_PTHREADS and ** SQLITE_MUTEX_W32 implementations are appropriate for use on Unix ** and Windows. ** ** If SQLite is compiled with the SQLITE_MUTEX_APPDEF preprocessor ** macro defined (with "-DSQLITE_MUTEX_APPDEF=1"), then no mutex ** implementation is included with the library. In this case the ** application must supply a custom mutex implementation using the ** [SQLITE_CONFIG_MUTEX] option of the sqlite3_config() function ** before calling sqlite3_initialize() or any other public sqlite3_ ** function that calls sqlite3_initialize(). ** ** ^The sqlite3_mutex_alloc() routine allocates a new ** mutex and returns a pointer to it. ^The sqlite3_mutex_alloc() ** routine returns NULL if it is unable to allocate the requested ** mutex.  The argument to sqlite3_mutex_alloc() must one of these ** integer constants: ** **<ul> **<li>  SQLITE_MUTEX_FAST **<li>  SQLITE_MUTEX_RECURSIVE **<li>  SQLITE_MUTEX_STATIC_MASTER **<li>  SQLITE_MUTEX_STATIC_MEM **<li>  SQLITE_MUTEX_STATIC_OPEN **<li>  SQLITE_MUTEX_STATIC_PRNG **<li>  SQLITE_MUTEX_STATIC_LRU **<li>  SQLITE_MUTEX_STATIC_PMEM **<li>  SQLITE_MUTEX_STATIC_APP1 **<li>  SQLITE_MUTEX_STATIC_APP2 **<li>  SQLITE_MUTEX_STATIC_APP3 **</ul> ** ** ^The first two constants (SQLITE_MUTEX_FAST and SQLITE_MUTEX_RECURSIVE) ** cause sqlite3_mutex_alloc() to create ** a new mutex.  ^The new mutex is recursive when SQLITE_MUTEX_RECURSIVE ** is used but not necessarily so when SQLITE_MUTEX_FAST is used. ** The mutex implementation does not need to make a distinction ** between SQLITE_MUTEX_RECURSIVE and SQLITE_MUTEX_FAST if it does ** not want to.  SQLite will only request a recursive mutex in ** cases where it really needs one.  If a faster non-recursive mutex ** implementation is available on the host platform, the mutex subsystem ** might return such a mutex in response to SQLITE_MUTEX_FAST. ** ** ^The other allowed parameters to sqlite3_mutex_alloc() (anything other ** than SQLITE_MUTEX_FAST and SQLITE_MUTEX_RECURSIVE) each return ** a pointer to a static preexisting mutex.  ^Nine static mutexes are ** used by the current version of SQLite.  Future versions of SQLite ** may add additional static mutexes.  Static mutexes are for internal ** use by SQLite only.  Applications that use SQLite mutexes should ** use only the dynamic mutexes returned by SQLITE_MUTEX_FAST or ** SQLITE_MUTEX_RECURSIVE. ** ** ^Note that if one of the dynamic mutex parameters (SQLITE_MUTEX_FAST ** or SQLITE_MUTEX_RECURSIVE) is used then sqlite3_mutex_alloc() ** returns a different mutex on every call.  ^For the static ** mutex types, the same mutex is returned on every call that has ** the same type number. ** ** ^The sqlite3_mutex_free() routine deallocates a previously ** allocated dynamic mutex.  Attempting to deallocate a static ** mutex results in undefined behavior. ** ** ^The sqlite3_mutex_enter() and sqlite3_mutex_try() routines attempt ** to enter a mutex.  ^If another thread is already within the mutex, ** sqlite3_mutex_enter() will block and sqlite3_mutex_try() will return ** SQLITE_BUSY.  ^The sqlite3_mutex_try() interface returns [SQLITE_OK] ** upon successful entry.  ^(Mutexes created using ** SQLITE_MUTEX_RECURSIVE can be entered multiple times by the same thread. ** In such cases, the ** mutex must be exited an equal number of times before another thread ** can enter.)^  If the same thread tries to enter any mutex other ** than an SQLITE_MUTEX_RECURSIVE more than once, the behavior is undefined. ** ** ^(Some systems (for example, Windows 95) do not support the operation ** implemented by sqlite3_mutex_try().  On those systems, sqlite3_mutex_try() ** will always return SQLITE_BUSY. The SQLite core only ever uses ** sqlite3_mutex_try() as an optimization so this is acceptable  ** behavior.)^ ** ** ^The sqlite3_mutex_leave() routine exits a mutex that was ** previously entered by the same thread.   The behavior ** is undefined if the mutex is not currently entered by the ** calling thread or is not currently allocated. ** ** ^If the argument to sqlite3_mutex_enter(), sqlite3_mutex_try(), or ** sqlite3_mutex_leave() is a NULL pointer, then all three routines ** behave as no-ops. ** ** See also: [sqlite3_mutex_held()] and [sqlite3_mutex_notheld()]. */
name|SQLITE_API
name|sqlite3_mutex
modifier|*
name|SQLITE_STDCALL
name|sqlite3_mutex_alloc
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|SQLITE_API
name|void
name|SQLITE_STDCALL
name|sqlite3_mutex_free
parameter_list|(
name|sqlite3_mutex
modifier|*
parameter_list|)
function_decl|;
name|SQLITE_API
name|void
name|SQLITE_STDCALL
name|sqlite3_mutex_enter
parameter_list|(
name|sqlite3_mutex
modifier|*
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_mutex_try
parameter_list|(
name|sqlite3_mutex
modifier|*
parameter_list|)
function_decl|;
name|SQLITE_API
name|void
name|SQLITE_STDCALL
name|sqlite3_mutex_leave
parameter_list|(
name|sqlite3_mutex
modifier|*
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Mutex Methods Object ** ** An instance of this structure defines the low-level routines ** used to allocate and use mutexes. ** ** Usually, the default mutex implementations provided by SQLite are ** sufficient, however the application has the option of substituting a custom ** implementation for specialized deployments or systems for which SQLite ** does not provide a suitable implementation. In this case, the application ** creates and populates an instance of this structure to pass ** to sqlite3_config() along with the [SQLITE_CONFIG_MUTEX] option. ** Additionally, an instance of this structure can be used as an ** output variable when querying the system for the current mutex ** implementation, using the [SQLITE_CONFIG_GETMUTEX] option. ** ** ^The xMutexInit method defined by this structure is invoked as ** part of system initialization by the sqlite3_initialize() function. ** ^The xMutexInit routine is called by SQLite exactly once for each ** effective call to [sqlite3_initialize()]. ** ** ^The xMutexEnd method defined by this structure is invoked as ** part of system shutdown by the sqlite3_shutdown() function. The ** implementation of this method is expected to release all outstanding ** resources obtained by the mutex methods implementation, especially ** those obtained by the xMutexInit method.  ^The xMutexEnd() ** interface is invoked exactly once for each call to [sqlite3_shutdown()]. ** ** ^(The remaining seven methods defined by this structure (xMutexAlloc, ** xMutexFree, xMutexEnter, xMutexTry, xMutexLeave, xMutexHeld and ** xMutexNotheld) implement the following interfaces (respectively): ** **<ul> **<li>  [sqlite3_mutex_alloc()]</li> **<li>  [sqlite3_mutex_free()]</li> **<li>  [sqlite3_mutex_enter()]</li> **<li>  [sqlite3_mutex_try()]</li> **<li>  [sqlite3_mutex_leave()]</li> **<li>  [sqlite3_mutex_held()]</li> **<li>  [sqlite3_mutex_notheld()]</li> **</ul>)^ ** ** The only difference is that the public sqlite3_XXX functions enumerated ** above silently ignore any invocations that pass a NULL pointer instead ** of a valid mutex handle. The implementations of the methods defined ** by this structure are not required to handle this case, the results ** of passing a NULL pointer instead of a valid mutex handle are undefined ** (i.e. it is acceptable to provide an implementation that segfaults if ** it is passed a NULL pointer). ** ** The xMutexInit() method must be threadsafe.  It must be harmless to ** invoke xMutexInit() multiple times within the same process and without ** intervening calls to xMutexEnd().  Second and subsequent calls to ** xMutexInit() must be no-ops. ** ** xMutexInit() must not use SQLite memory allocation ([sqlite3_malloc()] ** and its associates).  Similarly, xMutexAlloc() must not use SQLite memory ** allocation for a static mutex.  ^However xMutexAlloc() may use SQLite ** memory allocation for a fast or recursive mutex. ** ** ^SQLite will invoke the xMutexEnd() method when [sqlite3_shutdown()] is ** called, but only if the prior call to xMutexInit returned SQLITE_OK. ** If xMutexInit fails in any way, it is expected to clean up after itself ** prior to returning. */
typedef|typedef
name|struct
name|sqlite3_mutex_methods
name|sqlite3_mutex_methods
typedef|;
struct|struct
name|sqlite3_mutex_methods
block|{
name|int
function_decl|(
modifier|*
name|xMutexInit
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xMutexEnd
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|sqlite3_mutex
modifier|*
function_decl|(
modifier|*
name|xMutexAlloc
function_decl|)
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|xMutexFree
function_decl|)
parameter_list|(
name|sqlite3_mutex
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|xMutexEnter
function_decl|)
parameter_list|(
name|sqlite3_mutex
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xMutexTry
function_decl|)
parameter_list|(
name|sqlite3_mutex
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|xMutexLeave
function_decl|)
parameter_list|(
name|sqlite3_mutex
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xMutexHeld
function_decl|)
parameter_list|(
name|sqlite3_mutex
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xMutexNotheld
function_decl|)
parameter_list|(
name|sqlite3_mutex
modifier|*
parameter_list|)
function_decl|;
block|}
struct|;
comment|/* ** CAPI3REF: Mutex Verification Routines ** ** The sqlite3_mutex_held() and sqlite3_mutex_notheld() routines ** are intended for use inside assert() statements.  The SQLite core ** never uses these routines except inside an assert() and applications ** are advised to follow the lead of the core.  The SQLite core only ** provides implementations for these routines when it is compiled ** with the SQLITE_DEBUG flag.  External mutex implementations ** are only required to provide these routines if SQLITE_DEBUG is ** defined and if NDEBUG is not defined. ** ** These routines should return true if the mutex in their argument ** is held or not held, respectively, by the calling thread. ** ** The implementation is not required to provide versions of these ** routines that actually work. If the implementation does not provide working ** versions of these routines, it should at least provide stubs that always ** return true so that one does not get spurious assertion failures. ** ** If the argument to sqlite3_mutex_held() is a NULL pointer then ** the routine should return 1.   This seems counter-intuitive since ** clearly the mutex cannot be held if it does not exist.  But ** the reason the mutex does not exist is because the build is not ** using mutexes.  And we do not want the assert() containing the ** call to sqlite3_mutex_held() to fail, so a non-zero return is ** the appropriate thing to do.  The sqlite3_mutex_notheld() ** interface should also return 1 when given a NULL pointer. */
ifndef|#
directive|ifndef
name|NDEBUG
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_mutex_held
parameter_list|(
name|sqlite3_mutex
modifier|*
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_mutex_notheld
parameter_list|(
name|sqlite3_mutex
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* ** CAPI3REF: Mutex Types ** ** The [sqlite3_mutex_alloc()] interface takes a single argument ** which is one of these integer constants. ** ** The set of static mutexes may change from one SQLite release to the ** next.  Applications that override the built-in mutex logic must be ** prepared to accommodate additional static mutexes. */
define|#
directive|define
name|SQLITE_MUTEX_FAST
value|0
define|#
directive|define
name|SQLITE_MUTEX_RECURSIVE
value|1
define|#
directive|define
name|SQLITE_MUTEX_STATIC_MASTER
value|2
define|#
directive|define
name|SQLITE_MUTEX_STATIC_MEM
value|3
comment|/* sqlite3_malloc() */
define|#
directive|define
name|SQLITE_MUTEX_STATIC_MEM2
value|4
comment|/* NOT USED */
define|#
directive|define
name|SQLITE_MUTEX_STATIC_OPEN
value|4
comment|/* sqlite3BtreeOpen() */
define|#
directive|define
name|SQLITE_MUTEX_STATIC_PRNG
value|5
comment|/* sqlite3_random() */
define|#
directive|define
name|SQLITE_MUTEX_STATIC_LRU
value|6
comment|/* lru page list */
define|#
directive|define
name|SQLITE_MUTEX_STATIC_LRU2
value|7
comment|/* NOT USED */
define|#
directive|define
name|SQLITE_MUTEX_STATIC_PMEM
value|7
comment|/* sqlite3PageMalloc() */
define|#
directive|define
name|SQLITE_MUTEX_STATIC_APP1
value|8
comment|/* For use by application */
define|#
directive|define
name|SQLITE_MUTEX_STATIC_APP2
value|9
comment|/* For use by application */
define|#
directive|define
name|SQLITE_MUTEX_STATIC_APP3
value|10
comment|/* For use by application */
define|#
directive|define
name|SQLITE_MUTEX_STATIC_VFS1
value|11
comment|/* For use by built-in VFS */
define|#
directive|define
name|SQLITE_MUTEX_STATIC_VFS2
value|12
comment|/* For use by extension VFS */
define|#
directive|define
name|SQLITE_MUTEX_STATIC_VFS3
value|13
comment|/* For use by application VFS */
comment|/* ** CAPI3REF: Retrieve the mutex for a database connection ** METHOD: sqlite3 ** ** ^This interface returns a pointer the [sqlite3_mutex] object that  ** serializes access to the [database connection] given in the argument ** when the [threading mode] is Serialized. ** ^If the [threading mode] is Single-thread or Multi-thread then this ** routine returns a NULL pointer. */
name|SQLITE_API
name|sqlite3_mutex
modifier|*
name|SQLITE_STDCALL
name|sqlite3_db_mutex
parameter_list|(
name|sqlite3
modifier|*
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Low-Level Control Of Database Files ** METHOD: sqlite3 ** ** ^The [sqlite3_file_control()] interface makes a direct call to the ** xFileControl method for the [sqlite3_io_methods] object associated ** with a particular database identified by the second argument. ^The ** name of the database is "main" for the main database or "temp" for the ** TEMP database, or the name that appears after the AS keyword for ** databases that are added using the [ATTACH] SQL command. ** ^A NULL pointer can be used in place of "main" to refer to the ** main database file. ** ^The third and fourth parameters to this routine ** are passed directly through to the second and third parameters of ** the xFileControl method.  ^The return value of the xFileControl ** method becomes the return value of this routine. ** ** ^The SQLITE_FCNTL_FILE_POINTER value for the op parameter causes ** a pointer to the underlying [sqlite3_file] object to be written into ** the space pointed to by the 4th parameter.  ^The SQLITE_FCNTL_FILE_POINTER ** case is a short-circuit path which does not actually invoke the ** underlying sqlite3_io_methods.xFileControl method. ** ** ^If the second parameter (zDbName) does not match the name of any ** open database file, then SQLITE_ERROR is returned.  ^This error ** code is not remembered and will not be recalled by [sqlite3_errcode()] ** or [sqlite3_errmsg()].  The underlying xFileControl method might ** also return SQLITE_ERROR.  There is no way to distinguish between ** an incorrect zDbName and an SQLITE_ERROR return from the underlying ** xFileControl method. ** ** See also: [SQLITE_FCNTL_LOCKSTATE] */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_file_control
parameter_list|(
name|sqlite3
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|zDbName
parameter_list|,
name|int
name|op
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Testing Interface ** ** ^The sqlite3_test_control() interface is used to read out internal ** state of SQLite and to inject faults into SQLite for testing ** purposes.  ^The first parameter is an operation code that determines ** the number, meaning, and operation of all subsequent parameters. ** ** This interface is not for use by applications.  It exists solely ** for verifying the correct operation of the SQLite library.  Depending ** on how the SQLite library is compiled, this interface might not exist. ** ** The details of the operation codes, their meanings, the parameters ** they take, and what they do are all subject to change without notice. ** Unlike most of the SQLite API, this function is not guaranteed to ** operate consistently from one release to the next. */
name|SQLITE_API
name|int
name|SQLITE_CDECL
name|sqlite3_test_control
parameter_list|(
name|int
name|op
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Testing Interface Operation Codes ** ** These constants are the valid operation code parameters used ** as the first argument to [sqlite3_test_control()]. ** ** These parameters and their meanings are subject to change ** without notice.  These values are for testing purposes only. ** Applications should not use any of these parameters or the ** [sqlite3_test_control()] interface. */
define|#
directive|define
name|SQLITE_TESTCTRL_FIRST
value|5
define|#
directive|define
name|SQLITE_TESTCTRL_PRNG_SAVE
value|5
define|#
directive|define
name|SQLITE_TESTCTRL_PRNG_RESTORE
value|6
define|#
directive|define
name|SQLITE_TESTCTRL_PRNG_RESET
value|7
define|#
directive|define
name|SQLITE_TESTCTRL_BITVEC_TEST
value|8
define|#
directive|define
name|SQLITE_TESTCTRL_FAULT_INSTALL
value|9
define|#
directive|define
name|SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS
value|10
define|#
directive|define
name|SQLITE_TESTCTRL_PENDING_BYTE
value|11
define|#
directive|define
name|SQLITE_TESTCTRL_ASSERT
value|12
define|#
directive|define
name|SQLITE_TESTCTRL_ALWAYS
value|13
define|#
directive|define
name|SQLITE_TESTCTRL_RESERVE
value|14
define|#
directive|define
name|SQLITE_TESTCTRL_OPTIMIZATIONS
value|15
define|#
directive|define
name|SQLITE_TESTCTRL_ISKEYWORD
value|16
define|#
directive|define
name|SQLITE_TESTCTRL_SCRATCHMALLOC
value|17
define|#
directive|define
name|SQLITE_TESTCTRL_LOCALTIME_FAULT
value|18
define|#
directive|define
name|SQLITE_TESTCTRL_EXPLAIN_STMT
value|19
comment|/* NOT USED */
define|#
directive|define
name|SQLITE_TESTCTRL_NEVER_CORRUPT
value|20
define|#
directive|define
name|SQLITE_TESTCTRL_VDBE_COVERAGE
value|21
define|#
directive|define
name|SQLITE_TESTCTRL_BYTEORDER
value|22
define|#
directive|define
name|SQLITE_TESTCTRL_ISINIT
value|23
define|#
directive|define
name|SQLITE_TESTCTRL_SORTER_MMAP
value|24
define|#
directive|define
name|SQLITE_TESTCTRL_IMPOSTER
value|25
define|#
directive|define
name|SQLITE_TESTCTRL_LAST
value|25
comment|/* ** CAPI3REF: SQLite Runtime Status ** ** ^These interfaces are used to retrieve runtime status information ** about the performance of SQLite, and optionally to reset various ** highwater marks.  ^The first argument is an integer code for ** the specific parameter to measure.  ^(Recognized integer codes ** are of the form [status parameters | SQLITE_STATUS_...].)^ ** ^The current value of the parameter is returned into *pCurrent. ** ^The highest recorded value is returned in *pHighwater.  ^If the ** resetFlag is true, then the highest record value is reset after ** *pHighwater is written.  ^(Some parameters do not record the highest ** value.  For those parameters ** nothing is written into *pHighwater and the resetFlag is ignored.)^ ** ^(Other parameters record only the highwater mark and not the current ** value.  For these latter parameters nothing is written into *pCurrent.)^ ** ** ^The sqlite3_status() and sqlite3_status64() routines return ** SQLITE_OK on success and a non-zero [error code] on failure. ** ** If either the current value or the highwater mark is too large to ** be represented by a 32-bit integer, then the values returned by ** sqlite3_status() are undefined. ** ** See also: [sqlite3_db_status()] */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_status
parameter_list|(
name|int
name|op
parameter_list|,
name|int
modifier|*
name|pCurrent
parameter_list|,
name|int
modifier|*
name|pHighwater
parameter_list|,
name|int
name|resetFlag
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_status64
parameter_list|(
name|int
name|op
parameter_list|,
name|sqlite3_int64
modifier|*
name|pCurrent
parameter_list|,
name|sqlite3_int64
modifier|*
name|pHighwater
parameter_list|,
name|int
name|resetFlag
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Status Parameters ** KEYWORDS: {status parameters} ** ** These integer constants designate various run-time status parameters ** that can be returned by [sqlite3_status()]. ** **<dl> ** [[SQLITE_STATUS_MEMORY_USED]] ^(<dt>SQLITE_STATUS_MEMORY_USED</dt> **<dd>This parameter is the current amount of memory checked out ** using [sqlite3_malloc()], either directly or indirectly.  The ** figure includes calls made to [sqlite3_malloc()] by the application ** and internal memory usage by the SQLite library.  Scratch memory ** controlled by [SQLITE_CONFIG_SCRATCH] and auxiliary page-cache ** memory controlled by [SQLITE_CONFIG_PAGECACHE] is not included in ** this parameter.  The amount returned is the sum of the allocation ** sizes as reported by the xSize method in [sqlite3_mem_methods].</dd>)^ ** ** [[SQLITE_STATUS_MALLOC_SIZE]] ^(<dt>SQLITE_STATUS_MALLOC_SIZE</dt> **<dd>This parameter records the largest memory allocation request ** handed to [sqlite3_malloc()] or [sqlite3_realloc()] (or their ** internal equivalents).  Only the value returned in the ** *pHighwater parameter to [sqlite3_status()] is of interest.   ** The value written into the *pCurrent parameter is undefined.</dd>)^ ** ** [[SQLITE_STATUS_MALLOC_COUNT]] ^(<dt>SQLITE_STATUS_MALLOC_COUNT</dt> **<dd>This parameter records the number of separate memory allocations ** currently checked out.</dd>)^ ** ** [[SQLITE_STATUS_PAGECACHE_USED]] ^(<dt>SQLITE_STATUS_PAGECACHE_USED</dt> **<dd>This parameter returns the number of pages used out of the ** [pagecache memory allocator] that was configured using  ** [SQLITE_CONFIG_PAGECACHE].  The ** value returned is in pages, not in bytes.</dd>)^ ** ** [[SQLITE_STATUS_PAGECACHE_OVERFLOW]]  ** ^(<dt>SQLITE_STATUS_PAGECACHE_OVERFLOW</dt> **<dd>This parameter returns the number of bytes of page cache ** allocation which could not be satisfied by the [SQLITE_CONFIG_PAGECACHE] ** buffer and where forced to overflow to [sqlite3_malloc()].  The ** returned value includes allocations that overflowed because they ** where too large (they were larger than the "sz" parameter to ** [SQLITE_CONFIG_PAGECACHE]) and allocations that overflowed because ** no space was left in the page cache.</dd>)^ ** ** [[SQLITE_STATUS_PAGECACHE_SIZE]] ^(<dt>SQLITE_STATUS_PAGECACHE_SIZE</dt> **<dd>This parameter records the largest memory allocation request ** handed to [pagecache memory allocator].  Only the value returned in the ** *pHighwater parameter to [sqlite3_status()] is of interest.   ** The value written into the *pCurrent parameter is undefined.</dd>)^ ** ** [[SQLITE_STATUS_SCRATCH_USED]] ^(<dt>SQLITE_STATUS_SCRATCH_USED</dt> **<dd>This parameter returns the number of allocations used out of the ** [scratch memory allocator] configured using ** [SQLITE_CONFIG_SCRATCH].  The value returned is in allocations, not ** in bytes.  Since a single thread may only have one scratch allocation ** outstanding at time, this parameter also reports the number of threads ** using scratch memory at the same time.</dd>)^ ** ** [[SQLITE_STATUS_SCRATCH_OVERFLOW]] ^(<dt>SQLITE_STATUS_SCRATCH_OVERFLOW</dt> **<dd>This parameter returns the number of bytes of scratch memory ** allocation which could not be satisfied by the [SQLITE_CONFIG_SCRATCH] ** buffer and where forced to overflow to [sqlite3_malloc()].  The values ** returned include overflows because the requested allocation was too ** larger (that is, because the requested allocation was larger than the ** "sz" parameter to [SQLITE_CONFIG_SCRATCH]) and because no scratch buffer ** slots were available. **</dd>)^ ** ** [[SQLITE_STATUS_SCRATCH_SIZE]] ^(<dt>SQLITE_STATUS_SCRATCH_SIZE</dt> **<dd>This parameter records the largest memory allocation request ** handed to [scratch memory allocator].  Only the value returned in the ** *pHighwater parameter to [sqlite3_status()] is of interest.   ** The value written into the *pCurrent parameter is undefined.</dd>)^ ** ** [[SQLITE_STATUS_PARSER_STACK]] ^(<dt>SQLITE_STATUS_PARSER_STACK</dt> **<dd>This parameter records the deepest parser stack.  It is only ** meaningful if SQLite is compiled with [YYTRACKMAXSTACKDEPTH].</dd>)^ **</dl> ** ** New status parameters may be added from time to time. */
define|#
directive|define
name|SQLITE_STATUS_MEMORY_USED
value|0
define|#
directive|define
name|SQLITE_STATUS_PAGECACHE_USED
value|1
define|#
directive|define
name|SQLITE_STATUS_PAGECACHE_OVERFLOW
value|2
define|#
directive|define
name|SQLITE_STATUS_SCRATCH_USED
value|3
define|#
directive|define
name|SQLITE_STATUS_SCRATCH_OVERFLOW
value|4
define|#
directive|define
name|SQLITE_STATUS_MALLOC_SIZE
value|5
define|#
directive|define
name|SQLITE_STATUS_PARSER_STACK
value|6
define|#
directive|define
name|SQLITE_STATUS_PAGECACHE_SIZE
value|7
define|#
directive|define
name|SQLITE_STATUS_SCRATCH_SIZE
value|8
define|#
directive|define
name|SQLITE_STATUS_MALLOC_COUNT
value|9
comment|/* ** CAPI3REF: Database Connection Status ** METHOD: sqlite3 ** ** ^This interface is used to retrieve runtime status information  ** about a single [database connection].  ^The first argument is the ** database connection object to be interrogated.  ^The second argument ** is an integer constant, taken from the set of ** [SQLITE_DBSTATUS options], that ** determines the parameter to interrogate.  The set of  ** [SQLITE_DBSTATUS options] is likely ** to grow in future releases of SQLite. ** ** ^The current value of the requested parameter is written into *pCur ** and the highest instantaneous value is written into *pHiwtr.  ^If ** the resetFlg is true, then the highest instantaneous value is ** reset back down to the current value. ** ** ^The sqlite3_db_status() routine returns SQLITE_OK on success and a ** non-zero [error code] on failure. ** ** See also: [sqlite3_status()] and [sqlite3_stmt_status()]. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_db_status
parameter_list|(
name|sqlite3
modifier|*
parameter_list|,
name|int
name|op
parameter_list|,
name|int
modifier|*
name|pCur
parameter_list|,
name|int
modifier|*
name|pHiwtr
parameter_list|,
name|int
name|resetFlg
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Status Parameters for database connections ** KEYWORDS: {SQLITE_DBSTATUS options} ** ** These constants are the available integer "verbs" that can be passed as ** the second argument to the [sqlite3_db_status()] interface. ** ** New verbs may be added in future releases of SQLite. Existing verbs ** might be discontinued. Applications should check the return code from ** [sqlite3_db_status()] to make sure that the call worked. ** The [sqlite3_db_status()] interface will return a non-zero error code ** if a discontinued or unsupported verb is invoked. ** **<dl> ** [[SQLITE_DBSTATUS_LOOKASIDE_USED]] ^(<dt>SQLITE_DBSTATUS_LOOKASIDE_USED</dt> **<dd>This parameter returns the number of lookaside memory slots currently ** checked out.</dd>)^ ** ** [[SQLITE_DBSTATUS_LOOKASIDE_HIT]] ^(<dt>SQLITE_DBSTATUS_LOOKASIDE_HIT</dt> **<dd>This parameter returns the number malloc attempts that were  ** satisfied using lookaside memory. Only the high-water value is meaningful; ** the current value is always zero.)^ ** ** [[SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE]] ** ^(<dt>SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE</dt> **<dd>This parameter returns the number malloc attempts that might have ** been satisfied using lookaside memory but failed due to the amount of ** memory requested being larger than the lookaside slot size. ** Only the high-water value is meaningful; ** the current value is always zero.)^ ** ** [[SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL]] ** ^(<dt>SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL</dt> **<dd>This parameter returns the number malloc attempts that might have ** been satisfied using lookaside memory but failed due to all lookaside ** memory already being in use. ** Only the high-water value is meaningful; ** the current value is always zero.)^ ** ** [[SQLITE_DBSTATUS_CACHE_USED]] ^(<dt>SQLITE_DBSTATUS_CACHE_USED</dt> **<dd>This parameter returns the approximate number of bytes of heap ** memory used by all pager caches associated with the database connection.)^ ** ^The highwater mark associated with SQLITE_DBSTATUS_CACHE_USED is always 0. ** ** [[SQLITE_DBSTATUS_SCHEMA_USED]] ^(<dt>SQLITE_DBSTATUS_SCHEMA_USED</dt> **<dd>This parameter returns the approximate number of bytes of heap ** memory used to store the schema for all databases associated ** with the connection - main, temp, and any [ATTACH]-ed databases.)^  ** ^The full amount of memory used by the schemas is reported, even if the ** schema memory is shared with other database connections due to ** [shared cache mode] being enabled. ** ^The highwater mark associated with SQLITE_DBSTATUS_SCHEMA_USED is always 0. ** ** [[SQLITE_DBSTATUS_STMT_USED]] ^(<dt>SQLITE_DBSTATUS_STMT_USED</dt> **<dd>This parameter returns the approximate number of bytes of heap ** and lookaside memory used by all prepared statements associated with ** the database connection.)^ ** ^The highwater mark associated with SQLITE_DBSTATUS_STMT_USED is always 0. **</dd> ** ** [[SQLITE_DBSTATUS_CACHE_HIT]] ^(<dt>SQLITE_DBSTATUS_CACHE_HIT</dt> **<dd>This parameter returns the number of pager cache hits that have ** occurred.)^ ^The highwater mark associated with SQLITE_DBSTATUS_CACHE_HIT  ** is always 0. **</dd> ** ** [[SQLITE_DBSTATUS_CACHE_MISS]] ^(<dt>SQLITE_DBSTATUS_CACHE_MISS</dt> **<dd>This parameter returns the number of pager cache misses that have ** occurred.)^ ^The highwater mark associated with SQLITE_DBSTATUS_CACHE_MISS  ** is always 0. **</dd> ** ** [[SQLITE_DBSTATUS_CACHE_WRITE]] ^(<dt>SQLITE_DBSTATUS_CACHE_WRITE</dt> **<dd>This parameter returns the number of dirty cache entries that have ** been written to disk. Specifically, the number of pages written to the ** wal file in wal mode databases, or the number of pages written to the ** database file in rollback mode databases. Any pages written as part of ** transaction rollback or database recovery operations are not included. ** If an IO or other error occurs while writing a page to disk, the effect ** on subsequent SQLITE_DBSTATUS_CACHE_WRITE requests is undefined.)^ ^The ** highwater mark associated with SQLITE_DBSTATUS_CACHE_WRITE is always 0. **</dd> ** ** [[SQLITE_DBSTATUS_DEFERRED_FKS]] ^(<dt>SQLITE_DBSTATUS_DEFERRED_FKS</dt> **<dd>This parameter returns zero for the current value if and only if ** all foreign key constraints (deferred or immediate) have been ** resolved.)^  ^The highwater mark is always 0. **</dd> **</dl> */
define|#
directive|define
name|SQLITE_DBSTATUS_LOOKASIDE_USED
value|0
define|#
directive|define
name|SQLITE_DBSTATUS_CACHE_USED
value|1
define|#
directive|define
name|SQLITE_DBSTATUS_SCHEMA_USED
value|2
define|#
directive|define
name|SQLITE_DBSTATUS_STMT_USED
value|3
define|#
directive|define
name|SQLITE_DBSTATUS_LOOKASIDE_HIT
value|4
define|#
directive|define
name|SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE
value|5
define|#
directive|define
name|SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL
value|6
define|#
directive|define
name|SQLITE_DBSTATUS_CACHE_HIT
value|7
define|#
directive|define
name|SQLITE_DBSTATUS_CACHE_MISS
value|8
define|#
directive|define
name|SQLITE_DBSTATUS_CACHE_WRITE
value|9
define|#
directive|define
name|SQLITE_DBSTATUS_DEFERRED_FKS
value|10
define|#
directive|define
name|SQLITE_DBSTATUS_MAX
value|10
comment|/* Largest defined DBSTATUS */
comment|/* ** CAPI3REF: Prepared Statement Status ** METHOD: sqlite3_stmt ** ** ^(Each prepared statement maintains various ** [SQLITE_STMTSTATUS counters] that measure the number ** of times it has performed specific operations.)^  These counters can ** be used to monitor the performance characteristics of the prepared ** statements.  For example, if the number of table steps greatly exceeds ** the number of table searches or result rows, that would tend to indicate ** that the prepared statement is using a full table scan rather than ** an index.   ** ** ^(This interface is used to retrieve and reset counter values from ** a [prepared statement].  The first argument is the prepared statement ** object to be interrogated.  The second argument ** is an integer code for a specific [SQLITE_STMTSTATUS counter] ** to be interrogated.)^ ** ^The current value of the requested counter is returned. ** ^If the resetFlg is true, then the counter is reset to zero after this ** interface call returns. ** ** See also: [sqlite3_status()] and [sqlite3_db_status()]. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_stmt_status
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|,
name|int
name|op
parameter_list|,
name|int
name|resetFlg
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Status Parameters for prepared statements ** KEYWORDS: {SQLITE_STMTSTATUS counter} {SQLITE_STMTSTATUS counters} ** ** These preprocessor macros define integer codes that name counter ** values associated with the [sqlite3_stmt_status()] interface. ** The meanings of the various counters are as follows: ** **<dl> ** [[SQLITE_STMTSTATUS_FULLSCAN_STEP]]<dt>SQLITE_STMTSTATUS_FULLSCAN_STEP</dt> **<dd>^This is the number of times that SQLite has stepped forward in ** a table as part of a full table scan.  Large numbers for this counter ** may indicate opportunities for performance improvement through  ** careful use of indices.</dd> ** ** [[SQLITE_STMTSTATUS_SORT]]<dt>SQLITE_STMTSTATUS_SORT</dt> **<dd>^This is the number of sort operations that have occurred. ** A non-zero value in this counter may indicate an opportunity to ** improvement performance through careful use of indices.</dd> ** ** [[SQLITE_STMTSTATUS_AUTOINDEX]]<dt>SQLITE_STMTSTATUS_AUTOINDEX</dt> **<dd>^This is the number of rows inserted into transient indices that ** were created automatically in order to help joins run faster. ** A non-zero value in this counter may indicate an opportunity to ** improvement performance by adding permanent indices that do not ** need to be reinitialized each time the statement is run.</dd> ** ** [[SQLITE_STMTSTATUS_VM_STEP]]<dt>SQLITE_STMTSTATUS_VM_STEP</dt> **<dd>^This is the number of virtual machine operations executed ** by the prepared statement if that number is less than or equal ** to 2147483647.  The number of virtual machine operations can be  ** used as a proxy for the total work done by the prepared statement. ** If the number of virtual machine operations exceeds 2147483647 ** then the value returned by this statement status code is undefined. **</dd> **</dl> */
define|#
directive|define
name|SQLITE_STMTSTATUS_FULLSCAN_STEP
value|1
define|#
directive|define
name|SQLITE_STMTSTATUS_SORT
value|2
define|#
directive|define
name|SQLITE_STMTSTATUS_AUTOINDEX
value|3
define|#
directive|define
name|SQLITE_STMTSTATUS_VM_STEP
value|4
comment|/* ** CAPI3REF: Custom Page Cache Object ** ** The sqlite3_pcache type is opaque.  It is implemented by ** the pluggable module.  The SQLite core has no knowledge of ** its size or internal structure and never deals with the ** sqlite3_pcache object except by holding and passing pointers ** to the object. ** ** See [sqlite3_pcache_methods2] for additional information. */
typedef|typedef
name|struct
name|sqlite3_pcache
name|sqlite3_pcache
typedef|;
comment|/* ** CAPI3REF: Custom Page Cache Object ** ** The sqlite3_pcache_page object represents a single page in the ** page cache.  The page cache will allocate instances of this ** object.  Various methods of the page cache use pointers to instances ** of this object as parameters or as their return value. ** ** See [sqlite3_pcache_methods2] for additional information. */
typedef|typedef
name|struct
name|sqlite3_pcache_page
name|sqlite3_pcache_page
typedef|;
struct|struct
name|sqlite3_pcache_page
block|{
name|void
modifier|*
name|pBuf
decl_stmt|;
comment|/* The content of the page */
name|void
modifier|*
name|pExtra
decl_stmt|;
comment|/* Extra information associated with the page */
block|}
struct|;
comment|/* ** CAPI3REF: Application Defined Page Cache. ** KEYWORDS: {page cache} ** ** ^(The [sqlite3_config]([SQLITE_CONFIG_PCACHE2], ...) interface can ** register an alternative page cache implementation by passing in an  ** instance of the sqlite3_pcache_methods2 structure.)^ ** In many applications, most of the heap memory allocated by  ** SQLite is used for the page cache. ** By implementing a  ** custom page cache using this API, an application can better control ** the amount of memory consumed by SQLite, the way in which  ** that memory is allocated and released, and the policies used to  ** determine exactly which parts of a database file are cached and for  ** how long. ** ** The alternative page cache mechanism is an ** extreme measure that is only needed by the most demanding applications. ** The built-in page cache is recommended for most uses. ** ** ^(The contents of the sqlite3_pcache_methods2 structure are copied to an ** internal buffer by SQLite within the call to [sqlite3_config].  Hence ** the application may discard the parameter after the call to ** [sqlite3_config()] returns.)^ ** ** [[the xInit() page cache method]] ** ^(The xInit() method is called once for each effective  ** call to [sqlite3_initialize()])^ ** (usually only once during the lifetime of the process). ^(The xInit() ** method is passed a copy of the sqlite3_pcache_methods2.pArg value.)^ ** The intent of the xInit() method is to set up global data structures  ** required by the custom page cache implementation.  ** ^(If the xInit() method is NULL, then the  ** built-in default page cache is used instead of the application defined ** page cache.)^ ** ** [[the xShutdown() page cache method]] ** ^The xShutdown() method is called by [sqlite3_shutdown()]. ** It can be used to clean up  ** any outstanding resources before process shutdown, if required. ** ^The xShutdown() method may be NULL. ** ** ^SQLite automatically serializes calls to the xInit method, ** so the xInit method need not be threadsafe.  ^The ** xShutdown method is only called from [sqlite3_shutdown()] so it does ** not need to be threadsafe either.  All other methods must be threadsafe ** in multithreaded applications. ** ** ^SQLite will never invoke xInit() more than once without an intervening ** call to xShutdown(). ** ** [[the xCreate() page cache methods]] ** ^SQLite invokes the xCreate() method to construct a new cache instance. ** SQLite will typically create one cache instance for each open database file, ** though this is not guaranteed. ^The ** first parameter, szPage, is the size in bytes of the pages that must ** be allocated by the cache.  ^szPage will always a power of two.  ^The ** second parameter szExtra is a number of bytes of extra storage  ** associated with each page cache entry.  ^The szExtra parameter will ** a number less than 250.  SQLite will use the ** extra szExtra bytes on each page to store metadata about the underlying ** database page on disk.  The value passed into szExtra depends ** on the SQLite version, the target platform, and how SQLite was compiled. ** ^The third argument to xCreate(), bPurgeable, is true if the cache being ** created will be used to cache database pages of a file stored on disk, or ** false if it is used for an in-memory database. The cache implementation ** does not have to do anything special based with the value of bPurgeable; ** it is purely advisory.  ^On a cache where bPurgeable is false, SQLite will ** never invoke xUnpin() except to deliberately delete a page. ** ^In other words, calls to xUnpin() on a cache with bPurgeable set to ** false will always have the "discard" flag set to true.   ** ^Hence, a cache created with bPurgeable false will ** never contain any unpinned pages. ** ** [[the xCachesize() page cache method]] ** ^(The xCachesize() method may be called at any time by SQLite to set the ** suggested maximum cache-size (number of pages stored by) the cache ** instance passed as the first argument. This is the value configured using ** the SQLite "[PRAGMA cache_size]" command.)^  As with the bPurgeable ** parameter, the implementation is not required to do anything with this ** value; it is advisory only. ** ** [[the xPagecount() page cache methods]] ** The xPagecount() method must return the number of pages currently ** stored in the cache, both pinned and unpinned. **  ** [[the xFetch() page cache methods]] ** The xFetch() method locates a page in the cache and returns a pointer to  ** an sqlite3_pcache_page object associated with that page, or a NULL pointer. ** The pBuf element of the returned sqlite3_pcache_page object will be a ** pointer to a buffer of szPage bytes used to store the content of a  ** single database page.  The pExtra element of sqlite3_pcache_page will be ** a pointer to the szExtra bytes of extra storage that SQLite has requested ** for each entry in the page cache. ** ** The page to be fetched is determined by the key. ^The minimum key value ** is 1.  After it has been retrieved using xFetch, the page is considered ** to be "pinned". ** ** If the requested page is already in the page cache, then the page cache ** implementation must return a pointer to the page buffer with its content ** intact.  If the requested page is not already in the cache, then the ** cache implementation should use the value of the createFlag ** parameter to help it determined what action to take: ** **<table border=1 width=85% align=center> **<tr><th> createFlag<th> Behavior when page is not already in cache **<tr><td> 0<td> Do not allocate a new page.  Return NULL. **<tr><td> 1<td> Allocate a new page if it easy and convenient to do so. **                 Otherwise return NULL. **<tr><td> 2<td> Make every effort to allocate a new page.  Only return **                 NULL if allocating a new page is effectively impossible. **</table> ** ** ^(SQLite will normally invoke xFetch() with a createFlag of 0 or 1.  SQLite ** will only use a createFlag of 2 after a prior call with a createFlag of 1 ** failed.)^  In between the to xFetch() calls, SQLite may ** attempt to unpin one or more cache pages by spilling the content of ** pinned pages to disk and synching the operating system disk cache. ** ** [[the xUnpin() page cache method]] ** ^xUnpin() is called by SQLite with a pointer to a currently pinned page ** as its second argument.  If the third parameter, discard, is non-zero, ** then the page must be evicted from the cache. ** ^If the discard parameter is ** zero, then the page may be discarded or retained at the discretion of ** page cache implementation. ^The page cache implementation ** may choose to evict unpinned pages at any time. ** ** The cache must not perform any reference counting. A single  ** call to xUnpin() unpins the page regardless of the number of prior calls  ** to xFetch(). ** ** [[the xRekey() page cache methods]] ** The xRekey() method is used to change the key value associated with the ** page passed as the second argument. If the cache ** previously contains an entry associated with newKey, it must be ** discarded. ^Any prior cache entry associated with newKey is guaranteed not ** to be pinned. ** ** When SQLite calls the xTruncate() method, the cache must discard all ** existing cache entries with page numbers (keys) greater than or equal ** to the value of the iLimit parameter passed to xTruncate(). If any ** of these pages are pinned, they are implicitly unpinned, meaning that ** they can be safely discarded. ** ** [[the xDestroy() page cache method]] ** ^The xDestroy() method is used to delete a cache allocated by xCreate(). ** All resources associated with the specified cache should be freed. ^After ** calling the xDestroy() method, SQLite considers the [sqlite3_pcache*] ** handle invalid, and will not use it with any other sqlite3_pcache_methods2 ** functions. ** ** [[the xShrink() page cache method]] ** ^SQLite invokes the xShrink() method when it wants the page cache to ** free up as much of heap memory as possible.  The page cache implementation ** is not obligated to free any memory, but well-behaved implementations should ** do their best. */
typedef|typedef
name|struct
name|sqlite3_pcache_methods2
name|sqlite3_pcache_methods2
typedef|;
struct|struct
name|sqlite3_pcache_methods2
block|{
name|int
name|iVersion
decl_stmt|;
name|void
modifier|*
name|pArg
decl_stmt|;
name|int
function_decl|(
modifier|*
name|xInit
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|xShutdown
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
name|sqlite3_pcache
modifier|*
function_decl|(
modifier|*
name|xCreate
function_decl|)
parameter_list|(
name|int
name|szPage
parameter_list|,
name|int
name|szExtra
parameter_list|,
name|int
name|bPurgeable
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|xCachesize
function_decl|)
parameter_list|(
name|sqlite3_pcache
modifier|*
parameter_list|,
name|int
name|nCachesize
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xPagecount
function_decl|)
parameter_list|(
name|sqlite3_pcache
modifier|*
parameter_list|)
function_decl|;
name|sqlite3_pcache_page
modifier|*
function_decl|(
modifier|*
name|xFetch
function_decl|)
parameter_list|(
name|sqlite3_pcache
modifier|*
parameter_list|,
name|unsigned
name|key
parameter_list|,
name|int
name|createFlag
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|xUnpin
function_decl|)
parameter_list|(
name|sqlite3_pcache
modifier|*
parameter_list|,
name|sqlite3_pcache_page
modifier|*
parameter_list|,
name|int
name|discard
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|xRekey
function_decl|)
parameter_list|(
name|sqlite3_pcache
modifier|*
parameter_list|,
name|sqlite3_pcache_page
modifier|*
parameter_list|,
name|unsigned
name|oldKey
parameter_list|,
name|unsigned
name|newKey
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|xTruncate
function_decl|)
parameter_list|(
name|sqlite3_pcache
modifier|*
parameter_list|,
name|unsigned
name|iLimit
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|xDestroy
function_decl|)
parameter_list|(
name|sqlite3_pcache
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|xShrink
function_decl|)
parameter_list|(
name|sqlite3_pcache
modifier|*
parameter_list|)
function_decl|;
block|}
struct|;
comment|/* ** This is the obsolete pcache_methods object that has now been replaced ** by sqlite3_pcache_methods2.  This object is not used by SQLite.  It is ** retained in the header file for backwards compatibility only. */
typedef|typedef
name|struct
name|sqlite3_pcache_methods
name|sqlite3_pcache_methods
typedef|;
struct|struct
name|sqlite3_pcache_methods
block|{
name|void
modifier|*
name|pArg
decl_stmt|;
name|int
function_decl|(
modifier|*
name|xInit
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|xShutdown
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
name|sqlite3_pcache
modifier|*
function_decl|(
modifier|*
name|xCreate
function_decl|)
parameter_list|(
name|int
name|szPage
parameter_list|,
name|int
name|bPurgeable
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|xCachesize
function_decl|)
parameter_list|(
name|sqlite3_pcache
modifier|*
parameter_list|,
name|int
name|nCachesize
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|xPagecount
function_decl|)
parameter_list|(
name|sqlite3_pcache
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
function_decl|(
modifier|*
name|xFetch
function_decl|)
parameter_list|(
name|sqlite3_pcache
modifier|*
parameter_list|,
name|unsigned
name|key
parameter_list|,
name|int
name|createFlag
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|xUnpin
function_decl|)
parameter_list|(
name|sqlite3_pcache
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|int
name|discard
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|xRekey
function_decl|)
parameter_list|(
name|sqlite3_pcache
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|unsigned
name|oldKey
parameter_list|,
name|unsigned
name|newKey
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|xTruncate
function_decl|)
parameter_list|(
name|sqlite3_pcache
modifier|*
parameter_list|,
name|unsigned
name|iLimit
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|xDestroy
function_decl|)
parameter_list|(
name|sqlite3_pcache
modifier|*
parameter_list|)
function_decl|;
block|}
struct|;
comment|/* ** CAPI3REF: Online Backup Object ** ** The sqlite3_backup object records state information about an ongoing ** online backup operation.  ^The sqlite3_backup object is created by ** a call to [sqlite3_backup_init()] and is destroyed by a call to ** [sqlite3_backup_finish()]. ** ** See Also: [Using the SQLite Online Backup API] */
typedef|typedef
name|struct
name|sqlite3_backup
name|sqlite3_backup
typedef|;
comment|/* ** CAPI3REF: Online Backup API. ** ** The backup API copies the content of one database into another. ** It is useful either for creating backups of databases or ** for copying in-memory databases to or from persistent files.  ** ** See Also: [Using the SQLite Online Backup API] ** ** ^SQLite holds a write transaction open on the destination database file ** for the duration of the backup operation. ** ^The source database is read-locked only while it is being read; ** it is not locked continuously for the entire backup operation. ** ^Thus, the backup may be performed on a live source database without ** preventing other database connections from ** reading or writing to the source database while the backup is underway. **  ** ^(To perform a backup operation:  **<ol> **<li><b>sqlite3_backup_init()</b> is called once to initialize the **         backup,  **<li><b>sqlite3_backup_step()</b> is called one or more times to transfer  **         the data between the two databases, and finally **<li><b>sqlite3_backup_finish()</b> is called to release all resources  **         associated with the backup operation.  **</ol>)^ ** There should be exactly one call to sqlite3_backup_finish() for each ** successful call to sqlite3_backup_init(). ** ** [[sqlite3_backup_init()]]<b>sqlite3_backup_init()</b> ** ** ^The D and N arguments to sqlite3_backup_init(D,N,S,M) are the  ** [database connection] associated with the destination database  ** and the database name, respectively. ** ^The database name is "main" for the main database, "temp" for the ** temporary database, or the name specified after the AS keyword in ** an [ATTACH] statement for an attached database. ** ^The S and M arguments passed to  ** sqlite3_backup_init(D,N,S,M) identify the [database connection] ** and database name of the source database, respectively. ** ^The source and destination [database connections] (parameters S and D) ** must be different or else sqlite3_backup_init(D,N,S,M) will fail with ** an error. ** ** ^A call to sqlite3_backup_init() will fail, returning SQLITE_ERROR, if  ** there is already a read or read-write transaction open on the  ** destination database. ** ** ^If an error occurs within sqlite3_backup_init(D,N,S,M), then NULL is ** returned and an error code and error message are stored in the ** destination [database connection] D. ** ^The error code and message for the failed call to sqlite3_backup_init() ** can be retrieved using the [sqlite3_errcode()], [sqlite3_errmsg()], and/or ** [sqlite3_errmsg16()] functions. ** ^A successful call to sqlite3_backup_init() returns a pointer to an ** [sqlite3_backup] object. ** ^The [sqlite3_backup] object may be used with the sqlite3_backup_step() and ** sqlite3_backup_finish() functions to perform the specified backup  ** operation. ** ** [[sqlite3_backup_step()]]<b>sqlite3_backup_step()</b> ** ** ^Function sqlite3_backup_step(B,N) will copy up to N pages between  ** the source and destination databases specified by [sqlite3_backup] object B. ** ^If N is negative, all remaining source pages are copied.  ** ^If sqlite3_backup_step(B,N) successfully copies N pages and there ** are still more pages to be copied, then the function returns [SQLITE_OK]. ** ^If sqlite3_backup_step(B,N) successfully finishes copying all pages ** from source to destination, then it returns [SQLITE_DONE]. ** ^If an error occurs while running sqlite3_backup_step(B,N), ** then an [error code] is returned. ^As well as [SQLITE_OK] and ** [SQLITE_DONE], a call to sqlite3_backup_step() may return [SQLITE_READONLY], ** [SQLITE_NOMEM], [SQLITE_BUSY], [SQLITE_LOCKED], or an ** [SQLITE_IOERR_ACCESS | SQLITE_IOERR_XXX] extended error code. ** ** ^(The sqlite3_backup_step() might return [SQLITE_READONLY] if **<ol> **<li> the destination database was opened read-only, or **<li> the destination database is using write-ahead-log journaling ** and the destination and source page sizes differ, or **<li> the destination database is an in-memory database and the ** destination and source page sizes differ. **</ol>)^ ** ** ^If sqlite3_backup_step() cannot obtain a required file-system lock, then ** the [sqlite3_busy_handler | busy-handler function] ** is invoked (if one is specified). ^If the  ** busy-handler returns non-zero before the lock is available, then  ** [SQLITE_BUSY] is returned to the caller. ^In this case the call to ** sqlite3_backup_step() can be retried later. ^If the source ** [database connection] ** is being used to write to the source database when sqlite3_backup_step() ** is called, then [SQLITE_LOCKED] is returned immediately. ^Again, in this ** case the call to sqlite3_backup_step() can be retried later on. ^(If ** [SQLITE_IOERR_ACCESS | SQLITE_IOERR_XXX], [SQLITE_NOMEM], or ** [SQLITE_READONLY] is returned, then  ** there is no point in retrying the call to sqlite3_backup_step(). These  ** errors are considered fatal.)^  The application must accept  ** that the backup operation has failed and pass the backup operation handle  ** to the sqlite3_backup_finish() to release associated resources. ** ** ^The first call to sqlite3_backup_step() obtains an exclusive lock ** on the destination file. ^The exclusive lock is not released until either  ** sqlite3_backup_finish() is called or the backup operation is complete  ** and sqlite3_backup_step() returns [SQLITE_DONE].  ^Every call to ** sqlite3_backup_step() obtains a [shared lock] on the source database that ** lasts for the duration of the sqlite3_backup_step() call. ** ^Because the source database is not locked between calls to ** sqlite3_backup_step(), the source database may be modified mid-way ** through the backup process.  ^If the source database is modified by an ** external process or via a database connection other than the one being ** used by the backup operation, then the backup will be automatically ** restarted by the next call to sqlite3_backup_step(). ^If the source  ** database is modified by the using the same database connection as is used ** by the backup operation, then the backup database is automatically ** updated at the same time. ** ** [[sqlite3_backup_finish()]]<b>sqlite3_backup_finish()</b> ** ** When sqlite3_backup_step() has returned [SQLITE_DONE], or when the  ** application wishes to abandon the backup operation, the application ** should destroy the [sqlite3_backup] by passing it to sqlite3_backup_finish(). ** ^The sqlite3_backup_finish() interfaces releases all ** resources associated with the [sqlite3_backup] object.  ** ^If sqlite3_backup_step() has not yet returned [SQLITE_DONE], then any ** active write-transaction on the destination database is rolled back. ** The [sqlite3_backup] object is invalid ** and may not be used following a call to sqlite3_backup_finish(). ** ** ^The value returned by sqlite3_backup_finish is [SQLITE_OK] if no ** sqlite3_backup_step() errors occurred, regardless or whether or not ** sqlite3_backup_step() completed. ** ^If an out-of-memory condition or IO error occurred during any prior ** sqlite3_backup_step() call on the same [sqlite3_backup] object, then ** sqlite3_backup_finish() returns the corresponding [error code]. ** ** ^A return of [SQLITE_BUSY] or [SQLITE_LOCKED] from sqlite3_backup_step() ** is not a permanent error and does not affect the return value of ** sqlite3_backup_finish(). ** ** [[sqlite3_backup_remaining()]] [[sqlite3_backup_pagecount()]] **<b>sqlite3_backup_remaining() and sqlite3_backup_pagecount()</b> ** ** ^The sqlite3_backup_remaining() routine returns the number of pages still ** to be backed up at the conclusion of the most recent sqlite3_backup_step(). ** ^The sqlite3_backup_pagecount() routine returns the total number of pages ** in the source database at the conclusion of the most recent ** sqlite3_backup_step(). ** ^(The values returned by these functions are only updated by ** sqlite3_backup_step(). If the source database is modified in a way that ** changes the size of the source database or the number of pages remaining, ** those changes are not reflected in the output of sqlite3_backup_pagecount() ** and sqlite3_backup_remaining() until after the next ** sqlite3_backup_step().)^ ** **<b>Concurrent Usage of Database Handles</b> ** ** ^The source [database connection] may be used by the application for other ** purposes while a backup operation is underway or being initialized. ** ^If SQLite is compiled and configured to support threadsafe database ** connections, then the source database connection may be used concurrently ** from within other threads. ** ** However, the application must guarantee that the destination  ** [database connection] is not passed to any other API (by any thread) after  ** sqlite3_backup_init() is called and before the corresponding call to ** sqlite3_backup_finish().  SQLite does not currently check to see ** if the application incorrectly accesses the destination [database connection] ** and so no error code is reported, but the operations may malfunction ** nevertheless.  Use of the destination database connection while a ** backup is in progress might also also cause a mutex deadlock. ** ** If running in [shared cache mode], the application must ** guarantee that the shared cache used by the destination database ** is not accessed while the backup is running. In practice this means ** that the application must guarantee that the disk file being  ** backed up to is not accessed by any connection within the process, ** not just the specific connection that was passed to sqlite3_backup_init(). ** ** The [sqlite3_backup] object itself is partially threadsafe. Multiple  ** threads may safely make multiple concurrent calls to sqlite3_backup_step(). ** However, the sqlite3_backup_remaining() and sqlite3_backup_pagecount() ** APIs are not strictly speaking threadsafe. If they are invoked at the ** same time as another thread is invoking sqlite3_backup_step() it is ** possible that they return invalid values. */
name|SQLITE_API
name|sqlite3_backup
modifier|*
name|SQLITE_STDCALL
name|sqlite3_backup_init
parameter_list|(
name|sqlite3
modifier|*
name|pDest
parameter_list|,
comment|/* Destination database handle */
specifier|const
name|char
modifier|*
name|zDestName
parameter_list|,
comment|/* Destination database name */
name|sqlite3
modifier|*
name|pSource
parameter_list|,
comment|/* Source database handle */
specifier|const
name|char
modifier|*
name|zSourceName
comment|/* Source database name */
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_backup_step
parameter_list|(
name|sqlite3_backup
modifier|*
name|p
parameter_list|,
name|int
name|nPage
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_backup_finish
parameter_list|(
name|sqlite3_backup
modifier|*
name|p
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_backup_remaining
parameter_list|(
name|sqlite3_backup
modifier|*
name|p
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_backup_pagecount
parameter_list|(
name|sqlite3_backup
modifier|*
name|p
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Unlock Notification ** METHOD: sqlite3 ** ** ^When running in shared-cache mode, a database operation may fail with ** an [SQLITE_LOCKED] error if the required locks on the shared-cache or ** individual tables within the shared-cache cannot be obtained. See ** [SQLite Shared-Cache Mode] for a description of shared-cache locking.  ** ^This API may be used to register a callback that SQLite will invoke  ** when the connection currently holding the required lock relinquishes it. ** ^This API is only available if the library was compiled with the ** [SQLITE_ENABLE_UNLOCK_NOTIFY] C-preprocessor symbol defined. ** ** See Also: [Using the SQLite Unlock Notification Feature]. ** ** ^Shared-cache locks are released when a database connection concludes ** its current transaction, either by committing it or rolling it back.  ** ** ^When a connection (known as the blocked connection) fails to obtain a ** shared-cache lock and SQLITE_LOCKED is returned to the caller, the ** identity of the database connection (the blocking connection) that ** has locked the required resource is stored internally. ^After an  ** application receives an SQLITE_LOCKED error, it may call the ** sqlite3_unlock_notify() method with the blocked connection handle as  ** the first argument to register for a callback that will be invoked ** when the blocking connections current transaction is concluded. ^The ** callback is invoked from within the [sqlite3_step] or [sqlite3_close] ** call that concludes the blocking connections transaction. ** ** ^(If sqlite3_unlock_notify() is called in a multi-threaded application, ** there is a chance that the blocking connection will have already ** concluded its transaction by the time sqlite3_unlock_notify() is invoked. ** If this happens, then the specified callback is invoked immediately, ** from within the call to sqlite3_unlock_notify().)^ ** ** ^If the blocked connection is attempting to obtain a write-lock on a ** shared-cache table, and more than one other connection currently holds ** a read-lock on the same table, then SQLite arbitrarily selects one of  ** the other connections to use as the blocking connection. ** ** ^(There may be at most one unlock-notify callback registered by a  ** blocked connection. If sqlite3_unlock_notify() is called when the ** blocked connection already has a registered unlock-notify callback, ** then the new callback replaces the old.)^ ^If sqlite3_unlock_notify() is ** called with a NULL pointer as its second argument, then any existing ** unlock-notify callback is canceled. ^The blocked connections  ** unlock-notify callback may also be canceled by closing the blocked ** connection using [sqlite3_close()]. ** ** The unlock-notify callback is not reentrant. If an application invokes ** any sqlite3_xxx API functions from within an unlock-notify callback, a ** crash or deadlock may be the result. ** ** ^Unless deadlock is detected (see below), sqlite3_unlock_notify() always ** returns SQLITE_OK. ** **<b>Callback Invocation Details</b> ** ** When an unlock-notify callback is registered, the application provides a  ** single void* pointer that is passed to the callback when it is invoked. ** However, the signature of the callback function allows SQLite to pass ** it an array of void* context pointers. The first argument passed to ** an unlock-notify callback is a pointer to an array of void* pointers, ** and the second is the number of entries in the array. ** ** When a blocking connections transaction is concluded, there may be ** more than one blocked connection that has registered for an unlock-notify ** callback. ^If two or more such blocked connections have specified the ** same callback function, then instead of invoking the callback function ** multiple times, it is invoked once with the set of void* context pointers ** specified by the blocked connections bundled together into an array. ** This gives the application an opportunity to prioritize any actions  ** related to the set of unblocked database connections. ** **<b>Deadlock Detection</b> ** ** Assuming that after registering for an unlock-notify callback a  ** database waits for the callback to be issued before taking any further ** action (a reasonable assumption), then using this API may cause the ** application to deadlock. For example, if connection X is waiting for ** connection Y's transaction to be concluded, and similarly connection ** Y is waiting on connection X's transaction, then neither connection ** will proceed and the system may remain deadlocked indefinitely. ** ** To avoid this scenario, the sqlite3_unlock_notify() performs deadlock ** detection. ^If a given call to sqlite3_unlock_notify() would put the ** system in a deadlocked state, then SQLITE_LOCKED is returned and no ** unlock-notify callback is registered. The system is said to be in ** a deadlocked state if connection A has registered for an unlock-notify ** callback on the conclusion of connection B's transaction, and connection ** B has itself registered for an unlock-notify callback when connection ** A's transaction is concluded. ^Indirect deadlock is also detected, so ** the system is also considered to be deadlocked if connection B has ** registered for an unlock-notify callback on the conclusion of connection ** C's transaction, where connection C is waiting on connection A. ^Any ** number of levels of indirection are allowed. ** **<b>The "DROP TABLE" Exception</b> ** ** When a call to [sqlite3_step()] returns SQLITE_LOCKED, it is almost  ** always appropriate to call sqlite3_unlock_notify(). There is however, ** one exception. When executing a "DROP TABLE" or "DROP INDEX" statement, ** SQLite checks if there are any currently executing SELECT statements ** that belong to the same connection. If there are, SQLITE_LOCKED is ** returned. In this case there is no "blocking connection", so invoking ** sqlite3_unlock_notify() results in the unlock-notify callback being ** invoked immediately. If the application then re-attempts the "DROP TABLE" ** or "DROP INDEX" query, an infinite loop might be the result. ** ** One way around this problem is to check the extended error code returned ** by an sqlite3_step() call. ^(If there is a blocking connection, then the ** extended error code is set to SQLITE_LOCKED_SHAREDCACHE. Otherwise, in ** the special "DROP TABLE/INDEX" case, the extended error code is just  ** SQLITE_LOCKED.)^ */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_unlock_notify
parameter_list|(
name|sqlite3
modifier|*
name|pBlocked
parameter_list|,
comment|/* Waiting connection */
name|void
function_decl|(
modifier|*
name|xNotify
function_decl|)
parameter_list|(
name|void
modifier|*
modifier|*
name|apArg
parameter_list|,
name|int
name|nArg
parameter_list|)
parameter_list|,
comment|/* Callback function to invoke */
name|void
modifier|*
name|pNotifyArg
comment|/* Argument to pass to xNotify */
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: String Comparison ** ** ^The [sqlite3_stricmp()] and [sqlite3_strnicmp()] APIs allow applications ** and extensions to compare the contents of two buffers containing UTF-8 ** strings in a case-independent fashion, using the same definition of "case ** independence" that SQLite uses internally when comparing identifiers. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_stricmp
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_strnicmp
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: String Globbing * ** ^The [sqlite3_strglob(P,X)] interface returns zero if string X matches ** the glob pattern P, and it returns non-zero if string X does not match ** the glob pattern P.  ^The definition of glob pattern matching used in ** [sqlite3_strglob(P,X)] is the same as for the "X GLOB P" operator in the ** SQL dialect used by SQLite.  ^The sqlite3_strglob(P,X) function is case ** sensitive. ** ** Note that this routine returns zero on a match and non-zero if the strings ** do not match, the same as [sqlite3_stricmp()] and [sqlite3_strnicmp()]. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_strglob
parameter_list|(
specifier|const
name|char
modifier|*
name|zGlob
parameter_list|,
specifier|const
name|char
modifier|*
name|zStr
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Error Logging Interface ** ** ^The [sqlite3_log()] interface writes a message into the [error log] ** established by the [SQLITE_CONFIG_LOG] option to [sqlite3_config()]. ** ^If logging is enabled, the zFormat string and subsequent arguments are ** used with [sqlite3_snprintf()] to generate the final output string. ** ** The sqlite3_log() interface is intended for use by extensions such as ** virtual tables, collating functions, and SQL functions.  While there is ** nothing to prevent an application from calling sqlite3_log(), doing so ** is considered bad form. ** ** The zFormat string must not be NULL. ** ** To avoid deadlocks and other threading problems, the sqlite3_log() routine ** will not use dynamically allocated memory.  The log message is stored in ** a fixed-length buffer on the stack.  If the log message is longer than ** a few hundred characters, it will be truncated to the length of the ** buffer. */
name|SQLITE_API
name|void
name|SQLITE_CDECL
name|sqlite3_log
parameter_list|(
name|int
name|iErrCode
parameter_list|,
specifier|const
name|char
modifier|*
name|zFormat
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Write-Ahead Log Commit Hook ** METHOD: sqlite3 ** ** ^The [sqlite3_wal_hook()] function is used to register a callback that ** is invoked each time data is committed to a database in wal mode. ** ** ^(The callback is invoked by SQLite after the commit has taken place and  ** the associated write-lock on the database released)^, so the implementation  ** may read, write or [checkpoint] the database as required. ** ** ^The first parameter passed to the callback function when it is invoked ** is a copy of the third parameter passed to sqlite3_wal_hook() when ** registering the callback. ^The second is a copy of the database handle. ** ^The third parameter is the name of the database that was written to - ** either "main" or the name of an [ATTACH]-ed database. ^The fourth parameter ** is the number of pages currently in the write-ahead log file, ** including those that were just committed. ** ** The callback function should normally return [SQLITE_OK].  ^If an error ** code is returned, that error will propagate back up through the ** SQLite code base to cause the statement that provoked the callback ** to report an error, though the commit will have still occurred. If the ** callback returns [SQLITE_ROW] or [SQLITE_DONE], or if it returns a value ** that does not correspond to any valid SQLite error code, the results ** are undefined. ** ** A single database handle may have at most a single write-ahead log callback  ** registered at one time. ^Calling [sqlite3_wal_hook()] replaces any ** previously registered write-ahead log callback. ^Note that the ** [sqlite3_wal_autocheckpoint()] interface and the ** [wal_autocheckpoint pragma] both invoke [sqlite3_wal_hook()] and will ** those overwrite any prior [sqlite3_wal_hook()] settings. */
name|SQLITE_API
name|void
modifier|*
name|SQLITE_STDCALL
name|sqlite3_wal_hook
parameter_list|(
name|sqlite3
modifier|*
parameter_list|,
name|int
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|sqlite3
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Configure an auto-checkpoint ** METHOD: sqlite3 ** ** ^The [sqlite3_wal_autocheckpoint(D,N)] is a wrapper around ** [sqlite3_wal_hook()] that causes any database on [database connection] D ** to automatically [checkpoint] ** after committing a transaction if there are N or ** more frames in the [write-ahead log] file.  ^Passing zero or  ** a negative value as the nFrame parameter disables automatic ** checkpoints entirely. ** ** ^The callback registered by this function replaces any existing callback ** registered using [sqlite3_wal_hook()].  ^Likewise, registering a callback ** using [sqlite3_wal_hook()] disables the automatic checkpoint mechanism ** configured by this function. ** ** ^The [wal_autocheckpoint pragma] can be used to invoke this interface ** from SQL. ** ** ^Checkpoints initiated by this mechanism are ** [sqlite3_wal_checkpoint_v2|PASSIVE]. ** ** ^Every new [database connection] defaults to having the auto-checkpoint ** enabled with a threshold of 1000 or [SQLITE_DEFAULT_WAL_AUTOCHECKPOINT] ** pages.  The use of this interface ** is only necessary if the default setting is found to be suboptimal ** for a particular application. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_wal_autocheckpoint
parameter_list|(
name|sqlite3
modifier|*
name|db
parameter_list|,
name|int
name|N
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Checkpoint a database ** METHOD: sqlite3 ** ** ^(The sqlite3_wal_checkpoint(D,X) is equivalent to ** [sqlite3_wal_checkpoint_v2](D,X,[SQLITE_CHECKPOINT_PASSIVE],0,0).)^ ** ** In brief, sqlite3_wal_checkpoint(D,X) causes the content in the  ** [write-ahead log] for database X on [database connection] D to be ** transferred into the database file and for the write-ahead log to ** be reset.  See the [checkpointing] documentation for addition ** information. ** ** This interface used to be the only way to cause a checkpoint to ** occur.  But then the newer and more powerful [sqlite3_wal_checkpoint_v2()] ** interface was added.  This interface is retained for backwards ** compatibility and as a convenience for applications that need to manually ** start a callback but which do not need the full power (and corresponding ** complication) of [sqlite3_wal_checkpoint_v2()]. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_wal_checkpoint
parameter_list|(
name|sqlite3
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|zDb
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Checkpoint a database ** METHOD: sqlite3 ** ** ^(The sqlite3_wal_checkpoint_v2(D,X,M,L,C) interface runs a checkpoint ** operation on database X of [database connection] D in mode M.  Status ** information is written back into integers pointed to by L and C.)^ ** ^(The M parameter must be a valid [checkpoint mode]:)^ ** **<dl> **<dt>SQLITE_CHECKPOINT_PASSIVE<dd> **   ^Checkpoint as many frames as possible without waiting for any database  **   readers or writers to finish, then sync the database file if all frames  **   in the log were checkpointed. ^The [busy-handler callback] **   is never invoked in the SQLITE_CHECKPOINT_PASSIVE mode.   **   ^On the other hand, passive mode might leave the checkpoint unfinished **   if there are concurrent readers or writers. ** **<dt>SQLITE_CHECKPOINT_FULL<dd> **   ^This mode blocks (it invokes the **   [sqlite3_busy_handler|busy-handler callback]) until there is no **   database writer and all readers are reading from the most recent database **   snapshot. ^It then checkpoints all frames in the log file and syncs the **   database file. ^This mode blocks new database writers while it is pending, **   but new database readers are allowed to continue unimpeded. ** **<dt>SQLITE_CHECKPOINT_RESTART<dd> **   ^This mode works the same way as SQLITE_CHECKPOINT_FULL with the addition **   that after checkpointing the log file it blocks (calls the  **   [busy-handler callback]) **   until all readers are reading from the database file only. ^This ensures  **   that the next writer will restart the log file from the beginning. **   ^Like SQLITE_CHECKPOINT_FULL, this mode blocks new **   database writer attempts while it is pending, but does not impede readers. ** **<dt>SQLITE_CHECKPOINT_TRUNCATE<dd> **   ^This mode works the same way as SQLITE_CHECKPOINT_RESTART with the **   addition that it also truncates the log file to zero bytes just prior **   to a successful return. **</dl> ** ** ^If pnLog is not NULL, then *pnLog is set to the total number of frames in ** the log file or to -1 if the checkpoint could not run because ** of an error or because the database is not in [WAL mode]. ^If pnCkpt is not ** NULL,then *pnCkpt is set to the total number of checkpointed frames in the ** log file (including any that were already checkpointed before the function ** was called) or to -1 if the checkpoint could not run due to an error or ** because the database is not in WAL mode. ^Note that upon successful ** completion of an SQLITE_CHECKPOINT_TRUNCATE, the log file will have been ** truncated to zero bytes and so both *pnLog and *pnCkpt will be set to zero. ** ** ^All calls obtain an exclusive "checkpoint" lock on the database file. ^If ** any other process is running a checkpoint operation at the same time, the  ** lock cannot be obtained and SQLITE_BUSY is returned. ^Even if there is a  ** busy-handler configured, it will not be invoked in this case. ** ** ^The SQLITE_CHECKPOINT_FULL, RESTART and TRUNCATE modes also obtain the  ** exclusive "writer" lock on the database file. ^If the writer lock cannot be ** obtained immediately, and a busy-handler is configured, it is invoked and ** the writer lock retried until either the busy-handler returns 0 or the lock ** is successfully obtained. ^The busy-handler is also invoked while waiting for ** database readers as described above. ^If the busy-handler returns 0 before ** the writer lock is obtained or while waiting for database readers, the ** checkpoint operation proceeds from that point in the same way as  ** SQLITE_CHECKPOINT_PASSIVE - checkpointing as many frames as possible  ** without blocking any further. ^SQLITE_BUSY is returned in this case. ** ** ^If parameter zDb is NULL or points to a zero length string, then the ** specified operation is attempted on all WAL databases [attached] to  ** [database connection] db.  In this case the ** values written to output parameters *pnLog and *pnCkpt are undefined. ^If  ** an SQLITE_BUSY error is encountered when processing one or more of the  ** attached WAL databases, the operation is still attempted on any remaining  ** attached databases and SQLITE_BUSY is returned at the end. ^If any other  ** error occurs while processing an attached database, processing is abandoned  ** and the error code is returned to the caller immediately. ^If no error  ** (SQLITE_BUSY or otherwise) is encountered while processing the attached  ** databases, SQLITE_OK is returned. ** ** ^If database zDb is the name of an attached database that is not in WAL ** mode, SQLITE_OK is returned and both *pnLog and *pnCkpt set to -1. ^If ** zDb is not NULL (or a zero length string) and is not the name of any ** attached database, SQLITE_ERROR is returned to the caller. ** ** ^Unless it returns SQLITE_MISUSE, ** the sqlite3_wal_checkpoint_v2() interface ** sets the error information that is queried by ** [sqlite3_errcode()] and [sqlite3_errmsg()]. ** ** ^The [PRAGMA wal_checkpoint] command can be used to invoke this interface ** from SQL. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_wal_checkpoint_v2
parameter_list|(
name|sqlite3
modifier|*
name|db
parameter_list|,
comment|/* Database handle */
specifier|const
name|char
modifier|*
name|zDb
parameter_list|,
comment|/* Name of attached database (or NULL) */
name|int
name|eMode
parameter_list|,
comment|/* SQLITE_CHECKPOINT_* value */
name|int
modifier|*
name|pnLog
parameter_list|,
comment|/* OUT: Size of WAL log in frames */
name|int
modifier|*
name|pnCkpt
comment|/* OUT: Total number of frames checkpointed */
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Checkpoint Mode Values ** KEYWORDS: {checkpoint mode} ** ** These constants define all valid values for the "checkpoint mode" passed ** as the third parameter to the [sqlite3_wal_checkpoint_v2()] interface. ** See the [sqlite3_wal_checkpoint_v2()] documentation for details on the ** meaning of each of these checkpoint modes. */
define|#
directive|define
name|SQLITE_CHECKPOINT_PASSIVE
value|0
comment|/* Do as much as possible w/o blocking */
define|#
directive|define
name|SQLITE_CHECKPOINT_FULL
value|1
comment|/* Wait for writers, then checkpoint */
define|#
directive|define
name|SQLITE_CHECKPOINT_RESTART
value|2
comment|/* Like FULL but wait for for readers */
define|#
directive|define
name|SQLITE_CHECKPOINT_TRUNCATE
value|3
comment|/* Like RESTART but also truncate WAL */
comment|/* ** CAPI3REF: Virtual Table Interface Configuration ** ** This function may be called by either the [xConnect] or [xCreate] method ** of a [virtual table] implementation to configure ** various facets of the virtual table interface. ** ** If this interface is invoked outside the context of an xConnect or ** xCreate virtual table method then the behavior is undefined. ** ** At present, there is only one option that may be configured using ** this function. (See [SQLITE_VTAB_CONSTRAINT_SUPPORT].)  Further options ** may be added in the future. */
name|SQLITE_API
name|int
name|SQLITE_CDECL
name|sqlite3_vtab_config
parameter_list|(
name|sqlite3
modifier|*
parameter_list|,
name|int
name|op
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Virtual Table Configuration Options ** ** These macros define the various options to the ** [sqlite3_vtab_config()] interface that [virtual table] implementations ** can use to customize and optimize their behavior. ** **<dl> **<dt>SQLITE_VTAB_CONSTRAINT_SUPPORT **<dd>Calls of the form ** [sqlite3_vtab_config](db,SQLITE_VTAB_CONSTRAINT_SUPPORT,X) are supported, ** where X is an integer.  If X is zero, then the [virtual table] whose ** [xCreate] or [xConnect] method invoked [sqlite3_vtab_config()] does not ** support constraints.  In this configuration (which is the default) if ** a call to the [xUpdate] method returns [SQLITE_CONSTRAINT], then the entire ** statement is rolled back as if [ON CONFLICT | OR ABORT] had been ** specified as part of the users SQL statement, regardless of the actual ** ON CONFLICT mode specified. ** ** If X is non-zero, then the virtual table implementation guarantees ** that if [xUpdate] returns [SQLITE_CONSTRAINT], it will do so before ** any modifications to internal or persistent data structures have been made. ** If the [ON CONFLICT] mode is ABORT, FAIL, IGNORE or ROLLBACK, SQLite  ** is able to roll back a statement or database transaction, and abandon ** or continue processing the current SQL statement as appropriate.  ** If the ON CONFLICT mode is REPLACE and the [xUpdate] method returns ** [SQLITE_CONSTRAINT], SQLite handles this as if the ON CONFLICT mode ** had been ABORT. ** ** Virtual table implementations that are required to handle OR REPLACE ** must do so within the [xUpdate] method. If a call to the  ** [sqlite3_vtab_on_conflict()] function indicates that the current ON  ** CONFLICT policy is REPLACE, the virtual table implementation should  ** silently replace the appropriate rows within the xUpdate callback and ** return SQLITE_OK. Or, if this is not possible, it may return ** SQLITE_CONSTRAINT, in which case SQLite falls back to OR ABORT  ** constraint handling. **</dl> */
define|#
directive|define
name|SQLITE_VTAB_CONSTRAINT_SUPPORT
value|1
comment|/* ** CAPI3REF: Determine The Virtual Table Conflict Policy ** ** This function may only be called from within a call to the [xUpdate] method ** of a [virtual table] implementation for an INSERT or UPDATE operation. ^The ** value returned is one of [SQLITE_ROLLBACK], [SQLITE_IGNORE], [SQLITE_FAIL], ** [SQLITE_ABORT], or [SQLITE_REPLACE], according to the [ON CONFLICT] mode ** of the SQL statement that triggered the call to the [xUpdate] method of the ** [virtual table]. */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_vtab_on_conflict
parameter_list|(
name|sqlite3
modifier|*
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Conflict resolution modes ** KEYWORDS: {conflict resolution mode} ** ** These constants are returned by [sqlite3_vtab_on_conflict()] to ** inform a [virtual table] implementation what the [ON CONFLICT] mode ** is for the SQL statement being evaluated. ** ** Note that the [SQLITE_IGNORE] constant is also used as a potential ** return value from the [sqlite3_set_authorizer()] callback and that ** [SQLITE_ABORT] is also a [result code]. */
define|#
directive|define
name|SQLITE_ROLLBACK
value|1
comment|/* #define SQLITE_IGNORE 2 // Also used by sqlite3_authorizer() callback */
define|#
directive|define
name|SQLITE_FAIL
value|3
comment|/* #define SQLITE_ABORT 4  // Also an error code */
define|#
directive|define
name|SQLITE_REPLACE
value|5
comment|/* ** CAPI3REF: Prepared Statement Scan Status Opcodes ** KEYWORDS: {scanstatus options} ** ** The following constants can be used for the T parameter to the ** [sqlite3_stmt_scanstatus(S,X,T,V)] interface.  Each constant designates a ** different metric for sqlite3_stmt_scanstatus() to return. ** ** When the value returned to V is a string, space to hold that string is ** managed by the prepared statement S and will be automatically freed when ** S is finalized. ** **<dl> ** [[SQLITE_SCANSTAT_NLOOP]]<dt>SQLITE_SCANSTAT_NLOOP</dt> **<dd>^The [sqlite3_int64] variable pointed to by the T parameter will be ** set to the total number of times that the X-th loop has run.</dd> ** ** [[SQLITE_SCANSTAT_NVISIT]]<dt>SQLITE_SCANSTAT_NVISIT</dt> **<dd>^The [sqlite3_int64] variable pointed to by the T parameter will be set ** to the total number of rows examined by all iterations of the X-th loop.</dd> ** ** [[SQLITE_SCANSTAT_EST]]<dt>SQLITE_SCANSTAT_EST</dt> **<dd>^The "double" variable pointed to by the T parameter will be set to the ** query planner's estimate for the average number of rows output from each ** iteration of the X-th loop.  If the query planner's estimates was accurate, ** then this value will approximate the quotient NVISIT/NLOOP and the ** product of this value for all prior loops with the same SELECTID will ** be the NLOOP value for the current loop. ** ** [[SQLITE_SCANSTAT_NAME]]<dt>SQLITE_SCANSTAT_NAME</dt> **<dd>^The "const char *" variable pointed to by the T parameter will be set ** to a zero-terminated UTF-8 string containing the name of the index or table ** used for the X-th loop. ** ** [[SQLITE_SCANSTAT_EXPLAIN]]<dt>SQLITE_SCANSTAT_EXPLAIN</dt> **<dd>^The "const char *" variable pointed to by the T parameter will be set ** to a zero-terminated UTF-8 string containing the [EXPLAIN QUERY PLAN] ** description for the X-th loop. ** ** [[SQLITE_SCANSTAT_SELECTID]]<dt>SQLITE_SCANSTAT_SELECT</dt> **<dd>^The "int" variable pointed to by the T parameter will be set to the ** "select-id" for the X-th loop.  The select-id identifies which query or ** subquery the loop is part of.  The main query has a select-id of zero. ** The select-id is the same value as is output in the first column ** of an [EXPLAIN QUERY PLAN] query. **</dl> */
define|#
directive|define
name|SQLITE_SCANSTAT_NLOOP
value|0
define|#
directive|define
name|SQLITE_SCANSTAT_NVISIT
value|1
define|#
directive|define
name|SQLITE_SCANSTAT_EST
value|2
define|#
directive|define
name|SQLITE_SCANSTAT_NAME
value|3
define|#
directive|define
name|SQLITE_SCANSTAT_EXPLAIN
value|4
define|#
directive|define
name|SQLITE_SCANSTAT_SELECTID
value|5
comment|/* ** CAPI3REF: Prepared Statement Scan Status ** METHOD: sqlite3_stmt ** ** This interface returns information about the predicted and measured ** performance for pStmt.  Advanced applications can use this ** interface to compare the predicted and the measured performance and ** issue warnings and/or rerun [ANALYZE] if discrepancies are found. ** ** Since this interface is expected to be rarely used, it is only ** available if SQLite is compiled using the [SQLITE_ENABLE_STMT_SCANSTATUS] ** compile-time option. ** ** The "iScanStatusOp" parameter determines which status information to return. ** The "iScanStatusOp" must be one of the [scanstatus options] or the behavior ** of this interface is undefined. ** ^The requested measurement is written into a variable pointed to by ** the "pOut" parameter. ** Parameter "idx" identifies the specific loop to retrieve statistics for. ** Loops are numbered starting from zero. ^If idx is out of range - less than ** zero or greater than or equal to the total number of loops used to implement ** the statement - a non-zero value is returned and the variable that pOut ** points to is unchanged. ** ** ^Statistics might not be available for all loops in all statements. ^In cases ** where there exist loops with no available statistics, this function behaves ** as if the loop did not exist - it returns non-zero and leave the variable ** that pOut points to unchanged. ** ** See also: [sqlite3_stmt_scanstatus_reset()] */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_stmt_scanstatus
parameter_list|(
name|sqlite3_stmt
modifier|*
name|pStmt
parameter_list|,
comment|/* Prepared statement for which info desired */
name|int
name|idx
parameter_list|,
comment|/* Index of loop to report on */
name|int
name|iScanStatusOp
parameter_list|,
comment|/* Information desired.  SQLITE_SCANSTAT_* */
name|void
modifier|*
name|pOut
comment|/* Result written here */
parameter_list|)
function_decl|;
comment|/* ** CAPI3REF: Zero Scan-Status Counters ** METHOD: sqlite3_stmt ** ** ^Zero all [sqlite3_stmt_scanstatus()] related event counters. ** ** This API is only available if the library is built with pre-processor ** symbol [SQLITE_ENABLE_STMT_SCANSTATUS] defined. */
name|SQLITE_API
name|void
name|SQLITE_STDCALL
name|sqlite3_stmt_scanstatus_reset
parameter_list|(
name|sqlite3_stmt
modifier|*
parameter_list|)
function_decl|;
comment|/* ** Undo the hack that converts floating point types to integer for ** builds on processors without floating point support. */
ifdef|#
directive|ifdef
name|SQLITE_OMIT_FLOATING_POINT
undef|#
directive|undef
name|double
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_comment
comment|/* End of the 'extern "C"' block */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SQLITE3_H_ */
end_comment

begin_comment
comment|/* ** 2010 August 30 ** ** The author disclaims copyright to this source code.  In place of ** a legal notice, here is a blessing: ** **    May you do good and not evil. **    May you find forgiveness for yourself and forgive others. **    May you share freely, never taking more than you give. ** ************************************************************************* */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SQLITE3RTREE_H_
end_ifndef

begin_define
define|#
directive|define
name|_SQLITE3RTREE_H_
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
typedef|typedef
name|struct
name|sqlite3_rtree_geometry
name|sqlite3_rtree_geometry
typedef|;
typedef|typedef
name|struct
name|sqlite3_rtree_query_info
name|sqlite3_rtree_query_info
typedef|;
comment|/* The double-precision datatype used by RTree depends on the ** SQLITE_RTREE_INT_ONLY compile-time option. */
ifdef|#
directive|ifdef
name|SQLITE_RTREE_INT_ONLY
typedef|typedef
name|sqlite3_int64
name|sqlite3_rtree_dbl
typedef|;
else|#
directive|else
typedef|typedef
name|double
name|sqlite3_rtree_dbl
typedef|;
endif|#
directive|endif
comment|/* ** Register a geometry callback named zGeom that can be used as part of an ** R-Tree geometry query as follows: ** **   SELECT ... FROM<rtree> WHERE<rtree col> MATCH $zGeom(... params ...) */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_rtree_geometry_callback
parameter_list|(
name|sqlite3
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|zGeom
parameter_list|,
name|int
function_decl|(
modifier|*
name|xGeom
function_decl|)
parameter_list|(
name|sqlite3_rtree_geometry
modifier|*
parameter_list|,
name|int
parameter_list|,
name|sqlite3_rtree_dbl
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
name|pContext
parameter_list|)
function_decl|;
comment|/* ** A pointer to a structure of the following type is passed as the first ** argument to callbacks registered using rtree_geometry_callback(). */
struct|struct
name|sqlite3_rtree_geometry
block|{
name|void
modifier|*
name|pContext
decl_stmt|;
comment|/* Copy of pContext passed to s_r_g_c() */
name|int
name|nParam
decl_stmt|;
comment|/* Size of array aParam[] */
name|sqlite3_rtree_dbl
modifier|*
name|aParam
decl_stmt|;
comment|/* Parameters passed to SQL geom function */
name|void
modifier|*
name|pUser
decl_stmt|;
comment|/* Callback implementation user data */
name|void
function_decl|(
modifier|*
name|xDelUser
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/* Called by SQLite to clean up pUser */
block|}
struct|;
comment|/* ** Register a 2nd-generation geometry callback named zScore that can be  ** used as part of an R-Tree geometry query as follows: ** **   SELECT ... FROM<rtree> WHERE<rtree col> MATCH $zQueryFunc(... params ...) */
name|SQLITE_API
name|int
name|SQLITE_STDCALL
name|sqlite3_rtree_query_callback
parameter_list|(
name|sqlite3
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|zQueryFunc
parameter_list|,
name|int
function_decl|(
modifier|*
name|xQueryFunc
function_decl|)
parameter_list|(
name|sqlite3_rtree_query_info
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
name|pContext
parameter_list|,
name|void
function_decl|(
modifier|*
name|xDestructor
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
comment|/* ** A pointer to a structure of the following type is passed as the  ** argument to scored geometry callback registered using ** sqlite3_rtree_query_callback(). ** ** Note that the first 5 fields of this structure are identical to ** sqlite3_rtree_geometry.  This structure is a subclass of ** sqlite3_rtree_geometry. */
struct|struct
name|sqlite3_rtree_query_info
block|{
name|void
modifier|*
name|pContext
decl_stmt|;
comment|/* pContext from when function registered */
name|int
name|nParam
decl_stmt|;
comment|/* Number of function parameters */
name|sqlite3_rtree_dbl
modifier|*
name|aParam
decl_stmt|;
comment|/* value of function parameters */
name|void
modifier|*
name|pUser
decl_stmt|;
comment|/* callback can use this, if desired */
name|void
function_decl|(
modifier|*
name|xDelUser
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/* function to free pUser */
name|sqlite3_rtree_dbl
modifier|*
name|aCoord
decl_stmt|;
comment|/* Coordinates of node or entry to check */
name|unsigned
name|int
modifier|*
name|anQueue
decl_stmt|;
comment|/* Number of pending entries in the queue */
name|int
name|nCoord
decl_stmt|;
comment|/* Number of coordinates */
name|int
name|iLevel
decl_stmt|;
comment|/* Level of current node or entry */
name|int
name|mxLevel
decl_stmt|;
comment|/* The largest iLevel value in the tree */
name|sqlite3_int64
name|iRowid
decl_stmt|;
comment|/* Rowid for current entry */
name|sqlite3_rtree_dbl
name|rParentScore
decl_stmt|;
comment|/* Score of parent node */
name|int
name|eParentWithin
decl_stmt|;
comment|/* Visibility of parent node */
name|int
name|eWithin
decl_stmt|;
comment|/* OUT: Visiblity */
name|sqlite3_rtree_dbl
name|rScore
decl_stmt|;
comment|/* OUT: Write the score here */
comment|/* The following fields are only available in 3.8.11 and later */
name|sqlite3_value
modifier|*
modifier|*
name|apSqlParam
decl_stmt|;
comment|/* Original SQL values of parameters */
block|}
struct|;
comment|/* ** Allowed values for sqlite3_rtree_query.eWithin and .eParentWithin. */
define|#
directive|define
name|NOT_WITHIN
value|0
comment|/* Object completely outside of query region */
define|#
directive|define
name|PARTLY_WITHIN
value|1
comment|/* Object partially overlaps query region */
define|#
directive|define
name|FULLY_WITHIN
value|2
comment|/* Object fully contained within query region */
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_comment
comment|/* end of the 'extern "C"' block */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ifndef _SQLITE3RTREE_H_ */
end_comment

end_unit

