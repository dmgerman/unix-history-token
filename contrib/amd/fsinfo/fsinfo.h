begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 1997-1999 Erez Zadok  * Copyright (c) 1989 Jan-Simon Pendry  * Copyright (c) 1989 Imperial College of Science, Technology& Medicine  * Copyright (c) 1989 The Regents of the University of California.  * All rights reserved.  *  * This code is derived from software contributed to Berkeley by  * Jan-Simon Pendry at Imperial College, London.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgment:  *      This product includes software developed by the University of  *      California, Berkeley and its contributors.  * 4. Neither the name of the University nor the names of its contributors  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  *      %W% (Berkeley) %G%  *  * $Id: fsinfo.h,v 1.3 1999/01/10 21:54:29 ezk Exp $  *  */
end_comment

begin_function_decl
specifier|extern
name|FILE
modifier|*
name|pref_open
parameter_list|(
name|char
modifier|*
name|pref
parameter_list|,
name|char
modifier|*
name|hn
parameter_list|,
name|void
function_decl|(
modifier|*
name|hdr
function_decl|)
parameter_list|(
name|FILE
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
parameter_list|,
name|char
modifier|*
name|arg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|auto_tree
modifier|*
name|new_auto_tree
parameter_list|(
name|char
modifier|*
parameter_list|,
name|qelem
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|automount
modifier|*
name|new_automount
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|char
modifier|*
modifier|*
name|g_argv
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|autodir
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|bootparams_pref
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|disk_fs_strings
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|dumpset_pref
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|ether_if_strings
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|exportfs_pref
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|fsmount_strings
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|fstab_pref
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|host_strings
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|mount_pref
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|mount_strings
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|progname
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|username
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|extern
name|char
modifier|*
name|xcalloc
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|char
name|hostname
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
name|idvbuf
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|dict
modifier|*
name|dict_of_hosts
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|dict
modifier|*
name|dict_of_volnames
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|extern
name|dict
modifier|*
name|new_dict
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|dict_ent
modifier|*
name|dict_locate
parameter_list|(
name|dict
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|disk_fs
modifier|*
name|new_disk_fs
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|ether_if
modifier|*
name|new_ether_if
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|fsmount
modifier|*
name|new_fsmount
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|host
modifier|*
name|new_host
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|dict_iter
parameter_list|(
name|dict
modifier|*
parameter_list|,
name|int
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|qelem
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|int
name|errors
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|file_io_errors
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|parse_errors
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|extern
name|int
name|pref_close
parameter_list|(
name|FILE
modifier|*
name|fp
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|int
name|verbose
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|extern
name|ioloc
modifier|*
name|current_location
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|fsi_mount
modifier|*
name|new_mount
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|qelem
modifier|*
name|new_que
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|analyze_automounts
parameter_list|(
name|qelem
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|analyze_hosts
parameter_list|(
name|qelem
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|compute_automount_point
parameter_list|(
name|char
modifier|*
parameter_list|,
name|host
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|dict_add
parameter_list|(
name|dict
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|error
parameter_list|(
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|fatal
parameter_list|(
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|gen_hdr
parameter_list|(
name|FILE
modifier|*
name|ef
parameter_list|,
name|char
modifier|*
name|hn
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|info_hdr
parameter_list|(
name|FILE
modifier|*
name|ef
parameter_list|,
name|char
modifier|*
name|info
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|init_que
parameter_list|(
name|qelem
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ins_que
parameter_list|(
name|qelem
modifier|*
parameter_list|,
name|qelem
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|lerror
parameter_list|(
name|ioloc
modifier|*
name|l
parameter_list|,
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|log
parameter_list|(
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|lwarning
parameter_list|(
name|ioloc
modifier|*
name|l
parameter_list|,
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|rem_que
parameter_list|(
name|qelem
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|set_disk_fs
parameter_list|(
name|disk_fs
modifier|*
parameter_list|,
name|int
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|set_fsmount
parameter_list|(
name|fsmount
modifier|*
parameter_list|,
name|int
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|set_mount
parameter_list|(
name|fsi_mount
modifier|*
parameter_list|,
name|int
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|show_area_being_processed
parameter_list|(
name|char
modifier|*
name|area
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|show_new
parameter_list|(
name|char
modifier|*
name|msg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|warning
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|yyerror
parameter_list|(
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|domain_strip
parameter_list|(
name|char
modifier|*
name|otherdom
parameter_list|,
name|char
modifier|*
name|localdom
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * some systems such as DU-4.x have a different GNU flex in /usr/bin  * which automatically generates yywrap macros and symbols.  So I must  * distinguish between them and when yywrap is actually needed.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|yywrap
end_ifndef

begin_function_decl
specifier|extern
name|int
name|yywrap
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|yywrap
parameter_list|()
value|1
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* not yywrap */
end_comment

begin_function_decl
specifier|extern
name|int
name|yyparse
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|write_atab
parameter_list|(
name|qelem
modifier|*
name|q
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|write_bootparams
parameter_list|(
name|qelem
modifier|*
name|q
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|write_dumpset
parameter_list|(
name|qelem
modifier|*
name|q
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|write_exportfs
parameter_list|(
name|qelem
modifier|*
name|q
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|write_fstab
parameter_list|(
name|qelem
modifier|*
name|q
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|col_cleanup
parameter_list|(
name|int
name|eoj
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|set_host
parameter_list|(
name|host
modifier|*
name|hp
parameter_list|,
name|int
name|k
parameter_list|,
name|char
modifier|*
name|v
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|set_ether_if
parameter_list|(
name|ether_if
modifier|*
name|ep
parameter_list|,
name|int
name|k
parameter_list|,
name|char
modifier|*
name|v
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|yylex
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|BITSET
parameter_list|(
name|m
parameter_list|,
name|b
parameter_list|)
value|((m) |= (1<<(b)))
end_define

begin_define
define|#
directive|define
name|AM_FIRST
parameter_list|(
name|ty
parameter_list|,
name|q
parameter_list|)
value|((ty *) ((q)->q_forw))
end_define

begin_define
define|#
directive|define
name|HEAD
parameter_list|(
name|ty
parameter_list|,
name|q
parameter_list|)
value|((ty *) q)
end_define

begin_define
define|#
directive|define
name|ISSET
parameter_list|(
name|m
parameter_list|,
name|b
parameter_list|)
value|((m)& (1<<(b)))
end_define

begin_define
define|#
directive|define
name|ITER
parameter_list|(
name|v
parameter_list|,
name|ty
parameter_list|,
name|q
parameter_list|)
value|for ((v) = AM_FIRST(ty,(q)); (v) != HEAD(ty,(q)); (v) = NEXT(ty,(v)))
end_define

begin_define
define|#
directive|define
name|AM_LAST
parameter_list|(
name|ty
parameter_list|,
name|q
parameter_list|)
value|((ty *) ((q)->q_back))
end_define

begin_define
define|#
directive|define
name|NEXT
parameter_list|(
name|ty
parameter_list|,
name|q
parameter_list|)
value|((ty *) (((qelem *) q)->q_forw))
end_define

end_unit

