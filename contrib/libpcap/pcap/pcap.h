begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* -*- Mode: c; tab-width: 8; indent-tabs-mode: 1; c-basic-offset: 8; -*- */
end_comment

begin_comment
comment|/*  * Copyright (c) 1993, 1994, 1995, 1996, 1997  *	The Regents of the University of California.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *	This product includes software developed by the Computer Systems  *	Engineering Group at Lawrence Berkeley Laboratory.  * 4. Neither the name of the University nor of the Laboratory may be used  *    to endorse or promote products derived from this software without  *    specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * @(#) $Header: /tcpdump/master/libpcap/pcap/pcap.h,v 1.4.2.11 2008-10-06 15:38:39 gianluca Exp $ (LBL)  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|lib_pcap_pcap_h
end_ifndef

begin_define
define|#
directive|define
name|lib_pcap_pcap_h
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|WIN32
argument_list|)
end_if

begin_include
include|#
directive|include
file|<pcap-stdinc.h>
end_include

begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|MSDOS
argument_list|)
end_elif

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<sys/socket.h>
end_include

begin_comment
comment|/* u_int, u_char etc. */
end_comment

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* UN*X */
end_comment

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<sys/time.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* WIN32/MSDOS/UN*X */
end_comment

begin_include
include|#
directive|include
file|<net/bpf.h>
end_include

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
define|#
directive|define
name|PCAP_VERSION_MAJOR
value|2
define|#
directive|define
name|PCAP_VERSION_MINOR
value|4
define|#
directive|define
name|PCAP_ERRBUF_SIZE
value|256
comment|/*  * Compatibility for systems that have a bpf.h that  * predates the bpf typedefs for 64-bit support.  */
if|#
directive|if
name|BPF_RELEASE
operator|-
literal|0
operator|<
literal|199406
typedef|typedef
name|int
name|bpf_int32
typedef|;
typedef|typedef
name|u_int
name|bpf_u_int32
typedef|;
endif|#
directive|endif
typedef|typedef
name|struct
name|pcap
name|pcap_t
typedef|;
typedef|typedef
name|struct
name|pcap_dumper
name|pcap_dumper_t
typedef|;
typedef|typedef
name|struct
name|pcap_if
name|pcap_if_t
typedef|;
typedef|typedef
name|struct
name|pcap_addr
name|pcap_addr_t
typedef|;
comment|/*  * The first record in the file contains saved values for some  * of the flags used in the printout phases of tcpdump.  * Many fields here are 32 bit ints so compilers won't insert unwanted  * padding; these files need to be interchangeable across architectures.  *  * Do not change the layout of this structure, in any way (this includes  * changes that only affect the length of fields in this structure).  *  * Also, do not change the interpretation of any of the members of this  * structure, in any way (this includes using values other than  * LINKTYPE_ values, as defined in "savefile.c", in the "linktype"  * field).  *  * Instead:  *  *	introduce a new structure for the new format, if the layout  *	of the structure changed;  *  *	send mail to "tcpdump-workers@lists.tcpdump.org", requesting  *	a new magic number for your new capture file format, and, when  *	you get the new magic number, put it in "savefile.c";  *  *	use that magic number for save files with the changed file  *	header;  *  *	make the code in "savefile.c" capable of reading files with  *	the old file header as well as files with the new file header  *	(using the magic number to determine the header format).  *  * Then supply the changes as a patch at  *  *	http://sourceforge.net/projects/libpcap/  *  * so that future versions of libpcap and programs that use it (such as  * tcpdump) will be able to read your new capture file format.  */
struct|struct
name|pcap_file_header
block|{
name|bpf_u_int32
name|magic
decl_stmt|;
name|u_short
name|version_major
decl_stmt|;
name|u_short
name|version_minor
decl_stmt|;
name|bpf_int32
name|thiszone
decl_stmt|;
comment|/* gmt to local correction */
name|bpf_u_int32
name|sigfigs
decl_stmt|;
comment|/* accuracy of timestamps */
name|bpf_u_int32
name|snaplen
decl_stmt|;
comment|/* max length saved portion of each pkt */
name|bpf_u_int32
name|linktype
decl_stmt|;
comment|/* data link type (LINKTYPE_*) */
block|}
struct|;
comment|/*  * Macros for the value returned by pcap_datalink_ext().  *   * If LT_FCS_LENGTH_PRESENT(x) is true, the LT_FCS_LENGTH(x) macro  * gives the FCS length of packets in the capture.  */
define|#
directive|define
name|LT_FCS_LENGTH_PRESENT
parameter_list|(
name|x
parameter_list|)
value|((x)& 0x04000000)
define|#
directive|define
name|LT_FCS_LENGTH
parameter_list|(
name|x
parameter_list|)
value|(((x)& 0xF0000000)>> 28)
define|#
directive|define
name|LT_FCS_DATALINK_EXT
parameter_list|(
name|x
parameter_list|)
value|((((x)& 0xF)<< 28) | 0x04000000)
typedef|typedef
enum|enum
block|{
name|PCAP_D_INOUT
init|=
literal|0
block|,
name|PCAP_D_IN
block|,
name|PCAP_D_OUT
block|}
name|pcap_direction_t
typedef|;
comment|/*  * Generic per-packet information, as supplied by libpcap.  *  * The time stamp can and should be a "struct timeval", regardless of  * whether your system supports 32-bit tv_sec in "struct timeval",  * 64-bit tv_sec in "struct timeval", or both if it supports both 32-bit  * and 64-bit applications.  The on-disk format of savefiles uses 32-bit  * tv_sec (and tv_usec); this structure is irrelevant to that.  32-bit  * and 64-bit versions of libpcap, even if they're on the same platform,  * should supply the appropriate version of "struct timeval", even if  * that's not what the underlying packet capture mechanism supplies.  */
struct|struct
name|pcap_pkthdr
block|{
name|struct
name|timeval
name|ts
decl_stmt|;
comment|/* time stamp */
name|bpf_u_int32
name|caplen
decl_stmt|;
comment|/* length of portion present */
name|bpf_u_int32
name|len
decl_stmt|;
comment|/* length this packet (off wire) */
block|}
struct|;
comment|/*  * As returned by the pcap_stats()  */
struct|struct
name|pcap_stat
block|{
name|u_int
name|ps_recv
decl_stmt|;
comment|/* number of packets received */
name|u_int
name|ps_drop
decl_stmt|;
comment|/* number of packets dropped */
name|u_int
name|ps_ifdrop
decl_stmt|;
comment|/* drops by interface XXX not yet supported */
ifdef|#
directive|ifdef
name|WIN32
name|u_int
name|bs_capt
decl_stmt|;
comment|/* number of packets that reach the application */
endif|#
directive|endif
comment|/* WIN32 */
block|}
struct|;
ifdef|#
directive|ifdef
name|MSDOS
comment|/*  * As returned by the pcap_stats_ex()  */
struct|struct
name|pcap_stat_ex
block|{
name|u_long
name|rx_packets
decl_stmt|;
comment|/* total packets received       */
name|u_long
name|tx_packets
decl_stmt|;
comment|/* total packets transmitted    */
name|u_long
name|rx_bytes
decl_stmt|;
comment|/* total bytes received         */
name|u_long
name|tx_bytes
decl_stmt|;
comment|/* total bytes transmitted      */
name|u_long
name|rx_errors
decl_stmt|;
comment|/* bad packets received         */
name|u_long
name|tx_errors
decl_stmt|;
comment|/* packet transmit problems     */
name|u_long
name|rx_dropped
decl_stmt|;
comment|/* no space in Rx buffers       */
name|u_long
name|tx_dropped
decl_stmt|;
comment|/* no space available for Tx    */
name|u_long
name|multicast
decl_stmt|;
comment|/* multicast packets received   */
name|u_long
name|collisions
decl_stmt|;
comment|/* detailed rx_errors: */
name|u_long
name|rx_length_errors
decl_stmt|;
name|u_long
name|rx_over_errors
decl_stmt|;
comment|/* receiver ring buff overflow  */
name|u_long
name|rx_crc_errors
decl_stmt|;
comment|/* recv'd pkt with crc error    */
name|u_long
name|rx_frame_errors
decl_stmt|;
comment|/* recv'd frame alignment error */
name|u_long
name|rx_fifo_errors
decl_stmt|;
comment|/* recv'r fifo overrun          */
name|u_long
name|rx_missed_errors
decl_stmt|;
comment|/* recv'r missed packet         */
comment|/* detailed tx_errors */
name|u_long
name|tx_aborted_errors
decl_stmt|;
name|u_long
name|tx_carrier_errors
decl_stmt|;
name|u_long
name|tx_fifo_errors
decl_stmt|;
name|u_long
name|tx_heartbeat_errors
decl_stmt|;
name|u_long
name|tx_window_errors
decl_stmt|;
block|}
struct|;
endif|#
directive|endif
comment|/*  * Item in a list of interfaces.  */
struct|struct
name|pcap_if
block|{
name|struct
name|pcap_if
modifier|*
name|next
decl_stmt|;
name|char
modifier|*
name|name
decl_stmt|;
comment|/* name to hand to "pcap_open_live()" */
name|char
modifier|*
name|description
decl_stmt|;
comment|/* textual description of interface, or NULL */
name|struct
name|pcap_addr
modifier|*
name|addresses
decl_stmt|;
name|bpf_u_int32
name|flags
decl_stmt|;
comment|/* PCAP_IF_ interface flags */
block|}
struct|;
define|#
directive|define
name|PCAP_IF_LOOPBACK
value|0x00000001
comment|/* interface is loopback */
comment|/*  * Representation of an interface address.  */
struct|struct
name|pcap_addr
block|{
name|struct
name|pcap_addr
modifier|*
name|next
decl_stmt|;
name|struct
name|sockaddr
modifier|*
name|addr
decl_stmt|;
comment|/* address */
name|struct
name|sockaddr
modifier|*
name|netmask
decl_stmt|;
comment|/* netmask for that address */
name|struct
name|sockaddr
modifier|*
name|broadaddr
decl_stmt|;
comment|/* broadcast address for that address */
name|struct
name|sockaddr
modifier|*
name|dstaddr
decl_stmt|;
comment|/* P2P destination address for that address */
block|}
struct|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|pcap_handler
function_decl|)
parameter_list|(
name|u_char
modifier|*
parameter_list|,
specifier|const
name|struct
name|pcap_pkthdr
modifier|*
parameter_list|,
specifier|const
name|u_char
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Error codes for the pcap API.  * These will all be negative, so you can check for the success or  * failure of a call that returns these codes by checking for a  * negative value.  */
define|#
directive|define
name|PCAP_ERROR
value|-1
comment|/* generic error code */
define|#
directive|define
name|PCAP_ERROR_BREAK
value|-2
comment|/* loop terminated by pcap_breakloop */
define|#
directive|define
name|PCAP_ERROR_NOT_ACTIVATED
value|-3
comment|/* the capture needs to be activated */
define|#
directive|define
name|PCAP_ERROR_ACTIVATED
value|-4
comment|/* the operation can't be performed on already activated captures */
define|#
directive|define
name|PCAP_ERROR_NO_SUCH_DEVICE
value|-5
comment|/* no such device exists */
define|#
directive|define
name|PCAP_ERROR_RFMON_NOTSUP
value|-6
comment|/* this device doesn't support rfmon (monitor) mode */
define|#
directive|define
name|PCAP_ERROR_NOT_RFMON
value|-7
comment|/* operation supported only in monitor mode */
define|#
directive|define
name|PCAP_ERROR_PERM_DENIED
value|-8
comment|/* no permission to open the device */
define|#
directive|define
name|PCAP_ERROR_IFACE_NOT_UP
value|-9
comment|/* interface isn't up */
comment|/*  * Warning codes for the pcap API.  * These will all be positive and non-zero, so they won't look like  * errors.  */
define|#
directive|define
name|PCAP_WARNING
value|1
comment|/* generic warning code */
define|#
directive|define
name|PCAP_WARNING_PROMISC_NOTSUP
value|2
comment|/* this device doesn't support promiscuous mode */
name|char
modifier|*
name|pcap_lookupdev
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
name|pcap_lookupnet
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|bpf_u_int32
modifier|*
parameter_list|,
name|bpf_u_int32
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
name|pcap_t
modifier|*
name|pcap_create
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
name|pcap_set_snaplen
parameter_list|(
name|pcap_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
name|pcap_set_promisc
parameter_list|(
name|pcap_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
name|pcap_can_set_rfmon
parameter_list|(
name|pcap_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|pcap_set_rfmon
parameter_list|(
name|pcap_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
name|pcap_set_timeout
parameter_list|(
name|pcap_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
name|pcap_set_buffer_size
parameter_list|(
name|pcap_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
name|pcap_activate
parameter_list|(
name|pcap_t
modifier|*
parameter_list|)
function_decl|;
name|pcap_t
modifier|*
name|pcap_open_live
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
name|pcap_t
modifier|*
name|pcap_open_dead
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|pcap_t
modifier|*
name|pcap_open_offline
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|WIN32
argument_list|)
name|pcap_t
modifier|*
name|pcap_hopen_offline
parameter_list|(
name|intptr_t
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|LIBPCAP_EXPORTS
argument_list|)
define|#
directive|define
name|pcap_fopen_offline
parameter_list|(
name|f
parameter_list|,
name|b
parameter_list|)
define|\
value|pcap_hopen_offline(_get_osfhandle(_fileno(f)), b)
else|#
directive|else
comment|/*LIBPCAP_EXPORTS*/
specifier|static
name|pcap_t
modifier|*
name|pcap_fopen_offline
parameter_list|(
name|FILE
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
else|#
directive|else
comment|/*WIN32*/
name|pcap_t
modifier|*
name|pcap_fopen_offline
parameter_list|(
name|FILE
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/*WIN32*/
name|void
name|pcap_close
parameter_list|(
name|pcap_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|pcap_loop
parameter_list|(
name|pcap_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|pcap_handler
parameter_list|,
name|u_char
modifier|*
parameter_list|)
function_decl|;
name|int
name|pcap_dispatch
parameter_list|(
name|pcap_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|pcap_handler
parameter_list|,
name|u_char
modifier|*
parameter_list|)
function_decl|;
specifier|const
name|u_char
modifier|*
name|pcap_next
parameter_list|(
name|pcap_t
modifier|*
parameter_list|,
name|struct
name|pcap_pkthdr
modifier|*
parameter_list|)
function_decl|;
name|int
name|pcap_next_ex
parameter_list|(
name|pcap_t
modifier|*
parameter_list|,
name|struct
name|pcap_pkthdr
modifier|*
modifier|*
parameter_list|,
specifier|const
name|u_char
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|void
name|pcap_breakloop
parameter_list|(
name|pcap_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|pcap_stats
parameter_list|(
name|pcap_t
modifier|*
parameter_list|,
name|struct
name|pcap_stat
modifier|*
parameter_list|)
function_decl|;
name|int
name|pcap_setfilter
parameter_list|(
name|pcap_t
modifier|*
parameter_list|,
name|struct
name|bpf_program
modifier|*
parameter_list|)
function_decl|;
name|int
name|pcap_setdirection
parameter_list|(
name|pcap_t
modifier|*
parameter_list|,
name|pcap_direction_t
parameter_list|)
function_decl|;
name|int
name|pcap_getnonblock
parameter_list|(
name|pcap_t
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
name|pcap_setnonblock
parameter_list|(
name|pcap_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
name|pcap_inject
parameter_list|(
name|pcap_t
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|int
name|pcap_sendpacket
parameter_list|(
name|pcap_t
modifier|*
parameter_list|,
specifier|const
name|u_char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|pcap_statustostr
parameter_list|(
name|int
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|pcap_strerror
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|char
modifier|*
name|pcap_geterr
parameter_list|(
name|pcap_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|pcap_perror
parameter_list|(
name|pcap_t
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
name|pcap_compile
parameter_list|(
name|pcap_t
modifier|*
parameter_list|,
name|struct
name|bpf_program
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|bpf_u_int32
parameter_list|)
function_decl|;
name|int
name|pcap_compile_nopcap
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
name|struct
name|bpf_program
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|bpf_u_int32
parameter_list|)
function_decl|;
name|void
name|pcap_freecode
parameter_list|(
name|struct
name|bpf_program
modifier|*
parameter_list|)
function_decl|;
name|int
name|pcap_offline_filter
parameter_list|(
name|struct
name|bpf_program
modifier|*
parameter_list|,
specifier|const
name|struct
name|pcap_pkthdr
modifier|*
parameter_list|,
specifier|const
name|u_char
modifier|*
parameter_list|)
function_decl|;
name|int
name|pcap_datalink
parameter_list|(
name|pcap_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|pcap_datalink_ext
parameter_list|(
name|pcap_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|pcap_list_datalinks
parameter_list|(
name|pcap_t
modifier|*
parameter_list|,
name|int
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|int
name|pcap_set_datalink
parameter_list|(
name|pcap_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
name|pcap_free_datalinks
parameter_list|(
name|int
modifier|*
parameter_list|)
function_decl|;
name|int
name|pcap_datalink_name_to_val
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|pcap_datalink_val_to_name
parameter_list|(
name|int
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|pcap_datalink_val_to_description
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|int
name|pcap_snapshot
parameter_list|(
name|pcap_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|pcap_is_swapped
parameter_list|(
name|pcap_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|pcap_major_version
parameter_list|(
name|pcap_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|pcap_minor_version
parameter_list|(
name|pcap_t
modifier|*
parameter_list|)
function_decl|;
comment|/* XXX */
name|FILE
modifier|*
name|pcap_file
parameter_list|(
name|pcap_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|pcap_fileno
parameter_list|(
name|pcap_t
modifier|*
parameter_list|)
function_decl|;
name|pcap_dumper_t
modifier|*
name|pcap_dump_open
parameter_list|(
name|pcap_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|pcap_dumper_t
modifier|*
name|pcap_dump_fopen
parameter_list|(
name|pcap_t
modifier|*
parameter_list|,
name|FILE
modifier|*
name|fp
parameter_list|)
function_decl|;
name|FILE
modifier|*
name|pcap_dump_file
parameter_list|(
name|pcap_dumper_t
modifier|*
parameter_list|)
function_decl|;
name|long
name|pcap_dump_ftell
parameter_list|(
name|pcap_dumper_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|pcap_dump_flush
parameter_list|(
name|pcap_dumper_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|pcap_dump_close
parameter_list|(
name|pcap_dumper_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|pcap_dump
parameter_list|(
name|u_char
modifier|*
parameter_list|,
specifier|const
name|struct
name|pcap_pkthdr
modifier|*
parameter_list|,
specifier|const
name|u_char
modifier|*
parameter_list|)
function_decl|;
name|int
name|pcap_findalldevs
parameter_list|(
name|pcap_if_t
modifier|*
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
name|void
name|pcap_freealldevs
parameter_list|(
name|pcap_if_t
modifier|*
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|pcap_lib_version
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* XXX this guy lives in the bpf tree */
name|u_int
name|bpf_filter
parameter_list|(
name|struct
name|bpf_insn
modifier|*
parameter_list|,
name|u_char
modifier|*
parameter_list|,
name|u_int
parameter_list|,
name|u_int
parameter_list|)
function_decl|;
name|int
name|bpf_validate
parameter_list|(
name|struct
name|bpf_insn
modifier|*
name|f
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|char
modifier|*
name|bpf_image
parameter_list|(
name|struct
name|bpf_insn
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
name|bpf_dump
parameter_list|(
name|struct
name|bpf_program
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|WIN32
argument_list|)
comment|/*  * Win32 definitions  */
name|int
name|pcap_setbuff
parameter_list|(
name|pcap_t
modifier|*
name|p
parameter_list|,
name|int
name|dim
parameter_list|)
function_decl|;
name|int
name|pcap_setmode
parameter_list|(
name|pcap_t
modifier|*
name|p
parameter_list|,
name|int
name|mode
parameter_list|)
function_decl|;
name|int
name|pcap_setmintocopy
parameter_list|(
name|pcap_t
modifier|*
name|p
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|WPCAP
comment|/* Include file with the wpcap-specific extensions */
include|#
directive|include
file|<Win32-Extensions.h>
endif|#
directive|endif
comment|/* WPCAP */
define|#
directive|define
name|MODE_CAPT
value|0
define|#
directive|define
name|MODE_STAT
value|1
define|#
directive|define
name|MODE_MON
value|2
elif|#
directive|elif
name|defined
argument_list|(
name|MSDOS
argument_list|)
comment|/*  * MS-DOS definitions  */
name|int
name|pcap_stats_ex
parameter_list|(
name|pcap_t
modifier|*
parameter_list|,
name|struct
name|pcap_stat_ex
modifier|*
parameter_list|)
function_decl|;
name|void
name|pcap_set_wait
parameter_list|(
name|pcap_t
modifier|*
name|p
parameter_list|,
name|void
function_decl|(
modifier|*
name|yield
function_decl|)
parameter_list|(
name|void
parameter_list|)
parameter_list|,
name|int
name|wait
parameter_list|)
function_decl|;
name|u_long
name|pcap_mac_packets
parameter_list|(
name|void
parameter_list|)
function_decl|;
else|#
directive|else
comment|/* UN*X */
comment|/*  * UN*X definitions  */
name|int
name|pcap_get_selectable_fd
parameter_list|(
name|pcap_t
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* WIN32/MSDOS/UN*X */
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

