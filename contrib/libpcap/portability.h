begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 1994, 1995, 1996  *	The Regents of the University of California.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *	This product includes software developed by the Computer Systems  *	Engineering Group at Lawrence Berkeley Laboratory.  * 4. Neither the name of the University nor of the Laboratory may be used  *    to endorse or promote products derived from this software without  *    specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|portability_h
end_ifndef

begin_define
define|#
directive|define
name|portability_h
end_define

begin_comment
comment|/*  * Helpers for portability between Windows and UN*X and between different  * flavors of UN*X.  */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
ifndef|#
directive|ifndef
name|HAVE_STRLCPY
comment|/*   * Macro that does the same thing as strlcpy().   */
ifdef|#
directive|ifdef
name|_MSC_VER
comment|/*    * strncpy_s() is supported at least back to Visual    * Studio 2005.    */
define|#
directive|define
name|strlcpy
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|,
name|z
parameter_list|)
define|\
value|strncpy_s((x), (z), (y), _TRUNCATE)
else|#
directive|else
define|#
directive|define
name|strlcpy
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|,
name|z
parameter_list|)
define|\
value|(strncpy((x), (y), (z)), \ 	 ((z)<= 0 ? 0 : ((x)[(z) - 1] = '\0')), \ 	 (void) strlen((y)))
endif|#
directive|endif
endif|#
directive|endif
comment|/*  * For flagging arguments as format strings in MSVC.  */
if|#
directive|if
name|_MSC_VER
operator|>=
literal|1400
include|#
directive|include
file|<sal.h>
if|#
directive|if
name|_MSC_VER
operator|>
literal|1400
define|#
directive|define
name|FORMAT_STRING
parameter_list|(
name|p
parameter_list|)
value|_Printf_format_string_ p
else|#
directive|else
define|#
directive|define
name|FORMAT_STRING
parameter_list|(
name|p
parameter_list|)
value|__format_string p
endif|#
directive|endif
else|#
directive|else
define|#
directive|define
name|FORMAT_STRING
parameter_list|(
name|p
parameter_list|)
value|p
endif|#
directive|endif
ifdef|#
directive|ifdef
name|_MSC_VER
define|#
directive|define
name|strdup
value|_strdup
define|#
directive|define
name|sscanf
value|sscanf_s
define|#
directive|define
name|setbuf
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
define|\
value|setvbuf((x), (y), _IONBF, 0)
define|#
directive|define
name|fopen
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
define|\
value|fopen_safe((x), (y))
name|FILE
modifier|*
name|fopen_safe
parameter_list|(
specifier|const
name|char
modifier|*
name|filename
parameter_list|,
specifier|const
name|char
modifier|*
name|mode
parameter_list|)
function_decl|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|||
name|defined
argument_list|(
name|__MINGW32__
argument_list|)
define|#
directive|define
name|strlcat
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|,
name|z
parameter_list|)
define|\
value|strncat_s((x), (z), (y), _TRUNCATE)
endif|#
directive|endif
ifdef|#
directive|ifdef
name|_MSC_VER
comment|/*    * MSVC.    */
if|#
directive|if
name|_MSC_VER
operator|>=
literal|1900
comment|/*      * VS 2015 or newer; we have snprintf() function.      */
define|#
directive|define
name|HAVE_SNPRINTF
endif|#
directive|endif
endif|#
directive|endif
comment|/*  * On Windows, snprintf(), with that name and with C99 behavior - i.e.,  * guaranteeing that the formatted string is null-terminated - didn't  * appear until Visual Studio 2015.  Prior to that, the C runtime had  * only _snprintf(), which *doesn't* guarantee that the string is  * null-terminated if it is truncated due to the buffer being too  * small.  We therefore can't just define snprintf to be _snprintf  * and define vsnprintf to be _vsnprintf, as we're relying on null-  * termination of strings in all cases.  *  * We also want to allow this to be built with versions of Visual Studio  * prior to VS 2015, so we can't rely on snprintf() being present.  *  * And we want to make sure that, if we support plugins in the future,  * a routine with C99 snprintf() behavior will be available to them.  * We also don't want it to collide with the C library snprintf() if  * there is one.  *  * So we make pcap_snprintf() and pcap_vsnprintf() available, either by  * #defining them to be snprintf or vsnprintf, respectively, or by  * defining our own versions and exporting them.  */
ifdef|#
directive|ifdef
name|HAVE_SNPRINTF
define|#
directive|define
name|pcap_snprintf
value|snprintf
else|#
directive|else
specifier|extern
name|int
name|pcap_snprintf
argument_list|(
name|char
operator|*
argument_list|,
name|size_t
argument_list|,
name|FORMAT_STRING
argument_list|(
specifier|const
name|char
operator|*
argument_list|)
argument_list|,
operator|...
argument_list|)
ifdef|#
directive|ifdef
name|__ATTRIBUTE___FORMAT_OK
name|__attribute__
argument_list|(
operator|(
name|format
argument_list|(
name|printf
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
operator|)
argument_list|)
endif|#
directive|endif
comment|/* __ATTRIBUTE___FORMAT_OK */
decl_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|HAVE_VSNPRINTF
define|#
directive|define
name|pcap_vsnprintf
value|vsnprintf
else|#
directive|else
specifier|extern
name|int
name|pcap_vsnprintf
parameter_list|(
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|va_list
name|ap
parameter_list|)
function_decl|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|HAVE_STRTOK_R
define|#
directive|define
name|pcap_strtok_r
value|strtok_r
else|#
directive|else
ifdef|#
directive|ifdef
name|_MSC_VER
comment|/*      * Microsoft gives it a different name.      */
define|#
directive|define
name|pcap_strtok_r
value|strtok_s
else|#
directive|else
comment|/*      * Define it ourselves.      */
define|#
directive|define
name|NEED_STRTOK_R
specifier|extern
name|int
name|pcap_strtok_r
parameter_list|(
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
endif|#
directive|endif
comment|/* HAVE_STRTOK_R */
ifdef|#
directive|ifdef
name|_WIN32
comment|/*    * These may be defined by<inttypes.h>.    *    * XXX - for MSVC, we always want the _MSC_EXTENSIONS versions.    * What about other compilers?  If, as the MinGW Web site says MinGW    * does, the other compilers just use Microsoft's run-time library,    * then they should probably use the _MSC_EXTENSIONS even if the    * compiler doesn't define _MSC_EXTENSIONS.    *    * XXX - we currently aren't using any of these, but this allows    * their use in the future.    */
ifndef|#
directive|ifndef
name|PRId64
ifdef|#
directive|ifdef
name|_MSC_EXTENSIONS
define|#
directive|define
name|PRId64
value|"I64d"
else|#
directive|else
define|#
directive|define
name|PRId64
value|"lld"
endif|#
directive|endif
endif|#
directive|endif
comment|/* PRId64 */
ifndef|#
directive|ifndef
name|PRIo64
ifdef|#
directive|ifdef
name|_MSC_EXTENSIONS
define|#
directive|define
name|PRIo64
value|"I64o"
else|#
directive|else
define|#
directive|define
name|PRIo64
value|"llo"
endif|#
directive|endif
endif|#
directive|endif
comment|/* PRIo64 */
ifndef|#
directive|ifndef
name|PRIx64
ifdef|#
directive|ifdef
name|_MSC_EXTENSIONS
define|#
directive|define
name|PRIx64
value|"I64x"
else|#
directive|else
define|#
directive|define
name|PRIx64
value|"llx"
endif|#
directive|endif
endif|#
directive|endif
ifndef|#
directive|ifndef
name|PRIu64
ifdef|#
directive|ifdef
name|_MSC_EXTENSIONS
define|#
directive|define
name|PRIu64
value|"I64u"
else|#
directive|else
define|#
directive|define
name|PRIu64
value|"llu"
endif|#
directive|endif
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__cplusplus
argument_list|)
define|#
directive|define
name|inline
value|__inline
endif|#
directive|endif
endif|#
directive|endif
comment|/* _WIN32 */
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

