begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|///////////////////////////////////////////////////////////////////////////////
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|/// \file       range_encoder.h
end_comment

begin_comment
comment|/// \brief      Range Encoder
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|//  Authors:    Igor Pavlov
end_comment

begin_comment
comment|//              Lasse Collin
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file has been put into the public domain.
end_comment

begin_comment
comment|//  You can do whatever you want with this file.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|///////////////////////////////////////////////////////////////////////////////
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LZMA_RANGE_ENCODER_H
end_ifndef

begin_define
define|#
directive|define
name|LZMA_RANGE_ENCODER_H
end_define

begin_include
include|#
directive|include
file|"range_common.h"
end_include

begin_include
include|#
directive|include
file|"price.h"
end_include

begin_comment
comment|/// Maximum number of symbols that can be put pending into lzma_range_encoder
end_comment

begin_comment
comment|/// structure between calls to lzma_rc_encode(). For LZMA, 52+5 is enough
end_comment

begin_comment
comment|/// (match with big distance and length followed by range encoder flush).
end_comment

begin_define
define|#
directive|define
name|RC_SYMBOLS_MAX
value|58
end_define

begin_typedef
typedef|typedef
struct|struct
block|{
name|uint64_t
name|low
decl_stmt|;
name|uint64_t
name|cache_size
decl_stmt|;
name|uint32_t
name|range
decl_stmt|;
name|uint8_t
name|cache
decl_stmt|;
comment|/// Number of symbols in the tables
name|size_t
name|count
decl_stmt|;
comment|/// rc_encode()'s position in the tables
name|size_t
name|pos
decl_stmt|;
comment|/// Symbols to encode
enum|enum
block|{
name|RC_BIT_0
block|,
name|RC_BIT_1
block|,
name|RC_DIRECT_0
block|,
name|RC_DIRECT_1
block|,
name|RC_FLUSH
block|, 	}
name|symbols
index|[
name|RC_SYMBOLS_MAX
index|]
enum|;
comment|/// Probabilities associated with RC_BIT_0 or RC_BIT_1
name|probability
modifier|*
name|probs
index|[
name|RC_SYMBOLS_MAX
index|]
decl_stmt|;
block|}
name|lzma_range_encoder
typedef|;
end_typedef

begin_function
specifier|static
specifier|inline
name|void
name|rc_reset
parameter_list|(
name|lzma_range_encoder
modifier|*
name|rc
parameter_list|)
block|{
name|rc
operator|->
name|low
operator|=
literal|0
expr_stmt|;
name|rc
operator|->
name|cache_size
operator|=
literal|1
expr_stmt|;
name|rc
operator|->
name|range
operator|=
name|UINT32_MAX
expr_stmt|;
name|rc
operator|->
name|cache
operator|=
literal|0
expr_stmt|;
name|rc
operator|->
name|count
operator|=
literal|0
expr_stmt|;
name|rc
operator|->
name|pos
operator|=
literal|0
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|rc_bit
parameter_list|(
name|lzma_range_encoder
modifier|*
name|rc
parameter_list|,
name|probability
modifier|*
name|prob
parameter_list|,
name|uint32_t
name|bit
parameter_list|)
block|{
name|rc
operator|->
name|symbols
index|[
name|rc
operator|->
name|count
index|]
operator|=
name|bit
expr_stmt|;
name|rc
operator|->
name|probs
index|[
name|rc
operator|->
name|count
index|]
operator|=
name|prob
expr_stmt|;
operator|++
name|rc
operator|->
name|count
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|rc_bittree
parameter_list|(
name|lzma_range_encoder
modifier|*
name|rc
parameter_list|,
name|probability
modifier|*
name|probs
parameter_list|,
name|uint32_t
name|bit_count
parameter_list|,
name|uint32_t
name|symbol
parameter_list|)
block|{
name|uint32_t
name|model_index
init|=
literal|1
decl_stmt|;
do|do
block|{
specifier|const
name|uint32_t
name|bit
init|=
operator|(
name|symbol
operator|>>
operator|--
name|bit_count
operator|)
operator|&
literal|1
decl_stmt|;
name|rc_bit
argument_list|(
name|rc
argument_list|,
operator|&
name|probs
index|[
name|model_index
index|]
argument_list|,
name|bit
argument_list|)
expr_stmt|;
name|model_index
operator|=
operator|(
name|model_index
operator|<<
literal|1
operator|)
operator|+
name|bit
expr_stmt|;
block|}
do|while
condition|(
name|bit_count
operator|!=
literal|0
condition|)
do|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|rc_bittree_reverse
parameter_list|(
name|lzma_range_encoder
modifier|*
name|rc
parameter_list|,
name|probability
modifier|*
name|probs
parameter_list|,
name|uint32_t
name|bit_count
parameter_list|,
name|uint32_t
name|symbol
parameter_list|)
block|{
name|uint32_t
name|model_index
init|=
literal|1
decl_stmt|;
do|do
block|{
specifier|const
name|uint32_t
name|bit
init|=
name|symbol
operator|&
literal|1
decl_stmt|;
name|symbol
operator|>>=
literal|1
expr_stmt|;
name|rc_bit
argument_list|(
name|rc
argument_list|,
operator|&
name|probs
index|[
name|model_index
index|]
argument_list|,
name|bit
argument_list|)
expr_stmt|;
name|model_index
operator|=
operator|(
name|model_index
operator|<<
literal|1
operator|)
operator|+
name|bit
expr_stmt|;
block|}
do|while
condition|(
operator|--
name|bit_count
operator|!=
literal|0
condition|)
do|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|rc_direct
parameter_list|(
name|lzma_range_encoder
modifier|*
name|rc
parameter_list|,
name|uint32_t
name|value
parameter_list|,
name|uint32_t
name|bit_count
parameter_list|)
block|{
do|do
block|{
name|rc
operator|->
name|symbols
index|[
name|rc
operator|->
name|count
operator|++
index|]
operator|=
name|RC_DIRECT_0
operator|+
operator|(
operator|(
name|value
operator|>>
operator|--
name|bit_count
operator|)
operator|&
literal|1
operator|)
expr_stmt|;
block|}
do|while
condition|(
name|bit_count
operator|!=
literal|0
condition|)
do|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|rc_flush
parameter_list|(
name|lzma_range_encoder
modifier|*
name|rc
parameter_list|)
block|{
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
name|rc
operator|->
name|symbols
index|[
name|rc
operator|->
name|count
operator|++
index|]
operator|=
name|RC_FLUSH
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|bool
name|rc_shift_low
parameter_list|(
name|lzma_range_encoder
modifier|*
name|rc
parameter_list|,
name|uint8_t
modifier|*
name|out
parameter_list|,
name|size_t
modifier|*
name|out_pos
parameter_list|,
name|size_t
name|out_size
parameter_list|)
block|{
if|if
condition|(
call|(
name|uint32_t
call|)
argument_list|(
name|rc
operator|->
name|low
argument_list|)
operator|<
call|(
name|uint32_t
call|)
argument_list|(
literal|0xFF000000
argument_list|)
operator|||
call|(
name|uint32_t
call|)
argument_list|(
name|rc
operator|->
name|low
operator|>>
literal|32
argument_list|)
operator|!=
literal|0
condition|)
block|{
do|do
block|{
if|if
condition|(
operator|*
name|out_pos
operator|==
name|out_size
condition|)
return|return
name|true
return|;
name|out
index|[
operator|*
name|out_pos
index|]
operator|=
name|rc
operator|->
name|cache
operator|+
call|(
name|uint8_t
call|)
argument_list|(
name|rc
operator|->
name|low
operator|>>
literal|32
argument_list|)
expr_stmt|;
operator|++
operator|*
name|out_pos
expr_stmt|;
name|rc
operator|->
name|cache
operator|=
literal|0xFF
expr_stmt|;
block|}
do|while
condition|(
operator|--
name|rc
operator|->
name|cache_size
operator|!=
literal|0
condition|)
do|;
name|rc
operator|->
name|cache
operator|=
operator|(
name|rc
operator|->
name|low
operator|>>
literal|24
operator|)
operator|&
literal|0xFF
expr_stmt|;
block|}
operator|++
name|rc
operator|->
name|cache_size
expr_stmt|;
name|rc
operator|->
name|low
operator|=
operator|(
name|rc
operator|->
name|low
operator|&
literal|0x00FFFFFF
operator|)
operator|<<
name|RC_SHIFT_BITS
expr_stmt|;
return|return
name|false
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|bool
name|rc_encode
parameter_list|(
name|lzma_range_encoder
modifier|*
name|rc
parameter_list|,
name|uint8_t
modifier|*
name|out
parameter_list|,
name|size_t
modifier|*
name|out_pos
parameter_list|,
name|size_t
name|out_size
parameter_list|)
block|{
name|assert
argument_list|(
name|rc
operator|->
name|count
operator|<=
name|RC_SYMBOLS_MAX
argument_list|)
expr_stmt|;
while|while
condition|(
name|rc
operator|->
name|pos
operator|<
name|rc
operator|->
name|count
condition|)
block|{
comment|// Normalize
if|if
condition|(
name|rc
operator|->
name|range
operator|<
name|RC_TOP_VALUE
condition|)
block|{
if|if
condition|(
name|rc_shift_low
argument_list|(
name|rc
argument_list|,
name|out
argument_list|,
name|out_pos
argument_list|,
name|out_size
argument_list|)
condition|)
return|return
name|true
return|;
name|rc
operator|->
name|range
operator|<<=
name|RC_SHIFT_BITS
expr_stmt|;
block|}
comment|// Encode a bit
switch|switch
condition|(
name|rc
operator|->
name|symbols
index|[
name|rc
operator|->
name|pos
index|]
condition|)
block|{
case|case
name|RC_BIT_0
case|:
block|{
name|probability
name|prob
init|=
operator|*
name|rc
operator|->
name|probs
index|[
name|rc
operator|->
name|pos
index|]
decl_stmt|;
name|rc
operator|->
name|range
operator|=
operator|(
name|rc
operator|->
name|range
operator|>>
name|RC_BIT_MODEL_TOTAL_BITS
operator|)
operator|*
name|prob
expr_stmt|;
name|prob
operator|+=
operator|(
name|RC_BIT_MODEL_TOTAL
operator|-
name|prob
operator|)
operator|>>
name|RC_MOVE_BITS
expr_stmt|;
operator|*
name|rc
operator|->
name|probs
index|[
name|rc
operator|->
name|pos
index|]
operator|=
name|prob
expr_stmt|;
break|break;
block|}
case|case
name|RC_BIT_1
case|:
block|{
name|probability
name|prob
init|=
operator|*
name|rc
operator|->
name|probs
index|[
name|rc
operator|->
name|pos
index|]
decl_stmt|;
specifier|const
name|uint32_t
name|bound
init|=
name|prob
operator|*
operator|(
name|rc
operator|->
name|range
operator|>>
name|RC_BIT_MODEL_TOTAL_BITS
operator|)
decl_stmt|;
name|rc
operator|->
name|low
operator|+=
name|bound
expr_stmt|;
name|rc
operator|->
name|range
operator|-=
name|bound
expr_stmt|;
name|prob
operator|-=
name|prob
operator|>>
name|RC_MOVE_BITS
expr_stmt|;
operator|*
name|rc
operator|->
name|probs
index|[
name|rc
operator|->
name|pos
index|]
operator|=
name|prob
expr_stmt|;
break|break;
block|}
case|case
name|RC_DIRECT_0
case|:
name|rc
operator|->
name|range
operator|>>=
literal|1
expr_stmt|;
break|break;
case|case
name|RC_DIRECT_1
case|:
name|rc
operator|->
name|range
operator|>>=
literal|1
expr_stmt|;
name|rc
operator|->
name|low
operator|+=
name|rc
operator|->
name|range
expr_stmt|;
break|break;
case|case
name|RC_FLUSH
case|:
comment|// Prevent further normalizations.
name|rc
operator|->
name|range
operator|=
name|UINT32_MAX
expr_stmt|;
comment|// Flush the last five bytes (see rc_flush()).
do|do
block|{
if|if
condition|(
name|rc_shift_low
argument_list|(
name|rc
argument_list|,
name|out
argument_list|,
name|out_pos
argument_list|,
name|out_size
argument_list|)
condition|)
return|return
name|true
return|;
block|}
do|while
condition|(
operator|++
name|rc
operator|->
name|pos
operator|<
name|rc
operator|->
name|count
condition|)
do|;
comment|// Reset the range encoder so we are ready to continue
comment|// encoding if we weren't finishing the stream.
name|rc_reset
argument_list|(
name|rc
argument_list|)
expr_stmt|;
return|return
name|false
return|;
default|default:
name|assert
argument_list|(
literal|0
argument_list|)
expr_stmt|;
break|break;
block|}
operator|++
name|rc
operator|->
name|pos
expr_stmt|;
block|}
name|rc
operator|->
name|count
operator|=
literal|0
expr_stmt|;
name|rc
operator|->
name|pos
operator|=
literal|0
expr_stmt|;
return|return
name|false
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|rc_pending
parameter_list|(
specifier|const
name|lzma_range_encoder
modifier|*
name|rc
parameter_list|)
block|{
return|return
name|rc
operator|->
name|cache_size
operator|+
literal|5
operator|-
literal|1
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

end_unit

