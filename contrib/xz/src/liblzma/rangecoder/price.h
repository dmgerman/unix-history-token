begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|///////////////////////////////////////////////////////////////////////////////
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|/// \file       price.h
end_comment

begin_comment
comment|/// \brief      Probability price calculation
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  Author:     Igor Pavlov
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file has been put into the public domain.
end_comment

begin_comment
comment|//  You can do whatever you want with this file.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|///////////////////////////////////////////////////////////////////////////////
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LZMA_PRICE_H
end_ifndef

begin_define
define|#
directive|define
name|LZMA_PRICE_H
end_define

begin_define
define|#
directive|define
name|RC_MOVE_REDUCING_BITS
value|4
end_define

begin_define
define|#
directive|define
name|RC_BIT_PRICE_SHIFT_BITS
value|4
end_define

begin_define
define|#
directive|define
name|RC_PRICE_TABLE_SIZE
value|(RC_BIT_MODEL_TOTAL>> RC_MOVE_REDUCING_BITS)
end_define

begin_define
define|#
directive|define
name|RC_INFINITY_PRICE
value|(UINT32_C(1)<< 30)
end_define

begin_comment
comment|/// Lookup table for the inline functions defined in this file.
end_comment

begin_decl_stmt
specifier|extern
specifier|const
name|uint8_t
name|lzma_rc_prices
index|[
name|RC_PRICE_TABLE_SIZE
index|]
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|uint32_t
name|rc_bit_price
parameter_list|(
specifier|const
name|probability
name|prob
parameter_list|,
specifier|const
name|uint32_t
name|bit
parameter_list|)
block|{
return|return
name|lzma_rc_prices
index|[
operator|(
name|prob
operator|^
operator|(
operator|(
name|UINT32_C
argument_list|(
literal|0
argument_list|)
operator|-
name|bit
operator|)
operator|&
operator|(
name|RC_BIT_MODEL_TOTAL
operator|-
literal|1
operator|)
operator|)
operator|)
operator|>>
name|RC_MOVE_REDUCING_BITS
index|]
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|rc_bit_0_price
parameter_list|(
specifier|const
name|probability
name|prob
parameter_list|)
block|{
return|return
name|lzma_rc_prices
index|[
name|prob
operator|>>
name|RC_MOVE_REDUCING_BITS
index|]
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|rc_bit_1_price
parameter_list|(
specifier|const
name|probability
name|prob
parameter_list|)
block|{
return|return
name|lzma_rc_prices
index|[
operator|(
name|prob
operator|^
operator|(
name|RC_BIT_MODEL_TOTAL
operator|-
literal|1
operator|)
operator|)
operator|>>
name|RC_MOVE_REDUCING_BITS
index|]
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|rc_bittree_price
parameter_list|(
specifier|const
name|probability
modifier|*
specifier|const
name|probs
parameter_list|,
specifier|const
name|uint32_t
name|bit_levels
parameter_list|,
name|uint32_t
name|symbol
parameter_list|)
block|{
name|uint32_t
name|price
init|=
literal|0
decl_stmt|;
name|symbol
operator|+=
name|UINT32_C
argument_list|(
literal|1
argument_list|)
operator|<<
name|bit_levels
expr_stmt|;
do|do
block|{
specifier|const
name|uint32_t
name|bit
init|=
name|symbol
operator|&
literal|1
decl_stmt|;
name|symbol
operator|>>=
literal|1
expr_stmt|;
name|price
operator|+=
name|rc_bit_price
argument_list|(
name|probs
index|[
name|symbol
index|]
argument_list|,
name|bit
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|symbol
operator|!=
literal|1
condition|)
do|;
return|return
name|price
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|rc_bittree_reverse_price
parameter_list|(
specifier|const
name|probability
modifier|*
specifier|const
name|probs
parameter_list|,
name|uint32_t
name|bit_levels
parameter_list|,
name|uint32_t
name|symbol
parameter_list|)
block|{
name|uint32_t
name|price
init|=
literal|0
decl_stmt|;
name|uint32_t
name|model_index
init|=
literal|1
decl_stmt|;
do|do
block|{
specifier|const
name|uint32_t
name|bit
init|=
name|symbol
operator|&
literal|1
decl_stmt|;
name|symbol
operator|>>=
literal|1
expr_stmt|;
name|price
operator|+=
name|rc_bit_price
argument_list|(
name|probs
index|[
name|model_index
index|]
argument_list|,
name|bit
argument_list|)
expr_stmt|;
name|model_index
operator|=
operator|(
name|model_index
operator|<<
literal|1
operator|)
operator|+
name|bit
expr_stmt|;
block|}
do|while
condition|(
operator|--
name|bit_levels
operator|!=
literal|0
condition|)
do|;
return|return
name|price
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|rc_direct_price
parameter_list|(
specifier|const
name|uint32_t
name|bits
parameter_list|)
block|{
return|return
name|bits
operator|<<
name|RC_BIT_PRICE_SHIFT_BITS
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

end_unit

