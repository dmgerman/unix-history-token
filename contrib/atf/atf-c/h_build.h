begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Automated Testing Framework (atf)  *  * Copyright (c) 2009 The NetBSD Foundation, Inc.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND  * CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE  * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER  * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR  * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN  * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|TESTS_ATF_ATF_C_H_BUILD_H
argument_list|)
end_if

begin_error
error|#
directive|error
literal|"Cannot include h_build.h more than once."
end_error

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|TESTS_ATF_ATF_C_H_BUILD_H
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ---------------------------------------------------------------------  * Test case data.  * --------------------------------------------------------------------- */
end_comment

begin_struct
specifier|static
struct|struct
name|c_o_test
block|{
specifier|const
name|char
modifier|*
name|msg
decl_stmt|;
specifier|const
name|char
modifier|*
name|cc
decl_stmt|;
specifier|const
name|char
modifier|*
name|cflags
decl_stmt|;
specifier|const
name|char
modifier|*
name|cppflags
decl_stmt|;
specifier|const
name|char
modifier|*
name|sfile
decl_stmt|;
specifier|const
name|char
modifier|*
name|ofile
decl_stmt|;
name|bool
name|hasoptargs
decl_stmt|;
specifier|const
name|char
modifier|*
specifier|const
name|optargs
index|[
literal|16
index|]
decl_stmt|;
specifier|const
name|char
modifier|*
specifier|const
name|expargv
index|[
literal|16
index|]
decl_stmt|;
block|}
name|c_o_tests
index|[]
init|=
block|{
block|{
literal|"No flags"
block|,
literal|"cc"
block|,
literal|""
block|,
literal|""
block|,
literal|"test.c"
block|,
literal|"test.o"
block|,
name|false
block|,
block|{
name|NULL
block|}
block|,
block|{
literal|"cc"
block|,
literal|"-o"
block|,
literal|"test.o"
block|,
literal|"-c"
block|,
literal|"test.c"
block|,
name|NULL
block|}
block|,     }
block|,
block|{
literal|"Multi-word program name"
block|,
literal|"cc -foo"
block|,
literal|""
block|,
literal|""
block|,
literal|"test.c"
block|,
literal|"test.o"
block|,
name|false
block|,
block|{
name|NULL
block|}
block|,
block|{
literal|"cc"
block|,
literal|"-foo"
block|,
literal|"-o"
block|,
literal|"test.o"
block|,
literal|"-c"
block|,
literal|"test.c"
block|,
name|NULL
block|}
block|,     }
block|,
block|{
literal|"Some cflags"
block|,
literal|"cc"
block|,
literal|"-f1 -f2    -f3 -f4-f5"
block|,
literal|""
block|,
literal|"test.c"
block|,
literal|"test.o"
block|,
name|false
block|,
block|{
name|NULL
block|}
block|,
block|{
literal|"cc"
block|,
literal|"-f1"
block|,
literal|"-f2"
block|,
literal|"-f3"
block|,
literal|"-f4-f5"
block|,
literal|"-o"
block|,
literal|"test.o"
block|,
literal|"-c"
block|,
literal|"test.c"
block|,
name|NULL
block|}
block|,     }
block|,
block|{
literal|"Some cppflags"
block|,
literal|"cc"
block|,
literal|""
block|,
literal|"-f1 -f2    -f3 -f4-f5"
block|,
literal|"test.c"
block|,
literal|"test.o"
block|,
name|false
block|,
block|{
name|NULL
block|}
block|,
block|{
literal|"cc"
block|,
literal|"-f1"
block|,
literal|"-f2"
block|,
literal|"-f3"
block|,
literal|"-f4-f5"
block|,
literal|"-o"
block|,
literal|"test.o"
block|,
literal|"-c"
block|,
literal|"test.c"
block|,
name|NULL
block|}
block|,     }
block|,
block|{
literal|"Some cflags and cppflags"
block|,
literal|"cc"
block|,
literal|"-f2"
block|,
literal|"-f1"
block|,
literal|"test.c"
block|,
literal|"test.o"
block|,
name|false
block|,
block|{
name|NULL
block|}
block|,
block|{
literal|"cc"
block|,
literal|"-f1"
block|,
literal|"-f2"
block|,
literal|"-o"
block|,
literal|"test.o"
block|,
literal|"-c"
block|,
literal|"test.c"
block|,
name|NULL
block|}
block|,     }
block|,
block|{
literal|"Some optional arguments"
block|,
literal|"cc"
block|,
literal|""
block|,
literal|""
block|,
literal|"test.c"
block|,
literal|"test.o"
block|,
name|true
block|,
block|{
literal|"-o1"
block|,
literal|"-o2"
block|,
name|NULL
block|}
block|,
block|{
literal|"cc"
block|,
literal|"-o1"
block|,
literal|"-o2"
block|,
literal|"-o"
block|,
literal|"test.o"
block|,
literal|"-c"
block|,
literal|"test.c"
block|,
name|NULL
block|}
block|,     }
block|,
block|{
literal|"Some cflags, cppflags and optional arguments"
block|,
literal|"cc"
block|,
literal|"-f2"
block|,
literal|"-f1"
block|,
literal|"test.c"
block|,
literal|"test.o"
block|,
name|true
block|,
block|{
literal|"-o1"
block|,
literal|"-o2"
block|,
name|NULL
block|}
block|,
block|{
literal|"cc"
block|,
literal|"-f1"
block|,
literal|"-f2"
block|,
literal|"-o1"
block|,
literal|"-o2"
block|,
literal|"-o"
block|,
literal|"test.o"
block|,
literal|"-c"
block|,
literal|"test.c"
block|,
name|NULL
block|}
block|,     }
block|,
block|{
name|NULL
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|,
name|false
block|,
block|{
name|NULL
block|}
block|,
block|{
name|NULL
block|}
block|,     }
block|, }
struct|;
end_struct

begin_struct
specifier|static
struct|struct
name|cpp_test
block|{
specifier|const
name|char
modifier|*
name|msg
decl_stmt|;
specifier|const
name|char
modifier|*
name|cpp
decl_stmt|;
specifier|const
name|char
modifier|*
name|cppflags
decl_stmt|;
specifier|const
name|char
modifier|*
name|sfile
decl_stmt|;
specifier|const
name|char
modifier|*
name|ofile
decl_stmt|;
name|bool
name|hasoptargs
decl_stmt|;
specifier|const
name|char
modifier|*
specifier|const
name|optargs
index|[
literal|16
index|]
decl_stmt|;
specifier|const
name|char
modifier|*
specifier|const
name|expargv
index|[
literal|16
index|]
decl_stmt|;
block|}
name|cpp_tests
index|[]
init|=
block|{
block|{
literal|"No flags"
block|,
literal|"cpp"
block|,
literal|""
block|,
literal|"test.c"
block|,
literal|"test.out"
block|,
name|false
block|,
block|{
name|NULL
block|}
block|,
block|{
literal|"cpp"
block|,
literal|"-o"
block|,
literal|"test.out"
block|,
literal|"test.c"
block|,
name|NULL
block|}
block|,     }
block|,
block|{
literal|"Multi-word program name"
block|,
literal|"cpp -foo"
block|,
literal|""
block|,
literal|"test.c"
block|,
literal|"test.out"
block|,
name|false
block|,
block|{
name|NULL
block|}
block|,
block|{
literal|"cpp"
block|,
literal|"-foo"
block|,
literal|"-o"
block|,
literal|"test.out"
block|,
literal|"test.c"
block|,
name|NULL
block|}
block|,     }
block|,
block|{
literal|"Some cppflags"
block|,
literal|"cpp"
block|,
literal|"-f1 -f2    -f3 -f4-f5"
block|,
literal|"test.c"
block|,
literal|"test.out"
block|,
name|false
block|,
block|{
name|NULL
block|}
block|,
block|{
literal|"cpp"
block|,
literal|"-f1"
block|,
literal|"-f2"
block|,
literal|"-f3"
block|,
literal|"-f4-f5"
block|,
literal|"-o"
block|,
literal|"test.out"
block|,
literal|"test.c"
block|,
name|NULL
block|}
block|,     }
block|,
block|{
literal|"Some optional arguments"
block|,
literal|"cpp"
block|,
literal|""
block|,
literal|"test.c"
block|,
literal|"test.out"
block|,
name|true
block|,
block|{
literal|"-o1"
block|,
literal|"-o2"
block|,
name|NULL
block|}
block|,
block|{
literal|"cpp"
block|,
literal|"-o1"
block|,
literal|"-o2"
block|,
literal|"-o"
block|,
literal|"test.out"
block|,
literal|"test.c"
block|,
name|NULL
block|}
block|,     }
block|,
block|{
literal|"Some cppflags and optional arguments"
block|,
literal|"cpp"
block|,
literal|"-f1"
block|,
literal|"test.c"
block|,
literal|"test.out"
block|,
name|true
block|,
block|{
literal|"-o1"
block|,
literal|"-o2"
block|,
name|NULL
block|}
block|,
block|{
literal|"cpp"
block|,
literal|"-f1"
block|,
literal|"-o1"
block|,
literal|"-o2"
block|,
literal|"-o"
block|,
literal|"test.out"
block|,
literal|"test.c"
block|,
name|NULL
block|}
block|,     }
block|,
block|{
name|NULL
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|,
name|false
block|,
block|{
name|NULL
block|}
block|,
block|{
name|NULL
block|}
block|,     }
block|, }
struct|;
end_struct

begin_struct
specifier|static
struct|struct
name|cxx_o_test
block|{
specifier|const
name|char
modifier|*
name|msg
decl_stmt|;
specifier|const
name|char
modifier|*
name|cxx
decl_stmt|;
specifier|const
name|char
modifier|*
name|cxxflags
decl_stmt|;
specifier|const
name|char
modifier|*
name|cppflags
decl_stmt|;
specifier|const
name|char
modifier|*
name|sfile
decl_stmt|;
specifier|const
name|char
modifier|*
name|ofile
decl_stmt|;
name|bool
name|hasoptargs
decl_stmt|;
specifier|const
name|char
modifier|*
specifier|const
name|optargs
index|[
literal|16
index|]
decl_stmt|;
specifier|const
name|char
modifier|*
specifier|const
name|expargv
index|[
literal|16
index|]
decl_stmt|;
block|}
name|cxx_o_tests
index|[]
init|=
block|{
block|{
literal|"No flags"
block|,
literal|"c++"
block|,
literal|""
block|,
literal|""
block|,
literal|"test.c"
block|,
literal|"test.o"
block|,
name|false
block|,
block|{
name|NULL
block|}
block|,
block|{
literal|"c++"
block|,
literal|"-o"
block|,
literal|"test.o"
block|,
literal|"-c"
block|,
literal|"test.c"
block|,
name|NULL
block|}
block|,     }
block|,
block|{
literal|"Multi-word program name"
block|,
literal|"c++ -foo"
block|,
literal|""
block|,
literal|""
block|,
literal|"test.c"
block|,
literal|"test.o"
block|,
name|false
block|,
block|{
name|NULL
block|}
block|,
block|{
literal|"c++"
block|,
literal|"-foo"
block|,
literal|"-o"
block|,
literal|"test.o"
block|,
literal|"-c"
block|,
literal|"test.c"
block|,
name|NULL
block|}
block|,     }
block|,
block|{
literal|"Some cxxflags"
block|,
literal|"c++"
block|,
literal|"-f1 -f2    -f3 -f4-f5"
block|,
literal|""
block|,
literal|"test.c"
block|,
literal|"test.o"
block|,
name|false
block|,
block|{
name|NULL
block|}
block|,
block|{
literal|"c++"
block|,
literal|"-f1"
block|,
literal|"-f2"
block|,
literal|"-f3"
block|,
literal|"-f4-f5"
block|,
literal|"-o"
block|,
literal|"test.o"
block|,
literal|"-c"
block|,
literal|"test.c"
block|,
name|NULL
block|}
block|,     }
block|,
block|{
literal|"Some cppflags"
block|,
literal|"c++"
block|,
literal|""
block|,
literal|"-f1 -f2    -f3 -f4-f5"
block|,
literal|"test.c"
block|,
literal|"test.o"
block|,
name|false
block|,
block|{
name|NULL
block|}
block|,
block|{
literal|"c++"
block|,
literal|"-f1"
block|,
literal|"-f2"
block|,
literal|"-f3"
block|,
literal|"-f4-f5"
block|,
literal|"-o"
block|,
literal|"test.o"
block|,
literal|"-c"
block|,
literal|"test.c"
block|,
name|NULL
block|}
block|,     }
block|,
block|{
literal|"Some cxxflags and cppflags"
block|,
literal|"c++"
block|,
literal|"-f2"
block|,
literal|"-f1"
block|,
literal|"test.c"
block|,
literal|"test.o"
block|,
name|false
block|,
block|{
name|NULL
block|}
block|,
block|{
literal|"c++"
block|,
literal|"-f1"
block|,
literal|"-f2"
block|,
literal|"-o"
block|,
literal|"test.o"
block|,
literal|"-c"
block|,
literal|"test.c"
block|,
name|NULL
block|}
block|,     }
block|,
block|{
literal|"Some optional arguments"
block|,
literal|"c++"
block|,
literal|""
block|,
literal|""
block|,
literal|"test.c"
block|,
literal|"test.o"
block|,
name|true
block|,
block|{
literal|"-o1"
block|,
literal|"-o2"
block|,
name|NULL
block|}
block|,
block|{
literal|"c++"
block|,
literal|"-o1"
block|,
literal|"-o2"
block|,
literal|"-o"
block|,
literal|"test.o"
block|,
literal|"-c"
block|,
literal|"test.c"
block|,
name|NULL
block|}
block|,     }
block|,
block|{
literal|"Some cxxflags, cppflags and optional arguments"
block|,
literal|"c++"
block|,
literal|"-f2"
block|,
literal|"-f1"
block|,
literal|"test.c"
block|,
literal|"test.o"
block|,
name|true
block|,
block|{
literal|"-o1"
block|,
literal|"-o2"
block|,
name|NULL
block|}
block|,
block|{
literal|"c++"
block|,
literal|"-f1"
block|,
literal|"-f2"
block|,
literal|"-o1"
block|,
literal|"-o2"
block|,
literal|"-o"
block|,
literal|"test.o"
block|,
literal|"-c"
block|,
literal|"test.c"
block|,
name|NULL
block|}
block|,     }
block|,
block|{
name|NULL
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|,
name|NULL
block|,
name|false
block|,
block|{
name|NULL
block|}
block|,
block|{
name|NULL
block|}
block|,     }
block|, }
struct|;
end_struct

end_unit

