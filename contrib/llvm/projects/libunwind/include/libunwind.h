begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===---------------------------- libunwind.h -----------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is dual licensed under the MIT and the University of Illinois Open
end_comment

begin_comment
comment|// Source Licenses. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Compatible with libuwind API documented at:
end_comment

begin_comment
comment|//   http://www.nongnu.org/libunwind/man/libunwind(3).html
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__LIBUNWIND__
end_ifndef

begin_define
define|#
directive|define
name|__LIBUNWIND__
end_define

begin_include
include|#
directive|include
file|<__libunwind_config.h>
end_include

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_include
include|#
directive|include
file|<stddef.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__APPLE__
end_ifdef

begin_include
include|#
directive|include
file|<Availability.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__arm__
end_ifdef

begin_define
define|#
directive|define
name|LIBUNWIND_AVAIL
value|__attribute__((unavailable))
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|LIBUNWIND_AVAIL
value|__OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_5_0)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|LIBUNWIND_AVAIL
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* error codes */
end_comment

begin_enum
enum|enum
block|{
name|UNW_ESUCCESS
init|=
literal|0
block|,
comment|/* no error */
name|UNW_EUNSPEC
init|=
operator|-
literal|6540
block|,
comment|/* unspecified (general) error */
name|UNW_ENOMEM
init|=
operator|-
literal|6541
block|,
comment|/* out of memory */
name|UNW_EBADREG
init|=
operator|-
literal|6542
block|,
comment|/* bad register number */
name|UNW_EREADONLYREG
init|=
operator|-
literal|6543
block|,
comment|/* attempt to write read-only register */
name|UNW_ESTOPUNWIND
init|=
operator|-
literal|6544
block|,
comment|/* stop unwinding */
name|UNW_EINVALIDIP
init|=
operator|-
literal|6545
block|,
comment|/* invalid IP */
name|UNW_EBADFRAME
init|=
operator|-
literal|6546
block|,
comment|/* bad frame */
name|UNW_EINVAL
init|=
operator|-
literal|6547
block|,
comment|/* unsupported operation or bad value */
name|UNW_EBADVERSION
init|=
operator|-
literal|6548
block|,
comment|/* unwind info has unsupported version */
name|UNW_ENOINFO
init|=
operator|-
literal|6549
comment|/* no unwind info found */
block|}
enum|;
end_enum

begin_struct
struct|struct
name|unw_context_t
block|{
name|uint64_t
name|data
index|[
literal|128
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|unw_context_t
name|unw_context_t
typedef|;
end_typedef

begin_struct
struct|struct
name|unw_cursor_t
block|{
name|uint64_t
name|data
index|[
literal|140
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|unw_cursor_t
name|unw_cursor_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|unw_addr_space
modifier|*
name|unw_addr_space_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|int
name|unw_regnum_t
typedef|;
end_typedef

begin_if
if|#
directive|if
name|_LIBUNWIND_ARM_EHABI
end_if

begin_typedef
typedef|typedef
name|uint32_t
name|unw_word_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint64_t
name|unw_fpreg_t
typedef|;
end_typedef

begin_else
else|#
directive|else
end_else

begin_typedef
typedef|typedef
name|uint64_t
name|unw_word_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|double
name|unw_fpreg_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_struct
struct|struct
name|unw_proc_info_t
block|{
name|unw_word_t
name|start_ip
decl_stmt|;
comment|/* start address of function */
name|unw_word_t
name|end_ip
decl_stmt|;
comment|/* address after end of function */
name|unw_word_t
name|lsda
decl_stmt|;
comment|/* address of language specific data area, */
comment|/*  or zero if not used */
name|unw_word_t
name|handler
decl_stmt|;
comment|/* personality routine, or zero if not used */
name|unw_word_t
name|gp
decl_stmt|;
comment|/* not used */
name|unw_word_t
name|flags
decl_stmt|;
comment|/* not used */
name|uint32_t
name|format
decl_stmt|;
comment|/* compact unwind encoding, or zero if none */
name|uint32_t
name|unwind_info_size
decl_stmt|;
comment|/* size of dwarf unwind info, or zero if none */
name|unw_word_t
name|unwind_info
decl_stmt|;
comment|/* address of dwarf unwind info, or zero */
name|unw_word_t
name|extra
decl_stmt|;
comment|/* mach_header of mach-o image containing func */
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|unw_proc_info_t
name|unw_proc_info_t
typedef|;
end_typedef

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
specifier|extern
name|int
name|unw_getcontext
argument_list|(
name|unw_context_t
operator|*
argument_list|)
name|LIBUNWIND_AVAIL
decl_stmt|;
specifier|extern
name|int
name|unw_init_local
argument_list|(
name|unw_cursor_t
operator|*
argument_list|,
name|unw_context_t
operator|*
argument_list|)
name|LIBUNWIND_AVAIL
decl_stmt|;
specifier|extern
name|int
name|unw_step
argument_list|(
name|unw_cursor_t
operator|*
argument_list|)
name|LIBUNWIND_AVAIL
decl_stmt|;
specifier|extern
name|int
name|unw_get_reg
argument_list|(
name|unw_cursor_t
operator|*
argument_list|,
name|unw_regnum_t
argument_list|,
name|unw_word_t
operator|*
argument_list|)
name|LIBUNWIND_AVAIL
decl_stmt|;
specifier|extern
name|int
name|unw_get_fpreg
argument_list|(
name|unw_cursor_t
operator|*
argument_list|,
name|unw_regnum_t
argument_list|,
name|unw_fpreg_t
operator|*
argument_list|)
name|LIBUNWIND_AVAIL
decl_stmt|;
specifier|extern
name|int
name|unw_set_reg
argument_list|(
name|unw_cursor_t
operator|*
argument_list|,
name|unw_regnum_t
argument_list|,
name|unw_word_t
argument_list|)
name|LIBUNWIND_AVAIL
decl_stmt|;
specifier|extern
name|int
name|unw_set_fpreg
argument_list|(
name|unw_cursor_t
operator|*
argument_list|,
name|unw_regnum_t
argument_list|,
name|unw_fpreg_t
argument_list|)
name|LIBUNWIND_AVAIL
decl_stmt|;
specifier|extern
name|int
name|unw_resume
argument_list|(
name|unw_cursor_t
operator|*
argument_list|)
name|LIBUNWIND_AVAIL
decl_stmt|;
ifdef|#
directive|ifdef
name|__arm__
comment|/* Save VFP registers in FSTMX format (instead of FSTMD). */
specifier|extern
name|void
name|unw_save_vfp_as_X
argument_list|(
name|unw_cursor_t
operator|*
argument_list|)
name|LIBUNWIND_AVAIL
decl_stmt|;
endif|#
directive|endif
specifier|extern
specifier|const
name|char
modifier|*
name|unw_regname
argument_list|(
name|unw_cursor_t
operator|*
argument_list|,
name|unw_regnum_t
argument_list|)
name|LIBUNWIND_AVAIL
decl_stmt|;
specifier|extern
name|int
name|unw_get_proc_info
argument_list|(
name|unw_cursor_t
operator|*
argument_list|,
name|unw_proc_info_t
operator|*
argument_list|)
name|LIBUNWIND_AVAIL
decl_stmt|;
specifier|extern
name|int
name|unw_is_fpreg
argument_list|(
name|unw_cursor_t
operator|*
argument_list|,
name|unw_regnum_t
argument_list|)
name|LIBUNWIND_AVAIL
decl_stmt|;
specifier|extern
name|int
name|unw_is_signal_frame
argument_list|(
name|unw_cursor_t
operator|*
argument_list|)
name|LIBUNWIND_AVAIL
decl_stmt|;
specifier|extern
name|int
name|unw_get_proc_name
argument_list|(
name|unw_cursor_t
operator|*
argument_list|,
name|char
operator|*
argument_list|,
name|size_t
argument_list|,
name|unw_word_t
operator|*
argument_list|)
name|LIBUNWIND_AVAIL
decl_stmt|;
comment|//extern int       unw_get_save_loc(unw_cursor_t*, int, unw_save_loc_t*);
specifier|extern
name|unw_addr_space_t
name|unw_local_addr_space
decl_stmt|;
ifdef|#
directive|ifdef
name|UNW_REMOTE
comment|/*  * Mac OS X "remote" API for unwinding other processes on same machine  *  */
specifier|extern
name|unw_addr_space_t
name|unw_create_addr_space_for_task
parameter_list|(
name|task_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|unw_destroy_addr_space
parameter_list|(
name|unw_addr_space_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|unw_init_remote_thread
parameter_list|(
name|unw_cursor_t
modifier|*
parameter_list|,
name|unw_addr_space_t
parameter_list|,
name|thread_t
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* UNW_REMOTE */
comment|/*  * traditional libuwind "remote" API  *   NOT IMPLEMENTED on Mac OS X  *  * extern int               unw_init_remote(unw_cursor_t*, unw_addr_space_t,  *                                          thread_t*);  * extern unw_accessors_t   unw_get_accessors(unw_addr_space_t);  * extern unw_addr_space_t  unw_create_addr_space(unw_accessors_t, int);  * extern void              unw_flush_cache(unw_addr_space_t, unw_word_t,  *                                          unw_word_t);  * extern int               unw_set_caching_policy(unw_addr_space_t,  *                                                 unw_caching_policy_t);  * extern void              _U_dyn_register(unw_dyn_info_t*);  * extern void              _U_dyn_cancel(unw_dyn_info_t*);  */
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// architecture independent register numbers
end_comment

begin_enum
enum|enum
block|{
name|UNW_REG_IP
init|=
operator|-
literal|1
block|,
comment|// instruction pointer
name|UNW_REG_SP
init|=
operator|-
literal|2
block|,
comment|// stack pointer
block|}
enum|;
end_enum

begin_comment
comment|// 32-bit x86 registers
end_comment

begin_enum
enum|enum
block|{
name|UNW_X86_EAX
init|=
literal|0
block|,
name|UNW_X86_ECX
init|=
literal|1
block|,
name|UNW_X86_EDX
init|=
literal|2
block|,
name|UNW_X86_EBX
init|=
literal|3
block|,
name|UNW_X86_EBP
init|=
literal|4
block|,
name|UNW_X86_ESP
init|=
literal|5
block|,
name|UNW_X86_ESI
init|=
literal|6
block|,
name|UNW_X86_EDI
init|=
literal|7
block|}
enum|;
end_enum

begin_comment
comment|// 64-bit x86_64 registers
end_comment

begin_enum
enum|enum
block|{
name|UNW_X86_64_RAX
init|=
literal|0
block|,
name|UNW_X86_64_RDX
init|=
literal|1
block|,
name|UNW_X86_64_RCX
init|=
literal|2
block|,
name|UNW_X86_64_RBX
init|=
literal|3
block|,
name|UNW_X86_64_RSI
init|=
literal|4
block|,
name|UNW_X86_64_RDI
init|=
literal|5
block|,
name|UNW_X86_64_RBP
init|=
literal|6
block|,
name|UNW_X86_64_RSP
init|=
literal|7
block|,
name|UNW_X86_64_R8
init|=
literal|8
block|,
name|UNW_X86_64_R9
init|=
literal|9
block|,
name|UNW_X86_64_R10
init|=
literal|10
block|,
name|UNW_X86_64_R11
init|=
literal|11
block|,
name|UNW_X86_64_R12
init|=
literal|12
block|,
name|UNW_X86_64_R13
init|=
literal|13
block|,
name|UNW_X86_64_R14
init|=
literal|14
block|,
name|UNW_X86_64_R15
init|=
literal|15
block|}
enum|;
end_enum

begin_comment
comment|// 32-bit ppc register numbers
end_comment

begin_enum
enum|enum
block|{
name|UNW_PPC_R0
init|=
literal|0
block|,
name|UNW_PPC_R1
init|=
literal|1
block|,
name|UNW_PPC_R2
init|=
literal|2
block|,
name|UNW_PPC_R3
init|=
literal|3
block|,
name|UNW_PPC_R4
init|=
literal|4
block|,
name|UNW_PPC_R5
init|=
literal|5
block|,
name|UNW_PPC_R6
init|=
literal|6
block|,
name|UNW_PPC_R7
init|=
literal|7
block|,
name|UNW_PPC_R8
init|=
literal|8
block|,
name|UNW_PPC_R9
init|=
literal|9
block|,
name|UNW_PPC_R10
init|=
literal|10
block|,
name|UNW_PPC_R11
init|=
literal|11
block|,
name|UNW_PPC_R12
init|=
literal|12
block|,
name|UNW_PPC_R13
init|=
literal|13
block|,
name|UNW_PPC_R14
init|=
literal|14
block|,
name|UNW_PPC_R15
init|=
literal|15
block|,
name|UNW_PPC_R16
init|=
literal|16
block|,
name|UNW_PPC_R17
init|=
literal|17
block|,
name|UNW_PPC_R18
init|=
literal|18
block|,
name|UNW_PPC_R19
init|=
literal|19
block|,
name|UNW_PPC_R20
init|=
literal|20
block|,
name|UNW_PPC_R21
init|=
literal|21
block|,
name|UNW_PPC_R22
init|=
literal|22
block|,
name|UNW_PPC_R23
init|=
literal|23
block|,
name|UNW_PPC_R24
init|=
literal|24
block|,
name|UNW_PPC_R25
init|=
literal|25
block|,
name|UNW_PPC_R26
init|=
literal|26
block|,
name|UNW_PPC_R27
init|=
literal|27
block|,
name|UNW_PPC_R28
init|=
literal|28
block|,
name|UNW_PPC_R29
init|=
literal|29
block|,
name|UNW_PPC_R30
init|=
literal|30
block|,
name|UNW_PPC_R31
init|=
literal|31
block|,
name|UNW_PPC_F0
init|=
literal|32
block|,
name|UNW_PPC_F1
init|=
literal|33
block|,
name|UNW_PPC_F2
init|=
literal|34
block|,
name|UNW_PPC_F3
init|=
literal|35
block|,
name|UNW_PPC_F4
init|=
literal|36
block|,
name|UNW_PPC_F5
init|=
literal|37
block|,
name|UNW_PPC_F6
init|=
literal|38
block|,
name|UNW_PPC_F7
init|=
literal|39
block|,
name|UNW_PPC_F8
init|=
literal|40
block|,
name|UNW_PPC_F9
init|=
literal|41
block|,
name|UNW_PPC_F10
init|=
literal|42
block|,
name|UNW_PPC_F11
init|=
literal|43
block|,
name|UNW_PPC_F12
init|=
literal|44
block|,
name|UNW_PPC_F13
init|=
literal|45
block|,
name|UNW_PPC_F14
init|=
literal|46
block|,
name|UNW_PPC_F15
init|=
literal|47
block|,
name|UNW_PPC_F16
init|=
literal|48
block|,
name|UNW_PPC_F17
init|=
literal|49
block|,
name|UNW_PPC_F18
init|=
literal|50
block|,
name|UNW_PPC_F19
init|=
literal|51
block|,
name|UNW_PPC_F20
init|=
literal|52
block|,
name|UNW_PPC_F21
init|=
literal|53
block|,
name|UNW_PPC_F22
init|=
literal|54
block|,
name|UNW_PPC_F23
init|=
literal|55
block|,
name|UNW_PPC_F24
init|=
literal|56
block|,
name|UNW_PPC_F25
init|=
literal|57
block|,
name|UNW_PPC_F26
init|=
literal|58
block|,
name|UNW_PPC_F27
init|=
literal|59
block|,
name|UNW_PPC_F28
init|=
literal|60
block|,
name|UNW_PPC_F29
init|=
literal|61
block|,
name|UNW_PPC_F30
init|=
literal|62
block|,
name|UNW_PPC_F31
init|=
literal|63
block|,
name|UNW_PPC_MQ
init|=
literal|64
block|,
name|UNW_PPC_LR
init|=
literal|65
block|,
name|UNW_PPC_CTR
init|=
literal|66
block|,
name|UNW_PPC_AP
init|=
literal|67
block|,
name|UNW_PPC_CR0
init|=
literal|68
block|,
name|UNW_PPC_CR1
init|=
literal|69
block|,
name|UNW_PPC_CR2
init|=
literal|70
block|,
name|UNW_PPC_CR3
init|=
literal|71
block|,
name|UNW_PPC_CR4
init|=
literal|72
block|,
name|UNW_PPC_CR5
init|=
literal|73
block|,
name|UNW_PPC_CR6
init|=
literal|74
block|,
name|UNW_PPC_CR7
init|=
literal|75
block|,
name|UNW_PPC_XER
init|=
literal|76
block|,
name|UNW_PPC_V0
init|=
literal|77
block|,
name|UNW_PPC_V1
init|=
literal|78
block|,
name|UNW_PPC_V2
init|=
literal|79
block|,
name|UNW_PPC_V3
init|=
literal|80
block|,
name|UNW_PPC_V4
init|=
literal|81
block|,
name|UNW_PPC_V5
init|=
literal|82
block|,
name|UNW_PPC_V6
init|=
literal|83
block|,
name|UNW_PPC_V7
init|=
literal|84
block|,
name|UNW_PPC_V8
init|=
literal|85
block|,
name|UNW_PPC_V9
init|=
literal|86
block|,
name|UNW_PPC_V10
init|=
literal|87
block|,
name|UNW_PPC_V11
init|=
literal|88
block|,
name|UNW_PPC_V12
init|=
literal|89
block|,
name|UNW_PPC_V13
init|=
literal|90
block|,
name|UNW_PPC_V14
init|=
literal|91
block|,
name|UNW_PPC_V15
init|=
literal|92
block|,
name|UNW_PPC_V16
init|=
literal|93
block|,
name|UNW_PPC_V17
init|=
literal|94
block|,
name|UNW_PPC_V18
init|=
literal|95
block|,
name|UNW_PPC_V19
init|=
literal|96
block|,
name|UNW_PPC_V20
init|=
literal|97
block|,
name|UNW_PPC_V21
init|=
literal|98
block|,
name|UNW_PPC_V22
init|=
literal|99
block|,
name|UNW_PPC_V23
init|=
literal|100
block|,
name|UNW_PPC_V24
init|=
literal|101
block|,
name|UNW_PPC_V25
init|=
literal|102
block|,
name|UNW_PPC_V26
init|=
literal|103
block|,
name|UNW_PPC_V27
init|=
literal|104
block|,
name|UNW_PPC_V28
init|=
literal|105
block|,
name|UNW_PPC_V29
init|=
literal|106
block|,
name|UNW_PPC_V30
init|=
literal|107
block|,
name|UNW_PPC_V31
init|=
literal|108
block|,
name|UNW_PPC_VRSAVE
init|=
literal|109
block|,
name|UNW_PPC_VSCR
init|=
literal|110
block|,
name|UNW_PPC_SPE_ACC
init|=
literal|111
block|,
name|UNW_PPC_SPEFSCR
init|=
literal|112
block|}
enum|;
end_enum

begin_comment
comment|// 64-bit RISC-V registers
end_comment

begin_enum
enum|enum
block|{
name|UNW_RISCV_X0
init|=
literal|0
block|,
name|UNW_RISCV_X1
init|=
literal|1
block|,
name|UNW_RISCV_RA
init|=
literal|1
block|,
name|UNW_RISCV_X2
init|=
literal|2
block|,
name|UNW_RISCV_SP
init|=
literal|2
block|,
name|UNW_RISCV_X3
init|=
literal|3
block|,
name|UNW_RISCV_X4
init|=
literal|4
block|,
name|UNW_RISCV_X5
init|=
literal|5
block|,
name|UNW_RISCV_X6
init|=
literal|6
block|,
name|UNW_RISCV_X7
init|=
literal|7
block|,
name|UNW_RISCV_X8
init|=
literal|8
block|,
name|UNW_RISCV_X9
init|=
literal|9
block|,
name|UNW_RISCV_X10
init|=
literal|10
block|,
name|UNW_RISCV_X11
init|=
literal|11
block|,
name|UNW_RISCV_X12
init|=
literal|12
block|,
name|UNW_RISCV_X13
init|=
literal|13
block|,
name|UNW_RISCV_X14
init|=
literal|14
block|,
name|UNW_RISCV_X15
init|=
literal|15
block|,
name|UNW_RISCV_X16
init|=
literal|16
block|,
name|UNW_RISCV_X17
init|=
literal|17
block|,
name|UNW_RISCV_X18
init|=
literal|18
block|,
name|UNW_RISCV_X19
init|=
literal|19
block|,
name|UNW_RISCV_X20
init|=
literal|20
block|,
name|UNW_RISCV_X21
init|=
literal|21
block|,
name|UNW_RISCV_X22
init|=
literal|22
block|,
name|UNW_RISCV_X23
init|=
literal|23
block|,
name|UNW_RISCV_X24
init|=
literal|24
block|,
name|UNW_RISCV_X25
init|=
literal|25
block|,
name|UNW_RISCV_X26
init|=
literal|26
block|,
name|UNW_RISCV_X27
init|=
literal|27
block|,
name|UNW_RISCV_X28
init|=
literal|28
block|,
name|UNW_RISCV_X29
init|=
literal|29
block|,
name|UNW_RISCV_X30
init|=
literal|30
block|,
name|UNW_RISCV_X31
init|=
literal|31
block|,
comment|// reserved block
name|UNW_RISCV_D0
init|=
literal|64
block|,
name|UNW_RISCV_D1
init|=
literal|65
block|,
name|UNW_RISCV_D2
init|=
literal|66
block|,
name|UNW_RISCV_D3
init|=
literal|67
block|,
name|UNW_RISCV_D4
init|=
literal|68
block|,
name|UNW_RISCV_D5
init|=
literal|69
block|,
name|UNW_RISCV_D6
init|=
literal|70
block|,
name|UNW_RISCV_D7
init|=
literal|71
block|,
name|UNW_RISCV_D8
init|=
literal|72
block|,
name|UNW_RISCV_D9
init|=
literal|73
block|,
name|UNW_RISCV_D10
init|=
literal|74
block|,
name|UNW_RISCV_D11
init|=
literal|75
block|,
name|UNW_RISCV_D12
init|=
literal|76
block|,
name|UNW_RISCV_D13
init|=
literal|77
block|,
name|UNW_RISCV_D14
init|=
literal|78
block|,
name|UNW_RISCV_D15
init|=
literal|79
block|,
name|UNW_RISCV_D16
init|=
literal|80
block|,
name|UNW_RISCV_D17
init|=
literal|81
block|,
name|UNW_RISCV_D18
init|=
literal|82
block|,
name|UNW_RISCV_D19
init|=
literal|83
block|,
name|UNW_RISCV_D20
init|=
literal|84
block|,
name|UNW_RISCV_D21
init|=
literal|85
block|,
name|UNW_RISCV_D22
init|=
literal|86
block|,
name|UNW_RISCV_D23
init|=
literal|87
block|,
name|UNW_RISCV_D24
init|=
literal|88
block|,
name|UNW_RISCV_D25
init|=
literal|89
block|,
name|UNW_RISCV_D26
init|=
literal|90
block|,
name|UNW_RISCV_D27
init|=
literal|91
block|,
name|UNW_RISCV_D28
init|=
literal|92
block|,
name|UNW_RISCV_D29
init|=
literal|93
block|,
name|UNW_RISCV_D30
init|=
literal|94
block|,
name|UNW_RISCV_D31
init|=
literal|95
block|, }
enum|;
end_enum

begin_comment
comment|// 64-bit ARM64 registers
end_comment

begin_enum
enum|enum
block|{
name|UNW_ARM64_X0
init|=
literal|0
block|,
name|UNW_ARM64_X1
init|=
literal|1
block|,
name|UNW_ARM64_X2
init|=
literal|2
block|,
name|UNW_ARM64_X3
init|=
literal|3
block|,
name|UNW_ARM64_X4
init|=
literal|4
block|,
name|UNW_ARM64_X5
init|=
literal|5
block|,
name|UNW_ARM64_X6
init|=
literal|6
block|,
name|UNW_ARM64_X7
init|=
literal|7
block|,
name|UNW_ARM64_X8
init|=
literal|8
block|,
name|UNW_ARM64_X9
init|=
literal|9
block|,
name|UNW_ARM64_X10
init|=
literal|10
block|,
name|UNW_ARM64_X11
init|=
literal|11
block|,
name|UNW_ARM64_X12
init|=
literal|12
block|,
name|UNW_ARM64_X13
init|=
literal|13
block|,
name|UNW_ARM64_X14
init|=
literal|14
block|,
name|UNW_ARM64_X15
init|=
literal|15
block|,
name|UNW_ARM64_X16
init|=
literal|16
block|,
name|UNW_ARM64_X17
init|=
literal|17
block|,
name|UNW_ARM64_X18
init|=
literal|18
block|,
name|UNW_ARM64_X19
init|=
literal|19
block|,
name|UNW_ARM64_X20
init|=
literal|20
block|,
name|UNW_ARM64_X21
init|=
literal|21
block|,
name|UNW_ARM64_X22
init|=
literal|22
block|,
name|UNW_ARM64_X23
init|=
literal|23
block|,
name|UNW_ARM64_X24
init|=
literal|24
block|,
name|UNW_ARM64_X25
init|=
literal|25
block|,
name|UNW_ARM64_X26
init|=
literal|26
block|,
name|UNW_ARM64_X27
init|=
literal|27
block|,
name|UNW_ARM64_X28
init|=
literal|28
block|,
name|UNW_ARM64_X29
init|=
literal|29
block|,
name|UNW_ARM64_FP
init|=
literal|29
block|,
name|UNW_ARM64_X30
init|=
literal|30
block|,
name|UNW_ARM64_LR
init|=
literal|30
block|,
name|UNW_ARM64_X31
init|=
literal|31
block|,
name|UNW_ARM64_SP
init|=
literal|31
block|,
comment|// reserved block
name|UNW_ARM64_D0
init|=
literal|64
block|,
name|UNW_ARM64_D1
init|=
literal|65
block|,
name|UNW_ARM64_D2
init|=
literal|66
block|,
name|UNW_ARM64_D3
init|=
literal|67
block|,
name|UNW_ARM64_D4
init|=
literal|68
block|,
name|UNW_ARM64_D5
init|=
literal|69
block|,
name|UNW_ARM64_D6
init|=
literal|70
block|,
name|UNW_ARM64_D7
init|=
literal|71
block|,
name|UNW_ARM64_D8
init|=
literal|72
block|,
name|UNW_ARM64_D9
init|=
literal|73
block|,
name|UNW_ARM64_D10
init|=
literal|74
block|,
name|UNW_ARM64_D11
init|=
literal|75
block|,
name|UNW_ARM64_D12
init|=
literal|76
block|,
name|UNW_ARM64_D13
init|=
literal|77
block|,
name|UNW_ARM64_D14
init|=
literal|78
block|,
name|UNW_ARM64_D15
init|=
literal|79
block|,
name|UNW_ARM64_D16
init|=
literal|80
block|,
name|UNW_ARM64_D17
init|=
literal|81
block|,
name|UNW_ARM64_D18
init|=
literal|82
block|,
name|UNW_ARM64_D19
init|=
literal|83
block|,
name|UNW_ARM64_D20
init|=
literal|84
block|,
name|UNW_ARM64_D21
init|=
literal|85
block|,
name|UNW_ARM64_D22
init|=
literal|86
block|,
name|UNW_ARM64_D23
init|=
literal|87
block|,
name|UNW_ARM64_D24
init|=
literal|88
block|,
name|UNW_ARM64_D25
init|=
literal|89
block|,
name|UNW_ARM64_D26
init|=
literal|90
block|,
name|UNW_ARM64_D27
init|=
literal|91
block|,
name|UNW_ARM64_D28
init|=
literal|92
block|,
name|UNW_ARM64_D29
init|=
literal|93
block|,
name|UNW_ARM64_D30
init|=
literal|94
block|,
name|UNW_ARM64_D31
init|=
literal|95
block|, }
enum|;
end_enum

begin_comment
comment|// 32-bit ARM registers. Numbers match DWARF for ARM spec #3.1 Table 1.
end_comment

begin_comment
comment|// Naming scheme uses recommendations given in Note 4 for VFP-v2 and VFP-v3.
end_comment

begin_comment
comment|// In this scheme, even though the 64-bit floating point registers D0-D31
end_comment

begin_comment
comment|// overlap physically with the 32-bit floating pointer registers S0-S31,
end_comment

begin_comment
comment|// they are given a non-overlapping range of register numbers.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Commented out ranges are not preserved during unwinding.
end_comment

begin_enum
enum|enum
block|{
name|UNW_ARM_R0
init|=
literal|0
block|,
name|UNW_ARM_R1
init|=
literal|1
block|,
name|UNW_ARM_R2
init|=
literal|2
block|,
name|UNW_ARM_R3
init|=
literal|3
block|,
name|UNW_ARM_R4
init|=
literal|4
block|,
name|UNW_ARM_R5
init|=
literal|5
block|,
name|UNW_ARM_R6
init|=
literal|6
block|,
name|UNW_ARM_R7
init|=
literal|7
block|,
name|UNW_ARM_R8
init|=
literal|8
block|,
name|UNW_ARM_R9
init|=
literal|9
block|,
name|UNW_ARM_R10
init|=
literal|10
block|,
name|UNW_ARM_R11
init|=
literal|11
block|,
name|UNW_ARM_R12
init|=
literal|12
block|,
name|UNW_ARM_SP
init|=
literal|13
block|,
comment|// Logical alias for UNW_REG_SP
name|UNW_ARM_R13
init|=
literal|13
block|,
name|UNW_ARM_LR
init|=
literal|14
block|,
name|UNW_ARM_R14
init|=
literal|14
block|,
name|UNW_ARM_IP
init|=
literal|15
block|,
comment|// Logical alias for UNW_REG_IP
name|UNW_ARM_R15
init|=
literal|15
block|,
comment|// 16-63 -- OBSOLETE. Used in VFP1 to represent both S0-S31 and D0-D31.
name|UNW_ARM_S0
init|=
literal|64
block|,
name|UNW_ARM_S1
init|=
literal|65
block|,
name|UNW_ARM_S2
init|=
literal|66
block|,
name|UNW_ARM_S3
init|=
literal|67
block|,
name|UNW_ARM_S4
init|=
literal|68
block|,
name|UNW_ARM_S5
init|=
literal|69
block|,
name|UNW_ARM_S6
init|=
literal|70
block|,
name|UNW_ARM_S7
init|=
literal|71
block|,
name|UNW_ARM_S8
init|=
literal|72
block|,
name|UNW_ARM_S9
init|=
literal|73
block|,
name|UNW_ARM_S10
init|=
literal|74
block|,
name|UNW_ARM_S11
init|=
literal|75
block|,
name|UNW_ARM_S12
init|=
literal|76
block|,
name|UNW_ARM_S13
init|=
literal|77
block|,
name|UNW_ARM_S14
init|=
literal|78
block|,
name|UNW_ARM_S15
init|=
literal|79
block|,
name|UNW_ARM_S16
init|=
literal|80
block|,
name|UNW_ARM_S17
init|=
literal|81
block|,
name|UNW_ARM_S18
init|=
literal|82
block|,
name|UNW_ARM_S19
init|=
literal|83
block|,
name|UNW_ARM_S20
init|=
literal|84
block|,
name|UNW_ARM_S21
init|=
literal|85
block|,
name|UNW_ARM_S22
init|=
literal|86
block|,
name|UNW_ARM_S23
init|=
literal|87
block|,
name|UNW_ARM_S24
init|=
literal|88
block|,
name|UNW_ARM_S25
init|=
literal|89
block|,
name|UNW_ARM_S26
init|=
literal|90
block|,
name|UNW_ARM_S27
init|=
literal|91
block|,
name|UNW_ARM_S28
init|=
literal|92
block|,
name|UNW_ARM_S29
init|=
literal|93
block|,
name|UNW_ARM_S30
init|=
literal|94
block|,
name|UNW_ARM_S31
init|=
literal|95
block|,
comment|//  96-103 -- OBSOLETE. F0-F7. Used by the FPA system. Superseded by VFP.
comment|// 104-111 -- wCGR0-wCGR7, ACC0-ACC7 (Intel wireless MMX)
name|UNW_ARM_WR0
init|=
literal|112
block|,
name|UNW_ARM_WR1
init|=
literal|113
block|,
name|UNW_ARM_WR2
init|=
literal|114
block|,
name|UNW_ARM_WR3
init|=
literal|115
block|,
name|UNW_ARM_WR4
init|=
literal|116
block|,
name|UNW_ARM_WR5
init|=
literal|117
block|,
name|UNW_ARM_WR6
init|=
literal|118
block|,
name|UNW_ARM_WR7
init|=
literal|119
block|,
name|UNW_ARM_WR8
init|=
literal|120
block|,
name|UNW_ARM_WR9
init|=
literal|121
block|,
name|UNW_ARM_WR10
init|=
literal|122
block|,
name|UNW_ARM_WR11
init|=
literal|123
block|,
name|UNW_ARM_WR12
init|=
literal|124
block|,
name|UNW_ARM_WR13
init|=
literal|125
block|,
name|UNW_ARM_WR14
init|=
literal|126
block|,
name|UNW_ARM_WR15
init|=
literal|127
block|,
comment|// 128-133 -- SPSR, SPSR_{FIQ|IRQ|ABT|UND|SVC}
comment|// 134-143 -- Reserved
comment|// 144-150 -- R8_USR-R14_USR
comment|// 151-157 -- R8_FIQ-R14_FIQ
comment|// 158-159 -- R13_IRQ-R14_IRQ
comment|// 160-161 -- R13_ABT-R14_ABT
comment|// 162-163 -- R13_UND-R14_UND
comment|// 164-165 -- R13_SVC-R14_SVC
comment|// 166-191 -- Reserved
name|UNW_ARM_WC0
init|=
literal|192
block|,
name|UNW_ARM_WC1
init|=
literal|193
block|,
name|UNW_ARM_WC2
init|=
literal|194
block|,
name|UNW_ARM_WC3
init|=
literal|195
block|,
comment|// 196-199 -- wC4-wC7 (Intel wireless MMX control)
comment|// 200-255 -- Reserved
name|UNW_ARM_D0
init|=
literal|256
block|,
name|UNW_ARM_D1
init|=
literal|257
block|,
name|UNW_ARM_D2
init|=
literal|258
block|,
name|UNW_ARM_D3
init|=
literal|259
block|,
name|UNW_ARM_D4
init|=
literal|260
block|,
name|UNW_ARM_D5
init|=
literal|261
block|,
name|UNW_ARM_D6
init|=
literal|262
block|,
name|UNW_ARM_D7
init|=
literal|263
block|,
name|UNW_ARM_D8
init|=
literal|264
block|,
name|UNW_ARM_D9
init|=
literal|265
block|,
name|UNW_ARM_D10
init|=
literal|266
block|,
name|UNW_ARM_D11
init|=
literal|267
block|,
name|UNW_ARM_D12
init|=
literal|268
block|,
name|UNW_ARM_D13
init|=
literal|269
block|,
name|UNW_ARM_D14
init|=
literal|270
block|,
name|UNW_ARM_D15
init|=
literal|271
block|,
name|UNW_ARM_D16
init|=
literal|272
block|,
name|UNW_ARM_D17
init|=
literal|273
block|,
name|UNW_ARM_D18
init|=
literal|274
block|,
name|UNW_ARM_D19
init|=
literal|275
block|,
name|UNW_ARM_D20
init|=
literal|276
block|,
name|UNW_ARM_D21
init|=
literal|277
block|,
name|UNW_ARM_D22
init|=
literal|278
block|,
name|UNW_ARM_D23
init|=
literal|279
block|,
name|UNW_ARM_D24
init|=
literal|280
block|,
name|UNW_ARM_D25
init|=
literal|281
block|,
name|UNW_ARM_D26
init|=
literal|282
block|,
name|UNW_ARM_D27
init|=
literal|283
block|,
name|UNW_ARM_D28
init|=
literal|284
block|,
name|UNW_ARM_D29
init|=
literal|285
block|,
name|UNW_ARM_D30
init|=
literal|286
block|,
name|UNW_ARM_D31
init|=
literal|287
block|,
comment|// 288-319 -- Reserved for VFP/Neon
comment|// 320-8191 -- Reserved
comment|// 8192-16383 -- Unspecified vendor co-processor register.
block|}
enum|;
end_enum

begin_comment
comment|// OpenRISC1000 register numbers
end_comment

begin_enum
enum|enum
block|{
name|UNW_OR1K_R0
init|=
literal|0
block|,
name|UNW_OR1K_R1
init|=
literal|1
block|,
name|UNW_OR1K_R2
init|=
literal|2
block|,
name|UNW_OR1K_R3
init|=
literal|3
block|,
name|UNW_OR1K_R4
init|=
literal|4
block|,
name|UNW_OR1K_R5
init|=
literal|5
block|,
name|UNW_OR1K_R6
init|=
literal|6
block|,
name|UNW_OR1K_R7
init|=
literal|7
block|,
name|UNW_OR1K_R8
init|=
literal|8
block|,
name|UNW_OR1K_R9
init|=
literal|9
block|,
name|UNW_OR1K_R10
init|=
literal|10
block|,
name|UNW_OR1K_R11
init|=
literal|11
block|,
name|UNW_OR1K_R12
init|=
literal|12
block|,
name|UNW_OR1K_R13
init|=
literal|13
block|,
name|UNW_OR1K_R14
init|=
literal|14
block|,
name|UNW_OR1K_R15
init|=
literal|15
block|,
name|UNW_OR1K_R16
init|=
literal|16
block|,
name|UNW_OR1K_R17
init|=
literal|17
block|,
name|UNW_OR1K_R18
init|=
literal|18
block|,
name|UNW_OR1K_R19
init|=
literal|19
block|,
name|UNW_OR1K_R20
init|=
literal|20
block|,
name|UNW_OR1K_R21
init|=
literal|21
block|,
name|UNW_OR1K_R22
init|=
literal|22
block|,
name|UNW_OR1K_R23
init|=
literal|23
block|,
name|UNW_OR1K_R24
init|=
literal|24
block|,
name|UNW_OR1K_R25
init|=
literal|25
block|,
name|UNW_OR1K_R26
init|=
literal|26
block|,
name|UNW_OR1K_R27
init|=
literal|27
block|,
name|UNW_OR1K_R28
init|=
literal|28
block|,
name|UNW_OR1K_R29
init|=
literal|29
block|,
name|UNW_OR1K_R30
init|=
literal|30
block|,
name|UNW_OR1K_R31
init|=
literal|31
block|, }
enum|;
end_enum

begin_endif
endif|#
directive|endif
end_endif

end_unit

