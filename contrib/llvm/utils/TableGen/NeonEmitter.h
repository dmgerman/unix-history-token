begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- NeonEmitter.h - Generate arm_neon.h for use with clang ---*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This tablegen backend is responsible for emitting arm_neon.h, which includes
end_comment

begin_comment
comment|// a declaration and definition of each function specified by the ARM NEON
end_comment

begin_comment
comment|// compiler interface.  See ARM document DUI0348B.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|NEON_EMITTER_H
end_ifndef

begin_define
define|#
directive|define
name|NEON_EMITTER_H
end_define

begin_include
include|#
directive|include
file|"Record.h"
end_include

begin_include
include|#
directive|include
file|"TableGenBackend.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringMap.h"
end_include

begin_enum
enum|enum
name|OpKind
block|{
name|OpNone
block|,
name|OpAdd
block|,
name|OpAddl
block|,
name|OpAddw
block|,
name|OpSub
block|,
name|OpSubl
block|,
name|OpSubw
block|,
name|OpMul
block|,
name|OpMull
block|,
name|OpMla
block|,
name|OpMlal
block|,
name|OpMls
block|,
name|OpMlsl
block|,
name|OpMulN
block|,
name|OpMullN
block|,
name|OpMlaN
block|,
name|OpMlsN
block|,
name|OpMlalN
block|,
name|OpMlslN
block|,
name|OpMulLane
block|,
name|OpMullLane
block|,
name|OpMlaLane
block|,
name|OpMlsLane
block|,
name|OpMlalLane
block|,
name|OpMlslLane
block|,
name|OpQDMullLane
block|,
name|OpQDMlalLane
block|,
name|OpQDMlslLane
block|,
name|OpQDMulhLane
block|,
name|OpQRDMulhLane
block|,
name|OpEq
block|,
name|OpGe
block|,
name|OpLe
block|,
name|OpGt
block|,
name|OpLt
block|,
name|OpNeg
block|,
name|OpNot
block|,
name|OpAnd
block|,
name|OpOr
block|,
name|OpXor
block|,
name|OpAndNot
block|,
name|OpOrNot
block|,
name|OpCast
block|,
name|OpConcat
block|,
name|OpDup
block|,
name|OpDupLane
block|,
name|OpHi
block|,
name|OpLo
block|,
name|OpSelect
block|,
name|OpRev16
block|,
name|OpRev32
block|,
name|OpRev64
block|,
name|OpReinterpret
block|,
name|OpAbdl
block|,
name|OpAba
block|,
name|OpAbal
block|}
enum|;
end_enum

begin_enum
enum|enum
name|ClassKind
block|{
name|ClassNone
block|,
name|ClassI
block|,
comment|// generic integer instruction, e.g., "i8" suffix
name|ClassS
block|,
comment|// signed/unsigned/poly, e.g., "s8", "u8" or "p8" suffix
name|ClassW
block|,
comment|// width-specific instruction, e.g., "8" suffix
name|ClassB
comment|// bitcast arguments with enum argument to specify type
block|}
enum|;
end_enum

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|NeonEmitter
range|:
name|public
name|TableGenBackend
block|{
name|RecordKeeper
operator|&
name|Records
block|;
name|StringMap
operator|<
name|OpKind
operator|>
name|OpMap
block|;
name|DenseMap
operator|<
name|Record
operator|*
block|,
name|ClassKind
operator|>
name|ClassMap
block|;
name|public
operator|:
name|NeonEmitter
argument_list|(
name|RecordKeeper
operator|&
name|R
argument_list|)
operator|:
name|Records
argument_list|(
argument|R
argument_list|)
block|{
name|OpMap
index|[
literal|"OP_NONE"
index|]
operator|=
name|OpNone
block|;
name|OpMap
index|[
literal|"OP_ADD"
index|]
operator|=
name|OpAdd
block|;
name|OpMap
index|[
literal|"OP_ADDL"
index|]
operator|=
name|OpAddl
block|;
name|OpMap
index|[
literal|"OP_ADDW"
index|]
operator|=
name|OpAddw
block|;
name|OpMap
index|[
literal|"OP_SUB"
index|]
operator|=
name|OpSub
block|;
name|OpMap
index|[
literal|"OP_SUBL"
index|]
operator|=
name|OpSubl
block|;
name|OpMap
index|[
literal|"OP_SUBW"
index|]
operator|=
name|OpSubw
block|;
name|OpMap
index|[
literal|"OP_MUL"
index|]
operator|=
name|OpMul
block|;
name|OpMap
index|[
literal|"OP_MULL"
index|]
operator|=
name|OpMull
block|;
name|OpMap
index|[
literal|"OP_MLA"
index|]
operator|=
name|OpMla
block|;
name|OpMap
index|[
literal|"OP_MLAL"
index|]
operator|=
name|OpMlal
block|;
name|OpMap
index|[
literal|"OP_MLS"
index|]
operator|=
name|OpMls
block|;
name|OpMap
index|[
literal|"OP_MLSL"
index|]
operator|=
name|OpMlsl
block|;
name|OpMap
index|[
literal|"OP_MUL_N"
index|]
operator|=
name|OpMulN
block|;
name|OpMap
index|[
literal|"OP_MULL_N"
index|]
operator|=
name|OpMullN
block|;
name|OpMap
index|[
literal|"OP_MLA_N"
index|]
operator|=
name|OpMlaN
block|;
name|OpMap
index|[
literal|"OP_MLS_N"
index|]
operator|=
name|OpMlsN
block|;
name|OpMap
index|[
literal|"OP_MLAL_N"
index|]
operator|=
name|OpMlalN
block|;
name|OpMap
index|[
literal|"OP_MLSL_N"
index|]
operator|=
name|OpMlslN
block|;
name|OpMap
index|[
literal|"OP_MUL_LN"
index|]
operator|=
name|OpMulLane
block|;
name|OpMap
index|[
literal|"OP_MULL_LN"
index|]
operator|=
name|OpMullLane
block|;
name|OpMap
index|[
literal|"OP_MLA_LN"
index|]
operator|=
name|OpMlaLane
block|;
name|OpMap
index|[
literal|"OP_MLS_LN"
index|]
operator|=
name|OpMlsLane
block|;
name|OpMap
index|[
literal|"OP_MLAL_LN"
index|]
operator|=
name|OpMlalLane
block|;
name|OpMap
index|[
literal|"OP_MLSL_LN"
index|]
operator|=
name|OpMlslLane
block|;
name|OpMap
index|[
literal|"OP_QDMULL_LN"
index|]
operator|=
name|OpQDMullLane
block|;
name|OpMap
index|[
literal|"OP_QDMLAL_LN"
index|]
operator|=
name|OpQDMlalLane
block|;
name|OpMap
index|[
literal|"OP_QDMLSL_LN"
index|]
operator|=
name|OpQDMlslLane
block|;
name|OpMap
index|[
literal|"OP_QDMULH_LN"
index|]
operator|=
name|OpQDMulhLane
block|;
name|OpMap
index|[
literal|"OP_QRDMULH_LN"
index|]
operator|=
name|OpQRDMulhLane
block|;
name|OpMap
index|[
literal|"OP_EQ"
index|]
operator|=
name|OpEq
block|;
name|OpMap
index|[
literal|"OP_GE"
index|]
operator|=
name|OpGe
block|;
name|OpMap
index|[
literal|"OP_LE"
index|]
operator|=
name|OpLe
block|;
name|OpMap
index|[
literal|"OP_GT"
index|]
operator|=
name|OpGt
block|;
name|OpMap
index|[
literal|"OP_LT"
index|]
operator|=
name|OpLt
block|;
name|OpMap
index|[
literal|"OP_NEG"
index|]
operator|=
name|OpNeg
block|;
name|OpMap
index|[
literal|"OP_NOT"
index|]
operator|=
name|OpNot
block|;
name|OpMap
index|[
literal|"OP_AND"
index|]
operator|=
name|OpAnd
block|;
name|OpMap
index|[
literal|"OP_OR"
index|]
operator|=
name|OpOr
block|;
name|OpMap
index|[
literal|"OP_XOR"
index|]
operator|=
name|OpXor
block|;
name|OpMap
index|[
literal|"OP_ANDN"
index|]
operator|=
name|OpAndNot
block|;
name|OpMap
index|[
literal|"OP_ORN"
index|]
operator|=
name|OpOrNot
block|;
name|OpMap
index|[
literal|"OP_CAST"
index|]
operator|=
name|OpCast
block|;
name|OpMap
index|[
literal|"OP_CONC"
index|]
operator|=
name|OpConcat
block|;
name|OpMap
index|[
literal|"OP_HI"
index|]
operator|=
name|OpHi
block|;
name|OpMap
index|[
literal|"OP_LO"
index|]
operator|=
name|OpLo
block|;
name|OpMap
index|[
literal|"OP_DUP"
index|]
operator|=
name|OpDup
block|;
name|OpMap
index|[
literal|"OP_DUP_LN"
index|]
operator|=
name|OpDupLane
block|;
name|OpMap
index|[
literal|"OP_SEL"
index|]
operator|=
name|OpSelect
block|;
name|OpMap
index|[
literal|"OP_REV16"
index|]
operator|=
name|OpRev16
block|;
name|OpMap
index|[
literal|"OP_REV32"
index|]
operator|=
name|OpRev32
block|;
name|OpMap
index|[
literal|"OP_REV64"
index|]
operator|=
name|OpRev64
block|;
name|OpMap
index|[
literal|"OP_REINT"
index|]
operator|=
name|OpReinterpret
block|;
name|OpMap
index|[
literal|"OP_ABDL"
index|]
operator|=
name|OpAbdl
block|;
name|OpMap
index|[
literal|"OP_ABA"
index|]
operator|=
name|OpAba
block|;
name|OpMap
index|[
literal|"OP_ABAL"
index|]
operator|=
name|OpAbal
block|;
name|Record
operator|*
name|SI
operator|=
name|R
operator|.
name|getClass
argument_list|(
literal|"SInst"
argument_list|)
block|;
name|Record
operator|*
name|II
operator|=
name|R
operator|.
name|getClass
argument_list|(
literal|"IInst"
argument_list|)
block|;
name|Record
operator|*
name|WI
operator|=
name|R
operator|.
name|getClass
argument_list|(
literal|"WInst"
argument_list|)
block|;
name|ClassMap
index|[
name|SI
index|]
operator|=
name|ClassS
block|;
name|ClassMap
index|[
name|II
index|]
operator|=
name|ClassI
block|;
name|ClassMap
index|[
name|WI
index|]
operator|=
name|ClassW
block|;     }
comment|// run - Emit arm_neon.h.inc
name|void
name|run
argument_list|(
name|raw_ostream
operator|&
name|o
argument_list|)
block|;
comment|// runHeader - Emit all the __builtin prototypes used in arm_neon.h
name|void
name|runHeader
argument_list|(
name|raw_ostream
operator|&
name|o
argument_list|)
block|;
comment|// runTests - Emit tests for all the Neon intrinsics.
name|void
name|runTests
argument_list|(
name|raw_ostream
operator|&
name|o
argument_list|)
block|;
name|private
operator|:
name|void
name|emitIntrinsic
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|,
name|Record
operator|*
name|R
argument_list|)
block|;   }
decl_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// End llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

