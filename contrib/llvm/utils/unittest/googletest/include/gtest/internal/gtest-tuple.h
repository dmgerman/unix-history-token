begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// This file was GENERATED by a script.  DO NOT EDIT BY HAND!!!
end_comment

begin_comment
comment|// Copyright 2009 Google Inc.
end_comment

begin_comment
comment|// All Rights Reserved.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Redistribution and use in source and binary forms, with or without
end_comment

begin_comment
comment|// modification, are permitted provided that the following conditions are
end_comment

begin_comment
comment|// met:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//     * Redistributions of source code must retain the above copyright
end_comment

begin_comment
comment|// notice, this list of conditions and the following disclaimer.
end_comment

begin_comment
comment|//     * Redistributions in binary form must reproduce the above
end_comment

begin_comment
comment|// copyright notice, this list of conditions and the following disclaimer
end_comment

begin_comment
comment|// in the documentation and/or other materials provided with the
end_comment

begin_comment
comment|// distribution.
end_comment

begin_comment
comment|//     * Neither the name of Google Inc. nor the names of its
end_comment

begin_comment
comment|// contributors may be used to endorse or promote products derived from
end_comment

begin_comment
comment|// this software without specific prior written permission.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
end_comment

begin_comment
comment|// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
end_comment

begin_comment
comment|// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
end_comment

begin_comment
comment|// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
end_comment

begin_comment
comment|// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
end_comment

begin_comment
comment|// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
end_comment

begin_comment
comment|// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
end_comment

begin_comment
comment|// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
end_comment

begin_comment
comment|// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Author: wan@google.com (Zhanyong Wan)
end_comment

begin_comment
comment|// Implements a subset of TR1 tuple needed by Google Test and Google Mock.
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|GTEST_INCLUDE_GTEST_INTERNAL_GTEST_TUPLE_H_
end_ifndef

begin_define
define|#
directive|define
name|GTEST_INCLUDE_GTEST_INTERNAL_GTEST_TUPLE_H_
end_define

begin_include
include|#
directive|include
file|<utility>
end_include

begin_comment
comment|// For ::std::pair.
end_comment

begin_comment
comment|// The compiler used in Symbian has a bug that prevents us from declaring the
end_comment

begin_comment
comment|// tuple template as a friend (it complains that tuple is redefined).  This
end_comment

begin_comment
comment|// hack bypasses the bug by declaring the members that should otherwise be
end_comment

begin_comment
comment|// private as public.
end_comment

begin_comment
comment|// Sun Studio versions< 12 also have the above bug.
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__SYMBIAN32__
argument_list|)
operator|||
operator|(
name|defined
argument_list|(
name|__SUNPRO_CC
argument_list|)
operator|&&
name|__SUNPRO_CC
operator|<
literal|0x590
operator|)
end_if

begin_define
define|#
directive|define
name|GTEST_DECLARE_TUPLE_AS_FRIEND_
value|public:
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|GTEST_DECLARE_TUPLE_AS_FRIEND_
define|\
value|template<GTEST_10_TYPENAMES_(U)> friend class tuple; \    private:
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// GTEST_n_TUPLE_(T) is the type of an n-tuple.
end_comment

begin_define
define|#
directive|define
name|GTEST_0_TUPLE_
parameter_list|(
name|T
parameter_list|)
value|tuple<>
end_define

begin_define
define|#
directive|define
name|GTEST_1_TUPLE_
parameter_list|(
name|T
parameter_list|)
value|tuple<T##0, void, void, void, void, void, void, \     void, void, void>
end_define

begin_define
define|#
directive|define
name|GTEST_2_TUPLE_
parameter_list|(
name|T
parameter_list|)
value|tuple<T##0, T##1, void, void, void, void, void, \     void, void, void>
end_define

begin_define
define|#
directive|define
name|GTEST_3_TUPLE_
parameter_list|(
name|T
parameter_list|)
value|tuple<T##0, T##1, T##2, void, void, void, void, \     void, void, void>
end_define

begin_define
define|#
directive|define
name|GTEST_4_TUPLE_
parameter_list|(
name|T
parameter_list|)
value|tuple<T##0, T##1, T##2, T##3, void, void, void, \     void, void, void>
end_define

begin_define
define|#
directive|define
name|GTEST_5_TUPLE_
parameter_list|(
name|T
parameter_list|)
value|tuple<T##0, T##1, T##2, T##3, T##4, void, void, \     void, void, void>
end_define

begin_define
define|#
directive|define
name|GTEST_6_TUPLE_
parameter_list|(
name|T
parameter_list|)
value|tuple<T##0, T##1, T##2, T##3, T##4, T##5, void, \     void, void, void>
end_define

begin_define
define|#
directive|define
name|GTEST_7_TUPLE_
parameter_list|(
name|T
parameter_list|)
value|tuple<T##0, T##1, T##2, T##3, T##4, T##5, T##6, \     void, void, void>
end_define

begin_define
define|#
directive|define
name|GTEST_8_TUPLE_
parameter_list|(
name|T
parameter_list|)
value|tuple<T##0, T##1, T##2, T##3, T##4, T##5, T##6, \     T##7, void, void>
end_define

begin_define
define|#
directive|define
name|GTEST_9_TUPLE_
parameter_list|(
name|T
parameter_list|)
value|tuple<T##0, T##1, T##2, T##3, T##4, T##5, T##6, \     T##7, T##8, void>
end_define

begin_define
define|#
directive|define
name|GTEST_10_TUPLE_
parameter_list|(
name|T
parameter_list|)
value|tuple<T##0, T##1, T##2, T##3, T##4, T##5, T##6, \     T##7, T##8, T##9>
end_define

begin_comment
comment|// GTEST_n_TYPENAMES_(T) declares a list of n typenames.
end_comment

begin_define
define|#
directive|define
name|GTEST_0_TYPENAMES_
parameter_list|(
name|T
parameter_list|)
end_define

begin_define
define|#
directive|define
name|GTEST_1_TYPENAMES_
parameter_list|(
name|T
parameter_list|)
value|typename T##0
end_define

begin_define
define|#
directive|define
name|GTEST_2_TYPENAMES_
parameter_list|(
name|T
parameter_list|)
value|typename T##0, typename T##1
end_define

begin_define
define|#
directive|define
name|GTEST_3_TYPENAMES_
parameter_list|(
name|T
parameter_list|)
value|typename T##0, typename T##1, typename T##2
end_define

begin_define
define|#
directive|define
name|GTEST_4_TYPENAMES_
parameter_list|(
name|T
parameter_list|)
value|typename T##0, typename T##1, typename T##2, \     typename T##3
end_define

begin_define
define|#
directive|define
name|GTEST_5_TYPENAMES_
parameter_list|(
name|T
parameter_list|)
value|typename T##0, typename T##1, typename T##2, \     typename T##3, typename T##4
end_define

begin_define
define|#
directive|define
name|GTEST_6_TYPENAMES_
parameter_list|(
name|T
parameter_list|)
value|typename T##0, typename T##1, typename T##2, \     typename T##3, typename T##4, typename T##5
end_define

begin_define
define|#
directive|define
name|GTEST_7_TYPENAMES_
parameter_list|(
name|T
parameter_list|)
value|typename T##0, typename T##1, typename T##2, \     typename T##3, typename T##4, typename T##5, typename T##6
end_define

begin_define
define|#
directive|define
name|GTEST_8_TYPENAMES_
parameter_list|(
name|T
parameter_list|)
value|typename T##0, typename T##1, typename T##2, \     typename T##3, typename T##4, typename T##5, typename T##6, typename T##7
end_define

begin_define
define|#
directive|define
name|GTEST_9_TYPENAMES_
parameter_list|(
name|T
parameter_list|)
value|typename T##0, typename T##1, typename T##2, \     typename T##3, typename T##4, typename T##5, typename T##6, \     typename T##7, typename T##8
end_define

begin_define
define|#
directive|define
name|GTEST_10_TYPENAMES_
parameter_list|(
name|T
parameter_list|)
value|typename T##0, typename T##1, typename T##2, \     typename T##3, typename T##4, typename T##5, typename T##6, \     typename T##7, typename T##8, typename T##9
end_define

begin_comment
comment|// In theory, defining stuff in the ::std namespace is undefined
end_comment

begin_comment
comment|// behavior.  We can do this as we are playing the role of a standard
end_comment

begin_comment
comment|// library vendor.
end_comment

begin_decl_stmt
name|namespace
name|std
block|{
name|namespace
name|tr1
block|{
name|template
operator|<
name|typename
name|T0
operator|=
name|void
operator|,
name|typename
name|T1
operator|=
name|void
operator|,
name|typename
name|T2
operator|=
name|void
operator|,
name|typename
name|T3
operator|=
name|void
operator|,
name|typename
name|T4
operator|=
name|void
operator|,
name|typename
name|T5
operator|=
name|void
operator|,
name|typename
name|T6
operator|=
name|void
operator|,
name|typename
name|T7
operator|=
name|void
operator|,
name|typename
name|T8
operator|=
name|void
operator|,
name|typename
name|T9
operator|=
name|void
operator|>
name|class
name|tuple
expr_stmt|;
comment|// Anything in namespace gtest_internal is Google Test's INTERNAL
comment|// IMPLEMENTATION DETAIL and MUST NOT BE USED DIRECTLY in user code.
name|namespace
name|gtest_internal
block|{
comment|// ByRef<T>::type is T if T is a reference; otherwise it's const T&.
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|ByRef
block|{
typedef|typedef
specifier|const
name|T
modifier|&
name|type
typedef|;
block|}
empty_stmt|;
comment|// NOLINT
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|ByRef
operator|<
name|T
operator|&
operator|>
block|{
typedef|typedef
name|T
modifier|&
name|type
typedef|;
block|}
empty_stmt|;
comment|// NOLINT
comment|// A handy wrapper for ByRef.
define|#
directive|define
name|GTEST_BY_REF_
parameter_list|(
name|T
parameter_list|)
value|typename ::std::tr1::gtest_internal::ByRef<T>::type
comment|// AddRef<T>::type is T if T is a reference; otherwise it's T&.  This
comment|// is the same as tr1::add_reference<T>::type.
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|AddRef
block|{
typedef|typedef
name|T
modifier|&
name|type
typedef|;
block|}
empty_stmt|;
comment|// NOLINT
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|AddRef
operator|<
name|T
operator|&
operator|>
block|{
typedef|typedef
name|T
modifier|&
name|type
typedef|;
block|}
empty_stmt|;
comment|// NOLINT
comment|// A handy wrapper for AddRef.
define|#
directive|define
name|GTEST_ADD_REF_
parameter_list|(
name|T
parameter_list|)
value|typename ::std::tr1::gtest_internal::AddRef<T>::type
comment|// A helper for implementing get<k>().
name|template
operator|<
name|int
name|k
operator|>
name|class
name|Get
expr_stmt|;
comment|// A helper for implementing tuple_element<k, T>.  kIndexValid is true
comment|// iff k< the number of fields in tuple type T.
name|template
operator|<
name|bool
name|kIndexValid
operator|,
name|int
name|kIndex
operator|,
name|class
name|Tuple
operator|>
expr|struct
name|TupleElement
expr_stmt|;
name|template
operator|<
name|GTEST_10_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
expr|struct
name|TupleElement
operator|<
name|true
operator|,
literal|0
operator|,
name|GTEST_10_TUPLE_
argument_list|(
name|T
argument_list|)
operator|>
block|{
typedef|typedef
name|T0
name|type
typedef|;
block|}
empty_stmt|;
name|template
operator|<
name|GTEST_10_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
expr|struct
name|TupleElement
operator|<
name|true
operator|,
literal|1
operator|,
name|GTEST_10_TUPLE_
argument_list|(
name|T
argument_list|)
operator|>
block|{
typedef|typedef
name|T1
name|type
typedef|;
block|}
empty_stmt|;
name|template
operator|<
name|GTEST_10_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
expr|struct
name|TupleElement
operator|<
name|true
operator|,
literal|2
operator|,
name|GTEST_10_TUPLE_
argument_list|(
name|T
argument_list|)
operator|>
block|{
typedef|typedef
name|T2
name|type
typedef|;
block|}
empty_stmt|;
name|template
operator|<
name|GTEST_10_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
expr|struct
name|TupleElement
operator|<
name|true
operator|,
literal|3
operator|,
name|GTEST_10_TUPLE_
argument_list|(
name|T
argument_list|)
operator|>
block|{
typedef|typedef
name|T3
name|type
typedef|;
block|}
empty_stmt|;
name|template
operator|<
name|GTEST_10_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
expr|struct
name|TupleElement
operator|<
name|true
operator|,
literal|4
operator|,
name|GTEST_10_TUPLE_
argument_list|(
name|T
argument_list|)
operator|>
block|{
typedef|typedef
name|T4
name|type
typedef|;
block|}
empty_stmt|;
name|template
operator|<
name|GTEST_10_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
expr|struct
name|TupleElement
operator|<
name|true
operator|,
literal|5
operator|,
name|GTEST_10_TUPLE_
argument_list|(
name|T
argument_list|)
operator|>
block|{
typedef|typedef
name|T5
name|type
typedef|;
block|}
empty_stmt|;
name|template
operator|<
name|GTEST_10_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
expr|struct
name|TupleElement
operator|<
name|true
operator|,
literal|6
operator|,
name|GTEST_10_TUPLE_
argument_list|(
name|T
argument_list|)
operator|>
block|{
typedef|typedef
name|T6
name|type
typedef|;
block|}
empty_stmt|;
name|template
operator|<
name|GTEST_10_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
expr|struct
name|TupleElement
operator|<
name|true
operator|,
literal|7
operator|,
name|GTEST_10_TUPLE_
argument_list|(
name|T
argument_list|)
operator|>
block|{
typedef|typedef
name|T7
name|type
typedef|;
block|}
empty_stmt|;
name|template
operator|<
name|GTEST_10_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
expr|struct
name|TupleElement
operator|<
name|true
operator|,
literal|8
operator|,
name|GTEST_10_TUPLE_
argument_list|(
name|T
argument_list|)
operator|>
block|{
typedef|typedef
name|T8
name|type
typedef|;
block|}
empty_stmt|;
name|template
operator|<
name|GTEST_10_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
expr|struct
name|TupleElement
operator|<
name|true
operator|,
literal|9
operator|,
name|GTEST_10_TUPLE_
argument_list|(
name|T
argument_list|)
operator|>
block|{
typedef|typedef
name|T9
name|type
typedef|;
block|}
empty_stmt|;
block|}
comment|// namespace gtest_internal
name|template
operator|<
operator|>
name|class
name|tuple
operator|<
operator|>
block|{
name|public
operator|:
name|tuple
argument_list|()
block|{}
name|tuple
argument_list|(
argument|const tuple&
comment|/* t */
argument_list|)
block|{}
name|tuple
operator|&
name|operator
operator|=
operator|(
specifier|const
name|tuple
operator|&
comment|/* t */
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
expr|}
block|;
name|template
operator|<
name|GTEST_1_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
name|class
name|GTEST_1_TUPLE_
argument_list|(
argument|T
argument_list|)
block|{
name|public
operator|:
name|template
operator|<
name|int
name|k
operator|>
name|friend
name|class
name|gtest_internal
operator|::
name|Get
block|;
name|tuple
argument_list|()
operator|:
name|f0_
argument_list|()
block|{}
name|explicit
name|tuple
argument_list|(
name|GTEST_BY_REF_
argument_list|(
argument|T0
argument_list|)
name|f0
argument_list|)
operator|:
name|f0_
argument_list|(
argument|f0
argument_list|)
block|{}
name|tuple
argument_list|(
specifier|const
name|tuple
operator|&
name|t
argument_list|)
operator|:
name|f0_
argument_list|(
argument|t.f0_
argument_list|)
block|{}
name|template
operator|<
name|GTEST_1_TYPENAMES_
argument_list|(
name|U
argument_list|)
operator|>
name|tuple
argument_list|(
specifier|const
name|GTEST_1_TUPLE_
argument_list|(
name|U
argument_list|)
operator|&
name|t
argument_list|)
operator|:
name|f0_
argument_list|(
argument|t.f0_
argument_list|)
block|{}
name|tuple
operator|&
name|operator
operator|=
operator|(
specifier|const
name|tuple
operator|&
name|t
operator|)
block|{
return|return
name|CopyFrom
argument_list|(
name|t
argument_list|)
return|;
block|}
name|template
operator|<
name|GTEST_1_TYPENAMES_
argument_list|(
name|U
argument_list|)
operator|>
name|tuple
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GTEST_1_TUPLE_
argument_list|(
name|U
argument_list|)
operator|&
name|t
operator|)
block|{
return|return
name|CopyFrom
argument_list|(
name|t
argument_list|)
return|;
block|}
name|GTEST_DECLARE_TUPLE_AS_FRIEND_
name|template
operator|<
name|GTEST_1_TYPENAMES_
argument_list|(
name|U
argument_list|)
operator|>
name|tuple
operator|&
name|CopyFrom
argument_list|(
argument|const GTEST_1_TUPLE_(U)& t
argument_list|)
block|{
name|f0_
operator|=
name|t
operator|.
name|f0_
block|;
return|return
operator|*
name|this
return|;
block|}
name|T0
name|f0_
block|; }
block|;
name|template
operator|<
name|GTEST_2_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
name|class
name|GTEST_2_TUPLE_
argument_list|(
argument|T
argument_list|)
block|{
name|public
operator|:
name|template
operator|<
name|int
name|k
operator|>
name|friend
name|class
name|gtest_internal
operator|::
name|Get
block|;
name|tuple
argument_list|()
operator|:
name|f0_
argument_list|()
block|,
name|f1_
argument_list|()
block|{}
name|explicit
name|tuple
argument_list|(
name|GTEST_BY_REF_
argument_list|(
argument|T0
argument_list|)
name|f0
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T1
argument_list|)
name|f1
argument_list|)
operator|:
name|f0_
argument_list|(
name|f0
argument_list|)
block|,
name|f1_
argument_list|(
argument|f1
argument_list|)
block|{}
name|tuple
argument_list|(
specifier|const
name|tuple
operator|&
name|t
argument_list|)
operator|:
name|f0_
argument_list|(
name|t
operator|.
name|f0_
argument_list|)
block|,
name|f1_
argument_list|(
argument|t.f1_
argument_list|)
block|{}
name|template
operator|<
name|GTEST_2_TYPENAMES_
argument_list|(
name|U
argument_list|)
operator|>
name|tuple
argument_list|(
specifier|const
name|GTEST_2_TUPLE_
argument_list|(
name|U
argument_list|)
operator|&
name|t
argument_list|)
operator|:
name|f0_
argument_list|(
name|t
operator|.
name|f0_
argument_list|)
block|,
name|f1_
argument_list|(
argument|t.f1_
argument_list|)
block|{}
name|template
operator|<
name|typename
name|U0
block|,
name|typename
name|U1
operator|>
name|tuple
argument_list|(
specifier|const
operator|::
name|std
operator|::
name|pair
operator|<
name|U0
argument_list|,
name|U1
operator|>
operator|&
name|p
argument_list|)
operator|:
name|f0_
argument_list|(
name|p
operator|.
name|first
argument_list|)
block|,
name|f1_
argument_list|(
argument|p.second
argument_list|)
block|{}
name|tuple
operator|&
name|operator
operator|=
operator|(
specifier|const
name|tuple
operator|&
name|t
operator|)
block|{
return|return
name|CopyFrom
argument_list|(
name|t
argument_list|)
return|;
block|}
name|template
operator|<
name|GTEST_2_TYPENAMES_
argument_list|(
name|U
argument_list|)
operator|>
name|tuple
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GTEST_2_TUPLE_
argument_list|(
name|U
argument_list|)
operator|&
name|t
operator|)
block|{
return|return
name|CopyFrom
argument_list|(
name|t
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|U0
block|,
name|typename
name|U1
operator|>
name|tuple
operator|&
name|operator
operator|=
operator|(
specifier|const
operator|::
name|std
operator|::
name|pair
operator|<
name|U0
operator|,
name|U1
operator|>
operator|&
name|p
operator|)
block|{
name|f0_
operator|=
name|p
operator|.
name|first
block|;
name|f1_
operator|=
name|p
operator|.
name|second
block|;
return|return
operator|*
name|this
return|;
block|}
name|GTEST_DECLARE_TUPLE_AS_FRIEND_
name|template
operator|<
name|GTEST_2_TYPENAMES_
argument_list|(
name|U
argument_list|)
operator|>
name|tuple
operator|&
name|CopyFrom
argument_list|(
argument|const GTEST_2_TUPLE_(U)& t
argument_list|)
block|{
name|f0_
operator|=
name|t
operator|.
name|f0_
block|;
name|f1_
operator|=
name|t
operator|.
name|f1_
block|;
return|return
operator|*
name|this
return|;
block|}
name|T0
name|f0_
block|;
name|T1
name|f1_
block|; }
block|;
name|template
operator|<
name|GTEST_3_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
name|class
name|GTEST_3_TUPLE_
argument_list|(
argument|T
argument_list|)
block|{
name|public
operator|:
name|template
operator|<
name|int
name|k
operator|>
name|friend
name|class
name|gtest_internal
operator|::
name|Get
block|;
name|tuple
argument_list|()
operator|:
name|f0_
argument_list|()
block|,
name|f1_
argument_list|()
block|,
name|f2_
argument_list|()
block|{}
name|explicit
name|tuple
argument_list|(
name|GTEST_BY_REF_
argument_list|(
argument|T0
argument_list|)
name|f0
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T1
argument_list|)
name|f1
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T2
argument_list|)
name|f2
argument_list|)
operator|:
name|f0_
argument_list|(
name|f0
argument_list|)
block|,
name|f1_
argument_list|(
name|f1
argument_list|)
block|,
name|f2_
argument_list|(
argument|f2
argument_list|)
block|{}
name|tuple
argument_list|(
specifier|const
name|tuple
operator|&
name|t
argument_list|)
operator|:
name|f0_
argument_list|(
name|t
operator|.
name|f0_
argument_list|)
block|,
name|f1_
argument_list|(
name|t
operator|.
name|f1_
argument_list|)
block|,
name|f2_
argument_list|(
argument|t.f2_
argument_list|)
block|{}
name|template
operator|<
name|GTEST_3_TYPENAMES_
argument_list|(
name|U
argument_list|)
operator|>
name|tuple
argument_list|(
specifier|const
name|GTEST_3_TUPLE_
argument_list|(
name|U
argument_list|)
operator|&
name|t
argument_list|)
operator|:
name|f0_
argument_list|(
name|t
operator|.
name|f0_
argument_list|)
block|,
name|f1_
argument_list|(
name|t
operator|.
name|f1_
argument_list|)
block|,
name|f2_
argument_list|(
argument|t.f2_
argument_list|)
block|{}
name|tuple
operator|&
name|operator
operator|=
operator|(
specifier|const
name|tuple
operator|&
name|t
operator|)
block|{
return|return
name|CopyFrom
argument_list|(
name|t
argument_list|)
return|;
block|}
name|template
operator|<
name|GTEST_3_TYPENAMES_
argument_list|(
name|U
argument_list|)
operator|>
name|tuple
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GTEST_3_TUPLE_
argument_list|(
name|U
argument_list|)
operator|&
name|t
operator|)
block|{
return|return
name|CopyFrom
argument_list|(
name|t
argument_list|)
return|;
block|}
name|GTEST_DECLARE_TUPLE_AS_FRIEND_
name|template
operator|<
name|GTEST_3_TYPENAMES_
argument_list|(
name|U
argument_list|)
operator|>
name|tuple
operator|&
name|CopyFrom
argument_list|(
argument|const GTEST_3_TUPLE_(U)& t
argument_list|)
block|{
name|f0_
operator|=
name|t
operator|.
name|f0_
block|;
name|f1_
operator|=
name|t
operator|.
name|f1_
block|;
name|f2_
operator|=
name|t
operator|.
name|f2_
block|;
return|return
operator|*
name|this
return|;
block|}
name|T0
name|f0_
block|;
name|T1
name|f1_
block|;
name|T2
name|f2_
block|; }
block|;
name|template
operator|<
name|GTEST_4_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
name|class
name|GTEST_4_TUPLE_
argument_list|(
argument|T
argument_list|)
block|{
name|public
operator|:
name|template
operator|<
name|int
name|k
operator|>
name|friend
name|class
name|gtest_internal
operator|::
name|Get
block|;
name|tuple
argument_list|()
operator|:
name|f0_
argument_list|()
block|,
name|f1_
argument_list|()
block|,
name|f2_
argument_list|()
block|,
name|f3_
argument_list|()
block|{}
name|explicit
name|tuple
argument_list|(
name|GTEST_BY_REF_
argument_list|(
argument|T0
argument_list|)
name|f0
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T1
argument_list|)
name|f1
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T2
argument_list|)
name|f2
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T3
argument_list|)
name|f3
argument_list|)
operator|:
name|f0_
argument_list|(
name|f0
argument_list|)
block|,
name|f1_
argument_list|(
name|f1
argument_list|)
block|,
name|f2_
argument_list|(
name|f2
argument_list|)
block|,
name|f3_
argument_list|(
argument|f3
argument_list|)
block|{}
name|tuple
argument_list|(
specifier|const
name|tuple
operator|&
name|t
argument_list|)
operator|:
name|f0_
argument_list|(
name|t
operator|.
name|f0_
argument_list|)
block|,
name|f1_
argument_list|(
name|t
operator|.
name|f1_
argument_list|)
block|,
name|f2_
argument_list|(
name|t
operator|.
name|f2_
argument_list|)
block|,
name|f3_
argument_list|(
argument|t.f3_
argument_list|)
block|{}
name|template
operator|<
name|GTEST_4_TYPENAMES_
argument_list|(
name|U
argument_list|)
operator|>
name|tuple
argument_list|(
specifier|const
name|GTEST_4_TUPLE_
argument_list|(
name|U
argument_list|)
operator|&
name|t
argument_list|)
operator|:
name|f0_
argument_list|(
name|t
operator|.
name|f0_
argument_list|)
block|,
name|f1_
argument_list|(
name|t
operator|.
name|f1_
argument_list|)
block|,
name|f2_
argument_list|(
name|t
operator|.
name|f2_
argument_list|)
block|,
name|f3_
argument_list|(
argument|t.f3_
argument_list|)
block|{}
name|tuple
operator|&
name|operator
operator|=
operator|(
specifier|const
name|tuple
operator|&
name|t
operator|)
block|{
return|return
name|CopyFrom
argument_list|(
name|t
argument_list|)
return|;
block|}
name|template
operator|<
name|GTEST_4_TYPENAMES_
argument_list|(
name|U
argument_list|)
operator|>
name|tuple
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GTEST_4_TUPLE_
argument_list|(
name|U
argument_list|)
operator|&
name|t
operator|)
block|{
return|return
name|CopyFrom
argument_list|(
name|t
argument_list|)
return|;
block|}
name|GTEST_DECLARE_TUPLE_AS_FRIEND_
name|template
operator|<
name|GTEST_4_TYPENAMES_
argument_list|(
name|U
argument_list|)
operator|>
name|tuple
operator|&
name|CopyFrom
argument_list|(
argument|const GTEST_4_TUPLE_(U)& t
argument_list|)
block|{
name|f0_
operator|=
name|t
operator|.
name|f0_
block|;
name|f1_
operator|=
name|t
operator|.
name|f1_
block|;
name|f2_
operator|=
name|t
operator|.
name|f2_
block|;
name|f3_
operator|=
name|t
operator|.
name|f3_
block|;
return|return
operator|*
name|this
return|;
block|}
name|T0
name|f0_
block|;
name|T1
name|f1_
block|;
name|T2
name|f2_
block|;
name|T3
name|f3_
block|; }
block|;
name|template
operator|<
name|GTEST_5_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
name|class
name|GTEST_5_TUPLE_
argument_list|(
argument|T
argument_list|)
block|{
name|public
operator|:
name|template
operator|<
name|int
name|k
operator|>
name|friend
name|class
name|gtest_internal
operator|::
name|Get
block|;
name|tuple
argument_list|()
operator|:
name|f0_
argument_list|()
block|,
name|f1_
argument_list|()
block|,
name|f2_
argument_list|()
block|,
name|f3_
argument_list|()
block|,
name|f4_
argument_list|()
block|{}
name|explicit
name|tuple
argument_list|(
name|GTEST_BY_REF_
argument_list|(
argument|T0
argument_list|)
name|f0
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T1
argument_list|)
name|f1
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T2
argument_list|)
name|f2
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T3
argument_list|)
name|f3
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T4
argument_list|)
name|f4
argument_list|)
operator|:
name|f0_
argument_list|(
name|f0
argument_list|)
block|,
name|f1_
argument_list|(
name|f1
argument_list|)
block|,
name|f2_
argument_list|(
name|f2
argument_list|)
block|,
name|f3_
argument_list|(
name|f3
argument_list|)
block|,
name|f4_
argument_list|(
argument|f4
argument_list|)
block|{}
name|tuple
argument_list|(
specifier|const
name|tuple
operator|&
name|t
argument_list|)
operator|:
name|f0_
argument_list|(
name|t
operator|.
name|f0_
argument_list|)
block|,
name|f1_
argument_list|(
name|t
operator|.
name|f1_
argument_list|)
block|,
name|f2_
argument_list|(
name|t
operator|.
name|f2_
argument_list|)
block|,
name|f3_
argument_list|(
name|t
operator|.
name|f3_
argument_list|)
block|,
name|f4_
argument_list|(
argument|t.f4_
argument_list|)
block|{}
name|template
operator|<
name|GTEST_5_TYPENAMES_
argument_list|(
name|U
argument_list|)
operator|>
name|tuple
argument_list|(
specifier|const
name|GTEST_5_TUPLE_
argument_list|(
name|U
argument_list|)
operator|&
name|t
argument_list|)
operator|:
name|f0_
argument_list|(
name|t
operator|.
name|f0_
argument_list|)
block|,
name|f1_
argument_list|(
name|t
operator|.
name|f1_
argument_list|)
block|,
name|f2_
argument_list|(
name|t
operator|.
name|f2_
argument_list|)
block|,
name|f3_
argument_list|(
name|t
operator|.
name|f3_
argument_list|)
block|,
name|f4_
argument_list|(
argument|t.f4_
argument_list|)
block|{}
name|tuple
operator|&
name|operator
operator|=
operator|(
specifier|const
name|tuple
operator|&
name|t
operator|)
block|{
return|return
name|CopyFrom
argument_list|(
name|t
argument_list|)
return|;
block|}
name|template
operator|<
name|GTEST_5_TYPENAMES_
argument_list|(
name|U
argument_list|)
operator|>
name|tuple
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GTEST_5_TUPLE_
argument_list|(
name|U
argument_list|)
operator|&
name|t
operator|)
block|{
return|return
name|CopyFrom
argument_list|(
name|t
argument_list|)
return|;
block|}
name|GTEST_DECLARE_TUPLE_AS_FRIEND_
name|template
operator|<
name|GTEST_5_TYPENAMES_
argument_list|(
name|U
argument_list|)
operator|>
name|tuple
operator|&
name|CopyFrom
argument_list|(
argument|const GTEST_5_TUPLE_(U)& t
argument_list|)
block|{
name|f0_
operator|=
name|t
operator|.
name|f0_
block|;
name|f1_
operator|=
name|t
operator|.
name|f1_
block|;
name|f2_
operator|=
name|t
operator|.
name|f2_
block|;
name|f3_
operator|=
name|t
operator|.
name|f3_
block|;
name|f4_
operator|=
name|t
operator|.
name|f4_
block|;
return|return
operator|*
name|this
return|;
block|}
name|T0
name|f0_
block|;
name|T1
name|f1_
block|;
name|T2
name|f2_
block|;
name|T3
name|f3_
block|;
name|T4
name|f4_
block|; }
block|;
name|template
operator|<
name|GTEST_6_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
name|class
name|GTEST_6_TUPLE_
argument_list|(
argument|T
argument_list|)
block|{
name|public
operator|:
name|template
operator|<
name|int
name|k
operator|>
name|friend
name|class
name|gtest_internal
operator|::
name|Get
block|;
name|tuple
argument_list|()
operator|:
name|f0_
argument_list|()
block|,
name|f1_
argument_list|()
block|,
name|f2_
argument_list|()
block|,
name|f3_
argument_list|()
block|,
name|f4_
argument_list|()
block|,
name|f5_
argument_list|()
block|{}
name|explicit
name|tuple
argument_list|(
name|GTEST_BY_REF_
argument_list|(
argument|T0
argument_list|)
name|f0
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T1
argument_list|)
name|f1
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T2
argument_list|)
name|f2
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T3
argument_list|)
name|f3
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T4
argument_list|)
name|f4
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T5
argument_list|)
name|f5
argument_list|)
operator|:
name|f0_
argument_list|(
name|f0
argument_list|)
block|,
name|f1_
argument_list|(
name|f1
argument_list|)
block|,
name|f2_
argument_list|(
name|f2
argument_list|)
block|,
name|f3_
argument_list|(
name|f3
argument_list|)
block|,
name|f4_
argument_list|(
name|f4
argument_list|)
block|,
name|f5_
argument_list|(
argument|f5
argument_list|)
block|{}
name|tuple
argument_list|(
specifier|const
name|tuple
operator|&
name|t
argument_list|)
operator|:
name|f0_
argument_list|(
name|t
operator|.
name|f0_
argument_list|)
block|,
name|f1_
argument_list|(
name|t
operator|.
name|f1_
argument_list|)
block|,
name|f2_
argument_list|(
name|t
operator|.
name|f2_
argument_list|)
block|,
name|f3_
argument_list|(
name|t
operator|.
name|f3_
argument_list|)
block|,
name|f4_
argument_list|(
name|t
operator|.
name|f4_
argument_list|)
block|,
name|f5_
argument_list|(
argument|t.f5_
argument_list|)
block|{}
name|template
operator|<
name|GTEST_6_TYPENAMES_
argument_list|(
name|U
argument_list|)
operator|>
name|tuple
argument_list|(
specifier|const
name|GTEST_6_TUPLE_
argument_list|(
name|U
argument_list|)
operator|&
name|t
argument_list|)
operator|:
name|f0_
argument_list|(
name|t
operator|.
name|f0_
argument_list|)
block|,
name|f1_
argument_list|(
name|t
operator|.
name|f1_
argument_list|)
block|,
name|f2_
argument_list|(
name|t
operator|.
name|f2_
argument_list|)
block|,
name|f3_
argument_list|(
name|t
operator|.
name|f3_
argument_list|)
block|,
name|f4_
argument_list|(
name|t
operator|.
name|f4_
argument_list|)
block|,
name|f5_
argument_list|(
argument|t.f5_
argument_list|)
block|{}
name|tuple
operator|&
name|operator
operator|=
operator|(
specifier|const
name|tuple
operator|&
name|t
operator|)
block|{
return|return
name|CopyFrom
argument_list|(
name|t
argument_list|)
return|;
block|}
name|template
operator|<
name|GTEST_6_TYPENAMES_
argument_list|(
name|U
argument_list|)
operator|>
name|tuple
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GTEST_6_TUPLE_
argument_list|(
name|U
argument_list|)
operator|&
name|t
operator|)
block|{
return|return
name|CopyFrom
argument_list|(
name|t
argument_list|)
return|;
block|}
name|GTEST_DECLARE_TUPLE_AS_FRIEND_
name|template
operator|<
name|GTEST_6_TYPENAMES_
argument_list|(
name|U
argument_list|)
operator|>
name|tuple
operator|&
name|CopyFrom
argument_list|(
argument|const GTEST_6_TUPLE_(U)& t
argument_list|)
block|{
name|f0_
operator|=
name|t
operator|.
name|f0_
block|;
name|f1_
operator|=
name|t
operator|.
name|f1_
block|;
name|f2_
operator|=
name|t
operator|.
name|f2_
block|;
name|f3_
operator|=
name|t
operator|.
name|f3_
block|;
name|f4_
operator|=
name|t
operator|.
name|f4_
block|;
name|f5_
operator|=
name|t
operator|.
name|f5_
block|;
return|return
operator|*
name|this
return|;
block|}
name|T0
name|f0_
block|;
name|T1
name|f1_
block|;
name|T2
name|f2_
block|;
name|T3
name|f3_
block|;
name|T4
name|f4_
block|;
name|T5
name|f5_
block|; }
block|;
name|template
operator|<
name|GTEST_7_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
name|class
name|GTEST_7_TUPLE_
argument_list|(
argument|T
argument_list|)
block|{
name|public
operator|:
name|template
operator|<
name|int
name|k
operator|>
name|friend
name|class
name|gtest_internal
operator|::
name|Get
block|;
name|tuple
argument_list|()
operator|:
name|f0_
argument_list|()
block|,
name|f1_
argument_list|()
block|,
name|f2_
argument_list|()
block|,
name|f3_
argument_list|()
block|,
name|f4_
argument_list|()
block|,
name|f5_
argument_list|()
block|,
name|f6_
argument_list|()
block|{}
name|explicit
name|tuple
argument_list|(
name|GTEST_BY_REF_
argument_list|(
argument|T0
argument_list|)
name|f0
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T1
argument_list|)
name|f1
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T2
argument_list|)
name|f2
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T3
argument_list|)
name|f3
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T4
argument_list|)
name|f4
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T5
argument_list|)
name|f5
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T6
argument_list|)
name|f6
argument_list|)
operator|:
name|f0_
argument_list|(
name|f0
argument_list|)
block|,
name|f1_
argument_list|(
name|f1
argument_list|)
block|,
name|f2_
argument_list|(
name|f2
argument_list|)
block|,
name|f3_
argument_list|(
name|f3
argument_list|)
block|,
name|f4_
argument_list|(
name|f4
argument_list|)
block|,
name|f5_
argument_list|(
name|f5
argument_list|)
block|,
name|f6_
argument_list|(
argument|f6
argument_list|)
block|{}
name|tuple
argument_list|(
specifier|const
name|tuple
operator|&
name|t
argument_list|)
operator|:
name|f0_
argument_list|(
name|t
operator|.
name|f0_
argument_list|)
block|,
name|f1_
argument_list|(
name|t
operator|.
name|f1_
argument_list|)
block|,
name|f2_
argument_list|(
name|t
operator|.
name|f2_
argument_list|)
block|,
name|f3_
argument_list|(
name|t
operator|.
name|f3_
argument_list|)
block|,
name|f4_
argument_list|(
name|t
operator|.
name|f4_
argument_list|)
block|,
name|f5_
argument_list|(
name|t
operator|.
name|f5_
argument_list|)
block|,
name|f6_
argument_list|(
argument|t.f6_
argument_list|)
block|{}
name|template
operator|<
name|GTEST_7_TYPENAMES_
argument_list|(
name|U
argument_list|)
operator|>
name|tuple
argument_list|(
specifier|const
name|GTEST_7_TUPLE_
argument_list|(
name|U
argument_list|)
operator|&
name|t
argument_list|)
operator|:
name|f0_
argument_list|(
name|t
operator|.
name|f0_
argument_list|)
block|,
name|f1_
argument_list|(
name|t
operator|.
name|f1_
argument_list|)
block|,
name|f2_
argument_list|(
name|t
operator|.
name|f2_
argument_list|)
block|,
name|f3_
argument_list|(
name|t
operator|.
name|f3_
argument_list|)
block|,
name|f4_
argument_list|(
name|t
operator|.
name|f4_
argument_list|)
block|,
name|f5_
argument_list|(
name|t
operator|.
name|f5_
argument_list|)
block|,
name|f6_
argument_list|(
argument|t.f6_
argument_list|)
block|{}
name|tuple
operator|&
name|operator
operator|=
operator|(
specifier|const
name|tuple
operator|&
name|t
operator|)
block|{
return|return
name|CopyFrom
argument_list|(
name|t
argument_list|)
return|;
block|}
name|template
operator|<
name|GTEST_7_TYPENAMES_
argument_list|(
name|U
argument_list|)
operator|>
name|tuple
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GTEST_7_TUPLE_
argument_list|(
name|U
argument_list|)
operator|&
name|t
operator|)
block|{
return|return
name|CopyFrom
argument_list|(
name|t
argument_list|)
return|;
block|}
name|GTEST_DECLARE_TUPLE_AS_FRIEND_
name|template
operator|<
name|GTEST_7_TYPENAMES_
argument_list|(
name|U
argument_list|)
operator|>
name|tuple
operator|&
name|CopyFrom
argument_list|(
argument|const GTEST_7_TUPLE_(U)& t
argument_list|)
block|{
name|f0_
operator|=
name|t
operator|.
name|f0_
block|;
name|f1_
operator|=
name|t
operator|.
name|f1_
block|;
name|f2_
operator|=
name|t
operator|.
name|f2_
block|;
name|f3_
operator|=
name|t
operator|.
name|f3_
block|;
name|f4_
operator|=
name|t
operator|.
name|f4_
block|;
name|f5_
operator|=
name|t
operator|.
name|f5_
block|;
name|f6_
operator|=
name|t
operator|.
name|f6_
block|;
return|return
operator|*
name|this
return|;
block|}
name|T0
name|f0_
block|;
name|T1
name|f1_
block|;
name|T2
name|f2_
block|;
name|T3
name|f3_
block|;
name|T4
name|f4_
block|;
name|T5
name|f5_
block|;
name|T6
name|f6_
block|; }
block|;
name|template
operator|<
name|GTEST_8_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
name|class
name|GTEST_8_TUPLE_
argument_list|(
argument|T
argument_list|)
block|{
name|public
operator|:
name|template
operator|<
name|int
name|k
operator|>
name|friend
name|class
name|gtest_internal
operator|::
name|Get
block|;
name|tuple
argument_list|()
operator|:
name|f0_
argument_list|()
block|,
name|f1_
argument_list|()
block|,
name|f2_
argument_list|()
block|,
name|f3_
argument_list|()
block|,
name|f4_
argument_list|()
block|,
name|f5_
argument_list|()
block|,
name|f6_
argument_list|()
block|,
name|f7_
argument_list|()
block|{}
name|explicit
name|tuple
argument_list|(
name|GTEST_BY_REF_
argument_list|(
argument|T0
argument_list|)
name|f0
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T1
argument_list|)
name|f1
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T2
argument_list|)
name|f2
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T3
argument_list|)
name|f3
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T4
argument_list|)
name|f4
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T5
argument_list|)
name|f5
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T6
argument_list|)
name|f6
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T7
argument_list|)
name|f7
argument_list|)
operator|:
name|f0_
argument_list|(
name|f0
argument_list|)
block|,
name|f1_
argument_list|(
name|f1
argument_list|)
block|,
name|f2_
argument_list|(
name|f2
argument_list|)
block|,
name|f3_
argument_list|(
name|f3
argument_list|)
block|,
name|f4_
argument_list|(
name|f4
argument_list|)
block|,
name|f5_
argument_list|(
name|f5
argument_list|)
block|,
name|f6_
argument_list|(
name|f6
argument_list|)
block|,
name|f7_
argument_list|(
argument|f7
argument_list|)
block|{}
name|tuple
argument_list|(
specifier|const
name|tuple
operator|&
name|t
argument_list|)
operator|:
name|f0_
argument_list|(
name|t
operator|.
name|f0_
argument_list|)
block|,
name|f1_
argument_list|(
name|t
operator|.
name|f1_
argument_list|)
block|,
name|f2_
argument_list|(
name|t
operator|.
name|f2_
argument_list|)
block|,
name|f3_
argument_list|(
name|t
operator|.
name|f3_
argument_list|)
block|,
name|f4_
argument_list|(
name|t
operator|.
name|f4_
argument_list|)
block|,
name|f5_
argument_list|(
name|t
operator|.
name|f5_
argument_list|)
block|,
name|f6_
argument_list|(
name|t
operator|.
name|f6_
argument_list|)
block|,
name|f7_
argument_list|(
argument|t.f7_
argument_list|)
block|{}
name|template
operator|<
name|GTEST_8_TYPENAMES_
argument_list|(
name|U
argument_list|)
operator|>
name|tuple
argument_list|(
specifier|const
name|GTEST_8_TUPLE_
argument_list|(
name|U
argument_list|)
operator|&
name|t
argument_list|)
operator|:
name|f0_
argument_list|(
name|t
operator|.
name|f0_
argument_list|)
block|,
name|f1_
argument_list|(
name|t
operator|.
name|f1_
argument_list|)
block|,
name|f2_
argument_list|(
name|t
operator|.
name|f2_
argument_list|)
block|,
name|f3_
argument_list|(
name|t
operator|.
name|f3_
argument_list|)
block|,
name|f4_
argument_list|(
name|t
operator|.
name|f4_
argument_list|)
block|,
name|f5_
argument_list|(
name|t
operator|.
name|f5_
argument_list|)
block|,
name|f6_
argument_list|(
name|t
operator|.
name|f6_
argument_list|)
block|,
name|f7_
argument_list|(
argument|t.f7_
argument_list|)
block|{}
name|tuple
operator|&
name|operator
operator|=
operator|(
specifier|const
name|tuple
operator|&
name|t
operator|)
block|{
return|return
name|CopyFrom
argument_list|(
name|t
argument_list|)
return|;
block|}
name|template
operator|<
name|GTEST_8_TYPENAMES_
argument_list|(
name|U
argument_list|)
operator|>
name|tuple
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GTEST_8_TUPLE_
argument_list|(
name|U
argument_list|)
operator|&
name|t
operator|)
block|{
return|return
name|CopyFrom
argument_list|(
name|t
argument_list|)
return|;
block|}
name|GTEST_DECLARE_TUPLE_AS_FRIEND_
name|template
operator|<
name|GTEST_8_TYPENAMES_
argument_list|(
name|U
argument_list|)
operator|>
name|tuple
operator|&
name|CopyFrom
argument_list|(
argument|const GTEST_8_TUPLE_(U)& t
argument_list|)
block|{
name|f0_
operator|=
name|t
operator|.
name|f0_
block|;
name|f1_
operator|=
name|t
operator|.
name|f1_
block|;
name|f2_
operator|=
name|t
operator|.
name|f2_
block|;
name|f3_
operator|=
name|t
operator|.
name|f3_
block|;
name|f4_
operator|=
name|t
operator|.
name|f4_
block|;
name|f5_
operator|=
name|t
operator|.
name|f5_
block|;
name|f6_
operator|=
name|t
operator|.
name|f6_
block|;
name|f7_
operator|=
name|t
operator|.
name|f7_
block|;
return|return
operator|*
name|this
return|;
block|}
name|T0
name|f0_
block|;
name|T1
name|f1_
block|;
name|T2
name|f2_
block|;
name|T3
name|f3_
block|;
name|T4
name|f4_
block|;
name|T5
name|f5_
block|;
name|T6
name|f6_
block|;
name|T7
name|f7_
block|; }
block|;
name|template
operator|<
name|GTEST_9_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
name|class
name|GTEST_9_TUPLE_
argument_list|(
argument|T
argument_list|)
block|{
name|public
operator|:
name|template
operator|<
name|int
name|k
operator|>
name|friend
name|class
name|gtest_internal
operator|::
name|Get
block|;
name|tuple
argument_list|()
operator|:
name|f0_
argument_list|()
block|,
name|f1_
argument_list|()
block|,
name|f2_
argument_list|()
block|,
name|f3_
argument_list|()
block|,
name|f4_
argument_list|()
block|,
name|f5_
argument_list|()
block|,
name|f6_
argument_list|()
block|,
name|f7_
argument_list|()
block|,
name|f8_
argument_list|()
block|{}
name|explicit
name|tuple
argument_list|(
name|GTEST_BY_REF_
argument_list|(
argument|T0
argument_list|)
name|f0
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T1
argument_list|)
name|f1
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T2
argument_list|)
name|f2
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T3
argument_list|)
name|f3
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T4
argument_list|)
name|f4
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T5
argument_list|)
name|f5
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T6
argument_list|)
name|f6
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T7
argument_list|)
name|f7
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T8
argument_list|)
name|f8
argument_list|)
operator|:
name|f0_
argument_list|(
name|f0
argument_list|)
block|,
name|f1_
argument_list|(
name|f1
argument_list|)
block|,
name|f2_
argument_list|(
name|f2
argument_list|)
block|,
name|f3_
argument_list|(
name|f3
argument_list|)
block|,
name|f4_
argument_list|(
name|f4
argument_list|)
block|,
name|f5_
argument_list|(
name|f5
argument_list|)
block|,
name|f6_
argument_list|(
name|f6
argument_list|)
block|,
name|f7_
argument_list|(
name|f7
argument_list|)
block|,
name|f8_
argument_list|(
argument|f8
argument_list|)
block|{}
name|tuple
argument_list|(
specifier|const
name|tuple
operator|&
name|t
argument_list|)
operator|:
name|f0_
argument_list|(
name|t
operator|.
name|f0_
argument_list|)
block|,
name|f1_
argument_list|(
name|t
operator|.
name|f1_
argument_list|)
block|,
name|f2_
argument_list|(
name|t
operator|.
name|f2_
argument_list|)
block|,
name|f3_
argument_list|(
name|t
operator|.
name|f3_
argument_list|)
block|,
name|f4_
argument_list|(
name|t
operator|.
name|f4_
argument_list|)
block|,
name|f5_
argument_list|(
name|t
operator|.
name|f5_
argument_list|)
block|,
name|f6_
argument_list|(
name|t
operator|.
name|f6_
argument_list|)
block|,
name|f7_
argument_list|(
name|t
operator|.
name|f7_
argument_list|)
block|,
name|f8_
argument_list|(
argument|t.f8_
argument_list|)
block|{}
name|template
operator|<
name|GTEST_9_TYPENAMES_
argument_list|(
name|U
argument_list|)
operator|>
name|tuple
argument_list|(
specifier|const
name|GTEST_9_TUPLE_
argument_list|(
name|U
argument_list|)
operator|&
name|t
argument_list|)
operator|:
name|f0_
argument_list|(
name|t
operator|.
name|f0_
argument_list|)
block|,
name|f1_
argument_list|(
name|t
operator|.
name|f1_
argument_list|)
block|,
name|f2_
argument_list|(
name|t
operator|.
name|f2_
argument_list|)
block|,
name|f3_
argument_list|(
name|t
operator|.
name|f3_
argument_list|)
block|,
name|f4_
argument_list|(
name|t
operator|.
name|f4_
argument_list|)
block|,
name|f5_
argument_list|(
name|t
operator|.
name|f5_
argument_list|)
block|,
name|f6_
argument_list|(
name|t
operator|.
name|f6_
argument_list|)
block|,
name|f7_
argument_list|(
name|t
operator|.
name|f7_
argument_list|)
block|,
name|f8_
argument_list|(
argument|t.f8_
argument_list|)
block|{}
name|tuple
operator|&
name|operator
operator|=
operator|(
specifier|const
name|tuple
operator|&
name|t
operator|)
block|{
return|return
name|CopyFrom
argument_list|(
name|t
argument_list|)
return|;
block|}
name|template
operator|<
name|GTEST_9_TYPENAMES_
argument_list|(
name|U
argument_list|)
operator|>
name|tuple
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GTEST_9_TUPLE_
argument_list|(
name|U
argument_list|)
operator|&
name|t
operator|)
block|{
return|return
name|CopyFrom
argument_list|(
name|t
argument_list|)
return|;
block|}
name|GTEST_DECLARE_TUPLE_AS_FRIEND_
name|template
operator|<
name|GTEST_9_TYPENAMES_
argument_list|(
name|U
argument_list|)
operator|>
name|tuple
operator|&
name|CopyFrom
argument_list|(
argument|const GTEST_9_TUPLE_(U)& t
argument_list|)
block|{
name|f0_
operator|=
name|t
operator|.
name|f0_
block|;
name|f1_
operator|=
name|t
operator|.
name|f1_
block|;
name|f2_
operator|=
name|t
operator|.
name|f2_
block|;
name|f3_
operator|=
name|t
operator|.
name|f3_
block|;
name|f4_
operator|=
name|t
operator|.
name|f4_
block|;
name|f5_
operator|=
name|t
operator|.
name|f5_
block|;
name|f6_
operator|=
name|t
operator|.
name|f6_
block|;
name|f7_
operator|=
name|t
operator|.
name|f7_
block|;
name|f8_
operator|=
name|t
operator|.
name|f8_
block|;
return|return
operator|*
name|this
return|;
block|}
name|T0
name|f0_
block|;
name|T1
name|f1_
block|;
name|T2
name|f2_
block|;
name|T3
name|f3_
block|;
name|T4
name|f4_
block|;
name|T5
name|f5_
block|;
name|T6
name|f6_
block|;
name|T7
name|f7_
block|;
name|T8
name|f8_
block|; }
block|;
name|template
operator|<
name|GTEST_10_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
name|class
name|tuple
block|{
name|public
operator|:
name|template
operator|<
name|int
name|k
operator|>
name|friend
name|class
name|gtest_internal
operator|::
name|Get
block|;
name|tuple
argument_list|()
operator|:
name|f0_
argument_list|()
block|,
name|f1_
argument_list|()
block|,
name|f2_
argument_list|()
block|,
name|f3_
argument_list|()
block|,
name|f4_
argument_list|()
block|,
name|f5_
argument_list|()
block|,
name|f6_
argument_list|()
block|,
name|f7_
argument_list|()
block|,
name|f8_
argument_list|()
block|,
name|f9_
argument_list|()
block|{}
name|explicit
name|tuple
argument_list|(
name|GTEST_BY_REF_
argument_list|(
argument|T0
argument_list|)
name|f0
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T1
argument_list|)
name|f1
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T2
argument_list|)
name|f2
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T3
argument_list|)
name|f3
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T4
argument_list|)
name|f4
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T5
argument_list|)
name|f5
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T6
argument_list|)
name|f6
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T7
argument_list|)
name|f7
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T8
argument_list|)
name|f8
argument_list|,
name|GTEST_BY_REF_
argument_list|(
argument|T9
argument_list|)
name|f9
argument_list|)
operator|:
name|f0_
argument_list|(
name|f0
argument_list|)
block|,
name|f1_
argument_list|(
name|f1
argument_list|)
block|,
name|f2_
argument_list|(
name|f2
argument_list|)
block|,
name|f3_
argument_list|(
name|f3
argument_list|)
block|,
name|f4_
argument_list|(
name|f4
argument_list|)
block|,
name|f5_
argument_list|(
name|f5
argument_list|)
block|,
name|f6_
argument_list|(
name|f6
argument_list|)
block|,
name|f7_
argument_list|(
name|f7
argument_list|)
block|,
name|f8_
argument_list|(
name|f8
argument_list|)
block|,
name|f9_
argument_list|(
argument|f9
argument_list|)
block|{}
name|tuple
argument_list|(
specifier|const
name|tuple
operator|&
name|t
argument_list|)
operator|:
name|f0_
argument_list|(
name|t
operator|.
name|f0_
argument_list|)
block|,
name|f1_
argument_list|(
name|t
operator|.
name|f1_
argument_list|)
block|,
name|f2_
argument_list|(
name|t
operator|.
name|f2_
argument_list|)
block|,
name|f3_
argument_list|(
name|t
operator|.
name|f3_
argument_list|)
block|,
name|f4_
argument_list|(
name|t
operator|.
name|f4_
argument_list|)
block|,
name|f5_
argument_list|(
name|t
operator|.
name|f5_
argument_list|)
block|,
name|f6_
argument_list|(
name|t
operator|.
name|f6_
argument_list|)
block|,
name|f7_
argument_list|(
name|t
operator|.
name|f7_
argument_list|)
block|,
name|f8_
argument_list|(
name|t
operator|.
name|f8_
argument_list|)
block|,
name|f9_
argument_list|(
argument|t.f9_
argument_list|)
block|{}
name|template
operator|<
name|GTEST_10_TYPENAMES_
argument_list|(
name|U
argument_list|)
operator|>
name|tuple
argument_list|(
specifier|const
name|GTEST_10_TUPLE_
argument_list|(
name|U
argument_list|)
operator|&
name|t
argument_list|)
operator|:
name|f0_
argument_list|(
name|t
operator|.
name|f0_
argument_list|)
block|,
name|f1_
argument_list|(
name|t
operator|.
name|f1_
argument_list|)
block|,
name|f2_
argument_list|(
name|t
operator|.
name|f2_
argument_list|)
block|,
name|f3_
argument_list|(
name|t
operator|.
name|f3_
argument_list|)
block|,
name|f4_
argument_list|(
name|t
operator|.
name|f4_
argument_list|)
block|,
name|f5_
argument_list|(
name|t
operator|.
name|f5_
argument_list|)
block|,
name|f6_
argument_list|(
name|t
operator|.
name|f6_
argument_list|)
block|,
name|f7_
argument_list|(
name|t
operator|.
name|f7_
argument_list|)
block|,
name|f8_
argument_list|(
name|t
operator|.
name|f8_
argument_list|)
block|,
name|f9_
argument_list|(
argument|t.f9_
argument_list|)
block|{}
name|tuple
operator|&
name|operator
operator|=
operator|(
specifier|const
name|tuple
operator|&
name|t
operator|)
block|{
return|return
name|CopyFrom
argument_list|(
name|t
argument_list|)
return|;
block|}
name|template
operator|<
name|GTEST_10_TYPENAMES_
argument_list|(
name|U
argument_list|)
operator|>
name|tuple
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GTEST_10_TUPLE_
argument_list|(
name|U
argument_list|)
operator|&
name|t
operator|)
block|{
return|return
name|CopyFrom
argument_list|(
name|t
argument_list|)
return|;
block|}
name|GTEST_DECLARE_TUPLE_AS_FRIEND_
name|template
operator|<
name|GTEST_10_TYPENAMES_
argument_list|(
name|U
argument_list|)
operator|>
name|tuple
operator|&
name|CopyFrom
argument_list|(
argument|const GTEST_10_TUPLE_(U)& t
argument_list|)
block|{
name|f0_
operator|=
name|t
operator|.
name|f0_
block|;
name|f1_
operator|=
name|t
operator|.
name|f1_
block|;
name|f2_
operator|=
name|t
operator|.
name|f2_
block|;
name|f3_
operator|=
name|t
operator|.
name|f3_
block|;
name|f4_
operator|=
name|t
operator|.
name|f4_
block|;
name|f5_
operator|=
name|t
operator|.
name|f5_
block|;
name|f6_
operator|=
name|t
operator|.
name|f6_
block|;
name|f7_
operator|=
name|t
operator|.
name|f7_
block|;
name|f8_
operator|=
name|t
operator|.
name|f8_
block|;
name|f9_
operator|=
name|t
operator|.
name|f9_
block|;
return|return
operator|*
name|this
return|;
block|}
name|T0
name|f0_
block|;
name|T1
name|f1_
block|;
name|T2
name|f2_
block|;
name|T3
name|f3_
block|;
name|T4
name|f4_
block|;
name|T5
name|f5_
block|;
name|T6
name|f6_
block|;
name|T7
name|f7_
block|;
name|T8
name|f8_
block|;
name|T9
name|f9_
block|; }
block|;
comment|// 6.1.3.2 Tuple creation functions.
comment|// Known limitations: we don't support passing an
comment|// std::tr1::reference_wrapper<T> to make_tuple().  And we don't
comment|// implement tie().
specifier|inline
name|tuple
operator|<
operator|>
name|make_tuple
argument_list|()
block|{
return|return
name|tuple
operator|<
operator|>
operator|(
operator|)
return|;
block|}
name|template
operator|<
name|GTEST_1_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
specifier|inline
name|GTEST_1_TUPLE_
argument_list|(
argument|T
argument_list|)
name|make_tuple
argument_list|(
argument|const T0& f0
argument_list|)
block|{
return|return
name|GTEST_1_TUPLE_
argument_list|(
name|T
argument_list|)
argument_list|(
name|f0
argument_list|)
return|;
block|}
name|template
operator|<
name|GTEST_2_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
specifier|inline
name|GTEST_2_TUPLE_
argument_list|(
argument|T
argument_list|)
name|make_tuple
argument_list|(
argument|const T0& f0
argument_list|,
argument|const T1& f1
argument_list|)
block|{
return|return
name|GTEST_2_TUPLE_
argument_list|(
name|T
argument_list|)
argument_list|(
name|f0
argument_list|,
name|f1
argument_list|)
return|;
block|}
name|template
operator|<
name|GTEST_3_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
specifier|inline
name|GTEST_3_TUPLE_
argument_list|(
argument|T
argument_list|)
name|make_tuple
argument_list|(
argument|const T0& f0
argument_list|,
argument|const T1& f1
argument_list|,
argument|const T2& f2
argument_list|)
block|{
return|return
name|GTEST_3_TUPLE_
argument_list|(
name|T
argument_list|)
argument_list|(
name|f0
argument_list|,
name|f1
argument_list|,
name|f2
argument_list|)
return|;
block|}
name|template
operator|<
name|GTEST_4_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
specifier|inline
name|GTEST_4_TUPLE_
argument_list|(
argument|T
argument_list|)
name|make_tuple
argument_list|(
argument|const T0& f0
argument_list|,
argument|const T1& f1
argument_list|,
argument|const T2& f2
argument_list|,
argument|const T3& f3
argument_list|)
block|{
return|return
name|GTEST_4_TUPLE_
argument_list|(
name|T
argument_list|)
argument_list|(
name|f0
argument_list|,
name|f1
argument_list|,
name|f2
argument_list|,
name|f3
argument_list|)
return|;
block|}
name|template
operator|<
name|GTEST_5_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
specifier|inline
name|GTEST_5_TUPLE_
argument_list|(
argument|T
argument_list|)
name|make_tuple
argument_list|(
argument|const T0& f0
argument_list|,
argument|const T1& f1
argument_list|,
argument|const T2& f2
argument_list|,
argument|const T3& f3
argument_list|,
argument|const T4& f4
argument_list|)
block|{
return|return
name|GTEST_5_TUPLE_
argument_list|(
name|T
argument_list|)
argument_list|(
name|f0
argument_list|,
name|f1
argument_list|,
name|f2
argument_list|,
name|f3
argument_list|,
name|f4
argument_list|)
return|;
block|}
name|template
operator|<
name|GTEST_6_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
specifier|inline
name|GTEST_6_TUPLE_
argument_list|(
argument|T
argument_list|)
name|make_tuple
argument_list|(
argument|const T0& f0
argument_list|,
argument|const T1& f1
argument_list|,
argument|const T2& f2
argument_list|,
argument|const T3& f3
argument_list|,
argument|const T4& f4
argument_list|,
argument|const T5& f5
argument_list|)
block|{
return|return
name|GTEST_6_TUPLE_
argument_list|(
name|T
argument_list|)
argument_list|(
name|f0
argument_list|,
name|f1
argument_list|,
name|f2
argument_list|,
name|f3
argument_list|,
name|f4
argument_list|,
name|f5
argument_list|)
return|;
block|}
name|template
operator|<
name|GTEST_7_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
specifier|inline
name|GTEST_7_TUPLE_
argument_list|(
argument|T
argument_list|)
name|make_tuple
argument_list|(
argument|const T0& f0
argument_list|,
argument|const T1& f1
argument_list|,
argument|const T2& f2
argument_list|,
argument|const T3& f3
argument_list|,
argument|const T4& f4
argument_list|,
argument|const T5& f5
argument_list|,
argument|const T6& f6
argument_list|)
block|{
return|return
name|GTEST_7_TUPLE_
argument_list|(
name|T
argument_list|)
argument_list|(
name|f0
argument_list|,
name|f1
argument_list|,
name|f2
argument_list|,
name|f3
argument_list|,
name|f4
argument_list|,
name|f5
argument_list|,
name|f6
argument_list|)
return|;
block|}
name|template
operator|<
name|GTEST_8_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
specifier|inline
name|GTEST_8_TUPLE_
argument_list|(
argument|T
argument_list|)
name|make_tuple
argument_list|(
argument|const T0& f0
argument_list|,
argument|const T1& f1
argument_list|,
argument|const T2& f2
argument_list|,
argument|const T3& f3
argument_list|,
argument|const T4& f4
argument_list|,
argument|const T5& f5
argument_list|,
argument|const T6& f6
argument_list|,
argument|const T7& f7
argument_list|)
block|{
return|return
name|GTEST_8_TUPLE_
argument_list|(
name|T
argument_list|)
argument_list|(
name|f0
argument_list|,
name|f1
argument_list|,
name|f2
argument_list|,
name|f3
argument_list|,
name|f4
argument_list|,
name|f5
argument_list|,
name|f6
argument_list|,
name|f7
argument_list|)
return|;
block|}
name|template
operator|<
name|GTEST_9_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
specifier|inline
name|GTEST_9_TUPLE_
argument_list|(
argument|T
argument_list|)
name|make_tuple
argument_list|(
argument|const T0& f0
argument_list|,
argument|const T1& f1
argument_list|,
argument|const T2& f2
argument_list|,
argument|const T3& f3
argument_list|,
argument|const T4& f4
argument_list|,
argument|const T5& f5
argument_list|,
argument|const T6& f6
argument_list|,
argument|const T7& f7
argument_list|,
argument|const T8& f8
argument_list|)
block|{
return|return
name|GTEST_9_TUPLE_
argument_list|(
name|T
argument_list|)
argument_list|(
name|f0
argument_list|,
name|f1
argument_list|,
name|f2
argument_list|,
name|f3
argument_list|,
name|f4
argument_list|,
name|f5
argument_list|,
name|f6
argument_list|,
name|f7
argument_list|,
name|f8
argument_list|)
return|;
block|}
name|template
operator|<
name|GTEST_10_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
specifier|inline
name|GTEST_10_TUPLE_
argument_list|(
argument|T
argument_list|)
name|make_tuple
argument_list|(
argument|const T0& f0
argument_list|,
argument|const T1& f1
argument_list|,
argument|const T2& f2
argument_list|,
argument|const T3& f3
argument_list|,
argument|const T4& f4
argument_list|,
argument|const T5& f5
argument_list|,
argument|const T6& f6
argument_list|,
argument|const T7& f7
argument_list|,
argument|const T8& f8
argument_list|,
argument|const T9& f9
argument_list|)
block|{
return|return
name|GTEST_10_TUPLE_
argument_list|(
name|T
argument_list|)
argument_list|(
name|f0
argument_list|,
name|f1
argument_list|,
name|f2
argument_list|,
name|f3
argument_list|,
name|f4
argument_list|,
name|f5
argument_list|,
name|f6
argument_list|,
name|f7
argument_list|,
name|f8
argument_list|,
name|f9
argument_list|)
return|;
block|}
comment|// 6.1.3.3 Tuple helper classes.
name|template
operator|<
name|typename
name|Tuple
operator|>
expr|struct
name|tuple_size
block|;
name|template
operator|<
name|GTEST_0_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
expr|struct
name|tuple_size
operator|<
name|GTEST_0_TUPLE_
argument_list|(
name|T
argument_list|)
operator|>
block|{
specifier|static
specifier|const
name|int
name|value
operator|=
literal|0
block|; }
block|;
name|template
operator|<
name|GTEST_1_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
expr|struct
name|tuple_size
operator|<
name|GTEST_1_TUPLE_
argument_list|(
name|T
argument_list|)
operator|>
block|{
specifier|static
specifier|const
name|int
name|value
operator|=
literal|1
block|; }
block|;
name|template
operator|<
name|GTEST_2_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
expr|struct
name|tuple_size
operator|<
name|GTEST_2_TUPLE_
argument_list|(
name|T
argument_list|)
operator|>
block|{
specifier|static
specifier|const
name|int
name|value
operator|=
literal|2
block|; }
block|;
name|template
operator|<
name|GTEST_3_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
expr|struct
name|tuple_size
operator|<
name|GTEST_3_TUPLE_
argument_list|(
name|T
argument_list|)
operator|>
block|{
specifier|static
specifier|const
name|int
name|value
operator|=
literal|3
block|; }
block|;
name|template
operator|<
name|GTEST_4_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
expr|struct
name|tuple_size
operator|<
name|GTEST_4_TUPLE_
argument_list|(
name|T
argument_list|)
operator|>
block|{
specifier|static
specifier|const
name|int
name|value
operator|=
literal|4
block|; }
block|;
name|template
operator|<
name|GTEST_5_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
expr|struct
name|tuple_size
operator|<
name|GTEST_5_TUPLE_
argument_list|(
name|T
argument_list|)
operator|>
block|{
specifier|static
specifier|const
name|int
name|value
operator|=
literal|5
block|; }
block|;
name|template
operator|<
name|GTEST_6_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
expr|struct
name|tuple_size
operator|<
name|GTEST_6_TUPLE_
argument_list|(
name|T
argument_list|)
operator|>
block|{
specifier|static
specifier|const
name|int
name|value
operator|=
literal|6
block|; }
block|;
name|template
operator|<
name|GTEST_7_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
expr|struct
name|tuple_size
operator|<
name|GTEST_7_TUPLE_
argument_list|(
name|T
argument_list|)
operator|>
block|{
specifier|static
specifier|const
name|int
name|value
operator|=
literal|7
block|; }
block|;
name|template
operator|<
name|GTEST_8_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
expr|struct
name|tuple_size
operator|<
name|GTEST_8_TUPLE_
argument_list|(
name|T
argument_list|)
operator|>
block|{
specifier|static
specifier|const
name|int
name|value
operator|=
literal|8
block|; }
block|;
name|template
operator|<
name|GTEST_9_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
expr|struct
name|tuple_size
operator|<
name|GTEST_9_TUPLE_
argument_list|(
name|T
argument_list|)
operator|>
block|{
specifier|static
specifier|const
name|int
name|value
operator|=
literal|9
block|; }
block|;
name|template
operator|<
name|GTEST_10_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
expr|struct
name|tuple_size
operator|<
name|GTEST_10_TUPLE_
argument_list|(
name|T
argument_list|)
operator|>
block|{
specifier|static
specifier|const
name|int
name|value
operator|=
literal|10
block|; }
block|;
name|template
operator|<
name|int
name|k
block|,
name|class
name|Tuple
operator|>
expr|struct
name|tuple_element
block|{
typedef|typedef
name|typename
name|gtest_internal
operator|::
name|TupleElement
operator|<
name|k
operator|<
operator|(
name|tuple_size
operator|<
name|Tuple
operator|>
operator|::
name|value
operator|)
operator|,
name|k
operator|,
name|Tuple
operator|>
operator|::
name|type
name|type
expr_stmt|;
block|}
block|;
define|#
directive|define
name|GTEST_TUPLE_ELEMENT_
parameter_list|(
name|k
parameter_list|,
name|Tuple
parameter_list|)
value|typename tuple_element<k, Tuple>::type
comment|// 6.1.3.4 Element access.
name|namespace
name|gtest_internal
block|{
name|template
operator|<
operator|>
name|class
name|Get
operator|<
literal|0
operator|>
block|{
name|public
operator|:
name|template
operator|<
name|class
name|Tuple
operator|>
specifier|static
name|GTEST_ADD_REF_
argument_list|(
argument|GTEST_TUPLE_ELEMENT_(
literal|0
argument|, Tuple)
argument_list|)
name|Field
argument_list|(
argument|Tuple& t
argument_list|)
block|{
return|return
name|t
operator|.
name|f0_
return|;
block|}
comment|// NOLINT
name|template
operator|<
name|class
name|Tuple
operator|>
specifier|static
name|GTEST_BY_REF_
argument_list|(
argument|GTEST_TUPLE_ELEMENT_(
literal|0
argument|, Tuple)
argument_list|)
name|ConstField
argument_list|(
argument|const Tuple& t
argument_list|)
block|{
return|return
name|t
operator|.
name|f0_
return|;
block|}
expr|}
block|;
name|template
operator|<
operator|>
name|class
name|Get
operator|<
literal|1
operator|>
block|{
name|public
operator|:
name|template
operator|<
name|class
name|Tuple
operator|>
specifier|static
name|GTEST_ADD_REF_
argument_list|(
argument|GTEST_TUPLE_ELEMENT_(
literal|1
argument|, Tuple)
argument_list|)
name|Field
argument_list|(
argument|Tuple& t
argument_list|)
block|{
return|return
name|t
operator|.
name|f1_
return|;
block|}
comment|// NOLINT
name|template
operator|<
name|class
name|Tuple
operator|>
specifier|static
name|GTEST_BY_REF_
argument_list|(
argument|GTEST_TUPLE_ELEMENT_(
literal|1
argument|, Tuple)
argument_list|)
name|ConstField
argument_list|(
argument|const Tuple& t
argument_list|)
block|{
return|return
name|t
operator|.
name|f1_
return|;
block|}
expr|}
block|;
name|template
operator|<
operator|>
name|class
name|Get
operator|<
literal|2
operator|>
block|{
name|public
operator|:
name|template
operator|<
name|class
name|Tuple
operator|>
specifier|static
name|GTEST_ADD_REF_
argument_list|(
argument|GTEST_TUPLE_ELEMENT_(
literal|2
argument|, Tuple)
argument_list|)
name|Field
argument_list|(
argument|Tuple& t
argument_list|)
block|{
return|return
name|t
operator|.
name|f2_
return|;
block|}
comment|// NOLINT
name|template
operator|<
name|class
name|Tuple
operator|>
specifier|static
name|GTEST_BY_REF_
argument_list|(
argument|GTEST_TUPLE_ELEMENT_(
literal|2
argument|, Tuple)
argument_list|)
name|ConstField
argument_list|(
argument|const Tuple& t
argument_list|)
block|{
return|return
name|t
operator|.
name|f2_
return|;
block|}
expr|}
block|;
name|template
operator|<
operator|>
name|class
name|Get
operator|<
literal|3
operator|>
block|{
name|public
operator|:
name|template
operator|<
name|class
name|Tuple
operator|>
specifier|static
name|GTEST_ADD_REF_
argument_list|(
argument|GTEST_TUPLE_ELEMENT_(
literal|3
argument|, Tuple)
argument_list|)
name|Field
argument_list|(
argument|Tuple& t
argument_list|)
block|{
return|return
name|t
operator|.
name|f3_
return|;
block|}
comment|// NOLINT
name|template
operator|<
name|class
name|Tuple
operator|>
specifier|static
name|GTEST_BY_REF_
argument_list|(
argument|GTEST_TUPLE_ELEMENT_(
literal|3
argument|, Tuple)
argument_list|)
name|ConstField
argument_list|(
argument|const Tuple& t
argument_list|)
block|{
return|return
name|t
operator|.
name|f3_
return|;
block|}
expr|}
block|;
name|template
operator|<
operator|>
name|class
name|Get
operator|<
literal|4
operator|>
block|{
name|public
operator|:
name|template
operator|<
name|class
name|Tuple
operator|>
specifier|static
name|GTEST_ADD_REF_
argument_list|(
argument|GTEST_TUPLE_ELEMENT_(
literal|4
argument|, Tuple)
argument_list|)
name|Field
argument_list|(
argument|Tuple& t
argument_list|)
block|{
return|return
name|t
operator|.
name|f4_
return|;
block|}
comment|// NOLINT
name|template
operator|<
name|class
name|Tuple
operator|>
specifier|static
name|GTEST_BY_REF_
argument_list|(
argument|GTEST_TUPLE_ELEMENT_(
literal|4
argument|, Tuple)
argument_list|)
name|ConstField
argument_list|(
argument|const Tuple& t
argument_list|)
block|{
return|return
name|t
operator|.
name|f4_
return|;
block|}
expr|}
block|;
name|template
operator|<
operator|>
name|class
name|Get
operator|<
literal|5
operator|>
block|{
name|public
operator|:
name|template
operator|<
name|class
name|Tuple
operator|>
specifier|static
name|GTEST_ADD_REF_
argument_list|(
argument|GTEST_TUPLE_ELEMENT_(
literal|5
argument|, Tuple)
argument_list|)
name|Field
argument_list|(
argument|Tuple& t
argument_list|)
block|{
return|return
name|t
operator|.
name|f5_
return|;
block|}
comment|// NOLINT
name|template
operator|<
name|class
name|Tuple
operator|>
specifier|static
name|GTEST_BY_REF_
argument_list|(
argument|GTEST_TUPLE_ELEMENT_(
literal|5
argument|, Tuple)
argument_list|)
name|ConstField
argument_list|(
argument|const Tuple& t
argument_list|)
block|{
return|return
name|t
operator|.
name|f5_
return|;
block|}
expr|}
block|;
name|template
operator|<
operator|>
name|class
name|Get
operator|<
literal|6
operator|>
block|{
name|public
operator|:
name|template
operator|<
name|class
name|Tuple
operator|>
specifier|static
name|GTEST_ADD_REF_
argument_list|(
argument|GTEST_TUPLE_ELEMENT_(
literal|6
argument|, Tuple)
argument_list|)
name|Field
argument_list|(
argument|Tuple& t
argument_list|)
block|{
return|return
name|t
operator|.
name|f6_
return|;
block|}
comment|// NOLINT
name|template
operator|<
name|class
name|Tuple
operator|>
specifier|static
name|GTEST_BY_REF_
argument_list|(
argument|GTEST_TUPLE_ELEMENT_(
literal|6
argument|, Tuple)
argument_list|)
name|ConstField
argument_list|(
argument|const Tuple& t
argument_list|)
block|{
return|return
name|t
operator|.
name|f6_
return|;
block|}
expr|}
block|;
name|template
operator|<
operator|>
name|class
name|Get
operator|<
literal|7
operator|>
block|{
name|public
operator|:
name|template
operator|<
name|class
name|Tuple
operator|>
specifier|static
name|GTEST_ADD_REF_
argument_list|(
argument|GTEST_TUPLE_ELEMENT_(
literal|7
argument|, Tuple)
argument_list|)
name|Field
argument_list|(
argument|Tuple& t
argument_list|)
block|{
return|return
name|t
operator|.
name|f7_
return|;
block|}
comment|// NOLINT
name|template
operator|<
name|class
name|Tuple
operator|>
specifier|static
name|GTEST_BY_REF_
argument_list|(
argument|GTEST_TUPLE_ELEMENT_(
literal|7
argument|, Tuple)
argument_list|)
name|ConstField
argument_list|(
argument|const Tuple& t
argument_list|)
block|{
return|return
name|t
operator|.
name|f7_
return|;
block|}
expr|}
block|;
name|template
operator|<
operator|>
name|class
name|Get
operator|<
literal|8
operator|>
block|{
name|public
operator|:
name|template
operator|<
name|class
name|Tuple
operator|>
specifier|static
name|GTEST_ADD_REF_
argument_list|(
argument|GTEST_TUPLE_ELEMENT_(
literal|8
argument|, Tuple)
argument_list|)
name|Field
argument_list|(
argument|Tuple& t
argument_list|)
block|{
return|return
name|t
operator|.
name|f8_
return|;
block|}
comment|// NOLINT
name|template
operator|<
name|class
name|Tuple
operator|>
specifier|static
name|GTEST_BY_REF_
argument_list|(
argument|GTEST_TUPLE_ELEMENT_(
literal|8
argument|, Tuple)
argument_list|)
name|ConstField
argument_list|(
argument|const Tuple& t
argument_list|)
block|{
return|return
name|t
operator|.
name|f8_
return|;
block|}
expr|}
block|;
name|template
operator|<
operator|>
name|class
name|Get
operator|<
literal|9
operator|>
block|{
name|public
operator|:
name|template
operator|<
name|class
name|Tuple
operator|>
specifier|static
name|GTEST_ADD_REF_
argument_list|(
argument|GTEST_TUPLE_ELEMENT_(
literal|9
argument|, Tuple)
argument_list|)
name|Field
argument_list|(
argument|Tuple& t
argument_list|)
block|{
return|return
name|t
operator|.
name|f9_
return|;
block|}
comment|// NOLINT
name|template
operator|<
name|class
name|Tuple
operator|>
specifier|static
name|GTEST_BY_REF_
argument_list|(
argument|GTEST_TUPLE_ELEMENT_(
literal|9
argument|, Tuple)
argument_list|)
name|ConstField
argument_list|(
argument|const Tuple& t
argument_list|)
block|{
return|return
name|t
operator|.
name|f9_
return|;
block|}
expr|}
block|;  }
comment|// namespace gtest_internal
name|template
operator|<
name|int
name|k
block|,
name|GTEST_10_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
name|GTEST_ADD_REF_
argument_list|(
argument|GTEST_TUPLE_ELEMENT_(k, GTEST_10_TUPLE_(T))
argument_list|)
name|get
argument_list|(
argument|GTEST_10_TUPLE_(T)& t
argument_list|)
block|{
return|return
name|gtest_internal
operator|::
name|Get
operator|<
name|k
operator|>
operator|::
name|Field
argument_list|(
name|t
argument_list|)
return|;
block|}
name|template
operator|<
name|int
name|k
block|,
name|GTEST_10_TYPENAMES_
argument_list|(
name|T
argument_list|)
operator|>
name|GTEST_BY_REF_
argument_list|(
argument|GTEST_TUPLE_ELEMENT_(k,  GTEST_10_TUPLE_(T))
argument_list|)
name|get
argument_list|(
argument|const GTEST_10_TUPLE_(T)& t
argument_list|)
block|{
return|return
name|gtest_internal
operator|::
name|Get
operator|<
name|k
operator|>
operator|::
name|ConstField
argument_list|(
name|t
argument_list|)
return|;
block|}
comment|// 6.1.3.5 Relational operators
comment|// We only implement == and !=, as we don't have a need for the rest yet.
name|namespace
name|gtest_internal
block|{
comment|// SameSizeTuplePrefixComparator<k, k>::Eq(t1, t2) returns true if the
comment|// first k fields of t1 equals the first k fields of t2.
comment|// SameSizeTuplePrefixComparator(k1, k2) would be a compiler error if
comment|// k1 != k2.
name|template
operator|<
name|int
name|kSize1
block|,
name|int
name|kSize2
operator|>
expr|struct
name|SameSizeTuplePrefixComparator
block|;
name|template
operator|<
operator|>
expr|struct
name|SameSizeTuplePrefixComparator
operator|<
literal|0
block|,
literal|0
operator|>
block|{
name|template
operator|<
name|class
name|Tuple1
block|,
name|class
name|Tuple2
operator|>
specifier|static
name|bool
name|Eq
argument_list|(
argument|const Tuple1&
comment|/* t1 */
argument_list|,
argument|const Tuple2&
comment|/* t2 */
argument_list|)
block|{
return|return
name|true
return|;
block|}
expr|}
block|;
name|template
operator|<
name|int
name|k
operator|>
expr|struct
name|SameSizeTuplePrefixComparator
operator|<
name|k
block|,
name|k
operator|>
block|{
name|template
operator|<
name|class
name|Tuple1
block|,
name|class
name|Tuple2
operator|>
specifier|static
name|bool
name|Eq
argument_list|(
argument|const Tuple1& t1
argument_list|,
argument|const Tuple2& t2
argument_list|)
block|{
return|return
name|SameSizeTuplePrefixComparator
operator|<
name|k
operator|-
literal|1
operator|,
name|k
operator|-
literal|1
operator|>
operator|::
name|Eq
argument_list|(
name|t1
argument_list|,
name|t2
argument_list|)
operator|&&
operator|::
name|std
operator|::
name|tr1
operator|::
name|get
operator|<
name|k
operator|-
literal|1
operator|>
operator|(
name|t1
operator|)
operator|==
operator|::
name|std
operator|::
name|tr1
operator|::
name|get
operator|<
name|k
operator|-
literal|1
operator|>
operator|(
name|t2
operator|)
return|;
block|}
expr|}
block|;  }
comment|// namespace gtest_internal
name|template
operator|<
name|GTEST_10_TYPENAMES_
argument_list|(
name|T
argument_list|)
block|,
name|GTEST_10_TYPENAMES_
argument_list|(
name|U
argument_list|)
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|GTEST_10_TUPLE_
argument_list|(
name|T
argument_list|)
operator|&
name|t
operator|,
specifier|const
name|GTEST_10_TUPLE_
argument_list|(
name|U
argument_list|)
operator|&
name|u
operator|)
block|{
return|return
name|gtest_internal
operator|::
name|SameSizeTuplePrefixComparator
operator|<
name|tuple_size
operator|<
name|GTEST_10_TUPLE_
argument_list|(
name|T
argument_list|)
operator|>
operator|::
name|value
operator|,
name|tuple_size
operator|<
name|GTEST_10_TUPLE_
argument_list|(
name|U
argument_list|)
operator|>
operator|::
name|value
operator|>
operator|::
name|Eq
argument_list|(
name|t
argument_list|,
name|u
argument_list|)
return|;
block|}
name|template
operator|<
name|GTEST_10_TYPENAMES_
argument_list|(
name|T
argument_list|)
block|,
name|GTEST_10_TYPENAMES_
argument_list|(
name|U
argument_list|)
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|GTEST_10_TUPLE_
argument_list|(
name|T
argument_list|)
operator|&
name|t
operator|,
specifier|const
name|GTEST_10_TUPLE_
argument_list|(
name|U
argument_list|)
operator|&
name|u
operator|)
block|{
return|return
operator|!
operator|(
name|t
operator|==
name|u
operator|)
return|;
block|}
comment|// 6.1.4 Pairs.
comment|// Unimplemented.
expr|}
comment|// namespace tr1
expr|}
end_decl_stmt

begin_comment
comment|// namespace std
end_comment

begin_undef
undef|#
directive|undef
name|GTEST_0_TUPLE_
end_undef

begin_undef
undef|#
directive|undef
name|GTEST_1_TUPLE_
end_undef

begin_undef
undef|#
directive|undef
name|GTEST_2_TUPLE_
end_undef

begin_undef
undef|#
directive|undef
name|GTEST_3_TUPLE_
end_undef

begin_undef
undef|#
directive|undef
name|GTEST_4_TUPLE_
end_undef

begin_undef
undef|#
directive|undef
name|GTEST_5_TUPLE_
end_undef

begin_undef
undef|#
directive|undef
name|GTEST_6_TUPLE_
end_undef

begin_undef
undef|#
directive|undef
name|GTEST_7_TUPLE_
end_undef

begin_undef
undef|#
directive|undef
name|GTEST_8_TUPLE_
end_undef

begin_undef
undef|#
directive|undef
name|GTEST_9_TUPLE_
end_undef

begin_undef
undef|#
directive|undef
name|GTEST_10_TUPLE_
end_undef

begin_undef
undef|#
directive|undef
name|GTEST_0_TYPENAMES_
end_undef

begin_undef
undef|#
directive|undef
name|GTEST_1_TYPENAMES_
end_undef

begin_undef
undef|#
directive|undef
name|GTEST_2_TYPENAMES_
end_undef

begin_undef
undef|#
directive|undef
name|GTEST_3_TYPENAMES_
end_undef

begin_undef
undef|#
directive|undef
name|GTEST_4_TYPENAMES_
end_undef

begin_undef
undef|#
directive|undef
name|GTEST_5_TYPENAMES_
end_undef

begin_undef
undef|#
directive|undef
name|GTEST_6_TYPENAMES_
end_undef

begin_undef
undef|#
directive|undef
name|GTEST_7_TYPENAMES_
end_undef

begin_undef
undef|#
directive|undef
name|GTEST_8_TYPENAMES_
end_undef

begin_undef
undef|#
directive|undef
name|GTEST_9_TYPENAMES_
end_undef

begin_undef
undef|#
directive|undef
name|GTEST_10_TYPENAMES_
end_undef

begin_undef
undef|#
directive|undef
name|GTEST_DECLARE_TUPLE_AS_FRIEND_
end_undef

begin_undef
undef|#
directive|undef
name|GTEST_BY_REF_
end_undef

begin_undef
undef|#
directive|undef
name|GTEST_ADD_REF_
end_undef

begin_undef
undef|#
directive|undef
name|GTEST_TUPLE_ELEMENT_
end_undef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// GTEST_INCLUDE_GTEST_INTERNAL_GTEST_TUPLE_H_
end_comment

end_unit

