begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// This file was GENERATED by a script.  DO NOT EDIT BY HAND!!!
end_comment

begin_comment
comment|// Copyright 2008 Google Inc.
end_comment

begin_comment
comment|// All Rights Reserved.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Redistribution and use in source and binary forms, with or without
end_comment

begin_comment
comment|// modification, are permitted provided that the following conditions are
end_comment

begin_comment
comment|// met:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//     * Redistributions of source code must retain the above copyright
end_comment

begin_comment
comment|// notice, this list of conditions and the following disclaimer.
end_comment

begin_comment
comment|//     * Redistributions in binary form must reproduce the above
end_comment

begin_comment
comment|// copyright notice, this list of conditions and the following disclaimer
end_comment

begin_comment
comment|// in the documentation and/or other materials provided with the
end_comment

begin_comment
comment|// distribution.
end_comment

begin_comment
comment|//     * Neither the name of Google Inc. nor the names of its
end_comment

begin_comment
comment|// contributors may be used to endorse or promote products derived from
end_comment

begin_comment
comment|// this software without specific prior written permission.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
end_comment

begin_comment
comment|// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
end_comment

begin_comment
comment|// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
end_comment

begin_comment
comment|// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
end_comment

begin_comment
comment|// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
end_comment

begin_comment
comment|// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
end_comment

begin_comment
comment|// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
end_comment

begin_comment
comment|// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
end_comment

begin_comment
comment|// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Author: vladl@google.com (Vlad Losev)
end_comment

begin_comment
comment|// Type and function utilities for implementing parameterized tests.
end_comment

begin_comment
comment|// This file is generated by a SCRIPT.  DO NOT EDIT BY HAND!
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Currently Google Test supports at most 50 arguments in Values,
end_comment

begin_comment
comment|// and at most 10 arguments in Combine. Please contact
end_comment

begin_comment
comment|// googletestframework@googlegroups.com if you need more.
end_comment

begin_comment
comment|// Please note that the number of arguments to Combine is limited
end_comment

begin_comment
comment|// by the maximum arity of the implementation of tr1::tuple which is
end_comment

begin_comment
comment|// currently set at 10.
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PARAM_UTIL_GENERATED_H_
end_ifndef

begin_define
define|#
directive|define
name|GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PARAM_UTIL_GENERATED_H_
end_define

begin_include
include|#
directive|include
file|<gtest/internal/gtest-port.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|GTEST_HAS_PARAM_TEST
end_ifdef

begin_include
include|#
directive|include
file|<gtest/internal/gtest-param-util.h>
end_include

begin_decl_stmt
name|namespace
name|testing
block|{
name|namespace
name|internal
block|{
comment|// Used in the Values() function to provide polymorphic capabilities.
name|template
operator|<
name|typename
name|T1
operator|>
name|class
name|ValueArray1
block|{
name|public
operator|:
name|explicit
name|ValueArray1
argument_list|(
argument|T1 v1
argument_list|)
operator|:
name|v1_
argument_list|(
argument|v1
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
return|return
name|ValuesIn
argument_list|(
operator|&
name|v1_
argument_list|,
operator|&
name|v1_
operator|+
literal|1
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|>
name|class
name|ValueArray2
block|{
name|public
operator|:
name|ValueArray2
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
argument|v2
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|>
name|class
name|ValueArray3
block|{
name|public
operator|:
name|ValueArray3
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
argument|v3
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|>
name|class
name|ValueArray4
block|{
name|public
operator|:
name|ValueArray4
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
argument|v4
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|>
name|class
name|ValueArray5
block|{
name|public
operator|:
name|ValueArray5
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
argument|v5
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|>
name|class
name|ValueArray6
block|{
name|public
operator|:
name|ValueArray6
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
argument|v6
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|>
name|class
name|ValueArray7
block|{
name|public
operator|:
name|ValueArray7
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
argument|v7
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|>
name|class
name|ValueArray8
block|{
name|public
operator|:
name|ValueArray8
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
argument|v8
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|>
name|class
name|ValueArray9
block|{
name|public
operator|:
name|ValueArray9
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
argument|v9
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|>
name|class
name|ValueArray10
block|{
name|public
operator|:
name|ValueArray10
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
argument|v10
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|>
name|class
name|ValueArray11
block|{
name|public
operator|:
name|ValueArray11
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
argument|v11
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|>
name|class
name|ValueArray12
block|{
name|public
operator|:
name|ValueArray12
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
argument|v12
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|>
name|class
name|ValueArray13
block|{
name|public
operator|:
name|ValueArray13
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
argument|v13
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|,
name|typename
name|T14
operator|>
name|class
name|ValueArray14
block|{
name|public
operator|:
name|ValueArray14
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|,
argument|T14 v14
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
name|v13
argument_list|)
block|,
name|v14_
argument_list|(
argument|v14
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|,
name|v14_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|;
specifier|const
name|T14
name|v14_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|,
name|typename
name|T14
operator|,
name|typename
name|T15
operator|>
name|class
name|ValueArray15
block|{
name|public
operator|:
name|ValueArray15
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|,
argument|T14 v14
argument_list|,
argument|T15 v15
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
name|v13
argument_list|)
block|,
name|v14_
argument_list|(
name|v14
argument_list|)
block|,
name|v15_
argument_list|(
argument|v15
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|,
name|v14_
block|,
name|v15_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|;
specifier|const
name|T14
name|v14_
block|;
specifier|const
name|T15
name|v15_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|,
name|typename
name|T14
operator|,
name|typename
name|T15
operator|,
name|typename
name|T16
operator|>
name|class
name|ValueArray16
block|{
name|public
operator|:
name|ValueArray16
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|,
argument|T14 v14
argument_list|,
argument|T15 v15
argument_list|,
argument|T16 v16
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
name|v13
argument_list|)
block|,
name|v14_
argument_list|(
name|v14
argument_list|)
block|,
name|v15_
argument_list|(
name|v15
argument_list|)
block|,
name|v16_
argument_list|(
argument|v16
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|,
name|v14_
block|,
name|v15_
block|,
name|v16_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|;
specifier|const
name|T14
name|v14_
block|;
specifier|const
name|T15
name|v15_
block|;
specifier|const
name|T16
name|v16_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|,
name|typename
name|T14
operator|,
name|typename
name|T15
operator|,
name|typename
name|T16
operator|,
name|typename
name|T17
operator|>
name|class
name|ValueArray17
block|{
name|public
operator|:
name|ValueArray17
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|,
argument|T14 v14
argument_list|,
argument|T15 v15
argument_list|,
argument|T16 v16
argument_list|,
argument|T17 v17
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
name|v13
argument_list|)
block|,
name|v14_
argument_list|(
name|v14
argument_list|)
block|,
name|v15_
argument_list|(
name|v15
argument_list|)
block|,
name|v16_
argument_list|(
name|v16
argument_list|)
block|,
name|v17_
argument_list|(
argument|v17
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|,
name|v14_
block|,
name|v15_
block|,
name|v16_
block|,
name|v17_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|;
specifier|const
name|T14
name|v14_
block|;
specifier|const
name|T15
name|v15_
block|;
specifier|const
name|T16
name|v16_
block|;
specifier|const
name|T17
name|v17_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|,
name|typename
name|T14
operator|,
name|typename
name|T15
operator|,
name|typename
name|T16
operator|,
name|typename
name|T17
operator|,
name|typename
name|T18
operator|>
name|class
name|ValueArray18
block|{
name|public
operator|:
name|ValueArray18
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|,
argument|T14 v14
argument_list|,
argument|T15 v15
argument_list|,
argument|T16 v16
argument_list|,
argument|T17 v17
argument_list|,
argument|T18 v18
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
name|v13
argument_list|)
block|,
name|v14_
argument_list|(
name|v14
argument_list|)
block|,
name|v15_
argument_list|(
name|v15
argument_list|)
block|,
name|v16_
argument_list|(
name|v16
argument_list|)
block|,
name|v17_
argument_list|(
name|v17
argument_list|)
block|,
name|v18_
argument_list|(
argument|v18
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|,
name|v14_
block|,
name|v15_
block|,
name|v16_
block|,
name|v17_
block|,
name|v18_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|;
specifier|const
name|T14
name|v14_
block|;
specifier|const
name|T15
name|v15_
block|;
specifier|const
name|T16
name|v16_
block|;
specifier|const
name|T17
name|v17_
block|;
specifier|const
name|T18
name|v18_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|,
name|typename
name|T14
operator|,
name|typename
name|T15
operator|,
name|typename
name|T16
operator|,
name|typename
name|T17
operator|,
name|typename
name|T18
operator|,
name|typename
name|T19
operator|>
name|class
name|ValueArray19
block|{
name|public
operator|:
name|ValueArray19
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|,
argument|T14 v14
argument_list|,
argument|T15 v15
argument_list|,
argument|T16 v16
argument_list|,
argument|T17 v17
argument_list|,
argument|T18 v18
argument_list|,
argument|T19 v19
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
name|v13
argument_list|)
block|,
name|v14_
argument_list|(
name|v14
argument_list|)
block|,
name|v15_
argument_list|(
name|v15
argument_list|)
block|,
name|v16_
argument_list|(
name|v16
argument_list|)
block|,
name|v17_
argument_list|(
name|v17
argument_list|)
block|,
name|v18_
argument_list|(
name|v18
argument_list|)
block|,
name|v19_
argument_list|(
argument|v19
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|,
name|v14_
block|,
name|v15_
block|,
name|v16_
block|,
name|v17_
block|,
name|v18_
block|,
name|v19_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|;
specifier|const
name|T14
name|v14_
block|;
specifier|const
name|T15
name|v15_
block|;
specifier|const
name|T16
name|v16_
block|;
specifier|const
name|T17
name|v17_
block|;
specifier|const
name|T18
name|v18_
block|;
specifier|const
name|T19
name|v19_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|,
name|typename
name|T14
operator|,
name|typename
name|T15
operator|,
name|typename
name|T16
operator|,
name|typename
name|T17
operator|,
name|typename
name|T18
operator|,
name|typename
name|T19
operator|,
name|typename
name|T20
operator|>
name|class
name|ValueArray20
block|{
name|public
operator|:
name|ValueArray20
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|,
argument|T14 v14
argument_list|,
argument|T15 v15
argument_list|,
argument|T16 v16
argument_list|,
argument|T17 v17
argument_list|,
argument|T18 v18
argument_list|,
argument|T19 v19
argument_list|,
argument|T20 v20
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
name|v13
argument_list|)
block|,
name|v14_
argument_list|(
name|v14
argument_list|)
block|,
name|v15_
argument_list|(
name|v15
argument_list|)
block|,
name|v16_
argument_list|(
name|v16
argument_list|)
block|,
name|v17_
argument_list|(
name|v17
argument_list|)
block|,
name|v18_
argument_list|(
name|v18
argument_list|)
block|,
name|v19_
argument_list|(
name|v19
argument_list|)
block|,
name|v20_
argument_list|(
argument|v20
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|,
name|v14_
block|,
name|v15_
block|,
name|v16_
block|,
name|v17_
block|,
name|v18_
block|,
name|v19_
block|,
name|v20_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|;
specifier|const
name|T14
name|v14_
block|;
specifier|const
name|T15
name|v15_
block|;
specifier|const
name|T16
name|v16_
block|;
specifier|const
name|T17
name|v17_
block|;
specifier|const
name|T18
name|v18_
block|;
specifier|const
name|T19
name|v19_
block|;
specifier|const
name|T20
name|v20_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|,
name|typename
name|T14
operator|,
name|typename
name|T15
operator|,
name|typename
name|T16
operator|,
name|typename
name|T17
operator|,
name|typename
name|T18
operator|,
name|typename
name|T19
operator|,
name|typename
name|T20
operator|,
name|typename
name|T21
operator|>
name|class
name|ValueArray21
block|{
name|public
operator|:
name|ValueArray21
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|,
argument|T14 v14
argument_list|,
argument|T15 v15
argument_list|,
argument|T16 v16
argument_list|,
argument|T17 v17
argument_list|,
argument|T18 v18
argument_list|,
argument|T19 v19
argument_list|,
argument|T20 v20
argument_list|,
argument|T21 v21
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
name|v13
argument_list|)
block|,
name|v14_
argument_list|(
name|v14
argument_list|)
block|,
name|v15_
argument_list|(
name|v15
argument_list|)
block|,
name|v16_
argument_list|(
name|v16
argument_list|)
block|,
name|v17_
argument_list|(
name|v17
argument_list|)
block|,
name|v18_
argument_list|(
name|v18
argument_list|)
block|,
name|v19_
argument_list|(
name|v19
argument_list|)
block|,
name|v20_
argument_list|(
name|v20
argument_list|)
block|,
name|v21_
argument_list|(
argument|v21
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|,
name|v14_
block|,
name|v15_
block|,
name|v16_
block|,
name|v17_
block|,
name|v18_
block|,
name|v19_
block|,
name|v20_
block|,
name|v21_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|;
specifier|const
name|T14
name|v14_
block|;
specifier|const
name|T15
name|v15_
block|;
specifier|const
name|T16
name|v16_
block|;
specifier|const
name|T17
name|v17_
block|;
specifier|const
name|T18
name|v18_
block|;
specifier|const
name|T19
name|v19_
block|;
specifier|const
name|T20
name|v20_
block|;
specifier|const
name|T21
name|v21_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|,
name|typename
name|T14
operator|,
name|typename
name|T15
operator|,
name|typename
name|T16
operator|,
name|typename
name|T17
operator|,
name|typename
name|T18
operator|,
name|typename
name|T19
operator|,
name|typename
name|T20
operator|,
name|typename
name|T21
operator|,
name|typename
name|T22
operator|>
name|class
name|ValueArray22
block|{
name|public
operator|:
name|ValueArray22
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|,
argument|T14 v14
argument_list|,
argument|T15 v15
argument_list|,
argument|T16 v16
argument_list|,
argument|T17 v17
argument_list|,
argument|T18 v18
argument_list|,
argument|T19 v19
argument_list|,
argument|T20 v20
argument_list|,
argument|T21 v21
argument_list|,
argument|T22 v22
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
name|v13
argument_list|)
block|,
name|v14_
argument_list|(
name|v14
argument_list|)
block|,
name|v15_
argument_list|(
name|v15
argument_list|)
block|,
name|v16_
argument_list|(
name|v16
argument_list|)
block|,
name|v17_
argument_list|(
name|v17
argument_list|)
block|,
name|v18_
argument_list|(
name|v18
argument_list|)
block|,
name|v19_
argument_list|(
name|v19
argument_list|)
block|,
name|v20_
argument_list|(
name|v20
argument_list|)
block|,
name|v21_
argument_list|(
name|v21
argument_list|)
block|,
name|v22_
argument_list|(
argument|v22
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|,
name|v14_
block|,
name|v15_
block|,
name|v16_
block|,
name|v17_
block|,
name|v18_
block|,
name|v19_
block|,
name|v20_
block|,
name|v21_
block|,
name|v22_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|;
specifier|const
name|T14
name|v14_
block|;
specifier|const
name|T15
name|v15_
block|;
specifier|const
name|T16
name|v16_
block|;
specifier|const
name|T17
name|v17_
block|;
specifier|const
name|T18
name|v18_
block|;
specifier|const
name|T19
name|v19_
block|;
specifier|const
name|T20
name|v20_
block|;
specifier|const
name|T21
name|v21_
block|;
specifier|const
name|T22
name|v22_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|,
name|typename
name|T14
operator|,
name|typename
name|T15
operator|,
name|typename
name|T16
operator|,
name|typename
name|T17
operator|,
name|typename
name|T18
operator|,
name|typename
name|T19
operator|,
name|typename
name|T20
operator|,
name|typename
name|T21
operator|,
name|typename
name|T22
operator|,
name|typename
name|T23
operator|>
name|class
name|ValueArray23
block|{
name|public
operator|:
name|ValueArray23
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|,
argument|T14 v14
argument_list|,
argument|T15 v15
argument_list|,
argument|T16 v16
argument_list|,
argument|T17 v17
argument_list|,
argument|T18 v18
argument_list|,
argument|T19 v19
argument_list|,
argument|T20 v20
argument_list|,
argument|T21 v21
argument_list|,
argument|T22 v22
argument_list|,
argument|T23 v23
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
name|v13
argument_list|)
block|,
name|v14_
argument_list|(
name|v14
argument_list|)
block|,
name|v15_
argument_list|(
name|v15
argument_list|)
block|,
name|v16_
argument_list|(
name|v16
argument_list|)
block|,
name|v17_
argument_list|(
name|v17
argument_list|)
block|,
name|v18_
argument_list|(
name|v18
argument_list|)
block|,
name|v19_
argument_list|(
name|v19
argument_list|)
block|,
name|v20_
argument_list|(
name|v20
argument_list|)
block|,
name|v21_
argument_list|(
name|v21
argument_list|)
block|,
name|v22_
argument_list|(
name|v22
argument_list|)
block|,
name|v23_
argument_list|(
argument|v23
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|,
name|v14_
block|,
name|v15_
block|,
name|v16_
block|,
name|v17_
block|,
name|v18_
block|,
name|v19_
block|,
name|v20_
block|,
name|v21_
block|,
name|v22_
block|,
name|v23_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|;
specifier|const
name|T14
name|v14_
block|;
specifier|const
name|T15
name|v15_
block|;
specifier|const
name|T16
name|v16_
block|;
specifier|const
name|T17
name|v17_
block|;
specifier|const
name|T18
name|v18_
block|;
specifier|const
name|T19
name|v19_
block|;
specifier|const
name|T20
name|v20_
block|;
specifier|const
name|T21
name|v21_
block|;
specifier|const
name|T22
name|v22_
block|;
specifier|const
name|T23
name|v23_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|,
name|typename
name|T14
operator|,
name|typename
name|T15
operator|,
name|typename
name|T16
operator|,
name|typename
name|T17
operator|,
name|typename
name|T18
operator|,
name|typename
name|T19
operator|,
name|typename
name|T20
operator|,
name|typename
name|T21
operator|,
name|typename
name|T22
operator|,
name|typename
name|T23
operator|,
name|typename
name|T24
operator|>
name|class
name|ValueArray24
block|{
name|public
operator|:
name|ValueArray24
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|,
argument|T14 v14
argument_list|,
argument|T15 v15
argument_list|,
argument|T16 v16
argument_list|,
argument|T17 v17
argument_list|,
argument|T18 v18
argument_list|,
argument|T19 v19
argument_list|,
argument|T20 v20
argument_list|,
argument|T21 v21
argument_list|,
argument|T22 v22
argument_list|,
argument|T23 v23
argument_list|,
argument|T24 v24
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
name|v13
argument_list|)
block|,
name|v14_
argument_list|(
name|v14
argument_list|)
block|,
name|v15_
argument_list|(
name|v15
argument_list|)
block|,
name|v16_
argument_list|(
name|v16
argument_list|)
block|,
name|v17_
argument_list|(
name|v17
argument_list|)
block|,
name|v18_
argument_list|(
name|v18
argument_list|)
block|,
name|v19_
argument_list|(
name|v19
argument_list|)
block|,
name|v20_
argument_list|(
name|v20
argument_list|)
block|,
name|v21_
argument_list|(
name|v21
argument_list|)
block|,
name|v22_
argument_list|(
name|v22
argument_list|)
block|,
name|v23_
argument_list|(
name|v23
argument_list|)
block|,
name|v24_
argument_list|(
argument|v24
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|,
name|v14_
block|,
name|v15_
block|,
name|v16_
block|,
name|v17_
block|,
name|v18_
block|,
name|v19_
block|,
name|v20_
block|,
name|v21_
block|,
name|v22_
block|,
name|v23_
block|,
name|v24_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|;
specifier|const
name|T14
name|v14_
block|;
specifier|const
name|T15
name|v15_
block|;
specifier|const
name|T16
name|v16_
block|;
specifier|const
name|T17
name|v17_
block|;
specifier|const
name|T18
name|v18_
block|;
specifier|const
name|T19
name|v19_
block|;
specifier|const
name|T20
name|v20_
block|;
specifier|const
name|T21
name|v21_
block|;
specifier|const
name|T22
name|v22_
block|;
specifier|const
name|T23
name|v23_
block|;
specifier|const
name|T24
name|v24_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|,
name|typename
name|T14
operator|,
name|typename
name|T15
operator|,
name|typename
name|T16
operator|,
name|typename
name|T17
operator|,
name|typename
name|T18
operator|,
name|typename
name|T19
operator|,
name|typename
name|T20
operator|,
name|typename
name|T21
operator|,
name|typename
name|T22
operator|,
name|typename
name|T23
operator|,
name|typename
name|T24
operator|,
name|typename
name|T25
operator|>
name|class
name|ValueArray25
block|{
name|public
operator|:
name|ValueArray25
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|,
argument|T14 v14
argument_list|,
argument|T15 v15
argument_list|,
argument|T16 v16
argument_list|,
argument|T17 v17
argument_list|,
argument|T18 v18
argument_list|,
argument|T19 v19
argument_list|,
argument|T20 v20
argument_list|,
argument|T21 v21
argument_list|,
argument|T22 v22
argument_list|,
argument|T23 v23
argument_list|,
argument|T24 v24
argument_list|,
argument|T25 v25
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
name|v13
argument_list|)
block|,
name|v14_
argument_list|(
name|v14
argument_list|)
block|,
name|v15_
argument_list|(
name|v15
argument_list|)
block|,
name|v16_
argument_list|(
name|v16
argument_list|)
block|,
name|v17_
argument_list|(
name|v17
argument_list|)
block|,
name|v18_
argument_list|(
name|v18
argument_list|)
block|,
name|v19_
argument_list|(
name|v19
argument_list|)
block|,
name|v20_
argument_list|(
name|v20
argument_list|)
block|,
name|v21_
argument_list|(
name|v21
argument_list|)
block|,
name|v22_
argument_list|(
name|v22
argument_list|)
block|,
name|v23_
argument_list|(
name|v23
argument_list|)
block|,
name|v24_
argument_list|(
name|v24
argument_list|)
block|,
name|v25_
argument_list|(
argument|v25
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|,
name|v14_
block|,
name|v15_
block|,
name|v16_
block|,
name|v17_
block|,
name|v18_
block|,
name|v19_
block|,
name|v20_
block|,
name|v21_
block|,
name|v22_
block|,
name|v23_
block|,
name|v24_
block|,
name|v25_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|;
specifier|const
name|T14
name|v14_
block|;
specifier|const
name|T15
name|v15_
block|;
specifier|const
name|T16
name|v16_
block|;
specifier|const
name|T17
name|v17_
block|;
specifier|const
name|T18
name|v18_
block|;
specifier|const
name|T19
name|v19_
block|;
specifier|const
name|T20
name|v20_
block|;
specifier|const
name|T21
name|v21_
block|;
specifier|const
name|T22
name|v22_
block|;
specifier|const
name|T23
name|v23_
block|;
specifier|const
name|T24
name|v24_
block|;
specifier|const
name|T25
name|v25_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|,
name|typename
name|T14
operator|,
name|typename
name|T15
operator|,
name|typename
name|T16
operator|,
name|typename
name|T17
operator|,
name|typename
name|T18
operator|,
name|typename
name|T19
operator|,
name|typename
name|T20
operator|,
name|typename
name|T21
operator|,
name|typename
name|T22
operator|,
name|typename
name|T23
operator|,
name|typename
name|T24
operator|,
name|typename
name|T25
operator|,
name|typename
name|T26
operator|>
name|class
name|ValueArray26
block|{
name|public
operator|:
name|ValueArray26
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|,
argument|T14 v14
argument_list|,
argument|T15 v15
argument_list|,
argument|T16 v16
argument_list|,
argument|T17 v17
argument_list|,
argument|T18 v18
argument_list|,
argument|T19 v19
argument_list|,
argument|T20 v20
argument_list|,
argument|T21 v21
argument_list|,
argument|T22 v22
argument_list|,
argument|T23 v23
argument_list|,
argument|T24 v24
argument_list|,
argument|T25 v25
argument_list|,
argument|T26 v26
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
name|v13
argument_list|)
block|,
name|v14_
argument_list|(
name|v14
argument_list|)
block|,
name|v15_
argument_list|(
name|v15
argument_list|)
block|,
name|v16_
argument_list|(
name|v16
argument_list|)
block|,
name|v17_
argument_list|(
name|v17
argument_list|)
block|,
name|v18_
argument_list|(
name|v18
argument_list|)
block|,
name|v19_
argument_list|(
name|v19
argument_list|)
block|,
name|v20_
argument_list|(
name|v20
argument_list|)
block|,
name|v21_
argument_list|(
name|v21
argument_list|)
block|,
name|v22_
argument_list|(
name|v22
argument_list|)
block|,
name|v23_
argument_list|(
name|v23
argument_list|)
block|,
name|v24_
argument_list|(
name|v24
argument_list|)
block|,
name|v25_
argument_list|(
name|v25
argument_list|)
block|,
name|v26_
argument_list|(
argument|v26
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|,
name|v14_
block|,
name|v15_
block|,
name|v16_
block|,
name|v17_
block|,
name|v18_
block|,
name|v19_
block|,
name|v20_
block|,
name|v21_
block|,
name|v22_
block|,
name|v23_
block|,
name|v24_
block|,
name|v25_
block|,
name|v26_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|;
specifier|const
name|T14
name|v14_
block|;
specifier|const
name|T15
name|v15_
block|;
specifier|const
name|T16
name|v16_
block|;
specifier|const
name|T17
name|v17_
block|;
specifier|const
name|T18
name|v18_
block|;
specifier|const
name|T19
name|v19_
block|;
specifier|const
name|T20
name|v20_
block|;
specifier|const
name|T21
name|v21_
block|;
specifier|const
name|T22
name|v22_
block|;
specifier|const
name|T23
name|v23_
block|;
specifier|const
name|T24
name|v24_
block|;
specifier|const
name|T25
name|v25_
block|;
specifier|const
name|T26
name|v26_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|,
name|typename
name|T14
operator|,
name|typename
name|T15
operator|,
name|typename
name|T16
operator|,
name|typename
name|T17
operator|,
name|typename
name|T18
operator|,
name|typename
name|T19
operator|,
name|typename
name|T20
operator|,
name|typename
name|T21
operator|,
name|typename
name|T22
operator|,
name|typename
name|T23
operator|,
name|typename
name|T24
operator|,
name|typename
name|T25
operator|,
name|typename
name|T26
operator|,
name|typename
name|T27
operator|>
name|class
name|ValueArray27
block|{
name|public
operator|:
name|ValueArray27
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|,
argument|T14 v14
argument_list|,
argument|T15 v15
argument_list|,
argument|T16 v16
argument_list|,
argument|T17 v17
argument_list|,
argument|T18 v18
argument_list|,
argument|T19 v19
argument_list|,
argument|T20 v20
argument_list|,
argument|T21 v21
argument_list|,
argument|T22 v22
argument_list|,
argument|T23 v23
argument_list|,
argument|T24 v24
argument_list|,
argument|T25 v25
argument_list|,
argument|T26 v26
argument_list|,
argument|T27 v27
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
name|v13
argument_list|)
block|,
name|v14_
argument_list|(
name|v14
argument_list|)
block|,
name|v15_
argument_list|(
name|v15
argument_list|)
block|,
name|v16_
argument_list|(
name|v16
argument_list|)
block|,
name|v17_
argument_list|(
name|v17
argument_list|)
block|,
name|v18_
argument_list|(
name|v18
argument_list|)
block|,
name|v19_
argument_list|(
name|v19
argument_list|)
block|,
name|v20_
argument_list|(
name|v20
argument_list|)
block|,
name|v21_
argument_list|(
name|v21
argument_list|)
block|,
name|v22_
argument_list|(
name|v22
argument_list|)
block|,
name|v23_
argument_list|(
name|v23
argument_list|)
block|,
name|v24_
argument_list|(
name|v24
argument_list|)
block|,
name|v25_
argument_list|(
name|v25
argument_list|)
block|,
name|v26_
argument_list|(
name|v26
argument_list|)
block|,
name|v27_
argument_list|(
argument|v27
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|,
name|v14_
block|,
name|v15_
block|,
name|v16_
block|,
name|v17_
block|,
name|v18_
block|,
name|v19_
block|,
name|v20_
block|,
name|v21_
block|,
name|v22_
block|,
name|v23_
block|,
name|v24_
block|,
name|v25_
block|,
name|v26_
block|,
name|v27_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|;
specifier|const
name|T14
name|v14_
block|;
specifier|const
name|T15
name|v15_
block|;
specifier|const
name|T16
name|v16_
block|;
specifier|const
name|T17
name|v17_
block|;
specifier|const
name|T18
name|v18_
block|;
specifier|const
name|T19
name|v19_
block|;
specifier|const
name|T20
name|v20_
block|;
specifier|const
name|T21
name|v21_
block|;
specifier|const
name|T22
name|v22_
block|;
specifier|const
name|T23
name|v23_
block|;
specifier|const
name|T24
name|v24_
block|;
specifier|const
name|T25
name|v25_
block|;
specifier|const
name|T26
name|v26_
block|;
specifier|const
name|T27
name|v27_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|,
name|typename
name|T14
operator|,
name|typename
name|T15
operator|,
name|typename
name|T16
operator|,
name|typename
name|T17
operator|,
name|typename
name|T18
operator|,
name|typename
name|T19
operator|,
name|typename
name|T20
operator|,
name|typename
name|T21
operator|,
name|typename
name|T22
operator|,
name|typename
name|T23
operator|,
name|typename
name|T24
operator|,
name|typename
name|T25
operator|,
name|typename
name|T26
operator|,
name|typename
name|T27
operator|,
name|typename
name|T28
operator|>
name|class
name|ValueArray28
block|{
name|public
operator|:
name|ValueArray28
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|,
argument|T14 v14
argument_list|,
argument|T15 v15
argument_list|,
argument|T16 v16
argument_list|,
argument|T17 v17
argument_list|,
argument|T18 v18
argument_list|,
argument|T19 v19
argument_list|,
argument|T20 v20
argument_list|,
argument|T21 v21
argument_list|,
argument|T22 v22
argument_list|,
argument|T23 v23
argument_list|,
argument|T24 v24
argument_list|,
argument|T25 v25
argument_list|,
argument|T26 v26
argument_list|,
argument|T27 v27
argument_list|,
argument|T28 v28
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
name|v13
argument_list|)
block|,
name|v14_
argument_list|(
name|v14
argument_list|)
block|,
name|v15_
argument_list|(
name|v15
argument_list|)
block|,
name|v16_
argument_list|(
name|v16
argument_list|)
block|,
name|v17_
argument_list|(
name|v17
argument_list|)
block|,
name|v18_
argument_list|(
name|v18
argument_list|)
block|,
name|v19_
argument_list|(
name|v19
argument_list|)
block|,
name|v20_
argument_list|(
name|v20
argument_list|)
block|,
name|v21_
argument_list|(
name|v21
argument_list|)
block|,
name|v22_
argument_list|(
name|v22
argument_list|)
block|,
name|v23_
argument_list|(
name|v23
argument_list|)
block|,
name|v24_
argument_list|(
name|v24
argument_list|)
block|,
name|v25_
argument_list|(
name|v25
argument_list|)
block|,
name|v26_
argument_list|(
name|v26
argument_list|)
block|,
name|v27_
argument_list|(
name|v27
argument_list|)
block|,
name|v28_
argument_list|(
argument|v28
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|,
name|v14_
block|,
name|v15_
block|,
name|v16_
block|,
name|v17_
block|,
name|v18_
block|,
name|v19_
block|,
name|v20_
block|,
name|v21_
block|,
name|v22_
block|,
name|v23_
block|,
name|v24_
block|,
name|v25_
block|,
name|v26_
block|,
name|v27_
block|,
name|v28_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|;
specifier|const
name|T14
name|v14_
block|;
specifier|const
name|T15
name|v15_
block|;
specifier|const
name|T16
name|v16_
block|;
specifier|const
name|T17
name|v17_
block|;
specifier|const
name|T18
name|v18_
block|;
specifier|const
name|T19
name|v19_
block|;
specifier|const
name|T20
name|v20_
block|;
specifier|const
name|T21
name|v21_
block|;
specifier|const
name|T22
name|v22_
block|;
specifier|const
name|T23
name|v23_
block|;
specifier|const
name|T24
name|v24_
block|;
specifier|const
name|T25
name|v25_
block|;
specifier|const
name|T26
name|v26_
block|;
specifier|const
name|T27
name|v27_
block|;
specifier|const
name|T28
name|v28_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|,
name|typename
name|T14
operator|,
name|typename
name|T15
operator|,
name|typename
name|T16
operator|,
name|typename
name|T17
operator|,
name|typename
name|T18
operator|,
name|typename
name|T19
operator|,
name|typename
name|T20
operator|,
name|typename
name|T21
operator|,
name|typename
name|T22
operator|,
name|typename
name|T23
operator|,
name|typename
name|T24
operator|,
name|typename
name|T25
operator|,
name|typename
name|T26
operator|,
name|typename
name|T27
operator|,
name|typename
name|T28
operator|,
name|typename
name|T29
operator|>
name|class
name|ValueArray29
block|{
name|public
operator|:
name|ValueArray29
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|,
argument|T14 v14
argument_list|,
argument|T15 v15
argument_list|,
argument|T16 v16
argument_list|,
argument|T17 v17
argument_list|,
argument|T18 v18
argument_list|,
argument|T19 v19
argument_list|,
argument|T20 v20
argument_list|,
argument|T21 v21
argument_list|,
argument|T22 v22
argument_list|,
argument|T23 v23
argument_list|,
argument|T24 v24
argument_list|,
argument|T25 v25
argument_list|,
argument|T26 v26
argument_list|,
argument|T27 v27
argument_list|,
argument|T28 v28
argument_list|,
argument|T29 v29
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
name|v13
argument_list|)
block|,
name|v14_
argument_list|(
name|v14
argument_list|)
block|,
name|v15_
argument_list|(
name|v15
argument_list|)
block|,
name|v16_
argument_list|(
name|v16
argument_list|)
block|,
name|v17_
argument_list|(
name|v17
argument_list|)
block|,
name|v18_
argument_list|(
name|v18
argument_list|)
block|,
name|v19_
argument_list|(
name|v19
argument_list|)
block|,
name|v20_
argument_list|(
name|v20
argument_list|)
block|,
name|v21_
argument_list|(
name|v21
argument_list|)
block|,
name|v22_
argument_list|(
name|v22
argument_list|)
block|,
name|v23_
argument_list|(
name|v23
argument_list|)
block|,
name|v24_
argument_list|(
name|v24
argument_list|)
block|,
name|v25_
argument_list|(
name|v25
argument_list|)
block|,
name|v26_
argument_list|(
name|v26
argument_list|)
block|,
name|v27_
argument_list|(
name|v27
argument_list|)
block|,
name|v28_
argument_list|(
name|v28
argument_list|)
block|,
name|v29_
argument_list|(
argument|v29
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|,
name|v14_
block|,
name|v15_
block|,
name|v16_
block|,
name|v17_
block|,
name|v18_
block|,
name|v19_
block|,
name|v20_
block|,
name|v21_
block|,
name|v22_
block|,
name|v23_
block|,
name|v24_
block|,
name|v25_
block|,
name|v26_
block|,
name|v27_
block|,
name|v28_
block|,
name|v29_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|;
specifier|const
name|T14
name|v14_
block|;
specifier|const
name|T15
name|v15_
block|;
specifier|const
name|T16
name|v16_
block|;
specifier|const
name|T17
name|v17_
block|;
specifier|const
name|T18
name|v18_
block|;
specifier|const
name|T19
name|v19_
block|;
specifier|const
name|T20
name|v20_
block|;
specifier|const
name|T21
name|v21_
block|;
specifier|const
name|T22
name|v22_
block|;
specifier|const
name|T23
name|v23_
block|;
specifier|const
name|T24
name|v24_
block|;
specifier|const
name|T25
name|v25_
block|;
specifier|const
name|T26
name|v26_
block|;
specifier|const
name|T27
name|v27_
block|;
specifier|const
name|T28
name|v28_
block|;
specifier|const
name|T29
name|v29_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|,
name|typename
name|T14
operator|,
name|typename
name|T15
operator|,
name|typename
name|T16
operator|,
name|typename
name|T17
operator|,
name|typename
name|T18
operator|,
name|typename
name|T19
operator|,
name|typename
name|T20
operator|,
name|typename
name|T21
operator|,
name|typename
name|T22
operator|,
name|typename
name|T23
operator|,
name|typename
name|T24
operator|,
name|typename
name|T25
operator|,
name|typename
name|T26
operator|,
name|typename
name|T27
operator|,
name|typename
name|T28
operator|,
name|typename
name|T29
operator|,
name|typename
name|T30
operator|>
name|class
name|ValueArray30
block|{
name|public
operator|:
name|ValueArray30
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|,
argument|T14 v14
argument_list|,
argument|T15 v15
argument_list|,
argument|T16 v16
argument_list|,
argument|T17 v17
argument_list|,
argument|T18 v18
argument_list|,
argument|T19 v19
argument_list|,
argument|T20 v20
argument_list|,
argument|T21 v21
argument_list|,
argument|T22 v22
argument_list|,
argument|T23 v23
argument_list|,
argument|T24 v24
argument_list|,
argument|T25 v25
argument_list|,
argument|T26 v26
argument_list|,
argument|T27 v27
argument_list|,
argument|T28 v28
argument_list|,
argument|T29 v29
argument_list|,
argument|T30 v30
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
name|v13
argument_list|)
block|,
name|v14_
argument_list|(
name|v14
argument_list|)
block|,
name|v15_
argument_list|(
name|v15
argument_list|)
block|,
name|v16_
argument_list|(
name|v16
argument_list|)
block|,
name|v17_
argument_list|(
name|v17
argument_list|)
block|,
name|v18_
argument_list|(
name|v18
argument_list|)
block|,
name|v19_
argument_list|(
name|v19
argument_list|)
block|,
name|v20_
argument_list|(
name|v20
argument_list|)
block|,
name|v21_
argument_list|(
name|v21
argument_list|)
block|,
name|v22_
argument_list|(
name|v22
argument_list|)
block|,
name|v23_
argument_list|(
name|v23
argument_list|)
block|,
name|v24_
argument_list|(
name|v24
argument_list|)
block|,
name|v25_
argument_list|(
name|v25
argument_list|)
block|,
name|v26_
argument_list|(
name|v26
argument_list|)
block|,
name|v27_
argument_list|(
name|v27
argument_list|)
block|,
name|v28_
argument_list|(
name|v28
argument_list|)
block|,
name|v29_
argument_list|(
name|v29
argument_list|)
block|,
name|v30_
argument_list|(
argument|v30
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|,
name|v14_
block|,
name|v15_
block|,
name|v16_
block|,
name|v17_
block|,
name|v18_
block|,
name|v19_
block|,
name|v20_
block|,
name|v21_
block|,
name|v22_
block|,
name|v23_
block|,
name|v24_
block|,
name|v25_
block|,
name|v26_
block|,
name|v27_
block|,
name|v28_
block|,
name|v29_
block|,
name|v30_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|;
specifier|const
name|T14
name|v14_
block|;
specifier|const
name|T15
name|v15_
block|;
specifier|const
name|T16
name|v16_
block|;
specifier|const
name|T17
name|v17_
block|;
specifier|const
name|T18
name|v18_
block|;
specifier|const
name|T19
name|v19_
block|;
specifier|const
name|T20
name|v20_
block|;
specifier|const
name|T21
name|v21_
block|;
specifier|const
name|T22
name|v22_
block|;
specifier|const
name|T23
name|v23_
block|;
specifier|const
name|T24
name|v24_
block|;
specifier|const
name|T25
name|v25_
block|;
specifier|const
name|T26
name|v26_
block|;
specifier|const
name|T27
name|v27_
block|;
specifier|const
name|T28
name|v28_
block|;
specifier|const
name|T29
name|v29_
block|;
specifier|const
name|T30
name|v30_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|,
name|typename
name|T14
operator|,
name|typename
name|T15
operator|,
name|typename
name|T16
operator|,
name|typename
name|T17
operator|,
name|typename
name|T18
operator|,
name|typename
name|T19
operator|,
name|typename
name|T20
operator|,
name|typename
name|T21
operator|,
name|typename
name|T22
operator|,
name|typename
name|T23
operator|,
name|typename
name|T24
operator|,
name|typename
name|T25
operator|,
name|typename
name|T26
operator|,
name|typename
name|T27
operator|,
name|typename
name|T28
operator|,
name|typename
name|T29
operator|,
name|typename
name|T30
operator|,
name|typename
name|T31
operator|>
name|class
name|ValueArray31
block|{
name|public
operator|:
name|ValueArray31
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|,
argument|T14 v14
argument_list|,
argument|T15 v15
argument_list|,
argument|T16 v16
argument_list|,
argument|T17 v17
argument_list|,
argument|T18 v18
argument_list|,
argument|T19 v19
argument_list|,
argument|T20 v20
argument_list|,
argument|T21 v21
argument_list|,
argument|T22 v22
argument_list|,
argument|T23 v23
argument_list|,
argument|T24 v24
argument_list|,
argument|T25 v25
argument_list|,
argument|T26 v26
argument_list|,
argument|T27 v27
argument_list|,
argument|T28 v28
argument_list|,
argument|T29 v29
argument_list|,
argument|T30 v30
argument_list|,
argument|T31 v31
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
name|v13
argument_list|)
block|,
name|v14_
argument_list|(
name|v14
argument_list|)
block|,
name|v15_
argument_list|(
name|v15
argument_list|)
block|,
name|v16_
argument_list|(
name|v16
argument_list|)
block|,
name|v17_
argument_list|(
name|v17
argument_list|)
block|,
name|v18_
argument_list|(
name|v18
argument_list|)
block|,
name|v19_
argument_list|(
name|v19
argument_list|)
block|,
name|v20_
argument_list|(
name|v20
argument_list|)
block|,
name|v21_
argument_list|(
name|v21
argument_list|)
block|,
name|v22_
argument_list|(
name|v22
argument_list|)
block|,
name|v23_
argument_list|(
name|v23
argument_list|)
block|,
name|v24_
argument_list|(
name|v24
argument_list|)
block|,
name|v25_
argument_list|(
name|v25
argument_list|)
block|,
name|v26_
argument_list|(
name|v26
argument_list|)
block|,
name|v27_
argument_list|(
name|v27
argument_list|)
block|,
name|v28_
argument_list|(
name|v28
argument_list|)
block|,
name|v29_
argument_list|(
name|v29
argument_list|)
block|,
name|v30_
argument_list|(
name|v30
argument_list|)
block|,
name|v31_
argument_list|(
argument|v31
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|,
name|v14_
block|,
name|v15_
block|,
name|v16_
block|,
name|v17_
block|,
name|v18_
block|,
name|v19_
block|,
name|v20_
block|,
name|v21_
block|,
name|v22_
block|,
name|v23_
block|,
name|v24_
block|,
name|v25_
block|,
name|v26_
block|,
name|v27_
block|,
name|v28_
block|,
name|v29_
block|,
name|v30_
block|,
name|v31_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|;
specifier|const
name|T14
name|v14_
block|;
specifier|const
name|T15
name|v15_
block|;
specifier|const
name|T16
name|v16_
block|;
specifier|const
name|T17
name|v17_
block|;
specifier|const
name|T18
name|v18_
block|;
specifier|const
name|T19
name|v19_
block|;
specifier|const
name|T20
name|v20_
block|;
specifier|const
name|T21
name|v21_
block|;
specifier|const
name|T22
name|v22_
block|;
specifier|const
name|T23
name|v23_
block|;
specifier|const
name|T24
name|v24_
block|;
specifier|const
name|T25
name|v25_
block|;
specifier|const
name|T26
name|v26_
block|;
specifier|const
name|T27
name|v27_
block|;
specifier|const
name|T28
name|v28_
block|;
specifier|const
name|T29
name|v29_
block|;
specifier|const
name|T30
name|v30_
block|;
specifier|const
name|T31
name|v31_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|,
name|typename
name|T14
operator|,
name|typename
name|T15
operator|,
name|typename
name|T16
operator|,
name|typename
name|T17
operator|,
name|typename
name|T18
operator|,
name|typename
name|T19
operator|,
name|typename
name|T20
operator|,
name|typename
name|T21
operator|,
name|typename
name|T22
operator|,
name|typename
name|T23
operator|,
name|typename
name|T24
operator|,
name|typename
name|T25
operator|,
name|typename
name|T26
operator|,
name|typename
name|T27
operator|,
name|typename
name|T28
operator|,
name|typename
name|T29
operator|,
name|typename
name|T30
operator|,
name|typename
name|T31
operator|,
name|typename
name|T32
operator|>
name|class
name|ValueArray32
block|{
name|public
operator|:
name|ValueArray32
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|,
argument|T14 v14
argument_list|,
argument|T15 v15
argument_list|,
argument|T16 v16
argument_list|,
argument|T17 v17
argument_list|,
argument|T18 v18
argument_list|,
argument|T19 v19
argument_list|,
argument|T20 v20
argument_list|,
argument|T21 v21
argument_list|,
argument|T22 v22
argument_list|,
argument|T23 v23
argument_list|,
argument|T24 v24
argument_list|,
argument|T25 v25
argument_list|,
argument|T26 v26
argument_list|,
argument|T27 v27
argument_list|,
argument|T28 v28
argument_list|,
argument|T29 v29
argument_list|,
argument|T30 v30
argument_list|,
argument|T31 v31
argument_list|,
argument|T32 v32
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
name|v13
argument_list|)
block|,
name|v14_
argument_list|(
name|v14
argument_list|)
block|,
name|v15_
argument_list|(
name|v15
argument_list|)
block|,
name|v16_
argument_list|(
name|v16
argument_list|)
block|,
name|v17_
argument_list|(
name|v17
argument_list|)
block|,
name|v18_
argument_list|(
name|v18
argument_list|)
block|,
name|v19_
argument_list|(
name|v19
argument_list|)
block|,
name|v20_
argument_list|(
name|v20
argument_list|)
block|,
name|v21_
argument_list|(
name|v21
argument_list|)
block|,
name|v22_
argument_list|(
name|v22
argument_list|)
block|,
name|v23_
argument_list|(
name|v23
argument_list|)
block|,
name|v24_
argument_list|(
name|v24
argument_list|)
block|,
name|v25_
argument_list|(
name|v25
argument_list|)
block|,
name|v26_
argument_list|(
name|v26
argument_list|)
block|,
name|v27_
argument_list|(
name|v27
argument_list|)
block|,
name|v28_
argument_list|(
name|v28
argument_list|)
block|,
name|v29_
argument_list|(
name|v29
argument_list|)
block|,
name|v30_
argument_list|(
name|v30
argument_list|)
block|,
name|v31_
argument_list|(
name|v31
argument_list|)
block|,
name|v32_
argument_list|(
argument|v32
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|,
name|v14_
block|,
name|v15_
block|,
name|v16_
block|,
name|v17_
block|,
name|v18_
block|,
name|v19_
block|,
name|v20_
block|,
name|v21_
block|,
name|v22_
block|,
name|v23_
block|,
name|v24_
block|,
name|v25_
block|,
name|v26_
block|,
name|v27_
block|,
name|v28_
block|,
name|v29_
block|,
name|v30_
block|,
name|v31_
block|,
name|v32_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|;
specifier|const
name|T14
name|v14_
block|;
specifier|const
name|T15
name|v15_
block|;
specifier|const
name|T16
name|v16_
block|;
specifier|const
name|T17
name|v17_
block|;
specifier|const
name|T18
name|v18_
block|;
specifier|const
name|T19
name|v19_
block|;
specifier|const
name|T20
name|v20_
block|;
specifier|const
name|T21
name|v21_
block|;
specifier|const
name|T22
name|v22_
block|;
specifier|const
name|T23
name|v23_
block|;
specifier|const
name|T24
name|v24_
block|;
specifier|const
name|T25
name|v25_
block|;
specifier|const
name|T26
name|v26_
block|;
specifier|const
name|T27
name|v27_
block|;
specifier|const
name|T28
name|v28_
block|;
specifier|const
name|T29
name|v29_
block|;
specifier|const
name|T30
name|v30_
block|;
specifier|const
name|T31
name|v31_
block|;
specifier|const
name|T32
name|v32_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|,
name|typename
name|T14
operator|,
name|typename
name|T15
operator|,
name|typename
name|T16
operator|,
name|typename
name|T17
operator|,
name|typename
name|T18
operator|,
name|typename
name|T19
operator|,
name|typename
name|T20
operator|,
name|typename
name|T21
operator|,
name|typename
name|T22
operator|,
name|typename
name|T23
operator|,
name|typename
name|T24
operator|,
name|typename
name|T25
operator|,
name|typename
name|T26
operator|,
name|typename
name|T27
operator|,
name|typename
name|T28
operator|,
name|typename
name|T29
operator|,
name|typename
name|T30
operator|,
name|typename
name|T31
operator|,
name|typename
name|T32
operator|,
name|typename
name|T33
operator|>
name|class
name|ValueArray33
block|{
name|public
operator|:
name|ValueArray33
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|,
argument|T14 v14
argument_list|,
argument|T15 v15
argument_list|,
argument|T16 v16
argument_list|,
argument|T17 v17
argument_list|,
argument|T18 v18
argument_list|,
argument|T19 v19
argument_list|,
argument|T20 v20
argument_list|,
argument|T21 v21
argument_list|,
argument|T22 v22
argument_list|,
argument|T23 v23
argument_list|,
argument|T24 v24
argument_list|,
argument|T25 v25
argument_list|,
argument|T26 v26
argument_list|,
argument|T27 v27
argument_list|,
argument|T28 v28
argument_list|,
argument|T29 v29
argument_list|,
argument|T30 v30
argument_list|,
argument|T31 v31
argument_list|,
argument|T32 v32
argument_list|,
argument|T33 v33
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
name|v13
argument_list|)
block|,
name|v14_
argument_list|(
name|v14
argument_list|)
block|,
name|v15_
argument_list|(
name|v15
argument_list|)
block|,
name|v16_
argument_list|(
name|v16
argument_list|)
block|,
name|v17_
argument_list|(
name|v17
argument_list|)
block|,
name|v18_
argument_list|(
name|v18
argument_list|)
block|,
name|v19_
argument_list|(
name|v19
argument_list|)
block|,
name|v20_
argument_list|(
name|v20
argument_list|)
block|,
name|v21_
argument_list|(
name|v21
argument_list|)
block|,
name|v22_
argument_list|(
name|v22
argument_list|)
block|,
name|v23_
argument_list|(
name|v23
argument_list|)
block|,
name|v24_
argument_list|(
name|v24
argument_list|)
block|,
name|v25_
argument_list|(
name|v25
argument_list|)
block|,
name|v26_
argument_list|(
name|v26
argument_list|)
block|,
name|v27_
argument_list|(
name|v27
argument_list|)
block|,
name|v28_
argument_list|(
name|v28
argument_list|)
block|,
name|v29_
argument_list|(
name|v29
argument_list|)
block|,
name|v30_
argument_list|(
name|v30
argument_list|)
block|,
name|v31_
argument_list|(
name|v31
argument_list|)
block|,
name|v32_
argument_list|(
name|v32
argument_list|)
block|,
name|v33_
argument_list|(
argument|v33
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|,
name|v14_
block|,
name|v15_
block|,
name|v16_
block|,
name|v17_
block|,
name|v18_
block|,
name|v19_
block|,
name|v20_
block|,
name|v21_
block|,
name|v22_
block|,
name|v23_
block|,
name|v24_
block|,
name|v25_
block|,
name|v26_
block|,
name|v27_
block|,
name|v28_
block|,
name|v29_
block|,
name|v30_
block|,
name|v31_
block|,
name|v32_
block|,
name|v33_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|;
specifier|const
name|T14
name|v14_
block|;
specifier|const
name|T15
name|v15_
block|;
specifier|const
name|T16
name|v16_
block|;
specifier|const
name|T17
name|v17_
block|;
specifier|const
name|T18
name|v18_
block|;
specifier|const
name|T19
name|v19_
block|;
specifier|const
name|T20
name|v20_
block|;
specifier|const
name|T21
name|v21_
block|;
specifier|const
name|T22
name|v22_
block|;
specifier|const
name|T23
name|v23_
block|;
specifier|const
name|T24
name|v24_
block|;
specifier|const
name|T25
name|v25_
block|;
specifier|const
name|T26
name|v26_
block|;
specifier|const
name|T27
name|v27_
block|;
specifier|const
name|T28
name|v28_
block|;
specifier|const
name|T29
name|v29_
block|;
specifier|const
name|T30
name|v30_
block|;
specifier|const
name|T31
name|v31_
block|;
specifier|const
name|T32
name|v32_
block|;
specifier|const
name|T33
name|v33_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|,
name|typename
name|T14
operator|,
name|typename
name|T15
operator|,
name|typename
name|T16
operator|,
name|typename
name|T17
operator|,
name|typename
name|T18
operator|,
name|typename
name|T19
operator|,
name|typename
name|T20
operator|,
name|typename
name|T21
operator|,
name|typename
name|T22
operator|,
name|typename
name|T23
operator|,
name|typename
name|T24
operator|,
name|typename
name|T25
operator|,
name|typename
name|T26
operator|,
name|typename
name|T27
operator|,
name|typename
name|T28
operator|,
name|typename
name|T29
operator|,
name|typename
name|T30
operator|,
name|typename
name|T31
operator|,
name|typename
name|T32
operator|,
name|typename
name|T33
operator|,
name|typename
name|T34
operator|>
name|class
name|ValueArray34
block|{
name|public
operator|:
name|ValueArray34
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|,
argument|T14 v14
argument_list|,
argument|T15 v15
argument_list|,
argument|T16 v16
argument_list|,
argument|T17 v17
argument_list|,
argument|T18 v18
argument_list|,
argument|T19 v19
argument_list|,
argument|T20 v20
argument_list|,
argument|T21 v21
argument_list|,
argument|T22 v22
argument_list|,
argument|T23 v23
argument_list|,
argument|T24 v24
argument_list|,
argument|T25 v25
argument_list|,
argument|T26 v26
argument_list|,
argument|T27 v27
argument_list|,
argument|T28 v28
argument_list|,
argument|T29 v29
argument_list|,
argument|T30 v30
argument_list|,
argument|T31 v31
argument_list|,
argument|T32 v32
argument_list|,
argument|T33 v33
argument_list|,
argument|T34 v34
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
name|v13
argument_list|)
block|,
name|v14_
argument_list|(
name|v14
argument_list|)
block|,
name|v15_
argument_list|(
name|v15
argument_list|)
block|,
name|v16_
argument_list|(
name|v16
argument_list|)
block|,
name|v17_
argument_list|(
name|v17
argument_list|)
block|,
name|v18_
argument_list|(
name|v18
argument_list|)
block|,
name|v19_
argument_list|(
name|v19
argument_list|)
block|,
name|v20_
argument_list|(
name|v20
argument_list|)
block|,
name|v21_
argument_list|(
name|v21
argument_list|)
block|,
name|v22_
argument_list|(
name|v22
argument_list|)
block|,
name|v23_
argument_list|(
name|v23
argument_list|)
block|,
name|v24_
argument_list|(
name|v24
argument_list|)
block|,
name|v25_
argument_list|(
name|v25
argument_list|)
block|,
name|v26_
argument_list|(
name|v26
argument_list|)
block|,
name|v27_
argument_list|(
name|v27
argument_list|)
block|,
name|v28_
argument_list|(
name|v28
argument_list|)
block|,
name|v29_
argument_list|(
name|v29
argument_list|)
block|,
name|v30_
argument_list|(
name|v30
argument_list|)
block|,
name|v31_
argument_list|(
name|v31
argument_list|)
block|,
name|v32_
argument_list|(
name|v32
argument_list|)
block|,
name|v33_
argument_list|(
name|v33
argument_list|)
block|,
name|v34_
argument_list|(
argument|v34
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|,
name|v14_
block|,
name|v15_
block|,
name|v16_
block|,
name|v17_
block|,
name|v18_
block|,
name|v19_
block|,
name|v20_
block|,
name|v21_
block|,
name|v22_
block|,
name|v23_
block|,
name|v24_
block|,
name|v25_
block|,
name|v26_
block|,
name|v27_
block|,
name|v28_
block|,
name|v29_
block|,
name|v30_
block|,
name|v31_
block|,
name|v32_
block|,
name|v33_
block|,
name|v34_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|;
specifier|const
name|T14
name|v14_
block|;
specifier|const
name|T15
name|v15_
block|;
specifier|const
name|T16
name|v16_
block|;
specifier|const
name|T17
name|v17_
block|;
specifier|const
name|T18
name|v18_
block|;
specifier|const
name|T19
name|v19_
block|;
specifier|const
name|T20
name|v20_
block|;
specifier|const
name|T21
name|v21_
block|;
specifier|const
name|T22
name|v22_
block|;
specifier|const
name|T23
name|v23_
block|;
specifier|const
name|T24
name|v24_
block|;
specifier|const
name|T25
name|v25_
block|;
specifier|const
name|T26
name|v26_
block|;
specifier|const
name|T27
name|v27_
block|;
specifier|const
name|T28
name|v28_
block|;
specifier|const
name|T29
name|v29_
block|;
specifier|const
name|T30
name|v30_
block|;
specifier|const
name|T31
name|v31_
block|;
specifier|const
name|T32
name|v32_
block|;
specifier|const
name|T33
name|v33_
block|;
specifier|const
name|T34
name|v34_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|,
name|typename
name|T14
operator|,
name|typename
name|T15
operator|,
name|typename
name|T16
operator|,
name|typename
name|T17
operator|,
name|typename
name|T18
operator|,
name|typename
name|T19
operator|,
name|typename
name|T20
operator|,
name|typename
name|T21
operator|,
name|typename
name|T22
operator|,
name|typename
name|T23
operator|,
name|typename
name|T24
operator|,
name|typename
name|T25
operator|,
name|typename
name|T26
operator|,
name|typename
name|T27
operator|,
name|typename
name|T28
operator|,
name|typename
name|T29
operator|,
name|typename
name|T30
operator|,
name|typename
name|T31
operator|,
name|typename
name|T32
operator|,
name|typename
name|T33
operator|,
name|typename
name|T34
operator|,
name|typename
name|T35
operator|>
name|class
name|ValueArray35
block|{
name|public
operator|:
name|ValueArray35
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|,
argument|T14 v14
argument_list|,
argument|T15 v15
argument_list|,
argument|T16 v16
argument_list|,
argument|T17 v17
argument_list|,
argument|T18 v18
argument_list|,
argument|T19 v19
argument_list|,
argument|T20 v20
argument_list|,
argument|T21 v21
argument_list|,
argument|T22 v22
argument_list|,
argument|T23 v23
argument_list|,
argument|T24 v24
argument_list|,
argument|T25 v25
argument_list|,
argument|T26 v26
argument_list|,
argument|T27 v27
argument_list|,
argument|T28 v28
argument_list|,
argument|T29 v29
argument_list|,
argument|T30 v30
argument_list|,
argument|T31 v31
argument_list|,
argument|T32 v32
argument_list|,
argument|T33 v33
argument_list|,
argument|T34 v34
argument_list|,
argument|T35 v35
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
name|v13
argument_list|)
block|,
name|v14_
argument_list|(
name|v14
argument_list|)
block|,
name|v15_
argument_list|(
name|v15
argument_list|)
block|,
name|v16_
argument_list|(
name|v16
argument_list|)
block|,
name|v17_
argument_list|(
name|v17
argument_list|)
block|,
name|v18_
argument_list|(
name|v18
argument_list|)
block|,
name|v19_
argument_list|(
name|v19
argument_list|)
block|,
name|v20_
argument_list|(
name|v20
argument_list|)
block|,
name|v21_
argument_list|(
name|v21
argument_list|)
block|,
name|v22_
argument_list|(
name|v22
argument_list|)
block|,
name|v23_
argument_list|(
name|v23
argument_list|)
block|,
name|v24_
argument_list|(
name|v24
argument_list|)
block|,
name|v25_
argument_list|(
name|v25
argument_list|)
block|,
name|v26_
argument_list|(
name|v26
argument_list|)
block|,
name|v27_
argument_list|(
name|v27
argument_list|)
block|,
name|v28_
argument_list|(
name|v28
argument_list|)
block|,
name|v29_
argument_list|(
name|v29
argument_list|)
block|,
name|v30_
argument_list|(
name|v30
argument_list|)
block|,
name|v31_
argument_list|(
name|v31
argument_list|)
block|,
name|v32_
argument_list|(
name|v32
argument_list|)
block|,
name|v33_
argument_list|(
name|v33
argument_list|)
block|,
name|v34_
argument_list|(
name|v34
argument_list|)
block|,
name|v35_
argument_list|(
argument|v35
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|,
name|v14_
block|,
name|v15_
block|,
name|v16_
block|,
name|v17_
block|,
name|v18_
block|,
name|v19_
block|,
name|v20_
block|,
name|v21_
block|,
name|v22_
block|,
name|v23_
block|,
name|v24_
block|,
name|v25_
block|,
name|v26_
block|,
name|v27_
block|,
name|v28_
block|,
name|v29_
block|,
name|v30_
block|,
name|v31_
block|,
name|v32_
block|,
name|v33_
block|,
name|v34_
block|,
name|v35_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|;
specifier|const
name|T14
name|v14_
block|;
specifier|const
name|T15
name|v15_
block|;
specifier|const
name|T16
name|v16_
block|;
specifier|const
name|T17
name|v17_
block|;
specifier|const
name|T18
name|v18_
block|;
specifier|const
name|T19
name|v19_
block|;
specifier|const
name|T20
name|v20_
block|;
specifier|const
name|T21
name|v21_
block|;
specifier|const
name|T22
name|v22_
block|;
specifier|const
name|T23
name|v23_
block|;
specifier|const
name|T24
name|v24_
block|;
specifier|const
name|T25
name|v25_
block|;
specifier|const
name|T26
name|v26_
block|;
specifier|const
name|T27
name|v27_
block|;
specifier|const
name|T28
name|v28_
block|;
specifier|const
name|T29
name|v29_
block|;
specifier|const
name|T30
name|v30_
block|;
specifier|const
name|T31
name|v31_
block|;
specifier|const
name|T32
name|v32_
block|;
specifier|const
name|T33
name|v33_
block|;
specifier|const
name|T34
name|v34_
block|;
specifier|const
name|T35
name|v35_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|,
name|typename
name|T14
operator|,
name|typename
name|T15
operator|,
name|typename
name|T16
operator|,
name|typename
name|T17
operator|,
name|typename
name|T18
operator|,
name|typename
name|T19
operator|,
name|typename
name|T20
operator|,
name|typename
name|T21
operator|,
name|typename
name|T22
operator|,
name|typename
name|T23
operator|,
name|typename
name|T24
operator|,
name|typename
name|T25
operator|,
name|typename
name|T26
operator|,
name|typename
name|T27
operator|,
name|typename
name|T28
operator|,
name|typename
name|T29
operator|,
name|typename
name|T30
operator|,
name|typename
name|T31
operator|,
name|typename
name|T32
operator|,
name|typename
name|T33
operator|,
name|typename
name|T34
operator|,
name|typename
name|T35
operator|,
name|typename
name|T36
operator|>
name|class
name|ValueArray36
block|{
name|public
operator|:
name|ValueArray36
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|,
argument|T14 v14
argument_list|,
argument|T15 v15
argument_list|,
argument|T16 v16
argument_list|,
argument|T17 v17
argument_list|,
argument|T18 v18
argument_list|,
argument|T19 v19
argument_list|,
argument|T20 v20
argument_list|,
argument|T21 v21
argument_list|,
argument|T22 v22
argument_list|,
argument|T23 v23
argument_list|,
argument|T24 v24
argument_list|,
argument|T25 v25
argument_list|,
argument|T26 v26
argument_list|,
argument|T27 v27
argument_list|,
argument|T28 v28
argument_list|,
argument|T29 v29
argument_list|,
argument|T30 v30
argument_list|,
argument|T31 v31
argument_list|,
argument|T32 v32
argument_list|,
argument|T33 v33
argument_list|,
argument|T34 v34
argument_list|,
argument|T35 v35
argument_list|,
argument|T36 v36
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
name|v13
argument_list|)
block|,
name|v14_
argument_list|(
name|v14
argument_list|)
block|,
name|v15_
argument_list|(
name|v15
argument_list|)
block|,
name|v16_
argument_list|(
name|v16
argument_list|)
block|,
name|v17_
argument_list|(
name|v17
argument_list|)
block|,
name|v18_
argument_list|(
name|v18
argument_list|)
block|,
name|v19_
argument_list|(
name|v19
argument_list|)
block|,
name|v20_
argument_list|(
name|v20
argument_list|)
block|,
name|v21_
argument_list|(
name|v21
argument_list|)
block|,
name|v22_
argument_list|(
name|v22
argument_list|)
block|,
name|v23_
argument_list|(
name|v23
argument_list|)
block|,
name|v24_
argument_list|(
name|v24
argument_list|)
block|,
name|v25_
argument_list|(
name|v25
argument_list|)
block|,
name|v26_
argument_list|(
name|v26
argument_list|)
block|,
name|v27_
argument_list|(
name|v27
argument_list|)
block|,
name|v28_
argument_list|(
name|v28
argument_list|)
block|,
name|v29_
argument_list|(
name|v29
argument_list|)
block|,
name|v30_
argument_list|(
name|v30
argument_list|)
block|,
name|v31_
argument_list|(
name|v31
argument_list|)
block|,
name|v32_
argument_list|(
name|v32
argument_list|)
block|,
name|v33_
argument_list|(
name|v33
argument_list|)
block|,
name|v34_
argument_list|(
name|v34
argument_list|)
block|,
name|v35_
argument_list|(
name|v35
argument_list|)
block|,
name|v36_
argument_list|(
argument|v36
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|,
name|v14_
block|,
name|v15_
block|,
name|v16_
block|,
name|v17_
block|,
name|v18_
block|,
name|v19_
block|,
name|v20_
block|,
name|v21_
block|,
name|v22_
block|,
name|v23_
block|,
name|v24_
block|,
name|v25_
block|,
name|v26_
block|,
name|v27_
block|,
name|v28_
block|,
name|v29_
block|,
name|v30_
block|,
name|v31_
block|,
name|v32_
block|,
name|v33_
block|,
name|v34_
block|,
name|v35_
block|,
name|v36_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|;
specifier|const
name|T14
name|v14_
block|;
specifier|const
name|T15
name|v15_
block|;
specifier|const
name|T16
name|v16_
block|;
specifier|const
name|T17
name|v17_
block|;
specifier|const
name|T18
name|v18_
block|;
specifier|const
name|T19
name|v19_
block|;
specifier|const
name|T20
name|v20_
block|;
specifier|const
name|T21
name|v21_
block|;
specifier|const
name|T22
name|v22_
block|;
specifier|const
name|T23
name|v23_
block|;
specifier|const
name|T24
name|v24_
block|;
specifier|const
name|T25
name|v25_
block|;
specifier|const
name|T26
name|v26_
block|;
specifier|const
name|T27
name|v27_
block|;
specifier|const
name|T28
name|v28_
block|;
specifier|const
name|T29
name|v29_
block|;
specifier|const
name|T30
name|v30_
block|;
specifier|const
name|T31
name|v31_
block|;
specifier|const
name|T32
name|v32_
block|;
specifier|const
name|T33
name|v33_
block|;
specifier|const
name|T34
name|v34_
block|;
specifier|const
name|T35
name|v35_
block|;
specifier|const
name|T36
name|v36_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|,
name|typename
name|T14
operator|,
name|typename
name|T15
operator|,
name|typename
name|T16
operator|,
name|typename
name|T17
operator|,
name|typename
name|T18
operator|,
name|typename
name|T19
operator|,
name|typename
name|T20
operator|,
name|typename
name|T21
operator|,
name|typename
name|T22
operator|,
name|typename
name|T23
operator|,
name|typename
name|T24
operator|,
name|typename
name|T25
operator|,
name|typename
name|T26
operator|,
name|typename
name|T27
operator|,
name|typename
name|T28
operator|,
name|typename
name|T29
operator|,
name|typename
name|T30
operator|,
name|typename
name|T31
operator|,
name|typename
name|T32
operator|,
name|typename
name|T33
operator|,
name|typename
name|T34
operator|,
name|typename
name|T35
operator|,
name|typename
name|T36
operator|,
name|typename
name|T37
operator|>
name|class
name|ValueArray37
block|{
name|public
operator|:
name|ValueArray37
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|,
argument|T14 v14
argument_list|,
argument|T15 v15
argument_list|,
argument|T16 v16
argument_list|,
argument|T17 v17
argument_list|,
argument|T18 v18
argument_list|,
argument|T19 v19
argument_list|,
argument|T20 v20
argument_list|,
argument|T21 v21
argument_list|,
argument|T22 v22
argument_list|,
argument|T23 v23
argument_list|,
argument|T24 v24
argument_list|,
argument|T25 v25
argument_list|,
argument|T26 v26
argument_list|,
argument|T27 v27
argument_list|,
argument|T28 v28
argument_list|,
argument|T29 v29
argument_list|,
argument|T30 v30
argument_list|,
argument|T31 v31
argument_list|,
argument|T32 v32
argument_list|,
argument|T33 v33
argument_list|,
argument|T34 v34
argument_list|,
argument|T35 v35
argument_list|,
argument|T36 v36
argument_list|,
argument|T37 v37
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
name|v13
argument_list|)
block|,
name|v14_
argument_list|(
name|v14
argument_list|)
block|,
name|v15_
argument_list|(
name|v15
argument_list|)
block|,
name|v16_
argument_list|(
name|v16
argument_list|)
block|,
name|v17_
argument_list|(
name|v17
argument_list|)
block|,
name|v18_
argument_list|(
name|v18
argument_list|)
block|,
name|v19_
argument_list|(
name|v19
argument_list|)
block|,
name|v20_
argument_list|(
name|v20
argument_list|)
block|,
name|v21_
argument_list|(
name|v21
argument_list|)
block|,
name|v22_
argument_list|(
name|v22
argument_list|)
block|,
name|v23_
argument_list|(
name|v23
argument_list|)
block|,
name|v24_
argument_list|(
name|v24
argument_list|)
block|,
name|v25_
argument_list|(
name|v25
argument_list|)
block|,
name|v26_
argument_list|(
name|v26
argument_list|)
block|,
name|v27_
argument_list|(
name|v27
argument_list|)
block|,
name|v28_
argument_list|(
name|v28
argument_list|)
block|,
name|v29_
argument_list|(
name|v29
argument_list|)
block|,
name|v30_
argument_list|(
name|v30
argument_list|)
block|,
name|v31_
argument_list|(
name|v31
argument_list|)
block|,
name|v32_
argument_list|(
name|v32
argument_list|)
block|,
name|v33_
argument_list|(
name|v33
argument_list|)
block|,
name|v34_
argument_list|(
name|v34
argument_list|)
block|,
name|v35_
argument_list|(
name|v35
argument_list|)
block|,
name|v36_
argument_list|(
name|v36
argument_list|)
block|,
name|v37_
argument_list|(
argument|v37
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|,
name|v14_
block|,
name|v15_
block|,
name|v16_
block|,
name|v17_
block|,
name|v18_
block|,
name|v19_
block|,
name|v20_
block|,
name|v21_
block|,
name|v22_
block|,
name|v23_
block|,
name|v24_
block|,
name|v25_
block|,
name|v26_
block|,
name|v27_
block|,
name|v28_
block|,
name|v29_
block|,
name|v30_
block|,
name|v31_
block|,
name|v32_
block|,
name|v33_
block|,
name|v34_
block|,
name|v35_
block|,
name|v36_
block|,
name|v37_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|;
specifier|const
name|T14
name|v14_
block|;
specifier|const
name|T15
name|v15_
block|;
specifier|const
name|T16
name|v16_
block|;
specifier|const
name|T17
name|v17_
block|;
specifier|const
name|T18
name|v18_
block|;
specifier|const
name|T19
name|v19_
block|;
specifier|const
name|T20
name|v20_
block|;
specifier|const
name|T21
name|v21_
block|;
specifier|const
name|T22
name|v22_
block|;
specifier|const
name|T23
name|v23_
block|;
specifier|const
name|T24
name|v24_
block|;
specifier|const
name|T25
name|v25_
block|;
specifier|const
name|T26
name|v26_
block|;
specifier|const
name|T27
name|v27_
block|;
specifier|const
name|T28
name|v28_
block|;
specifier|const
name|T29
name|v29_
block|;
specifier|const
name|T30
name|v30_
block|;
specifier|const
name|T31
name|v31_
block|;
specifier|const
name|T32
name|v32_
block|;
specifier|const
name|T33
name|v33_
block|;
specifier|const
name|T34
name|v34_
block|;
specifier|const
name|T35
name|v35_
block|;
specifier|const
name|T36
name|v36_
block|;
specifier|const
name|T37
name|v37_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|,
name|typename
name|T14
operator|,
name|typename
name|T15
operator|,
name|typename
name|T16
operator|,
name|typename
name|T17
operator|,
name|typename
name|T18
operator|,
name|typename
name|T19
operator|,
name|typename
name|T20
operator|,
name|typename
name|T21
operator|,
name|typename
name|T22
operator|,
name|typename
name|T23
operator|,
name|typename
name|T24
operator|,
name|typename
name|T25
operator|,
name|typename
name|T26
operator|,
name|typename
name|T27
operator|,
name|typename
name|T28
operator|,
name|typename
name|T29
operator|,
name|typename
name|T30
operator|,
name|typename
name|T31
operator|,
name|typename
name|T32
operator|,
name|typename
name|T33
operator|,
name|typename
name|T34
operator|,
name|typename
name|T35
operator|,
name|typename
name|T36
operator|,
name|typename
name|T37
operator|,
name|typename
name|T38
operator|>
name|class
name|ValueArray38
block|{
name|public
operator|:
name|ValueArray38
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|,
argument|T14 v14
argument_list|,
argument|T15 v15
argument_list|,
argument|T16 v16
argument_list|,
argument|T17 v17
argument_list|,
argument|T18 v18
argument_list|,
argument|T19 v19
argument_list|,
argument|T20 v20
argument_list|,
argument|T21 v21
argument_list|,
argument|T22 v22
argument_list|,
argument|T23 v23
argument_list|,
argument|T24 v24
argument_list|,
argument|T25 v25
argument_list|,
argument|T26 v26
argument_list|,
argument|T27 v27
argument_list|,
argument|T28 v28
argument_list|,
argument|T29 v29
argument_list|,
argument|T30 v30
argument_list|,
argument|T31 v31
argument_list|,
argument|T32 v32
argument_list|,
argument|T33 v33
argument_list|,
argument|T34 v34
argument_list|,
argument|T35 v35
argument_list|,
argument|T36 v36
argument_list|,
argument|T37 v37
argument_list|,
argument|T38 v38
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
name|v13
argument_list|)
block|,
name|v14_
argument_list|(
name|v14
argument_list|)
block|,
name|v15_
argument_list|(
name|v15
argument_list|)
block|,
name|v16_
argument_list|(
name|v16
argument_list|)
block|,
name|v17_
argument_list|(
name|v17
argument_list|)
block|,
name|v18_
argument_list|(
name|v18
argument_list|)
block|,
name|v19_
argument_list|(
name|v19
argument_list|)
block|,
name|v20_
argument_list|(
name|v20
argument_list|)
block|,
name|v21_
argument_list|(
name|v21
argument_list|)
block|,
name|v22_
argument_list|(
name|v22
argument_list|)
block|,
name|v23_
argument_list|(
name|v23
argument_list|)
block|,
name|v24_
argument_list|(
name|v24
argument_list|)
block|,
name|v25_
argument_list|(
name|v25
argument_list|)
block|,
name|v26_
argument_list|(
name|v26
argument_list|)
block|,
name|v27_
argument_list|(
name|v27
argument_list|)
block|,
name|v28_
argument_list|(
name|v28
argument_list|)
block|,
name|v29_
argument_list|(
name|v29
argument_list|)
block|,
name|v30_
argument_list|(
name|v30
argument_list|)
block|,
name|v31_
argument_list|(
name|v31
argument_list|)
block|,
name|v32_
argument_list|(
name|v32
argument_list|)
block|,
name|v33_
argument_list|(
name|v33
argument_list|)
block|,
name|v34_
argument_list|(
name|v34
argument_list|)
block|,
name|v35_
argument_list|(
name|v35
argument_list|)
block|,
name|v36_
argument_list|(
name|v36
argument_list|)
block|,
name|v37_
argument_list|(
name|v37
argument_list|)
block|,
name|v38_
argument_list|(
argument|v38
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|,
name|v14_
block|,
name|v15_
block|,
name|v16_
block|,
name|v17_
block|,
name|v18_
block|,
name|v19_
block|,
name|v20_
block|,
name|v21_
block|,
name|v22_
block|,
name|v23_
block|,
name|v24_
block|,
name|v25_
block|,
name|v26_
block|,
name|v27_
block|,
name|v28_
block|,
name|v29_
block|,
name|v30_
block|,
name|v31_
block|,
name|v32_
block|,
name|v33_
block|,
name|v34_
block|,
name|v35_
block|,
name|v36_
block|,
name|v37_
block|,
name|v38_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|;
specifier|const
name|T14
name|v14_
block|;
specifier|const
name|T15
name|v15_
block|;
specifier|const
name|T16
name|v16_
block|;
specifier|const
name|T17
name|v17_
block|;
specifier|const
name|T18
name|v18_
block|;
specifier|const
name|T19
name|v19_
block|;
specifier|const
name|T20
name|v20_
block|;
specifier|const
name|T21
name|v21_
block|;
specifier|const
name|T22
name|v22_
block|;
specifier|const
name|T23
name|v23_
block|;
specifier|const
name|T24
name|v24_
block|;
specifier|const
name|T25
name|v25_
block|;
specifier|const
name|T26
name|v26_
block|;
specifier|const
name|T27
name|v27_
block|;
specifier|const
name|T28
name|v28_
block|;
specifier|const
name|T29
name|v29_
block|;
specifier|const
name|T30
name|v30_
block|;
specifier|const
name|T31
name|v31_
block|;
specifier|const
name|T32
name|v32_
block|;
specifier|const
name|T33
name|v33_
block|;
specifier|const
name|T34
name|v34_
block|;
specifier|const
name|T35
name|v35_
block|;
specifier|const
name|T36
name|v36_
block|;
specifier|const
name|T37
name|v37_
block|;
specifier|const
name|T38
name|v38_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|,
name|typename
name|T14
operator|,
name|typename
name|T15
operator|,
name|typename
name|T16
operator|,
name|typename
name|T17
operator|,
name|typename
name|T18
operator|,
name|typename
name|T19
operator|,
name|typename
name|T20
operator|,
name|typename
name|T21
operator|,
name|typename
name|T22
operator|,
name|typename
name|T23
operator|,
name|typename
name|T24
operator|,
name|typename
name|T25
operator|,
name|typename
name|T26
operator|,
name|typename
name|T27
operator|,
name|typename
name|T28
operator|,
name|typename
name|T29
operator|,
name|typename
name|T30
operator|,
name|typename
name|T31
operator|,
name|typename
name|T32
operator|,
name|typename
name|T33
operator|,
name|typename
name|T34
operator|,
name|typename
name|T35
operator|,
name|typename
name|T36
operator|,
name|typename
name|T37
operator|,
name|typename
name|T38
operator|,
name|typename
name|T39
operator|>
name|class
name|ValueArray39
block|{
name|public
operator|:
name|ValueArray39
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|,
argument|T14 v14
argument_list|,
argument|T15 v15
argument_list|,
argument|T16 v16
argument_list|,
argument|T17 v17
argument_list|,
argument|T18 v18
argument_list|,
argument|T19 v19
argument_list|,
argument|T20 v20
argument_list|,
argument|T21 v21
argument_list|,
argument|T22 v22
argument_list|,
argument|T23 v23
argument_list|,
argument|T24 v24
argument_list|,
argument|T25 v25
argument_list|,
argument|T26 v26
argument_list|,
argument|T27 v27
argument_list|,
argument|T28 v28
argument_list|,
argument|T29 v29
argument_list|,
argument|T30 v30
argument_list|,
argument|T31 v31
argument_list|,
argument|T32 v32
argument_list|,
argument|T33 v33
argument_list|,
argument|T34 v34
argument_list|,
argument|T35 v35
argument_list|,
argument|T36 v36
argument_list|,
argument|T37 v37
argument_list|,
argument|T38 v38
argument_list|,
argument|T39 v39
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
name|v13
argument_list|)
block|,
name|v14_
argument_list|(
name|v14
argument_list|)
block|,
name|v15_
argument_list|(
name|v15
argument_list|)
block|,
name|v16_
argument_list|(
name|v16
argument_list|)
block|,
name|v17_
argument_list|(
name|v17
argument_list|)
block|,
name|v18_
argument_list|(
name|v18
argument_list|)
block|,
name|v19_
argument_list|(
name|v19
argument_list|)
block|,
name|v20_
argument_list|(
name|v20
argument_list|)
block|,
name|v21_
argument_list|(
name|v21
argument_list|)
block|,
name|v22_
argument_list|(
name|v22
argument_list|)
block|,
name|v23_
argument_list|(
name|v23
argument_list|)
block|,
name|v24_
argument_list|(
name|v24
argument_list|)
block|,
name|v25_
argument_list|(
name|v25
argument_list|)
block|,
name|v26_
argument_list|(
name|v26
argument_list|)
block|,
name|v27_
argument_list|(
name|v27
argument_list|)
block|,
name|v28_
argument_list|(
name|v28
argument_list|)
block|,
name|v29_
argument_list|(
name|v29
argument_list|)
block|,
name|v30_
argument_list|(
name|v30
argument_list|)
block|,
name|v31_
argument_list|(
name|v31
argument_list|)
block|,
name|v32_
argument_list|(
name|v32
argument_list|)
block|,
name|v33_
argument_list|(
name|v33
argument_list|)
block|,
name|v34_
argument_list|(
name|v34
argument_list|)
block|,
name|v35_
argument_list|(
name|v35
argument_list|)
block|,
name|v36_
argument_list|(
name|v36
argument_list|)
block|,
name|v37_
argument_list|(
name|v37
argument_list|)
block|,
name|v38_
argument_list|(
name|v38
argument_list|)
block|,
name|v39_
argument_list|(
argument|v39
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|,
name|v14_
block|,
name|v15_
block|,
name|v16_
block|,
name|v17_
block|,
name|v18_
block|,
name|v19_
block|,
name|v20_
block|,
name|v21_
block|,
name|v22_
block|,
name|v23_
block|,
name|v24_
block|,
name|v25_
block|,
name|v26_
block|,
name|v27_
block|,
name|v28_
block|,
name|v29_
block|,
name|v30_
block|,
name|v31_
block|,
name|v32_
block|,
name|v33_
block|,
name|v34_
block|,
name|v35_
block|,
name|v36_
block|,
name|v37_
block|,
name|v38_
block|,
name|v39_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|;
specifier|const
name|T14
name|v14_
block|;
specifier|const
name|T15
name|v15_
block|;
specifier|const
name|T16
name|v16_
block|;
specifier|const
name|T17
name|v17_
block|;
specifier|const
name|T18
name|v18_
block|;
specifier|const
name|T19
name|v19_
block|;
specifier|const
name|T20
name|v20_
block|;
specifier|const
name|T21
name|v21_
block|;
specifier|const
name|T22
name|v22_
block|;
specifier|const
name|T23
name|v23_
block|;
specifier|const
name|T24
name|v24_
block|;
specifier|const
name|T25
name|v25_
block|;
specifier|const
name|T26
name|v26_
block|;
specifier|const
name|T27
name|v27_
block|;
specifier|const
name|T28
name|v28_
block|;
specifier|const
name|T29
name|v29_
block|;
specifier|const
name|T30
name|v30_
block|;
specifier|const
name|T31
name|v31_
block|;
specifier|const
name|T32
name|v32_
block|;
specifier|const
name|T33
name|v33_
block|;
specifier|const
name|T34
name|v34_
block|;
specifier|const
name|T35
name|v35_
block|;
specifier|const
name|T36
name|v36_
block|;
specifier|const
name|T37
name|v37_
block|;
specifier|const
name|T38
name|v38_
block|;
specifier|const
name|T39
name|v39_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|,
name|typename
name|T14
operator|,
name|typename
name|T15
operator|,
name|typename
name|T16
operator|,
name|typename
name|T17
operator|,
name|typename
name|T18
operator|,
name|typename
name|T19
operator|,
name|typename
name|T20
operator|,
name|typename
name|T21
operator|,
name|typename
name|T22
operator|,
name|typename
name|T23
operator|,
name|typename
name|T24
operator|,
name|typename
name|T25
operator|,
name|typename
name|T26
operator|,
name|typename
name|T27
operator|,
name|typename
name|T28
operator|,
name|typename
name|T29
operator|,
name|typename
name|T30
operator|,
name|typename
name|T31
operator|,
name|typename
name|T32
operator|,
name|typename
name|T33
operator|,
name|typename
name|T34
operator|,
name|typename
name|T35
operator|,
name|typename
name|T36
operator|,
name|typename
name|T37
operator|,
name|typename
name|T38
operator|,
name|typename
name|T39
operator|,
name|typename
name|T40
operator|>
name|class
name|ValueArray40
block|{
name|public
operator|:
name|ValueArray40
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|,
argument|T14 v14
argument_list|,
argument|T15 v15
argument_list|,
argument|T16 v16
argument_list|,
argument|T17 v17
argument_list|,
argument|T18 v18
argument_list|,
argument|T19 v19
argument_list|,
argument|T20 v20
argument_list|,
argument|T21 v21
argument_list|,
argument|T22 v22
argument_list|,
argument|T23 v23
argument_list|,
argument|T24 v24
argument_list|,
argument|T25 v25
argument_list|,
argument|T26 v26
argument_list|,
argument|T27 v27
argument_list|,
argument|T28 v28
argument_list|,
argument|T29 v29
argument_list|,
argument|T30 v30
argument_list|,
argument|T31 v31
argument_list|,
argument|T32 v32
argument_list|,
argument|T33 v33
argument_list|,
argument|T34 v34
argument_list|,
argument|T35 v35
argument_list|,
argument|T36 v36
argument_list|,
argument|T37 v37
argument_list|,
argument|T38 v38
argument_list|,
argument|T39 v39
argument_list|,
argument|T40 v40
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
name|v13
argument_list|)
block|,
name|v14_
argument_list|(
name|v14
argument_list|)
block|,
name|v15_
argument_list|(
name|v15
argument_list|)
block|,
name|v16_
argument_list|(
name|v16
argument_list|)
block|,
name|v17_
argument_list|(
name|v17
argument_list|)
block|,
name|v18_
argument_list|(
name|v18
argument_list|)
block|,
name|v19_
argument_list|(
name|v19
argument_list|)
block|,
name|v20_
argument_list|(
name|v20
argument_list|)
block|,
name|v21_
argument_list|(
name|v21
argument_list|)
block|,
name|v22_
argument_list|(
name|v22
argument_list|)
block|,
name|v23_
argument_list|(
name|v23
argument_list|)
block|,
name|v24_
argument_list|(
name|v24
argument_list|)
block|,
name|v25_
argument_list|(
name|v25
argument_list|)
block|,
name|v26_
argument_list|(
name|v26
argument_list|)
block|,
name|v27_
argument_list|(
name|v27
argument_list|)
block|,
name|v28_
argument_list|(
name|v28
argument_list|)
block|,
name|v29_
argument_list|(
name|v29
argument_list|)
block|,
name|v30_
argument_list|(
name|v30
argument_list|)
block|,
name|v31_
argument_list|(
name|v31
argument_list|)
block|,
name|v32_
argument_list|(
name|v32
argument_list|)
block|,
name|v33_
argument_list|(
name|v33
argument_list|)
block|,
name|v34_
argument_list|(
name|v34
argument_list|)
block|,
name|v35_
argument_list|(
name|v35
argument_list|)
block|,
name|v36_
argument_list|(
name|v36
argument_list|)
block|,
name|v37_
argument_list|(
name|v37
argument_list|)
block|,
name|v38_
argument_list|(
name|v38
argument_list|)
block|,
name|v39_
argument_list|(
name|v39
argument_list|)
block|,
name|v40_
argument_list|(
argument|v40
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|,
name|v14_
block|,
name|v15_
block|,
name|v16_
block|,
name|v17_
block|,
name|v18_
block|,
name|v19_
block|,
name|v20_
block|,
name|v21_
block|,
name|v22_
block|,
name|v23_
block|,
name|v24_
block|,
name|v25_
block|,
name|v26_
block|,
name|v27_
block|,
name|v28_
block|,
name|v29_
block|,
name|v30_
block|,
name|v31_
block|,
name|v32_
block|,
name|v33_
block|,
name|v34_
block|,
name|v35_
block|,
name|v36_
block|,
name|v37_
block|,
name|v38_
block|,
name|v39_
block|,
name|v40_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|;
specifier|const
name|T14
name|v14_
block|;
specifier|const
name|T15
name|v15_
block|;
specifier|const
name|T16
name|v16_
block|;
specifier|const
name|T17
name|v17_
block|;
specifier|const
name|T18
name|v18_
block|;
specifier|const
name|T19
name|v19_
block|;
specifier|const
name|T20
name|v20_
block|;
specifier|const
name|T21
name|v21_
block|;
specifier|const
name|T22
name|v22_
block|;
specifier|const
name|T23
name|v23_
block|;
specifier|const
name|T24
name|v24_
block|;
specifier|const
name|T25
name|v25_
block|;
specifier|const
name|T26
name|v26_
block|;
specifier|const
name|T27
name|v27_
block|;
specifier|const
name|T28
name|v28_
block|;
specifier|const
name|T29
name|v29_
block|;
specifier|const
name|T30
name|v30_
block|;
specifier|const
name|T31
name|v31_
block|;
specifier|const
name|T32
name|v32_
block|;
specifier|const
name|T33
name|v33_
block|;
specifier|const
name|T34
name|v34_
block|;
specifier|const
name|T35
name|v35_
block|;
specifier|const
name|T36
name|v36_
block|;
specifier|const
name|T37
name|v37_
block|;
specifier|const
name|T38
name|v38_
block|;
specifier|const
name|T39
name|v39_
block|;
specifier|const
name|T40
name|v40_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|,
name|typename
name|T14
operator|,
name|typename
name|T15
operator|,
name|typename
name|T16
operator|,
name|typename
name|T17
operator|,
name|typename
name|T18
operator|,
name|typename
name|T19
operator|,
name|typename
name|T20
operator|,
name|typename
name|T21
operator|,
name|typename
name|T22
operator|,
name|typename
name|T23
operator|,
name|typename
name|T24
operator|,
name|typename
name|T25
operator|,
name|typename
name|T26
operator|,
name|typename
name|T27
operator|,
name|typename
name|T28
operator|,
name|typename
name|T29
operator|,
name|typename
name|T30
operator|,
name|typename
name|T31
operator|,
name|typename
name|T32
operator|,
name|typename
name|T33
operator|,
name|typename
name|T34
operator|,
name|typename
name|T35
operator|,
name|typename
name|T36
operator|,
name|typename
name|T37
operator|,
name|typename
name|T38
operator|,
name|typename
name|T39
operator|,
name|typename
name|T40
operator|,
name|typename
name|T41
operator|>
name|class
name|ValueArray41
block|{
name|public
operator|:
name|ValueArray41
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|,
argument|T14 v14
argument_list|,
argument|T15 v15
argument_list|,
argument|T16 v16
argument_list|,
argument|T17 v17
argument_list|,
argument|T18 v18
argument_list|,
argument|T19 v19
argument_list|,
argument|T20 v20
argument_list|,
argument|T21 v21
argument_list|,
argument|T22 v22
argument_list|,
argument|T23 v23
argument_list|,
argument|T24 v24
argument_list|,
argument|T25 v25
argument_list|,
argument|T26 v26
argument_list|,
argument|T27 v27
argument_list|,
argument|T28 v28
argument_list|,
argument|T29 v29
argument_list|,
argument|T30 v30
argument_list|,
argument|T31 v31
argument_list|,
argument|T32 v32
argument_list|,
argument|T33 v33
argument_list|,
argument|T34 v34
argument_list|,
argument|T35 v35
argument_list|,
argument|T36 v36
argument_list|,
argument|T37 v37
argument_list|,
argument|T38 v38
argument_list|,
argument|T39 v39
argument_list|,
argument|T40 v40
argument_list|,
argument|T41 v41
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
name|v13
argument_list|)
block|,
name|v14_
argument_list|(
name|v14
argument_list|)
block|,
name|v15_
argument_list|(
name|v15
argument_list|)
block|,
name|v16_
argument_list|(
name|v16
argument_list|)
block|,
name|v17_
argument_list|(
name|v17
argument_list|)
block|,
name|v18_
argument_list|(
name|v18
argument_list|)
block|,
name|v19_
argument_list|(
name|v19
argument_list|)
block|,
name|v20_
argument_list|(
name|v20
argument_list|)
block|,
name|v21_
argument_list|(
name|v21
argument_list|)
block|,
name|v22_
argument_list|(
name|v22
argument_list|)
block|,
name|v23_
argument_list|(
name|v23
argument_list|)
block|,
name|v24_
argument_list|(
name|v24
argument_list|)
block|,
name|v25_
argument_list|(
name|v25
argument_list|)
block|,
name|v26_
argument_list|(
name|v26
argument_list|)
block|,
name|v27_
argument_list|(
name|v27
argument_list|)
block|,
name|v28_
argument_list|(
name|v28
argument_list|)
block|,
name|v29_
argument_list|(
name|v29
argument_list|)
block|,
name|v30_
argument_list|(
name|v30
argument_list|)
block|,
name|v31_
argument_list|(
name|v31
argument_list|)
block|,
name|v32_
argument_list|(
name|v32
argument_list|)
block|,
name|v33_
argument_list|(
name|v33
argument_list|)
block|,
name|v34_
argument_list|(
name|v34
argument_list|)
block|,
name|v35_
argument_list|(
name|v35
argument_list|)
block|,
name|v36_
argument_list|(
name|v36
argument_list|)
block|,
name|v37_
argument_list|(
name|v37
argument_list|)
block|,
name|v38_
argument_list|(
name|v38
argument_list|)
block|,
name|v39_
argument_list|(
name|v39
argument_list|)
block|,
name|v40_
argument_list|(
name|v40
argument_list|)
block|,
name|v41_
argument_list|(
argument|v41
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|,
name|v14_
block|,
name|v15_
block|,
name|v16_
block|,
name|v17_
block|,
name|v18_
block|,
name|v19_
block|,
name|v20_
block|,
name|v21_
block|,
name|v22_
block|,
name|v23_
block|,
name|v24_
block|,
name|v25_
block|,
name|v26_
block|,
name|v27_
block|,
name|v28_
block|,
name|v29_
block|,
name|v30_
block|,
name|v31_
block|,
name|v32_
block|,
name|v33_
block|,
name|v34_
block|,
name|v35_
block|,
name|v36_
block|,
name|v37_
block|,
name|v38_
block|,
name|v39_
block|,
name|v40_
block|,
name|v41_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|;
specifier|const
name|T14
name|v14_
block|;
specifier|const
name|T15
name|v15_
block|;
specifier|const
name|T16
name|v16_
block|;
specifier|const
name|T17
name|v17_
block|;
specifier|const
name|T18
name|v18_
block|;
specifier|const
name|T19
name|v19_
block|;
specifier|const
name|T20
name|v20_
block|;
specifier|const
name|T21
name|v21_
block|;
specifier|const
name|T22
name|v22_
block|;
specifier|const
name|T23
name|v23_
block|;
specifier|const
name|T24
name|v24_
block|;
specifier|const
name|T25
name|v25_
block|;
specifier|const
name|T26
name|v26_
block|;
specifier|const
name|T27
name|v27_
block|;
specifier|const
name|T28
name|v28_
block|;
specifier|const
name|T29
name|v29_
block|;
specifier|const
name|T30
name|v30_
block|;
specifier|const
name|T31
name|v31_
block|;
specifier|const
name|T32
name|v32_
block|;
specifier|const
name|T33
name|v33_
block|;
specifier|const
name|T34
name|v34_
block|;
specifier|const
name|T35
name|v35_
block|;
specifier|const
name|T36
name|v36_
block|;
specifier|const
name|T37
name|v37_
block|;
specifier|const
name|T38
name|v38_
block|;
specifier|const
name|T39
name|v39_
block|;
specifier|const
name|T40
name|v40_
block|;
specifier|const
name|T41
name|v41_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|,
name|typename
name|T14
operator|,
name|typename
name|T15
operator|,
name|typename
name|T16
operator|,
name|typename
name|T17
operator|,
name|typename
name|T18
operator|,
name|typename
name|T19
operator|,
name|typename
name|T20
operator|,
name|typename
name|T21
operator|,
name|typename
name|T22
operator|,
name|typename
name|T23
operator|,
name|typename
name|T24
operator|,
name|typename
name|T25
operator|,
name|typename
name|T26
operator|,
name|typename
name|T27
operator|,
name|typename
name|T28
operator|,
name|typename
name|T29
operator|,
name|typename
name|T30
operator|,
name|typename
name|T31
operator|,
name|typename
name|T32
operator|,
name|typename
name|T33
operator|,
name|typename
name|T34
operator|,
name|typename
name|T35
operator|,
name|typename
name|T36
operator|,
name|typename
name|T37
operator|,
name|typename
name|T38
operator|,
name|typename
name|T39
operator|,
name|typename
name|T40
operator|,
name|typename
name|T41
operator|,
name|typename
name|T42
operator|>
name|class
name|ValueArray42
block|{
name|public
operator|:
name|ValueArray42
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|,
argument|T14 v14
argument_list|,
argument|T15 v15
argument_list|,
argument|T16 v16
argument_list|,
argument|T17 v17
argument_list|,
argument|T18 v18
argument_list|,
argument|T19 v19
argument_list|,
argument|T20 v20
argument_list|,
argument|T21 v21
argument_list|,
argument|T22 v22
argument_list|,
argument|T23 v23
argument_list|,
argument|T24 v24
argument_list|,
argument|T25 v25
argument_list|,
argument|T26 v26
argument_list|,
argument|T27 v27
argument_list|,
argument|T28 v28
argument_list|,
argument|T29 v29
argument_list|,
argument|T30 v30
argument_list|,
argument|T31 v31
argument_list|,
argument|T32 v32
argument_list|,
argument|T33 v33
argument_list|,
argument|T34 v34
argument_list|,
argument|T35 v35
argument_list|,
argument|T36 v36
argument_list|,
argument|T37 v37
argument_list|,
argument|T38 v38
argument_list|,
argument|T39 v39
argument_list|,
argument|T40 v40
argument_list|,
argument|T41 v41
argument_list|,
argument|T42 v42
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
name|v13
argument_list|)
block|,
name|v14_
argument_list|(
name|v14
argument_list|)
block|,
name|v15_
argument_list|(
name|v15
argument_list|)
block|,
name|v16_
argument_list|(
name|v16
argument_list|)
block|,
name|v17_
argument_list|(
name|v17
argument_list|)
block|,
name|v18_
argument_list|(
name|v18
argument_list|)
block|,
name|v19_
argument_list|(
name|v19
argument_list|)
block|,
name|v20_
argument_list|(
name|v20
argument_list|)
block|,
name|v21_
argument_list|(
name|v21
argument_list|)
block|,
name|v22_
argument_list|(
name|v22
argument_list|)
block|,
name|v23_
argument_list|(
name|v23
argument_list|)
block|,
name|v24_
argument_list|(
name|v24
argument_list|)
block|,
name|v25_
argument_list|(
name|v25
argument_list|)
block|,
name|v26_
argument_list|(
name|v26
argument_list|)
block|,
name|v27_
argument_list|(
name|v27
argument_list|)
block|,
name|v28_
argument_list|(
name|v28
argument_list|)
block|,
name|v29_
argument_list|(
name|v29
argument_list|)
block|,
name|v30_
argument_list|(
name|v30
argument_list|)
block|,
name|v31_
argument_list|(
name|v31
argument_list|)
block|,
name|v32_
argument_list|(
name|v32
argument_list|)
block|,
name|v33_
argument_list|(
name|v33
argument_list|)
block|,
name|v34_
argument_list|(
name|v34
argument_list|)
block|,
name|v35_
argument_list|(
name|v35
argument_list|)
block|,
name|v36_
argument_list|(
name|v36
argument_list|)
block|,
name|v37_
argument_list|(
name|v37
argument_list|)
block|,
name|v38_
argument_list|(
name|v38
argument_list|)
block|,
name|v39_
argument_list|(
name|v39
argument_list|)
block|,
name|v40_
argument_list|(
name|v40
argument_list|)
block|,
name|v41_
argument_list|(
name|v41
argument_list|)
block|,
name|v42_
argument_list|(
argument|v42
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|,
name|v14_
block|,
name|v15_
block|,
name|v16_
block|,
name|v17_
block|,
name|v18_
block|,
name|v19_
block|,
name|v20_
block|,
name|v21_
block|,
name|v22_
block|,
name|v23_
block|,
name|v24_
block|,
name|v25_
block|,
name|v26_
block|,
name|v27_
block|,
name|v28_
block|,
name|v29_
block|,
name|v30_
block|,
name|v31_
block|,
name|v32_
block|,
name|v33_
block|,
name|v34_
block|,
name|v35_
block|,
name|v36_
block|,
name|v37_
block|,
name|v38_
block|,
name|v39_
block|,
name|v40_
block|,
name|v41_
block|,
name|v42_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|;
specifier|const
name|T14
name|v14_
block|;
specifier|const
name|T15
name|v15_
block|;
specifier|const
name|T16
name|v16_
block|;
specifier|const
name|T17
name|v17_
block|;
specifier|const
name|T18
name|v18_
block|;
specifier|const
name|T19
name|v19_
block|;
specifier|const
name|T20
name|v20_
block|;
specifier|const
name|T21
name|v21_
block|;
specifier|const
name|T22
name|v22_
block|;
specifier|const
name|T23
name|v23_
block|;
specifier|const
name|T24
name|v24_
block|;
specifier|const
name|T25
name|v25_
block|;
specifier|const
name|T26
name|v26_
block|;
specifier|const
name|T27
name|v27_
block|;
specifier|const
name|T28
name|v28_
block|;
specifier|const
name|T29
name|v29_
block|;
specifier|const
name|T30
name|v30_
block|;
specifier|const
name|T31
name|v31_
block|;
specifier|const
name|T32
name|v32_
block|;
specifier|const
name|T33
name|v33_
block|;
specifier|const
name|T34
name|v34_
block|;
specifier|const
name|T35
name|v35_
block|;
specifier|const
name|T36
name|v36_
block|;
specifier|const
name|T37
name|v37_
block|;
specifier|const
name|T38
name|v38_
block|;
specifier|const
name|T39
name|v39_
block|;
specifier|const
name|T40
name|v40_
block|;
specifier|const
name|T41
name|v41_
block|;
specifier|const
name|T42
name|v42_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|,
name|typename
name|T14
operator|,
name|typename
name|T15
operator|,
name|typename
name|T16
operator|,
name|typename
name|T17
operator|,
name|typename
name|T18
operator|,
name|typename
name|T19
operator|,
name|typename
name|T20
operator|,
name|typename
name|T21
operator|,
name|typename
name|T22
operator|,
name|typename
name|T23
operator|,
name|typename
name|T24
operator|,
name|typename
name|T25
operator|,
name|typename
name|T26
operator|,
name|typename
name|T27
operator|,
name|typename
name|T28
operator|,
name|typename
name|T29
operator|,
name|typename
name|T30
operator|,
name|typename
name|T31
operator|,
name|typename
name|T32
operator|,
name|typename
name|T33
operator|,
name|typename
name|T34
operator|,
name|typename
name|T35
operator|,
name|typename
name|T36
operator|,
name|typename
name|T37
operator|,
name|typename
name|T38
operator|,
name|typename
name|T39
operator|,
name|typename
name|T40
operator|,
name|typename
name|T41
operator|,
name|typename
name|T42
operator|,
name|typename
name|T43
operator|>
name|class
name|ValueArray43
block|{
name|public
operator|:
name|ValueArray43
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|,
argument|T14 v14
argument_list|,
argument|T15 v15
argument_list|,
argument|T16 v16
argument_list|,
argument|T17 v17
argument_list|,
argument|T18 v18
argument_list|,
argument|T19 v19
argument_list|,
argument|T20 v20
argument_list|,
argument|T21 v21
argument_list|,
argument|T22 v22
argument_list|,
argument|T23 v23
argument_list|,
argument|T24 v24
argument_list|,
argument|T25 v25
argument_list|,
argument|T26 v26
argument_list|,
argument|T27 v27
argument_list|,
argument|T28 v28
argument_list|,
argument|T29 v29
argument_list|,
argument|T30 v30
argument_list|,
argument|T31 v31
argument_list|,
argument|T32 v32
argument_list|,
argument|T33 v33
argument_list|,
argument|T34 v34
argument_list|,
argument|T35 v35
argument_list|,
argument|T36 v36
argument_list|,
argument|T37 v37
argument_list|,
argument|T38 v38
argument_list|,
argument|T39 v39
argument_list|,
argument|T40 v40
argument_list|,
argument|T41 v41
argument_list|,
argument|T42 v42
argument_list|,
argument|T43 v43
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
name|v13
argument_list|)
block|,
name|v14_
argument_list|(
name|v14
argument_list|)
block|,
name|v15_
argument_list|(
name|v15
argument_list|)
block|,
name|v16_
argument_list|(
name|v16
argument_list|)
block|,
name|v17_
argument_list|(
name|v17
argument_list|)
block|,
name|v18_
argument_list|(
name|v18
argument_list|)
block|,
name|v19_
argument_list|(
name|v19
argument_list|)
block|,
name|v20_
argument_list|(
name|v20
argument_list|)
block|,
name|v21_
argument_list|(
name|v21
argument_list|)
block|,
name|v22_
argument_list|(
name|v22
argument_list|)
block|,
name|v23_
argument_list|(
name|v23
argument_list|)
block|,
name|v24_
argument_list|(
name|v24
argument_list|)
block|,
name|v25_
argument_list|(
name|v25
argument_list|)
block|,
name|v26_
argument_list|(
name|v26
argument_list|)
block|,
name|v27_
argument_list|(
name|v27
argument_list|)
block|,
name|v28_
argument_list|(
name|v28
argument_list|)
block|,
name|v29_
argument_list|(
name|v29
argument_list|)
block|,
name|v30_
argument_list|(
name|v30
argument_list|)
block|,
name|v31_
argument_list|(
name|v31
argument_list|)
block|,
name|v32_
argument_list|(
name|v32
argument_list|)
block|,
name|v33_
argument_list|(
name|v33
argument_list|)
block|,
name|v34_
argument_list|(
name|v34
argument_list|)
block|,
name|v35_
argument_list|(
name|v35
argument_list|)
block|,
name|v36_
argument_list|(
name|v36
argument_list|)
block|,
name|v37_
argument_list|(
name|v37
argument_list|)
block|,
name|v38_
argument_list|(
name|v38
argument_list|)
block|,
name|v39_
argument_list|(
name|v39
argument_list|)
block|,
name|v40_
argument_list|(
name|v40
argument_list|)
block|,
name|v41_
argument_list|(
name|v41
argument_list|)
block|,
name|v42_
argument_list|(
name|v42
argument_list|)
block|,
name|v43_
argument_list|(
argument|v43
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|,
name|v14_
block|,
name|v15_
block|,
name|v16_
block|,
name|v17_
block|,
name|v18_
block|,
name|v19_
block|,
name|v20_
block|,
name|v21_
block|,
name|v22_
block|,
name|v23_
block|,
name|v24_
block|,
name|v25_
block|,
name|v26_
block|,
name|v27_
block|,
name|v28_
block|,
name|v29_
block|,
name|v30_
block|,
name|v31_
block|,
name|v32_
block|,
name|v33_
block|,
name|v34_
block|,
name|v35_
block|,
name|v36_
block|,
name|v37_
block|,
name|v38_
block|,
name|v39_
block|,
name|v40_
block|,
name|v41_
block|,
name|v42_
block|,
name|v43_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|;
specifier|const
name|T14
name|v14_
block|;
specifier|const
name|T15
name|v15_
block|;
specifier|const
name|T16
name|v16_
block|;
specifier|const
name|T17
name|v17_
block|;
specifier|const
name|T18
name|v18_
block|;
specifier|const
name|T19
name|v19_
block|;
specifier|const
name|T20
name|v20_
block|;
specifier|const
name|T21
name|v21_
block|;
specifier|const
name|T22
name|v22_
block|;
specifier|const
name|T23
name|v23_
block|;
specifier|const
name|T24
name|v24_
block|;
specifier|const
name|T25
name|v25_
block|;
specifier|const
name|T26
name|v26_
block|;
specifier|const
name|T27
name|v27_
block|;
specifier|const
name|T28
name|v28_
block|;
specifier|const
name|T29
name|v29_
block|;
specifier|const
name|T30
name|v30_
block|;
specifier|const
name|T31
name|v31_
block|;
specifier|const
name|T32
name|v32_
block|;
specifier|const
name|T33
name|v33_
block|;
specifier|const
name|T34
name|v34_
block|;
specifier|const
name|T35
name|v35_
block|;
specifier|const
name|T36
name|v36_
block|;
specifier|const
name|T37
name|v37_
block|;
specifier|const
name|T38
name|v38_
block|;
specifier|const
name|T39
name|v39_
block|;
specifier|const
name|T40
name|v40_
block|;
specifier|const
name|T41
name|v41_
block|;
specifier|const
name|T42
name|v42_
block|;
specifier|const
name|T43
name|v43_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|,
name|typename
name|T14
operator|,
name|typename
name|T15
operator|,
name|typename
name|T16
operator|,
name|typename
name|T17
operator|,
name|typename
name|T18
operator|,
name|typename
name|T19
operator|,
name|typename
name|T20
operator|,
name|typename
name|T21
operator|,
name|typename
name|T22
operator|,
name|typename
name|T23
operator|,
name|typename
name|T24
operator|,
name|typename
name|T25
operator|,
name|typename
name|T26
operator|,
name|typename
name|T27
operator|,
name|typename
name|T28
operator|,
name|typename
name|T29
operator|,
name|typename
name|T30
operator|,
name|typename
name|T31
operator|,
name|typename
name|T32
operator|,
name|typename
name|T33
operator|,
name|typename
name|T34
operator|,
name|typename
name|T35
operator|,
name|typename
name|T36
operator|,
name|typename
name|T37
operator|,
name|typename
name|T38
operator|,
name|typename
name|T39
operator|,
name|typename
name|T40
operator|,
name|typename
name|T41
operator|,
name|typename
name|T42
operator|,
name|typename
name|T43
operator|,
name|typename
name|T44
operator|>
name|class
name|ValueArray44
block|{
name|public
operator|:
name|ValueArray44
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|,
argument|T14 v14
argument_list|,
argument|T15 v15
argument_list|,
argument|T16 v16
argument_list|,
argument|T17 v17
argument_list|,
argument|T18 v18
argument_list|,
argument|T19 v19
argument_list|,
argument|T20 v20
argument_list|,
argument|T21 v21
argument_list|,
argument|T22 v22
argument_list|,
argument|T23 v23
argument_list|,
argument|T24 v24
argument_list|,
argument|T25 v25
argument_list|,
argument|T26 v26
argument_list|,
argument|T27 v27
argument_list|,
argument|T28 v28
argument_list|,
argument|T29 v29
argument_list|,
argument|T30 v30
argument_list|,
argument|T31 v31
argument_list|,
argument|T32 v32
argument_list|,
argument|T33 v33
argument_list|,
argument|T34 v34
argument_list|,
argument|T35 v35
argument_list|,
argument|T36 v36
argument_list|,
argument|T37 v37
argument_list|,
argument|T38 v38
argument_list|,
argument|T39 v39
argument_list|,
argument|T40 v40
argument_list|,
argument|T41 v41
argument_list|,
argument|T42 v42
argument_list|,
argument|T43 v43
argument_list|,
argument|T44 v44
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
name|v13
argument_list|)
block|,
name|v14_
argument_list|(
name|v14
argument_list|)
block|,
name|v15_
argument_list|(
name|v15
argument_list|)
block|,
name|v16_
argument_list|(
name|v16
argument_list|)
block|,
name|v17_
argument_list|(
name|v17
argument_list|)
block|,
name|v18_
argument_list|(
name|v18
argument_list|)
block|,
name|v19_
argument_list|(
name|v19
argument_list|)
block|,
name|v20_
argument_list|(
name|v20
argument_list|)
block|,
name|v21_
argument_list|(
name|v21
argument_list|)
block|,
name|v22_
argument_list|(
name|v22
argument_list|)
block|,
name|v23_
argument_list|(
name|v23
argument_list|)
block|,
name|v24_
argument_list|(
name|v24
argument_list|)
block|,
name|v25_
argument_list|(
name|v25
argument_list|)
block|,
name|v26_
argument_list|(
name|v26
argument_list|)
block|,
name|v27_
argument_list|(
name|v27
argument_list|)
block|,
name|v28_
argument_list|(
name|v28
argument_list|)
block|,
name|v29_
argument_list|(
name|v29
argument_list|)
block|,
name|v30_
argument_list|(
name|v30
argument_list|)
block|,
name|v31_
argument_list|(
name|v31
argument_list|)
block|,
name|v32_
argument_list|(
name|v32
argument_list|)
block|,
name|v33_
argument_list|(
name|v33
argument_list|)
block|,
name|v34_
argument_list|(
name|v34
argument_list|)
block|,
name|v35_
argument_list|(
name|v35
argument_list|)
block|,
name|v36_
argument_list|(
name|v36
argument_list|)
block|,
name|v37_
argument_list|(
name|v37
argument_list|)
block|,
name|v38_
argument_list|(
name|v38
argument_list|)
block|,
name|v39_
argument_list|(
name|v39
argument_list|)
block|,
name|v40_
argument_list|(
name|v40
argument_list|)
block|,
name|v41_
argument_list|(
name|v41
argument_list|)
block|,
name|v42_
argument_list|(
name|v42
argument_list|)
block|,
name|v43_
argument_list|(
name|v43
argument_list|)
block|,
name|v44_
argument_list|(
argument|v44
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|,
name|v14_
block|,
name|v15_
block|,
name|v16_
block|,
name|v17_
block|,
name|v18_
block|,
name|v19_
block|,
name|v20_
block|,
name|v21_
block|,
name|v22_
block|,
name|v23_
block|,
name|v24_
block|,
name|v25_
block|,
name|v26_
block|,
name|v27_
block|,
name|v28_
block|,
name|v29_
block|,
name|v30_
block|,
name|v31_
block|,
name|v32_
block|,
name|v33_
block|,
name|v34_
block|,
name|v35_
block|,
name|v36_
block|,
name|v37_
block|,
name|v38_
block|,
name|v39_
block|,
name|v40_
block|,
name|v41_
block|,
name|v42_
block|,
name|v43_
block|,
name|v44_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|;
specifier|const
name|T14
name|v14_
block|;
specifier|const
name|T15
name|v15_
block|;
specifier|const
name|T16
name|v16_
block|;
specifier|const
name|T17
name|v17_
block|;
specifier|const
name|T18
name|v18_
block|;
specifier|const
name|T19
name|v19_
block|;
specifier|const
name|T20
name|v20_
block|;
specifier|const
name|T21
name|v21_
block|;
specifier|const
name|T22
name|v22_
block|;
specifier|const
name|T23
name|v23_
block|;
specifier|const
name|T24
name|v24_
block|;
specifier|const
name|T25
name|v25_
block|;
specifier|const
name|T26
name|v26_
block|;
specifier|const
name|T27
name|v27_
block|;
specifier|const
name|T28
name|v28_
block|;
specifier|const
name|T29
name|v29_
block|;
specifier|const
name|T30
name|v30_
block|;
specifier|const
name|T31
name|v31_
block|;
specifier|const
name|T32
name|v32_
block|;
specifier|const
name|T33
name|v33_
block|;
specifier|const
name|T34
name|v34_
block|;
specifier|const
name|T35
name|v35_
block|;
specifier|const
name|T36
name|v36_
block|;
specifier|const
name|T37
name|v37_
block|;
specifier|const
name|T38
name|v38_
block|;
specifier|const
name|T39
name|v39_
block|;
specifier|const
name|T40
name|v40_
block|;
specifier|const
name|T41
name|v41_
block|;
specifier|const
name|T42
name|v42_
block|;
specifier|const
name|T43
name|v43_
block|;
specifier|const
name|T44
name|v44_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|,
name|typename
name|T14
operator|,
name|typename
name|T15
operator|,
name|typename
name|T16
operator|,
name|typename
name|T17
operator|,
name|typename
name|T18
operator|,
name|typename
name|T19
operator|,
name|typename
name|T20
operator|,
name|typename
name|T21
operator|,
name|typename
name|T22
operator|,
name|typename
name|T23
operator|,
name|typename
name|T24
operator|,
name|typename
name|T25
operator|,
name|typename
name|T26
operator|,
name|typename
name|T27
operator|,
name|typename
name|T28
operator|,
name|typename
name|T29
operator|,
name|typename
name|T30
operator|,
name|typename
name|T31
operator|,
name|typename
name|T32
operator|,
name|typename
name|T33
operator|,
name|typename
name|T34
operator|,
name|typename
name|T35
operator|,
name|typename
name|T36
operator|,
name|typename
name|T37
operator|,
name|typename
name|T38
operator|,
name|typename
name|T39
operator|,
name|typename
name|T40
operator|,
name|typename
name|T41
operator|,
name|typename
name|T42
operator|,
name|typename
name|T43
operator|,
name|typename
name|T44
operator|,
name|typename
name|T45
operator|>
name|class
name|ValueArray45
block|{
name|public
operator|:
name|ValueArray45
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|,
argument|T14 v14
argument_list|,
argument|T15 v15
argument_list|,
argument|T16 v16
argument_list|,
argument|T17 v17
argument_list|,
argument|T18 v18
argument_list|,
argument|T19 v19
argument_list|,
argument|T20 v20
argument_list|,
argument|T21 v21
argument_list|,
argument|T22 v22
argument_list|,
argument|T23 v23
argument_list|,
argument|T24 v24
argument_list|,
argument|T25 v25
argument_list|,
argument|T26 v26
argument_list|,
argument|T27 v27
argument_list|,
argument|T28 v28
argument_list|,
argument|T29 v29
argument_list|,
argument|T30 v30
argument_list|,
argument|T31 v31
argument_list|,
argument|T32 v32
argument_list|,
argument|T33 v33
argument_list|,
argument|T34 v34
argument_list|,
argument|T35 v35
argument_list|,
argument|T36 v36
argument_list|,
argument|T37 v37
argument_list|,
argument|T38 v38
argument_list|,
argument|T39 v39
argument_list|,
argument|T40 v40
argument_list|,
argument|T41 v41
argument_list|,
argument|T42 v42
argument_list|,
argument|T43 v43
argument_list|,
argument|T44 v44
argument_list|,
argument|T45 v45
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
name|v13
argument_list|)
block|,
name|v14_
argument_list|(
name|v14
argument_list|)
block|,
name|v15_
argument_list|(
name|v15
argument_list|)
block|,
name|v16_
argument_list|(
name|v16
argument_list|)
block|,
name|v17_
argument_list|(
name|v17
argument_list|)
block|,
name|v18_
argument_list|(
name|v18
argument_list|)
block|,
name|v19_
argument_list|(
name|v19
argument_list|)
block|,
name|v20_
argument_list|(
name|v20
argument_list|)
block|,
name|v21_
argument_list|(
name|v21
argument_list|)
block|,
name|v22_
argument_list|(
name|v22
argument_list|)
block|,
name|v23_
argument_list|(
name|v23
argument_list|)
block|,
name|v24_
argument_list|(
name|v24
argument_list|)
block|,
name|v25_
argument_list|(
name|v25
argument_list|)
block|,
name|v26_
argument_list|(
name|v26
argument_list|)
block|,
name|v27_
argument_list|(
name|v27
argument_list|)
block|,
name|v28_
argument_list|(
name|v28
argument_list|)
block|,
name|v29_
argument_list|(
name|v29
argument_list|)
block|,
name|v30_
argument_list|(
name|v30
argument_list|)
block|,
name|v31_
argument_list|(
name|v31
argument_list|)
block|,
name|v32_
argument_list|(
name|v32
argument_list|)
block|,
name|v33_
argument_list|(
name|v33
argument_list|)
block|,
name|v34_
argument_list|(
name|v34
argument_list|)
block|,
name|v35_
argument_list|(
name|v35
argument_list|)
block|,
name|v36_
argument_list|(
name|v36
argument_list|)
block|,
name|v37_
argument_list|(
name|v37
argument_list|)
block|,
name|v38_
argument_list|(
name|v38
argument_list|)
block|,
name|v39_
argument_list|(
name|v39
argument_list|)
block|,
name|v40_
argument_list|(
name|v40
argument_list|)
block|,
name|v41_
argument_list|(
name|v41
argument_list|)
block|,
name|v42_
argument_list|(
name|v42
argument_list|)
block|,
name|v43_
argument_list|(
name|v43
argument_list|)
block|,
name|v44_
argument_list|(
name|v44
argument_list|)
block|,
name|v45_
argument_list|(
argument|v45
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|,
name|v14_
block|,
name|v15_
block|,
name|v16_
block|,
name|v17_
block|,
name|v18_
block|,
name|v19_
block|,
name|v20_
block|,
name|v21_
block|,
name|v22_
block|,
name|v23_
block|,
name|v24_
block|,
name|v25_
block|,
name|v26_
block|,
name|v27_
block|,
name|v28_
block|,
name|v29_
block|,
name|v30_
block|,
name|v31_
block|,
name|v32_
block|,
name|v33_
block|,
name|v34_
block|,
name|v35_
block|,
name|v36_
block|,
name|v37_
block|,
name|v38_
block|,
name|v39_
block|,
name|v40_
block|,
name|v41_
block|,
name|v42_
block|,
name|v43_
block|,
name|v44_
block|,
name|v45_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|;
specifier|const
name|T14
name|v14_
block|;
specifier|const
name|T15
name|v15_
block|;
specifier|const
name|T16
name|v16_
block|;
specifier|const
name|T17
name|v17_
block|;
specifier|const
name|T18
name|v18_
block|;
specifier|const
name|T19
name|v19_
block|;
specifier|const
name|T20
name|v20_
block|;
specifier|const
name|T21
name|v21_
block|;
specifier|const
name|T22
name|v22_
block|;
specifier|const
name|T23
name|v23_
block|;
specifier|const
name|T24
name|v24_
block|;
specifier|const
name|T25
name|v25_
block|;
specifier|const
name|T26
name|v26_
block|;
specifier|const
name|T27
name|v27_
block|;
specifier|const
name|T28
name|v28_
block|;
specifier|const
name|T29
name|v29_
block|;
specifier|const
name|T30
name|v30_
block|;
specifier|const
name|T31
name|v31_
block|;
specifier|const
name|T32
name|v32_
block|;
specifier|const
name|T33
name|v33_
block|;
specifier|const
name|T34
name|v34_
block|;
specifier|const
name|T35
name|v35_
block|;
specifier|const
name|T36
name|v36_
block|;
specifier|const
name|T37
name|v37_
block|;
specifier|const
name|T38
name|v38_
block|;
specifier|const
name|T39
name|v39_
block|;
specifier|const
name|T40
name|v40_
block|;
specifier|const
name|T41
name|v41_
block|;
specifier|const
name|T42
name|v42_
block|;
specifier|const
name|T43
name|v43_
block|;
specifier|const
name|T44
name|v44_
block|;
specifier|const
name|T45
name|v45_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|,
name|typename
name|T14
operator|,
name|typename
name|T15
operator|,
name|typename
name|T16
operator|,
name|typename
name|T17
operator|,
name|typename
name|T18
operator|,
name|typename
name|T19
operator|,
name|typename
name|T20
operator|,
name|typename
name|T21
operator|,
name|typename
name|T22
operator|,
name|typename
name|T23
operator|,
name|typename
name|T24
operator|,
name|typename
name|T25
operator|,
name|typename
name|T26
operator|,
name|typename
name|T27
operator|,
name|typename
name|T28
operator|,
name|typename
name|T29
operator|,
name|typename
name|T30
operator|,
name|typename
name|T31
operator|,
name|typename
name|T32
operator|,
name|typename
name|T33
operator|,
name|typename
name|T34
operator|,
name|typename
name|T35
operator|,
name|typename
name|T36
operator|,
name|typename
name|T37
operator|,
name|typename
name|T38
operator|,
name|typename
name|T39
operator|,
name|typename
name|T40
operator|,
name|typename
name|T41
operator|,
name|typename
name|T42
operator|,
name|typename
name|T43
operator|,
name|typename
name|T44
operator|,
name|typename
name|T45
operator|,
name|typename
name|T46
operator|>
name|class
name|ValueArray46
block|{
name|public
operator|:
name|ValueArray46
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|,
argument|T14 v14
argument_list|,
argument|T15 v15
argument_list|,
argument|T16 v16
argument_list|,
argument|T17 v17
argument_list|,
argument|T18 v18
argument_list|,
argument|T19 v19
argument_list|,
argument|T20 v20
argument_list|,
argument|T21 v21
argument_list|,
argument|T22 v22
argument_list|,
argument|T23 v23
argument_list|,
argument|T24 v24
argument_list|,
argument|T25 v25
argument_list|,
argument|T26 v26
argument_list|,
argument|T27 v27
argument_list|,
argument|T28 v28
argument_list|,
argument|T29 v29
argument_list|,
argument|T30 v30
argument_list|,
argument|T31 v31
argument_list|,
argument|T32 v32
argument_list|,
argument|T33 v33
argument_list|,
argument|T34 v34
argument_list|,
argument|T35 v35
argument_list|,
argument|T36 v36
argument_list|,
argument|T37 v37
argument_list|,
argument|T38 v38
argument_list|,
argument|T39 v39
argument_list|,
argument|T40 v40
argument_list|,
argument|T41 v41
argument_list|,
argument|T42 v42
argument_list|,
argument|T43 v43
argument_list|,
argument|T44 v44
argument_list|,
argument|T45 v45
argument_list|,
argument|T46 v46
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
name|v13
argument_list|)
block|,
name|v14_
argument_list|(
name|v14
argument_list|)
block|,
name|v15_
argument_list|(
name|v15
argument_list|)
block|,
name|v16_
argument_list|(
name|v16
argument_list|)
block|,
name|v17_
argument_list|(
name|v17
argument_list|)
block|,
name|v18_
argument_list|(
name|v18
argument_list|)
block|,
name|v19_
argument_list|(
name|v19
argument_list|)
block|,
name|v20_
argument_list|(
name|v20
argument_list|)
block|,
name|v21_
argument_list|(
name|v21
argument_list|)
block|,
name|v22_
argument_list|(
name|v22
argument_list|)
block|,
name|v23_
argument_list|(
name|v23
argument_list|)
block|,
name|v24_
argument_list|(
name|v24
argument_list|)
block|,
name|v25_
argument_list|(
name|v25
argument_list|)
block|,
name|v26_
argument_list|(
name|v26
argument_list|)
block|,
name|v27_
argument_list|(
name|v27
argument_list|)
block|,
name|v28_
argument_list|(
name|v28
argument_list|)
block|,
name|v29_
argument_list|(
name|v29
argument_list|)
block|,
name|v30_
argument_list|(
name|v30
argument_list|)
block|,
name|v31_
argument_list|(
name|v31
argument_list|)
block|,
name|v32_
argument_list|(
name|v32
argument_list|)
block|,
name|v33_
argument_list|(
name|v33
argument_list|)
block|,
name|v34_
argument_list|(
name|v34
argument_list|)
block|,
name|v35_
argument_list|(
name|v35
argument_list|)
block|,
name|v36_
argument_list|(
name|v36
argument_list|)
block|,
name|v37_
argument_list|(
name|v37
argument_list|)
block|,
name|v38_
argument_list|(
name|v38
argument_list|)
block|,
name|v39_
argument_list|(
name|v39
argument_list|)
block|,
name|v40_
argument_list|(
name|v40
argument_list|)
block|,
name|v41_
argument_list|(
name|v41
argument_list|)
block|,
name|v42_
argument_list|(
name|v42
argument_list|)
block|,
name|v43_
argument_list|(
name|v43
argument_list|)
block|,
name|v44_
argument_list|(
name|v44
argument_list|)
block|,
name|v45_
argument_list|(
name|v45
argument_list|)
block|,
name|v46_
argument_list|(
argument|v46
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|,
name|v14_
block|,
name|v15_
block|,
name|v16_
block|,
name|v17_
block|,
name|v18_
block|,
name|v19_
block|,
name|v20_
block|,
name|v21_
block|,
name|v22_
block|,
name|v23_
block|,
name|v24_
block|,
name|v25_
block|,
name|v26_
block|,
name|v27_
block|,
name|v28_
block|,
name|v29_
block|,
name|v30_
block|,
name|v31_
block|,
name|v32_
block|,
name|v33_
block|,
name|v34_
block|,
name|v35_
block|,
name|v36_
block|,
name|v37_
block|,
name|v38_
block|,
name|v39_
block|,
name|v40_
block|,
name|v41_
block|,
name|v42_
block|,
name|v43_
block|,
name|v44_
block|,
name|v45_
block|,
name|v46_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|;
specifier|const
name|T14
name|v14_
block|;
specifier|const
name|T15
name|v15_
block|;
specifier|const
name|T16
name|v16_
block|;
specifier|const
name|T17
name|v17_
block|;
specifier|const
name|T18
name|v18_
block|;
specifier|const
name|T19
name|v19_
block|;
specifier|const
name|T20
name|v20_
block|;
specifier|const
name|T21
name|v21_
block|;
specifier|const
name|T22
name|v22_
block|;
specifier|const
name|T23
name|v23_
block|;
specifier|const
name|T24
name|v24_
block|;
specifier|const
name|T25
name|v25_
block|;
specifier|const
name|T26
name|v26_
block|;
specifier|const
name|T27
name|v27_
block|;
specifier|const
name|T28
name|v28_
block|;
specifier|const
name|T29
name|v29_
block|;
specifier|const
name|T30
name|v30_
block|;
specifier|const
name|T31
name|v31_
block|;
specifier|const
name|T32
name|v32_
block|;
specifier|const
name|T33
name|v33_
block|;
specifier|const
name|T34
name|v34_
block|;
specifier|const
name|T35
name|v35_
block|;
specifier|const
name|T36
name|v36_
block|;
specifier|const
name|T37
name|v37_
block|;
specifier|const
name|T38
name|v38_
block|;
specifier|const
name|T39
name|v39_
block|;
specifier|const
name|T40
name|v40_
block|;
specifier|const
name|T41
name|v41_
block|;
specifier|const
name|T42
name|v42_
block|;
specifier|const
name|T43
name|v43_
block|;
specifier|const
name|T44
name|v44_
block|;
specifier|const
name|T45
name|v45_
block|;
specifier|const
name|T46
name|v46_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|,
name|typename
name|T14
operator|,
name|typename
name|T15
operator|,
name|typename
name|T16
operator|,
name|typename
name|T17
operator|,
name|typename
name|T18
operator|,
name|typename
name|T19
operator|,
name|typename
name|T20
operator|,
name|typename
name|T21
operator|,
name|typename
name|T22
operator|,
name|typename
name|T23
operator|,
name|typename
name|T24
operator|,
name|typename
name|T25
operator|,
name|typename
name|T26
operator|,
name|typename
name|T27
operator|,
name|typename
name|T28
operator|,
name|typename
name|T29
operator|,
name|typename
name|T30
operator|,
name|typename
name|T31
operator|,
name|typename
name|T32
operator|,
name|typename
name|T33
operator|,
name|typename
name|T34
operator|,
name|typename
name|T35
operator|,
name|typename
name|T36
operator|,
name|typename
name|T37
operator|,
name|typename
name|T38
operator|,
name|typename
name|T39
operator|,
name|typename
name|T40
operator|,
name|typename
name|T41
operator|,
name|typename
name|T42
operator|,
name|typename
name|T43
operator|,
name|typename
name|T44
operator|,
name|typename
name|T45
operator|,
name|typename
name|T46
operator|,
name|typename
name|T47
operator|>
name|class
name|ValueArray47
block|{
name|public
operator|:
name|ValueArray47
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|,
argument|T14 v14
argument_list|,
argument|T15 v15
argument_list|,
argument|T16 v16
argument_list|,
argument|T17 v17
argument_list|,
argument|T18 v18
argument_list|,
argument|T19 v19
argument_list|,
argument|T20 v20
argument_list|,
argument|T21 v21
argument_list|,
argument|T22 v22
argument_list|,
argument|T23 v23
argument_list|,
argument|T24 v24
argument_list|,
argument|T25 v25
argument_list|,
argument|T26 v26
argument_list|,
argument|T27 v27
argument_list|,
argument|T28 v28
argument_list|,
argument|T29 v29
argument_list|,
argument|T30 v30
argument_list|,
argument|T31 v31
argument_list|,
argument|T32 v32
argument_list|,
argument|T33 v33
argument_list|,
argument|T34 v34
argument_list|,
argument|T35 v35
argument_list|,
argument|T36 v36
argument_list|,
argument|T37 v37
argument_list|,
argument|T38 v38
argument_list|,
argument|T39 v39
argument_list|,
argument|T40 v40
argument_list|,
argument|T41 v41
argument_list|,
argument|T42 v42
argument_list|,
argument|T43 v43
argument_list|,
argument|T44 v44
argument_list|,
argument|T45 v45
argument_list|,
argument|T46 v46
argument_list|,
argument|T47 v47
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
name|v13
argument_list|)
block|,
name|v14_
argument_list|(
name|v14
argument_list|)
block|,
name|v15_
argument_list|(
name|v15
argument_list|)
block|,
name|v16_
argument_list|(
name|v16
argument_list|)
block|,
name|v17_
argument_list|(
name|v17
argument_list|)
block|,
name|v18_
argument_list|(
name|v18
argument_list|)
block|,
name|v19_
argument_list|(
name|v19
argument_list|)
block|,
name|v20_
argument_list|(
name|v20
argument_list|)
block|,
name|v21_
argument_list|(
name|v21
argument_list|)
block|,
name|v22_
argument_list|(
name|v22
argument_list|)
block|,
name|v23_
argument_list|(
name|v23
argument_list|)
block|,
name|v24_
argument_list|(
name|v24
argument_list|)
block|,
name|v25_
argument_list|(
name|v25
argument_list|)
block|,
name|v26_
argument_list|(
name|v26
argument_list|)
block|,
name|v27_
argument_list|(
name|v27
argument_list|)
block|,
name|v28_
argument_list|(
name|v28
argument_list|)
block|,
name|v29_
argument_list|(
name|v29
argument_list|)
block|,
name|v30_
argument_list|(
name|v30
argument_list|)
block|,
name|v31_
argument_list|(
name|v31
argument_list|)
block|,
name|v32_
argument_list|(
name|v32
argument_list|)
block|,
name|v33_
argument_list|(
name|v33
argument_list|)
block|,
name|v34_
argument_list|(
name|v34
argument_list|)
block|,
name|v35_
argument_list|(
name|v35
argument_list|)
block|,
name|v36_
argument_list|(
name|v36
argument_list|)
block|,
name|v37_
argument_list|(
name|v37
argument_list|)
block|,
name|v38_
argument_list|(
name|v38
argument_list|)
block|,
name|v39_
argument_list|(
name|v39
argument_list|)
block|,
name|v40_
argument_list|(
name|v40
argument_list|)
block|,
name|v41_
argument_list|(
name|v41
argument_list|)
block|,
name|v42_
argument_list|(
name|v42
argument_list|)
block|,
name|v43_
argument_list|(
name|v43
argument_list|)
block|,
name|v44_
argument_list|(
name|v44
argument_list|)
block|,
name|v45_
argument_list|(
name|v45
argument_list|)
block|,
name|v46_
argument_list|(
name|v46
argument_list|)
block|,
name|v47_
argument_list|(
argument|v47
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|,
name|v14_
block|,
name|v15_
block|,
name|v16_
block|,
name|v17_
block|,
name|v18_
block|,
name|v19_
block|,
name|v20_
block|,
name|v21_
block|,
name|v22_
block|,
name|v23_
block|,
name|v24_
block|,
name|v25_
block|,
name|v26_
block|,
name|v27_
block|,
name|v28_
block|,
name|v29_
block|,
name|v30_
block|,
name|v31_
block|,
name|v32_
block|,
name|v33_
block|,
name|v34_
block|,
name|v35_
block|,
name|v36_
block|,
name|v37_
block|,
name|v38_
block|,
name|v39_
block|,
name|v40_
block|,
name|v41_
block|,
name|v42_
block|,
name|v43_
block|,
name|v44_
block|,
name|v45_
block|,
name|v46_
block|,
name|v47_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|;
specifier|const
name|T14
name|v14_
block|;
specifier|const
name|T15
name|v15_
block|;
specifier|const
name|T16
name|v16_
block|;
specifier|const
name|T17
name|v17_
block|;
specifier|const
name|T18
name|v18_
block|;
specifier|const
name|T19
name|v19_
block|;
specifier|const
name|T20
name|v20_
block|;
specifier|const
name|T21
name|v21_
block|;
specifier|const
name|T22
name|v22_
block|;
specifier|const
name|T23
name|v23_
block|;
specifier|const
name|T24
name|v24_
block|;
specifier|const
name|T25
name|v25_
block|;
specifier|const
name|T26
name|v26_
block|;
specifier|const
name|T27
name|v27_
block|;
specifier|const
name|T28
name|v28_
block|;
specifier|const
name|T29
name|v29_
block|;
specifier|const
name|T30
name|v30_
block|;
specifier|const
name|T31
name|v31_
block|;
specifier|const
name|T32
name|v32_
block|;
specifier|const
name|T33
name|v33_
block|;
specifier|const
name|T34
name|v34_
block|;
specifier|const
name|T35
name|v35_
block|;
specifier|const
name|T36
name|v36_
block|;
specifier|const
name|T37
name|v37_
block|;
specifier|const
name|T38
name|v38_
block|;
specifier|const
name|T39
name|v39_
block|;
specifier|const
name|T40
name|v40_
block|;
specifier|const
name|T41
name|v41_
block|;
specifier|const
name|T42
name|v42_
block|;
specifier|const
name|T43
name|v43_
block|;
specifier|const
name|T44
name|v44_
block|;
specifier|const
name|T45
name|v45_
block|;
specifier|const
name|T46
name|v46_
block|;
specifier|const
name|T47
name|v47_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|,
name|typename
name|T14
operator|,
name|typename
name|T15
operator|,
name|typename
name|T16
operator|,
name|typename
name|T17
operator|,
name|typename
name|T18
operator|,
name|typename
name|T19
operator|,
name|typename
name|T20
operator|,
name|typename
name|T21
operator|,
name|typename
name|T22
operator|,
name|typename
name|T23
operator|,
name|typename
name|T24
operator|,
name|typename
name|T25
operator|,
name|typename
name|T26
operator|,
name|typename
name|T27
operator|,
name|typename
name|T28
operator|,
name|typename
name|T29
operator|,
name|typename
name|T30
operator|,
name|typename
name|T31
operator|,
name|typename
name|T32
operator|,
name|typename
name|T33
operator|,
name|typename
name|T34
operator|,
name|typename
name|T35
operator|,
name|typename
name|T36
operator|,
name|typename
name|T37
operator|,
name|typename
name|T38
operator|,
name|typename
name|T39
operator|,
name|typename
name|T40
operator|,
name|typename
name|T41
operator|,
name|typename
name|T42
operator|,
name|typename
name|T43
operator|,
name|typename
name|T44
operator|,
name|typename
name|T45
operator|,
name|typename
name|T46
operator|,
name|typename
name|T47
operator|,
name|typename
name|T48
operator|>
name|class
name|ValueArray48
block|{
name|public
operator|:
name|ValueArray48
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|,
argument|T14 v14
argument_list|,
argument|T15 v15
argument_list|,
argument|T16 v16
argument_list|,
argument|T17 v17
argument_list|,
argument|T18 v18
argument_list|,
argument|T19 v19
argument_list|,
argument|T20 v20
argument_list|,
argument|T21 v21
argument_list|,
argument|T22 v22
argument_list|,
argument|T23 v23
argument_list|,
argument|T24 v24
argument_list|,
argument|T25 v25
argument_list|,
argument|T26 v26
argument_list|,
argument|T27 v27
argument_list|,
argument|T28 v28
argument_list|,
argument|T29 v29
argument_list|,
argument|T30 v30
argument_list|,
argument|T31 v31
argument_list|,
argument|T32 v32
argument_list|,
argument|T33 v33
argument_list|,
argument|T34 v34
argument_list|,
argument|T35 v35
argument_list|,
argument|T36 v36
argument_list|,
argument|T37 v37
argument_list|,
argument|T38 v38
argument_list|,
argument|T39 v39
argument_list|,
argument|T40 v40
argument_list|,
argument|T41 v41
argument_list|,
argument|T42 v42
argument_list|,
argument|T43 v43
argument_list|,
argument|T44 v44
argument_list|,
argument|T45 v45
argument_list|,
argument|T46 v46
argument_list|,
argument|T47 v47
argument_list|,
argument|T48 v48
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
name|v13
argument_list|)
block|,
name|v14_
argument_list|(
name|v14
argument_list|)
block|,
name|v15_
argument_list|(
name|v15
argument_list|)
block|,
name|v16_
argument_list|(
name|v16
argument_list|)
block|,
name|v17_
argument_list|(
name|v17
argument_list|)
block|,
name|v18_
argument_list|(
name|v18
argument_list|)
block|,
name|v19_
argument_list|(
name|v19
argument_list|)
block|,
name|v20_
argument_list|(
name|v20
argument_list|)
block|,
name|v21_
argument_list|(
name|v21
argument_list|)
block|,
name|v22_
argument_list|(
name|v22
argument_list|)
block|,
name|v23_
argument_list|(
name|v23
argument_list|)
block|,
name|v24_
argument_list|(
name|v24
argument_list|)
block|,
name|v25_
argument_list|(
name|v25
argument_list|)
block|,
name|v26_
argument_list|(
name|v26
argument_list|)
block|,
name|v27_
argument_list|(
name|v27
argument_list|)
block|,
name|v28_
argument_list|(
name|v28
argument_list|)
block|,
name|v29_
argument_list|(
name|v29
argument_list|)
block|,
name|v30_
argument_list|(
name|v30
argument_list|)
block|,
name|v31_
argument_list|(
name|v31
argument_list|)
block|,
name|v32_
argument_list|(
name|v32
argument_list|)
block|,
name|v33_
argument_list|(
name|v33
argument_list|)
block|,
name|v34_
argument_list|(
name|v34
argument_list|)
block|,
name|v35_
argument_list|(
name|v35
argument_list|)
block|,
name|v36_
argument_list|(
name|v36
argument_list|)
block|,
name|v37_
argument_list|(
name|v37
argument_list|)
block|,
name|v38_
argument_list|(
name|v38
argument_list|)
block|,
name|v39_
argument_list|(
name|v39
argument_list|)
block|,
name|v40_
argument_list|(
name|v40
argument_list|)
block|,
name|v41_
argument_list|(
name|v41
argument_list|)
block|,
name|v42_
argument_list|(
name|v42
argument_list|)
block|,
name|v43_
argument_list|(
name|v43
argument_list|)
block|,
name|v44_
argument_list|(
name|v44
argument_list|)
block|,
name|v45_
argument_list|(
name|v45
argument_list|)
block|,
name|v46_
argument_list|(
name|v46
argument_list|)
block|,
name|v47_
argument_list|(
name|v47
argument_list|)
block|,
name|v48_
argument_list|(
argument|v48
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|,
name|v14_
block|,
name|v15_
block|,
name|v16_
block|,
name|v17_
block|,
name|v18_
block|,
name|v19_
block|,
name|v20_
block|,
name|v21_
block|,
name|v22_
block|,
name|v23_
block|,
name|v24_
block|,
name|v25_
block|,
name|v26_
block|,
name|v27_
block|,
name|v28_
block|,
name|v29_
block|,
name|v30_
block|,
name|v31_
block|,
name|v32_
block|,
name|v33_
block|,
name|v34_
block|,
name|v35_
block|,
name|v36_
block|,
name|v37_
block|,
name|v38_
block|,
name|v39_
block|,
name|v40_
block|,
name|v41_
block|,
name|v42_
block|,
name|v43_
block|,
name|v44_
block|,
name|v45_
block|,
name|v46_
block|,
name|v47_
block|,
name|v48_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|;
specifier|const
name|T14
name|v14_
block|;
specifier|const
name|T15
name|v15_
block|;
specifier|const
name|T16
name|v16_
block|;
specifier|const
name|T17
name|v17_
block|;
specifier|const
name|T18
name|v18_
block|;
specifier|const
name|T19
name|v19_
block|;
specifier|const
name|T20
name|v20_
block|;
specifier|const
name|T21
name|v21_
block|;
specifier|const
name|T22
name|v22_
block|;
specifier|const
name|T23
name|v23_
block|;
specifier|const
name|T24
name|v24_
block|;
specifier|const
name|T25
name|v25_
block|;
specifier|const
name|T26
name|v26_
block|;
specifier|const
name|T27
name|v27_
block|;
specifier|const
name|T28
name|v28_
block|;
specifier|const
name|T29
name|v29_
block|;
specifier|const
name|T30
name|v30_
block|;
specifier|const
name|T31
name|v31_
block|;
specifier|const
name|T32
name|v32_
block|;
specifier|const
name|T33
name|v33_
block|;
specifier|const
name|T34
name|v34_
block|;
specifier|const
name|T35
name|v35_
block|;
specifier|const
name|T36
name|v36_
block|;
specifier|const
name|T37
name|v37_
block|;
specifier|const
name|T38
name|v38_
block|;
specifier|const
name|T39
name|v39_
block|;
specifier|const
name|T40
name|v40_
block|;
specifier|const
name|T41
name|v41_
block|;
specifier|const
name|T42
name|v42_
block|;
specifier|const
name|T43
name|v43_
block|;
specifier|const
name|T44
name|v44_
block|;
specifier|const
name|T45
name|v45_
block|;
specifier|const
name|T46
name|v46_
block|;
specifier|const
name|T47
name|v47_
block|;
specifier|const
name|T48
name|v48_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|,
name|typename
name|T14
operator|,
name|typename
name|T15
operator|,
name|typename
name|T16
operator|,
name|typename
name|T17
operator|,
name|typename
name|T18
operator|,
name|typename
name|T19
operator|,
name|typename
name|T20
operator|,
name|typename
name|T21
operator|,
name|typename
name|T22
operator|,
name|typename
name|T23
operator|,
name|typename
name|T24
operator|,
name|typename
name|T25
operator|,
name|typename
name|T26
operator|,
name|typename
name|T27
operator|,
name|typename
name|T28
operator|,
name|typename
name|T29
operator|,
name|typename
name|T30
operator|,
name|typename
name|T31
operator|,
name|typename
name|T32
operator|,
name|typename
name|T33
operator|,
name|typename
name|T34
operator|,
name|typename
name|T35
operator|,
name|typename
name|T36
operator|,
name|typename
name|T37
operator|,
name|typename
name|T38
operator|,
name|typename
name|T39
operator|,
name|typename
name|T40
operator|,
name|typename
name|T41
operator|,
name|typename
name|T42
operator|,
name|typename
name|T43
operator|,
name|typename
name|T44
operator|,
name|typename
name|T45
operator|,
name|typename
name|T46
operator|,
name|typename
name|T47
operator|,
name|typename
name|T48
operator|,
name|typename
name|T49
operator|>
name|class
name|ValueArray49
block|{
name|public
operator|:
name|ValueArray49
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|,
argument|T14 v14
argument_list|,
argument|T15 v15
argument_list|,
argument|T16 v16
argument_list|,
argument|T17 v17
argument_list|,
argument|T18 v18
argument_list|,
argument|T19 v19
argument_list|,
argument|T20 v20
argument_list|,
argument|T21 v21
argument_list|,
argument|T22 v22
argument_list|,
argument|T23 v23
argument_list|,
argument|T24 v24
argument_list|,
argument|T25 v25
argument_list|,
argument|T26 v26
argument_list|,
argument|T27 v27
argument_list|,
argument|T28 v28
argument_list|,
argument|T29 v29
argument_list|,
argument|T30 v30
argument_list|,
argument|T31 v31
argument_list|,
argument|T32 v32
argument_list|,
argument|T33 v33
argument_list|,
argument|T34 v34
argument_list|,
argument|T35 v35
argument_list|,
argument|T36 v36
argument_list|,
argument|T37 v37
argument_list|,
argument|T38 v38
argument_list|,
argument|T39 v39
argument_list|,
argument|T40 v40
argument_list|,
argument|T41 v41
argument_list|,
argument|T42 v42
argument_list|,
argument|T43 v43
argument_list|,
argument|T44 v44
argument_list|,
argument|T45 v45
argument_list|,
argument|T46 v46
argument_list|,
argument|T47 v47
argument_list|,
argument|T48 v48
argument_list|,
argument|T49 v49
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
name|v13
argument_list|)
block|,
name|v14_
argument_list|(
name|v14
argument_list|)
block|,
name|v15_
argument_list|(
name|v15
argument_list|)
block|,
name|v16_
argument_list|(
name|v16
argument_list|)
block|,
name|v17_
argument_list|(
name|v17
argument_list|)
block|,
name|v18_
argument_list|(
name|v18
argument_list|)
block|,
name|v19_
argument_list|(
name|v19
argument_list|)
block|,
name|v20_
argument_list|(
name|v20
argument_list|)
block|,
name|v21_
argument_list|(
name|v21
argument_list|)
block|,
name|v22_
argument_list|(
name|v22
argument_list|)
block|,
name|v23_
argument_list|(
name|v23
argument_list|)
block|,
name|v24_
argument_list|(
name|v24
argument_list|)
block|,
name|v25_
argument_list|(
name|v25
argument_list|)
block|,
name|v26_
argument_list|(
name|v26
argument_list|)
block|,
name|v27_
argument_list|(
name|v27
argument_list|)
block|,
name|v28_
argument_list|(
name|v28
argument_list|)
block|,
name|v29_
argument_list|(
name|v29
argument_list|)
block|,
name|v30_
argument_list|(
name|v30
argument_list|)
block|,
name|v31_
argument_list|(
name|v31
argument_list|)
block|,
name|v32_
argument_list|(
name|v32
argument_list|)
block|,
name|v33_
argument_list|(
name|v33
argument_list|)
block|,
name|v34_
argument_list|(
name|v34
argument_list|)
block|,
name|v35_
argument_list|(
name|v35
argument_list|)
block|,
name|v36_
argument_list|(
name|v36
argument_list|)
block|,
name|v37_
argument_list|(
name|v37
argument_list|)
block|,
name|v38_
argument_list|(
name|v38
argument_list|)
block|,
name|v39_
argument_list|(
name|v39
argument_list|)
block|,
name|v40_
argument_list|(
name|v40
argument_list|)
block|,
name|v41_
argument_list|(
name|v41
argument_list|)
block|,
name|v42_
argument_list|(
name|v42
argument_list|)
block|,
name|v43_
argument_list|(
name|v43
argument_list|)
block|,
name|v44_
argument_list|(
name|v44
argument_list|)
block|,
name|v45_
argument_list|(
name|v45
argument_list|)
block|,
name|v46_
argument_list|(
name|v46
argument_list|)
block|,
name|v47_
argument_list|(
name|v47
argument_list|)
block|,
name|v48_
argument_list|(
name|v48
argument_list|)
block|,
name|v49_
argument_list|(
argument|v49
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|,
name|v14_
block|,
name|v15_
block|,
name|v16_
block|,
name|v17_
block|,
name|v18_
block|,
name|v19_
block|,
name|v20_
block|,
name|v21_
block|,
name|v22_
block|,
name|v23_
block|,
name|v24_
block|,
name|v25_
block|,
name|v26_
block|,
name|v27_
block|,
name|v28_
block|,
name|v29_
block|,
name|v30_
block|,
name|v31_
block|,
name|v32_
block|,
name|v33_
block|,
name|v34_
block|,
name|v35_
block|,
name|v36_
block|,
name|v37_
block|,
name|v38_
block|,
name|v39_
block|,
name|v40_
block|,
name|v41_
block|,
name|v42_
block|,
name|v43_
block|,
name|v44_
block|,
name|v45_
block|,
name|v46_
block|,
name|v47_
block|,
name|v48_
block|,
name|v49_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|;
specifier|const
name|T14
name|v14_
block|;
specifier|const
name|T15
name|v15_
block|;
specifier|const
name|T16
name|v16_
block|;
specifier|const
name|T17
name|v17_
block|;
specifier|const
name|T18
name|v18_
block|;
specifier|const
name|T19
name|v19_
block|;
specifier|const
name|T20
name|v20_
block|;
specifier|const
name|T21
name|v21_
block|;
specifier|const
name|T22
name|v22_
block|;
specifier|const
name|T23
name|v23_
block|;
specifier|const
name|T24
name|v24_
block|;
specifier|const
name|T25
name|v25_
block|;
specifier|const
name|T26
name|v26_
block|;
specifier|const
name|T27
name|v27_
block|;
specifier|const
name|T28
name|v28_
block|;
specifier|const
name|T29
name|v29_
block|;
specifier|const
name|T30
name|v30_
block|;
specifier|const
name|T31
name|v31_
block|;
specifier|const
name|T32
name|v32_
block|;
specifier|const
name|T33
name|v33_
block|;
specifier|const
name|T34
name|v34_
block|;
specifier|const
name|T35
name|v35_
block|;
specifier|const
name|T36
name|v36_
block|;
specifier|const
name|T37
name|v37_
block|;
specifier|const
name|T38
name|v38_
block|;
specifier|const
name|T39
name|v39_
block|;
specifier|const
name|T40
name|v40_
block|;
specifier|const
name|T41
name|v41_
block|;
specifier|const
name|T42
name|v42_
block|;
specifier|const
name|T43
name|v43_
block|;
specifier|const
name|T44
name|v44_
block|;
specifier|const
name|T45
name|v45_
block|;
specifier|const
name|T46
name|v46_
block|;
specifier|const
name|T47
name|v47_
block|;
specifier|const
name|T48
name|v48_
block|;
specifier|const
name|T49
name|v49_
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|,
name|typename
name|T11
operator|,
name|typename
name|T12
operator|,
name|typename
name|T13
operator|,
name|typename
name|T14
operator|,
name|typename
name|T15
operator|,
name|typename
name|T16
operator|,
name|typename
name|T17
operator|,
name|typename
name|T18
operator|,
name|typename
name|T19
operator|,
name|typename
name|T20
operator|,
name|typename
name|T21
operator|,
name|typename
name|T22
operator|,
name|typename
name|T23
operator|,
name|typename
name|T24
operator|,
name|typename
name|T25
operator|,
name|typename
name|T26
operator|,
name|typename
name|T27
operator|,
name|typename
name|T28
operator|,
name|typename
name|T29
operator|,
name|typename
name|T30
operator|,
name|typename
name|T31
operator|,
name|typename
name|T32
operator|,
name|typename
name|T33
operator|,
name|typename
name|T34
operator|,
name|typename
name|T35
operator|,
name|typename
name|T36
operator|,
name|typename
name|T37
operator|,
name|typename
name|T38
operator|,
name|typename
name|T39
operator|,
name|typename
name|T40
operator|,
name|typename
name|T41
operator|,
name|typename
name|T42
operator|,
name|typename
name|T43
operator|,
name|typename
name|T44
operator|,
name|typename
name|T45
operator|,
name|typename
name|T46
operator|,
name|typename
name|T47
operator|,
name|typename
name|T48
operator|,
name|typename
name|T49
operator|,
name|typename
name|T50
operator|>
name|class
name|ValueArray50
block|{
name|public
operator|:
name|ValueArray50
argument_list|(
argument|T1 v1
argument_list|,
argument|T2 v2
argument_list|,
argument|T3 v3
argument_list|,
argument|T4 v4
argument_list|,
argument|T5 v5
argument_list|,
argument|T6 v6
argument_list|,
argument|T7 v7
argument_list|,
argument|T8 v8
argument_list|,
argument|T9 v9
argument_list|,
argument|T10 v10
argument_list|,
argument|T11 v11
argument_list|,
argument|T12 v12
argument_list|,
argument|T13 v13
argument_list|,
argument|T14 v14
argument_list|,
argument|T15 v15
argument_list|,
argument|T16 v16
argument_list|,
argument|T17 v17
argument_list|,
argument|T18 v18
argument_list|,
argument|T19 v19
argument_list|,
argument|T20 v20
argument_list|,
argument|T21 v21
argument_list|,
argument|T22 v22
argument_list|,
argument|T23 v23
argument_list|,
argument|T24 v24
argument_list|,
argument|T25 v25
argument_list|,
argument|T26 v26
argument_list|,
argument|T27 v27
argument_list|,
argument|T28 v28
argument_list|,
argument|T29 v29
argument_list|,
argument|T30 v30
argument_list|,
argument|T31 v31
argument_list|,
argument|T32 v32
argument_list|,
argument|T33 v33
argument_list|,
argument|T34 v34
argument_list|,
argument|T35 v35
argument_list|,
argument|T36 v36
argument_list|,
argument|T37 v37
argument_list|,
argument|T38 v38
argument_list|,
argument|T39 v39
argument_list|,
argument|T40 v40
argument_list|,
argument|T41 v41
argument_list|,
argument|T42 v42
argument_list|,
argument|T43 v43
argument_list|,
argument|T44 v44
argument_list|,
argument|T45 v45
argument_list|,
argument|T46 v46
argument_list|,
argument|T47 v47
argument_list|,
argument|T48 v48
argument_list|,
argument|T49 v49
argument_list|,
argument|T50 v50
argument_list|)
operator|:
name|v1_
argument_list|(
name|v1
argument_list|)
block|,
name|v2_
argument_list|(
name|v2
argument_list|)
block|,
name|v3_
argument_list|(
name|v3
argument_list|)
block|,
name|v4_
argument_list|(
name|v4
argument_list|)
block|,
name|v5_
argument_list|(
name|v5
argument_list|)
block|,
name|v6_
argument_list|(
name|v6
argument_list|)
block|,
name|v7_
argument_list|(
name|v7
argument_list|)
block|,
name|v8_
argument_list|(
name|v8
argument_list|)
block|,
name|v9_
argument_list|(
name|v9
argument_list|)
block|,
name|v10_
argument_list|(
name|v10
argument_list|)
block|,
name|v11_
argument_list|(
name|v11
argument_list|)
block|,
name|v12_
argument_list|(
name|v12
argument_list|)
block|,
name|v13_
argument_list|(
name|v13
argument_list|)
block|,
name|v14_
argument_list|(
name|v14
argument_list|)
block|,
name|v15_
argument_list|(
name|v15
argument_list|)
block|,
name|v16_
argument_list|(
name|v16
argument_list|)
block|,
name|v17_
argument_list|(
name|v17
argument_list|)
block|,
name|v18_
argument_list|(
name|v18
argument_list|)
block|,
name|v19_
argument_list|(
name|v19
argument_list|)
block|,
name|v20_
argument_list|(
name|v20
argument_list|)
block|,
name|v21_
argument_list|(
name|v21
argument_list|)
block|,
name|v22_
argument_list|(
name|v22
argument_list|)
block|,
name|v23_
argument_list|(
name|v23
argument_list|)
block|,
name|v24_
argument_list|(
name|v24
argument_list|)
block|,
name|v25_
argument_list|(
name|v25
argument_list|)
block|,
name|v26_
argument_list|(
name|v26
argument_list|)
block|,
name|v27_
argument_list|(
name|v27
argument_list|)
block|,
name|v28_
argument_list|(
name|v28
argument_list|)
block|,
name|v29_
argument_list|(
name|v29
argument_list|)
block|,
name|v30_
argument_list|(
name|v30
argument_list|)
block|,
name|v31_
argument_list|(
name|v31
argument_list|)
block|,
name|v32_
argument_list|(
name|v32
argument_list|)
block|,
name|v33_
argument_list|(
name|v33
argument_list|)
block|,
name|v34_
argument_list|(
name|v34
argument_list|)
block|,
name|v35_
argument_list|(
name|v35
argument_list|)
block|,
name|v36_
argument_list|(
name|v36
argument_list|)
block|,
name|v37_
argument_list|(
name|v37
argument_list|)
block|,
name|v38_
argument_list|(
name|v38
argument_list|)
block|,
name|v39_
argument_list|(
name|v39
argument_list|)
block|,
name|v40_
argument_list|(
name|v40
argument_list|)
block|,
name|v41_
argument_list|(
name|v41
argument_list|)
block|,
name|v42_
argument_list|(
name|v42
argument_list|)
block|,
name|v43_
argument_list|(
name|v43
argument_list|)
block|,
name|v44_
argument_list|(
name|v44
argument_list|)
block|,
name|v45_
argument_list|(
name|v45
argument_list|)
block|,
name|v46_
argument_list|(
name|v46
argument_list|)
block|,
name|v47_
argument_list|(
name|v47
argument_list|)
block|,
name|v48_
argument_list|(
name|v48
argument_list|)
block|,
name|v49_
argument_list|(
name|v49
argument_list|)
block|,
name|v50_
argument_list|(
argument|v50
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
name|operator
name|ParamGenerator
operator|<
name|T
operator|>
operator|(
operator|)
specifier|const
block|{
specifier|const
name|T
name|array
index|[]
operator|=
block|{
name|v1_
block|,
name|v2_
block|,
name|v3_
block|,
name|v4_
block|,
name|v5_
block|,
name|v6_
block|,
name|v7_
block|,
name|v8_
block|,
name|v9_
block|,
name|v10_
block|,
name|v11_
block|,
name|v12_
block|,
name|v13_
block|,
name|v14_
block|,
name|v15_
block|,
name|v16_
block|,
name|v17_
block|,
name|v18_
block|,
name|v19_
block|,
name|v20_
block|,
name|v21_
block|,
name|v22_
block|,
name|v23_
block|,
name|v24_
block|,
name|v25_
block|,
name|v26_
block|,
name|v27_
block|,
name|v28_
block|,
name|v29_
block|,
name|v30_
block|,
name|v31_
block|,
name|v32_
block|,
name|v33_
block|,
name|v34_
block|,
name|v35_
block|,
name|v36_
block|,
name|v37_
block|,
name|v38_
block|,
name|v39_
block|,
name|v40_
block|,
name|v41_
block|,
name|v42_
block|,
name|v43_
block|,
name|v44_
block|,
name|v45_
block|,
name|v46_
block|,
name|v47_
block|,
name|v48_
block|,
name|v49_
block|,
name|v50_
block|}
block|;
return|return
name|ValuesIn
argument_list|(
name|array
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|T1
name|v1_
block|;
specifier|const
name|T2
name|v2_
block|;
specifier|const
name|T3
name|v3_
block|;
specifier|const
name|T4
name|v4_
block|;
specifier|const
name|T5
name|v5_
block|;
specifier|const
name|T6
name|v6_
block|;
specifier|const
name|T7
name|v7_
block|;
specifier|const
name|T8
name|v8_
block|;
specifier|const
name|T9
name|v9_
block|;
specifier|const
name|T10
name|v10_
block|;
specifier|const
name|T11
name|v11_
block|;
specifier|const
name|T12
name|v12_
block|;
specifier|const
name|T13
name|v13_
block|;
specifier|const
name|T14
name|v14_
block|;
specifier|const
name|T15
name|v15_
block|;
specifier|const
name|T16
name|v16_
block|;
specifier|const
name|T17
name|v17_
block|;
specifier|const
name|T18
name|v18_
block|;
specifier|const
name|T19
name|v19_
block|;
specifier|const
name|T20
name|v20_
block|;
specifier|const
name|T21
name|v21_
block|;
specifier|const
name|T22
name|v22_
block|;
specifier|const
name|T23
name|v23_
block|;
specifier|const
name|T24
name|v24_
block|;
specifier|const
name|T25
name|v25_
block|;
specifier|const
name|T26
name|v26_
block|;
specifier|const
name|T27
name|v27_
block|;
specifier|const
name|T28
name|v28_
block|;
specifier|const
name|T29
name|v29_
block|;
specifier|const
name|T30
name|v30_
block|;
specifier|const
name|T31
name|v31_
block|;
specifier|const
name|T32
name|v32_
block|;
specifier|const
name|T33
name|v33_
block|;
specifier|const
name|T34
name|v34_
block|;
specifier|const
name|T35
name|v35_
block|;
specifier|const
name|T36
name|v36_
block|;
specifier|const
name|T37
name|v37_
block|;
specifier|const
name|T38
name|v38_
block|;
specifier|const
name|T39
name|v39_
block|;
specifier|const
name|T40
name|v40_
block|;
specifier|const
name|T41
name|v41_
block|;
specifier|const
name|T42
name|v42_
block|;
specifier|const
name|T43
name|v43_
block|;
specifier|const
name|T44
name|v44_
block|;
specifier|const
name|T45
name|v45_
block|;
specifier|const
name|T46
name|v46_
block|;
specifier|const
name|T47
name|v47_
block|;
specifier|const
name|T48
name|v48_
block|;
specifier|const
name|T49
name|v49_
block|;
specifier|const
name|T50
name|v50_
block|; }
expr_stmt|;
ifdef|#
directive|ifdef
name|GTEST_HAS_COMBINE
comment|// INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.
comment|//
comment|// Generates values from the Cartesian product of values produced
comment|// by the argument generators.
comment|//
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|>
name|class
name|CartesianProductGenerator2
operator|:
name|public
name|ParamGeneratorInterface
operator|<
operator|::
name|std
operator|::
name|tr1
operator|::
name|tuple
operator|<
name|T1
operator|,
name|T2
operator|>
expr|>
block|{
name|public
operator|:
typedef|typedef
operator|::
name|std
operator|::
name|tr1
operator|::
name|tuple
operator|<
name|T1
operator|,
name|T2
operator|>
name|ParamType
expr_stmt|;
name|CartesianProductGenerator2
argument_list|(
specifier|const
name|ParamGenerator
operator|<
name|T1
operator|>
operator|&
name|g1
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T2
operator|>
operator|&
name|g2
argument_list|)
operator|:
name|g1_
argument_list|(
name|g1
argument_list|)
operator|,
name|g2_
argument_list|(
argument|g2
argument_list|)
block|{}
name|virtual
operator|~
name|CartesianProductGenerator2
argument_list|()
block|{}
name|virtual
name|ParamIteratorInterface
operator|<
name|ParamType
operator|>
operator|*
name|Begin
argument_list|()
specifier|const
block|{
return|return
name|new
name|Iterator
argument_list|(
name|this
argument_list|,
name|g1_
argument_list|,
name|g1_
operator|.
name|begin
argument_list|()
argument_list|,
name|g2_
argument_list|,
name|g2_
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
name|virtual
name|ParamIteratorInterface
operator|<
name|ParamType
operator|>
operator|*
name|End
argument_list|()
specifier|const
block|{
return|return
name|new
name|Iterator
argument_list|(
name|this
argument_list|,
name|g1_
argument_list|,
name|g1_
operator|.
name|end
argument_list|()
argument_list|,
name|g2_
argument_list|,
name|g2_
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
name|private
label|:
name|class
name|Iterator
range|:
name|public
name|ParamIteratorInterface
operator|<
name|ParamType
operator|>
block|{
name|public
operator|:
name|Iterator
argument_list|(
argument|const ParamGeneratorInterface<ParamType>* base
argument_list|,
argument|const ParamGenerator<T1>& g1
argument_list|,
argument|const typename ParamGenerator<T1>::iterator& current1
argument_list|,
argument|const ParamGenerator<T2>& g2
argument_list|,
argument|const typename ParamGenerator<T2>::iterator& current2
argument_list|)
operator|:
name|base_
argument_list|(
name|base
argument_list|)
block|,
name|begin1_
argument_list|(
name|g1
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end1_
argument_list|(
name|g1
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current1_
argument_list|(
name|current1
argument_list|)
block|,
name|begin2_
argument_list|(
name|g2
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end2_
argument_list|(
name|g2
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current2_
argument_list|(
argument|current2
argument_list|)
block|{
name|ComputeCurrentValue
argument_list|()
block|;     }
name|virtual
operator|~
name|Iterator
argument_list|()
block|{}
name|virtual
specifier|const
name|ParamGeneratorInterface
operator|<
name|ParamType
operator|>
operator|*
name|BaseGenerator
argument_list|()
specifier|const
block|{
return|return
name|base_
return|;
block|}
comment|// Advance should not be called on beyond-of-range iterators
comment|// so no component iterators must be beyond end of range, either.
name|virtual
name|void
name|Advance
argument_list|()
block|{
name|assert
argument_list|(
operator|!
name|AtEnd
argument_list|()
argument_list|)
block|;
operator|++
name|current2_
block|;
if|if
condition|(
name|current2_
operator|==
name|end2_
condition|)
block|{
name|current2_
operator|=
name|begin2_
expr_stmt|;
operator|++
name|current1_
expr_stmt|;
block|}
name|ComputeCurrentValue
argument_list|()
expr_stmt|;
block|}
name|virtual
name|ParamIteratorInterface
operator|<
name|ParamType
operator|>
operator|*
name|Clone
argument_list|()
specifier|const
block|{
return|return
name|new
name|Iterator
argument_list|(
operator|*
name|this
argument_list|)
return|;
block|}
name|virtual
specifier|const
name|ParamType
operator|*
name|Current
argument_list|()
specifier|const
block|{
return|return
operator|&
name|current_value_
return|;
block|}
name|virtual
name|bool
name|Equals
argument_list|(
argument|const ParamIteratorInterface<ParamType>& other
argument_list|)
specifier|const
block|{
comment|// Having the same base generator guarantees that the other
comment|// iterator is of the same type and we can downcast.
name|GTEST_CHECK_
argument_list|(
name|BaseGenerator
argument_list|()
operator|==
name|other
operator|.
name|BaseGenerator
argument_list|()
argument_list|)
operator|<<
literal|"The program attempted to compare iterators "
operator|<<
literal|"from different generators."
operator|<<
name|std
operator|::
name|endl
block|;
specifier|const
name|Iterator
operator|*
name|typed_other
operator|=
name|CheckedDowncastToActualType
operator|<
specifier|const
name|Iterator
operator|>
operator|(
operator|&
name|other
operator|)
block|;
comment|// We must report iterators equal if they both point beyond their
comment|// respective ranges. That can happen in a variety of fashions,
comment|// so we have to consult AtEnd().
return|return
operator|(
name|AtEnd
argument_list|()
operator|&&
name|typed_other
operator|->
name|AtEnd
argument_list|()
operator|)
operator|||
operator|(
name|current1_
operator|==
name|typed_other
operator|->
name|current1_
operator|&&
name|current2_
operator|==
name|typed_other
operator|->
name|current2_
operator|)
return|;
block|}
name|private
operator|:
name|Iterator
argument_list|(
specifier|const
name|Iterator
operator|&
name|other
argument_list|)
operator|:
name|base_
argument_list|(
name|other
operator|.
name|base_
argument_list|)
block|,
name|begin1_
argument_list|(
name|other
operator|.
name|begin1_
argument_list|)
block|,
name|end1_
argument_list|(
name|other
operator|.
name|end1_
argument_list|)
block|,
name|current1_
argument_list|(
name|other
operator|.
name|current1_
argument_list|)
block|,
name|begin2_
argument_list|(
name|other
operator|.
name|begin2_
argument_list|)
block|,
name|end2_
argument_list|(
name|other
operator|.
name|end2_
argument_list|)
block|,
name|current2_
argument_list|(
argument|other.current2_
argument_list|)
block|{
name|ComputeCurrentValue
argument_list|()
block|;     }
name|void
name|ComputeCurrentValue
argument_list|()
block|{
if|if
condition|(
operator|!
name|AtEnd
argument_list|()
condition|)
name|current_value_
operator|=
name|ParamType
argument_list|(
operator|*
name|current1_
argument_list|,
operator|*
name|current2_
argument_list|)
expr_stmt|;
block|}
name|bool
name|AtEnd
argument_list|()
specifier|const
block|{
comment|// We must report iterator past the end of the range when either of the
comment|// component iterators has reached the end of its range.
return|return
name|current1_
operator|==
name|end1_
operator|||
name|current2_
operator|==
name|end2_
return|;
block|}
specifier|const
name|ParamGeneratorInterface
operator|<
name|ParamType
operator|>
operator|*
specifier|const
name|base_
block|;
comment|// begin[i]_ and end[i]_ define the i-th range that Iterator traverses.
comment|// current[i]_ is the actual traversing iterator.
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T1
operator|>
operator|::
name|iterator
name|begin1_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T1
operator|>
operator|::
name|iterator
name|end1_
block|;
name|typename
name|ParamGenerator
operator|<
name|T1
operator|>
operator|::
name|iterator
name|current1_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T2
operator|>
operator|::
name|iterator
name|begin2_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T2
operator|>
operator|::
name|iterator
name|end2_
block|;
name|typename
name|ParamGenerator
operator|<
name|T2
operator|>
operator|::
name|iterator
name|current2_
block|;
name|ParamType
name|current_value_
block|;   }
decl_stmt|;
specifier|const
name|ParamGenerator
operator|<
name|T1
operator|>
name|g1_
expr_stmt|;
specifier|const
name|ParamGenerator
operator|<
name|T2
operator|>
name|g2_
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|>
name|class
name|CartesianProductGenerator3
operator|:
name|public
name|ParamGeneratorInterface
operator|<
operator|::
name|std
operator|::
name|tr1
operator|::
name|tuple
operator|<
name|T1
operator|,
name|T2
operator|,
name|T3
operator|>
expr|>
block|{
name|public
operator|:
typedef|typedef
operator|::
name|std
operator|::
name|tr1
operator|::
name|tuple
operator|<
name|T1
operator|,
name|T2
operator|,
name|T3
operator|>
name|ParamType
expr_stmt|;
name|CartesianProductGenerator3
argument_list|(
specifier|const
name|ParamGenerator
operator|<
name|T1
operator|>
operator|&
name|g1
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T2
operator|>
operator|&
name|g2
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T3
operator|>
operator|&
name|g3
argument_list|)
operator|:
name|g1_
argument_list|(
name|g1
argument_list|)
operator|,
name|g2_
argument_list|(
name|g2
argument_list|)
operator|,
name|g3_
argument_list|(
argument|g3
argument_list|)
block|{}
name|virtual
operator|~
name|CartesianProductGenerator3
argument_list|()
block|{}
name|virtual
name|ParamIteratorInterface
operator|<
name|ParamType
operator|>
operator|*
name|Begin
argument_list|()
specifier|const
block|{
return|return
name|new
name|Iterator
argument_list|(
name|this
argument_list|,
name|g1_
argument_list|,
name|g1_
operator|.
name|begin
argument_list|()
argument_list|,
name|g2_
argument_list|,
name|g2_
operator|.
name|begin
argument_list|()
argument_list|,
name|g3_
argument_list|,
name|g3_
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
name|virtual
name|ParamIteratorInterface
operator|<
name|ParamType
operator|>
operator|*
name|End
argument_list|()
specifier|const
block|{
return|return
name|new
name|Iterator
argument_list|(
name|this
argument_list|,
name|g1_
argument_list|,
name|g1_
operator|.
name|end
argument_list|()
argument_list|,
name|g2_
argument_list|,
name|g2_
operator|.
name|end
argument_list|()
argument_list|,
name|g3_
argument_list|,
name|g3_
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
name|private
label|:
name|class
name|Iterator
range|:
name|public
name|ParamIteratorInterface
operator|<
name|ParamType
operator|>
block|{
name|public
operator|:
name|Iterator
argument_list|(
argument|const ParamGeneratorInterface<ParamType>* base
argument_list|,
argument|const ParamGenerator<T1>& g1
argument_list|,
argument|const typename ParamGenerator<T1>::iterator& current1
argument_list|,
argument|const ParamGenerator<T2>& g2
argument_list|,
argument|const typename ParamGenerator<T2>::iterator& current2
argument_list|,
argument|const ParamGenerator<T3>& g3
argument_list|,
argument|const typename ParamGenerator<T3>::iterator& current3
argument_list|)
operator|:
name|base_
argument_list|(
name|base
argument_list|)
block|,
name|begin1_
argument_list|(
name|g1
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end1_
argument_list|(
name|g1
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current1_
argument_list|(
name|current1
argument_list|)
block|,
name|begin2_
argument_list|(
name|g2
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end2_
argument_list|(
name|g2
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current2_
argument_list|(
name|current2
argument_list|)
block|,
name|begin3_
argument_list|(
name|g3
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end3_
argument_list|(
name|g3
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current3_
argument_list|(
argument|current3
argument_list|)
block|{
name|ComputeCurrentValue
argument_list|()
block|;     }
name|virtual
operator|~
name|Iterator
argument_list|()
block|{}
name|virtual
specifier|const
name|ParamGeneratorInterface
operator|<
name|ParamType
operator|>
operator|*
name|BaseGenerator
argument_list|()
specifier|const
block|{
return|return
name|base_
return|;
block|}
comment|// Advance should not be called on beyond-of-range iterators
comment|// so no component iterators must be beyond end of range, either.
name|virtual
name|void
name|Advance
argument_list|()
block|{
name|assert
argument_list|(
operator|!
name|AtEnd
argument_list|()
argument_list|)
block|;
operator|++
name|current3_
block|;
if|if
condition|(
name|current3_
operator|==
name|end3_
condition|)
block|{
name|current3_
operator|=
name|begin3_
expr_stmt|;
operator|++
name|current2_
expr_stmt|;
block|}
if|if
condition|(
name|current2_
operator|==
name|end2_
condition|)
block|{
name|current2_
operator|=
name|begin2_
expr_stmt|;
operator|++
name|current1_
expr_stmt|;
block|}
name|ComputeCurrentValue
argument_list|()
expr_stmt|;
block|}
name|virtual
name|ParamIteratorInterface
operator|<
name|ParamType
operator|>
operator|*
name|Clone
argument_list|()
specifier|const
block|{
return|return
name|new
name|Iterator
argument_list|(
operator|*
name|this
argument_list|)
return|;
block|}
name|virtual
specifier|const
name|ParamType
operator|*
name|Current
argument_list|()
specifier|const
block|{
return|return
operator|&
name|current_value_
return|;
block|}
name|virtual
name|bool
name|Equals
argument_list|(
argument|const ParamIteratorInterface<ParamType>& other
argument_list|)
specifier|const
block|{
comment|// Having the same base generator guarantees that the other
comment|// iterator is of the same type and we can downcast.
name|GTEST_CHECK_
argument_list|(
name|BaseGenerator
argument_list|()
operator|==
name|other
operator|.
name|BaseGenerator
argument_list|()
argument_list|)
operator|<<
literal|"The program attempted to compare iterators "
operator|<<
literal|"from different generators."
operator|<<
name|std
operator|::
name|endl
block|;
specifier|const
name|Iterator
operator|*
name|typed_other
operator|=
name|CheckedDowncastToActualType
operator|<
specifier|const
name|Iterator
operator|>
operator|(
operator|&
name|other
operator|)
block|;
comment|// We must report iterators equal if they both point beyond their
comment|// respective ranges. That can happen in a variety of fashions,
comment|// so we have to consult AtEnd().
return|return
operator|(
name|AtEnd
argument_list|()
operator|&&
name|typed_other
operator|->
name|AtEnd
argument_list|()
operator|)
operator|||
operator|(
name|current1_
operator|==
name|typed_other
operator|->
name|current1_
operator|&&
name|current2_
operator|==
name|typed_other
operator|->
name|current2_
operator|&&
name|current3_
operator|==
name|typed_other
operator|->
name|current3_
operator|)
return|;
block|}
name|private
operator|:
name|Iterator
argument_list|(
specifier|const
name|Iterator
operator|&
name|other
argument_list|)
operator|:
name|base_
argument_list|(
name|other
operator|.
name|base_
argument_list|)
block|,
name|begin1_
argument_list|(
name|other
operator|.
name|begin1_
argument_list|)
block|,
name|end1_
argument_list|(
name|other
operator|.
name|end1_
argument_list|)
block|,
name|current1_
argument_list|(
name|other
operator|.
name|current1_
argument_list|)
block|,
name|begin2_
argument_list|(
name|other
operator|.
name|begin2_
argument_list|)
block|,
name|end2_
argument_list|(
name|other
operator|.
name|end2_
argument_list|)
block|,
name|current2_
argument_list|(
name|other
operator|.
name|current2_
argument_list|)
block|,
name|begin3_
argument_list|(
name|other
operator|.
name|begin3_
argument_list|)
block|,
name|end3_
argument_list|(
name|other
operator|.
name|end3_
argument_list|)
block|,
name|current3_
argument_list|(
argument|other.current3_
argument_list|)
block|{
name|ComputeCurrentValue
argument_list|()
block|;     }
name|void
name|ComputeCurrentValue
argument_list|()
block|{
if|if
condition|(
operator|!
name|AtEnd
argument_list|()
condition|)
name|current_value_
operator|=
name|ParamType
argument_list|(
operator|*
name|current1_
argument_list|,
operator|*
name|current2_
argument_list|,
operator|*
name|current3_
argument_list|)
expr_stmt|;
block|}
name|bool
name|AtEnd
argument_list|()
specifier|const
block|{
comment|// We must report iterator past the end of the range when either of the
comment|// component iterators has reached the end of its range.
return|return
name|current1_
operator|==
name|end1_
operator|||
name|current2_
operator|==
name|end2_
operator|||
name|current3_
operator|==
name|end3_
return|;
block|}
specifier|const
name|ParamGeneratorInterface
operator|<
name|ParamType
operator|>
operator|*
specifier|const
name|base_
block|;
comment|// begin[i]_ and end[i]_ define the i-th range that Iterator traverses.
comment|// current[i]_ is the actual traversing iterator.
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T1
operator|>
operator|::
name|iterator
name|begin1_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T1
operator|>
operator|::
name|iterator
name|end1_
block|;
name|typename
name|ParamGenerator
operator|<
name|T1
operator|>
operator|::
name|iterator
name|current1_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T2
operator|>
operator|::
name|iterator
name|begin2_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T2
operator|>
operator|::
name|iterator
name|end2_
block|;
name|typename
name|ParamGenerator
operator|<
name|T2
operator|>
operator|::
name|iterator
name|current2_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T3
operator|>
operator|::
name|iterator
name|begin3_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T3
operator|>
operator|::
name|iterator
name|end3_
block|;
name|typename
name|ParamGenerator
operator|<
name|T3
operator|>
operator|::
name|iterator
name|current3_
block|;
name|ParamType
name|current_value_
block|;   }
decl_stmt|;
specifier|const
name|ParamGenerator
operator|<
name|T1
operator|>
name|g1_
expr_stmt|;
specifier|const
name|ParamGenerator
operator|<
name|T2
operator|>
name|g2_
expr_stmt|;
specifier|const
name|ParamGenerator
operator|<
name|T3
operator|>
name|g3_
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|>
name|class
name|CartesianProductGenerator4
operator|:
name|public
name|ParamGeneratorInterface
operator|<
operator|::
name|std
operator|::
name|tr1
operator|::
name|tuple
operator|<
name|T1
operator|,
name|T2
operator|,
name|T3
operator|,
name|T4
operator|>
expr|>
block|{
name|public
operator|:
typedef|typedef
operator|::
name|std
operator|::
name|tr1
operator|::
name|tuple
operator|<
name|T1
operator|,
name|T2
operator|,
name|T3
operator|,
name|T4
operator|>
name|ParamType
expr_stmt|;
name|CartesianProductGenerator4
argument_list|(
specifier|const
name|ParamGenerator
operator|<
name|T1
operator|>
operator|&
name|g1
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T2
operator|>
operator|&
name|g2
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T3
operator|>
operator|&
name|g3
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T4
operator|>
operator|&
name|g4
argument_list|)
operator|:
name|g1_
argument_list|(
name|g1
argument_list|)
operator|,
name|g2_
argument_list|(
name|g2
argument_list|)
operator|,
name|g3_
argument_list|(
name|g3
argument_list|)
operator|,
name|g4_
argument_list|(
argument|g4
argument_list|)
block|{}
name|virtual
operator|~
name|CartesianProductGenerator4
argument_list|()
block|{}
name|virtual
name|ParamIteratorInterface
operator|<
name|ParamType
operator|>
operator|*
name|Begin
argument_list|()
specifier|const
block|{
return|return
name|new
name|Iterator
argument_list|(
name|this
argument_list|,
name|g1_
argument_list|,
name|g1_
operator|.
name|begin
argument_list|()
argument_list|,
name|g2_
argument_list|,
name|g2_
operator|.
name|begin
argument_list|()
argument_list|,
name|g3_
argument_list|,
name|g3_
operator|.
name|begin
argument_list|()
argument_list|,
name|g4_
argument_list|,
name|g4_
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|virtual
name|ParamIteratorInterface
operator|<
name|ParamType
operator|>
operator|*
name|End
argument_list|()
specifier|const
block|{
return|return
name|new
name|Iterator
argument_list|(
name|this
argument_list|,
name|g1_
argument_list|,
name|g1_
operator|.
name|end
argument_list|()
argument_list|,
name|g2_
argument_list|,
name|g2_
operator|.
name|end
argument_list|()
argument_list|,
name|g3_
argument_list|,
name|g3_
operator|.
name|end
argument_list|()
argument_list|,
name|g4_
argument_list|,
name|g4_
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|class
name|Iterator
range|:
name|public
name|ParamIteratorInterface
operator|<
name|ParamType
operator|>
block|{
name|public
operator|:
name|Iterator
argument_list|(
argument|const ParamGeneratorInterface<ParamType>* base
argument_list|,
argument|const ParamGenerator<T1>& g1
argument_list|,
argument|const typename ParamGenerator<T1>::iterator& current1
argument_list|,
argument|const ParamGenerator<T2>& g2
argument_list|,
argument|const typename ParamGenerator<T2>::iterator& current2
argument_list|,
argument|const ParamGenerator<T3>& g3
argument_list|,
argument|const typename ParamGenerator<T3>::iterator& current3
argument_list|,
argument|const ParamGenerator<T4>& g4
argument_list|,
argument|const typename ParamGenerator<T4>::iterator& current4
argument_list|)
operator|:
name|base_
argument_list|(
name|base
argument_list|)
block|,
name|begin1_
argument_list|(
name|g1
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end1_
argument_list|(
name|g1
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current1_
argument_list|(
name|current1
argument_list|)
block|,
name|begin2_
argument_list|(
name|g2
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end2_
argument_list|(
name|g2
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current2_
argument_list|(
name|current2
argument_list|)
block|,
name|begin3_
argument_list|(
name|g3
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end3_
argument_list|(
name|g3
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current3_
argument_list|(
name|current3
argument_list|)
block|,
name|begin4_
argument_list|(
name|g4
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end4_
argument_list|(
name|g4
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current4_
argument_list|(
argument|current4
argument_list|)
block|{
name|ComputeCurrentValue
argument_list|()
block|;     }
name|virtual
operator|~
name|Iterator
argument_list|()
block|{}
name|virtual
specifier|const
name|ParamGeneratorInterface
operator|<
name|ParamType
operator|>
operator|*
name|BaseGenerator
argument_list|()
specifier|const
block|{
return|return
name|base_
return|;
block|}
comment|// Advance should not be called on beyond-of-range iterators
comment|// so no component iterators must be beyond end of range, either.
name|virtual
name|void
name|Advance
argument_list|()
block|{
name|assert
argument_list|(
operator|!
name|AtEnd
argument_list|()
argument_list|)
block|;
operator|++
name|current4_
block|;
if|if
condition|(
name|current4_
operator|==
name|end4_
condition|)
block|{
name|current4_
operator|=
name|begin4_
expr_stmt|;
operator|++
name|current3_
expr_stmt|;
block|}
if|if
condition|(
name|current3_
operator|==
name|end3_
condition|)
block|{
name|current3_
operator|=
name|begin3_
expr_stmt|;
operator|++
name|current2_
expr_stmt|;
block|}
if|if
condition|(
name|current2_
operator|==
name|end2_
condition|)
block|{
name|current2_
operator|=
name|begin2_
expr_stmt|;
operator|++
name|current1_
expr_stmt|;
block|}
name|ComputeCurrentValue
argument_list|()
expr_stmt|;
block|}
name|virtual
name|ParamIteratorInterface
operator|<
name|ParamType
operator|>
operator|*
name|Clone
argument_list|()
specifier|const
block|{
return|return
name|new
name|Iterator
argument_list|(
operator|*
name|this
argument_list|)
return|;
block|}
name|virtual
specifier|const
name|ParamType
operator|*
name|Current
argument_list|()
specifier|const
block|{
return|return
operator|&
name|current_value_
return|;
block|}
name|virtual
name|bool
name|Equals
argument_list|(
argument|const ParamIteratorInterface<ParamType>& other
argument_list|)
specifier|const
block|{
comment|// Having the same base generator guarantees that the other
comment|// iterator is of the same type and we can downcast.
name|GTEST_CHECK_
argument_list|(
name|BaseGenerator
argument_list|()
operator|==
name|other
operator|.
name|BaseGenerator
argument_list|()
argument_list|)
operator|<<
literal|"The program attempted to compare iterators "
operator|<<
literal|"from different generators."
operator|<<
name|std
operator|::
name|endl
block|;
specifier|const
name|Iterator
operator|*
name|typed_other
operator|=
name|CheckedDowncastToActualType
operator|<
specifier|const
name|Iterator
operator|>
operator|(
operator|&
name|other
operator|)
block|;
comment|// We must report iterators equal if they both point beyond their
comment|// respective ranges. That can happen in a variety of fashions,
comment|// so we have to consult AtEnd().
return|return
operator|(
name|AtEnd
argument_list|()
operator|&&
name|typed_other
operator|->
name|AtEnd
argument_list|()
operator|)
operator|||
operator|(
name|current1_
operator|==
name|typed_other
operator|->
name|current1_
operator|&&
name|current2_
operator|==
name|typed_other
operator|->
name|current2_
operator|&&
name|current3_
operator|==
name|typed_other
operator|->
name|current3_
operator|&&
name|current4_
operator|==
name|typed_other
operator|->
name|current4_
operator|)
return|;
block|}
name|private
operator|:
name|Iterator
argument_list|(
specifier|const
name|Iterator
operator|&
name|other
argument_list|)
operator|:
name|base_
argument_list|(
name|other
operator|.
name|base_
argument_list|)
block|,
name|begin1_
argument_list|(
name|other
operator|.
name|begin1_
argument_list|)
block|,
name|end1_
argument_list|(
name|other
operator|.
name|end1_
argument_list|)
block|,
name|current1_
argument_list|(
name|other
operator|.
name|current1_
argument_list|)
block|,
name|begin2_
argument_list|(
name|other
operator|.
name|begin2_
argument_list|)
block|,
name|end2_
argument_list|(
name|other
operator|.
name|end2_
argument_list|)
block|,
name|current2_
argument_list|(
name|other
operator|.
name|current2_
argument_list|)
block|,
name|begin3_
argument_list|(
name|other
operator|.
name|begin3_
argument_list|)
block|,
name|end3_
argument_list|(
name|other
operator|.
name|end3_
argument_list|)
block|,
name|current3_
argument_list|(
name|other
operator|.
name|current3_
argument_list|)
block|,
name|begin4_
argument_list|(
name|other
operator|.
name|begin4_
argument_list|)
block|,
name|end4_
argument_list|(
name|other
operator|.
name|end4_
argument_list|)
block|,
name|current4_
argument_list|(
argument|other.current4_
argument_list|)
block|{
name|ComputeCurrentValue
argument_list|()
block|;     }
name|void
name|ComputeCurrentValue
argument_list|()
block|{
if|if
condition|(
operator|!
name|AtEnd
argument_list|()
condition|)
name|current_value_
operator|=
name|ParamType
argument_list|(
operator|*
name|current1_
argument_list|,
operator|*
name|current2_
argument_list|,
operator|*
name|current3_
argument_list|,
operator|*
name|current4_
argument_list|)
expr_stmt|;
block|}
name|bool
name|AtEnd
argument_list|()
specifier|const
block|{
comment|// We must report iterator past the end of the range when either of the
comment|// component iterators has reached the end of its range.
return|return
name|current1_
operator|==
name|end1_
operator|||
name|current2_
operator|==
name|end2_
operator|||
name|current3_
operator|==
name|end3_
operator|||
name|current4_
operator|==
name|end4_
return|;
block|}
specifier|const
name|ParamGeneratorInterface
operator|<
name|ParamType
operator|>
operator|*
specifier|const
name|base_
block|;
comment|// begin[i]_ and end[i]_ define the i-th range that Iterator traverses.
comment|// current[i]_ is the actual traversing iterator.
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T1
operator|>
operator|::
name|iterator
name|begin1_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T1
operator|>
operator|::
name|iterator
name|end1_
block|;
name|typename
name|ParamGenerator
operator|<
name|T1
operator|>
operator|::
name|iterator
name|current1_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T2
operator|>
operator|::
name|iterator
name|begin2_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T2
operator|>
operator|::
name|iterator
name|end2_
block|;
name|typename
name|ParamGenerator
operator|<
name|T2
operator|>
operator|::
name|iterator
name|current2_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T3
operator|>
operator|::
name|iterator
name|begin3_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T3
operator|>
operator|::
name|iterator
name|end3_
block|;
name|typename
name|ParamGenerator
operator|<
name|T3
operator|>
operator|::
name|iterator
name|current3_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T4
operator|>
operator|::
name|iterator
name|begin4_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T4
operator|>
operator|::
name|iterator
name|end4_
block|;
name|typename
name|ParamGenerator
operator|<
name|T4
operator|>
operator|::
name|iterator
name|current4_
block|;
name|ParamType
name|current_value_
block|;   }
decl_stmt|;
end_decl_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T1
operator|>
name|g1_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T2
operator|>
name|g2_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T3
operator|>
name|g3_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T4
operator|>
name|g4_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|>
name|class
name|CartesianProductGenerator5
operator|:
name|public
name|ParamGeneratorInterface
operator|<
operator|::
name|std
operator|::
name|tr1
operator|::
name|tuple
operator|<
name|T1
operator|,
name|T2
operator|,
name|T3
operator|,
name|T4
operator|,
name|T5
operator|>
expr|>
block|{
name|public
operator|:
typedef|typedef
operator|::
name|std
operator|::
name|tr1
operator|::
name|tuple
operator|<
name|T1
operator|,
name|T2
operator|,
name|T3
operator|,
name|T4
operator|,
name|T5
operator|>
name|ParamType
expr_stmt|;
name|CartesianProductGenerator5
argument_list|(
specifier|const
name|ParamGenerator
operator|<
name|T1
operator|>
operator|&
name|g1
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T2
operator|>
operator|&
name|g2
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T3
operator|>
operator|&
name|g3
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T4
operator|>
operator|&
name|g4
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T5
operator|>
operator|&
name|g5
argument_list|)
operator|:
name|g1_
argument_list|(
name|g1
argument_list|)
operator|,
name|g2_
argument_list|(
name|g2
argument_list|)
operator|,
name|g3_
argument_list|(
name|g3
argument_list|)
operator|,
name|g4_
argument_list|(
name|g4
argument_list|)
operator|,
name|g5_
argument_list|(
argument|g5
argument_list|)
block|{}
name|virtual
operator|~
name|CartesianProductGenerator5
argument_list|()
block|{}
name|virtual
name|ParamIteratorInterface
operator|<
name|ParamType
operator|>
operator|*
name|Begin
argument_list|()
specifier|const
block|{
return|return
name|new
name|Iterator
argument_list|(
name|this
argument_list|,
name|g1_
argument_list|,
name|g1_
operator|.
name|begin
argument_list|()
argument_list|,
name|g2_
argument_list|,
name|g2_
operator|.
name|begin
argument_list|()
argument_list|,
name|g3_
argument_list|,
name|g3_
operator|.
name|begin
argument_list|()
argument_list|,
name|g4_
argument_list|,
name|g4_
operator|.
name|begin
argument_list|()
argument_list|,
name|g5_
argument_list|,
name|g5_
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|virtual
name|ParamIteratorInterface
operator|<
name|ParamType
operator|>
operator|*
name|End
argument_list|()
specifier|const
block|{
return|return
name|new
name|Iterator
argument_list|(
name|this
argument_list|,
name|g1_
argument_list|,
name|g1_
operator|.
name|end
argument_list|()
argument_list|,
name|g2_
argument_list|,
name|g2_
operator|.
name|end
argument_list|()
argument_list|,
name|g3_
argument_list|,
name|g3_
operator|.
name|end
argument_list|()
argument_list|,
name|g4_
argument_list|,
name|g4_
operator|.
name|end
argument_list|()
argument_list|,
name|g5_
argument_list|,
name|g5_
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|class
name|Iterator
range|:
name|public
name|ParamIteratorInterface
operator|<
name|ParamType
operator|>
block|{
name|public
operator|:
name|Iterator
argument_list|(
argument|const ParamGeneratorInterface<ParamType>* base
argument_list|,
argument|const ParamGenerator<T1>& g1
argument_list|,
argument|const typename ParamGenerator<T1>::iterator& current1
argument_list|,
argument|const ParamGenerator<T2>& g2
argument_list|,
argument|const typename ParamGenerator<T2>::iterator& current2
argument_list|,
argument|const ParamGenerator<T3>& g3
argument_list|,
argument|const typename ParamGenerator<T3>::iterator& current3
argument_list|,
argument|const ParamGenerator<T4>& g4
argument_list|,
argument|const typename ParamGenerator<T4>::iterator& current4
argument_list|,
argument|const ParamGenerator<T5>& g5
argument_list|,
argument|const typename ParamGenerator<T5>::iterator& current5
argument_list|)
operator|:
name|base_
argument_list|(
name|base
argument_list|)
block|,
name|begin1_
argument_list|(
name|g1
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end1_
argument_list|(
name|g1
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current1_
argument_list|(
name|current1
argument_list|)
block|,
name|begin2_
argument_list|(
name|g2
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end2_
argument_list|(
name|g2
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current2_
argument_list|(
name|current2
argument_list|)
block|,
name|begin3_
argument_list|(
name|g3
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end3_
argument_list|(
name|g3
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current3_
argument_list|(
name|current3
argument_list|)
block|,
name|begin4_
argument_list|(
name|g4
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end4_
argument_list|(
name|g4
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current4_
argument_list|(
name|current4
argument_list|)
block|,
name|begin5_
argument_list|(
name|g5
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end5_
argument_list|(
name|g5
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current5_
argument_list|(
argument|current5
argument_list|)
block|{
name|ComputeCurrentValue
argument_list|()
block|;     }
name|virtual
operator|~
name|Iterator
argument_list|()
block|{}
name|virtual
specifier|const
name|ParamGeneratorInterface
operator|<
name|ParamType
operator|>
operator|*
name|BaseGenerator
argument_list|()
specifier|const
block|{
return|return
name|base_
return|;
block|}
comment|// Advance should not be called on beyond-of-range iterators
comment|// so no component iterators must be beyond end of range, either.
name|virtual
name|void
name|Advance
argument_list|()
block|{
name|assert
argument_list|(
operator|!
name|AtEnd
argument_list|()
argument_list|)
block|;
operator|++
name|current5_
block|;
if|if
condition|(
name|current5_
operator|==
name|end5_
condition|)
block|{
name|current5_
operator|=
name|begin5_
expr_stmt|;
operator|++
name|current4_
expr_stmt|;
block|}
if|if
condition|(
name|current4_
operator|==
name|end4_
condition|)
block|{
name|current4_
operator|=
name|begin4_
expr_stmt|;
operator|++
name|current3_
expr_stmt|;
block|}
if|if
condition|(
name|current3_
operator|==
name|end3_
condition|)
block|{
name|current3_
operator|=
name|begin3_
expr_stmt|;
operator|++
name|current2_
expr_stmt|;
block|}
if|if
condition|(
name|current2_
operator|==
name|end2_
condition|)
block|{
name|current2_
operator|=
name|begin2_
expr_stmt|;
operator|++
name|current1_
expr_stmt|;
block|}
name|ComputeCurrentValue
argument_list|()
expr_stmt|;
block|}
name|virtual
name|ParamIteratorInterface
operator|<
name|ParamType
operator|>
operator|*
name|Clone
argument_list|()
specifier|const
block|{
return|return
name|new
name|Iterator
argument_list|(
operator|*
name|this
argument_list|)
return|;
block|}
name|virtual
specifier|const
name|ParamType
operator|*
name|Current
argument_list|()
specifier|const
block|{
return|return
operator|&
name|current_value_
return|;
block|}
name|virtual
name|bool
name|Equals
argument_list|(
argument|const ParamIteratorInterface<ParamType>& other
argument_list|)
specifier|const
block|{
comment|// Having the same base generator guarantees that the other
comment|// iterator is of the same type and we can downcast.
name|GTEST_CHECK_
argument_list|(
name|BaseGenerator
argument_list|()
operator|==
name|other
operator|.
name|BaseGenerator
argument_list|()
argument_list|)
operator|<<
literal|"The program attempted to compare iterators "
operator|<<
literal|"from different generators."
operator|<<
name|std
operator|::
name|endl
block|;
specifier|const
name|Iterator
operator|*
name|typed_other
operator|=
name|CheckedDowncastToActualType
operator|<
specifier|const
name|Iterator
operator|>
operator|(
operator|&
name|other
operator|)
block|;
comment|// We must report iterators equal if they both point beyond their
comment|// respective ranges. That can happen in a variety of fashions,
comment|// so we have to consult AtEnd().
return|return
operator|(
name|AtEnd
argument_list|()
operator|&&
name|typed_other
operator|->
name|AtEnd
argument_list|()
operator|)
operator|||
operator|(
name|current1_
operator|==
name|typed_other
operator|->
name|current1_
operator|&&
name|current2_
operator|==
name|typed_other
operator|->
name|current2_
operator|&&
name|current3_
operator|==
name|typed_other
operator|->
name|current3_
operator|&&
name|current4_
operator|==
name|typed_other
operator|->
name|current4_
operator|&&
name|current5_
operator|==
name|typed_other
operator|->
name|current5_
operator|)
return|;
block|}
name|private
operator|:
name|Iterator
argument_list|(
specifier|const
name|Iterator
operator|&
name|other
argument_list|)
operator|:
name|base_
argument_list|(
name|other
operator|.
name|base_
argument_list|)
block|,
name|begin1_
argument_list|(
name|other
operator|.
name|begin1_
argument_list|)
block|,
name|end1_
argument_list|(
name|other
operator|.
name|end1_
argument_list|)
block|,
name|current1_
argument_list|(
name|other
operator|.
name|current1_
argument_list|)
block|,
name|begin2_
argument_list|(
name|other
operator|.
name|begin2_
argument_list|)
block|,
name|end2_
argument_list|(
name|other
operator|.
name|end2_
argument_list|)
block|,
name|current2_
argument_list|(
name|other
operator|.
name|current2_
argument_list|)
block|,
name|begin3_
argument_list|(
name|other
operator|.
name|begin3_
argument_list|)
block|,
name|end3_
argument_list|(
name|other
operator|.
name|end3_
argument_list|)
block|,
name|current3_
argument_list|(
name|other
operator|.
name|current3_
argument_list|)
block|,
name|begin4_
argument_list|(
name|other
operator|.
name|begin4_
argument_list|)
block|,
name|end4_
argument_list|(
name|other
operator|.
name|end4_
argument_list|)
block|,
name|current4_
argument_list|(
name|other
operator|.
name|current4_
argument_list|)
block|,
name|begin5_
argument_list|(
name|other
operator|.
name|begin5_
argument_list|)
block|,
name|end5_
argument_list|(
name|other
operator|.
name|end5_
argument_list|)
block|,
name|current5_
argument_list|(
argument|other.current5_
argument_list|)
block|{
name|ComputeCurrentValue
argument_list|()
block|;     }
name|void
name|ComputeCurrentValue
argument_list|()
block|{
if|if
condition|(
operator|!
name|AtEnd
argument_list|()
condition|)
name|current_value_
operator|=
name|ParamType
argument_list|(
operator|*
name|current1_
argument_list|,
operator|*
name|current2_
argument_list|,
operator|*
name|current3_
argument_list|,
operator|*
name|current4_
argument_list|,
operator|*
name|current5_
argument_list|)
expr_stmt|;
block|}
name|bool
name|AtEnd
argument_list|()
specifier|const
block|{
comment|// We must report iterator past the end of the range when either of the
comment|// component iterators has reached the end of its range.
return|return
name|current1_
operator|==
name|end1_
operator|||
name|current2_
operator|==
name|end2_
operator|||
name|current3_
operator|==
name|end3_
operator|||
name|current4_
operator|==
name|end4_
operator|||
name|current5_
operator|==
name|end5_
return|;
block|}
specifier|const
name|ParamGeneratorInterface
operator|<
name|ParamType
operator|>
operator|*
specifier|const
name|base_
block|;
comment|// begin[i]_ and end[i]_ define the i-th range that Iterator traverses.
comment|// current[i]_ is the actual traversing iterator.
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T1
operator|>
operator|::
name|iterator
name|begin1_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T1
operator|>
operator|::
name|iterator
name|end1_
block|;
name|typename
name|ParamGenerator
operator|<
name|T1
operator|>
operator|::
name|iterator
name|current1_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T2
operator|>
operator|::
name|iterator
name|begin2_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T2
operator|>
operator|::
name|iterator
name|end2_
block|;
name|typename
name|ParamGenerator
operator|<
name|T2
operator|>
operator|::
name|iterator
name|current2_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T3
operator|>
operator|::
name|iterator
name|begin3_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T3
operator|>
operator|::
name|iterator
name|end3_
block|;
name|typename
name|ParamGenerator
operator|<
name|T3
operator|>
operator|::
name|iterator
name|current3_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T4
operator|>
operator|::
name|iterator
name|begin4_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T4
operator|>
operator|::
name|iterator
name|end4_
block|;
name|typename
name|ParamGenerator
operator|<
name|T4
operator|>
operator|::
name|iterator
name|current4_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T5
operator|>
operator|::
name|iterator
name|begin5_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T5
operator|>
operator|::
name|iterator
name|end5_
block|;
name|typename
name|ParamGenerator
operator|<
name|T5
operator|>
operator|::
name|iterator
name|current5_
block|;
name|ParamType
name|current_value_
block|;   }
decl_stmt|;
end_decl_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T1
operator|>
name|g1_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T2
operator|>
name|g2_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T3
operator|>
name|g3_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T4
operator|>
name|g4_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T5
operator|>
name|g5_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|>
name|class
name|CartesianProductGenerator6
operator|:
name|public
name|ParamGeneratorInterface
operator|<
operator|::
name|std
operator|::
name|tr1
operator|::
name|tuple
operator|<
name|T1
operator|,
name|T2
operator|,
name|T3
operator|,
name|T4
operator|,
name|T5
operator|,
name|T6
operator|>
expr|>
block|{
name|public
operator|:
typedef|typedef
operator|::
name|std
operator|::
name|tr1
operator|::
name|tuple
operator|<
name|T1
operator|,
name|T2
operator|,
name|T3
operator|,
name|T4
operator|,
name|T5
operator|,
name|T6
operator|>
name|ParamType
expr_stmt|;
name|CartesianProductGenerator6
argument_list|(
specifier|const
name|ParamGenerator
operator|<
name|T1
operator|>
operator|&
name|g1
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T2
operator|>
operator|&
name|g2
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T3
operator|>
operator|&
name|g3
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T4
operator|>
operator|&
name|g4
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T5
operator|>
operator|&
name|g5
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T6
operator|>
operator|&
name|g6
argument_list|)
operator|:
name|g1_
argument_list|(
name|g1
argument_list|)
operator|,
name|g2_
argument_list|(
name|g2
argument_list|)
operator|,
name|g3_
argument_list|(
name|g3
argument_list|)
operator|,
name|g4_
argument_list|(
name|g4
argument_list|)
operator|,
name|g5_
argument_list|(
name|g5
argument_list|)
operator|,
name|g6_
argument_list|(
argument|g6
argument_list|)
block|{}
name|virtual
operator|~
name|CartesianProductGenerator6
argument_list|()
block|{}
name|virtual
name|ParamIteratorInterface
operator|<
name|ParamType
operator|>
operator|*
name|Begin
argument_list|()
specifier|const
block|{
return|return
name|new
name|Iterator
argument_list|(
name|this
argument_list|,
name|g1_
argument_list|,
name|g1_
operator|.
name|begin
argument_list|()
argument_list|,
name|g2_
argument_list|,
name|g2_
operator|.
name|begin
argument_list|()
argument_list|,
name|g3_
argument_list|,
name|g3_
operator|.
name|begin
argument_list|()
argument_list|,
name|g4_
argument_list|,
name|g4_
operator|.
name|begin
argument_list|()
argument_list|,
name|g5_
argument_list|,
name|g5_
operator|.
name|begin
argument_list|()
argument_list|,
name|g6_
argument_list|,
name|g6_
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|virtual
name|ParamIteratorInterface
operator|<
name|ParamType
operator|>
operator|*
name|End
argument_list|()
specifier|const
block|{
return|return
name|new
name|Iterator
argument_list|(
name|this
argument_list|,
name|g1_
argument_list|,
name|g1_
operator|.
name|end
argument_list|()
argument_list|,
name|g2_
argument_list|,
name|g2_
operator|.
name|end
argument_list|()
argument_list|,
name|g3_
argument_list|,
name|g3_
operator|.
name|end
argument_list|()
argument_list|,
name|g4_
argument_list|,
name|g4_
operator|.
name|end
argument_list|()
argument_list|,
name|g5_
argument_list|,
name|g5_
operator|.
name|end
argument_list|()
argument_list|,
name|g6_
argument_list|,
name|g6_
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|class
name|Iterator
range|:
name|public
name|ParamIteratorInterface
operator|<
name|ParamType
operator|>
block|{
name|public
operator|:
name|Iterator
argument_list|(
argument|const ParamGeneratorInterface<ParamType>* base
argument_list|,
argument|const ParamGenerator<T1>& g1
argument_list|,
argument|const typename ParamGenerator<T1>::iterator& current1
argument_list|,
argument|const ParamGenerator<T2>& g2
argument_list|,
argument|const typename ParamGenerator<T2>::iterator& current2
argument_list|,
argument|const ParamGenerator<T3>& g3
argument_list|,
argument|const typename ParamGenerator<T3>::iterator& current3
argument_list|,
argument|const ParamGenerator<T4>& g4
argument_list|,
argument|const typename ParamGenerator<T4>::iterator& current4
argument_list|,
argument|const ParamGenerator<T5>& g5
argument_list|,
argument|const typename ParamGenerator<T5>::iterator& current5
argument_list|,
argument|const ParamGenerator<T6>& g6
argument_list|,
argument|const typename ParamGenerator<T6>::iterator& current6
argument_list|)
operator|:
name|base_
argument_list|(
name|base
argument_list|)
block|,
name|begin1_
argument_list|(
name|g1
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end1_
argument_list|(
name|g1
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current1_
argument_list|(
name|current1
argument_list|)
block|,
name|begin2_
argument_list|(
name|g2
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end2_
argument_list|(
name|g2
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current2_
argument_list|(
name|current2
argument_list|)
block|,
name|begin3_
argument_list|(
name|g3
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end3_
argument_list|(
name|g3
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current3_
argument_list|(
name|current3
argument_list|)
block|,
name|begin4_
argument_list|(
name|g4
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end4_
argument_list|(
name|g4
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current4_
argument_list|(
name|current4
argument_list|)
block|,
name|begin5_
argument_list|(
name|g5
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end5_
argument_list|(
name|g5
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current5_
argument_list|(
name|current5
argument_list|)
block|,
name|begin6_
argument_list|(
name|g6
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end6_
argument_list|(
name|g6
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current6_
argument_list|(
argument|current6
argument_list|)
block|{
name|ComputeCurrentValue
argument_list|()
block|;     }
name|virtual
operator|~
name|Iterator
argument_list|()
block|{}
name|virtual
specifier|const
name|ParamGeneratorInterface
operator|<
name|ParamType
operator|>
operator|*
name|BaseGenerator
argument_list|()
specifier|const
block|{
return|return
name|base_
return|;
block|}
comment|// Advance should not be called on beyond-of-range iterators
comment|// so no component iterators must be beyond end of range, either.
name|virtual
name|void
name|Advance
argument_list|()
block|{
name|assert
argument_list|(
operator|!
name|AtEnd
argument_list|()
argument_list|)
block|;
operator|++
name|current6_
block|;
if|if
condition|(
name|current6_
operator|==
name|end6_
condition|)
block|{
name|current6_
operator|=
name|begin6_
expr_stmt|;
operator|++
name|current5_
expr_stmt|;
block|}
if|if
condition|(
name|current5_
operator|==
name|end5_
condition|)
block|{
name|current5_
operator|=
name|begin5_
expr_stmt|;
operator|++
name|current4_
expr_stmt|;
block|}
if|if
condition|(
name|current4_
operator|==
name|end4_
condition|)
block|{
name|current4_
operator|=
name|begin4_
expr_stmt|;
operator|++
name|current3_
expr_stmt|;
block|}
if|if
condition|(
name|current3_
operator|==
name|end3_
condition|)
block|{
name|current3_
operator|=
name|begin3_
expr_stmt|;
operator|++
name|current2_
expr_stmt|;
block|}
if|if
condition|(
name|current2_
operator|==
name|end2_
condition|)
block|{
name|current2_
operator|=
name|begin2_
expr_stmt|;
operator|++
name|current1_
expr_stmt|;
block|}
name|ComputeCurrentValue
argument_list|()
expr_stmt|;
block|}
name|virtual
name|ParamIteratorInterface
operator|<
name|ParamType
operator|>
operator|*
name|Clone
argument_list|()
specifier|const
block|{
return|return
name|new
name|Iterator
argument_list|(
operator|*
name|this
argument_list|)
return|;
block|}
name|virtual
specifier|const
name|ParamType
operator|*
name|Current
argument_list|()
specifier|const
block|{
return|return
operator|&
name|current_value_
return|;
block|}
name|virtual
name|bool
name|Equals
argument_list|(
argument|const ParamIteratorInterface<ParamType>& other
argument_list|)
specifier|const
block|{
comment|// Having the same base generator guarantees that the other
comment|// iterator is of the same type and we can downcast.
name|GTEST_CHECK_
argument_list|(
name|BaseGenerator
argument_list|()
operator|==
name|other
operator|.
name|BaseGenerator
argument_list|()
argument_list|)
operator|<<
literal|"The program attempted to compare iterators "
operator|<<
literal|"from different generators."
operator|<<
name|std
operator|::
name|endl
block|;
specifier|const
name|Iterator
operator|*
name|typed_other
operator|=
name|CheckedDowncastToActualType
operator|<
specifier|const
name|Iterator
operator|>
operator|(
operator|&
name|other
operator|)
block|;
comment|// We must report iterators equal if they both point beyond their
comment|// respective ranges. That can happen in a variety of fashions,
comment|// so we have to consult AtEnd().
return|return
operator|(
name|AtEnd
argument_list|()
operator|&&
name|typed_other
operator|->
name|AtEnd
argument_list|()
operator|)
operator|||
operator|(
name|current1_
operator|==
name|typed_other
operator|->
name|current1_
operator|&&
name|current2_
operator|==
name|typed_other
operator|->
name|current2_
operator|&&
name|current3_
operator|==
name|typed_other
operator|->
name|current3_
operator|&&
name|current4_
operator|==
name|typed_other
operator|->
name|current4_
operator|&&
name|current5_
operator|==
name|typed_other
operator|->
name|current5_
operator|&&
name|current6_
operator|==
name|typed_other
operator|->
name|current6_
operator|)
return|;
block|}
name|private
operator|:
name|Iterator
argument_list|(
specifier|const
name|Iterator
operator|&
name|other
argument_list|)
operator|:
name|base_
argument_list|(
name|other
operator|.
name|base_
argument_list|)
block|,
name|begin1_
argument_list|(
name|other
operator|.
name|begin1_
argument_list|)
block|,
name|end1_
argument_list|(
name|other
operator|.
name|end1_
argument_list|)
block|,
name|current1_
argument_list|(
name|other
operator|.
name|current1_
argument_list|)
block|,
name|begin2_
argument_list|(
name|other
operator|.
name|begin2_
argument_list|)
block|,
name|end2_
argument_list|(
name|other
operator|.
name|end2_
argument_list|)
block|,
name|current2_
argument_list|(
name|other
operator|.
name|current2_
argument_list|)
block|,
name|begin3_
argument_list|(
name|other
operator|.
name|begin3_
argument_list|)
block|,
name|end3_
argument_list|(
name|other
operator|.
name|end3_
argument_list|)
block|,
name|current3_
argument_list|(
name|other
operator|.
name|current3_
argument_list|)
block|,
name|begin4_
argument_list|(
name|other
operator|.
name|begin4_
argument_list|)
block|,
name|end4_
argument_list|(
name|other
operator|.
name|end4_
argument_list|)
block|,
name|current4_
argument_list|(
name|other
operator|.
name|current4_
argument_list|)
block|,
name|begin5_
argument_list|(
name|other
operator|.
name|begin5_
argument_list|)
block|,
name|end5_
argument_list|(
name|other
operator|.
name|end5_
argument_list|)
block|,
name|current5_
argument_list|(
name|other
operator|.
name|current5_
argument_list|)
block|,
name|begin6_
argument_list|(
name|other
operator|.
name|begin6_
argument_list|)
block|,
name|end6_
argument_list|(
name|other
operator|.
name|end6_
argument_list|)
block|,
name|current6_
argument_list|(
argument|other.current6_
argument_list|)
block|{
name|ComputeCurrentValue
argument_list|()
block|;     }
name|void
name|ComputeCurrentValue
argument_list|()
block|{
if|if
condition|(
operator|!
name|AtEnd
argument_list|()
condition|)
name|current_value_
operator|=
name|ParamType
argument_list|(
operator|*
name|current1_
argument_list|,
operator|*
name|current2_
argument_list|,
operator|*
name|current3_
argument_list|,
operator|*
name|current4_
argument_list|,
operator|*
name|current5_
argument_list|,
operator|*
name|current6_
argument_list|)
expr_stmt|;
block|}
name|bool
name|AtEnd
argument_list|()
specifier|const
block|{
comment|// We must report iterator past the end of the range when either of the
comment|// component iterators has reached the end of its range.
return|return
name|current1_
operator|==
name|end1_
operator|||
name|current2_
operator|==
name|end2_
operator|||
name|current3_
operator|==
name|end3_
operator|||
name|current4_
operator|==
name|end4_
operator|||
name|current5_
operator|==
name|end5_
operator|||
name|current6_
operator|==
name|end6_
return|;
block|}
specifier|const
name|ParamGeneratorInterface
operator|<
name|ParamType
operator|>
operator|*
specifier|const
name|base_
block|;
comment|// begin[i]_ and end[i]_ define the i-th range that Iterator traverses.
comment|// current[i]_ is the actual traversing iterator.
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T1
operator|>
operator|::
name|iterator
name|begin1_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T1
operator|>
operator|::
name|iterator
name|end1_
block|;
name|typename
name|ParamGenerator
operator|<
name|T1
operator|>
operator|::
name|iterator
name|current1_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T2
operator|>
operator|::
name|iterator
name|begin2_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T2
operator|>
operator|::
name|iterator
name|end2_
block|;
name|typename
name|ParamGenerator
operator|<
name|T2
operator|>
operator|::
name|iterator
name|current2_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T3
operator|>
operator|::
name|iterator
name|begin3_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T3
operator|>
operator|::
name|iterator
name|end3_
block|;
name|typename
name|ParamGenerator
operator|<
name|T3
operator|>
operator|::
name|iterator
name|current3_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T4
operator|>
operator|::
name|iterator
name|begin4_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T4
operator|>
operator|::
name|iterator
name|end4_
block|;
name|typename
name|ParamGenerator
operator|<
name|T4
operator|>
operator|::
name|iterator
name|current4_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T5
operator|>
operator|::
name|iterator
name|begin5_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T5
operator|>
operator|::
name|iterator
name|end5_
block|;
name|typename
name|ParamGenerator
operator|<
name|T5
operator|>
operator|::
name|iterator
name|current5_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T6
operator|>
operator|::
name|iterator
name|begin6_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T6
operator|>
operator|::
name|iterator
name|end6_
block|;
name|typename
name|ParamGenerator
operator|<
name|T6
operator|>
operator|::
name|iterator
name|current6_
block|;
name|ParamType
name|current_value_
block|;   }
decl_stmt|;
end_decl_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T1
operator|>
name|g1_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T2
operator|>
name|g2_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T3
operator|>
name|g3_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T4
operator|>
name|g4_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T5
operator|>
name|g5_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T6
operator|>
name|g6_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|>
name|class
name|CartesianProductGenerator7
operator|:
name|public
name|ParamGeneratorInterface
operator|<
operator|::
name|std
operator|::
name|tr1
operator|::
name|tuple
operator|<
name|T1
operator|,
name|T2
operator|,
name|T3
operator|,
name|T4
operator|,
name|T5
operator|,
name|T6
operator|,
name|T7
operator|>
expr|>
block|{
name|public
operator|:
typedef|typedef
operator|::
name|std
operator|::
name|tr1
operator|::
name|tuple
operator|<
name|T1
operator|,
name|T2
operator|,
name|T3
operator|,
name|T4
operator|,
name|T5
operator|,
name|T6
operator|,
name|T7
operator|>
name|ParamType
expr_stmt|;
name|CartesianProductGenerator7
argument_list|(
specifier|const
name|ParamGenerator
operator|<
name|T1
operator|>
operator|&
name|g1
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T2
operator|>
operator|&
name|g2
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T3
operator|>
operator|&
name|g3
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T4
operator|>
operator|&
name|g4
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T5
operator|>
operator|&
name|g5
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T6
operator|>
operator|&
name|g6
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T7
operator|>
operator|&
name|g7
argument_list|)
operator|:
name|g1_
argument_list|(
name|g1
argument_list|)
operator|,
name|g2_
argument_list|(
name|g2
argument_list|)
operator|,
name|g3_
argument_list|(
name|g3
argument_list|)
operator|,
name|g4_
argument_list|(
name|g4
argument_list|)
operator|,
name|g5_
argument_list|(
name|g5
argument_list|)
operator|,
name|g6_
argument_list|(
name|g6
argument_list|)
operator|,
name|g7_
argument_list|(
argument|g7
argument_list|)
block|{}
name|virtual
operator|~
name|CartesianProductGenerator7
argument_list|()
block|{}
name|virtual
name|ParamIteratorInterface
operator|<
name|ParamType
operator|>
operator|*
name|Begin
argument_list|()
specifier|const
block|{
return|return
name|new
name|Iterator
argument_list|(
name|this
argument_list|,
name|g1_
argument_list|,
name|g1_
operator|.
name|begin
argument_list|()
argument_list|,
name|g2_
argument_list|,
name|g2_
operator|.
name|begin
argument_list|()
argument_list|,
name|g3_
argument_list|,
name|g3_
operator|.
name|begin
argument_list|()
argument_list|,
name|g4_
argument_list|,
name|g4_
operator|.
name|begin
argument_list|()
argument_list|,
name|g5_
argument_list|,
name|g5_
operator|.
name|begin
argument_list|()
argument_list|,
name|g6_
argument_list|,
name|g6_
operator|.
name|begin
argument_list|()
argument_list|,
name|g7_
argument_list|,
name|g7_
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|virtual
name|ParamIteratorInterface
operator|<
name|ParamType
operator|>
operator|*
name|End
argument_list|()
specifier|const
block|{
return|return
name|new
name|Iterator
argument_list|(
name|this
argument_list|,
name|g1_
argument_list|,
name|g1_
operator|.
name|end
argument_list|()
argument_list|,
name|g2_
argument_list|,
name|g2_
operator|.
name|end
argument_list|()
argument_list|,
name|g3_
argument_list|,
name|g3_
operator|.
name|end
argument_list|()
argument_list|,
name|g4_
argument_list|,
name|g4_
operator|.
name|end
argument_list|()
argument_list|,
name|g5_
argument_list|,
name|g5_
operator|.
name|end
argument_list|()
argument_list|,
name|g6_
argument_list|,
name|g6_
operator|.
name|end
argument_list|()
argument_list|,
name|g7_
argument_list|,
name|g7_
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|class
name|Iterator
range|:
name|public
name|ParamIteratorInterface
operator|<
name|ParamType
operator|>
block|{
name|public
operator|:
name|Iterator
argument_list|(
argument|const ParamGeneratorInterface<ParamType>* base
argument_list|,
argument|const ParamGenerator<T1>& g1
argument_list|,
argument|const typename ParamGenerator<T1>::iterator& current1
argument_list|,
argument|const ParamGenerator<T2>& g2
argument_list|,
argument|const typename ParamGenerator<T2>::iterator& current2
argument_list|,
argument|const ParamGenerator<T3>& g3
argument_list|,
argument|const typename ParamGenerator<T3>::iterator& current3
argument_list|,
argument|const ParamGenerator<T4>& g4
argument_list|,
argument|const typename ParamGenerator<T4>::iterator& current4
argument_list|,
argument|const ParamGenerator<T5>& g5
argument_list|,
argument|const typename ParamGenerator<T5>::iterator& current5
argument_list|,
argument|const ParamGenerator<T6>& g6
argument_list|,
argument|const typename ParamGenerator<T6>::iterator& current6
argument_list|,
argument|const ParamGenerator<T7>& g7
argument_list|,
argument|const typename ParamGenerator<T7>::iterator& current7
argument_list|)
operator|:
name|base_
argument_list|(
name|base
argument_list|)
block|,
name|begin1_
argument_list|(
name|g1
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end1_
argument_list|(
name|g1
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current1_
argument_list|(
name|current1
argument_list|)
block|,
name|begin2_
argument_list|(
name|g2
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end2_
argument_list|(
name|g2
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current2_
argument_list|(
name|current2
argument_list|)
block|,
name|begin3_
argument_list|(
name|g3
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end3_
argument_list|(
name|g3
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current3_
argument_list|(
name|current3
argument_list|)
block|,
name|begin4_
argument_list|(
name|g4
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end4_
argument_list|(
name|g4
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current4_
argument_list|(
name|current4
argument_list|)
block|,
name|begin5_
argument_list|(
name|g5
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end5_
argument_list|(
name|g5
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current5_
argument_list|(
name|current5
argument_list|)
block|,
name|begin6_
argument_list|(
name|g6
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end6_
argument_list|(
name|g6
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current6_
argument_list|(
name|current6
argument_list|)
block|,
name|begin7_
argument_list|(
name|g7
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end7_
argument_list|(
name|g7
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current7_
argument_list|(
argument|current7
argument_list|)
block|{
name|ComputeCurrentValue
argument_list|()
block|;     }
name|virtual
operator|~
name|Iterator
argument_list|()
block|{}
name|virtual
specifier|const
name|ParamGeneratorInterface
operator|<
name|ParamType
operator|>
operator|*
name|BaseGenerator
argument_list|()
specifier|const
block|{
return|return
name|base_
return|;
block|}
comment|// Advance should not be called on beyond-of-range iterators
comment|// so no component iterators must be beyond end of range, either.
name|virtual
name|void
name|Advance
argument_list|()
block|{
name|assert
argument_list|(
operator|!
name|AtEnd
argument_list|()
argument_list|)
block|;
operator|++
name|current7_
block|;
if|if
condition|(
name|current7_
operator|==
name|end7_
condition|)
block|{
name|current7_
operator|=
name|begin7_
expr_stmt|;
operator|++
name|current6_
expr_stmt|;
block|}
if|if
condition|(
name|current6_
operator|==
name|end6_
condition|)
block|{
name|current6_
operator|=
name|begin6_
expr_stmt|;
operator|++
name|current5_
expr_stmt|;
block|}
if|if
condition|(
name|current5_
operator|==
name|end5_
condition|)
block|{
name|current5_
operator|=
name|begin5_
expr_stmt|;
operator|++
name|current4_
expr_stmt|;
block|}
if|if
condition|(
name|current4_
operator|==
name|end4_
condition|)
block|{
name|current4_
operator|=
name|begin4_
expr_stmt|;
operator|++
name|current3_
expr_stmt|;
block|}
if|if
condition|(
name|current3_
operator|==
name|end3_
condition|)
block|{
name|current3_
operator|=
name|begin3_
expr_stmt|;
operator|++
name|current2_
expr_stmt|;
block|}
if|if
condition|(
name|current2_
operator|==
name|end2_
condition|)
block|{
name|current2_
operator|=
name|begin2_
expr_stmt|;
operator|++
name|current1_
expr_stmt|;
block|}
name|ComputeCurrentValue
argument_list|()
expr_stmt|;
block|}
name|virtual
name|ParamIteratorInterface
operator|<
name|ParamType
operator|>
operator|*
name|Clone
argument_list|()
specifier|const
block|{
return|return
name|new
name|Iterator
argument_list|(
operator|*
name|this
argument_list|)
return|;
block|}
name|virtual
specifier|const
name|ParamType
operator|*
name|Current
argument_list|()
specifier|const
block|{
return|return
operator|&
name|current_value_
return|;
block|}
name|virtual
name|bool
name|Equals
argument_list|(
argument|const ParamIteratorInterface<ParamType>& other
argument_list|)
specifier|const
block|{
comment|// Having the same base generator guarantees that the other
comment|// iterator is of the same type and we can downcast.
name|GTEST_CHECK_
argument_list|(
name|BaseGenerator
argument_list|()
operator|==
name|other
operator|.
name|BaseGenerator
argument_list|()
argument_list|)
operator|<<
literal|"The program attempted to compare iterators "
operator|<<
literal|"from different generators."
operator|<<
name|std
operator|::
name|endl
block|;
specifier|const
name|Iterator
operator|*
name|typed_other
operator|=
name|CheckedDowncastToActualType
operator|<
specifier|const
name|Iterator
operator|>
operator|(
operator|&
name|other
operator|)
block|;
comment|// We must report iterators equal if they both point beyond their
comment|// respective ranges. That can happen in a variety of fashions,
comment|// so we have to consult AtEnd().
return|return
operator|(
name|AtEnd
argument_list|()
operator|&&
name|typed_other
operator|->
name|AtEnd
argument_list|()
operator|)
operator|||
operator|(
name|current1_
operator|==
name|typed_other
operator|->
name|current1_
operator|&&
name|current2_
operator|==
name|typed_other
operator|->
name|current2_
operator|&&
name|current3_
operator|==
name|typed_other
operator|->
name|current3_
operator|&&
name|current4_
operator|==
name|typed_other
operator|->
name|current4_
operator|&&
name|current5_
operator|==
name|typed_other
operator|->
name|current5_
operator|&&
name|current6_
operator|==
name|typed_other
operator|->
name|current6_
operator|&&
name|current7_
operator|==
name|typed_other
operator|->
name|current7_
operator|)
return|;
block|}
name|private
operator|:
name|Iterator
argument_list|(
specifier|const
name|Iterator
operator|&
name|other
argument_list|)
operator|:
name|base_
argument_list|(
name|other
operator|.
name|base_
argument_list|)
block|,
name|begin1_
argument_list|(
name|other
operator|.
name|begin1_
argument_list|)
block|,
name|end1_
argument_list|(
name|other
operator|.
name|end1_
argument_list|)
block|,
name|current1_
argument_list|(
name|other
operator|.
name|current1_
argument_list|)
block|,
name|begin2_
argument_list|(
name|other
operator|.
name|begin2_
argument_list|)
block|,
name|end2_
argument_list|(
name|other
operator|.
name|end2_
argument_list|)
block|,
name|current2_
argument_list|(
name|other
operator|.
name|current2_
argument_list|)
block|,
name|begin3_
argument_list|(
name|other
operator|.
name|begin3_
argument_list|)
block|,
name|end3_
argument_list|(
name|other
operator|.
name|end3_
argument_list|)
block|,
name|current3_
argument_list|(
name|other
operator|.
name|current3_
argument_list|)
block|,
name|begin4_
argument_list|(
name|other
operator|.
name|begin4_
argument_list|)
block|,
name|end4_
argument_list|(
name|other
operator|.
name|end4_
argument_list|)
block|,
name|current4_
argument_list|(
name|other
operator|.
name|current4_
argument_list|)
block|,
name|begin5_
argument_list|(
name|other
operator|.
name|begin5_
argument_list|)
block|,
name|end5_
argument_list|(
name|other
operator|.
name|end5_
argument_list|)
block|,
name|current5_
argument_list|(
name|other
operator|.
name|current5_
argument_list|)
block|,
name|begin6_
argument_list|(
name|other
operator|.
name|begin6_
argument_list|)
block|,
name|end6_
argument_list|(
name|other
operator|.
name|end6_
argument_list|)
block|,
name|current6_
argument_list|(
name|other
operator|.
name|current6_
argument_list|)
block|,
name|begin7_
argument_list|(
name|other
operator|.
name|begin7_
argument_list|)
block|,
name|end7_
argument_list|(
name|other
operator|.
name|end7_
argument_list|)
block|,
name|current7_
argument_list|(
argument|other.current7_
argument_list|)
block|{
name|ComputeCurrentValue
argument_list|()
block|;     }
name|void
name|ComputeCurrentValue
argument_list|()
block|{
if|if
condition|(
operator|!
name|AtEnd
argument_list|()
condition|)
name|current_value_
operator|=
name|ParamType
argument_list|(
operator|*
name|current1_
argument_list|,
operator|*
name|current2_
argument_list|,
operator|*
name|current3_
argument_list|,
operator|*
name|current4_
argument_list|,
operator|*
name|current5_
argument_list|,
operator|*
name|current6_
argument_list|,
operator|*
name|current7_
argument_list|)
expr_stmt|;
block|}
name|bool
name|AtEnd
argument_list|()
specifier|const
block|{
comment|// We must report iterator past the end of the range when either of the
comment|// component iterators has reached the end of its range.
return|return
name|current1_
operator|==
name|end1_
operator|||
name|current2_
operator|==
name|end2_
operator|||
name|current3_
operator|==
name|end3_
operator|||
name|current4_
operator|==
name|end4_
operator|||
name|current5_
operator|==
name|end5_
operator|||
name|current6_
operator|==
name|end6_
operator|||
name|current7_
operator|==
name|end7_
return|;
block|}
specifier|const
name|ParamGeneratorInterface
operator|<
name|ParamType
operator|>
operator|*
specifier|const
name|base_
block|;
comment|// begin[i]_ and end[i]_ define the i-th range that Iterator traverses.
comment|// current[i]_ is the actual traversing iterator.
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T1
operator|>
operator|::
name|iterator
name|begin1_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T1
operator|>
operator|::
name|iterator
name|end1_
block|;
name|typename
name|ParamGenerator
operator|<
name|T1
operator|>
operator|::
name|iterator
name|current1_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T2
operator|>
operator|::
name|iterator
name|begin2_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T2
operator|>
operator|::
name|iterator
name|end2_
block|;
name|typename
name|ParamGenerator
operator|<
name|T2
operator|>
operator|::
name|iterator
name|current2_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T3
operator|>
operator|::
name|iterator
name|begin3_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T3
operator|>
operator|::
name|iterator
name|end3_
block|;
name|typename
name|ParamGenerator
operator|<
name|T3
operator|>
operator|::
name|iterator
name|current3_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T4
operator|>
operator|::
name|iterator
name|begin4_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T4
operator|>
operator|::
name|iterator
name|end4_
block|;
name|typename
name|ParamGenerator
operator|<
name|T4
operator|>
operator|::
name|iterator
name|current4_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T5
operator|>
operator|::
name|iterator
name|begin5_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T5
operator|>
operator|::
name|iterator
name|end5_
block|;
name|typename
name|ParamGenerator
operator|<
name|T5
operator|>
operator|::
name|iterator
name|current5_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T6
operator|>
operator|::
name|iterator
name|begin6_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T6
operator|>
operator|::
name|iterator
name|end6_
block|;
name|typename
name|ParamGenerator
operator|<
name|T6
operator|>
operator|::
name|iterator
name|current6_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T7
operator|>
operator|::
name|iterator
name|begin7_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T7
operator|>
operator|::
name|iterator
name|end7_
block|;
name|typename
name|ParamGenerator
operator|<
name|T7
operator|>
operator|::
name|iterator
name|current7_
block|;
name|ParamType
name|current_value_
block|;   }
decl_stmt|;
end_decl_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T1
operator|>
name|g1_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T2
operator|>
name|g2_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T3
operator|>
name|g3_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T4
operator|>
name|g4_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T5
operator|>
name|g5_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T6
operator|>
name|g6_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T7
operator|>
name|g7_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|>
name|class
name|CartesianProductGenerator8
operator|:
name|public
name|ParamGeneratorInterface
operator|<
operator|::
name|std
operator|::
name|tr1
operator|::
name|tuple
operator|<
name|T1
operator|,
name|T2
operator|,
name|T3
operator|,
name|T4
operator|,
name|T5
operator|,
name|T6
operator|,
name|T7
operator|,
name|T8
operator|>
expr|>
block|{
name|public
operator|:
typedef|typedef
operator|::
name|std
operator|::
name|tr1
operator|::
name|tuple
operator|<
name|T1
operator|,
name|T2
operator|,
name|T3
operator|,
name|T4
operator|,
name|T5
operator|,
name|T6
operator|,
name|T7
operator|,
name|T8
operator|>
name|ParamType
expr_stmt|;
name|CartesianProductGenerator8
argument_list|(
specifier|const
name|ParamGenerator
operator|<
name|T1
operator|>
operator|&
name|g1
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T2
operator|>
operator|&
name|g2
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T3
operator|>
operator|&
name|g3
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T4
operator|>
operator|&
name|g4
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T5
operator|>
operator|&
name|g5
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T6
operator|>
operator|&
name|g6
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T7
operator|>
operator|&
name|g7
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T8
operator|>
operator|&
name|g8
argument_list|)
operator|:
name|g1_
argument_list|(
name|g1
argument_list|)
operator|,
name|g2_
argument_list|(
name|g2
argument_list|)
operator|,
name|g3_
argument_list|(
name|g3
argument_list|)
operator|,
name|g4_
argument_list|(
name|g4
argument_list|)
operator|,
name|g5_
argument_list|(
name|g5
argument_list|)
operator|,
name|g6_
argument_list|(
name|g6
argument_list|)
operator|,
name|g7_
argument_list|(
name|g7
argument_list|)
operator|,
name|g8_
argument_list|(
argument|g8
argument_list|)
block|{}
name|virtual
operator|~
name|CartesianProductGenerator8
argument_list|()
block|{}
name|virtual
name|ParamIteratorInterface
operator|<
name|ParamType
operator|>
operator|*
name|Begin
argument_list|()
specifier|const
block|{
return|return
name|new
name|Iterator
argument_list|(
name|this
argument_list|,
name|g1_
argument_list|,
name|g1_
operator|.
name|begin
argument_list|()
argument_list|,
name|g2_
argument_list|,
name|g2_
operator|.
name|begin
argument_list|()
argument_list|,
name|g3_
argument_list|,
name|g3_
operator|.
name|begin
argument_list|()
argument_list|,
name|g4_
argument_list|,
name|g4_
operator|.
name|begin
argument_list|()
argument_list|,
name|g5_
argument_list|,
name|g5_
operator|.
name|begin
argument_list|()
argument_list|,
name|g6_
argument_list|,
name|g6_
operator|.
name|begin
argument_list|()
argument_list|,
name|g7_
argument_list|,
name|g7_
operator|.
name|begin
argument_list|()
argument_list|,
name|g8_
argument_list|,
name|g8_
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|virtual
name|ParamIteratorInterface
operator|<
name|ParamType
operator|>
operator|*
name|End
argument_list|()
specifier|const
block|{
return|return
name|new
name|Iterator
argument_list|(
name|this
argument_list|,
name|g1_
argument_list|,
name|g1_
operator|.
name|end
argument_list|()
argument_list|,
name|g2_
argument_list|,
name|g2_
operator|.
name|end
argument_list|()
argument_list|,
name|g3_
argument_list|,
name|g3_
operator|.
name|end
argument_list|()
argument_list|,
name|g4_
argument_list|,
name|g4_
operator|.
name|end
argument_list|()
argument_list|,
name|g5_
argument_list|,
name|g5_
operator|.
name|end
argument_list|()
argument_list|,
name|g6_
argument_list|,
name|g6_
operator|.
name|end
argument_list|()
argument_list|,
name|g7_
argument_list|,
name|g7_
operator|.
name|end
argument_list|()
argument_list|,
name|g8_
argument_list|,
name|g8_
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|class
name|Iterator
range|:
name|public
name|ParamIteratorInterface
operator|<
name|ParamType
operator|>
block|{
name|public
operator|:
name|Iterator
argument_list|(
argument|const ParamGeneratorInterface<ParamType>* base
argument_list|,
argument|const ParamGenerator<T1>& g1
argument_list|,
argument|const typename ParamGenerator<T1>::iterator& current1
argument_list|,
argument|const ParamGenerator<T2>& g2
argument_list|,
argument|const typename ParamGenerator<T2>::iterator& current2
argument_list|,
argument|const ParamGenerator<T3>& g3
argument_list|,
argument|const typename ParamGenerator<T3>::iterator& current3
argument_list|,
argument|const ParamGenerator<T4>& g4
argument_list|,
argument|const typename ParamGenerator<T4>::iterator& current4
argument_list|,
argument|const ParamGenerator<T5>& g5
argument_list|,
argument|const typename ParamGenerator<T5>::iterator& current5
argument_list|,
argument|const ParamGenerator<T6>& g6
argument_list|,
argument|const typename ParamGenerator<T6>::iterator& current6
argument_list|,
argument|const ParamGenerator<T7>& g7
argument_list|,
argument|const typename ParamGenerator<T7>::iterator& current7
argument_list|,
argument|const ParamGenerator<T8>& g8
argument_list|,
argument|const typename ParamGenerator<T8>::iterator& current8
argument_list|)
operator|:
name|base_
argument_list|(
name|base
argument_list|)
block|,
name|begin1_
argument_list|(
name|g1
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end1_
argument_list|(
name|g1
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current1_
argument_list|(
name|current1
argument_list|)
block|,
name|begin2_
argument_list|(
name|g2
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end2_
argument_list|(
name|g2
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current2_
argument_list|(
name|current2
argument_list|)
block|,
name|begin3_
argument_list|(
name|g3
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end3_
argument_list|(
name|g3
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current3_
argument_list|(
name|current3
argument_list|)
block|,
name|begin4_
argument_list|(
name|g4
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end4_
argument_list|(
name|g4
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current4_
argument_list|(
name|current4
argument_list|)
block|,
name|begin5_
argument_list|(
name|g5
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end5_
argument_list|(
name|g5
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current5_
argument_list|(
name|current5
argument_list|)
block|,
name|begin6_
argument_list|(
name|g6
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end6_
argument_list|(
name|g6
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current6_
argument_list|(
name|current6
argument_list|)
block|,
name|begin7_
argument_list|(
name|g7
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end7_
argument_list|(
name|g7
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current7_
argument_list|(
name|current7
argument_list|)
block|,
name|begin8_
argument_list|(
name|g8
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end8_
argument_list|(
name|g8
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current8_
argument_list|(
argument|current8
argument_list|)
block|{
name|ComputeCurrentValue
argument_list|()
block|;     }
name|virtual
operator|~
name|Iterator
argument_list|()
block|{}
name|virtual
specifier|const
name|ParamGeneratorInterface
operator|<
name|ParamType
operator|>
operator|*
name|BaseGenerator
argument_list|()
specifier|const
block|{
return|return
name|base_
return|;
block|}
comment|// Advance should not be called on beyond-of-range iterators
comment|// so no component iterators must be beyond end of range, either.
name|virtual
name|void
name|Advance
argument_list|()
block|{
name|assert
argument_list|(
operator|!
name|AtEnd
argument_list|()
argument_list|)
block|;
operator|++
name|current8_
block|;
if|if
condition|(
name|current8_
operator|==
name|end8_
condition|)
block|{
name|current8_
operator|=
name|begin8_
expr_stmt|;
operator|++
name|current7_
expr_stmt|;
block|}
if|if
condition|(
name|current7_
operator|==
name|end7_
condition|)
block|{
name|current7_
operator|=
name|begin7_
expr_stmt|;
operator|++
name|current6_
expr_stmt|;
block|}
if|if
condition|(
name|current6_
operator|==
name|end6_
condition|)
block|{
name|current6_
operator|=
name|begin6_
expr_stmt|;
operator|++
name|current5_
expr_stmt|;
block|}
if|if
condition|(
name|current5_
operator|==
name|end5_
condition|)
block|{
name|current5_
operator|=
name|begin5_
expr_stmt|;
operator|++
name|current4_
expr_stmt|;
block|}
if|if
condition|(
name|current4_
operator|==
name|end4_
condition|)
block|{
name|current4_
operator|=
name|begin4_
expr_stmt|;
operator|++
name|current3_
expr_stmt|;
block|}
if|if
condition|(
name|current3_
operator|==
name|end3_
condition|)
block|{
name|current3_
operator|=
name|begin3_
expr_stmt|;
operator|++
name|current2_
expr_stmt|;
block|}
if|if
condition|(
name|current2_
operator|==
name|end2_
condition|)
block|{
name|current2_
operator|=
name|begin2_
expr_stmt|;
operator|++
name|current1_
expr_stmt|;
block|}
name|ComputeCurrentValue
argument_list|()
expr_stmt|;
block|}
name|virtual
name|ParamIteratorInterface
operator|<
name|ParamType
operator|>
operator|*
name|Clone
argument_list|()
specifier|const
block|{
return|return
name|new
name|Iterator
argument_list|(
operator|*
name|this
argument_list|)
return|;
block|}
name|virtual
specifier|const
name|ParamType
operator|*
name|Current
argument_list|()
specifier|const
block|{
return|return
operator|&
name|current_value_
return|;
block|}
name|virtual
name|bool
name|Equals
argument_list|(
argument|const ParamIteratorInterface<ParamType>& other
argument_list|)
specifier|const
block|{
comment|// Having the same base generator guarantees that the other
comment|// iterator is of the same type and we can downcast.
name|GTEST_CHECK_
argument_list|(
name|BaseGenerator
argument_list|()
operator|==
name|other
operator|.
name|BaseGenerator
argument_list|()
argument_list|)
operator|<<
literal|"The program attempted to compare iterators "
operator|<<
literal|"from different generators."
operator|<<
name|std
operator|::
name|endl
block|;
specifier|const
name|Iterator
operator|*
name|typed_other
operator|=
name|CheckedDowncastToActualType
operator|<
specifier|const
name|Iterator
operator|>
operator|(
operator|&
name|other
operator|)
block|;
comment|// We must report iterators equal if they both point beyond their
comment|// respective ranges. That can happen in a variety of fashions,
comment|// so we have to consult AtEnd().
return|return
operator|(
name|AtEnd
argument_list|()
operator|&&
name|typed_other
operator|->
name|AtEnd
argument_list|()
operator|)
operator|||
operator|(
name|current1_
operator|==
name|typed_other
operator|->
name|current1_
operator|&&
name|current2_
operator|==
name|typed_other
operator|->
name|current2_
operator|&&
name|current3_
operator|==
name|typed_other
operator|->
name|current3_
operator|&&
name|current4_
operator|==
name|typed_other
operator|->
name|current4_
operator|&&
name|current5_
operator|==
name|typed_other
operator|->
name|current5_
operator|&&
name|current6_
operator|==
name|typed_other
operator|->
name|current6_
operator|&&
name|current7_
operator|==
name|typed_other
operator|->
name|current7_
operator|&&
name|current8_
operator|==
name|typed_other
operator|->
name|current8_
operator|)
return|;
block|}
name|private
operator|:
name|Iterator
argument_list|(
specifier|const
name|Iterator
operator|&
name|other
argument_list|)
operator|:
name|base_
argument_list|(
name|other
operator|.
name|base_
argument_list|)
block|,
name|begin1_
argument_list|(
name|other
operator|.
name|begin1_
argument_list|)
block|,
name|end1_
argument_list|(
name|other
operator|.
name|end1_
argument_list|)
block|,
name|current1_
argument_list|(
name|other
operator|.
name|current1_
argument_list|)
block|,
name|begin2_
argument_list|(
name|other
operator|.
name|begin2_
argument_list|)
block|,
name|end2_
argument_list|(
name|other
operator|.
name|end2_
argument_list|)
block|,
name|current2_
argument_list|(
name|other
operator|.
name|current2_
argument_list|)
block|,
name|begin3_
argument_list|(
name|other
operator|.
name|begin3_
argument_list|)
block|,
name|end3_
argument_list|(
name|other
operator|.
name|end3_
argument_list|)
block|,
name|current3_
argument_list|(
name|other
operator|.
name|current3_
argument_list|)
block|,
name|begin4_
argument_list|(
name|other
operator|.
name|begin4_
argument_list|)
block|,
name|end4_
argument_list|(
name|other
operator|.
name|end4_
argument_list|)
block|,
name|current4_
argument_list|(
name|other
operator|.
name|current4_
argument_list|)
block|,
name|begin5_
argument_list|(
name|other
operator|.
name|begin5_
argument_list|)
block|,
name|end5_
argument_list|(
name|other
operator|.
name|end5_
argument_list|)
block|,
name|current5_
argument_list|(
name|other
operator|.
name|current5_
argument_list|)
block|,
name|begin6_
argument_list|(
name|other
operator|.
name|begin6_
argument_list|)
block|,
name|end6_
argument_list|(
name|other
operator|.
name|end6_
argument_list|)
block|,
name|current6_
argument_list|(
name|other
operator|.
name|current6_
argument_list|)
block|,
name|begin7_
argument_list|(
name|other
operator|.
name|begin7_
argument_list|)
block|,
name|end7_
argument_list|(
name|other
operator|.
name|end7_
argument_list|)
block|,
name|current7_
argument_list|(
name|other
operator|.
name|current7_
argument_list|)
block|,
name|begin8_
argument_list|(
name|other
operator|.
name|begin8_
argument_list|)
block|,
name|end8_
argument_list|(
name|other
operator|.
name|end8_
argument_list|)
block|,
name|current8_
argument_list|(
argument|other.current8_
argument_list|)
block|{
name|ComputeCurrentValue
argument_list|()
block|;     }
name|void
name|ComputeCurrentValue
argument_list|()
block|{
if|if
condition|(
operator|!
name|AtEnd
argument_list|()
condition|)
name|current_value_
operator|=
name|ParamType
argument_list|(
operator|*
name|current1_
argument_list|,
operator|*
name|current2_
argument_list|,
operator|*
name|current3_
argument_list|,
operator|*
name|current4_
argument_list|,
operator|*
name|current5_
argument_list|,
operator|*
name|current6_
argument_list|,
operator|*
name|current7_
argument_list|,
operator|*
name|current8_
argument_list|)
expr_stmt|;
block|}
name|bool
name|AtEnd
argument_list|()
specifier|const
block|{
comment|// We must report iterator past the end of the range when either of the
comment|// component iterators has reached the end of its range.
return|return
name|current1_
operator|==
name|end1_
operator|||
name|current2_
operator|==
name|end2_
operator|||
name|current3_
operator|==
name|end3_
operator|||
name|current4_
operator|==
name|end4_
operator|||
name|current5_
operator|==
name|end5_
operator|||
name|current6_
operator|==
name|end6_
operator|||
name|current7_
operator|==
name|end7_
operator|||
name|current8_
operator|==
name|end8_
return|;
block|}
specifier|const
name|ParamGeneratorInterface
operator|<
name|ParamType
operator|>
operator|*
specifier|const
name|base_
block|;
comment|// begin[i]_ and end[i]_ define the i-th range that Iterator traverses.
comment|// current[i]_ is the actual traversing iterator.
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T1
operator|>
operator|::
name|iterator
name|begin1_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T1
operator|>
operator|::
name|iterator
name|end1_
block|;
name|typename
name|ParamGenerator
operator|<
name|T1
operator|>
operator|::
name|iterator
name|current1_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T2
operator|>
operator|::
name|iterator
name|begin2_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T2
operator|>
operator|::
name|iterator
name|end2_
block|;
name|typename
name|ParamGenerator
operator|<
name|T2
operator|>
operator|::
name|iterator
name|current2_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T3
operator|>
operator|::
name|iterator
name|begin3_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T3
operator|>
operator|::
name|iterator
name|end3_
block|;
name|typename
name|ParamGenerator
operator|<
name|T3
operator|>
operator|::
name|iterator
name|current3_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T4
operator|>
operator|::
name|iterator
name|begin4_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T4
operator|>
operator|::
name|iterator
name|end4_
block|;
name|typename
name|ParamGenerator
operator|<
name|T4
operator|>
operator|::
name|iterator
name|current4_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T5
operator|>
operator|::
name|iterator
name|begin5_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T5
operator|>
operator|::
name|iterator
name|end5_
block|;
name|typename
name|ParamGenerator
operator|<
name|T5
operator|>
operator|::
name|iterator
name|current5_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T6
operator|>
operator|::
name|iterator
name|begin6_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T6
operator|>
operator|::
name|iterator
name|end6_
block|;
name|typename
name|ParamGenerator
operator|<
name|T6
operator|>
operator|::
name|iterator
name|current6_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T7
operator|>
operator|::
name|iterator
name|begin7_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T7
operator|>
operator|::
name|iterator
name|end7_
block|;
name|typename
name|ParamGenerator
operator|<
name|T7
operator|>
operator|::
name|iterator
name|current7_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T8
operator|>
operator|::
name|iterator
name|begin8_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T8
operator|>
operator|::
name|iterator
name|end8_
block|;
name|typename
name|ParamGenerator
operator|<
name|T8
operator|>
operator|::
name|iterator
name|current8_
block|;
name|ParamType
name|current_value_
block|;   }
decl_stmt|;
end_decl_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T1
operator|>
name|g1_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T2
operator|>
name|g2_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T3
operator|>
name|g3_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T4
operator|>
name|g4_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T5
operator|>
name|g5_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T6
operator|>
name|g6_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T7
operator|>
name|g7_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T8
operator|>
name|g8_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|>
name|class
name|CartesianProductGenerator9
operator|:
name|public
name|ParamGeneratorInterface
operator|<
operator|::
name|std
operator|::
name|tr1
operator|::
name|tuple
operator|<
name|T1
operator|,
name|T2
operator|,
name|T3
operator|,
name|T4
operator|,
name|T5
operator|,
name|T6
operator|,
name|T7
operator|,
name|T8
operator|,
name|T9
operator|>
expr|>
block|{
name|public
operator|:
typedef|typedef
operator|::
name|std
operator|::
name|tr1
operator|::
name|tuple
operator|<
name|T1
operator|,
name|T2
operator|,
name|T3
operator|,
name|T4
operator|,
name|T5
operator|,
name|T6
operator|,
name|T7
operator|,
name|T8
operator|,
name|T9
operator|>
name|ParamType
expr_stmt|;
name|CartesianProductGenerator9
argument_list|(
specifier|const
name|ParamGenerator
operator|<
name|T1
operator|>
operator|&
name|g1
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T2
operator|>
operator|&
name|g2
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T3
operator|>
operator|&
name|g3
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T4
operator|>
operator|&
name|g4
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T5
operator|>
operator|&
name|g5
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T6
operator|>
operator|&
name|g6
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T7
operator|>
operator|&
name|g7
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T8
operator|>
operator|&
name|g8
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T9
operator|>
operator|&
name|g9
argument_list|)
operator|:
name|g1_
argument_list|(
name|g1
argument_list|)
operator|,
name|g2_
argument_list|(
name|g2
argument_list|)
operator|,
name|g3_
argument_list|(
name|g3
argument_list|)
operator|,
name|g4_
argument_list|(
name|g4
argument_list|)
operator|,
name|g5_
argument_list|(
name|g5
argument_list|)
operator|,
name|g6_
argument_list|(
name|g6
argument_list|)
operator|,
name|g7_
argument_list|(
name|g7
argument_list|)
operator|,
name|g8_
argument_list|(
name|g8
argument_list|)
operator|,
name|g9_
argument_list|(
argument|g9
argument_list|)
block|{}
name|virtual
operator|~
name|CartesianProductGenerator9
argument_list|()
block|{}
name|virtual
name|ParamIteratorInterface
operator|<
name|ParamType
operator|>
operator|*
name|Begin
argument_list|()
specifier|const
block|{
return|return
name|new
name|Iterator
argument_list|(
name|this
argument_list|,
name|g1_
argument_list|,
name|g1_
operator|.
name|begin
argument_list|()
argument_list|,
name|g2_
argument_list|,
name|g2_
operator|.
name|begin
argument_list|()
argument_list|,
name|g3_
argument_list|,
name|g3_
operator|.
name|begin
argument_list|()
argument_list|,
name|g4_
argument_list|,
name|g4_
operator|.
name|begin
argument_list|()
argument_list|,
name|g5_
argument_list|,
name|g5_
operator|.
name|begin
argument_list|()
argument_list|,
name|g6_
argument_list|,
name|g6_
operator|.
name|begin
argument_list|()
argument_list|,
name|g7_
argument_list|,
name|g7_
operator|.
name|begin
argument_list|()
argument_list|,
name|g8_
argument_list|,
name|g8_
operator|.
name|begin
argument_list|()
argument_list|,
name|g9_
argument_list|,
name|g9_
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|virtual
name|ParamIteratorInterface
operator|<
name|ParamType
operator|>
operator|*
name|End
argument_list|()
specifier|const
block|{
return|return
name|new
name|Iterator
argument_list|(
name|this
argument_list|,
name|g1_
argument_list|,
name|g1_
operator|.
name|end
argument_list|()
argument_list|,
name|g2_
argument_list|,
name|g2_
operator|.
name|end
argument_list|()
argument_list|,
name|g3_
argument_list|,
name|g3_
operator|.
name|end
argument_list|()
argument_list|,
name|g4_
argument_list|,
name|g4_
operator|.
name|end
argument_list|()
argument_list|,
name|g5_
argument_list|,
name|g5_
operator|.
name|end
argument_list|()
argument_list|,
name|g6_
argument_list|,
name|g6_
operator|.
name|end
argument_list|()
argument_list|,
name|g7_
argument_list|,
name|g7_
operator|.
name|end
argument_list|()
argument_list|,
name|g8_
argument_list|,
name|g8_
operator|.
name|end
argument_list|()
argument_list|,
name|g9_
argument_list|,
name|g9_
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|class
name|Iterator
range|:
name|public
name|ParamIteratorInterface
operator|<
name|ParamType
operator|>
block|{
name|public
operator|:
name|Iterator
argument_list|(
argument|const ParamGeneratorInterface<ParamType>* base
argument_list|,
argument|const ParamGenerator<T1>& g1
argument_list|,
argument|const typename ParamGenerator<T1>::iterator& current1
argument_list|,
argument|const ParamGenerator<T2>& g2
argument_list|,
argument|const typename ParamGenerator<T2>::iterator& current2
argument_list|,
argument|const ParamGenerator<T3>& g3
argument_list|,
argument|const typename ParamGenerator<T3>::iterator& current3
argument_list|,
argument|const ParamGenerator<T4>& g4
argument_list|,
argument|const typename ParamGenerator<T4>::iterator& current4
argument_list|,
argument|const ParamGenerator<T5>& g5
argument_list|,
argument|const typename ParamGenerator<T5>::iterator& current5
argument_list|,
argument|const ParamGenerator<T6>& g6
argument_list|,
argument|const typename ParamGenerator<T6>::iterator& current6
argument_list|,
argument|const ParamGenerator<T7>& g7
argument_list|,
argument|const typename ParamGenerator<T7>::iterator& current7
argument_list|,
argument|const ParamGenerator<T8>& g8
argument_list|,
argument|const typename ParamGenerator<T8>::iterator& current8
argument_list|,
argument|const ParamGenerator<T9>& g9
argument_list|,
argument|const typename ParamGenerator<T9>::iterator& current9
argument_list|)
operator|:
name|base_
argument_list|(
name|base
argument_list|)
block|,
name|begin1_
argument_list|(
name|g1
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end1_
argument_list|(
name|g1
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current1_
argument_list|(
name|current1
argument_list|)
block|,
name|begin2_
argument_list|(
name|g2
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end2_
argument_list|(
name|g2
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current2_
argument_list|(
name|current2
argument_list|)
block|,
name|begin3_
argument_list|(
name|g3
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end3_
argument_list|(
name|g3
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current3_
argument_list|(
name|current3
argument_list|)
block|,
name|begin4_
argument_list|(
name|g4
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end4_
argument_list|(
name|g4
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current4_
argument_list|(
name|current4
argument_list|)
block|,
name|begin5_
argument_list|(
name|g5
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end5_
argument_list|(
name|g5
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current5_
argument_list|(
name|current5
argument_list|)
block|,
name|begin6_
argument_list|(
name|g6
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end6_
argument_list|(
name|g6
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current6_
argument_list|(
name|current6
argument_list|)
block|,
name|begin7_
argument_list|(
name|g7
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end7_
argument_list|(
name|g7
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current7_
argument_list|(
name|current7
argument_list|)
block|,
name|begin8_
argument_list|(
name|g8
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end8_
argument_list|(
name|g8
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current8_
argument_list|(
name|current8
argument_list|)
block|,
name|begin9_
argument_list|(
name|g9
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end9_
argument_list|(
name|g9
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current9_
argument_list|(
argument|current9
argument_list|)
block|{
name|ComputeCurrentValue
argument_list|()
block|;     }
name|virtual
operator|~
name|Iterator
argument_list|()
block|{}
name|virtual
specifier|const
name|ParamGeneratorInterface
operator|<
name|ParamType
operator|>
operator|*
name|BaseGenerator
argument_list|()
specifier|const
block|{
return|return
name|base_
return|;
block|}
comment|// Advance should not be called on beyond-of-range iterators
comment|// so no component iterators must be beyond end of range, either.
name|virtual
name|void
name|Advance
argument_list|()
block|{
name|assert
argument_list|(
operator|!
name|AtEnd
argument_list|()
argument_list|)
block|;
operator|++
name|current9_
block|;
if|if
condition|(
name|current9_
operator|==
name|end9_
condition|)
block|{
name|current9_
operator|=
name|begin9_
expr_stmt|;
operator|++
name|current8_
expr_stmt|;
block|}
if|if
condition|(
name|current8_
operator|==
name|end8_
condition|)
block|{
name|current8_
operator|=
name|begin8_
expr_stmt|;
operator|++
name|current7_
expr_stmt|;
block|}
if|if
condition|(
name|current7_
operator|==
name|end7_
condition|)
block|{
name|current7_
operator|=
name|begin7_
expr_stmt|;
operator|++
name|current6_
expr_stmt|;
block|}
if|if
condition|(
name|current6_
operator|==
name|end6_
condition|)
block|{
name|current6_
operator|=
name|begin6_
expr_stmt|;
operator|++
name|current5_
expr_stmt|;
block|}
if|if
condition|(
name|current5_
operator|==
name|end5_
condition|)
block|{
name|current5_
operator|=
name|begin5_
expr_stmt|;
operator|++
name|current4_
expr_stmt|;
block|}
if|if
condition|(
name|current4_
operator|==
name|end4_
condition|)
block|{
name|current4_
operator|=
name|begin4_
expr_stmt|;
operator|++
name|current3_
expr_stmt|;
block|}
if|if
condition|(
name|current3_
operator|==
name|end3_
condition|)
block|{
name|current3_
operator|=
name|begin3_
expr_stmt|;
operator|++
name|current2_
expr_stmt|;
block|}
if|if
condition|(
name|current2_
operator|==
name|end2_
condition|)
block|{
name|current2_
operator|=
name|begin2_
expr_stmt|;
operator|++
name|current1_
expr_stmt|;
block|}
name|ComputeCurrentValue
argument_list|()
expr_stmt|;
block|}
name|virtual
name|ParamIteratorInterface
operator|<
name|ParamType
operator|>
operator|*
name|Clone
argument_list|()
specifier|const
block|{
return|return
name|new
name|Iterator
argument_list|(
operator|*
name|this
argument_list|)
return|;
block|}
name|virtual
specifier|const
name|ParamType
operator|*
name|Current
argument_list|()
specifier|const
block|{
return|return
operator|&
name|current_value_
return|;
block|}
name|virtual
name|bool
name|Equals
argument_list|(
argument|const ParamIteratorInterface<ParamType>& other
argument_list|)
specifier|const
block|{
comment|// Having the same base generator guarantees that the other
comment|// iterator is of the same type and we can downcast.
name|GTEST_CHECK_
argument_list|(
name|BaseGenerator
argument_list|()
operator|==
name|other
operator|.
name|BaseGenerator
argument_list|()
argument_list|)
operator|<<
literal|"The program attempted to compare iterators "
operator|<<
literal|"from different generators."
operator|<<
name|std
operator|::
name|endl
block|;
specifier|const
name|Iterator
operator|*
name|typed_other
operator|=
name|CheckedDowncastToActualType
operator|<
specifier|const
name|Iterator
operator|>
operator|(
operator|&
name|other
operator|)
block|;
comment|// We must report iterators equal if they both point beyond their
comment|// respective ranges. That can happen in a variety of fashions,
comment|// so we have to consult AtEnd().
return|return
operator|(
name|AtEnd
argument_list|()
operator|&&
name|typed_other
operator|->
name|AtEnd
argument_list|()
operator|)
operator|||
operator|(
name|current1_
operator|==
name|typed_other
operator|->
name|current1_
operator|&&
name|current2_
operator|==
name|typed_other
operator|->
name|current2_
operator|&&
name|current3_
operator|==
name|typed_other
operator|->
name|current3_
operator|&&
name|current4_
operator|==
name|typed_other
operator|->
name|current4_
operator|&&
name|current5_
operator|==
name|typed_other
operator|->
name|current5_
operator|&&
name|current6_
operator|==
name|typed_other
operator|->
name|current6_
operator|&&
name|current7_
operator|==
name|typed_other
operator|->
name|current7_
operator|&&
name|current8_
operator|==
name|typed_other
operator|->
name|current8_
operator|&&
name|current9_
operator|==
name|typed_other
operator|->
name|current9_
operator|)
return|;
block|}
name|private
operator|:
name|Iterator
argument_list|(
specifier|const
name|Iterator
operator|&
name|other
argument_list|)
operator|:
name|base_
argument_list|(
name|other
operator|.
name|base_
argument_list|)
block|,
name|begin1_
argument_list|(
name|other
operator|.
name|begin1_
argument_list|)
block|,
name|end1_
argument_list|(
name|other
operator|.
name|end1_
argument_list|)
block|,
name|current1_
argument_list|(
name|other
operator|.
name|current1_
argument_list|)
block|,
name|begin2_
argument_list|(
name|other
operator|.
name|begin2_
argument_list|)
block|,
name|end2_
argument_list|(
name|other
operator|.
name|end2_
argument_list|)
block|,
name|current2_
argument_list|(
name|other
operator|.
name|current2_
argument_list|)
block|,
name|begin3_
argument_list|(
name|other
operator|.
name|begin3_
argument_list|)
block|,
name|end3_
argument_list|(
name|other
operator|.
name|end3_
argument_list|)
block|,
name|current3_
argument_list|(
name|other
operator|.
name|current3_
argument_list|)
block|,
name|begin4_
argument_list|(
name|other
operator|.
name|begin4_
argument_list|)
block|,
name|end4_
argument_list|(
name|other
operator|.
name|end4_
argument_list|)
block|,
name|current4_
argument_list|(
name|other
operator|.
name|current4_
argument_list|)
block|,
name|begin5_
argument_list|(
name|other
operator|.
name|begin5_
argument_list|)
block|,
name|end5_
argument_list|(
name|other
operator|.
name|end5_
argument_list|)
block|,
name|current5_
argument_list|(
name|other
operator|.
name|current5_
argument_list|)
block|,
name|begin6_
argument_list|(
name|other
operator|.
name|begin6_
argument_list|)
block|,
name|end6_
argument_list|(
name|other
operator|.
name|end6_
argument_list|)
block|,
name|current6_
argument_list|(
name|other
operator|.
name|current6_
argument_list|)
block|,
name|begin7_
argument_list|(
name|other
operator|.
name|begin7_
argument_list|)
block|,
name|end7_
argument_list|(
name|other
operator|.
name|end7_
argument_list|)
block|,
name|current7_
argument_list|(
name|other
operator|.
name|current7_
argument_list|)
block|,
name|begin8_
argument_list|(
name|other
operator|.
name|begin8_
argument_list|)
block|,
name|end8_
argument_list|(
name|other
operator|.
name|end8_
argument_list|)
block|,
name|current8_
argument_list|(
name|other
operator|.
name|current8_
argument_list|)
block|,
name|begin9_
argument_list|(
name|other
operator|.
name|begin9_
argument_list|)
block|,
name|end9_
argument_list|(
name|other
operator|.
name|end9_
argument_list|)
block|,
name|current9_
argument_list|(
argument|other.current9_
argument_list|)
block|{
name|ComputeCurrentValue
argument_list|()
block|;     }
name|void
name|ComputeCurrentValue
argument_list|()
block|{
if|if
condition|(
operator|!
name|AtEnd
argument_list|()
condition|)
name|current_value_
operator|=
name|ParamType
argument_list|(
operator|*
name|current1_
argument_list|,
operator|*
name|current2_
argument_list|,
operator|*
name|current3_
argument_list|,
operator|*
name|current4_
argument_list|,
operator|*
name|current5_
argument_list|,
operator|*
name|current6_
argument_list|,
operator|*
name|current7_
argument_list|,
operator|*
name|current8_
argument_list|,
operator|*
name|current9_
argument_list|)
expr_stmt|;
block|}
name|bool
name|AtEnd
argument_list|()
specifier|const
block|{
comment|// We must report iterator past the end of the range when either of the
comment|// component iterators has reached the end of its range.
return|return
name|current1_
operator|==
name|end1_
operator|||
name|current2_
operator|==
name|end2_
operator|||
name|current3_
operator|==
name|end3_
operator|||
name|current4_
operator|==
name|end4_
operator|||
name|current5_
operator|==
name|end5_
operator|||
name|current6_
operator|==
name|end6_
operator|||
name|current7_
operator|==
name|end7_
operator|||
name|current8_
operator|==
name|end8_
operator|||
name|current9_
operator|==
name|end9_
return|;
block|}
specifier|const
name|ParamGeneratorInterface
operator|<
name|ParamType
operator|>
operator|*
specifier|const
name|base_
block|;
comment|// begin[i]_ and end[i]_ define the i-th range that Iterator traverses.
comment|// current[i]_ is the actual traversing iterator.
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T1
operator|>
operator|::
name|iterator
name|begin1_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T1
operator|>
operator|::
name|iterator
name|end1_
block|;
name|typename
name|ParamGenerator
operator|<
name|T1
operator|>
operator|::
name|iterator
name|current1_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T2
operator|>
operator|::
name|iterator
name|begin2_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T2
operator|>
operator|::
name|iterator
name|end2_
block|;
name|typename
name|ParamGenerator
operator|<
name|T2
operator|>
operator|::
name|iterator
name|current2_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T3
operator|>
operator|::
name|iterator
name|begin3_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T3
operator|>
operator|::
name|iterator
name|end3_
block|;
name|typename
name|ParamGenerator
operator|<
name|T3
operator|>
operator|::
name|iterator
name|current3_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T4
operator|>
operator|::
name|iterator
name|begin4_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T4
operator|>
operator|::
name|iterator
name|end4_
block|;
name|typename
name|ParamGenerator
operator|<
name|T4
operator|>
operator|::
name|iterator
name|current4_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T5
operator|>
operator|::
name|iterator
name|begin5_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T5
operator|>
operator|::
name|iterator
name|end5_
block|;
name|typename
name|ParamGenerator
operator|<
name|T5
operator|>
operator|::
name|iterator
name|current5_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T6
operator|>
operator|::
name|iterator
name|begin6_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T6
operator|>
operator|::
name|iterator
name|end6_
block|;
name|typename
name|ParamGenerator
operator|<
name|T6
operator|>
operator|::
name|iterator
name|current6_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T7
operator|>
operator|::
name|iterator
name|begin7_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T7
operator|>
operator|::
name|iterator
name|end7_
block|;
name|typename
name|ParamGenerator
operator|<
name|T7
operator|>
operator|::
name|iterator
name|current7_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T8
operator|>
operator|::
name|iterator
name|begin8_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T8
operator|>
operator|::
name|iterator
name|end8_
block|;
name|typename
name|ParamGenerator
operator|<
name|T8
operator|>
operator|::
name|iterator
name|current8_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T9
operator|>
operator|::
name|iterator
name|begin9_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T9
operator|>
operator|::
name|iterator
name|end9_
block|;
name|typename
name|ParamGenerator
operator|<
name|T9
operator|>
operator|::
name|iterator
name|current9_
block|;
name|ParamType
name|current_value_
block|;   }
decl_stmt|;
end_decl_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T1
operator|>
name|g1_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T2
operator|>
name|g2_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T3
operator|>
name|g3_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T4
operator|>
name|g4_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T5
operator|>
name|g5_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T6
operator|>
name|g6_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T7
operator|>
name|g7_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T8
operator|>
name|g8_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T9
operator|>
name|g9_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|,
name|typename
name|T7
operator|,
name|typename
name|T8
operator|,
name|typename
name|T9
operator|,
name|typename
name|T10
operator|>
name|class
name|CartesianProductGenerator10
operator|:
name|public
name|ParamGeneratorInterface
operator|<
operator|::
name|std
operator|::
name|tr1
operator|::
name|tuple
operator|<
name|T1
operator|,
name|T2
operator|,
name|T3
operator|,
name|T4
operator|,
name|T5
operator|,
name|T6
operator|,
name|T7
operator|,
name|T8
operator|,
name|T9
operator|,
name|T10
operator|>
expr|>
block|{
name|public
operator|:
typedef|typedef
operator|::
name|std
operator|::
name|tr1
operator|::
name|tuple
operator|<
name|T1
operator|,
name|T2
operator|,
name|T3
operator|,
name|T4
operator|,
name|T5
operator|,
name|T6
operator|,
name|T7
operator|,
name|T8
operator|,
name|T9
operator|,
name|T10
operator|>
name|ParamType
expr_stmt|;
name|CartesianProductGenerator10
argument_list|(
specifier|const
name|ParamGenerator
operator|<
name|T1
operator|>
operator|&
name|g1
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T2
operator|>
operator|&
name|g2
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T3
operator|>
operator|&
name|g3
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T4
operator|>
operator|&
name|g4
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T5
operator|>
operator|&
name|g5
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T6
operator|>
operator|&
name|g6
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T7
operator|>
operator|&
name|g7
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T8
operator|>
operator|&
name|g8
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T9
operator|>
operator|&
name|g9
argument_list|,
specifier|const
name|ParamGenerator
operator|<
name|T10
operator|>
operator|&
name|g10
argument_list|)
operator|:
name|g1_
argument_list|(
name|g1
argument_list|)
operator|,
name|g2_
argument_list|(
name|g2
argument_list|)
operator|,
name|g3_
argument_list|(
name|g3
argument_list|)
operator|,
name|g4_
argument_list|(
name|g4
argument_list|)
operator|,
name|g5_
argument_list|(
name|g5
argument_list|)
operator|,
name|g6_
argument_list|(
name|g6
argument_list|)
operator|,
name|g7_
argument_list|(
name|g7
argument_list|)
operator|,
name|g8_
argument_list|(
name|g8
argument_list|)
operator|,
name|g9_
argument_list|(
name|g9
argument_list|)
operator|,
name|g10_
argument_list|(
argument|g10
argument_list|)
block|{}
name|virtual
operator|~
name|CartesianProductGenerator10
argument_list|()
block|{}
name|virtual
name|ParamIteratorInterface
operator|<
name|ParamType
operator|>
operator|*
name|Begin
argument_list|()
specifier|const
block|{
return|return
name|new
name|Iterator
argument_list|(
name|this
argument_list|,
name|g1_
argument_list|,
name|g1_
operator|.
name|begin
argument_list|()
argument_list|,
name|g2_
argument_list|,
name|g2_
operator|.
name|begin
argument_list|()
argument_list|,
name|g3_
argument_list|,
name|g3_
operator|.
name|begin
argument_list|()
argument_list|,
name|g4_
argument_list|,
name|g4_
operator|.
name|begin
argument_list|()
argument_list|,
name|g5_
argument_list|,
name|g5_
operator|.
name|begin
argument_list|()
argument_list|,
name|g6_
argument_list|,
name|g6_
operator|.
name|begin
argument_list|()
argument_list|,
name|g7_
argument_list|,
name|g7_
operator|.
name|begin
argument_list|()
argument_list|,
name|g8_
argument_list|,
name|g8_
operator|.
name|begin
argument_list|()
argument_list|,
name|g9_
argument_list|,
name|g9_
operator|.
name|begin
argument_list|()
argument_list|,
name|g10_
argument_list|,
name|g10_
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|virtual
name|ParamIteratorInterface
operator|<
name|ParamType
operator|>
operator|*
name|End
argument_list|()
specifier|const
block|{
return|return
name|new
name|Iterator
argument_list|(
name|this
argument_list|,
name|g1_
argument_list|,
name|g1_
operator|.
name|end
argument_list|()
argument_list|,
name|g2_
argument_list|,
name|g2_
operator|.
name|end
argument_list|()
argument_list|,
name|g3_
argument_list|,
name|g3_
operator|.
name|end
argument_list|()
argument_list|,
name|g4_
argument_list|,
name|g4_
operator|.
name|end
argument_list|()
argument_list|,
name|g5_
argument_list|,
name|g5_
operator|.
name|end
argument_list|()
argument_list|,
name|g6_
argument_list|,
name|g6_
operator|.
name|end
argument_list|()
argument_list|,
name|g7_
argument_list|,
name|g7_
operator|.
name|end
argument_list|()
argument_list|,
name|g8_
argument_list|,
name|g8_
operator|.
name|end
argument_list|()
argument_list|,
name|g9_
argument_list|,
name|g9_
operator|.
name|end
argument_list|()
argument_list|,
name|g10_
argument_list|,
name|g10_
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|class
name|Iterator
range|:
name|public
name|ParamIteratorInterface
operator|<
name|ParamType
operator|>
block|{
name|public
operator|:
name|Iterator
argument_list|(
argument|const ParamGeneratorInterface<ParamType>* base
argument_list|,
argument|const ParamGenerator<T1>& g1
argument_list|,
argument|const typename ParamGenerator<T1>::iterator& current1
argument_list|,
argument|const ParamGenerator<T2>& g2
argument_list|,
argument|const typename ParamGenerator<T2>::iterator& current2
argument_list|,
argument|const ParamGenerator<T3>& g3
argument_list|,
argument|const typename ParamGenerator<T3>::iterator& current3
argument_list|,
argument|const ParamGenerator<T4>& g4
argument_list|,
argument|const typename ParamGenerator<T4>::iterator& current4
argument_list|,
argument|const ParamGenerator<T5>& g5
argument_list|,
argument|const typename ParamGenerator<T5>::iterator& current5
argument_list|,
argument|const ParamGenerator<T6>& g6
argument_list|,
argument|const typename ParamGenerator<T6>::iterator& current6
argument_list|,
argument|const ParamGenerator<T7>& g7
argument_list|,
argument|const typename ParamGenerator<T7>::iterator& current7
argument_list|,
argument|const ParamGenerator<T8>& g8
argument_list|,
argument|const typename ParamGenerator<T8>::iterator& current8
argument_list|,
argument|const ParamGenerator<T9>& g9
argument_list|,
argument|const typename ParamGenerator<T9>::iterator& current9
argument_list|,
argument|const ParamGenerator<T10>& g10
argument_list|,
argument|const typename ParamGenerator<T10>::iterator& current10
argument_list|)
operator|:
name|base_
argument_list|(
name|base
argument_list|)
block|,
name|begin1_
argument_list|(
name|g1
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end1_
argument_list|(
name|g1
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current1_
argument_list|(
name|current1
argument_list|)
block|,
name|begin2_
argument_list|(
name|g2
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end2_
argument_list|(
name|g2
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current2_
argument_list|(
name|current2
argument_list|)
block|,
name|begin3_
argument_list|(
name|g3
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end3_
argument_list|(
name|g3
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current3_
argument_list|(
name|current3
argument_list|)
block|,
name|begin4_
argument_list|(
name|g4
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end4_
argument_list|(
name|g4
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current4_
argument_list|(
name|current4
argument_list|)
block|,
name|begin5_
argument_list|(
name|g5
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end5_
argument_list|(
name|g5
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current5_
argument_list|(
name|current5
argument_list|)
block|,
name|begin6_
argument_list|(
name|g6
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end6_
argument_list|(
name|g6
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current6_
argument_list|(
name|current6
argument_list|)
block|,
name|begin7_
argument_list|(
name|g7
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end7_
argument_list|(
name|g7
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current7_
argument_list|(
name|current7
argument_list|)
block|,
name|begin8_
argument_list|(
name|g8
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end8_
argument_list|(
name|g8
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current8_
argument_list|(
name|current8
argument_list|)
block|,
name|begin9_
argument_list|(
name|g9
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end9_
argument_list|(
name|g9
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current9_
argument_list|(
name|current9
argument_list|)
block|,
name|begin10_
argument_list|(
name|g10
operator|.
name|begin
argument_list|()
argument_list|)
block|,
name|end10_
argument_list|(
name|g10
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|current10_
argument_list|(
argument|current10
argument_list|)
block|{
name|ComputeCurrentValue
argument_list|()
block|;     }
name|virtual
operator|~
name|Iterator
argument_list|()
block|{}
name|virtual
specifier|const
name|ParamGeneratorInterface
operator|<
name|ParamType
operator|>
operator|*
name|BaseGenerator
argument_list|()
specifier|const
block|{
return|return
name|base_
return|;
block|}
comment|// Advance should not be called on beyond-of-range iterators
comment|// so no component iterators must be beyond end of range, either.
name|virtual
name|void
name|Advance
argument_list|()
block|{
name|assert
argument_list|(
operator|!
name|AtEnd
argument_list|()
argument_list|)
block|;
operator|++
name|current10_
block|;
if|if
condition|(
name|current10_
operator|==
name|end10_
condition|)
block|{
name|current10_
operator|=
name|begin10_
expr_stmt|;
operator|++
name|current9_
expr_stmt|;
block|}
if|if
condition|(
name|current9_
operator|==
name|end9_
condition|)
block|{
name|current9_
operator|=
name|begin9_
expr_stmt|;
operator|++
name|current8_
expr_stmt|;
block|}
if|if
condition|(
name|current8_
operator|==
name|end8_
condition|)
block|{
name|current8_
operator|=
name|begin8_
expr_stmt|;
operator|++
name|current7_
expr_stmt|;
block|}
if|if
condition|(
name|current7_
operator|==
name|end7_
condition|)
block|{
name|current7_
operator|=
name|begin7_
expr_stmt|;
operator|++
name|current6_
expr_stmt|;
block|}
if|if
condition|(
name|current6_
operator|==
name|end6_
condition|)
block|{
name|current6_
operator|=
name|begin6_
expr_stmt|;
operator|++
name|current5_
expr_stmt|;
block|}
if|if
condition|(
name|current5_
operator|==
name|end5_
condition|)
block|{
name|current5_
operator|=
name|begin5_
expr_stmt|;
operator|++
name|current4_
expr_stmt|;
block|}
if|if
condition|(
name|current4_
operator|==
name|end4_
condition|)
block|{
name|current4_
operator|=
name|begin4_
expr_stmt|;
operator|++
name|current3_
expr_stmt|;
block|}
if|if
condition|(
name|current3_
operator|==
name|end3_
condition|)
block|{
name|current3_
operator|=
name|begin3_
expr_stmt|;
operator|++
name|current2_
expr_stmt|;
block|}
if|if
condition|(
name|current2_
operator|==
name|end2_
condition|)
block|{
name|current2_
operator|=
name|begin2_
expr_stmt|;
operator|++
name|current1_
expr_stmt|;
block|}
name|ComputeCurrentValue
argument_list|()
expr_stmt|;
block|}
name|virtual
name|ParamIteratorInterface
operator|<
name|ParamType
operator|>
operator|*
name|Clone
argument_list|()
specifier|const
block|{
return|return
name|new
name|Iterator
argument_list|(
operator|*
name|this
argument_list|)
return|;
block|}
name|virtual
specifier|const
name|ParamType
operator|*
name|Current
argument_list|()
specifier|const
block|{
return|return
operator|&
name|current_value_
return|;
block|}
name|virtual
name|bool
name|Equals
argument_list|(
argument|const ParamIteratorInterface<ParamType>& other
argument_list|)
specifier|const
block|{
comment|// Having the same base generator guarantees that the other
comment|// iterator is of the same type and we can downcast.
name|GTEST_CHECK_
argument_list|(
name|BaseGenerator
argument_list|()
operator|==
name|other
operator|.
name|BaseGenerator
argument_list|()
argument_list|)
operator|<<
literal|"The program attempted to compare iterators "
operator|<<
literal|"from different generators."
operator|<<
name|std
operator|::
name|endl
block|;
specifier|const
name|Iterator
operator|*
name|typed_other
operator|=
name|CheckedDowncastToActualType
operator|<
specifier|const
name|Iterator
operator|>
operator|(
operator|&
name|other
operator|)
block|;
comment|// We must report iterators equal if they both point beyond their
comment|// respective ranges. That can happen in a variety of fashions,
comment|// so we have to consult AtEnd().
return|return
operator|(
name|AtEnd
argument_list|()
operator|&&
name|typed_other
operator|->
name|AtEnd
argument_list|()
operator|)
operator|||
operator|(
name|current1_
operator|==
name|typed_other
operator|->
name|current1_
operator|&&
name|current2_
operator|==
name|typed_other
operator|->
name|current2_
operator|&&
name|current3_
operator|==
name|typed_other
operator|->
name|current3_
operator|&&
name|current4_
operator|==
name|typed_other
operator|->
name|current4_
operator|&&
name|current5_
operator|==
name|typed_other
operator|->
name|current5_
operator|&&
name|current6_
operator|==
name|typed_other
operator|->
name|current6_
operator|&&
name|current7_
operator|==
name|typed_other
operator|->
name|current7_
operator|&&
name|current8_
operator|==
name|typed_other
operator|->
name|current8_
operator|&&
name|current9_
operator|==
name|typed_other
operator|->
name|current9_
operator|&&
name|current10_
operator|==
name|typed_other
operator|->
name|current10_
operator|)
return|;
block|}
name|private
operator|:
name|Iterator
argument_list|(
specifier|const
name|Iterator
operator|&
name|other
argument_list|)
operator|:
name|base_
argument_list|(
name|other
operator|.
name|base_
argument_list|)
block|,
name|begin1_
argument_list|(
name|other
operator|.
name|begin1_
argument_list|)
block|,
name|end1_
argument_list|(
name|other
operator|.
name|end1_
argument_list|)
block|,
name|current1_
argument_list|(
name|other
operator|.
name|current1_
argument_list|)
block|,
name|begin2_
argument_list|(
name|other
operator|.
name|begin2_
argument_list|)
block|,
name|end2_
argument_list|(
name|other
operator|.
name|end2_
argument_list|)
block|,
name|current2_
argument_list|(
name|other
operator|.
name|current2_
argument_list|)
block|,
name|begin3_
argument_list|(
name|other
operator|.
name|begin3_
argument_list|)
block|,
name|end3_
argument_list|(
name|other
operator|.
name|end3_
argument_list|)
block|,
name|current3_
argument_list|(
name|other
operator|.
name|current3_
argument_list|)
block|,
name|begin4_
argument_list|(
name|other
operator|.
name|begin4_
argument_list|)
block|,
name|end4_
argument_list|(
name|other
operator|.
name|end4_
argument_list|)
block|,
name|current4_
argument_list|(
name|other
operator|.
name|current4_
argument_list|)
block|,
name|begin5_
argument_list|(
name|other
operator|.
name|begin5_
argument_list|)
block|,
name|end5_
argument_list|(
name|other
operator|.
name|end5_
argument_list|)
block|,
name|current5_
argument_list|(
name|other
operator|.
name|current5_
argument_list|)
block|,
name|begin6_
argument_list|(
name|other
operator|.
name|begin6_
argument_list|)
block|,
name|end6_
argument_list|(
name|other
operator|.
name|end6_
argument_list|)
block|,
name|current6_
argument_list|(
name|other
operator|.
name|current6_
argument_list|)
block|,
name|begin7_
argument_list|(
name|other
operator|.
name|begin7_
argument_list|)
block|,
name|end7_
argument_list|(
name|other
operator|.
name|end7_
argument_list|)
block|,
name|current7_
argument_list|(
name|other
operator|.
name|current7_
argument_list|)
block|,
name|begin8_
argument_list|(
name|other
operator|.
name|begin8_
argument_list|)
block|,
name|end8_
argument_list|(
name|other
operator|.
name|end8_
argument_list|)
block|,
name|current8_
argument_list|(
name|other
operator|.
name|current8_
argument_list|)
block|,
name|begin9_
argument_list|(
name|other
operator|.
name|begin9_
argument_list|)
block|,
name|end9_
argument_list|(
name|other
operator|.
name|end9_
argument_list|)
block|,
name|current9_
argument_list|(
name|other
operator|.
name|current9_
argument_list|)
block|,
name|begin10_
argument_list|(
name|other
operator|.
name|begin10_
argument_list|)
block|,
name|end10_
argument_list|(
name|other
operator|.
name|end10_
argument_list|)
block|,
name|current10_
argument_list|(
argument|other.current10_
argument_list|)
block|{
name|ComputeCurrentValue
argument_list|()
block|;     }
name|void
name|ComputeCurrentValue
argument_list|()
block|{
if|if
condition|(
operator|!
name|AtEnd
argument_list|()
condition|)
name|current_value_
operator|=
name|ParamType
argument_list|(
operator|*
name|current1_
argument_list|,
operator|*
name|current2_
argument_list|,
operator|*
name|current3_
argument_list|,
operator|*
name|current4_
argument_list|,
operator|*
name|current5_
argument_list|,
operator|*
name|current6_
argument_list|,
operator|*
name|current7_
argument_list|,
operator|*
name|current8_
argument_list|,
operator|*
name|current9_
argument_list|,
operator|*
name|current10_
argument_list|)
expr_stmt|;
block|}
name|bool
name|AtEnd
argument_list|()
specifier|const
block|{
comment|// We must report iterator past the end of the range when either of the
comment|// component iterators has reached the end of its range.
return|return
name|current1_
operator|==
name|end1_
operator|||
name|current2_
operator|==
name|end2_
operator|||
name|current3_
operator|==
name|end3_
operator|||
name|current4_
operator|==
name|end4_
operator|||
name|current5_
operator|==
name|end5_
operator|||
name|current6_
operator|==
name|end6_
operator|||
name|current7_
operator|==
name|end7_
operator|||
name|current8_
operator|==
name|end8_
operator|||
name|current9_
operator|==
name|end9_
operator|||
name|current10_
operator|==
name|end10_
return|;
block|}
specifier|const
name|ParamGeneratorInterface
operator|<
name|ParamType
operator|>
operator|*
specifier|const
name|base_
block|;
comment|// begin[i]_ and end[i]_ define the i-th range that Iterator traverses.
comment|// current[i]_ is the actual traversing iterator.
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T1
operator|>
operator|::
name|iterator
name|begin1_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T1
operator|>
operator|::
name|iterator
name|end1_
block|;
name|typename
name|ParamGenerator
operator|<
name|T1
operator|>
operator|::
name|iterator
name|current1_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T2
operator|>
operator|::
name|iterator
name|begin2_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T2
operator|>
operator|::
name|iterator
name|end2_
block|;
name|typename
name|ParamGenerator
operator|<
name|T2
operator|>
operator|::
name|iterator
name|current2_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T3
operator|>
operator|::
name|iterator
name|begin3_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T3
operator|>
operator|::
name|iterator
name|end3_
block|;
name|typename
name|ParamGenerator
operator|<
name|T3
operator|>
operator|::
name|iterator
name|current3_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T4
operator|>
operator|::
name|iterator
name|begin4_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T4
operator|>
operator|::
name|iterator
name|end4_
block|;
name|typename
name|ParamGenerator
operator|<
name|T4
operator|>
operator|::
name|iterator
name|current4_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T5
operator|>
operator|::
name|iterator
name|begin5_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T5
operator|>
operator|::
name|iterator
name|end5_
block|;
name|typename
name|ParamGenerator
operator|<
name|T5
operator|>
operator|::
name|iterator
name|current5_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T6
operator|>
operator|::
name|iterator
name|begin6_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T6
operator|>
operator|::
name|iterator
name|end6_
block|;
name|typename
name|ParamGenerator
operator|<
name|T6
operator|>
operator|::
name|iterator
name|current6_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T7
operator|>
operator|::
name|iterator
name|begin7_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T7
operator|>
operator|::
name|iterator
name|end7_
block|;
name|typename
name|ParamGenerator
operator|<
name|T7
operator|>
operator|::
name|iterator
name|current7_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T8
operator|>
operator|::
name|iterator
name|begin8_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T8
operator|>
operator|::
name|iterator
name|end8_
block|;
name|typename
name|ParamGenerator
operator|<
name|T8
operator|>
operator|::
name|iterator
name|current8_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T9
operator|>
operator|::
name|iterator
name|begin9_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T9
operator|>
operator|::
name|iterator
name|end9_
block|;
name|typename
name|ParamGenerator
operator|<
name|T9
operator|>
operator|::
name|iterator
name|current9_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T10
operator|>
operator|::
name|iterator
name|begin10_
block|;
specifier|const
name|typename
name|ParamGenerator
operator|<
name|T10
operator|>
operator|::
name|iterator
name|end10_
block|;
name|typename
name|ParamGenerator
operator|<
name|T10
operator|>
operator|::
name|iterator
name|current10_
block|;
name|ParamType
name|current_value_
block|;   }
decl_stmt|;
end_decl_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T1
operator|>
name|g1_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T2
operator|>
name|g2_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T3
operator|>
name|g3_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T4
operator|>
name|g4_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T5
operator|>
name|g5_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T6
operator|>
name|g6_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T7
operator|>
name|g7_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T8
operator|>
name|g8_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T9
operator|>
name|g9_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|ParamGenerator
operator|<
name|T10
operator|>
name|g10_
expr_stmt|;
end_expr_stmt

begin_comment
unit|};
comment|// INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Helper classes providing Combine() with polymorphic features. They allow
end_comment

begin_comment
comment|// casting CartesianProductGeneratorN<T> to ParamGenerator<U> if T is
end_comment

begin_comment
comment|// convertible to U.
end_comment

begin_comment
comment|//
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|Generator1
operator|,
name|class
name|Generator2
operator|>
name|class
name|CartesianProductHolder2
block|{
name|public
operator|:
name|CartesianProductHolder2
argument_list|(
specifier|const
name|Generator1
operator|&
name|g1
argument_list|,
specifier|const
name|Generator2
operator|&
name|g2
argument_list|)
operator|:
name|g1_
argument_list|(
name|g1
argument_list|)
block|,
name|g2_
argument_list|(
argument|g2
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T1
block|,
name|typename
name|T2
operator|>
name|operator
name|ParamGenerator
operator|<
operator|::
name|std
operator|::
name|tr1
operator|::
name|tuple
operator|<
name|T1
block|,
name|T2
operator|>
expr|>
operator|(
operator|)
specifier|const
block|{
return|return
name|ParamGenerator
operator|<
operator|::
name|std
operator|::
name|tr1
operator|::
name|tuple
operator|<
name|T1
operator|,
name|T2
operator|>
expr|>
operator|(
name|new
name|CartesianProductGenerator2
operator|<
name|T1
operator|,
name|T2
operator|>
operator|(
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T1
operator|>
expr|>
operator|(
name|g1_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T2
operator|>
expr|>
operator|(
name|g2_
operator|)
operator|)
operator|)
return|;
block|}
name|private
operator|:
specifier|const
name|Generator1
name|g1_
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|const
name|Generator2
name|g2_
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Generator1
operator|,
name|class
name|Generator2
operator|,
name|class
name|Generator3
operator|>
name|class
name|CartesianProductHolder3
block|{
name|public
operator|:
name|CartesianProductHolder3
argument_list|(
specifier|const
name|Generator1
operator|&
name|g1
argument_list|,
specifier|const
name|Generator2
operator|&
name|g2
argument_list|,
specifier|const
name|Generator3
operator|&
name|g3
argument_list|)
operator|:
name|g1_
argument_list|(
name|g1
argument_list|)
block|,
name|g2_
argument_list|(
name|g2
argument_list|)
block|,
name|g3_
argument_list|(
argument|g3
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T1
block|,
name|typename
name|T2
block|,
name|typename
name|T3
operator|>
name|operator
name|ParamGenerator
operator|<
operator|::
name|std
operator|::
name|tr1
operator|::
name|tuple
operator|<
name|T1
block|,
name|T2
block|,
name|T3
operator|>
expr|>
operator|(
operator|)
specifier|const
block|{
return|return
name|ParamGenerator
operator|<
operator|::
name|std
operator|::
name|tr1
operator|::
name|tuple
operator|<
name|T1
operator|,
name|T2
operator|,
name|T3
operator|>
expr|>
operator|(
name|new
name|CartesianProductGenerator3
operator|<
name|T1
operator|,
name|T2
operator|,
name|T3
operator|>
operator|(
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T1
operator|>
expr|>
operator|(
name|g1_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T2
operator|>
expr|>
operator|(
name|g2_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T3
operator|>
expr|>
operator|(
name|g3_
operator|)
operator|)
operator|)
return|;
block|}
name|private
operator|:
specifier|const
name|Generator1
name|g1_
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|const
name|Generator2
name|g2_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Generator3
name|g3_
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Generator1
operator|,
name|class
name|Generator2
operator|,
name|class
name|Generator3
operator|,
name|class
name|Generator4
operator|>
name|class
name|CartesianProductHolder4
block|{
name|public
operator|:
name|CartesianProductHolder4
argument_list|(
specifier|const
name|Generator1
operator|&
name|g1
argument_list|,
specifier|const
name|Generator2
operator|&
name|g2
argument_list|,
specifier|const
name|Generator3
operator|&
name|g3
argument_list|,
specifier|const
name|Generator4
operator|&
name|g4
argument_list|)
operator|:
name|g1_
argument_list|(
name|g1
argument_list|)
block|,
name|g2_
argument_list|(
name|g2
argument_list|)
block|,
name|g3_
argument_list|(
name|g3
argument_list|)
block|,
name|g4_
argument_list|(
argument|g4
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T1
block|,
name|typename
name|T2
block|,
name|typename
name|T3
block|,
name|typename
name|T4
operator|>
name|operator
name|ParamGenerator
operator|<
operator|::
name|std
operator|::
name|tr1
operator|::
name|tuple
operator|<
name|T1
block|,
name|T2
block|,
name|T3
block|,
name|T4
operator|>
expr|>
operator|(
operator|)
specifier|const
block|{
return|return
name|ParamGenerator
operator|<
operator|::
name|std
operator|::
name|tr1
operator|::
name|tuple
operator|<
name|T1
operator|,
name|T2
operator|,
name|T3
operator|,
name|T4
operator|>
expr|>
operator|(
name|new
name|CartesianProductGenerator4
operator|<
name|T1
operator|,
name|T2
operator|,
name|T3
operator|,
name|T4
operator|>
operator|(
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T1
operator|>
expr|>
operator|(
name|g1_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T2
operator|>
expr|>
operator|(
name|g2_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T3
operator|>
expr|>
operator|(
name|g3_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T4
operator|>
expr|>
operator|(
name|g4_
operator|)
operator|)
operator|)
return|;
block|}
name|private
operator|:
specifier|const
name|Generator1
name|g1_
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|const
name|Generator2
name|g2_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Generator3
name|g3_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Generator4
name|g4_
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Generator1
operator|,
name|class
name|Generator2
operator|,
name|class
name|Generator3
operator|,
name|class
name|Generator4
operator|,
name|class
name|Generator5
operator|>
name|class
name|CartesianProductHolder5
block|{
name|public
operator|:
name|CartesianProductHolder5
argument_list|(
specifier|const
name|Generator1
operator|&
name|g1
argument_list|,
specifier|const
name|Generator2
operator|&
name|g2
argument_list|,
specifier|const
name|Generator3
operator|&
name|g3
argument_list|,
specifier|const
name|Generator4
operator|&
name|g4
argument_list|,
specifier|const
name|Generator5
operator|&
name|g5
argument_list|)
operator|:
name|g1_
argument_list|(
name|g1
argument_list|)
block|,
name|g2_
argument_list|(
name|g2
argument_list|)
block|,
name|g3_
argument_list|(
name|g3
argument_list|)
block|,
name|g4_
argument_list|(
name|g4
argument_list|)
block|,
name|g5_
argument_list|(
argument|g5
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T1
block|,
name|typename
name|T2
block|,
name|typename
name|T3
block|,
name|typename
name|T4
block|,
name|typename
name|T5
operator|>
name|operator
name|ParamGenerator
operator|<
operator|::
name|std
operator|::
name|tr1
operator|::
name|tuple
operator|<
name|T1
block|,
name|T2
block|,
name|T3
block|,
name|T4
block|,
name|T5
operator|>
expr|>
operator|(
operator|)
specifier|const
block|{
return|return
name|ParamGenerator
operator|<
operator|::
name|std
operator|::
name|tr1
operator|::
name|tuple
operator|<
name|T1
operator|,
name|T2
operator|,
name|T3
operator|,
name|T4
operator|,
name|T5
operator|>
expr|>
operator|(
name|new
name|CartesianProductGenerator5
operator|<
name|T1
operator|,
name|T2
operator|,
name|T3
operator|,
name|T4
operator|,
name|T5
operator|>
operator|(
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T1
operator|>
expr|>
operator|(
name|g1_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T2
operator|>
expr|>
operator|(
name|g2_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T3
operator|>
expr|>
operator|(
name|g3_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T4
operator|>
expr|>
operator|(
name|g4_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T5
operator|>
expr|>
operator|(
name|g5_
operator|)
operator|)
operator|)
return|;
block|}
name|private
operator|:
specifier|const
name|Generator1
name|g1_
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|const
name|Generator2
name|g2_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Generator3
name|g3_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Generator4
name|g4_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Generator5
name|g5_
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Generator1
operator|,
name|class
name|Generator2
operator|,
name|class
name|Generator3
operator|,
name|class
name|Generator4
operator|,
name|class
name|Generator5
operator|,
name|class
name|Generator6
operator|>
name|class
name|CartesianProductHolder6
block|{
name|public
operator|:
name|CartesianProductHolder6
argument_list|(
specifier|const
name|Generator1
operator|&
name|g1
argument_list|,
specifier|const
name|Generator2
operator|&
name|g2
argument_list|,
specifier|const
name|Generator3
operator|&
name|g3
argument_list|,
specifier|const
name|Generator4
operator|&
name|g4
argument_list|,
specifier|const
name|Generator5
operator|&
name|g5
argument_list|,
specifier|const
name|Generator6
operator|&
name|g6
argument_list|)
operator|:
name|g1_
argument_list|(
name|g1
argument_list|)
block|,
name|g2_
argument_list|(
name|g2
argument_list|)
block|,
name|g3_
argument_list|(
name|g3
argument_list|)
block|,
name|g4_
argument_list|(
name|g4
argument_list|)
block|,
name|g5_
argument_list|(
name|g5
argument_list|)
block|,
name|g6_
argument_list|(
argument|g6
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T1
block|,
name|typename
name|T2
block|,
name|typename
name|T3
block|,
name|typename
name|T4
block|,
name|typename
name|T5
block|,
name|typename
name|T6
operator|>
name|operator
name|ParamGenerator
operator|<
operator|::
name|std
operator|::
name|tr1
operator|::
name|tuple
operator|<
name|T1
block|,
name|T2
block|,
name|T3
block|,
name|T4
block|,
name|T5
block|,
name|T6
operator|>
expr|>
operator|(
operator|)
specifier|const
block|{
return|return
name|ParamGenerator
operator|<
operator|::
name|std
operator|::
name|tr1
operator|::
name|tuple
operator|<
name|T1
operator|,
name|T2
operator|,
name|T3
operator|,
name|T4
operator|,
name|T5
operator|,
name|T6
operator|>
expr|>
operator|(
name|new
name|CartesianProductGenerator6
operator|<
name|T1
operator|,
name|T2
operator|,
name|T3
operator|,
name|T4
operator|,
name|T5
operator|,
name|T6
operator|>
operator|(
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T1
operator|>
expr|>
operator|(
name|g1_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T2
operator|>
expr|>
operator|(
name|g2_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T3
operator|>
expr|>
operator|(
name|g3_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T4
operator|>
expr|>
operator|(
name|g4_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T5
operator|>
expr|>
operator|(
name|g5_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T6
operator|>
expr|>
operator|(
name|g6_
operator|)
operator|)
operator|)
return|;
block|}
name|private
operator|:
specifier|const
name|Generator1
name|g1_
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|const
name|Generator2
name|g2_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Generator3
name|g3_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Generator4
name|g4_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Generator5
name|g5_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Generator6
name|g6_
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Generator1
operator|,
name|class
name|Generator2
operator|,
name|class
name|Generator3
operator|,
name|class
name|Generator4
operator|,
name|class
name|Generator5
operator|,
name|class
name|Generator6
operator|,
name|class
name|Generator7
operator|>
name|class
name|CartesianProductHolder7
block|{
name|public
operator|:
name|CartesianProductHolder7
argument_list|(
specifier|const
name|Generator1
operator|&
name|g1
argument_list|,
specifier|const
name|Generator2
operator|&
name|g2
argument_list|,
specifier|const
name|Generator3
operator|&
name|g3
argument_list|,
specifier|const
name|Generator4
operator|&
name|g4
argument_list|,
specifier|const
name|Generator5
operator|&
name|g5
argument_list|,
specifier|const
name|Generator6
operator|&
name|g6
argument_list|,
specifier|const
name|Generator7
operator|&
name|g7
argument_list|)
operator|:
name|g1_
argument_list|(
name|g1
argument_list|)
block|,
name|g2_
argument_list|(
name|g2
argument_list|)
block|,
name|g3_
argument_list|(
name|g3
argument_list|)
block|,
name|g4_
argument_list|(
name|g4
argument_list|)
block|,
name|g5_
argument_list|(
name|g5
argument_list|)
block|,
name|g6_
argument_list|(
name|g6
argument_list|)
block|,
name|g7_
argument_list|(
argument|g7
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T1
block|,
name|typename
name|T2
block|,
name|typename
name|T3
block|,
name|typename
name|T4
block|,
name|typename
name|T5
block|,
name|typename
name|T6
block|,
name|typename
name|T7
operator|>
name|operator
name|ParamGenerator
operator|<
operator|::
name|std
operator|::
name|tr1
operator|::
name|tuple
operator|<
name|T1
block|,
name|T2
block|,
name|T3
block|,
name|T4
block|,
name|T5
block|,
name|T6
block|,
name|T7
operator|>
expr|>
operator|(
operator|)
specifier|const
block|{
return|return
name|ParamGenerator
operator|<
operator|::
name|std
operator|::
name|tr1
operator|::
name|tuple
operator|<
name|T1
operator|,
name|T2
operator|,
name|T3
operator|,
name|T4
operator|,
name|T5
operator|,
name|T6
operator|,
name|T7
operator|>
expr|>
operator|(
name|new
name|CartesianProductGenerator7
operator|<
name|T1
operator|,
name|T2
operator|,
name|T3
operator|,
name|T4
operator|,
name|T5
operator|,
name|T6
operator|,
name|T7
operator|>
operator|(
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T1
operator|>
expr|>
operator|(
name|g1_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T2
operator|>
expr|>
operator|(
name|g2_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T3
operator|>
expr|>
operator|(
name|g3_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T4
operator|>
expr|>
operator|(
name|g4_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T5
operator|>
expr|>
operator|(
name|g5_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T6
operator|>
expr|>
operator|(
name|g6_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T7
operator|>
expr|>
operator|(
name|g7_
operator|)
operator|)
operator|)
return|;
block|}
name|private
operator|:
specifier|const
name|Generator1
name|g1_
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|const
name|Generator2
name|g2_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Generator3
name|g3_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Generator4
name|g4_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Generator5
name|g5_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Generator6
name|g6_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Generator7
name|g7_
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Generator1
operator|,
name|class
name|Generator2
operator|,
name|class
name|Generator3
operator|,
name|class
name|Generator4
operator|,
name|class
name|Generator5
operator|,
name|class
name|Generator6
operator|,
name|class
name|Generator7
operator|,
name|class
name|Generator8
operator|>
name|class
name|CartesianProductHolder8
block|{
name|public
operator|:
name|CartesianProductHolder8
argument_list|(
specifier|const
name|Generator1
operator|&
name|g1
argument_list|,
specifier|const
name|Generator2
operator|&
name|g2
argument_list|,
specifier|const
name|Generator3
operator|&
name|g3
argument_list|,
specifier|const
name|Generator4
operator|&
name|g4
argument_list|,
specifier|const
name|Generator5
operator|&
name|g5
argument_list|,
specifier|const
name|Generator6
operator|&
name|g6
argument_list|,
specifier|const
name|Generator7
operator|&
name|g7
argument_list|,
specifier|const
name|Generator8
operator|&
name|g8
argument_list|)
operator|:
name|g1_
argument_list|(
name|g1
argument_list|)
block|,
name|g2_
argument_list|(
name|g2
argument_list|)
block|,
name|g3_
argument_list|(
name|g3
argument_list|)
block|,
name|g4_
argument_list|(
name|g4
argument_list|)
block|,
name|g5_
argument_list|(
name|g5
argument_list|)
block|,
name|g6_
argument_list|(
name|g6
argument_list|)
block|,
name|g7_
argument_list|(
name|g7
argument_list|)
block|,
name|g8_
argument_list|(
argument|g8
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T1
block|,
name|typename
name|T2
block|,
name|typename
name|T3
block|,
name|typename
name|T4
block|,
name|typename
name|T5
block|,
name|typename
name|T6
block|,
name|typename
name|T7
block|,
name|typename
name|T8
operator|>
name|operator
name|ParamGenerator
operator|<
operator|::
name|std
operator|::
name|tr1
operator|::
name|tuple
operator|<
name|T1
block|,
name|T2
block|,
name|T3
block|,
name|T4
block|,
name|T5
block|,
name|T6
block|,
name|T7
block|,
name|T8
operator|>
expr|>
operator|(
operator|)
specifier|const
block|{
return|return
name|ParamGenerator
operator|<
operator|::
name|std
operator|::
name|tr1
operator|::
name|tuple
operator|<
name|T1
operator|,
name|T2
operator|,
name|T3
operator|,
name|T4
operator|,
name|T5
operator|,
name|T6
operator|,
name|T7
operator|,
name|T8
operator|>
expr|>
operator|(
name|new
name|CartesianProductGenerator8
operator|<
name|T1
operator|,
name|T2
operator|,
name|T3
operator|,
name|T4
operator|,
name|T5
operator|,
name|T6
operator|,
name|T7
operator|,
name|T8
operator|>
operator|(
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T1
operator|>
expr|>
operator|(
name|g1_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T2
operator|>
expr|>
operator|(
name|g2_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T3
operator|>
expr|>
operator|(
name|g3_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T4
operator|>
expr|>
operator|(
name|g4_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T5
operator|>
expr|>
operator|(
name|g5_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T6
operator|>
expr|>
operator|(
name|g6_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T7
operator|>
expr|>
operator|(
name|g7_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T8
operator|>
expr|>
operator|(
name|g8_
operator|)
operator|)
operator|)
return|;
block|}
name|private
operator|:
specifier|const
name|Generator1
name|g1_
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|const
name|Generator2
name|g2_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Generator3
name|g3_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Generator4
name|g4_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Generator5
name|g5_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Generator6
name|g6_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Generator7
name|g7_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Generator8
name|g8_
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Generator1
operator|,
name|class
name|Generator2
operator|,
name|class
name|Generator3
operator|,
name|class
name|Generator4
operator|,
name|class
name|Generator5
operator|,
name|class
name|Generator6
operator|,
name|class
name|Generator7
operator|,
name|class
name|Generator8
operator|,
name|class
name|Generator9
operator|>
name|class
name|CartesianProductHolder9
block|{
name|public
operator|:
name|CartesianProductHolder9
argument_list|(
specifier|const
name|Generator1
operator|&
name|g1
argument_list|,
specifier|const
name|Generator2
operator|&
name|g2
argument_list|,
specifier|const
name|Generator3
operator|&
name|g3
argument_list|,
specifier|const
name|Generator4
operator|&
name|g4
argument_list|,
specifier|const
name|Generator5
operator|&
name|g5
argument_list|,
specifier|const
name|Generator6
operator|&
name|g6
argument_list|,
specifier|const
name|Generator7
operator|&
name|g7
argument_list|,
specifier|const
name|Generator8
operator|&
name|g8
argument_list|,
specifier|const
name|Generator9
operator|&
name|g9
argument_list|)
operator|:
name|g1_
argument_list|(
name|g1
argument_list|)
block|,
name|g2_
argument_list|(
name|g2
argument_list|)
block|,
name|g3_
argument_list|(
name|g3
argument_list|)
block|,
name|g4_
argument_list|(
name|g4
argument_list|)
block|,
name|g5_
argument_list|(
name|g5
argument_list|)
block|,
name|g6_
argument_list|(
name|g6
argument_list|)
block|,
name|g7_
argument_list|(
name|g7
argument_list|)
block|,
name|g8_
argument_list|(
name|g8
argument_list|)
block|,
name|g9_
argument_list|(
argument|g9
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T1
block|,
name|typename
name|T2
block|,
name|typename
name|T3
block|,
name|typename
name|T4
block|,
name|typename
name|T5
block|,
name|typename
name|T6
block|,
name|typename
name|T7
block|,
name|typename
name|T8
block|,
name|typename
name|T9
operator|>
name|operator
name|ParamGenerator
operator|<
operator|::
name|std
operator|::
name|tr1
operator|::
name|tuple
operator|<
name|T1
block|,
name|T2
block|,
name|T3
block|,
name|T4
block|,
name|T5
block|,
name|T6
block|,
name|T7
block|,
name|T8
block|,
name|T9
operator|>
expr|>
operator|(
operator|)
specifier|const
block|{
return|return
name|ParamGenerator
operator|<
operator|::
name|std
operator|::
name|tr1
operator|::
name|tuple
operator|<
name|T1
operator|,
name|T2
operator|,
name|T3
operator|,
name|T4
operator|,
name|T5
operator|,
name|T6
operator|,
name|T7
operator|,
name|T8
operator|,
name|T9
operator|>
expr|>
operator|(
name|new
name|CartesianProductGenerator9
operator|<
name|T1
operator|,
name|T2
operator|,
name|T3
operator|,
name|T4
operator|,
name|T5
operator|,
name|T6
operator|,
name|T7
operator|,
name|T8
operator|,
name|T9
operator|>
operator|(
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T1
operator|>
expr|>
operator|(
name|g1_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T2
operator|>
expr|>
operator|(
name|g2_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T3
operator|>
expr|>
operator|(
name|g3_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T4
operator|>
expr|>
operator|(
name|g4_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T5
operator|>
expr|>
operator|(
name|g5_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T6
operator|>
expr|>
operator|(
name|g6_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T7
operator|>
expr|>
operator|(
name|g7_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T8
operator|>
expr|>
operator|(
name|g8_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T9
operator|>
expr|>
operator|(
name|g9_
operator|)
operator|)
operator|)
return|;
block|}
name|private
operator|:
specifier|const
name|Generator1
name|g1_
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|const
name|Generator2
name|g2_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Generator3
name|g3_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Generator4
name|g4_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Generator5
name|g5_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Generator6
name|g6_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Generator7
name|g7_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Generator8
name|g8_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Generator9
name|g9_
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Generator1
operator|,
name|class
name|Generator2
operator|,
name|class
name|Generator3
operator|,
name|class
name|Generator4
operator|,
name|class
name|Generator5
operator|,
name|class
name|Generator6
operator|,
name|class
name|Generator7
operator|,
name|class
name|Generator8
operator|,
name|class
name|Generator9
operator|,
name|class
name|Generator10
operator|>
name|class
name|CartesianProductHolder10
block|{
name|public
operator|:
name|CartesianProductHolder10
argument_list|(
specifier|const
name|Generator1
operator|&
name|g1
argument_list|,
specifier|const
name|Generator2
operator|&
name|g2
argument_list|,
specifier|const
name|Generator3
operator|&
name|g3
argument_list|,
specifier|const
name|Generator4
operator|&
name|g4
argument_list|,
specifier|const
name|Generator5
operator|&
name|g5
argument_list|,
specifier|const
name|Generator6
operator|&
name|g6
argument_list|,
specifier|const
name|Generator7
operator|&
name|g7
argument_list|,
specifier|const
name|Generator8
operator|&
name|g8
argument_list|,
specifier|const
name|Generator9
operator|&
name|g9
argument_list|,
specifier|const
name|Generator10
operator|&
name|g10
argument_list|)
operator|:
name|g1_
argument_list|(
name|g1
argument_list|)
block|,
name|g2_
argument_list|(
name|g2
argument_list|)
block|,
name|g3_
argument_list|(
name|g3
argument_list|)
block|,
name|g4_
argument_list|(
name|g4
argument_list|)
block|,
name|g5_
argument_list|(
name|g5
argument_list|)
block|,
name|g6_
argument_list|(
name|g6
argument_list|)
block|,
name|g7_
argument_list|(
name|g7
argument_list|)
block|,
name|g8_
argument_list|(
name|g8
argument_list|)
block|,
name|g9_
argument_list|(
name|g9
argument_list|)
block|,
name|g10_
argument_list|(
argument|g10
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T1
block|,
name|typename
name|T2
block|,
name|typename
name|T3
block|,
name|typename
name|T4
block|,
name|typename
name|T5
block|,
name|typename
name|T6
block|,
name|typename
name|T7
block|,
name|typename
name|T8
block|,
name|typename
name|T9
block|,
name|typename
name|T10
operator|>
name|operator
name|ParamGenerator
operator|<
operator|::
name|std
operator|::
name|tr1
operator|::
name|tuple
operator|<
name|T1
block|,
name|T2
block|,
name|T3
block|,
name|T4
block|,
name|T5
block|,
name|T6
block|,
name|T7
block|,
name|T8
block|,
name|T9
block|,
name|T10
operator|>
expr|>
operator|(
operator|)
specifier|const
block|{
return|return
name|ParamGenerator
operator|<
operator|::
name|std
operator|::
name|tr1
operator|::
name|tuple
operator|<
name|T1
operator|,
name|T2
operator|,
name|T3
operator|,
name|T4
operator|,
name|T5
operator|,
name|T6
operator|,
name|T7
operator|,
name|T8
operator|,
name|T9
operator|,
name|T10
operator|>
expr|>
operator|(
name|new
name|CartesianProductGenerator10
operator|<
name|T1
operator|,
name|T2
operator|,
name|T3
operator|,
name|T4
operator|,
name|T5
operator|,
name|T6
operator|,
name|T7
operator|,
name|T8
operator|,
name|T9
operator|,
name|T10
operator|>
operator|(
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T1
operator|>
expr|>
operator|(
name|g1_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T2
operator|>
expr|>
operator|(
name|g2_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T3
operator|>
expr|>
operator|(
name|g3_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T4
operator|>
expr|>
operator|(
name|g4_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T5
operator|>
expr|>
operator|(
name|g5_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T6
operator|>
expr|>
operator|(
name|g6_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T7
operator|>
expr|>
operator|(
name|g7_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T8
operator|>
expr|>
operator|(
name|g8_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T9
operator|>
expr|>
operator|(
name|g9_
operator|)
operator|,
name|static_cast
operator|<
name|ParamGenerator
operator|<
name|T10
operator|>
expr|>
operator|(
name|g10_
operator|)
operator|)
operator|)
return|;
block|}
name|private
operator|:
specifier|const
name|Generator1
name|g1_
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|const
name|Generator2
name|g2_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Generator3
name|g3_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Generator4
name|g4_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Generator5
name|g5_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Generator6
name|g6_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Generator7
name|g7_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Generator8
name|g8_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Generator9
name|g9_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Generator10
name|g10_
decl_stmt|;
end_decl_stmt

begin_endif
unit|};
endif|#
directive|endif
end_endif

begin_comment
comment|// GTEST_HAS_COMBINE
end_comment

begin_comment
unit|}
comment|// namespace internal
end_comment

begin_comment
unit|}
comment|// namespace testing
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|//  GTEST_HAS_PARAM_TEST
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PARAM_UTIL_GENERATED_H_
end_comment

end_unit

