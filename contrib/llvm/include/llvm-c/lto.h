begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*===-- llvm-c/lto.h - LTO Public C Interface ---------------------*- C -*-===*\ |*                                                                            *| |*                     The LLVM Compiler Infrastructure                       *| |*                                                                            *| |* This file is distributed under the University of Illinois Open Source      *| |* License. See LICENSE.TXT for details.                                      *| |*                                                                            *| |*===----------------------------------------------------------------------===*| |*                                                                            *| |* This header provides public interface to an abstract link time optimization*| |* library.  LLVM provides an implementation of this interface for use with   *| |* llvm bitcode files.                                                        *| |*                                                                            *| \*===----------------------------------------------------------------------===*/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_C_LTO_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_C_LTO_H
end_define

begin_include
include|#
directive|include
file|<stddef.h>
end_include

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|__cplusplus
end_ifndef

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
end_if

begin_include
include|#
directive|include
file|<stdbool.h>
end_include

begin_typedef
typedef|typedef
name|bool
name|lto_bool_t
typedef|;
end_typedef

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* MSVC in particular does not have anything like _Bool or bool in C, but we can    at least make sure the type is the same size.  The implementation side will    use C++ bool. */
end_comment

begin_typedef
typedef|typedef
name|unsigned
name|char
name|lto_bool_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_else
else|#
directive|else
end_else

begin_typedef
typedef|typedef
name|bool
name|lto_bool_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/**  * @defgroup LLVMCLTO LTO  * @ingroup LLVMC  *  * @{  */
end_comment

begin_define
define|#
directive|define
name|LTO_API_VERSION
value|15
end_define

begin_comment
comment|/**  * \since prior to LTO_API_VERSION=3  */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|LTO_SYMBOL_ALIGNMENT_MASK
init|=
literal|0x0000001F
block|,
comment|/* log2 of alignment */
name|LTO_SYMBOL_PERMISSIONS_MASK
init|=
literal|0x000000E0
block|,
name|LTO_SYMBOL_PERMISSIONS_CODE
init|=
literal|0x000000A0
block|,
name|LTO_SYMBOL_PERMISSIONS_DATA
init|=
literal|0x000000C0
block|,
name|LTO_SYMBOL_PERMISSIONS_RODATA
init|=
literal|0x00000080
block|,
name|LTO_SYMBOL_DEFINITION_MASK
init|=
literal|0x00000700
block|,
name|LTO_SYMBOL_DEFINITION_REGULAR
init|=
literal|0x00000100
block|,
name|LTO_SYMBOL_DEFINITION_TENTATIVE
init|=
literal|0x00000200
block|,
name|LTO_SYMBOL_DEFINITION_WEAK
init|=
literal|0x00000300
block|,
name|LTO_SYMBOL_DEFINITION_UNDEFINED
init|=
literal|0x00000400
block|,
name|LTO_SYMBOL_DEFINITION_WEAKUNDEF
init|=
literal|0x00000500
block|,
name|LTO_SYMBOL_SCOPE_MASK
init|=
literal|0x00003800
block|,
name|LTO_SYMBOL_SCOPE_INTERNAL
init|=
literal|0x00000800
block|,
name|LTO_SYMBOL_SCOPE_HIDDEN
init|=
literal|0x00001000
block|,
name|LTO_SYMBOL_SCOPE_PROTECTED
init|=
literal|0x00002000
block|,
name|LTO_SYMBOL_SCOPE_DEFAULT
init|=
literal|0x00001800
block|,
name|LTO_SYMBOL_SCOPE_DEFAULT_CAN_BE_HIDDEN
init|=
literal|0x00002800
block|}
name|lto_symbol_attributes
typedef|;
end_typedef

begin_comment
comment|/**  * \since prior to LTO_API_VERSION=3  */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|LTO_DEBUG_MODEL_NONE
init|=
literal|0
block|,
name|LTO_DEBUG_MODEL_DWARF
init|=
literal|1
block|}
name|lto_debug_model
typedef|;
end_typedef

begin_comment
comment|/**  * \since prior to LTO_API_VERSION=3  */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|LTO_CODEGEN_PIC_MODEL_STATIC
init|=
literal|0
block|,
name|LTO_CODEGEN_PIC_MODEL_DYNAMIC
init|=
literal|1
block|,
name|LTO_CODEGEN_PIC_MODEL_DYNAMIC_NO_PIC
init|=
literal|2
block|,
name|LTO_CODEGEN_PIC_MODEL_DEFAULT
init|=
literal|3
block|}
name|lto_codegen_model
typedef|;
end_typedef

begin_comment
comment|/** opaque reference to a loaded object module */
end_comment

begin_typedef
typedef|typedef
name|struct
name|LLVMOpaqueLTOModule
modifier|*
name|lto_module_t
typedef|;
end_typedef

begin_comment
comment|/** opaque reference to a code generator */
end_comment

begin_typedef
typedef|typedef
name|struct
name|LLVMOpaqueLTOCodeGenerator
modifier|*
name|lto_code_gen_t
typedef|;
end_typedef

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/**  * Returns a printable string.  *  * \since prior to LTO_API_VERSION=3  */
specifier|extern
specifier|const
name|char
modifier|*
name|lto_get_version
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/**  * Returns the last error string or NULL if last operation was successful.  *  * \since prior to LTO_API_VERSION=3  */
specifier|extern
specifier|const
name|char
modifier|*
name|lto_get_error_message
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/**  * Checks if a file is a loadable object file.  *  * \since prior to LTO_API_VERSION=3  */
specifier|extern
name|lto_bool_t
name|lto_module_is_object_file
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
comment|/**  * Checks if a file is a loadable object compiled for requested target.  *  * \since prior to LTO_API_VERSION=3  */
specifier|extern
name|lto_bool_t
name|lto_module_is_object_file_for_target
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|target_triple_prefix
parameter_list|)
function_decl|;
comment|/**  * Checks if a buffer is a loadable object file.  *  * \since prior to LTO_API_VERSION=3  */
specifier|extern
name|lto_bool_t
name|lto_module_is_object_file_in_memory
parameter_list|(
specifier|const
name|void
modifier|*
name|mem
parameter_list|,
name|size_t
name|length
parameter_list|)
function_decl|;
comment|/**  * Checks if a buffer is a loadable object compiled for requested target.  *  * \since prior to LTO_API_VERSION=3  */
specifier|extern
name|lto_bool_t
name|lto_module_is_object_file_in_memory_for_target
parameter_list|(
specifier|const
name|void
modifier|*
name|mem
parameter_list|,
name|size_t
name|length
parameter_list|,
specifier|const
name|char
modifier|*
name|target_triple_prefix
parameter_list|)
function_decl|;
comment|/**  * Loads an object file from disk.  * Returns NULL on error (check lto_get_error_message() for details).  *  * \since prior to LTO_API_VERSION=3  */
specifier|extern
name|lto_module_t
name|lto_module_create
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
comment|/**  * Loads an object file from memory.  * Returns NULL on error (check lto_get_error_message() for details).  *  * \since prior to LTO_API_VERSION=3  */
specifier|extern
name|lto_module_t
name|lto_module_create_from_memory
parameter_list|(
specifier|const
name|void
modifier|*
name|mem
parameter_list|,
name|size_t
name|length
parameter_list|)
function_decl|;
comment|/**  * Loads an object file from memory with an extra path argument.  * Returns NULL on error (check lto_get_error_message() for details).  *  * \since LTO_API_VERSION=9  */
specifier|extern
name|lto_module_t
name|lto_module_create_from_memory_with_path
parameter_list|(
specifier|const
name|void
modifier|*
name|mem
parameter_list|,
name|size_t
name|length
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
comment|/**  * \brief Loads an object file in its own context.  *  * Loads an object file in its own LLVMContext.  This function call is  * thread-safe.  However, modules created this way should not be merged into an  * lto_code_gen_t using \a lto_codegen_add_module().  *  * Returns NULL on error (check lto_get_error_message() for details).  *  * \since LTO_API_VERSION=11  */
specifier|extern
name|lto_module_t
name|lto_module_create_in_local_context
parameter_list|(
specifier|const
name|void
modifier|*
name|mem
parameter_list|,
name|size_t
name|length
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
comment|/**  * \brief Loads an object file in the codegen context.  *  * Loads an object file into the same context as \c cg.  The module is safe to  * add using \a lto_codegen_add_module().  *  * Returns NULL on error (check lto_get_error_message() for details).  *  * \since LTO_API_VERSION=11  */
specifier|extern
name|lto_module_t
name|lto_module_create_in_codegen_context
parameter_list|(
specifier|const
name|void
modifier|*
name|mem
parameter_list|,
name|size_t
name|length
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|lto_code_gen_t
name|cg
parameter_list|)
function_decl|;
comment|/**  * Loads an object file from disk. The seek point of fd is not preserved.  * Returns NULL on error (check lto_get_error_message() for details).  *  * \since LTO_API_VERSION=5  */
specifier|extern
name|lto_module_t
name|lto_module_create_from_fd
parameter_list|(
name|int
name|fd
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|size_t
name|file_size
parameter_list|)
function_decl|;
comment|/**  * Loads an object file from disk. The seek point of fd is not preserved.  * Returns NULL on error (check lto_get_error_message() for details).  *  * \since LTO_API_VERSION=5  */
specifier|extern
name|lto_module_t
name|lto_module_create_from_fd_at_offset
parameter_list|(
name|int
name|fd
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|size_t
name|file_size
parameter_list|,
name|size_t
name|map_size
parameter_list|,
name|off_t
name|offset
parameter_list|)
function_decl|;
comment|/**  * Frees all memory internally allocated by the module.  * Upon return the lto_module_t is no longer valid.  *  * \since prior to LTO_API_VERSION=3  */
specifier|extern
name|void
name|lto_module_dispose
parameter_list|(
name|lto_module_t
name|mod
parameter_list|)
function_decl|;
comment|/**  * Returns triple string which the object module was compiled under.  *  * \since prior to LTO_API_VERSION=3  */
specifier|extern
specifier|const
name|char
modifier|*
name|lto_module_get_target_triple
parameter_list|(
name|lto_module_t
name|mod
parameter_list|)
function_decl|;
comment|/**  * Sets triple string with which the object will be codegened.  *  * \since LTO_API_VERSION=4  */
specifier|extern
name|void
name|lto_module_set_target_triple
parameter_list|(
name|lto_module_t
name|mod
parameter_list|,
specifier|const
name|char
modifier|*
name|triple
parameter_list|)
function_decl|;
comment|/**  * Returns the number of symbols in the object module.  *  * \since prior to LTO_API_VERSION=3  */
specifier|extern
name|unsigned
name|int
name|lto_module_get_num_symbols
parameter_list|(
name|lto_module_t
name|mod
parameter_list|)
function_decl|;
comment|/**  * Returns the name of the ith symbol in the object module.  *  * \since prior to LTO_API_VERSION=3  */
specifier|extern
specifier|const
name|char
modifier|*
name|lto_module_get_symbol_name
parameter_list|(
name|lto_module_t
name|mod
parameter_list|,
name|unsigned
name|int
name|index
parameter_list|)
function_decl|;
comment|/**  * Returns the attributes of the ith symbol in the object module.  *  * \since prior to LTO_API_VERSION=3  */
specifier|extern
name|lto_symbol_attributes
name|lto_module_get_symbol_attribute
parameter_list|(
name|lto_module_t
name|mod
parameter_list|,
name|unsigned
name|int
name|index
parameter_list|)
function_decl|;
comment|/**  * Returns the number of dependent libraries in the object module.  *  * \since LTO_API_VERSION=8  */
specifier|extern
name|unsigned
name|int
name|lto_module_get_num_deplibs
parameter_list|(
name|lto_module_t
name|mod
parameter_list|)
function_decl|;
comment|/**  * Returns the ith dependent library in the module.  *  * \since LTO_API_VERSION=8  */
specifier|extern
specifier|const
name|char
modifier|*
name|lto_module_get_deplib
parameter_list|(
name|lto_module_t
name|mod
parameter_list|,
name|unsigned
name|int
name|index
parameter_list|)
function_decl|;
comment|/**  * Returns the number of linker options in the object module.  *  * \since LTO_API_VERSION=8  */
specifier|extern
name|unsigned
name|int
name|lto_module_get_num_linkeropts
parameter_list|(
name|lto_module_t
name|mod
parameter_list|)
function_decl|;
comment|/**  * Returns the ith linker option in the module.  *  * \since LTO_API_VERSION=8  */
specifier|extern
specifier|const
name|char
modifier|*
name|lto_module_get_linkeropt
parameter_list|(
name|lto_module_t
name|mod
parameter_list|,
name|unsigned
name|int
name|index
parameter_list|)
function_decl|;
comment|/**  * Diagnostic severity.  *  * \since LTO_API_VERSION=7  */
typedef|typedef
enum|enum
block|{
name|LTO_DS_ERROR
init|=
literal|0
block|,
name|LTO_DS_WARNING
init|=
literal|1
block|,
name|LTO_DS_REMARK
init|=
literal|3
block|,
comment|// Added in LTO_API_VERSION=10.
name|LTO_DS_NOTE
init|=
literal|2
block|}
name|lto_codegen_diagnostic_severity_t
typedef|;
comment|/**  * Diagnostic handler type.  * \p severity defines the severity.  * \p diag is the actual diagnostic.  * The diagnostic is not prefixed by any of severity keyword, e.g., 'error: '.  * \p ctxt is used to pass the context set with the diagnostic handler.  *  * \since LTO_API_VERSION=7  */
typedef|typedef
name|void
function_decl|(
modifier|*
name|lto_diagnostic_handler_t
function_decl|)
parameter_list|(
name|lto_codegen_diagnostic_severity_t
name|severity
parameter_list|,
specifier|const
name|char
modifier|*
name|diag
parameter_list|,
name|void
modifier|*
name|ctxt
parameter_list|)
function_decl|;
comment|/**  * Set a diagnostic handler and the related context (void *).  * This is more general than lto_get_error_message, as the diagnostic handler  * can be called at anytime within lto.  *  * \since LTO_API_VERSION=7  */
specifier|extern
name|void
name|lto_codegen_set_diagnostic_handler
parameter_list|(
name|lto_code_gen_t
parameter_list|,
name|lto_diagnostic_handler_t
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/**  * Instantiates a code generator.  * Returns NULL on error (check lto_get_error_message() for details).  *  * All modules added using \a lto_codegen_add_module() must have been created  * in the same context as the codegen.  *  * \since prior to LTO_API_VERSION=3  */
specifier|extern
name|lto_code_gen_t
name|lto_codegen_create
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/**  * \brief Instantiate a code generator in its own context.  *  * Instantiates a code generator in its own context.  Modules added via \a  * lto_codegen_add_module() must have all been created in the same context,  * using \a lto_module_create_in_codegen_context().  *  * \since LTO_API_VERSION=11  */
specifier|extern
name|lto_code_gen_t
name|lto_codegen_create_in_local_context
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/**  * Frees all code generator and all memory it internally allocated.  * Upon return the lto_code_gen_t is no longer valid.  *  * \since prior to LTO_API_VERSION=3  */
specifier|extern
name|void
name|lto_codegen_dispose
parameter_list|(
name|lto_code_gen_t
parameter_list|)
function_decl|;
comment|/**  * Add an object module to the set of modules for which code will be generated.  * Returns true on error (check lto_get_error_message() for details).  *  * \c cg and \c mod must both be in the same context.  See \a  * lto_codegen_create_in_local_context() and \a  * lto_module_create_in_codegen_context().  *  * \since prior to LTO_API_VERSION=3  */
specifier|extern
name|lto_bool_t
name|lto_codegen_add_module
parameter_list|(
name|lto_code_gen_t
name|cg
parameter_list|,
name|lto_module_t
name|mod
parameter_list|)
function_decl|;
comment|/**  * Sets the object module for code generation. This will transfer the ownship of  * the module to code generator.  *  * \c cg and \c mod must both be in the same context.  *  * \since LTO_API_VERSION=13  */
specifier|extern
name|void
name|lto_codegen_set_module
parameter_list|(
name|lto_code_gen_t
name|cg
parameter_list|,
name|lto_module_t
name|mod
parameter_list|)
function_decl|;
comment|/**  * Sets if debug info should be generated.  * Returns true on error (check lto_get_error_message() for details).  *  * \since prior to LTO_API_VERSION=3  */
specifier|extern
name|lto_bool_t
name|lto_codegen_set_debug_model
parameter_list|(
name|lto_code_gen_t
name|cg
parameter_list|,
name|lto_debug_model
parameter_list|)
function_decl|;
comment|/**  * Sets which PIC code model to generated.  * Returns true on error (check lto_get_error_message() for details).  *  * \since prior to LTO_API_VERSION=3  */
specifier|extern
name|lto_bool_t
name|lto_codegen_set_pic_model
parameter_list|(
name|lto_code_gen_t
name|cg
parameter_list|,
name|lto_codegen_model
parameter_list|)
function_decl|;
comment|/**  * Sets the cpu to generate code for.  *  * \since LTO_API_VERSION=4  */
specifier|extern
name|void
name|lto_codegen_set_cpu
parameter_list|(
name|lto_code_gen_t
name|cg
parameter_list|,
specifier|const
name|char
modifier|*
name|cpu
parameter_list|)
function_decl|;
comment|/**  * Sets the location of the assembler tool to run. If not set, libLTO  * will use gcc to invoke the assembler.  *  * \since LTO_API_VERSION=3  */
specifier|extern
name|void
name|lto_codegen_set_assembler_path
parameter_list|(
name|lto_code_gen_t
name|cg
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
comment|/**  * Sets extra arguments that libLTO should pass to the assembler.  *  * \since LTO_API_VERSION=4  */
specifier|extern
name|void
name|lto_codegen_set_assembler_args
parameter_list|(
name|lto_code_gen_t
name|cg
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|args
parameter_list|,
name|int
name|nargs
parameter_list|)
function_decl|;
comment|/**  * Adds to a list of all global symbols that must exist in the final generated  * code. If a function is not listed there, it might be inlined into every usage  * and optimized away.  *  * \since prior to LTO_API_VERSION=3  */
specifier|extern
name|void
name|lto_codegen_add_must_preserve_symbol
parameter_list|(
name|lto_code_gen_t
name|cg
parameter_list|,
specifier|const
name|char
modifier|*
name|symbol
parameter_list|)
function_decl|;
comment|/**  * Writes a new object file at the specified path that contains the  * merged contents of all modules added so far.  * Returns true on error (check lto_get_error_message() for details).  *  * \since LTO_API_VERSION=5  */
specifier|extern
name|lto_bool_t
name|lto_codegen_write_merged_modules
parameter_list|(
name|lto_code_gen_t
name|cg
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
comment|/**  * Generates code for all added modules into one native object file.  * This calls lto_codegen_optimize then lto_codegen_compile_optimized.  *  * On success returns a pointer to a generated mach-o/ELF buffer and  * length set to the buffer size.  The buffer is owned by the  * lto_code_gen_t and will be freed when lto_codegen_dispose()  * is called, or lto_codegen_compile() is called again.  * On failure, returns NULL (check lto_get_error_message() for details).  *  * \since prior to LTO_API_VERSION=3  */
specifier|extern
specifier|const
name|void
modifier|*
name|lto_codegen_compile
parameter_list|(
name|lto_code_gen_t
name|cg
parameter_list|,
name|size_t
modifier|*
name|length
parameter_list|)
function_decl|;
comment|/**  * Generates code for all added modules into one native object file.  * This calls lto_codegen_optimize then lto_codegen_compile_optimized (instead  * of returning a generated mach-o/ELF buffer, it writes to a file).  *  * The name of the file is written to name. Returns true on error.  *  * \since LTO_API_VERSION=5  */
specifier|extern
name|lto_bool_t
name|lto_codegen_compile_to_file
parameter_list|(
name|lto_code_gen_t
name|cg
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|name
parameter_list|)
function_decl|;
comment|/**  * Runs optimization for the merged module. Returns true on error.  *  * \since LTO_API_VERSION=12  */
specifier|extern
name|lto_bool_t
name|lto_codegen_optimize
parameter_list|(
name|lto_code_gen_t
name|cg
parameter_list|)
function_decl|;
comment|/**  * Generates code for the optimized merged module into one native object file.  * It will not run any IR optimizations on the merged module.  *  * On success returns a pointer to a generated mach-o/ELF buffer and length set  * to the buffer size.  The buffer is owned by the lto_code_gen_t and will be  * freed when lto_codegen_dispose() is called, or  * lto_codegen_compile_optimized() is called again. On failure, returns NULL  * (check lto_get_error_message() for details).  *  * \since LTO_API_VERSION=12  */
specifier|extern
specifier|const
name|void
modifier|*
name|lto_codegen_compile_optimized
parameter_list|(
name|lto_code_gen_t
name|cg
parameter_list|,
name|size_t
modifier|*
name|length
parameter_list|)
function_decl|;
comment|/**  * Returns the runtime API version.  *  * \since LTO_API_VERSION=12  */
specifier|extern
name|unsigned
name|int
name|lto_api_version
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/**  * Sets options to help debug codegen bugs.  *  * \since prior to LTO_API_VERSION=3  */
specifier|extern
name|void
name|lto_codegen_debug_options
parameter_list|(
name|lto_code_gen_t
name|cg
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
comment|/**  * Initializes LLVM disassemblers.  * FIXME: This doesn't really belong here.  *  * \since LTO_API_VERSION=5  */
specifier|extern
name|void
name|lto_initialize_disassembler
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/**  * Sets if we should run internalize pass during optimization and code  * generation.  *  * \since LTO_API_VERSION=14  */
specifier|extern
name|void
name|lto_codegen_set_should_internalize
parameter_list|(
name|lto_code_gen_t
name|cg
parameter_list|,
name|lto_bool_t
name|ShouldInternalize
parameter_list|)
function_decl|;
comment|/**  * \brief Set whether to embed uselists in bitcode.  *  * Sets whether \a lto_codegen_write_merged_modules() should embed uselists in  * output bitcode.  This should be turned on for all -save-temps output.  *  * \since LTO_API_VERSION=15  */
specifier|extern
name|void
name|lto_codegen_set_should_embed_uselists
parameter_list|(
name|lto_code_gen_t
name|cg
parameter_list|,
name|lto_bool_t
name|ShouldEmbedUselists
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/**  * @}  */
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

