begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*===-- llvm-c/TargetMachine.h - Target Machine Library C Interface - C++ -*-=*\ |*                                                                            *| |*                     The LLVM Compiler Infrastructure                       *| |*                                                                            *| |* This file is distributed under the University of Illinois Open Source      *| |* License. See LICENSE.TXT for details.                                      *| |*                                                                            *| |*===----------------------------------------------------------------------===*| |*                                                                            *| |* This header declares the C interface to the Target and TargetMachine       *| |* classes, which can be used to generate assembly or object files.           *| |*                                                                            *| |* Many exotic languages can interoperate with C code but have a harder time  *| |* with C++ due to name mangling. So in addition to C, this interface enables *| |* tools written in such languages.                                           *| |*                                                                            *| \*===----------------------------------------------------------------------===*/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_C_TARGETMACHINE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_C_TARGETMACHINE_H
end_define

begin_include
include|#
directive|include
file|"llvm-c/Core.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
typedef|typedef
name|struct
name|LLVMTargetMachine
modifier|*
name|LLVMTargetMachineRef
typedef|;
typedef|typedef
name|struct
name|LLVMTarget
modifier|*
name|LLVMTargetRef
typedef|;
typedef|typedef
enum|enum
block|{
name|LLVMCodeGenLevelNone
block|,
name|LLVMCodeGenLevelLess
block|,
name|LLVMCodeGenLevelDefault
block|,
name|LLVMCodeGenLevelAggressive
block|}
name|LLVMCodeGenOptLevel
typedef|;
typedef|typedef
enum|enum
block|{
name|LLVMRelocDefault
block|,
name|LLVMRelocStatic
block|,
name|LLVMRelocPIC
block|,
name|LLVMRelocDynamicNoPic
block|}
name|LLVMRelocMode
typedef|;
typedef|typedef
enum|enum
block|{
name|LLVMCodeModelDefault
block|,
name|LLVMCodeModelJITDefault
block|,
name|LLVMCodeModelSmall
block|,
name|LLVMCodeModelKernel
block|,
name|LLVMCodeModelMedium
block|,
name|LLVMCodeModelLarge
block|}
name|LLVMCodeModel
typedef|;
typedef|typedef
enum|enum
block|{
name|LLVMAssemblyFile
block|,
name|LLVMObjectFile
block|}
name|LLVMCodeGenFileType
typedef|;
comment|/** Returns the first llvm::Target in the registered targets list. */
name|LLVMTargetRef
name|LLVMGetFirstTarget
parameter_list|()
function_decl|;
comment|/** Returns the next llvm::Target given a previous one (or null if there's none) */
name|LLVMTargetRef
name|LLVMGetNextTarget
parameter_list|(
name|LLVMTargetRef
name|T
parameter_list|)
function_decl|;
comment|/*===-- Target ------------------------------------------------------------===*/
comment|/** Returns the name of a target. See llvm::Target::getName */
specifier|const
name|char
modifier|*
name|LLVMGetTargetName
parameter_list|(
name|LLVMTargetRef
name|T
parameter_list|)
function_decl|;
comment|/** Returns the description  of a target. See llvm::Target::getDescription */
specifier|const
name|char
modifier|*
name|LLVMGetTargetDescription
parameter_list|(
name|LLVMTargetRef
name|T
parameter_list|)
function_decl|;
comment|/** Returns if the target has a JIT */
name|LLVMBool
name|LLVMTargetHasJIT
parameter_list|(
name|LLVMTargetRef
name|T
parameter_list|)
function_decl|;
comment|/** Returns if the target has a TargetMachine associated */
name|LLVMBool
name|LLVMTargetHasTargetMachine
parameter_list|(
name|LLVMTargetRef
name|T
parameter_list|)
function_decl|;
comment|/** Returns if the target as an ASM backend (required for emitting output) */
name|LLVMBool
name|LLVMTargetHasAsmBackend
parameter_list|(
name|LLVMTargetRef
name|T
parameter_list|)
function_decl|;
comment|/*===-- Target Machine ----------------------------------------------------===*/
comment|/** Creates a new llvm::TargetMachine. See llvm::Target::createTargetMachine */
name|LLVMTargetMachineRef
name|LLVMCreateTargetMachine
parameter_list|(
name|LLVMTargetRef
name|T
parameter_list|,
name|char
modifier|*
name|Triple
parameter_list|,
name|char
modifier|*
name|CPU
parameter_list|,
name|char
modifier|*
name|Features
parameter_list|,
name|LLVMCodeGenOptLevel
name|Level
parameter_list|,
name|LLVMRelocMode
name|Reloc
parameter_list|,
name|LLVMCodeModel
name|CodeModel
parameter_list|)
function_decl|;
comment|/** Dispose the LLVMTargetMachineRef instance generated by   LLVMCreateTargetMachine. */
name|void
name|LLVMDisposeTargetMachine
parameter_list|(
name|LLVMTargetMachineRef
name|T
parameter_list|)
function_decl|;
comment|/** Returns the Target used in a TargetMachine */
name|LLVMTargetRef
name|LLVMGetTargetMachineTarget
parameter_list|(
name|LLVMTargetMachineRef
name|T
parameter_list|)
function_decl|;
comment|/** Returns the triple used creating this target machine. See   llvm::TargetMachine::getTriple. The result needs to be disposed with   LLVMDisposeMessage. */
name|char
modifier|*
name|LLVMGetTargetMachineTriple
parameter_list|(
name|LLVMTargetMachineRef
name|T
parameter_list|)
function_decl|;
comment|/** Returns the cpu used creating this target machine. See   llvm::TargetMachine::getCPU. The result needs to be disposed with   LLVMDisposeMessage. */
name|char
modifier|*
name|LLVMGetTargetMachineCPU
parameter_list|(
name|LLVMTargetMachineRef
name|T
parameter_list|)
function_decl|;
comment|/** Returns the feature string used creating this target machine. See   llvm::TargetMachine::getFeatureString. The result needs to be disposed with   LLVMDisposeMessage. */
name|char
modifier|*
name|LLVMGetTargetMachineFeatureString
parameter_list|(
name|LLVMTargetMachineRef
name|T
parameter_list|)
function_decl|;
comment|/** Returns the llvm::DataLayout used for this llvm:TargetMachine. */
name|LLVMTargetDataRef
name|LLVMGetTargetMachineData
parameter_list|(
name|LLVMTargetMachineRef
name|T
parameter_list|)
function_decl|;
comment|/** Emits an asm or object file for the given module to the filename. This   wraps several c++ only classes (among them a file stream). Returns any   error in ErrorMessage. Use LLVMDisposeMessage to dispose the message. */
name|LLVMBool
name|LLVMTargetMachineEmitToFile
parameter_list|(
name|LLVMTargetMachineRef
name|T
parameter_list|,
name|LLVMModuleRef
name|M
parameter_list|,
name|char
modifier|*
name|Filename
parameter_list|,
name|LLVMCodeGenFileType
name|codegen
parameter_list|,
name|char
modifier|*
modifier|*
name|ErrorMessage
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|TargetMachine
decl_stmt|;
name|class
name|Target
decl_stmt|;
specifier|inline
name|TargetMachine
modifier|*
name|unwrap
parameter_list|(
name|LLVMTargetMachineRef
name|P
parameter_list|)
block|{
return|return
name|reinterpret_cast
operator|<
name|TargetMachine
operator|*
operator|>
operator|(
name|P
operator|)
return|;
block|}
specifier|inline
name|Target
modifier|*
name|unwrap
parameter_list|(
name|LLVMTargetRef
name|P
parameter_list|)
block|{
return|return
name|reinterpret_cast
operator|<
name|Target
operator|*
operator|>
operator|(
name|P
operator|)
return|;
block|}
specifier|inline
name|LLVMTargetMachineRef
name|wrap
parameter_list|(
specifier|const
name|TargetMachine
modifier|*
name|P
parameter_list|)
block|{
return|return
name|reinterpret_cast
operator|<
name|LLVMTargetMachineRef
operator|>
operator|(
name|const_cast
operator|<
name|TargetMachine
operator|*
operator|>
operator|(
name|P
operator|)
operator|)
return|;
block|}
specifier|inline
name|LLVMTargetRef
name|wrap
parameter_list|(
specifier|const
name|Target
modifier|*
name|P
parameter_list|)
block|{
return|return
name|reinterpret_cast
operator|<
name|LLVMTargetRef
operator|>
operator|(
name|const_cast
operator|<
name|Target
operator|*
operator|>
operator|(
name|P
operator|)
operator|)
return|;
block|}
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

