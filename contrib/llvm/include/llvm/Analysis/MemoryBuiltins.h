begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- llvm/Analysis/MemoryBuiltins.h- Calls to memory builtins -*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This family of functions identifies calls to builtin functions that allocate
end_comment

begin_comment
comment|// or free memory.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_ANALYSIS_MEMORYBUILTINS_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_ANALYSIS_MEMORYBUILTINS_H
end_define

begin_include
include|#
directive|include
file|"llvm/IRBuilder.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Operator.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallPtrSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/DataTypes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/InstVisitor.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/TargetFolder.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ValueHandle.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|CallInst
decl_stmt|;
name|class
name|PointerType
decl_stmt|;
name|class
name|DataLayout
decl_stmt|;
name|class
name|TargetLibraryInfo
decl_stmt|;
name|class
name|Type
decl_stmt|;
name|class
name|Value
decl_stmt|;
comment|/// \brief Tests if a value is a call or invoke to a library function that
comment|/// allocates or reallocates memory (either malloc, calloc, realloc, or strdup
comment|/// like).
name|bool
name|isAllocationFn
parameter_list|(
specifier|const
name|Value
modifier|*
name|V
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
parameter_list|,
name|bool
name|LookThroughBitCast
init|=
name|false
parameter_list|)
function_decl|;
comment|/// \brief Tests if a value is a call or invoke to a function that returns a
comment|/// NoAlias pointer (including malloc/calloc/realloc/strdup-like functions).
name|bool
name|isNoAliasFn
parameter_list|(
specifier|const
name|Value
modifier|*
name|V
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
parameter_list|,
name|bool
name|LookThroughBitCast
init|=
name|false
parameter_list|)
function_decl|;
comment|/// \brief Tests if a value is a call or invoke to a library function that
comment|/// allocates uninitialized memory (such as malloc).
name|bool
name|isMallocLikeFn
parameter_list|(
specifier|const
name|Value
modifier|*
name|V
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
parameter_list|,
name|bool
name|LookThroughBitCast
init|=
name|false
parameter_list|)
function_decl|;
comment|/// \brief Tests if a value is a call or invoke to a library function that
comment|/// allocates zero-filled memory (such as calloc).
name|bool
name|isCallocLikeFn
parameter_list|(
specifier|const
name|Value
modifier|*
name|V
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
parameter_list|,
name|bool
name|LookThroughBitCast
init|=
name|false
parameter_list|)
function_decl|;
comment|/// \brief Tests if a value is a call or invoke to a library function that
comment|/// allocates memory (either malloc, calloc, or strdup like).
name|bool
name|isAllocLikeFn
parameter_list|(
specifier|const
name|Value
modifier|*
name|V
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
parameter_list|,
name|bool
name|LookThroughBitCast
init|=
name|false
parameter_list|)
function_decl|;
comment|/// \brief Tests if a value is a call or invoke to a library function that
comment|/// reallocates memory (such as realloc).
name|bool
name|isReallocLikeFn
parameter_list|(
specifier|const
name|Value
modifier|*
name|V
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
parameter_list|,
name|bool
name|LookThroughBitCast
init|=
name|false
parameter_list|)
function_decl|;
comment|//===----------------------------------------------------------------------===//
comment|//  malloc Call Utility Functions.
comment|//
comment|/// extractMallocCall - Returns the corresponding CallInst if the instruction
comment|/// is a malloc call.  Since CallInst::CreateMalloc() only creates calls, we
comment|/// ignore InvokeInst here.
specifier|const
name|CallInst
modifier|*
name|extractMallocCall
parameter_list|(
specifier|const
name|Value
modifier|*
name|I
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
parameter_list|)
function_decl|;
specifier|static
specifier|inline
name|CallInst
modifier|*
name|extractMallocCall
parameter_list|(
name|Value
modifier|*
name|I
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
parameter_list|)
block|{
return|return
name|const_cast
operator|<
name|CallInst
operator|*
operator|>
operator|(
name|extractMallocCall
argument_list|(
operator|(
specifier|const
name|Value
operator|*
operator|)
name|I
argument_list|,
name|TLI
argument_list|)
operator|)
return|;
block|}
comment|/// isArrayMalloc - Returns the corresponding CallInst if the instruction
comment|/// is a call to malloc whose array size can be determined and the array size
comment|/// is not constant 1.  Otherwise, return NULL.
specifier|const
name|CallInst
modifier|*
name|isArrayMalloc
parameter_list|(
specifier|const
name|Value
modifier|*
name|I
parameter_list|,
specifier|const
name|DataLayout
modifier|*
name|TD
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
parameter_list|)
function_decl|;
comment|/// getMallocType - Returns the PointerType resulting from the malloc call.
comment|/// The PointerType depends on the number of bitcast uses of the malloc call:
comment|///   0: PointerType is the malloc calls' return type.
comment|///   1: PointerType is the bitcast's result type.
comment|///>1: Unique PointerType cannot be determined, return NULL.
name|PointerType
modifier|*
name|getMallocType
parameter_list|(
specifier|const
name|CallInst
modifier|*
name|CI
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
parameter_list|)
function_decl|;
comment|/// getMallocAllocatedType - Returns the Type allocated by malloc call.
comment|/// The Type depends on the number of bitcast uses of the malloc call:
comment|///   0: PointerType is the malloc calls' return type.
comment|///   1: PointerType is the bitcast's result type.
comment|///>1: Unique PointerType cannot be determined, return NULL.
name|Type
modifier|*
name|getMallocAllocatedType
parameter_list|(
specifier|const
name|CallInst
modifier|*
name|CI
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
parameter_list|)
function_decl|;
comment|/// getMallocArraySize - Returns the array size of a malloc call.  If the
comment|/// argument passed to malloc is a multiple of the size of the malloced type,
comment|/// then return that multiple.  For non-array mallocs, the multiple is
comment|/// constant 1.  Otherwise, return NULL for mallocs whose array size cannot be
comment|/// determined.
name|Value
modifier|*
name|getMallocArraySize
parameter_list|(
name|CallInst
modifier|*
name|CI
parameter_list|,
specifier|const
name|DataLayout
modifier|*
name|TD
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
parameter_list|,
name|bool
name|LookThroughSExt
init|=
name|false
parameter_list|)
function_decl|;
comment|//===----------------------------------------------------------------------===//
comment|//  calloc Call Utility Functions.
comment|//
comment|/// extractCallocCall - Returns the corresponding CallInst if the instruction
comment|/// is a calloc call.
specifier|const
name|CallInst
modifier|*
name|extractCallocCall
parameter_list|(
specifier|const
name|Value
modifier|*
name|I
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
parameter_list|)
function_decl|;
specifier|static
specifier|inline
name|CallInst
modifier|*
name|extractCallocCall
parameter_list|(
name|Value
modifier|*
name|I
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
parameter_list|)
block|{
return|return
name|const_cast
operator|<
name|CallInst
operator|*
operator|>
operator|(
name|extractCallocCall
argument_list|(
operator|(
specifier|const
name|Value
operator|*
operator|)
name|I
argument_list|,
name|TLI
argument_list|)
operator|)
return|;
block|}
comment|//===----------------------------------------------------------------------===//
comment|//  free Call Utility Functions.
comment|//
comment|/// isFreeCall - Returns non-null if the value is a call to the builtin free()
specifier|const
name|CallInst
modifier|*
name|isFreeCall
parameter_list|(
specifier|const
name|Value
modifier|*
name|I
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
parameter_list|)
function_decl|;
specifier|static
specifier|inline
name|CallInst
modifier|*
name|isFreeCall
parameter_list|(
name|Value
modifier|*
name|I
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
parameter_list|)
block|{
return|return
name|const_cast
operator|<
name|CallInst
operator|*
operator|>
operator|(
name|isFreeCall
argument_list|(
operator|(
specifier|const
name|Value
operator|*
operator|)
name|I
argument_list|,
name|TLI
argument_list|)
operator|)
return|;
block|}
comment|//===----------------------------------------------------------------------===//
comment|//  Utility functions to compute size of objects.
comment|//
comment|/// \brief Compute the size of the object pointed by Ptr. Returns true and the
comment|/// object size in Size if successful, and false otherwise.
comment|/// If RoundToAlign is true, then Size is rounded up to the aligment of allocas,
comment|/// byval arguments, and global variables.
name|bool
name|getObjectSize
parameter_list|(
specifier|const
name|Value
modifier|*
name|Ptr
parameter_list|,
name|uint64_t
modifier|&
name|Size
parameter_list|,
specifier|const
name|DataLayout
modifier|*
name|TD
parameter_list|,
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
parameter_list|,
name|bool
name|RoundToAlign
init|=
name|false
parameter_list|)
function_decl|;
typedef|typedef
name|std
operator|::
name|pair
operator|<
name|APInt
operator|,
name|APInt
operator|>
name|SizeOffsetType
expr_stmt|;
comment|/// \brief Evaluate the size and offset of an object ponted by a Value*
comment|/// statically. Fails if size or offset are not known at compile time.
name|class
name|ObjectSizeOffsetVisitor
range|:
name|public
name|InstVisitor
operator|<
name|ObjectSizeOffsetVisitor
decl_stmt|,
name|SizeOffsetType
decl|>
block|{
specifier|const
name|DataLayout
modifier|*
name|TD
decl_stmt|;
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
decl_stmt|;
name|bool
name|RoundToAlign
decl_stmt|;
name|unsigned
name|IntTyBits
decl_stmt|;
name|APInt
name|Zero
decl_stmt|;
name|SmallPtrSet
operator|<
name|Instruction
operator|*
operator|,
literal|8
operator|>
name|SeenInsts
expr_stmt|;
name|APInt
name|align
parameter_list|(
name|APInt
name|Size
parameter_list|,
name|uint64_t
name|Align
parameter_list|)
function_decl|;
name|SizeOffsetType
name|unknown
parameter_list|()
block|{
return|return
name|std
operator|::
name|make_pair
argument_list|(
name|APInt
argument_list|()
argument_list|,
name|APInt
argument_list|()
argument_list|)
return|;
block|}
name|public
label|:
name|ObjectSizeOffsetVisitor
argument_list|(
argument|const DataLayout *TD
argument_list|,
argument|const TargetLibraryInfo *TLI
argument_list|,
argument|LLVMContext&Context
argument_list|,
argument|bool RoundToAlign = false
argument_list|)
empty_stmt|;
name|SizeOffsetType
name|compute
parameter_list|(
name|Value
modifier|*
name|V
parameter_list|)
function_decl|;
name|bool
name|knownSize
parameter_list|(
name|SizeOffsetType
modifier|&
name|SizeOffset
parameter_list|)
block|{
return|return
name|SizeOffset
operator|.
name|first
operator|.
name|getBitWidth
argument_list|()
operator|>
literal|1
return|;
block|}
name|bool
name|knownOffset
parameter_list|(
name|SizeOffsetType
modifier|&
name|SizeOffset
parameter_list|)
block|{
return|return
name|SizeOffset
operator|.
name|second
operator|.
name|getBitWidth
argument_list|()
operator|>
literal|1
return|;
block|}
name|bool
name|bothKnown
parameter_list|(
name|SizeOffsetType
modifier|&
name|SizeOffset
parameter_list|)
block|{
return|return
name|knownSize
argument_list|(
name|SizeOffset
argument_list|)
operator|&&
name|knownOffset
argument_list|(
name|SizeOffset
argument_list|)
return|;
block|}
name|SizeOffsetType
name|visitAllocaInst
parameter_list|(
name|AllocaInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|SizeOffsetType
name|visitArgument
parameter_list|(
name|Argument
modifier|&
name|A
parameter_list|)
function_decl|;
name|SizeOffsetType
name|visitCallSite
parameter_list|(
name|CallSite
name|CS
parameter_list|)
function_decl|;
name|SizeOffsetType
name|visitConstantPointerNull
parameter_list|(
name|ConstantPointerNull
modifier|&
parameter_list|)
function_decl|;
name|SizeOffsetType
name|visitExtractElementInst
parameter_list|(
name|ExtractElementInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|SizeOffsetType
name|visitExtractValueInst
parameter_list|(
name|ExtractValueInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|SizeOffsetType
name|visitGEPOperator
parameter_list|(
name|GEPOperator
modifier|&
name|GEP
parameter_list|)
function_decl|;
name|SizeOffsetType
name|visitGlobalVariable
parameter_list|(
name|GlobalVariable
modifier|&
name|GV
parameter_list|)
function_decl|;
name|SizeOffsetType
name|visitIntToPtrInst
parameter_list|(
name|IntToPtrInst
modifier|&
parameter_list|)
function_decl|;
name|SizeOffsetType
name|visitLoadInst
parameter_list|(
name|LoadInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|SizeOffsetType
name|visitPHINode
parameter_list|(
name|PHINode
modifier|&
parameter_list|)
function_decl|;
name|SizeOffsetType
name|visitSelectInst
parameter_list|(
name|SelectInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|SizeOffsetType
name|visitUndefValue
parameter_list|(
name|UndefValue
modifier|&
parameter_list|)
function_decl|;
name|SizeOffsetType
name|visitInstruction
parameter_list|(
name|Instruction
modifier|&
name|I
parameter_list|)
function_decl|;
block|}
empty_stmt|;
typedef|typedef
name|std
operator|::
name|pair
operator|<
name|Value
operator|*
operator|,
name|Value
operator|*
operator|>
name|SizeOffsetEvalType
expr_stmt|;
comment|/// \brief Evaluate the size and offset of an object ponted by a Value*.
comment|/// May create code to compute the result at run-time.
name|class
name|ObjectSizeOffsetEvaluator
range|:
name|public
name|InstVisitor
operator|<
name|ObjectSizeOffsetEvaluator
decl_stmt|,
name|SizeOffsetEvalType
decl|>
block|{
typedef|typedef
name|IRBuilder
operator|<
name|true
operator|,
name|TargetFolder
operator|>
name|BuilderTy
expr_stmt|;
typedef|typedef
name|std
operator|::
name|pair
operator|<
name|WeakVH
operator|,
name|WeakVH
operator|>
name|WeakEvalType
expr_stmt|;
typedef|typedef
name|DenseMap
operator|<
specifier|const
name|Value
operator|*
operator|,
name|WeakEvalType
operator|>
name|CacheMapTy
expr_stmt|;
typedef|typedef
name|SmallPtrSet
operator|<
specifier|const
name|Value
operator|*
operator|,
literal|8
operator|>
name|PtrSetTy
expr_stmt|;
specifier|const
name|DataLayout
modifier|*
name|TD
decl_stmt|;
specifier|const
name|TargetLibraryInfo
modifier|*
name|TLI
decl_stmt|;
name|LLVMContext
modifier|&
name|Context
decl_stmt|;
name|BuilderTy
name|Builder
decl_stmt|;
name|IntegerType
modifier|*
name|IntTy
decl_stmt|;
name|Value
modifier|*
name|Zero
decl_stmt|;
name|CacheMapTy
name|CacheMap
decl_stmt|;
name|PtrSetTy
name|SeenVals
decl_stmt|;
name|SizeOffsetEvalType
name|unknown
parameter_list|()
block|{
return|return
name|std
operator|::
name|make_pair
argument_list|(
operator|(
name|Value
operator|*
operator|)
literal|0
argument_list|,
operator|(
name|Value
operator|*
operator|)
literal|0
argument_list|)
return|;
block|}
name|SizeOffsetEvalType
name|compute_
parameter_list|(
name|Value
modifier|*
name|V
parameter_list|)
function_decl|;
name|public
label|:
name|ObjectSizeOffsetEvaluator
argument_list|(
specifier|const
name|DataLayout
operator|*
name|TD
argument_list|,
specifier|const
name|TargetLibraryInfo
operator|*
name|TLI
argument_list|,
name|LLVMContext
operator|&
name|Context
argument_list|)
expr_stmt|;
name|SizeOffsetEvalType
name|compute
parameter_list|(
name|Value
modifier|*
name|V
parameter_list|)
function_decl|;
name|bool
name|knownSize
parameter_list|(
name|SizeOffsetEvalType
name|SizeOffset
parameter_list|)
block|{
return|return
name|SizeOffset
operator|.
name|first
return|;
block|}
name|bool
name|knownOffset
parameter_list|(
name|SizeOffsetEvalType
name|SizeOffset
parameter_list|)
block|{
return|return
name|SizeOffset
operator|.
name|second
return|;
block|}
name|bool
name|anyKnown
parameter_list|(
name|SizeOffsetEvalType
name|SizeOffset
parameter_list|)
block|{
return|return
name|knownSize
argument_list|(
name|SizeOffset
argument_list|)
operator|||
name|knownOffset
argument_list|(
name|SizeOffset
argument_list|)
return|;
block|}
name|bool
name|bothKnown
parameter_list|(
name|SizeOffsetEvalType
name|SizeOffset
parameter_list|)
block|{
return|return
name|knownSize
argument_list|(
name|SizeOffset
argument_list|)
operator|&&
name|knownOffset
argument_list|(
name|SizeOffset
argument_list|)
return|;
block|}
name|SizeOffsetEvalType
name|visitAllocaInst
parameter_list|(
name|AllocaInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|SizeOffsetEvalType
name|visitCallSite
parameter_list|(
name|CallSite
name|CS
parameter_list|)
function_decl|;
name|SizeOffsetEvalType
name|visitExtractElementInst
parameter_list|(
name|ExtractElementInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|SizeOffsetEvalType
name|visitExtractValueInst
parameter_list|(
name|ExtractValueInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|SizeOffsetEvalType
name|visitGEPOperator
parameter_list|(
name|GEPOperator
modifier|&
name|GEP
parameter_list|)
function_decl|;
name|SizeOffsetEvalType
name|visitIntToPtrInst
parameter_list|(
name|IntToPtrInst
modifier|&
parameter_list|)
function_decl|;
name|SizeOffsetEvalType
name|visitLoadInst
parameter_list|(
name|LoadInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|SizeOffsetEvalType
name|visitPHINode
parameter_list|(
name|PHINode
modifier|&
name|PHI
parameter_list|)
function_decl|;
name|SizeOffsetEvalType
name|visitSelectInst
parameter_list|(
name|SelectInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|SizeOffsetEvalType
name|visitInstruction
parameter_list|(
name|Instruction
modifier|&
name|I
parameter_list|)
function_decl|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// End llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

