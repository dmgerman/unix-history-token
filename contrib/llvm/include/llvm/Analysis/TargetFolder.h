begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//====- TargetFolder.h - Constant folding helper ---------------*- C++ -*-====//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines the TargetFolder class, a helper for IRBuilder.
end_comment

begin_comment
comment|// It provides IRBuilder with a set of methods for creating constants with
end_comment

begin_comment
comment|// target dependent folding, in addition to the same target-independent
end_comment

begin_comment
comment|// folding that the ConstantFolder class provides.  For general constant
end_comment

begin_comment
comment|// creation and folding, use ConstantExpr and the routines in
end_comment

begin_comment
comment|// llvm/Analysis/ConstantFolding.h.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_ANALYSIS_TARGETFOLDER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_ANALYSIS_TARGETFOLDER_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Analysis/ConstantFolding.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Constants.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/InstrTypes.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|DataLayout
decl_stmt|;
comment|/// TargetFolder - Create constants with target dependent folding.
name|class
name|TargetFolder
block|{
specifier|const
name|DataLayout
modifier|&
name|DL
decl_stmt|;
comment|/// Fold - Fold the constant using target specific information.
name|Constant
modifier|*
name|Fold
argument_list|(
name|Constant
operator|*
name|C
argument_list|)
decl|const
block|{
if|if
condition|(
name|ConstantExpr
modifier|*
name|CE
init|=
name|dyn_cast
operator|<
name|ConstantExpr
operator|>
operator|(
name|C
operator|)
condition|)
if|if
condition|(
name|Constant
modifier|*
name|CF
init|=
name|ConstantFoldConstantExpression
argument_list|(
name|CE
argument_list|,
name|DL
argument_list|)
condition|)
return|return
name|CF
return|;
return|return
name|C
return|;
block|}
name|public
label|:
name|explicit
name|TargetFolder
argument_list|(
specifier|const
name|DataLayout
operator|&
name|DL
argument_list|)
operator|:
name|DL
argument_list|(
argument|DL
argument_list|)
block|{}
comment|//===--------------------------------------------------------------------===//
comment|// Binary Operators
comment|//===--------------------------------------------------------------------===//
name|Constant
operator|*
name|CreateAdd
argument_list|(
argument|Constant *LHS
argument_list|,
argument|Constant *RHS
argument_list|,
argument|bool HasNUW = false
argument_list|,
argument|bool HasNSW = false
argument_list|)
specifier|const
block|{
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getAdd
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|,
name|HasNUW
argument_list|,
name|HasNSW
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateFAdd
argument_list|(
name|Constant
operator|*
name|LHS
argument_list|,
name|Constant
operator|*
name|RHS
argument_list|)
decl|const
block|{
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getFAdd
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateSub
argument_list|(
name|Constant
operator|*
name|LHS
argument_list|,
name|Constant
operator|*
name|RHS
argument_list|,
name|bool
name|HasNUW
operator|=
name|false
argument_list|,
name|bool
name|HasNSW
operator|=
name|false
argument_list|)
decl|const
block|{
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getSub
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|,
name|HasNUW
argument_list|,
name|HasNSW
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateFSub
argument_list|(
name|Constant
operator|*
name|LHS
argument_list|,
name|Constant
operator|*
name|RHS
argument_list|)
decl|const
block|{
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getFSub
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateMul
argument_list|(
name|Constant
operator|*
name|LHS
argument_list|,
name|Constant
operator|*
name|RHS
argument_list|,
name|bool
name|HasNUW
operator|=
name|false
argument_list|,
name|bool
name|HasNSW
operator|=
name|false
argument_list|)
decl|const
block|{
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getMul
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|,
name|HasNUW
argument_list|,
name|HasNSW
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateFMul
argument_list|(
name|Constant
operator|*
name|LHS
argument_list|,
name|Constant
operator|*
name|RHS
argument_list|)
decl|const
block|{
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getFMul
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateUDiv
argument_list|(
name|Constant
operator|*
name|LHS
argument_list|,
name|Constant
operator|*
name|RHS
argument_list|,
name|bool
name|isExact
operator|=
name|false
argument_list|)
decl|const
block|{
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getUDiv
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|,
name|isExact
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateSDiv
argument_list|(
name|Constant
operator|*
name|LHS
argument_list|,
name|Constant
operator|*
name|RHS
argument_list|,
name|bool
name|isExact
operator|=
name|false
argument_list|)
decl|const
block|{
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getSDiv
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|,
name|isExact
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateFDiv
argument_list|(
name|Constant
operator|*
name|LHS
argument_list|,
name|Constant
operator|*
name|RHS
argument_list|)
decl|const
block|{
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getFDiv
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateURem
argument_list|(
name|Constant
operator|*
name|LHS
argument_list|,
name|Constant
operator|*
name|RHS
argument_list|)
decl|const
block|{
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getURem
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateSRem
argument_list|(
name|Constant
operator|*
name|LHS
argument_list|,
name|Constant
operator|*
name|RHS
argument_list|)
decl|const
block|{
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getSRem
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateFRem
argument_list|(
name|Constant
operator|*
name|LHS
argument_list|,
name|Constant
operator|*
name|RHS
argument_list|)
decl|const
block|{
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getFRem
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateShl
argument_list|(
name|Constant
operator|*
name|LHS
argument_list|,
name|Constant
operator|*
name|RHS
argument_list|,
name|bool
name|HasNUW
operator|=
name|false
argument_list|,
name|bool
name|HasNSW
operator|=
name|false
argument_list|)
decl|const
block|{
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getShl
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|,
name|HasNUW
argument_list|,
name|HasNSW
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateLShr
argument_list|(
name|Constant
operator|*
name|LHS
argument_list|,
name|Constant
operator|*
name|RHS
argument_list|,
name|bool
name|isExact
operator|=
name|false
argument_list|)
decl|const
block|{
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getLShr
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|,
name|isExact
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateAShr
argument_list|(
name|Constant
operator|*
name|LHS
argument_list|,
name|Constant
operator|*
name|RHS
argument_list|,
name|bool
name|isExact
operator|=
name|false
argument_list|)
decl|const
block|{
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getAShr
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|,
name|isExact
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateAnd
argument_list|(
name|Constant
operator|*
name|LHS
argument_list|,
name|Constant
operator|*
name|RHS
argument_list|)
decl|const
block|{
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getAnd
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateOr
argument_list|(
name|Constant
operator|*
name|LHS
argument_list|,
name|Constant
operator|*
name|RHS
argument_list|)
decl|const
block|{
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getOr
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateXor
argument_list|(
name|Constant
operator|*
name|LHS
argument_list|,
name|Constant
operator|*
name|RHS
argument_list|)
decl|const
block|{
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getXor
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateBinOp
argument_list|(
name|Instruction
operator|::
name|BinaryOps
name|Opc
argument_list|,
name|Constant
operator|*
name|LHS
argument_list|,
name|Constant
operator|*
name|RHS
argument_list|)
decl|const
block|{
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|get
argument_list|(
name|Opc
argument_list|,
name|LHS
argument_list|,
name|RHS
argument_list|)
argument_list|)
return|;
block|}
comment|//===--------------------------------------------------------------------===//
comment|// Unary Operators
comment|//===--------------------------------------------------------------------===//
name|Constant
modifier|*
name|CreateNeg
argument_list|(
name|Constant
operator|*
name|C
argument_list|,
name|bool
name|HasNUW
operator|=
name|false
argument_list|,
name|bool
name|HasNSW
operator|=
name|false
argument_list|)
decl|const
block|{
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getNeg
argument_list|(
name|C
argument_list|,
name|HasNUW
argument_list|,
name|HasNSW
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateFNeg
argument_list|(
name|Constant
operator|*
name|C
argument_list|)
decl|const
block|{
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getFNeg
argument_list|(
name|C
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateNot
argument_list|(
name|Constant
operator|*
name|C
argument_list|)
decl|const
block|{
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getNot
argument_list|(
name|C
argument_list|)
argument_list|)
return|;
block|}
comment|//===--------------------------------------------------------------------===//
comment|// Memory Instructions
comment|//===--------------------------------------------------------------------===//
name|Constant
modifier|*
name|CreateGetElementPtr
argument_list|(
name|Type
operator|*
name|Ty
argument_list|,
name|Constant
operator|*
name|C
argument_list|,
name|ArrayRef
operator|<
name|Constant
operator|*
operator|>
name|IdxList
argument_list|)
decl|const
block|{
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getGetElementPtr
argument_list|(
name|Ty
argument_list|,
name|C
argument_list|,
name|IdxList
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateGetElementPtr
argument_list|(
name|Type
operator|*
name|Ty
argument_list|,
name|Constant
operator|*
name|C
argument_list|,
name|Constant
operator|*
name|Idx
argument_list|)
decl|const
block|{
comment|// This form of the function only exists to avoid ambiguous overload
comment|// warnings about whether to convert Idx to ArrayRef<Constant *> or
comment|// ArrayRef<Value *>.
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getGetElementPtr
argument_list|(
name|Ty
argument_list|,
name|C
argument_list|,
name|Idx
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateGetElementPtr
argument_list|(
name|Type
operator|*
name|Ty
argument_list|,
name|Constant
operator|*
name|C
argument_list|,
name|ArrayRef
operator|<
name|Value
operator|*
operator|>
name|IdxList
argument_list|)
decl|const
block|{
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getGetElementPtr
argument_list|(
name|Ty
argument_list|,
name|C
argument_list|,
name|IdxList
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateInBoundsGetElementPtr
argument_list|(
name|Type
operator|*
name|Ty
argument_list|,
name|Constant
operator|*
name|C
argument_list|,
name|ArrayRef
operator|<
name|Constant
operator|*
operator|>
name|IdxList
argument_list|)
decl|const
block|{
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getInBoundsGetElementPtr
argument_list|(
name|Ty
argument_list|,
name|C
argument_list|,
name|IdxList
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateInBoundsGetElementPtr
argument_list|(
name|Type
operator|*
name|Ty
argument_list|,
name|Constant
operator|*
name|C
argument_list|,
name|Constant
operator|*
name|Idx
argument_list|)
decl|const
block|{
comment|// This form of the function only exists to avoid ambiguous overload
comment|// warnings about whether to convert Idx to ArrayRef<Constant *> or
comment|// ArrayRef<Value *>.
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getInBoundsGetElementPtr
argument_list|(
name|Ty
argument_list|,
name|C
argument_list|,
name|Idx
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateInBoundsGetElementPtr
argument_list|(
name|Type
operator|*
name|Ty
argument_list|,
name|Constant
operator|*
name|C
argument_list|,
name|ArrayRef
operator|<
name|Value
operator|*
operator|>
name|IdxList
argument_list|)
decl|const
block|{
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getInBoundsGetElementPtr
argument_list|(
name|Ty
argument_list|,
name|C
argument_list|,
name|IdxList
argument_list|)
argument_list|)
return|;
block|}
comment|//===--------------------------------------------------------------------===//
comment|// Cast/Conversion Operators
comment|//===--------------------------------------------------------------------===//
name|Constant
modifier|*
name|CreateCast
argument_list|(
name|Instruction
operator|::
name|CastOps
name|Op
argument_list|,
name|Constant
operator|*
name|C
argument_list|,
name|Type
operator|*
name|DestTy
argument_list|)
decl|const
block|{
if|if
condition|(
name|C
operator|->
name|getType
argument_list|()
operator|==
name|DestTy
condition|)
return|return
name|C
return|;
comment|// avoid calling Fold
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getCast
argument_list|(
name|Op
argument_list|,
name|C
argument_list|,
name|DestTy
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateIntCast
argument_list|(
name|Constant
operator|*
name|C
argument_list|,
name|Type
operator|*
name|DestTy
argument_list|,
name|bool
name|isSigned
argument_list|)
decl|const
block|{
if|if
condition|(
name|C
operator|->
name|getType
argument_list|()
operator|==
name|DestTy
condition|)
return|return
name|C
return|;
comment|// avoid calling Fold
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getIntegerCast
argument_list|(
name|C
argument_list|,
name|DestTy
argument_list|,
name|isSigned
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreatePointerCast
argument_list|(
name|Constant
operator|*
name|C
argument_list|,
name|Type
operator|*
name|DestTy
argument_list|)
decl|const
block|{
if|if
condition|(
name|C
operator|->
name|getType
argument_list|()
operator|==
name|DestTy
condition|)
return|return
name|C
return|;
comment|// avoid calling Fold
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getPointerCast
argument_list|(
name|C
argument_list|,
name|DestTy
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateFPCast
argument_list|(
name|Constant
operator|*
name|C
argument_list|,
name|Type
operator|*
name|DestTy
argument_list|)
decl|const
block|{
if|if
condition|(
name|C
operator|->
name|getType
argument_list|()
operator|==
name|DestTy
condition|)
return|return
name|C
return|;
comment|// avoid calling Fold
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getFPCast
argument_list|(
name|C
argument_list|,
name|DestTy
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateBitCast
argument_list|(
name|Constant
operator|*
name|C
argument_list|,
name|Type
operator|*
name|DestTy
argument_list|)
decl|const
block|{
return|return
name|CreateCast
argument_list|(
name|Instruction
operator|::
name|BitCast
argument_list|,
name|C
argument_list|,
name|DestTy
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateIntToPtr
argument_list|(
name|Constant
operator|*
name|C
argument_list|,
name|Type
operator|*
name|DestTy
argument_list|)
decl|const
block|{
return|return
name|CreateCast
argument_list|(
name|Instruction
operator|::
name|IntToPtr
argument_list|,
name|C
argument_list|,
name|DestTy
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreatePtrToInt
argument_list|(
name|Constant
operator|*
name|C
argument_list|,
name|Type
operator|*
name|DestTy
argument_list|)
decl|const
block|{
return|return
name|CreateCast
argument_list|(
name|Instruction
operator|::
name|PtrToInt
argument_list|,
name|C
argument_list|,
name|DestTy
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateZExtOrBitCast
argument_list|(
name|Constant
operator|*
name|C
argument_list|,
name|Type
operator|*
name|DestTy
argument_list|)
decl|const
block|{
if|if
condition|(
name|C
operator|->
name|getType
argument_list|()
operator|==
name|DestTy
condition|)
return|return
name|C
return|;
comment|// avoid calling Fold
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getZExtOrBitCast
argument_list|(
name|C
argument_list|,
name|DestTy
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateSExtOrBitCast
argument_list|(
name|Constant
operator|*
name|C
argument_list|,
name|Type
operator|*
name|DestTy
argument_list|)
decl|const
block|{
if|if
condition|(
name|C
operator|->
name|getType
argument_list|()
operator|==
name|DestTy
condition|)
return|return
name|C
return|;
comment|// avoid calling Fold
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getSExtOrBitCast
argument_list|(
name|C
argument_list|,
name|DestTy
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateTruncOrBitCast
argument_list|(
name|Constant
operator|*
name|C
argument_list|,
name|Type
operator|*
name|DestTy
argument_list|)
decl|const
block|{
if|if
condition|(
name|C
operator|->
name|getType
argument_list|()
operator|==
name|DestTy
condition|)
return|return
name|C
return|;
comment|// avoid calling Fold
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getTruncOrBitCast
argument_list|(
name|C
argument_list|,
name|DestTy
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreatePointerBitCastOrAddrSpaceCast
argument_list|(
name|Constant
operator|*
name|C
argument_list|,
name|Type
operator|*
name|DestTy
argument_list|)
decl|const
block|{
if|if
condition|(
name|C
operator|->
name|getType
argument_list|()
operator|==
name|DestTy
condition|)
return|return
name|C
return|;
comment|// avoid calling Fold
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getPointerBitCastOrAddrSpaceCast
argument_list|(
name|C
argument_list|,
name|DestTy
argument_list|)
argument_list|)
return|;
block|}
comment|//===--------------------------------------------------------------------===//
comment|// Compare Instructions
comment|//===--------------------------------------------------------------------===//
name|Constant
modifier|*
name|CreateICmp
argument_list|(
name|CmpInst
operator|::
name|Predicate
name|P
argument_list|,
name|Constant
operator|*
name|LHS
argument_list|,
name|Constant
operator|*
name|RHS
argument_list|)
decl|const
block|{
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getCompare
argument_list|(
name|P
argument_list|,
name|LHS
argument_list|,
name|RHS
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateFCmp
argument_list|(
name|CmpInst
operator|::
name|Predicate
name|P
argument_list|,
name|Constant
operator|*
name|LHS
argument_list|,
name|Constant
operator|*
name|RHS
argument_list|)
decl|const
block|{
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getCompare
argument_list|(
name|P
argument_list|,
name|LHS
argument_list|,
name|RHS
argument_list|)
argument_list|)
return|;
block|}
comment|//===--------------------------------------------------------------------===//
comment|// Other Instructions
comment|//===--------------------------------------------------------------------===//
name|Constant
modifier|*
name|CreateSelect
argument_list|(
name|Constant
operator|*
name|C
argument_list|,
name|Constant
operator|*
name|True
argument_list|,
name|Constant
operator|*
name|False
argument_list|)
decl|const
block|{
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getSelect
argument_list|(
name|C
argument_list|,
name|True
argument_list|,
name|False
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateExtractElement
argument_list|(
name|Constant
operator|*
name|Vec
argument_list|,
name|Constant
operator|*
name|Idx
argument_list|)
decl|const
block|{
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getExtractElement
argument_list|(
name|Vec
argument_list|,
name|Idx
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateInsertElement
argument_list|(
name|Constant
operator|*
name|Vec
argument_list|,
name|Constant
operator|*
name|NewElt
argument_list|,
name|Constant
operator|*
name|Idx
argument_list|)
decl|const
block|{
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getInsertElement
argument_list|(
name|Vec
argument_list|,
name|NewElt
argument_list|,
name|Idx
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateShuffleVector
argument_list|(
name|Constant
operator|*
name|V1
argument_list|,
name|Constant
operator|*
name|V2
argument_list|,
name|Constant
operator|*
name|Mask
argument_list|)
decl|const
block|{
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getShuffleVector
argument_list|(
name|V1
argument_list|,
name|V2
argument_list|,
name|Mask
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateExtractValue
argument_list|(
name|Constant
operator|*
name|Agg
argument_list|,
name|ArrayRef
operator|<
name|unsigned
operator|>
name|IdxList
argument_list|)
decl|const
block|{
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getExtractValue
argument_list|(
name|Agg
argument_list|,
name|IdxList
argument_list|)
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|CreateInsertValue
argument_list|(
name|Constant
operator|*
name|Agg
argument_list|,
name|Constant
operator|*
name|Val
argument_list|,
name|ArrayRef
operator|<
name|unsigned
operator|>
name|IdxList
argument_list|)
decl|const
block|{
return|return
name|Fold
argument_list|(
name|ConstantExpr
operator|::
name|getInsertValue
argument_list|(
name|Agg
argument_list|,
name|Val
argument_list|,
name|IdxList
argument_list|)
argument_list|)
return|;
block|}
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

