begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- BasicAliasAnalysis.h - Stateless, local Alias Analysis ---*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|/// This is the interface for LLVM's primary stateless and local alias analysis.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_ANALYSIS_BASICALIASANALYSIS_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_ANALYSIS_BASICALIASANALYSIS_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/SmallPtrSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Analysis/AliasAnalysis.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Analysis/AssumptionCache.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Analysis/TargetLibraryInfo.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Function.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/GetElementPtrTypeIterator.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Instruction.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/LLVMContext.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Module.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/PassManager.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ErrorHandling.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|AssumptionCache
decl_stmt|;
name|class
name|DominatorTree
decl_stmt|;
name|class
name|LoopInfo
decl_stmt|;
comment|/// This is the AA result object for the basic, local, and stateless alias
comment|/// analysis. It implements the AA query interface in an entirely stateless
comment|/// manner. As one consequence, it is never invalidated due to IR changes.
comment|/// While it does retain some storage, that is used as an optimization and not
comment|/// to preserve information from query to query. However it does retain handles
comment|/// to various other analyses and must be recomputed when those analyses are.
name|class
name|BasicAAResult
range|:
name|public
name|AAResultBase
operator|<
name|BasicAAResult
operator|>
block|{
name|friend
name|AAResultBase
operator|<
name|BasicAAResult
operator|>
block|;
specifier|const
name|DataLayout
operator|&
name|DL
block|;
specifier|const
name|TargetLibraryInfo
operator|&
name|TLI
block|;
name|AssumptionCache
operator|&
name|AC
block|;
name|DominatorTree
operator|*
name|DT
block|;
name|LoopInfo
operator|*
name|LI
block|;
name|public
operator|:
name|BasicAAResult
argument_list|(
specifier|const
name|DataLayout
operator|&
name|DL
argument_list|,
specifier|const
name|TargetLibraryInfo
operator|&
name|TLI
argument_list|,
name|AssumptionCache
operator|&
name|AC
argument_list|,
name|DominatorTree
operator|*
name|DT
operator|=
name|nullptr
argument_list|,
name|LoopInfo
operator|*
name|LI
operator|=
name|nullptr
argument_list|)
operator|:
name|AAResultBase
argument_list|()
block|,
name|DL
argument_list|(
name|DL
argument_list|)
block|,
name|TLI
argument_list|(
name|TLI
argument_list|)
block|,
name|AC
argument_list|(
name|AC
argument_list|)
block|,
name|DT
argument_list|(
name|DT
argument_list|)
block|,
name|LI
argument_list|(
argument|LI
argument_list|)
block|{}
name|BasicAAResult
argument_list|(
specifier|const
name|BasicAAResult
operator|&
name|Arg
argument_list|)
operator|:
name|AAResultBase
argument_list|(
name|Arg
argument_list|)
block|,
name|DL
argument_list|(
name|Arg
operator|.
name|DL
argument_list|)
block|,
name|TLI
argument_list|(
name|Arg
operator|.
name|TLI
argument_list|)
block|,
name|AC
argument_list|(
name|Arg
operator|.
name|AC
argument_list|)
block|,
name|DT
argument_list|(
name|Arg
operator|.
name|DT
argument_list|)
block|,
name|LI
argument_list|(
argument|Arg.LI
argument_list|)
block|{}
name|BasicAAResult
argument_list|(
name|BasicAAResult
operator|&&
name|Arg
argument_list|)
operator|:
name|AAResultBase
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|Arg
argument_list|)
argument_list|)
block|,
name|DL
argument_list|(
name|Arg
operator|.
name|DL
argument_list|)
block|,
name|TLI
argument_list|(
name|Arg
operator|.
name|TLI
argument_list|)
block|,
name|AC
argument_list|(
name|Arg
operator|.
name|AC
argument_list|)
block|,
name|DT
argument_list|(
name|Arg
operator|.
name|DT
argument_list|)
block|,
name|LI
argument_list|(
argument|Arg.LI
argument_list|)
block|{}
comment|/// Handle invalidation events in the new pass manager.
name|bool
name|invalidate
argument_list|(
name|Function
operator|&
name|F
argument_list|,
specifier|const
name|PreservedAnalyses
operator|&
name|PA
argument_list|,
name|FunctionAnalysisManager
operator|::
name|Invalidator
operator|&
name|Inv
argument_list|)
block|;
name|AliasResult
name|alias
argument_list|(
specifier|const
name|MemoryLocation
operator|&
name|LocA
argument_list|,
specifier|const
name|MemoryLocation
operator|&
name|LocB
argument_list|)
block|;
name|ModRefInfo
name|getModRefInfo
argument_list|(
argument|ImmutableCallSite CS
argument_list|,
argument|const MemoryLocation&Loc
argument_list|)
block|;
name|ModRefInfo
name|getModRefInfo
argument_list|(
argument|ImmutableCallSite CS1
argument_list|,
argument|ImmutableCallSite CS2
argument_list|)
block|;
comment|/// Chases pointers until we find a (constant global) or not.
name|bool
name|pointsToConstantMemory
argument_list|(
argument|const MemoryLocation&Loc
argument_list|,
argument|bool OrLocal
argument_list|)
block|;
comment|/// Get the location associated with a pointer argument of a callsite.
name|ModRefInfo
name|getArgModRefInfo
argument_list|(
argument|ImmutableCallSite CS
argument_list|,
argument|unsigned ArgIdx
argument_list|)
block|;
comment|/// Returns the behavior when calling the given call site.
name|FunctionModRefBehavior
name|getModRefBehavior
argument_list|(
argument|ImmutableCallSite CS
argument_list|)
block|;
comment|/// Returns the behavior when calling the given function. For use when the
comment|/// call site is not known.
name|FunctionModRefBehavior
name|getModRefBehavior
argument_list|(
specifier|const
name|Function
operator|*
name|F
argument_list|)
block|;
name|private
operator|:
comment|// A linear transformation of a Value; this class represents ZExt(SExt(V,
comment|// SExtBits), ZExtBits) * Scale + Offset.
expr|struct
name|VariableGEPIndex
block|{
comment|// An opaque Value - we can't decompose this further.
specifier|const
name|Value
operator|*
name|V
block|;
comment|// We need to track what extensions we've done as we consider the same Value
comment|// with different extensions as different variables in a GEP's linear
comment|// expression;
comment|// e.g.: if V == -1, then sext(x) != zext(x).
name|unsigned
name|ZExtBits
block|;
name|unsigned
name|SExtBits
block|;
name|int64_t
name|Scale
block|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|VariableGEPIndex
operator|&
name|Other
operator|)
specifier|const
block|{
return|return
name|V
operator|==
name|Other
operator|.
name|V
operator|&&
name|ZExtBits
operator|==
name|Other
operator|.
name|ZExtBits
operator|&&
name|SExtBits
operator|==
name|Other
operator|.
name|SExtBits
operator|&&
name|Scale
operator|==
name|Other
operator|.
name|Scale
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|VariableGEPIndex
operator|&
name|Other
operator|)
specifier|const
block|{
return|return
operator|!
name|operator
operator|==
operator|(
name|Other
operator|)
return|;
block|}
expr|}
block|;
comment|// Represents the internal structure of a GEP, decomposed into a base pointer,
comment|// constant offsets, and variable scaled indices.
block|struct
name|DecomposedGEP
block|{
comment|// Base pointer of the GEP
specifier|const
name|Value
operator|*
name|Base
block|;
comment|// Total constant offset w.r.t the base from indexing into structs
name|int64_t
name|StructOffset
block|;
comment|// Total constant offset w.r.t the base from indexing through
comment|// pointers/arrays/vectors
name|int64_t
name|OtherOffset
block|;
comment|// Scaled variable (non-constant) indices.
name|SmallVector
operator|<
name|VariableGEPIndex
block|,
literal|4
operator|>
name|VarIndices
block|;   }
block|;
comment|/// Track alias queries to guard against recursion.
typedef|typedef
name|std
operator|::
name|pair
operator|<
name|MemoryLocation
operator|,
name|MemoryLocation
operator|>
name|LocPair
expr_stmt|;
typedef|typedef
name|SmallDenseMap
operator|<
name|LocPair
operator|,
name|AliasResult
operator|,
literal|8
operator|>
name|AliasCacheTy
expr_stmt|;
name|AliasCacheTy
name|AliasCache
decl_stmt|;
comment|/// Tracks phi nodes we have visited.
comment|///
comment|/// When interpret "Value" pointer equality as value equality we need to make
comment|/// sure that the "Value" is not part of a cycle. Otherwise, two uses could
comment|/// come from different "iterations" of a cycle and see different values for
comment|/// the same "Value" pointer.
comment|///
comment|/// The following example shows the problem:
comment|///   %p = phi(%alloca1, %addr2)
comment|///   %l = load %ptr
comment|///   %addr1 = gep, %alloca2, 0, %l
comment|///   %addr2 = gep  %alloca2, 0, (%l + 1)
comment|///      alias(%p, %addr1) -> MayAlias !
comment|///   store %l, ...
name|SmallPtrSet
operator|<
specifier|const
name|BasicBlock
operator|*
operator|,
literal|8
operator|>
name|VisitedPhiBBs
expr_stmt|;
comment|/// Tracks instructions visited by pointsToConstantMemory.
name|SmallPtrSet
operator|<
specifier|const
name|Value
operator|*
operator|,
literal|16
operator|>
name|Visited
expr_stmt|;
specifier|static
specifier|const
name|Value
modifier|*
name|GetLinearExpression
parameter_list|(
specifier|const
name|Value
modifier|*
name|V
parameter_list|,
name|APInt
modifier|&
name|Scale
parameter_list|,
name|APInt
modifier|&
name|Offset
parameter_list|,
name|unsigned
modifier|&
name|ZExtBits
parameter_list|,
name|unsigned
modifier|&
name|SExtBits
parameter_list|,
specifier|const
name|DataLayout
modifier|&
name|DL
parameter_list|,
name|unsigned
name|Depth
parameter_list|,
name|AssumptionCache
modifier|*
name|AC
parameter_list|,
name|DominatorTree
modifier|*
name|DT
parameter_list|,
name|bool
modifier|&
name|NSW
parameter_list|,
name|bool
modifier|&
name|NUW
parameter_list|)
function_decl|;
specifier|static
name|bool
name|DecomposeGEPExpression
parameter_list|(
specifier|const
name|Value
modifier|*
name|V
parameter_list|,
name|DecomposedGEP
modifier|&
name|Decomposed
parameter_list|,
specifier|const
name|DataLayout
modifier|&
name|DL
parameter_list|,
name|AssumptionCache
modifier|*
name|AC
parameter_list|,
name|DominatorTree
modifier|*
name|DT
parameter_list|)
function_decl|;
specifier|static
name|bool
name|isGEPBaseAtNegativeOffset
parameter_list|(
specifier|const
name|GEPOperator
modifier|*
name|GEPOp
parameter_list|,
specifier|const
name|DecomposedGEP
modifier|&
name|DecompGEP
parameter_list|,
specifier|const
name|DecomposedGEP
modifier|&
name|DecompObject
parameter_list|,
name|uint64_t
name|ObjectAccessSize
parameter_list|)
function_decl|;
comment|/// \brief A Heuristic for aliasGEP that searches for a constant offset
comment|/// between the variables.
comment|///
comment|/// GetLinearExpression has some limitations, as generally zext(%x + 1)
comment|/// != zext(%x) + zext(1) if the arithmetic overflows. GetLinearExpression
comment|/// will therefore conservatively refuse to decompose these expressions.
comment|/// However, we know that, for all %x, zext(%x) != zext(%x + 1), even if
comment|/// the addition overflows.
name|bool
name|constantOffsetHeuristic
argument_list|(
specifier|const
name|SmallVectorImpl
operator|<
name|VariableGEPIndex
operator|>
operator|&
name|VarIndices
argument_list|,
name|uint64_t
name|V1Size
argument_list|,
name|uint64_t
name|V2Size
argument_list|,
name|int64_t
name|BaseOffset
argument_list|,
name|AssumptionCache
operator|*
name|AC
argument_list|,
name|DominatorTree
operator|*
name|DT
argument_list|)
decl_stmt|;
name|bool
name|isValueEqualInPotentialCycles
parameter_list|(
specifier|const
name|Value
modifier|*
name|V1
parameter_list|,
specifier|const
name|Value
modifier|*
name|V2
parameter_list|)
function_decl|;
name|void
name|GetIndexDifference
argument_list|(
name|SmallVectorImpl
operator|<
name|VariableGEPIndex
operator|>
operator|&
name|Dest
argument_list|,
specifier|const
name|SmallVectorImpl
operator|<
name|VariableGEPIndex
operator|>
operator|&
name|Src
argument_list|)
decl_stmt|;
name|AliasResult
name|aliasGEP
parameter_list|(
specifier|const
name|GEPOperator
modifier|*
name|V1
parameter_list|,
name|uint64_t
name|V1Size
parameter_list|,
specifier|const
name|AAMDNodes
modifier|&
name|V1AAInfo
parameter_list|,
specifier|const
name|Value
modifier|*
name|V2
parameter_list|,
name|uint64_t
name|V2Size
parameter_list|,
specifier|const
name|AAMDNodes
modifier|&
name|V2AAInfo
parameter_list|,
specifier|const
name|Value
modifier|*
name|UnderlyingV1
parameter_list|,
specifier|const
name|Value
modifier|*
name|UnderlyingV2
parameter_list|)
function_decl|;
name|AliasResult
name|aliasPHI
parameter_list|(
specifier|const
name|PHINode
modifier|*
name|PN
parameter_list|,
name|uint64_t
name|PNSize
parameter_list|,
specifier|const
name|AAMDNodes
modifier|&
name|PNAAInfo
parameter_list|,
specifier|const
name|Value
modifier|*
name|V2
parameter_list|,
name|uint64_t
name|V2Size
parameter_list|,
specifier|const
name|AAMDNodes
modifier|&
name|V2AAInfo
parameter_list|,
specifier|const
name|Value
modifier|*
name|UnderV2
parameter_list|)
function_decl|;
name|AliasResult
name|aliasSelect
parameter_list|(
specifier|const
name|SelectInst
modifier|*
name|SI
parameter_list|,
name|uint64_t
name|SISize
parameter_list|,
specifier|const
name|AAMDNodes
modifier|&
name|SIAAInfo
parameter_list|,
specifier|const
name|Value
modifier|*
name|V2
parameter_list|,
name|uint64_t
name|V2Size
parameter_list|,
specifier|const
name|AAMDNodes
modifier|&
name|V2AAInfo
parameter_list|,
specifier|const
name|Value
modifier|*
name|UnderV2
parameter_list|)
function_decl|;
name|AliasResult
name|aliasCheck
parameter_list|(
specifier|const
name|Value
modifier|*
name|V1
parameter_list|,
name|uint64_t
name|V1Size
parameter_list|,
name|AAMDNodes
name|V1AATag
parameter_list|,
specifier|const
name|Value
modifier|*
name|V2
parameter_list|,
name|uint64_t
name|V2Size
parameter_list|,
name|AAMDNodes
name|V2AATag
parameter_list|,
specifier|const
name|Value
modifier|*
name|O1
init|=
name|nullptr
parameter_list|,
specifier|const
name|Value
modifier|*
name|O2
init|=
name|nullptr
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/// Analysis pass providing a never-invalidated alias analysis result.
end_comment

begin_decl_stmt
name|class
name|BasicAA
range|:
name|public
name|AnalysisInfoMixin
operator|<
name|BasicAA
operator|>
block|{
name|friend
name|AnalysisInfoMixin
operator|<
name|BasicAA
operator|>
block|;
specifier|static
name|AnalysisKey
name|Key
block|;
name|public
operator|:
typedef|typedef
name|BasicAAResult
name|Result
typedef|;
name|BasicAAResult
name|run
argument_list|(
name|Function
operator|&
name|F
argument_list|,
name|FunctionAnalysisManager
operator|&
name|AM
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
unit|};
comment|/// Legacy wrapper pass to provide the BasicAAResult object.
end_comment

begin_decl_stmt
name|class
name|BasicAAWrapperPass
range|:
name|public
name|FunctionPass
block|{
name|std
operator|::
name|unique_ptr
operator|<
name|BasicAAResult
operator|>
name|Result
block|;
name|virtual
name|void
name|anchor
argument_list|()
block|;
name|public
operator|:
specifier|static
name|char
name|ID
block|;
name|BasicAAWrapperPass
argument_list|()
block|;
name|BasicAAResult
operator|&
name|getResult
argument_list|()
block|{
return|return
operator|*
name|Result
return|;
block|}
specifier|const
name|BasicAAResult
operator|&
name|getResult
argument_list|()
specifier|const
block|{
return|return
operator|*
name|Result
return|;
block|}
name|bool
name|runOnFunction
argument_list|(
argument|Function&F
argument_list|)
name|override
block|;
name|void
name|getAnalysisUsage
argument_list|(
argument|AnalysisUsage&AU
argument_list|)
specifier|const
name|override
block|; }
decl_stmt|;
end_decl_stmt

begin_function_decl
name|FunctionPass
modifier|*
name|createBasicAAWrapperPass
parameter_list|()
function_decl|;
end_function_decl

begin_comment
comment|/// A helper for the legacy pass manager to create a \c BasicAAResult object
end_comment

begin_comment
comment|/// populated to the best of our ability for a particular function when inside
end_comment

begin_comment
comment|/// of a \c ModulePass or a \c CallGraphSCCPass.
end_comment

begin_function_decl
name|BasicAAResult
name|createLegacyPMBasicAAResult
parameter_list|(
name|Pass
modifier|&
name|P
parameter_list|,
name|Function
modifier|&
name|F
parameter_list|)
function_decl|;
end_function_decl

begin_endif
unit|}
endif|#
directive|endif
end_endif

end_unit

