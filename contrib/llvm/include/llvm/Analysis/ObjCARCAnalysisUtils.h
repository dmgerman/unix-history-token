begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- ObjCARCAnalysisUtils.h - ObjC ARC Analysis Utilities -----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|/// This file defines common analysis utilities used by the ObjC ARC Optimizer.
end_comment

begin_comment
comment|/// ARC stands for Automatic Reference Counting and is a system for managing
end_comment

begin_comment
comment|/// reference counts for objects in Objective C.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// WARNING: This file knows about certain library functions. It recognizes them
end_comment

begin_comment
comment|/// by name, and hardwires knowledge of their semantics.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// WARNING: This file knows about how certain Objective-C library functions are
end_comment

begin_comment
comment|/// used. Naive LLVM IR transformations which would otherwise be
end_comment

begin_comment
comment|/// behavior-preserving may break these assumptions.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_ANALYSIS_OBJCARCANALYSISUTILS_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_ANALYSIS_OBJCARCANALYSISUTILS_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/Optional.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringSwitch.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Analysis/AliasAnalysis.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Analysis/ObjCARCInstKind.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Analysis/Passes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Analysis/ValueTracking.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/CallSite.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Constants.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/InstIterator.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/LLVMContext.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Module.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Pass.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|raw_ostream
decl_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|objcarc
block|{
comment|/// \brief A handy option to enable/disable all ARC Optimizations.
specifier|extern
name|bool
name|EnableARCOpts
decl_stmt|;
comment|/// \brief Test if the given module looks interesting to run ARC optimization
comment|/// on.
specifier|inline
name|bool
name|ModuleHasARC
parameter_list|(
specifier|const
name|Module
modifier|&
name|M
parameter_list|)
block|{
return|return
name|M
operator|.
name|getNamedValue
argument_list|(
literal|"objc_retain"
argument_list|)
operator|||
name|M
operator|.
name|getNamedValue
argument_list|(
literal|"objc_release"
argument_list|)
operator|||
name|M
operator|.
name|getNamedValue
argument_list|(
literal|"objc_autorelease"
argument_list|)
operator|||
name|M
operator|.
name|getNamedValue
argument_list|(
literal|"objc_retainAutoreleasedReturnValue"
argument_list|)
operator|||
name|M
operator|.
name|getNamedValue
argument_list|(
literal|"objc_unsafeClaimAutoreleasedReturnValue"
argument_list|)
operator|||
name|M
operator|.
name|getNamedValue
argument_list|(
literal|"objc_retainBlock"
argument_list|)
operator|||
name|M
operator|.
name|getNamedValue
argument_list|(
literal|"objc_autoreleaseReturnValue"
argument_list|)
operator|||
name|M
operator|.
name|getNamedValue
argument_list|(
literal|"objc_autoreleasePoolPush"
argument_list|)
operator|||
name|M
operator|.
name|getNamedValue
argument_list|(
literal|"objc_loadWeakRetained"
argument_list|)
operator|||
name|M
operator|.
name|getNamedValue
argument_list|(
literal|"objc_loadWeak"
argument_list|)
operator|||
name|M
operator|.
name|getNamedValue
argument_list|(
literal|"objc_destroyWeak"
argument_list|)
operator|||
name|M
operator|.
name|getNamedValue
argument_list|(
literal|"objc_storeWeak"
argument_list|)
operator|||
name|M
operator|.
name|getNamedValue
argument_list|(
literal|"objc_initWeak"
argument_list|)
operator|||
name|M
operator|.
name|getNamedValue
argument_list|(
literal|"objc_moveWeak"
argument_list|)
operator|||
name|M
operator|.
name|getNamedValue
argument_list|(
literal|"objc_copyWeak"
argument_list|)
operator|||
name|M
operator|.
name|getNamedValue
argument_list|(
literal|"objc_retainedObject"
argument_list|)
operator|||
name|M
operator|.
name|getNamedValue
argument_list|(
literal|"objc_unretainedObject"
argument_list|)
operator|||
name|M
operator|.
name|getNamedValue
argument_list|(
literal|"objc_unretainedPointer"
argument_list|)
operator|||
name|M
operator|.
name|getNamedValue
argument_list|(
literal|"clang.arc.use"
argument_list|)
return|;
block|}
comment|/// \brief This is a wrapper around getUnderlyingObject which also knows how to
comment|/// look through objc_retain and objc_autorelease calls, which we know to return
comment|/// their argument verbatim.
specifier|inline
specifier|const
name|Value
modifier|*
name|GetUnderlyingObjCPtr
parameter_list|(
specifier|const
name|Value
modifier|*
name|V
parameter_list|,
specifier|const
name|DataLayout
modifier|&
name|DL
parameter_list|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|V
operator|=
name|GetUnderlyingObject
argument_list|(
name|V
argument_list|,
name|DL
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|IsForwarding
argument_list|(
name|GetBasicARCInstKind
argument_list|(
name|V
argument_list|)
argument_list|)
condition|)
break|break;
name|V
operator|=
name|cast
operator|<
name|CallInst
operator|>
operator|(
name|V
operator|)
operator|->
name|getArgOperand
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|V
return|;
block|}
comment|/// The RCIdentity root of a value \p V is a dominating value U for which
comment|/// retaining or releasing U is equivalent to retaining or releasing V. In other
comment|/// words, ARC operations on \p V are equivalent to ARC operations on \p U.
comment|///
comment|/// We use this in the ARC optimizer to make it easier to match up ARC
comment|/// operations by always mapping ARC operations to RCIdentityRoots instead of
comment|/// pointers themselves.
comment|///
comment|/// The two ways that we see RCIdentical values in ObjC are via:
comment|///
comment|///   1. PointerCasts
comment|///   2. Forwarding Calls that return their argument verbatim.
comment|///
comment|/// Thus this function strips off pointer casts and forwarding calls. *NOTE*
comment|/// This implies that two RCIdentical values must alias.
specifier|inline
specifier|const
name|Value
modifier|*
name|GetRCIdentityRoot
parameter_list|(
specifier|const
name|Value
modifier|*
name|V
parameter_list|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|V
operator|=
name|V
operator|->
name|stripPointerCasts
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|IsForwarding
argument_list|(
name|GetBasicARCInstKind
argument_list|(
name|V
argument_list|)
argument_list|)
condition|)
break|break;
name|V
operator|=
name|cast
operator|<
name|CallInst
operator|>
operator|(
name|V
operator|)
operator|->
name|getArgOperand
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|V
return|;
block|}
comment|/// Helper which calls const Value *GetRCIdentityRoot(const Value *V) and just
comment|/// casts away the const of the result. For documentation about what an
comment|/// RCIdentityRoot (and by extension GetRCIdentityRoot is) look at that
comment|/// function.
specifier|inline
name|Value
modifier|*
name|GetRCIdentityRoot
parameter_list|(
name|Value
modifier|*
name|V
parameter_list|)
block|{
return|return
name|const_cast
operator|<
name|Value
operator|*
operator|>
operator|(
name|GetRCIdentityRoot
argument_list|(
operator|(
specifier|const
name|Value
operator|*
operator|)
name|V
argument_list|)
operator|)
return|;
block|}
comment|/// \brief Assuming the given instruction is one of the special calls such as
comment|/// objc_retain or objc_release, return the RCIdentity root of the argument of
comment|/// the call.
specifier|inline
name|Value
modifier|*
name|GetArgRCIdentityRoot
parameter_list|(
name|Value
modifier|*
name|Inst
parameter_list|)
block|{
return|return
name|GetRCIdentityRoot
argument_list|(
name|cast
operator|<
name|CallInst
operator|>
operator|(
name|Inst
operator|)
operator|->
name|getArgOperand
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
specifier|inline
name|bool
name|IsNullOrUndef
parameter_list|(
specifier|const
name|Value
modifier|*
name|V
parameter_list|)
block|{
return|return
name|isa
operator|<
name|ConstantPointerNull
operator|>
operator|(
name|V
operator|)
operator|||
name|isa
operator|<
name|UndefValue
operator|>
operator|(
name|V
operator|)
return|;
block|}
specifier|inline
name|bool
name|IsNoopInstruction
parameter_list|(
specifier|const
name|Instruction
modifier|*
name|I
parameter_list|)
block|{
return|return
name|isa
operator|<
name|BitCastInst
operator|>
operator|(
name|I
operator|)
operator|||
operator|(
name|isa
operator|<
name|GetElementPtrInst
operator|>
operator|(
name|I
operator|)
operator|&&
name|cast
operator|<
name|GetElementPtrInst
operator|>
operator|(
name|I
operator|)
operator|->
name|hasAllZeroIndices
argument_list|()
operator|)
return|;
block|}
comment|/// \brief Test whether the given value is possible a retainable object pointer.
specifier|inline
name|bool
name|IsPotentialRetainableObjPtr
parameter_list|(
specifier|const
name|Value
modifier|*
name|Op
parameter_list|)
block|{
comment|// Pointers to static or stack storage are not valid retainable object
comment|// pointers.
if|if
condition|(
name|isa
operator|<
name|Constant
operator|>
operator|(
name|Op
operator|)
operator|||
name|isa
operator|<
name|AllocaInst
operator|>
operator|(
name|Op
operator|)
condition|)
return|return
name|false
return|;
comment|// Special arguments can not be a valid retainable object pointer.
if|if
condition|(
specifier|const
name|Argument
modifier|*
name|Arg
init|=
name|dyn_cast
operator|<
name|Argument
operator|>
operator|(
name|Op
operator|)
condition|)
if|if
condition|(
name|Arg
operator|->
name|hasByValAttr
argument_list|()
operator|||
name|Arg
operator|->
name|hasInAllocaAttr
argument_list|()
operator|||
name|Arg
operator|->
name|hasNestAttr
argument_list|()
operator|||
name|Arg
operator|->
name|hasStructRetAttr
argument_list|()
condition|)
return|return
name|false
return|;
comment|// Only consider values with pointer types.
comment|//
comment|// It seemes intuitive to exclude function pointer types as well, since
comment|// functions are never retainable object pointers, however clang occasionally
comment|// bitcasts retainable object pointers to function-pointer type temporarily.
name|PointerType
modifier|*
name|Ty
init|=
name|dyn_cast
operator|<
name|PointerType
operator|>
operator|(
name|Op
operator|->
name|getType
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|Ty
condition|)
return|return
name|false
return|;
comment|// Conservatively assume anything else is a potential retainable object
comment|// pointer.
return|return
name|true
return|;
block|}
specifier|inline
name|bool
name|IsPotentialRetainableObjPtr
parameter_list|(
specifier|const
name|Value
modifier|*
name|Op
parameter_list|,
name|AliasAnalysis
modifier|&
name|AA
parameter_list|)
block|{
comment|// First make the rudimentary check.
if|if
condition|(
operator|!
name|IsPotentialRetainableObjPtr
argument_list|(
name|Op
argument_list|)
condition|)
return|return
name|false
return|;
comment|// Objects in constant memory are not reference-counted.
if|if
condition|(
name|AA
operator|.
name|pointsToConstantMemory
argument_list|(
name|Op
argument_list|)
condition|)
return|return
name|false
return|;
comment|// Pointers in constant memory are not pointing to reference-counted objects.
if|if
condition|(
specifier|const
name|LoadInst
modifier|*
name|LI
init|=
name|dyn_cast
operator|<
name|LoadInst
operator|>
operator|(
name|Op
operator|)
condition|)
if|if
condition|(
name|AA
operator|.
name|pointsToConstantMemory
argument_list|(
name|LI
operator|->
name|getPointerOperand
argument_list|()
argument_list|)
condition|)
return|return
name|false
return|;
comment|// Otherwise assume the worst.
return|return
name|true
return|;
block|}
comment|/// \brief Helper for GetARCInstKind. Determines what kind of construct CS
comment|/// is.
specifier|inline
name|ARCInstKind
name|GetCallSiteClass
parameter_list|(
name|ImmutableCallSite
name|CS
parameter_list|)
block|{
for|for
control|(
name|ImmutableCallSite
operator|::
name|arg_iterator
name|I
operator|=
name|CS
operator|.
name|arg_begin
argument_list|()
operator|,
name|E
operator|=
name|CS
operator|.
name|arg_end
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
if|if
condition|(
name|IsPotentialRetainableObjPtr
argument_list|(
operator|*
name|I
argument_list|)
condition|)
return|return
name|CS
operator|.
name|onlyReadsMemory
argument_list|()
condition|?
name|ARCInstKind
operator|::
name|User
else|:
name|ARCInstKind
operator|::
name|CallOrUser
return|;
return|return
name|CS
operator|.
name|onlyReadsMemory
argument_list|()
condition|?
name|ARCInstKind
operator|::
name|None
else|:
name|ARCInstKind
operator|::
name|Call
return|;
block|}
comment|/// \brief Return true if this value refers to a distinct and identifiable
comment|/// object.
comment|///
comment|/// This is similar to AliasAnalysis's isIdentifiedObject, except that it uses
comment|/// special knowledge of ObjC conventions.
specifier|inline
name|bool
name|IsObjCIdentifiedObject
parameter_list|(
specifier|const
name|Value
modifier|*
name|V
parameter_list|)
block|{
comment|// Assume that call results and arguments have their own "provenance".
comment|// Constants (including GlobalVariables) and Allocas are never
comment|// reference-counted.
if|if
condition|(
name|isa
operator|<
name|CallInst
operator|>
operator|(
name|V
operator|)
operator|||
name|isa
operator|<
name|InvokeInst
operator|>
operator|(
name|V
operator|)
operator|||
name|isa
operator|<
name|Argument
operator|>
operator|(
name|V
operator|)
operator|||
name|isa
operator|<
name|Constant
operator|>
operator|(
name|V
operator|)
operator|||
name|isa
operator|<
name|AllocaInst
operator|>
operator|(
name|V
operator|)
condition|)
return|return
name|true
return|;
if|if
condition|(
specifier|const
name|LoadInst
modifier|*
name|LI
init|=
name|dyn_cast
operator|<
name|LoadInst
operator|>
operator|(
name|V
operator|)
condition|)
block|{
specifier|const
name|Value
modifier|*
name|Pointer
init|=
name|GetRCIdentityRoot
argument_list|(
name|LI
operator|->
name|getPointerOperand
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
specifier|const
name|GlobalVariable
modifier|*
name|GV
init|=
name|dyn_cast
operator|<
name|GlobalVariable
operator|>
operator|(
name|Pointer
operator|)
condition|)
block|{
comment|// A constant pointer can't be pointing to an object on the heap. It may
comment|// be reference-counted, but it won't be deleted.
if|if
condition|(
name|GV
operator|->
name|isConstant
argument_list|()
condition|)
return|return
name|true
return|;
name|StringRef
name|Name
init|=
name|GV
operator|->
name|getName
argument_list|()
decl_stmt|;
comment|// These special variables are known to hold values which are not
comment|// reference-counted pointers.
if|if
condition|(
name|Name
operator|.
name|startswith
argument_list|(
literal|"\01l_objc_msgSend_fixup_"
argument_list|)
condition|)
return|return
name|true
return|;
name|StringRef
name|Section
init|=
name|GV
operator|->
name|getSection
argument_list|()
decl_stmt|;
if|if
condition|(
name|Section
operator|.
name|find
argument_list|(
literal|"__message_refs"
argument_list|)
operator|!=
name|StringRef
operator|::
name|npos
operator|||
name|Section
operator|.
name|find
argument_list|(
literal|"__objc_classrefs"
argument_list|)
operator|!=
name|StringRef
operator|::
name|npos
operator|||
name|Section
operator|.
name|find
argument_list|(
literal|"__objc_superrefs"
argument_list|)
operator|!=
name|StringRef
operator|::
name|npos
operator|||
name|Section
operator|.
name|find
argument_list|(
literal|"__objc_methname"
argument_list|)
operator|!=
name|StringRef
operator|::
name|npos
operator|||
name|Section
operator|.
name|find
argument_list|(
literal|"__cstring"
argument_list|)
operator|!=
name|StringRef
operator|::
name|npos
condition|)
return|return
name|true
return|;
block|}
block|}
return|return
name|false
return|;
block|}
name|enum
name|class
name|ARCMDKindID
block|{
name|ImpreciseRelease
operator|,
name|CopyOnEscape
operator|,
name|NoObjCARCExceptions
operator|,
block|}
empty_stmt|;
comment|/// A cache of MDKinds used by various ARC optimizations.
name|class
name|ARCMDKindCache
block|{
name|Module
modifier|*
name|M
decl_stmt|;
comment|/// The Metadata Kind for clang.imprecise_release metadata.
name|llvm
operator|::
name|Optional
operator|<
name|unsigned
operator|>
name|ImpreciseReleaseMDKind
expr_stmt|;
comment|/// The Metadata Kind for clang.arc.copy_on_escape metadata.
name|llvm
operator|::
name|Optional
operator|<
name|unsigned
operator|>
name|CopyOnEscapeMDKind
expr_stmt|;
comment|/// The Metadata Kind for clang.arc.no_objc_arc_exceptions metadata.
name|llvm
operator|::
name|Optional
operator|<
name|unsigned
operator|>
name|NoObjCARCExceptionsMDKind
expr_stmt|;
name|public
label|:
name|void
name|init
parameter_list|(
name|Module
modifier|*
name|Mod
parameter_list|)
block|{
name|M
operator|=
name|Mod
expr_stmt|;
name|ImpreciseReleaseMDKind
operator|=
name|NoneType
operator|::
name|None
expr_stmt|;
name|CopyOnEscapeMDKind
operator|=
name|NoneType
operator|::
name|None
expr_stmt|;
name|NoObjCARCExceptionsMDKind
operator|=
name|NoneType
operator|::
name|None
expr_stmt|;
block|}
name|unsigned
name|get
parameter_list|(
name|ARCMDKindID
name|ID
parameter_list|)
block|{
switch|switch
condition|(
name|ID
condition|)
block|{
case|case
name|ARCMDKindID
operator|::
name|ImpreciseRelease
case|:
if|if
condition|(
operator|!
name|ImpreciseReleaseMDKind
condition|)
name|ImpreciseReleaseMDKind
operator|=
name|M
operator|->
name|getContext
argument_list|()
operator|.
name|getMDKindID
argument_list|(
literal|"clang.imprecise_release"
argument_list|)
expr_stmt|;
return|return
operator|*
name|ImpreciseReleaseMDKind
return|;
case|case
name|ARCMDKindID
operator|::
name|CopyOnEscape
case|:
if|if
condition|(
operator|!
name|CopyOnEscapeMDKind
condition|)
name|CopyOnEscapeMDKind
operator|=
name|M
operator|->
name|getContext
argument_list|()
operator|.
name|getMDKindID
argument_list|(
literal|"clang.arc.copy_on_escape"
argument_list|)
expr_stmt|;
return|return
operator|*
name|CopyOnEscapeMDKind
return|;
case|case
name|ARCMDKindID
operator|::
name|NoObjCARCExceptions
case|:
if|if
condition|(
operator|!
name|NoObjCARCExceptionsMDKind
condition|)
name|NoObjCARCExceptionsMDKind
operator|=
name|M
operator|->
name|getContext
argument_list|()
operator|.
name|getMDKindID
argument_list|(
literal|"clang.arc.no_objc_arc_exceptions"
argument_list|)
expr_stmt|;
return|return
operator|*
name|NoObjCARCExceptionsMDKind
return|;
block|}
name|llvm_unreachable
argument_list|(
literal|"Covered switch isn't covered?!"
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
block|}
comment|// end namespace objcarc
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

