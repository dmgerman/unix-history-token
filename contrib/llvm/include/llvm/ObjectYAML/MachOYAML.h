begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- MachOYAML.h - Mach-O YAMLIO implementation ---------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|/// \brief This file declares classes for handling the YAML representation
end_comment

begin_comment
comment|/// of Mach-O.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_OBJECTYAML_MACHOYAML_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_OBJECTYAML_MACHOYAML_H
end_define

begin_include
include|#
directive|include
file|"llvm/ObjectYAML/YAML.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ObjectYAML/DWARFYAML.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/MachO.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|MachOYAML
block|{
struct|struct
name|Section
block|{
name|char
name|sectname
index|[
literal|16
index|]
decl_stmt|;
name|char
name|segname
index|[
literal|16
index|]
decl_stmt|;
name|llvm
operator|::
name|yaml
operator|::
name|Hex64
name|addr
expr_stmt|;
name|uint64_t
name|size
decl_stmt|;
name|llvm
operator|::
name|yaml
operator|::
name|Hex32
name|offset
expr_stmt|;
name|uint32_t
name|align
decl_stmt|;
name|llvm
operator|::
name|yaml
operator|::
name|Hex32
name|reloff
expr_stmt|;
name|uint32_t
name|nreloc
decl_stmt|;
name|llvm
operator|::
name|yaml
operator|::
name|Hex32
name|flags
expr_stmt|;
name|llvm
operator|::
name|yaml
operator|::
name|Hex32
name|reserved1
expr_stmt|;
name|llvm
operator|::
name|yaml
operator|::
name|Hex32
name|reserved2
expr_stmt|;
name|llvm
operator|::
name|yaml
operator|::
name|Hex32
name|reserved3
expr_stmt|;
block|}
struct|;
struct|struct
name|FileHeader
block|{
name|llvm
operator|::
name|yaml
operator|::
name|Hex32
name|magic
expr_stmt|;
name|llvm
operator|::
name|yaml
operator|::
name|Hex32
name|cputype
expr_stmt|;
name|llvm
operator|::
name|yaml
operator|::
name|Hex32
name|cpusubtype
expr_stmt|;
name|llvm
operator|::
name|yaml
operator|::
name|Hex32
name|filetype
expr_stmt|;
name|uint32_t
name|ncmds
decl_stmt|;
name|uint32_t
name|sizeofcmds
decl_stmt|;
name|llvm
operator|::
name|yaml
operator|::
name|Hex32
name|flags
expr_stmt|;
name|llvm
operator|::
name|yaml
operator|::
name|Hex32
name|reserved
expr_stmt|;
block|}
struct|;
struct|struct
name|LoadCommand
block|{
name|virtual
operator|~
name|LoadCommand
argument_list|()
expr_stmt|;
name|llvm
operator|::
name|MachO
operator|::
name|macho_load_command
name|Data
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|Section
operator|>
name|Sections
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|llvm
operator|::
name|yaml
operator|::
name|Hex8
operator|>
name|PayloadBytes
expr_stmt|;
name|std
operator|::
name|string
name|PayloadString
expr_stmt|;
name|uint64_t
name|ZeroPadBytes
decl_stmt|;
block|}
struct|;
struct|struct
name|NListEntry
block|{
name|uint32_t
name|n_strx
decl_stmt|;
name|llvm
operator|::
name|yaml
operator|::
name|Hex8
name|n_type
expr_stmt|;
name|uint8_t
name|n_sect
decl_stmt|;
name|uint16_t
name|n_desc
decl_stmt|;
name|uint64_t
name|n_value
decl_stmt|;
block|}
struct|;
struct|struct
name|RebaseOpcode
block|{
name|MachO
operator|::
name|RebaseOpcode
name|Opcode
expr_stmt|;
name|uint8_t
name|Imm
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|yaml
operator|::
name|Hex64
operator|>
name|ExtraData
expr_stmt|;
block|}
struct|;
struct|struct
name|BindOpcode
block|{
name|MachO
operator|::
name|BindOpcode
name|Opcode
expr_stmt|;
name|uint8_t
name|Imm
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|yaml
operator|::
name|Hex64
operator|>
name|ULEBExtraData
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|int64_t
operator|>
name|SLEBExtraData
expr_stmt|;
name|StringRef
name|Symbol
decl_stmt|;
block|}
struct|;
struct|struct
name|ExportEntry
block|{
name|ExportEntry
argument_list|()
operator|:
name|TerminalSize
argument_list|(
literal|0
argument_list|)
operator|,
name|NodeOffset
argument_list|(
literal|0
argument_list|)
operator|,
name|Name
argument_list|()
operator|,
name|Flags
argument_list|(
literal|0
argument_list|)
operator|,
name|Address
argument_list|(
literal|0
argument_list|)
operator|,
name|Other
argument_list|(
literal|0
argument_list|)
operator|,
name|ImportName
argument_list|()
operator|,
name|Children
argument_list|()
block|{}
name|uint64_t
name|TerminalSize
expr_stmt|;
name|uint64_t
name|NodeOffset
decl_stmt|;
name|std
operator|::
name|string
name|Name
expr_stmt|;
name|llvm
operator|::
name|yaml
operator|::
name|Hex64
name|Flags
expr_stmt|;
name|llvm
operator|::
name|yaml
operator|::
name|Hex64
name|Address
expr_stmt|;
name|llvm
operator|::
name|yaml
operator|::
name|Hex64
name|Other
expr_stmt|;
name|std
operator|::
name|string
name|ImportName
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|MachOYAML
operator|::
name|ExportEntry
operator|>
name|Children
expr_stmt|;
block|}
struct|;
struct|struct
name|LinkEditData
block|{
name|std
operator|::
name|vector
operator|<
name|MachOYAML
operator|::
name|RebaseOpcode
operator|>
name|RebaseOpcodes
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|MachOYAML
operator|::
name|BindOpcode
operator|>
name|BindOpcodes
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|MachOYAML
operator|::
name|BindOpcode
operator|>
name|WeakBindOpcodes
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|MachOYAML
operator|::
name|BindOpcode
operator|>
name|LazyBindOpcodes
expr_stmt|;
name|MachOYAML
operator|::
name|ExportEntry
name|ExportTrie
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|NListEntry
operator|>
name|NameList
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|StringRef
operator|>
name|StringTable
expr_stmt|;
name|bool
name|isEmpty
argument_list|()
specifier|const
expr_stmt|;
block|}
struct|;
struct|struct
name|Object
block|{
name|bool
name|IsLittleEndian
decl_stmt|;
name|FileHeader
name|Header
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|LoadCommand
operator|>
name|LoadCommands
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|Section
operator|>
name|Sections
expr_stmt|;
name|LinkEditData
name|LinkEdit
decl_stmt|;
name|DWARFYAML
operator|::
name|Data
name|DWARF
expr_stmt|;
block|}
struct|;
struct|struct
name|FatHeader
block|{
name|llvm
operator|::
name|yaml
operator|::
name|Hex32
name|magic
expr_stmt|;
name|uint32_t
name|nfat_arch
decl_stmt|;
block|}
struct|;
struct|struct
name|FatArch
block|{
name|llvm
operator|::
name|yaml
operator|::
name|Hex32
name|cputype
expr_stmt|;
name|llvm
operator|::
name|yaml
operator|::
name|Hex32
name|cpusubtype
expr_stmt|;
name|llvm
operator|::
name|yaml
operator|::
name|Hex64
name|offset
expr_stmt|;
name|uint64_t
name|size
decl_stmt|;
name|uint32_t
name|align
decl_stmt|;
name|llvm
operator|::
name|yaml
operator|::
name|Hex32
name|reserved
expr_stmt|;
block|}
struct|;
struct|struct
name|UniversalBinary
block|{
name|FatHeader
name|Header
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|FatArch
operator|>
name|FatArchs
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|Object
operator|>
name|Slices
expr_stmt|;
block|}
struct|;
block|}
comment|// namespace llvm::MachOYAML
block|}
end_decl_stmt

begin_comment
comment|// namespace llvm
end_comment

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::MachOYAML::LoadCommand
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::MachOYAML::Section
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::yaml::Hex64
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|int64_t
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::MachOYAML::RebaseOpcode
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::MachOYAML::BindOpcode
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::MachOYAML::ExportEntry
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::MachOYAML::NListEntry
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::MachOYAML::Object
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::MachOYAML::FatArch
argument_list|)
end_macro

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|yaml
block|{
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|MachOYAML
operator|::
name|FileHeader
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|MachOYAML
operator|::
name|FileHeader
operator|&
name|FileHeader
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|MachOYAML
operator|::
name|Object
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|MachOYAML
operator|::
name|Object
operator|&
name|Object
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|MachOYAML
operator|::
name|FatHeader
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|MachOYAML
operator|::
name|FatHeader
operator|&
name|FatHeader
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|MachOYAML
operator|::
name|FatArch
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|MachOYAML
operator|::
name|FatArch
operator|&
name|FatArch
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|MachOYAML
operator|::
name|UniversalBinary
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|MachOYAML
operator|::
name|UniversalBinary
operator|&
name|UniversalBinary
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|MachOYAML
operator|::
name|LoadCommand
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|MachOYAML
operator|::
name|LoadCommand
operator|&
name|LoadCommand
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|MachOYAML
operator|::
name|LinkEditData
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|MachOYAML
operator|::
name|LinkEditData
operator|&
name|LinkEditData
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|MachOYAML
operator|::
name|RebaseOpcode
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|MachOYAML
operator|::
name|RebaseOpcode
operator|&
name|RebaseOpcode
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|MachOYAML
operator|::
name|BindOpcode
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|MachOYAML
operator|::
name|BindOpcode
operator|&
name|BindOpcode
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|MachOYAML
operator|::
name|ExportEntry
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|MachOYAML
operator|::
name|ExportEntry
operator|&
name|ExportEntry
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|MachOYAML
operator|::
name|Section
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|MachOYAML
operator|::
name|Section
operator|&
name|Section
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|MachOYAML
operator|::
name|NListEntry
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|MachOYAML
operator|::
name|NListEntry
operator|&
name|NListEntry
argument_list|)
block|; }
expr_stmt|;
define|#
directive|define
name|HANDLE_LOAD_COMMAND
parameter_list|(
name|LCName
parameter_list|,
name|LCValue
parameter_list|,
name|LCStruct
parameter_list|)
define|\
value|io.enumCase(value, #LCName, MachO::LCName);
name|template
operator|<
operator|>
expr|struct
name|ScalarEnumerationTraits
operator|<
name|MachO
operator|::
name|LoadCommandType
operator|>
block|{
specifier|static
name|void
name|enumeration
argument_list|(
argument|IO&io
argument_list|,
argument|MachO::LoadCommandType&value
argument_list|)
block|{
include|#
directive|include
file|"llvm/Support/MachO.def"
name|io
operator|.
name|enumFallback
operator|<
name|Hex32
operator|>
operator|(
name|value
operator|)
block|;   }
block|}
expr_stmt|;
define|#
directive|define
name|ENUM_CASE
parameter_list|(
name|Enum
parameter_list|)
value|io.enumCase(value, #Enum, MachO::Enum);
name|template
operator|<
operator|>
expr|struct
name|ScalarEnumerationTraits
operator|<
name|MachO
operator|::
name|RebaseOpcode
operator|>
block|{
specifier|static
name|void
name|enumeration
argument_list|(
argument|IO&io
argument_list|,
argument|MachO::RebaseOpcode&value
argument_list|)
block|{
name|ENUM_CASE
argument_list|(
argument|REBASE_OPCODE_DONE
argument_list|)
name|ENUM_CASE
argument_list|(
argument|REBASE_OPCODE_SET_TYPE_IMM
argument_list|)
name|ENUM_CASE
argument_list|(
argument|REBASE_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB
argument_list|)
name|ENUM_CASE
argument_list|(
argument|REBASE_OPCODE_ADD_ADDR_ULEB
argument_list|)
name|ENUM_CASE
argument_list|(
argument|REBASE_OPCODE_ADD_ADDR_IMM_SCALED
argument_list|)
name|ENUM_CASE
argument_list|(
argument|REBASE_OPCODE_DO_REBASE_IMM_TIMES
argument_list|)
name|ENUM_CASE
argument_list|(
argument|REBASE_OPCODE_DO_REBASE_ULEB_TIMES
argument_list|)
name|ENUM_CASE
argument_list|(
argument|REBASE_OPCODE_DO_REBASE_ADD_ADDR_ULEB
argument_list|)
name|ENUM_CASE
argument_list|(
argument|REBASE_OPCODE_DO_REBASE_ULEB_TIMES_SKIPPING_ULEB
argument_list|)
name|io
operator|.
name|enumFallback
operator|<
name|Hex8
operator|>
operator|(
name|value
operator|)
block|;   }
block|}
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|ScalarEnumerationTraits
operator|<
name|MachO
operator|::
name|BindOpcode
operator|>
block|{
specifier|static
name|void
name|enumeration
argument_list|(
argument|IO&io
argument_list|,
argument|MachO::BindOpcode&value
argument_list|)
block|{
name|ENUM_CASE
argument_list|(
argument|BIND_OPCODE_DONE
argument_list|)
name|ENUM_CASE
argument_list|(
argument|BIND_OPCODE_SET_DYLIB_ORDINAL_IMM
argument_list|)
name|ENUM_CASE
argument_list|(
argument|BIND_OPCODE_SET_DYLIB_ORDINAL_ULEB
argument_list|)
name|ENUM_CASE
argument_list|(
argument|BIND_OPCODE_SET_DYLIB_SPECIAL_IMM
argument_list|)
name|ENUM_CASE
argument_list|(
argument|BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM
argument_list|)
name|ENUM_CASE
argument_list|(
argument|BIND_OPCODE_SET_TYPE_IMM
argument_list|)
name|ENUM_CASE
argument_list|(
argument|BIND_OPCODE_SET_ADDEND_SLEB
argument_list|)
name|ENUM_CASE
argument_list|(
argument|BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB
argument_list|)
name|ENUM_CASE
argument_list|(
argument|BIND_OPCODE_ADD_ADDR_ULEB
argument_list|)
name|ENUM_CASE
argument_list|(
argument|BIND_OPCODE_DO_BIND
argument_list|)
name|ENUM_CASE
argument_list|(
argument|BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB
argument_list|)
name|ENUM_CASE
argument_list|(
argument|BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED
argument_list|)
name|ENUM_CASE
argument_list|(
argument|BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB
argument_list|)
name|io
operator|.
name|enumFallback
operator|<
name|Hex8
operator|>
operator|(
name|value
operator|)
block|;   }
block|}
expr_stmt|;
comment|// This trait is used for 16-byte chars in Mach structures used for strings
typedef|typedef
name|char
name|char_16
index|[
literal|16
index|]
typedef|;
name|template
operator|<
operator|>
expr|struct
name|ScalarTraits
operator|<
name|char_16
operator|>
block|{
specifier|static
name|void
name|output
argument_list|(
specifier|const
name|char_16
operator|&
name|Val
argument_list|,
name|void
operator|*
argument_list|,
name|llvm
operator|::
name|raw_ostream
operator|&
name|Out
argument_list|)
block|;
specifier|static
name|StringRef
name|input
argument_list|(
argument|StringRef Scalar
argument_list|,
argument|void *
argument_list|,
argument|char_16&Val
argument_list|)
block|;
specifier|static
name|bool
name|mustQuote
argument_list|(
argument|StringRef S
argument_list|)
block|; }
expr_stmt|;
comment|// This trait is used for UUIDs. It reads and writes them matching otool's
comment|// formatting style.
typedef|typedef
name|uint8_t
name|uuid_t
index|[
literal|16
index|]
typedef|;
name|template
operator|<
operator|>
expr|struct
name|ScalarTraits
operator|<
name|uuid_t
operator|>
block|{
specifier|static
name|void
name|output
argument_list|(
specifier|const
name|uuid_t
operator|&
name|Val
argument_list|,
name|void
operator|*
argument_list|,
name|llvm
operator|::
name|raw_ostream
operator|&
name|Out
argument_list|)
block|;
specifier|static
name|StringRef
name|input
argument_list|(
argument|StringRef Scalar
argument_list|,
argument|void *
argument_list|,
argument|uuid_t&Val
argument_list|)
block|;
specifier|static
name|bool
name|mustQuote
argument_list|(
argument|StringRef S
argument_list|)
block|; }
expr_stmt|;
comment|// Load Command struct mapping traits
define|#
directive|define
name|LOAD_COMMAND_STRUCT
parameter_list|(
name|LCStruct
parameter_list|)
define|\
value|template<> struct MappingTraits<MachO::LCStruct> {                          \     static void mapping(IO&IO, MachO::LCStruct&LoadCommand);                 \   };
include|#
directive|include
file|"llvm/Support/MachO.def"
comment|// Extra structures used by load commands
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|MachO
operator|::
name|dylib
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|MachO
operator|::
name|dylib
operator|&
name|LoadCommand
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|MachO
operator|::
name|fvmlib
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|MachO
operator|::
name|fvmlib
operator|&
name|LoadCommand
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|MachO
operator|::
name|section
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|MachO
operator|::
name|section
operator|&
name|LoadCommand
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|MachO
operator|::
name|section_64
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|MachO
operator|::
name|section_64
operator|&
name|LoadCommand
argument_list|)
block|; }
expr_stmt|;
block|}
comment|// namespace llvm::yaml
block|}
end_decl_stmt

begin_comment
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

