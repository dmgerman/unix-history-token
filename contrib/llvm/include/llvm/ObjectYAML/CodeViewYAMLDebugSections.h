begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- CodeViewYAMLDebugSections.h - CodeView YAMLIO debug sections -------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines classes for handling the YAML representation of CodeView
end_comment

begin_comment
comment|// Debug Info.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_OBJECTYAML_CODEVIEWYAMLDEBUGSECTIONS_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_OBJECTYAML_CODEVIEWYAMLDEBUGSECTIONS_H
end_define

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/CodeView.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/DebugSubsection.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/DebugSubsectionRecord.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ObjectYAML/YAML.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|codeview
block|{
name|class
name|DebugStringTableSubsection
decl_stmt|;
name|class
name|DebugStringTableSubsectionRef
decl_stmt|;
name|class
name|DebugChecksumsSubsectionRef
decl_stmt|;
name|class
name|DebugStringTableSubsection
decl_stmt|;
name|class
name|DebugChecksumsSubsection
decl_stmt|;
block|}
name|namespace
name|CodeViewYAML
block|{
name|namespace
name|detail
block|{
struct_decl|struct
name|YAMLSubsectionBase
struct_decl|;
block|}
struct|struct
name|YAMLFrameData
block|{
name|uint32_t
name|RvaStart
decl_stmt|;
name|uint32_t
name|CodeSize
decl_stmt|;
name|uint32_t
name|LocalSize
decl_stmt|;
name|uint32_t
name|ParamsSize
decl_stmt|;
name|uint32_t
name|MaxStackSize
decl_stmt|;
name|StringRef
name|FrameFunc
decl_stmt|;
name|uint32_t
name|PrologSize
decl_stmt|;
name|uint32_t
name|SavedRegsSize
decl_stmt|;
name|uint32_t
name|Flags
decl_stmt|;
block|}
struct|;
struct|struct
name|YAMLCrossModuleImport
block|{
name|StringRef
name|ModuleName
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|uint32_t
operator|>
name|ImportIds
expr_stmt|;
block|}
struct|;
struct|struct
name|SourceLineEntry
block|{
name|uint32_t
name|Offset
decl_stmt|;
name|uint32_t
name|LineStart
decl_stmt|;
name|uint32_t
name|EndDelta
decl_stmt|;
name|bool
name|IsStatement
decl_stmt|;
block|}
struct|;
struct|struct
name|SourceColumnEntry
block|{
name|uint16_t
name|StartColumn
decl_stmt|;
name|uint16_t
name|EndColumn
decl_stmt|;
block|}
struct|;
struct|struct
name|SourceLineBlock
block|{
name|StringRef
name|FileName
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|SourceLineEntry
operator|>
name|Lines
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|SourceColumnEntry
operator|>
name|Columns
expr_stmt|;
block|}
struct|;
struct|struct
name|HexFormattedString
block|{
name|std
operator|::
name|vector
operator|<
name|uint8_t
operator|>
name|Bytes
expr_stmt|;
block|}
struct|;
struct|struct
name|SourceFileChecksumEntry
block|{
name|StringRef
name|FileName
decl_stmt|;
name|codeview
operator|::
name|FileChecksumKind
name|Kind
expr_stmt|;
name|HexFormattedString
name|ChecksumBytes
decl_stmt|;
block|}
struct|;
struct|struct
name|SourceLineInfo
block|{
name|uint32_t
name|RelocOffset
decl_stmt|;
name|uint32_t
name|RelocSegment
decl_stmt|;
name|codeview
operator|::
name|LineFlags
name|Flags
expr_stmt|;
name|uint32_t
name|CodeSize
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|SourceLineBlock
operator|>
name|Blocks
expr_stmt|;
block|}
struct|;
struct|struct
name|InlineeSite
block|{
name|uint32_t
name|Inlinee
decl_stmt|;
name|StringRef
name|FileName
decl_stmt|;
name|uint32_t
name|SourceLineNum
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|StringRef
operator|>
name|ExtraFiles
expr_stmt|;
block|}
struct|;
struct|struct
name|InlineeInfo
block|{
name|bool
name|HasExtraFiles
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|InlineeSite
operator|>
name|Sites
expr_stmt|;
block|}
struct|;
struct|struct
name|YAMLDebugSubsection
block|{
specifier|static
name|Expected
operator|<
name|YAMLDebugSubsection
operator|>
name|fromCodeViewSubection
argument_list|(
specifier|const
name|codeview
operator|::
name|DebugStringTableSubsectionRef
operator|&
name|Strings
argument_list|,
specifier|const
name|codeview
operator|::
name|DebugChecksumsSubsectionRef
operator|&
name|Checksums
argument_list|,
specifier|const
name|codeview
operator|::
name|DebugSubsectionRecord
operator|&
name|SS
argument_list|)
expr_stmt|;
name|std
operator|::
name|shared_ptr
operator|<
name|detail
operator|::
name|YAMLSubsectionBase
operator|>
name|Subsection
expr_stmt|;
block|}
struct|;
name|Expected
operator|<
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|codeview
operator|::
name|DebugSubsection
operator|>>>
name|toCodeViewSubsectionList
argument_list|(
name|BumpPtrAllocator
operator|&
name|Allocator
argument_list|,
name|ArrayRef
operator|<
name|YAMLDebugSubsection
operator|>
name|Subsections
argument_list|,
name|codeview
operator|::
name|DebugStringTableSubsection
operator|&
name|Strings
argument_list|)
expr_stmt|;
name|Expected
operator|<
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|codeview
operator|::
name|DebugSubsection
operator|>>>
name|toCodeViewSubsectionList
argument_list|(
name|BumpPtrAllocator
operator|&
name|Allocator
argument_list|,
name|ArrayRef
operator|<
name|YAMLDebugSubsection
operator|>
name|Subsections
argument_list|,
name|std
operator|::
name|unique_ptr
operator|<
name|codeview
operator|::
name|DebugStringTableSubsection
operator|>
operator|&
name|TakeStrings
argument_list|,
name|codeview
operator|::
name|DebugStringTableSubsection
operator|*
name|StringsRef
argument_list|)
expr_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|codeview
operator|::
name|DebugStringTableSubsection
operator|>
name|findStringTable
argument_list|(
name|ArrayRef
operator|<
name|YAMLDebugSubsection
operator|>
name|Sections
argument_list|)
expr_stmt|;
block|}
comment|// namespace CodeViewYAML
block|}
end_decl_stmt

begin_comment
comment|// namespace llvm
end_comment

begin_macro
name|LLVM_YAML_DECLARE_MAPPING_TRAITS
argument_list|(
argument|CodeViewYAML::YAMLDebugSubsection
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|CodeViewYAML::YAMLDebugSubsection
argument_list|)
end_macro

begin_endif
endif|#
directive|endif
end_endif

end_unit

