begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- WasmYAML.h - Wasm YAMLIO implementation ------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|/// \brief This file declares classes for handling the YAML representation
end_comment

begin_comment
comment|/// of wasm binaries.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_OBJECTYAML_WASMYAML_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_OBJECTYAML_WASMYAML_H
end_define

begin_include
include|#
directive|include
file|"llvm/BinaryFormat/Wasm.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ObjectYAML/YAML.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|WasmYAML
block|{
name|LLVM_YAML_STRONG_TYPEDEF
argument_list|(
argument|uint32_t
argument_list|,
argument|SectionType
argument_list|)
name|LLVM_YAML_STRONG_TYPEDEF
argument_list|(
argument|int32_t
argument_list|,
argument|ValueType
argument_list|)
name|LLVM_YAML_STRONG_TYPEDEF
argument_list|(
argument|int32_t
argument_list|,
argument|TableType
argument_list|)
name|LLVM_YAML_STRONG_TYPEDEF
argument_list|(
argument|int32_t
argument_list|,
argument|SignatureForm
argument_list|)
name|LLVM_YAML_STRONG_TYPEDEF
argument_list|(
argument|uint32_t
argument_list|,
argument|ExportKind
argument_list|)
name|LLVM_YAML_STRONG_TYPEDEF
argument_list|(
argument|uint32_t
argument_list|,
argument|Opcode
argument_list|)
name|LLVM_YAML_STRONG_TYPEDEF
argument_list|(
argument|uint32_t
argument_list|,
argument|RelocType
argument_list|)
struct|struct
name|FileHeader
block|{
name|yaml
operator|::
name|Hex32
name|Version
expr_stmt|;
block|}
struct|;
struct|struct
name|Limits
block|{
name|yaml
operator|::
name|Hex32
name|Flags
expr_stmt|;
name|yaml
operator|::
name|Hex32
name|Initial
expr_stmt|;
name|yaml
operator|::
name|Hex32
name|Maximum
expr_stmt|;
block|}
struct|;
struct|struct
name|Table
block|{
name|TableType
name|ElemType
decl_stmt|;
name|Limits
name|TableLimits
decl_stmt|;
block|}
struct|;
struct|struct
name|Export
block|{
name|StringRef
name|Name
decl_stmt|;
name|ExportKind
name|Kind
decl_stmt|;
name|uint32_t
name|Index
decl_stmt|;
block|}
struct|;
struct|struct
name|ElemSegment
block|{
name|uint32_t
name|TableIndex
decl_stmt|;
name|wasm
operator|::
name|WasmInitExpr
name|Offset
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|uint32_t
operator|>
name|Functions
expr_stmt|;
block|}
struct|;
struct|struct
name|Global
block|{
name|ValueType
name|Type
decl_stmt|;
name|bool
name|Mutable
decl_stmt|;
name|wasm
operator|::
name|WasmInitExpr
name|InitExpr
expr_stmt|;
block|}
struct|;
struct|struct
name|Import
block|{
name|StringRef
name|Module
decl_stmt|;
name|StringRef
name|Field
decl_stmt|;
name|ExportKind
name|Kind
decl_stmt|;
union|union
block|{
name|uint32_t
name|SigIndex
decl_stmt|;
name|Global
name|GlobalImport
decl_stmt|;
name|Table
name|TableImport
decl_stmt|;
name|Limits
name|Memory
decl_stmt|;
block|}
union|;
block|}
struct|;
struct|struct
name|LocalDecl
block|{
name|ValueType
name|Type
decl_stmt|;
name|uint32_t
name|Count
decl_stmt|;
block|}
struct|;
struct|struct
name|Function
block|{
name|std
operator|::
name|vector
operator|<
name|LocalDecl
operator|>
name|Locals
expr_stmt|;
name|yaml
operator|::
name|BinaryRef
name|Body
expr_stmt|;
block|}
struct|;
struct|struct
name|Relocation
block|{
name|RelocType
name|Type
decl_stmt|;
name|uint32_t
name|Index
decl_stmt|;
name|yaml
operator|::
name|Hex32
name|Offset
expr_stmt|;
name|int32_t
name|Addend
decl_stmt|;
block|}
struct|;
struct|struct
name|DataSegment
block|{
name|uint32_t
name|Index
decl_stmt|;
name|wasm
operator|::
name|WasmInitExpr
name|Offset
expr_stmt|;
name|yaml
operator|::
name|BinaryRef
name|Content
expr_stmt|;
block|}
struct|;
struct|struct
name|NameEntry
block|{
name|uint32_t
name|Index
decl_stmt|;
name|StringRef
name|Name
decl_stmt|;
block|}
struct|;
struct|struct
name|Signature
block|{
name|Signature
argument_list|()
operator|:
name|Form
argument_list|(
argument|wasm::WASM_TYPE_FUNC
argument_list|)
block|{}
name|uint32_t
name|Index
expr_stmt|;
name|SignatureForm
name|Form
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|ValueType
operator|>
name|ParamTypes
expr_stmt|;
name|ValueType
name|ReturnType
decl_stmt|;
block|}
struct|;
struct|struct
name|Section
block|{
name|Section
argument_list|(
argument|SectionType SecType
argument_list|)
block|:
name|Type
argument_list|(
argument|SecType
argument_list|)
block|{}
name|virtual
operator|~
name|Section
argument_list|()
expr_stmt|;
name|SectionType
name|Type
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|Relocation
operator|>
name|Relocations
expr_stmt|;
block|}
struct|;
name|struct
name|CustomSection
range|:
name|Section
block|{
name|CustomSection
argument_list|()
operator|:
name|Section
argument_list|(
argument|wasm::WASM_SEC_CUSTOM
argument_list|)
block|{}
specifier|static
name|bool
name|classof
argument_list|(
argument|const Section *S
argument_list|)
block|{
return|return
name|S
operator|->
name|Type
operator|==
name|wasm
operator|::
name|WASM_SEC_CUSTOM
return|;
block|}
name|StringRef
name|Name
block|;
name|yaml
operator|::
name|BinaryRef
name|Payload
block|;
comment|// The follow is used by the "name" custom section.
comment|// TODO(sbc): Add support for more then just functions names.  The wasm
comment|// name section can support multiple sub-sections.
name|std
operator|::
name|vector
operator|<
name|NameEntry
operator|>
name|FunctionNames
block|; }
decl_stmt|;
name|struct
name|TypeSection
range|:
name|Section
block|{
name|TypeSection
argument_list|()
operator|:
name|Section
argument_list|(
argument|wasm::WASM_SEC_TYPE
argument_list|)
block|{}
specifier|static
name|bool
name|classof
argument_list|(
argument|const Section *S
argument_list|)
block|{
return|return
name|S
operator|->
name|Type
operator|==
name|wasm
operator|::
name|WASM_SEC_TYPE
return|;
block|}
name|std
operator|::
name|vector
operator|<
name|Signature
operator|>
name|Signatures
block|; }
decl_stmt|;
name|struct
name|ImportSection
range|:
name|Section
block|{
name|ImportSection
argument_list|()
operator|:
name|Section
argument_list|(
argument|wasm::WASM_SEC_IMPORT
argument_list|)
block|{}
specifier|static
name|bool
name|classof
argument_list|(
argument|const Section *S
argument_list|)
block|{
return|return
name|S
operator|->
name|Type
operator|==
name|wasm
operator|::
name|WASM_SEC_IMPORT
return|;
block|}
name|std
operator|::
name|vector
operator|<
name|Import
operator|>
name|Imports
block|; }
decl_stmt|;
name|struct
name|FunctionSection
range|:
name|Section
block|{
name|FunctionSection
argument_list|()
operator|:
name|Section
argument_list|(
argument|wasm::WASM_SEC_FUNCTION
argument_list|)
block|{}
specifier|static
name|bool
name|classof
argument_list|(
argument|const Section *S
argument_list|)
block|{
return|return
name|S
operator|->
name|Type
operator|==
name|wasm
operator|::
name|WASM_SEC_FUNCTION
return|;
block|}
name|std
operator|::
name|vector
operator|<
name|uint32_t
operator|>
name|FunctionTypes
block|; }
decl_stmt|;
name|struct
name|TableSection
range|:
name|Section
block|{
name|TableSection
argument_list|()
operator|:
name|Section
argument_list|(
argument|wasm::WASM_SEC_TABLE
argument_list|)
block|{}
specifier|static
name|bool
name|classof
argument_list|(
argument|const Section *S
argument_list|)
block|{
return|return
name|S
operator|->
name|Type
operator|==
name|wasm
operator|::
name|WASM_SEC_TABLE
return|;
block|}
name|std
operator|::
name|vector
operator|<
name|Table
operator|>
name|Tables
block|; }
decl_stmt|;
name|struct
name|MemorySection
range|:
name|Section
block|{
name|MemorySection
argument_list|()
operator|:
name|Section
argument_list|(
argument|wasm::WASM_SEC_MEMORY
argument_list|)
block|{}
specifier|static
name|bool
name|classof
argument_list|(
argument|const Section *S
argument_list|)
block|{
return|return
name|S
operator|->
name|Type
operator|==
name|wasm
operator|::
name|WASM_SEC_MEMORY
return|;
block|}
name|std
operator|::
name|vector
operator|<
name|Limits
operator|>
name|Memories
block|; }
decl_stmt|;
name|struct
name|GlobalSection
range|:
name|Section
block|{
name|GlobalSection
argument_list|()
operator|:
name|Section
argument_list|(
argument|wasm::WASM_SEC_GLOBAL
argument_list|)
block|{}
specifier|static
name|bool
name|classof
argument_list|(
argument|const Section *S
argument_list|)
block|{
return|return
name|S
operator|->
name|Type
operator|==
name|wasm
operator|::
name|WASM_SEC_GLOBAL
return|;
block|}
name|std
operator|::
name|vector
operator|<
name|Global
operator|>
name|Globals
block|; }
decl_stmt|;
name|struct
name|ExportSection
range|:
name|Section
block|{
name|ExportSection
argument_list|()
operator|:
name|Section
argument_list|(
argument|wasm::WASM_SEC_EXPORT
argument_list|)
block|{}
specifier|static
name|bool
name|classof
argument_list|(
argument|const Section *S
argument_list|)
block|{
return|return
name|S
operator|->
name|Type
operator|==
name|wasm
operator|::
name|WASM_SEC_EXPORT
return|;
block|}
name|std
operator|::
name|vector
operator|<
name|Export
operator|>
name|Exports
block|; }
decl_stmt|;
name|struct
name|StartSection
range|:
name|Section
block|{
name|StartSection
argument_list|()
operator|:
name|Section
argument_list|(
argument|wasm::WASM_SEC_START
argument_list|)
block|{}
specifier|static
name|bool
name|classof
argument_list|(
argument|const Section *S
argument_list|)
block|{
return|return
name|S
operator|->
name|Type
operator|==
name|wasm
operator|::
name|WASM_SEC_START
return|;
block|}
name|uint32_t
name|StartFunction
block|; }
decl_stmt|;
name|struct
name|ElemSection
range|:
name|Section
block|{
name|ElemSection
argument_list|()
operator|:
name|Section
argument_list|(
argument|wasm::WASM_SEC_ELEM
argument_list|)
block|{}
specifier|static
name|bool
name|classof
argument_list|(
argument|const Section *S
argument_list|)
block|{
return|return
name|S
operator|->
name|Type
operator|==
name|wasm
operator|::
name|WASM_SEC_ELEM
return|;
block|}
name|std
operator|::
name|vector
operator|<
name|ElemSegment
operator|>
name|Segments
block|; }
decl_stmt|;
name|struct
name|CodeSection
range|:
name|Section
block|{
name|CodeSection
argument_list|()
operator|:
name|Section
argument_list|(
argument|wasm::WASM_SEC_CODE
argument_list|)
block|{}
specifier|static
name|bool
name|classof
argument_list|(
argument|const Section *S
argument_list|)
block|{
return|return
name|S
operator|->
name|Type
operator|==
name|wasm
operator|::
name|WASM_SEC_CODE
return|;
block|}
name|std
operator|::
name|vector
operator|<
name|Function
operator|>
name|Functions
block|; }
decl_stmt|;
name|struct
name|DataSection
range|:
name|Section
block|{
name|DataSection
argument_list|()
operator|:
name|Section
argument_list|(
argument|wasm::WASM_SEC_DATA
argument_list|)
block|{}
specifier|static
name|bool
name|classof
argument_list|(
argument|const Section *S
argument_list|)
block|{
return|return
name|S
operator|->
name|Type
operator|==
name|wasm
operator|::
name|WASM_SEC_DATA
return|;
block|}
name|std
operator|::
name|vector
operator|<
name|DataSegment
operator|>
name|Segments
block|; }
decl_stmt|;
struct|struct
name|Object
block|{
name|FileHeader
name|Header
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|Section
operator|>>
name|Sections
expr_stmt|;
block|}
struct|;
block|}
comment|// end namespace WasmYAML
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|std::unique_ptr<llvm::WasmYAML::Section>
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::WasmYAML::Signature
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::WasmYAML::ValueType
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::WasmYAML::Table
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::WasmYAML::Import
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::WasmYAML::Export
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::WasmYAML::ElemSegment
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::WasmYAML::Limits
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::WasmYAML::DataSegment
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::WasmYAML::Global
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::WasmYAML::Function
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::WasmYAML::LocalDecl
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::WasmYAML::Relocation
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::WasmYAML::NameEntry
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_FLOW_SEQUENCE_VECTOR
argument_list|(
argument|uint32_t
argument_list|)
end_macro

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|yaml
block|{
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|WasmYAML
operator|::
name|FileHeader
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|WasmYAML
operator|::
name|FileHeader
operator|&
name|FileHdr
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|WasmYAML
operator|::
name|Section
operator|>>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|std
operator|::
name|unique_ptr
operator|<
name|WasmYAML
operator|::
name|Section
operator|>
operator|&
name|Section
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|WasmYAML
operator|::
name|Object
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|WasmYAML
operator|::
name|Object
operator|&
name|Object
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|WasmYAML
operator|::
name|Import
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|WasmYAML
operator|::
name|Import
operator|&
name|Import
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|WasmYAML
operator|::
name|Export
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|WasmYAML
operator|::
name|Export
operator|&
name|Export
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|WasmYAML
operator|::
name|Global
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|WasmYAML
operator|::
name|Global
operator|&
name|Global
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|ScalarEnumerationTraits
operator|<
name|WasmYAML
operator|::
name|SectionType
operator|>
block|{
specifier|static
name|void
name|enumeration
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|WasmYAML
operator|::
name|SectionType
operator|&
name|Type
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|WasmYAML
operator|::
name|Signature
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|WasmYAML
operator|::
name|Signature
operator|&
name|Signature
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|WasmYAML
operator|::
name|Table
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|WasmYAML
operator|::
name|Table
operator|&
name|Table
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|WasmYAML
operator|::
name|Limits
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|WasmYAML
operator|::
name|Limits
operator|&
name|Limits
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|WasmYAML
operator|::
name|Function
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|WasmYAML
operator|::
name|Function
operator|&
name|Function
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|WasmYAML
operator|::
name|Relocation
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|WasmYAML
operator|::
name|Relocation
operator|&
name|Relocation
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|WasmYAML
operator|::
name|NameEntry
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|WasmYAML
operator|::
name|NameEntry
operator|&
name|NameEntry
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|WasmYAML
operator|::
name|LocalDecl
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|WasmYAML
operator|::
name|LocalDecl
operator|&
name|LocalDecl
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|wasm
operator|::
name|WasmInitExpr
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|wasm
operator|::
name|WasmInitExpr
operator|&
name|Expr
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|WasmYAML
operator|::
name|DataSegment
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|WasmYAML
operator|::
name|DataSegment
operator|&
name|Segment
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|WasmYAML
operator|::
name|ElemSegment
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|WasmYAML
operator|::
name|ElemSegment
operator|&
name|Segment
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|ScalarEnumerationTraits
operator|<
name|WasmYAML
operator|::
name|ValueType
operator|>
block|{
specifier|static
name|void
name|enumeration
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|WasmYAML
operator|::
name|ValueType
operator|&
name|Type
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|ScalarEnumerationTraits
operator|<
name|WasmYAML
operator|::
name|ExportKind
operator|>
block|{
specifier|static
name|void
name|enumeration
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|WasmYAML
operator|::
name|ExportKind
operator|&
name|Kind
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|ScalarEnumerationTraits
operator|<
name|WasmYAML
operator|::
name|TableType
operator|>
block|{
specifier|static
name|void
name|enumeration
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|WasmYAML
operator|::
name|TableType
operator|&
name|Type
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|ScalarEnumerationTraits
operator|<
name|WasmYAML
operator|::
name|Opcode
operator|>
block|{
specifier|static
name|void
name|enumeration
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|WasmYAML
operator|::
name|Opcode
operator|&
name|Opcode
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|ScalarEnumerationTraits
operator|<
name|WasmYAML
operator|::
name|RelocType
operator|>
block|{
specifier|static
name|void
name|enumeration
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|WasmYAML
operator|::
name|RelocType
operator|&
name|Kind
argument_list|)
block|; }
expr_stmt|;
block|}
comment|// end namespace yaml
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

