begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- StringToOffsetTable.h - Emit a big concatenated string ---*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_TABLEGEN_STRINGTOOFFSETTABLE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_TABLEGEN_STRINGTOOFFSETTABLE_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/SmallString.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringExtras.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/raw_ostream.h"
end_include

begin_include
include|#
directive|include
file|<cctype>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|/// StringToOffsetTable - This class uniques a bunch of nul-terminated strings
comment|/// and keeps track of their offset in a massive contiguous string allocation.
comment|/// It can then output this string blob and use indexes into the string to
comment|/// reference each piece.
name|class
name|StringToOffsetTable
block|{
name|StringMap
operator|<
name|unsigned
operator|>
name|StringOffset
expr_stmt|;
name|std
operator|::
name|string
name|AggregateString
expr_stmt|;
name|public
label|:
name|unsigned
name|GetOrAddStringOffset
parameter_list|(
name|StringRef
name|Str
parameter_list|,
name|bool
name|appendZero
init|=
name|true
parameter_list|)
block|{
name|auto
name|IterBool
init|=
name|StringOffset
operator|.
name|insert
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|Str
argument_list|,
name|AggregateString
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|IterBool
operator|.
name|second
condition|)
block|{
comment|// Add the string to the aggregate if this is the first time found.
name|AggregateString
operator|.
name|append
argument_list|(
name|Str
operator|.
name|begin
argument_list|()
argument_list|,
name|Str
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|appendZero
condition|)
name|AggregateString
operator|+=
literal|'\0'
expr_stmt|;
block|}
return|return
name|IterBool
operator|.
name|first
operator|->
name|second
return|;
block|}
name|void
name|EmitString
parameter_list|(
name|raw_ostream
modifier|&
name|O
parameter_list|)
block|{
comment|// Escape the string.
name|SmallString
operator|<
literal|256
operator|>
name|Str
expr_stmt|;
name|raw_svector_ostream
argument_list|(
name|Str
argument_list|)
operator|.
name|write_escaped
argument_list|(
name|AggregateString
argument_list|)
expr_stmt|;
name|AggregateString
operator|=
name|Str
operator|.
name|str
argument_list|()
expr_stmt|;
name|O
operator|<<
literal|"    \""
expr_stmt|;
name|unsigned
name|CharsPrinted
init|=
literal|0
decl_stmt|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|,
name|e
init|=
name|AggregateString
operator|.
name|size
argument_list|()
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|CharsPrinted
operator|>
literal|70
condition|)
block|{
name|O
operator|<<
literal|"\"\n    \""
expr_stmt|;
name|CharsPrinted
operator|=
literal|0
expr_stmt|;
block|}
name|O
operator|<<
name|AggregateString
index|[
name|i
index|]
expr_stmt|;
operator|++
name|CharsPrinted
expr_stmt|;
comment|// Print escape sequences all together.
if|if
condition|(
name|AggregateString
index|[
name|i
index|]
operator|!=
literal|'\\'
condition|)
continue|continue;
name|assert
argument_list|(
name|i
operator|+
literal|1
operator|<
name|AggregateString
operator|.
name|size
argument_list|()
operator|&&
literal|"Incomplete escape sequence!"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isdigit
argument_list|(
name|AggregateString
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
condition|)
block|{
name|assert
argument_list|(
name|isdigit
argument_list|(
name|AggregateString
index|[
name|i
operator|+
literal|2
index|]
argument_list|)
operator|&&
name|isdigit
argument_list|(
name|AggregateString
index|[
name|i
operator|+
literal|3
index|]
argument_list|)
operator|&&
literal|"Expected 3 digit octal escape!"
argument_list|)
expr_stmt|;
name|O
operator|<<
name|AggregateString
index|[
operator|++
name|i
index|]
expr_stmt|;
name|O
operator|<<
name|AggregateString
index|[
operator|++
name|i
index|]
expr_stmt|;
name|O
operator|<<
name|AggregateString
index|[
operator|++
name|i
index|]
expr_stmt|;
name|CharsPrinted
operator|+=
literal|3
expr_stmt|;
block|}
else|else
block|{
name|O
operator|<<
name|AggregateString
index|[
operator|++
name|i
index|]
expr_stmt|;
operator|++
name|CharsPrinted
expr_stmt|;
block|}
block|}
name|O
operator|<<
literal|"\""
expr_stmt|;
block|}
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

