begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- YAMLXRayRecord.h - XRay Record YAML Support Definitions ------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Types and traits specialisations for YAML I/O of XRay log entries.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_XRAY_YAML_XRAY_RECORD_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_XRAY_YAML_XRAY_RECORD_H
end_define

begin_include
include|#
directive|include
file|<type_traits>
end_include

begin_include
include|#
directive|include
file|"llvm/Support/YAMLTraits.h"
end_include

begin_include
include|#
directive|include
file|"llvm/XRay/XRayRecord.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|xray
block|{
struct|struct
name|YAMLXRayFileHeader
block|{
name|uint16_t
name|Version
decl_stmt|;
name|uint16_t
name|Type
decl_stmt|;
name|bool
name|ConstantTSC
decl_stmt|;
name|bool
name|NonstopTSC
decl_stmt|;
name|uint64_t
name|CycleFrequency
decl_stmt|;
block|}
struct|;
struct|struct
name|YAMLXRayRecord
block|{
name|uint16_t
name|RecordType
decl_stmt|;
name|uint16_t
name|CPU
decl_stmt|;
name|RecordTypes
name|Type
decl_stmt|;
name|int32_t
name|FuncId
decl_stmt|;
name|std
operator|::
name|string
name|Function
expr_stmt|;
name|uint64_t
name|TSC
decl_stmt|;
name|uint32_t
name|TId
decl_stmt|;
block|}
struct|;
struct|struct
name|YAMLXRayTrace
block|{
name|YAMLXRayFileHeader
name|Header
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|YAMLXRayRecord
operator|>
name|Records
expr_stmt|;
block|}
struct|;
block|}
comment|// namespace xray
name|namespace
name|yaml
block|{
comment|// YAML Traits
comment|// -----------
name|template
operator|<
operator|>
expr|struct
name|ScalarEnumerationTraits
operator|<
name|xray
operator|::
name|RecordTypes
operator|>
block|{
specifier|static
name|void
name|enumeration
argument_list|(
argument|IO&IO
argument_list|,
argument|xray::RecordTypes&Type
argument_list|)
block|{
name|IO
operator|.
name|enumCase
argument_list|(
name|Type
argument_list|,
literal|"function-enter"
argument_list|,
name|xray
operator|::
name|RecordTypes
operator|::
name|ENTER
argument_list|)
block|;
name|IO
operator|.
name|enumCase
argument_list|(
name|Type
argument_list|,
literal|"function-exit"
argument_list|,
name|xray
operator|::
name|RecordTypes
operator|::
name|EXIT
argument_list|)
block|;   }
block|}
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|xray
operator|::
name|YAMLXRayFileHeader
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
argument|IO&IO
argument_list|,
argument|xray::YAMLXRayFileHeader&Header
argument_list|)
block|{
name|IO
operator|.
name|mapRequired
argument_list|(
literal|"version"
argument_list|,
name|Header
operator|.
name|Version
argument_list|)
block|;
name|IO
operator|.
name|mapRequired
argument_list|(
literal|"type"
argument_list|,
name|Header
operator|.
name|Type
argument_list|)
block|;
name|IO
operator|.
name|mapRequired
argument_list|(
literal|"constant-tsc"
argument_list|,
name|Header
operator|.
name|ConstantTSC
argument_list|)
block|;
name|IO
operator|.
name|mapRequired
argument_list|(
literal|"nonstop-tsc"
argument_list|,
name|Header
operator|.
name|NonstopTSC
argument_list|)
block|;
name|IO
operator|.
name|mapRequired
argument_list|(
literal|"cycle-frequency"
argument_list|,
name|Header
operator|.
name|CycleFrequency
argument_list|)
block|;   }
block|}
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|xray
operator|::
name|YAMLXRayRecord
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
argument|IO&IO
argument_list|,
argument|xray::YAMLXRayRecord&Record
argument_list|)
block|{
comment|// FIXME: Make this type actually be descriptive
name|IO
operator|.
name|mapRequired
argument_list|(
literal|"type"
argument_list|,
name|Record
operator|.
name|RecordType
argument_list|)
block|;
name|IO
operator|.
name|mapRequired
argument_list|(
literal|"func-id"
argument_list|,
name|Record
operator|.
name|FuncId
argument_list|)
block|;
name|IO
operator|.
name|mapOptional
argument_list|(
literal|"function"
argument_list|,
name|Record
operator|.
name|Function
argument_list|)
block|;
name|IO
operator|.
name|mapRequired
argument_list|(
literal|"cpu"
argument_list|,
name|Record
operator|.
name|CPU
argument_list|)
block|;
name|IO
operator|.
name|mapRequired
argument_list|(
literal|"thread"
argument_list|,
name|Record
operator|.
name|TId
argument_list|)
block|;
name|IO
operator|.
name|mapRequired
argument_list|(
literal|"kind"
argument_list|,
name|Record
operator|.
name|Type
argument_list|)
block|;
name|IO
operator|.
name|mapRequired
argument_list|(
literal|"tsc"
argument_list|,
name|Record
operator|.
name|TSC
argument_list|)
block|;   }
specifier|static
name|constexpr
name|bool
name|flow
operator|=
name|true
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|xray
operator|::
name|YAMLXRayTrace
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
argument|IO&IO
argument_list|,
argument|xray::YAMLXRayTrace&Trace
argument_list|)
block|{
comment|// A trace file contains two parts, the header and the list of all the
comment|// trace records.
name|IO
operator|.
name|mapRequired
argument_list|(
literal|"header"
argument_list|,
name|Trace
operator|.
name|Header
argument_list|)
block|;
name|IO
operator|.
name|mapRequired
argument_list|(
literal|"records"
argument_list|,
name|Trace
operator|.
name|Records
argument_list|)
block|;   }
block|}
expr_stmt|;
block|}
comment|// namespace yaml
block|}
end_decl_stmt

begin_comment
comment|// namespace llvm
end_comment

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|xray::YAMLXRayRecord
argument_list|)
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_XRAY_YAML_XRAY_RECORD_H
end_comment

end_unit

