begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- Linker.h - Module Linker Interface -----------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LINKER_LINKER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LINKER_LINKER_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/DiagnosticInfo.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|Module
decl_stmt|;
name|class
name|StructType
decl_stmt|;
name|class
name|Type
decl_stmt|;
comment|/// This class provides the core functionality of linking in LLVM. It keeps a
comment|/// pointer to the merged module so far. It doesn't take ownership of the
comment|/// module since it is assumed that the user of this class will want to do
comment|/// something with it after the linking.
name|class
name|Linker
block|{
name|public
label|:
struct|struct
name|StructTypeKeyInfo
block|{
struct|struct
name|KeyTy
block|{
name|ArrayRef
operator|<
name|Type
operator|*
operator|>
name|ETypes
expr_stmt|;
name|bool
name|IsPacked
decl_stmt|;
name|KeyTy
argument_list|(
argument|ArrayRef<Type *> E
argument_list|,
argument|bool P
argument_list|)
empty_stmt|;
name|KeyTy
argument_list|(
specifier|const
name|StructType
operator|*
name|ST
argument_list|)
expr_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|KeyTy
operator|&
name|that
operator|)
specifier|const
expr_stmt|;
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|KeyTy
operator|&
name|that
operator|)
specifier|const
expr_stmt|;
block|}
struct|;
specifier|static
name|StructType
modifier|*
name|getEmptyKey
parameter_list|()
function_decl|;
specifier|static
name|StructType
modifier|*
name|getTombstoneKey
parameter_list|()
function_decl|;
specifier|static
name|unsigned
name|getHashValue
parameter_list|(
specifier|const
name|KeyTy
modifier|&
name|Key
parameter_list|)
function_decl|;
specifier|static
name|unsigned
name|getHashValue
parameter_list|(
specifier|const
name|StructType
modifier|*
name|ST
parameter_list|)
function_decl|;
specifier|static
name|bool
name|isEqual
parameter_list|(
specifier|const
name|KeyTy
modifier|&
name|LHS
parameter_list|,
specifier|const
name|StructType
modifier|*
name|RHS
parameter_list|)
function_decl|;
specifier|static
name|bool
name|isEqual
parameter_list|(
specifier|const
name|StructType
modifier|*
name|LHS
parameter_list|,
specifier|const
name|StructType
modifier|*
name|RHS
parameter_list|)
function_decl|;
block|}
struct|;
typedef|typedef
name|DenseSet
operator|<
name|StructType
operator|*
operator|,
name|StructTypeKeyInfo
operator|>
name|NonOpaqueStructTypeSet
expr_stmt|;
typedef|typedef
name|DenseSet
operator|<
name|StructType
operator|*
operator|>
name|OpaqueStructTypeSet
expr_stmt|;
struct|struct
name|IdentifiedStructTypeSet
block|{
comment|// The set of opaque types is the composite module.
name|OpaqueStructTypeSet
name|OpaqueStructTypes
decl_stmt|;
comment|// The set of identified but non opaque structures in the composite module.
name|NonOpaqueStructTypeSet
name|NonOpaqueStructTypes
decl_stmt|;
name|void
name|addNonOpaque
parameter_list|(
name|StructType
modifier|*
name|Ty
parameter_list|)
function_decl|;
name|void
name|switchToNonOpaque
parameter_list|(
name|StructType
modifier|*
name|Ty
parameter_list|)
function_decl|;
name|void
name|addOpaque
parameter_list|(
name|StructType
modifier|*
name|Ty
parameter_list|)
function_decl|;
name|StructType
modifier|*
name|findNonOpaque
argument_list|(
name|ArrayRef
operator|<
name|Type
operator|*
operator|>
name|ETypes
argument_list|,
name|bool
name|IsPacked
argument_list|)
decl_stmt|;
name|bool
name|hasType
parameter_list|(
name|StructType
modifier|*
name|Ty
parameter_list|)
function_decl|;
block|}
struct|;
name|Linker
argument_list|(
argument|Module *M
argument_list|,
argument|DiagnosticHandlerFunction DiagnosticHandler
argument_list|)
empty_stmt|;
name|Linker
argument_list|(
name|Module
operator|*
name|M
argument_list|)
expr_stmt|;
operator|~
name|Linker
argument_list|()
expr_stmt|;
name|Module
operator|*
name|getModule
argument_list|()
specifier|const
block|{
return|return
name|Composite
return|;
block|}
name|void
name|deleteModule
parameter_list|()
function_decl|;
comment|/// \brief Link \p Src into the composite. The source is destroyed.
comment|/// Passing OverrideSymbols as true will have symbols from Src
comment|/// shadow those in the Dest.
comment|/// Returns true on error.
name|bool
name|linkInModule
parameter_list|(
name|Module
modifier|*
name|Src
parameter_list|,
name|bool
name|OverrideSymbols
init|=
name|false
parameter_list|)
function_decl|;
comment|/// \brief Set the composite to the passed-in module.
name|void
name|setModule
parameter_list|(
name|Module
modifier|*
name|Dst
parameter_list|)
function_decl|;
specifier|static
name|bool
name|LinkModules
parameter_list|(
name|Module
modifier|*
name|Dest
parameter_list|,
name|Module
modifier|*
name|Src
parameter_list|,
name|DiagnosticHandlerFunction
name|DiagnosticHandler
parameter_list|)
function_decl|;
specifier|static
name|bool
name|LinkModules
parameter_list|(
name|Module
modifier|*
name|Dest
parameter_list|,
name|Module
modifier|*
name|Src
parameter_list|)
function_decl|;
name|private
label|:
name|void
name|init
parameter_list|(
name|Module
modifier|*
name|M
parameter_list|,
name|DiagnosticHandlerFunction
name|DiagnosticHandler
parameter_list|)
function_decl|;
name|Module
modifier|*
name|Composite
decl_stmt|;
name|IdentifiedStructTypeSet
name|IdentifiedStructTypes
decl_stmt|;
name|DiagnosticHandlerFunction
name|DiagnosticHandler
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

