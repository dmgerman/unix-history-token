begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- MCDwarf.h - Machine Code Dwarf support -------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file contains the declaration of the MCDwarfFile to support the dwarf
end_comment

begin_comment
comment|// .file directive and the .loc directive.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_MC_MCDWARF_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_MC_MCDWARF_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/MapVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MCSection.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Dwarf.h"
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<utility>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|ArrayRef
expr_stmt|;
name|class
name|raw_ostream
decl_stmt|;
name|class
name|MCAsmBackend
decl_stmt|;
name|class
name|MCContext
decl_stmt|;
name|class
name|MCObjectStreamer
decl_stmt|;
name|class
name|MCStreamer
decl_stmt|;
name|class
name|MCSymbol
decl_stmt|;
name|class
name|SourceMgr
decl_stmt|;
name|class
name|SMLoc
decl_stmt|;
comment|/// \brief Instances of this class represent the name of the dwarf
comment|/// .file directive and its associated dwarf file number in the MC file,
comment|/// and MCDwarfFile's are created and uniqued by the MCContext class where
comment|/// the file number for each is its index into the vector of DwarfFiles (note
comment|/// index 0 is not used and not a valid dwarf file number).
struct|struct
name|MCDwarfFile
block|{
comment|// \brief The base name of the file without its directory path.
comment|// The StringRef references memory allocated in the MCContext.
name|std
operator|::
name|string
name|Name
expr_stmt|;
comment|// \brief The index into the list of directory names for this file name.
name|unsigned
name|DirIndex
decl_stmt|;
block|}
struct|;
comment|/// \brief Instances of this class represent the information from a
comment|/// dwarf .loc directive.
name|class
name|MCDwarfLoc
block|{
name|uint32_t
name|FileNum
decl_stmt|;
name|uint32_t
name|Line
decl_stmt|;
name|uint16_t
name|Column
decl_stmt|;
comment|// Flags (see #define's below)
name|uint8_t
name|Flags
decl_stmt|;
name|uint8_t
name|Isa
decl_stmt|;
name|uint32_t
name|Discriminator
decl_stmt|;
comment|// Flag that indicates the initial value of the is_stmt_start flag.
define|#
directive|define
name|DWARF2_LINE_DEFAULT_IS_STMT
value|1
define|#
directive|define
name|DWARF2_FLAG_IS_STMT
value|(1<< 0)
define|#
directive|define
name|DWARF2_FLAG_BASIC_BLOCK
value|(1<< 1)
define|#
directive|define
name|DWARF2_FLAG_PROLOGUE_END
value|(1<< 2)
define|#
directive|define
name|DWARF2_FLAG_EPILOGUE_BEGIN
value|(1<< 3)
name|private
label|:
comment|// MCContext manages these
name|friend
name|class
name|MCContext
decl_stmt|;
name|friend
name|class
name|MCDwarfLineEntry
decl_stmt|;
name|MCDwarfLoc
argument_list|(
argument|unsigned fileNum
argument_list|,
argument|unsigned line
argument_list|,
argument|unsigned column
argument_list|,
argument|unsigned flags
argument_list|,
argument|unsigned isa
argument_list|,
argument|unsigned discriminator
argument_list|)
block|:
name|FileNum
argument_list|(
name|fileNum
argument_list|)
operator|,
name|Line
argument_list|(
name|line
argument_list|)
operator|,
name|Column
argument_list|(
name|column
argument_list|)
operator|,
name|Flags
argument_list|(
name|flags
argument_list|)
operator|,
name|Isa
argument_list|(
name|isa
argument_list|)
operator|,
name|Discriminator
argument_list|(
argument|discriminator
argument_list|)
block|{}
comment|// Allow the default copy constructor and assignment operator to be used
comment|// for an MCDwarfLoc object.
name|public
operator|:
comment|/// \brief Get the FileNum of this MCDwarfLoc.
name|unsigned
name|getFileNum
argument_list|()
specifier|const
block|{
return|return
name|FileNum
return|;
block|}
comment|/// \brief Get the Line of this MCDwarfLoc.
name|unsigned
name|getLine
argument_list|()
specifier|const
block|{
return|return
name|Line
return|;
block|}
comment|/// \brief Get the Column of this MCDwarfLoc.
name|unsigned
name|getColumn
argument_list|()
specifier|const
block|{
return|return
name|Column
return|;
block|}
comment|/// \brief Get the Flags of this MCDwarfLoc.
name|unsigned
name|getFlags
argument_list|()
specifier|const
block|{
return|return
name|Flags
return|;
block|}
comment|/// \brief Get the Isa of this MCDwarfLoc.
name|unsigned
name|getIsa
argument_list|()
specifier|const
block|{
return|return
name|Isa
return|;
block|}
comment|/// \brief Get the Discriminator of this MCDwarfLoc.
name|unsigned
name|getDiscriminator
argument_list|()
specifier|const
block|{
return|return
name|Discriminator
return|;
block|}
comment|/// \brief Set the FileNum of this MCDwarfLoc.
name|void
name|setFileNum
parameter_list|(
name|unsigned
name|fileNum
parameter_list|)
block|{
name|FileNum
operator|=
name|fileNum
expr_stmt|;
block|}
comment|/// \brief Set the Line of this MCDwarfLoc.
name|void
name|setLine
parameter_list|(
name|unsigned
name|line
parameter_list|)
block|{
name|Line
operator|=
name|line
expr_stmt|;
block|}
comment|/// \brief Set the Column of this MCDwarfLoc.
name|void
name|setColumn
parameter_list|(
name|unsigned
name|column
parameter_list|)
block|{
name|assert
argument_list|(
name|column
operator|<=
name|UINT16_MAX
argument_list|)
expr_stmt|;
name|Column
operator|=
name|column
expr_stmt|;
block|}
comment|/// \brief Set the Flags of this MCDwarfLoc.
name|void
name|setFlags
parameter_list|(
name|unsigned
name|flags
parameter_list|)
block|{
name|assert
argument_list|(
name|flags
operator|<=
name|UINT8_MAX
argument_list|)
expr_stmt|;
name|Flags
operator|=
name|flags
expr_stmt|;
block|}
comment|/// \brief Set the Isa of this MCDwarfLoc.
name|void
name|setIsa
parameter_list|(
name|unsigned
name|isa
parameter_list|)
block|{
name|assert
argument_list|(
name|isa
operator|<=
name|UINT8_MAX
argument_list|)
expr_stmt|;
name|Isa
operator|=
name|isa
expr_stmt|;
block|}
comment|/// \brief Set the Discriminator of this MCDwarfLoc.
name|void
name|setDiscriminator
parameter_list|(
name|unsigned
name|discriminator
parameter_list|)
block|{
name|Discriminator
operator|=
name|discriminator
expr_stmt|;
block|}
block|}
empty_stmt|;
comment|/// \brief Instances of this class represent the line information for
comment|/// the dwarf line table entries.  Which is created after a machine
comment|/// instruction is assembled and uses an address from a temporary label
comment|/// created at the current address in the current section and the info from
comment|/// the last .loc directive seen as stored in the context.
name|class
name|MCDwarfLineEntry
range|:
name|public
name|MCDwarfLoc
block|{
name|MCSymbol
operator|*
name|Label
block|;
name|private
operator|:
comment|// Allow the default copy constructor and assignment operator to be used
comment|// for an MCDwarfLineEntry object.
name|public
operator|:
comment|// Constructor to create an MCDwarfLineEntry given a symbol and the dwarf loc.
name|MCDwarfLineEntry
argument_list|(
argument|MCSymbol *label
argument_list|,
argument|const MCDwarfLoc loc
argument_list|)
operator|:
name|MCDwarfLoc
argument_list|(
name|loc
argument_list|)
block|,
name|Label
argument_list|(
argument|label
argument_list|)
block|{}
name|MCSymbol
operator|*
name|getLabel
argument_list|()
specifier|const
block|{
return|return
name|Label
return|;
block|}
comment|// This is called when an instruction is assembled into the specified
comment|// section and if there is information from the last .loc directive that
comment|// has yet to have a line entry made for it is made.
specifier|static
name|void
name|Make
argument_list|(
name|MCObjectStreamer
operator|*
name|MCOS
argument_list|,
name|MCSection
operator|*
name|Section
argument_list|)
block|; }
decl_stmt|;
comment|/// \brief Instances of this class represent the line information for a compile
comment|/// unit where machine instructions have been assembled after seeing .loc
comment|/// directives.  This is the information used to build the dwarf line
comment|/// table for a section.
name|class
name|MCLineSection
block|{
name|public
label|:
comment|// \brief Add an entry to this MCLineSection's line entries.
name|void
name|addLineEntry
parameter_list|(
specifier|const
name|MCDwarfLineEntry
modifier|&
name|LineEntry
parameter_list|,
name|MCSection
modifier|*
name|Sec
parameter_list|)
block|{
name|MCLineDivisions
index|[
name|Sec
index|]
operator|.
name|push_back
argument_list|(
name|LineEntry
argument_list|)
expr_stmt|;
block|}
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|MCDwarfLineEntry
operator|>
name|MCDwarfLineEntryCollection
expr_stmt|;
typedef|typedef
name|MCDwarfLineEntryCollection
operator|::
name|iterator
name|iterator
expr_stmt|;
typedef|typedef
name|MCDwarfLineEntryCollection
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
typedef|typedef
name|MapVector
operator|<
name|MCSection
operator|*
operator|,
name|MCDwarfLineEntryCollection
operator|>
name|MCLineDivisionMap
expr_stmt|;
name|private
label|:
comment|// A collection of MCDwarfLineEntry for each section.
name|MCLineDivisionMap
name|MCLineDivisions
decl_stmt|;
name|public
label|:
comment|// Returns the collection of MCDwarfLineEntry for a given Compile Unit ID.
specifier|const
name|MCLineDivisionMap
operator|&
name|getMCLineEntries
argument_list|()
specifier|const
block|{
return|return
name|MCLineDivisions
return|;
block|}
block|}
empty_stmt|;
struct|struct
name|MCDwarfLineTableParams
block|{
comment|/// First special line opcode - leave room for the standard opcodes.
comment|/// Note: If you want to change this, you'll have to update the
comment|/// "StandardOpcodeLengths" table that is emitted in
comment|/// \c Emit().
name|uint8_t
name|DWARF2LineOpcodeBase
init|=
literal|13
decl_stmt|;
comment|/// Minimum line offset in a special line info. opcode.  The value
comment|/// -5 was chosen to give a reasonable range of values.
name|int8_t
name|DWARF2LineBase
init|=
operator|-
literal|5
decl_stmt|;
comment|/// Range of line offsets in a special line info. opcode.
name|uint8_t
name|DWARF2LineRange
init|=
literal|14
decl_stmt|;
block|}
struct|;
struct|struct
name|MCDwarfLineTableHeader
block|{
name|MCSymbol
modifier|*
name|Label
decl_stmt|;
name|SmallVector
operator|<
name|std
operator|::
name|string
operator|,
literal|3
operator|>
name|MCDwarfDirs
expr_stmt|;
name|SmallVector
operator|<
name|MCDwarfFile
operator|,
literal|3
operator|>
name|MCDwarfFiles
expr_stmt|;
name|StringMap
operator|<
name|unsigned
operator|>
name|SourceIdMap
expr_stmt|;
name|StringRef
name|CompilationDir
decl_stmt|;
name|MCDwarfLineTableHeader
argument_list|()
operator|:
name|Label
argument_list|(
argument|nullptr
argument_list|)
block|{}
name|unsigned
name|getFile
argument_list|(
argument|StringRef&Directory
argument_list|,
argument|StringRef&FileName
argument_list|,
argument|unsigned FileNumber =
literal|0
argument_list|)
expr_stmt|;
name|std
operator|::
name|pair
operator|<
name|MCSymbol
operator|*
operator|,
name|MCSymbol
operator|*
operator|>
name|Emit
argument_list|(
argument|MCStreamer *MCOS
argument_list|,
argument|MCDwarfLineTableParams Params
argument_list|)
specifier|const
expr_stmt|;
name|std
operator|::
name|pair
operator|<
name|MCSymbol
operator|*
operator|,
name|MCSymbol
operator|*
operator|>
name|Emit
argument_list|(
argument|MCStreamer *MCOS
argument_list|,
argument|MCDwarfLineTableParams Params
argument_list|,
argument|ArrayRef<char> SpecialOpcodeLengths
argument_list|)
specifier|const
expr_stmt|;
block|}
struct|;
name|class
name|MCDwarfDwoLineTable
block|{
name|MCDwarfLineTableHeader
name|Header
decl_stmt|;
name|public
label|:
name|void
name|setCompilationDir
parameter_list|(
name|StringRef
name|CompilationDir
parameter_list|)
block|{
name|Header
operator|.
name|CompilationDir
operator|=
name|CompilationDir
expr_stmt|;
block|}
name|unsigned
name|getFile
parameter_list|(
name|StringRef
name|Directory
parameter_list|,
name|StringRef
name|FileName
parameter_list|)
block|{
return|return
name|Header
operator|.
name|getFile
argument_list|(
name|Directory
argument_list|,
name|FileName
argument_list|)
return|;
block|}
name|void
name|Emit
argument_list|(
name|MCStreamer
operator|&
name|MCOS
argument_list|,
name|MCDwarfLineTableParams
name|Params
argument_list|)
decl|const
decl_stmt|;
block|}
empty_stmt|;
name|class
name|MCDwarfLineTable
block|{
name|MCDwarfLineTableHeader
name|Header
decl_stmt|;
name|MCLineSection
name|MCLineSections
decl_stmt|;
name|public
label|:
comment|// This emits the Dwarf file and the line tables for all Compile Units.
specifier|static
name|void
name|Emit
parameter_list|(
name|MCObjectStreamer
modifier|*
name|MCOS
parameter_list|,
name|MCDwarfLineTableParams
name|Params
parameter_list|)
function_decl|;
comment|// This emits the Dwarf file and the line tables for a given Compile Unit.
name|void
name|EmitCU
argument_list|(
name|MCObjectStreamer
operator|*
name|MCOS
argument_list|,
name|MCDwarfLineTableParams
name|Params
argument_list|)
decl|const
decl_stmt|;
name|unsigned
name|getFile
parameter_list|(
name|StringRef
modifier|&
name|Directory
parameter_list|,
name|StringRef
modifier|&
name|FileName
parameter_list|,
name|unsigned
name|FileNumber
init|=
literal|0
parameter_list|)
function_decl|;
name|MCSymbol
operator|*
name|getLabel
argument_list|()
specifier|const
block|{
return|return
name|Header
operator|.
name|Label
return|;
block|}
name|void
name|setLabel
parameter_list|(
name|MCSymbol
modifier|*
name|Label
parameter_list|)
block|{
name|Header
operator|.
name|Label
operator|=
name|Label
expr_stmt|;
block|}
name|void
name|setCompilationDir
parameter_list|(
name|StringRef
name|CompilationDir
parameter_list|)
block|{
name|Header
operator|.
name|CompilationDir
operator|=
name|CompilationDir
expr_stmt|;
block|}
specifier|const
name|SmallVectorImpl
operator|<
name|std
operator|::
name|string
operator|>
operator|&
name|getMCDwarfDirs
argument_list|()
specifier|const
block|{
return|return
name|Header
operator|.
name|MCDwarfDirs
return|;
block|}
name|SmallVectorImpl
operator|<
name|std
operator|::
name|string
operator|>
operator|&
name|getMCDwarfDirs
argument_list|()
block|{
return|return
name|Header
operator|.
name|MCDwarfDirs
return|;
block|}
specifier|const
name|SmallVectorImpl
operator|<
name|MCDwarfFile
operator|>
operator|&
name|getMCDwarfFiles
argument_list|()
specifier|const
block|{
return|return
name|Header
operator|.
name|MCDwarfFiles
return|;
block|}
name|SmallVectorImpl
operator|<
name|MCDwarfFile
operator|>
operator|&
name|getMCDwarfFiles
argument_list|()
block|{
return|return
name|Header
operator|.
name|MCDwarfFiles
return|;
block|}
specifier|const
name|MCLineSection
operator|&
name|getMCLineSections
argument_list|()
specifier|const
block|{
return|return
name|MCLineSections
return|;
block|}
name|MCLineSection
modifier|&
name|getMCLineSections
parameter_list|()
block|{
return|return
name|MCLineSections
return|;
block|}
block|}
empty_stmt|;
name|class
name|MCDwarfLineAddr
block|{
name|public
label|:
comment|/// Utility function to encode a Dwarf pair of LineDelta and AddrDeltas.
specifier|static
name|void
name|Encode
parameter_list|(
name|MCContext
modifier|&
name|Context
parameter_list|,
name|MCDwarfLineTableParams
name|Params
parameter_list|,
name|int64_t
name|LineDelta
parameter_list|,
name|uint64_t
name|AddrDelta
parameter_list|,
name|raw_ostream
modifier|&
name|OS
parameter_list|)
function_decl|;
comment|/// Utility function to emit the encoding to a streamer.
specifier|static
name|void
name|Emit
parameter_list|(
name|MCStreamer
modifier|*
name|MCOS
parameter_list|,
name|MCDwarfLineTableParams
name|Params
parameter_list|,
name|int64_t
name|LineDelta
parameter_list|,
name|uint64_t
name|AddrDelta
parameter_list|)
function_decl|;
block|}
empty_stmt|;
name|class
name|MCGenDwarfInfo
block|{
name|public
label|:
comment|//
comment|// When generating dwarf for assembly source files this emits the Dwarf
comment|// sections.
comment|//
specifier|static
name|void
name|Emit
parameter_list|(
name|MCStreamer
modifier|*
name|MCOS
parameter_list|)
function_decl|;
block|}
empty_stmt|;
comment|// When generating dwarf for assembly source files this is the info that is
comment|// needed to be gathered for each symbol that will have a dwarf label.
name|class
name|MCGenDwarfLabelEntry
block|{
name|private
label|:
comment|// Name of the symbol without a leading underbar, if any.
name|StringRef
name|Name
decl_stmt|;
comment|// The dwarf file number this symbol is in.
name|unsigned
name|FileNumber
decl_stmt|;
comment|// The line number this symbol is at.
name|unsigned
name|LineNumber
decl_stmt|;
comment|// The low_pc for the dwarf label is taken from this symbol.
name|MCSymbol
modifier|*
name|Label
decl_stmt|;
name|public
label|:
name|MCGenDwarfLabelEntry
argument_list|(
argument|StringRef name
argument_list|,
argument|unsigned fileNumber
argument_list|,
argument|unsigned lineNumber
argument_list|,
argument|MCSymbol *label
argument_list|)
block|:
name|Name
argument_list|(
name|name
argument_list|)
operator|,
name|FileNumber
argument_list|(
name|fileNumber
argument_list|)
operator|,
name|LineNumber
argument_list|(
name|lineNumber
argument_list|)
operator|,
name|Label
argument_list|(
argument|label
argument_list|)
block|{}
name|StringRef
name|getName
argument_list|()
specifier|const
block|{
return|return
name|Name
return|;
block|}
name|unsigned
name|getFileNumber
argument_list|()
specifier|const
block|{
return|return
name|FileNumber
return|;
block|}
name|unsigned
name|getLineNumber
argument_list|()
specifier|const
block|{
return|return
name|LineNumber
return|;
block|}
name|MCSymbol
operator|*
name|getLabel
argument_list|()
specifier|const
block|{
return|return
name|Label
return|;
block|}
comment|// This is called when label is created when we are generating dwarf for
comment|// assembly source files.
specifier|static
name|void
name|Make
parameter_list|(
name|MCSymbol
modifier|*
name|Symbol
parameter_list|,
name|MCStreamer
modifier|*
name|MCOS
parameter_list|,
name|SourceMgr
modifier|&
name|SrcMgr
parameter_list|,
name|SMLoc
modifier|&
name|Loc
parameter_list|)
function_decl|;
block|}
empty_stmt|;
name|class
name|MCCFIInstruction
block|{
name|public
label|:
enum|enum
name|OpType
block|{
name|OpSameValue
block|,
name|OpRememberState
block|,
name|OpRestoreState
block|,
name|OpOffset
block|,
name|OpDefCfaRegister
block|,
name|OpDefCfaOffset
block|,
name|OpDefCfa
block|,
name|OpRelOffset
block|,
name|OpAdjustCfaOffset
block|,
name|OpEscape
block|,
name|OpRestore
block|,
name|OpUndefined
block|,
name|OpRegister
block|,
name|OpWindowSave
block|,
name|OpGnuArgsSize
block|}
enum|;
name|private
label|:
name|OpType
name|Operation
decl_stmt|;
name|MCSymbol
modifier|*
name|Label
decl_stmt|;
name|unsigned
name|Register
decl_stmt|;
union|union
block|{
name|int
name|Offset
decl_stmt|;
name|unsigned
name|Register2
decl_stmt|;
block|}
union|;
name|std
operator|::
name|vector
operator|<
name|char
operator|>
name|Values
expr_stmt|;
name|MCCFIInstruction
argument_list|(
argument|OpType Op
argument_list|,
argument|MCSymbol *L
argument_list|,
argument|unsigned R
argument_list|,
argument|int O
argument_list|,
argument|StringRef V
argument_list|)
block|:
name|Operation
argument_list|(
name|Op
argument_list|)
operator|,
name|Label
argument_list|(
name|L
argument_list|)
operator|,
name|Register
argument_list|(
name|R
argument_list|)
operator|,
name|Offset
argument_list|(
name|O
argument_list|)
operator|,
name|Values
argument_list|(
argument|V.begin()
argument_list|,
argument|V.end()
argument_list|)
block|{
name|assert
argument_list|(
name|Op
operator|!=
name|OpRegister
argument_list|)
block|;   }
name|MCCFIInstruction
argument_list|(
argument|OpType Op
argument_list|,
argument|MCSymbol *L
argument_list|,
argument|unsigned R1
argument_list|,
argument|unsigned R2
argument_list|)
operator|:
name|Operation
argument_list|(
name|Op
argument_list|)
operator|,
name|Label
argument_list|(
name|L
argument_list|)
operator|,
name|Register
argument_list|(
name|R1
argument_list|)
operator|,
name|Register2
argument_list|(
argument|R2
argument_list|)
block|{
name|assert
argument_list|(
name|Op
operator|==
name|OpRegister
argument_list|)
block|;   }
name|public
operator|:
comment|/// \brief .cfi_def_cfa defines a rule for computing CFA as: take address from
comment|/// Register and add Offset to it.
specifier|static
name|MCCFIInstruction
name|createDefCfa
argument_list|(
argument|MCSymbol *L
argument_list|,
argument|unsigned Register
argument_list|,
argument|int Offset
argument_list|)
block|{
return|return
name|MCCFIInstruction
argument_list|(
name|OpDefCfa
argument_list|,
name|L
argument_list|,
name|Register
argument_list|,
operator|-
name|Offset
argument_list|,
literal|""
argument_list|)
return|;
block|}
comment|/// \brief .cfi_def_cfa_register modifies a rule for computing CFA. From now
comment|/// on Register will be used instead of the old one. Offset remains the same.
specifier|static
name|MCCFIInstruction
name|createDefCfaRegister
parameter_list|(
name|MCSymbol
modifier|*
name|L
parameter_list|,
name|unsigned
name|Register
parameter_list|)
block|{
return|return
name|MCCFIInstruction
argument_list|(
name|OpDefCfaRegister
argument_list|,
name|L
argument_list|,
name|Register
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
return|;
block|}
comment|/// \brief .cfi_def_cfa_offset modifies a rule for computing CFA. Register
comment|/// remains the same, but offset is new. Note that it is the absolute offset
comment|/// that will be added to a defined register to the compute CFA address.
specifier|static
name|MCCFIInstruction
name|createDefCfaOffset
parameter_list|(
name|MCSymbol
modifier|*
name|L
parameter_list|,
name|int
name|Offset
parameter_list|)
block|{
return|return
name|MCCFIInstruction
argument_list|(
name|OpDefCfaOffset
argument_list|,
name|L
argument_list|,
literal|0
argument_list|,
operator|-
name|Offset
argument_list|,
literal|""
argument_list|)
return|;
block|}
comment|/// \brief .cfi_adjust_cfa_offset Same as .cfi_def_cfa_offset, but
comment|/// Offset is a relative value that is added/subtracted from the previous
comment|/// offset.
specifier|static
name|MCCFIInstruction
name|createAdjustCfaOffset
parameter_list|(
name|MCSymbol
modifier|*
name|L
parameter_list|,
name|int
name|Adjustment
parameter_list|)
block|{
return|return
name|MCCFIInstruction
argument_list|(
name|OpAdjustCfaOffset
argument_list|,
name|L
argument_list|,
literal|0
argument_list|,
name|Adjustment
argument_list|,
literal|""
argument_list|)
return|;
block|}
comment|/// \brief .cfi_offset Previous value of Register is saved at offset Offset
comment|/// from CFA.
specifier|static
name|MCCFIInstruction
name|createOffset
parameter_list|(
name|MCSymbol
modifier|*
name|L
parameter_list|,
name|unsigned
name|Register
parameter_list|,
name|int
name|Offset
parameter_list|)
block|{
return|return
name|MCCFIInstruction
argument_list|(
name|OpOffset
argument_list|,
name|L
argument_list|,
name|Register
argument_list|,
name|Offset
argument_list|,
literal|""
argument_list|)
return|;
block|}
comment|/// \brief .cfi_rel_offset Previous value of Register is saved at offset
comment|/// Offset from the current CFA register. This is transformed to .cfi_offset
comment|/// using the known displacement of the CFA register from the CFA.
specifier|static
name|MCCFIInstruction
name|createRelOffset
parameter_list|(
name|MCSymbol
modifier|*
name|L
parameter_list|,
name|unsigned
name|Register
parameter_list|,
name|int
name|Offset
parameter_list|)
block|{
return|return
name|MCCFIInstruction
argument_list|(
name|OpRelOffset
argument_list|,
name|L
argument_list|,
name|Register
argument_list|,
name|Offset
argument_list|,
literal|""
argument_list|)
return|;
block|}
comment|/// \brief .cfi_register Previous value of Register1 is saved in
comment|/// register Register2.
specifier|static
name|MCCFIInstruction
name|createRegister
parameter_list|(
name|MCSymbol
modifier|*
name|L
parameter_list|,
name|unsigned
name|Register1
parameter_list|,
name|unsigned
name|Register2
parameter_list|)
block|{
return|return
name|MCCFIInstruction
argument_list|(
name|OpRegister
argument_list|,
name|L
argument_list|,
name|Register1
argument_list|,
name|Register2
argument_list|)
return|;
block|}
comment|/// \brief .cfi_window_save SPARC register window is saved.
specifier|static
name|MCCFIInstruction
name|createWindowSave
parameter_list|(
name|MCSymbol
modifier|*
name|L
parameter_list|)
block|{
return|return
name|MCCFIInstruction
argument_list|(
name|OpWindowSave
argument_list|,
name|L
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
return|;
block|}
comment|/// \brief .cfi_restore says that the rule for Register is now the same as it
comment|/// was at the beginning of the function, after all initial instructions added
comment|/// by .cfi_startproc were executed.
specifier|static
name|MCCFIInstruction
name|createRestore
parameter_list|(
name|MCSymbol
modifier|*
name|L
parameter_list|,
name|unsigned
name|Register
parameter_list|)
block|{
return|return
name|MCCFIInstruction
argument_list|(
name|OpRestore
argument_list|,
name|L
argument_list|,
name|Register
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
return|;
block|}
comment|/// \brief .cfi_undefined From now on the previous value of Register can't be
comment|/// restored anymore.
specifier|static
name|MCCFIInstruction
name|createUndefined
parameter_list|(
name|MCSymbol
modifier|*
name|L
parameter_list|,
name|unsigned
name|Register
parameter_list|)
block|{
return|return
name|MCCFIInstruction
argument_list|(
name|OpUndefined
argument_list|,
name|L
argument_list|,
name|Register
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
return|;
block|}
comment|/// \brief .cfi_same_value Current value of Register is the same as in the
comment|/// previous frame. I.e., no restoration is needed.
specifier|static
name|MCCFIInstruction
name|createSameValue
parameter_list|(
name|MCSymbol
modifier|*
name|L
parameter_list|,
name|unsigned
name|Register
parameter_list|)
block|{
return|return
name|MCCFIInstruction
argument_list|(
name|OpSameValue
argument_list|,
name|L
argument_list|,
name|Register
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
return|;
block|}
comment|/// \brief .cfi_remember_state Save all current rules for all registers.
specifier|static
name|MCCFIInstruction
name|createRememberState
parameter_list|(
name|MCSymbol
modifier|*
name|L
parameter_list|)
block|{
return|return
name|MCCFIInstruction
argument_list|(
name|OpRememberState
argument_list|,
name|L
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
return|;
block|}
comment|/// \brief .cfi_restore_state Restore the previously saved state.
specifier|static
name|MCCFIInstruction
name|createRestoreState
parameter_list|(
name|MCSymbol
modifier|*
name|L
parameter_list|)
block|{
return|return
name|MCCFIInstruction
argument_list|(
name|OpRestoreState
argument_list|,
name|L
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
return|;
block|}
comment|/// \brief .cfi_escape Allows the user to add arbitrary bytes to the unwind
comment|/// info.
specifier|static
name|MCCFIInstruction
name|createEscape
parameter_list|(
name|MCSymbol
modifier|*
name|L
parameter_list|,
name|StringRef
name|Vals
parameter_list|)
block|{
return|return
name|MCCFIInstruction
argument_list|(
name|OpEscape
argument_list|,
name|L
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Vals
argument_list|)
return|;
block|}
comment|/// \brief A special wrapper for .cfi_escape that indicates GNU_ARGS_SIZE
specifier|static
name|MCCFIInstruction
name|createGnuArgsSize
parameter_list|(
name|MCSymbol
modifier|*
name|L
parameter_list|,
name|int
name|Size
parameter_list|)
block|{
return|return
name|MCCFIInstruction
argument_list|(
name|OpGnuArgsSize
argument_list|,
name|L
argument_list|,
literal|0
argument_list|,
name|Size
argument_list|,
literal|""
argument_list|)
return|;
block|}
name|OpType
name|getOperation
argument_list|()
specifier|const
block|{
return|return
name|Operation
return|;
block|}
name|MCSymbol
operator|*
name|getLabel
argument_list|()
specifier|const
block|{
return|return
name|Label
return|;
block|}
name|unsigned
name|getRegister
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|Operation
operator|==
name|OpDefCfa
operator|||
name|Operation
operator|==
name|OpOffset
operator|||
name|Operation
operator|==
name|OpRestore
operator|||
name|Operation
operator|==
name|OpUndefined
operator|||
name|Operation
operator|==
name|OpSameValue
operator|||
name|Operation
operator|==
name|OpDefCfaRegister
operator|||
name|Operation
operator|==
name|OpRelOffset
operator|||
name|Operation
operator|==
name|OpRegister
argument_list|)
block|;
return|return
name|Register
return|;
block|}
name|unsigned
name|getRegister2
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|Operation
operator|==
name|OpRegister
argument_list|)
block|;
return|return
name|Register2
return|;
block|}
name|int
name|getOffset
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|Operation
operator|==
name|OpDefCfa
operator|||
name|Operation
operator|==
name|OpOffset
operator|||
name|Operation
operator|==
name|OpRelOffset
operator|||
name|Operation
operator|==
name|OpDefCfaOffset
operator|||
name|Operation
operator|==
name|OpAdjustCfaOffset
operator|||
name|Operation
operator|==
name|OpGnuArgsSize
argument_list|)
block|;
return|return
name|Offset
return|;
block|}
name|StringRef
name|getValues
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|Operation
operator|==
name|OpEscape
argument_list|)
block|;
return|return
name|StringRef
argument_list|(
operator|&
name|Values
index|[
literal|0
index|]
argument_list|,
name|Values
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
block|}
empty_stmt|;
struct|struct
name|MCDwarfFrameInfo
block|{
name|MCDwarfFrameInfo
argument_list|()
operator|:
name|Begin
argument_list|(
name|nullptr
argument_list|)
operator|,
name|End
argument_list|(
name|nullptr
argument_list|)
operator|,
name|Personality
argument_list|(
name|nullptr
argument_list|)
operator|,
name|Lsda
argument_list|(
name|nullptr
argument_list|)
operator|,
name|Instructions
argument_list|()
operator|,
name|CurrentCfaRegister
argument_list|(
literal|0
argument_list|)
operator|,
name|PersonalityEncoding
argument_list|()
operator|,
name|LsdaEncoding
argument_list|(
literal|0
argument_list|)
operator|,
name|CompactUnwindEncoding
argument_list|(
literal|0
argument_list|)
operator|,
name|IsSignalFrame
argument_list|(
name|false
argument_list|)
operator|,
name|IsSimple
argument_list|(
argument|false
argument_list|)
block|{}
name|MCSymbol
operator|*
name|Begin
expr_stmt|;
name|MCSymbol
modifier|*
name|End
decl_stmt|;
specifier|const
name|MCSymbol
modifier|*
name|Personality
decl_stmt|;
specifier|const
name|MCSymbol
modifier|*
name|Lsda
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|MCCFIInstruction
operator|>
name|Instructions
expr_stmt|;
name|unsigned
name|CurrentCfaRegister
decl_stmt|;
name|unsigned
name|PersonalityEncoding
decl_stmt|;
name|unsigned
name|LsdaEncoding
decl_stmt|;
name|uint32_t
name|CompactUnwindEncoding
decl_stmt|;
name|bool
name|IsSignalFrame
decl_stmt|;
name|bool
name|IsSimple
decl_stmt|;
block|}
struct|;
name|class
name|MCDwarfFrameEmitter
block|{
name|public
label|:
comment|//
comment|// This emits the frame info section.
comment|//
specifier|static
name|void
name|Emit
parameter_list|(
name|MCObjectStreamer
modifier|&
name|streamer
parameter_list|,
name|MCAsmBackend
modifier|*
name|MAB
parameter_list|,
name|bool
name|isEH
parameter_list|)
function_decl|;
specifier|static
name|void
name|EmitAdvanceLoc
parameter_list|(
name|MCObjectStreamer
modifier|&
name|Streamer
parameter_list|,
name|uint64_t
name|AddrDelta
parameter_list|)
function_decl|;
specifier|static
name|void
name|EncodeAdvanceLoc
parameter_list|(
name|MCContext
modifier|&
name|Context
parameter_list|,
name|uint64_t
name|AddrDelta
parameter_list|,
name|raw_ostream
modifier|&
name|OS
parameter_list|)
function_decl|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

