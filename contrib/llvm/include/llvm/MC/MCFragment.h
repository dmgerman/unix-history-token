begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- MCFragment.h - Fragment type hierarchy -------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_MC_MCFRAGMENT_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_MC_MCFRAGMENT_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/SmallString.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/ilist.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/ilist_node.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/iterator.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MCFixup.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MCInst.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MCSection
decl_stmt|;
name|class
name|MCSymbol
decl_stmt|;
name|class
name|MCSubtargetInfo
decl_stmt|;
name|class
name|MCFragment
range|:
name|public
name|ilist_node_with_parent
operator|<
name|MCFragment
decl_stmt|,
name|MCSection
decl|>
block|{
name|friend
name|class
name|MCAsmLayout
decl_stmt|;
name|MCFragment
argument_list|(
specifier|const
name|MCFragment
operator|&
argument_list|)
operator|=
name|delete
expr_stmt|;
name|void
name|operator
init|=
operator|(
specifier|const
name|MCFragment
operator|&
operator|)
operator|=
name|delete
decl_stmt|;
name|public
label|:
enum|enum
name|FragmentType
enum|:
name|uint8_t
block|{
name|FT_Align
block|,
name|FT_Data
block|,
name|FT_CompactEncodedInst
block|,
name|FT_Fill
block|,
name|FT_Relaxable
block|,
name|FT_Org
block|,
name|FT_Dwarf
block|,
name|FT_DwarfFrame
block|,
name|FT_LEB
block|,
name|FT_SafeSEH
block|,
name|FT_CVInlineLines
block|,
name|FT_CVDefRange
block|,
name|FT_Dummy
block|}
enum|;
name|private
label|:
name|FragmentType
name|Kind
decl_stmt|;
name|protected
label|:
name|bool
name|HasInstructions
decl_stmt|;
name|private
label|:
comment|/// \brief Should this fragment be aligned to the end of a bundle?
name|bool
name|AlignToBundleEnd
decl_stmt|;
name|uint8_t
name|BundlePadding
decl_stmt|;
comment|/// LayoutOrder - The layout order of this fragment.
name|unsigned
name|LayoutOrder
decl_stmt|;
comment|/// The data for the section this fragment is in.
name|MCSection
modifier|*
name|Parent
decl_stmt|;
comment|/// Atom - The atom this fragment is in, as represented by it's defining
comment|/// symbol.
specifier|const
name|MCSymbol
modifier|*
name|Atom
decl_stmt|;
comment|/// \name Assembler Backend Data
comment|/// @{
comment|//
comment|// FIXME: This could all be kept private to the assembler implementation.
comment|/// Offset - The offset of this fragment in its section. This is ~0 until
comment|/// initialized.
name|uint64_t
name|Offset
decl_stmt|;
comment|/// @}
name|protected
label|:
name|MCFragment
argument_list|(
argument|FragmentType Kind
argument_list|,
argument|bool HasInstructions
argument_list|,
argument|uint8_t BundlePadding
argument_list|,
argument|MCSection *Parent = nullptr
argument_list|)
empty_stmt|;
operator|~
name|MCFragment
argument_list|()
expr_stmt|;
name|private
label|:
comment|// This is a friend so that the sentinal can be created.
name|friend
block|struct
name|ilist_sentinel_traits
operator|<
name|MCFragment
operator|>
expr_stmt|;
name|MCFragment
argument_list|()
expr_stmt|;
name|public
label|:
comment|/// Destroys the current fragment.
comment|///
comment|/// This must be used instead of delete as MCFragment is non-virtual.
comment|/// This method will dispatch to the appropriate subclass.
name|void
name|destroy
parameter_list|()
function_decl|;
name|FragmentType
name|getKind
argument_list|()
specifier|const
block|{
return|return
name|Kind
return|;
block|}
name|MCSection
operator|*
name|getParent
argument_list|()
specifier|const
block|{
return|return
name|Parent
return|;
block|}
name|void
name|setParent
parameter_list|(
name|MCSection
modifier|*
name|Value
parameter_list|)
block|{
name|Parent
operator|=
name|Value
expr_stmt|;
block|}
specifier|const
name|MCSymbol
operator|*
name|getAtom
argument_list|()
specifier|const
block|{
return|return
name|Atom
return|;
block|}
name|void
name|setAtom
parameter_list|(
specifier|const
name|MCSymbol
modifier|*
name|Value
parameter_list|)
block|{
name|Atom
operator|=
name|Value
expr_stmt|;
block|}
name|unsigned
name|getLayoutOrder
argument_list|()
specifier|const
block|{
return|return
name|LayoutOrder
return|;
block|}
name|void
name|setLayoutOrder
parameter_list|(
name|unsigned
name|Value
parameter_list|)
block|{
name|LayoutOrder
operator|=
name|Value
expr_stmt|;
block|}
comment|/// \brief Does this fragment have instructions emitted into it? By default
comment|/// this is false, but specific fragment types may set it to true.
name|bool
name|hasInstructions
argument_list|()
specifier|const
block|{
return|return
name|HasInstructions
return|;
block|}
comment|/// \brief Should this fragment be placed at the end of an aligned bundle?
name|bool
name|alignToBundleEnd
argument_list|()
specifier|const
block|{
return|return
name|AlignToBundleEnd
return|;
block|}
name|void
name|setAlignToBundleEnd
parameter_list|(
name|bool
name|V
parameter_list|)
block|{
name|AlignToBundleEnd
operator|=
name|V
expr_stmt|;
block|}
comment|/// \brief Get the padding size that must be inserted before this fragment.
comment|/// Used for bundling. By default, no padding is inserted.
comment|/// Note that padding size is restricted to 8 bits. This is an optimization
comment|/// to reduce the amount of space used for each fragment. In practice, larger
comment|/// padding should never be required.
name|uint8_t
name|getBundlePadding
argument_list|()
specifier|const
block|{
return|return
name|BundlePadding
return|;
block|}
comment|/// \brief Set the padding size for this fragment. By default it's a no-op,
comment|/// and only some fragments have a meaningful implementation.
name|void
name|setBundlePadding
parameter_list|(
name|uint8_t
name|N
parameter_list|)
block|{
name|BundlePadding
operator|=
name|N
expr_stmt|;
block|}
comment|/// \brief Return true if given frgment has FT_Dummy type.
name|bool
name|isDummy
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|FT_Dummy
return|;
block|}
name|void
name|dump
parameter_list|()
function_decl|;
block|}
empty_stmt|;
name|class
name|MCDummyFragment
range|:
name|public
name|MCFragment
block|{
name|public
operator|:
name|explicit
name|MCDummyFragment
argument_list|(
name|MCSection
operator|*
name|Sec
argument_list|)
operator|:
name|MCFragment
argument_list|(
argument|FT_Dummy
argument_list|,
argument|false
argument_list|,
literal|0
argument_list|,
argument|Sec
argument_list|)
block|{}
block|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const MCFragment *F
argument_list|)
block|{
return|return
name|F
operator|->
name|getKind
argument_list|()
operator|==
name|FT_Dummy
return|;
block|}
expr|}
block|;
comment|/// Interface implemented by fragments that contain encoded instructions and/or
comment|/// data.
comment|///
name|class
name|MCEncodedFragment
operator|:
name|public
name|MCFragment
block|{
name|protected
operator|:
name|MCEncodedFragment
argument_list|(
argument|MCFragment::FragmentType FType
argument_list|,
argument|bool HasInstructions
argument_list|,
argument|MCSection *Sec
argument_list|)
operator|:
name|MCFragment
argument_list|(
argument|FType
argument_list|,
argument|HasInstructions
argument_list|,
literal|0
argument_list|,
argument|Sec
argument_list|)
block|{}
name|public
operator|:
specifier|static
name|bool
name|classof
argument_list|(
argument|const MCFragment *F
argument_list|)
block|{
name|MCFragment
operator|::
name|FragmentType
name|Kind
operator|=
name|F
operator|->
name|getKind
argument_list|()
block|;
switch|switch
condition|(
name|Kind
condition|)
block|{
default|default:
return|return
name|false
return|;
case|case
name|MCFragment
operator|::
name|FT_Relaxable
case|:
case|case
name|MCFragment
operator|::
name|FT_CompactEncodedInst
case|:
case|case
name|MCFragment
operator|::
name|FT_Data
case|:
return|return
name|true
return|;
block|}
block|}
block|}
block|;
comment|/// Interface implemented by fragments that contain encoded instructions and/or
comment|/// data.
comment|///
name|template
operator|<
name|unsigned
name|ContentsSize
operator|>
name|class
name|MCEncodedFragmentWithContents
operator|:
name|public
name|MCEncodedFragment
block|{
name|SmallVector
operator|<
name|char
block|,
name|ContentsSize
operator|>
name|Contents
block|;
name|protected
operator|:
name|MCEncodedFragmentWithContents
argument_list|(
argument|MCFragment::FragmentType FType
argument_list|,
argument|bool HasInstructions
argument_list|,
argument|MCSection *Sec
argument_list|)
operator|:
name|MCEncodedFragment
argument_list|(
argument|FType
argument_list|,
argument|HasInstructions
argument_list|,
argument|Sec
argument_list|)
block|{}
name|public
operator|:
name|SmallVectorImpl
operator|<
name|char
operator|>
operator|&
name|getContents
argument_list|()
block|{
return|return
name|Contents
return|;
block|}
specifier|const
name|SmallVectorImpl
operator|<
name|char
operator|>
operator|&
name|getContents
argument_list|()
specifier|const
block|{
return|return
name|Contents
return|;
block|}
expr|}
block|;
comment|/// Interface implemented by fragments that contain encoded instructions and/or
comment|/// data and also have fixups registered.
comment|///
name|template
operator|<
name|unsigned
name|ContentsSize
block|,
name|unsigned
name|FixupsSize
operator|>
name|class
name|MCEncodedFragmentWithFixups
operator|:
name|public
name|MCEncodedFragmentWithContents
operator|<
name|ContentsSize
operator|>
block|{
comment|/// Fixups - The list of fixups in this fragment.
name|SmallVector
operator|<
name|MCFixup
block|,
name|FixupsSize
operator|>
name|Fixups
block|;
name|protected
operator|:
name|MCEncodedFragmentWithFixups
argument_list|(
argument|MCFragment::FragmentType FType
argument_list|,
argument|bool HasInstructions
argument_list|,
argument|MCSection *Sec
argument_list|)
operator|:
name|MCEncodedFragmentWithContents
operator|<
name|ContentsSize
operator|>
operator|(
name|FType
expr|,
name|HasInstructions
expr|,
name|Sec
operator|)
block|{}
name|public
operator|:
typedef|typedef
name|SmallVectorImpl
operator|<
name|MCFixup
operator|>
operator|::
name|const_iterator
name|const_fixup_iterator
expr_stmt|;
typedef|typedef
name|SmallVectorImpl
operator|<
name|MCFixup
operator|>
operator|::
name|iterator
name|fixup_iterator
expr_stmt|;
name|SmallVectorImpl
operator|<
name|MCFixup
operator|>
operator|&
name|getFixups
argument_list|()
block|{
return|return
name|Fixups
return|;
block|}
specifier|const
name|SmallVectorImpl
operator|<
name|MCFixup
operator|>
operator|&
name|getFixups
argument_list|()
specifier|const
block|{
return|return
name|Fixups
return|;
block|}
name|fixup_iterator
name|fixup_begin
argument_list|()
block|{
return|return
name|Fixups
operator|.
name|begin
argument_list|()
return|;
block|}
name|const_fixup_iterator
name|fixup_begin
argument_list|()
specifier|const
block|{
return|return
name|Fixups
operator|.
name|begin
argument_list|()
return|;
block|}
name|fixup_iterator
name|fixup_end
argument_list|()
block|{
return|return
name|Fixups
operator|.
name|end
argument_list|()
return|;
block|}
name|const_fixup_iterator
name|fixup_end
argument_list|()
specifier|const
block|{
return|return
name|Fixups
operator|.
name|end
argument_list|()
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const MCFragment *F
argument_list|)
block|{
name|MCFragment
operator|::
name|FragmentType
name|Kind
operator|=
name|F
operator|->
name|getKind
argument_list|()
block|;
return|return
name|Kind
operator|==
name|MCFragment
operator|::
name|FT_Relaxable
operator|||
name|Kind
operator|==
name|MCFragment
operator|::
name|FT_Data
operator|||
name|Kind
operator|==
name|MCFragment
operator|::
name|FT_CVDefRange
return|;
block|}
expr|}
block|;
comment|/// Fragment for data and encoded instructions.
comment|///
name|class
name|MCDataFragment
operator|:
name|public
name|MCEncodedFragmentWithFixups
operator|<
literal|32
block|,
literal|4
operator|>
block|{
name|public
operator|:
name|MCDataFragment
argument_list|(
name|MCSection
operator|*
name|Sec
operator|=
name|nullptr
argument_list|)
operator|:
name|MCEncodedFragmentWithFixups
operator|<
literal|32
block|,
literal|4
operator|>
operator|(
name|FT_Data
expr|,
name|false
expr|,
name|Sec
operator|)
block|{}
name|void
name|setHasInstructions
argument_list|(
argument|bool V
argument_list|)
block|{
name|HasInstructions
operator|=
name|V
block|; }
specifier|static
name|bool
name|classof
argument_list|(
argument|const MCFragment *F
argument_list|)
block|{
return|return
name|F
operator|->
name|getKind
argument_list|()
operator|==
name|MCFragment
operator|::
name|FT_Data
return|;
block|}
expr|}
block|;
comment|/// This is a compact (memory-size-wise) fragment for holding an encoded
comment|/// instruction (non-relaxable) that has no fixups registered. When applicable,
comment|/// it can be used instead of MCDataFragment and lead to lower memory
comment|/// consumption.
comment|///
name|class
name|MCCompactEncodedInstFragment
operator|:
name|public
name|MCEncodedFragmentWithContents
operator|<
literal|4
operator|>
block|{
name|public
operator|:
name|MCCompactEncodedInstFragment
argument_list|(
name|MCSection
operator|*
name|Sec
operator|=
name|nullptr
argument_list|)
operator|:
name|MCEncodedFragmentWithContents
argument_list|(
argument|FT_CompactEncodedInst
argument_list|,
argument|true
argument_list|,
argument|Sec
argument_list|)
block|{   }
specifier|static
name|bool
name|classof
argument_list|(
argument|const MCFragment *F
argument_list|)
block|{
return|return
name|F
operator|->
name|getKind
argument_list|()
operator|==
name|MCFragment
operator|::
name|FT_CompactEncodedInst
return|;
block|}
expr|}
block|;
comment|/// A relaxable fragment holds on to its MCInst, since it may need to be
comment|/// relaxed during the assembler layout and relaxation stage.
comment|///
name|class
name|MCRelaxableFragment
operator|:
name|public
name|MCEncodedFragmentWithFixups
operator|<
literal|8
block|,
literal|1
operator|>
block|{
comment|/// Inst - The instruction this is a fragment for.
name|MCInst
name|Inst
block|;
comment|/// STI - The MCSubtargetInfo in effect when the instruction was encoded.
specifier|const
name|MCSubtargetInfo
operator|&
name|STI
block|;
name|public
operator|:
name|MCRelaxableFragment
argument_list|(
specifier|const
name|MCInst
operator|&
name|Inst
argument_list|,
specifier|const
name|MCSubtargetInfo
operator|&
name|STI
argument_list|,
name|MCSection
operator|*
name|Sec
operator|=
name|nullptr
argument_list|)
operator|:
name|MCEncodedFragmentWithFixups
argument_list|(
name|FT_Relaxable
argument_list|,
name|true
argument_list|,
name|Sec
argument_list|)
block|,
name|Inst
argument_list|(
name|Inst
argument_list|)
block|,
name|STI
argument_list|(
argument|STI
argument_list|)
block|{}
specifier|const
name|MCInst
operator|&
name|getInst
argument_list|()
specifier|const
block|{
return|return
name|Inst
return|;
block|}
name|void
name|setInst
argument_list|(
argument|const MCInst&Value
argument_list|)
block|{
name|Inst
operator|=
name|Value
block|; }
specifier|const
name|MCSubtargetInfo
operator|&
name|getSubtargetInfo
argument_list|()
block|{
return|return
name|STI
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const MCFragment *F
argument_list|)
block|{
return|return
name|F
operator|->
name|getKind
argument_list|()
operator|==
name|MCFragment
operator|::
name|FT_Relaxable
return|;
block|}
expr|}
block|;
name|class
name|MCAlignFragment
operator|:
name|public
name|MCFragment
block|{
comment|/// Alignment - The alignment to ensure, in bytes.
name|unsigned
name|Alignment
block|;
comment|/// EmitNops - Flag to indicate that (optimal) NOPs should be emitted instead
comment|/// of using the provided value. The exact interpretation of this flag is
comment|/// target dependent.
name|bool
name|EmitNops
operator|:
literal|1
block|;
comment|/// Value - Value to use for filling padding bytes.
name|int64_t
name|Value
block|;
comment|/// ValueSize - The size of the integer (in bytes) of \p Value.
name|unsigned
name|ValueSize
block|;
comment|/// MaxBytesToEmit - The maximum number of bytes to emit; if the alignment
comment|/// cannot be satisfied in this width then this fragment is ignored.
name|unsigned
name|MaxBytesToEmit
block|;
name|public
operator|:
name|MCAlignFragment
argument_list|(
argument|unsigned Alignment
argument_list|,
argument|int64_t Value
argument_list|,
argument|unsigned ValueSize
argument_list|,
argument|unsigned MaxBytesToEmit
argument_list|,
argument|MCSection *Sec = nullptr
argument_list|)
operator|:
name|MCFragment
argument_list|(
name|FT_Align
argument_list|,
name|false
argument_list|,
literal|0
argument_list|,
name|Sec
argument_list|)
block|,
name|Alignment
argument_list|(
name|Alignment
argument_list|)
block|,
name|EmitNops
argument_list|(
name|false
argument_list|)
block|,
name|Value
argument_list|(
name|Value
argument_list|)
block|,
name|ValueSize
argument_list|(
name|ValueSize
argument_list|)
block|,
name|MaxBytesToEmit
argument_list|(
argument|MaxBytesToEmit
argument_list|)
block|{}
comment|/// \name Accessors
comment|/// @{
name|unsigned
name|getAlignment
argument_list|()
specifier|const
block|{
return|return
name|Alignment
return|;
block|}
name|int64_t
name|getValue
argument_list|()
specifier|const
block|{
return|return
name|Value
return|;
block|}
name|unsigned
name|getValueSize
argument_list|()
specifier|const
block|{
return|return
name|ValueSize
return|;
block|}
name|unsigned
name|getMaxBytesToEmit
argument_list|()
specifier|const
block|{
return|return
name|MaxBytesToEmit
return|;
block|}
name|bool
name|hasEmitNops
argument_list|()
specifier|const
block|{
return|return
name|EmitNops
return|;
block|}
name|void
name|setEmitNops
argument_list|(
argument|bool Value
argument_list|)
block|{
name|EmitNops
operator|=
name|Value
block|; }
comment|/// @}
specifier|static
name|bool
name|classof
argument_list|(
argument|const MCFragment *F
argument_list|)
block|{
return|return
name|F
operator|->
name|getKind
argument_list|()
operator|==
name|MCFragment
operator|::
name|FT_Align
return|;
block|}
expr|}
block|;
name|class
name|MCFillFragment
operator|:
name|public
name|MCFragment
block|{
comment|/// Value to use for filling bytes.
name|uint8_t
name|Value
block|;
comment|/// The number of bytes to insert.
name|uint64_t
name|Size
block|;
name|public
operator|:
name|MCFillFragment
argument_list|(
argument|uint8_t Value
argument_list|,
argument|uint64_t Size
argument_list|,
argument|MCSection *Sec = nullptr
argument_list|)
operator|:
name|MCFragment
argument_list|(
name|FT_Fill
argument_list|,
name|false
argument_list|,
literal|0
argument_list|,
name|Sec
argument_list|)
block|,
name|Value
argument_list|(
name|Value
argument_list|)
block|,
name|Size
argument_list|(
argument|Size
argument_list|)
block|{}
name|uint8_t
name|getValue
argument_list|()
specifier|const
block|{
return|return
name|Value
return|;
block|}
name|uint64_t
name|getSize
argument_list|()
specifier|const
block|{
return|return
name|Size
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const MCFragment *F
argument_list|)
block|{
return|return
name|F
operator|->
name|getKind
argument_list|()
operator|==
name|MCFragment
operator|::
name|FT_Fill
return|;
block|}
expr|}
block|;
name|class
name|MCOrgFragment
operator|:
name|public
name|MCFragment
block|{
comment|/// Offset - The offset this fragment should start at.
specifier|const
name|MCExpr
operator|*
name|Offset
block|;
comment|/// Value - Value to use for filling bytes.
name|int8_t
name|Value
block|;
name|public
operator|:
name|MCOrgFragment
argument_list|(
argument|const MCExpr&Offset
argument_list|,
argument|int8_t Value
argument_list|,
argument|MCSection *Sec = nullptr
argument_list|)
operator|:
name|MCFragment
argument_list|(
name|FT_Org
argument_list|,
name|false
argument_list|,
literal|0
argument_list|,
name|Sec
argument_list|)
block|,
name|Offset
argument_list|(
operator|&
name|Offset
argument_list|)
block|,
name|Value
argument_list|(
argument|Value
argument_list|)
block|{}
comment|/// \name Accessors
comment|/// @{
specifier|const
name|MCExpr
operator|&
name|getOffset
argument_list|()
specifier|const
block|{
return|return
operator|*
name|Offset
return|;
block|}
name|uint8_t
name|getValue
argument_list|()
specifier|const
block|{
return|return
name|Value
return|;
block|}
comment|/// @}
specifier|static
name|bool
name|classof
argument_list|(
argument|const MCFragment *F
argument_list|)
block|{
return|return
name|F
operator|->
name|getKind
argument_list|()
operator|==
name|MCFragment
operator|::
name|FT_Org
return|;
block|}
expr|}
block|;
name|class
name|MCLEBFragment
operator|:
name|public
name|MCFragment
block|{
comment|/// Value - The value this fragment should contain.
specifier|const
name|MCExpr
operator|*
name|Value
block|;
comment|/// IsSigned - True if this is a sleb128, false if uleb128.
name|bool
name|IsSigned
block|;
name|SmallString
operator|<
literal|8
operator|>
name|Contents
block|;
name|public
operator|:
name|MCLEBFragment
argument_list|(
argument|const MCExpr&Value_
argument_list|,
argument|bool IsSigned_
argument_list|,
argument|MCSection *Sec = nullptr
argument_list|)
operator|:
name|MCFragment
argument_list|(
name|FT_LEB
argument_list|,
name|false
argument_list|,
literal|0
argument_list|,
name|Sec
argument_list|)
block|,
name|Value
argument_list|(
operator|&
name|Value_
argument_list|)
block|,
name|IsSigned
argument_list|(
argument|IsSigned_
argument_list|)
block|{
name|Contents
operator|.
name|push_back
argument_list|(
literal|0
argument_list|)
block|;   }
comment|/// \name Accessors
comment|/// @{
specifier|const
name|MCExpr
operator|&
name|getValue
argument_list|()
specifier|const
block|{
return|return
operator|*
name|Value
return|;
block|}
name|bool
name|isSigned
argument_list|()
specifier|const
block|{
return|return
name|IsSigned
return|;
block|}
name|SmallString
operator|<
literal|8
operator|>
operator|&
name|getContents
argument_list|()
block|{
return|return
name|Contents
return|;
block|}
specifier|const
name|SmallString
operator|<
literal|8
operator|>
operator|&
name|getContents
argument_list|()
specifier|const
block|{
return|return
name|Contents
return|;
block|}
comment|/// @}
specifier|static
name|bool
name|classof
argument_list|(
argument|const MCFragment *F
argument_list|)
block|{
return|return
name|F
operator|->
name|getKind
argument_list|()
operator|==
name|MCFragment
operator|::
name|FT_LEB
return|;
block|}
expr|}
block|;
name|class
name|MCDwarfLineAddrFragment
operator|:
name|public
name|MCFragment
block|{
comment|/// LineDelta - the value of the difference between the two line numbers
comment|/// between two .loc dwarf directives.
name|int64_t
name|LineDelta
block|;
comment|/// AddrDelta - The expression for the difference of the two symbols that
comment|/// make up the address delta between two .loc dwarf directives.
specifier|const
name|MCExpr
operator|*
name|AddrDelta
block|;
name|SmallString
operator|<
literal|8
operator|>
name|Contents
block|;
name|public
operator|:
name|MCDwarfLineAddrFragment
argument_list|(
argument|int64_t LineDelta
argument_list|,
argument|const MCExpr&AddrDelta
argument_list|,
argument|MCSection *Sec = nullptr
argument_list|)
operator|:
name|MCFragment
argument_list|(
name|FT_Dwarf
argument_list|,
name|false
argument_list|,
literal|0
argument_list|,
name|Sec
argument_list|)
block|,
name|LineDelta
argument_list|(
name|LineDelta
argument_list|)
block|,
name|AddrDelta
argument_list|(
argument|&AddrDelta
argument_list|)
block|{
name|Contents
operator|.
name|push_back
argument_list|(
literal|0
argument_list|)
block|;   }
comment|/// \name Accessors
comment|/// @{
name|int64_t
name|getLineDelta
argument_list|()
specifier|const
block|{
return|return
name|LineDelta
return|;
block|}
specifier|const
name|MCExpr
operator|&
name|getAddrDelta
argument_list|()
specifier|const
block|{
return|return
operator|*
name|AddrDelta
return|;
block|}
name|SmallString
operator|<
literal|8
operator|>
operator|&
name|getContents
argument_list|()
block|{
return|return
name|Contents
return|;
block|}
specifier|const
name|SmallString
operator|<
literal|8
operator|>
operator|&
name|getContents
argument_list|()
specifier|const
block|{
return|return
name|Contents
return|;
block|}
comment|/// @}
specifier|static
name|bool
name|classof
argument_list|(
argument|const MCFragment *F
argument_list|)
block|{
return|return
name|F
operator|->
name|getKind
argument_list|()
operator|==
name|MCFragment
operator|::
name|FT_Dwarf
return|;
block|}
expr|}
block|;
name|class
name|MCDwarfCallFrameFragment
operator|:
name|public
name|MCFragment
block|{
comment|/// AddrDelta - The expression for the difference of the two symbols that
comment|/// make up the address delta between two .cfi_* dwarf directives.
specifier|const
name|MCExpr
operator|*
name|AddrDelta
block|;
name|SmallString
operator|<
literal|8
operator|>
name|Contents
block|;
name|public
operator|:
name|MCDwarfCallFrameFragment
argument_list|(
specifier|const
name|MCExpr
operator|&
name|AddrDelta
argument_list|,
name|MCSection
operator|*
name|Sec
operator|=
name|nullptr
argument_list|)
operator|:
name|MCFragment
argument_list|(
name|FT_DwarfFrame
argument_list|,
name|false
argument_list|,
literal|0
argument_list|,
name|Sec
argument_list|)
block|,
name|AddrDelta
argument_list|(
argument|&AddrDelta
argument_list|)
block|{
name|Contents
operator|.
name|push_back
argument_list|(
literal|0
argument_list|)
block|;   }
comment|/// \name Accessors
comment|/// @{
specifier|const
name|MCExpr
operator|&
name|getAddrDelta
argument_list|()
specifier|const
block|{
return|return
operator|*
name|AddrDelta
return|;
block|}
name|SmallString
operator|<
literal|8
operator|>
operator|&
name|getContents
argument_list|()
block|{
return|return
name|Contents
return|;
block|}
specifier|const
name|SmallString
operator|<
literal|8
operator|>
operator|&
name|getContents
argument_list|()
specifier|const
block|{
return|return
name|Contents
return|;
block|}
comment|/// @}
specifier|static
name|bool
name|classof
argument_list|(
argument|const MCFragment *F
argument_list|)
block|{
return|return
name|F
operator|->
name|getKind
argument_list|()
operator|==
name|MCFragment
operator|::
name|FT_DwarfFrame
return|;
block|}
expr|}
block|;
name|class
name|MCSafeSEHFragment
operator|:
name|public
name|MCFragment
block|{
specifier|const
name|MCSymbol
operator|*
name|Sym
block|;
name|public
operator|:
name|MCSafeSEHFragment
argument_list|(
specifier|const
name|MCSymbol
operator|*
name|Sym
argument_list|,
name|MCSection
operator|*
name|Sec
operator|=
name|nullptr
argument_list|)
operator|:
name|MCFragment
argument_list|(
name|FT_SafeSEH
argument_list|,
name|false
argument_list|,
literal|0
argument_list|,
name|Sec
argument_list|)
block|,
name|Sym
argument_list|(
argument|Sym
argument_list|)
block|{}
comment|/// \name Accessors
comment|/// @{
specifier|const
name|MCSymbol
operator|*
name|getSymbol
argument_list|()
block|{
return|return
name|Sym
return|;
block|}
specifier|const
name|MCSymbol
operator|*
name|getSymbol
argument_list|()
specifier|const
block|{
return|return
name|Sym
return|;
block|}
comment|/// @}
specifier|static
name|bool
name|classof
argument_list|(
argument|const MCFragment *F
argument_list|)
block|{
return|return
name|F
operator|->
name|getKind
argument_list|()
operator|==
name|MCFragment
operator|::
name|FT_SafeSEH
return|;
block|}
expr|}
block|;
comment|/// Fragment representing the binary annotations produced by the
comment|/// .cv_inline_linetable directive.
name|class
name|MCCVInlineLineTableFragment
operator|:
name|public
name|MCFragment
block|{
name|unsigned
name|SiteFuncId
block|;
name|unsigned
name|StartFileId
block|;
name|unsigned
name|StartLineNum
block|;
specifier|const
name|MCSymbol
operator|*
name|FnStartSym
block|;
specifier|const
name|MCSymbol
operator|*
name|FnEndSym
block|;
name|SmallVector
operator|<
name|unsigned
block|,
literal|3
operator|>
name|SecondaryFuncs
block|;
name|SmallString
operator|<
literal|8
operator|>
name|Contents
block|;
comment|/// CodeViewContext has the real knowledge about this format, so let it access
comment|/// our members.
name|friend
name|class
name|CodeViewContext
block|;
name|public
operator|:
name|MCCVInlineLineTableFragment
argument_list|(
argument|unsigned SiteFuncId
argument_list|,
argument|unsigned StartFileId
argument_list|,
argument|unsigned StartLineNum
argument_list|,
argument|const MCSymbol *FnStartSym
argument_list|,
argument|const MCSymbol *FnEndSym
argument_list|,
argument|ArrayRef<unsigned> SecondaryFuncs
argument_list|,
argument|MCSection *Sec = nullptr
argument_list|)
operator|:
name|MCFragment
argument_list|(
name|FT_CVInlineLines
argument_list|,
name|false
argument_list|,
literal|0
argument_list|,
name|Sec
argument_list|)
block|,
name|SiteFuncId
argument_list|(
name|SiteFuncId
argument_list|)
block|,
name|StartFileId
argument_list|(
name|StartFileId
argument_list|)
block|,
name|StartLineNum
argument_list|(
name|StartLineNum
argument_list|)
block|,
name|FnStartSym
argument_list|(
name|FnStartSym
argument_list|)
block|,
name|FnEndSym
argument_list|(
name|FnEndSym
argument_list|)
block|,
name|SecondaryFuncs
argument_list|(
argument|SecondaryFuncs.begin()
argument_list|,
argument|SecondaryFuncs.end()
argument_list|)
block|{}
comment|/// \name Accessors
comment|/// @{
specifier|const
name|MCSymbol
operator|*
name|getFnStartSym
argument_list|()
specifier|const
block|{
return|return
name|FnStartSym
return|;
block|}
specifier|const
name|MCSymbol
operator|*
name|getFnEndSym
argument_list|()
specifier|const
block|{
return|return
name|FnEndSym
return|;
block|}
name|SmallString
operator|<
literal|8
operator|>
operator|&
name|getContents
argument_list|()
block|{
return|return
name|Contents
return|;
block|}
specifier|const
name|SmallString
operator|<
literal|8
operator|>
operator|&
name|getContents
argument_list|()
specifier|const
block|{
return|return
name|Contents
return|;
block|}
comment|/// @}
specifier|static
name|bool
name|classof
argument_list|(
argument|const MCFragment *F
argument_list|)
block|{
return|return
name|F
operator|->
name|getKind
argument_list|()
operator|==
name|MCFragment
operator|::
name|FT_CVInlineLines
return|;
block|}
expr|}
block|;
comment|/// Fragment representing the .cv_def_range directive.
name|class
name|MCCVDefRangeFragment
operator|:
name|public
name|MCEncodedFragmentWithFixups
operator|<
literal|32
block|,
literal|4
operator|>
block|{
name|SmallVector
operator|<
name|std
operator|::
name|pair
operator|<
specifier|const
name|MCSymbol
operator|*
block|,
specifier|const
name|MCSymbol
operator|*
operator|>
block|,
literal|2
operator|>
name|Ranges
block|;
name|SmallString
operator|<
literal|32
operator|>
name|FixedSizePortion
block|;
comment|/// CodeViewContext has the real knowledge about this format, so let it access
comment|/// our members.
name|friend
name|class
name|CodeViewContext
block|;
name|public
operator|:
name|MCCVDefRangeFragment
argument_list|(
argument|ArrayRef<std::pair<const MCSymbol *
argument_list|,
argument|const MCSymbol *>> Ranges
argument_list|,
argument|StringRef FixedSizePortion
argument_list|,
argument|MCSection *Sec = nullptr
argument_list|)
operator|:
name|MCEncodedFragmentWithFixups
operator|<
literal|32
block|,
literal|4
operator|>
operator|(
name|FT_CVDefRange
expr|,
name|false
expr|,
name|Sec
operator|)
block|,
name|Ranges
argument_list|(
name|Ranges
operator|.
name|begin
argument_list|()
argument_list|,
name|Ranges
operator|.
name|end
argument_list|()
argument_list|)
block|,
name|FixedSizePortion
argument_list|(
argument|FixedSizePortion
argument_list|)
block|{}
comment|/// \name Accessors
comment|/// @{
name|ArrayRef
operator|<
name|std
operator|::
name|pair
operator|<
specifier|const
name|MCSymbol
operator|*
block|,
specifier|const
name|MCSymbol
operator|*
operator|>>
name|getRanges
argument_list|()
specifier|const
block|{
return|return
name|Ranges
return|;
block|}
name|StringRef
name|getFixedSizePortion
argument_list|()
specifier|const
block|{
return|return
name|FixedSizePortion
return|;
block|}
comment|/// @}
specifier|static
name|bool
name|classof
argument_list|(
argument|const MCFragment *F
argument_list|)
block|{
return|return
name|F
operator|->
name|getKind
argument_list|()
operator|==
name|MCFragment
operator|::
name|FT_CVDefRange
return|;
block|}
expr|}
block|;  }
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

