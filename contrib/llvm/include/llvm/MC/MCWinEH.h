begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- MCWinEH.h - Windows Unwinding Support --------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_MC_MCWINEH_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_MC_MCWINEH_H
end_define

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MCContext
decl_stmt|;
name|class
name|MCSection
decl_stmt|;
name|class
name|MCStreamer
decl_stmt|;
name|class
name|MCSymbol
decl_stmt|;
name|class
name|StringRef
decl_stmt|;
name|namespace
name|WinEH
block|{
struct|struct
name|Instruction
block|{
specifier|const
name|MCSymbol
modifier|*
name|Label
decl_stmt|;
specifier|const
name|unsigned
name|Offset
decl_stmt|;
specifier|const
name|unsigned
name|Register
decl_stmt|;
specifier|const
name|unsigned
name|Operation
decl_stmt|;
name|Instruction
argument_list|(
argument|unsigned Op
argument_list|,
argument|MCSymbol *L
argument_list|,
argument|unsigned Reg
argument_list|,
argument|unsigned Off
argument_list|)
block|:
name|Label
argument_list|(
name|L
argument_list|)
operator|,
name|Offset
argument_list|(
name|Off
argument_list|)
operator|,
name|Register
argument_list|(
name|Reg
argument_list|)
operator|,
name|Operation
argument_list|(
argument|Op
argument_list|)
block|{}
block|}
struct|;
struct|struct
name|FrameInfo
block|{
specifier|const
name|MCSymbol
modifier|*
name|Begin
decl_stmt|;
specifier|const
name|MCSymbol
modifier|*
name|End
decl_stmt|;
specifier|const
name|MCSymbol
modifier|*
name|ExceptionHandler
decl_stmt|;
specifier|const
name|MCSymbol
modifier|*
name|Function
decl_stmt|;
specifier|const
name|MCSymbol
modifier|*
name|PrologEnd
decl_stmt|;
specifier|const
name|MCSymbol
modifier|*
name|Symbol
decl_stmt|;
name|bool
name|HandlesUnwind
decl_stmt|;
name|bool
name|HandlesExceptions
decl_stmt|;
name|int
name|LastFrameInst
decl_stmt|;
specifier|const
name|FrameInfo
modifier|*
name|ChainedParent
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|Instruction
operator|>
name|Instructions
expr_stmt|;
name|FrameInfo
argument_list|()
operator|:
name|Begin
argument_list|(
name|nullptr
argument_list|)
operator|,
name|End
argument_list|(
name|nullptr
argument_list|)
operator|,
name|ExceptionHandler
argument_list|(
name|nullptr
argument_list|)
operator|,
name|Function
argument_list|(
name|nullptr
argument_list|)
operator|,
name|PrologEnd
argument_list|(
name|nullptr
argument_list|)
operator|,
name|Symbol
argument_list|(
name|nullptr
argument_list|)
operator|,
name|HandlesUnwind
argument_list|(
name|false
argument_list|)
operator|,
name|HandlesExceptions
argument_list|(
name|false
argument_list|)
operator|,
name|LastFrameInst
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|ChainedParent
argument_list|(
name|nullptr
argument_list|)
operator|,
name|Instructions
argument_list|()
block|{}
name|FrameInfo
argument_list|(
specifier|const
name|MCSymbol
operator|*
name|Function
argument_list|,
specifier|const
name|MCSymbol
operator|*
name|BeginFuncEHLabel
argument_list|)
operator|:
name|Begin
argument_list|(
name|BeginFuncEHLabel
argument_list|)
operator|,
name|End
argument_list|(
name|nullptr
argument_list|)
operator|,
name|ExceptionHandler
argument_list|(
name|nullptr
argument_list|)
operator|,
name|Function
argument_list|(
name|Function
argument_list|)
operator|,
name|PrologEnd
argument_list|(
name|nullptr
argument_list|)
operator|,
name|Symbol
argument_list|(
name|nullptr
argument_list|)
operator|,
name|HandlesUnwind
argument_list|(
name|false
argument_list|)
operator|,
name|HandlesExceptions
argument_list|(
name|false
argument_list|)
operator|,
name|LastFrameInst
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|ChainedParent
argument_list|(
name|nullptr
argument_list|)
operator|,
name|Instructions
argument_list|()
block|{}
name|FrameInfo
argument_list|(
specifier|const
name|MCSymbol
operator|*
name|Function
argument_list|,
specifier|const
name|MCSymbol
operator|*
name|BeginFuncEHLabel
argument_list|,
specifier|const
name|FrameInfo
operator|*
name|ChainedParent
argument_list|)
operator|:
name|Begin
argument_list|(
name|BeginFuncEHLabel
argument_list|)
operator|,
name|End
argument_list|(
name|nullptr
argument_list|)
operator|,
name|ExceptionHandler
argument_list|(
name|nullptr
argument_list|)
operator|,
name|Function
argument_list|(
name|Function
argument_list|)
operator|,
name|PrologEnd
argument_list|(
name|nullptr
argument_list|)
operator|,
name|Symbol
argument_list|(
name|nullptr
argument_list|)
operator|,
name|HandlesUnwind
argument_list|(
name|false
argument_list|)
operator|,
name|HandlesExceptions
argument_list|(
name|false
argument_list|)
operator|,
name|LastFrameInst
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|ChainedParent
argument_list|(
name|ChainedParent
argument_list|)
operator|,
name|Instructions
argument_list|()
block|{}
block|}
struct|;
name|class
name|UnwindEmitter
block|{
name|public
label|:
specifier|static
name|MCSection
modifier|*
name|getPDataSection
parameter_list|(
specifier|const
name|MCSymbol
modifier|*
name|Function
parameter_list|,
name|MCContext
modifier|&
name|Context
parameter_list|)
function_decl|;
specifier|static
name|MCSection
modifier|*
name|getXDataSection
parameter_list|(
specifier|const
name|MCSymbol
modifier|*
name|Function
parameter_list|,
name|MCContext
modifier|&
name|Context
parameter_list|)
function_decl|;
name|virtual
operator|~
name|UnwindEmitter
argument_list|()
block|{ }
comment|//
comment|// This emits the unwind info sections (.pdata and .xdata in PE/COFF).
comment|//
name|virtual
name|void
name|Emit
argument_list|(
argument|MCStreamer&Streamer
argument_list|)
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|void
name|EmitUnwindInfo
argument_list|(
name|MCStreamer
operator|&
name|Streamer
argument_list|,
name|FrameInfo
operator|*
name|FI
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
block|}
empty_stmt|;
block|}
comment|// namespace WinEH
block|}
end_decl_stmt

begin_comment
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

