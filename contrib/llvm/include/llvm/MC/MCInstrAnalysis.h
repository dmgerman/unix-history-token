begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- llvm/MC/MCInstrAnalysis.h - InstrDesc target hooks ------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines the MCInstrAnalysis class which the MCTargetDescs can
end_comment

begin_comment
comment|// derive from to give additional information to MC.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_include
include|#
directive|include
file|"llvm/MC/MCInst.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MCInstrDesc.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MCInstrInfo.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MCInstrAnalysis
block|{
name|protected
label|:
name|friend
name|class
name|Target
decl_stmt|;
specifier|const
name|MCInstrInfo
modifier|*
name|Info
decl_stmt|;
name|public
label|:
name|MCInstrAnalysis
argument_list|(
specifier|const
name|MCInstrInfo
operator|*
name|Info
argument_list|)
operator|:
name|Info
argument_list|(
argument|Info
argument_list|)
block|{}
name|virtual
operator|~
name|MCInstrAnalysis
argument_list|()
block|{}
name|virtual
name|bool
name|isBranch
argument_list|(
argument|const MCInst&Inst
argument_list|)
specifier|const
block|{
return|return
name|Info
operator|->
name|get
argument_list|(
name|Inst
operator|.
name|getOpcode
argument_list|()
argument_list|)
operator|.
name|isBranch
argument_list|()
return|;
block|}
name|virtual
name|bool
name|isConditionalBranch
argument_list|(
specifier|const
name|MCInst
operator|&
name|Inst
argument_list|)
decl|const
block|{
return|return
name|Info
operator|->
name|get
argument_list|(
name|Inst
operator|.
name|getOpcode
argument_list|()
argument_list|)
operator|.
name|isConditionalBranch
argument_list|()
return|;
block|}
name|virtual
name|bool
name|isUnconditionalBranch
argument_list|(
specifier|const
name|MCInst
operator|&
name|Inst
argument_list|)
decl|const
block|{
return|return
name|Info
operator|->
name|get
argument_list|(
name|Inst
operator|.
name|getOpcode
argument_list|()
argument_list|)
operator|.
name|isUnconditionalBranch
argument_list|()
return|;
block|}
name|virtual
name|bool
name|isIndirectBranch
argument_list|(
specifier|const
name|MCInst
operator|&
name|Inst
argument_list|)
decl|const
block|{
return|return
name|Info
operator|->
name|get
argument_list|(
name|Inst
operator|.
name|getOpcode
argument_list|()
argument_list|)
operator|.
name|isIndirectBranch
argument_list|()
return|;
block|}
name|virtual
name|bool
name|isCall
argument_list|(
specifier|const
name|MCInst
operator|&
name|Inst
argument_list|)
decl|const
block|{
return|return
name|Info
operator|->
name|get
argument_list|(
name|Inst
operator|.
name|getOpcode
argument_list|()
argument_list|)
operator|.
name|isCall
argument_list|()
return|;
block|}
name|virtual
name|bool
name|isReturn
argument_list|(
specifier|const
name|MCInst
operator|&
name|Inst
argument_list|)
decl|const
block|{
return|return
name|Info
operator|->
name|get
argument_list|(
name|Inst
operator|.
name|getOpcode
argument_list|()
argument_list|)
operator|.
name|isReturn
argument_list|()
return|;
block|}
name|virtual
name|bool
name|isTerminator
argument_list|(
specifier|const
name|MCInst
operator|&
name|Inst
argument_list|)
decl|const
block|{
return|return
name|Info
operator|->
name|get
argument_list|(
name|Inst
operator|.
name|getOpcode
argument_list|()
argument_list|)
operator|.
name|isTerminator
argument_list|()
return|;
block|}
comment|/// evaluateBranch - Given a branch instruction try to get the address the
comment|/// branch targets. Return true on success, and the address in Target.
name|virtual
name|bool
name|evaluateBranch
argument_list|(
specifier|const
name|MCInst
operator|&
name|Inst
argument_list|,
name|uint64_t
name|Addr
argument_list|,
name|uint64_t
name|Size
argument_list|,
name|uint64_t
operator|&
name|Target
argument_list|)
decl|const
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

end_unit

