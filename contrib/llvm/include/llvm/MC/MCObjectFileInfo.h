begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- llvm/MC/MCObjectFileInfo.h - Object File Info -----------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file describes common object file formats.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_MC_MCOBJECTFILEINFO_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_MC_MCOBJECTFILEINFO_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/Triple.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/CodeGen.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MCContext
decl_stmt|;
name|class
name|MCSection
decl_stmt|;
name|class
name|StringRef
decl_stmt|;
name|class
name|MCObjectFileInfo
block|{
name|protected
label|:
comment|/// CommDirectiveSupportsAlignment - True if .comm supports alignment.  This
comment|/// is a hack for as long as we support 10.4 Tiger, whose assembler doesn't
comment|/// support alignment on comm.
name|bool
name|CommDirectiveSupportsAlignment
decl_stmt|;
comment|/// SupportsWeakEmptyEHFrame - True if target object file supports a
comment|/// weak_definition of constant 0 for an omitted EH frame.
name|bool
name|SupportsWeakOmittedEHFrame
decl_stmt|;
comment|/// SupportsCompactUnwindWithoutEHFrame - True if the target object file
comment|/// supports emitting a compact unwind section without an associated EH frame
comment|/// section.
name|bool
name|SupportsCompactUnwindWithoutEHFrame
decl_stmt|;
comment|/// PersonalityEncoding, LSDAEncoding, TTypeEncoding - Some encoding values
comment|/// for EH.
name|unsigned
name|PersonalityEncoding
decl_stmt|;
name|unsigned
name|LSDAEncoding
decl_stmt|;
name|unsigned
name|FDECFIEncoding
decl_stmt|;
name|unsigned
name|TTypeEncoding
decl_stmt|;
comment|/// Section flags for eh_frame
name|unsigned
name|EHSectionType
decl_stmt|;
name|unsigned
name|EHSectionFlags
decl_stmt|;
comment|/// CompactUnwindDwarfEHFrameOnly - Compact unwind encoding indicating that we
comment|/// should emit only an EH frame.
name|unsigned
name|CompactUnwindDwarfEHFrameOnly
decl_stmt|;
comment|/// Section directive for standard text.
comment|///
name|MCSection
modifier|*
name|TextSection
decl_stmt|;
comment|/// Section directive for standard data.
comment|///
name|MCSection
modifier|*
name|DataSection
decl_stmt|;
comment|/// Section that is default initialized to zero.
name|MCSection
modifier|*
name|BSSSection
decl_stmt|;
comment|/// Section that is readonly and can contain arbitrary initialized data.
comment|/// Targets are not required to have a readonly section. If they don't,
comment|/// various bits of code will fall back to using the data section for
comment|/// constants.
name|MCSection
modifier|*
name|ReadOnlySection
decl_stmt|;
comment|/// This section contains the static constructor pointer list.
name|MCSection
modifier|*
name|StaticCtorSection
decl_stmt|;
comment|/// This section contains the static destructor pointer list.
name|MCSection
modifier|*
name|StaticDtorSection
decl_stmt|;
comment|/// If exception handling is supported by the target, this is the section the
comment|/// Language Specific Data Area information is emitted to.
name|MCSection
modifier|*
name|LSDASection
decl_stmt|;
comment|/// If exception handling is supported by the target and the target can
comment|/// support a compact representation of the CIE and FDE, this is the section
comment|/// to emit them into.
name|MCSection
modifier|*
name|CompactUnwindSection
decl_stmt|;
comment|// Dwarf sections for debug info.  If a target supports debug info, these must
comment|// be set.
name|MCSection
modifier|*
name|DwarfAbbrevSection
decl_stmt|;
name|MCSection
modifier|*
name|DwarfInfoSection
decl_stmt|;
name|MCSection
modifier|*
name|DwarfLineSection
decl_stmt|;
name|MCSection
modifier|*
name|DwarfFrameSection
decl_stmt|;
name|MCSection
modifier|*
name|DwarfPubTypesSection
decl_stmt|;
specifier|const
name|MCSection
modifier|*
name|DwarfDebugInlineSection
decl_stmt|;
name|MCSection
modifier|*
name|DwarfStrSection
decl_stmt|;
name|MCSection
modifier|*
name|DwarfLocSection
decl_stmt|;
name|MCSection
modifier|*
name|DwarfARangesSection
decl_stmt|;
name|MCSection
modifier|*
name|DwarfRangesSection
decl_stmt|;
comment|// The pubnames section is no longer generated by default.  The generation
comment|// can be enabled by a compiler flag.
name|MCSection
modifier|*
name|DwarfPubNamesSection
decl_stmt|;
comment|// DWARF5 Experimental Debug Info Sections
comment|/// DwarfAccelNamesSection, DwarfAccelObjCSection,
comment|/// DwarfAccelNamespaceSection, DwarfAccelTypesSection -
comment|/// If we use the DWARF accelerated hash tables then we want to emit these
comment|/// sections.
name|MCSection
modifier|*
name|DwarfAccelNamesSection
decl_stmt|;
name|MCSection
modifier|*
name|DwarfAccelObjCSection
decl_stmt|;
name|MCSection
modifier|*
name|DwarfAccelNamespaceSection
decl_stmt|;
name|MCSection
modifier|*
name|DwarfAccelTypesSection
decl_stmt|;
comment|/// These are used for the Fission separate debug information files.
name|MCSection
modifier|*
name|DwarfInfoDWOSection
decl_stmt|;
name|MCSection
modifier|*
name|DwarfTypesDWOSection
decl_stmt|;
name|MCSection
modifier|*
name|DwarfAbbrevDWOSection
decl_stmt|;
name|MCSection
modifier|*
name|DwarfStrDWOSection
decl_stmt|;
name|MCSection
modifier|*
name|DwarfLineDWOSection
decl_stmt|;
name|MCSection
modifier|*
name|DwarfLocDWOSection
decl_stmt|;
name|MCSection
modifier|*
name|DwarfStrOffDWOSection
decl_stmt|;
name|MCSection
modifier|*
name|DwarfAddrSection
decl_stmt|;
comment|/// Sections for newer gnu pubnames and pubtypes.
name|MCSection
modifier|*
name|DwarfGnuPubNamesSection
decl_stmt|;
name|MCSection
modifier|*
name|DwarfGnuPubTypesSection
decl_stmt|;
name|MCSection
modifier|*
name|COFFDebugSymbolsSection
decl_stmt|;
comment|// Extra TLS Variable Data section.  If the target needs to put additional
comment|// information for a TLS variable, it'll go here.
name|MCSection
modifier|*
name|TLSExtraDataSection
decl_stmt|;
comment|/// Section directive for Thread Local data. ELF, MachO and COFF.
name|MCSection
modifier|*
name|TLSDataSection
decl_stmt|;
comment|// Defaults to ".tdata".
comment|/// Section directive for Thread Local uninitialized data. Null if this target
comment|/// doesn't support a BSS section. ELF and MachO only.
name|MCSection
modifier|*
name|TLSBSSSection
decl_stmt|;
comment|// Defaults to ".tbss".
comment|/// StackMap section.
name|MCSection
modifier|*
name|StackMapSection
decl_stmt|;
comment|/// EH frame section. It is initialized on demand so it can be overwritten
comment|/// (with uniquing).
name|MCSection
modifier|*
name|EHFrameSection
decl_stmt|;
comment|/// ELF specific sections.
comment|///
name|MCSection
modifier|*
name|DataRelSection
decl_stmt|;
specifier|const
name|MCSection
modifier|*
name|DataRelLocalSection
decl_stmt|;
name|MCSection
modifier|*
name|DataRelROSection
decl_stmt|;
name|MCSection
modifier|*
name|DataRelROLocalSection
decl_stmt|;
name|MCSection
modifier|*
name|MergeableConst4Section
decl_stmt|;
name|MCSection
modifier|*
name|MergeableConst8Section
decl_stmt|;
name|MCSection
modifier|*
name|MergeableConst16Section
decl_stmt|;
comment|/// MachO specific sections.
comment|///
comment|/// Section for thread local structure information. Contains the source code
comment|/// name of the variable, visibility and a pointer to the initial value
comment|/// (.tdata or .tbss).
name|MCSection
modifier|*
name|TLSTLVSection
decl_stmt|;
comment|// Defaults to ".tlv".
comment|/// TLSThreadInitSection - Section for thread local data initialization
comment|/// functions.
specifier|const
name|MCSection
modifier|*
name|TLSThreadInitSection
decl_stmt|;
comment|// Defaults to ".thread_init_func".
name|MCSection
modifier|*
name|CStringSection
decl_stmt|;
name|MCSection
modifier|*
name|UStringSection
decl_stmt|;
name|MCSection
modifier|*
name|TextCoalSection
decl_stmt|;
name|MCSection
modifier|*
name|ConstTextCoalSection
decl_stmt|;
name|MCSection
modifier|*
name|ConstDataSection
decl_stmt|;
name|MCSection
modifier|*
name|DataCoalSection
decl_stmt|;
name|MCSection
modifier|*
name|DataCommonSection
decl_stmt|;
name|MCSection
modifier|*
name|DataBSSSection
decl_stmt|;
name|MCSection
modifier|*
name|FourByteConstantSection
decl_stmt|;
name|MCSection
modifier|*
name|EightByteConstantSection
decl_stmt|;
name|MCSection
modifier|*
name|SixteenByteConstantSection
decl_stmt|;
name|MCSection
modifier|*
name|LazySymbolPointerSection
decl_stmt|;
name|MCSection
modifier|*
name|NonLazySymbolPointerSection
decl_stmt|;
comment|/// COFF specific sections.
comment|///
name|MCSection
modifier|*
name|DrectveSection
decl_stmt|;
name|MCSection
modifier|*
name|PDataSection
decl_stmt|;
name|MCSection
modifier|*
name|XDataSection
decl_stmt|;
name|public
label|:
name|void
name|InitMCObjectFileInfo
argument_list|(
name|StringRef
name|TT
argument_list|,
name|Reloc
operator|::
name|Model
name|RM
argument_list|,
name|CodeModel
operator|::
name|Model
name|CM
argument_list|,
name|MCContext
operator|&
name|ctx
argument_list|)
decl_stmt|;
name|bool
name|getSupportsWeakOmittedEHFrame
argument_list|()
specifier|const
block|{
return|return
name|SupportsWeakOmittedEHFrame
return|;
block|}
name|bool
name|getSupportsCompactUnwindWithoutEHFrame
argument_list|()
specifier|const
block|{
return|return
name|SupportsCompactUnwindWithoutEHFrame
return|;
block|}
name|bool
name|getCommDirectiveSupportsAlignment
argument_list|()
specifier|const
block|{
return|return
name|CommDirectiveSupportsAlignment
return|;
block|}
name|unsigned
name|getPersonalityEncoding
argument_list|()
specifier|const
block|{
return|return
name|PersonalityEncoding
return|;
block|}
name|unsigned
name|getLSDAEncoding
argument_list|()
specifier|const
block|{
return|return
name|LSDAEncoding
return|;
block|}
name|unsigned
name|getFDEEncoding
argument_list|()
specifier|const
block|{
return|return
name|FDECFIEncoding
return|;
block|}
name|unsigned
name|getTTypeEncoding
argument_list|()
specifier|const
block|{
return|return
name|TTypeEncoding
return|;
block|}
name|unsigned
name|getCompactUnwindDwarfEHFrameOnly
argument_list|()
specifier|const
block|{
return|return
name|CompactUnwindDwarfEHFrameOnly
return|;
block|}
name|MCSection
operator|*
name|getTextSection
argument_list|()
specifier|const
block|{
return|return
name|TextSection
return|;
block|}
name|MCSection
operator|*
name|getDataSection
argument_list|()
specifier|const
block|{
return|return
name|DataSection
return|;
block|}
name|MCSection
operator|*
name|getBSSSection
argument_list|()
specifier|const
block|{
return|return
name|BSSSection
return|;
block|}
name|MCSection
operator|*
name|getLSDASection
argument_list|()
specifier|const
block|{
return|return
name|LSDASection
return|;
block|}
name|MCSection
operator|*
name|getCompactUnwindSection
argument_list|()
specifier|const
block|{
return|return
name|CompactUnwindSection
return|;
block|}
name|MCSection
operator|*
name|getDwarfAbbrevSection
argument_list|()
specifier|const
block|{
return|return
name|DwarfAbbrevSection
return|;
block|}
name|MCSection
operator|*
name|getDwarfInfoSection
argument_list|()
specifier|const
block|{
return|return
name|DwarfInfoSection
return|;
block|}
name|MCSection
operator|*
name|getDwarfLineSection
argument_list|()
specifier|const
block|{
return|return
name|DwarfLineSection
return|;
block|}
name|MCSection
operator|*
name|getDwarfFrameSection
argument_list|()
specifier|const
block|{
return|return
name|DwarfFrameSection
return|;
block|}
name|MCSection
operator|*
name|getDwarfPubNamesSection
argument_list|()
specifier|const
block|{
return|return
name|DwarfPubNamesSection
return|;
block|}
name|MCSection
operator|*
name|getDwarfPubTypesSection
argument_list|()
specifier|const
block|{
return|return
name|DwarfPubTypesSection
return|;
block|}
name|MCSection
operator|*
name|getDwarfGnuPubNamesSection
argument_list|()
specifier|const
block|{
return|return
name|DwarfGnuPubNamesSection
return|;
block|}
name|MCSection
operator|*
name|getDwarfGnuPubTypesSection
argument_list|()
specifier|const
block|{
return|return
name|DwarfGnuPubTypesSection
return|;
block|}
specifier|const
name|MCSection
operator|*
name|getDwarfDebugInlineSection
argument_list|()
specifier|const
block|{
return|return
name|DwarfDebugInlineSection
return|;
block|}
name|MCSection
operator|*
name|getDwarfStrSection
argument_list|()
specifier|const
block|{
return|return
name|DwarfStrSection
return|;
block|}
name|MCSection
operator|*
name|getDwarfLocSection
argument_list|()
specifier|const
block|{
return|return
name|DwarfLocSection
return|;
block|}
name|MCSection
operator|*
name|getDwarfARangesSection
argument_list|()
specifier|const
block|{
return|return
name|DwarfARangesSection
return|;
block|}
name|MCSection
operator|*
name|getDwarfRangesSection
argument_list|()
specifier|const
block|{
return|return
name|DwarfRangesSection
return|;
block|}
comment|// DWARF5 Experimental Debug Info Sections
name|MCSection
operator|*
name|getDwarfAccelNamesSection
argument_list|()
specifier|const
block|{
return|return
name|DwarfAccelNamesSection
return|;
block|}
name|MCSection
operator|*
name|getDwarfAccelObjCSection
argument_list|()
specifier|const
block|{
return|return
name|DwarfAccelObjCSection
return|;
block|}
name|MCSection
operator|*
name|getDwarfAccelNamespaceSection
argument_list|()
specifier|const
block|{
return|return
name|DwarfAccelNamespaceSection
return|;
block|}
name|MCSection
operator|*
name|getDwarfAccelTypesSection
argument_list|()
specifier|const
block|{
return|return
name|DwarfAccelTypesSection
return|;
block|}
name|MCSection
operator|*
name|getDwarfInfoDWOSection
argument_list|()
specifier|const
block|{
return|return
name|DwarfInfoDWOSection
return|;
block|}
name|MCSection
modifier|*
name|getDwarfTypesSection
argument_list|(
name|uint64_t
name|Hash
argument_list|)
decl|const
decl_stmt|;
name|MCSection
operator|*
name|getDwarfTypesDWOSection
argument_list|()
specifier|const
block|{
return|return
name|DwarfTypesDWOSection
return|;
block|}
name|MCSection
operator|*
name|getDwarfAbbrevDWOSection
argument_list|()
specifier|const
block|{
return|return
name|DwarfAbbrevDWOSection
return|;
block|}
name|MCSection
operator|*
name|getDwarfStrDWOSection
argument_list|()
specifier|const
block|{
return|return
name|DwarfStrDWOSection
return|;
block|}
name|MCSection
operator|*
name|getDwarfLineDWOSection
argument_list|()
specifier|const
block|{
return|return
name|DwarfLineDWOSection
return|;
block|}
name|MCSection
operator|*
name|getDwarfLocDWOSection
argument_list|()
specifier|const
block|{
return|return
name|DwarfLocDWOSection
return|;
block|}
name|MCSection
operator|*
name|getDwarfStrOffDWOSection
argument_list|()
specifier|const
block|{
return|return
name|DwarfStrOffDWOSection
return|;
block|}
name|MCSection
operator|*
name|getDwarfAddrSection
argument_list|()
specifier|const
block|{
return|return
name|DwarfAddrSection
return|;
block|}
name|MCSection
operator|*
name|getCOFFDebugSymbolsSection
argument_list|()
specifier|const
block|{
return|return
name|COFFDebugSymbolsSection
return|;
block|}
name|MCSection
operator|*
name|getTLSExtraDataSection
argument_list|()
specifier|const
block|{
return|return
name|TLSExtraDataSection
return|;
block|}
specifier|const
name|MCSection
operator|*
name|getTLSDataSection
argument_list|()
specifier|const
block|{
return|return
name|TLSDataSection
return|;
block|}
name|MCSection
operator|*
name|getTLSBSSSection
argument_list|()
specifier|const
block|{
return|return
name|TLSBSSSection
return|;
block|}
name|MCSection
operator|*
name|getStackMapSection
argument_list|()
specifier|const
block|{
return|return
name|StackMapSection
return|;
block|}
comment|/// ELF specific sections.
comment|///
name|MCSection
operator|*
name|getDataRelSection
argument_list|()
specifier|const
block|{
return|return
name|DataRelSection
return|;
block|}
specifier|const
name|MCSection
operator|*
name|getDataRelLocalSection
argument_list|()
specifier|const
block|{
return|return
name|DataRelLocalSection
return|;
block|}
name|MCSection
operator|*
name|getDataRelROSection
argument_list|()
specifier|const
block|{
return|return
name|DataRelROSection
return|;
block|}
name|MCSection
operator|*
name|getDataRelROLocalSection
argument_list|()
specifier|const
block|{
return|return
name|DataRelROLocalSection
return|;
block|}
specifier|const
name|MCSection
operator|*
name|getMergeableConst4Section
argument_list|()
specifier|const
block|{
return|return
name|MergeableConst4Section
return|;
block|}
specifier|const
name|MCSection
operator|*
name|getMergeableConst8Section
argument_list|()
specifier|const
block|{
return|return
name|MergeableConst8Section
return|;
block|}
specifier|const
name|MCSection
operator|*
name|getMergeableConst16Section
argument_list|()
specifier|const
block|{
return|return
name|MergeableConst16Section
return|;
block|}
comment|/// MachO specific sections.
comment|///
specifier|const
name|MCSection
operator|*
name|getTLSTLVSection
argument_list|()
specifier|const
block|{
return|return
name|TLSTLVSection
return|;
block|}
specifier|const
name|MCSection
operator|*
name|getTLSThreadInitSection
argument_list|()
specifier|const
block|{
return|return
name|TLSThreadInitSection
return|;
block|}
specifier|const
name|MCSection
operator|*
name|getCStringSection
argument_list|()
specifier|const
block|{
return|return
name|CStringSection
return|;
block|}
specifier|const
name|MCSection
operator|*
name|getUStringSection
argument_list|()
specifier|const
block|{
return|return
name|UStringSection
return|;
block|}
name|MCSection
operator|*
name|getTextCoalSection
argument_list|()
specifier|const
block|{
return|return
name|TextCoalSection
return|;
block|}
specifier|const
name|MCSection
operator|*
name|getConstTextCoalSection
argument_list|()
specifier|const
block|{
return|return
name|ConstTextCoalSection
return|;
block|}
specifier|const
name|MCSection
operator|*
name|getConstDataSection
argument_list|()
specifier|const
block|{
return|return
name|ConstDataSection
return|;
block|}
specifier|const
name|MCSection
operator|*
name|getDataCoalSection
argument_list|()
specifier|const
block|{
return|return
name|DataCoalSection
return|;
block|}
specifier|const
name|MCSection
operator|*
name|getDataCommonSection
argument_list|()
specifier|const
block|{
return|return
name|DataCommonSection
return|;
block|}
name|MCSection
operator|*
name|getDataBSSSection
argument_list|()
specifier|const
block|{
return|return
name|DataBSSSection
return|;
block|}
specifier|const
name|MCSection
operator|*
name|getFourByteConstantSection
argument_list|()
specifier|const
block|{
return|return
name|FourByteConstantSection
return|;
block|}
specifier|const
name|MCSection
operator|*
name|getEightByteConstantSection
argument_list|()
specifier|const
block|{
return|return
name|EightByteConstantSection
return|;
block|}
specifier|const
name|MCSection
operator|*
name|getSixteenByteConstantSection
argument_list|()
specifier|const
block|{
return|return
name|SixteenByteConstantSection
return|;
block|}
name|MCSection
operator|*
name|getLazySymbolPointerSection
argument_list|()
specifier|const
block|{
return|return
name|LazySymbolPointerSection
return|;
block|}
name|MCSection
operator|*
name|getNonLazySymbolPointerSection
argument_list|()
specifier|const
block|{
return|return
name|NonLazySymbolPointerSection
return|;
block|}
comment|/// COFF specific sections.
comment|///
name|MCSection
operator|*
name|getDrectveSection
argument_list|()
specifier|const
block|{
return|return
name|DrectveSection
return|;
block|}
name|MCSection
operator|*
name|getPDataSection
argument_list|()
specifier|const
block|{
return|return
name|PDataSection
return|;
block|}
name|MCSection
operator|*
name|getXDataSection
argument_list|()
specifier|const
block|{
return|return
name|XDataSection
return|;
block|}
name|MCSection
modifier|*
name|getEHFrameSection
parameter_list|()
block|{
if|if
condition|(
operator|!
name|EHFrameSection
condition|)
name|InitEHFrameSection
argument_list|()
expr_stmt|;
return|return
name|EHFrameSection
return|;
block|}
enum|enum
name|Environment
block|{
name|IsMachO
block|,
name|IsELF
block|,
name|IsCOFF
block|}
enum|;
name|Environment
name|getObjectFileType
argument_list|()
specifier|const
block|{
return|return
name|Env
return|;
block|}
name|Reloc
operator|::
name|Model
name|getRelocM
argument_list|()
specifier|const
block|{
return|return
name|RelocM
return|;
block|}
name|private
label|:
name|Environment
name|Env
decl_stmt|;
name|Reloc
operator|::
name|Model
name|RelocM
expr_stmt|;
name|CodeModel
operator|::
name|Model
name|CMModel
expr_stmt|;
name|MCContext
modifier|*
name|Ctx
decl_stmt|;
name|Triple
name|TT
decl_stmt|;
name|void
name|InitMachOMCObjectFileInfo
parameter_list|(
name|Triple
name|T
parameter_list|)
function_decl|;
name|void
name|InitELFMCObjectFileInfo
parameter_list|(
name|Triple
name|T
parameter_list|)
function_decl|;
name|void
name|InitCOFFMCObjectFileInfo
parameter_list|(
name|Triple
name|T
parameter_list|)
function_decl|;
comment|/// InitEHFrameSection - Initialize EHFrameSection on demand.
comment|///
name|void
name|InitEHFrameSection
parameter_list|()
function_decl|;
name|public
label|:
specifier|const
name|Triple
operator|&
name|getTargetTriple
argument_list|()
specifier|const
block|{
return|return
name|TT
return|;
block|}
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

