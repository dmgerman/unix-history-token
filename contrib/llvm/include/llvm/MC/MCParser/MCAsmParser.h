begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- llvm/MC/MCAsmParser.h - Abstract Asm Parser Interface ---*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_MC_MCPARSER_MCASMPARSER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_MC_MCPARSER_MCASMPARSER_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MCParser/AsmLexer.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/DataTypes.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MCAsmInfo
decl_stmt|;
name|class
name|MCAsmLexer
decl_stmt|;
name|class
name|MCAsmParserExtension
decl_stmt|;
name|class
name|MCContext
decl_stmt|;
name|class
name|MCExpr
decl_stmt|;
name|class
name|MCInstPrinter
decl_stmt|;
name|class
name|MCInstrInfo
decl_stmt|;
name|class
name|MCStreamer
decl_stmt|;
name|class
name|MCTargetAsmParser
decl_stmt|;
name|class
name|SMLoc
decl_stmt|;
name|class
name|SMRange
decl_stmt|;
name|class
name|SourceMgr
decl_stmt|;
name|class
name|Twine
decl_stmt|;
name|class
name|InlineAsmIdentifierInfo
block|{
name|public
label|:
name|void
modifier|*
name|OpDecl
decl_stmt|;
name|bool
name|IsVarDecl
decl_stmt|;
name|unsigned
name|Length
decl_stmt|,
name|Size
decl_stmt|,
name|Type
decl_stmt|;
name|void
name|clear
parameter_list|()
block|{
name|OpDecl
operator|=
name|nullptr
expr_stmt|;
name|IsVarDecl
operator|=
name|false
expr_stmt|;
name|Length
operator|=
literal|1
expr_stmt|;
name|Size
operator|=
literal|0
expr_stmt|;
name|Type
operator|=
literal|0
expr_stmt|;
block|}
block|}
empty_stmt|;
comment|/// \brief Generic Sema callback for assembly parser.
name|class
name|MCAsmParserSemaCallback
block|{
name|public
label|:
name|virtual
operator|~
name|MCAsmParserSemaCallback
argument_list|()
expr_stmt|;
name|virtual
name|void
modifier|*
name|LookupInlineAsmIdentifier
parameter_list|(
name|StringRef
modifier|&
name|LineBuf
parameter_list|,
name|InlineAsmIdentifierInfo
modifier|&
name|Info
parameter_list|,
name|bool
name|IsUnevaluatedContext
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|StringRef
name|LookupInlineAsmLabel
parameter_list|(
name|StringRef
name|Identifier
parameter_list|,
name|SourceMgr
modifier|&
name|SM
parameter_list|,
name|SMLoc
name|Location
parameter_list|,
name|bool
name|Create
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|LookupInlineAsmField
parameter_list|(
name|StringRef
name|Base
parameter_list|,
name|StringRef
name|Member
parameter_list|,
name|unsigned
modifier|&
name|Offset
parameter_list|)
init|=
literal|0
function_decl|;
block|}
empty_stmt|;
comment|/// \brief Generic assembler parser interface, for use by target specific
comment|/// assembly parsers.
name|class
name|MCAsmParser
block|{
name|public
label|:
typedef|typedef
name|bool
function_decl|(
modifier|*
name|DirectiveHandler
function_decl|)
parameter_list|(
name|MCAsmParserExtension
modifier|*
parameter_list|,
name|StringRef
parameter_list|,
name|SMLoc
parameter_list|)
function_decl|;
typedef|typedef
name|std
operator|::
name|pair
operator|<
name|MCAsmParserExtension
operator|*
operator|,
name|DirectiveHandler
operator|>
name|ExtensionDirectiveHandler
expr_stmt|;
name|private
label|:
name|MCAsmParser
argument_list|(
specifier|const
name|MCAsmParser
operator|&
argument_list|)
operator|=
name|delete
expr_stmt|;
name|void
name|operator
init|=
operator|(
specifier|const
name|MCAsmParser
operator|&
operator|)
operator|=
name|delete
decl_stmt|;
name|MCTargetAsmParser
modifier|*
name|TargetParser
decl_stmt|;
name|unsigned
name|ShowParsedOperands
range|:
literal|1
decl_stmt|;
name|protected
label|:
comment|// Can only create subclasses.
name|MCAsmParser
argument_list|()
expr_stmt|;
name|public
label|:
name|virtual
operator|~
name|MCAsmParser
argument_list|()
expr_stmt|;
name|virtual
name|void
name|addDirectiveHandler
parameter_list|(
name|StringRef
name|Directive
parameter_list|,
name|ExtensionDirectiveHandler
name|Handler
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|addAliasForDirective
parameter_list|(
name|StringRef
name|Directive
parameter_list|,
name|StringRef
name|Alias
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|SourceMgr
modifier|&
name|getSourceManager
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|MCAsmLexer
modifier|&
name|getLexer
parameter_list|()
init|=
literal|0
function_decl|;
specifier|const
name|MCAsmLexer
operator|&
name|getLexer
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|MCAsmParser
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|getLexer
argument_list|()
return|;
block|}
name|virtual
name|MCContext
modifier|&
name|getContext
parameter_list|()
init|=
literal|0
function_decl|;
comment|/// \brief Return the output streamer for the assembler.
name|virtual
name|MCStreamer
modifier|&
name|getStreamer
parameter_list|()
init|=
literal|0
function_decl|;
name|MCTargetAsmParser
operator|&
name|getTargetParser
argument_list|()
specifier|const
block|{
return|return
operator|*
name|TargetParser
return|;
block|}
name|void
name|setTargetParser
parameter_list|(
name|MCTargetAsmParser
modifier|&
name|P
parameter_list|)
function_decl|;
name|virtual
name|unsigned
name|getAssemblerDialect
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|void
name|setAssemblerDialect
parameter_list|(
name|unsigned
name|i
parameter_list|)
block|{ }
name|bool
name|getShowParsedOperands
argument_list|()
specifier|const
block|{
return|return
name|ShowParsedOperands
return|;
block|}
name|void
name|setShowParsedOperands
parameter_list|(
name|bool
name|Value
parameter_list|)
block|{
name|ShowParsedOperands
operator|=
name|Value
expr_stmt|;
block|}
comment|/// \brief Run the parser on the input source buffer.
name|virtual
name|bool
name|Run
parameter_list|(
name|bool
name|NoInitialTextSection
parameter_list|,
name|bool
name|NoFinalize
init|=
name|false
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|setParsingInlineAsm
parameter_list|(
name|bool
name|V
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|isParsingInlineAsm
parameter_list|()
init|=
literal|0
function_decl|;
comment|/// \brief Parse MS-style inline assembly.
name|virtual
name|bool
name|parseMSInlineAsm
argument_list|(
name|void
operator|*
name|AsmLoc
argument_list|,
name|std
operator|::
name|string
operator|&
name|AsmString
argument_list|,
name|unsigned
operator|&
name|NumOutputs
argument_list|,
name|unsigned
operator|&
name|NumInputs
argument_list|,
name|SmallVectorImpl
operator|<
name|std
operator|::
name|pair
operator|<
name|void
operator|*
argument_list|,
name|bool
operator|>>
operator|&
name|OpDecls
argument_list|,
name|SmallVectorImpl
operator|<
name|std
operator|::
name|string
operator|>
operator|&
name|Constraints
argument_list|,
name|SmallVectorImpl
operator|<
name|std
operator|::
name|string
operator|>
operator|&
name|Clobbers
argument_list|,
specifier|const
name|MCInstrInfo
operator|*
name|MII
argument_list|,
specifier|const
name|MCInstPrinter
operator|*
name|IP
argument_list|,
name|MCAsmParserSemaCallback
operator|&
name|SI
argument_list|)
init|=
literal|0
decl_stmt|;
comment|/// \brief Emit a note at the location \p L, with the message \p Msg.
name|virtual
name|void
name|Note
argument_list|(
name|SMLoc
name|L
argument_list|,
specifier|const
name|Twine
operator|&
name|Msg
argument_list|,
name|ArrayRef
operator|<
name|SMRange
operator|>
name|Ranges
operator|=
name|None
argument_list|)
init|=
literal|0
decl_stmt|;
comment|/// \brief Emit a warning at the location \p L, with the message \p Msg.
comment|///
comment|/// \return The return value is true, if warnings are fatal.
name|virtual
name|bool
name|Warning
argument_list|(
name|SMLoc
name|L
argument_list|,
specifier|const
name|Twine
operator|&
name|Msg
argument_list|,
name|ArrayRef
operator|<
name|SMRange
operator|>
name|Ranges
operator|=
name|None
argument_list|)
init|=
literal|0
decl_stmt|;
comment|/// \brief Emit an error at the location \p L, with the message \p Msg.
comment|///
comment|/// \return The return value is always true, as an idiomatic convenience to
comment|/// clients.
name|virtual
name|bool
name|Error
argument_list|(
name|SMLoc
name|L
argument_list|,
specifier|const
name|Twine
operator|&
name|Msg
argument_list|,
name|ArrayRef
operator|<
name|SMRange
operator|>
name|Ranges
operator|=
name|None
argument_list|)
init|=
literal|0
decl_stmt|;
comment|/// \brief Get the next AsmToken in the stream, possibly handling file
comment|/// inclusion first.
name|virtual
specifier|const
name|AsmToken
modifier|&
name|Lex
parameter_list|()
init|=
literal|0
function_decl|;
comment|/// \brief Get the current AsmToken from the stream.
specifier|const
name|AsmToken
operator|&
name|getTok
argument_list|()
specifier|const
expr_stmt|;
comment|/// \brief Report an error at the current lexer location.
name|bool
name|TokError
argument_list|(
specifier|const
name|Twine
operator|&
name|Msg
argument_list|,
name|ArrayRef
operator|<
name|SMRange
operator|>
name|Ranges
operator|=
name|None
argument_list|)
decl_stmt|;
comment|/// \brief Parse an identifier or string (as a quoted identifier) and set \p
comment|/// Res to the identifier contents.
name|virtual
name|bool
name|parseIdentifier
parameter_list|(
name|StringRef
modifier|&
name|Res
parameter_list|)
init|=
literal|0
function_decl|;
comment|/// \brief Parse up to the end of statement and return the contents from the
comment|/// current token until the end of the statement; the current token on exit
comment|/// will be either the EndOfStatement or EOF.
name|virtual
name|StringRef
name|parseStringToEndOfStatement
parameter_list|()
init|=
literal|0
function_decl|;
comment|/// \brief Parse the current token as a string which may include escaped
comment|/// characters and return the string contents.
name|virtual
name|bool
name|parseEscapedString
argument_list|(
name|std
operator|::
name|string
operator|&
name|Data
argument_list|)
init|=
literal|0
decl_stmt|;
comment|/// \brief Skip to the end of the current statement, for error recovery.
name|virtual
name|void
name|eatToEndOfStatement
parameter_list|()
init|=
literal|0
function_decl|;
comment|/// \brief Parse an arbitrary expression.
comment|///
comment|/// \param Res - The value of the expression. The result is undefined
comment|/// on error.
comment|/// \return - False on success.
name|virtual
name|bool
name|parseExpression
parameter_list|(
specifier|const
name|MCExpr
modifier|*
modifier|&
name|Res
parameter_list|,
name|SMLoc
modifier|&
name|EndLoc
parameter_list|)
init|=
literal|0
function_decl|;
name|bool
name|parseExpression
parameter_list|(
specifier|const
name|MCExpr
modifier|*
modifier|&
name|Res
parameter_list|)
function_decl|;
comment|/// \brief Parse a primary expression.
comment|///
comment|/// \param Res - The value of the expression. The result is undefined
comment|/// on error.
comment|/// \return - False on success.
name|virtual
name|bool
name|parsePrimaryExpr
parameter_list|(
specifier|const
name|MCExpr
modifier|*
modifier|&
name|Res
parameter_list|,
name|SMLoc
modifier|&
name|EndLoc
parameter_list|)
init|=
literal|0
function_decl|;
comment|/// \brief Parse an arbitrary expression, assuming that an initial '(' has
comment|/// already been consumed.
comment|///
comment|/// \param Res - The value of the expression. The result is undefined
comment|/// on error.
comment|/// \return - False on success.
name|virtual
name|bool
name|parseParenExpression
parameter_list|(
specifier|const
name|MCExpr
modifier|*
modifier|&
name|Res
parameter_list|,
name|SMLoc
modifier|&
name|EndLoc
parameter_list|)
init|=
literal|0
function_decl|;
comment|/// \brief Parse an expression which must evaluate to an absolute value.
comment|///
comment|/// \param Res - The value of the absolute expression. The result is undefined
comment|/// on error.
comment|/// \return - False on success.
name|virtual
name|bool
name|parseAbsoluteExpression
parameter_list|(
name|int64_t
modifier|&
name|Res
parameter_list|)
init|=
literal|0
function_decl|;
comment|/// \brief Ensure that we have a valid section set in the streamer. Otherwise,
comment|/// report an error and switch to .text.
name|virtual
name|void
name|checkForValidSection
parameter_list|()
init|=
literal|0
function_decl|;
comment|/// \brief Parse an arbitrary expression of a specified parenthesis depth,
comment|/// assuming that the initial '(' characters have already been consumed.
comment|///
comment|/// \param ParenDepth - Specifies how many trailing expressions outside the
comment|/// current parentheses we have to parse.
comment|/// \param Res - The value of the expression. The result is undefined
comment|/// on error.
comment|/// \return - False on success.
name|virtual
name|bool
name|parseParenExprOfDepth
parameter_list|(
name|unsigned
name|ParenDepth
parameter_list|,
specifier|const
name|MCExpr
modifier|*
modifier|&
name|Res
parameter_list|,
name|SMLoc
modifier|&
name|EndLoc
parameter_list|)
init|=
literal|0
function_decl|;
block|}
empty_stmt|;
comment|/// \brief Create an MCAsmParser instance.
name|MCAsmParser
modifier|*
name|createMCAsmParser
parameter_list|(
name|SourceMgr
modifier|&
parameter_list|,
name|MCContext
modifier|&
parameter_list|,
name|MCStreamer
modifier|&
parameter_list|,
specifier|const
name|MCAsmInfo
modifier|&
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_comment
comment|// End llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

