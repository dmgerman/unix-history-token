begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- llvm/MC/MCELFObjectWriter.h - ELF Object Writer ---------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_MC_MCELFOBJECTWRITER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_MC_MCELFOBJECTWRITER_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/Triple.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/DataTypes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ELF.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MCAssembler
decl_stmt|;
name|class
name|MCFixup
decl_stmt|;
name|class
name|MCFragment
decl_stmt|;
name|class
name|MCObjectWriter
decl_stmt|;
name|class
name|MCSymbol
decl_stmt|;
name|class
name|MCSymbolData
decl_stmt|;
name|class
name|MCValue
decl_stmt|;
name|class
name|raw_pwrite_stream
decl_stmt|;
struct|struct
name|ELFRelocationEntry
block|{
name|uint64_t
name|Offset
decl_stmt|;
comment|// Where is the relocation.
specifier|const
name|MCSymbol
modifier|*
name|Symbol
decl_stmt|;
comment|// The symbol to relocate with.
name|unsigned
name|Type
decl_stmt|;
comment|// The type of the relocation.
name|uint64_t
name|Addend
decl_stmt|;
comment|// The addend to use.
name|ELFRelocationEntry
argument_list|(
argument|uint64_t Offset
argument_list|,
argument|const MCSymbol *Symbol
argument_list|,
argument|unsigned Type
argument_list|,
argument|uint64_t Addend
argument_list|)
block|:
name|Offset
argument_list|(
name|Offset
argument_list|)
operator|,
name|Symbol
argument_list|(
name|Symbol
argument_list|)
operator|,
name|Type
argument_list|(
name|Type
argument_list|)
operator|,
name|Addend
argument_list|(
argument|Addend
argument_list|)
block|{}
block|}
struct|;
name|class
name|MCELFObjectTargetWriter
block|{
specifier|const
name|uint8_t
name|OSABI
decl_stmt|;
specifier|const
name|uint16_t
name|EMachine
decl_stmt|;
specifier|const
name|unsigned
name|HasRelocationAddend
range|:
literal|1
decl_stmt|;
specifier|const
name|unsigned
name|Is64Bit
range|:
literal|1
decl_stmt|;
specifier|const
name|unsigned
name|IsN64
range|:
literal|1
decl_stmt|;
name|protected
label|:
name|MCELFObjectTargetWriter
argument_list|(
argument|bool Is64Bit_
argument_list|,
argument|uint8_t OSABI_
argument_list|,
argument|uint16_t EMachine_
argument_list|,
argument|bool HasRelocationAddend
argument_list|,
argument|bool IsN64=false
argument_list|)
empty_stmt|;
name|public
label|:
specifier|static
name|uint8_t
name|getOSABI
argument_list|(
name|Triple
operator|::
name|OSType
name|OSType
argument_list|)
block|{
switch|switch
condition|(
name|OSType
condition|)
block|{
case|case
name|Triple
operator|::
name|CloudABI
case|:
return|return
name|ELF
operator|::
name|ELFOSABI_CLOUDABI
return|;
case|case
name|Triple
operator|::
name|PS4
case|:
case|case
name|Triple
operator|::
name|FreeBSD
case|:
return|return
name|ELF
operator|::
name|ELFOSABI_FREEBSD
return|;
case|case
name|Triple
operator|::
name|Linux
case|:
return|return
name|ELF
operator|::
name|ELFOSABI_LINUX
return|;
default|default:
return|return
name|ELF
operator|::
name|ELFOSABI_NONE
return|;
block|}
block|}
name|virtual
operator|~
name|MCELFObjectTargetWriter
argument_list|()
block|{}
name|virtual
name|unsigned
name|GetRelocType
argument_list|(
argument|const MCValue&Target
argument_list|,
argument|const MCFixup&Fixup
argument_list|,
argument|bool IsPCRel
argument_list|)
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|bool
name|needsRelocateWithSymbol
argument_list|(
specifier|const
name|MCSymbolData
operator|&
name|SD
argument_list|,
name|unsigned
name|Type
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|void
name|sortRelocs
argument_list|(
specifier|const
name|MCAssembler
operator|&
name|Asm
argument_list|,
name|std
operator|::
name|vector
operator|<
name|ELFRelocationEntry
operator|>
operator|&
name|Relocs
argument_list|)
decl_stmt|;
comment|/// \name Accessors
comment|/// @{
name|uint8_t
name|getOSABI
argument_list|()
specifier|const
block|{
return|return
name|OSABI
return|;
block|}
name|uint16_t
name|getEMachine
argument_list|()
specifier|const
block|{
return|return
name|EMachine
return|;
block|}
name|bool
name|hasRelocationAddend
argument_list|()
specifier|const
block|{
return|return
name|HasRelocationAddend
return|;
block|}
name|bool
name|is64Bit
argument_list|()
specifier|const
block|{
return|return
name|Is64Bit
return|;
block|}
name|bool
name|isN64
argument_list|()
specifier|const
block|{
return|return
name|IsN64
return|;
block|}
comment|/// @}
comment|// Instead of changing everyone's API we pack the N64 Type fields
comment|// into the existing 32 bit data unsigned.
define|#
directive|define
name|R_TYPE_SHIFT
value|0
define|#
directive|define
name|R_TYPE_MASK
value|0xffffff00
define|#
directive|define
name|R_TYPE2_SHIFT
value|8
define|#
directive|define
name|R_TYPE2_MASK
value|0xffff00ff
define|#
directive|define
name|R_TYPE3_SHIFT
value|16
define|#
directive|define
name|R_TYPE3_MASK
value|0xff00ffff
define|#
directive|define
name|R_SSYM_SHIFT
value|24
define|#
directive|define
name|R_SSYM_MASK
value|0x00ffffff
comment|// N64 relocation type accessors
name|uint8_t
name|getRType
argument_list|(
name|uint32_t
name|Type
argument_list|)
decl|const
block|{
return|return
call|(
name|unsigned
call|)
argument_list|(
operator|(
name|Type
operator|>>
name|R_TYPE_SHIFT
operator|)
operator|&
literal|0xff
argument_list|)
return|;
block|}
name|uint8_t
name|getRType2
argument_list|(
name|uint32_t
name|Type
argument_list|)
decl|const
block|{
return|return
call|(
name|unsigned
call|)
argument_list|(
operator|(
name|Type
operator|>>
name|R_TYPE2_SHIFT
operator|)
operator|&
literal|0xff
argument_list|)
return|;
block|}
name|uint8_t
name|getRType3
argument_list|(
name|uint32_t
name|Type
argument_list|)
decl|const
block|{
return|return
call|(
name|unsigned
call|)
argument_list|(
operator|(
name|Type
operator|>>
name|R_TYPE3_SHIFT
operator|)
operator|&
literal|0xff
argument_list|)
return|;
block|}
name|uint8_t
name|getRSsym
argument_list|(
name|uint32_t
name|Type
argument_list|)
decl|const
block|{
return|return
call|(
name|unsigned
call|)
argument_list|(
operator|(
name|Type
operator|>>
name|R_SSYM_SHIFT
operator|)
operator|&
literal|0xff
argument_list|)
return|;
block|}
comment|// N64 relocation type setting
name|unsigned
name|setRType
argument_list|(
name|unsigned
name|Value
argument_list|,
name|unsigned
name|Type
argument_list|)
decl|const
block|{
return|return
operator|(
operator|(
name|Type
operator|&
name|R_TYPE_MASK
operator|)
operator||
operator|(
operator|(
name|Value
operator|&
literal|0xff
operator|)
operator|<<
name|R_TYPE_SHIFT
operator|)
operator|)
return|;
block|}
name|unsigned
name|setRType2
argument_list|(
name|unsigned
name|Value
argument_list|,
name|unsigned
name|Type
argument_list|)
decl|const
block|{
return|return
operator|(
name|Type
operator|&
name|R_TYPE2_MASK
operator|)
operator||
operator|(
operator|(
name|Value
operator|&
literal|0xff
operator|)
operator|<<
name|R_TYPE2_SHIFT
operator|)
return|;
block|}
name|unsigned
name|setRType3
argument_list|(
name|unsigned
name|Value
argument_list|,
name|unsigned
name|Type
argument_list|)
decl|const
block|{
return|return
operator|(
name|Type
operator|&
name|R_TYPE3_MASK
operator|)
operator||
operator|(
operator|(
name|Value
operator|&
literal|0xff
operator|)
operator|<<
name|R_TYPE3_SHIFT
operator|)
return|;
block|}
name|unsigned
name|setRSsym
argument_list|(
name|unsigned
name|Value
argument_list|,
name|unsigned
name|Type
argument_list|)
decl|const
block|{
return|return
operator|(
name|Type
operator|&
name|R_SSYM_MASK
operator|)
operator||
operator|(
operator|(
name|Value
operator|&
literal|0xff
operator|)
operator|<<
name|R_SSYM_SHIFT
operator|)
return|;
block|}
block|}
empty_stmt|;
comment|/// \brief Construct a new ELF writer instance.
comment|///
comment|/// \param MOTW - The target specific ELF writer subclass.
comment|/// \param OS - The stream to write to.
comment|/// \returns The constructed object writer.
name|MCObjectWriter
modifier|*
name|createELFObjectWriter
parameter_list|(
name|MCELFObjectTargetWriter
modifier|*
name|MOTW
parameter_list|,
name|raw_pwrite_stream
modifier|&
name|OS
parameter_list|,
name|bool
name|IsLittleEndian
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_comment
comment|// End llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

