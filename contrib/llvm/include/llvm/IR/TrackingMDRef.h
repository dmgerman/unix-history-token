begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- llvm/IR/TrackingMDRef.h - Tracking Metadata references ---*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// References to metadata that track RAUW.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_IR_TRACKINGMDREF_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_IR_TRACKINGMDREF_H
end_define

begin_include
include|#
directive|include
file|"llvm/IR/Metadata.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Casting.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|/// \brief Tracking metadata reference.
comment|///
comment|/// This class behaves like \a TrackingVH, but for metadata.
name|class
name|TrackingMDRef
block|{
name|Metadata
modifier|*
name|MD
decl_stmt|;
name|public
label|:
name|TrackingMDRef
argument_list|()
operator|:
name|MD
argument_list|(
argument|nullptr
argument_list|)
block|{}
name|explicit
name|TrackingMDRef
argument_list|(
name|Metadata
operator|*
name|MD
argument_list|)
operator|:
name|MD
argument_list|(
argument|MD
argument_list|)
block|{
name|track
argument_list|()
block|; }
name|TrackingMDRef
argument_list|(
name|TrackingMDRef
operator|&&
name|X
argument_list|)
operator|:
name|MD
argument_list|(
argument|X.MD
argument_list|)
block|{
name|retrack
argument_list|(
name|X
argument_list|)
block|; }
name|TrackingMDRef
argument_list|(
specifier|const
name|TrackingMDRef
operator|&
name|X
argument_list|)
operator|:
name|MD
argument_list|(
argument|X.MD
argument_list|)
block|{
name|track
argument_list|()
block|; }
name|TrackingMDRef
operator|&
name|operator
operator|=
operator|(
name|TrackingMDRef
operator|&&
name|X
operator|)
block|{
if|if
condition|(
operator|&
name|X
operator|==
name|this
condition|)
return|return
operator|*
name|this
return|;
name|untrack
argument_list|()
expr_stmt|;
name|MD
operator|=
name|X
operator|.
name|MD
expr_stmt|;
name|retrack
argument_list|(
name|X
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|TrackingMDRef
modifier|&
name|operator
init|=
operator|(
specifier|const
name|TrackingMDRef
operator|&
name|X
operator|)
block|{
if|if
condition|(
operator|&
name|X
operator|==
name|this
condition|)
return|return
operator|*
name|this
return|;
name|untrack
argument_list|()
decl_stmt|;
name|MD
operator|=
name|X
operator|.
name|MD
expr_stmt|;
name|track
argument_list|()
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_decl_stmt

begin_expr_stmt
operator|~
name|TrackingMDRef
argument_list|()
block|{
name|untrack
argument_list|()
block|; }
name|Metadata
operator|*
name|get
argument_list|()
specifier|const
block|{
return|return
name|MD
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|operator
name|Metadata
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|get
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|Metadata
operator|*
name|operator
operator|->
expr|(
end_expr_stmt

begin_expr_stmt
unit|)
specifier|const
block|{
return|return
name|get
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|Metadata
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|get
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|void
name|reset
parameter_list|()
block|{
name|untrack
argument_list|()
expr_stmt|;
name|MD
operator|=
name|nullptr
expr_stmt|;
block|}
end_function

begin_function
name|void
name|reset
parameter_list|(
name|Metadata
modifier|*
name|MD
parameter_list|)
block|{
name|untrack
argument_list|()
expr_stmt|;
name|this
operator|->
name|MD
operator|=
name|MD
expr_stmt|;
name|track
argument_list|()
expr_stmt|;
block|}
end_function

begin_comment
comment|/// \brief Check whether this has a trivial destructor.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// If \c MD isn't replaceable, the destructor will be a no-op.
end_comment

begin_expr_stmt
name|bool
name|hasTrivialDestructor
argument_list|()
specifier|const
block|{
return|return
operator|!
name|MD
operator|||
operator|!
name|MetadataTracking
operator|::
name|isReplaceable
argument_list|(
operator|*
name|MD
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|TrackingMDRef
operator|&
name|X
operator|)
specifier|const
block|{
return|return
name|MD
operator|==
name|X
operator|.
name|MD
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|TrackingMDRef
operator|&
name|X
operator|)
specifier|const
block|{
return|return
name|MD
operator|!=
name|X
operator|.
name|MD
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_function
name|void
name|track
parameter_list|()
block|{
if|if
condition|(
name|MD
condition|)
name|MetadataTracking
operator|::
name|track
argument_list|(
name|MD
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|untrack
parameter_list|()
block|{
if|if
condition|(
name|MD
condition|)
name|MetadataTracking
operator|::
name|untrack
argument_list|(
name|MD
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|retrack
parameter_list|(
name|TrackingMDRef
modifier|&
name|X
parameter_list|)
block|{
name|assert
argument_list|(
name|MD
operator|==
name|X
operator|.
name|MD
operator|&&
literal|"Expected values to match"
argument_list|)
expr_stmt|;
if|if
condition|(
name|X
operator|.
name|MD
condition|)
block|{
name|MetadataTracking
operator|::
name|retrack
argument_list|(
name|X
operator|.
name|MD
argument_list|,
name|MD
argument_list|)
expr_stmt|;
name|X
operator|.
name|MD
operator|=
name|nullptr
expr_stmt|;
block|}
block|}
end_function

begin_comment
unit|};
comment|/// \brief Typed tracking ref.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// Track refererences of a particular type.  It's useful to use this for \a
end_comment

begin_comment
comment|/// MDNode and \a ValueAsMetadata.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|class
name|TypedTrackingMDRef
block|{
name|TrackingMDRef
name|Ref
block|;
name|public
operator|:
name|TypedTrackingMDRef
argument_list|()
block|{}
name|explicit
name|TypedTrackingMDRef
argument_list|(
name|T
operator|*
name|MD
argument_list|)
operator|:
name|Ref
argument_list|(
argument|static_cast<Metadata *>(MD)
argument_list|)
block|{}
name|TypedTrackingMDRef
argument_list|(
name|TypedTrackingMDRef
operator|&&
name|X
argument_list|)
operator|:
name|Ref
argument_list|(
argument|std::move(X.Ref)
argument_list|)
block|{}
name|TypedTrackingMDRef
argument_list|(
specifier|const
name|TypedTrackingMDRef
operator|&
name|X
argument_list|)
operator|:
name|Ref
argument_list|(
argument|X.Ref
argument_list|)
block|{}
name|TypedTrackingMDRef
operator|&
name|operator
operator|=
operator|(
name|TypedTrackingMDRef
operator|&&
name|X
operator|)
block|{
name|Ref
operator|=
name|std
operator|::
name|move
argument_list|(
name|X
operator|.
name|Ref
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
name|TypedTrackingMDRef
operator|&
name|operator
operator|=
operator|(
specifier|const
name|TypedTrackingMDRef
operator|&
name|X
operator|)
block|{
name|Ref
operator|=
name|X
operator|.
name|Ref
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|T
operator|*
name|get
argument_list|()
specifier|const
block|{
return|return
operator|(
name|T
operator|*
operator|)
name|Ref
operator|.
name|get
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|operator
name|T
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|get
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|T
operator|*
name|operator
operator|->
expr|(
end_expr_stmt

begin_expr_stmt
unit|)
specifier|const
block|{
return|return
name|get
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|T
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|get
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|TypedTrackingMDRef
operator|&
name|X
operator|)
specifier|const
block|{
return|return
name|Ref
operator|==
name|X
operator|.
name|Ref
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|TypedTrackingMDRef
operator|&
name|X
operator|)
specifier|const
block|{
return|return
name|Ref
operator|!=
name|X
operator|.
name|Ref
return|;
block|}
end_expr_stmt

begin_function
name|void
name|reset
parameter_list|()
block|{
name|Ref
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
name|void
name|reset
parameter_list|(
name|T
modifier|*
name|MD
parameter_list|)
block|{
name|Ref
operator|.
name|reset
argument_list|(
name|static_cast
operator|<
name|Metadata
operator|*
operator|>
operator|(
name|MD
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/// \brief Check whether this has a trivial destructor.
end_comment

begin_expr_stmt
name|bool
name|hasTrivialDestructor
argument_list|()
specifier|const
block|{
return|return
name|Ref
operator|.
name|hasTrivialDestructor
argument_list|()
return|;
block|}
end_expr_stmt

begin_typedef
unit|};
typedef|typedef
name|TypedTrackingMDRef
operator|<
name|MDNode
operator|>
name|TrackingMDNodeRef
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|TypedTrackingMDRef
operator|<
name|ValueAsMetadata
operator|>
name|TrackingValueAsMetadataRef
expr_stmt|;
end_typedef

begin_comment
comment|// Expose the underlying metadata to casting.
end_comment

begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|simplify_type
operator|<
name|TrackingMDRef
operator|>
block|{
typedef|typedef
name|Metadata
modifier|*
name|SimpleType
typedef|;
specifier|static
name|SimpleType
name|getSimplifiedValue
argument_list|(
argument|TrackingMDRef&MD
argument_list|)
block|{
return|return
name|MD
operator|.
name|get
argument_list|()
return|;
block|}
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|simplify_type
operator|<
specifier|const
name|TrackingMDRef
operator|>
block|{
typedef|typedef
name|Metadata
modifier|*
name|SimpleType
typedef|;
specifier|static
name|SimpleType
name|getSimplifiedValue
argument_list|(
argument|const TrackingMDRef&MD
argument_list|)
block|{
return|return
name|MD
operator|.
name|get
argument_list|()
return|;
block|}
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
expr|struct
name|simplify_type
operator|<
name|TypedTrackingMDRef
operator|<
name|T
operator|>>
block|{
typedef|typedef
name|T
modifier|*
name|SimpleType
typedef|;
specifier|static
name|SimpleType
name|getSimplifiedValue
argument_list|(
argument|TypedTrackingMDRef<T>&MD
argument_list|)
block|{
return|return
name|MD
operator|.
name|get
argument_list|()
return|;
block|}
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
expr|struct
name|simplify_type
operator|<
specifier|const
name|TypedTrackingMDRef
operator|<
name|T
operator|>>
block|{
typedef|typedef
name|T
modifier|*
name|SimpleType
typedef|;
specifier|static
name|SimpleType
name|getSimplifiedValue
argument_list|(
argument|const TypedTrackingMDRef<T>&MD
argument_list|)
block|{
return|return
name|MD
operator|.
name|get
argument_list|()
return|;
block|}
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

