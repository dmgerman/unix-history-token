begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- llvm/ModuleSummaryIndexYAML.h - YAML I/O for summary ----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_IR_MODULESUMMARYINDEXYAML_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_IR_MODULESUMMARYINDEXYAML_H
end_define

begin_include
include|#
directive|include
file|"llvm/IR/ModuleSummaryIndex.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/YAMLTraits.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|yaml
block|{
name|template
operator|<
operator|>
expr|struct
name|ScalarEnumerationTraits
operator|<
name|TypeTestResolution
operator|::
name|Kind
operator|>
block|{
specifier|static
name|void
name|enumeration
argument_list|(
argument|IO&io
argument_list|,
argument|TypeTestResolution::Kind&value
argument_list|)
block|{
name|io
operator|.
name|enumCase
argument_list|(
name|value
argument_list|,
literal|"Unsat"
argument_list|,
name|TypeTestResolution
operator|::
name|Unsat
argument_list|)
block|;
name|io
operator|.
name|enumCase
argument_list|(
name|value
argument_list|,
literal|"ByteArray"
argument_list|,
name|TypeTestResolution
operator|::
name|ByteArray
argument_list|)
block|;
name|io
operator|.
name|enumCase
argument_list|(
name|value
argument_list|,
literal|"Inline"
argument_list|,
name|TypeTestResolution
operator|::
name|Inline
argument_list|)
block|;
name|io
operator|.
name|enumCase
argument_list|(
name|value
argument_list|,
literal|"Single"
argument_list|,
name|TypeTestResolution
operator|::
name|Single
argument_list|)
block|;
name|io
operator|.
name|enumCase
argument_list|(
name|value
argument_list|,
literal|"AllOnes"
argument_list|,
name|TypeTestResolution
operator|::
name|AllOnes
argument_list|)
block|;   }
block|}
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|TypeTestResolution
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
argument|IO&io
argument_list|,
argument|TypeTestResolution&res
argument_list|)
block|{
name|io
operator|.
name|mapRequired
argument_list|(
literal|"Kind"
argument_list|,
name|res
operator|.
name|TheKind
argument_list|)
block|;
name|io
operator|.
name|mapRequired
argument_list|(
literal|"SizeBitWidth"
argument_list|,
name|res
operator|.
name|SizeBitWidth
argument_list|)
block|;   }
block|}
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|TypeIdSummary
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
argument|IO&io
argument_list|,
argument|TypeIdSummary& summary
argument_list|)
block|{
name|io
operator|.
name|mapRequired
argument_list|(
literal|"TTRes"
argument_list|,
name|summary
operator|.
name|TTRes
argument_list|)
block|;   }
block|}
expr_stmt|;
struct|struct
name|FunctionSummaryYaml
block|{
name|std
operator|::
name|vector
operator|<
name|uint64_t
operator|>
name|TypeTests
expr_stmt|;
block|}
struct|;
block|}
comment|// End yaml namespace
block|}
end_decl_stmt

begin_comment
comment|// End llvm namespace
end_comment

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|uint64_t
argument_list|)
end_macro

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|yaml
block|{
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|FunctionSummaryYaml
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
argument|IO&io
argument_list|,
argument|FunctionSummaryYaml& summary
argument_list|)
block|{
name|io
operator|.
name|mapRequired
argument_list|(
literal|"TypeTests"
argument_list|,
name|summary
operator|.
name|TypeTests
argument_list|)
block|;   }
block|}
expr_stmt|;
block|}
comment|// End yaml namespace
block|}
end_decl_stmt

begin_comment
comment|// End llvm namespace
end_comment

begin_macro
name|LLVM_YAML_IS_STRING_MAP
argument_list|(
argument|TypeIdSummary
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|FunctionSummaryYaml
argument_list|)
end_macro

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|yaml
block|{
comment|// FIXME: Add YAML mappings for the rest of the module summary.
name|template
operator|<
operator|>
expr|struct
name|CustomMappingTraits
operator|<
name|GlobalValueSummaryMapTy
operator|>
block|{
specifier|static
name|void
name|inputOne
argument_list|(
argument|IO&io
argument_list|,
argument|StringRef Key
argument_list|,
argument|GlobalValueSummaryMapTy&V
argument_list|)
block|{
name|std
operator|::
name|vector
operator|<
name|FunctionSummaryYaml
operator|>
name|FSums
block|;
name|io
operator|.
name|mapRequired
argument_list|(
name|Key
operator|.
name|str
argument_list|()
operator|.
name|c_str
argument_list|()
argument_list|,
name|FSums
argument_list|)
block|;
name|uint64_t
name|KeyInt
block|;
if|if
condition|(
name|Key
operator|.
name|getAsInteger
argument_list|(
literal|0
argument_list|,
name|KeyInt
argument_list|)
condition|)
block|{
name|io
operator|.
name|setError
argument_list|(
literal|"key not an integer"
argument_list|)
expr_stmt|;
return|return;
block|}
name|auto
operator|&
name|Elem
operator|=
name|V
index|[
name|KeyInt
index|]
expr_stmt|;
for|for
control|(
name|auto
operator|&
name|FSum
operator|:
name|FSums
control|)
block|{
name|GlobalValueSummary
operator|::
name|GVFlags
name|GVFlags
argument_list|(
name|GlobalValue
operator|::
name|ExternalLinkage
argument_list|,
name|false
argument_list|,
name|false
argument_list|)
expr_stmt|;
name|Elem
operator|.
name|push_back
argument_list|(
name|llvm
operator|::
name|make_unique
operator|<
name|FunctionSummary
operator|>
operator|(
name|GVFlags
operator|,
literal|0
operator|,
name|ArrayRef
operator|<
name|ValueInfo
operator|>
block|{}
operator|,
name|ArrayRef
operator|<
name|FunctionSummary
operator|::
name|EdgeTy
operator|>
block|{}
operator|,
name|std
operator|::
name|move
argument_list|(
name|FSum
operator|.
name|TypeTests
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|void
name|output
argument_list|(
argument|IO&io
argument_list|,
argument|GlobalValueSummaryMapTy&V
argument_list|)
block|{
for|for
control|(
name|auto
operator|&
name|P
operator|:
name|V
control|)
block|{
name|std
operator|::
name|vector
operator|<
name|FunctionSummaryYaml
operator|>
name|FSums
expr_stmt|;
for|for
control|(
name|auto
operator|&
name|Sum
operator|:
name|P
operator|.
name|second
control|)
block|{
if|if
condition|(
name|auto
operator|*
name|FSum
operator|=
name|dyn_cast
operator|<
name|FunctionSummary
operator|>
operator|(
name|Sum
operator|.
name|get
argument_list|()
operator|)
condition|)
name|FSums
operator|.
name|push_back
argument_list|(
name|FunctionSummaryYaml
block|{
name|FSum
operator|->
name|type_tests
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|FSums
operator|.
name|empty
argument_list|()
condition|)
name|io
operator|.
name|mapRequired
argument_list|(
name|llvm
operator|::
name|utostr
argument_list|(
name|P
operator|.
name|first
argument_list|)
operator|.
name|c_str
argument_list|()
argument_list|,
name|FSums
argument_list|)
expr_stmt|;
block|}
block|}
block|}
empty_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|ModuleSummaryIndex
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
argument|IO&io
argument_list|,
argument|ModuleSummaryIndex& index
argument_list|)
block|{
name|io
operator|.
name|mapRequired
argument_list|(
literal|"GlobalValueMap"
argument_list|,
name|index
operator|.
name|GlobalValueMap
argument_list|)
block|;
name|io
operator|.
name|mapRequired
argument_list|(
literal|"TypeIdMap"
argument_list|,
name|index
operator|.
name|TypeIdMap
argument_list|)
block|;   }
block|}
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// End yaml namespace
end_comment

begin_comment
unit|}
comment|// End llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

