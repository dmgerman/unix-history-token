begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- llvm/Operator.h - Operator utility subclass -------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines various classes for working with Instructions and
end_comment

begin_comment
comment|// ConstantExprs.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_IR_OPERATOR_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_IR_OPERATOR_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/None.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/Optional.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Constants.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/DataLayout.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/DerivedTypes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Instruction.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Type.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Value.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Casting.h"
end_include

begin_include
include|#
directive|include
file|<cstddef>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|/// This is a utility class that provides an abstraction for the common
comment|/// functionality between Instructions and ConstantExprs.
name|class
name|Operator
range|:
name|public
name|User
block|{
name|protected
operator|:
comment|// NOTE: Cannot use = delete because it's not legal to delete
comment|// an overridden method that's not deleted in the base class. Cannot leave
comment|// this unimplemented because that leads to an ODR-violation.
operator|~
name|Operator
argument_list|()
name|override
block|;
name|public
operator|:
comment|// The Operator class is intended to be used as a utility, and is never itself
comment|// instantiated.
name|Operator
argument_list|()
operator|=
name|delete
block|;
name|void
operator|*
name|operator
name|new
argument_list|(
name|size_t
argument_list|,
name|unsigned
argument_list|)
operator|=
name|delete
block|;
name|void
operator|*
name|operator
name|new
argument_list|(
argument|size_t s
argument_list|)
operator|=
name|delete
block|;
comment|/// Return the opcode for this Instruction or ConstantExpr.
name|unsigned
name|getOpcode
argument_list|()
specifier|const
block|{
if|if
condition|(
specifier|const
name|Instruction
modifier|*
name|I
init|=
name|dyn_cast
operator|<
name|Instruction
operator|>
operator|(
name|this
operator|)
condition|)
return|return
name|I
operator|->
name|getOpcode
argument_list|()
return|;
return|return
name|cast
operator|<
name|ConstantExpr
operator|>
operator|(
name|this
operator|)
operator|->
name|getOpcode
argument_list|()
return|;
block|}
comment|/// If V is an Instruction or ConstantExpr, return its opcode.
comment|/// Otherwise return UserOp1.
specifier|static
name|unsigned
name|getOpcode
parameter_list|(
specifier|const
name|Value
modifier|*
name|V
parameter_list|)
block|{
if|if
condition|(
specifier|const
name|Instruction
modifier|*
name|I
init|=
name|dyn_cast
operator|<
name|Instruction
operator|>
operator|(
name|V
operator|)
condition|)
return|return
name|I
operator|->
name|getOpcode
argument_list|()
return|;
if|if
condition|(
specifier|const
name|ConstantExpr
modifier|*
name|CE
init|=
name|dyn_cast
operator|<
name|ConstantExpr
operator|>
operator|(
name|V
operator|)
condition|)
return|return
name|CE
operator|->
name|getOpcode
argument_list|()
return|;
return|return
name|Instruction
operator|::
name|UserOp1
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
parameter_list|(
specifier|const
name|Instruction
modifier|*
parameter_list|)
block|{
return|return
name|true
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
parameter_list|(
specifier|const
name|ConstantExpr
modifier|*
parameter_list|)
block|{
return|return
name|true
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
parameter_list|(
specifier|const
name|Value
modifier|*
name|V
parameter_list|)
block|{
return|return
name|isa
operator|<
name|Instruction
operator|>
operator|(
name|V
operator|)
operator|||
name|isa
operator|<
name|ConstantExpr
operator|>
operator|(
name|V
operator|)
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/// Utility class for integer arithmetic operators which may exhibit overflow -
end_comment

begin_comment
comment|/// Add, Sub, and Mul. It does not include SDiv, despite that operator having
end_comment

begin_comment
comment|/// the potential for overflow.
end_comment

begin_decl_stmt
name|class
name|OverflowingBinaryOperator
range|:
name|public
name|Operator
block|{
name|public
operator|:
expr|enum
block|{
name|NoUnsignedWrap
operator|=
operator|(
literal|1
operator|<<
literal|0
operator|)
block|,
name|NoSignedWrap
operator|=
operator|(
literal|1
operator|<<
literal|1
operator|)
block|}
block|;
name|private
operator|:
name|friend
name|class
name|Instruction
block|;
name|friend
name|class
name|ConstantExpr
block|;
name|void
name|setHasNoUnsignedWrap
argument_list|(
argument|bool B
argument_list|)
block|{
name|SubclassOptionalData
operator|=
operator|(
name|SubclassOptionalData
operator|&
operator|~
name|NoUnsignedWrap
operator|)
operator||
operator|(
name|B
operator|*
name|NoUnsignedWrap
operator|)
block|;   }
name|void
name|setHasNoSignedWrap
argument_list|(
argument|bool B
argument_list|)
block|{
name|SubclassOptionalData
operator|=
operator|(
name|SubclassOptionalData
operator|&
operator|~
name|NoSignedWrap
operator|)
operator||
operator|(
name|B
operator|*
name|NoSignedWrap
operator|)
block|;   }
name|public
operator|:
comment|/// Test whether this operation is known to never
comment|/// undergo unsigned overflow, aka the nuw property.
name|bool
name|hasNoUnsignedWrap
argument_list|()
specifier|const
block|{
return|return
name|SubclassOptionalData
operator|&
name|NoUnsignedWrap
return|;
block|}
comment|/// Test whether this operation is known to never
comment|/// undergo signed overflow, aka the nsw property.
name|bool
name|hasNoSignedWrap
argument_list|()
specifier|const
block|{
return|return
operator|(
name|SubclassOptionalData
operator|&
name|NoSignedWrap
operator|)
operator|!=
literal|0
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Instruction *I
argument_list|)
block|{
return|return
name|I
operator|->
name|getOpcode
argument_list|()
operator|==
name|Instruction
operator|::
name|Add
operator|||
name|I
operator|->
name|getOpcode
argument_list|()
operator|==
name|Instruction
operator|::
name|Sub
operator|||
name|I
operator|->
name|getOpcode
argument_list|()
operator|==
name|Instruction
operator|::
name|Mul
operator|||
name|I
operator|->
name|getOpcode
argument_list|()
operator|==
name|Instruction
operator|::
name|Shl
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const ConstantExpr *CE
argument_list|)
block|{
return|return
name|CE
operator|->
name|getOpcode
argument_list|()
operator|==
name|Instruction
operator|::
name|Add
operator|||
name|CE
operator|->
name|getOpcode
argument_list|()
operator|==
name|Instruction
operator|::
name|Sub
operator|||
name|CE
operator|->
name|getOpcode
argument_list|()
operator|==
name|Instruction
operator|::
name|Mul
operator|||
name|CE
operator|->
name|getOpcode
argument_list|()
operator|==
name|Instruction
operator|::
name|Shl
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Value *V
argument_list|)
block|{
return|return
operator|(
name|isa
operator|<
name|Instruction
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|Instruction
operator|>
operator|(
name|V
operator|)
argument_list|)
operator|)
operator|||
operator|(
name|isa
operator|<
name|ConstantExpr
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|ConstantExpr
operator|>
operator|(
name|V
operator|)
argument_list|)
operator|)
return|;
block|}
expr|}
block|;
comment|/// A udiv or sdiv instruction, which can be marked as "exact",
comment|/// indicating that no bits are destroyed.
name|class
name|PossiblyExactOperator
operator|:
name|public
name|Operator
block|{
name|public
operator|:
expr|enum
block|{
name|IsExact
operator|=
operator|(
literal|1
operator|<<
literal|0
operator|)
block|}
block|;
name|private
operator|:
name|friend
name|class
name|Instruction
block|;
name|friend
name|class
name|ConstantExpr
block|;
name|void
name|setIsExact
argument_list|(
argument|bool B
argument_list|)
block|{
name|SubclassOptionalData
operator|=
operator|(
name|SubclassOptionalData
operator|&
operator|~
name|IsExact
operator|)
operator||
operator|(
name|B
operator|*
name|IsExact
operator|)
block|;   }
name|public
operator|:
comment|/// Test whether this division is known to be exact, with zero remainder.
name|bool
name|isExact
argument_list|()
specifier|const
block|{
return|return
name|SubclassOptionalData
operator|&
name|IsExact
return|;
block|}
specifier|static
name|bool
name|isPossiblyExactOpcode
argument_list|(
argument|unsigned OpC
argument_list|)
block|{
return|return
name|OpC
operator|==
name|Instruction
operator|::
name|SDiv
operator|||
name|OpC
operator|==
name|Instruction
operator|::
name|UDiv
operator|||
name|OpC
operator|==
name|Instruction
operator|::
name|AShr
operator|||
name|OpC
operator|==
name|Instruction
operator|::
name|LShr
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const ConstantExpr *CE
argument_list|)
block|{
return|return
name|isPossiblyExactOpcode
argument_list|(
name|CE
operator|->
name|getOpcode
argument_list|()
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Instruction *I
argument_list|)
block|{
return|return
name|isPossiblyExactOpcode
argument_list|(
name|I
operator|->
name|getOpcode
argument_list|()
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Value *V
argument_list|)
block|{
return|return
operator|(
name|isa
operator|<
name|Instruction
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|Instruction
operator|>
operator|(
name|V
operator|)
argument_list|)
operator|)
operator|||
operator|(
name|isa
operator|<
name|ConstantExpr
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|ConstantExpr
operator|>
operator|(
name|V
operator|)
argument_list|)
operator|)
return|;
block|}
expr|}
block|;
comment|/// Convenience struct for specifying and reasoning about fast-math flags.
name|class
name|FastMathFlags
block|{
name|private
operator|:
name|friend
name|class
name|FPMathOperator
block|;
name|unsigned
name|Flags
operator|=
literal|0
block|;
name|FastMathFlags
argument_list|(
argument|unsigned F
argument_list|)
operator|:
name|Flags
argument_list|(
argument|F
argument_list|)
block|{ }
name|public
operator|:
expr|enum
block|{
name|UnsafeAlgebra
operator|=
operator|(
literal|1
operator|<<
literal|0
operator|)
block|,
name|NoNaNs
operator|=
operator|(
literal|1
operator|<<
literal|1
operator|)
block|,
name|NoInfs
operator|=
operator|(
literal|1
operator|<<
literal|2
operator|)
block|,
name|NoSignedZeros
operator|=
operator|(
literal|1
operator|<<
literal|3
operator|)
block|,
name|AllowReciprocal
operator|=
operator|(
literal|1
operator|<<
literal|4
operator|)
block|}
block|;
name|FastMathFlags
argument_list|()
operator|=
expr|default
block|;
comment|/// Whether any flag is set
name|bool
name|any
argument_list|()
specifier|const
block|{
return|return
name|Flags
operator|!=
literal|0
return|;
block|}
comment|/// Set all the flags to false
name|void
name|clear
argument_list|()
block|{
name|Flags
operator|=
literal|0
block|; }
comment|/// Flag queries
name|bool
name|noNaNs
argument_list|()
specifier|const
block|{
return|return
literal|0
operator|!=
operator|(
name|Flags
operator|&
name|NoNaNs
operator|)
return|;
block|}
name|bool
name|noInfs
argument_list|()
specifier|const
block|{
return|return
literal|0
operator|!=
operator|(
name|Flags
operator|&
name|NoInfs
operator|)
return|;
block|}
name|bool
name|noSignedZeros
argument_list|()
specifier|const
block|{
return|return
literal|0
operator|!=
operator|(
name|Flags
operator|&
name|NoSignedZeros
operator|)
return|;
block|}
name|bool
name|allowReciprocal
argument_list|()
specifier|const
block|{
return|return
literal|0
operator|!=
operator|(
name|Flags
operator|&
name|AllowReciprocal
operator|)
return|;
block|}
name|bool
name|unsafeAlgebra
argument_list|()
specifier|const
block|{
return|return
literal|0
operator|!=
operator|(
name|Flags
operator|&
name|UnsafeAlgebra
operator|)
return|;
block|}
comment|/// Flag setters
name|void
name|setNoNaNs
argument_list|()
block|{
name|Flags
operator||=
name|NoNaNs
block|; }
name|void
name|setNoInfs
argument_list|()
block|{
name|Flags
operator||=
name|NoInfs
block|; }
name|void
name|setNoSignedZeros
argument_list|()
block|{
name|Flags
operator||=
name|NoSignedZeros
block|; }
name|void
name|setAllowReciprocal
argument_list|()
block|{
name|Flags
operator||=
name|AllowReciprocal
block|; }
name|void
name|setUnsafeAlgebra
argument_list|()
block|{
name|Flags
operator||=
name|UnsafeAlgebra
block|;
name|setNoNaNs
argument_list|()
block|;
name|setNoInfs
argument_list|()
block|;
name|setNoSignedZeros
argument_list|()
block|;
name|setAllowReciprocal
argument_list|()
block|;   }
name|void
name|operator
operator|&=
operator|(
specifier|const
name|FastMathFlags
operator|&
name|OtherFlags
operator|)
block|{
name|Flags
operator|&=
name|OtherFlags
operator|.
name|Flags
block|;   }
expr|}
block|;
comment|/// Utility class for floating point operations which can have
comment|/// information about relaxed accuracy requirements attached to them.
name|class
name|FPMathOperator
operator|:
name|public
name|Operator
block|{
name|private
operator|:
name|friend
name|class
name|Instruction
block|;
name|void
name|setHasUnsafeAlgebra
argument_list|(
argument|bool B
argument_list|)
block|{
name|SubclassOptionalData
operator|=
operator|(
name|SubclassOptionalData
operator|&
operator|~
name|FastMathFlags
operator|::
name|UnsafeAlgebra
operator|)
operator||
operator|(
name|B
operator|*
name|FastMathFlags
operator|::
name|UnsafeAlgebra
operator|)
block|;
comment|// Unsafe algebra implies all the others
if|if
condition|(
name|B
condition|)
block|{
name|setHasNoNaNs
argument_list|(
name|true
argument_list|)
expr_stmt|;
name|setHasNoInfs
argument_list|(
name|true
argument_list|)
expr_stmt|;
name|setHasNoSignedZeros
argument_list|(
name|true
argument_list|)
expr_stmt|;
name|setHasAllowReciprocal
argument_list|(
name|true
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|setHasNoNaNs
argument_list|(
argument|bool B
argument_list|)
block|{
name|SubclassOptionalData
operator|=
operator|(
name|SubclassOptionalData
operator|&
operator|~
name|FastMathFlags
operator|::
name|NoNaNs
operator|)
operator||
operator|(
name|B
operator|*
name|FastMathFlags
operator|::
name|NoNaNs
operator|)
block|;   }
name|void
name|setHasNoInfs
argument_list|(
argument|bool B
argument_list|)
block|{
name|SubclassOptionalData
operator|=
operator|(
name|SubclassOptionalData
operator|&
operator|~
name|FastMathFlags
operator|::
name|NoInfs
operator|)
operator||
operator|(
name|B
operator|*
name|FastMathFlags
operator|::
name|NoInfs
operator|)
block|;   }
name|void
name|setHasNoSignedZeros
argument_list|(
argument|bool B
argument_list|)
block|{
name|SubclassOptionalData
operator|=
operator|(
name|SubclassOptionalData
operator|&
operator|~
name|FastMathFlags
operator|::
name|NoSignedZeros
operator|)
operator||
operator|(
name|B
operator|*
name|FastMathFlags
operator|::
name|NoSignedZeros
operator|)
block|;   }
name|void
name|setHasAllowReciprocal
argument_list|(
argument|bool B
argument_list|)
block|{
name|SubclassOptionalData
operator|=
operator|(
name|SubclassOptionalData
operator|&
operator|~
name|FastMathFlags
operator|::
name|AllowReciprocal
operator|)
operator||
operator|(
name|B
operator|*
name|FastMathFlags
operator|::
name|AllowReciprocal
operator|)
block|;   }
comment|/// Convenience function for setting multiple fast-math flags.
comment|/// FMF is a mask of the bits to set.
name|void
name|setFastMathFlags
argument_list|(
argument|FastMathFlags FMF
argument_list|)
block|{
name|SubclassOptionalData
operator||=
name|FMF
operator|.
name|Flags
block|;   }
comment|/// Convenience function for copying all fast-math flags.
comment|/// All values in FMF are transferred to this operator.
name|void
name|copyFastMathFlags
argument_list|(
argument|FastMathFlags FMF
argument_list|)
block|{
name|SubclassOptionalData
operator|=
name|FMF
operator|.
name|Flags
block|;   }
name|public
operator|:
comment|/// Test whether this operation is permitted to be
comment|/// algebraically transformed, aka the 'A' fast-math property.
name|bool
name|hasUnsafeAlgebra
argument_list|()
specifier|const
block|{
return|return
operator|(
name|SubclassOptionalData
operator|&
name|FastMathFlags
operator|::
name|UnsafeAlgebra
operator|)
operator|!=
literal|0
return|;
block|}
comment|/// Test whether this operation's arguments and results are to be
comment|/// treated as non-NaN, aka the 'N' fast-math property.
name|bool
name|hasNoNaNs
argument_list|()
specifier|const
block|{
return|return
operator|(
name|SubclassOptionalData
operator|&
name|FastMathFlags
operator|::
name|NoNaNs
operator|)
operator|!=
literal|0
return|;
block|}
comment|/// Test whether this operation's arguments and results are to be
comment|/// treated as NoN-Inf, aka the 'I' fast-math property.
name|bool
name|hasNoInfs
argument_list|()
specifier|const
block|{
return|return
operator|(
name|SubclassOptionalData
operator|&
name|FastMathFlags
operator|::
name|NoInfs
operator|)
operator|!=
literal|0
return|;
block|}
comment|/// Test whether this operation can treat the sign of zero
comment|/// as insignificant, aka the 'S' fast-math property.
name|bool
name|hasNoSignedZeros
argument_list|()
specifier|const
block|{
return|return
operator|(
name|SubclassOptionalData
operator|&
name|FastMathFlags
operator|::
name|NoSignedZeros
operator|)
operator|!=
literal|0
return|;
block|}
comment|/// Test whether this operation is permitted to use
comment|/// reciprocal instead of division, aka the 'R' fast-math property.
name|bool
name|hasAllowReciprocal
argument_list|()
specifier|const
block|{
return|return
operator|(
name|SubclassOptionalData
operator|&
name|FastMathFlags
operator|::
name|AllowReciprocal
operator|)
operator|!=
literal|0
return|;
block|}
comment|/// Convenience function for getting all the fast-math flags
name|FastMathFlags
name|getFastMathFlags
argument_list|()
specifier|const
block|{
return|return
name|FastMathFlags
argument_list|(
name|SubclassOptionalData
argument_list|)
return|;
block|}
comment|/// Get the maximum error permitted by this operation in ULPs. An accuracy of
comment|/// 0.0 means that the operation should be performed with the default
comment|/// precision.
name|float
name|getFPAccuracy
argument_list|()
specifier|const
block|;
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Instruction *I
argument_list|)
block|{
return|return
name|I
operator|->
name|getType
argument_list|()
operator|->
name|isFPOrFPVectorTy
argument_list|()
operator|||
name|I
operator|->
name|getOpcode
argument_list|()
operator|==
name|Instruction
operator|::
name|FCmp
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Value *V
argument_list|)
block|{
return|return
name|isa
operator|<
name|Instruction
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|Instruction
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
expr|}
block|;
comment|/// A helper template for defining operators for individual opcodes.
name|template
operator|<
name|typename
name|SuperClass
block|,
name|unsigned
name|Opc
operator|>
name|class
name|ConcreteOperator
operator|:
name|public
name|SuperClass
block|{
name|public
operator|:
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Instruction *I
argument_list|)
block|{
return|return
name|I
operator|->
name|getOpcode
argument_list|()
operator|==
name|Opc
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const ConstantExpr *CE
argument_list|)
block|{
return|return
name|CE
operator|->
name|getOpcode
argument_list|()
operator|==
name|Opc
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Value *V
argument_list|)
block|{
return|return
operator|(
name|isa
operator|<
name|Instruction
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|Instruction
operator|>
operator|(
name|V
operator|)
argument_list|)
operator|)
operator|||
operator|(
name|isa
operator|<
name|ConstantExpr
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|ConstantExpr
operator|>
operator|(
name|V
operator|)
argument_list|)
operator|)
return|;
block|}
expr|}
block|;
name|class
name|AddOperator
operator|:
name|public
name|ConcreteOperator
operator|<
name|OverflowingBinaryOperator
block|,
name|Instruction
operator|::
name|Add
operator|>
block|{ }
block|;
name|class
name|SubOperator
operator|:
name|public
name|ConcreteOperator
operator|<
name|OverflowingBinaryOperator
block|,
name|Instruction
operator|::
name|Sub
operator|>
block|{ }
block|;
name|class
name|MulOperator
operator|:
name|public
name|ConcreteOperator
operator|<
name|OverflowingBinaryOperator
block|,
name|Instruction
operator|::
name|Mul
operator|>
block|{ }
block|;
name|class
name|ShlOperator
operator|:
name|public
name|ConcreteOperator
operator|<
name|OverflowingBinaryOperator
block|,
name|Instruction
operator|::
name|Shl
operator|>
block|{ }
block|;
name|class
name|SDivOperator
operator|:
name|public
name|ConcreteOperator
operator|<
name|PossiblyExactOperator
block|,
name|Instruction
operator|::
name|SDiv
operator|>
block|{ }
block|;
name|class
name|UDivOperator
operator|:
name|public
name|ConcreteOperator
operator|<
name|PossiblyExactOperator
block|,
name|Instruction
operator|::
name|UDiv
operator|>
block|{ }
block|;
name|class
name|AShrOperator
operator|:
name|public
name|ConcreteOperator
operator|<
name|PossiblyExactOperator
block|,
name|Instruction
operator|::
name|AShr
operator|>
block|{ }
block|;
name|class
name|LShrOperator
operator|:
name|public
name|ConcreteOperator
operator|<
name|PossiblyExactOperator
block|,
name|Instruction
operator|::
name|LShr
operator|>
block|{ }
block|;
name|class
name|ZExtOperator
operator|:
name|public
name|ConcreteOperator
operator|<
name|Operator
block|,
name|Instruction
operator|::
name|ZExt
operator|>
block|{}
block|;
name|class
name|GEPOperator
operator|:
name|public
name|ConcreteOperator
operator|<
name|Operator
block|,
name|Instruction
operator|::
name|GetElementPtr
operator|>
block|{
name|friend
name|class
name|GetElementPtrInst
block|;
name|friend
name|class
name|ConstantExpr
block|;    enum
block|{
name|IsInBounds
operator|=
operator|(
literal|1
operator|<<
literal|0
operator|)
block|,
comment|// InRangeIndex: bits 1-6
block|}
block|;
name|void
name|setIsInBounds
argument_list|(
argument|bool B
argument_list|)
block|{
name|SubclassOptionalData
operator|=
operator|(
name|SubclassOptionalData
operator|&
operator|~
name|IsInBounds
operator|)
operator||
operator|(
name|B
operator|*
name|IsInBounds
operator|)
block|;   }
name|public
operator|:
comment|/// Test whether this is an inbounds GEP, as defined by LangRef.html.
name|bool
name|isInBounds
argument_list|()
specifier|const
block|{
return|return
name|SubclassOptionalData
operator|&
name|IsInBounds
return|;
block|}
comment|/// Returns the offset of the index with an inrange attachment, or None if
comment|/// none.
name|Optional
operator|<
name|unsigned
operator|>
name|getInRangeIndex
argument_list|()
specifier|const
block|{
if|if
condition|(
name|SubclassOptionalData
operator|>>
literal|1
operator|==
literal|0
condition|)
return|return
name|None
return|;
return|return
operator|(
name|SubclassOptionalData
operator|>>
literal|1
operator|)
operator|-
literal|1
return|;
block|}
specifier|inline
name|op_iterator
name|idx_begin
argument_list|()
block|{
return|return
name|op_begin
argument_list|()
operator|+
literal|1
return|;
block|}
specifier|inline
name|const_op_iterator
name|idx_begin
argument_list|()
specifier|const
block|{
return|return
name|op_begin
argument_list|()
operator|+
literal|1
return|;
block|}
specifier|inline
name|op_iterator
name|idx_end
argument_list|()
block|{
return|return
name|op_end
argument_list|()
return|;
block|}
specifier|inline
name|const_op_iterator
name|idx_end
argument_list|()
specifier|const
block|{
return|return
name|op_end
argument_list|()
return|;
block|}
name|Value
operator|*
name|getPointerOperand
argument_list|()
block|{
return|return
name|getOperand
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|const
name|Value
operator|*
name|getPointerOperand
argument_list|()
specifier|const
block|{
return|return
name|getOperand
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|static
name|unsigned
name|getPointerOperandIndex
argument_list|()
block|{
return|return
literal|0U
return|;
comment|// get index for modifying correct operand
block|}
comment|/// Method to return the pointer operand as a PointerType.
name|Type
operator|*
name|getPointerOperandType
argument_list|()
specifier|const
block|{
return|return
name|getPointerOperand
argument_list|()
operator|->
name|getType
argument_list|()
return|;
block|}
name|Type
operator|*
name|getSourceElementType
argument_list|()
specifier|const
block|;
name|Type
operator|*
name|getResultElementType
argument_list|()
specifier|const
block|;
comment|/// Method to return the address space of the pointer operand.
name|unsigned
name|getPointerAddressSpace
argument_list|()
specifier|const
block|{
return|return
name|getPointerOperandType
argument_list|()
operator|->
name|getPointerAddressSpace
argument_list|()
return|;
block|}
name|unsigned
name|getNumIndices
argument_list|()
specifier|const
block|{
comment|// Note: always non-negative
return|return
name|getNumOperands
argument_list|()
operator|-
literal|1
return|;
block|}
name|bool
name|hasIndices
argument_list|()
specifier|const
block|{
return|return
name|getNumOperands
argument_list|()
operator|>
literal|1
return|;
block|}
comment|/// Return true if all of the indices of this GEP are zeros.
comment|/// If so, the result pointer and the first operand have the same
comment|/// value, just potentially different types.
name|bool
name|hasAllZeroIndices
argument_list|()
specifier|const
block|{
for|for
control|(
name|const_op_iterator
name|I
init|=
name|idx_begin
argument_list|()
init|,
name|E
init|=
name|idx_end
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
block|{
if|if
condition|(
name|ConstantInt
modifier|*
name|C
init|=
name|dyn_cast
operator|<
name|ConstantInt
operator|>
operator|(
name|I
operator|)
condition|)
if|if
condition|(
name|C
operator|->
name|isZero
argument_list|()
condition|)
continue|continue;
return|return
name|false
return|;
block|}
return|return
name|true
return|;
block|}
comment|/// Return true if all of the indices of this GEP are constant integers.
comment|/// If so, the result pointer and the first operand have
comment|/// a constant offset between them.
name|bool
name|hasAllConstantIndices
argument_list|()
specifier|const
block|{
for|for
control|(
name|const_op_iterator
name|I
init|=
name|idx_begin
argument_list|()
init|,
name|E
init|=
name|idx_end
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
block|{
if|if
condition|(
operator|!
name|isa
operator|<
name|ConstantInt
operator|>
operator|(
name|I
operator|)
condition|)
return|return
name|false
return|;
block|}
return|return
name|true
return|;
block|}
comment|/// \brief Accumulate the constant address offset of this GEP if possible.
comment|///
comment|/// This routine accepts an APInt into which it will accumulate the constant
comment|/// offset of this GEP if the GEP is in fact constant. If the GEP is not
comment|/// all-constant, it returns false and the value of the offset APInt is
comment|/// undefined (it is *not* preserved!). The APInt passed into this routine
comment|/// must be at exactly as wide as the IntPtr type for the address space of the
comment|/// base GEP pointer.
name|bool
name|accumulateConstantOffset
argument_list|(
argument|const DataLayout&DL
argument_list|,
argument|APInt&Offset
argument_list|)
specifier|const
block|; }
block|;
name|class
name|PtrToIntOperator
operator|:
name|public
name|ConcreteOperator
operator|<
name|Operator
block|,
name|Instruction
operator|::
name|PtrToInt
operator|>
block|{
name|friend
name|class
name|PtrToInt
block|;
name|friend
name|class
name|ConstantExpr
block|;
name|public
operator|:
name|Value
operator|*
name|getPointerOperand
argument_list|()
block|{
return|return
name|getOperand
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|const
name|Value
operator|*
name|getPointerOperand
argument_list|()
specifier|const
block|{
return|return
name|getOperand
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|static
name|unsigned
name|getPointerOperandIndex
argument_list|()
block|{
return|return
literal|0U
return|;
comment|// get index for modifying correct operand
block|}
comment|/// Method to return the pointer operand as a PointerType.
name|Type
operator|*
name|getPointerOperandType
argument_list|()
specifier|const
block|{
return|return
name|getPointerOperand
argument_list|()
operator|->
name|getType
argument_list|()
return|;
block|}
comment|/// Method to return the address space of the pointer operand.
name|unsigned
name|getPointerAddressSpace
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|PointerType
operator|>
operator|(
name|getPointerOperandType
argument_list|()
operator|)
operator|->
name|getAddressSpace
argument_list|()
return|;
block|}
expr|}
block|;
name|class
name|BitCastOperator
operator|:
name|public
name|ConcreteOperator
operator|<
name|Operator
block|,
name|Instruction
operator|::
name|BitCast
operator|>
block|{
name|friend
name|class
name|BitCastInst
block|;
name|friend
name|class
name|ConstantExpr
block|;
name|public
operator|:
name|Type
operator|*
name|getSrcTy
argument_list|()
specifier|const
block|{
return|return
name|getOperand
argument_list|(
literal|0
argument_list|)
operator|->
name|getType
argument_list|()
return|;
block|}
name|Type
operator|*
name|getDestTy
argument_list|()
specifier|const
block|{
return|return
name|getType
argument_list|()
return|;
block|}
expr|}
block|;  }
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_IR_OPERATOR_H
end_comment

end_unit

