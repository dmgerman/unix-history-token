begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- llvm/Support/DiagnosticPrinter.h - Diagnostic Printer ----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares the main interface for printer backend diagnostic.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Clients of the backend diagnostics should overload this interface based
end_comment

begin_comment
comment|// on their needs.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_IR_DIAGNOSTICPRINTER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_IR_DIAGNOSTICPRINTER_H
end_define

begin_include
include|#
directive|include
file|<string>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|// Forward declarations.
name|class
name|Module
decl_stmt|;
name|class
name|raw_ostream
decl_stmt|;
name|class
name|SMDiagnostic
decl_stmt|;
name|class
name|StringRef
decl_stmt|;
name|class
name|Twine
decl_stmt|;
name|class
name|Value
decl_stmt|;
comment|/// \brief Interface for custom diagnostic printing.
name|class
name|DiagnosticPrinter
block|{
name|public
label|:
name|virtual
operator|~
name|DiagnosticPrinter
argument_list|()
block|{}
comment|// Simple types.
name|virtual
name|DiagnosticPrinter
operator|&
name|operator
operator|<<
operator|(
name|char
name|C
operator|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|DiagnosticPrinter
operator|&
name|operator
operator|<<
operator|(
name|unsigned
name|char
name|C
operator|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|DiagnosticPrinter
operator|&
name|operator
operator|<<
operator|(
name|signed
name|char
name|C
operator|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|DiagnosticPrinter
operator|&
name|operator
operator|<<
operator|(
name|StringRef
name|Str
operator|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|DiagnosticPrinter
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|char
operator|*
name|Str
operator|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|DiagnosticPrinter
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Str
operator|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|DiagnosticPrinter
operator|&
name|operator
operator|<<
operator|(
name|unsigned
name|long
name|N
operator|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|DiagnosticPrinter
operator|&
name|operator
operator|<<
operator|(
name|long
name|N
operator|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|DiagnosticPrinter
operator|&
name|operator
operator|<<
operator|(
name|unsigned
name|long
name|long
name|N
operator|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|DiagnosticPrinter
operator|&
name|operator
operator|<<
operator|(
name|long
name|long
name|N
operator|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|DiagnosticPrinter
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|void
operator|*
name|P
operator|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|DiagnosticPrinter
operator|&
name|operator
operator|<<
operator|(
name|unsigned
name|int
name|N
operator|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|DiagnosticPrinter
operator|&
name|operator
operator|<<
operator|(
name|int
name|N
operator|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|DiagnosticPrinter
operator|&
name|operator
operator|<<
operator|(
name|double
name|N
operator|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|DiagnosticPrinter
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|Twine
operator|&
name|Str
operator|)
operator|=
literal|0
expr_stmt|;
comment|// IR related types.
name|virtual
name|DiagnosticPrinter
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|Value
operator|&
name|V
operator|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|DiagnosticPrinter
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|Module
operator|&
name|M
operator|)
operator|=
literal|0
expr_stmt|;
comment|// Other types.
name|virtual
name|DiagnosticPrinter
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|SMDiagnostic
operator|&
name|Diag
operator|)
operator|=
literal|0
expr_stmt|;
block|}
empty_stmt|;
comment|/// \brief Basic diagnostic printer that uses an underlying raw_ostream.
name|class
name|DiagnosticPrinterRawOStream
range|:
name|public
name|DiagnosticPrinter
block|{
name|protected
operator|:
name|raw_ostream
operator|&
name|Stream
block|;
name|public
operator|:
name|DiagnosticPrinterRawOStream
argument_list|(
name|raw_ostream
operator|&
name|Stream
argument_list|)
operator|:
name|Stream
argument_list|(
argument|Stream
argument_list|)
block|{}
block|;
comment|// Simple types.
name|DiagnosticPrinter
operator|&
name|operator
operator|<<
operator|(
name|char
name|C
operator|)
name|override
block|;
name|DiagnosticPrinter
operator|&
name|operator
operator|<<
operator|(
name|unsigned
name|char
name|C
operator|)
name|override
block|;
name|DiagnosticPrinter
operator|&
name|operator
operator|<<
operator|(
name|signed
name|char
name|C
operator|)
name|override
block|;
name|DiagnosticPrinter
operator|&
name|operator
operator|<<
operator|(
name|StringRef
name|Str
operator|)
name|override
block|;
name|DiagnosticPrinter
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|char
operator|*
name|Str
operator|)
name|override
block|;
name|DiagnosticPrinter
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Str
operator|)
name|override
block|;
name|DiagnosticPrinter
operator|&
name|operator
operator|<<
operator|(
name|unsigned
name|long
name|N
operator|)
name|override
block|;
name|DiagnosticPrinter
operator|&
name|operator
operator|<<
operator|(
name|long
name|N
operator|)
name|override
block|;
name|DiagnosticPrinter
operator|&
name|operator
operator|<<
operator|(
name|unsigned
name|long
name|long
name|N
operator|)
name|override
block|;
name|DiagnosticPrinter
operator|&
name|operator
operator|<<
operator|(
name|long
name|long
name|N
operator|)
name|override
block|;
name|DiagnosticPrinter
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|void
operator|*
name|P
operator|)
name|override
block|;
name|DiagnosticPrinter
operator|&
name|operator
operator|<<
operator|(
name|unsigned
name|int
name|N
operator|)
name|override
block|;
name|DiagnosticPrinter
operator|&
name|operator
operator|<<
operator|(
name|int
name|N
operator|)
name|override
block|;
name|DiagnosticPrinter
operator|&
name|operator
operator|<<
operator|(
name|double
name|N
operator|)
name|override
block|;
name|DiagnosticPrinter
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|Twine
operator|&
name|Str
operator|)
name|override
block|;
comment|// IR related types.
name|DiagnosticPrinter
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|Value
operator|&
name|V
operator|)
name|override
block|;
name|DiagnosticPrinter
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|Module
operator|&
name|M
operator|)
name|override
block|;
comment|// Other types.
name|DiagnosticPrinter
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|SMDiagnostic
operator|&
name|Diag
operator|)
name|override
block|; }
decl_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// End namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

