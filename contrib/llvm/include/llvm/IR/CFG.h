begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- CFG.h - Process LLVM structures as graphs ----------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines specializations of GraphTraits that allow Function and
end_comment

begin_comment
comment|// BasicBlock graphs to be treated as proper graphs for generic algorithms.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_IR_CFG_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_IR_CFG_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/GraphTraits.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/iterator.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/iterator_range.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/BasicBlock.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Function.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/InstrTypes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Value.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Casting.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/type_traits.h"
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<cstddef>
end_include

begin_include
include|#
directive|include
file|<iterator>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|//===----------------------------------------------------------------------===//
comment|// BasicBlock pred_iterator definition
comment|//===----------------------------------------------------------------------===//
name|template
operator|<
name|class
name|Ptr
operator|,
name|class
name|USE_iterator
operator|>
comment|// Predecessor Iterator
name|class
name|PredIterator
operator|:
name|public
name|std
operator|::
name|iterator
operator|<
name|std
operator|::
name|forward_iterator_tag
operator|,
name|Ptr
operator|,
name|ptrdiff_t
operator|,
name|Ptr
operator|*
operator|,
name|Ptr
operator|*
operator|>
block|{
name|using
name|super
operator|=
name|std
operator|::
name|iterator
operator|<
name|std
operator|::
name|forward_iterator_tag
block|,
name|Ptr
block|,
name|ptrdiff_t
block|,
name|Ptr
operator|*
block|,
name|Ptr
operator|*
operator|>
block|;
name|using
name|Self
operator|=
name|PredIterator
operator|<
name|Ptr
block|,
name|USE_iterator
operator|>
block|;
name|USE_iterator
name|It
block|;
specifier|inline
name|void
name|advancePastNonTerminators
argument_list|()
block|{
comment|// Loop to ignore non-terminator uses (for example BlockAddresses).
while|while
condition|(
operator|!
name|It
operator|.
name|atEnd
argument_list|()
operator|&&
operator|!
name|isa
operator|<
name|TerminatorInst
operator|>
operator|(
operator|*
name|It
operator|)
condition|)
operator|++
name|It
expr_stmt|;
block|}
name|public
operator|:
name|using
name|pointer
operator|=
name|typename
name|super
operator|::
name|pointer
block|;
name|using
name|reference
operator|=
name|typename
name|super
operator|::
name|reference
block|;
name|PredIterator
argument_list|()
operator|=
expr|default
block|;
name|explicit
specifier|inline
name|PredIterator
argument_list|(
name|Ptr
operator|*
name|bb
argument_list|)
operator|:
name|It
argument_list|(
argument|bb->user_begin()
argument_list|)
block|{
name|advancePastNonTerminators
argument_list|()
block|;   }
specifier|inline
name|PredIterator
argument_list|(
name|Ptr
operator|*
name|bb
argument_list|,
name|bool
argument_list|)
operator|:
name|It
argument_list|(
argument|bb->user_end()
argument_list|)
block|{}
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|Self
operator|&
name|x
operator|)
specifier|const
block|{
return|return
name|It
operator|==
name|x
operator|.
name|It
return|;
block|}
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|Self
operator|&
name|x
operator|)
specifier|const
block|{
return|return
operator|!
name|operator
operator|==
operator|(
name|x
operator|)
return|;
block|}
specifier|inline
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
name|assert
argument_list|(
operator|!
name|It
operator|.
name|atEnd
argument_list|()
operator|&&
literal|"pred_iterator out of range!"
argument_list|)
block|;
return|return
name|cast
operator|<
name|TerminatorInst
operator|>
operator|(
operator|*
name|It
operator|)
operator|->
name|getParent
argument_list|()
return|;
block|}
specifier|inline
name|pointer
operator|*
name|operator
operator|->
expr|(
block|)
specifier|const
block|{
return|return
operator|&
name|operator
operator|*
operator|(
operator|)
return|;
block|}
specifier|inline
name|Self
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
comment|// Preincrement
name|assert
argument_list|(
operator|!
name|It
operator|.
name|atEnd
argument_list|()
operator|&&
literal|"pred_iterator out of range!"
argument_list|)
block|;
operator|++
name|It
block|;
name|advancePastNonTerminators
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
specifier|inline
name|Self
name|operator
operator|++
operator|(
name|int
operator|)
block|{
comment|// Postincrement
name|Self
name|tmp
operator|=
operator|*
name|this
block|;
operator|++
operator|*
name|this
block|;
return|return
name|tmp
return|;
block|}
comment|/// getOperandNo - Return the operand number in the predecessor's
comment|/// terminator of the successor.
name|unsigned
name|getOperandNo
argument_list|()
specifier|const
block|{
return|return
name|It
operator|.
name|getOperandNo
argument_list|()
return|;
block|}
comment|/// getUse - Return the operand Use in the predecessor's terminator
comment|/// of the successor.
name|Use
operator|&
name|getUse
argument_list|()
specifier|const
block|{
return|return
name|It
operator|.
name|getUse
argument_list|()
return|;
block|}
block|}
empty_stmt|;
name|using
name|pred_iterator
init|=
name|PredIterator
operator|<
name|BasicBlock
decl_stmt|,
name|Value
decl|::
name|user_iterator
decl|>
decl_stmt|;
name|using
name|const_pred_iterator
init|=
name|PredIterator
operator|<
specifier|const
name|BasicBlock
decl_stmt|,
name|Value
decl|::
name|const_user_iterator
decl|>
decl_stmt|;
name|using
name|pred_range
init|=
name|iterator_range
operator|<
name|pred_iterator
operator|>
decl_stmt|;
name|using
name|pred_const_range
init|=
name|iterator_range
operator|<
name|const_pred_iterator
operator|>
decl_stmt|;
specifier|inline
name|pred_iterator
name|pred_begin
parameter_list|(
name|BasicBlock
modifier|*
name|BB
parameter_list|)
block|{
return|return
name|pred_iterator
argument_list|(
name|BB
argument_list|)
return|;
block|}
specifier|inline
name|const_pred_iterator
name|pred_begin
parameter_list|(
specifier|const
name|BasicBlock
modifier|*
name|BB
parameter_list|)
block|{
return|return
name|const_pred_iterator
argument_list|(
name|BB
argument_list|)
return|;
block|}
specifier|inline
name|pred_iterator
name|pred_end
parameter_list|(
name|BasicBlock
modifier|*
name|BB
parameter_list|)
block|{
return|return
name|pred_iterator
argument_list|(
name|BB
argument_list|,
name|true
argument_list|)
return|;
block|}
specifier|inline
name|const_pred_iterator
name|pred_end
parameter_list|(
specifier|const
name|BasicBlock
modifier|*
name|BB
parameter_list|)
block|{
return|return
name|const_pred_iterator
argument_list|(
name|BB
argument_list|,
name|true
argument_list|)
return|;
block|}
specifier|inline
name|bool
name|pred_empty
parameter_list|(
specifier|const
name|BasicBlock
modifier|*
name|BB
parameter_list|)
block|{
return|return
name|pred_begin
argument_list|(
name|BB
argument_list|)
operator|==
name|pred_end
argument_list|(
name|BB
argument_list|)
return|;
block|}
specifier|inline
name|pred_range
name|predecessors
parameter_list|(
name|BasicBlock
modifier|*
name|BB
parameter_list|)
block|{
return|return
name|pred_range
argument_list|(
name|pred_begin
argument_list|(
name|BB
argument_list|)
argument_list|,
name|pred_end
argument_list|(
name|BB
argument_list|)
argument_list|)
return|;
block|}
specifier|inline
name|pred_const_range
name|predecessors
parameter_list|(
specifier|const
name|BasicBlock
modifier|*
name|BB
parameter_list|)
block|{
return|return
name|pred_const_range
argument_list|(
name|pred_begin
argument_list|(
name|BB
argument_list|)
argument_list|,
name|pred_end
argument_list|(
name|BB
argument_list|)
argument_list|)
return|;
block|}
comment|//===----------------------------------------------------------------------===//
comment|// BasicBlock succ_iterator helpers
comment|//===----------------------------------------------------------------------===//
name|using
name|succ_iterator
init|=
name|TerminatorInst
operator|::
name|SuccIterator
operator|<
name|TerminatorInst
operator|*
decl_stmt|,
name|BasicBlock
decl|>
decl_stmt|;
name|using
name|succ_const_iterator
init|=
name|TerminatorInst
operator|::
name|SuccIterator
operator|<
specifier|const
name|TerminatorInst
operator|*
decl_stmt|, const
name|BasicBlock
decl|>
decl_stmt|;
name|using
name|succ_range
init|=
name|iterator_range
operator|<
name|succ_iterator
operator|>
decl_stmt|;
name|using
name|succ_const_range
init|=
name|iterator_range
operator|<
name|succ_const_iterator
operator|>
decl_stmt|;
specifier|inline
name|succ_iterator
name|succ_begin
parameter_list|(
name|BasicBlock
modifier|*
name|BB
parameter_list|)
block|{
return|return
name|succ_iterator
argument_list|(
name|BB
operator|->
name|getTerminator
argument_list|()
argument_list|)
return|;
block|}
specifier|inline
name|succ_const_iterator
name|succ_begin
parameter_list|(
specifier|const
name|BasicBlock
modifier|*
name|BB
parameter_list|)
block|{
return|return
name|succ_const_iterator
argument_list|(
name|BB
operator|->
name|getTerminator
argument_list|()
argument_list|)
return|;
block|}
specifier|inline
name|succ_iterator
name|succ_end
parameter_list|(
name|BasicBlock
modifier|*
name|BB
parameter_list|)
block|{
return|return
name|succ_iterator
argument_list|(
name|BB
operator|->
name|getTerminator
argument_list|()
argument_list|,
name|true
argument_list|)
return|;
block|}
specifier|inline
name|succ_const_iterator
name|succ_end
parameter_list|(
specifier|const
name|BasicBlock
modifier|*
name|BB
parameter_list|)
block|{
return|return
name|succ_const_iterator
argument_list|(
name|BB
operator|->
name|getTerminator
argument_list|()
argument_list|,
name|true
argument_list|)
return|;
block|}
specifier|inline
name|bool
name|succ_empty
parameter_list|(
specifier|const
name|BasicBlock
modifier|*
name|BB
parameter_list|)
block|{
return|return
name|succ_begin
argument_list|(
name|BB
argument_list|)
operator|==
name|succ_end
argument_list|(
name|BB
argument_list|)
return|;
block|}
specifier|inline
name|succ_range
name|successors
parameter_list|(
name|BasicBlock
modifier|*
name|BB
parameter_list|)
block|{
return|return
name|succ_range
argument_list|(
name|succ_begin
argument_list|(
name|BB
argument_list|)
argument_list|,
name|succ_end
argument_list|(
name|BB
argument_list|)
argument_list|)
return|;
block|}
specifier|inline
name|succ_const_range
name|successors
parameter_list|(
specifier|const
name|BasicBlock
modifier|*
name|BB
parameter_list|)
block|{
return|return
name|succ_const_range
argument_list|(
name|succ_begin
argument_list|(
name|BB
argument_list|)
argument_list|,
name|succ_end
argument_list|(
name|BB
argument_list|)
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|U
operator|>
expr|struct
name|isPodLike
operator|<
name|TerminatorInst
operator|::
name|SuccIterator
operator|<
name|T
operator|,
name|U
operator|>>
block|{
specifier|static
specifier|const
name|bool
name|value
operator|=
name|isPodLike
operator|<
name|T
operator|>
operator|::
name|value
block|; }
expr_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|// GraphTraits specializations for basic block graphs (CFGs)
comment|//===--------------------------------------------------------------------===//
comment|// Provide specializations of GraphTraits to be able to treat a function as a
comment|// graph of basic blocks...
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
name|BasicBlock
operator|*
operator|>
block|{
name|using
name|NodeRef
operator|=
name|BasicBlock
operator|*
block|;
name|using
name|ChildIteratorType
operator|=
name|succ_iterator
block|;
specifier|static
name|NodeRef
name|getEntryNode
argument_list|(
argument|BasicBlock *BB
argument_list|)
block|{
return|return
name|BB
return|;
block|}
specifier|static
name|ChildIteratorType
name|child_begin
argument_list|(
argument|NodeRef N
argument_list|)
block|{
return|return
name|succ_begin
argument_list|(
name|N
argument_list|)
return|;
block|}
specifier|static
name|ChildIteratorType
name|child_end
argument_list|(
argument|NodeRef N
argument_list|)
block|{
return|return
name|succ_end
argument_list|(
name|N
argument_list|)
return|;
block|}
expr|}
block|;
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
specifier|const
name|BasicBlock
operator|*
operator|>
block|{
name|using
name|NodeRef
operator|=
specifier|const
name|BasicBlock
operator|*
block|;
name|using
name|ChildIteratorType
operator|=
name|succ_const_iterator
block|;
specifier|static
name|NodeRef
name|getEntryNode
argument_list|(
argument|const BasicBlock *BB
argument_list|)
block|{
return|return
name|BB
return|;
block|}
specifier|static
name|ChildIteratorType
name|child_begin
argument_list|(
argument|NodeRef N
argument_list|)
block|{
return|return
name|succ_begin
argument_list|(
name|N
argument_list|)
return|;
block|}
specifier|static
name|ChildIteratorType
name|child_end
argument_list|(
argument|NodeRef N
argument_list|)
block|{
return|return
name|succ_end
argument_list|(
name|N
argument_list|)
return|;
block|}
expr|}
block|;
comment|// Provide specializations of GraphTraits to be able to treat a function as a
comment|// graph of basic blocks... and to walk it in inverse order.  Inverse order for
comment|// a function is considered to be when traversing the predecessor edges of a BB
comment|// instead of the successor edges.
comment|//
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
name|Inverse
operator|<
name|BasicBlock
operator|*
operator|>>
block|{
name|using
name|NodeRef
operator|=
name|BasicBlock
operator|*
block|;
name|using
name|ChildIteratorType
operator|=
name|pred_iterator
block|;
specifier|static
name|NodeRef
name|getEntryNode
argument_list|(
argument|Inverse<BasicBlock *> G
argument_list|)
block|{
return|return
name|G
operator|.
name|Graph
return|;
block|}
specifier|static
name|ChildIteratorType
name|child_begin
argument_list|(
argument|NodeRef N
argument_list|)
block|{
return|return
name|pred_begin
argument_list|(
name|N
argument_list|)
return|;
block|}
specifier|static
name|ChildIteratorType
name|child_end
argument_list|(
argument|NodeRef N
argument_list|)
block|{
return|return
name|pred_end
argument_list|(
name|N
argument_list|)
return|;
block|}
expr|}
block|;
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
name|Inverse
operator|<
specifier|const
name|BasicBlock
operator|*
operator|>>
block|{
name|using
name|NodeRef
operator|=
specifier|const
name|BasicBlock
operator|*
block|;
name|using
name|ChildIteratorType
operator|=
name|const_pred_iterator
block|;
specifier|static
name|NodeRef
name|getEntryNode
argument_list|(
argument|Inverse<const BasicBlock *> G
argument_list|)
block|{
return|return
name|G
operator|.
name|Graph
return|;
block|}
specifier|static
name|ChildIteratorType
name|child_begin
argument_list|(
argument|NodeRef N
argument_list|)
block|{
return|return
name|pred_begin
argument_list|(
name|N
argument_list|)
return|;
block|}
specifier|static
name|ChildIteratorType
name|child_end
argument_list|(
argument|NodeRef N
argument_list|)
block|{
return|return
name|pred_end
argument_list|(
name|N
argument_list|)
return|;
block|}
expr|}
block|;
comment|//===--------------------------------------------------------------------===//
comment|// GraphTraits specializations for function basic block graphs (CFGs)
comment|//===--------------------------------------------------------------------===//
comment|// Provide specializations of GraphTraits to be able to treat a function as a
comment|// graph of basic blocks... these are the same as the basic block iterators,
comment|// except that the root node is implicitly the first node of the function.
comment|//
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
name|Function
operator|*
operator|>
operator|:
name|public
name|GraphTraits
operator|<
name|BasicBlock
operator|*
operator|>
block|{
specifier|static
name|NodeRef
name|getEntryNode
argument_list|(
argument|Function *F
argument_list|)
block|{
return|return
operator|&
name|F
operator|->
name|getEntryBlock
argument_list|()
return|;
block|}
comment|// nodes_iterator/begin/end - Allow iteration over all nodes in the graph
name|using
name|nodes_iterator
operator|=
name|pointer_iterator
operator|<
name|Function
operator|::
name|iterator
operator|>
block|;
specifier|static
name|nodes_iterator
name|nodes_begin
argument_list|(
argument|Function *F
argument_list|)
block|{
return|return
name|nodes_iterator
argument_list|(
name|F
operator|->
name|begin
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|nodes_iterator
name|nodes_end
argument_list|(
argument|Function *F
argument_list|)
block|{
return|return
name|nodes_iterator
argument_list|(
name|F
operator|->
name|end
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|size_t
name|size
argument_list|(
argument|Function *F
argument_list|)
block|{
return|return
name|F
operator|->
name|size
argument_list|()
return|;
block|}
expr|}
block|;
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
specifier|const
name|Function
operator|*
operator|>
operator|:
name|public
name|GraphTraits
operator|<
specifier|const
name|BasicBlock
operator|*
operator|>
block|{
specifier|static
name|NodeRef
name|getEntryNode
argument_list|(
argument|const Function *F
argument_list|)
block|{
return|return
operator|&
name|F
operator|->
name|getEntryBlock
argument_list|()
return|;
block|}
comment|// nodes_iterator/begin/end - Allow iteration over all nodes in the graph
name|using
name|nodes_iterator
operator|=
name|pointer_iterator
operator|<
name|Function
operator|::
name|const_iterator
operator|>
block|;
specifier|static
name|nodes_iterator
name|nodes_begin
argument_list|(
argument|const Function *F
argument_list|)
block|{
return|return
name|nodes_iterator
argument_list|(
name|F
operator|->
name|begin
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|nodes_iterator
name|nodes_end
argument_list|(
argument|const Function *F
argument_list|)
block|{
return|return
name|nodes_iterator
argument_list|(
name|F
operator|->
name|end
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|size_t
name|size
argument_list|(
argument|const Function *F
argument_list|)
block|{
return|return
name|F
operator|->
name|size
argument_list|()
return|;
block|}
expr|}
block|;
comment|// Provide specializations of GraphTraits to be able to treat a function as a
comment|// graph of basic blocks... and to walk it in inverse order.  Inverse order for
comment|// a function is considered to be when traversing the predecessor edges of a BB
comment|// instead of the successor edges.
comment|//
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
name|Inverse
operator|<
name|Function
operator|*
operator|>>
operator|:
name|public
name|GraphTraits
operator|<
name|Inverse
operator|<
name|BasicBlock
operator|*
operator|>>
block|{
specifier|static
name|NodeRef
name|getEntryNode
argument_list|(
argument|Inverse<Function *> G
argument_list|)
block|{
return|return
operator|&
name|G
operator|.
name|Graph
operator|->
name|getEntryBlock
argument_list|()
return|;
block|}
expr|}
block|;
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
name|Inverse
operator|<
specifier|const
name|Function
operator|*
operator|>>
operator|:
name|public
name|GraphTraits
operator|<
name|Inverse
operator|<
specifier|const
name|BasicBlock
operator|*
operator|>>
block|{
specifier|static
name|NodeRef
name|getEntryNode
argument_list|(
argument|Inverse<const Function *> G
argument_list|)
block|{
return|return
operator|&
name|G
operator|.
name|Graph
operator|->
name|getEntryBlock
argument_list|()
return|;
block|}
expr|}
block|;  }
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_IR_CFG_H
end_comment

end_unit

