begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- InstIterator.h - Classes for inst iteration --------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file contains definitions of two iterators for iterating over the
end_comment

begin_comment
comment|// instructions in a function.  This is effectively a wrapper around a two level
end_comment

begin_comment
comment|// iterator that can probably be genericized later.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Note that this iterator gets invalidated any time that basic blocks or
end_comment

begin_comment
comment|// instructions are moved around.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_IR_INSTITERATOR_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_IR_INSTITERATOR_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/iterator_range.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/BasicBlock.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Function.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/SymbolTableListTraits.h"
end_include

begin_include
include|#
directive|include
file|<iterator>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|// This class implements inst_begin()& inst_end() for
comment|// inst_iterator and const_inst_iterator's.
comment|//
name|template
operator|<
name|class
name|BB_t
operator|,
name|class
name|BB_i_t
operator|,
name|class
name|BI_t
operator|,
name|class
name|II_t
operator|>
name|class
name|InstIterator
block|{
name|using
name|BBty
operator|=
name|BB_t
block|;
name|using
name|BBIty
operator|=
name|BB_i_t
block|;
name|using
name|BIty
operator|=
name|BI_t
block|;
name|using
name|IIty
operator|=
name|II_t
block|;
name|BB_t
operator|*
name|BBs
block|;
comment|// BasicBlocksType
name|BB_i_t
name|BB
block|;
comment|// BasicBlocksType::iterator
name|BI_t
name|BI
block|;
comment|// BasicBlock::iterator
name|public
operator|:
name|using
name|iterator_category
operator|=
name|std
operator|::
name|bidirectional_iterator_tag
block|;
name|using
name|value_type
operator|=
name|IIty
block|;
name|using
name|difference_type
operator|=
name|signed
block|;
name|using
name|pointer
operator|=
name|IIty
operator|*
block|;
name|using
name|reference
operator|=
name|IIty
operator|&
block|;
comment|// Default constructor
name|InstIterator
argument_list|()
operator|=
expr|default
block|;
comment|// Copy constructor...
name|template
operator|<
name|typename
name|A
block|,
name|typename
name|B
block|,
name|typename
name|C
block|,
name|typename
name|D
operator|>
name|InstIterator
argument_list|(
specifier|const
name|InstIterator
operator|<
name|A
argument_list|,
name|B
argument_list|,
name|C
argument_list|,
name|D
operator|>
operator|&
name|II
argument_list|)
operator|:
name|BBs
argument_list|(
name|II
operator|.
name|BBs
argument_list|)
block|,
name|BB
argument_list|(
name|II
operator|.
name|BB
argument_list|)
block|,
name|BI
argument_list|(
argument|II.BI
argument_list|)
block|{}
name|template
operator|<
name|typename
name|A
block|,
name|typename
name|B
block|,
name|typename
name|C
block|,
name|typename
name|D
operator|>
name|InstIterator
argument_list|(
name|InstIterator
operator|<
name|A
argument_list|,
name|B
argument_list|,
name|C
argument_list|,
name|D
operator|>
operator|&
name|II
argument_list|)
operator|:
name|BBs
argument_list|(
name|II
operator|.
name|BBs
argument_list|)
block|,
name|BB
argument_list|(
name|II
operator|.
name|BB
argument_list|)
block|,
name|BI
argument_list|(
argument|II.BI
argument_list|)
block|{}
name|template
operator|<
name|class
name|M
operator|>
name|InstIterator
argument_list|(
name|M
operator|&
name|m
argument_list|)
operator|:
name|BBs
argument_list|(
operator|&
name|m
operator|.
name|getBasicBlockList
argument_list|()
argument_list|)
block|,
name|BB
argument_list|(
argument|BBs->begin()
argument_list|)
block|{
comment|// begin ctor
if|if
condition|(
name|BB
operator|!=
name|BBs
operator|->
name|end
argument_list|()
condition|)
block|{
name|BI
operator|=
name|BB
operator|->
name|begin
argument_list|()
expr_stmt|;
name|advanceToNextBB
argument_list|()
expr_stmt|;
block|}
block|}
name|template
operator|<
name|class
name|M
operator|>
name|InstIterator
argument_list|(
name|M
operator|&
name|m
argument_list|,
name|bool
argument_list|)
operator|:
name|BBs
argument_list|(
operator|&
name|m
operator|.
name|getBasicBlockList
argument_list|()
argument_list|)
block|,
name|BB
argument_list|(
argument|BBs->end()
argument_list|)
block|{
comment|// end ctor
block|}
comment|// Accessors to get at the underlying iterators...
specifier|inline
name|BBIty
operator|&
name|getBasicBlockIterator
argument_list|()
block|{
return|return
name|BB
return|;
block|}
specifier|inline
name|BIty
operator|&
name|getInstructionIterator
argument_list|()
block|{
return|return
name|BI
return|;
block|}
specifier|inline
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|BI
return|;
block|}
specifier|inline
name|pointer
name|operator
operator|->
expr|(
block|)
specifier|const
block|{
return|return
operator|&
name|operator
operator|*
operator|(
operator|)
return|;
block|}
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|InstIterator
operator|&
name|y
operator|)
specifier|const
block|{
return|return
name|BB
operator|==
name|y
operator|.
name|BB
operator|&&
operator|(
name|BB
operator|==
name|BBs
operator|->
name|end
argument_list|()
operator|||
name|BI
operator|==
name|y
operator|.
name|BI
operator|)
return|;
block|}
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|InstIterator
operator|&
name|y
operator|)
specifier|const
block|{
return|return
operator|!
name|operator
operator|==
operator|(
name|y
operator|)
return|;
block|}
name|InstIterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|BI
block|;
name|advanceToNextBB
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
specifier|inline
name|InstIterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|InstIterator
name|tmp
operator|=
operator|*
name|this
block|;
operator|++
operator|*
name|this
block|;
return|return
name|tmp
return|;
block|}
name|InstIterator
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
while|while
condition|(
name|BB
operator|==
name|BBs
operator|->
name|end
argument_list|()
operator|||
name|BI
operator|==
name|BB
operator|->
name|begin
argument_list|()
condition|)
block|{
operator|--
name|BB
expr_stmt|;
name|BI
operator|=
name|BB
operator|->
name|end
argument_list|()
expr_stmt|;
block|}
operator|--
name|BI
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_decl_stmt

begin_expr_stmt
specifier|inline
name|InstIterator
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|InstIterator
name|tmp
operator|=
operator|*
name|this
block|;
operator|--
operator|*
name|this
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|bool
name|atEnd
argument_list|()
specifier|const
block|{
return|return
name|BB
operator|==
name|BBs
operator|->
name|end
argument_list|()
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_function
specifier|inline
name|void
name|advanceToNextBB
parameter_list|()
block|{
comment|// The only way that the II could be broken is if it is now pointing to
comment|// the end() of the current BasicBlock and there are successor BBs.
while|while
condition|(
name|BI
operator|==
name|BB
operator|->
name|end
argument_list|()
condition|)
block|{
operator|++
name|BB
expr_stmt|;
if|if
condition|(
name|BB
operator|==
name|BBs
operator|->
name|end
argument_list|()
condition|)
break|break;
name|BI
operator|=
name|BB
operator|->
name|begin
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_decl_stmt
unit|};
name|using
name|inst_iterator
init|=
name|InstIterator
operator|<
name|SymbolTableList
operator|<
name|BasicBlock
operator|>
decl_stmt|,
name|Function
decl|::
name|iterator
decl_stmt|,
name|BasicBlock
decl|::
name|iterator
decl_stmt|,
name|Instruction
decl|>
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|using
name|const_inst_iterator
init|=
name|InstIterator
operator|<
specifier|const
name|SymbolTableList
operator|<
name|BasicBlock
operator|>
decl_stmt|,
name|Function
decl|::
name|const_iterator
decl_stmt|,
name|BasicBlock
decl|::
name|const_iterator
decl_stmt|,                  const
name|Instruction
decl|>
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|using
name|inst_range
init|=
name|iterator_range
operator|<
name|inst_iterator
operator|>
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|using
name|const_inst_range
init|=
name|iterator_range
operator|<
name|const_inst_iterator
operator|>
decl_stmt|;
end_decl_stmt

begin_function
specifier|inline
name|inst_iterator
name|inst_begin
parameter_list|(
name|Function
modifier|*
name|F
parameter_list|)
block|{
return|return
name|inst_iterator
argument_list|(
operator|*
name|F
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|inst_iterator
name|inst_end
parameter_list|(
name|Function
modifier|*
name|F
parameter_list|)
block|{
return|return
name|inst_iterator
argument_list|(
operator|*
name|F
argument_list|,
name|true
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|inst_range
name|instructions
parameter_list|(
name|Function
modifier|*
name|F
parameter_list|)
block|{
return|return
name|inst_range
argument_list|(
name|inst_begin
argument_list|(
name|F
argument_list|)
argument_list|,
name|inst_end
argument_list|(
name|F
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|const_inst_iterator
name|inst_begin
parameter_list|(
specifier|const
name|Function
modifier|*
name|F
parameter_list|)
block|{
return|return
name|const_inst_iterator
argument_list|(
operator|*
name|F
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|const_inst_iterator
name|inst_end
parameter_list|(
specifier|const
name|Function
modifier|*
name|F
parameter_list|)
block|{
return|return
name|const_inst_iterator
argument_list|(
operator|*
name|F
argument_list|,
name|true
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|const_inst_range
name|instructions
parameter_list|(
specifier|const
name|Function
modifier|*
name|F
parameter_list|)
block|{
return|return
name|const_inst_range
argument_list|(
name|inst_begin
argument_list|(
name|F
argument_list|)
argument_list|,
name|inst_end
argument_list|(
name|F
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|inst_iterator
name|inst_begin
parameter_list|(
name|Function
modifier|&
name|F
parameter_list|)
block|{
return|return
name|inst_iterator
argument_list|(
name|F
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|inst_iterator
name|inst_end
parameter_list|(
name|Function
modifier|&
name|F
parameter_list|)
block|{
return|return
name|inst_iterator
argument_list|(
name|F
argument_list|,
name|true
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|inst_range
name|instructions
parameter_list|(
name|Function
modifier|&
name|F
parameter_list|)
block|{
return|return
name|inst_range
argument_list|(
name|inst_begin
argument_list|(
name|F
argument_list|)
argument_list|,
name|inst_end
argument_list|(
name|F
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|const_inst_iterator
name|inst_begin
parameter_list|(
specifier|const
name|Function
modifier|&
name|F
parameter_list|)
block|{
return|return
name|const_inst_iterator
argument_list|(
name|F
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|const_inst_iterator
name|inst_end
parameter_list|(
specifier|const
name|Function
modifier|&
name|F
parameter_list|)
block|{
return|return
name|const_inst_iterator
argument_list|(
name|F
argument_list|,
name|true
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|const_inst_range
name|instructions
parameter_list|(
specifier|const
name|Function
modifier|&
name|F
parameter_list|)
block|{
return|return
name|const_inst_range
argument_list|(
name|inst_begin
argument_list|(
name|F
argument_list|)
argument_list|,
name|inst_end
argument_list|(
name|F
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_IR_INSTITERATOR_H
end_comment

end_unit

