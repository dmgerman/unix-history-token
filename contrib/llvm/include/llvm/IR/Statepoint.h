begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- llvm/IR/Statepoint.h - gc.statepoint utilities ------ --*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file contains utility functions and a wrapper class analogous to
end_comment

begin_comment
comment|// CallSite for accessing the fields of gc.statepoint, gc.relocate, and
end_comment

begin_comment
comment|// gc.result intrinsics
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__LLVM_IR_STATEPOINT_H
end_ifndef

begin_define
define|#
directive|define
name|__LLVM_IR_STATEPOINT_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/iterator_range.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/CallSite.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Instructions.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Intrinsics.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Compiler.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|bool
name|isStatepoint
parameter_list|(
specifier|const
name|ImmutableCallSite
modifier|&
name|CS
parameter_list|)
function_decl|;
name|bool
name|isStatepoint
parameter_list|(
specifier|const
name|Instruction
modifier|*
name|inst
parameter_list|)
function_decl|;
name|bool
name|isStatepoint
parameter_list|(
specifier|const
name|Instruction
modifier|&
name|inst
parameter_list|)
function_decl|;
name|bool
name|isGCRelocate
parameter_list|(
specifier|const
name|Instruction
modifier|*
name|inst
parameter_list|)
function_decl|;
name|bool
name|isGCRelocate
parameter_list|(
specifier|const
name|ImmutableCallSite
modifier|&
name|CS
parameter_list|)
function_decl|;
name|bool
name|isGCResult
parameter_list|(
specifier|const
name|Instruction
modifier|*
name|inst
parameter_list|)
function_decl|;
name|bool
name|isGCResult
parameter_list|(
specifier|const
name|ImmutableCallSite
modifier|&
name|CS
parameter_list|)
function_decl|;
comment|/// Analogous to CallSiteBase, this provides most of the actual
comment|/// functionality for Statepoint and ImmutableStatepoint.  It is
comment|/// templatized to allow easily specializing of const and non-const
comment|/// concrete subtypes.  This is structured analogous to CallSite
comment|/// rather than the IntrinsicInst.h helpers since we want to support
comment|/// invokable statepoints in the near future.
comment|/// TODO: This does not currently allow the if(Statepoint S = ...)
comment|///   idiom used with CallSites.  Consider refactoring to support.
name|template
operator|<
name|typename
name|InstructionTy
operator|,
name|typename
name|ValueTy
operator|,
name|typename
name|CallSiteTy
operator|>
name|class
name|StatepointBase
block|{
name|CallSiteTy
name|StatepointCS
block|;
name|void
operator|*
name|operator
name|new
argument_list|(
argument|size_t
argument_list|,
argument|unsigned
argument_list|)
name|LLVM_DELETED_FUNCTION
block|;
name|void
operator|*
name|operator
name|new
argument_list|(
argument|size_t s
argument_list|)
name|LLVM_DELETED_FUNCTION
block|;
name|protected
operator|:
name|explicit
name|StatepointBase
argument_list|(
name|InstructionTy
operator|*
name|I
argument_list|)
operator|:
name|StatepointCS
argument_list|(
argument|I
argument_list|)
block|{
name|assert
argument_list|(
name|isStatepoint
argument_list|(
name|I
argument_list|)
argument_list|)
block|;   }
name|explicit
name|StatepointBase
argument_list|(
argument|CallSiteTy CS
argument_list|)
operator|:
name|StatepointCS
argument_list|(
argument|CS
argument_list|)
block|{
name|assert
argument_list|(
name|isStatepoint
argument_list|(
name|CS
argument_list|)
argument_list|)
block|;   }
name|public
operator|:
typedef|typedef
name|typename
name|CallSiteTy
operator|::
name|arg_iterator
name|arg_iterator
expr_stmt|;
comment|/// Return the underlying CallSite.
name|CallSiteTy
name|getCallSite
argument_list|()
block|{
return|return
name|StatepointCS
return|;
block|}
comment|/// Return the value actually being called or invoked.
name|ValueTy
operator|*
name|actualCallee
argument_list|()
block|{
return|return
name|StatepointCS
operator|.
name|getArgument
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/// Number of arguments to be passed to the actual callee.
name|int
name|numCallArgs
argument_list|()
block|{
return|return
name|cast
operator|<
name|ConstantInt
operator|>
operator|(
name|StatepointCS
operator|.
name|getArgument
argument_list|(
literal|1
argument_list|)
operator|)
operator|->
name|getZExtValue
argument_list|()
return|;
block|}
comment|/// Number of additional arguments excluding those intended
comment|/// for garbage collection.
name|int
name|numTotalVMSArgs
argument_list|()
block|{
return|return
name|cast
operator|<
name|ConstantInt
operator|>
operator|(
name|StatepointCS
operator|.
name|getArgument
argument_list|(
literal|3
operator|+
name|numCallArgs
argument_list|()
argument_list|)
operator|)
operator|->
name|getZExtValue
argument_list|()
return|;
block|}
name|typename
name|CallSiteTy
operator|::
name|arg_iterator
name|call_args_begin
argument_list|()
block|{
comment|// 3 = callTarget, #callArgs, flag
name|int
name|Offset
operator|=
literal|3
block|;
name|assert
argument_list|(
name|Offset
operator|<=
operator|(
name|int
operator|)
name|StatepointCS
operator|.
name|arg_size
argument_list|()
argument_list|)
block|;
return|return
name|StatepointCS
operator|.
name|arg_begin
argument_list|()
operator|+
name|Offset
return|;
block|}
name|typename
name|CallSiteTy
operator|::
name|arg_iterator
name|call_args_end
argument_list|()
block|{
name|int
name|Offset
operator|=
literal|3
operator|+
name|numCallArgs
argument_list|()
block|;
name|assert
argument_list|(
name|Offset
operator|<=
operator|(
name|int
operator|)
name|StatepointCS
operator|.
name|arg_size
argument_list|()
argument_list|)
block|;
return|return
name|StatepointCS
operator|.
name|arg_begin
argument_list|()
operator|+
name|Offset
return|;
block|}
comment|/// range adapter for call arguments
name|iterator_range
operator|<
name|arg_iterator
operator|>
name|call_args
argument_list|()
block|{
return|return
name|iterator_range
operator|<
name|arg_iterator
operator|>
operator|(
name|call_args_begin
argument_list|()
operator|,
name|call_args_end
argument_list|()
operator|)
return|;
block|}
name|typename
name|CallSiteTy
operator|::
name|arg_iterator
name|vm_state_begin
argument_list|()
block|{
return|return
name|call_args_end
argument_list|()
return|;
block|}
name|typename
name|CallSiteTy
operator|::
name|arg_iterator
name|vm_state_end
argument_list|()
block|{
name|int
name|Offset
operator|=
literal|3
operator|+
name|numCallArgs
argument_list|()
operator|+
literal|1
operator|+
name|numTotalVMSArgs
argument_list|()
block|;
name|assert
argument_list|(
name|Offset
operator|<=
operator|(
name|int
operator|)
name|StatepointCS
operator|.
name|arg_size
argument_list|()
argument_list|)
block|;
return|return
name|StatepointCS
operator|.
name|arg_begin
argument_list|()
operator|+
name|Offset
return|;
block|}
comment|/// range adapter for vm state arguments
name|iterator_range
operator|<
name|arg_iterator
operator|>
name|vm_state_args
argument_list|()
block|{
return|return
name|iterator_range
operator|<
name|arg_iterator
operator|>
operator|(
name|vm_state_begin
argument_list|()
operator|,
name|vm_state_end
argument_list|()
operator|)
return|;
block|}
name|typename
name|CallSiteTy
operator|::
name|arg_iterator
name|first_vm_state_stack_begin
argument_list|()
block|{
comment|// 6 = numTotalVMSArgs, 1st_objectID, 1st_bci,
comment|//     1st_#stack, 1st_#local, 1st_#monitor
return|return
name|vm_state_begin
argument_list|()
operator|+
literal|6
return|;
block|}
name|typename
name|CallSiteTy
operator|::
name|arg_iterator
name|gc_args_begin
argument_list|()
block|{
return|return
name|vm_state_end
argument_list|()
return|;
block|}
name|typename
name|CallSiteTy
operator|::
name|arg_iterator
name|gc_args_end
argument_list|()
block|{
return|return
name|StatepointCS
operator|.
name|arg_end
argument_list|()
return|;
block|}
comment|/// range adapter for gc arguments
name|iterator_range
operator|<
name|arg_iterator
operator|>
name|gc_args
argument_list|()
block|{
return|return
name|iterator_range
operator|<
name|arg_iterator
operator|>
operator|(
name|gc_args_begin
argument_list|()
operator|,
name|gc_args_end
argument_list|()
operator|)
return|;
block|}
ifndef|#
directive|ifndef
name|NDEBUG
comment|/// Asserts if this statepoint is malformed.  Common cases for failure
comment|/// include incorrect length prefixes for variable length sections or
comment|/// illegal values for parameters.
name|void
name|verify
argument_list|()
block|{
name|assert
argument_list|(
name|numCallArgs
argument_list|()
operator|>=
literal|0
operator|&&
literal|"number of arguments to actually callee can't be negative"
argument_list|)
block|;
comment|// The internal asserts in the iterator accessors do the rest.
operator|(
name|void
operator|)
name|call_args_begin
argument_list|()
block|;
operator|(
name|void
operator|)
name|call_args_end
argument_list|()
block|;
operator|(
name|void
operator|)
name|vm_state_begin
argument_list|()
block|;
operator|(
name|void
operator|)
name|vm_state_end
argument_list|()
block|;
operator|(
name|void
operator|)
name|gc_args_begin
argument_list|()
block|;
operator|(
name|void
operator|)
name|gc_args_end
argument_list|()
block|;   }
endif|#
directive|endif
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/// A specialization of it's base class for read only access
end_comment

begin_comment
comment|/// to a gc.statepoint.
end_comment

begin_decl_stmt
name|class
name|ImmutableStatepoint
range|:
name|public
name|StatepointBase
operator|<
specifier|const
name|Instruction
decl_stmt|, const
name|Value
decl_stmt|,
name|ImmutableCallSite
decl|>
block|{
typedef|typedef
name|StatepointBase
operator|<
specifier|const
name|Instruction
operator|,
specifier|const
name|Value
operator|,
name|ImmutableCallSite
operator|>
name|Base
expr_stmt|;
name|public
label|:
name|explicit
name|ImmutableStatepoint
argument_list|(
specifier|const
name|Instruction
operator|*
name|I
argument_list|)
operator|:
name|Base
argument_list|(
argument|I
argument_list|)
block|{}
name|explicit
name|ImmutableStatepoint
argument_list|(
argument|ImmutableCallSite CS
argument_list|)
operator|:
name|Base
argument_list|(
argument|CS
argument_list|)
block|{}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/// A specialization of it's base class for read-write access
end_comment

begin_comment
comment|/// to a gc.statepoint.
end_comment

begin_decl_stmt
name|class
name|Statepoint
range|:
name|public
name|StatepointBase
operator|<
name|Instruction
decl_stmt|,
name|Value
decl_stmt|,
name|CallSite
decl|>
block|{
typedef|typedef
name|StatepointBase
operator|<
name|Instruction
operator|,
name|Value
operator|,
name|CallSite
operator|>
name|Base
expr_stmt|;
name|public
label|:
name|explicit
name|Statepoint
argument_list|(
name|Instruction
operator|*
name|I
argument_list|)
operator|:
name|Base
argument_list|(
argument|I
argument_list|)
block|{}
name|explicit
name|Statepoint
argument_list|(
argument|CallSite CS
argument_list|)
operator|:
name|Base
argument_list|(
argument|CS
argument_list|)
block|{}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/// Wraps a call to a gc.relocate and provides access to it's operands.
end_comment

begin_comment
comment|/// TODO: This should likely be refactored to resememble the wrappers in
end_comment

begin_comment
comment|/// InstrinsicInst.h.
end_comment

begin_decl_stmt
name|class
name|GCRelocateOperands
block|{
name|ImmutableCallSite
name|RelocateCS
decl_stmt|;
name|public
label|:
name|GCRelocateOperands
argument_list|(
specifier|const
name|User
operator|*
name|U
argument_list|)
operator|:
name|RelocateCS
argument_list|(
argument|U
argument_list|)
block|{
name|assert
argument_list|(
name|isGCRelocate
argument_list|(
name|U
argument_list|)
argument_list|)
block|;   }
name|GCRelocateOperands
argument_list|(
specifier|const
name|Instruction
operator|*
name|inst
argument_list|)
operator|:
name|RelocateCS
argument_list|(
argument|inst
argument_list|)
block|{
name|assert
argument_list|(
name|isGCRelocate
argument_list|(
name|inst
argument_list|)
argument_list|)
block|;   }
name|GCRelocateOperands
argument_list|(
argument|CallSite CS
argument_list|)
operator|:
name|RelocateCS
argument_list|(
argument|CS
argument_list|)
block|{
name|assert
argument_list|(
name|isGCRelocate
argument_list|(
name|CS
argument_list|)
argument_list|)
block|;   }
comment|/// The statepoint with which this gc.relocate is associated.
specifier|const
name|Instruction
operator|*
name|statepoint
argument_list|()
block|{
return|return
name|cast
operator|<
name|Instruction
operator|>
operator|(
name|RelocateCS
operator|.
name|getArgument
argument_list|(
literal|0
argument_list|)
operator|)
return|;
block|}
comment|/// The index into the associate statepoint's argument list
comment|/// which contains the base pointer of the pointer whose
comment|/// relocation this gc.relocate describes.
name|int
name|basePtrIndex
parameter_list|()
block|{
return|return
name|cast
operator|<
name|ConstantInt
operator|>
operator|(
name|RelocateCS
operator|.
name|getArgument
argument_list|(
literal|1
argument_list|)
operator|)
operator|->
name|getZExtValue
argument_list|()
return|;
block|}
comment|/// The index into the associate statepoint's argument list which
comment|/// contains the pointer whose relocation this gc.relocate describes.
name|int
name|derivedPtrIndex
parameter_list|()
block|{
return|return
name|cast
operator|<
name|ConstantInt
operator|>
operator|(
name|RelocateCS
operator|.
name|getArgument
argument_list|(
literal|2
argument_list|)
operator|)
operator|->
name|getZExtValue
argument_list|()
return|;
block|}
name|Value
modifier|*
name|basePtr
parameter_list|()
block|{
name|ImmutableCallSite
name|CS
argument_list|(
name|statepoint
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|*
operator|(
name|CS
operator|.
name|arg_begin
argument_list|()
operator|+
name|basePtrIndex
argument_list|()
operator|)
return|;
block|}
name|Value
modifier|*
name|derivedPtr
parameter_list|()
block|{
name|ImmutableCallSite
name|CS
argument_list|(
name|statepoint
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|*
operator|(
name|CS
operator|.
name|arg_begin
argument_list|()
operator|+
name|derivedPtrIndex
argument_list|()
operator|)
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

end_unit

