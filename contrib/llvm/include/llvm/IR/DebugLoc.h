begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- DebugLoc.h - Debug Location Information ------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines a number of light weight data structures used
end_comment

begin_comment
comment|// to describe and track debug location information.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_IR_DEBUGLOC_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_IR_DEBUGLOC_H
end_define

begin_include
include|#
directive|include
file|"llvm/IR/TrackingMDRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/DataTypes.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|LLVMContext
decl_stmt|;
name|class
name|raw_ostream
decl_stmt|;
name|class
name|MDNode
decl_stmt|;
comment|/// DebugLoc - Debug location id.  This is carried by Instruction, SDNode,
comment|/// and MachineInstr to compactly encode file/line/scope information for an
comment|/// operation.
name|class
name|DebugLoc
block|{
name|TrackingMDNodeRef
name|Loc
decl_stmt|;
name|public
label|:
name|DebugLoc
argument_list|()
block|{}
name|DebugLoc
argument_list|(
name|DebugLoc
operator|&&
name|X
argument_list|)
operator|:
name|Loc
argument_list|(
argument|std::move(X.Loc)
argument_list|)
block|{}
name|DebugLoc
argument_list|(
specifier|const
name|DebugLoc
operator|&
name|X
argument_list|)
operator|:
name|Loc
argument_list|(
argument|X.Loc
argument_list|)
block|{}
name|DebugLoc
operator|&
name|operator
operator|=
operator|(
name|DebugLoc
operator|&&
name|X
operator|)
block|{
name|Loc
operator|=
name|std
operator|::
name|move
argument_list|(
name|X
operator|.
name|Loc
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
name|DebugLoc
modifier|&
name|operator
init|=
operator|(
specifier|const
name|DebugLoc
operator|&
name|X
operator|)
block|{
name|Loc
operator|=
name|X
operator|.
name|Loc
block|;
return|return
operator|*
name|this
return|;
block|}
comment|/// \brief Check whether this has a trivial destructor.
name|bool
name|hasTrivialDestructor
argument_list|()
specifier|const
block|{
return|return
name|Loc
operator|.
name|hasTrivialDestructor
argument_list|()
return|;
block|}
comment|/// get - Get a new DebugLoc that corresponds to the specified line/col
comment|/// scope/inline location.
specifier|static
name|DebugLoc
name|get
parameter_list|(
name|unsigned
name|Line
parameter_list|,
name|unsigned
name|Col
parameter_list|,
name|MDNode
modifier|*
name|Scope
parameter_list|,
name|MDNode
modifier|*
name|InlinedAt
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|/// getFromDILocation - Translate the DILocation quad into a DebugLoc.
specifier|static
name|DebugLoc
name|getFromDILocation
parameter_list|(
name|MDNode
modifier|*
name|N
parameter_list|)
function_decl|;
comment|/// getFromDILexicalBlock - Translate the DILexicalBlock into a DebugLoc.
specifier|static
name|DebugLoc
name|getFromDILexicalBlock
parameter_list|(
name|MDNode
modifier|*
name|N
parameter_list|)
function_decl|;
comment|/// isUnknown - Return true if this is an unknown location.
name|bool
name|isUnknown
argument_list|()
specifier|const
block|{
return|return
operator|!
name|Loc
return|;
block|}
name|unsigned
name|getLine
argument_list|()
specifier|const
expr_stmt|;
name|unsigned
name|getCol
argument_list|()
specifier|const
expr_stmt|;
comment|/// getScope - This returns the scope pointer for this DebugLoc, or null if
comment|/// invalid.
name|MDNode
operator|*
name|getScope
argument_list|()
specifier|const
expr_stmt|;
name|MDNode
modifier|*
name|getScope
argument_list|(
specifier|const
name|LLVMContext
operator|&
argument_list|)
decl|const
block|{
return|return
name|getScope
argument_list|()
return|;
block|}
comment|/// getInlinedAt - This returns the InlinedAt pointer for this DebugLoc, or
comment|/// null if invalid or not present.
name|MDNode
operator|*
name|getInlinedAt
argument_list|()
specifier|const
expr_stmt|;
name|MDNode
modifier|*
name|getInlinedAt
argument_list|(
specifier|const
name|LLVMContext
operator|&
argument_list|)
decl|const
block|{
return|return
name|getInlinedAt
argument_list|()
return|;
block|}
comment|/// getScopeAndInlinedAt - Return both the Scope and the InlinedAt values.
name|void
name|getScopeAndInlinedAt
argument_list|(
name|MDNode
operator|*
operator|&
name|Scope
argument_list|,
name|MDNode
operator|*
operator|&
name|IA
argument_list|)
decl|const
decl_stmt|;
name|void
name|getScopeAndInlinedAt
argument_list|(
name|MDNode
operator|*
operator|&
name|Scope
argument_list|,
name|MDNode
operator|*
operator|&
name|IA
argument_list|,
specifier|const
name|LLVMContext
operator|&
argument_list|)
decl|const
block|{
return|return
name|getScopeAndInlinedAt
argument_list|(
name|Scope
argument_list|,
name|IA
argument_list|)
return|;
block|}
comment|/// getScopeNode - Get MDNode for DebugLoc's scope, or null if invalid.
name|MDNode
operator|*
name|getScopeNode
argument_list|()
specifier|const
expr_stmt|;
name|MDNode
modifier|*
name|getScopeNode
argument_list|(
specifier|const
name|LLVMContext
operator|&
argument_list|)
decl|const
block|{
return|return
name|getScopeNode
argument_list|()
return|;
block|}
comment|// getFnDebugLoc - Walk up the scope chain of given debug loc and find line
comment|// number info for the function.
name|DebugLoc
name|getFnDebugLoc
argument_list|()
specifier|const
expr_stmt|;
name|DebugLoc
name|getFnDebugLoc
argument_list|(
specifier|const
name|LLVMContext
operator|&
argument_list|)
decl|const
block|{
return|return
name|getFnDebugLoc
argument_list|()
return|;
block|}
comment|/// getAsMDNode - This method converts the compressed DebugLoc node into a
comment|/// DILocation compatible MDNode.
name|MDNode
operator|*
name|getAsMDNode
argument_list|()
specifier|const
expr_stmt|;
name|MDNode
modifier|*
name|getAsMDNode
argument_list|(
name|LLVMContext
operator|&
argument_list|)
decl|const
block|{
return|return
name|getAsMDNode
argument_list|()
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|DebugLoc
operator|&
name|DL
operator|)
specifier|const
block|{
return|return
name|Loc
operator|==
name|DL
operator|.
name|Loc
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|DebugLoc
operator|&
name|DL
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|DL
operator|)
return|;
block|}
name|void
name|dump
argument_list|()
specifier|const
expr_stmt|;
name|void
name|dump
argument_list|(
specifier|const
name|LLVMContext
operator|&
argument_list|)
decl|const
block|{
name|dump
argument_list|()
expr_stmt|;
block|}
comment|/// \brief prints source location /path/to/file.exe:line:col @[inlined at]
name|void
name|print
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|)
decl|const
decl_stmt|;
name|void
name|print
argument_list|(
specifier|const
name|LLVMContext
operator|&
argument_list|,
name|raw_ostream
operator|&
name|OS
argument_list|)
decl|const
block|{
name|print
argument_list|(
name|OS
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* LLVM_SUPPORT_DEBUGLOC_H */
end_comment

end_unit

