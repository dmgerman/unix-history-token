begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- JITMemoryManager.h - Interface JIT uses to Allocate Mem -*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_EXECUTIONENGINE_JITMEMORYMANAGER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_EXECUTIONENGINE_JITMEMORYMANAGER_H
end_define

begin_include
include|#
directive|include
file|"llvm/ExecutionEngine/RuntimeDyld.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/DataTypes.h"
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|Function
decl_stmt|;
name|class
name|GlobalValue
decl_stmt|;
comment|/// JITMemoryManager - This interface is used by the JIT to allocate and manage
comment|/// memory for the code generated by the JIT.  This can be reimplemented by
comment|/// clients that have a strong desire to control how the layout of JIT'd memory
comment|/// works.
name|class
name|JITMemoryManager
range|:
name|public
name|RTDyldMemoryManager
block|{
name|protected
operator|:
name|bool
name|HasGOT
block|;
name|public
operator|:
name|JITMemoryManager
argument_list|()
operator|:
name|HasGOT
argument_list|(
argument|false
argument_list|)
block|{}
name|virtual
operator|~
name|JITMemoryManager
argument_list|()
block|;
comment|/// CreateDefaultMemManager - This is used to create the default
comment|/// JIT Memory Manager if the client does not provide one to the JIT.
specifier|static
name|JITMemoryManager
operator|*
name|CreateDefaultMemManager
argument_list|()
block|;
comment|/// setMemoryWritable - When code generation is in progress,
comment|/// the code pages may need permissions changed.
name|virtual
name|void
name|setMemoryWritable
argument_list|()
operator|=
literal|0
block|;
comment|/// setMemoryExecutable - When code generation is done and we're ready to
comment|/// start execution, the code pages may need permissions changed.
name|virtual
name|void
name|setMemoryExecutable
argument_list|()
operator|=
literal|0
block|;
comment|/// setPoisonMemory - Setting this flag to true makes the memory manager
comment|/// garbage values over freed memory.  This is useful for testing and
comment|/// debugging, and may be turned on by default in debug mode.
name|virtual
name|void
name|setPoisonMemory
argument_list|(
argument|bool poison
argument_list|)
operator|=
literal|0
block|;
comment|//===--------------------------------------------------------------------===//
comment|// Global Offset Table Management
comment|//===--------------------------------------------------------------------===//
comment|/// AllocateGOT - If the current table requires a Global Offset Table, this
comment|/// method is invoked to allocate it.  This method is required to set HasGOT
comment|/// to true.
name|virtual
name|void
name|AllocateGOT
argument_list|()
operator|=
literal|0
block|;
comment|/// isManagingGOT - Return true if the AllocateGOT method is called.
name|bool
name|isManagingGOT
argument_list|()
specifier|const
block|{
return|return
name|HasGOT
return|;
block|}
comment|/// getGOTBase - If this is managing a Global Offset Table, this method should
comment|/// return a pointer to its base.
name|virtual
name|uint8_t
operator|*
name|getGOTBase
argument_list|()
specifier|const
operator|=
literal|0
block|;
comment|//===--------------------------------------------------------------------===//
comment|// Main Allocation Functions
comment|//===--------------------------------------------------------------------===//
comment|/// startFunctionBody - When we start JITing a function, the JIT calls this
comment|/// method to allocate a block of free RWX memory, which returns a pointer to
comment|/// it.  If the JIT wants to request a block of memory of at least a certain
comment|/// size, it passes that value as ActualSize, and this method returns a block
comment|/// with at least that much space.  If the JIT doesn't know ahead of time how
comment|/// much space it will need to emit the function, it passes 0 for the
comment|/// ActualSize.  In either case, this method is required to pass back the size
comment|/// of the allocated block through ActualSize.  The JIT will be careful to
comment|/// not write more than the returned ActualSize bytes of memory.
name|virtual
name|uint8_t
operator|*
name|startFunctionBody
argument_list|(
specifier|const
name|Function
operator|*
name|F
argument_list|,
name|uintptr_t
operator|&
name|ActualSize
argument_list|)
operator|=
literal|0
block|;
comment|/// allocateStub - This method is called by the JIT to allocate space for a
comment|/// function stub (used to handle limited branch displacements) while it is
comment|/// JIT compiling a function.  For example, if foo calls bar, and if bar
comment|/// either needs to be lazily compiled or is a native function that exists too
comment|/// far away from the call site to work, this method will be used to make a
comment|/// thunk for it.  The stub should be "close" to the current function body,
comment|/// but should not be included in the 'actualsize' returned by
comment|/// startFunctionBody.
name|virtual
name|uint8_t
operator|*
name|allocateStub
argument_list|(
argument|const GlobalValue* F
argument_list|,
argument|unsigned StubSize
argument_list|,
argument|unsigned Alignment
argument_list|)
operator|=
literal|0
block|;
comment|/// endFunctionBody - This method is called when the JIT is done codegen'ing
comment|/// the specified function.  At this point we know the size of the JIT
comment|/// compiled function.  This passes in FunctionStart (which was returned by
comment|/// the startFunctionBody method) and FunctionEnd which is a pointer to the
comment|/// actual end of the function.  This method should mark the space allocated
comment|/// and remember where it is in case the client wants to deallocate it.
name|virtual
name|void
name|endFunctionBody
argument_list|(
specifier|const
name|Function
operator|*
name|F
argument_list|,
name|uint8_t
operator|*
name|FunctionStart
argument_list|,
name|uint8_t
operator|*
name|FunctionEnd
argument_list|)
operator|=
literal|0
block|;
comment|/// allocateSpace - Allocate a memory block of the given size.  This method
comment|/// cannot be called between calls to startFunctionBody and endFunctionBody.
name|virtual
name|uint8_t
operator|*
name|allocateSpace
argument_list|(
argument|intptr_t Size
argument_list|,
argument|unsigned Alignment
argument_list|)
operator|=
literal|0
block|;
comment|/// allocateGlobal - Allocate memory for a global.
name|virtual
name|uint8_t
operator|*
name|allocateGlobal
argument_list|(
argument|uintptr_t Size
argument_list|,
argument|unsigned Alignment
argument_list|)
operator|=
literal|0
block|;
comment|/// deallocateFunctionBody - Free the specified function body.  The argument
comment|/// must be the return value from a call to startFunctionBody() that hasn't
comment|/// been deallocated yet.  This is never called when the JIT is currently
comment|/// emitting a function.
name|virtual
name|void
name|deallocateFunctionBody
argument_list|(
name|void
operator|*
name|Body
argument_list|)
operator|=
literal|0
block|;
comment|/// CheckInvariants - For testing only.  Return true if all internal
comment|/// invariants are preserved, or return false and set ErrorStr to a helpful
comment|/// error message.
name|virtual
name|bool
name|CheckInvariants
argument_list|(
argument|std::string&
argument_list|)
block|{
return|return
name|true
return|;
block|}
comment|/// GetDefaultCodeSlabSize - For testing only.  Returns DefaultCodeSlabSize
comment|/// from DefaultJITMemoryManager.
name|virtual
name|size_t
name|GetDefaultCodeSlabSize
argument_list|()
block|{
return|return
literal|0
return|;
block|}
comment|/// GetDefaultDataSlabSize - For testing only.  Returns DefaultCodeSlabSize
comment|/// from DefaultJITMemoryManager.
name|virtual
name|size_t
name|GetDefaultDataSlabSize
argument_list|()
block|{
return|return
literal|0
return|;
block|}
comment|/// GetDefaultStubSlabSize - For testing only.  Returns DefaultCodeSlabSize
comment|/// from DefaultJITMemoryManager.
name|virtual
name|size_t
name|GetDefaultStubSlabSize
argument_list|()
block|{
return|return
literal|0
return|;
block|}
comment|/// GetNumCodeSlabs - For testing only.  Returns the number of MemoryBlocks
comment|/// allocated for code.
name|virtual
name|unsigned
name|GetNumCodeSlabs
argument_list|()
block|{
return|return
literal|0
return|;
block|}
comment|/// GetNumDataSlabs - For testing only.  Returns the number of MemoryBlocks
comment|/// allocated for data.
name|virtual
name|unsigned
name|GetNumDataSlabs
argument_list|()
block|{
return|return
literal|0
return|;
block|}
comment|/// GetNumStubSlabs - For testing only.  Returns the number of MemoryBlocks
comment|/// allocated for function stubs.
name|virtual
name|unsigned
name|GetNumStubSlabs
argument_list|()
block|{
return|return
literal|0
return|;
block|}
expr|}
block|;  }
end_decl_stmt

begin_comment
comment|// end namespace llvm.
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

