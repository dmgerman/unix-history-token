begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- llvm/ExecutionEngine/Orc/RPCSerialization.h --------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_EXECUTIONENGINE_ORC_RPCSERIALIZATION_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_EXECUTIONENGINE_ORC_RPCSERIALIZATION_H
end_define

begin_include
include|#
directive|include
file|"OrcError.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/thread.h"
end_include

begin_include
include|#
directive|include
file|<mutex>
end_include

begin_include
include|#
directive|include
file|<sstream>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|orc
block|{
name|namespace
name|rpc
block|{
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|RPCTypeName
expr_stmt|;
comment|/// TypeNameSequence is a utility for rendering sequences of types to a string
comment|/// by rendering each type, separated by ", ".
name|template
operator|<
name|typename
operator|...
name|ArgTs
operator|>
name|class
name|RPCTypeNameSequence
block|{}
expr_stmt|;
comment|/// Render an empty TypeNameSequence to an ostream.
name|template
operator|<
name|typename
name|OStream
operator|>
name|OStream
operator|&
name|operator
operator|<<
operator|(
name|OStream
operator|&
name|OS
operator|,
specifier|const
name|RPCTypeNameSequence
operator|<
operator|>
operator|&
name|V
operator|)
block|{
return|return
name|OS
return|;
block|}
comment|/// Render a TypeNameSequence of a single type to an ostream.
name|template
operator|<
name|typename
name|OStream
operator|,
name|typename
name|ArgT
operator|>
name|OStream
operator|&
name|operator
operator|<<
operator|(
name|OStream
operator|&
name|OS
operator|,
specifier|const
name|RPCTypeNameSequence
operator|<
name|ArgT
operator|>
operator|&
name|V
operator|)
block|{
name|OS
operator|<<
name|RPCTypeName
operator|<
name|ArgT
operator|>
operator|::
name|getName
argument_list|()
block|;
return|return
name|OS
return|;
block|}
comment|/// Render a TypeNameSequence of more than one type to an ostream.
name|template
operator|<
name|typename
name|OStream
operator|,
name|typename
name|ArgT1
operator|,
name|typename
name|ArgT2
operator|,
name|typename
operator|...
name|ArgTs
operator|>
name|OStream
operator|&
name|operator
operator|<<
operator|(
name|OStream
operator|&
name|OS
operator|,
specifier|const
name|RPCTypeNameSequence
operator|<
name|ArgT1
operator|,
name|ArgT2
operator|,
name|ArgTs
operator|...
operator|>
operator|&
name|V
operator|)
block|{
name|OS
operator|<<
name|RPCTypeName
operator|<
name|ArgT1
operator|>
operator|::
name|getName
argument_list|()
operator|<<
literal|", "
operator|<<
name|RPCTypeNameSequence
operator|<
name|ArgT2
block|,
name|ArgTs
operator|...
operator|>
operator|(
operator|)
block|;
return|return
name|OS
return|;
block|}
name|template
operator|<
operator|>
name|class
name|RPCTypeName
operator|<
name|void
operator|>
block|{
name|public
operator|:
specifier|static
specifier|const
name|char
operator|*
name|getName
argument_list|()
block|{
return|return
literal|"void"
return|;
block|}
expr|}
block|;
name|template
operator|<
operator|>
name|class
name|RPCTypeName
operator|<
name|int8_t
operator|>
block|{
name|public
operator|:
specifier|static
specifier|const
name|char
operator|*
name|getName
argument_list|()
block|{
return|return
literal|"int8_t"
return|;
block|}
expr|}
block|;
name|template
operator|<
operator|>
name|class
name|RPCTypeName
operator|<
name|uint8_t
operator|>
block|{
name|public
operator|:
specifier|static
specifier|const
name|char
operator|*
name|getName
argument_list|()
block|{
return|return
literal|"uint8_t"
return|;
block|}
expr|}
block|;
name|template
operator|<
operator|>
name|class
name|RPCTypeName
operator|<
name|int16_t
operator|>
block|{
name|public
operator|:
specifier|static
specifier|const
name|char
operator|*
name|getName
argument_list|()
block|{
return|return
literal|"int16_t"
return|;
block|}
expr|}
block|;
name|template
operator|<
operator|>
name|class
name|RPCTypeName
operator|<
name|uint16_t
operator|>
block|{
name|public
operator|:
specifier|static
specifier|const
name|char
operator|*
name|getName
argument_list|()
block|{
return|return
literal|"uint16_t"
return|;
block|}
expr|}
block|;
name|template
operator|<
operator|>
name|class
name|RPCTypeName
operator|<
name|int32_t
operator|>
block|{
name|public
operator|:
specifier|static
specifier|const
name|char
operator|*
name|getName
argument_list|()
block|{
return|return
literal|"int32_t"
return|;
block|}
expr|}
block|;
name|template
operator|<
operator|>
name|class
name|RPCTypeName
operator|<
name|uint32_t
operator|>
block|{
name|public
operator|:
specifier|static
specifier|const
name|char
operator|*
name|getName
argument_list|()
block|{
return|return
literal|"uint32_t"
return|;
block|}
expr|}
block|;
name|template
operator|<
operator|>
name|class
name|RPCTypeName
operator|<
name|int64_t
operator|>
block|{
name|public
operator|:
specifier|static
specifier|const
name|char
operator|*
name|getName
argument_list|()
block|{
return|return
literal|"int64_t"
return|;
block|}
expr|}
block|;
name|template
operator|<
operator|>
name|class
name|RPCTypeName
operator|<
name|uint64_t
operator|>
block|{
name|public
operator|:
specifier|static
specifier|const
name|char
operator|*
name|getName
argument_list|()
block|{
return|return
literal|"uint64_t"
return|;
block|}
expr|}
block|;
name|template
operator|<
operator|>
name|class
name|RPCTypeName
operator|<
name|bool
operator|>
block|{
name|public
operator|:
specifier|static
specifier|const
name|char
operator|*
name|getName
argument_list|()
block|{
return|return
literal|"bool"
return|;
block|}
expr|}
block|;
name|template
operator|<
operator|>
name|class
name|RPCTypeName
operator|<
name|std
operator|::
name|string
operator|>
block|{
name|public
operator|:
specifier|static
specifier|const
name|char
operator|*
name|getName
argument_list|()
block|{
return|return
literal|"std::string"
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|T1
block|,
name|typename
name|T2
operator|>
name|class
name|RPCTypeName
operator|<
name|std
operator|::
name|pair
operator|<
name|T1
block|,
name|T2
operator|>>
block|{
name|public
operator|:
specifier|static
specifier|const
name|char
operator|*
name|getName
argument_list|()
block|{
name|std
operator|::
name|lock_guard
operator|<
name|std
operator|::
name|mutex
operator|>
name|Lock
argument_list|(
name|NameMutex
argument_list|)
block|;
if|if
condition|(
name|Name
operator|.
name|empty
argument_list|()
condition|)
name|raw_string_ostream
argument_list|(
name|Name
argument_list|)
operator|<<
literal|"std::pair<"
operator|<<
name|RPCTypeNameSequence
operator|<
name|T1
operator|,
name|T2
operator|>
operator|(
operator|)
operator|<<
literal|">"
expr_stmt|;
return|return
name|Name
operator|.
name|data
argument_list|()
return|;
block|}
name|private
operator|:
specifier|static
name|std
operator|::
name|mutex
name|NameMutex
block|;
specifier|static
name|std
operator|::
name|string
name|Name
block|; }
block|;
name|template
operator|<
name|typename
name|T1
block|,
name|typename
name|T2
operator|>
name|std
operator|::
name|mutex
name|RPCTypeName
operator|<
name|std
operator|::
name|pair
operator|<
name|T1
block|,
name|T2
operator|>>
operator|::
name|NameMutex
block|;
name|template
operator|<
name|typename
name|T1
block|,
name|typename
name|T2
operator|>
name|std
operator|::
name|string
name|RPCTypeName
operator|<
name|std
operator|::
name|pair
operator|<
name|T1
block|,
name|T2
operator|>>
operator|::
name|Name
block|;
name|template
operator|<
name|typename
operator|...
name|ArgTs
operator|>
name|class
name|RPCTypeName
operator|<
name|std
operator|::
name|tuple
operator|<
name|ArgTs
operator|...
operator|>>
block|{
name|public
operator|:
specifier|static
specifier|const
name|char
operator|*
name|getName
argument_list|()
block|{
name|std
operator|::
name|lock_guard
operator|<
name|std
operator|::
name|mutex
operator|>
name|Lock
argument_list|(
name|NameMutex
argument_list|)
block|;
if|if
condition|(
name|Name
operator|.
name|empty
argument_list|()
condition|)
name|raw_string_ostream
argument_list|(
name|Name
argument_list|)
operator|<<
literal|"std::tuple<"
operator|<<
name|RPCTypeNameSequence
operator|<
name|ArgTs
operator|...
operator|>
operator|(
operator|)
operator|<<
literal|">"
expr_stmt|;
return|return
name|Name
operator|.
name|data
argument_list|()
return|;
block|}
name|private
operator|:
specifier|static
name|std
operator|::
name|mutex
name|NameMutex
block|;
specifier|static
name|std
operator|::
name|string
name|Name
block|; }
block|;
name|template
operator|<
name|typename
operator|...
name|ArgTs
operator|>
name|std
operator|::
name|mutex
name|RPCTypeName
operator|<
name|std
operator|::
name|tuple
operator|<
name|ArgTs
operator|...
operator|>>
operator|::
name|NameMutex
block|;
name|template
operator|<
name|typename
operator|...
name|ArgTs
operator|>
name|std
operator|::
name|string
name|RPCTypeName
operator|<
name|std
operator|::
name|tuple
operator|<
name|ArgTs
operator|...
operator|>>
operator|::
name|Name
block|;
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|RPCTypeName
operator|<
name|std
operator|::
name|vector
operator|<
name|T
operator|>>
block|{
name|public
operator|:
specifier|static
specifier|const
name|char
operator|*
name|getName
argument_list|()
block|{
name|std
operator|::
name|lock_guard
operator|<
name|std
operator|::
name|mutex
operator|>
name|Lock
argument_list|(
name|NameMutex
argument_list|)
block|;
if|if
condition|(
name|Name
operator|.
name|empty
argument_list|()
condition|)
name|raw_string_ostream
argument_list|(
name|Name
argument_list|)
operator|<<
literal|"std::vector<"
operator|<<
name|RPCTypeName
operator|<
name|T
operator|>
operator|::
name|getName
argument_list|()
operator|<<
literal|">"
expr_stmt|;
return|return
name|Name
operator|.
name|data
argument_list|()
return|;
block|}
name|private
operator|:
specifier|static
name|std
operator|::
name|mutex
name|NameMutex
block|;
specifier|static
name|std
operator|::
name|string
name|Name
block|; }
block|;
name|template
operator|<
name|typename
name|T
operator|>
name|std
operator|::
name|mutex
name|RPCTypeName
operator|<
name|std
operator|::
name|vector
operator|<
name|T
operator|>>
operator|::
name|NameMutex
block|;
name|template
operator|<
name|typename
name|T
operator|>
name|std
operator|::
name|string
name|RPCTypeName
operator|<
name|std
operator|::
name|vector
operator|<
name|T
operator|>>
operator|::
name|Name
block|;
comment|/// The SerializationTraits<ChannelT, T> class describes how to serialize and
comment|/// deserialize an instance of type T to/from an abstract channel of type
comment|/// ChannelT. It also provides a representation of the type's name via the
comment|/// getName method.
comment|///
comment|/// Specializations of this class should provide the following functions:
comment|///
comment|///   @code{.cpp}
comment|///
comment|///   static const char* getName();
comment|///   static Error serialize(ChannelT&, const T&);
comment|///   static Error deserialize(ChannelT&, T&);
comment|///
comment|///   @endcode
comment|///
comment|/// The third argument of SerializationTraits is intended to support SFINAE.
comment|/// E.g.:
comment|///
comment|///   @code{.cpp}
comment|///
comment|///   class MyVirtualChannel { ... };
comment|///
comment|///   template<DerivedChannelT>
comment|///   class SerializationTraits<DerivedChannelT, bool,
comment|///         typename std::enable_if<
comment|///           std::is_base_of<VirtChannel, DerivedChannel>::value
comment|///>::type> {
comment|///   public:
comment|///     static const char* getName() { ... };
comment|///   }
comment|///
comment|///   @endcode
name|template
operator|<
name|typename
name|ChannelT
block|,
name|typename
name|WireType
block|,
name|typename
name|ConcreteType
operator|=
name|WireType
block|,
name|typename
operator|=
name|void
operator|>
name|class
name|SerializationTraits
block|;
name|template
operator|<
name|typename
name|ChannelT
operator|>
name|class
name|SequenceTraits
block|{
name|public
operator|:
specifier|static
name|Error
name|emitSeparator
argument_list|(
argument|ChannelT&C
argument_list|)
block|{
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
specifier|static
name|Error
name|consumeSeparator
argument_list|(
argument|ChannelT&C
argument_list|)
block|{
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
expr|}
block|;
comment|/// Utility class for serializing sequences of values of varying types.
comment|/// Specializations of this class contain 'serialize' and 'deserialize' methods
comment|/// for the given channel. The ArgTs... list will determine the "over-the-wire"
comment|/// types to be serialized. The serialize and deserialize methods take a list
comment|/// CArgTs... ("caller arg types") which must be the same length as ArgTs...,
comment|/// but may be different types from ArgTs, provided that for each CArgT there
comment|/// is a SerializationTraits specialization
comment|/// SerializeTraits<ChannelT, ArgT, CArgT> with methods that can serialize the
comment|/// caller argument to over-the-wire value.
name|template
operator|<
name|typename
name|ChannelT
block|,
name|typename
operator|...
name|ArgTs
operator|>
name|class
name|SequenceSerialization
block|;
name|template
operator|<
name|typename
name|ChannelT
operator|>
name|class
name|SequenceSerialization
operator|<
name|ChannelT
operator|>
block|{
name|public
operator|:
specifier|static
name|Error
name|serialize
argument_list|(
argument|ChannelT&C
argument_list|)
block|{
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
specifier|static
name|Error
name|deserialize
argument_list|(
argument|ChannelT&C
argument_list|)
block|{
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|ChannelT
block|,
name|typename
name|ArgT
operator|>
name|class
name|SequenceSerialization
operator|<
name|ChannelT
block|,
name|ArgT
operator|>
block|{
name|public
operator|:
name|template
operator|<
name|typename
name|CArgT
operator|>
specifier|static
name|Error
name|serialize
argument_list|(
argument|ChannelT&C
argument_list|,
argument|const CArgT&CArg
argument_list|)
block|{
return|return
name|SerializationTraits
operator|<
name|ChannelT
operator|,
name|ArgT
operator|,
name|CArgT
operator|>
operator|::
name|serialize
argument_list|(
name|C
argument_list|,
name|CArg
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|CArgT
operator|>
specifier|static
name|Error
name|deserialize
argument_list|(
argument|ChannelT&C
argument_list|,
argument|CArgT&CArg
argument_list|)
block|{
return|return
name|SerializationTraits
operator|<
name|ChannelT
operator|,
name|ArgT
operator|,
name|CArgT
operator|>
operator|::
name|deserialize
argument_list|(
name|C
argument_list|,
name|CArg
argument_list|)
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|ChannelT
block|,
name|typename
name|ArgT
block|,
name|typename
operator|...
name|ArgTs
operator|>
name|class
name|SequenceSerialization
operator|<
name|ChannelT
block|,
name|ArgT
block|,
name|ArgTs
operator|...
operator|>
block|{
name|public
operator|:
name|template
operator|<
name|typename
name|CArgT
block|,
name|typename
operator|...
name|CArgTs
operator|>
specifier|static
name|Error
name|serialize
argument_list|(
argument|ChannelT&C
argument_list|,
argument|const CArgT&CArg
argument_list|,
argument|const CArgTs&... CArgs
argument_list|)
block|{
if|if
condition|(
name|auto
name|Err
init|=
name|SerializationTraits
operator|<
name|ChannelT
condition|,
name|ArgT
condition|,
name|CArgT
decl|>::
name|serialize
argument_list|(
name|C
argument_list|,
name|CArg
argument_list|)
condition|)       return Err;
if|if
condition|(
name|auto
name|Err
init|=
name|SequenceTraits
operator|<
name|ChannelT
operator|>
operator|::
name|emitSeparator
argument_list|(
name|C
argument_list|)
condition|)
return|return
name|Err
return|;
return|return
name|SequenceSerialization
operator|<
name|ChannelT
operator|,
name|ArgTs
operator|...
operator|>
operator|::
name|serialize
argument_list|(
name|C
argument_list|,
name|CArgs
operator|...
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|CArgT
block|,
name|typename
operator|...
name|CArgTs
operator|>
specifier|static
name|Error
name|deserialize
argument_list|(
argument|ChannelT&C
argument_list|,
argument|CArgT&CArg
argument_list|,
argument|CArgTs&... CArgs
argument_list|)
block|{
if|if
condition|(
name|auto
name|Err
init|=
name|SerializationTraits
operator|<
name|ChannelT
condition|,
name|ArgT
condition|,
name|CArgT
decl|>::
name|deserialize
argument_list|(
name|C
argument_list|,
name|CArg
argument_list|)
condition|)       return Err;
if|if
condition|(
name|auto
name|Err
init|=
name|SequenceTraits
operator|<
name|ChannelT
operator|>
operator|::
name|consumeSeparator
argument_list|(
name|C
argument_list|)
condition|)
return|return
name|Err
return|;
return|return
name|SequenceSerialization
operator|<
name|ChannelT
operator|,
name|ArgTs
operator|...
operator|>
operator|::
name|deserialize
argument_list|(
name|C
argument_list|,
name|CArgs
operator|...
argument_list|)
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|ChannelT
block|,
name|typename
operator|...
name|ArgTs
operator|>
name|Error
name|serializeSeq
argument_list|(
argument|ChannelT&C
argument_list|,
argument|const ArgTs&... Args
argument_list|)
block|{
return|return
name|SequenceSerialization
operator|<
name|ChannelT
operator|,
name|ArgTs
operator|...
operator|>
operator|::
name|serialize
argument_list|(
name|C
argument_list|,
name|Args
operator|...
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|ChannelT
block|,
name|typename
operator|...
name|ArgTs
operator|>
name|Error
name|deserializeSeq
argument_list|(
argument|ChannelT&C
argument_list|,
argument|ArgTs&... Args
argument_list|)
block|{
return|return
name|SequenceSerialization
operator|<
name|ChannelT
operator|,
name|ArgTs
operator|...
operator|>
operator|::
name|deserialize
argument_list|(
name|C
argument_list|,
name|Args
operator|...
argument_list|)
return|;
block|}
comment|/// SerializationTraits default specialization for std::pair.
name|template
operator|<
name|typename
name|ChannelT
block|,
name|typename
name|T1
block|,
name|typename
name|T2
operator|>
name|class
name|SerializationTraits
operator|<
name|ChannelT
block|,
name|std
operator|::
name|pair
operator|<
name|T1
block|,
name|T2
operator|>>
block|{
name|public
operator|:
specifier|static
name|Error
name|serialize
argument_list|(
argument|ChannelT&C
argument_list|,
argument|const std::pair<T1
argument_list|,
argument|T2>&V
argument_list|)
block|{
return|return
name|serializeSeq
argument_list|(
name|C
argument_list|,
name|V
operator|.
name|first
argument_list|,
name|V
operator|.
name|second
argument_list|)
return|;
block|}
specifier|static
name|Error
name|deserialize
argument_list|(
argument|ChannelT&C
argument_list|,
argument|std::pair<T1
argument_list|,
argument|T2>&V
argument_list|)
block|{
return|return
name|deserializeSeq
argument_list|(
name|C
argument_list|,
name|V
operator|.
name|first
argument_list|,
name|V
operator|.
name|second
argument_list|)
return|;
block|}
expr|}
block|;
comment|/// SerializationTraits default specialization for std::tuple.
name|template
operator|<
name|typename
name|ChannelT
block|,
name|typename
operator|...
name|ArgTs
operator|>
name|class
name|SerializationTraits
operator|<
name|ChannelT
block|,
name|std
operator|::
name|tuple
operator|<
name|ArgTs
operator|...
operator|>>
block|{
name|public
operator|:
comment|/// RPC channel serialization for std::tuple.
specifier|static
name|Error
name|serialize
argument_list|(
argument|ChannelT&C
argument_list|,
argument|const std::tuple<ArgTs...>&V
argument_list|)
block|{
return|return
name|serializeTupleHelper
argument_list|(
name|C
argument_list|,
name|V
argument_list|,
name|llvm
operator|::
name|index_sequence_for
operator|<
name|ArgTs
operator|...
operator|>
operator|(
operator|)
argument_list|)
return|;
block|}
comment|/// RPC channel deserialization for std::tuple.
specifier|static
name|Error
name|deserialize
argument_list|(
argument|ChannelT&C
argument_list|,
argument|std::tuple<ArgTs...>&V
argument_list|)
block|{
return|return
name|deserializeTupleHelper
argument_list|(
name|C
argument_list|,
name|V
argument_list|,
name|llvm
operator|::
name|index_sequence_for
operator|<
name|ArgTs
operator|...
operator|>
operator|(
operator|)
argument_list|)
return|;
block|}
name|private
operator|:
comment|// Serialization helper for std::tuple.
name|template
operator|<
name|size_t
operator|...
name|Is
operator|>
specifier|static
name|Error
name|serializeTupleHelper
argument_list|(
argument|ChannelT&C
argument_list|,
argument|const std::tuple<ArgTs...>&V
argument_list|,
argument|llvm::index_sequence<Is...> _
argument_list|)
block|{
return|return
name|serializeSeq
argument_list|(
name|C
argument_list|,
name|std
operator|::
name|get
operator|<
name|Is
operator|>
operator|(
name|V
operator|)
operator|...
argument_list|)
return|;
block|}
comment|// Serialization helper for std::tuple.
name|template
operator|<
name|size_t
operator|...
name|Is
operator|>
specifier|static
name|Error
name|deserializeTupleHelper
argument_list|(
argument|ChannelT&C
argument_list|,
argument|std::tuple<ArgTs...>&V
argument_list|,
argument|llvm::index_sequence<Is...> _
argument_list|)
block|{
return|return
name|deserializeSeq
argument_list|(
name|C
argument_list|,
name|std
operator|::
name|get
operator|<
name|Is
operator|>
operator|(
name|V
operator|)
operator|...
argument_list|)
return|;
block|}
expr|}
block|;
comment|/// SerializationTraits default specialization for std::vector.
name|template
operator|<
name|typename
name|ChannelT
block|,
name|typename
name|T
operator|>
name|class
name|SerializationTraits
operator|<
name|ChannelT
block|,
name|std
operator|::
name|vector
operator|<
name|T
operator|>>
block|{
name|public
operator|:
comment|/// Serialize a std::vector<T> from std::vector<T>.
specifier|static
name|Error
name|serialize
argument_list|(
argument|ChannelT&C
argument_list|,
argument|const std::vector<T>&V
argument_list|)
block|{
if|if
condition|(
name|auto
name|Err
init|=
name|serializeSeq
argument_list|(
name|C
argument_list|,
name|static_cast
operator|<
name|uint64_t
operator|>
operator|(
name|V
operator|.
name|size
argument_list|()
operator|)
argument_list|)
condition|)
return|return
name|Err
return|;
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|E
range|:
name|V
control|)
if|if
condition|(
name|auto
name|Err
init|=
name|serializeSeq
argument_list|(
name|C
argument_list|,
name|E
argument_list|)
condition|)
return|return
name|Err
return|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
comment|/// Deserialize a std::vector<T> to a std::vector<T>.
specifier|static
name|Error
name|deserialize
argument_list|(
argument|ChannelT&C
argument_list|,
argument|std::vector<T>&V
argument_list|)
block|{
name|uint64_t
name|Count
operator|=
literal|0
block|;
if|if
condition|(
name|auto
name|Err
init|=
name|deserializeSeq
argument_list|(
name|C
argument_list|,
name|Count
argument_list|)
condition|)
return|return
name|Err
return|;
name|V
operator|.
name|resize
argument_list|(
name|Count
argument_list|)
block|;
for|for
control|(
name|auto
operator|&
name|E
operator|:
name|V
control|)
if|if
condition|(
name|auto
name|Err
init|=
name|deserializeSeq
argument_list|(
name|C
argument_list|,
name|E
argument_list|)
condition|)
return|return
name|Err
return|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
expr|}
block|;  }
comment|// end namespace rpc
block|}
comment|// end namespace orc
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_EXECUTIONENGINE_ORC_RPCSERIALIZATION_H
end_comment

end_unit

