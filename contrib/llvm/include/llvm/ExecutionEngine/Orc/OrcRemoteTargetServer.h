begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===---- OrcRemoteTargetServer.h - Orc Remote-target Server ----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines the OrcRemoteTargetServer class. It can be used to build a
end_comment

begin_comment
comment|// JIT server that can execute code sent from an OrcRemoteTargetClient.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_EXECUTIONENGINE_ORC_ORCREMOTETARGETSERVER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_EXECUTIONENGINE_ORC_ORCREMOTETARGETSERVER_H
end_define

begin_include
include|#
directive|include
file|"OrcRemoteTargetRPCAPI.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ExecutionEngine/RTDyldMemoryManager.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Debug.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Format.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Process.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/raw_ostream.h"
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_define
define|#
directive|define
name|DEBUG_TYPE
value|"orc-remote"
end_define

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|orc
block|{
name|namespace
name|remote
block|{
name|template
operator|<
name|typename
name|ChannelT
operator|,
name|typename
name|TargetT
operator|>
name|class
name|OrcRemoteTargetServer
operator|:
name|public
name|OrcRemoteTargetRPCAPI
block|{
name|public
operator|:
typedef|typedef
name|std
operator|::
name|function
operator|<
name|TargetAddress
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
argument_list|)
operator|>
name|SymbolLookupFtor
expr_stmt|;
typedef|typedef
name|std
operator|::
name|function
operator|<
name|void
argument_list|(
argument|uint8_t *Addr
argument_list|,
argument|uint32_t Size
argument_list|)
operator|>
name|EHFrameRegistrationFtor
expr_stmt|;
name|OrcRemoteTargetServer
argument_list|(
argument|ChannelT&Channel
argument_list|,
argument|SymbolLookupFtor SymbolLookup
argument_list|,
argument|EHFrameRegistrationFtor EHFramesRegister
argument_list|,
argument|EHFrameRegistrationFtor EHFramesDeregister
argument_list|)
block|:
name|Channel
argument_list|(
name|Channel
argument_list|)
operator|,
name|SymbolLookup
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|SymbolLookup
argument_list|)
argument_list|)
operator|,
name|EHFramesRegister
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|EHFramesRegister
argument_list|)
argument_list|)
operator|,
name|EHFramesDeregister
argument_list|(
argument|std::move(EHFramesDeregister)
argument_list|)
block|{}
comment|// FIXME: Remove move/copy ops once MSVC supports synthesizing move ops.
name|OrcRemoteTargetServer
argument_list|(
specifier|const
name|OrcRemoteTargetServer
operator|&
argument_list|)
operator|=
name|delete
expr_stmt|;
name|OrcRemoteTargetServer
modifier|&
name|operator
init|=
operator|(
specifier|const
name|OrcRemoteTargetServer
operator|&
operator|)
operator|=
name|delete
decl_stmt|;
name|OrcRemoteTargetServer
argument_list|(
name|OrcRemoteTargetServer
operator|&&
name|Other
argument_list|)
operator|:
name|Channel
argument_list|(
name|Other
operator|.
name|Channel
argument_list|)
operator|,
name|SymbolLookup
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|Other
operator|.
name|SymbolLookup
argument_list|)
argument_list|)
operator|,
name|EHFramesRegister
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|Other
operator|.
name|EHFramesRegister
argument_list|)
argument_list|)
operator|,
name|EHFramesDeregister
argument_list|(
argument|std::move(Other.EHFramesDeregister)
argument_list|)
block|{}
name|OrcRemoteTargetServer
operator|&
name|operator
operator|=
operator|(
name|OrcRemoteTargetServer
operator|&&
operator|)
operator|=
name|delete
expr_stmt|;
name|Error
name|handleKnownFunction
parameter_list|(
name|JITFuncId
name|Id
parameter_list|)
block|{
typedef|typedef
name|OrcRemoteTargetServer
name|ThisT
typedef|;
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"Handling known proc: "
operator|<<
name|getJITFuncIdName
argument_list|(
name|Id
argument_list|)
operator|<<
literal|"\n"
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|Id
condition|)
block|{
case|case
name|CallIntVoidId
case|:
return|return
name|handle
operator|<
name|CallIntVoid
operator|>
operator|(
name|Channel
operator|,
operator|*
name|this
operator|,
operator|&
name|ThisT
operator|::
name|handleCallIntVoid
operator|)
return|;
case|case
name|CallMainId
case|:
return|return
name|handle
operator|<
name|CallMain
operator|>
operator|(
name|Channel
operator|,
operator|*
name|this
operator|,
operator|&
name|ThisT
operator|::
name|handleCallMain
operator|)
return|;
case|case
name|CallVoidVoidId
case|:
return|return
name|handle
operator|<
name|CallVoidVoid
operator|>
operator|(
name|Channel
operator|,
operator|*
name|this
operator|,
operator|&
name|ThisT
operator|::
name|handleCallVoidVoid
operator|)
return|;
case|case
name|CreateRemoteAllocatorId
case|:
return|return
name|handle
operator|<
name|CreateRemoteAllocator
operator|>
operator|(
name|Channel
operator|,
operator|*
name|this
operator|,
operator|&
name|ThisT
operator|::
name|handleCreateRemoteAllocator
operator|)
return|;
case|case
name|CreateIndirectStubsOwnerId
case|:
return|return
name|handle
operator|<
name|CreateIndirectStubsOwner
operator|>
operator|(
name|Channel
operator|,
operator|*
name|this
operator|,
operator|&
name|ThisT
operator|::
name|handleCreateIndirectStubsOwner
operator|)
return|;
case|case
name|DeregisterEHFramesId
case|:
return|return
name|handle
operator|<
name|DeregisterEHFrames
operator|>
operator|(
name|Channel
operator|,
operator|*
name|this
operator|,
operator|&
name|ThisT
operator|::
name|handleDeregisterEHFrames
operator|)
return|;
case|case
name|DestroyRemoteAllocatorId
case|:
return|return
name|handle
operator|<
name|DestroyRemoteAllocator
operator|>
operator|(
name|Channel
operator|,
operator|*
name|this
operator|,
operator|&
name|ThisT
operator|::
name|handleDestroyRemoteAllocator
operator|)
return|;
case|case
name|DestroyIndirectStubsOwnerId
case|:
return|return
name|handle
operator|<
name|DestroyIndirectStubsOwner
operator|>
operator|(
name|Channel
operator|,
operator|*
name|this
operator|,
operator|&
name|ThisT
operator|::
name|handleDestroyIndirectStubsOwner
operator|)
return|;
case|case
name|EmitIndirectStubsId
case|:
return|return
name|handle
operator|<
name|EmitIndirectStubs
operator|>
operator|(
name|Channel
operator|,
operator|*
name|this
operator|,
operator|&
name|ThisT
operator|::
name|handleEmitIndirectStubs
operator|)
return|;
case|case
name|EmitResolverBlockId
case|:
return|return
name|handle
operator|<
name|EmitResolverBlock
operator|>
operator|(
name|Channel
operator|,
operator|*
name|this
operator|,
operator|&
name|ThisT
operator|::
name|handleEmitResolverBlock
operator|)
return|;
case|case
name|EmitTrampolineBlockId
case|:
return|return
name|handle
operator|<
name|EmitTrampolineBlock
operator|>
operator|(
name|Channel
operator|,
operator|*
name|this
operator|,
operator|&
name|ThisT
operator|::
name|handleEmitTrampolineBlock
operator|)
return|;
case|case
name|GetSymbolAddressId
case|:
return|return
name|handle
operator|<
name|GetSymbolAddress
operator|>
operator|(
name|Channel
operator|,
operator|*
name|this
operator|,
operator|&
name|ThisT
operator|::
name|handleGetSymbolAddress
operator|)
return|;
case|case
name|GetRemoteInfoId
case|:
return|return
name|handle
operator|<
name|GetRemoteInfo
operator|>
operator|(
name|Channel
operator|,
operator|*
name|this
operator|,
operator|&
name|ThisT
operator|::
name|handleGetRemoteInfo
operator|)
return|;
case|case
name|ReadMemId
case|:
return|return
name|handle
operator|<
name|ReadMem
operator|>
operator|(
name|Channel
operator|,
operator|*
name|this
operator|,
operator|&
name|ThisT
operator|::
name|handleReadMem
operator|)
return|;
case|case
name|RegisterEHFramesId
case|:
return|return
name|handle
operator|<
name|RegisterEHFrames
operator|>
operator|(
name|Channel
operator|,
operator|*
name|this
operator|,
operator|&
name|ThisT
operator|::
name|handleRegisterEHFrames
operator|)
return|;
case|case
name|ReserveMemId
case|:
return|return
name|handle
operator|<
name|ReserveMem
operator|>
operator|(
name|Channel
operator|,
operator|*
name|this
operator|,
operator|&
name|ThisT
operator|::
name|handleReserveMem
operator|)
return|;
case|case
name|SetProtectionsId
case|:
return|return
name|handle
operator|<
name|SetProtections
operator|>
operator|(
name|Channel
operator|,
operator|*
name|this
operator|,
operator|&
name|ThisT
operator|::
name|handleSetProtections
operator|)
return|;
case|case
name|WriteMemId
case|:
return|return
name|handle
operator|<
name|WriteMem
operator|>
operator|(
name|Channel
operator|,
operator|*
name|this
operator|,
operator|&
name|ThisT
operator|::
name|handleWriteMem
operator|)
return|;
case|case
name|WritePtrId
case|:
return|return
name|handle
operator|<
name|WritePtr
operator|>
operator|(
name|Channel
operator|,
operator|*
name|this
operator|,
operator|&
name|ThisT
operator|::
name|handleWritePtr
operator|)
return|;
default|default:
return|return
name|orcError
argument_list|(
name|OrcErrorCode
operator|::
name|UnexpectedRPCCall
argument_list|)
return|;
block|}
name|llvm_unreachable
argument_list|(
literal|"Unhandled JIT RPC procedure Id."
argument_list|)
expr_stmt|;
block|}
name|Expected
operator|<
name|TargetAddress
operator|>
name|requestCompile
argument_list|(
argument|TargetAddress TrampolineAddr
argument_list|)
block|{
name|auto
name|Listen
operator|=
index|[
operator|&
index|]
operator|(
name|RPCChannel
operator|&
name|C
operator|,
name|uint32_t
name|Id
operator|)
block|{
return|return
name|handleKnownFunction
argument_list|(
name|static_cast
operator|<
name|JITFuncId
operator|>
operator|(
name|Id
operator|)
argument_list|)
return|;
block|}
block|;
return|return
name|callSTHandling
operator|<
name|RequestCompile
operator|>
operator|(
name|Channel
operator|,
name|Listen
operator|,
name|TrampolineAddr
operator|)
return|;
block|}
name|Error
name|handleTerminateSession
parameter_list|()
block|{
return|return
name|handle
operator|<
name|TerminateSession
operator|>
operator|(
name|Channel
operator|,
index|[]
operator|(
operator|)
block|{
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
block|)
function|;
block|}
name|private
label|:
struct|struct
name|Allocator
block|{
name|Allocator
argument_list|()
operator|=
expr|default
expr_stmt|;
name|Allocator
argument_list|(
name|Allocator
operator|&&
name|Other
argument_list|)
operator|:
name|Allocs
argument_list|(
argument|std::move(Other.Allocs)
argument_list|)
block|{}
name|Allocator
operator|&
name|operator
operator|=
operator|(
name|Allocator
operator|&&
name|Other
operator|)
block|{
name|Allocs
operator|=
name|std
operator|::
name|move
argument_list|(
name|Other
operator|.
name|Allocs
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
operator|~
name|Allocator
argument_list|()
block|{
for|for
control|(
name|auto
operator|&
name|Alloc
operator|:
name|Allocs
control|)
name|sys
operator|::
name|Memory
operator|::
name|releaseMappedMemory
argument_list|(
name|Alloc
operator|.
name|second
argument_list|)
expr_stmt|;
block|}
name|Error
name|allocate
parameter_list|(
name|void
modifier|*
modifier|&
name|Addr
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|uint32_t
name|Align
parameter_list|)
block|{
name|std
operator|::
name|error_code
name|EC
expr_stmt|;
name|sys
operator|::
name|MemoryBlock
name|MB
operator|=
name|sys
operator|::
name|Memory
operator|::
name|allocateMappedMemory
argument_list|(
name|Size
argument_list|,
name|nullptr
argument_list|,
name|sys
operator|::
name|Memory
operator|::
name|MF_READ
operator||
name|sys
operator|::
name|Memory
operator|::
name|MF_WRITE
argument_list|,
name|EC
argument_list|)
expr_stmt|;
if|if
condition|(
name|EC
condition|)
return|return
name|errorCodeToError
argument_list|(
name|EC
argument_list|)
return|;
name|Addr
operator|=
name|MB
operator|.
name|base
argument_list|()
expr_stmt|;
name|assert
argument_list|(
name|Allocs
operator|.
name|find
argument_list|(
name|MB
operator|.
name|base
argument_list|()
argument_list|)
operator|==
name|Allocs
operator|.
name|end
argument_list|()
operator|&&
literal|"Duplicate alloc"
argument_list|)
expr_stmt|;
name|Allocs
index|[
name|MB
operator|.
name|base
argument_list|()
index|]
operator|=
name|std
operator|::
name|move
argument_list|(
name|MB
argument_list|)
expr_stmt|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
name|Error
name|setProtections
parameter_list|(
name|void
modifier|*
name|block
parameter_list|,
name|unsigned
name|Flags
parameter_list|)
block|{
name|auto
name|I
init|=
name|Allocs
operator|.
name|find
argument_list|(
name|block
argument_list|)
decl_stmt|;
if|if
condition|(
name|I
operator|==
name|Allocs
operator|.
name|end
argument_list|()
condition|)
return|return
name|orcError
argument_list|(
name|OrcErrorCode
operator|::
name|RemoteMProtectAddrUnrecognized
argument_list|)
return|;
return|return
name|errorCodeToError
argument_list|(
name|sys
operator|::
name|Memory
operator|::
name|protectMappedMemory
argument_list|(
name|I
operator|->
name|second
argument_list|,
name|Flags
argument_list|)
argument_list|)
return|;
block|}
name|private
label|:
name|std
operator|::
name|map
operator|<
name|void
operator|*
operator|,
name|sys
operator|::
name|MemoryBlock
operator|>
name|Allocs
expr_stmt|;
block|}
struct|;
specifier|static
name|Error
name|doNothing
parameter_list|()
block|{
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
specifier|static
name|TargetAddress
name|reenter
parameter_list|(
name|void
modifier|*
name|JITTargetAddr
parameter_list|,
name|void
modifier|*
name|TrampolineAddr
parameter_list|)
block|{
name|auto
name|T
init|=
name|static_cast
operator|<
name|OrcRemoteTargetServer
operator|*
operator|>
operator|(
name|JITTargetAddr
operator|)
decl_stmt|;
name|auto
name|AddrOrErr
init|=
name|T
operator|->
name|requestCompile
argument_list|(
name|static_cast
operator|<
name|TargetAddress
operator|>
operator|(
name|reinterpret_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|TrampolineAddr
operator|)
operator|)
argument_list|)
decl_stmt|;
comment|// FIXME: Allow customizable failure substitution functions.
name|assert
argument_list|(
name|AddrOrErr
operator|&&
literal|"Compile request failed"
argument_list|)
expr_stmt|;
return|return
operator|*
name|AddrOrErr
return|;
block|}
name|Expected
operator|<
name|int32_t
operator|>
name|handleCallIntVoid
argument_list|(
argument|TargetAddress Addr
argument_list|)
block|{
typedef|typedef
name|int
function_decl|(
modifier|*
name|IntVoidFnTy
function_decl|)
parameter_list|()
function_decl|;
name|IntVoidFnTy
name|Fn
operator|=
name|reinterpret_cast
operator|<
name|IntVoidFnTy
operator|>
operator|(
name|static_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|Addr
operator|)
operator|)
expr_stmt|;
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"  Calling "
operator|<<
name|format
argument_list|(
literal|"0x%016x"
argument_list|,
name|Addr
argument_list|)
operator|<<
literal|"\n"
argument_list|)
expr_stmt|;
name|int
name|Result
init|=
name|Fn
argument_list|()
decl_stmt|;
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"  Result = "
operator|<<
name|Result
operator|<<
literal|"\n"
argument_list|)
expr_stmt|;
return|return
name|Result
return|;
block|}
name|Expected
operator|<
name|int32_t
operator|>
name|handleCallMain
argument_list|(
argument|TargetAddress Addr
argument_list|,
argument|std::vector<std::string> Args
argument_list|)
block|{
typedef|typedef
name|int
function_decl|(
modifier|*
name|MainFnTy
function_decl|)
parameter_list|(
name|int
parameter_list|,
specifier|const
name|char
modifier|*
type|[]
parameter_list|)
function_decl|;
name|MainFnTy
name|Fn
operator|=
name|reinterpret_cast
operator|<
name|MainFnTy
operator|>
operator|(
name|static_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|Addr
operator|)
operator|)
expr_stmt|;
name|int
name|ArgC
init|=
name|Args
operator|.
name|size
argument_list|()
operator|+
literal|1
decl_stmt|;
name|int
name|Idx
init|=
literal|1
decl_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
specifier|const
name|char
operator|*
index|[]
operator|>
name|ArgV
argument_list|(
name|new
specifier|const
name|char
operator|*
index|[
name|ArgC
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|ArgV
index|[
literal|0
index|]
operator|=
literal|"<jit process>"
expr_stmt|;
for|for
control|(
name|auto
operator|&
name|Arg
operator|:
name|Args
control|)
name|ArgV
index|[
name|Idx
operator|++
index|]
operator|=
name|Arg
operator|.
name|c_str
argument_list|()
expr_stmt|;
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"  Calling "
operator|<<
name|format
argument_list|(
literal|"0x%016x"
argument_list|,
name|Addr
argument_list|)
operator|<<
literal|"\n"
argument_list|)
expr_stmt|;
name|int
name|Result
init|=
name|Fn
argument_list|(
name|ArgC
argument_list|,
name|ArgV
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"  Result = "
operator|<<
name|Result
operator|<<
literal|"\n"
argument_list|)
expr_stmt|;
return|return
name|Result
return|;
block|}
end_decl_stmt

begin_function
name|Error
name|handleCallVoidVoid
parameter_list|(
name|TargetAddress
name|Addr
parameter_list|)
block|{
typedef|typedef
name|void
function_decl|(
modifier|*
name|VoidVoidFnTy
function_decl|)
parameter_list|()
function_decl|;
name|VoidVoidFnTy
name|Fn
init|=
name|reinterpret_cast
operator|<
name|VoidVoidFnTy
operator|>
operator|(
name|static_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|Addr
operator|)
operator|)
decl_stmt|;
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"  Calling "
operator|<<
name|format
argument_list|(
literal|"0x%016x"
argument_list|,
name|Addr
argument_list|)
operator|<<
literal|"\n"
argument_list|)
expr_stmt|;
name|Fn
argument_list|()
expr_stmt|;
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"  Complete.\n"
argument_list|)
expr_stmt|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
end_function

begin_decl_stmt
name|Error
name|handleCreateRemoteAllocator
argument_list|(
name|ResourceIdMgr
operator|::
name|ResourceId
name|Id
argument_list|)
block|{
name|auto
name|I
init|=
name|Allocators
operator|.
name|find
argument_list|(
name|Id
argument_list|)
decl_stmt|;
if|if
condition|(
name|I
operator|!=
name|Allocators
operator|.
name|end
argument_list|()
condition|)
return|return
name|orcError
argument_list|(
name|OrcErrorCode
operator|::
name|RemoteAllocatorIdAlreadyInUse
argument_list|)
return|;
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"  Created allocator "
operator|<<
name|Id
operator|<<
literal|"\n"
argument_list|)
expr_stmt|;
name|Allocators
index|[
name|Id
index|]
operator|=
name|Allocator
argument_list|()
expr_stmt|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|Error
name|handleCreateIndirectStubsOwner
argument_list|(
name|ResourceIdMgr
operator|::
name|ResourceId
name|Id
argument_list|)
block|{
name|auto
name|I
init|=
name|IndirectStubsOwners
operator|.
name|find
argument_list|(
name|Id
argument_list|)
decl_stmt|;
if|if
condition|(
name|I
operator|!=
name|IndirectStubsOwners
operator|.
name|end
argument_list|()
condition|)
return|return
name|orcError
argument_list|(
name|OrcErrorCode
operator|::
name|RemoteIndirectStubsOwnerIdAlreadyInUse
argument_list|)
return|;
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"  Create indirect stubs owner "
operator|<<
name|Id
operator|<<
literal|"\n"
argument_list|)
expr_stmt|;
name|IndirectStubsOwners
index|[
name|Id
index|]
operator|=
name|ISBlockOwnerList
argument_list|()
expr_stmt|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
end_decl_stmt

begin_function
name|Error
name|handleDeregisterEHFrames
parameter_list|(
name|TargetAddress
name|TAddr
parameter_list|,
name|uint32_t
name|Size
parameter_list|)
block|{
name|uint8_t
modifier|*
name|Addr
init|=
name|reinterpret_cast
operator|<
name|uint8_t
operator|*
operator|>
operator|(
name|static_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|TAddr
operator|)
operator|)
decl_stmt|;
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"  Registering EH frames at "
operator|<<
name|format
argument_list|(
literal|"0x%016x"
argument_list|,
name|TAddr
argument_list|)
operator|<<
literal|", Size = "
operator|<<
name|Size
operator|<<
literal|" bytes\n"
argument_list|)
expr_stmt|;
name|EHFramesDeregister
argument_list|(
name|Addr
argument_list|,
name|Size
argument_list|)
expr_stmt|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
end_function

begin_decl_stmt
name|Error
name|handleDestroyRemoteAllocator
argument_list|(
name|ResourceIdMgr
operator|::
name|ResourceId
name|Id
argument_list|)
block|{
name|auto
name|I
init|=
name|Allocators
operator|.
name|find
argument_list|(
name|Id
argument_list|)
decl_stmt|;
if|if
condition|(
name|I
operator|==
name|Allocators
operator|.
name|end
argument_list|()
condition|)
return|return
name|orcError
argument_list|(
name|OrcErrorCode
operator|::
name|RemoteAllocatorDoesNotExist
argument_list|)
return|;
name|Allocators
operator|.
name|erase
argument_list|(
name|I
argument_list|)
expr_stmt|;
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"  Destroyed allocator "
operator|<<
name|Id
operator|<<
literal|"\n"
argument_list|)
expr_stmt|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|Error
name|handleDestroyIndirectStubsOwner
argument_list|(
name|ResourceIdMgr
operator|::
name|ResourceId
name|Id
argument_list|)
block|{
name|auto
name|I
init|=
name|IndirectStubsOwners
operator|.
name|find
argument_list|(
name|Id
argument_list|)
decl_stmt|;
if|if
condition|(
name|I
operator|==
name|IndirectStubsOwners
operator|.
name|end
argument_list|()
condition|)
return|return
name|orcError
argument_list|(
name|OrcErrorCode
operator|::
name|RemoteIndirectStubsOwnerDoesNotExist
argument_list|)
return|;
name|IndirectStubsOwners
operator|.
name|erase
argument_list|(
name|I
argument_list|)
expr_stmt|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|Expected
operator|<
name|std
operator|::
name|tuple
operator|<
name|TargetAddress
operator|,
name|TargetAddress
operator|,
name|uint32_t
operator|>>
name|handleEmitIndirectStubs
argument_list|(
argument|ResourceIdMgr::ResourceId Id
argument_list|,
argument|uint32_t NumStubsRequired
argument_list|)
block|{
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"  ISMgr "
operator|<<
name|Id
operator|<<
literal|" request "
operator|<<
name|NumStubsRequired
operator|<<
literal|" stubs.\n"
argument_list|)
block|;
name|auto
name|StubOwnerItr
operator|=
name|IndirectStubsOwners
operator|.
name|find
argument_list|(
name|Id
argument_list|)
block|;
if|if
condition|(
name|StubOwnerItr
operator|==
name|IndirectStubsOwners
operator|.
name|end
argument_list|()
condition|)
return|return
name|orcError
argument_list|(
name|OrcErrorCode
operator|::
name|RemoteIndirectStubsOwnerDoesNotExist
argument_list|)
return|;
name|typename
name|TargetT
operator|::
name|IndirectStubsInfo
name|IS
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|auto
name|Err
init|=
name|TargetT
operator|::
name|emitIndirectStubsBlock
argument_list|(
name|IS
argument_list|,
name|NumStubsRequired
argument_list|,
name|nullptr
argument_list|)
condition|)
return|return
name|std
operator|::
name|move
argument_list|(
name|Err
argument_list|)
return|;
end_if

begin_decl_stmt
name|TargetAddress
name|StubsBase
init|=
name|static_cast
operator|<
name|TargetAddress
operator|>
operator|(
name|reinterpret_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|IS
operator|.
name|getStub
argument_list|(
literal|0
argument_list|)
operator|)
operator|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|TargetAddress
name|PtrsBase
init|=
name|static_cast
operator|<
name|TargetAddress
operator|>
operator|(
name|reinterpret_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|IS
operator|.
name|getPtr
argument_list|(
literal|0
argument_list|)
operator|)
operator|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uint32_t
name|NumStubsEmitted
init|=
name|IS
operator|.
name|getNumStubs
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|auto
operator|&
name|BlockList
operator|=
name|StubOwnerItr
operator|->
name|second
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|BlockList
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|IS
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|std
operator|::
name|make_tuple
argument_list|(
name|StubsBase
argument_list|,
name|PtrsBase
argument_list|,
name|NumStubsEmitted
argument_list|)
return|;
end_return

begin_macro
unit|}    Error
name|handleEmitResolverBlock
argument_list|()
end_macro

begin_block
block|{
name|std
operator|::
name|error_code
name|EC
expr_stmt|;
name|ResolverBlock
operator|=
name|sys
operator|::
name|OwningMemoryBlock
argument_list|(
name|sys
operator|::
name|Memory
operator|::
name|allocateMappedMemory
argument_list|(
name|TargetT
operator|::
name|ResolverCodeSize
argument_list|,
name|nullptr
argument_list|,
name|sys
operator|::
name|Memory
operator|::
name|MF_READ
operator||
name|sys
operator|::
name|Memory
operator|::
name|MF_WRITE
argument_list|,
name|EC
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|EC
condition|)
return|return
name|errorCodeToError
argument_list|(
name|EC
argument_list|)
return|;
name|TargetT
operator|::
name|writeResolverCode
argument_list|(
name|static_cast
operator|<
name|uint8_t
operator|*
operator|>
operator|(
name|ResolverBlock
operator|.
name|base
argument_list|()
operator|)
argument_list|,
operator|&
name|reenter
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
name|errorCodeToError
argument_list|(
name|sys
operator|::
name|Memory
operator|::
name|protectMappedMemory
argument_list|(
name|ResolverBlock
operator|.
name|getMemoryBlock
argument_list|()
argument_list|,
name|sys
operator|::
name|Memory
operator|::
name|MF_READ
operator||
name|sys
operator|::
name|Memory
operator|::
name|MF_EXEC
argument_list|)
argument_list|)
return|;
block|}
end_block

begin_expr_stmt
name|Expected
operator|<
name|std
operator|::
name|tuple
operator|<
name|TargetAddress
operator|,
name|uint32_t
operator|>>
name|handleEmitTrampolineBlock
argument_list|()
block|{
name|std
operator|::
name|error_code
name|EC
block|;
name|auto
name|TrampolineBlock
operator|=
name|sys
operator|::
name|OwningMemoryBlock
argument_list|(
name|sys
operator|::
name|Memory
operator|::
name|allocateMappedMemory
argument_list|(
name|sys
operator|::
name|Process
operator|::
name|getPageSize
argument_list|()
argument_list|,
name|nullptr
argument_list|,
name|sys
operator|::
name|Memory
operator|::
name|MF_READ
operator||
name|sys
operator|::
name|Memory
operator|::
name|MF_WRITE
argument_list|,
name|EC
argument_list|)
argument_list|)
block|;
if|if
condition|(
name|EC
condition|)
return|return
name|errorCodeToError
argument_list|(
name|EC
argument_list|)
return|;
name|uint32_t
name|NumTrampolines
operator|=
operator|(
name|sys
operator|::
name|Process
operator|::
name|getPageSize
argument_list|()
operator|-
name|TargetT
operator|::
name|PointerSize
operator|)
operator|/
name|TargetT
operator|::
name|TrampolineSize
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|uint8_t
modifier|*
name|TrampolineMem
init|=
name|static_cast
operator|<
name|uint8_t
operator|*
operator|>
operator|(
name|TrampolineBlock
operator|.
name|base
argument_list|()
operator|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|TargetT
operator|::
name|writeTrampolines
argument_list|(
name|TrampolineMem
argument_list|,
name|ResolverBlock
operator|.
name|base
argument_list|()
argument_list|,
name|NumTrampolines
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|EC
operator|=
name|sys
operator|::
name|Memory
operator|::
name|protectMappedMemory
argument_list|(
name|TrampolineBlock
operator|.
name|getMemoryBlock
argument_list|()
argument_list|,
name|sys
operator|::
name|Memory
operator|::
name|MF_READ
operator||
name|sys
operator|::
name|Memory
operator|::
name|MF_EXEC
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|TrampolineBlocks
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|TrampolineBlock
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|auto
name|TrampolineBaseAddr
init|=
name|static_cast
operator|<
name|TargetAddress
operator|>
operator|(
name|reinterpret_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|TrampolineMem
operator|)
operator|)
decl_stmt|;
end_decl_stmt

begin_return
return|return
name|std
operator|::
name|make_tuple
argument_list|(
name|TrampolineBaseAddr
argument_list|,
name|NumTrampolines
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}    Expected
operator|<
name|TargetAddress
operator|>
name|handleGetSymbolAddress
argument_list|(
argument|const std::string&Name
argument_list|)
block|{
name|TargetAddress
name|Addr
operator|=
name|SymbolLookup
argument_list|(
name|Name
argument_list|)
block|;
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"  Symbol '"
operator|<<
name|Name
operator|<<
literal|"' =  "
operator|<<
name|format
argument_list|(
literal|"0x%016x"
argument_list|,
name|Addr
argument_list|)
operator|<<
literal|"\n"
argument_list|)
block|;
return|return
name|Addr
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|Expected
operator|<
name|std
operator|::
name|tuple
operator|<
name|std
operator|::
name|string
operator|,
name|uint32_t
operator|,
name|uint32_t
operator|,
name|uint32_t
operator|,
name|uint32_t
operator|>>
name|handleGetRemoteInfo
argument_list|()
block|{
name|std
operator|::
name|string
name|ProcessTriple
operator|=
name|sys
operator|::
name|getProcessTriple
argument_list|()
block|;
name|uint32_t
name|PointerSize
operator|=
name|TargetT
operator|::
name|PointerSize
block|;
name|uint32_t
name|PageSize
operator|=
name|sys
operator|::
name|Process
operator|::
name|getPageSize
argument_list|()
block|;
name|uint32_t
name|TrampolineSize
operator|=
name|TargetT
operator|::
name|TrampolineSize
block|;
name|uint32_t
name|IndirectStubSize
operator|=
name|TargetT
operator|::
name|IndirectStubsInfo
operator|::
name|StubSize
block|;
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"  Remote info:\n"
operator|<<
literal|"    triple             = '"
operator|<<
name|ProcessTriple
operator|<<
literal|"'\n"
operator|<<
literal|"    pointer size       = "
operator|<<
name|PointerSize
operator|<<
literal|"\n"
operator|<<
literal|"    page size          = "
operator|<<
name|PageSize
operator|<<
literal|"\n"
operator|<<
literal|"    trampoline size    = "
operator|<<
name|TrampolineSize
operator|<<
literal|"\n"
operator|<<
literal|"    indirect stub size = "
operator|<<
name|IndirectStubSize
operator|<<
literal|"\n"
argument_list|)
block|;
return|return
name|std
operator|::
name|make_tuple
argument_list|(
name|ProcessTriple
argument_list|,
name|PointerSize
argument_list|,
name|PageSize
argument_list|,
name|TrampolineSize
argument_list|,
name|IndirectStubSize
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|Expected
operator|<
name|std
operator|::
name|vector
operator|<
name|char
operator|>>
name|handleReadMem
argument_list|(
argument|TargetAddress RSrc
argument_list|,
argument|uint64_t Size
argument_list|)
block|{
name|char
operator|*
name|Src
operator|=
name|reinterpret_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|static_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|RSrc
operator|)
operator|)
block|;
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"  Reading "
operator|<<
name|Size
operator|<<
literal|" bytes from "
operator|<<
name|format
argument_list|(
literal|"0x%016x"
argument_list|,
name|RSrc
argument_list|)
operator|<<
literal|"\n"
argument_list|)
block|;
name|std
operator|::
name|vector
operator|<
name|char
operator|>
name|Buffer
block|;
name|Buffer
operator|.
name|resize
argument_list|(
name|Size
argument_list|)
block|;
for|for
control|(
name|char
modifier|*
name|P
init|=
name|Src
init|;
name|Size
operator|!=
literal|0
condition|;
operator|--
name|Size
control|)
name|Buffer
operator|.
name|push_back
argument_list|(
operator|*
name|P
operator|++
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|Buffer
return|;
end_return

begin_macro
unit|}    Error
name|handleRegisterEHFrames
argument_list|(
argument|TargetAddress TAddr
argument_list|,
argument|uint32_t Size
argument_list|)
end_macro

begin_block
block|{
name|uint8_t
modifier|*
name|Addr
init|=
name|reinterpret_cast
operator|<
name|uint8_t
operator|*
operator|>
operator|(
name|static_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|TAddr
operator|)
operator|)
decl_stmt|;
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"  Registering EH frames at "
operator|<<
name|format
argument_list|(
literal|"0x%016x"
argument_list|,
name|TAddr
argument_list|)
operator|<<
literal|", Size = "
operator|<<
name|Size
operator|<<
literal|" bytes\n"
argument_list|)
expr_stmt|;
name|EHFramesRegister
argument_list|(
name|Addr
argument_list|,
name|Size
argument_list|)
expr_stmt|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
end_block

begin_expr_stmt
name|Expected
operator|<
name|TargetAddress
operator|>
name|handleReserveMem
argument_list|(
argument|ResourceIdMgr::ResourceId Id
argument_list|,
argument|uint64_t Size
argument_list|,
argument|uint32_t Align
argument_list|)
block|{
name|auto
name|I
operator|=
name|Allocators
operator|.
name|find
argument_list|(
name|Id
argument_list|)
block|;
if|if
condition|(
name|I
operator|==
name|Allocators
operator|.
name|end
argument_list|()
condition|)
return|return
name|orcError
argument_list|(
name|OrcErrorCode
operator|::
name|RemoteAllocatorDoesNotExist
argument_list|)
return|;
name|auto
operator|&
name|Allocator
operator|=
name|I
operator|->
name|second
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
modifier|*
name|LocalAllocAddr
init|=
name|nullptr
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|auto
name|Err
init|=
name|Allocator
operator|.
name|allocate
argument_list|(
name|LocalAllocAddr
argument_list|,
name|Size
argument_list|,
name|Align
argument_list|)
condition|)
return|return
name|std
operator|::
name|move
argument_list|(
name|Err
argument_list|)
return|;
end_if

begin_expr_stmt
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"  Allocator "
operator|<<
name|Id
operator|<<
literal|" reserved "
operator|<<
name|LocalAllocAddr
operator|<<
literal|" ("
operator|<<
name|Size
operator|<<
literal|" bytes, alignment "
operator|<<
name|Align
operator|<<
literal|")\n"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|TargetAddress
name|AllocAddr
init|=
name|static_cast
operator|<
name|TargetAddress
operator|>
operator|(
name|reinterpret_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|LocalAllocAddr
operator|)
operator|)
decl_stmt|;
end_decl_stmt

begin_return
return|return
name|AllocAddr
return|;
end_return

begin_macro
unit|}    Error
name|handleSetProtections
argument_list|(
argument|ResourceIdMgr::ResourceId Id
argument_list|,
argument|TargetAddress Addr
argument_list|,
argument|uint32_t Flags
argument_list|)
end_macro

begin_block
block|{
name|auto
name|I
init|=
name|Allocators
operator|.
name|find
argument_list|(
name|Id
argument_list|)
decl_stmt|;
if|if
condition|(
name|I
operator|==
name|Allocators
operator|.
name|end
argument_list|()
condition|)
return|return
name|orcError
argument_list|(
name|OrcErrorCode
operator|::
name|RemoteAllocatorDoesNotExist
argument_list|)
return|;
name|auto
operator|&
name|Allocator
operator|=
name|I
operator|->
name|second
expr_stmt|;
name|void
modifier|*
name|LocalAddr
init|=
name|reinterpret_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|static_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|Addr
operator|)
operator|)
decl_stmt|;
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"  Allocator "
operator|<<
name|Id
operator|<<
literal|" set permissions on "
operator|<<
name|LocalAddr
operator|<<
literal|" to "
operator|<<
operator|(
name|Flags
operator|&
name|sys
operator|::
name|Memory
operator|::
name|MF_READ
condition|?
literal|'R'
else|:
literal|'-'
operator|)
operator|<<
operator|(
name|Flags
operator|&
name|sys
operator|::
name|Memory
operator|::
name|MF_WRITE
condition|?
literal|'W'
else|:
literal|'-'
operator|)
operator|<<
operator|(
name|Flags
operator|&
name|sys
operator|::
name|Memory
operator|::
name|MF_EXEC
condition|?
literal|'X'
else|:
literal|'-'
operator|)
operator|<<
literal|"\n"
argument_list|)
expr_stmt|;
return|return
name|Allocator
operator|.
name|setProtections
argument_list|(
name|LocalAddr
argument_list|,
name|Flags
argument_list|)
return|;
block|}
end_block

begin_function
name|Error
name|handleWriteMem
parameter_list|(
name|DirectBufferWriter
name|DBW
parameter_list|)
block|{
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"  Writing "
operator|<<
name|DBW
operator|.
name|getSize
argument_list|()
operator|<<
literal|" bytes to "
operator|<<
name|format
argument_list|(
literal|"0x%016x"
argument_list|,
name|DBW
operator|.
name|getDst
argument_list|()
argument_list|)
operator|<<
literal|"\n"
argument_list|)
expr_stmt|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
end_function

begin_function
name|Error
name|handleWritePtr
parameter_list|(
name|TargetAddress
name|Addr
parameter_list|,
name|TargetAddress
name|PtrVal
parameter_list|)
block|{
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"  Writing pointer *"
operator|<<
name|format
argument_list|(
literal|"0x%016x"
argument_list|,
name|Addr
argument_list|)
operator|<<
literal|" = "
operator|<<
name|format
argument_list|(
literal|"0x%016x"
argument_list|,
name|PtrVal
argument_list|)
operator|<<
literal|"\n"
argument_list|)
expr_stmt|;
name|uintptr_t
modifier|*
name|Ptr
init|=
name|reinterpret_cast
operator|<
name|uintptr_t
operator|*
operator|>
operator|(
name|static_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|Addr
operator|)
operator|)
decl_stmt|;
operator|*
name|Ptr
operator|=
name|static_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|PtrVal
operator|)
expr_stmt|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
end_function

begin_decl_stmt
name|ChannelT
modifier|&
name|Channel
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|SymbolLookupFtor
name|SymbolLookup
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EHFrameRegistrationFtor
name|EHFramesRegister
decl_stmt|,
name|EHFramesDeregister
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|std
operator|::
name|map
operator|<
name|ResourceIdMgr
operator|::
name|ResourceId
operator|,
name|Allocator
operator|>
name|Allocators
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|typename
name|TargetT
operator|::
name|IndirectStubsInfo
operator|>
name|ISBlockOwnerList
expr_stmt|;
end_typedef

begin_expr_stmt
name|std
operator|::
name|map
operator|<
name|ResourceIdMgr
operator|::
name|ResourceId
operator|,
name|ISBlockOwnerList
operator|>
name|IndirectStubsOwners
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|sys
operator|::
name|OwningMemoryBlock
name|ResolverBlock
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|sys
operator|::
name|OwningMemoryBlock
operator|>
name|TrampolineBlocks
expr_stmt|;
end_expr_stmt

begin_comment
unit|};  }
comment|// end namespace remote
end_comment

begin_comment
unit|}
comment|// end namespace orc
end_comment

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_undef
undef|#
directive|undef
name|DEBUG_TYPE
end_undef

begin_endif
endif|#
directive|endif
end_endif

end_unit

