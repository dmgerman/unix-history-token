begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===---- OrcRemoteTargetClient.h - Orc Remote-target Client ----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines the OrcRemoteTargetClient class and helpers. This class
end_comment

begin_comment
comment|// can be used to communicate over an RawByteChannel with an
end_comment

begin_comment
comment|// OrcRemoteTargetServer instance to support remote-JITing.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_EXECUTIONENGINE_ORC_ORCREMOTETARGETCLIENT_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_EXECUTIONENGINE_ORC_ORCREMOTETARGETCLIENT_H
end_define

begin_include
include|#
directive|include
file|"IndirectionUtils.h"
end_include

begin_include
include|#
directive|include
file|"OrcRemoteTargetRPCAPI.h"
end_include

begin_include
include|#
directive|include
file|<system_error>
end_include

begin_define
define|#
directive|define
name|DEBUG_TYPE
value|"orc-remote"
end_define

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|orc
block|{
name|namespace
name|remote
block|{
comment|/// This class provides utilities (including memory manager, indirect stubs
comment|/// manager, and compile callback manager types) that support remote JITing
comment|/// in ORC.
comment|///
comment|/// Each of the utility classes talks to a JIT server (an instance of the
comment|/// OrcRemoteTargetServer class) via an RPC system (see RPCUtils.h) to carry out
comment|/// its actions.
name|template
operator|<
name|typename
name|ChannelT
operator|>
name|class
name|OrcRemoteTargetClient
operator|:
name|public
name|OrcRemoteTargetRPCAPI
block|{
name|public
operator|:
comment|/// Remote memory manager.
name|class
name|RCMemoryManager
operator|:
name|public
name|RuntimeDyld
operator|::
name|MemoryManager
block|{
name|public
operator|:
name|RCMemoryManager
argument_list|(
argument|OrcRemoteTargetClient&Client
argument_list|,
argument|ResourceIdMgr::ResourceId Id
argument_list|)
operator|:
name|Client
argument_list|(
name|Client
argument_list|)
block|,
name|Id
argument_list|(
argument|Id
argument_list|)
block|{
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"Created remote allocator "
operator|<<
name|Id
operator|<<
literal|"\n"
argument_list|)
block|;     }
name|RCMemoryManager
argument_list|(
specifier|const
name|RCMemoryManager
operator|&
argument_list|)
operator|=
name|delete
block|;
name|RCMemoryManager
operator|&
name|operator
operator|=
operator|(
specifier|const
name|RCMemoryManager
operator|&
operator|)
operator|=
name|delete
block|;
name|RCMemoryManager
argument_list|(
name|RCMemoryManager
operator|&&
argument_list|)
operator|=
expr|default
block|;
name|RCMemoryManager
operator|&
name|operator
operator|=
operator|(
name|RCMemoryManager
operator|&&
operator|)
operator|=
expr|default
block|;
operator|~
name|RCMemoryManager
argument_list|()
name|override
block|{
name|Client
operator|.
name|destroyRemoteAllocator
argument_list|(
name|Id
argument_list|)
block|;
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"Destroyed remote allocator "
operator|<<
name|Id
operator|<<
literal|"\n"
argument_list|)
block|;     }
name|uint8_t
operator|*
name|allocateCodeSection
argument_list|(
argument|uintptr_t Size
argument_list|,
argument|unsigned Alignment
argument_list|,
argument|unsigned SectionID
argument_list|,
argument|StringRef SectionName
argument_list|)
name|override
block|{
name|Unmapped
operator|.
name|back
argument_list|()
operator|.
name|CodeAllocs
operator|.
name|emplace_back
argument_list|(
name|Size
argument_list|,
name|Alignment
argument_list|)
block|;
name|uint8_t
operator|*
name|Alloc
operator|=
name|reinterpret_cast
operator|<
name|uint8_t
operator|*
operator|>
operator|(
name|Unmapped
operator|.
name|back
argument_list|()
operator|.
name|CodeAllocs
operator|.
name|back
argument_list|()
operator|.
name|getLocalAddress
argument_list|()
operator|)
block|;
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"Allocator "
operator|<<
name|Id
operator|<<
literal|" allocated code for "
operator|<<
name|SectionName
operator|<<
literal|": "
operator|<<
name|Alloc
operator|<<
literal|" ("
operator|<<
name|Size
operator|<<
literal|" bytes, alignment "
operator|<<
name|Alignment
operator|<<
literal|")\n"
argument_list|)
block|;
return|return
name|Alloc
return|;
block|}
name|uint8_t
operator|*
name|allocateDataSection
argument_list|(
argument|uintptr_t Size
argument_list|,
argument|unsigned Alignment
argument_list|,
argument|unsigned SectionID
argument_list|,
argument|StringRef SectionName
argument_list|,
argument|bool IsReadOnly
argument_list|)
name|override
block|{
if|if
condition|(
name|IsReadOnly
condition|)
block|{
name|Unmapped
operator|.
name|back
argument_list|()
operator|.
name|RODataAllocs
operator|.
name|emplace_back
argument_list|(
name|Size
argument_list|,
name|Alignment
argument_list|)
expr_stmt|;
name|uint8_t
modifier|*
name|Alloc
init|=
name|reinterpret_cast
operator|<
name|uint8_t
operator|*
operator|>
operator|(
name|Unmapped
operator|.
name|back
argument_list|()
operator|.
name|RODataAllocs
operator|.
name|back
argument_list|()
operator|.
name|getLocalAddress
argument_list|()
operator|)
decl_stmt|;
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"Allocator "
operator|<<
name|Id
operator|<<
literal|" allocated ro-data for "
operator|<<
name|SectionName
operator|<<
literal|": "
operator|<<
name|Alloc
operator|<<
literal|" ("
operator|<<
name|Size
operator|<<
literal|" bytes, alignment "
operator|<<
name|Alignment
operator|<<
literal|")\n"
argument_list|)
expr_stmt|;
return|return
name|Alloc
return|;
block|}
comment|// else...
name|Unmapped
operator|.
name|back
argument_list|()
operator|.
name|RWDataAllocs
operator|.
name|emplace_back
argument_list|(
name|Size
argument_list|,
name|Alignment
argument_list|)
expr_stmt|;
name|uint8_t
operator|*
name|Alloc
operator|=
name|reinterpret_cast
operator|<
name|uint8_t
operator|*
operator|>
operator|(
name|Unmapped
operator|.
name|back
argument_list|()
operator|.
name|RWDataAllocs
operator|.
name|back
argument_list|()
operator|.
name|getLocalAddress
argument_list|()
operator|)
block|;
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"Allocator "
operator|<<
name|Id
operator|<<
literal|" allocated rw-data for "
operator|<<
name|SectionName
operator|<<
literal|": "
operator|<<
name|Alloc
operator|<<
literal|" ("
operator|<<
name|Size
operator|<<
literal|" bytes, alignment "
operator|<<
name|Alignment
operator|<<
literal|")\n"
argument_list|)
block|;
return|return
name|Alloc
return|;
block|}
name|void
name|reserveAllocationSpace
argument_list|(
argument|uintptr_t CodeSize
argument_list|,
argument|uint32_t CodeAlign
argument_list|,
argument|uintptr_t RODataSize
argument_list|,
argument|uint32_t RODataAlign
argument_list|,
argument|uintptr_t RWDataSize
argument_list|,
argument|uint32_t RWDataAlign
argument_list|)
name|override
block|{
name|Unmapped
operator|.
name|push_back
argument_list|(
name|ObjectAllocs
argument_list|()
argument_list|)
block|;
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"Allocator "
operator|<<
name|Id
operator|<<
literal|" reserved:\n"
argument_list|)
block|;
if|if
condition|(
name|CodeSize
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|auto
name|AddrOrErr
init|=
name|Client
operator|.
name|reserveMem
argument_list|(
name|Id
argument_list|,
name|CodeSize
argument_list|,
name|CodeAlign
argument_list|)
condition|)
name|Unmapped
operator|.
name|back
argument_list|()
operator|.
name|RemoteCodeAddr
operator|=
operator|*
name|AddrOrErr
expr_stmt|;
else|else
block|{
comment|// FIXME; Add error to poll.
name|assert
argument_list|(
operator|!
name|AddrOrErr
operator|.
name|takeError
argument_list|()
operator|&&
literal|"Failed reserving remote memory."
argument_list|)
expr_stmt|;
block|}
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"  code: "
operator|<<
name|format
argument_list|(
literal|"0x%016x"
argument_list|,
name|Unmapped
operator|.
name|back
argument_list|()
operator|.
name|RemoteCodeAddr
argument_list|)
operator|<<
literal|" ("
operator|<<
name|CodeSize
operator|<<
literal|" bytes, alignment "
operator|<<
name|CodeAlign
operator|<<
literal|")\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|RODataSize
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|auto
name|AddrOrErr
init|=
name|Client
operator|.
name|reserveMem
argument_list|(
name|Id
argument_list|,
name|RODataSize
argument_list|,
name|RODataAlign
argument_list|)
condition|)
name|Unmapped
operator|.
name|back
argument_list|()
operator|.
name|RemoteRODataAddr
operator|=
operator|*
name|AddrOrErr
expr_stmt|;
else|else
block|{
comment|// FIXME; Add error to poll.
name|assert
argument_list|(
operator|!
name|AddrOrErr
operator|.
name|takeError
argument_list|()
operator|&&
literal|"Failed reserving remote memory."
argument_list|)
expr_stmt|;
block|}
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"  ro-data: "
operator|<<
name|format
argument_list|(
literal|"0x%016x"
argument_list|,
name|Unmapped
operator|.
name|back
argument_list|()
operator|.
name|RemoteRODataAddr
argument_list|)
operator|<<
literal|" ("
operator|<<
name|RODataSize
operator|<<
literal|" bytes, alignment "
operator|<<
name|RODataAlign
operator|<<
literal|")\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|RWDataSize
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|auto
name|AddrOrErr
init|=
name|Client
operator|.
name|reserveMem
argument_list|(
name|Id
argument_list|,
name|RWDataSize
argument_list|,
name|RWDataAlign
argument_list|)
condition|)
name|Unmapped
operator|.
name|back
argument_list|()
operator|.
name|RemoteRWDataAddr
operator|=
operator|*
name|AddrOrErr
expr_stmt|;
else|else
block|{
comment|// FIXME; Add error to poll.
name|assert
argument_list|(
operator|!
name|AddrOrErr
operator|.
name|takeError
argument_list|()
operator|&&
literal|"Failed reserving remote memory."
argument_list|)
expr_stmt|;
block|}
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"  rw-data: "
operator|<<
name|format
argument_list|(
literal|"0x%016x"
argument_list|,
name|Unmapped
operator|.
name|back
argument_list|()
operator|.
name|RemoteRWDataAddr
argument_list|)
operator|<<
literal|" ("
operator|<<
name|RWDataSize
operator|<<
literal|" bytes, alignment "
operator|<<
name|RWDataAlign
operator|<<
literal|")\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|bool
name|needsToReserveAllocationSpace
argument_list|()
name|override
block|{
return|return
name|true
return|;
block|}
name|void
name|registerEHFrames
argument_list|(
argument|uint8_t *Addr
argument_list|,
argument|uint64_t LoadAddr
argument_list|,
argument|size_t Size
argument_list|)
name|override
block|{
name|UnfinalizedEHFrames
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|LoadAddr
argument_list|,
name|static_cast
operator|<
name|uint32_t
operator|>
operator|(
name|Size
operator|)
argument_list|)
argument_list|)
block|;     }
name|void
name|deregisterEHFrames
argument_list|(
argument|uint8_t *Addr
argument_list|,
argument|uint64_t LoadAddr
argument_list|,
argument|size_t Size
argument_list|)
name|override
block|{
name|auto
name|Err
operator|=
name|Client
operator|.
name|deregisterEHFrames
argument_list|(
name|LoadAddr
argument_list|,
name|Size
argument_list|)
block|;
comment|// FIXME: Add error poll.
name|assert
argument_list|(
operator|!
name|Err
operator|&&
literal|"Failed to register remote EH frames."
argument_list|)
block|;
operator|(
name|void
operator|)
name|Err
block|;     }
name|void
name|notifyObjectLoaded
argument_list|(
argument|RuntimeDyld&Dyld
argument_list|,
argument|const object::ObjectFile&Obj
argument_list|)
name|override
block|{
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"Allocator "
operator|<<
name|Id
operator|<<
literal|" applied mappings:\n"
argument_list|)
block|;
for|for
control|(
name|auto
operator|&
name|ObjAllocs
operator|:
name|Unmapped
control|)
block|{
block|{
name|JITTargetAddress
name|NextCodeAddr
init|=
name|ObjAllocs
operator|.
name|RemoteCodeAddr
decl_stmt|;
for|for
control|(
name|auto
operator|&
name|Alloc
operator|:
name|ObjAllocs
operator|.
name|CodeAllocs
control|)
block|{
name|NextCodeAddr
operator|=
name|alignTo
argument_list|(
name|NextCodeAddr
argument_list|,
name|Alloc
operator|.
name|getAlign
argument_list|()
argument_list|)
expr_stmt|;
name|Dyld
operator|.
name|mapSectionAddress
argument_list|(
name|Alloc
operator|.
name|getLocalAddress
argument_list|()
argument_list|,
name|NextCodeAddr
argument_list|)
expr_stmt|;
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"     code: "
operator|<<
name|static_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|Alloc
operator|.
name|getLocalAddress
argument_list|()
operator|)
operator|<<
literal|" -> "
operator|<<
name|format
argument_list|(
literal|"0x%016x"
argument_list|,
name|NextCodeAddr
argument_list|)
operator|<<
literal|"\n"
argument_list|)
expr_stmt|;
name|Alloc
operator|.
name|setRemoteAddress
argument_list|(
name|NextCodeAddr
argument_list|)
expr_stmt|;
name|NextCodeAddr
operator|+=
name|Alloc
operator|.
name|getSize
argument_list|()
expr_stmt|;
block|}
block|}
block|{
name|JITTargetAddress
name|NextRODataAddr
init|=
name|ObjAllocs
operator|.
name|RemoteRODataAddr
decl_stmt|;
for|for
control|(
name|auto
operator|&
name|Alloc
operator|:
name|ObjAllocs
operator|.
name|RODataAllocs
control|)
block|{
name|NextRODataAddr
operator|=
name|alignTo
argument_list|(
name|NextRODataAddr
argument_list|,
name|Alloc
operator|.
name|getAlign
argument_list|()
argument_list|)
expr_stmt|;
name|Dyld
operator|.
name|mapSectionAddress
argument_list|(
name|Alloc
operator|.
name|getLocalAddress
argument_list|()
argument_list|,
name|NextRODataAddr
argument_list|)
expr_stmt|;
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"  ro-data: "
operator|<<
name|static_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|Alloc
operator|.
name|getLocalAddress
argument_list|()
operator|)
operator|<<
literal|" -> "
operator|<<
name|format
argument_list|(
literal|"0x%016x"
argument_list|,
name|NextRODataAddr
argument_list|)
operator|<<
literal|"\n"
argument_list|)
expr_stmt|;
name|Alloc
operator|.
name|setRemoteAddress
argument_list|(
name|NextRODataAddr
argument_list|)
expr_stmt|;
name|NextRODataAddr
operator|+=
name|Alloc
operator|.
name|getSize
argument_list|()
expr_stmt|;
block|}
block|}
block|{
name|JITTargetAddress
name|NextRWDataAddr
init|=
name|ObjAllocs
operator|.
name|RemoteRWDataAddr
decl_stmt|;
for|for
control|(
name|auto
operator|&
name|Alloc
operator|:
name|ObjAllocs
operator|.
name|RWDataAllocs
control|)
block|{
name|NextRWDataAddr
operator|=
name|alignTo
argument_list|(
name|NextRWDataAddr
argument_list|,
name|Alloc
operator|.
name|getAlign
argument_list|()
argument_list|)
expr_stmt|;
name|Dyld
operator|.
name|mapSectionAddress
argument_list|(
name|Alloc
operator|.
name|getLocalAddress
argument_list|()
argument_list|,
name|NextRWDataAddr
argument_list|)
expr_stmt|;
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"  rw-data: "
operator|<<
name|static_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|Alloc
operator|.
name|getLocalAddress
argument_list|()
operator|)
operator|<<
literal|" -> "
operator|<<
name|format
argument_list|(
literal|"0x%016x"
argument_list|,
name|NextRWDataAddr
argument_list|)
operator|<<
literal|"\n"
argument_list|)
expr_stmt|;
name|Alloc
operator|.
name|setRemoteAddress
argument_list|(
name|NextRWDataAddr
argument_list|)
expr_stmt|;
name|NextRWDataAddr
operator|+=
name|Alloc
operator|.
name|getSize
argument_list|()
expr_stmt|;
block|}
block|}
name|Unfinalized
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|ObjAllocs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Unmapped
operator|.
name|clear
argument_list|()
block|;     }
name|bool
name|finalizeMemory
argument_list|(
argument|std::string *ErrMsg = nullptr
argument_list|)
name|override
block|{
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"Allocator "
operator|<<
name|Id
operator|<<
literal|" finalizing:\n"
argument_list|)
block|;
for|for
control|(
name|auto
operator|&
name|ObjAllocs
operator|:
name|Unfinalized
control|)
block|{
for|for
control|(
name|auto
operator|&
name|Alloc
operator|:
name|ObjAllocs
operator|.
name|CodeAllocs
control|)
block|{
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"  copying code: "
operator|<<
name|static_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|Alloc
operator|.
name|getLocalAddress
argument_list|()
operator|)
operator|<<
literal|" -> "
operator|<<
name|format
argument_list|(
literal|"0x%016x"
argument_list|,
name|Alloc
operator|.
name|getRemoteAddress
argument_list|()
argument_list|)
operator|<<
literal|" ("
operator|<<
name|Alloc
operator|.
name|getSize
argument_list|()
operator|<<
literal|" bytes)\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|auto
name|Err
init|=
name|Client
operator|.
name|writeMem
argument_list|(
name|Alloc
operator|.
name|getRemoteAddress
argument_list|()
argument_list|,
name|Alloc
operator|.
name|getLocalAddress
argument_list|()
argument_list|,
name|Alloc
operator|.
name|getSize
argument_list|()
argument_list|)
condition|)
block|{
comment|// FIXME: Replace this once finalizeMemory can return an Error.
name|handleAllErrors
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|Err
argument_list|)
argument_list|,
index|[
operator|&
index|]
operator|(
name|ErrorInfoBase
operator|&
name|EIB
operator|)
block|{
if|if
condition|(
name|ErrMsg
condition|)
block|{
name|raw_string_ostream
name|ErrOut
argument_list|(
operator|*
name|ErrMsg
argument_list|)
decl_stmt|;
name|EIB
operator|.
name|log
argument_list|(
name|ErrOut
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
block|}
if|if
condition|(
name|ObjAllocs
operator|.
name|RemoteCodeAddr
condition|)
block|{
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"  setting R-X permissions on code block: "
operator|<<
name|format
argument_list|(
literal|"0x%016x"
argument_list|,
name|ObjAllocs
operator|.
name|RemoteCodeAddr
argument_list|)
operator|<<
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|auto
name|Err
init|=
name|Client
operator|.
name|setProtections
argument_list|(
name|Id
argument_list|,
name|ObjAllocs
operator|.
name|RemoteCodeAddr
argument_list|,
name|sys
operator|::
name|Memory
operator|::
name|MF_READ
operator||
name|sys
operator|::
name|Memory
operator|::
name|MF_EXEC
argument_list|)
condition|)
block|{
comment|// FIXME: Replace this once finalizeMemory can return an Error.
name|handleAllErrors
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|Err
argument_list|)
argument_list|,
index|[
operator|&
index|]
operator|(
name|ErrorInfoBase
operator|&
name|EIB
operator|)
block|{
if|if
condition|(
name|ErrMsg
condition|)
block|{
name|raw_string_ostream
name|ErrOut
argument_list|(
operator|*
name|ErrMsg
argument_list|)
decl_stmt|;
name|EIB
operator|.
name|log
argument_list|(
name|ErrOut
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
block|}
for|for
control|(
name|auto
operator|&
name|Alloc
operator|:
name|ObjAllocs
operator|.
name|RODataAllocs
control|)
block|{
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"  copying ro-data: "
operator|<<
name|static_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|Alloc
operator|.
name|getLocalAddress
argument_list|()
operator|)
operator|<<
literal|" -> "
operator|<<
name|format
argument_list|(
literal|"0x%016x"
argument_list|,
name|Alloc
operator|.
name|getRemoteAddress
argument_list|()
argument_list|)
operator|<<
literal|" ("
operator|<<
name|Alloc
operator|.
name|getSize
argument_list|()
operator|<<
literal|" bytes)\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|auto
name|Err
init|=
name|Client
operator|.
name|writeMem
argument_list|(
name|Alloc
operator|.
name|getRemoteAddress
argument_list|()
argument_list|,
name|Alloc
operator|.
name|getLocalAddress
argument_list|()
argument_list|,
name|Alloc
operator|.
name|getSize
argument_list|()
argument_list|)
condition|)
block|{
comment|// FIXME: Replace this once finalizeMemory can return an Error.
name|handleAllErrors
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|Err
argument_list|)
argument_list|,
index|[
operator|&
index|]
operator|(
name|ErrorInfoBase
operator|&
name|EIB
operator|)
block|{
if|if
condition|(
name|ErrMsg
condition|)
block|{
name|raw_string_ostream
name|ErrOut
argument_list|(
operator|*
name|ErrMsg
argument_list|)
decl_stmt|;
name|EIB
operator|.
name|log
argument_list|(
name|ErrOut
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
block|}
if|if
condition|(
name|ObjAllocs
operator|.
name|RemoteRODataAddr
condition|)
block|{
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"  setting R-- permissions on ro-data block: "
operator|<<
name|format
argument_list|(
literal|"0x%016x"
argument_list|,
name|ObjAllocs
operator|.
name|RemoteRODataAddr
argument_list|)
operator|<<
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|auto
name|Err
init|=
name|Client
operator|.
name|setProtections
argument_list|(
name|Id
argument_list|,
name|ObjAllocs
operator|.
name|RemoteRODataAddr
argument_list|,
name|sys
operator|::
name|Memory
operator|::
name|MF_READ
argument_list|)
condition|)
block|{
comment|// FIXME: Replace this once finalizeMemory can return an Error.
name|handleAllErrors
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|Err
argument_list|)
argument_list|,
index|[
operator|&
index|]
operator|(
name|ErrorInfoBase
operator|&
name|EIB
operator|)
block|{
if|if
condition|(
name|ErrMsg
condition|)
block|{
name|raw_string_ostream
name|ErrOut
argument_list|(
operator|*
name|ErrMsg
argument_list|)
decl_stmt|;
name|EIB
operator|.
name|log
argument_list|(
name|ErrOut
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
block|}
for|for
control|(
name|auto
operator|&
name|Alloc
operator|:
name|ObjAllocs
operator|.
name|RWDataAllocs
control|)
block|{
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"  copying rw-data: "
operator|<<
name|static_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|Alloc
operator|.
name|getLocalAddress
argument_list|()
operator|)
operator|<<
literal|" -> "
operator|<<
name|format
argument_list|(
literal|"0x%016x"
argument_list|,
name|Alloc
operator|.
name|getRemoteAddress
argument_list|()
argument_list|)
operator|<<
literal|" ("
operator|<<
name|Alloc
operator|.
name|getSize
argument_list|()
operator|<<
literal|" bytes)\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|auto
name|Err
init|=
name|Client
operator|.
name|writeMem
argument_list|(
name|Alloc
operator|.
name|getRemoteAddress
argument_list|()
argument_list|,
name|Alloc
operator|.
name|getLocalAddress
argument_list|()
argument_list|,
name|Alloc
operator|.
name|getSize
argument_list|()
argument_list|)
condition|)
block|{
comment|// FIXME: Replace this once finalizeMemory can return an Error.
name|handleAllErrors
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|Err
argument_list|)
argument_list|,
index|[
operator|&
index|]
operator|(
name|ErrorInfoBase
operator|&
name|EIB
operator|)
block|{
if|if
condition|(
name|ErrMsg
condition|)
block|{
name|raw_string_ostream
name|ErrOut
argument_list|(
operator|*
name|ErrMsg
argument_list|)
decl_stmt|;
name|EIB
operator|.
name|log
argument_list|(
name|ErrOut
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
block|}
if|if
condition|(
name|ObjAllocs
operator|.
name|RemoteRWDataAddr
condition|)
block|{
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"  setting RW- permissions on rw-data block: "
operator|<<
name|format
argument_list|(
literal|"0x%016x"
argument_list|,
name|ObjAllocs
operator|.
name|RemoteRWDataAddr
argument_list|)
operator|<<
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|auto
name|Err
init|=
name|Client
operator|.
name|setProtections
argument_list|(
name|Id
argument_list|,
name|ObjAllocs
operator|.
name|RemoteRWDataAddr
argument_list|,
name|sys
operator|::
name|Memory
operator|::
name|MF_READ
operator||
name|sys
operator|::
name|Memory
operator|::
name|MF_WRITE
argument_list|)
condition|)
block|{
comment|// FIXME: Replace this once finalizeMemory can return an Error.
name|handleAllErrors
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|Err
argument_list|)
argument_list|,
index|[
operator|&
index|]
operator|(
name|ErrorInfoBase
operator|&
name|EIB
operator|)
block|{
if|if
condition|(
name|ErrMsg
condition|)
block|{
name|raw_string_ostream
name|ErrOut
argument_list|(
operator|*
name|ErrMsg
argument_list|)
decl_stmt|;
name|EIB
operator|.
name|log
argument_list|(
name|ErrOut
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
block|}
block|}
name|Unfinalized
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|auto
operator|&
name|EHFrame
operator|:
name|UnfinalizedEHFrames
control|)
block|{
if|if
condition|(
name|auto
name|Err
init|=
name|Client
operator|.
name|registerEHFrames
argument_list|(
name|EHFrame
operator|.
name|first
argument_list|,
name|EHFrame
operator|.
name|second
argument_list|)
condition|)
block|{
comment|// FIXME: Replace this once finalizeMemory can return an Error.
name|handleAllErrors
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|Err
argument_list|)
argument_list|,
index|[
operator|&
index|]
operator|(
name|ErrorInfoBase
operator|&
name|EIB
operator|)
block|{
if|if
condition|(
name|ErrMsg
condition|)
block|{
name|raw_string_ostream
name|ErrOut
argument_list|(
operator|*
name|ErrMsg
argument_list|)
decl_stmt|;
name|EIB
operator|.
name|log
argument_list|(
name|ErrOut
argument_list|)
expr_stmt|;
block|}
block|}
block|)
empty_stmt|;
return|return
name|false
return|;
block|}
block|}
name|UnfinalizedEHFrames
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|false
return|;
block|}
name|private
label|:
name|class
name|Alloc
block|{
name|public
label|:
name|Alloc
argument_list|(
argument|uint64_t Size
argument_list|,
argument|unsigned Align
argument_list|)
block|:
name|Size
argument_list|(
name|Size
argument_list|)
operator|,
name|Align
argument_list|(
name|Align
argument_list|)
operator|,
name|Contents
argument_list|(
argument|new char[Size + Align -
literal|1
argument|]
argument_list|)
block|{}
name|Alloc
argument_list|(
specifier|const
name|Alloc
operator|&
argument_list|)
operator|=
name|delete
expr_stmt|;
name|Alloc
modifier|&
name|operator
init|=
operator|(
specifier|const
name|Alloc
operator|&
operator|)
operator|=
name|delete
decl_stmt|;
name|Alloc
argument_list|(
name|Alloc
operator|&&
argument_list|)
operator|=
expr|default
expr_stmt|;
name|Alloc
modifier|&
name|operator
init|=
operator|(
name|Alloc
operator|&&
operator|)
operator|=
expr|default
decl_stmt|;
name|uint64_t
name|getSize
argument_list|()
specifier|const
block|{
return|return
name|Size
return|;
block|}
name|unsigned
name|getAlign
argument_list|()
specifier|const
block|{
return|return
name|Align
return|;
block|}
name|char
operator|*
name|getLocalAddress
argument_list|()
specifier|const
block|{
name|uintptr_t
name|LocalAddr
operator|=
name|reinterpret_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|Contents
operator|.
name|get
argument_list|()
operator|)
block|;
name|LocalAddr
operator|=
name|alignTo
argument_list|(
name|LocalAddr
argument_list|,
name|Align
argument_list|)
block|;
return|return
name|reinterpret_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|LocalAddr
operator|)
return|;
block|}
name|void
name|setRemoteAddress
parameter_list|(
name|JITTargetAddress
name|RemoteAddr
parameter_list|)
block|{
name|this
operator|->
name|RemoteAddr
operator|=
name|RemoteAddr
expr_stmt|;
block|}
name|JITTargetAddress
name|getRemoteAddress
argument_list|()
specifier|const
block|{
return|return
name|RemoteAddr
return|;
block|}
name|private
label|:
name|uint64_t
name|Size
decl_stmt|;
name|unsigned
name|Align
decl_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|char
index|[]
operator|>
name|Contents
expr_stmt|;
name|JITTargetAddress
name|RemoteAddr
init|=
literal|0
decl_stmt|;
block|}
empty_stmt|;
struct|struct
name|ObjectAllocs
block|{
name|ObjectAllocs
argument_list|()
operator|=
expr|default
expr_stmt|;
name|ObjectAllocs
argument_list|(
specifier|const
name|ObjectAllocs
operator|&
argument_list|)
operator|=
name|delete
expr_stmt|;
name|ObjectAllocs
modifier|&
name|operator
init|=
operator|(
specifier|const
name|ObjectAllocs
operator|&
operator|)
operator|=
name|delete
decl_stmt|;
name|ObjectAllocs
argument_list|(
name|ObjectAllocs
operator|&&
argument_list|)
operator|=
expr|default
expr_stmt|;
name|ObjectAllocs
modifier|&
name|operator
init|=
operator|(
name|ObjectAllocs
operator|&&
operator|)
operator|=
expr|default
decl_stmt|;
name|JITTargetAddress
name|RemoteCodeAddr
init|=
literal|0
decl_stmt|;
name|JITTargetAddress
name|RemoteRODataAddr
init|=
literal|0
decl_stmt|;
name|JITTargetAddress
name|RemoteRWDataAddr
init|=
literal|0
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|Alloc
operator|>
name|CodeAllocs
operator|,
name|RODataAllocs
operator|,
name|RWDataAllocs
expr_stmt|;
block|}
struct|;
name|OrcRemoteTargetClient
modifier|&
name|Client
decl_stmt|;
name|ResourceIdMgr
operator|::
name|ResourceId
name|Id
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|ObjectAllocs
operator|>
name|Unmapped
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|ObjectAllocs
operator|>
name|Unfinalized
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|pair
operator|<
name|uint64_t
operator|,
name|uint32_t
operator|>>
name|UnfinalizedEHFrames
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/// Remote indirect stubs manager.
end_comment

begin_decl_stmt
name|class
name|RCIndirectStubsManager
range|:
name|public
name|IndirectStubsManager
block|{
name|public
operator|:
name|RCIndirectStubsManager
argument_list|(
argument|OrcRemoteTargetClient&Remote
argument_list|,
argument|ResourceIdMgr::ResourceId Id
argument_list|)
operator|:
name|Remote
argument_list|(
name|Remote
argument_list|)
block|,
name|Id
argument_list|(
argument|Id
argument_list|)
block|{}
operator|~
name|RCIndirectStubsManager
argument_list|()
name|override
block|{
if|if
condition|(
name|auto
name|Err
init|=
name|Remote
operator|.
name|destroyIndirectStubsManager
argument_list|(
name|Id
argument_list|)
condition|)
block|{
comment|// FIXME: Thread this error back to clients.
name|consumeError
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|Err
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Error
name|createStub
argument_list|(
argument|StringRef StubName
argument_list|,
argument|JITTargetAddress StubAddr
argument_list|,
argument|JITSymbolFlags StubFlags
argument_list|)
name|override
block|{
if|if
condition|(
name|auto
name|Err
init|=
name|reserveStubs
argument_list|(
literal|1
argument_list|)
condition|)
return|return
name|Err
return|;
return|return
name|createStubInternal
argument_list|(
name|StubName
argument_list|,
name|StubAddr
argument_list|,
name|StubFlags
argument_list|)
return|;
block|}
end_decl_stmt

begin_function
name|Error
name|createStubs
parameter_list|(
specifier|const
name|StubInitsMap
modifier|&
name|StubInits
parameter_list|)
function|override
block|{
if|if
condition|(
name|auto
name|Err
init|=
name|reserveStubs
argument_list|(
name|StubInits
operator|.
name|size
argument_list|()
argument_list|)
condition|)
return|return
name|Err
return|;
for|for
control|(
name|auto
operator|&
name|Entry
operator|:
name|StubInits
control|)
if|if
condition|(
name|auto
name|Err
init|=
name|createStubInternal
argument_list|(
name|Entry
operator|.
name|first
argument_list|()
argument_list|,
name|Entry
operator|.
name|second
operator|.
name|first
argument_list|,
name|Entry
operator|.
name|second
operator|.
name|second
argument_list|)
condition|)
return|return
name|Err
return|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
end_function

begin_function
name|JITSymbol
name|findStub
parameter_list|(
name|StringRef
name|Name
parameter_list|,
name|bool
name|ExportedStubsOnly
parameter_list|)
function|override
block|{
name|auto
name|I
init|=
name|StubIndexes
operator|.
name|find
argument_list|(
name|Name
argument_list|)
decl_stmt|;
if|if
condition|(
name|I
operator|==
name|StubIndexes
operator|.
name|end
argument_list|()
condition|)
return|return
name|nullptr
return|;
name|auto
name|Key
init|=
name|I
operator|->
name|second
operator|.
name|first
decl_stmt|;
name|auto
name|Flags
init|=
name|I
operator|->
name|second
operator|.
name|second
decl_stmt|;
name|auto
name|StubSymbol
init|=
name|JITSymbol
argument_list|(
name|getStubAddr
argument_list|(
name|Key
argument_list|)
argument_list|,
name|Flags
argument_list|)
decl_stmt|;
if|if
condition|(
name|ExportedStubsOnly
operator|&&
operator|!
name|StubSymbol
operator|.
name|getFlags
argument_list|()
operator|.
name|isExported
argument_list|()
condition|)
return|return
name|nullptr
return|;
return|return
name|StubSymbol
return|;
block|}
end_function

begin_function
name|JITSymbol
name|findPointer
parameter_list|(
name|StringRef
name|Name
parameter_list|)
function|override
block|{
name|auto
name|I
init|=
name|StubIndexes
operator|.
name|find
argument_list|(
name|Name
argument_list|)
decl_stmt|;
if|if
condition|(
name|I
operator|==
name|StubIndexes
operator|.
name|end
argument_list|()
condition|)
return|return
name|nullptr
return|;
name|auto
name|Key
init|=
name|I
operator|->
name|second
operator|.
name|first
decl_stmt|;
name|auto
name|Flags
init|=
name|I
operator|->
name|second
operator|.
name|second
decl_stmt|;
return|return
name|JITSymbol
argument_list|(
name|getPtrAddr
argument_list|(
name|Key
argument_list|)
argument_list|,
name|Flags
argument_list|)
return|;
block|}
end_function

begin_function
name|Error
name|updatePointer
parameter_list|(
name|StringRef
name|Name
parameter_list|,
name|JITTargetAddress
name|NewAddr
parameter_list|)
function|override
block|{
name|auto
name|I
init|=
name|StubIndexes
operator|.
name|find
argument_list|(
name|Name
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|I
operator|!=
name|StubIndexes
operator|.
name|end
argument_list|()
operator|&&
literal|"No stub pointer for symbol"
argument_list|)
expr_stmt|;
name|auto
name|Key
init|=
name|I
operator|->
name|second
operator|.
name|first
decl_stmt|;
return|return
name|Remote
operator|.
name|writePointer
argument_list|(
name|getPtrAddr
argument_list|(
name|Key
argument_list|)
argument_list|,
name|NewAddr
argument_list|)
return|;
block|}
end_function

begin_label
name|private
label|:
end_label

begin_struct
struct|struct
name|RemoteIndirectStubsInfo
block|{
name|JITTargetAddress
name|StubBase
decl_stmt|;
name|JITTargetAddress
name|PtrBase
decl_stmt|;
name|unsigned
name|NumStubs
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
name|OrcRemoteTargetClient
modifier|&
name|Remote
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|ResourceIdMgr
operator|::
name|ResourceId
name|Id
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|RemoteIndirectStubsInfo
operator|>
name|RemoteIndirectStubsInfos
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|std
operator|::
name|pair
operator|<
name|uint16_t
operator|,
name|uint16_t
operator|>
name|StubKey
expr_stmt|;
end_typedef

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|StubKey
operator|>
name|FreeStubs
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|StringMap
operator|<
name|std
operator|::
name|pair
operator|<
name|StubKey
operator|,
name|JITSymbolFlags
operator|>>
name|StubIndexes
expr_stmt|;
end_expr_stmt

begin_function
name|Error
name|reserveStubs
parameter_list|(
name|unsigned
name|NumStubs
parameter_list|)
block|{
if|if
condition|(
name|NumStubs
operator|<=
name|FreeStubs
operator|.
name|size
argument_list|()
condition|)
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
name|unsigned
name|NewStubsRequired
init|=
name|NumStubs
operator|-
name|FreeStubs
operator|.
name|size
argument_list|()
decl_stmt|;
name|JITTargetAddress
name|StubBase
decl_stmt|;
name|JITTargetAddress
name|PtrBase
decl_stmt|;
name|unsigned
name|NumStubsEmitted
decl_stmt|;
if|if
condition|(
name|auto
name|StubInfoOrErr
init|=
name|Remote
operator|.
name|emitIndirectStubs
argument_list|(
name|Id
argument_list|,
name|NewStubsRequired
argument_list|)
condition|)
name|std
operator|::
name|tie
argument_list|(
name|StubBase
argument_list|,
name|PtrBase
argument_list|,
name|NumStubsEmitted
argument_list|)
operator|=
operator|*
name|StubInfoOrErr
expr_stmt|;
else|else
return|return
name|StubInfoOrErr
operator|.
name|takeError
argument_list|()
return|;
name|unsigned
name|NewBlockId
init|=
name|RemoteIndirectStubsInfos
operator|.
name|size
argument_list|()
decl_stmt|;
name|RemoteIndirectStubsInfos
operator|.
name|push_back
argument_list|(
block|{
name|StubBase
block|,
name|PtrBase
block|,
name|NumStubsEmitted
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|unsigned
name|I
init|=
literal|0
init|;
name|I
operator|<
name|NumStubsEmitted
condition|;
operator|++
name|I
control|)
name|FreeStubs
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|NewBlockId
argument_list|,
name|I
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
end_function

begin_function
name|Error
name|createStubInternal
parameter_list|(
name|StringRef
name|StubName
parameter_list|,
name|JITTargetAddress
name|InitAddr
parameter_list|,
name|JITSymbolFlags
name|StubFlags
parameter_list|)
block|{
name|auto
name|Key
init|=
name|FreeStubs
operator|.
name|back
argument_list|()
decl_stmt|;
name|FreeStubs
operator|.
name|pop_back
argument_list|()
expr_stmt|;
name|StubIndexes
index|[
name|StubName
index|]
operator|=
name|std
operator|::
name|make_pair
argument_list|(
name|Key
argument_list|,
name|StubFlags
argument_list|)
expr_stmt|;
return|return
name|Remote
operator|.
name|writePointer
argument_list|(
name|getPtrAddr
argument_list|(
name|Key
argument_list|)
argument_list|,
name|InitAddr
argument_list|)
return|;
block|}
end_function

begin_function
name|JITTargetAddress
name|getStubAddr
parameter_list|(
name|StubKey
name|K
parameter_list|)
block|{
name|assert
argument_list|(
name|RemoteIndirectStubsInfos
index|[
name|K
operator|.
name|first
index|]
operator|.
name|StubBase
operator|!=
literal|0
operator|&&
literal|"Missing stub address"
argument_list|)
expr_stmt|;
return|return
name|RemoteIndirectStubsInfos
index|[
name|K
operator|.
name|first
index|]
operator|.
name|StubBase
operator|+
name|K
operator|.
name|second
operator|*
name|Remote
operator|.
name|getIndirectStubSize
argument_list|()
return|;
block|}
end_function

begin_function
name|JITTargetAddress
name|getPtrAddr
parameter_list|(
name|StubKey
name|K
parameter_list|)
block|{
name|assert
argument_list|(
name|RemoteIndirectStubsInfos
index|[
name|K
operator|.
name|first
index|]
operator|.
name|PtrBase
operator|!=
literal|0
operator|&&
literal|"Missing pointer address"
argument_list|)
expr_stmt|;
return|return
name|RemoteIndirectStubsInfos
index|[
name|K
operator|.
name|first
index|]
operator|.
name|PtrBase
operator|+
name|K
operator|.
name|second
operator|*
name|Remote
operator|.
name|getPointerSize
argument_list|()
return|;
block|}
end_function

begin_comment
unit|};
comment|/// Remote compile callback manager.
end_comment

begin_decl_stmt
name|class
name|RCCompileCallbackManager
range|:
name|public
name|JITCompileCallbackManager
block|{
name|public
operator|:
name|RCCompileCallbackManager
argument_list|(
argument|JITTargetAddress ErrorHandlerAddress
argument_list|,
argument|OrcRemoteTargetClient&Remote
argument_list|)
operator|:
name|JITCompileCallbackManager
argument_list|(
name|ErrorHandlerAddress
argument_list|)
block|,
name|Remote
argument_list|(
argument|Remote
argument_list|)
block|{}
name|private
operator|:
name|void
name|grow
argument_list|()
name|override
block|{
name|JITTargetAddress
name|BlockAddr
operator|=
literal|0
block|;
name|uint32_t
name|NumTrampolines
operator|=
literal|0
block|;
if|if
condition|(
name|auto
name|TrampolineInfoOrErr
init|=
name|Remote
operator|.
name|emitTrampolineBlock
argument_list|()
condition|)
name|std
operator|::
name|tie
argument_list|(
name|BlockAddr
argument_list|,
name|NumTrampolines
argument_list|)
operator|=
operator|*
name|TrampolineInfoOrErr
expr_stmt|;
else|else
block|{
comment|// FIXME: Return error.
name|llvm_unreachable
argument_list|(
literal|"Failed to create trampolines"
argument_list|)
expr_stmt|;
block|}
name|uint32_t
name|TrampolineSize
init|=
name|Remote
operator|.
name|getTrampolineSize
argument_list|()
decl_stmt|;
for|for
control|(
name|unsigned
name|I
init|=
literal|0
init|;
name|I
operator|<
name|NumTrampolines
condition|;
operator|++
name|I
control|)
name|this
operator|->
name|AvailableTrampolines
operator|.
name|push_back
argument_list|(
name|BlockAddr
operator|+
operator|(
name|I
operator|*
name|TrampolineSize
operator|)
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|OrcRemoteTargetClient
modifier|&
name|Remote
decl_stmt|;
end_decl_stmt

begin_comment
unit|};
comment|/// Create an OrcRemoteTargetClient.
end_comment

begin_comment
comment|/// Channel is the ChannelT instance to communicate on. It is assumed that
end_comment

begin_comment
comment|/// the channel is ready to be read from and written to.
end_comment

begin_expr_stmt
specifier|static
name|Expected
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|OrcRemoteTargetClient
operator|>>
name|Create
argument_list|(
argument|ChannelT&Channel
argument_list|)
block|{
name|Error
name|Err
operator|=
name|Error
operator|::
name|success
argument_list|()
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|OrcRemoteTargetClient
operator|>
name|Client
argument_list|(
argument|new OrcRemoteTargetClient(Channel, Err)
argument_list|)
block|;
if|if
condition|(
name|Err
condition|)
return|return
name|std
operator|::
name|move
argument_list|(
name|Err
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
name|std
operator|::
name|move
argument_list|(
name|Client
argument_list|)
return|;
end_return

begin_comment
unit|}
comment|/// Call the int(void) function at the given address in the target and return
end_comment

begin_comment
comment|/// its result.
end_comment

begin_expr_stmt
unit|Expected
operator|<
name|int
operator|>
name|callIntVoid
argument_list|(
argument|JITTargetAddress Addr
argument_list|)
block|{
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"Calling int(*)(void) "
operator|<<
name|format
argument_list|(
literal|"0x%016x"
argument_list|,
name|Addr
argument_list|)
operator|<<
literal|"\n"
argument_list|)
block|;
return|return
name|callB
operator|<
name|CallIntVoid
operator|>
operator|(
name|Addr
operator|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/// Call the int(int, char*[]) function at the given address in the target and
end_comment

begin_comment
comment|/// return its result.
end_comment

begin_expr_stmt
name|Expected
operator|<
name|int
operator|>
name|callMain
argument_list|(
argument|JITTargetAddress Addr
argument_list|,
argument|const std::vector<std::string>&Args
argument_list|)
block|{
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"Calling int(*)(int, char*[]) "
operator|<<
name|format
argument_list|(
literal|"0x%016x"
argument_list|,
name|Addr
argument_list|)
operator|<<
literal|"\n"
argument_list|)
block|;
return|return
name|callB
operator|<
name|CallMain
operator|>
operator|(
name|Addr
operator|,
name|Args
operator|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/// Call the void() function at the given address in the target and wait for
end_comment

begin_comment
comment|/// it to finish.
end_comment

begin_function
name|Error
name|callVoidVoid
parameter_list|(
name|JITTargetAddress
name|Addr
parameter_list|)
block|{
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"Calling void(*)(void) "
operator|<<
name|format
argument_list|(
literal|"0x%016x"
argument_list|,
name|Addr
argument_list|)
operator|<<
literal|"\n"
argument_list|)
expr_stmt|;
return|return
name|callB
operator|<
name|CallVoidVoid
operator|>
operator|(
name|Addr
operator|)
return|;
block|}
end_function

begin_comment
comment|/// Create an RCMemoryManager which will allocate its memory on the remote
end_comment

begin_comment
comment|/// target.
end_comment

begin_decl_stmt
name|Error
name|createRemoteMemoryManager
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|RCMemoryManager
operator|>
operator|&
name|MM
argument_list|)
block|{
name|assert
argument_list|(
operator|!
name|MM
operator|&&
literal|"MemoryManager should be null before creation."
argument_list|)
expr_stmt|;
name|auto
name|Id
init|=
name|AllocatorIds
operator|.
name|getNext
argument_list|()
decl_stmt|;
if|if
condition|(
name|auto
name|Err
init|=
name|callB
operator|<
name|CreateRemoteAllocator
operator|>
operator|(
name|Id
operator|)
condition|)
return|return
name|Err
return|;
name|MM
operator|=
name|llvm
operator|::
name|make_unique
operator|<
name|RCMemoryManager
operator|>
operator|(
operator|*
name|this
operator|,
name|Id
operator|)
expr_stmt|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
end_decl_stmt

begin_comment
comment|/// Create an RCIndirectStubsManager that will allocate stubs on the remote
end_comment

begin_comment
comment|/// target.
end_comment

begin_decl_stmt
name|Error
name|createIndirectStubsManager
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|RCIndirectStubsManager
operator|>
operator|&
name|I
argument_list|)
block|{
name|assert
argument_list|(
operator|!
name|I
operator|&&
literal|"Indirect stubs manager should be null before creation."
argument_list|)
expr_stmt|;
name|auto
name|Id
init|=
name|IndirectStubOwnerIds
operator|.
name|getNext
argument_list|()
decl_stmt|;
if|if
condition|(
name|auto
name|Err
init|=
name|callB
operator|<
name|CreateIndirectStubsOwner
operator|>
operator|(
name|Id
operator|)
condition|)
return|return
name|Err
return|;
name|I
operator|=
name|llvm
operator|::
name|make_unique
operator|<
name|RCIndirectStubsManager
operator|>
operator|(
operator|*
name|this
operator|,
name|Id
operator|)
expr_stmt|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|Expected
operator|<
name|RCCompileCallbackManager
operator|&
operator|>
name|enableCompileCallbacks
argument_list|(
argument|JITTargetAddress ErrorHandlerAddress
argument_list|)
block|{
comment|// Check for an 'out-of-band' error, e.g. from an MM destructor.
if|if
condition|(
name|ExistingError
condition|)
return|return
name|std
operator|::
name|move
argument_list|(
name|ExistingError
argument_list|)
return|;
end_expr_stmt

begin_comment
comment|// Emit the resolver block on the JIT server.
end_comment

begin_if
if|if
condition|(
name|auto
name|Err
init|=
name|callB
operator|<
name|EmitResolverBlock
operator|>
operator|(
operator|)
condition|)
return|return
name|std
operator|::
name|move
argument_list|(
name|Err
argument_list|)
return|;
end_if

begin_comment
comment|// Create the callback manager.
end_comment

begin_expr_stmt
name|CallbackManager
operator|.
name|emplace
argument_list|(
name|ErrorHandlerAddress
argument_list|,
operator|*
name|this
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|RCCompileCallbackManager
modifier|&
name|Mgr
init|=
operator|*
name|CallbackManager
decl_stmt|;
end_decl_stmt

begin_return
return|return
name|Mgr
return|;
end_return

begin_comment
unit|}
comment|/// Search for symbols in the remote process. Note: This should be used by
end_comment

begin_comment
comment|/// symbol resolvers *after* they've searched the local symbol table in the
end_comment

begin_comment
comment|/// JIT stack.
end_comment

begin_expr_stmt
unit|Expected
operator|<
name|JITTargetAddress
operator|>
name|getSymbolAddress
argument_list|(
argument|StringRef Name
argument_list|)
block|{
comment|// Check for an 'out-of-band' error, e.g. from an MM destructor.
if|if
condition|(
name|ExistingError
condition|)
return|return
name|std
operator|::
name|move
argument_list|(
name|ExistingError
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
name|callB
operator|<
name|GetSymbolAddress
operator|>
operator|(
name|Name
operator|)
return|;
end_return

begin_comment
unit|}
comment|/// Get the triple for the remote target.
end_comment

begin_expr_stmt
unit|const
name|std
operator|::
name|string
operator|&
name|getTargetTriple
argument_list|()
specifier|const
block|{
return|return
name|RemoteTargetTriple
return|;
block|}
end_expr_stmt

begin_function
name|Error
name|terminateSession
parameter_list|()
block|{
return|return
name|callB
operator|<
name|TerminateSession
operator|>
operator|(
operator|)
return|;
block|}
end_function

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|OrcRemoteTargetClient
argument_list|(
name|ChannelT
operator|&
name|Channel
argument_list|,
name|Error
operator|&
name|Err
argument_list|)
operator|:
name|OrcRemoteTargetRPCAPI
argument_list|(
argument|Channel
argument_list|)
block|{
name|ErrorAsOutParameter
name|EAO
argument_list|(
operator|&
name|Err
argument_list|)
block|;
name|addHandler
operator|<
name|RequestCompile
operator|>
operator|(
index|[
name|this
index|]
operator|(
name|JITTargetAddress
name|Addr
operator|)
operator|->
name|JITTargetAddress
block|{
if|if
condition|(
name|CallbackManager
condition|)
return|return
name|CallbackManager
operator|->
name|executeCompileCallback
argument_list|(
name|Addr
argument_list|)
return|;
return|return
literal|0
return|;
block|}
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_if
if|if
condition|(
name|auto
name|RIOrErr
init|=
name|callB
operator|<
name|GetRemoteInfo
operator|>
operator|(
operator|)
condition|)
block|{
name|std
operator|::
name|tie
argument_list|(
name|RemoteTargetTriple
argument_list|,
name|RemotePointerSize
argument_list|,
name|RemotePageSize
argument_list|,
name|RemoteTrampolineSize
argument_list|,
name|RemoteIndirectStubSize
argument_list|)
operator|=
operator|*
name|RIOrErr
expr_stmt|;
name|Err
operator|=
name|Error
operator|::
name|success
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Err
operator|=
name|joinErrors
argument_list|(
name|RIOrErr
operator|.
name|takeError
argument_list|()
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|ExistingError
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_if

begin_macro
unit|}    Error
name|deregisterEHFrames
argument_list|(
argument|JITTargetAddress Addr
argument_list|,
argument|uint32_t Size
argument_list|)
end_macro

begin_block
block|{
return|return
name|callB
operator|<
name|RegisterEHFrames
operator|>
operator|(
name|Addr
operator|,
name|Size
operator|)
return|;
block|}
end_block

begin_decl_stmt
name|void
name|destroyRemoteAllocator
argument_list|(
name|ResourceIdMgr
operator|::
name|ResourceId
name|Id
argument_list|)
block|{
if|if
condition|(
name|auto
name|Err
init|=
name|callB
operator|<
name|DestroyRemoteAllocator
operator|>
operator|(
name|Id
operator|)
condition|)
block|{
comment|// FIXME: This will be triggered by a removeModuleSet call: Propagate
comment|//        error return up through that.
name|llvm_unreachable
argument_list|(
literal|"Failed to destroy remote allocator."
argument_list|)
expr_stmt|;
name|AllocatorIds
operator|.
name|release
argument_list|(
name|Id
argument_list|)
expr_stmt|;
block|}
block|}
end_decl_stmt

begin_decl_stmt
name|Error
name|destroyIndirectStubsManager
argument_list|(
name|ResourceIdMgr
operator|::
name|ResourceId
name|Id
argument_list|)
block|{
name|IndirectStubOwnerIds
operator|.
name|release
argument_list|(
name|Id
argument_list|)
expr_stmt|;
return|return
name|callB
operator|<
name|DestroyIndirectStubsOwner
operator|>
operator|(
name|Id
operator|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|Expected
operator|<
name|std
operator|::
name|tuple
operator|<
name|JITTargetAddress
operator|,
name|JITTargetAddress
operator|,
name|uint32_t
operator|>>
name|emitIndirectStubs
argument_list|(
argument|ResourceIdMgr::ResourceId Id
argument_list|,
argument|uint32_t NumStubsRequired
argument_list|)
block|{
return|return
name|callB
operator|<
name|EmitIndirectStubs
operator|>
operator|(
name|Id
operator|,
name|NumStubsRequired
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|Expected
operator|<
name|std
operator|::
name|tuple
operator|<
name|JITTargetAddress
operator|,
name|uint32_t
operator|>>
name|emitTrampolineBlock
argument_list|()
block|{
comment|// Check for an 'out-of-band' error, e.g. from an MM destructor.
if|if
condition|(
name|ExistingError
condition|)
return|return
name|std
operator|::
name|move
argument_list|(
name|ExistingError
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
name|callB
operator|<
name|EmitTrampolineBlock
operator|>
operator|(
operator|)
return|;
end_return

begin_macro
unit|}    uint32_t
name|getIndirectStubSize
argument_list|()
end_macro

begin_expr_stmt
specifier|const
block|{
return|return
name|RemoteIndirectStubSize
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|uint32_t
name|getPageSize
argument_list|()
specifier|const
block|{
return|return
name|RemotePageSize
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|uint32_t
name|getPointerSize
argument_list|()
specifier|const
block|{
return|return
name|RemotePointerSize
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|uint32_t
name|getTrampolineSize
argument_list|()
specifier|const
block|{
return|return
name|RemoteTrampolineSize
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|Expected
operator|<
name|std
operator|::
name|vector
operator|<
name|char
operator|>>
name|readMem
argument_list|(
argument|char *Dst
argument_list|,
argument|JITTargetAddress Src
argument_list|,
argument|uint64_t Size
argument_list|)
block|{
comment|// Check for an 'out-of-band' error, e.g. from an MM destructor.
if|if
condition|(
name|ExistingError
condition|)
return|return
name|std
operator|::
name|move
argument_list|(
name|ExistingError
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
name|callB
operator|<
name|ReadMem
operator|>
operator|(
name|Src
operator|,
name|Size
operator|)
return|;
end_return

begin_macro
unit|}    Error
name|registerEHFrames
argument_list|(
argument|JITTargetAddress&RAddr
argument_list|,
argument|uint32_t Size
argument_list|)
end_macro

begin_block
block|{
return|return
name|callB
operator|<
name|RegisterEHFrames
operator|>
operator|(
name|RAddr
operator|,
name|Size
operator|)
return|;
block|}
end_block

begin_expr_stmt
name|Expected
operator|<
name|JITTargetAddress
operator|>
name|reserveMem
argument_list|(
argument|ResourceIdMgr::ResourceId Id
argument_list|,
argument|uint64_t Size
argument_list|,
argument|uint32_t Align
argument_list|)
block|{
comment|// Check for an 'out-of-band' error, e.g. from an MM destructor.
if|if
condition|(
name|ExistingError
condition|)
return|return
name|std
operator|::
name|move
argument_list|(
name|ExistingError
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
name|callB
operator|<
name|ReserveMem
operator|>
operator|(
name|Id
operator|,
name|Size
operator|,
name|Align
operator|)
return|;
end_return

begin_macro
unit|}    Error
name|setProtections
argument_list|(
argument|ResourceIdMgr::ResourceId Id
argument_list|,
argument|JITTargetAddress RemoteSegAddr
argument_list|,
argument|unsigned ProtFlags
argument_list|)
end_macro

begin_block
block|{
return|return
name|callB
operator|<
name|SetProtections
operator|>
operator|(
name|Id
operator|,
name|RemoteSegAddr
operator|,
name|ProtFlags
operator|)
return|;
block|}
end_block

begin_function
name|Error
name|writeMem
parameter_list|(
name|JITTargetAddress
name|Addr
parameter_list|,
specifier|const
name|char
modifier|*
name|Src
parameter_list|,
name|uint64_t
name|Size
parameter_list|)
block|{
comment|// Check for an 'out-of-band' error, e.g. from an MM destructor.
if|if
condition|(
name|ExistingError
condition|)
return|return
name|std
operator|::
name|move
argument_list|(
name|ExistingError
argument_list|)
return|;
return|return
name|callB
operator|<
name|WriteMem
operator|>
operator|(
name|DirectBufferWriter
argument_list|(
name|Src
argument_list|,
name|Addr
argument_list|,
name|Size
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
name|Error
name|writePointer
parameter_list|(
name|JITTargetAddress
name|Addr
parameter_list|,
name|JITTargetAddress
name|PtrVal
parameter_list|)
block|{
comment|// Check for an 'out-of-band' error, e.g. from an MM destructor.
if|if
condition|(
name|ExistingError
condition|)
return|return
name|std
operator|::
name|move
argument_list|(
name|ExistingError
argument_list|)
return|;
return|return
name|callB
operator|<
name|WritePtr
operator|>
operator|(
name|Addr
operator|,
name|PtrVal
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|Error
name|doNothing
parameter_list|()
block|{
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
end_function

begin_decl_stmt
name|Error
name|ExistingError
init|=
name|Error
operator|::
name|success
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|std
operator|::
name|string
name|RemoteTargetTriple
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|uint32_t
name|RemotePointerSize
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uint32_t
name|RemotePageSize
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uint32_t
name|RemoteTrampolineSize
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uint32_t
name|RemoteIndirectStubSize
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ResourceIdMgr
name|AllocatorIds
decl_stmt|,
name|IndirectStubOwnerIds
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|Optional
operator|<
name|RCCompileCallbackManager
operator|>
name|CallbackManager
expr_stmt|;
end_expr_stmt

begin_comment
unit|};  }
comment|// end namespace remote
end_comment

begin_comment
unit|}
comment|// end namespace orc
end_comment

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_undef
undef|#
directive|undef
name|DEBUG_TYPE
end_undef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_EXECUTIONENGINE_ORC_ORCREMOTETARGETCLIENT_H
end_comment

end_unit

