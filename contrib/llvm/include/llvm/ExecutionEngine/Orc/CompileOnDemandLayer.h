begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- CompileOnDemandLayer.h - Compile each function on demand -*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// JIT layer for breaking up modules and inserting callbacks to allow
end_comment

begin_comment
comment|// individual functions to be compiled on demand.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_EXECUTIONENGINE_ORC_COMPILEONDEMANDLAYER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_EXECUTIONENGINE_ORC_COMPILEONDEMANDLAYER_H
end_define

begin_comment
comment|//#include "CloneSubModule.h"
end_comment

begin_include
include|#
directive|include
file|"IndirectionUtils.h"
end_include

begin_include
include|#
directive|include
file|"LambdaResolver.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/STLExtras.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ExecutionEngine/SectionMemoryManager.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Transforms/Utils/Cloning.h"
end_include

begin_include
include|#
directive|include
file|<list>
end_include

begin_include
include|#
directive|include
file|<set>
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Debug.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|orc
block|{
comment|/// @brief Compile-on-demand layer.
comment|///
comment|///   When a module is added to this layer a stub is created for each of its
comment|/// function definitions. The stubs and other global values are immediately
comment|/// added to the layer below. When a stub is called it triggers the extraction
comment|/// of the function body from the original module. The extracted body is then
comment|/// compiled and executed.
name|template
operator|<
name|typename
name|BaseLayerT
operator|,
name|typename
name|CompileCallbackMgrT
operator|>
name|class
name|CompileOnDemandLayer
block|{
name|private
operator|:
comment|// Utility class for MapValue. Only materializes declarations for global
comment|// variables.
name|class
name|GlobalDeclMaterializer
operator|:
name|public
name|ValueMaterializer
block|{
name|public
operator|:
name|GlobalDeclMaterializer
argument_list|(
name|Module
operator|&
name|Dst
argument_list|)
operator|:
name|Dst
argument_list|(
argument|Dst
argument_list|)
block|{}
name|Value
operator|*
name|materializeValueFor
argument_list|(
argument|Value *V
argument_list|)
name|final
block|{
if|if
condition|(
name|auto
operator|*
name|GV
operator|=
name|dyn_cast
operator|<
name|GlobalVariable
operator|>
operator|(
name|V
operator|)
condition|)
return|return
name|cloneGlobalVariableDecl
argument_list|(
name|Dst
argument_list|,
operator|*
name|GV
argument_list|)
return|;
elseif|else
if|if
condition|(
name|auto
operator|*
name|F
operator|=
name|dyn_cast
operator|<
name|Function
operator|>
operator|(
name|V
operator|)
condition|)
return|return
name|cloneFunctionDecl
argument_list|(
name|Dst
argument_list|,
operator|*
name|F
argument_list|)
return|;
comment|// Else.
return|return
name|nullptr
return|;
block|}
name|private
operator|:
name|Module
operator|&
name|Dst
block|;   }
expr_stmt|;
typedef|typedef
name|typename
name|BaseLayerT
operator|::
name|ModuleSetHandleT
name|BaseLayerModuleSetHandleT
expr_stmt|;
name|class
name|UncompiledPartition
decl_stmt|;
comment|// Logical module.
comment|//
comment|//   This struct contains the handles for the global values and stubs (which
comment|// cover the external symbols of the original module), plus the handes for
comment|// each of the extracted partitions. These handleds are used for lookup (only
comment|// the globals/stubs module is searched) and memory management. The actual
comment|// searching and resource management are handled by the LogicalDylib that owns
comment|// the LogicalModule.
struct|struct
name|LogicalModule
block|{
name|LogicalModule
argument_list|()
block|{}
name|LogicalModule
argument_list|(
name|LogicalModule
operator|&&
name|Other
argument_list|)
operator|:
name|SrcM
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|Other
operator|.
name|SrcM
argument_list|)
argument_list|)
operator|,
name|GVsAndStubsHandle
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|Other
operator|.
name|GVsAndStubsHandle
argument_list|)
argument_list|)
operator|,
name|ImplHandles
argument_list|(
argument|std::move(Other.ImplHandles)
argument_list|)
block|{}
name|std
operator|::
name|unique_ptr
operator|<
name|Module
operator|>
name|SrcM
expr_stmt|;
name|BaseLayerModuleSetHandleT
name|GVsAndStubsHandle
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|BaseLayerModuleSetHandleT
operator|>
name|ImplHandles
expr_stmt|;
block|}
struct|;
comment|// Logical dylib.
comment|//
comment|//   This class handles symbol resolution and resource management for a set of
comment|// modules that were added together as a logical dylib.
comment|//
comment|//   A logical dylib contains one-or-more LogicalModules plus a set of
comment|// UncompiledPartitions. LogicalModules support symbol resolution and resource
comment|// management for for code that has already been emitted. UncompiledPartitions
comment|// represent code that has not yet been compiled.
name|class
name|LogicalDylib
block|{
name|private
label|:
name|friend
name|class
name|UncompiledPartition
decl_stmt|;
typedef|typedef
name|std
operator|::
name|list
operator|<
name|LogicalModule
operator|>
name|LogicalModuleList
expr_stmt|;
name|public
label|:
typedef|typedef
name|unsigned
name|UncompiledPartitionID
typedef|;
typedef|typedef
name|typename
name|LogicalModuleList
operator|::
name|iterator
name|LMHandle
expr_stmt|;
comment|// Construct a logical dylib.
name|LogicalDylib
argument_list|(
name|CompileOnDemandLayer
operator|&
name|CODLayer
argument_list|)
operator|:
name|CODLayer
argument_list|(
argument|CODLayer
argument_list|)
block|{ }
comment|// Delete this logical dylib, release logical module resources.
name|virtual
operator|~
name|LogicalDylib
argument_list|()
block|{
name|releaseLogicalModuleResources
argument_list|()
block|;     }
comment|// Get a reference to the containing layer.
name|CompileOnDemandLayer
operator|&
name|getCODLayer
argument_list|()
block|{
return|return
name|CODLayer
return|;
block|}
comment|// Get a reference to the base layer.
name|BaseLayerT
modifier|&
name|getBaseLayer
parameter_list|()
block|{
return|return
name|CODLayer
operator|.
name|BaseLayer
return|;
block|}
comment|// Start a new context for a single logical module.
name|LMHandle
name|createLogicalModule
parameter_list|()
block|{
name|LogicalModules
operator|.
name|push_back
argument_list|(
name|LogicalModule
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|std
operator|::
name|prev
argument_list|(
name|LogicalModules
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
comment|// Set the global-values-and-stubs module handle for this logical module.
name|void
name|setGVsAndStubsHandle
parameter_list|(
name|LMHandle
name|LMH
parameter_list|,
name|BaseLayerModuleSetHandleT
name|H
parameter_list|)
block|{
name|LMH
operator|->
name|GVsAndStubsHandle
operator|=
name|H
expr_stmt|;
block|}
comment|// Return the global-values-and-stubs module handle for this logical module.
name|BaseLayerModuleSetHandleT
name|getGVsAndStubsHandle
parameter_list|(
name|LMHandle
name|LMH
parameter_list|)
block|{
return|return
name|LMH
operator|->
name|GVsAndStubsHandle
return|;
block|}
comment|//   Add a handle to a module containing lazy function bodies to the given
comment|// logical module.
name|void
name|addToLogicalModule
parameter_list|(
name|LMHandle
name|LMH
parameter_list|,
name|BaseLayerModuleSetHandleT
name|H
parameter_list|)
block|{
name|LMH
operator|->
name|ImplHandles
operator|.
name|push_back
argument_list|(
name|H
argument_list|)
expr_stmt|;
block|}
comment|// Create an UncompiledPartition attached to this LogicalDylib.
name|UncompiledPartition
modifier|&
name|createUncompiledPartition
argument_list|(
name|LMHandle
name|LMH
argument_list|,
name|std
operator|::
name|shared_ptr
operator|<
name|Module
operator|>
name|SrcM
argument_list|)
decl_stmt|;
comment|// Take ownership of the given UncompiledPartition from the logical dylib.
name|std
operator|::
name|unique_ptr
operator|<
name|UncompiledPartition
operator|>
name|takeUPOwnership
argument_list|(
argument|UncompiledPartitionID ID
argument_list|)
expr_stmt|;
comment|// Look up a symbol in this context.
name|JITSymbol
name|findSymbolInternally
argument_list|(
name|LMHandle
name|LMH
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
argument_list|)
block|{
if|if
condition|(
name|auto
name|Symbol
init|=
name|getBaseLayer
argument_list|()
operator|.
name|findSymbolIn
argument_list|(
name|LMH
operator|->
name|GVsAndStubsHandle
argument_list|,
name|Name
argument_list|,
name|false
argument_list|)
condition|)
return|return
name|Symbol
return|;
for|for
control|(
name|auto
name|I
init|=
name|LogicalModules
operator|.
name|begin
argument_list|()
init|,
name|E
init|=
name|LogicalModules
operator|.
name|end
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
if|if
condition|(
name|I
operator|!=
name|LMH
condition|)
if|if
condition|(
name|auto
name|Symbol
init|=
name|getBaseLayer
argument_list|()
operator|.
name|findSymbolIn
argument_list|(
name|I
operator|->
name|GVsAndStubsHandle
argument_list|,
name|Name
argument_list|,
name|false
argument_list|)
condition|)
return|return
name|Symbol
return|;
return|return
name|nullptr
return|;
block|}
name|JITSymbol
name|findSymbol
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
argument_list|,
name|bool
name|ExportedSymbolsOnly
argument_list|)
block|{
for|for
control|(
name|auto
operator|&
name|LM
operator|:
name|LogicalModules
control|)
if|if
condition|(
name|auto
name|Symbol
init|=
name|getBaseLayer
argument_list|()
operator|.
name|findSymbolIn
argument_list|(
name|LM
operator|.
name|GVsAndStubsHandle
argument_list|,
name|Name
argument_list|,
name|ExportedSymbolsOnly
argument_list|)
condition|)
return|return
name|Symbol
return|;
return|return
name|nullptr
return|;
block|}
comment|// Find an external symbol (via the user supplied SymbolResolver).
name|virtual
name|RuntimeDyld
operator|::
name|SymbolInfo
name|findSymbolExternally
argument_list|(
argument|const std::string&Name
argument_list|)
specifier|const
operator|=
literal|0
expr_stmt|;
name|private
label|:
name|void
name|releaseLogicalModuleResources
parameter_list|()
block|{
for|for
control|(
name|auto
name|I
init|=
name|LogicalModules
operator|.
name|begin
argument_list|()
init|,
name|E
init|=
name|LogicalModules
operator|.
name|end
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
block|{
name|getBaseLayer
argument_list|()
operator|.
name|removeModuleSet
argument_list|(
name|I
operator|->
name|GVsAndStubsHandle
argument_list|)
expr_stmt|;
for|for
control|(
name|auto
name|H
range|:
name|I
operator|->
name|ImplHandles
control|)
name|getBaseLayer
argument_list|()
operator|.
name|removeModuleSet
argument_list|(
name|H
argument_list|)
expr_stmt|;
block|}
block|}
name|CompileOnDemandLayer
modifier|&
name|CODLayer
decl_stmt|;
name|LogicalModuleList
name|LogicalModules
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|UncompiledPartition
operator|>>
name|UncompiledPartitions
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|ResolverPtrT
operator|>
name|class
name|LogicalDylibImpl
operator|:
name|public
name|LogicalDylib
block|{
name|public
operator|:
name|LogicalDylibImpl
argument_list|(
argument|CompileOnDemandLayer&CODLayer
argument_list|,
argument|ResolverPtrT Resolver
argument_list|)
operator|:
name|LogicalDylib
argument_list|(
name|CODLayer
argument_list|)
block|,
name|Resolver
argument_list|(
argument|std::move(Resolver)
argument_list|)
block|{}
name|RuntimeDyld
operator|::
name|SymbolInfo
name|findSymbolExternally
argument_list|(
argument|const std::string&Name
argument_list|)
specifier|const
name|override
block|{
return|return
name|Resolver
operator|->
name|findSymbol
argument_list|(
name|Name
argument_list|)
return|;
block|}
name|private
operator|:
name|ResolverPtrT
name|Resolver
block|;   }
expr_stmt|;
name|template
operator|<
name|typename
name|ResolverPtrT
operator|>
specifier|static
name|std
operator|::
name|unique_ptr
operator|<
name|LogicalDylib
operator|>
name|createLogicalDylib
argument_list|(
argument|CompileOnDemandLayer&CODLayer
argument_list|,
argument|ResolverPtrT Resolver
argument_list|)
block|{
typedef|typedef
name|LogicalDylibImpl
operator|<
name|ResolverPtrT
operator|>
name|Impl
expr_stmt|;
return|return
name|llvm
operator|::
name|make_unique
operator|<
name|Impl
operator|>
operator|(
name|CODLayer
operator|,
name|std
operator|::
name|move
argument_list|(
name|Resolver
argument_list|)
operator|)
return|;
block|}
comment|// Uncompiled partition.
comment|//
comment|// Represents one as-yet uncompiled portion of a module.
name|class
name|UncompiledPartition
block|{
name|public
label|:
struct|struct
name|PartitionEntry
block|{
name|PartitionEntry
argument_list|(
argument|Function *F
argument_list|,
argument|TargetAddress CallbackID
argument_list|)
block|:
name|F
argument_list|(
name|F
argument_list|)
operator|,
name|CallbackID
argument_list|(
argument|CallbackID
argument_list|)
block|{}
name|Function
operator|*
name|F
expr_stmt|;
name|TargetAddress
name|CallbackID
decl_stmt|;
block|}
struct|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|PartitionEntry
operator|>
name|PartitionEntryList
expr_stmt|;
comment|// Creates an uncompiled partition with the list of functions that make up
comment|// this partition.
name|UncompiledPartition
argument_list|(
argument|LogicalDylib&LD
argument_list|,
argument|typename LogicalDylib::LMHandle LMH
argument_list|,
argument|std::shared_ptr<Module> SrcM
argument_list|)
block|:
name|LD
argument_list|(
name|LD
argument_list|)
operator|,
name|LMH
argument_list|(
name|LMH
argument_list|)
operator|,
name|SrcM
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|SrcM
argument_list|)
argument_list|)
operator|,
name|ID
argument_list|(
argument|~
literal|0U
argument_list|)
block|{}
operator|~
name|UncompiledPartition
argument_list|()
block|{
comment|// FIXME: When we want to support threaded lazy compilation we'll need to
comment|//        lock the callback manager here.
name|auto
operator|&
name|CCMgr
operator|=
name|LD
operator|.
name|getCODLayer
argument_list|()
operator|.
name|CompileCallbackMgr
block|;
for|for
control|(
name|auto
name|PEntry
range|:
name|PartitionEntries
control|)
name|CCMgr
operator|.
name|releaseCompileCallback
argument_list|(
name|PEntry
operator|.
name|CallbackID
argument_list|)
expr_stmt|;
block|}
comment|// Set the ID for this partition.
name|void
name|setID
argument_list|(
name|typename
name|LogicalDylib
operator|::
name|UncompiledPartitionID
name|ID
argument_list|)
block|{
name|this
operator|->
name|ID
operator|=
name|ID
expr_stmt|;
block|}
comment|// Set the function set and callbacks for this partition.
name|void
name|setPartitionEntries
parameter_list|(
name|PartitionEntryList
name|PartitionEntries
parameter_list|)
block|{
name|this
operator|->
name|PartitionEntries
operator|=
name|std
operator|::
name|move
argument_list|(
name|PartitionEntries
argument_list|)
expr_stmt|;
block|}
comment|// Handle a compile callback for the function at index FnIdx.
name|TargetAddress
name|compile
parameter_list|(
name|unsigned
name|FnIdx
parameter_list|)
block|{
comment|// Take ownership of self. This will ensure we delete the partition and
comment|// free all its resources once we're done compiling.
name|std
operator|::
name|unique_ptr
operator|<
name|UncompiledPartition
operator|>
name|This
operator|=
name|LD
operator|.
name|takeUPOwnership
argument_list|(
name|ID
argument_list|)
expr_stmt|;
comment|// Release all other compile callbacks for this partition.
comment|// We skip the callback for this function because that's the one that
comment|// called us, and the callback manager will already have removed it.
name|auto
operator|&
name|CCMgr
operator|=
name|LD
operator|.
name|getCODLayer
argument_list|()
operator|.
name|CompileCallbackMgr
expr_stmt|;
for|for
control|(
name|unsigned
name|I
init|=
literal|0
init|;
name|I
operator|<
name|PartitionEntries
operator|.
name|size
argument_list|()
condition|;
operator|++
name|I
control|)
if|if
condition|(
name|I
operator|!=
name|FnIdx
condition|)
name|CCMgr
operator|.
name|releaseCompileCallback
argument_list|(
name|PartitionEntries
index|[
name|I
index|]
operator|.
name|CallbackID
argument_list|)
expr_stmt|;
comment|// Grab the name of the function being called here.
name|Function
modifier|*
name|F
init|=
name|PartitionEntries
index|[
name|FnIdx
index|]
operator|.
name|F
decl_stmt|;
name|std
operator|::
name|string
name|CalledFnName
operator|=
name|Mangle
argument_list|(
name|F
operator|->
name|getName
argument_list|()
argument_list|,
name|SrcM
operator|->
name|getDataLayout
argument_list|()
argument_list|)
expr_stmt|;
comment|// Extract the function and add it to the base layer.
name|auto
name|PartitionImplH
init|=
name|emitPartition
argument_list|()
decl_stmt|;
name|LD
operator|.
name|addToLogicalModule
argument_list|(
name|LMH
argument_list|,
name|PartitionImplH
argument_list|)
expr_stmt|;
comment|// Update body pointers.
comment|// FIXME: When we start supporting remote lazy jitting this will need to
comment|//        be replaced with a user-supplied callback for updating the
comment|//        remote pointers.
name|TargetAddress
name|CalledAddr
init|=
literal|0
decl_stmt|;
for|for
control|(
name|unsigned
name|I
init|=
literal|0
init|;
name|I
operator|<
name|PartitionEntries
operator|.
name|size
argument_list|()
condition|;
operator|++
name|I
control|)
block|{
name|auto
name|F
init|=
name|PartitionEntries
index|[
name|I
index|]
operator|.
name|F
decl_stmt|;
name|std
operator|::
name|string
name|FName
argument_list|(
name|F
operator|->
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|auto
name|FnBodySym
init|=
name|LD
operator|.
name|getBaseLayer
argument_list|()
operator|.
name|findSymbolIn
argument_list|(
name|PartitionImplH
argument_list|,
name|Mangle
argument_list|(
name|FName
argument_list|,
name|SrcM
operator|->
name|getDataLayout
argument_list|()
argument_list|)
argument_list|,
name|false
argument_list|)
decl_stmt|;
name|auto
name|FnPtrSym
init|=
name|LD
operator|.
name|getBaseLayer
argument_list|()
operator|.
name|findSymbolIn
argument_list|(
name|LD
operator|.
name|getGVsAndStubsHandle
argument_list|(
name|LMH
argument_list|)
argument_list|,
name|Mangle
argument_list|(
name|FName
operator|+
literal|"$orc_addr"
argument_list|,
name|SrcM
operator|->
name|getDataLayout
argument_list|()
argument_list|)
argument_list|,
name|false
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|FnBodySym
operator|&&
literal|"Couldn't find function body."
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|FnPtrSym
operator|&&
literal|"Couldn't find function body pointer."
argument_list|)
expr_stmt|;
name|auto
name|FnBodyAddr
init|=
name|FnBodySym
operator|.
name|getAddress
argument_list|()
decl_stmt|;
name|void
modifier|*
name|FnPtrAddr
init|=
name|reinterpret_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|static_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|FnPtrSym
operator|.
name|getAddress
argument_list|()
operator|)
operator|)
decl_stmt|;
comment|// If this is the function we're calling record the address so we can
comment|// return it from this function.
if|if
condition|(
name|I
operator|==
name|FnIdx
condition|)
name|CalledAddr
operator|=
name|FnBodyAddr
expr_stmt|;
name|memcpy
argument_list|(
name|FnPtrAddr
argument_list|,
operator|&
name|FnBodyAddr
argument_list|,
sizeof|sizeof
argument_list|(
name|uintptr_t
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Finally, clear the partition structure so we don't try to
comment|// double-release the callbacks in the UncompiledPartition destructor.
name|PartitionEntries
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|CalledAddr
return|;
block|}
name|private
label|:
name|BaseLayerModuleSetHandleT
name|emitPartition
parameter_list|()
block|{
comment|// Create the module.
name|std
operator|::
name|string
name|NewName
argument_list|(
name|SrcM
operator|->
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|auto
operator|&
name|PEntry
operator|:
name|PartitionEntries
control|)
block|{
name|NewName
operator|+=
literal|"."
expr_stmt|;
name|NewName
operator|+=
name|PEntry
operator|.
name|F
operator|->
name|getName
argument_list|()
expr_stmt|;
block|}
name|auto
name|PM
init|=
name|llvm
operator|::
name|make_unique
operator|<
name|Module
operator|>
operator|(
name|NewName
expr|,
name|SrcM
operator|->
name|getContext
argument_list|()
operator|)
decl_stmt|;
name|PM
operator|->
name|setDataLayout
argument_list|(
name|SrcM
operator|->
name|getDataLayout
argument_list|()
argument_list|)
expr_stmt|;
name|ValueToValueMapTy
name|VMap
decl_stmt|;
name|GlobalDeclMaterializer
name|GDM
argument_list|(
operator|*
name|PM
argument_list|)
decl_stmt|;
comment|// Create decls in the new module.
for|for
control|(
name|auto
operator|&
name|PEntry
operator|:
name|PartitionEntries
control|)
name|cloneFunctionDecl
argument_list|(
operator|*
name|PM
argument_list|,
operator|*
name|PEntry
operator|.
name|F
argument_list|,
operator|&
name|VMap
argument_list|)
expr_stmt|;
comment|// Move the function bodies.
for|for
control|(
name|auto
operator|&
name|PEntry
operator|:
name|PartitionEntries
control|)
name|moveFunctionBody
argument_list|(
operator|*
name|PEntry
operator|.
name|F
argument_list|,
name|VMap
argument_list|)
expr_stmt|;
comment|// Create memory manager and symbol resolver.
name|auto
name|MemMgr
init|=
name|llvm
operator|::
name|make_unique
operator|<
name|SectionMemoryManager
operator|>
operator|(
operator|)
decl_stmt|;
name|auto
name|Resolver
init|=
name|createLambdaResolver
argument_list|(
index|[
name|this
index|]
operator|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
operator|)
block|{
if|if
condition|(
name|auto
name|Symbol
init|=
name|LD
operator|.
name|findSymbolInternally
argument_list|(
name|LMH
argument_list|,
name|Name
argument_list|)
condition|)
return|return
name|RuntimeDyld
operator|::
name|SymbolInfo
argument_list|(
name|Symbol
operator|.
name|getAddress
argument_list|()
argument_list|,
name|Symbol
operator|.
name|getFlags
argument_list|()
argument_list|)
return|;
return|return
name|LD
operator|.
name|findSymbolExternally
argument_list|(
name|Name
argument_list|)
return|;
block|}
operator|,
index|[
name|this
index|]
operator|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
operator|)
block|{
if|if
condition|(
name|auto
name|Symbol
init|=
name|LD
operator|.
name|findSymbolInternally
argument_list|(
name|LMH
argument_list|,
name|Name
argument_list|)
condition|)
return|return
name|RuntimeDyld
operator|::
name|SymbolInfo
argument_list|(
name|Symbol
operator|.
name|getAddress
argument_list|()
argument_list|,
name|Symbol
operator|.
name|getFlags
argument_list|()
argument_list|)
return|;
return|return
name|RuntimeDyld
operator|::
name|SymbolInfo
argument_list|(
name|nullptr
argument_list|)
return|;
block|}
block|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|Module
operator|>>
name|PartMSet
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|PartMSet
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|PM
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|LD
operator|.
name|getBaseLayer
argument_list|()
operator|.
name|addModuleSet
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|PartMSet
argument_list|)
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|MemMgr
argument_list|)
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|Resolver
argument_list|)
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}      LogicalDylib
operator|&
name|LD
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|typename
name|LogicalDylib
operator|::
name|LMHandle
name|LMH
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|shared_ptr
operator|<
name|Module
operator|>
name|SrcM
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|typename
name|LogicalDylib
operator|::
name|UncompiledPartitionID
name|ID
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|PartitionEntryList
name|PartitionEntries
decl_stmt|;
end_decl_stmt

begin_typedef
unit|};
typedef|typedef
name|std
operator|::
name|list
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|LogicalDylib
operator|>>
name|LogicalDylibList
expr_stmt|;
end_typedef

begin_label
name|public
label|:
end_label

begin_comment
comment|/// @brief Handle to a set of loaded modules.
end_comment

begin_typedef
typedef|typedef
name|typename
name|LogicalDylibList
operator|::
name|iterator
name|ModuleSetHandleT
expr_stmt|;
end_typedef

begin_comment
comment|/// @brief Construct a compile-on-demand layer instance.
end_comment

begin_expr_stmt
name|CompileOnDemandLayer
argument_list|(
name|BaseLayerT
operator|&
name|BaseLayer
argument_list|,
name|CompileCallbackMgrT
operator|&
name|CallbackMgr
argument_list|)
operator|:
name|BaseLayer
argument_list|(
name|BaseLayer
argument_list|)
operator|,
name|CompileCallbackMgr
argument_list|(
argument|CallbackMgr
argument_list|)
block|{}
comment|/// @brief Add a module to the compile-on-demand layer.
name|template
operator|<
name|typename
name|ModuleSetT
operator|,
name|typename
name|MemoryManagerPtrT
operator|,
name|typename
name|SymbolResolverPtrT
operator|>
name|ModuleSetHandleT
name|addModuleSet
argument_list|(
argument|ModuleSetT Ms
argument_list|,
argument|MemoryManagerPtrT MemMgr
argument_list|,
argument|SymbolResolverPtrT Resolver
argument_list|)
block|{
name|assert
argument_list|(
name|MemMgr
operator|==
name|nullptr
operator|&&
literal|"User supplied memory managers not supported with COD yet."
argument_list|)
block|;
name|LogicalDylibs
operator|.
name|push_back
argument_list|(
name|createLogicalDylib
argument_list|(
operator|*
name|this
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|Resolver
argument_list|)
argument_list|)
argument_list|)
block|;
comment|// Process each of the modules in this module set.
for|for
control|(
name|auto
operator|&
name|M
operator|:
name|Ms
control|)
block|{
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|vector
operator|<
name|Function
operator|*
operator|>>
name|Partitioning
expr_stmt|;
for|for
control|(
name|auto
operator|&
name|F
operator|:
operator|*
name|M
control|)
block|{
if|if
condition|(
name|F
operator|.
name|isDeclaration
argument_list|()
condition|)
continue|continue;
name|Partitioning
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|vector
operator|<
name|Function
operator|*
operator|>
operator|(
operator|)
argument_list|)
expr_stmt|;
name|Partitioning
operator|.
name|back
argument_list|()
operator|.
name|push_back
argument_list|(
operator|&
name|F
argument_list|)
expr_stmt|;
block|}
name|addLogicalModule
argument_list|(
operator|*
name|LogicalDylibs
operator|.
name|back
argument_list|()
argument_list|,
name|std
operator|::
name|shared_ptr
operator|<
name|Module
operator|>
operator|(
name|std
operator|::
name|move
argument_list|(
name|M
argument_list|)
operator|)
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|Partitioning
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}      return
name|std
operator|::
name|prev
argument_list|(
name|LogicalDylibs
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|/// @brief Remove the module represented by the given handle.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|///   This will remove all modules in the layers below that were derived from
end_comment

begin_comment
comment|/// the module represented by H.
end_comment

begin_macro
unit|void
name|removeModuleSet
argument_list|(
argument|ModuleSetHandleT H
argument_list|)
end_macro

begin_block
block|{
name|LogicalDylibs
operator|.
name|erase
argument_list|(
name|H
argument_list|)
expr_stmt|;
block|}
end_block

begin_comment
comment|/// @brief Search for the given named symbol.
end_comment

begin_comment
comment|/// @param Name The name of the symbol to search for.
end_comment

begin_comment
comment|/// @param ExportedSymbolsOnly If true, search only for exported symbols.
end_comment

begin_comment
comment|/// @return A handle for the given named symbol, if it exists.
end_comment

begin_function
name|JITSymbol
name|findSymbol
parameter_list|(
name|StringRef
name|Name
parameter_list|,
name|bool
name|ExportedSymbolsOnly
parameter_list|)
block|{
return|return
name|BaseLayer
operator|.
name|findSymbol
argument_list|(
name|Name
argument_list|,
name|ExportedSymbolsOnly
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/// @brief Get the address of a symbol provided by this layer, or some layer
end_comment

begin_comment
comment|///        below this one.
end_comment

begin_decl_stmt
name|JITSymbol
name|findSymbolIn
argument_list|(
name|ModuleSetHandleT
name|H
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
argument_list|,
name|bool
name|ExportedSymbolsOnly
argument_list|)
block|{
return|return
operator|(
operator|*
name|H
operator|)
operator|->
name|findSymbol
argument_list|(
name|Name
argument_list|,
name|ExportedSymbolsOnly
argument_list|)
return|;
block|}
end_decl_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|void
name|addLogicalModule
argument_list|(
name|LogicalDylib
operator|&
name|LD
argument_list|,
name|std
operator|::
name|shared_ptr
operator|<
name|Module
operator|>
name|SrcM
argument_list|,
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|vector
operator|<
name|Function
operator|*
operator|>>
name|Partitions
argument_list|)
block|{
comment|// Bump the linkage and rename any anonymous/privote members in SrcM to
comment|// ensure that everything will resolve properly after we partition SrcM.
name|makeAllSymbolsExternallyAccessible
argument_list|(
operator|*
name|SrcM
argument_list|)
expr_stmt|;
comment|// Create a logical module handle for SrcM within the logical dylib.
name|auto
name|LMH
init|=
name|LD
operator|.
name|createLogicalModule
argument_list|()
decl_stmt|;
comment|// Create the GVs-and-stubs module.
name|auto
name|GVsAndStubsM
init|=
name|llvm
operator|::
name|make_unique
operator|<
name|Module
operator|>
operator|(
operator|(
name|SrcM
operator|->
name|getName
argument_list|()
operator|+
literal|".globals_and_stubs"
operator|)
operator|.
name|str
argument_list|()
expr|,
name|SrcM
operator|->
name|getContext
argument_list|()
operator|)
decl_stmt|;
name|GVsAndStubsM
operator|->
name|setDataLayout
argument_list|(
name|SrcM
operator|->
name|getDataLayout
argument_list|()
argument_list|)
expr_stmt|;
name|ValueToValueMapTy
name|VMap
decl_stmt|;
comment|// Process partitions and create stubs.
comment|// We create the stubs before copying the global variables as we know the
comment|// stubs won't refer to any globals (they only refer to their implementation
comment|// pointer) so there's no ordering/value-mapping issues.
for|for
control|(
name|auto
operator|&
name|Partition
operator|:
name|Partitions
control|)
block|{
name|auto
operator|&
name|UP
operator|=
name|LD
operator|.
name|createUncompiledPartition
argument_list|(
name|LMH
argument_list|,
name|SrcM
argument_list|)
expr_stmt|;
name|typename
name|UncompiledPartition
operator|::
name|PartitionEntryList
name|PartitionEntries
expr_stmt|;
for|for
control|(
name|auto
operator|&
name|F
operator|:
name|Partition
control|)
block|{
name|assert
argument_list|(
operator|!
name|F
operator|->
name|isDeclaration
argument_list|()
operator|&&
literal|"Partition should only contain definitions"
argument_list|)
expr_stmt|;
name|unsigned
name|FnIdx
init|=
name|PartitionEntries
operator|.
name|size
argument_list|()
decl_stmt|;
name|auto
name|CCI
init|=
name|CompileCallbackMgr
operator|.
name|getCompileCallback
argument_list|(
name|SrcM
operator|->
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
name|PartitionEntries
operator|.
name|push_back
argument_list|(
argument|typename UncompiledPartition::PartitionEntry(F, CCI.getAddress())
argument_list|)
expr_stmt|;
name|Function
modifier|*
name|StubF
init|=
name|cloneFunctionDecl
argument_list|(
operator|*
name|GVsAndStubsM
argument_list|,
operator|*
name|F
argument_list|,
operator|&
name|VMap
argument_list|)
decl_stmt|;
name|GlobalVariable
modifier|*
name|FnBodyPtr
init|=
name|createImplPointer
argument_list|(
operator|*
name|StubF
operator|->
name|getType
argument_list|()
argument_list|,
operator|*
name|StubF
operator|->
name|getParent
argument_list|()
argument_list|,
name|StubF
operator|->
name|getName
argument_list|()
operator|+
literal|"$orc_addr"
argument_list|,
name|createIRTypedAddress
argument_list|(
operator|*
name|StubF
operator|->
name|getFunctionType
argument_list|()
argument_list|,
name|CCI
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|makeStub
argument_list|(
operator|*
name|StubF
argument_list|,
operator|*
name|FnBodyPtr
argument_list|)
expr_stmt|;
name|CCI
operator|.
name|setCompileAction
argument_list|(
index|[
operator|&
name|UP
operator|,
name|FnIdx
index|]
operator|(
operator|)
block|{
return|return
name|UP
operator|.
name|compile
argument_list|(
name|FnIdx
argument_list|)
return|;
block|}
block|)
empty_stmt|;
block|}
name|UP
operator|.
name|setPartitionEntries
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|PartitionEntries
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// Now clone the global variable declarations.
end_comment

begin_decl_stmt
name|GlobalDeclMaterializer
name|GDMat
argument_list|(
operator|*
name|GVsAndStubsM
argument_list|)
decl_stmt|;
end_decl_stmt

begin_for
for|for
control|(
name|auto
operator|&
name|GV
operator|:
name|SrcM
operator|->
name|globals
argument_list|()
control|)
if|if
condition|(
operator|!
name|GV
operator|.
name|isDeclaration
argument_list|()
condition|)
name|cloneGlobalVariableDecl
argument_list|(
operator|*
name|GVsAndStubsM
argument_list|,
name|GV
argument_list|,
operator|&
name|VMap
argument_list|)
expr_stmt|;
end_for

begin_comment
comment|// Then clone the initializers.
end_comment

begin_for
for|for
control|(
name|auto
operator|&
name|GV
operator|:
name|SrcM
operator|->
name|globals
argument_list|()
control|)
if|if
condition|(
operator|!
name|GV
operator|.
name|isDeclaration
argument_list|()
condition|)
name|moveGlobalVariableInitializer
argument_list|(
name|GV
argument_list|,
name|VMap
argument_list|,
operator|&
name|GDMat
argument_list|)
expr_stmt|;
end_for

begin_comment
comment|// Build a resolver for the stubs module and add it to the base layer.
end_comment

begin_decl_stmt
name|auto
name|GVsAndStubsResolver
init|=
name|createLambdaResolver
argument_list|(
index|[
operator|&
name|LD
index|]
operator|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
operator|)
block|{
if|if
condition|(
name|auto
name|Symbol
init|=
name|LD
operator|.
name|findSymbol
argument_list|(
name|Name
argument_list|,
name|false
argument_list|)
condition|)
return|return
name|RuntimeDyld
operator|::
name|SymbolInfo
argument_list|(
name|Symbol
operator|.
name|getAddress
argument_list|()
argument_list|,
name|Symbol
operator|.
name|getFlags
argument_list|()
argument_list|)
return|;
return|return
name|LD
operator|.
name|findSymbolExternally
argument_list|(
name|Name
argument_list|)
return|;
end_decl_stmt

begin_expr_stmt
unit|},
index|[
operator|&
name|LD
index|]
operator|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
operator|)
block|{
return|return
name|RuntimeDyld
operator|::
name|SymbolInfo
argument_list|(
name|nullptr
argument_list|)
return|;
block|}
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|Module
operator|>>
name|GVsAndStubsMSet
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|GVsAndStubsMSet
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|GVsAndStubsM
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|auto
name|GVsAndStubsH
init|=
name|BaseLayer
operator|.
name|addModuleSet
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|GVsAndStubsMSet
argument_list|)
argument_list|,
name|llvm
operator|::
name|make_unique
operator|<
name|SectionMemoryManager
operator|>
operator|(
operator|)
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|GVsAndStubsResolver
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|LD
operator|.
name|setGVsAndStubsHandle
argument_list|(
name|LMH
argument_list|,
name|GVsAndStubsH
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}    static
name|std
operator|::
name|string
name|Mangle
argument_list|(
argument|StringRef Name
argument_list|,
argument|const DataLayout&DL
argument_list|)
block|{
name|Mangler
name|M
argument_list|(
operator|&
name|DL
argument_list|)
block|;
name|std
operator|::
name|string
name|MangledName
block|;
block|{
name|raw_string_ostream
name|MangledNameStream
argument_list|(
name|MangledName
argument_list|)
block|;
name|M
operator|.
name|getNameWithPrefix
argument_list|(
name|MangledNameStream
argument_list|,
name|Name
argument_list|)
block|;     }
return|return
name|MangledName
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|BaseLayerT
modifier|&
name|BaseLayer
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CompileCallbackMgrT
modifier|&
name|CompileCallbackMgr
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|LogicalDylibList
name|LogicalDylibs
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|BaseLayerT
operator|,
name|typename
name|CompileCallbackMgrT
operator|>
name|typename
name|CompileOnDemandLayer
operator|<
name|BaseLayerT
operator|,
name|CompileCallbackMgrT
operator|>
operator|::
name|UncompiledPartition
operator|&
name|CompileOnDemandLayer
operator|<
name|BaseLayerT
operator|,
name|CompileCallbackMgrT
operator|>
operator|::
name|LogicalDylib
operator|::
name|createUncompiledPartition
argument_list|(
argument|LMHandle LMH
argument_list|,
argument|std::shared_ptr<Module> SrcM
argument_list|)
block|{
name|UncompiledPartitions
operator|.
name|push_back
argument_list|(
name|llvm
operator|::
name|make_unique
operator|<
name|UncompiledPartition
operator|>
operator|(
operator|*
name|this
operator|,
name|LMH
operator|,
name|std
operator|::
name|move
argument_list|(
name|SrcM
argument_list|)
operator|)
argument_list|)
block|;
name|UncompiledPartitions
operator|.
name|back
argument_list|()
operator|->
name|setID
argument_list|(
name|UncompiledPartitions
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
block|;
return|return
operator|*
name|UncompiledPartitions
operator|.
name|back
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|BaseLayerT
operator|,
name|typename
name|CompileCallbackMgrT
operator|>
name|std
operator|::
name|unique_ptr
operator|<
name|typename
name|CompileOnDemandLayer
operator|<
name|BaseLayerT
operator|,
name|CompileCallbackMgrT
operator|>
operator|::
name|UncompiledPartition
operator|>
name|CompileOnDemandLayer
operator|<
name|BaseLayerT
operator|,
name|CompileCallbackMgrT
operator|>
operator|::
name|LogicalDylib
operator|::
name|takeUPOwnership
argument_list|(
argument|UncompiledPartitionID ID
argument_list|)
block|{
name|std
operator|::
name|swap
argument_list|(
name|UncompiledPartitions
index|[
name|ID
index|]
argument_list|,
name|UncompiledPartitions
operator|.
name|back
argument_list|()
argument_list|)
block|;
name|UncompiledPartitions
index|[
name|ID
index|]
operator|->
name|setID
argument_list|(
name|ID
argument_list|)
block|;
name|auto
name|UP
operator|=
name|std
operator|::
name|move
argument_list|(
name|UncompiledPartitions
operator|.
name|back
argument_list|()
argument_list|)
block|;
name|UncompiledPartitions
operator|.
name|pop_back
argument_list|()
block|;
return|return
name|UP
return|;
block|}
end_expr_stmt

begin_comment
unit|}
comment|// End namespace orc.
end_comment

begin_comment
unit|}
comment|// End namespace llvm.
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_EXECUTIONENGINE_ORC_COMPILEONDEMANDLAYER_H
end_comment

end_unit

