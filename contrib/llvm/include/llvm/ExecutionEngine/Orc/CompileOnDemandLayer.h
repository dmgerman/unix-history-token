begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- CompileOnDemandLayer.h - Compile each function on demand -*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// JIT layer for breaking up modules and inserting callbacks to allow
end_comment

begin_comment
comment|// individual functions to be compiled on demand.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_EXECUTIONENGINE_ORC_COMPILEONDEMANDLAYER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_EXECUTIONENGINE_ORC_COMPILEONDEMANDLAYER_H
end_define

begin_include
include|#
directive|include
file|"IndirectionUtils.h"
end_include

begin_include
include|#
directive|include
file|"LambdaResolver.h"
end_include

begin_include
include|#
directive|include
file|"LogicalDylib.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/STLExtras.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Transforms/Utils/Cloning.h"
end_include

begin_include
include|#
directive|include
file|<list>
end_include

begin_include
include|#
directive|include
file|<memory>
end_include

begin_include
include|#
directive|include
file|<set>
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Debug.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|orc
block|{
comment|/// @brief Compile-on-demand layer.
comment|///
comment|///   When a module is added to this layer a stub is created for each of its
comment|/// function definitions. The stubs and other global values are immediately
comment|/// added to the layer below. When a stub is called it triggers the extraction
comment|/// of the function body from the original module. The extracted body is then
comment|/// compiled and executed.
name|template
operator|<
name|typename
name|BaseLayerT
operator|,
name|typename
name|CompileCallbackMgrT
operator|=
name|JITCompileCallbackManager
operator|,
name|typename
name|IndirectStubsMgrT
operator|=
name|IndirectStubsManager
operator|>
name|class
name|CompileOnDemandLayer
block|{
name|private
operator|:
name|template
operator|<
name|typename
name|MaterializerFtor
operator|>
name|class
name|LambdaMaterializer
name|final
operator|:
name|public
name|ValueMaterializer
block|{
name|public
operator|:
name|LambdaMaterializer
argument_list|(
argument|MaterializerFtor M
argument_list|)
operator|:
name|M
argument_list|(
argument|std::move(M)
argument_list|)
block|{}
name|Value
operator|*
name|materializeDeclFor
argument_list|(
argument|Value *V
argument_list|)
name|final
block|{
return|return
name|M
argument_list|(
name|V
argument_list|)
return|;
block|}
name|private
operator|:
name|MaterializerFtor
name|M
block|;   }
block|;
name|template
operator|<
name|typename
name|MaterializerFtor
operator|>
name|LambdaMaterializer
operator|<
name|MaterializerFtor
operator|>
name|createLambdaMaterializer
argument_list|(
argument|MaterializerFtor M
argument_list|)
block|{
return|return
name|LambdaMaterializer
operator|<
name|MaterializerFtor
operator|>
operator|(
name|std
operator|::
name|move
argument_list|(
name|M
argument_list|)
operator|)
return|;
block|}
typedef|typedef
name|typename
name|BaseLayerT
operator|::
name|ModuleSetHandleT
name|BaseLayerModuleSetHandleT
expr_stmt|;
comment|// Provide type-erasure for the Modules and MemoryManagers.
name|template
operator|<
name|typename
name|ResourceT
operator|>
name|class
name|ResourceOwner
block|{
name|public
operator|:
name|ResourceOwner
argument_list|()
operator|=
expr|default
block|;
name|ResourceOwner
argument_list|(
specifier|const
name|ResourceOwner
operator|&
argument_list|)
operator|=
name|delete
block|;
name|ResourceOwner
operator|&
name|operator
operator|=
operator|(
specifier|const
name|ResourceOwner
operator|&
operator|)
operator|=
name|delete
block|;
name|virtual
operator|~
name|ResourceOwner
argument_list|()
block|{ }
name|virtual
name|ResourceT
operator|&
name|getResource
argument_list|()
specifier|const
operator|=
literal|0
block|;   }
expr_stmt|;
name|template
operator|<
name|typename
name|ResourceT
operator|,
name|typename
name|ResourcePtrT
operator|>
name|class
name|ResourceOwnerImpl
operator|:
name|public
name|ResourceOwner
operator|<
name|ResourceT
operator|>
block|{
name|public
operator|:
name|ResourceOwnerImpl
argument_list|(
argument|ResourcePtrT ResourcePtr
argument_list|)
operator|:
name|ResourcePtr
argument_list|(
argument|std::move(ResourcePtr)
argument_list|)
block|{}
name|ResourceT
operator|&
name|getResource
argument_list|()
specifier|const
name|override
block|{
return|return
operator|*
name|ResourcePtr
return|;
block|}
name|private
operator|:
name|ResourcePtrT
name|ResourcePtr
block|;   }
expr_stmt|;
name|template
operator|<
name|typename
name|ResourceT
operator|,
name|typename
name|ResourcePtrT
operator|>
name|std
operator|::
name|unique_ptr
operator|<
name|ResourceOwner
operator|<
name|ResourceT
operator|>>
name|wrapOwnership
argument_list|(
argument|ResourcePtrT ResourcePtr
argument_list|)
block|{
typedef|typedef
name|ResourceOwnerImpl
operator|<
name|ResourceT
operator|,
name|ResourcePtrT
operator|>
name|RO
expr_stmt|;
return|return
name|llvm
operator|::
name|make_unique
operator|<
name|RO
operator|>
operator|(
name|std
operator|::
name|move
argument_list|(
name|ResourcePtr
argument_list|)
operator|)
return|;
block|}
struct|struct
name|LogicalModuleResources
block|{
name|std
operator|::
name|unique_ptr
operator|<
name|ResourceOwner
operator|<
name|Module
operator|>>
name|SourceModule
expr_stmt|;
name|std
operator|::
name|set
operator|<
specifier|const
name|Function
operator|*
operator|>
name|StubsToClone
expr_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|IndirectStubsMgrT
operator|>
name|StubsMgr
expr_stmt|;
name|LogicalModuleResources
argument_list|()
operator|=
expr|default
expr_stmt|;
comment|// Explicit move constructor to make MSVC happy.
name|LogicalModuleResources
argument_list|(
name|LogicalModuleResources
operator|&&
name|Other
argument_list|)
operator|:
name|SourceModule
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|Other
operator|.
name|SourceModule
argument_list|)
argument_list|)
operator|,
name|StubsToClone
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|Other
operator|.
name|StubsToClone
argument_list|)
argument_list|)
operator|,
name|StubsMgr
argument_list|(
argument|std::move(Other.StubsMgr)
argument_list|)
block|{}
comment|// Explicit move assignment to make MSVC happy.
name|LogicalModuleResources
operator|&
name|operator
operator|=
operator|(
name|LogicalModuleResources
operator|&&
name|Other
operator|)
block|{
name|SourceModule
operator|=
name|std
operator|::
name|move
argument_list|(
name|Other
operator|.
name|SourceModule
argument_list|)
block|;
name|StubsToClone
operator|=
name|std
operator|::
name|move
argument_list|(
name|Other
operator|.
name|StubsToClone
argument_list|)
block|;
name|StubsMgr
operator|=
name|std
operator|::
name|move
argument_list|(
name|Other
operator|.
name|StubsMgr
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
name|JITSymbol
name|findSymbol
parameter_list|(
name|StringRef
name|Name
parameter_list|,
name|bool
name|ExportedSymbolsOnly
parameter_list|)
block|{
if|if
condition|(
name|Name
operator|.
name|endswith
argument_list|(
literal|"$stub_ptr"
argument_list|)
operator|&&
operator|!
name|ExportedSymbolsOnly
condition|)
block|{
name|assert
argument_list|(
operator|!
name|ExportedSymbolsOnly
operator|&&
literal|"Stubs are never exported"
argument_list|)
expr_stmt|;
return|return
name|StubsMgr
operator|->
name|findPointer
argument_list|(
name|Name
operator|.
name|drop_back
argument_list|(
literal|9
argument_list|)
argument_list|)
return|;
block|}
return|return
name|StubsMgr
operator|->
name|findStub
argument_list|(
name|Name
argument_list|,
name|ExportedSymbolsOnly
argument_list|)
return|;
block|}
block|}
struct|;
struct|struct
name|LogicalDylibResources
block|{
typedef|typedef
name|std
operator|::
name|function
operator|<
name|RuntimeDyld
operator|::
name|SymbolInfo
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
argument_list|)
operator|>
name|SymbolResolverFtor
expr_stmt|;
typedef|typedef
name|std
operator|::
name|function
operator|<
name|typename
name|BaseLayerT
operator|::
name|ModuleSetHandleT
argument_list|(
name|BaseLayerT
operator|&
argument_list|,
name|std
operator|::
name|unique_ptr
operator|<
name|Module
operator|>
argument_list|,
name|std
operator|::
name|unique_ptr
operator|<
name|RuntimeDyld
operator|::
name|SymbolResolver
operator|>
argument_list|)
operator|>
name|ModuleAdderFtor
expr_stmt|;
name|LogicalDylibResources
argument_list|()
operator|=
expr|default
expr_stmt|;
comment|// Explicit move constructor to make MSVC happy.
name|LogicalDylibResources
argument_list|(
name|LogicalDylibResources
operator|&&
name|Other
argument_list|)
operator|:
name|ExternalSymbolResolver
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|Other
operator|.
name|ExternalSymbolResolver
argument_list|)
argument_list|)
operator|,
name|MemMgr
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|Other
operator|.
name|MemMgr
argument_list|)
argument_list|)
operator|,
name|ModuleAdder
argument_list|(
argument|std::move(Other.ModuleAdder)
argument_list|)
block|{}
comment|// Explicit move assignment operator to make MSVC happy.
name|LogicalDylibResources
operator|&
name|operator
operator|=
operator|(
name|LogicalDylibResources
operator|&&
name|Other
operator|)
block|{
name|ExternalSymbolResolver
operator|=
name|std
operator|::
name|move
argument_list|(
name|Other
operator|.
name|ExternalSymbolResolver
argument_list|)
block|;
name|MemMgr
operator|=
name|std
operator|::
name|move
argument_list|(
name|Other
operator|.
name|MemMgr
argument_list|)
block|;
name|ModuleAdder
operator|=
name|std
operator|::
name|move
argument_list|(
name|Other
operator|.
name|ModuleAdder
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
name|SymbolResolverFtor
name|ExternalSymbolResolver
decl_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|ResourceOwner
operator|<
name|RuntimeDyld
operator|::
name|MemoryManager
operator|>>
name|MemMgr
expr_stmt|;
name|ModuleAdderFtor
name|ModuleAdder
decl_stmt|;
block|}
struct|;
typedef|typedef
name|LogicalDylib
operator|<
name|BaseLayerT
operator|,
name|LogicalModuleResources
operator|,
name|LogicalDylibResources
operator|>
name|CODLogicalDylib
expr_stmt|;
typedef|typedef
name|typename
name|CODLogicalDylib
operator|::
name|LogicalModuleHandle
name|LogicalModuleHandle
expr_stmt|;
typedef|typedef
name|std
operator|::
name|list
operator|<
name|CODLogicalDylib
operator|>
name|LogicalDylibList
expr_stmt|;
name|public
label|:
comment|/// @brief Handle to a set of loaded modules.
typedef|typedef
name|typename
name|LogicalDylibList
operator|::
name|iterator
name|ModuleSetHandleT
expr_stmt|;
comment|/// @brief Module partitioning functor.
typedef|typedef
name|std
operator|::
name|function
operator|<
name|std
operator|::
name|set
operator|<
name|Function
operator|*
operator|>
operator|(
name|Function
operator|&
operator|)
operator|>
name|PartitioningFtor
expr_stmt|;
comment|/// @brief Builder for IndirectStubsManagers.
typedef|typedef
name|std
operator|::
name|function
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|IndirectStubsMgrT
operator|>
operator|(
operator|)
operator|>
name|IndirectStubsManagerBuilderT
expr_stmt|;
comment|/// @brief Construct a compile-on-demand layer instance.
name|CompileOnDemandLayer
argument_list|(
argument|BaseLayerT&BaseLayer
argument_list|,
argument|PartitioningFtor Partition
argument_list|,
argument|CompileCallbackMgrT&CallbackMgr
argument_list|,
argument|IndirectStubsManagerBuilderT CreateIndirectStubsManager
argument_list|,
argument|bool CloneStubsIntoPartitions = true
argument_list|)
block|:
name|BaseLayer
argument_list|(
name|BaseLayer
argument_list|)
operator|,
name|Partition
argument_list|(
name|Partition
argument_list|)
operator|,
name|CompileCallbackMgr
argument_list|(
name|CallbackMgr
argument_list|)
operator|,
name|CreateIndirectStubsManager
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|CreateIndirectStubsManager
argument_list|)
argument_list|)
operator|,
name|CloneStubsIntoPartitions
argument_list|(
argument|CloneStubsIntoPartitions
argument_list|)
block|{}
comment|/// @brief Add a module to the compile-on-demand layer.
name|template
operator|<
name|typename
name|ModuleSetT
operator|,
name|typename
name|MemoryManagerPtrT
operator|,
name|typename
name|SymbolResolverPtrT
operator|>
name|ModuleSetHandleT
name|addModuleSet
argument_list|(
argument|ModuleSetT Ms
argument_list|,
argument|MemoryManagerPtrT MemMgr
argument_list|,
argument|SymbolResolverPtrT Resolver
argument_list|)
block|{
name|LogicalDylibs
operator|.
name|push_back
argument_list|(
name|CODLogicalDylib
argument_list|(
name|BaseLayer
argument_list|)
argument_list|)
block|;
name|auto
operator|&
name|LDResources
operator|=
name|LogicalDylibs
operator|.
name|back
argument_list|()
operator|.
name|getDylibResources
argument_list|()
block|;
name|LDResources
operator|.
name|ExternalSymbolResolver
operator|=
index|[
name|Resolver
index|]
operator|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
operator|)
block|{
return|return
name|Resolver
operator|->
name|findSymbol
argument_list|(
name|Name
argument_list|)
return|;
block|}
block|;
name|auto
operator|&
name|MemMgrRef
operator|=
operator|*
name|MemMgr
block|;
name|LDResources
operator|.
name|MemMgr
operator|=
name|wrapOwnership
operator|<
name|RuntimeDyld
operator|::
name|MemoryManager
operator|>
operator|(
name|std
operator|::
name|move
argument_list|(
name|MemMgr
argument_list|)
operator|)
block|;
name|LDResources
operator|.
name|ModuleAdder
operator|=
index|[
operator|&
name|MemMgrRef
index|]
operator|(
name|BaseLayerT
operator|&
name|B
operator|,
name|std
operator|::
name|unique_ptr
operator|<
name|Module
operator|>
name|M
operator|,
name|std
operator|::
name|unique_ptr
operator|<
name|RuntimeDyld
operator|::
name|SymbolResolver
operator|>
name|R
operator|)
block|{
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|Module
operator|>>
name|Ms
block|;
name|Ms
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|M
argument_list|)
argument_list|)
block|;
return|return
name|B
operator|.
name|addModuleSet
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|Ms
argument_list|)
argument_list|,
operator|&
name|MemMgrRef
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|R
argument_list|)
argument_list|)
return|;
block|}
block|;
comment|// Process each of the modules in this module set.
for|for
control|(
name|auto
operator|&
name|M
operator|:
name|Ms
control|)
name|addLogicalModule
argument_list|(
name|LogicalDylibs
operator|.
name|back
argument_list|()
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|M
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|std
operator|::
name|prev
argument_list|(
name|LogicalDylibs
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/// @brief Remove the module represented by the given handle.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|///   This will remove all modules in the layers below that were derived from
end_comment

begin_comment
comment|/// the module represented by H.
end_comment

begin_function
name|void
name|removeModuleSet
parameter_list|(
name|ModuleSetHandleT
name|H
parameter_list|)
block|{
name|LogicalDylibs
operator|.
name|erase
argument_list|(
name|H
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/// @brief Search for the given named symbol.
end_comment

begin_comment
comment|/// @param Name The name of the symbol to search for.
end_comment

begin_comment
comment|/// @param ExportedSymbolsOnly If true, search only for exported symbols.
end_comment

begin_comment
comment|/// @return A handle for the given named symbol, if it exists.
end_comment

begin_function
name|JITSymbol
name|findSymbol
parameter_list|(
name|StringRef
name|Name
parameter_list|,
name|bool
name|ExportedSymbolsOnly
parameter_list|)
block|{
for|for
control|(
name|auto
name|LDI
init|=
name|LogicalDylibs
operator|.
name|begin
argument_list|()
init|,
name|LDE
init|=
name|LogicalDylibs
operator|.
name|end
argument_list|()
init|;
name|LDI
operator|!=
name|LDE
condition|;
operator|++
name|LDI
control|)
if|if
condition|(
name|auto
name|Symbol
init|=
name|findSymbolIn
argument_list|(
name|LDI
argument_list|,
name|Name
argument_list|,
name|ExportedSymbolsOnly
argument_list|)
condition|)
return|return
name|Symbol
return|;
return|return
name|BaseLayer
operator|.
name|findSymbol
argument_list|(
name|Name
argument_list|,
name|ExportedSymbolsOnly
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/// @brief Get the address of a symbol provided by this layer, or some layer
end_comment

begin_comment
comment|///        below this one.
end_comment

begin_decl_stmt
name|JITSymbol
name|findSymbolIn
argument_list|(
name|ModuleSetHandleT
name|H
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
argument_list|,
name|bool
name|ExportedSymbolsOnly
argument_list|)
block|{
return|return
name|H
operator|->
name|findSymbol
argument_list|(
name|Name
argument_list|,
name|ExportedSymbolsOnly
argument_list|)
return|;
block|}
end_decl_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|template
operator|<
name|typename
name|ModulePtrT
operator|>
name|void
name|addLogicalModule
argument_list|(
argument|CODLogicalDylib&LD
argument_list|,
argument|ModulePtrT SrcMPtr
argument_list|)
block|{
comment|// Bump the linkage and rename any anonymous/privote members in SrcM to
comment|// ensure that everything will resolve properly after we partition SrcM.
name|makeAllSymbolsExternallyAccessible
argument_list|(
operator|*
name|SrcMPtr
argument_list|)
block|;
comment|// Create a logical module handle for SrcM within the logical dylib.
name|auto
name|LMH
operator|=
name|LD
operator|.
name|createLogicalModule
argument_list|()
block|;
name|auto
operator|&
name|LMResources
operator|=
name|LD
operator|.
name|getLogicalModuleResources
argument_list|(
name|LMH
argument_list|)
block|;
name|LMResources
operator|.
name|SourceModule
operator|=
name|wrapOwnership
operator|<
name|Module
operator|>
operator|(
name|std
operator|::
name|move
argument_list|(
name|SrcMPtr
argument_list|)
operator|)
block|;
name|Module
operator|&
name|SrcM
operator|=
name|LMResources
operator|.
name|SourceModule
operator|->
name|getResource
argument_list|()
block|;
comment|// Create the GlobalValues module.
specifier|const
name|DataLayout
operator|&
name|DL
operator|=
name|SrcM
operator|.
name|getDataLayout
argument_list|()
block|;
name|auto
name|GVsM
operator|=
name|llvm
operator|::
name|make_unique
operator|<
name|Module
operator|>
operator|(
operator|(
name|SrcM
operator|.
name|getName
argument_list|()
operator|+
literal|".globals"
operator|)
operator|.
name|str
argument_list|()
operator|,
name|SrcM
operator|.
name|getContext
argument_list|()
operator|)
block|;
name|GVsM
operator|->
name|setDataLayout
argument_list|(
name|DL
argument_list|)
block|;
comment|// Create function stubs.
name|ValueToValueMapTy
name|VMap
block|;
block|{
name|typename
name|IndirectStubsMgrT
operator|::
name|StubInitsMap
name|StubInits
block|;
for|for
control|(
name|auto
operator|&
name|F
operator|:
name|SrcM
control|)
block|{
comment|// Skip declarations.
if|if
condition|(
name|F
operator|.
name|isDeclaration
argument_list|()
condition|)
continue|continue;
comment|// Record all functions defined by this module.
if|if
condition|(
name|CloneStubsIntoPartitions
condition|)
name|LMResources
operator|.
name|StubsToClone
operator|.
name|insert
argument_list|(
operator|&
name|F
argument_list|)
expr_stmt|;
comment|// Create a callback, associate it with the stub for the function,
comment|// and set the compile action to compile the partition containing the
comment|// function.
name|auto
name|CCInfo
init|=
name|CompileCallbackMgr
operator|.
name|getCompileCallback
argument_list|()
decl_stmt|;
name|StubInits
index|[
name|mangle
argument_list|(
name|F
operator|.
name|getName
argument_list|()
argument_list|,
name|DL
argument_list|)
index|]
operator|=
name|std
operator|::
name|make_pair
argument_list|(
name|CCInfo
operator|.
name|getAddress
argument_list|()
argument_list|,
name|JITSymbolBase
operator|::
name|flagsFromGlobalValue
argument_list|(
name|F
argument_list|)
argument_list|)
expr_stmt|;
name|CCInfo
operator|.
name|setCompileAction
argument_list|(
index|[
name|this
operator|,
operator|&
name|LD
operator|,
name|LMH
operator|,
operator|&
name|F
index|]
operator|(
operator|)
block|{
return|return
name|this
operator|->
name|extractAndCompile
argument_list|(
name|LD
argument_list|,
name|LMH
argument_list|,
name|F
argument_list|)
return|;
block|}
block|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}        LMResources
operator|.
name|StubsMgr
operator|=
name|CreateIndirectStubsManager
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|auto
name|EC
init|=
name|LMResources
operator|.
name|StubsMgr
operator|->
name|createStubs
argument_list|(
name|StubInits
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
operator|(
name|void
operator|)
name|EC
expr_stmt|;
end_expr_stmt

begin_comment
comment|// FIXME: This should be propagated back to the user. Stub creation may
end_comment

begin_comment
comment|//        fail for remote JITs.
end_comment

begin_expr_stmt
name|assert
argument_list|(
operator|!
name|EC
operator|&&
literal|"Error generating stubs"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|// Clone global variable decls.
end_comment

begin_expr_stmt
unit|for
operator|(
name|auto
operator|&
name|GV
operator|:
name|SrcM
operator|.
name|globals
argument_list|()
operator|)
end_expr_stmt

begin_if
if|if
condition|(
operator|!
name|GV
operator|.
name|isDeclaration
argument_list|()
operator|&&
operator|!
name|VMap
operator|.
name|count
argument_list|(
operator|&
name|GV
argument_list|)
condition|)
name|cloneGlobalVariableDecl
argument_list|(
operator|*
name|GVsM
argument_list|,
name|GV
argument_list|,
operator|&
name|VMap
argument_list|)
expr_stmt|;
end_if

begin_comment
comment|// And the aliases.
end_comment

begin_for
for|for
control|(
name|auto
operator|&
name|A
operator|:
name|SrcM
operator|.
name|aliases
argument_list|()
control|)
if|if
condition|(
operator|!
name|VMap
operator|.
name|count
argument_list|(
operator|&
name|A
argument_list|)
condition|)
name|cloneGlobalAliasDecl
argument_list|(
operator|*
name|GVsM
argument_list|,
name|A
argument_list|,
name|VMap
argument_list|)
expr_stmt|;
end_for

begin_comment
comment|// Now we need to clone the GV and alias initializers.
end_comment

begin_comment
comment|// Initializers may refer to functions declared (but not defined) in this
end_comment

begin_comment
comment|// module. Build a materializer to clone decls on demand.
end_comment

begin_decl_stmt
name|auto
name|Materializer
init|=
name|createLambdaMaterializer
argument_list|(
argument|[this
argument_list|,
argument|&GVsM
argument_list|,
argument|&LMResources](Value *V) -> Value* {         if (auto *F = dyn_cast<Function>(V)) {
comment|// Decls in the original module just get cloned.
argument|if (F->isDeclaration())             return cloneFunctionDecl(*GVsM, *F);
comment|// Definitions in the original module (which we have emitted stubs
comment|// for at this point) get turned into a constant alias to the stub
comment|// instead.
argument|const DataLayout&DL = GVsM->getDataLayout();           std::string FName = mangle(F->getName(), DL);           auto StubSym = LMResources.StubsMgr->findStub(FName, false);           unsigned PtrBitWidth = DL.getPointerTypeSizeInBits(F->getType());           ConstantInt *StubAddr =             ConstantInt::get(GVsM->getContext(),                              APInt(PtrBitWidth, StubSym.getAddress()));           Constant *Init = ConstantExpr::getCast(Instruction::IntToPtr,                                                  StubAddr, F->getType());           return GlobalAlias::create(F->getFunctionType(),                                      F->getType()->getAddressSpace(),                                      F->getLinkage(), F->getName(),                                      Init, GVsM.get());         }
comment|// else....
argument|return nullptr;       }
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Clone the global variable initializers.
end_comment

begin_for
for|for
control|(
name|auto
operator|&
name|GV
operator|:
name|SrcM
operator|.
name|globals
argument_list|()
control|)
if|if
condition|(
operator|!
name|GV
operator|.
name|isDeclaration
argument_list|()
condition|)
name|moveGlobalVariableInitializer
argument_list|(
name|GV
argument_list|,
name|VMap
argument_list|,
operator|&
name|Materializer
argument_list|)
expr_stmt|;
end_for

begin_comment
comment|// Clone the global alias initializers.
end_comment

begin_for
for|for
control|(
name|auto
operator|&
name|A
operator|:
name|SrcM
operator|.
name|aliases
argument_list|()
control|)
block|{
name|auto
operator|*
name|NewA
operator|=
name|cast
operator|<
name|GlobalAlias
operator|>
operator|(
name|VMap
index|[
operator|&
name|A
index|]
operator|)
expr_stmt|;
name|assert
argument_list|(
name|NewA
operator|&&
literal|"Alias not cloned?"
argument_list|)
expr_stmt|;
name|Value
modifier|*
name|Init
init|=
name|MapValue
argument_list|(
name|A
operator|.
name|getAliasee
argument_list|()
argument_list|,
name|VMap
argument_list|,
name|RF_None
argument_list|,
name|nullptr
argument_list|,
operator|&
name|Materializer
argument_list|)
decl_stmt|;
name|NewA
operator|->
name|setAliasee
argument_list|(
name|cast
operator|<
name|Constant
operator|>
operator|(
name|Init
operator|)
argument_list|)
expr_stmt|;
block|}
end_for

begin_comment
comment|// Build a resolver for the globals module and add it to the base layer.
end_comment

begin_decl_stmt
name|auto
name|GVsResolver
init|=
name|createLambdaResolver
argument_list|(
index|[
operator|&
name|LD
operator|,
name|LMH
index|]
operator|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
operator|)
block|{
name|auto
operator|&
name|LMResources
operator|=
name|LD
operator|.
name|getLogicalModuleResources
argument_list|(
name|LMH
argument_list|)
block|;
if|if
condition|(
name|auto
name|Sym
init|=
name|LMResources
operator|.
name|StubsMgr
operator|->
name|findStub
argument_list|(
name|Name
argument_list|,
name|false
argument_list|)
condition|)
return|return
name|RuntimeDyld
operator|::
name|SymbolInfo
argument_list|(
name|Sym
operator|.
name|getAddress
argument_list|()
argument_list|,
name|Sym
operator|.
name|getFlags
argument_list|()
argument_list|)
return|;
return|return
name|LD
operator|.
name|getDylibResources
argument_list|()
operator|.
name|ExternalSymbolResolver
argument_list|(
name|Name
argument_list|)
return|;
end_decl_stmt

begin_expr_stmt
unit|},
index|[]
operator|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
operator|)
block|{
return|return
name|RuntimeDyld
operator|::
name|SymbolInfo
argument_list|(
name|nullptr
argument_list|)
return|;
block|}
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|auto
name|GVsH
init|=
name|LD
operator|.
name|getDylibResources
argument_list|()
operator|.
name|ModuleAdder
argument_list|(
name|BaseLayer
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|GVsM
argument_list|)
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|GVsResolver
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|LD
operator|.
name|addToLogicalModule
argument_list|(
name|LMH
argument_list|,
name|GVsH
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}    static
name|std
operator|::
name|string
name|mangle
argument_list|(
argument|StringRef Name
argument_list|,
argument|const DataLayout&DL
argument_list|)
block|{
name|std
operator|::
name|string
name|MangledName
block|;
block|{
name|raw_string_ostream
name|MangledNameStream
argument_list|(
name|MangledName
argument_list|)
block|;
name|Mangler
operator|::
name|getNameWithPrefix
argument_list|(
name|MangledNameStream
argument_list|,
name|Name
argument_list|,
name|DL
argument_list|)
block|;     }
return|return
name|MangledName
return|;
block|}
end_expr_stmt

begin_function
name|TargetAddress
name|extractAndCompile
parameter_list|(
name|CODLogicalDylib
modifier|&
name|LD
parameter_list|,
name|LogicalModuleHandle
name|LMH
parameter_list|,
name|Function
modifier|&
name|F
parameter_list|)
block|{
name|auto
operator|&
name|LMResources
operator|=
name|LD
operator|.
name|getLogicalModuleResources
argument_list|(
name|LMH
argument_list|)
expr_stmt|;
name|Module
modifier|&
name|SrcM
init|=
name|LMResources
operator|.
name|SourceModule
operator|->
name|getResource
argument_list|()
decl_stmt|;
comment|// If F is a declaration we must already have compiled it.
if|if
condition|(
name|F
operator|.
name|isDeclaration
argument_list|()
condition|)
return|return
literal|0
return|;
comment|// Grab the name of the function being called here.
name|std
operator|::
name|string
name|CalledFnName
operator|=
name|mangle
argument_list|(
name|F
operator|.
name|getName
argument_list|()
argument_list|,
name|SrcM
operator|.
name|getDataLayout
argument_list|()
argument_list|)
expr_stmt|;
name|auto
name|Part
init|=
name|Partition
argument_list|(
name|F
argument_list|)
decl_stmt|;
name|auto
name|PartH
init|=
name|emitPartition
argument_list|(
name|LD
argument_list|,
name|LMH
argument_list|,
name|Part
argument_list|)
decl_stmt|;
name|TargetAddress
name|CalledAddr
init|=
literal|0
decl_stmt|;
for|for
control|(
name|auto
operator|*
name|SubF
operator|:
name|Part
control|)
block|{
name|std
operator|::
name|string
name|FnName
operator|=
name|mangle
argument_list|(
name|SubF
operator|->
name|getName
argument_list|()
argument_list|,
name|SrcM
operator|.
name|getDataLayout
argument_list|()
argument_list|)
expr_stmt|;
name|auto
name|FnBodySym
init|=
name|BaseLayer
operator|.
name|findSymbolIn
argument_list|(
name|PartH
argument_list|,
name|FnName
argument_list|,
name|false
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|FnBodySym
operator|&&
literal|"Couldn't find function body."
argument_list|)
expr_stmt|;
name|TargetAddress
name|FnBodyAddr
init|=
name|FnBodySym
operator|.
name|getAddress
argument_list|()
decl_stmt|;
comment|// If this is the function we're calling record the address so we can
comment|// return it from this function.
if|if
condition|(
name|SubF
operator|==
operator|&
name|F
condition|)
name|CalledAddr
operator|=
name|FnBodyAddr
expr_stmt|;
comment|// Update the function body pointer for the stub.
if|if
condition|(
name|auto
name|EC
init|=
name|LMResources
operator|.
name|StubsMgr
operator|->
name|updatePointer
argument_list|(
name|FnName
argument_list|,
name|FnBodyAddr
argument_list|)
condition|)
return|return
literal|0
return|;
block|}
return|return
name|CalledAddr
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|typename
name|PartitionT
operator|>
name|BaseLayerModuleSetHandleT
name|emitPartition
argument_list|(
argument|CODLogicalDylib&LD
argument_list|,
argument|LogicalModuleHandle LMH
argument_list|,
argument|const PartitionT&Part
argument_list|)
block|{
name|auto
operator|&
name|LMResources
operator|=
name|LD
operator|.
name|getLogicalModuleResources
argument_list|(
name|LMH
argument_list|)
block|;
name|Module
operator|&
name|SrcM
operator|=
name|LMResources
operator|.
name|SourceModule
operator|->
name|getResource
argument_list|()
block|;
comment|// Create the module.
name|std
operator|::
name|string
name|NewName
operator|=
name|SrcM
operator|.
name|getName
argument_list|()
block|;
for|for
control|(
name|auto
operator|*
name|F
operator|:
name|Part
control|)
block|{
name|NewName
operator|+=
literal|"."
expr_stmt|;
name|NewName
operator|+=
name|F
operator|->
name|getName
argument_list|()
expr_stmt|;
block|}
name|auto
name|M
operator|=
name|llvm
operator|::
name|make_unique
operator|<
name|Module
operator|>
operator|(
name|NewName
operator|,
name|SrcM
operator|.
name|getContext
argument_list|()
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|M
operator|->
name|setDataLayout
argument_list|(
name|SrcM
operator|.
name|getDataLayout
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|ValueToValueMapTy
name|VMap
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|auto
name|Materializer
init|=
name|createLambdaMaterializer
argument_list|(
argument|[this
argument_list|,
argument|&LMResources
argument_list|,
argument|&M
argument_list|,
argument|&VMap](Value *V) -> Value * {       if (auto *GV = dyn_cast<GlobalVariable>(V))         return cloneGlobalVariableDecl(*M, *GV);        if (auto *F = dyn_cast<Function>(V)) {
comment|// Check whether we want to clone an available_externally definition.
argument|if (!LMResources.StubsToClone.count(F))           return cloneFunctionDecl(*M, *F);
comment|// Ok - we want an inlinable stub. For that to work we need a decl
comment|// for the stub pointer.
argument|auto *StubPtr = createImplPointer(*F->getType(), *M,                                           F->getName() +
literal|"$stub_ptr"
argument|, nullptr);         auto *ClonedF = cloneFunctionDecl(*M, *F);         makeStub(*ClonedF, *StubPtr);         ClonedF->setLinkage(GlobalValue::AvailableExternallyLinkage);         ClonedF->addFnAttr(Attribute::AlwaysInline);         return ClonedF;       }        if (auto *A = dyn_cast<GlobalAlias>(V)) {         auto *Ty = A->getValueType();         if (Ty->isFunctionTy())           return Function::Create(cast<FunctionType>(Ty),                                   GlobalValue::ExternalLinkage, A->getName(),                                   M.get());          return new GlobalVariable(*M, Ty, false, GlobalValue::ExternalLinkage,                                   nullptr, A->getName(), nullptr,                                   GlobalValue::NotThreadLocal,                                   A->getType()->getAddressSpace());       }        return nullptr;     }
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Create decls in the new module.
end_comment

begin_for
for|for
control|(
name|auto
operator|*
name|F
operator|:
name|Part
control|)
name|cloneFunctionDecl
argument_list|(
operator|*
name|M
argument_list|,
operator|*
name|F
argument_list|,
operator|&
name|VMap
argument_list|)
expr_stmt|;
end_for

begin_comment
comment|// Move the function bodies.
end_comment

begin_for
for|for
control|(
name|auto
operator|*
name|F
operator|:
name|Part
control|)
name|moveFunctionBody
argument_list|(
operator|*
name|F
argument_list|,
name|VMap
argument_list|,
operator|&
name|Materializer
argument_list|)
expr_stmt|;
end_for

begin_comment
comment|// Create memory manager and symbol resolver.
end_comment

begin_decl_stmt
name|auto
name|Resolver
init|=
name|createLambdaResolver
argument_list|(
index|[
name|this
operator|,
operator|&
name|LD
operator|,
name|LMH
index|]
operator|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
operator|)
block|{
if|if
condition|(
name|auto
name|Symbol
init|=
name|LD
operator|.
name|findSymbolInternally
argument_list|(
name|LMH
argument_list|,
name|Name
argument_list|)
condition|)
return|return
name|RuntimeDyld
operator|::
name|SymbolInfo
argument_list|(
name|Symbol
operator|.
name|getAddress
argument_list|()
argument_list|,
name|Symbol
operator|.
name|getFlags
argument_list|()
argument_list|)
return|;
return|return
name|LD
operator|.
name|getDylibResources
argument_list|()
operator|.
name|ExternalSymbolResolver
argument_list|(
name|Name
argument_list|)
return|;
end_decl_stmt

begin_expr_stmt
unit|},
index|[
name|this
operator|,
operator|&
name|LD
operator|,
name|LMH
index|]
operator|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
operator|)
block|{
if|if
condition|(
name|auto
name|Symbol
init|=
name|LD
operator|.
name|findSymbolInternally
argument_list|(
name|LMH
argument_list|,
name|Name
argument_list|)
condition|)
return|return
name|RuntimeDyld
operator|::
name|SymbolInfo
argument_list|(
name|Symbol
operator|.
name|getAddress
argument_list|()
argument_list|,
name|Symbol
operator|.
name|getFlags
argument_list|()
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
name|RuntimeDyld
operator|::
name|SymbolInfo
argument_list|(
name|nullptr
argument_list|)
return|;
end_return

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

begin_return
return|return
name|LD
operator|.
name|getDylibResources
argument_list|()
operator|.
name|ModuleAdder
argument_list|(
name|BaseLayer
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|M
argument_list|)
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|Resolver
argument_list|)
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}    BaseLayerT
operator|&
name|BaseLayer
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|PartitioningFtor
name|Partition
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CompileCallbackMgrT
modifier|&
name|CompileCallbackMgr
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|IndirectStubsManagerBuilderT
name|CreateIndirectStubsManager
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|LogicalDylibList
name|LogicalDylibs
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|CloneStubsIntoPartitions
decl_stmt|;
end_decl_stmt

begin_comment
unit|};  }
comment|// End namespace orc.
end_comment

begin_comment
unit|}
comment|// End namespace llvm.
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_EXECUTIONENGINE_ORC_COMPILEONDEMANDLAYER_H
end_comment

end_unit

