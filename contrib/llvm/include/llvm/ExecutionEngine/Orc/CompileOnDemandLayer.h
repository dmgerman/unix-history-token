begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- CompileOnDemandLayer.h - Compile each function on demand -*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// JIT layer for breaking up modules and inserting callbacks to allow
end_comment

begin_comment
comment|// individual functions to be compiled on demand.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_EXECUTIONENGINE_ORC_COMPILEONDEMANDLAYER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_EXECUTIONENGINE_ORC_COMPILEONDEMANDLAYER_H
end_define

begin_include
include|#
directive|include
file|"IndirectionUtils.h"
end_include

begin_include
include|#
directive|include
file|"LambdaResolver.h"
end_include

begin_include
include|#
directive|include
file|"LogicalDylib.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/STLExtras.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ExecutionEngine/SectionMemoryManager.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Transforms/Utils/Cloning.h"
end_include

begin_include
include|#
directive|include
file|<list>
end_include

begin_include
include|#
directive|include
file|<set>
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Debug.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|orc
block|{
comment|/// @brief Compile-on-demand layer.
comment|///
comment|///   When a module is added to this layer a stub is created for each of its
comment|/// function definitions. The stubs and other global values are immediately
comment|/// added to the layer below. When a stub is called it triggers the extraction
comment|/// of the function body from the original module. The extracted body is then
comment|/// compiled and executed.
name|template
operator|<
name|typename
name|BaseLayerT
operator|,
name|typename
name|CompileCallbackMgrT
operator|,
name|typename
name|PartitioningFtor
operator|=
name|std
operator|::
name|function
operator|<
name|std
operator|::
name|set
operator|<
name|Function
operator|*
operator|>
operator|(
name|Function
operator|&
operator|)
operator|>>
name|class
name|CompileOnDemandLayer
block|{
name|private
operator|:
comment|// Utility class for MapValue. Only materializes declarations for global
comment|// variables.
name|class
name|GlobalDeclMaterializer
operator|:
name|public
name|ValueMaterializer
block|{
name|public
operator|:
typedef|typedef
name|std
operator|::
name|set
operator|<
specifier|const
name|Function
operator|*
operator|>
name|StubSet
expr_stmt|;
name|GlobalDeclMaterializer
argument_list|(
name|Module
operator|&
name|Dst
argument_list|,
specifier|const
name|StubSet
operator|*
name|StubsToClone
operator|=
name|nullptr
argument_list|)
operator|:
name|Dst
argument_list|(
name|Dst
argument_list|)
operator|,
name|StubsToClone
argument_list|(
argument|StubsToClone
argument_list|)
block|{}
name|Value
operator|*
name|materializeValueFor
argument_list|(
argument|Value *V
argument_list|)
name|final
block|{
if|if
condition|(
name|auto
operator|*
name|GV
operator|=
name|dyn_cast
operator|<
name|GlobalVariable
operator|>
operator|(
name|V
operator|)
condition|)
return|return
name|cloneGlobalVariableDecl
argument_list|(
name|Dst
argument_list|,
operator|*
name|GV
argument_list|)
return|;
elseif|else
if|if
condition|(
name|auto
operator|*
name|F
operator|=
name|dyn_cast
operator|<
name|Function
operator|>
operator|(
name|V
operator|)
condition|)
block|{
name|auto
operator|*
name|ClonedF
operator|=
name|cloneFunctionDecl
argument_list|(
name|Dst
argument_list|,
operator|*
name|F
argument_list|)
expr_stmt|;
if|if
condition|(
name|StubsToClone
operator|&&
name|StubsToClone
operator|->
name|count
argument_list|(
name|F
argument_list|)
condition|)
block|{
name|GlobalVariable
modifier|*
name|FnBodyPtr
init|=
name|createImplPointer
argument_list|(
operator|*
name|ClonedF
operator|->
name|getType
argument_list|()
argument_list|,
operator|*
name|ClonedF
operator|->
name|getParent
argument_list|()
argument_list|,
name|ClonedF
operator|->
name|getName
argument_list|()
operator|+
literal|"$orc_addr"
argument_list|,
name|nullptr
argument_list|)
decl_stmt|;
name|makeStub
argument_list|(
operator|*
name|ClonedF
argument_list|,
operator|*
name|FnBodyPtr
argument_list|)
expr_stmt|;
name|ClonedF
operator|->
name|setLinkage
argument_list|(
name|GlobalValue
operator|::
name|AvailableExternallyLinkage
argument_list|)
expr_stmt|;
name|ClonedF
operator|->
name|addFnAttr
argument_list|(
name|Attribute
operator|::
name|AlwaysInline
argument_list|)
expr_stmt|;
block|}
return|return
name|ClonedF
return|;
block|}
comment|// Else.
return|return
name|nullptr
return|;
block|}
name|private
operator|:
name|Module
operator|&
name|Dst
block|;
specifier|const
name|StubSet
operator|*
name|StubsToClone
block|;   }
expr_stmt|;
typedef|typedef
name|typename
name|BaseLayerT
operator|::
name|ModuleSetHandleT
name|BaseLayerModuleSetHandleT
expr_stmt|;
struct|struct
name|LogicalModuleResources
block|{
name|std
operator|::
name|shared_ptr
operator|<
name|Module
operator|>
name|SourceModule
expr_stmt|;
name|std
operator|::
name|set
operator|<
specifier|const
name|Function
operator|*
operator|>
name|StubsToClone
expr_stmt|;
block|}
struct|;
struct|struct
name|LogicalDylibResources
block|{
typedef|typedef
name|std
operator|::
name|function
operator|<
name|RuntimeDyld
operator|::
name|SymbolInfo
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
argument_list|)
operator|>
name|SymbolResolverFtor
expr_stmt|;
name|SymbolResolverFtor
name|ExternalSymbolResolver
decl_stmt|;
name|PartitioningFtor
name|Partitioner
decl_stmt|;
block|}
struct|;
typedef|typedef
name|LogicalDylib
operator|<
name|BaseLayerT
operator|,
name|LogicalModuleResources
operator|,
name|LogicalDylibResources
operator|>
name|CODLogicalDylib
expr_stmt|;
typedef|typedef
name|typename
name|CODLogicalDylib
operator|::
name|LogicalModuleHandle
name|LogicalModuleHandle
expr_stmt|;
typedef|typedef
name|std
operator|::
name|list
operator|<
name|CODLogicalDylib
operator|>
name|LogicalDylibList
expr_stmt|;
name|public
label|:
comment|/// @brief Handle to a set of loaded modules.
typedef|typedef
name|typename
name|LogicalDylibList
operator|::
name|iterator
name|ModuleSetHandleT
expr_stmt|;
comment|/// @brief Construct a compile-on-demand layer instance.
name|CompileOnDemandLayer
argument_list|(
argument|BaseLayerT&BaseLayer
argument_list|,
argument|CompileCallbackMgrT&CallbackMgr
argument_list|,
argument|bool CloneStubsIntoPartitions
argument_list|)
block|:
name|BaseLayer
argument_list|(
name|BaseLayer
argument_list|)
operator|,
name|CompileCallbackMgr
argument_list|(
name|CallbackMgr
argument_list|)
operator|,
name|CloneStubsIntoPartitions
argument_list|(
argument|CloneStubsIntoPartitions
argument_list|)
block|{}
comment|/// @brief Add a module to the compile-on-demand layer.
name|template
operator|<
name|typename
name|ModuleSetT
operator|,
name|typename
name|MemoryManagerPtrT
operator|,
name|typename
name|SymbolResolverPtrT
operator|>
name|ModuleSetHandleT
name|addModuleSet
argument_list|(
argument|ModuleSetT Ms
argument_list|,
argument|MemoryManagerPtrT MemMgr
argument_list|,
argument|SymbolResolverPtrT Resolver
argument_list|)
block|{
name|assert
argument_list|(
name|MemMgr
operator|==
name|nullptr
operator|&&
literal|"User supplied memory managers not supported with COD yet."
argument_list|)
block|;
name|LogicalDylibs
operator|.
name|push_back
argument_list|(
name|CODLogicalDylib
argument_list|(
name|BaseLayer
argument_list|)
argument_list|)
block|;
name|auto
operator|&
name|LDResources
operator|=
name|LogicalDylibs
operator|.
name|back
argument_list|()
operator|.
name|getDylibResources
argument_list|()
block|;
name|LDResources
operator|.
name|ExternalSymbolResolver
operator|=
index|[
name|Resolver
index|]
operator|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
operator|)
block|{
return|return
name|Resolver
operator|->
name|findSymbol
argument_list|(
name|Name
argument_list|)
return|;
block|}
block|;
name|LDResources
operator|.
name|Partitioner
operator|=
index|[]
operator|(
name|Function
operator|&
name|F
operator|)
block|{
name|std
operator|::
name|set
operator|<
name|Function
operator|*
operator|>
name|Partition
block|;
name|Partition
operator|.
name|insert
argument_list|(
operator|&
name|F
argument_list|)
block|;
return|return
name|Partition
return|;
block|}
block|;
comment|// Process each of the modules in this module set.
for|for
control|(
name|auto
operator|&
name|M
operator|:
name|Ms
control|)
name|addLogicalModule
argument_list|(
name|LogicalDylibs
operator|.
name|back
argument_list|()
argument_list|,
name|std
operator|::
name|shared_ptr
operator|<
name|Module
operator|>
operator|(
name|std
operator|::
name|move
argument_list|(
name|M
argument_list|)
operator|)
argument_list|)
expr_stmt|;
return|return
name|std
operator|::
name|prev
argument_list|(
name|LogicalDylibs
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
comment|/// @brief Remove the module represented by the given handle.
comment|///
comment|///   This will remove all modules in the layers below that were derived from
comment|/// the module represented by H.
name|void
name|removeModuleSet
parameter_list|(
name|ModuleSetHandleT
name|H
parameter_list|)
block|{
name|LogicalDylibs
operator|.
name|erase
argument_list|(
name|H
argument_list|)
expr_stmt|;
block|}
comment|/// @brief Search for the given named symbol.
comment|/// @param Name The name of the symbol to search for.
comment|/// @param ExportedSymbolsOnly If true, search only for exported symbols.
comment|/// @return A handle for the given named symbol, if it exists.
name|JITSymbol
name|findSymbol
parameter_list|(
name|StringRef
name|Name
parameter_list|,
name|bool
name|ExportedSymbolsOnly
parameter_list|)
block|{
return|return
name|BaseLayer
operator|.
name|findSymbol
argument_list|(
name|Name
argument_list|,
name|ExportedSymbolsOnly
argument_list|)
return|;
block|}
comment|/// @brief Get the address of a symbol provided by this layer, or some layer
comment|///        below this one.
name|JITSymbol
name|findSymbolIn
argument_list|(
name|ModuleSetHandleT
name|H
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
argument_list|,
name|bool
name|ExportedSymbolsOnly
argument_list|)
block|{
return|return
name|H
operator|->
name|findSymbol
argument_list|(
name|Name
argument_list|,
name|ExportedSymbolsOnly
argument_list|)
return|;
block|}
name|private
label|:
name|void
name|addLogicalModule
argument_list|(
name|CODLogicalDylib
operator|&
name|LD
argument_list|,
name|std
operator|::
name|shared_ptr
operator|<
name|Module
operator|>
name|SrcM
argument_list|)
block|{
comment|// Bump the linkage and rename any anonymous/privote members in SrcM to
comment|// ensure that everything will resolve properly after we partition SrcM.
name|makeAllSymbolsExternallyAccessible
argument_list|(
operator|*
name|SrcM
argument_list|)
expr_stmt|;
comment|// Create a logical module handle for SrcM within the logical dylib.
name|auto
name|LMH
init|=
name|LD
operator|.
name|createLogicalModule
argument_list|()
decl_stmt|;
name|auto
operator|&
name|LMResources
operator|=
name|LD
operator|.
name|getLogicalModuleResources
argument_list|(
name|LMH
argument_list|)
expr_stmt|;
name|LMResources
operator|.
name|SourceModule
operator|=
name|SrcM
expr_stmt|;
comment|// Create the GVs-and-stubs module.
name|auto
name|GVsAndStubsM
init|=
name|llvm
operator|::
name|make_unique
operator|<
name|Module
operator|>
operator|(
operator|(
name|SrcM
operator|->
name|getName
argument_list|()
operator|+
literal|".globals_and_stubs"
operator|)
operator|.
name|str
argument_list|()
expr|,
name|SrcM
operator|->
name|getContext
argument_list|()
operator|)
decl_stmt|;
name|GVsAndStubsM
operator|->
name|setDataLayout
argument_list|(
name|SrcM
operator|->
name|getDataLayout
argument_list|()
argument_list|)
expr_stmt|;
name|ValueToValueMapTy
name|VMap
decl_stmt|;
comment|// Process module and create stubs.
comment|// We create the stubs before copying the global variables as we know the
comment|// stubs won't refer to any globals (they only refer to their implementation
comment|// pointer) so there's no ordering/value-mapping issues.
for|for
control|(
name|auto
operator|&
name|F
operator|:
operator|*
name|SrcM
control|)
block|{
comment|// Skip declarations.
if|if
condition|(
name|F
operator|.
name|isDeclaration
argument_list|()
condition|)
continue|continue;
comment|// Record all functions defined by this module.
if|if
condition|(
name|CloneStubsIntoPartitions
condition|)
name|LMResources
operator|.
name|StubsToClone
operator|.
name|insert
argument_list|(
operator|&
name|F
argument_list|)
expr_stmt|;
comment|// For each definition: create a callback, a stub, and a function body
comment|// pointer. Initialize the function body pointer to point at the callback,
comment|// and set the callback to compile the function body.
name|auto
name|CCInfo
init|=
name|CompileCallbackMgr
operator|.
name|getCompileCallback
argument_list|(
name|SrcM
operator|->
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
name|Function
modifier|*
name|StubF
init|=
name|cloneFunctionDecl
argument_list|(
operator|*
name|GVsAndStubsM
argument_list|,
name|F
argument_list|,
operator|&
name|VMap
argument_list|)
decl_stmt|;
name|GlobalVariable
modifier|*
name|FnBodyPtr
init|=
name|createImplPointer
argument_list|(
operator|*
name|StubF
operator|->
name|getType
argument_list|()
argument_list|,
operator|*
name|StubF
operator|->
name|getParent
argument_list|()
argument_list|,
name|StubF
operator|->
name|getName
argument_list|()
operator|+
literal|"$orc_addr"
argument_list|,
name|createIRTypedAddress
argument_list|(
operator|*
name|StubF
operator|->
name|getFunctionType
argument_list|()
argument_list|,
name|CCInfo
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|makeStub
argument_list|(
operator|*
name|StubF
argument_list|,
operator|*
name|FnBodyPtr
argument_list|)
expr_stmt|;
name|CCInfo
operator|.
name|setCompileAction
argument_list|(
index|[
name|this
operator|,
operator|&
name|LD
operator|,
name|LMH
operator|,
operator|&
name|F
index|]
operator|(
operator|)
block|{
return|return
name|this
operator|->
name|extractAndCompile
argument_list|(
name|LD
argument_list|,
name|LMH
argument_list|,
name|F
argument_list|)
return|;
block|}
block|)
empty_stmt|;
block|}
comment|// Now clone the global variable declarations.
name|GlobalDeclMaterializer
name|GDMat
argument_list|(
operator|*
name|GVsAndStubsM
argument_list|)
decl_stmt|;
for|for
control|(
name|auto
operator|&
name|GV
operator|:
name|SrcM
operator|->
name|globals
argument_list|()
control|)
if|if
condition|(
operator|!
name|GV
operator|.
name|isDeclaration
argument_list|()
condition|)
name|cloneGlobalVariableDecl
argument_list|(
operator|*
name|GVsAndStubsM
argument_list|,
name|GV
argument_list|,
operator|&
name|VMap
argument_list|)
expr_stmt|;
comment|// Then clone the initializers.
for|for
control|(
name|auto
operator|&
name|GV
operator|:
name|SrcM
operator|->
name|globals
argument_list|()
control|)
if|if
condition|(
operator|!
name|GV
operator|.
name|isDeclaration
argument_list|()
condition|)
name|moveGlobalVariableInitializer
argument_list|(
name|GV
argument_list|,
name|VMap
argument_list|,
operator|&
name|GDMat
argument_list|)
expr_stmt|;
comment|// Build a resolver for the stubs module and add it to the base layer.
name|auto
name|GVsAndStubsResolver
init|=
name|createLambdaResolver
argument_list|(
index|[
operator|&
name|LD
index|]
operator|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
operator|)
block|{
return|return
name|LD
operator|.
name|getDylibResources
argument_list|()
operator|.
name|ExternalSymbolResolver
argument_list|(
name|Name
argument_list|)
return|;
block|}
operator|,
index|[]
operator|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
operator|)
block|{
return|return
name|RuntimeDyld
operator|::
name|SymbolInfo
argument_list|(
name|nullptr
argument_list|)
return|;
block|}
block|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|Module
operator|>>
name|GVsAndStubsMSet
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|GVsAndStubsMSet
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|GVsAndStubsM
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|auto
name|GVsAndStubsH
init|=
name|BaseLayer
operator|.
name|addModuleSet
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|GVsAndStubsMSet
argument_list|)
argument_list|,
name|llvm
operator|::
name|make_unique
operator|<
name|SectionMemoryManager
operator|>
operator|(
operator|)
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|GVsAndStubsResolver
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|LD
operator|.
name|addToLogicalModule
argument_list|(
name|LMH
argument_list|,
name|GVsAndStubsH
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}    static
name|std
operator|::
name|string
name|Mangle
argument_list|(
argument|StringRef Name
argument_list|,
argument|const DataLayout&DL
argument_list|)
block|{
name|std
operator|::
name|string
name|MangledName
block|;
block|{
name|raw_string_ostream
name|MangledNameStream
argument_list|(
name|MangledName
argument_list|)
block|;
name|Mangler
operator|::
name|getNameWithPrefix
argument_list|(
name|MangledNameStream
argument_list|,
name|Name
argument_list|,
name|DL
argument_list|)
block|;     }
return|return
name|MangledName
return|;
block|}
end_expr_stmt

begin_function
name|TargetAddress
name|extractAndCompile
parameter_list|(
name|CODLogicalDylib
modifier|&
name|LD
parameter_list|,
name|LogicalModuleHandle
name|LMH
parameter_list|,
name|Function
modifier|&
name|F
parameter_list|)
block|{
name|Module
modifier|&
name|SrcM
init|=
operator|*
name|LD
operator|.
name|getLogicalModuleResources
argument_list|(
name|LMH
argument_list|)
operator|.
name|SourceModule
decl_stmt|;
comment|// If F is a declaration we must already have compiled it.
if|if
condition|(
name|F
operator|.
name|isDeclaration
argument_list|()
condition|)
return|return
literal|0
return|;
comment|// Grab the name of the function being called here.
name|std
operator|::
name|string
name|CalledFnName
operator|=
name|Mangle
argument_list|(
name|F
operator|.
name|getName
argument_list|()
argument_list|,
name|SrcM
operator|.
name|getDataLayout
argument_list|()
argument_list|)
expr_stmt|;
name|auto
name|Partition
init|=
name|LD
operator|.
name|getDylibResources
argument_list|()
operator|.
name|Partitioner
argument_list|(
name|F
argument_list|)
decl_stmt|;
name|auto
name|PartitionH
init|=
name|emitPartition
argument_list|(
name|LD
argument_list|,
name|LMH
argument_list|,
name|Partition
argument_list|)
decl_stmt|;
name|TargetAddress
name|CalledAddr
init|=
literal|0
decl_stmt|;
for|for
control|(
name|auto
operator|*
name|SubF
operator|:
name|Partition
control|)
block|{
name|std
operator|::
name|string
name|FName
operator|=
name|SubF
operator|->
name|getName
argument_list|()
expr_stmt|;
name|auto
name|FnBodySym
init|=
name|BaseLayer
operator|.
name|findSymbolIn
argument_list|(
name|PartitionH
argument_list|,
name|Mangle
argument_list|(
name|FName
argument_list|,
name|SrcM
operator|.
name|getDataLayout
argument_list|()
argument_list|)
argument_list|,
name|false
argument_list|)
decl_stmt|;
name|auto
name|FnPtrSym
init|=
name|BaseLayer
operator|.
name|findSymbolIn
argument_list|(
operator|*
name|LD
operator|.
name|moduleHandlesBegin
argument_list|(
name|LMH
argument_list|)
argument_list|,
name|Mangle
argument_list|(
name|FName
operator|+
literal|"$orc_addr"
argument_list|,
name|SrcM
operator|.
name|getDataLayout
argument_list|()
argument_list|)
argument_list|,
name|false
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|FnBodySym
operator|&&
literal|"Couldn't find function body."
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|FnPtrSym
operator|&&
literal|"Couldn't find function body pointer."
argument_list|)
expr_stmt|;
name|TargetAddress
name|FnBodyAddr
init|=
name|FnBodySym
operator|.
name|getAddress
argument_list|()
decl_stmt|;
name|void
modifier|*
name|FnPtrAddr
init|=
name|reinterpret_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|static_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|FnPtrSym
operator|.
name|getAddress
argument_list|()
operator|)
operator|)
decl_stmt|;
comment|// If this is the function we're calling record the address so we can
comment|// return it from this function.
if|if
condition|(
name|SubF
operator|==
operator|&
name|F
condition|)
name|CalledAddr
operator|=
name|FnBodyAddr
expr_stmt|;
name|memcpy
argument_list|(
name|FnPtrAddr
argument_list|,
operator|&
name|FnBodyAddr
argument_list|,
sizeof|sizeof
argument_list|(
name|uintptr_t
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|CalledAddr
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|typename
name|PartitionT
operator|>
name|BaseLayerModuleSetHandleT
name|emitPartition
argument_list|(
argument|CODLogicalDylib&LD
argument_list|,
argument|LogicalModuleHandle LMH
argument_list|,
argument|const PartitionT&Partition
argument_list|)
block|{
name|auto
operator|&
name|LMResources
operator|=
name|LD
operator|.
name|getLogicalModuleResources
argument_list|(
name|LMH
argument_list|)
block|;
name|Module
operator|&
name|SrcM
operator|=
operator|*
name|LMResources
operator|.
name|SourceModule
block|;
comment|// Create the module.
name|std
operator|::
name|string
name|NewName
operator|=
name|SrcM
operator|.
name|getName
argument_list|()
block|;
for|for
control|(
name|auto
operator|*
name|F
operator|:
name|Partition
control|)
block|{
name|NewName
operator|+=
literal|"."
expr_stmt|;
name|NewName
operator|+=
name|F
operator|->
name|getName
argument_list|()
expr_stmt|;
block|}
name|auto
name|M
operator|=
name|llvm
operator|::
name|make_unique
operator|<
name|Module
operator|>
operator|(
name|NewName
operator|,
name|SrcM
operator|.
name|getContext
argument_list|()
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|M
operator|->
name|setDataLayout
argument_list|(
name|SrcM
operator|.
name|getDataLayout
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|ValueToValueMapTy
name|VMap
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|GlobalDeclMaterializer
name|GDM
argument_list|(
operator|*
name|M
argument_list|,
operator|&
name|LMResources
operator|.
name|StubsToClone
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Create decls in the new module.
end_comment

begin_for
for|for
control|(
name|auto
operator|*
name|F
operator|:
name|Partition
control|)
name|cloneFunctionDecl
argument_list|(
operator|*
name|M
argument_list|,
operator|*
name|F
argument_list|,
operator|&
name|VMap
argument_list|)
expr_stmt|;
end_for

begin_comment
comment|// Move the function bodies.
end_comment

begin_for
for|for
control|(
name|auto
operator|*
name|F
operator|:
name|Partition
control|)
name|moveFunctionBody
argument_list|(
operator|*
name|F
argument_list|,
name|VMap
argument_list|,
operator|&
name|GDM
argument_list|)
expr_stmt|;
end_for

begin_comment
comment|// Create memory manager and symbol resolver.
end_comment

begin_decl_stmt
name|auto
name|MemMgr
init|=
name|llvm
operator|::
name|make_unique
operator|<
name|SectionMemoryManager
operator|>
operator|(
operator|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|auto
name|Resolver
init|=
name|createLambdaResolver
argument_list|(
index|[
name|this
operator|,
operator|&
name|LD
operator|,
name|LMH
index|]
operator|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
operator|)
block|{
if|if
condition|(
name|auto
name|Symbol
init|=
name|LD
operator|.
name|findSymbolInternally
argument_list|(
name|LMH
argument_list|,
name|Name
argument_list|)
condition|)
return|return
name|RuntimeDyld
operator|::
name|SymbolInfo
argument_list|(
name|Symbol
operator|.
name|getAddress
argument_list|()
argument_list|,
name|Symbol
operator|.
name|getFlags
argument_list|()
argument_list|)
return|;
return|return
name|LD
operator|.
name|getDylibResources
argument_list|()
operator|.
name|ExternalSymbolResolver
argument_list|(
name|Name
argument_list|)
return|;
end_decl_stmt

begin_expr_stmt
unit|},
index|[
name|this
operator|,
operator|&
name|LD
operator|,
name|LMH
index|]
operator|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
operator|)
block|{
if|if
condition|(
name|auto
name|Symbol
init|=
name|LD
operator|.
name|findSymbolInternally
argument_list|(
name|LMH
argument_list|,
name|Name
argument_list|)
condition|)
return|return
name|RuntimeDyld
operator|::
name|SymbolInfo
argument_list|(
name|Symbol
operator|.
name|getAddress
argument_list|()
argument_list|,
name|Symbol
operator|.
name|getFlags
argument_list|()
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
name|RuntimeDyld
operator|::
name|SymbolInfo
argument_list|(
name|nullptr
argument_list|)
return|;
end_return

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|Module
operator|>>
name|PartMSet
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|PartMSet
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|M
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|BaseLayer
operator|.
name|addModuleSet
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|PartMSet
argument_list|)
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|MemMgr
argument_list|)
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|Resolver
argument_list|)
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}    BaseLayerT
operator|&
name|BaseLayer
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|CompileCallbackMgrT
modifier|&
name|CompileCallbackMgr
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|LogicalDylibList
name|LogicalDylibs
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|CloneStubsIntoPartitions
decl_stmt|;
end_decl_stmt

begin_comment
unit|};  }
comment|// End namespace orc.
end_comment

begin_comment
unit|}
comment|// End namespace llvm.
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_EXECUTIONENGINE_ORC_COMPILEONDEMANDLAYER_H
end_comment

end_unit

