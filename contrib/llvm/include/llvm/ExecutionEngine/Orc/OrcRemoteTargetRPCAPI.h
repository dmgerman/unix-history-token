begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- OrcRemoteTargetRPCAPI.h - Orc Remote-target RPC API ----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines the Orc remote-target RPC API. It should not be used
end_comment

begin_comment
comment|// directly, but is used by the RemoteTargetClient and RemoteTargetServer
end_comment

begin_comment
comment|// classes.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_EXECUTIONENGINE_ORC_ORCREMOTETARGETRPCAPI_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_EXECUTIONENGINE_ORC_ORCREMOTETARGETRPCAPI_H
end_define

begin_include
include|#
directive|include
file|"JITSymbol.h"
end_include

begin_include
include|#
directive|include
file|"RPCChannel.h"
end_include

begin_include
include|#
directive|include
file|"RPCUtils.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|orc
block|{
name|namespace
name|remote
block|{
name|class
name|DirectBufferWriter
block|{
name|public
label|:
name|DirectBufferWriter
argument_list|()
operator|=
expr|default
expr_stmt|;
name|DirectBufferWriter
argument_list|(
argument|const char *Src
argument_list|,
argument|TargetAddress Dst
argument_list|,
argument|uint64_t Size
argument_list|)
block|:
name|Src
argument_list|(
name|Src
argument_list|)
operator|,
name|Dst
argument_list|(
name|Dst
argument_list|)
operator|,
name|Size
argument_list|(
argument|Size
argument_list|)
block|{}
specifier|const
name|char
operator|*
name|getSrc
argument_list|()
specifier|const
block|{
return|return
name|Src
return|;
block|}
name|TargetAddress
name|getDst
argument_list|()
specifier|const
block|{
return|return
name|Dst
return|;
block|}
name|uint64_t
name|getSize
argument_list|()
specifier|const
block|{
return|return
name|Size
return|;
block|}
name|private
label|:
specifier|const
name|char
modifier|*
name|Src
decl_stmt|;
name|TargetAddress
name|Dst
decl_stmt|;
name|uint64_t
name|Size
decl_stmt|;
block|}
empty_stmt|;
specifier|inline
name|Error
name|serialize
parameter_list|(
name|RPCChannel
modifier|&
name|C
parameter_list|,
specifier|const
name|DirectBufferWriter
modifier|&
name|DBW
parameter_list|)
block|{
if|if
condition|(
name|auto
name|EC
init|=
name|serialize
argument_list|(
name|C
argument_list|,
name|DBW
operator|.
name|getDst
argument_list|()
argument_list|)
condition|)
return|return
name|EC
return|;
if|if
condition|(
name|auto
name|EC
init|=
name|serialize
argument_list|(
name|C
argument_list|,
name|DBW
operator|.
name|getSize
argument_list|()
argument_list|)
condition|)
return|return
name|EC
return|;
return|return
name|C
operator|.
name|appendBytes
argument_list|(
name|DBW
operator|.
name|getSrc
argument_list|()
argument_list|,
name|DBW
operator|.
name|getSize
argument_list|()
argument_list|)
return|;
block|}
specifier|inline
name|Error
name|deserialize
parameter_list|(
name|RPCChannel
modifier|&
name|C
parameter_list|,
name|DirectBufferWriter
modifier|&
name|DBW
parameter_list|)
block|{
name|TargetAddress
name|Dst
decl_stmt|;
if|if
condition|(
name|auto
name|EC
init|=
name|deserialize
argument_list|(
name|C
argument_list|,
name|Dst
argument_list|)
condition|)
return|return
name|EC
return|;
name|uint64_t
name|Size
decl_stmt|;
if|if
condition|(
name|auto
name|EC
init|=
name|deserialize
argument_list|(
name|C
argument_list|,
name|Size
argument_list|)
condition|)
return|return
name|EC
return|;
name|char
modifier|*
name|Addr
init|=
name|reinterpret_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|static_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|Dst
operator|)
operator|)
decl_stmt|;
name|DBW
operator|=
name|DirectBufferWriter
argument_list|(
literal|0
argument_list|,
name|Dst
argument_list|,
name|Size
argument_list|)
expr_stmt|;
return|return
name|C
operator|.
name|readBytes
argument_list|(
name|Addr
argument_list|,
name|Size
argument_list|)
return|;
block|}
name|class
name|OrcRemoteTargetRPCAPI
range|:
name|public
name|RPC
operator|<
name|RPCChannel
operator|>
block|{
name|protected
operator|:
name|class
name|ResourceIdMgr
block|{
name|public
operator|:
typedef|typedef
name|uint64_t
name|ResourceId
typedef|;
specifier|static
specifier|const
name|ResourceId
name|InvalidId
operator|=
operator|~
literal|0U
block|;
name|ResourceId
name|getNext
argument_list|()
block|{
if|if
condition|(
operator|!
name|FreeIds
operator|.
name|empty
argument_list|()
condition|)
block|{
name|ResourceId
name|I
init|=
name|FreeIds
operator|.
name|back
argument_list|()
decl_stmt|;
name|FreeIds
operator|.
name|pop_back
argument_list|()
expr_stmt|;
return|return
name|I
return|;
block|}
return|return
name|NextId
operator|++
return|;
block|}
name|void
name|release
argument_list|(
argument|ResourceId I
argument_list|)
block|{
name|FreeIds
operator|.
name|push_back
argument_list|(
name|I
argument_list|)
block|; }
name|private
operator|:
name|ResourceId
name|NextId
operator|=
literal|0
block|;
name|std
operator|::
name|vector
operator|<
name|ResourceId
operator|>
name|FreeIds
block|;   }
decl_stmt|;
name|public
label|:
comment|// FIXME: Remove constructors once MSVC supports synthesizing move-ops.
name|OrcRemoteTargetRPCAPI
argument_list|()
operator|=
expr|default
expr_stmt|;
name|OrcRemoteTargetRPCAPI
argument_list|(
specifier|const
name|OrcRemoteTargetRPCAPI
operator|&
argument_list|)
operator|=
name|delete
expr_stmt|;
name|OrcRemoteTargetRPCAPI
modifier|&
name|operator
init|=
operator|(
specifier|const
name|OrcRemoteTargetRPCAPI
operator|&
operator|)
operator|=
name|delete
decl_stmt|;
name|OrcRemoteTargetRPCAPI
argument_list|(
argument|OrcRemoteTargetRPCAPI&&
argument_list|)
block|{}
name|OrcRemoteTargetRPCAPI
modifier|&
name|operator
init|=
operator|(
name|OrcRemoteTargetRPCAPI
operator|&&
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
enum|enum
name|JITFuncId
enum|:
name|uint32_t
block|{
name|InvalidId
init|=
name|RPCFunctionIdTraits
operator|<
name|JITFuncId
operator|>
operator|::
name|InvalidId
block|,
name|CallIntVoidId
init|=
name|RPCFunctionIdTraits
operator|<
name|JITFuncId
operator|>
operator|::
name|FirstValidId
block|,
name|CallMainId
block|,
name|CallVoidVoidId
block|,
name|CreateRemoteAllocatorId
block|,
name|CreateIndirectStubsOwnerId
block|,
name|DeregisterEHFramesId
block|,
name|DestroyRemoteAllocatorId
block|,
name|DestroyIndirectStubsOwnerId
block|,
name|EmitIndirectStubsId
block|,
name|EmitResolverBlockId
block|,
name|EmitTrampolineBlockId
block|,
name|GetSymbolAddressId
block|,
name|GetRemoteInfoId
block|,
name|ReadMemId
block|,
name|RegisterEHFramesId
block|,
name|ReserveMemId
block|,
name|RequestCompileId
block|,
name|SetProtectionsId
block|,
name|TerminateSessionId
block|,
name|WriteMemId
block|,
name|WritePtrId
block|}
enum|;
specifier|static
specifier|const
name|char
modifier|*
name|getJITFuncIdName
parameter_list|(
name|JITFuncId
name|Id
parameter_list|)
function_decl|;
typedef|typedef
name|Function
operator|<
name|CallIntVoidId
operator|,
name|int32_t
argument_list|(
argument|TargetAddress Addr
argument_list|)
operator|>
name|CallIntVoid
expr_stmt|;
typedef|typedef
name|Function
operator|<
name|CallMainId
operator|,
name|int32_t
argument_list|(
argument|TargetAddress Addr
argument_list|,
argument|std::vector<std::string> Args
argument_list|)
operator|>
name|CallMain
expr_stmt|;
typedef|typedef
name|Function
operator|<
name|CallVoidVoidId
operator|,
name|void
argument_list|(
argument|TargetAddress FnAddr
argument_list|)
operator|>
name|CallVoidVoid
expr_stmt|;
typedef|typedef
name|Function
operator|<
name|CreateRemoteAllocatorId
operator|,
name|void
argument_list|(
argument|ResourceIdMgr::ResourceId AllocatorID
argument_list|)
operator|>
name|CreateRemoteAllocator
expr_stmt|;
typedef|typedef
name|Function
operator|<
name|CreateIndirectStubsOwnerId
operator|,
name|void
argument_list|(
argument|ResourceIdMgr::ResourceId StubOwnerID
argument_list|)
operator|>
name|CreateIndirectStubsOwner
expr_stmt|;
typedef|typedef
name|Function
operator|<
name|DeregisterEHFramesId
operator|,
name|void
argument_list|(
argument|TargetAddress Addr
argument_list|,
argument|uint32_t Size
argument_list|)
operator|>
name|DeregisterEHFrames
expr_stmt|;
typedef|typedef
name|Function
operator|<
name|DestroyRemoteAllocatorId
operator|,
name|void
argument_list|(
argument|ResourceIdMgr::ResourceId AllocatorID
argument_list|)
operator|>
name|DestroyRemoteAllocator
expr_stmt|;
typedef|typedef
name|Function
operator|<
name|DestroyIndirectStubsOwnerId
operator|,
name|void
argument_list|(
argument|ResourceIdMgr::ResourceId StubsOwnerID
argument_list|)
operator|>
name|DestroyIndirectStubsOwner
expr_stmt|;
comment|/// EmitIndirectStubs result is (StubsBase, PtrsBase, NumStubsEmitted).
typedef|typedef
name|Function
operator|<
name|EmitIndirectStubsId
operator|,
name|std
operator|::
name|tuple
operator|<
name|TargetAddress
operator|,
name|TargetAddress
operator|,
name|uint32_t
operator|>
operator|(
name|ResourceIdMgr
operator|::
name|ResourceId
name|StubsOwnerID
operator|,
name|uint32_t
name|NumStubsRequired
operator|)
operator|>
name|EmitIndirectStubs
expr_stmt|;
typedef|typedef
name|Function
operator|<
name|EmitResolverBlockId
operator|,
name|void
argument_list|()
operator|>
name|EmitResolverBlock
expr_stmt|;
comment|/// EmitTrampolineBlock result is (BlockAddr, NumTrampolines).
typedef|typedef
name|Function
operator|<
name|EmitTrampolineBlockId
operator|,
name|std
operator|::
name|tuple
operator|<
name|TargetAddress
operator|,
name|uint32_t
operator|>
operator|(
operator|)
operator|>
name|EmitTrampolineBlock
expr_stmt|;
typedef|typedef
name|Function
operator|<
name|GetSymbolAddressId
operator|,
name|TargetAddress
argument_list|(
argument|std::string SymbolName
argument_list|)
operator|>
name|GetSymbolAddress
expr_stmt|;
comment|/// GetRemoteInfo result is (Triple, PointerSize, PageSize, TrampolineSize,
comment|///                          IndirectStubsSize).
typedef|typedef
name|Function
operator|<
name|GetRemoteInfoId
operator|,
name|std
operator|::
name|tuple
operator|<
name|std
operator|::
name|string
operator|,
name|uint32_t
operator|,
name|uint32_t
operator|,
name|uint32_t
operator|,
name|uint32_t
operator|>
operator|(
operator|)
operator|>
name|GetRemoteInfo
expr_stmt|;
typedef|typedef
name|Function
operator|<
name|ReadMemId
operator|,
name|std
operator|::
name|vector
operator|<
name|char
operator|>
operator|(
name|TargetAddress
name|Src
operator|,
name|uint64_t
name|Size
operator|)
operator|>
name|ReadMem
expr_stmt|;
typedef|typedef
name|Function
operator|<
name|RegisterEHFramesId
operator|,
name|void
argument_list|(
argument|TargetAddress Addr
argument_list|,
argument|uint32_t Size
argument_list|)
operator|>
name|RegisterEHFrames
expr_stmt|;
typedef|typedef
name|Function
operator|<
name|ReserveMemId
operator|,
name|TargetAddress
argument_list|(
argument|ResourceIdMgr::ResourceId AllocID
argument_list|,
argument|uint64_t Size
argument_list|,
argument|uint32_t Align
argument_list|)
operator|>
name|ReserveMem
expr_stmt|;
typedef|typedef
name|Function
operator|<
name|RequestCompileId
operator|,
name|TargetAddress
argument_list|(
argument|TargetAddress TrampolineAddr
argument_list|)
operator|>
name|RequestCompile
expr_stmt|;
typedef|typedef
name|Function
operator|<
name|SetProtectionsId
operator|,
name|void
argument_list|(
argument|ResourceIdMgr::ResourceId AllocID
argument_list|,
argument|TargetAddress Dst
argument_list|,
argument|uint32_t ProtFlags
argument_list|)
operator|>
name|SetProtections
expr_stmt|;
typedef|typedef
name|Function
operator|<
name|TerminateSessionId
operator|,
name|void
argument_list|()
operator|>
name|TerminateSession
expr_stmt|;
typedef|typedef
name|Function
operator|<
name|WriteMemId
operator|,
name|void
argument_list|(
argument|DirectBufferWriter DB
argument_list|)
operator|>
name|WriteMem
expr_stmt|;
typedef|typedef
name|Function
operator|<
name|WritePtrId
operator|,
name|void
argument_list|(
argument|TargetAddress Dst
argument_list|,
argument|TargetAddress Val
argument_list|)
operator|>
name|WritePtr
expr_stmt|;
block|}
empty_stmt|;
block|}
comment|// end namespace remote
block|}
end_decl_stmt

begin_comment
comment|// end namespace orc
end_comment

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

