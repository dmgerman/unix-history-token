begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===------ JITSymbolFlags.h - Flags for symbols in the JIT -----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Symbol flags for symbols in the JIT (e.g. weak, exported).
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_EXECUTIONENGINE_JITSYMBOLFLAGS_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_EXECUTIONENGINE_JITSYMBOLFLAGS_H
end_define

begin_include
include|#
directive|include
file|"llvm/IR/GlobalValue.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/SymbolicFile.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|/// @brief Flags for symbols in the JIT.
name|enum
name|class
name|JITSymbolFlags
range|:
name|char
block|{
name|None
operator|=
literal|0
block|,
name|Weak
operator|=
literal|1U
operator|<<
literal|0
block|,
name|Exported
operator|=
literal|1U
operator|<<
literal|1
block|}
decl_stmt|;
specifier|inline
name|JITSymbolFlags
name|operator
operator||
operator|(
name|JITSymbolFlags
name|LHS
operator|,
name|JITSymbolFlags
name|RHS
operator|)
block|{
typedef|typedef
name|std
operator|::
name|underlying_type
operator|<
name|JITSymbolFlags
operator|>
operator|::
name|type
name|UT
expr_stmt|;
return|return
name|static_cast
operator|<
name|JITSymbolFlags
operator|>
operator|(
name|static_cast
operator|<
name|UT
operator|>
operator|(
name|LHS
operator|)
operator||
name|static_cast
operator|<
name|UT
operator|>
operator|(
name|RHS
operator|)
operator|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
specifier|inline
name|JITSymbolFlags
operator|&
name|operator
operator||=
operator|(
name|JITSymbolFlags
operator|&
name|LHS
operator|,
name|JITSymbolFlags
name|RHS
operator|)
block|{
name|LHS
operator|=
name|LHS
operator||
name|RHS
block|;
return|return
name|LHS
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|JITSymbolFlags
name|operator
function|&(
name|JITSymbolFlags
name|LHS
function|,
name|JITSymbolFlags
function|RHS
end_function

begin_block
unit|)
block|{
typedef|typedef
name|std
operator|::
name|underlying_type
operator|<
name|JITSymbolFlags
operator|>
operator|::
name|type
name|UT
expr_stmt|;
return|return
name|static_cast
operator|<
name|JITSymbolFlags
operator|>
operator|(
name|static_cast
operator|<
name|UT
operator|>
operator|(
name|LHS
operator|)
operator|&
name|static_cast
operator|<
name|UT
operator|>
operator|(
name|RHS
operator|)
operator|)
return|;
block|}
end_block

begin_expr_stmt
specifier|inline
name|JITSymbolFlags
operator|&
name|operator
operator|&=
operator|(
name|JITSymbolFlags
operator|&
name|LHS
operator|,
name|JITSymbolFlags
name|RHS
operator|)
block|{
name|LHS
operator|=
name|LHS
operator|&
name|RHS
block|;
return|return
name|LHS
return|;
block|}
end_expr_stmt

begin_comment
comment|/// @brief Base class for symbols in the JIT.
end_comment

begin_decl_stmt
name|class
name|JITSymbolBase
block|{
name|public
label|:
name|JITSymbolBase
argument_list|(
argument|JITSymbolFlags Flags
argument_list|)
block|:
name|Flags
argument_list|(
argument|Flags
argument_list|)
block|{}
name|JITSymbolFlags
name|getFlags
argument_list|()
specifier|const
block|{
return|return
name|Flags
return|;
block|}
name|bool
name|isWeak
argument_list|()
specifier|const
block|{
return|return
operator|(
name|Flags
operator|&
name|JITSymbolFlags
operator|::
name|Weak
operator|)
operator|==
name|JITSymbolFlags
operator|::
name|Weak
return|;
block|}
name|bool
name|isExported
argument_list|()
specifier|const
block|{
return|return
operator|(
name|Flags
operator|&
name|JITSymbolFlags
operator|::
name|Exported
operator|)
operator|==
name|JITSymbolFlags
operator|::
name|Exported
return|;
block|}
specifier|static
name|JITSymbolFlags
name|flagsFromGlobalValue
parameter_list|(
specifier|const
name|GlobalValue
modifier|&
name|GV
parameter_list|)
block|{
name|JITSymbolFlags
name|Flags
init|=
name|JITSymbolFlags
operator|::
name|None
decl_stmt|;
if|if
condition|(
name|GV
operator|.
name|hasWeakLinkage
argument_list|()
condition|)
name|Flags
operator||=
name|JITSymbolFlags
operator|::
name|Weak
expr_stmt|;
if|if
condition|(
operator|!
name|GV
operator|.
name|hasLocalLinkage
argument_list|()
operator|&&
operator|!
name|GV
operator|.
name|hasHiddenVisibility
argument_list|()
condition|)
name|Flags
operator||=
name|JITSymbolFlags
operator|::
name|Exported
expr_stmt|;
return|return
name|Flags
return|;
block|}
specifier|static
name|JITSymbolFlags
name|flagsFromObjectSymbol
argument_list|(
specifier|const
name|object
operator|::
name|BasicSymbolRef
operator|&
name|Symbol
argument_list|)
block|{
name|JITSymbolFlags
name|Flags
init|=
name|JITSymbolFlags
operator|::
name|None
decl_stmt|;
if|if
condition|(
name|Symbol
operator|.
name|getFlags
argument_list|()
operator|&
name|object
operator|::
name|BasicSymbolRef
operator|::
name|SF_Weak
condition|)
name|Flags
operator||=
name|JITSymbolFlags
operator|::
name|Weak
expr_stmt|;
if|if
condition|(
name|Symbol
operator|.
name|getFlags
argument_list|()
operator|&
name|object
operator|::
name|BasicSymbolRef
operator|::
name|SF_Exported
condition|)
name|Flags
operator||=
name|JITSymbolFlags
operator|::
name|Exported
expr_stmt|;
return|return
name|Flags
return|;
block|}
name|private
label|:
name|JITSymbolFlags
name|Flags
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

