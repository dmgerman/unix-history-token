begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- llvm/CodeGen/DwarfStringPoolEntry.h - String pool entry --*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CODEGEN_DWARFSTRINGPOOLENTRY_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CODEGEN_DWARFSTRINGPOOLENTRY_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/StringMap.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MCSymbol
decl_stmt|;
comment|/// Data for a string pool entry.
struct|struct
name|DwarfStringPoolEntry
block|{
name|MCSymbol
modifier|*
name|Symbol
decl_stmt|;
name|unsigned
name|Offset
decl_stmt|;
name|unsigned
name|Index
decl_stmt|;
block|}
struct|;
comment|/// String pool entry reference.
struct|struct
name|DwarfStringPoolEntryRef
block|{
specifier|const
name|StringMapEntry
operator|<
name|DwarfStringPoolEntry
operator|>
operator|*
name|I
operator|=
name|nullptr
expr_stmt|;
name|public
label|:
name|DwarfStringPoolEntryRef
argument_list|()
operator|=
expr|default
expr_stmt|;
name|explicit
name|DwarfStringPoolEntryRef
argument_list|(
specifier|const
name|StringMapEntry
operator|<
name|DwarfStringPoolEntry
operator|>
operator|&
name|I
argument_list|)
range|:
name|I
argument_list|(
argument|&I
argument_list|)
block|{}
name|explicit
name|operator
name|bool
argument_list|()
specifier|const
block|{
return|return
name|I
return|;
block|}
name|MCSymbol
operator|*
name|getSymbol
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|I
operator|->
name|second
operator|.
name|Symbol
operator|&&
literal|"No symbol available!"
argument_list|)
block|;
return|return
name|I
operator|->
name|second
operator|.
name|Symbol
return|;
block|}
name|unsigned
name|getOffset
argument_list|()
specifier|const
block|{
return|return
name|I
operator|->
name|second
operator|.
name|Offset
return|;
block|}
name|unsigned
name|getIndex
argument_list|()
specifier|const
block|{
return|return
name|I
operator|->
name|second
operator|.
name|Index
return|;
block|}
name|StringRef
name|getString
argument_list|()
specifier|const
block|{
return|return
name|I
operator|->
name|first
argument_list|()
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|DwarfStringPoolEntryRef
operator|&
name|X
operator|)
specifier|const
block|{
return|return
name|I
operator|==
name|X
operator|.
name|I
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|DwarfStringPoolEntryRef
operator|&
name|X
operator|)
specifier|const
block|{
return|return
name|I
operator|!=
name|X
operator|.
name|I
return|;
block|}
block|}
struct|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

