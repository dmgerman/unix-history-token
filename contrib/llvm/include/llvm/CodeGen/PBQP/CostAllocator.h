begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===---------- CostAllocator.h - PBQP Cost Allocator -----------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Defines classes conforming to the PBQP cost value manager concept.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Cost value managers are memory managers for PBQP cost values (vectors and
end_comment

begin_comment
comment|// matrices). Since PBQP graphs can grow very large (E.g. hundreds of thousands
end_comment

begin_comment
comment|// of edges on the largest function in SPEC2006).
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CODEGEN_PBQP_COSTALLOCATOR_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CODEGEN_PBQP_COSTALLOCATOR_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/DenseSet.h"
end_include

begin_include
include|#
directive|include
file|<memory>
end_include

begin_include
include|#
directive|include
file|<type_traits>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|PBQP
block|{
name|template
operator|<
name|typename
name|ValueT
operator|>
name|class
name|ValuePool
block|{
name|public
operator|:
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
specifier|const
name|ValueT
operator|>
name|PoolRef
expr_stmt|;
name|private
operator|:
name|class
name|PoolEntry
operator|:
name|public
name|std
operator|::
name|enable_shared_from_this
operator|<
name|PoolEntry
operator|>
block|{
name|public
operator|:
name|template
operator|<
name|typename
name|ValueKeyT
operator|>
name|PoolEntry
argument_list|(
argument|ValuePool&Pool
argument_list|,
argument|ValueKeyT Value
argument_list|)
operator|:
name|Pool
argument_list|(
name|Pool
argument_list|)
block|,
name|Value
argument_list|(
argument|std::move(Value)
argument_list|)
block|{}
operator|~
name|PoolEntry
argument_list|()
block|{
name|Pool
operator|.
name|removeEntry
argument_list|(
name|this
argument_list|)
block|; }
specifier|const
name|ValueT
operator|&
name|getValue
argument_list|()
specifier|const
block|{
return|return
name|Value
return|;
block|}
name|private
operator|:
name|ValuePool
operator|&
name|Pool
block|;
name|ValueT
name|Value
block|;   }
expr_stmt|;
name|class
name|PoolEntryDSInfo
block|{
name|public
label|:
specifier|static
specifier|inline
name|PoolEntry
modifier|*
name|getEmptyKey
parameter_list|()
block|{
return|return
name|nullptr
return|;
block|}
specifier|static
specifier|inline
name|PoolEntry
modifier|*
name|getTombstoneKey
parameter_list|()
block|{
return|return
name|reinterpret_cast
operator|<
name|PoolEntry
operator|*
operator|>
operator|(
name|static_cast
operator|<
name|uintptr_t
operator|>
operator|(
literal|1
operator|)
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|ValueKeyT
operator|>
specifier|static
name|unsigned
name|getHashValue
argument_list|(
argument|const ValueKeyT&C
argument_list|)
block|{
return|return
name|hash_value
argument_list|(
name|C
argument_list|)
return|;
block|}
specifier|static
name|unsigned
name|getHashValue
parameter_list|(
name|PoolEntry
modifier|*
name|P
parameter_list|)
block|{
return|return
name|getHashValue
argument_list|(
name|P
operator|->
name|getValue
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|unsigned
name|getHashValue
parameter_list|(
specifier|const
name|PoolEntry
modifier|*
name|P
parameter_list|)
block|{
return|return
name|getHashValue
argument_list|(
name|P
operator|->
name|getValue
argument_list|()
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|ValueKeyT1
operator|,
name|typename
name|ValueKeyT2
operator|>
specifier|static
name|bool
name|isEqual
argument_list|(
argument|const ValueKeyT1&C1
argument_list|,
argument|const ValueKeyT2&C2
argument_list|)
block|{
return|return
name|C1
operator|==
name|C2
return|;
block|}
name|template
operator|<
name|typename
name|ValueKeyT
operator|>
specifier|static
name|bool
name|isEqual
argument_list|(
argument|const ValueKeyT&C
argument_list|,
argument|PoolEntry *P
argument_list|)
block|{
if|if
condition|(
name|P
operator|==
name|getEmptyKey
argument_list|()
operator|||
name|P
operator|==
name|getTombstoneKey
argument_list|()
condition|)
return|return
name|false
return|;
return|return
name|isEqual
argument_list|(
name|C
argument_list|,
name|P
operator|->
name|getValue
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|bool
name|isEqual
parameter_list|(
name|PoolEntry
modifier|*
name|P1
parameter_list|,
name|PoolEntry
modifier|*
name|P2
parameter_list|)
block|{
if|if
condition|(
name|P1
operator|==
name|getEmptyKey
argument_list|()
operator|||
name|P1
operator|==
name|getTombstoneKey
argument_list|()
condition|)
return|return
name|P1
operator|==
name|P2
return|;
return|return
name|isEqual
argument_list|(
name|P1
operator|->
name|getValue
argument_list|()
argument_list|,
name|P2
argument_list|)
return|;
block|}
block|}
empty_stmt|;
typedef|typedef
name|DenseSet
operator|<
name|PoolEntry
operator|*
operator|,
name|PoolEntryDSInfo
operator|>
name|EntrySetT
expr_stmt|;
name|EntrySetT
name|EntrySet
decl_stmt|;
name|void
name|removeEntry
parameter_list|(
name|PoolEntry
modifier|*
name|P
parameter_list|)
block|{
name|EntrySet
operator|.
name|erase
argument_list|(
name|P
argument_list|)
expr_stmt|;
block|}
name|public
label|:
name|template
operator|<
name|typename
name|ValueKeyT
operator|>
name|PoolRef
name|getValue
argument_list|(
argument|ValueKeyT ValueKey
argument_list|)
block|{
name|typename
name|EntrySetT
operator|::
name|iterator
name|I
operator|=
name|EntrySet
operator|.
name|find_as
argument_list|(
name|ValueKey
argument_list|)
block|;
if|if
condition|(
name|I
operator|!=
name|EntrySet
operator|.
name|end
argument_list|()
condition|)
return|return
name|PoolRef
argument_list|(
operator|(
operator|*
name|I
operator|)
operator|->
name|shared_from_this
argument_list|()
argument_list|,
operator|&
operator|(
operator|*
name|I
operator|)
operator|->
name|getValue
argument_list|()
argument_list|)
return|;
name|auto
name|P
operator|=
name|std
operator|::
name|make_shared
operator|<
name|PoolEntry
operator|>
operator|(
operator|*
name|this
operator|,
name|std
operator|::
name|move
argument_list|(
name|ValueKey
argument_list|)
operator|)
expr_stmt|;
name|EntrySet
operator|.
name|insert
argument_list|(
name|P
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|PoolRef
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|P
argument_list|)
argument_list|,
operator|&
name|P
operator|->
name|getValue
argument_list|()
argument_list|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|VectorT
operator|,
name|typename
name|MatrixT
operator|>
name|class
name|PoolCostAllocator
block|{
name|private
operator|:
typedef|typedef
name|ValuePool
operator|<
name|VectorT
operator|>
name|VectorCostPool
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|ValuePool
operator|<
name|MatrixT
operator|>
name|MatrixCostPool
expr_stmt|;
end_typedef

begin_label
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|VectorT
name|Vector
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|MatrixT
name|Matrix
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|VectorCostPool
operator|::
name|PoolRef
name|VectorPtr
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|MatrixCostPool
operator|::
name|PoolRef
name|MatrixPtr
expr_stmt|;
end_typedef

begin_expr_stmt
name|template
operator|<
name|typename
name|VectorKeyT
operator|>
name|VectorPtr
name|getVector
argument_list|(
argument|VectorKeyT v
argument_list|)
block|{
return|return
name|VectorPool
operator|.
name|getValue
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|v
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|MatrixKeyT
operator|>
name|MatrixPtr
name|getMatrix
argument_list|(
argument|MatrixKeyT m
argument_list|)
block|{
return|return
name|MatrixPool
operator|.
name|getValue
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|m
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|VectorCostPool
name|VectorPool
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|MatrixCostPool
name|MatrixPool
decl_stmt|;
end_decl_stmt

begin_comment
unit|};  }
comment|// namespace PBQP
end_comment

begin_comment
unit|}
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

