begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===---------- CostAllocator.h - PBQP Cost Allocator -----------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Defines classes conforming to the PBQP cost value manager concept.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Cost value managers are memory managers for PBQP cost values (vectors and
end_comment

begin_comment
comment|// matrices). Since PBQP graphs can grow very large (E.g. hundreds of thousands
end_comment

begin_comment
comment|// of edges on the largest function in SPEC2006).
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_COSTALLOCATOR_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_COSTALLOCATOR_H
end_define

begin_include
include|#
directive|include
file|<set>
end_include

begin_include
include|#
directive|include
file|<type_traits>
end_include

begin_decl_stmt
name|namespace
name|PBQP
block|{
name|template
operator|<
name|typename
name|CostT
operator|,
name|typename
name|CostKeyTComparator
operator|>
name|class
name|CostPool
block|{
name|public
operator|:
name|class
name|PoolEntry
block|{
name|public
operator|:
name|template
operator|<
name|typename
name|CostKeyT
operator|>
name|PoolEntry
argument_list|(
argument|CostPool&pool
argument_list|,
argument|CostKeyT cost
argument_list|)
operator|:
name|pool
argument_list|(
name|pool
argument_list|)
block|,
name|cost
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|cost
argument_list|)
argument_list|)
block|,
name|refCount
argument_list|(
literal|0
argument_list|)
block|{}
operator|~
name|PoolEntry
argument_list|()
block|{
name|pool
operator|.
name|removeEntry
argument_list|(
name|this
argument_list|)
block|; }
name|void
name|incRef
argument_list|()
block|{
operator|++
name|refCount
block|; }
name|bool
name|decRef
argument_list|()
block|{
operator|--
name|refCount
block|;
return|return
operator|(
name|refCount
operator|==
literal|0
operator|)
return|;
block|}
name|CostT
operator|&
name|getCost
argument_list|()
block|{
return|return
name|cost
return|;
block|}
specifier|const
name|CostT
operator|&
name|getCost
argument_list|()
specifier|const
block|{
return|return
name|cost
return|;
block|}
name|private
operator|:
name|CostPool
operator|&
name|pool
block|;
name|CostT
name|cost
block|;
name|std
operator|::
name|size_t
name|refCount
block|;   }
block|;
name|class
name|PoolRef
block|{
name|public
operator|:
name|PoolRef
argument_list|(
name|PoolEntry
operator|*
name|entry
argument_list|)
operator|:
name|entry
argument_list|(
argument|entry
argument_list|)
block|{
name|this
operator|->
name|entry
operator|->
name|incRef
argument_list|()
block|;     }
name|PoolRef
argument_list|(
argument|const PoolRef&r
argument_list|)
block|{
name|entry
operator|=
name|r
operator|.
name|entry
block|;
name|entry
operator|->
name|incRef
argument_list|()
block|;     }
name|PoolRef
operator|&
name|operator
operator|=
operator|(
specifier|const
name|PoolRef
operator|&
name|r
operator|)
block|{
name|assert
argument_list|(
name|entry
operator|!=
name|nullptr
operator|&&
literal|"entry should not be null."
argument_list|)
block|;
name|PoolEntry
operator|*
name|temp
operator|=
name|r
operator|.
name|entry
block|;
name|temp
operator|->
name|incRef
argument_list|()
block|;
name|entry
operator|->
name|decRef
argument_list|()
block|;
name|entry
operator|=
name|temp
block|;
return|return
operator|*
name|this
return|;
block|}
operator|~
name|PoolRef
argument_list|()
block|{
if|if
condition|(
name|entry
operator|->
name|decRef
argument_list|()
condition|)
name|delete
name|entry
decl_stmt|;
block|}
name|void
name|reset
argument_list|(
argument|PoolEntry *entry
argument_list|)
block|{
name|entry
operator|->
name|incRef
argument_list|()
block|;
name|this
operator|->
name|entry
operator|->
name|decRef
argument_list|()
block|;
name|this
operator|->
name|entry
operator|=
name|entry
block|;     }
name|CostT
operator|&
name|operator
operator|*
operator|(
operator|)
block|{
return|return
name|entry
operator|->
name|getCost
argument_list|()
return|;
block|}
specifier|const
name|CostT
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|entry
operator|->
name|getCost
argument_list|()
return|;
block|}
name|CostT
operator|*
name|operator
operator|->
expr|(
block|)
block|{
return|return
operator|&
name|entry
operator|->
name|getCost
argument_list|()
return|;
block|}
specifier|const
name|CostT
operator|*
name|operator
operator|->
expr|(
block|)
specifier|const
block|{
return|return
operator|&
name|entry
operator|->
name|getCost
argument_list|()
return|;
block|}
name|private
operator|:
name|PoolEntry
operator|*
name|entry
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|class
name|EntryComparator
block|{
name|public
label|:
name|template
operator|<
name|typename
name|CostKeyT
operator|>
name|typename
name|std
operator|::
name|enable_if
operator|<
operator|!
name|std
operator|::
name|is_same
operator|<
name|PoolEntry
operator|*
operator|,
name|typename
name|std
operator|::
name|remove_const
operator|<
name|CostKeyT
operator|>
operator|::
name|type
operator|>
operator|::
name|value
operator|,
name|bool
operator|>
operator|::
name|type
name|operator
argument_list|()
operator|(
specifier|const
name|PoolEntry
operator|*
name|a
operator|,
specifier|const
name|CostKeyT
operator|&
name|b
operator|)
block|{
return|return
name|compare
argument_list|(
name|a
operator|->
name|getCost
argument_list|()
argument_list|,
name|b
argument_list|)
return|;
block|}
name|bool
name|operator
argument_list|()
operator|(
specifier|const
name|PoolEntry
operator|*
name|a
operator|,
specifier|const
name|PoolEntry
operator|*
name|b
operator|)
block|{
return|return
name|compare
argument_list|(
name|a
operator|->
name|getCost
argument_list|()
argument_list|,
name|b
operator|->
name|getCost
argument_list|()
argument_list|)
return|;
block|}
name|private
label|:
name|CostKeyTComparator
name|compare
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_typedef
typedef|typedef
name|std
operator|::
name|set
operator|<
name|PoolEntry
operator|*
operator|,
name|EntryComparator
operator|>
name|EntrySet
expr_stmt|;
end_typedef

begin_decl_stmt
name|EntrySet
name|entrySet
decl_stmt|;
end_decl_stmt

begin_function
name|void
name|removeEntry
parameter_list|(
name|PoolEntry
modifier|*
name|p
parameter_list|)
block|{
name|entrySet
operator|.
name|erase
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
end_function

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|template
operator|<
name|typename
name|CostKeyT
operator|>
name|PoolRef
name|getCost
argument_list|(
argument|CostKeyT costKey
argument_list|)
block|{
name|typename
name|EntrySet
operator|::
name|iterator
name|itr
operator|=
name|std
operator|::
name|lower_bound
argument_list|(
name|entrySet
operator|.
name|begin
argument_list|()
argument_list|,
name|entrySet
operator|.
name|end
argument_list|()
argument_list|,
name|costKey
argument_list|,
name|EntryComparator
argument_list|()
argument_list|)
block|;
if|if
condition|(
name|itr
operator|!=
name|entrySet
operator|.
name|end
argument_list|()
operator|&&
name|costKey
operator|==
operator|(
operator|*
name|itr
operator|)
operator|->
name|getCost
argument_list|()
condition|)
return|return
name|PoolRef
argument_list|(
operator|*
name|itr
argument_list|)
return|;
name|PoolEntry
operator|*
name|p
operator|=
name|new
name|PoolEntry
argument_list|(
operator|*
name|this
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|costKey
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|entrySet
operator|.
name|insert
argument_list|(
name|itr
argument_list|,
name|p
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|PoolRef
argument_list|(
name|p
argument_list|)
return|;
end_return

begin_empty_stmt
unit|} }
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|VectorT
operator|,
name|typename
name|VectorTComparator
operator|,
name|typename
name|MatrixT
operator|,
name|typename
name|MatrixTComparator
operator|>
name|class
name|PoolCostAllocator
block|{
name|private
operator|:
typedef|typedef
name|CostPool
operator|<
name|VectorT
operator|,
name|VectorTComparator
operator|>
name|VectorCostPool
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|CostPool
operator|<
name|MatrixT
operator|,
name|MatrixTComparator
operator|>
name|MatrixCostPool
expr_stmt|;
end_typedef

begin_label
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|VectorT
name|Vector
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|MatrixT
name|Matrix
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|VectorCostPool
operator|::
name|PoolRef
name|VectorPtr
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|MatrixCostPool
operator|::
name|PoolRef
name|MatrixPtr
expr_stmt|;
end_typedef

begin_expr_stmt
name|template
operator|<
name|typename
name|VectorKeyT
operator|>
name|VectorPtr
name|getVector
argument_list|(
argument|VectorKeyT v
argument_list|)
block|{
return|return
name|vectorPool
operator|.
name|getCost
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|v
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|MatrixKeyT
operator|>
name|MatrixPtr
name|getMatrix
argument_list|(
argument|MatrixKeyT m
argument_list|)
block|{
return|return
name|matrixPool
operator|.
name|getCost
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|m
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|VectorCostPool
name|vectorPool
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|MatrixCostPool
name|matrixPool
decl_stmt|;
end_decl_stmt

begin_endif
unit|};  }
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_COSTALLOCATOR_H
end_comment

end_unit

