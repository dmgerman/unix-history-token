begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- llvm/CodeGen/TailDuplicator.h ---------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines the TailDuplicator class. Used by the
end_comment

begin_comment
comment|// TailDuplication pass, and MachineBlockPlacement.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CODEGEN_TAILDUPLICATOR_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CODEGEN_TAILDUPLICATOR_H
end_define

begin_include
include|#
directive|include
file|"llvm/CodeGen/MachineBranchProbabilityInfo.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/MachineModuleInfo.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/MachineRegisterInfo.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/MachineSSAUpdater.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/RegisterScavenging.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetInstrInfo.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetRegisterInfo.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetSubtargetInfo.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|/// Utility class to perform tail duplication.
name|class
name|TailDuplicator
block|{
specifier|const
name|TargetInstrInfo
modifier|*
name|TII
decl_stmt|;
specifier|const
name|TargetRegisterInfo
modifier|*
name|TRI
decl_stmt|;
specifier|const
name|MachineBranchProbabilityInfo
modifier|*
name|MBPI
decl_stmt|;
specifier|const
name|MachineModuleInfo
modifier|*
name|MMI
decl_stmt|;
name|MachineRegisterInfo
modifier|*
name|MRI
decl_stmt|;
name|bool
name|PreRegAlloc
decl_stmt|;
comment|// A list of virtual registers for which to update SSA form.
name|SmallVector
operator|<
name|unsigned
operator|,
literal|16
operator|>
name|SSAUpdateVRs
expr_stmt|;
comment|// For each virtual register in SSAUpdateVals keep a list of source virtual
comment|// registers.
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|pair
operator|<
name|MachineBasicBlock
operator|*
operator|,
name|unsigned
operator|>>
name|AvailableValsTy
expr_stmt|;
name|DenseMap
operator|<
name|unsigned
operator|,
name|AvailableValsTy
operator|>
name|SSAUpdateVals
expr_stmt|;
name|public
label|:
name|void
name|initMF
parameter_list|(
name|MachineFunction
modifier|&
name|MF
parameter_list|,
specifier|const
name|MachineModuleInfo
modifier|*
name|MMI
parameter_list|,
specifier|const
name|MachineBranchProbabilityInfo
modifier|*
name|MBPI
parameter_list|)
function_decl|;
name|bool
name|tailDuplicateBlocks
parameter_list|(
name|MachineFunction
modifier|&
name|MF
parameter_list|)
function_decl|;
specifier|static
name|bool
name|isSimpleBB
parameter_list|(
name|MachineBasicBlock
modifier|*
name|TailBB
parameter_list|)
function_decl|;
name|bool
name|shouldTailDuplicate
parameter_list|(
specifier|const
name|MachineFunction
modifier|&
name|MF
parameter_list|,
name|bool
name|IsSimple
parameter_list|,
name|MachineBasicBlock
modifier|&
name|TailBB
parameter_list|)
function_decl|;
name|bool
name|tailDuplicateAndUpdate
parameter_list|(
name|MachineFunction
modifier|&
name|MF
parameter_list|,
name|bool
name|IsSimple
parameter_list|,
name|MachineBasicBlock
modifier|*
name|MBB
parameter_list|)
function_decl|;
name|private
label|:
typedef|typedef
name|TargetInstrInfo
operator|::
name|RegSubRegPair
name|RegSubRegPair
expr_stmt|;
name|void
name|addSSAUpdateEntry
parameter_list|(
name|unsigned
name|OrigReg
parameter_list|,
name|unsigned
name|NewReg
parameter_list|,
name|MachineBasicBlock
modifier|*
name|BB
parameter_list|)
function_decl|;
name|void
name|processPHI
argument_list|(
name|MachineInstr
operator|*
name|MI
argument_list|,
name|MachineBasicBlock
operator|*
name|TailBB
argument_list|,
name|MachineBasicBlock
operator|*
name|PredBB
argument_list|,
name|DenseMap
operator|<
name|unsigned
argument_list|,
name|RegSubRegPair
operator|>
operator|&
name|LocalVRMap
argument_list|,
name|SmallVectorImpl
operator|<
name|std
operator|::
name|pair
operator|<
name|unsigned
argument_list|,
name|RegSubRegPair
operator|>>
operator|&
name|Copies
argument_list|,
specifier|const
name|DenseSet
operator|<
name|unsigned
operator|>
operator|&
name|UsedByPhi
argument_list|,
name|bool
name|Remove
argument_list|)
decl_stmt|;
name|void
name|duplicateInstruction
argument_list|(
name|MachineInstr
operator|*
name|MI
argument_list|,
name|MachineBasicBlock
operator|*
name|TailBB
argument_list|,
name|MachineBasicBlock
operator|*
name|PredBB
argument_list|,
name|MachineFunction
operator|&
name|MF
argument_list|,
name|DenseMap
operator|<
name|unsigned
argument_list|,
name|RegSubRegPair
operator|>
operator|&
name|LocalVRMap
argument_list|,
specifier|const
name|DenseSet
operator|<
name|unsigned
operator|>
operator|&
name|UsedByPhi
argument_list|)
decl_stmt|;
name|void
name|updateSuccessorsPHIs
argument_list|(
name|MachineBasicBlock
operator|*
name|FromBB
argument_list|,
name|bool
name|isDead
argument_list|,
name|SmallVectorImpl
operator|<
name|MachineBasicBlock
operator|*
operator|>
operator|&
name|TDBBs
argument_list|,
name|SmallSetVector
operator|<
name|MachineBasicBlock
operator|*
argument_list|,
literal|8
operator|>
operator|&
name|Succs
argument_list|)
decl_stmt|;
name|bool
name|canCompletelyDuplicateBB
parameter_list|(
name|MachineBasicBlock
modifier|&
name|BB
parameter_list|)
function_decl|;
name|bool
name|duplicateSimpleBB
argument_list|(
name|MachineBasicBlock
operator|*
name|TailBB
argument_list|,
name|SmallVectorImpl
operator|<
name|MachineBasicBlock
operator|*
operator|>
operator|&
name|TDBBs
argument_list|,
specifier|const
name|DenseSet
operator|<
name|unsigned
operator|>
operator|&
name|RegsUsedByPhi
argument_list|,
name|SmallVectorImpl
operator|<
name|MachineInstr
operator|*
operator|>
operator|&
name|Copies
argument_list|)
decl_stmt|;
name|bool
name|tailDuplicate
argument_list|(
name|MachineFunction
operator|&
name|MF
argument_list|,
name|bool
name|IsSimple
argument_list|,
name|MachineBasicBlock
operator|*
name|TailBB
argument_list|,
name|SmallVectorImpl
operator|<
name|MachineBasicBlock
operator|*
operator|>
operator|&
name|TDBBs
argument_list|,
name|SmallVectorImpl
operator|<
name|MachineInstr
operator|*
operator|>
operator|&
name|Copies
argument_list|)
decl_stmt|;
name|void
name|appendCopies
argument_list|(
name|MachineBasicBlock
operator|*
name|MBB
argument_list|,
name|SmallVectorImpl
operator|<
name|std
operator|::
name|pair
operator|<
name|unsigned
argument_list|,
name|RegSubRegPair
operator|>>
operator|&
name|CopyInfos
argument_list|,
name|SmallVectorImpl
operator|<
name|MachineInstr
operator|*
operator|>
operator|&
name|Copies
argument_list|)
decl_stmt|;
name|void
name|removeDeadBlock
parameter_list|(
name|MachineBasicBlock
modifier|*
name|MBB
parameter_list|)
function_decl|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// End llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

