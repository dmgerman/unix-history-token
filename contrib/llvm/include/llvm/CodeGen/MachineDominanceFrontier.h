begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- llvm/CodeGen/MachineDominanceFrontier.h ------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CODEGEN_MACHINEDOMINANCEFRONTIER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CODEGEN_MACHINEDOMINANCEFRONTIER_H
end_define

begin_include
include|#
directive|include
file|"llvm/Analysis/DominanceFrontier.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/MachineBasicBlock.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/MachineFunctionPass.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MachineDominanceFrontier
range|:
name|public
name|MachineFunctionPass
block|{
name|ForwardDominanceFrontierBase
operator|<
name|MachineBasicBlock
operator|>
name|Base
block|;
name|public
operator|:
typedef|typedef
name|DominatorTreeBase
operator|<
name|MachineBasicBlock
operator|>
name|DomTreeT
expr_stmt|;
typedef|typedef
name|DomTreeNodeBase
operator|<
name|MachineBasicBlock
operator|>
name|DomTreeNodeT
expr_stmt|;
typedef|typedef
name|DominanceFrontierBase
operator|<
name|MachineBasicBlock
operator|>
operator|::
name|DomSetType
name|DomSetType
expr_stmt|;
typedef|typedef
name|DominanceFrontierBase
operator|<
name|MachineBasicBlock
operator|>
operator|::
name|iterator
name|iterator
expr_stmt|;
typedef|typedef
name|DominanceFrontierBase
operator|<
name|MachineBasicBlock
operator|>
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
name|void
name|operator
init|=
operator|(
specifier|const
name|MachineDominanceFrontier
operator|&
operator|)
operator|=
name|delete
decl_stmt|;
name|MachineDominanceFrontier
argument_list|(
specifier|const
name|MachineDominanceFrontier
operator|&
argument_list|)
operator|=
name|delete
expr_stmt|;
specifier|static
name|char
name|ID
decl_stmt|;
name|MachineDominanceFrontier
argument_list|()
expr_stmt|;
name|DominanceFrontierBase
operator|<
name|MachineBasicBlock
operator|>
operator|&
name|getBase
argument_list|()
block|{
return|return
name|Base
return|;
block|}
specifier|inline
specifier|const
name|std
operator|::
name|vector
operator|<
name|MachineBasicBlock
operator|*
operator|>
operator|&
name|getRoots
argument_list|()
specifier|const
block|{
return|return
name|Base
operator|.
name|getRoots
argument_list|()
return|;
block|}
name|MachineBasicBlock
operator|*
name|getRoot
argument_list|()
specifier|const
block|{
return|return
name|Base
operator|.
name|getRoot
argument_list|()
return|;
block|}
name|bool
name|isPostDominator
argument_list|()
specifier|const
block|{
return|return
name|Base
operator|.
name|isPostDominator
argument_list|()
return|;
block|}
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|Base
operator|.
name|begin
argument_list|()
return|;
block|}
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|Base
operator|.
name|begin
argument_list|()
return|;
block|}
name|iterator
name|end
parameter_list|()
block|{
return|return
name|Base
operator|.
name|end
argument_list|()
return|;
block|}
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|Base
operator|.
name|end
argument_list|()
return|;
block|}
name|iterator
name|find
parameter_list|(
name|MachineBasicBlock
modifier|*
name|B
parameter_list|)
block|{
return|return
name|Base
operator|.
name|find
argument_list|(
name|B
argument_list|)
return|;
block|}
name|const_iterator
name|find
argument_list|(
name|MachineBasicBlock
operator|*
name|B
argument_list|)
decl|const
block|{
return|return
name|Base
operator|.
name|find
argument_list|(
name|B
argument_list|)
return|;
block|}
name|iterator
name|addBasicBlock
parameter_list|(
name|MachineBasicBlock
modifier|*
name|BB
parameter_list|,
specifier|const
name|DomSetType
modifier|&
name|frontier
parameter_list|)
block|{
return|return
name|Base
operator|.
name|addBasicBlock
argument_list|(
name|BB
argument_list|,
name|frontier
argument_list|)
return|;
block|}
name|void
name|removeBlock
parameter_list|(
name|MachineBasicBlock
modifier|*
name|BB
parameter_list|)
block|{
return|return
name|Base
operator|.
name|removeBlock
argument_list|(
name|BB
argument_list|)
return|;
block|}
name|void
name|addToFrontier
parameter_list|(
name|iterator
name|I
parameter_list|,
name|MachineBasicBlock
modifier|*
name|Node
parameter_list|)
block|{
return|return
name|Base
operator|.
name|addToFrontier
argument_list|(
name|I
argument_list|,
name|Node
argument_list|)
return|;
block|}
name|void
name|removeFromFrontier
parameter_list|(
name|iterator
name|I
parameter_list|,
name|MachineBasicBlock
modifier|*
name|Node
parameter_list|)
block|{
return|return
name|Base
operator|.
name|removeFromFrontier
argument_list|(
name|I
argument_list|,
name|Node
argument_list|)
return|;
block|}
name|bool
name|compareDomSet
argument_list|(
name|DomSetType
operator|&
name|DS1
argument_list|,
specifier|const
name|DomSetType
operator|&
name|DS2
argument_list|)
decl|const
block|{
return|return
name|Base
operator|.
name|compareDomSet
argument_list|(
name|DS1
argument_list|,
name|DS2
argument_list|)
return|;
block|}
name|bool
name|compare
argument_list|(
name|DominanceFrontierBase
operator|<
name|MachineBasicBlock
operator|>
operator|&
name|Other
argument_list|)
decl|const
block|{
return|return
name|Base
operator|.
name|compare
argument_list|(
name|Other
argument_list|)
return|;
block|}
name|bool
name|runOnMachineFunction
argument_list|(
name|MachineFunction
operator|&
name|F
argument_list|)
name|override
decl_stmt|;
name|void
name|releaseMemory
argument_list|()
name|override
expr_stmt|;
name|void
name|getAnalysisUsage
argument_list|(
name|AnalysisUsage
operator|&
name|AU
argument_list|)
decl|const
name|override
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

