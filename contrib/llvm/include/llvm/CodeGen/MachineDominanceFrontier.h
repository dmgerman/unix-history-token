begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- llvm/CodeGen/MachineDominanceFrontier.h ------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CODEGEN_MACHINEDOMINANCEFRONTIER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CODEGEN_MACHINEDOMINANCEFRONTIER_H
end_define

begin_include
include|#
directive|include
file|"llvm/Analysis/DominanceFrontier.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Analysis/DominanceFrontierImpl.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/MachineBasicBlock.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/MachineFunctionPass.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/GenericDomTree.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MachineDominanceFrontier
range|:
name|public
name|MachineFunctionPass
block|{
name|ForwardDominanceFrontierBase
operator|<
name|MachineBasicBlock
operator|>
name|Base
block|;
name|public
operator|:
name|using
name|DomTreeT
operator|=
name|DominatorTreeBase
operator|<
name|MachineBasicBlock
operator|>
block|;
name|using
name|DomTreeNodeT
operator|=
name|DomTreeNodeBase
operator|<
name|MachineBasicBlock
operator|>
block|;
name|using
name|DomSetType
operator|=
name|DominanceFrontierBase
operator|<
name|MachineBasicBlock
operator|>
operator|::
name|DomSetType
block|;
name|using
name|iterator
operator|=
name|DominanceFrontierBase
operator|<
name|MachineBasicBlock
operator|>
operator|::
name|iterator
block|;
name|using
name|const_iterator
operator|=
name|DominanceFrontierBase
operator|<
name|MachineBasicBlock
operator|>
operator|::
name|const_iterator
block|;
name|MachineDominanceFrontier
argument_list|(
specifier|const
name|MachineDominanceFrontier
operator|&
argument_list|)
operator|=
name|delete
block|;
name|MachineDominanceFrontier
operator|&
name|operator
operator|=
operator|(
specifier|const
name|MachineDominanceFrontier
operator|&
operator|)
operator|=
name|delete
block|;
specifier|static
name|char
name|ID
block|;
name|MachineDominanceFrontier
argument_list|()
block|;
name|DominanceFrontierBase
operator|<
name|MachineBasicBlock
operator|>
operator|&
name|getBase
argument_list|()
block|{
return|return
name|Base
return|;
block|}
specifier|inline
specifier|const
name|std
operator|::
name|vector
operator|<
name|MachineBasicBlock
operator|*
operator|>
operator|&
name|getRoots
argument_list|()
specifier|const
block|{
return|return
name|Base
operator|.
name|getRoots
argument_list|()
return|;
block|}
name|MachineBasicBlock
operator|*
name|getRoot
argument_list|()
specifier|const
block|{
return|return
name|Base
operator|.
name|getRoot
argument_list|()
return|;
block|}
name|bool
name|isPostDominator
argument_list|()
specifier|const
block|{
return|return
name|Base
operator|.
name|isPostDominator
argument_list|()
return|;
block|}
name|iterator
name|begin
argument_list|()
block|{
return|return
name|Base
operator|.
name|begin
argument_list|()
return|;
block|}
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|Base
operator|.
name|begin
argument_list|()
return|;
block|}
name|iterator
name|end
argument_list|()
block|{
return|return
name|Base
operator|.
name|end
argument_list|()
return|;
block|}
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|Base
operator|.
name|end
argument_list|()
return|;
block|}
name|iterator
name|find
argument_list|(
argument|MachineBasicBlock *B
argument_list|)
block|{
return|return
name|Base
operator|.
name|find
argument_list|(
name|B
argument_list|)
return|;
block|}
name|const_iterator
name|find
argument_list|(
argument|MachineBasicBlock *B
argument_list|)
specifier|const
block|{
return|return
name|Base
operator|.
name|find
argument_list|(
name|B
argument_list|)
return|;
block|}
name|iterator
name|addBasicBlock
argument_list|(
argument|MachineBasicBlock *BB
argument_list|,
argument|const DomSetType&frontier
argument_list|)
block|{
return|return
name|Base
operator|.
name|addBasicBlock
argument_list|(
name|BB
argument_list|,
name|frontier
argument_list|)
return|;
block|}
name|void
name|removeBlock
argument_list|(
argument|MachineBasicBlock *BB
argument_list|)
block|{
return|return
name|Base
operator|.
name|removeBlock
argument_list|(
name|BB
argument_list|)
return|;
block|}
name|void
name|addToFrontier
argument_list|(
argument|iterator I
argument_list|,
argument|MachineBasicBlock *Node
argument_list|)
block|{
return|return
name|Base
operator|.
name|addToFrontier
argument_list|(
name|I
argument_list|,
name|Node
argument_list|)
return|;
block|}
name|void
name|removeFromFrontier
argument_list|(
argument|iterator I
argument_list|,
argument|MachineBasicBlock *Node
argument_list|)
block|{
return|return
name|Base
operator|.
name|removeFromFrontier
argument_list|(
name|I
argument_list|,
name|Node
argument_list|)
return|;
block|}
name|bool
name|compareDomSet
argument_list|(
argument|DomSetType&DS1
argument_list|,
argument|const DomSetType&DS2
argument_list|)
specifier|const
block|{
return|return
name|Base
operator|.
name|compareDomSet
argument_list|(
name|DS1
argument_list|,
name|DS2
argument_list|)
return|;
block|}
name|bool
name|compare
argument_list|(
argument|DominanceFrontierBase<MachineBasicBlock>&Other
argument_list|)
specifier|const
block|{
return|return
name|Base
operator|.
name|compare
argument_list|(
name|Other
argument_list|)
return|;
block|}
name|bool
name|runOnMachineFunction
argument_list|(
argument|MachineFunction&F
argument_list|)
name|override
block|;
name|void
name|releaseMemory
argument_list|()
name|override
block|;
name|void
name|getAnalysisUsage
argument_list|(
argument|AnalysisUsage&AU
argument_list|)
specifier|const
name|override
block|; }
decl_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_CODEGEN_MACHINEDOMINANCEFRONTIER_H
end_comment

end_unit

