begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- llvm/CodeGen/MachineOperand.h - MachineOperand class ----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file contains the declaration of the MachineOperand class.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CODEGEN_MACHINEOPERAND_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CODEGEN_MACHINEOPERAND_H
end_define

begin_include
include|#
directive|include
file|"llvm/Support/DataTypes.h"
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|BlockAddress
decl_stmt|;
name|class
name|ConstantFP
decl_stmt|;
name|class
name|ConstantInt
decl_stmt|;
name|class
name|GlobalValue
decl_stmt|;
name|class
name|MachineBasicBlock
decl_stmt|;
name|class
name|MachineInstr
decl_stmt|;
name|class
name|MachineRegisterInfo
decl_stmt|;
name|class
name|MDNode
decl_stmt|;
name|class
name|ModuleSlotTracker
decl_stmt|;
name|class
name|TargetMachine
decl_stmt|;
name|class
name|TargetRegisterInfo
decl_stmt|;
name|class
name|hash_code
decl_stmt|;
name|class
name|raw_ostream
decl_stmt|;
name|class
name|MCSymbol
decl_stmt|;
comment|/// MachineOperand class - Representation of each machine instruction operand.
comment|///
comment|/// This class isn't a POD type because it has a private constructor, but its
comment|/// destructor must be trivial. Functions like MachineInstr::addOperand(),
comment|/// MachineRegisterInfo::moveOperands(), and MF::DeleteMachineInstr() depend on
comment|/// not having to call the MachineOperand destructor.
comment|///
name|class
name|MachineOperand
block|{
name|public
label|:
enum|enum
name|MachineOperandType
enum|:
name|unsigned
name|char
block|{
name|MO_Register
block|,
comment|///< Register operand.
name|MO_Immediate
block|,
comment|///< Immediate operand
name|MO_CImmediate
block|,
comment|///< Immediate>64bit operand
name|MO_FPImmediate
block|,
comment|///< Floating-point immediate operand
name|MO_MachineBasicBlock
block|,
comment|///< MachineBasicBlock reference
name|MO_FrameIndex
block|,
comment|///< Abstract Stack Frame Index
name|MO_ConstantPoolIndex
block|,
comment|///< Address of indexed Constant in Constant Pool
name|MO_TargetIndex
block|,
comment|///< Target-dependent index+offset operand.
name|MO_JumpTableIndex
block|,
comment|///< Address of indexed Jump Table for switch
name|MO_ExternalSymbol
block|,
comment|///< Name of external global symbol
name|MO_GlobalAddress
block|,
comment|///< Address of a global value
name|MO_BlockAddress
block|,
comment|///< Address of a basic block
name|MO_RegisterMask
block|,
comment|///< Mask of preserved registers.
name|MO_RegisterLiveOut
block|,
comment|///< Mask of live-out registers.
name|MO_Metadata
block|,
comment|///< Metadata reference (for debug info)
name|MO_MCSymbol
block|,
comment|///< MCSymbol reference (for debug/eh info)
name|MO_CFIIndex
comment|///< MCCFIInstruction index.
block|}
enum|;
name|private
label|:
comment|/// OpKind - Specify what kind of operand this is.  This discriminates the
comment|/// union.
name|MachineOperandType
name|OpKind
range|:
literal|8
decl_stmt|;
comment|/// Subregister number for MO_Register.  A value of 0 indicates the
comment|/// MO_Register has no subReg.
comment|///
comment|/// For all other kinds of operands, this field holds target-specific flags.
name|unsigned
name|SubReg_TargetFlags
range|:
literal|12
decl_stmt|;
comment|/// TiedTo - Non-zero when this register operand is tied to another register
comment|/// operand. The encoding of this field is described in the block comment
comment|/// before MachineInstr::tieOperands().
name|unsigned
name|char
name|TiedTo
range|:
literal|4
decl_stmt|;
comment|/// IsDef/IsImp/IsKill/IsDead flags - These are only valid for MO_Register
comment|/// operands.
comment|/// IsDef - True if this is a def, false if this is a use of the register.
comment|///
name|bool
name|IsDef
range|:
literal|1
decl_stmt|;
comment|/// IsImp - True if this is an implicit def or use, false if it is explicit.
comment|///
name|bool
name|IsImp
range|:
literal|1
decl_stmt|;
comment|/// IsKill - True if this instruction is the last use of the register on this
comment|/// path through the function.  This is only valid on uses of registers.
name|bool
name|IsKill
range|:
literal|1
decl_stmt|;
comment|/// IsDead - True if this register is never used by a subsequent instruction.
comment|/// This is only valid on definitions of registers.
name|bool
name|IsDead
range|:
literal|1
decl_stmt|;
comment|/// IsUndef - True if this register operand reads an "undef" value, i.e. the
comment|/// read value doesn't matter.  This flag can be set on both use and def
comment|/// operands.  On a sub-register def operand, it refers to the part of the
comment|/// register that isn't written.  On a full-register def operand, it is a
comment|/// noop.  See readsReg().
comment|///
comment|/// This is only valid on registers.
comment|///
comment|/// Note that an instruction may have multiple<undef> operands referring to
comment|/// the same register.  In that case, the instruction may depend on those
comment|/// operands reading the same dont-care value.  For example:
comment|///
comment|///   %vreg1<def> = XOR %vreg2<undef>, %vreg2<undef>
comment|///
comment|/// Any register can be used for %vreg2, and its value doesn't matter, but
comment|/// the two operands must be the same register.
comment|///
name|bool
name|IsUndef
range|:
literal|1
decl_stmt|;
comment|/// IsInternalRead - True if this operand reads a value that was defined
comment|/// inside the same instruction or bundle.  This flag can be set on both use
comment|/// and def operands.  On a sub-register def operand, it refers to the part
comment|/// of the register that isn't written.  On a full-register def operand, it
comment|/// is a noop.
comment|///
comment|/// When this flag is set, the instruction bundle must contain at least one
comment|/// other def of the register.  If multiple instructions in the bundle define
comment|/// the register, the meaning is target-defined.
name|bool
name|IsInternalRead
range|:
literal|1
decl_stmt|;
comment|/// IsEarlyClobber - True if this MO_Register 'def' operand is written to
comment|/// by the MachineInstr before all input registers are read.  This is used to
comment|/// model the GCC inline asm '&' constraint modifier.
name|bool
name|IsEarlyClobber
range|:
literal|1
decl_stmt|;
comment|/// IsDebug - True if this MO_Register 'use' operand is in a debug pseudo,
comment|/// not a real instruction.  Such uses should be ignored during codegen.
name|bool
name|IsDebug
range|:
literal|1
decl_stmt|;
comment|/// SmallContents - This really should be part of the Contents union, but
comment|/// lives out here so we can get a better packed struct.
comment|/// MO_Register: Register number.
comment|/// OffsetedInfo: Low bits of offset.
union|union
block|{
name|unsigned
name|RegNo
decl_stmt|;
comment|// For MO_Register.
name|unsigned
name|OffsetLo
decl_stmt|;
comment|// Matches Contents.OffsetedInfo.OffsetHi.
block|}
name|SmallContents
union|;
comment|/// ParentMI - This is the instruction that this operand is embedded into.
comment|/// This is valid for all operand types, when the operand is in an instr.
name|MachineInstr
modifier|*
name|ParentMI
decl_stmt|;
comment|/// Contents union - This contains the payload for the various operand types.
union|union
block|{
name|MachineBasicBlock
modifier|*
name|MBB
decl_stmt|;
comment|// For MO_MachineBasicBlock.
specifier|const
name|ConstantFP
modifier|*
name|CFP
decl_stmt|;
comment|// For MO_FPImmediate.
specifier|const
name|ConstantInt
modifier|*
name|CI
decl_stmt|;
comment|// For MO_CImmediate. Integers> 64bit.
name|int64_t
name|ImmVal
decl_stmt|;
comment|// For MO_Immediate.
specifier|const
name|uint32_t
modifier|*
name|RegMask
decl_stmt|;
comment|// For MO_RegisterMask and MO_RegisterLiveOut.
specifier|const
name|MDNode
modifier|*
name|MD
decl_stmt|;
comment|// For MO_Metadata.
name|MCSymbol
modifier|*
name|Sym
decl_stmt|;
comment|// For MO_MCSymbol.
name|unsigned
name|CFIIndex
decl_stmt|;
comment|// For MO_CFI.
struct|struct
block|{
comment|// For MO_Register.
comment|// Register number is in SmallContents.RegNo.
name|MachineOperand
modifier|*
name|Prev
decl_stmt|;
comment|// Access list for register. See MRI.
name|MachineOperand
modifier|*
name|Next
decl_stmt|;
block|}
name|Reg
struct|;
comment|/// OffsetedInfo - This struct contains the offset and an object identifier.
comment|/// this represent the object as with an optional offset from it.
struct|struct
block|{
union|union
block|{
name|int
name|Index
decl_stmt|;
comment|// For MO_*Index - The index itself.
specifier|const
name|char
modifier|*
name|SymbolName
decl_stmt|;
comment|// For MO_ExternalSymbol.
specifier|const
name|GlobalValue
modifier|*
name|GV
decl_stmt|;
comment|// For MO_GlobalAddress.
specifier|const
name|BlockAddress
modifier|*
name|BA
decl_stmt|;
comment|// For MO_BlockAddress.
block|}
name|Val
union|;
comment|// Low bits of offset are in SmallContents.OffsetLo.
name|int
name|OffsetHi
decl_stmt|;
comment|// An offset from the object, high 32 bits.
block|}
name|OffsetedInfo
struct|;
block|}
name|Contents
union|;
name|explicit
name|MachineOperand
argument_list|(
argument|MachineOperandType K
argument_list|)
block|:
name|OpKind
argument_list|(
name|K
argument_list|)
operator|,
name|SubReg_TargetFlags
argument_list|(
literal|0
argument_list|)
operator|,
name|ParentMI
argument_list|(
argument|nullptr
argument_list|)
block|{}
name|public
operator|:
comment|/// getType - Returns the MachineOperandType for this operand.
comment|///
name|MachineOperandType
name|getType
argument_list|()
specifier|const
block|{
return|return
operator|(
name|MachineOperandType
operator|)
name|OpKind
return|;
block|}
name|unsigned
name|getTargetFlags
argument_list|()
specifier|const
block|{
return|return
name|isReg
argument_list|()
operator|?
literal|0
operator|:
name|SubReg_TargetFlags
return|;
block|}
name|void
name|setTargetFlags
parameter_list|(
name|unsigned
name|F
parameter_list|)
block|{
name|assert
argument_list|(
operator|!
name|isReg
argument_list|()
operator|&&
literal|"Register operands can't have target flags"
argument_list|)
expr_stmt|;
name|SubReg_TargetFlags
operator|=
name|F
expr_stmt|;
name|assert
argument_list|(
name|SubReg_TargetFlags
operator|==
name|F
operator|&&
literal|"Target flags out of range"
argument_list|)
expr_stmt|;
block|}
name|void
name|addTargetFlag
parameter_list|(
name|unsigned
name|F
parameter_list|)
block|{
name|assert
argument_list|(
operator|!
name|isReg
argument_list|()
operator|&&
literal|"Register operands can't have target flags"
argument_list|)
expr_stmt|;
name|SubReg_TargetFlags
operator||=
name|F
expr_stmt|;
name|assert
argument_list|(
operator|(
name|SubReg_TargetFlags
operator|&
name|F
operator|)
operator|&&
literal|"Target flags out of range"
argument_list|)
expr_stmt|;
block|}
comment|/// getParent - Return the instruction that this operand belongs to.
comment|///
name|MachineInstr
modifier|*
name|getParent
parameter_list|()
block|{
return|return
name|ParentMI
return|;
block|}
specifier|const
name|MachineInstr
operator|*
name|getParent
argument_list|()
specifier|const
block|{
return|return
name|ParentMI
return|;
block|}
comment|/// clearParent - Reset the parent pointer.
comment|///
comment|/// The MachineOperand copy constructor also copies ParentMI, expecting the
comment|/// original to be deleted. If a MachineOperand is ever stored outside a
comment|/// MachineInstr, the parent pointer must be cleared.
comment|///
comment|/// Never call clearParent() on an operand in a MachineInstr.
comment|///
name|void
name|clearParent
parameter_list|()
block|{
name|ParentMI
operator|=
name|nullptr
expr_stmt|;
block|}
name|void
name|print
argument_list|(
name|raw_ostream
operator|&
name|os
argument_list|,
specifier|const
name|TargetRegisterInfo
operator|*
name|TRI
operator|=
name|nullptr
argument_list|)
decl|const
decl_stmt|;
name|void
name|print
argument_list|(
name|raw_ostream
operator|&
name|os
argument_list|,
name|ModuleSlotTracker
operator|&
name|MST
argument_list|,
specifier|const
name|TargetRegisterInfo
operator|*
name|TRI
operator|=
name|nullptr
argument_list|)
decl|const
decl_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|// Accessors that tell you what kind of MachineOperand you're looking at.
comment|//===--------------------------------------------------------------------===//
comment|/// isReg - Tests if this is a MO_Register operand.
name|bool
name|isReg
argument_list|()
specifier|const
block|{
return|return
name|OpKind
operator|==
name|MO_Register
return|;
block|}
comment|/// isImm - Tests if this is a MO_Immediate operand.
name|bool
name|isImm
argument_list|()
specifier|const
block|{
return|return
name|OpKind
operator|==
name|MO_Immediate
return|;
block|}
comment|/// isCImm - Test if this is a MO_CImmediate operand.
name|bool
name|isCImm
argument_list|()
specifier|const
block|{
return|return
name|OpKind
operator|==
name|MO_CImmediate
return|;
block|}
comment|/// isFPImm - Tests if this is a MO_FPImmediate operand.
name|bool
name|isFPImm
argument_list|()
specifier|const
block|{
return|return
name|OpKind
operator|==
name|MO_FPImmediate
return|;
block|}
comment|/// isMBB - Tests if this is a MO_MachineBasicBlock operand.
name|bool
name|isMBB
argument_list|()
specifier|const
block|{
return|return
name|OpKind
operator|==
name|MO_MachineBasicBlock
return|;
block|}
comment|/// isFI - Tests if this is a MO_FrameIndex operand.
name|bool
name|isFI
argument_list|()
specifier|const
block|{
return|return
name|OpKind
operator|==
name|MO_FrameIndex
return|;
block|}
comment|/// isCPI - Tests if this is a MO_ConstantPoolIndex operand.
name|bool
name|isCPI
argument_list|()
specifier|const
block|{
return|return
name|OpKind
operator|==
name|MO_ConstantPoolIndex
return|;
block|}
comment|/// isTargetIndex - Tests if this is a MO_TargetIndex operand.
name|bool
name|isTargetIndex
argument_list|()
specifier|const
block|{
return|return
name|OpKind
operator|==
name|MO_TargetIndex
return|;
block|}
comment|/// isJTI - Tests if this is a MO_JumpTableIndex operand.
name|bool
name|isJTI
argument_list|()
specifier|const
block|{
return|return
name|OpKind
operator|==
name|MO_JumpTableIndex
return|;
block|}
comment|/// isGlobal - Tests if this is a MO_GlobalAddress operand.
name|bool
name|isGlobal
argument_list|()
specifier|const
block|{
return|return
name|OpKind
operator|==
name|MO_GlobalAddress
return|;
block|}
comment|/// isSymbol - Tests if this is a MO_ExternalSymbol operand.
name|bool
name|isSymbol
argument_list|()
specifier|const
block|{
return|return
name|OpKind
operator|==
name|MO_ExternalSymbol
return|;
block|}
comment|/// isBlockAddress - Tests if this is a MO_BlockAddress operand.
name|bool
name|isBlockAddress
argument_list|()
specifier|const
block|{
return|return
name|OpKind
operator|==
name|MO_BlockAddress
return|;
block|}
comment|/// isRegMask - Tests if this is a MO_RegisterMask operand.
name|bool
name|isRegMask
argument_list|()
specifier|const
block|{
return|return
name|OpKind
operator|==
name|MO_RegisterMask
return|;
block|}
comment|/// isRegLiveOut - Tests if this is a MO_RegisterLiveOut operand.
name|bool
name|isRegLiveOut
argument_list|()
specifier|const
block|{
return|return
name|OpKind
operator|==
name|MO_RegisterLiveOut
return|;
block|}
comment|/// isMetadata - Tests if this is a MO_Metadata operand.
name|bool
name|isMetadata
argument_list|()
specifier|const
block|{
return|return
name|OpKind
operator|==
name|MO_Metadata
return|;
block|}
name|bool
name|isMCSymbol
argument_list|()
specifier|const
block|{
return|return
name|OpKind
operator|==
name|MO_MCSymbol
return|;
block|}
name|bool
name|isCFIIndex
argument_list|()
specifier|const
block|{
return|return
name|OpKind
operator|==
name|MO_CFIIndex
return|;
block|}
comment|//===--------------------------------------------------------------------===//
comment|// Accessors for Register Operands
comment|//===--------------------------------------------------------------------===//
comment|/// getReg - Returns the register number.
name|unsigned
name|getReg
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isReg
argument_list|()
operator|&&
literal|"This is not a register operand!"
argument_list|)
block|;
return|return
name|SmallContents
operator|.
name|RegNo
return|;
block|}
name|unsigned
name|getSubReg
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isReg
argument_list|()
operator|&&
literal|"Wrong MachineOperand accessor"
argument_list|)
block|;
return|return
name|SubReg_TargetFlags
return|;
block|}
name|bool
name|isUse
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isReg
argument_list|()
operator|&&
literal|"Wrong MachineOperand accessor"
argument_list|)
block|;
return|return
operator|!
name|IsDef
return|;
block|}
name|bool
name|isDef
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isReg
argument_list|()
operator|&&
literal|"Wrong MachineOperand accessor"
argument_list|)
block|;
return|return
name|IsDef
return|;
block|}
name|bool
name|isImplicit
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isReg
argument_list|()
operator|&&
literal|"Wrong MachineOperand accessor"
argument_list|)
block|;
return|return
name|IsImp
return|;
block|}
name|bool
name|isDead
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isReg
argument_list|()
operator|&&
literal|"Wrong MachineOperand accessor"
argument_list|)
block|;
return|return
name|IsDead
return|;
block|}
name|bool
name|isKill
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isReg
argument_list|()
operator|&&
literal|"Wrong MachineOperand accessor"
argument_list|)
block|;
return|return
name|IsKill
return|;
block|}
name|bool
name|isUndef
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isReg
argument_list|()
operator|&&
literal|"Wrong MachineOperand accessor"
argument_list|)
block|;
return|return
name|IsUndef
return|;
block|}
name|bool
name|isInternalRead
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isReg
argument_list|()
operator|&&
literal|"Wrong MachineOperand accessor"
argument_list|)
block|;
return|return
name|IsInternalRead
return|;
block|}
name|bool
name|isEarlyClobber
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isReg
argument_list|()
operator|&&
literal|"Wrong MachineOperand accessor"
argument_list|)
block|;
return|return
name|IsEarlyClobber
return|;
block|}
name|bool
name|isTied
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isReg
argument_list|()
operator|&&
literal|"Wrong MachineOperand accessor"
argument_list|)
block|;
return|return
name|TiedTo
return|;
block|}
name|bool
name|isDebug
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isReg
argument_list|()
operator|&&
literal|"Wrong MachineOperand accessor"
argument_list|)
block|;
return|return
name|IsDebug
return|;
block|}
comment|/// readsReg - Returns true if this operand reads the previous value of its
comment|/// register.  A use operand with the<undef> flag set doesn't read its
comment|/// register.  A sub-register def implicitly reads the other parts of the
comment|/// register being redefined unless the<undef> flag is set.
comment|///
comment|/// This refers to reading the register value from before the current
comment|/// instruction or bundle. Internal bundle reads are not included.
name|bool
name|readsReg
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isReg
argument_list|()
operator|&&
literal|"Wrong MachineOperand accessor"
argument_list|)
block|;
return|return
operator|!
name|isUndef
argument_list|()
operator|&&
operator|!
name|isInternalRead
argument_list|()
operator|&&
operator|(
name|isUse
argument_list|()
operator|||
name|getSubReg
argument_list|()
operator|)
return|;
block|}
comment|//===--------------------------------------------------------------------===//
comment|// Mutators for Register Operands
comment|//===--------------------------------------------------------------------===//
comment|/// Change the register this operand corresponds to.
comment|///
name|void
name|setReg
parameter_list|(
name|unsigned
name|Reg
parameter_list|)
function_decl|;
name|void
name|setSubReg
parameter_list|(
name|unsigned
name|subReg
parameter_list|)
block|{
name|assert
argument_list|(
name|isReg
argument_list|()
operator|&&
literal|"Wrong MachineOperand accessor"
argument_list|)
expr_stmt|;
name|SubReg_TargetFlags
operator|=
name|subReg
expr_stmt|;
name|assert
argument_list|(
name|SubReg_TargetFlags
operator|==
name|subReg
operator|&&
literal|"SubReg out of range"
argument_list|)
expr_stmt|;
block|}
comment|/// substVirtReg - Substitute the current register with the virtual
comment|/// subregister Reg:SubReg. Take any existing SubReg index into account,
comment|/// using TargetRegisterInfo to compose the subreg indices if necessary.
comment|/// Reg must be a virtual register, SubIdx can be 0.
comment|///
name|void
name|substVirtReg
parameter_list|(
name|unsigned
name|Reg
parameter_list|,
name|unsigned
name|SubIdx
parameter_list|,
specifier|const
name|TargetRegisterInfo
modifier|&
parameter_list|)
function_decl|;
comment|/// substPhysReg - Substitute the current register with the physical register
comment|/// Reg, taking any existing SubReg into account. For instance,
comment|/// substPhysReg(%EAX) will change %reg1024:sub_8bit to %AL.
comment|///
name|void
name|substPhysReg
parameter_list|(
name|unsigned
name|Reg
parameter_list|,
specifier|const
name|TargetRegisterInfo
modifier|&
parameter_list|)
function_decl|;
name|void
name|setIsUse
parameter_list|(
name|bool
name|Val
init|=
name|true
parameter_list|)
block|{
name|setIsDef
argument_list|(
operator|!
name|Val
argument_list|)
expr_stmt|;
block|}
name|void
name|setIsDef
parameter_list|(
name|bool
name|Val
init|=
name|true
parameter_list|)
function_decl|;
name|void
name|setImplicit
parameter_list|(
name|bool
name|Val
init|=
name|true
parameter_list|)
block|{
name|assert
argument_list|(
name|isReg
argument_list|()
operator|&&
literal|"Wrong MachineOperand accessor"
argument_list|)
expr_stmt|;
name|IsImp
operator|=
name|Val
expr_stmt|;
block|}
name|void
name|setIsKill
parameter_list|(
name|bool
name|Val
init|=
name|true
parameter_list|)
block|{
name|assert
argument_list|(
name|isReg
argument_list|()
operator|&&
operator|!
name|IsDef
operator|&&
literal|"Wrong MachineOperand accessor"
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|(
operator|!
name|Val
operator|||
operator|!
name|isDebug
argument_list|()
operator|)
operator|&&
literal|"Marking a debug operation as kill"
argument_list|)
expr_stmt|;
name|IsKill
operator|=
name|Val
expr_stmt|;
block|}
name|void
name|setIsDead
parameter_list|(
name|bool
name|Val
init|=
name|true
parameter_list|)
block|{
name|assert
argument_list|(
name|isReg
argument_list|()
operator|&&
name|IsDef
operator|&&
literal|"Wrong MachineOperand accessor"
argument_list|)
expr_stmt|;
name|IsDead
operator|=
name|Val
expr_stmt|;
block|}
name|void
name|setIsUndef
parameter_list|(
name|bool
name|Val
init|=
name|true
parameter_list|)
block|{
name|assert
argument_list|(
name|isReg
argument_list|()
operator|&&
literal|"Wrong MachineOperand accessor"
argument_list|)
expr_stmt|;
name|IsUndef
operator|=
name|Val
expr_stmt|;
block|}
name|void
name|setIsInternalRead
parameter_list|(
name|bool
name|Val
init|=
name|true
parameter_list|)
block|{
name|assert
argument_list|(
name|isReg
argument_list|()
operator|&&
literal|"Wrong MachineOperand accessor"
argument_list|)
expr_stmt|;
name|IsInternalRead
operator|=
name|Val
expr_stmt|;
block|}
name|void
name|setIsEarlyClobber
parameter_list|(
name|bool
name|Val
init|=
name|true
parameter_list|)
block|{
name|assert
argument_list|(
name|isReg
argument_list|()
operator|&&
name|IsDef
operator|&&
literal|"Wrong MachineOperand accessor"
argument_list|)
expr_stmt|;
name|IsEarlyClobber
operator|=
name|Val
expr_stmt|;
block|}
name|void
name|setIsDebug
parameter_list|(
name|bool
name|Val
init|=
name|true
parameter_list|)
block|{
name|assert
argument_list|(
name|isReg
argument_list|()
operator|&&
operator|!
name|IsDef
operator|&&
literal|"Wrong MachineOperand accessor"
argument_list|)
expr_stmt|;
name|IsDebug
operator|=
name|Val
expr_stmt|;
block|}
comment|//===--------------------------------------------------------------------===//
comment|// Accessors for various operand types.
comment|//===--------------------------------------------------------------------===//
name|int64_t
name|getImm
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isImm
argument_list|()
operator|&&
literal|"Wrong MachineOperand accessor"
argument_list|)
block|;
return|return
name|Contents
operator|.
name|ImmVal
return|;
block|}
specifier|const
name|ConstantInt
operator|*
name|getCImm
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isCImm
argument_list|()
operator|&&
literal|"Wrong MachineOperand accessor"
argument_list|)
block|;
return|return
name|Contents
operator|.
name|CI
return|;
block|}
specifier|const
name|ConstantFP
operator|*
name|getFPImm
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isFPImm
argument_list|()
operator|&&
literal|"Wrong MachineOperand accessor"
argument_list|)
block|;
return|return
name|Contents
operator|.
name|CFP
return|;
block|}
name|MachineBasicBlock
operator|*
name|getMBB
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isMBB
argument_list|()
operator|&&
literal|"Wrong MachineOperand accessor"
argument_list|)
block|;
return|return
name|Contents
operator|.
name|MBB
return|;
block|}
name|int
name|getIndex
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
operator|(
name|isFI
argument_list|()
operator|||
name|isCPI
argument_list|()
operator|||
name|isTargetIndex
argument_list|()
operator|||
name|isJTI
argument_list|()
operator|)
operator|&&
literal|"Wrong MachineOperand accessor"
argument_list|)
block|;
return|return
name|Contents
operator|.
name|OffsetedInfo
operator|.
name|Val
operator|.
name|Index
return|;
block|}
specifier|const
name|GlobalValue
operator|*
name|getGlobal
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isGlobal
argument_list|()
operator|&&
literal|"Wrong MachineOperand accessor"
argument_list|)
block|;
return|return
name|Contents
operator|.
name|OffsetedInfo
operator|.
name|Val
operator|.
name|GV
return|;
block|}
specifier|const
name|BlockAddress
operator|*
name|getBlockAddress
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isBlockAddress
argument_list|()
operator|&&
literal|"Wrong MachineOperand accessor"
argument_list|)
block|;
return|return
name|Contents
operator|.
name|OffsetedInfo
operator|.
name|Val
operator|.
name|BA
return|;
block|}
name|MCSymbol
operator|*
name|getMCSymbol
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isMCSymbol
argument_list|()
operator|&&
literal|"Wrong MachineOperand accessor"
argument_list|)
block|;
return|return
name|Contents
operator|.
name|Sym
return|;
block|}
name|unsigned
name|getCFIIndex
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isCFIIndex
argument_list|()
operator|&&
literal|"Wrong MachineOperand accessor"
argument_list|)
block|;
return|return
name|Contents
operator|.
name|CFIIndex
return|;
block|}
comment|/// Return the offset from the symbol in this operand. This always returns 0
comment|/// for ExternalSymbol operands.
name|int64_t
name|getOffset
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
operator|(
name|isGlobal
argument_list|()
operator|||
name|isSymbol
argument_list|()
operator|||
name|isMCSymbol
argument_list|()
operator|||
name|isCPI
argument_list|()
operator|||
name|isTargetIndex
argument_list|()
operator|||
name|isBlockAddress
argument_list|()
operator|)
operator|&&
literal|"Wrong MachineOperand accessor"
argument_list|)
block|;
return|return
name|int64_t
argument_list|(
name|uint64_t
argument_list|(
name|Contents
operator|.
name|OffsetedInfo
operator|.
name|OffsetHi
argument_list|)
operator|<<
literal|32
argument_list|)
operator||
name|SmallContents
operator|.
name|OffsetLo
return|;
block|}
specifier|const
name|char
operator|*
name|getSymbolName
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isSymbol
argument_list|()
operator|&&
literal|"Wrong MachineOperand accessor"
argument_list|)
block|;
return|return
name|Contents
operator|.
name|OffsetedInfo
operator|.
name|Val
operator|.
name|SymbolName
return|;
block|}
comment|/// clobbersPhysReg - Returns true if this RegMask clobbers PhysReg.
comment|/// It is sometimes necessary to detach the register mask pointer from its
comment|/// machine operand. This static method can be used for such detached bit
comment|/// mask pointers.
specifier|static
name|bool
name|clobbersPhysReg
parameter_list|(
specifier|const
name|uint32_t
modifier|*
name|RegMask
parameter_list|,
name|unsigned
name|PhysReg
parameter_list|)
block|{
comment|// See TargetRegisterInfo.h.
name|assert
argument_list|(
name|PhysReg
operator|<
operator|(
literal|1u
operator|<<
literal|30
operator|)
operator|&&
literal|"Not a physical register"
argument_list|)
expr_stmt|;
return|return
operator|!
operator|(
name|RegMask
index|[
name|PhysReg
operator|/
literal|32
index|]
operator|&
operator|(
literal|1u
operator|<<
name|PhysReg
operator|%
literal|32
operator|)
operator|)
return|;
block|}
comment|/// clobbersPhysReg - Returns true if this RegMask operand clobbers PhysReg.
name|bool
name|clobbersPhysReg
argument_list|(
name|unsigned
name|PhysReg
argument_list|)
decl|const
block|{
return|return
name|clobbersPhysReg
argument_list|(
name|getRegMask
argument_list|()
argument_list|,
name|PhysReg
argument_list|)
return|;
block|}
comment|/// getRegMask - Returns a bit mask of registers preserved by this RegMask
comment|/// operand.
specifier|const
name|uint32_t
operator|*
name|getRegMask
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isRegMask
argument_list|()
operator|&&
literal|"Wrong MachineOperand accessor"
argument_list|)
block|;
return|return
name|Contents
operator|.
name|RegMask
return|;
block|}
comment|/// getRegLiveOut - Returns a bit mask of live-out registers.
specifier|const
name|uint32_t
operator|*
name|getRegLiveOut
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isRegLiveOut
argument_list|()
operator|&&
literal|"Wrong MachineOperand accessor"
argument_list|)
block|;
return|return
name|Contents
operator|.
name|RegMask
return|;
block|}
specifier|const
name|MDNode
operator|*
name|getMetadata
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isMetadata
argument_list|()
operator|&&
literal|"Wrong MachineOperand accessor"
argument_list|)
block|;
return|return
name|Contents
operator|.
name|MD
return|;
block|}
comment|//===--------------------------------------------------------------------===//
comment|// Mutators for various operand types.
comment|//===--------------------------------------------------------------------===//
name|void
name|setImm
parameter_list|(
name|int64_t
name|immVal
parameter_list|)
block|{
name|assert
argument_list|(
name|isImm
argument_list|()
operator|&&
literal|"Wrong MachineOperand mutator"
argument_list|)
expr_stmt|;
name|Contents
operator|.
name|ImmVal
operator|=
name|immVal
expr_stmt|;
block|}
name|void
name|setFPImm
parameter_list|(
specifier|const
name|ConstantFP
modifier|*
name|CFP
parameter_list|)
block|{
name|assert
argument_list|(
name|isFPImm
argument_list|()
operator|&&
literal|"Wrong MachineOperand mutator"
argument_list|)
expr_stmt|;
name|Contents
operator|.
name|CFP
operator|=
name|CFP
expr_stmt|;
block|}
name|void
name|setOffset
parameter_list|(
name|int64_t
name|Offset
parameter_list|)
block|{
name|assert
argument_list|(
operator|(
name|isGlobal
argument_list|()
operator|||
name|isSymbol
argument_list|()
operator|||
name|isMCSymbol
argument_list|()
operator|||
name|isCPI
argument_list|()
operator|||
name|isTargetIndex
argument_list|()
operator|||
name|isBlockAddress
argument_list|()
operator|)
operator|&&
literal|"Wrong MachineOperand accessor"
argument_list|)
expr_stmt|;
name|SmallContents
operator|.
name|OffsetLo
operator|=
name|unsigned
argument_list|(
name|Offset
argument_list|)
expr_stmt|;
name|Contents
operator|.
name|OffsetedInfo
operator|.
name|OffsetHi
operator|=
name|int
argument_list|(
name|Offset
operator|>>
literal|32
argument_list|)
expr_stmt|;
block|}
name|void
name|setIndex
parameter_list|(
name|int
name|Idx
parameter_list|)
block|{
name|assert
argument_list|(
operator|(
name|isFI
argument_list|()
operator|||
name|isCPI
argument_list|()
operator|||
name|isTargetIndex
argument_list|()
operator|||
name|isJTI
argument_list|()
operator|)
operator|&&
literal|"Wrong MachineOperand accessor"
argument_list|)
expr_stmt|;
name|Contents
operator|.
name|OffsetedInfo
operator|.
name|Val
operator|.
name|Index
operator|=
name|Idx
expr_stmt|;
block|}
name|void
name|setMBB
parameter_list|(
name|MachineBasicBlock
modifier|*
name|MBB
parameter_list|)
block|{
name|assert
argument_list|(
name|isMBB
argument_list|()
operator|&&
literal|"Wrong MachineOperand accessor"
argument_list|)
expr_stmt|;
name|Contents
operator|.
name|MBB
operator|=
name|MBB
expr_stmt|;
block|}
comment|/// Sets value of register mask operand referencing Mask.  The
comment|/// operand does not take ownership of the memory referenced by Mask, it must
comment|/// remain valid for the lifetime of the operand. See CreateRegMask().
comment|/// Any physreg with a 0 bit in the mask is clobbered by the instruction.
name|void
name|setRegMask
parameter_list|(
specifier|const
name|uint32_t
modifier|*
name|RegMaskPtr
parameter_list|)
block|{
name|assert
argument_list|(
name|isRegMask
argument_list|()
operator|&&
literal|"Wrong MachineOperand mutator"
argument_list|)
expr_stmt|;
name|Contents
operator|.
name|RegMask
operator|=
name|RegMaskPtr
expr_stmt|;
block|}
comment|//===--------------------------------------------------------------------===//
comment|// Other methods.
comment|//===--------------------------------------------------------------------===//
comment|/// isIdenticalTo - Return true if this operand is identical to the specified
comment|/// operand. Note: This method ignores isKill and isDead properties.
name|bool
name|isIdenticalTo
argument_list|(
specifier|const
name|MachineOperand
operator|&
name|Other
argument_list|)
decl|const
decl_stmt|;
comment|/// \brief MachineOperand hash_value overload.
comment|///
comment|/// Note that this includes the same information in the hash that
comment|/// isIdenticalTo uses for comparison. It is thus suited for use in hash
comment|/// tables which use that function for equality comparisons only.
name|friend
name|hash_code
name|hash_value
parameter_list|(
specifier|const
name|MachineOperand
modifier|&
name|MO
parameter_list|)
function_decl|;
comment|/// ChangeToImmediate - Replace this operand with a new immediate operand of
comment|/// the specified value.  If an operand is known to be an immediate already,
comment|/// the setImm method should be used.
name|void
name|ChangeToImmediate
parameter_list|(
name|int64_t
name|ImmVal
parameter_list|)
function_decl|;
comment|/// ChangeToFPImmediate - Replace this operand with a new FP immediate operand
comment|/// of the specified value.  If an operand is known to be an FP immediate
comment|/// already, the setFPImm method should be used.
name|void
name|ChangeToFPImmediate
parameter_list|(
specifier|const
name|ConstantFP
modifier|*
name|FPImm
parameter_list|)
function_decl|;
comment|/// ChangeToES - Replace this operand with a new external symbol operand.
name|void
name|ChangeToES
parameter_list|(
specifier|const
name|char
modifier|*
name|SymName
parameter_list|,
name|unsigned
name|char
name|TargetFlags
init|=
literal|0
parameter_list|)
function_decl|;
comment|/// ChangeToMCSymbol - Replace this operand with a new MC symbol operand.
name|void
name|ChangeToMCSymbol
parameter_list|(
name|MCSymbol
modifier|*
name|Sym
parameter_list|)
function_decl|;
comment|/// ChangeToRegister - Replace this operand with a new register operand of
comment|/// the specified value.  If an operand is known to be an register already,
comment|/// the setReg method should be used.
name|void
name|ChangeToRegister
parameter_list|(
name|unsigned
name|Reg
parameter_list|,
name|bool
name|isDef
parameter_list|,
name|bool
name|isImp
init|=
name|false
parameter_list|,
name|bool
name|isKill
init|=
name|false
parameter_list|,
name|bool
name|isDead
init|=
name|false
parameter_list|,
name|bool
name|isUndef
init|=
name|false
parameter_list|,
name|bool
name|isDebug
init|=
name|false
parameter_list|)
function_decl|;
comment|//===--------------------------------------------------------------------===//
comment|// Construction methods.
comment|//===--------------------------------------------------------------------===//
specifier|static
name|MachineOperand
name|CreateImm
parameter_list|(
name|int64_t
name|Val
parameter_list|)
block|{
name|MachineOperand
name|Op
argument_list|(
name|MachineOperand
operator|::
name|MO_Immediate
argument_list|)
decl_stmt|;
name|Op
operator|.
name|setImm
argument_list|(
name|Val
argument_list|)
expr_stmt|;
return|return
name|Op
return|;
block|}
specifier|static
name|MachineOperand
name|CreateCImm
parameter_list|(
specifier|const
name|ConstantInt
modifier|*
name|CI
parameter_list|)
block|{
name|MachineOperand
name|Op
argument_list|(
name|MachineOperand
operator|::
name|MO_CImmediate
argument_list|)
decl_stmt|;
name|Op
operator|.
name|Contents
operator|.
name|CI
operator|=
name|CI
expr_stmt|;
return|return
name|Op
return|;
block|}
specifier|static
name|MachineOperand
name|CreateFPImm
parameter_list|(
specifier|const
name|ConstantFP
modifier|*
name|CFP
parameter_list|)
block|{
name|MachineOperand
name|Op
argument_list|(
name|MachineOperand
operator|::
name|MO_FPImmediate
argument_list|)
decl_stmt|;
name|Op
operator|.
name|Contents
operator|.
name|CFP
operator|=
name|CFP
expr_stmt|;
return|return
name|Op
return|;
block|}
specifier|static
name|MachineOperand
name|CreateReg
parameter_list|(
name|unsigned
name|Reg
parameter_list|,
name|bool
name|isDef
parameter_list|,
name|bool
name|isImp
init|=
name|false
parameter_list|,
name|bool
name|isKill
init|=
name|false
parameter_list|,
name|bool
name|isDead
init|=
name|false
parameter_list|,
name|bool
name|isUndef
init|=
name|false
parameter_list|,
name|bool
name|isEarlyClobber
init|=
name|false
parameter_list|,
name|unsigned
name|SubReg
init|=
literal|0
parameter_list|,
name|bool
name|isDebug
init|=
name|false
parameter_list|,
name|bool
name|isInternalRead
init|=
name|false
parameter_list|)
block|{
name|assert
argument_list|(
operator|!
operator|(
name|isDead
operator|&&
operator|!
name|isDef
operator|)
operator|&&
literal|"Dead flag on non-def"
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
operator|(
name|isKill
operator|&&
name|isDef
operator|)
operator|&&
literal|"Kill flag on def"
argument_list|)
expr_stmt|;
name|MachineOperand
name|Op
argument_list|(
name|MachineOperand
operator|::
name|MO_Register
argument_list|)
decl_stmt|;
name|Op
operator|.
name|IsDef
operator|=
name|isDef
expr_stmt|;
name|Op
operator|.
name|IsImp
operator|=
name|isImp
expr_stmt|;
name|Op
operator|.
name|IsKill
operator|=
name|isKill
expr_stmt|;
name|Op
operator|.
name|IsDead
operator|=
name|isDead
expr_stmt|;
name|Op
operator|.
name|IsUndef
operator|=
name|isUndef
expr_stmt|;
name|Op
operator|.
name|IsInternalRead
operator|=
name|isInternalRead
expr_stmt|;
name|Op
operator|.
name|IsEarlyClobber
operator|=
name|isEarlyClobber
expr_stmt|;
name|Op
operator|.
name|TiedTo
operator|=
literal|0
expr_stmt|;
name|Op
operator|.
name|IsDebug
operator|=
name|isDebug
expr_stmt|;
name|Op
operator|.
name|SmallContents
operator|.
name|RegNo
operator|=
name|Reg
expr_stmt|;
name|Op
operator|.
name|Contents
operator|.
name|Reg
operator|.
name|Prev
operator|=
name|nullptr
expr_stmt|;
name|Op
operator|.
name|Contents
operator|.
name|Reg
operator|.
name|Next
operator|=
name|nullptr
expr_stmt|;
name|Op
operator|.
name|setSubReg
argument_list|(
name|SubReg
argument_list|)
expr_stmt|;
return|return
name|Op
return|;
block|}
specifier|static
name|MachineOperand
name|CreateMBB
parameter_list|(
name|MachineBasicBlock
modifier|*
name|MBB
parameter_list|,
name|unsigned
name|char
name|TargetFlags
init|=
literal|0
parameter_list|)
block|{
name|MachineOperand
name|Op
argument_list|(
name|MachineOperand
operator|::
name|MO_MachineBasicBlock
argument_list|)
decl_stmt|;
name|Op
operator|.
name|setMBB
argument_list|(
name|MBB
argument_list|)
expr_stmt|;
name|Op
operator|.
name|setTargetFlags
argument_list|(
name|TargetFlags
argument_list|)
expr_stmt|;
return|return
name|Op
return|;
block|}
specifier|static
name|MachineOperand
name|CreateFI
parameter_list|(
name|int
name|Idx
parameter_list|)
block|{
name|MachineOperand
name|Op
argument_list|(
name|MachineOperand
operator|::
name|MO_FrameIndex
argument_list|)
decl_stmt|;
name|Op
operator|.
name|setIndex
argument_list|(
name|Idx
argument_list|)
expr_stmt|;
return|return
name|Op
return|;
block|}
specifier|static
name|MachineOperand
name|CreateCPI
parameter_list|(
name|unsigned
name|Idx
parameter_list|,
name|int
name|Offset
parameter_list|,
name|unsigned
name|char
name|TargetFlags
init|=
literal|0
parameter_list|)
block|{
name|MachineOperand
name|Op
argument_list|(
name|MachineOperand
operator|::
name|MO_ConstantPoolIndex
argument_list|)
decl_stmt|;
name|Op
operator|.
name|setIndex
argument_list|(
name|Idx
argument_list|)
expr_stmt|;
name|Op
operator|.
name|setOffset
argument_list|(
name|Offset
argument_list|)
expr_stmt|;
name|Op
operator|.
name|setTargetFlags
argument_list|(
name|TargetFlags
argument_list|)
expr_stmt|;
return|return
name|Op
return|;
block|}
specifier|static
name|MachineOperand
name|CreateTargetIndex
parameter_list|(
name|unsigned
name|Idx
parameter_list|,
name|int64_t
name|Offset
parameter_list|,
name|unsigned
name|char
name|TargetFlags
init|=
literal|0
parameter_list|)
block|{
name|MachineOperand
name|Op
argument_list|(
name|MachineOperand
operator|::
name|MO_TargetIndex
argument_list|)
decl_stmt|;
name|Op
operator|.
name|setIndex
argument_list|(
name|Idx
argument_list|)
expr_stmt|;
name|Op
operator|.
name|setOffset
argument_list|(
name|Offset
argument_list|)
expr_stmt|;
name|Op
operator|.
name|setTargetFlags
argument_list|(
name|TargetFlags
argument_list|)
expr_stmt|;
return|return
name|Op
return|;
block|}
specifier|static
name|MachineOperand
name|CreateJTI
parameter_list|(
name|unsigned
name|Idx
parameter_list|,
name|unsigned
name|char
name|TargetFlags
init|=
literal|0
parameter_list|)
block|{
name|MachineOperand
name|Op
argument_list|(
name|MachineOperand
operator|::
name|MO_JumpTableIndex
argument_list|)
decl_stmt|;
name|Op
operator|.
name|setIndex
argument_list|(
name|Idx
argument_list|)
expr_stmt|;
name|Op
operator|.
name|setTargetFlags
argument_list|(
name|TargetFlags
argument_list|)
expr_stmt|;
return|return
name|Op
return|;
block|}
specifier|static
name|MachineOperand
name|CreateGA
parameter_list|(
specifier|const
name|GlobalValue
modifier|*
name|GV
parameter_list|,
name|int64_t
name|Offset
parameter_list|,
name|unsigned
name|char
name|TargetFlags
init|=
literal|0
parameter_list|)
block|{
name|MachineOperand
name|Op
argument_list|(
name|MachineOperand
operator|::
name|MO_GlobalAddress
argument_list|)
decl_stmt|;
name|Op
operator|.
name|Contents
operator|.
name|OffsetedInfo
operator|.
name|Val
operator|.
name|GV
operator|=
name|GV
expr_stmt|;
name|Op
operator|.
name|setOffset
argument_list|(
name|Offset
argument_list|)
expr_stmt|;
name|Op
operator|.
name|setTargetFlags
argument_list|(
name|TargetFlags
argument_list|)
expr_stmt|;
return|return
name|Op
return|;
block|}
specifier|static
name|MachineOperand
name|CreateES
parameter_list|(
specifier|const
name|char
modifier|*
name|SymName
parameter_list|,
name|unsigned
name|char
name|TargetFlags
init|=
literal|0
parameter_list|)
block|{
name|MachineOperand
name|Op
argument_list|(
name|MachineOperand
operator|::
name|MO_ExternalSymbol
argument_list|)
decl_stmt|;
name|Op
operator|.
name|Contents
operator|.
name|OffsetedInfo
operator|.
name|Val
operator|.
name|SymbolName
operator|=
name|SymName
expr_stmt|;
name|Op
operator|.
name|setOffset
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Offset is always 0.
name|Op
operator|.
name|setTargetFlags
argument_list|(
name|TargetFlags
argument_list|)
expr_stmt|;
return|return
name|Op
return|;
block|}
specifier|static
name|MachineOperand
name|CreateBA
parameter_list|(
specifier|const
name|BlockAddress
modifier|*
name|BA
parameter_list|,
name|int64_t
name|Offset
parameter_list|,
name|unsigned
name|char
name|TargetFlags
init|=
literal|0
parameter_list|)
block|{
name|MachineOperand
name|Op
argument_list|(
name|MachineOperand
operator|::
name|MO_BlockAddress
argument_list|)
decl_stmt|;
name|Op
operator|.
name|Contents
operator|.
name|OffsetedInfo
operator|.
name|Val
operator|.
name|BA
operator|=
name|BA
expr_stmt|;
name|Op
operator|.
name|setOffset
argument_list|(
name|Offset
argument_list|)
expr_stmt|;
name|Op
operator|.
name|setTargetFlags
argument_list|(
name|TargetFlags
argument_list|)
expr_stmt|;
return|return
name|Op
return|;
block|}
comment|/// CreateRegMask - Creates a register mask operand referencing Mask.  The
comment|/// operand does not take ownership of the memory referenced by Mask, it must
comment|/// remain valid for the lifetime of the operand.
comment|///
comment|/// A RegMask operand represents a set of non-clobbered physical registers on
comment|/// an instruction that clobbers many registers, typically a call.  The bit
comment|/// mask has a bit set for each physreg that is preserved by this
comment|/// instruction, as described in the documentation for
comment|/// TargetRegisterInfo::getCallPreservedMask().
comment|///
comment|/// Any physreg with a 0 bit in the mask is clobbered by the instruction.
comment|///
specifier|static
name|MachineOperand
name|CreateRegMask
parameter_list|(
specifier|const
name|uint32_t
modifier|*
name|Mask
parameter_list|)
block|{
name|assert
argument_list|(
name|Mask
operator|&&
literal|"Missing register mask"
argument_list|)
expr_stmt|;
name|MachineOperand
name|Op
argument_list|(
name|MachineOperand
operator|::
name|MO_RegisterMask
argument_list|)
decl_stmt|;
name|Op
operator|.
name|Contents
operator|.
name|RegMask
operator|=
name|Mask
expr_stmt|;
return|return
name|Op
return|;
block|}
specifier|static
name|MachineOperand
name|CreateRegLiveOut
parameter_list|(
specifier|const
name|uint32_t
modifier|*
name|Mask
parameter_list|)
block|{
name|assert
argument_list|(
name|Mask
operator|&&
literal|"Missing live-out register mask"
argument_list|)
expr_stmt|;
name|MachineOperand
name|Op
argument_list|(
name|MachineOperand
operator|::
name|MO_RegisterLiveOut
argument_list|)
decl_stmt|;
name|Op
operator|.
name|Contents
operator|.
name|RegMask
operator|=
name|Mask
expr_stmt|;
return|return
name|Op
return|;
block|}
specifier|static
name|MachineOperand
name|CreateMetadata
parameter_list|(
specifier|const
name|MDNode
modifier|*
name|Meta
parameter_list|)
block|{
name|MachineOperand
name|Op
argument_list|(
name|MachineOperand
operator|::
name|MO_Metadata
argument_list|)
decl_stmt|;
name|Op
operator|.
name|Contents
operator|.
name|MD
operator|=
name|Meta
expr_stmt|;
return|return
name|Op
return|;
block|}
specifier|static
name|MachineOperand
name|CreateMCSymbol
parameter_list|(
name|MCSymbol
modifier|*
name|Sym
parameter_list|,
name|unsigned
name|char
name|TargetFlags
init|=
literal|0
parameter_list|)
block|{
name|MachineOperand
name|Op
argument_list|(
name|MachineOperand
operator|::
name|MO_MCSymbol
argument_list|)
decl_stmt|;
name|Op
operator|.
name|Contents
operator|.
name|Sym
operator|=
name|Sym
expr_stmt|;
name|Op
operator|.
name|setOffset
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Op
operator|.
name|setTargetFlags
argument_list|(
name|TargetFlags
argument_list|)
expr_stmt|;
return|return
name|Op
return|;
block|}
specifier|static
name|MachineOperand
name|CreateCFIIndex
parameter_list|(
name|unsigned
name|CFIIndex
parameter_list|)
block|{
name|MachineOperand
name|Op
argument_list|(
name|MachineOperand
operator|::
name|MO_CFIIndex
argument_list|)
decl_stmt|;
name|Op
operator|.
name|Contents
operator|.
name|CFIIndex
operator|=
name|CFIIndex
expr_stmt|;
return|return
name|Op
return|;
block|}
name|friend
name|class
name|MachineInstr
decl_stmt|;
name|friend
name|class
name|MachineRegisterInfo
decl_stmt|;
name|private
label|:
name|void
name|removeRegFromUses
parameter_list|()
function_decl|;
comment|//===--------------------------------------------------------------------===//
comment|// Methods for handling register use/def lists.
comment|//===--------------------------------------------------------------------===//
comment|/// isOnRegUseList - Return true if this operand is on a register use/def list
comment|/// or false if not.  This can only be called for register operands that are
comment|/// part of a machine instruction.
name|bool
name|isOnRegUseList
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isReg
argument_list|()
operator|&&
literal|"Can only add reg operand to use lists"
argument_list|)
block|;
return|return
name|Contents
operator|.
name|Reg
operator|.
name|Prev
operator|!=
name|nullptr
return|;
block|}
block|}
empty_stmt|;
specifier|inline
name|raw_ostream
operator|&
name|operator
operator|<<
operator|(
name|raw_ostream
operator|&
name|OS
operator|,
specifier|const
name|MachineOperand
operator|&
name|MO
operator|)
block|{
name|MO
operator|.
name|print
argument_list|(
name|OS
argument_list|,
name|nullptr
argument_list|)
block|;
return|return
name|OS
return|;
block|}
comment|// See friend declaration above. This additional declaration is required in
comment|// order to compile LLVM with IBM xlC compiler.
name|hash_code
name|hash_value
parameter_list|(
specifier|const
name|MachineOperand
modifier|&
name|MO
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_comment
comment|// End llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

