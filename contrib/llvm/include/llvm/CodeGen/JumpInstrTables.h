begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- JumpInstrTables.h: Jump-Instruction Tables --------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|/// \brief An implementation of tables consisting of jump instructions
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CODEGEN_JUMPINSTRTABLES_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CODEGEN_JUMPINSTRTABLES_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Pass.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetOptions.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|Constant
decl_stmt|;
name|class
name|Function
decl_stmt|;
name|class
name|FunctionType
decl_stmt|;
name|class
name|JumpInstrTableInfo
decl_stmt|;
name|class
name|Module
decl_stmt|;
comment|/// A class to manage a set of jump tables indexed on function type. It looks at
comment|/// each function in the module to find all the functions that have the
comment|/// jumptable attribute set. For each such function, it creates a new
comment|/// jump-instruction-table function and stores the mapping in the ImmutablePass
comment|/// JumpInstrTableInfo.
comment|///
comment|/// These special functions get lowered in AsmPrinter to assembly of the form:
comment|/// \verbatim
comment|///   .globl f
comment|///   .type f,@function
comment|///   .align 8,0x90
comment|/// f:
comment|///   jmp f_orig@PLT
comment|/// \endverbatim
comment|///
comment|/// Support for an architecture depends on two functions in TargetInstrInfo:
comment|/// getUnconditionalBranch, and getTrap. AsmPrinter uses these to generate the
comment|/// appropriate instructions for the jump statement (an unconditional branch)
comment|/// and for padding to make the table have a size that is a power of two. This
comment|/// padding uses a trap instruction to ensure that calls to this area halt the
comment|/// program. The default implementations of these functions call
comment|/// llvm_unreachable.
name|class
name|JumpInstrTables
range|:
name|public
name|ModulePass
block|{
name|public
operator|:
specifier|static
name|char
name|ID
block|;
name|JumpInstrTables
argument_list|()
block|;
name|JumpInstrTables
argument_list|(
argument|JumpTable::JumpTableType JTT
argument_list|)
block|;
name|virtual
operator|~
name|JumpInstrTables
argument_list|()
block|;
name|bool
name|runOnModule
argument_list|(
argument|Module&M
argument_list|)
name|override
block|;
specifier|const
name|char
operator|*
name|getPassName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"Jump-Instruction Tables"
return|;
block|}
name|void
name|getAnalysisUsage
argument_list|(
argument|AnalysisUsage&AU
argument_list|)
specifier|const
name|override
block|;
comment|/// Creates a jump-instruction table function for the Target and adds it to
comment|/// the tables.
name|Function
operator|*
name|insertEntry
argument_list|(
name|Module
operator|&
name|M
argument_list|,
name|Function
operator|*
name|Target
argument_list|)
block|;
comment|/// Checks to see if there is already a table for the given FunctionType.
name|bool
name|hasTable
argument_list|(
name|FunctionType
operator|*
name|FunTy
argument_list|)
block|;
name|private
operator|:
comment|/// The metadata used while a jump table is being built
expr|struct
name|TableMeta
block|{
comment|/// The number of this table
name|unsigned
name|TableNum
block|;
comment|/// The current number of jump entries in the table.
name|unsigned
name|Count
block|;   }
block|;
typedef|typedef
name|DenseMap
operator|<
name|FunctionType
operator|*
operator|,
expr_stmt|struct
name|TableMeta
operator|>
name|JumpMap
expr_stmt|;
comment|/// Maps the function into a subset of function types, depending on the
comment|/// jump-instruction table style selected from JumpTableTypes in
comment|/// JumpInstrTables.cpp. The choice of mapping determines the number of
comment|/// jump-instruction tables generated by this pass. E.g., the simplest mapping
comment|/// converts every function type into void f(); so, all functions end up in a
comment|/// single table.
name|FunctionType
operator|*
name|transformType
argument_list|(
name|FunctionType
operator|*
name|FunTy
argument_list|)
decl_stmt|;
comment|/// The current state of functions and jump entries in the table(s).
name|JumpMap
name|Metadata
decl_stmt|;
comment|/// The ImmutablePass that stores information about the generated tables.
name|JumpInstrTableInfo
modifier|*
name|JITI
decl_stmt|;
comment|/// The total number of tables.
name|unsigned
name|TableCount
decl_stmt|;
comment|/// The type of tables to build.
name|JumpTable
operator|::
name|JumpTableType
name|JTType
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/// Creates a JumpInstrTables pass for the given type of jump table.
end_comment

begin_decl_stmt
name|ModulePass
modifier|*
name|createJumpInstrTablesPass
argument_list|(
name|JumpTable
operator|::
name|JumpTableType
name|JTT
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|/* LLVM_CODEGEN_JUMPINSTRTABLES_H */
end_comment

end_unit

