begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- FaultMaps.h - The "FaultMaps" section --------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CODEGEN_FAULTMAPS_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CODEGEN_FAULTMAPS_H
end_define

begin_include
include|#
directive|include
file|"llvm/MC/MCSymbol.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Endian.h"
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<cstddef>
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|AsmPrinter
decl_stmt|;
name|class
name|MCExpr
decl_stmt|;
name|class
name|raw_ostream
decl_stmt|;
name|class
name|FaultMaps
block|{
name|public
label|:
enum|enum
name|FaultKind
block|{
name|FaultingLoad
init|=
literal|1
block|,
name|FaultingLoadStore
block|,
name|FaultingStore
block|,
name|FaultKindMax
block|}
enum|;
name|explicit
name|FaultMaps
parameter_list|(
name|AsmPrinter
modifier|&
name|AP
parameter_list|)
function_decl|;
specifier|static
specifier|const
name|char
modifier|*
name|faultTypeToString
parameter_list|(
name|FaultKind
parameter_list|)
function_decl|;
name|void
name|recordFaultingOp
parameter_list|(
name|FaultKind
name|FaultTy
parameter_list|,
specifier|const
name|MCSymbol
modifier|*
name|HandlerLabel
parameter_list|)
function_decl|;
name|void
name|serializeToFaultMapSection
parameter_list|()
function_decl|;
name|private
label|:
specifier|static
specifier|const
name|char
modifier|*
name|WFMP
decl_stmt|;
struct|struct
name|FaultInfo
block|{
name|FaultKind
name|Kind
init|=
name|FaultKindMax
decl_stmt|;
specifier|const
name|MCExpr
modifier|*
name|FaultingOffsetExpr
init|=
name|nullptr
decl_stmt|;
specifier|const
name|MCExpr
modifier|*
name|HandlerOffsetExpr
init|=
name|nullptr
decl_stmt|;
name|FaultInfo
argument_list|()
operator|=
expr|default
expr_stmt|;
name|explicit
name|FaultInfo
argument_list|(
name|FaultMaps
operator|::
name|FaultKind
name|Kind
argument_list|,
specifier|const
name|MCExpr
operator|*
name|FaultingOffset
argument_list|,
specifier|const
name|MCExpr
operator|*
name|HandlerOffset
argument_list|)
range|:
name|Kind
argument_list|(
name|Kind
argument_list|)
decl_stmt|,
name|FaultingOffsetExpr
argument_list|(
name|FaultingOffset
argument_list|)
decl_stmt|,
name|HandlerOffsetExpr
argument_list|(
name|HandlerOffset
argument_list|)
block|{}
block|}
struct|;
name|using
name|FunctionFaultInfos
init|=
name|std
operator|::
name|vector
operator|<
name|FaultInfo
operator|>
decl_stmt|;
comment|// We'd like to keep a stable iteration order for FunctionInfos to help
comment|// FileCheck based testing.
struct|struct
name|MCSymbolComparator
block|{
name|bool
name|operator
argument_list|()
operator|(
specifier|const
name|MCSymbol
operator|*
name|LHS
operator|,
specifier|const
name|MCSymbol
operator|*
name|RHS
operator|)
specifier|const
block|{
return|return
name|LHS
operator|->
name|getName
argument_list|()
operator|<
name|RHS
operator|->
name|getName
argument_list|()
return|;
block|}
block|}
struct|;
name|std
operator|::
name|map
operator|<
specifier|const
name|MCSymbol
operator|*
operator|,
name|FunctionFaultInfos
operator|,
name|MCSymbolComparator
operator|>
name|FunctionInfos
expr_stmt|;
name|AsmPrinter
modifier|&
name|AP
decl_stmt|;
name|void
name|emitFunctionInfo
parameter_list|(
specifier|const
name|MCSymbol
modifier|*
name|FnLabel
parameter_list|,
specifier|const
name|FunctionFaultInfos
modifier|&
name|FFI
parameter_list|)
function_decl|;
block|}
empty_stmt|;
comment|/// A parser for the __llvm_faultmaps section generated by the FaultMaps class
comment|/// above.  This parser is version locked with with the __llvm_faultmaps section
comment|/// generated by the version of LLVM that includes it.  No guarantees are made
comment|/// with respect to forward or backward compatibility.
name|class
name|FaultMapParser
block|{
name|using
name|FaultMapVersionType
init|=
name|uint8_t
decl_stmt|;
name|using
name|Reserved0Type
init|=
name|uint8_t
decl_stmt|;
name|using
name|Reserved1Type
init|=
name|uint16_t
decl_stmt|;
name|using
name|NumFunctionsType
init|=
name|uint32_t
decl_stmt|;
specifier|static
specifier|const
name|size_t
name|FaultMapVersionOffset
init|=
literal|0
decl_stmt|;
specifier|static
specifier|const
name|size_t
name|Reserved0Offset
init|=
name|FaultMapVersionOffset
operator|+
sizeof|sizeof
argument_list|(
name|FaultMapVersionType
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|size_t
name|Reserved1Offset
init|=
name|Reserved0Offset
operator|+
sizeof|sizeof
argument_list|(
name|Reserved0Type
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|size_t
name|NumFunctionsOffset
init|=
name|Reserved1Offset
operator|+
sizeof|sizeof
argument_list|(
name|Reserved1Type
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|size_t
name|FunctionInfosOffset
init|=
name|NumFunctionsOffset
operator|+
sizeof|sizeof
argument_list|(
name|NumFunctionsType
argument_list|)
decl_stmt|;
specifier|const
name|uint8_t
modifier|*
name|P
decl_stmt|;
specifier|const
name|uint8_t
modifier|*
name|E
decl_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|T
name|read
argument_list|(
argument|const uint8_t *P
argument_list|,
argument|const uint8_t *E
argument_list|)
block|{
name|assert
argument_list|(
name|P
operator|+
sizeof|sizeof
argument_list|(
name|T
argument_list|)
operator|<=
name|E
operator|&&
literal|"out of bounds read!"
argument_list|)
block|;
return|return
name|support
operator|::
name|endian
operator|::
name|read
operator|<
name|T
operator|,
name|support
operator|::
name|little
operator|,
literal|1
operator|>
operator|(
name|P
operator|)
return|;
block|}
name|public
label|:
name|class
name|FunctionFaultInfoAccessor
block|{
name|using
name|FaultKindType
init|=
name|uint32_t
decl_stmt|;
name|using
name|FaultingPCOffsetType
init|=
name|uint32_t
decl_stmt|;
name|using
name|HandlerPCOffsetType
init|=
name|uint32_t
decl_stmt|;
specifier|static
specifier|const
name|size_t
name|FaultKindOffset
init|=
literal|0
decl_stmt|;
specifier|static
specifier|const
name|size_t
name|FaultingPCOffsetOffset
init|=
name|FaultKindOffset
operator|+
sizeof|sizeof
argument_list|(
name|FaultKindType
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|size_t
name|HandlerPCOffsetOffset
init|=
name|FaultingPCOffsetOffset
operator|+
sizeof|sizeof
argument_list|(
name|FaultingPCOffsetType
argument_list|)
decl_stmt|;
specifier|const
name|uint8_t
modifier|*
name|P
decl_stmt|;
specifier|const
name|uint8_t
modifier|*
name|E
decl_stmt|;
name|public
label|:
specifier|static
specifier|const
name|size_t
name|Size
init|=
name|HandlerPCOffsetOffset
operator|+
sizeof|sizeof
argument_list|(
name|HandlerPCOffsetType
argument_list|)
decl_stmt|;
name|explicit
name|FunctionFaultInfoAccessor
argument_list|(
specifier|const
name|uint8_t
operator|*
name|P
argument_list|,
specifier|const
name|uint8_t
operator|*
name|E
argument_list|)
operator|:
name|P
argument_list|(
name|P
argument_list|)
operator|,
name|E
argument_list|(
argument|E
argument_list|)
block|{}
name|FaultKindType
name|getFaultKind
argument_list|()
specifier|const
block|{
return|return
name|read
operator|<
name|FaultKindType
operator|>
operator|(
name|P
operator|+
name|FaultKindOffset
operator|,
name|E
operator|)
return|;
block|}
name|FaultingPCOffsetType
name|getFaultingPCOffset
argument_list|()
specifier|const
block|{
return|return
name|read
operator|<
name|FaultingPCOffsetType
operator|>
operator|(
name|P
operator|+
name|FaultingPCOffsetOffset
operator|,
name|E
operator|)
return|;
block|}
name|HandlerPCOffsetType
name|getHandlerPCOffset
argument_list|()
specifier|const
block|{
return|return
name|read
operator|<
name|HandlerPCOffsetType
operator|>
operator|(
name|P
operator|+
name|HandlerPCOffsetOffset
operator|,
name|E
operator|)
return|;
block|}
block|}
empty_stmt|;
name|class
name|FunctionInfoAccessor
block|{
name|using
name|FunctionAddrType
init|=
name|uint64_t
decl_stmt|;
name|using
name|NumFaultingPCsType
init|=
name|uint32_t
decl_stmt|;
name|using
name|ReservedType
init|=
name|uint32_t
decl_stmt|;
specifier|static
specifier|const
name|size_t
name|FunctionAddrOffset
init|=
literal|0
decl_stmt|;
specifier|static
specifier|const
name|size_t
name|NumFaultingPCsOffset
init|=
name|FunctionAddrOffset
operator|+
sizeof|sizeof
argument_list|(
name|FunctionAddrType
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|size_t
name|ReservedOffset
init|=
name|NumFaultingPCsOffset
operator|+
sizeof|sizeof
argument_list|(
name|NumFaultingPCsType
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|size_t
name|FunctionFaultInfosOffset
init|=
name|ReservedOffset
operator|+
sizeof|sizeof
argument_list|(
name|ReservedType
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|size_t
name|FunctionInfoHeaderSize
init|=
name|FunctionFaultInfosOffset
decl_stmt|;
specifier|const
name|uint8_t
modifier|*
name|P
init|=
name|nullptr
decl_stmt|;
specifier|const
name|uint8_t
modifier|*
name|E
init|=
name|nullptr
decl_stmt|;
name|public
label|:
name|FunctionInfoAccessor
argument_list|()
operator|=
expr|default
expr_stmt|;
name|explicit
name|FunctionInfoAccessor
argument_list|(
specifier|const
name|uint8_t
operator|*
name|P
argument_list|,
specifier|const
name|uint8_t
operator|*
name|E
argument_list|)
operator|:
name|P
argument_list|(
name|P
argument_list|)
operator|,
name|E
argument_list|(
argument|E
argument_list|)
block|{}
name|FunctionAddrType
name|getFunctionAddr
argument_list|()
specifier|const
block|{
return|return
name|read
operator|<
name|FunctionAddrType
operator|>
operator|(
name|P
operator|+
name|FunctionAddrOffset
operator|,
name|E
operator|)
return|;
block|}
name|NumFaultingPCsType
name|getNumFaultingPCs
argument_list|()
specifier|const
block|{
return|return
name|read
operator|<
name|NumFaultingPCsType
operator|>
operator|(
name|P
operator|+
name|NumFaultingPCsOffset
operator|,
name|E
operator|)
return|;
block|}
name|FunctionFaultInfoAccessor
name|getFunctionFaultInfoAt
argument_list|(
name|uint32_t
name|Index
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|Index
operator|<
name|getNumFaultingPCs
argument_list|()
operator|&&
literal|"index out of bounds!"
argument_list|)
expr_stmt|;
specifier|const
name|uint8_t
modifier|*
name|Begin
init|=
name|P
operator|+
name|FunctionFaultInfosOffset
operator|+
name|FunctionFaultInfoAccessor
operator|::
name|Size
operator|*
name|Index
decl_stmt|;
return|return
name|FunctionFaultInfoAccessor
argument_list|(
name|Begin
argument_list|,
name|E
argument_list|)
return|;
block|}
name|FunctionInfoAccessor
name|getNextFunctionInfo
argument_list|()
specifier|const
block|{
name|size_t
name|MySize
operator|=
name|FunctionInfoHeaderSize
operator|+
name|getNumFaultingPCs
argument_list|()
operator|*
name|FunctionFaultInfoAccessor
operator|::
name|Size
block|;
specifier|const
name|uint8_t
operator|*
name|Begin
operator|=
name|P
operator|+
name|MySize
block|;
name|assert
argument_list|(
name|Begin
operator|<
name|E
operator|&&
literal|"out of bounds!"
argument_list|)
block|;
return|return
name|FunctionInfoAccessor
argument_list|(
name|Begin
argument_list|,
name|E
argument_list|)
return|;
block|}
block|}
empty_stmt|;
name|explicit
name|FaultMapParser
argument_list|(
specifier|const
name|uint8_t
operator|*
name|Begin
argument_list|,
specifier|const
name|uint8_t
operator|*
name|End
argument_list|)
operator|:
name|P
argument_list|(
name|Begin
argument_list|)
operator|,
name|E
argument_list|(
argument|End
argument_list|)
block|{}
name|FaultMapVersionType
name|getFaultMapVersion
argument_list|()
specifier|const
block|{
name|auto
name|Version
operator|=
name|read
operator|<
name|FaultMapVersionType
operator|>
operator|(
name|P
operator|+
name|FaultMapVersionOffset
operator|,
name|E
operator|)
block|;
name|assert
argument_list|(
name|Version
operator|==
literal|1
operator|&&
literal|"only version 1 supported!"
argument_list|)
block|;
return|return
name|Version
return|;
block|}
name|NumFunctionsType
name|getNumFunctions
argument_list|()
specifier|const
block|{
return|return
name|read
operator|<
name|NumFunctionsType
operator|>
operator|(
name|P
operator|+
name|NumFunctionsOffset
operator|,
name|E
operator|)
return|;
block|}
name|FunctionInfoAccessor
name|getFirstFunctionInfo
argument_list|()
specifier|const
block|{
specifier|const
name|uint8_t
operator|*
name|Begin
operator|=
name|P
operator|+
name|FunctionInfosOffset
block|;
return|return
name|FunctionInfoAccessor
argument_list|(
name|Begin
argument_list|,
name|E
argument_list|)
return|;
block|}
block|}
empty_stmt|;
name|raw_ostream
operator|&
name|operator
operator|<<
operator|(
name|raw_ostream
operator|&
name|OS
operator|,
specifier|const
name|FaultMapParser
operator|::
name|FunctionFaultInfoAccessor
operator|&
operator|)
expr_stmt|;
name|raw_ostream
operator|&
name|operator
operator|<<
operator|(
name|raw_ostream
operator|&
name|OS
operator|,
specifier|const
name|FaultMapParser
operator|::
name|FunctionInfoAccessor
operator|&
operator|)
expr_stmt|;
name|raw_ostream
operator|&
name|operator
operator|<<
operator|(
name|raw_ostream
operator|&
name|OS
operator|,
specifier|const
name|FaultMapParser
operator|&
operator|)
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_CODEGEN_FAULTMAPS_H
end_comment

end_unit

