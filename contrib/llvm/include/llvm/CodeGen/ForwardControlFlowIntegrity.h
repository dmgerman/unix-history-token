begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- ForwardControlFlowIntegrity.h: Forward-Edge CFI ---------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This pass instruments indirect calls with checks to ensure that these calls
end_comment

begin_comment
comment|// pass through the appropriate jump-instruction table generated by
end_comment

begin_comment
comment|// JumpInstrTables.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CODEGEN_FORWARDCONTROLFLOWINTEGRITY_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CODEGEN_FORWARDCONTROLFLOWINTEGRITY_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Pass.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetOptions.h"
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|AnalysisUsage
decl_stmt|;
name|class
name|BasicBlock
decl_stmt|;
name|class
name|Constant
decl_stmt|;
name|class
name|Function
decl_stmt|;
name|class
name|Instruction
decl_stmt|;
name|class
name|Module
decl_stmt|;
name|class
name|Value
decl_stmt|;
comment|/// ForwardControlFlowIntegrity uses the information from JumpInstrTableInfo to
comment|/// prepend checks to indirect calls to make sure that these calls target valid
comment|/// locations.
name|class
name|ForwardControlFlowIntegrity
range|:
name|public
name|ModulePass
block|{
name|public
operator|:
specifier|static
name|char
name|ID
block|;
name|ForwardControlFlowIntegrity
argument_list|()
block|;
name|ForwardControlFlowIntegrity
argument_list|(
argument|JumpTable::JumpTableType JTT
argument_list|,
argument|CFIntegrity CFIType
argument_list|,
argument|bool CFIEnforcing
argument_list|,
argument|std::string CFIFuncName
argument_list|)
block|;
operator|~
name|ForwardControlFlowIntegrity
argument_list|()
name|override
block|;
comment|/// Runs the CFI pass on a given module. This works best if the module in
comment|/// question is the result of link-time optimization (see lib/LTO).
name|bool
name|runOnModule
argument_list|(
argument|Module&M
argument_list|)
name|override
block|;
specifier|const
name|char
operator|*
name|getPassName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"Forward Control-Flow Integrity"
return|;
block|}
name|void
name|getAnalysisUsage
argument_list|(
argument|AnalysisUsage&AU
argument_list|)
specifier|const
name|override
block|;
name|private
operator|:
typedef|typedef
name|SmallVector
operator|<
name|Instruction
operator|*
operator|,
literal|64
operator|>
name|CallSet
expr_stmt|;
comment|/// A structure that is used to keep track of constant table information.
block|struct
name|CFIConstants
block|{
name|Constant
operator|*
name|StartValue
block|;
name|Constant
operator|*
name|MaskValue
block|;
name|Constant
operator|*
name|Size
block|;   }
decl_stmt|;
comment|/// A map from function type to the base of the table for this type and a mask
comment|/// for the table
typedef|typedef
name|DenseMap
operator|<
name|FunctionType
operator|*
operator|,
name|CFIConstants
operator|>
name|CFITables
expr_stmt|;
name|CallSet
name|IndirectCalls
decl_stmt|;
comment|/// The type of jumptable implementation.
name|JumpTable
operator|::
name|JumpTableType
name|JTType
expr_stmt|;
comment|/// The type of CFI check to add before each indirect call.
name|CFIntegrity
name|CFIType
decl_stmt|;
comment|/// A value that controls whether or not CFI violations cause a halt.
name|bool
name|CFIEnforcing
decl_stmt|;
comment|/// The name of the function to call in case of a CFI violation when
comment|/// CFIEnforcing is false. There is a default function that ignores
comment|/// violations.
name|std
operator|::
name|string
name|CFIFuncName
expr_stmt|;
comment|/// The alignment of each entry in the table, from JumpInstrTableInfo. The
comment|/// JumpInstrTableInfo class always makes this a power of two.
name|uint64_t
name|ByteAlignment
decl_stmt|;
comment|/// The base-2 logarithm of ByteAlignment, needed for some of the transforms
comment|/// (like CFIntegrity::Ror)
name|unsigned
name|LogByteAlignment
decl_stmt|;
comment|/// Adds checks to each indirect call site to make sure that it is calling a
comment|/// function in our jump table.
name|void
name|updateIndirectCalls
parameter_list|(
name|Module
modifier|&
name|M
parameter_list|,
name|CFITables
modifier|&
name|CFIT
parameter_list|)
function_decl|;
comment|/// Walks the instructions to find all the indirect calls.
name|void
name|getIndirectCalls
parameter_list|(
name|Module
modifier|&
name|M
parameter_list|)
function_decl|;
comment|/// Adds a function that handles violations in non-enforcing mode
comment|/// (!CFIEnforcing). The default warning function simply returns, since the
comment|/// exact details of how to handle CFI violations depend on the application.
name|void
name|addWarningFunction
parameter_list|(
name|Module
modifier|&
name|M
parameter_list|)
function_decl|;
comment|/// Rewrites a function pointer in a call/invoke instruction to force it into
comment|/// a table.
name|void
name|rewriteFunctionPointer
parameter_list|(
name|Module
modifier|&
name|M
parameter_list|,
name|Instruction
modifier|*
name|I
parameter_list|,
name|Value
modifier|*
name|FunPtr
parameter_list|,
name|Constant
modifier|*
name|JumpTableStart
parameter_list|,
name|Constant
modifier|*
name|JumpTableMask
parameter_list|,
name|Constant
modifier|*
name|JumpTableSize
parameter_list|)
function_decl|;
comment|/// Inserts a check and a call to a warning function at a given instruction
comment|/// that must be an indirect call.
name|void
name|insertWarning
parameter_list|(
name|Module
modifier|&
name|M
parameter_list|,
name|BasicBlock
modifier|*
name|Block
parameter_list|,
name|Instruction
modifier|*
name|I
parameter_list|,
name|Value
modifier|*
name|FunPtr
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|ModulePass
modifier|*
name|createForwardControlFlowIntegrityPass
argument_list|(
name|JumpTable
operator|::
name|JumpTableType
name|JTT
argument_list|,
name|CFIntegrity
name|CFIType
argument_list|,
name|bool
name|CFIEnforcing
argument_list|,
name|StringRef
name|CFIFuncName
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_CODEGEN_FORWARDCONTROLFLOWINTEGRITY_H
end_comment

end_unit

