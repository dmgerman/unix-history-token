begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- MIRYAMLMapping.h - Describes the mapping between MIR and YAML ------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// The MIR serialization library is currently a work in progress. It can't
end_comment

begin_comment
comment|// serialize machine functions at this time.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file implements the mapping between various MIR data structures and
end_comment

begin_comment
comment|// their corresponding YAML representation.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_CODEGEN_MIRYAMLMAPPING_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_CODEGEN_MIRYAMLMAPPING_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/YAMLTraits.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|yaml
block|{
comment|/// A wrapper around std::string which contains a source range that's being
comment|/// set during parsing.
struct|struct
name|StringValue
block|{
name|std
operator|::
name|string
name|Value
expr_stmt|;
name|SMRange
name|SourceRange
decl_stmt|;
name|StringValue
argument_list|()
block|{}
name|StringValue
argument_list|(
argument|std::string Value
argument_list|)
block|:
name|Value
argument_list|(
argument|std::move(Value)
argument_list|)
block|{}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|StringValue
operator|&
name|Other
operator|)
specifier|const
block|{
return|return
name|Value
operator|==
name|Other
operator|.
name|Value
return|;
block|}
block|}
struct|;
name|template
operator|<
operator|>
expr|struct
name|ScalarTraits
operator|<
name|StringValue
operator|>
block|{
specifier|static
name|void
name|output
argument_list|(
argument|const StringValue&S
argument_list|,
argument|void *
argument_list|,
argument|llvm::raw_ostream&OS
argument_list|)
block|{
name|OS
operator|<<
name|S
operator|.
name|Value
block|;   }
specifier|static
name|StringRef
name|input
argument_list|(
argument|StringRef Scalar
argument_list|,
argument|void *Ctx
argument_list|,
argument|StringValue&S
argument_list|)
block|{
name|S
operator|.
name|Value
operator|=
name|Scalar
operator|.
name|str
argument_list|()
block|;
if|if
condition|(
specifier|const
specifier|auto
modifier|*
name|Node
init|=
name|reinterpret_cast
operator|<
name|yaml
operator|::
name|Input
operator|*
operator|>
operator|(
name|Ctx
operator|)
operator|->
name|getCurrentNode
argument_list|()
condition|)
name|S
operator|.
name|SourceRange
operator|=
name|Node
operator|->
name|getSourceRange
argument_list|()
expr_stmt|;
return|return
literal|""
return|;
block|}
specifier|static
name|bool
name|mustQuote
parameter_list|(
name|StringRef
name|Scalar
parameter_list|)
block|{
return|return
name|needsQuotes
argument_list|(
name|Scalar
argument_list|)
return|;
block|}
block|}
empty_stmt|;
name|struct
name|FlowStringValue
range|:
name|StringValue
block|{
name|FlowStringValue
argument_list|()
block|{}
name|FlowStringValue
argument_list|(
argument|std::string Value
argument_list|)
operator|:
name|StringValue
argument_list|(
argument|Value
argument_list|)
block|{}
block|}
decl_stmt|;
name|template
operator|<
operator|>
expr|struct
name|ScalarTraits
operator|<
name|FlowStringValue
operator|>
block|{
specifier|static
name|void
name|output
argument_list|(
argument|const FlowStringValue&S
argument_list|,
argument|void *
argument_list|,
argument|llvm::raw_ostream&OS
argument_list|)
block|{
return|return
name|ScalarTraits
operator|<
name|StringValue
operator|>
operator|::
name|output
argument_list|(
name|S
argument_list|,
name|nullptr
argument_list|,
name|OS
argument_list|)
return|;
block|}
specifier|static
name|StringRef
name|input
argument_list|(
argument|StringRef Scalar
argument_list|,
argument|void *Ctx
argument_list|,
argument|FlowStringValue&S
argument_list|)
block|{
return|return
name|ScalarTraits
operator|<
name|StringValue
operator|>
operator|::
name|input
argument_list|(
name|Scalar
argument_list|,
name|Ctx
argument_list|,
name|S
argument_list|)
return|;
block|}
specifier|static
name|bool
name|mustQuote
argument_list|(
argument|StringRef Scalar
argument_list|)
block|{
return|return
name|needsQuotes
argument_list|(
name|Scalar
argument_list|)
return|;
block|}
expr|}
block|;  }
comment|// end namespace yaml
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::yaml::StringValue
argument_list|)
end_macro

begin_macro
name|LLVM_YAML_IS_FLOW_SEQUENCE_VECTOR
argument_list|(
argument|llvm::yaml::FlowStringValue
argument_list|)
end_macro

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|yaml
block|{
struct|struct
name|VirtualRegisterDefinition
block|{
name|unsigned
name|ID
decl_stmt|;
name|StringValue
name|Class
decl_stmt|;
comment|// TODO: Serialize the virtual register hints.
block|}
struct|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|VirtualRegisterDefinition
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
argument|IO&YamlIO
argument_list|,
argument|VirtualRegisterDefinition&Reg
argument_list|)
block|{
name|YamlIO
operator|.
name|mapRequired
argument_list|(
literal|"id"
argument_list|,
name|Reg
operator|.
name|ID
argument_list|)
block|;
name|YamlIO
operator|.
name|mapRequired
argument_list|(
literal|"class"
argument_list|,
name|Reg
operator|.
name|Class
argument_list|)
block|;   }
specifier|static
specifier|const
name|bool
name|flow
operator|=
name|true
block|; }
expr_stmt|;
struct|struct
name|MachineBasicBlock
block|{
name|unsigned
name|ID
decl_stmt|;
name|StringValue
name|Name
decl_stmt|;
name|unsigned
name|Alignment
init|=
literal|0
decl_stmt|;
name|bool
name|IsLandingPad
init|=
name|false
decl_stmt|;
name|bool
name|AddressTaken
init|=
name|false
decl_stmt|;
comment|// TODO: Serialize the successor weights.
name|std
operator|::
name|vector
operator|<
name|FlowStringValue
operator|>
name|Successors
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|FlowStringValue
operator|>
name|LiveIns
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|StringValue
operator|>
name|Instructions
expr_stmt|;
block|}
struct|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|MachineBasicBlock
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
argument|IO&YamlIO
argument_list|,
argument|MachineBasicBlock&MBB
argument_list|)
block|{
name|YamlIO
operator|.
name|mapRequired
argument_list|(
literal|"id"
argument_list|,
name|MBB
operator|.
name|ID
argument_list|)
block|;
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"name"
argument_list|,
name|MBB
operator|.
name|Name
argument_list|,
name|StringValue
argument_list|()
argument_list|)
block|;
comment|// Don't print out an empty name.
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"alignment"
argument_list|,
name|MBB
operator|.
name|Alignment
argument_list|)
block|;
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"isLandingPad"
argument_list|,
name|MBB
operator|.
name|IsLandingPad
argument_list|)
block|;
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"addressTaken"
argument_list|,
name|MBB
operator|.
name|AddressTaken
argument_list|)
block|;
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"successors"
argument_list|,
name|MBB
operator|.
name|Successors
argument_list|)
block|;
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"liveins"
argument_list|,
name|MBB
operator|.
name|LiveIns
argument_list|)
block|;
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"instructions"
argument_list|,
name|MBB
operator|.
name|Instructions
argument_list|)
block|;   }
block|}
expr_stmt|;
comment|/// Serializable representation of stack object from the MachineFrameInfo class.
comment|///
comment|/// The flags 'isImmutable' and 'isAliased' aren't serialized, as they are
comment|/// determined by the object's type and frame information flags.
comment|/// Dead stack objects aren't serialized.
comment|///
comment|/// TODO: Determine isPreallocated flag by mapping between objects and local
comment|/// objects (Serialize local objects).
struct|struct
name|MachineStackObject
block|{
enum|enum
name|ObjectType
block|{
name|DefaultType
block|,
name|SpillSlot
block|,
name|VariableSized
block|}
enum|;
comment|// TODO: Serialize LLVM alloca reference.
name|unsigned
name|ID
decl_stmt|;
name|ObjectType
name|Type
init|=
name|DefaultType
decl_stmt|;
name|int64_t
name|Offset
init|=
literal|0
decl_stmt|;
name|uint64_t
name|Size
init|=
literal|0
decl_stmt|;
name|unsigned
name|Alignment
init|=
literal|0
decl_stmt|;
block|}
struct|;
name|template
operator|<
operator|>
expr|struct
name|ScalarEnumerationTraits
operator|<
name|MachineStackObject
operator|::
name|ObjectType
operator|>
block|{
specifier|static
name|void
name|enumeration
argument_list|(
argument|yaml::IO&IO
argument_list|,
argument|MachineStackObject::ObjectType&Type
argument_list|)
block|{
name|IO
operator|.
name|enumCase
argument_list|(
name|Type
argument_list|,
literal|"default"
argument_list|,
name|MachineStackObject
operator|::
name|DefaultType
argument_list|)
block|;
name|IO
operator|.
name|enumCase
argument_list|(
name|Type
argument_list|,
literal|"spill-slot"
argument_list|,
name|MachineStackObject
operator|::
name|SpillSlot
argument_list|)
block|;
name|IO
operator|.
name|enumCase
argument_list|(
name|Type
argument_list|,
literal|"variable-sized"
argument_list|,
name|MachineStackObject
operator|::
name|VariableSized
argument_list|)
block|;   }
block|}
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|MachineStackObject
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
argument|yaml::IO&YamlIO
argument_list|,
argument|MachineStackObject&Object
argument_list|)
block|{
name|YamlIO
operator|.
name|mapRequired
argument_list|(
literal|"id"
argument_list|,
name|Object
operator|.
name|ID
argument_list|)
block|;
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"type"
argument_list|,
name|Object
operator|.
name|Type
argument_list|,
name|MachineStackObject
operator|::
name|DefaultType
argument_list|)
block|;
comment|// Don't print the default type.
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"offset"
argument_list|,
name|Object
operator|.
name|Offset
argument_list|)
block|;
if|if
condition|(
name|Object
operator|.
name|Type
operator|!=
name|MachineStackObject
operator|::
name|VariableSized
condition|)
name|YamlIO
operator|.
name|mapRequired
argument_list|(
literal|"size"
argument_list|,
name|Object
operator|.
name|Size
argument_list|)
expr_stmt|;
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"alignment"
argument_list|,
name|Object
operator|.
name|Alignment
argument_list|)
block|;   }
specifier|static
specifier|const
name|bool
name|flow
operator|=
name|true
expr_stmt|;
block|}
empty_stmt|;
comment|/// Serializable representation of the fixed stack object from the
comment|/// MachineFrameInfo class.
struct|struct
name|FixedMachineStackObject
block|{
enum|enum
name|ObjectType
block|{
name|DefaultType
block|,
name|SpillSlot
block|}
enum|;
name|unsigned
name|ID
decl_stmt|;
name|ObjectType
name|Type
init|=
name|DefaultType
decl_stmt|;
name|int64_t
name|Offset
init|=
literal|0
decl_stmt|;
name|uint64_t
name|Size
init|=
literal|0
decl_stmt|;
name|unsigned
name|Alignment
init|=
literal|0
decl_stmt|;
name|bool
name|IsImmutable
init|=
name|false
decl_stmt|;
name|bool
name|IsAliased
init|=
name|false
decl_stmt|;
block|}
struct|;
name|template
operator|<
operator|>
expr|struct
name|ScalarEnumerationTraits
operator|<
name|FixedMachineStackObject
operator|::
name|ObjectType
operator|>
block|{
specifier|static
name|void
name|enumeration
argument_list|(
argument|yaml::IO&IO
argument_list|,
argument|FixedMachineStackObject::ObjectType&Type
argument_list|)
block|{
name|IO
operator|.
name|enumCase
argument_list|(
name|Type
argument_list|,
literal|"default"
argument_list|,
name|FixedMachineStackObject
operator|::
name|DefaultType
argument_list|)
block|;
name|IO
operator|.
name|enumCase
argument_list|(
name|Type
argument_list|,
literal|"spill-slot"
argument_list|,
name|FixedMachineStackObject
operator|::
name|SpillSlot
argument_list|)
block|;   }
block|}
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|FixedMachineStackObject
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
argument|yaml::IO&YamlIO
argument_list|,
argument|FixedMachineStackObject&Object
argument_list|)
block|{
name|YamlIO
operator|.
name|mapRequired
argument_list|(
literal|"id"
argument_list|,
name|Object
operator|.
name|ID
argument_list|)
block|;
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"type"
argument_list|,
name|Object
operator|.
name|Type
argument_list|,
name|FixedMachineStackObject
operator|::
name|DefaultType
argument_list|)
block|;
comment|// Don't print the default type.
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"offset"
argument_list|,
name|Object
operator|.
name|Offset
argument_list|)
block|;
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"size"
argument_list|,
name|Object
operator|.
name|Size
argument_list|)
block|;
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"alignment"
argument_list|,
name|Object
operator|.
name|Alignment
argument_list|)
block|;
if|if
condition|(
name|Object
operator|.
name|Type
operator|!=
name|FixedMachineStackObject
operator|::
name|SpillSlot
condition|)
block|{
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"isImmutable"
argument_list|,
name|Object
operator|.
name|IsImmutable
argument_list|)
expr_stmt|;
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"isAliased"
argument_list|,
name|Object
operator|.
name|IsAliased
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
specifier|const
name|bool
name|flow
operator|=
name|true
block|; }
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace yaml
end_comment

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_expr_stmt
unit|LLVM_YAML_IS_SEQUENCE_VECTOR
operator|(
name|llvm
operator|::
name|yaml
operator|::
name|VirtualRegisterDefinition
operator|)
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::yaml::MachineBasicBlock
argument_list|)
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::yaml::MachineStackObject
argument_list|)
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::yaml::FixedMachineStackObject
argument_list|)
name|namespace
name|llvm
block|{
name|namespace
name|yaml
block|{
comment|/// Serializable representation of MachineFrameInfo.
comment|///
comment|/// Doesn't serialize attributes like 'StackAlignment', 'IsStackRealignable' and
comment|/// 'RealignOption' as they are determined by the target and LLVM function
comment|/// attributes.
comment|/// It also doesn't serialize attributes like 'NumFixedObject' and
comment|/// 'HasVarSizedObjects' as they are determined by the frame objects themselves.
block|struct
name|MachineFrameInfo
block|{
name|bool
name|IsFrameAddressTaken
operator|=
name|false
block|;
name|bool
name|IsReturnAddressTaken
operator|=
name|false
block|;
name|bool
name|HasStackMap
operator|=
name|false
block|;
name|bool
name|HasPatchPoint
operator|=
name|false
block|;
name|uint64_t
name|StackSize
operator|=
literal|0
block|;
name|int
name|OffsetAdjustment
operator|=
literal|0
block|;
name|unsigned
name|MaxAlignment
operator|=
literal|0
block|;
name|bool
name|AdjustsStack
operator|=
name|false
block|;
name|bool
name|HasCalls
operator|=
name|false
block|;
comment|// TODO: Serialize StackProtectorIdx and FunctionContextIdx
name|unsigned
name|MaxCallFrameSize
operator|=
literal|0
block|;
comment|// TODO: Serialize callee saved info.
comment|// TODO: Serialize local frame objects.
name|bool
name|HasOpaqueSPAdjustment
operator|=
name|false
block|;
name|bool
name|HasVAStart
operator|=
name|false
block|;
name|bool
name|HasMustTailInVarArgFunc
operator|=
name|false
block|;
comment|// TODO: Serialize save and restore MBB references.
block|}
block|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|MachineFrameInfo
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
argument|IO&YamlIO
argument_list|,
argument|MachineFrameInfo&MFI
argument_list|)
block|{
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"isFrameAddressTaken"
argument_list|,
name|MFI
operator|.
name|IsFrameAddressTaken
argument_list|)
block|;
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"isReturnAddressTaken"
argument_list|,
name|MFI
operator|.
name|IsReturnAddressTaken
argument_list|)
block|;
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"hasStackMap"
argument_list|,
name|MFI
operator|.
name|HasStackMap
argument_list|)
block|;
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"hasPatchPoint"
argument_list|,
name|MFI
operator|.
name|HasPatchPoint
argument_list|)
block|;
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"stackSize"
argument_list|,
name|MFI
operator|.
name|StackSize
argument_list|)
block|;
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"offsetAdjustment"
argument_list|,
name|MFI
operator|.
name|OffsetAdjustment
argument_list|)
block|;
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"maxAlignment"
argument_list|,
name|MFI
operator|.
name|MaxAlignment
argument_list|)
block|;
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"adjustsStack"
argument_list|,
name|MFI
operator|.
name|AdjustsStack
argument_list|)
block|;
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"hasCalls"
argument_list|,
name|MFI
operator|.
name|HasCalls
argument_list|)
block|;
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"maxCallFrameSize"
argument_list|,
name|MFI
operator|.
name|MaxCallFrameSize
argument_list|)
block|;
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"hasOpaqueSPAdjustment"
argument_list|,
name|MFI
operator|.
name|HasOpaqueSPAdjustment
argument_list|)
block|;
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"hasVAStart"
argument_list|,
name|MFI
operator|.
name|HasVAStart
argument_list|)
block|;
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"hasMustTailInVarArgFunc"
argument_list|,
name|MFI
operator|.
name|HasMustTailInVarArgFunc
argument_list|)
block|;   }
block|}
block|;  struct
name|MachineFunction
block|{
name|StringRef
name|Name
block|;
name|unsigned
name|Alignment
operator|=
literal|0
block|;
name|bool
name|ExposesReturnsTwice
operator|=
name|false
block|;
name|bool
name|HasInlineAsm
operator|=
name|false
block|;
comment|// Register information
name|bool
name|IsSSA
operator|=
name|false
block|;
name|bool
name|TracksRegLiveness
operator|=
name|false
block|;
name|bool
name|TracksSubRegLiveness
operator|=
name|false
block|;
name|std
operator|::
name|vector
operator|<
name|VirtualRegisterDefinition
operator|>
name|VirtualRegisters
block|;
comment|// TODO: Serialize the various register masks.
comment|// TODO: Serialize live in registers.
comment|// Frame information
name|MachineFrameInfo
name|FrameInfo
block|;
name|std
operator|::
name|vector
operator|<
name|FixedMachineStackObject
operator|>
name|FixedStackObjects
block|;
name|std
operator|::
name|vector
operator|<
name|MachineStackObject
operator|>
name|StackObjects
block|;
name|std
operator|::
name|vector
operator|<
name|MachineBasicBlock
operator|>
name|BasicBlocks
block|; }
block|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|MachineFunction
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
argument|IO&YamlIO
argument_list|,
argument|MachineFunction&MF
argument_list|)
block|{
name|YamlIO
operator|.
name|mapRequired
argument_list|(
literal|"name"
argument_list|,
name|MF
operator|.
name|Name
argument_list|)
block|;
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"alignment"
argument_list|,
name|MF
operator|.
name|Alignment
argument_list|)
block|;
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"exposesReturnsTwice"
argument_list|,
name|MF
operator|.
name|ExposesReturnsTwice
argument_list|)
block|;
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"hasInlineAsm"
argument_list|,
name|MF
operator|.
name|HasInlineAsm
argument_list|)
block|;
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"isSSA"
argument_list|,
name|MF
operator|.
name|IsSSA
argument_list|)
block|;
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"tracksRegLiveness"
argument_list|,
name|MF
operator|.
name|TracksRegLiveness
argument_list|)
block|;
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"tracksSubRegLiveness"
argument_list|,
name|MF
operator|.
name|TracksSubRegLiveness
argument_list|)
block|;
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"registers"
argument_list|,
name|MF
operator|.
name|VirtualRegisters
argument_list|)
block|;
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"frameInfo"
argument_list|,
name|MF
operator|.
name|FrameInfo
argument_list|)
block|;
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"fixedStack"
argument_list|,
name|MF
operator|.
name|FixedStackObjects
argument_list|)
block|;
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"stack"
argument_list|,
name|MF
operator|.
name|StackObjects
argument_list|)
block|;
name|YamlIO
operator|.
name|mapOptional
argument_list|(
literal|"body"
argument_list|,
name|MF
operator|.
name|BasicBlocks
argument_list|)
block|;   }
block|}
block|;  }
comment|// end namespace yaml
block|}
end_expr_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

