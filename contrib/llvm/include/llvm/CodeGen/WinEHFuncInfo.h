begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- llvm/CodeGen/WinEHFuncInfo.h ----------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Data structures and associated state for Windows exception handling schemes.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CODEGEN_WINEHFUNCINFO_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CODEGEN_WINEHFUNCINFO_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/TinyPtrVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|BasicBlock
decl_stmt|;
name|class
name|Constant
decl_stmt|;
name|class
name|Function
decl_stmt|;
name|class
name|GlobalVariable
decl_stmt|;
name|class
name|IntrinsicInst
decl_stmt|;
name|class
name|LandingPadInst
decl_stmt|;
name|class
name|MCSymbol
decl_stmt|;
name|class
name|Value
decl_stmt|;
enum|enum
name|ActionType
block|{
name|Catch
block|,
name|Cleanup
block|}
enum|;
name|class
name|ActionHandler
block|{
name|public
label|:
name|ActionHandler
argument_list|(
argument|BasicBlock *BB
argument_list|,
argument|ActionType Type
argument_list|)
block|:
name|StartBB
argument_list|(
name|BB
argument_list|)
operator|,
name|Type
argument_list|(
name|Type
argument_list|)
operator|,
name|EHState
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|HandlerBlockOrFunc
argument_list|(
argument|nullptr
argument_list|)
block|{}
name|ActionType
name|getType
argument_list|()
specifier|const
block|{
return|return
name|Type
return|;
block|}
name|BasicBlock
operator|*
name|getStartBlock
argument_list|()
specifier|const
block|{
return|return
name|StartBB
return|;
block|}
name|bool
name|hasBeenProcessed
parameter_list|()
block|{
return|return
name|HandlerBlockOrFunc
operator|!=
name|nullptr
return|;
block|}
name|void
name|setHandlerBlockOrFunc
parameter_list|(
name|Constant
modifier|*
name|F
parameter_list|)
block|{
name|HandlerBlockOrFunc
operator|=
name|F
expr_stmt|;
block|}
name|Constant
modifier|*
name|getHandlerBlockOrFunc
parameter_list|()
block|{
return|return
name|HandlerBlockOrFunc
return|;
block|}
name|void
name|setEHState
parameter_list|(
name|int
name|State
parameter_list|)
block|{
name|EHState
operator|=
name|State
expr_stmt|;
block|}
name|int
name|getEHState
argument_list|()
specifier|const
block|{
return|return
name|EHState
return|;
block|}
name|private
label|:
name|BasicBlock
modifier|*
name|StartBB
decl_stmt|;
name|ActionType
name|Type
decl_stmt|;
name|int
name|EHState
decl_stmt|;
comment|// Can be either a BlockAddress or a Function depending on the EH personality.
name|Constant
modifier|*
name|HandlerBlockOrFunc
decl_stmt|;
block|}
empty_stmt|;
name|class
name|CatchHandler
range|:
name|public
name|ActionHandler
block|{
name|public
operator|:
name|CatchHandler
argument_list|(
name|BasicBlock
operator|*
name|BB
argument_list|,
name|Constant
operator|*
name|Selector
argument_list|,
name|BasicBlock
operator|*
name|NextBB
argument_list|)
operator|:
name|ActionHandler
argument_list|(
name|BB
argument_list|,
name|ActionType
operator|::
name|Catch
argument_list|)
block|,
name|Selector
argument_list|(
name|Selector
argument_list|)
block|,
name|NextBB
argument_list|(
name|NextBB
argument_list|)
block|,
name|ExceptionObjectVar
argument_list|(
name|nullptr
argument_list|)
block|,
name|ExceptionObjectIndex
argument_list|(
argument|-
literal|1
argument_list|)
block|{}
comment|// Method for support type inquiry through isa, cast, and dyn_cast:
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const ActionHandler *H
argument_list|)
block|{
return|return
name|H
operator|->
name|getType
argument_list|()
operator|==
name|ActionType
operator|::
name|Catch
return|;
block|}
name|Constant
operator|*
name|getSelector
argument_list|()
specifier|const
block|{
return|return
name|Selector
return|;
block|}
name|BasicBlock
operator|*
name|getNextBB
argument_list|()
specifier|const
block|{
return|return
name|NextBB
return|;
block|}
specifier|const
name|Value
operator|*
name|getExceptionVar
argument_list|()
block|{
return|return
name|ExceptionObjectVar
return|;
block|}
name|TinyPtrVector
operator|<
name|BasicBlock
operator|*
operator|>
operator|&
name|getReturnTargets
argument_list|()
block|{
return|return
name|ReturnTargets
return|;
block|}
name|void
name|setExceptionVar
argument_list|(
argument|const Value *Val
argument_list|)
block|{
name|ExceptionObjectVar
operator|=
name|Val
block|; }
name|void
name|setExceptionVarIndex
argument_list|(
argument|int Index
argument_list|)
block|{
name|ExceptionObjectIndex
operator|=
name|Index
block|;  }
name|int
name|getExceptionVarIndex
argument_list|()
specifier|const
block|{
return|return
name|ExceptionObjectIndex
return|;
block|}
name|void
name|setReturnTargets
argument_list|(
argument|TinyPtrVector<BasicBlock *>&Targets
argument_list|)
block|{
name|ReturnTargets
operator|=
name|Targets
block|;   }
name|private
operator|:
name|Constant
operator|*
name|Selector
block|;
name|BasicBlock
operator|*
name|NextBB
block|;
comment|// While catch handlers are being outlined the ExceptionObjectVar field will
comment|// be populated with the instruction in the parent frame that corresponds
comment|// to the exception object (or nullptr if the catch does not use an
comment|// exception object) and the ExceptionObjectIndex field will be -1.
comment|// When the parseEHActions function is called to populate a vector of
comment|// instances of this class, the ExceptionObjectVar field will be nullptr
comment|// and the ExceptionObjectIndex will be the index of the exception object in
comment|// the parent function's frameescape block.
specifier|const
name|Value
operator|*
name|ExceptionObjectVar
block|;
name|int
name|ExceptionObjectIndex
block|;
name|TinyPtrVector
operator|<
name|BasicBlock
operator|*
operator|>
name|ReturnTargets
block|; }
decl_stmt|;
name|class
name|CleanupHandler
range|:
name|public
name|ActionHandler
block|{
name|public
operator|:
name|CleanupHandler
argument_list|(
name|BasicBlock
operator|*
name|BB
argument_list|)
operator|:
name|ActionHandler
argument_list|(
argument|BB
argument_list|,
argument|ActionType::Cleanup
argument_list|)
block|{}
comment|// Method for support type inquiry through isa, cast, and dyn_cast:
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const ActionHandler *H
argument_list|)
block|{
return|return
name|H
operator|->
name|getType
argument_list|()
operator|==
name|ActionType
operator|::
name|Cleanup
return|;
block|}
expr|}
block|;
name|void
name|parseEHActions
argument_list|(
specifier|const
name|IntrinsicInst
operator|*
name|II
argument_list|,
name|SmallVectorImpl
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|ActionHandler
operator|>>
operator|&
name|Actions
argument_list|)
block|;
comment|// The following structs respresent the .xdata for functions using C++
comment|// exceptions on Windows.
block|struct
name|WinEHUnwindMapEntry
block|{
name|int
name|ToState
block|;
name|Function
operator|*
name|Cleanup
block|; }
block|;  struct
name|WinEHHandlerType
block|{
name|int
name|Adjectives
block|;
name|GlobalVariable
operator|*
name|TypeDescriptor
block|;
name|int
name|CatchObjRecoverIdx
block|;
name|Function
operator|*
name|Handler
block|; }
block|;  struct
name|WinEHTryBlockMapEntry
block|{
name|int
name|TryLow
block|;
name|int
name|TryHigh
block|;
name|SmallVector
operator|<
name|WinEHHandlerType
block|,
literal|1
operator|>
name|HandlerArray
block|; }
block|;  struct
name|WinEHFuncInfo
block|{
name|DenseMap
operator|<
specifier|const
name|Function
operator|*
block|,
specifier|const
name|LandingPadInst
operator|*
operator|>
name|RootLPad
block|;
name|DenseMap
operator|<
specifier|const
name|Function
operator|*
block|,
specifier|const
name|InvokeInst
operator|*
operator|>
name|LastInvoke
block|;
name|DenseMap
operator|<
specifier|const
name|Function
operator|*
block|,
name|int
operator|>
name|HandlerEnclosedState
block|;
name|DenseMap
operator|<
specifier|const
name|Function
operator|*
block|,
name|bool
operator|>
name|LastInvokeVisited
block|;
name|DenseMap
operator|<
specifier|const
name|LandingPadInst
operator|*
block|,
name|int
operator|>
name|LandingPadStateMap
block|;
name|DenseMap
operator|<
specifier|const
name|Function
operator|*
block|,
name|int
operator|>
name|CatchHandlerParentFrameObjIdx
block|;
name|DenseMap
operator|<
specifier|const
name|Function
operator|*
block|,
name|int
operator|>
name|CatchHandlerParentFrameObjOffset
block|;
name|DenseMap
operator|<
specifier|const
name|Function
operator|*
block|,
name|int
operator|>
name|CatchHandlerMaxState
block|;
name|DenseMap
operator|<
specifier|const
name|Function
operator|*
block|,
name|int
operator|>
name|HandlerBaseState
block|;
name|SmallVector
operator|<
name|WinEHUnwindMapEntry
block|,
literal|4
operator|>
name|UnwindMap
block|;
name|SmallVector
operator|<
name|WinEHTryBlockMapEntry
block|,
literal|4
operator|>
name|TryBlockMap
block|;
name|SmallVector
operator|<
name|std
operator|::
name|pair
operator|<
name|MCSymbol
operator|*
block|,
name|int
operator|>
block|,
literal|4
operator|>
name|IPToStateList
block|;
name|int
name|UnwindHelpFrameIdx
block|;
name|int
name|UnwindHelpFrameOffset
block|;
name|unsigned
name|NumIPToStateFuncsVisited
block|;
name|WinEHFuncInfo
argument_list|()
operator|:
name|UnwindHelpFrameIdx
argument_list|(
name|INT_MAX
argument_list|)
block|,
name|UnwindHelpFrameOffset
argument_list|(
operator|-
literal|1
argument_list|)
block|,
name|NumIPToStateFuncsVisited
argument_list|(
literal|0
argument_list|)
block|{}
block|}
block|;  }
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_CODEGEN_WINEHFUNCINFO_H
end_comment

end_unit

