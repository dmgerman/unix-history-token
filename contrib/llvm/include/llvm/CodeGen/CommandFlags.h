begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- CommandFlags.h - Command Line Flags Interface -----------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file contains codegen-specific flags that are shared between different
end_comment

begin_comment
comment|// command line tools. The tools "llc" and "opt" both use this file to prevent
end_comment

begin_comment
comment|// flag duplication.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CODEGEN_COMMANDFLAGS_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CODEGEN_COMMANDFLAGS_H
end_define

begin_include
include|#
directive|include
file|"llvm/Support/CodeGen.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/CommandLine.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetMachine.h"
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_decl_stmt
name|using
name|namespace
name|llvm
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|cl
operator|::
name|opt
operator|<
name|std
operator|::
name|string
operator|>
name|MArch
argument_list|(
literal|"march"
argument_list|,
name|cl
operator|::
name|desc
argument_list|(
literal|"Architecture to generate code for (see --version)"
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|cl
operator|::
name|opt
operator|<
name|std
operator|::
name|string
operator|>
name|MCPU
argument_list|(
literal|"mcpu"
argument_list|,
name|cl
operator|::
name|desc
argument_list|(
literal|"Target a specific cpu type (-mcpu=help for details)"
argument_list|)
argument_list|,
name|cl
operator|::
name|value_desc
argument_list|(
literal|"cpu-name"
argument_list|)
argument_list|,
name|cl
operator|::
name|init
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|cl
operator|::
name|list
operator|<
name|std
operator|::
name|string
operator|>
name|MAttrs
argument_list|(
literal|"mattr"
argument_list|,
name|cl
operator|::
name|CommaSeparated
argument_list|,
name|cl
operator|::
name|desc
argument_list|(
literal|"Target specific attributes (-mattr=help for details)"
argument_list|)
argument_list|,
name|cl
operator|::
name|value_desc
argument_list|(
literal|"a1,+a2,-a3,..."
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|cl
operator|::
name|opt
operator|<
name|Reloc
operator|::
name|Model
operator|>
name|RelocModel
argument_list|(
literal|"relocation-model"
argument_list|,
name|cl
operator|::
name|desc
argument_list|(
literal|"Choose relocation model"
argument_list|)
argument_list|,
name|cl
operator|::
name|init
argument_list|(
name|Reloc
operator|::
name|Default
argument_list|)
argument_list|,
name|cl
operator|::
name|values
argument_list|(
name|clEnumValN
argument_list|(
name|Reloc
operator|::
name|Default
argument_list|,
literal|"default"
argument_list|,
literal|"Target default relocation model"
argument_list|)
argument_list|,
name|clEnumValN
argument_list|(
name|Reloc
operator|::
name|Static
argument_list|,
literal|"static"
argument_list|,
literal|"Non-relocatable code"
argument_list|)
argument_list|,
name|clEnumValN
argument_list|(
name|Reloc
operator|::
name|PIC_
argument_list|,
literal|"pic"
argument_list|,
literal|"Fully relocatable, position independent code"
argument_list|)
argument_list|,
name|clEnumValN
argument_list|(
name|Reloc
operator|::
name|DynamicNoPIC
argument_list|,
literal|"dynamic-no-pic"
argument_list|,
literal|"Relocatable external references, non-relocatable code"
argument_list|)
argument_list|,
name|clEnumValEnd
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|cl
operator|::
name|opt
operator|<
name|llvm
operator|::
name|CodeModel
operator|::
name|Model
operator|>
name|CMModel
argument_list|(
literal|"code-model"
argument_list|,
name|cl
operator|::
name|desc
argument_list|(
literal|"Choose code model"
argument_list|)
argument_list|,
name|cl
operator|::
name|init
argument_list|(
name|CodeModel
operator|::
name|Default
argument_list|)
argument_list|,
name|cl
operator|::
name|values
argument_list|(
name|clEnumValN
argument_list|(
name|CodeModel
operator|::
name|Default
argument_list|,
literal|"default"
argument_list|,
literal|"Target default code model"
argument_list|)
argument_list|,
name|clEnumValN
argument_list|(
name|CodeModel
operator|::
name|Small
argument_list|,
literal|"small"
argument_list|,
literal|"Small code model"
argument_list|)
argument_list|,
name|clEnumValN
argument_list|(
name|CodeModel
operator|::
name|Kernel
argument_list|,
literal|"kernel"
argument_list|,
literal|"Kernel code model"
argument_list|)
argument_list|,
name|clEnumValN
argument_list|(
name|CodeModel
operator|::
name|Medium
argument_list|,
literal|"medium"
argument_list|,
literal|"Medium code model"
argument_list|)
argument_list|,
name|clEnumValN
argument_list|(
name|CodeModel
operator|::
name|Large
argument_list|,
literal|"large"
argument_list|,
literal|"Large code model"
argument_list|)
argument_list|,
name|clEnumValEnd
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|cl
operator|::
name|opt
operator|<
name|bool
operator|>
name|RelaxAll
argument_list|(
literal|"mc-relax-all"
argument_list|,
name|cl
operator|::
name|desc
argument_list|(
literal|"When used with filetype=obj, "
literal|"relax all fixups in the emitted object file"
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|cl
operator|::
name|opt
operator|<
name|TargetMachine
operator|::
name|CodeGenFileType
operator|>
name|FileType
argument_list|(
literal|"filetype"
argument_list|,
name|cl
operator|::
name|init
argument_list|(
name|TargetMachine
operator|::
name|CGFT_AssemblyFile
argument_list|)
argument_list|,
name|cl
operator|::
name|desc
argument_list|(
literal|"Choose a file type (not all types are supported by all targets):"
argument_list|)
argument_list|,
name|cl
operator|::
name|values
argument_list|(
name|clEnumValN
argument_list|(
name|TargetMachine
operator|::
name|CGFT_AssemblyFile
argument_list|,
literal|"asm"
argument_list|,
literal|"Emit an assembly ('.s') file"
argument_list|)
argument_list|,
name|clEnumValN
argument_list|(
name|TargetMachine
operator|::
name|CGFT_ObjectFile
argument_list|,
literal|"obj"
argument_list|,
literal|"Emit a native object ('.o') file"
argument_list|)
argument_list|,
name|clEnumValN
argument_list|(
name|TargetMachine
operator|::
name|CGFT_Null
argument_list|,
literal|"null"
argument_list|,
literal|"Emit nothing, for performance testing"
argument_list|)
argument_list|,
name|clEnumValEnd
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|cl
operator|::
name|opt
operator|<
name|bool
operator|>
name|DisableDotLoc
argument_list|(
literal|"disable-dot-loc"
argument_list|,
name|cl
operator|::
name|Hidden
argument_list|,
name|cl
operator|::
name|desc
argument_list|(
literal|"Do not use .loc entries"
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|cl
operator|::
name|opt
operator|<
name|bool
operator|>
name|DisableCFI
argument_list|(
literal|"disable-cfi"
argument_list|,
name|cl
operator|::
name|Hidden
argument_list|,
name|cl
operator|::
name|desc
argument_list|(
literal|"Do not use .cfi_* directives"
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|cl
operator|::
name|opt
operator|<
name|bool
operator|>
name|EnableDwarfDirectory
argument_list|(
literal|"enable-dwarf-directory"
argument_list|,
name|cl
operator|::
name|Hidden
argument_list|,
name|cl
operator|::
name|desc
argument_list|(
literal|"Use .file directives with an explicit directory."
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|cl
operator|::
name|opt
operator|<
name|bool
operator|>
name|DisableRedZone
argument_list|(
literal|"disable-red-zone"
argument_list|,
name|cl
operator|::
name|desc
argument_list|(
literal|"Do not emit code that uses the red zone."
argument_list|)
argument_list|,
name|cl
operator|::
name|init
argument_list|(
name|false
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|cl
operator|::
name|opt
operator|<
name|bool
operator|>
name|EnableFPMAD
argument_list|(
literal|"enable-fp-mad"
argument_list|,
name|cl
operator|::
name|desc
argument_list|(
literal|"Enable less precise MAD instructions to be generated"
argument_list|)
argument_list|,
name|cl
operator|::
name|init
argument_list|(
name|false
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|cl
operator|::
name|opt
operator|<
name|bool
operator|>
name|DisableFPElim
argument_list|(
literal|"disable-fp-elim"
argument_list|,
name|cl
operator|::
name|desc
argument_list|(
literal|"Disable frame pointer elimination optimization"
argument_list|)
argument_list|,
name|cl
operator|::
name|init
argument_list|(
name|false
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|cl
operator|::
name|opt
operator|<
name|bool
operator|>
name|EnableUnsafeFPMath
argument_list|(
literal|"enable-unsafe-fp-math"
argument_list|,
name|cl
operator|::
name|desc
argument_list|(
literal|"Enable optimizations that may decrease FP precision"
argument_list|)
argument_list|,
name|cl
operator|::
name|init
argument_list|(
name|false
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|cl
operator|::
name|opt
operator|<
name|bool
operator|>
name|EnableNoInfsFPMath
argument_list|(
literal|"enable-no-infs-fp-math"
argument_list|,
name|cl
operator|::
name|desc
argument_list|(
literal|"Enable FP math optimizations that assume no +-Infs"
argument_list|)
argument_list|,
name|cl
operator|::
name|init
argument_list|(
name|false
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|cl
operator|::
name|opt
operator|<
name|bool
operator|>
name|EnableNoNaNsFPMath
argument_list|(
literal|"enable-no-nans-fp-math"
argument_list|,
name|cl
operator|::
name|desc
argument_list|(
literal|"Enable FP math optimizations that assume no NaNs"
argument_list|)
argument_list|,
name|cl
operator|::
name|init
argument_list|(
name|false
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|cl
operator|::
name|opt
operator|<
name|bool
operator|>
name|EnableHonorSignDependentRoundingFPMath
argument_list|(
literal|"enable-sign-dependent-rounding-fp-math"
argument_list|,
name|cl
operator|::
name|Hidden
argument_list|,
name|cl
operator|::
name|desc
argument_list|(
literal|"Force codegen to assume rounding mode can change dynamically"
argument_list|)
argument_list|,
name|cl
operator|::
name|init
argument_list|(
name|false
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|cl
operator|::
name|opt
operator|<
name|bool
operator|>
name|GenerateSoftFloatCalls
argument_list|(
literal|"soft-float"
argument_list|,
name|cl
operator|::
name|desc
argument_list|(
literal|"Generate software floating point library calls"
argument_list|)
argument_list|,
name|cl
operator|::
name|init
argument_list|(
name|false
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|cl
operator|::
name|opt
operator|<
name|llvm
operator|::
name|FloatABI
operator|::
name|ABIType
operator|>
name|FloatABIForCalls
argument_list|(
literal|"float-abi"
argument_list|,
name|cl
operator|::
name|desc
argument_list|(
literal|"Choose float ABI type"
argument_list|)
argument_list|,
name|cl
operator|::
name|init
argument_list|(
name|FloatABI
operator|::
name|Default
argument_list|)
argument_list|,
name|cl
operator|::
name|values
argument_list|(
name|clEnumValN
argument_list|(
name|FloatABI
operator|::
name|Default
argument_list|,
literal|"default"
argument_list|,
literal|"Target default float ABI type"
argument_list|)
argument_list|,
name|clEnumValN
argument_list|(
name|FloatABI
operator|::
name|Soft
argument_list|,
literal|"soft"
argument_list|,
literal|"Soft float ABI (implied by -soft-float)"
argument_list|)
argument_list|,
name|clEnumValN
argument_list|(
name|FloatABI
operator|::
name|Hard
argument_list|,
literal|"hard"
argument_list|,
literal|"Hard float ABI (uses FP registers)"
argument_list|)
argument_list|,
name|clEnumValEnd
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|cl
operator|::
name|opt
operator|<
name|llvm
operator|::
name|FPOpFusion
operator|::
name|FPOpFusionMode
operator|>
name|FuseFPOps
argument_list|(
literal|"fp-contract"
argument_list|,
name|cl
operator|::
name|desc
argument_list|(
literal|"Enable aggressive formation of fused FP ops"
argument_list|)
argument_list|,
name|cl
operator|::
name|init
argument_list|(
name|FPOpFusion
operator|::
name|Standard
argument_list|)
argument_list|,
name|cl
operator|::
name|values
argument_list|(
name|clEnumValN
argument_list|(
name|FPOpFusion
operator|::
name|Fast
argument_list|,
literal|"fast"
argument_list|,
literal|"Fuse FP ops whenever profitable"
argument_list|)
argument_list|,
name|clEnumValN
argument_list|(
name|FPOpFusion
operator|::
name|Standard
argument_list|,
literal|"on"
argument_list|,
literal|"Only fuse 'blessed' FP ops."
argument_list|)
argument_list|,
name|clEnumValN
argument_list|(
name|FPOpFusion
operator|::
name|Strict
argument_list|,
literal|"off"
argument_list|,
literal|"Only fuse FP ops when the result won't be effected."
argument_list|)
argument_list|,
name|clEnumValEnd
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|cl
operator|::
name|opt
operator|<
name|bool
operator|>
name|DontPlaceZerosInBSS
argument_list|(
literal|"nozero-initialized-in-bss"
argument_list|,
name|cl
operator|::
name|desc
argument_list|(
literal|"Don't place zero-initialized symbols into bss section"
argument_list|)
argument_list|,
name|cl
operator|::
name|init
argument_list|(
name|false
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|cl
operator|::
name|opt
operator|<
name|bool
operator|>
name|EnableGuaranteedTailCallOpt
argument_list|(
literal|"tailcallopt"
argument_list|,
name|cl
operator|::
name|desc
argument_list|(
literal|"Turn fastcc calls into tail calls by (potentially) changing ABI."
argument_list|)
argument_list|,
name|cl
operator|::
name|init
argument_list|(
name|false
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|cl
operator|::
name|opt
operator|<
name|bool
operator|>
name|DisableTailCalls
argument_list|(
literal|"disable-tail-calls"
argument_list|,
name|cl
operator|::
name|desc
argument_list|(
literal|"Never emit tail calls"
argument_list|)
argument_list|,
name|cl
operator|::
name|init
argument_list|(
name|false
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|cl
operator|::
name|opt
operator|<
name|unsigned
operator|>
name|OverrideStackAlignment
argument_list|(
literal|"stack-alignment"
argument_list|,
name|cl
operator|::
name|desc
argument_list|(
literal|"Override default stack alignment"
argument_list|)
argument_list|,
name|cl
operator|::
name|init
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|cl
operator|::
name|opt
operator|<
name|std
operator|::
name|string
operator|>
name|TrapFuncName
argument_list|(
literal|"trap-func"
argument_list|,
name|cl
operator|::
name|Hidden
argument_list|,
name|cl
operator|::
name|desc
argument_list|(
literal|"Emit a call to trap function rather than a trap instruction"
argument_list|)
argument_list|,
name|cl
operator|::
name|init
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|cl
operator|::
name|opt
operator|<
name|bool
operator|>
name|EnablePIE
argument_list|(
literal|"enable-pie"
argument_list|,
name|cl
operator|::
name|desc
argument_list|(
literal|"Assume the creation of a position independent executable."
argument_list|)
argument_list|,
name|cl
operator|::
name|init
argument_list|(
name|false
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|cl
operator|::
name|opt
operator|<
name|bool
operator|>
name|SegmentedStacks
argument_list|(
literal|"segmented-stacks"
argument_list|,
name|cl
operator|::
name|desc
argument_list|(
literal|"Use segmented stacks if possible."
argument_list|)
argument_list|,
name|cl
operator|::
name|init
argument_list|(
name|false
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|cl
operator|::
name|opt
operator|<
name|bool
operator|>
name|UseInitArray
argument_list|(
literal|"use-init-array"
argument_list|,
name|cl
operator|::
name|desc
argument_list|(
literal|"Use .init_array instead of .ctors."
argument_list|)
argument_list|,
name|cl
operator|::
name|init
argument_list|(
name|false
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|cl
operator|::
name|opt
operator|<
name|std
operator|::
name|string
operator|>
name|StopAfter
argument_list|(
literal|"stop-after"
argument_list|,
name|cl
operator|::
name|desc
argument_list|(
literal|"Stop compilation after a specific pass"
argument_list|)
argument_list|,
name|cl
operator|::
name|value_desc
argument_list|(
literal|"pass-name"
argument_list|)
argument_list|,
name|cl
operator|::
name|init
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|cl
operator|::
name|opt
operator|<
name|std
operator|::
name|string
operator|>
name|StartAfter
argument_list|(
literal|"start-after"
argument_list|,
name|cl
operator|::
name|desc
argument_list|(
literal|"Resume compilation after a specific pass"
argument_list|)
argument_list|,
name|cl
operator|::
name|value_desc
argument_list|(
literal|"pass-name"
argument_list|)
argument_list|,
name|cl
operator|::
name|init
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

