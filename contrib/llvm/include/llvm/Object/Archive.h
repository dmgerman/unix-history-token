begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- Archive.h - ar archive file format -----------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares the ar archive file format class.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_OBJECT_ARCHIVE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_OBJECT_ARCHIVE_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/SmallString.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/Twine.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/Binary.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/DataTypes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ErrorHandling.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/MemoryBuffer.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|object
block|{
struct|struct
name|ArchiveMemberHeader
block|{
name|char
name|Name
index|[
literal|16
index|]
decl_stmt|;
name|char
name|LastModified
index|[
literal|12
index|]
decl_stmt|;
name|char
name|UID
index|[
literal|6
index|]
decl_stmt|;
name|char
name|GID
index|[
literal|6
index|]
decl_stmt|;
name|char
name|AccessMode
index|[
literal|8
index|]
decl_stmt|;
name|char
name|Size
index|[
literal|10
index|]
decl_stmt|;
comment|///< Size of data, not including header or padding.
name|char
name|Terminator
index|[
literal|2
index|]
decl_stmt|;
comment|///! Get the name without looking up long names.
name|llvm
operator|::
name|StringRef
name|getName
argument_list|()
specifier|const
block|{
name|char
name|EndCond
block|;
if|if
condition|(
name|Name
index|[
literal|0
index|]
operator|==
literal|'/'
operator|||
name|Name
index|[
literal|0
index|]
operator|==
literal|'#'
condition|)
name|EndCond
operator|=
literal|' '
expr_stmt|;
else|else
name|EndCond
operator|=
literal|'/'
expr_stmt|;
name|llvm
operator|::
name|StringRef
operator|::
name|size_type
name|end
operator|=
name|llvm
operator|::
name|StringRef
argument_list|(
name|Name
argument_list|,
sizeof|sizeof
argument_list|(
name|Name
argument_list|)
argument_list|)
operator|.
name|find
argument_list|(
name|EndCond
argument_list|)
expr_stmt|;
if|if
condition|(
name|end
operator|==
name|llvm
operator|::
name|StringRef
operator|::
name|npos
condition|)
name|end
operator|=
sizeof|sizeof
argument_list|(
name|Name
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|end
operator|<=
sizeof|sizeof
argument_list|(
name|Name
argument_list|)
operator|&&
name|end
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// Don't include the EndCond if there is one.
return|return
name|llvm
operator|::
name|StringRef
argument_list|(
name|Name
argument_list|,
name|end
argument_list|)
return|;
block|}
name|uint64_t
name|getSize
argument_list|()
decl|const
block|{
name|uint64_t
name|ret
decl_stmt|;
if|if
condition|(
name|llvm
operator|::
name|StringRef
argument_list|(
name|Size
argument_list|,
sizeof|sizeof
argument_list|(
name|Size
argument_list|)
argument_list|)
operator|.
name|rtrim
argument_list|(
literal|" "
argument_list|)
operator|.
name|getAsInteger
argument_list|(
literal|10
argument_list|,
name|ret
argument_list|)
condition|)
name|llvm_unreachable
argument_list|(
literal|"Size is not an integer."
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
empty_stmt|;
specifier|static
specifier|const
name|ArchiveMemberHeader
modifier|*
name|ToHeader
parameter_list|(
specifier|const
name|char
modifier|*
name|base
parameter_list|)
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|ArchiveMemberHeader
operator|*
operator|>
operator|(
name|base
operator|)
return|;
block|}
name|class
name|Archive
range|:
name|public
name|Binary
block|{
name|virtual
name|void
name|anchor
argument_list|()
block|;
name|public
operator|:
name|class
name|Child
block|{
specifier|const
name|Archive
operator|*
name|Parent
block|;
comment|/// \brief Includes header but not padding byte.
name|StringRef
name|Data
block|;
comment|/// \brief Offset from Data to the start of the file.
name|uint16_t
name|StartOfFile
block|;
name|public
operator|:
name|Child
argument_list|(
argument|const Archive *p
argument_list|,
argument|StringRef d
argument_list|)
operator|:
name|Parent
argument_list|(
name|p
argument_list|)
block|,
name|Data
argument_list|(
argument|d
argument_list|)
block|{
if|if
condition|(
operator|!
name|p
operator|||
name|d
operator|.
name|empty
argument_list|()
condition|)
return|return;
comment|// Setup StartOfFile and PaddingBytes.
name|StartOfFile
operator|=
sizeof|sizeof
argument_list|(
name|ArchiveMemberHeader
argument_list|)
block|;
comment|// Don't include attached name.
name|StringRef
name|Name
operator|=
name|ToHeader
argument_list|(
name|Data
operator|.
name|data
argument_list|()
argument_list|)
operator|->
name|getName
argument_list|()
block|;
if|if
condition|(
name|Name
operator|.
name|startswith
argument_list|(
literal|"#1/"
argument_list|)
condition|)
block|{
name|uint64_t
name|NameSize
decl_stmt|;
if|if
condition|(
name|Name
operator|.
name|substr
argument_list|(
literal|3
argument_list|)
operator|.
name|rtrim
argument_list|(
literal|" "
argument_list|)
operator|.
name|getAsInteger
argument_list|(
literal|10
argument_list|,
name|NameSize
argument_list|)
condition|)
name|llvm_unreachable
argument_list|(
literal|"Long name length is not an integer"
argument_list|)
expr_stmt|;
name|StartOfFile
operator|+=
name|NameSize
expr_stmt|;
block|}
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|Child
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|(
name|Parent
operator|==
name|other
operator|.
name|Parent
operator|)
operator|&&
operator|(
name|Data
operator|.
name|begin
argument_list|()
operator|==
name|other
operator|.
name|Data
operator|.
name|begin
argument_list|()
operator|)
return|;
block|}
name|bool
name|operator
operator|<
operator|(
specifier|const
name|Child
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|Data
operator|.
name|begin
argument_list|()
operator|<
name|other
operator|.
name|Data
operator|.
name|begin
argument_list|()
return|;
block|}
name|Child
name|getNext
argument_list|()
specifier|const
block|{
name|size_t
name|SpaceToSkip
operator|=
name|Data
operator|.
name|size
argument_list|()
block|;
comment|// If it's odd, add 1 to make it even.
if|if
condition|(
name|SpaceToSkip
operator|&
literal|1
condition|)
operator|++
name|SpaceToSkip
expr_stmt|;
specifier|const
name|char
operator|*
name|NextLoc
operator|=
name|Data
operator|.
name|data
argument_list|()
operator|+
name|SpaceToSkip
block|;
comment|// Check to see if this is past the end of the archive.
if|if
condition|(
name|NextLoc
operator|>=
name|Parent
operator|->
name|Data
operator|->
name|getBufferEnd
argument_list|()
condition|)
return|return
name|Child
argument_list|(
name|Parent
argument_list|,
name|StringRef
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
name|size_t
name|NextSize
operator|=
sizeof|sizeof
argument_list|(
name|ArchiveMemberHeader
argument_list|)
operator|+
name|ToHeader
argument_list|(
name|NextLoc
argument_list|)
operator|->
name|getSize
argument_list|()
decl_stmt|;
return|return
name|Child
argument_list|(
name|Parent
argument_list|,
name|StringRef
argument_list|(
name|NextLoc
argument_list|,
name|NextSize
argument_list|)
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|error_code
name|getName
argument_list|(
name|StringRef
operator|&
name|Result
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|int
name|getLastModified
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|getUID
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|getGID
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|getAccessMode
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_comment
comment|/// \return the size of the archive member without the header or padding.
end_comment

begin_expr_stmt
name|uint64_t
name|getSize
argument_list|()
specifier|const
block|{
return|return
name|Data
operator|.
name|size
argument_list|()
operator|-
name|StartOfFile
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|StringRef
name|getBuffer
argument_list|()
specifier|const
block|{
return|return
name|StringRef
argument_list|(
name|Data
operator|.
name|data
argument_list|()
operator|+
name|StartOfFile
argument_list|,
name|getSize
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|error_code
name|getMemoryBuffer
argument_list|(
name|OwningPtr
operator|<
name|MemoryBuffer
operator|>
operator|&
name|Result
argument_list|,
name|bool
name|FullPath
operator|=
name|false
argument_list|)
decl|const
block|{
name|StringRef
name|Name
decl_stmt|;
if|if
condition|(
name|error_code
name|ec
init|=
name|getName
argument_list|(
name|Name
argument_list|)
condition|)
return|return
name|ec
return|;
name|SmallString
operator|<
literal|128
operator|>
name|Path
expr_stmt|;
name|Result
operator|.
name|reset
argument_list|(
name|MemoryBuffer
operator|::
name|getMemBuffer
argument_list|(
name|getBuffer
argument_list|()
argument_list|,
name|FullPath
condition|?
operator|(
name|Twine
argument_list|(
name|Parent
operator|->
name|getFileName
argument_list|()
argument_list|)
operator|+
literal|"("
operator|+
name|Name
operator|+
literal|")"
operator|)
operator|.
name|toStringRef
argument_list|(
name|Path
argument_list|)
else|:
name|Name
argument_list|,
name|false
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|error_code
operator|::
name|success
argument_list|()
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|error_code
name|getAsBinary
argument_list|(
name|OwningPtr
operator|<
name|Binary
operator|>
operator|&
name|Result
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
unit|};
name|class
name|child_iterator
block|{
name|Child
name|child
decl_stmt|;
name|public
label|:
name|child_iterator
argument_list|()
operator|:
name|child
argument_list|(
argument|Child(
literal|0
argument|, StringRef())
argument_list|)
block|{}
name|child_iterator
argument_list|(
specifier|const
name|Child
operator|&
name|c
argument_list|)
operator|:
name|child
argument_list|(
argument|c
argument_list|)
block|{}
specifier|const
name|Child
operator|*
name|operator
operator|->
expr|(
block|)
decl|const
block|{
return|return
operator|&
name|child
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|child_iterator
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|child
operator|==
name|other
operator|.
name|child
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|child_iterator
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|other
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|<
operator|(
specifier|const
name|child_iterator
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|child
operator|<
name|other
operator|.
name|child
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|child_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
comment|// Preincrement
name|child
operator|=
name|child
operator|.
name|getNext
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_decl_stmt
unit|};
name|class
name|Symbol
block|{
specifier|const
name|Archive
modifier|*
name|Parent
decl_stmt|;
name|uint32_t
name|SymbolIndex
decl_stmt|;
name|uint32_t
name|StringIndex
decl_stmt|;
comment|// Extra index to the string.
name|public
label|:
name|bool
name|operator
operator|==
operator|(
specifier|const
name|Symbol
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|(
name|Parent
operator|==
name|other
operator|.
name|Parent
operator|)
operator|&&
operator|(
name|SymbolIndex
operator|==
name|other
operator|.
name|SymbolIndex
operator|)
return|;
block|}
name|Symbol
argument_list|(
argument|const Archive *p
argument_list|,
argument|uint32_t symi
argument_list|,
argument|uint32_t stri
argument_list|)
block|:
name|Parent
argument_list|(
name|p
argument_list|)
operator|,
name|SymbolIndex
argument_list|(
name|symi
argument_list|)
operator|,
name|StringIndex
argument_list|(
argument|stri
argument_list|)
block|{}
name|error_code
name|getName
argument_list|(
argument|StringRef&Result
argument_list|)
specifier|const
expr_stmt|;
name|error_code
name|getMember
argument_list|(
name|child_iterator
operator|&
name|Result
argument_list|)
decl|const
decl_stmt|;
name|Symbol
name|getNext
argument_list|()
specifier|const
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|symbol_iterator
block|{
name|Symbol
name|symbol
decl_stmt|;
name|public
label|:
name|symbol_iterator
argument_list|(
specifier|const
name|Symbol
operator|&
name|s
argument_list|)
operator|:
name|symbol
argument_list|(
argument|s
argument_list|)
block|{}
specifier|const
name|Symbol
operator|*
name|operator
operator|->
expr|(
block|)
decl|const
block|{
return|return
operator|&
name|symbol
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|symbol_iterator
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|symbol
operator|==
name|other
operator|.
name|symbol
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|symbol_iterator
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|other
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|symbol_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
comment|// Preincrement
name|symbol
operator|=
name|symbol
operator|.
name|getNext
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|Archive
argument_list|(
name|MemoryBuffer
operator|*
name|source
argument_list|,
name|error_code
operator|&
name|ec
argument_list|)
expr_stmt|;
end_expr_stmt

begin_enum
enum|enum
name|Kind
block|{
name|K_GNU
block|,
name|K_BSD
block|,
name|K_COFF
block|}
enum|;
end_enum

begin_expr_stmt
name|Kind
name|kind
argument_list|()
specifier|const
block|{
return|return
name|Format
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|child_iterator
name|begin_children
argument_list|(
name|bool
name|skip_internal
operator|=
name|true
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|child_iterator
name|end_children
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|symbol_iterator
name|begin_symbols
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|symbol_iterator
name|end_symbols
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Cast methods.
end_comment

begin_function
specifier|static
specifier|inline
name|bool
name|classof
parameter_list|(
name|Binary
specifier|const
modifier|*
name|v
parameter_list|)
block|{
return|return
name|v
operator|->
name|isArchive
argument_list|()
return|;
block|}
end_function

begin_comment
comment|// check if a symbol is in the archive
end_comment

begin_decl_stmt
name|child_iterator
name|findSym
argument_list|(
name|StringRef
name|name
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|child_iterator
name|SymbolTable
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|child_iterator
name|StringTable
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|Kind
name|Format
decl_stmt|;
end_decl_stmt

begin_endif
unit|};  } }
endif|#
directive|endif
end_endif

end_unit

