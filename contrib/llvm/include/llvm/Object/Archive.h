begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- Archive.h - ar archive file format -----------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares the ar archive file format class.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_OBJECT_ARCHIVE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_OBJECT_ARCHIVE_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/iterator_range.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/Binary.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ErrorHandling.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ErrorOr.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/FileSystem.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/MemoryBuffer.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|object
block|{
struct|struct
name|ArchiveMemberHeader
block|{
name|char
name|Name
index|[
literal|16
index|]
decl_stmt|;
name|char
name|LastModified
index|[
literal|12
index|]
decl_stmt|;
name|char
name|UID
index|[
literal|6
index|]
decl_stmt|;
name|char
name|GID
index|[
literal|6
index|]
decl_stmt|;
name|char
name|AccessMode
index|[
literal|8
index|]
decl_stmt|;
name|char
name|Size
index|[
literal|10
index|]
decl_stmt|;
comment|///< Size of data, not including header or padding.
name|char
name|Terminator
index|[
literal|2
index|]
decl_stmt|;
comment|/// Get the name without looking up long names.
name|llvm
operator|::
name|StringRef
name|getName
argument_list|()
specifier|const
expr_stmt|;
comment|/// Members are not larger than 4GB.
name|ErrorOr
operator|<
name|uint32_t
operator|>
name|getSize
argument_list|()
specifier|const
expr_stmt|;
name|sys
operator|::
name|fs
operator|::
name|perms
name|getAccessMode
argument_list|()
specifier|const
expr_stmt|;
name|sys
operator|::
name|TimeValue
name|getLastModified
argument_list|()
specifier|const
expr_stmt|;
name|llvm
operator|::
name|StringRef
name|getRawLastModified
argument_list|()
specifier|const
block|{
return|return
name|StringRef
argument_list|(
name|LastModified
argument_list|,
sizeof|sizeof
argument_list|(
name|LastModified
argument_list|)
argument_list|)
operator|.
name|rtrim
argument_list|(
literal|" "
argument_list|)
return|;
block|}
name|unsigned
name|getUID
argument_list|()
specifier|const
expr_stmt|;
name|unsigned
name|getGID
argument_list|()
specifier|const
expr_stmt|;
block|}
struct|;
name|class
name|Archive
range|:
name|public
name|Binary
block|{
name|virtual
name|void
name|anchor
argument_list|()
block|;
name|public
operator|:
name|class
name|Child
block|{
name|friend
name|Archive
block|;
specifier|const
name|Archive
operator|*
name|Parent
block|;
comment|/// \brief Includes header but not padding byte.
name|StringRef
name|Data
block|;
comment|/// \brief Offset from Data to the start of the file.
name|uint16_t
name|StartOfFile
block|;
specifier|const
name|ArchiveMemberHeader
operator|*
name|getHeader
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|ArchiveMemberHeader
operator|*
operator|>
operator|(
name|Data
operator|.
name|data
argument_list|()
operator|)
return|;
block|}
name|bool
name|isThinMember
argument_list|()
specifier|const
block|;
name|public
operator|:
name|Child
argument_list|(
specifier|const
name|Archive
operator|*
name|Parent
argument_list|,
specifier|const
name|char
operator|*
name|Start
argument_list|,
name|std
operator|::
name|error_code
operator|*
name|EC
argument_list|)
block|;
name|Child
argument_list|(
argument|const Archive *Parent
argument_list|,
argument|StringRef Data
argument_list|,
argument|uint16_t StartOfFile
argument_list|)
block|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|Child
operator|&
name|other
operator|)
specifier|const
block|{
name|assert
argument_list|(
name|Parent
operator|==
name|other
operator|.
name|Parent
argument_list|)
block|;
return|return
name|Data
operator|.
name|begin
argument_list|()
operator|==
name|other
operator|.
name|Data
operator|.
name|begin
argument_list|()
return|;
block|}
specifier|const
name|Archive
operator|*
name|getParent
argument_list|()
specifier|const
block|{
return|return
name|Parent
return|;
block|}
name|ErrorOr
operator|<
name|Child
operator|>
name|getNext
argument_list|()
specifier|const
block|;
name|ErrorOr
operator|<
name|StringRef
operator|>
name|getName
argument_list|()
specifier|const
block|;
name|StringRef
name|getRawName
argument_list|()
specifier|const
block|{
return|return
name|getHeader
argument_list|()
operator|->
name|getName
argument_list|()
return|;
block|}
name|sys
operator|::
name|TimeValue
name|getLastModified
argument_list|()
specifier|const
block|{
return|return
name|getHeader
argument_list|()
operator|->
name|getLastModified
argument_list|()
return|;
block|}
name|StringRef
name|getRawLastModified
argument_list|()
specifier|const
block|{
return|return
name|getHeader
argument_list|()
operator|->
name|getRawLastModified
argument_list|()
return|;
block|}
name|unsigned
name|getUID
argument_list|()
specifier|const
block|{
return|return
name|getHeader
argument_list|()
operator|->
name|getUID
argument_list|()
return|;
block|}
name|unsigned
name|getGID
argument_list|()
specifier|const
block|{
return|return
name|getHeader
argument_list|()
operator|->
name|getGID
argument_list|()
return|;
block|}
name|sys
operator|::
name|fs
operator|::
name|perms
name|getAccessMode
argument_list|()
specifier|const
block|{
return|return
name|getHeader
argument_list|()
operator|->
name|getAccessMode
argument_list|()
return|;
block|}
comment|/// \return the size of the archive member without the header or padding.
name|ErrorOr
operator|<
name|uint64_t
operator|>
name|getSize
argument_list|()
specifier|const
block|;
comment|/// \return the size in the archive header for this member.
name|ErrorOr
operator|<
name|uint64_t
operator|>
name|getRawSize
argument_list|()
specifier|const
block|;
name|ErrorOr
operator|<
name|StringRef
operator|>
name|getBuffer
argument_list|()
specifier|const
block|;
name|uint64_t
name|getChildOffset
argument_list|()
specifier|const
block|;
name|ErrorOr
operator|<
name|MemoryBufferRef
operator|>
name|getMemoryBufferRef
argument_list|()
specifier|const
block|;
name|ErrorOr
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|Binary
operator|>>
name|getAsBinary
argument_list|(
argument|LLVMContext *Context = nullptr
argument_list|)
specifier|const
block|;   }
block|;
name|class
name|child_iterator
block|{
name|ErrorOr
operator|<
name|Child
operator|>
name|child
block|;
name|public
operator|:
name|child_iterator
argument_list|()
operator|:
name|child
argument_list|(
argument|Child(nullptr, nullptr, nullptr)
argument_list|)
block|{}
name|child_iterator
argument_list|(
specifier|const
name|Child
operator|&
name|c
argument_list|)
operator|:
name|child
argument_list|(
argument|c
argument_list|)
block|{}
name|child_iterator
argument_list|(
argument|std::error_code EC
argument_list|)
operator|:
name|child
argument_list|(
argument|EC
argument_list|)
block|{}
specifier|const
name|ErrorOr
operator|<
name|Child
operator|>
operator|*
name|operator
operator|->
expr|(
block|)
specifier|const
block|{
return|return
operator|&
name|child
return|;
block|}
specifier|const
name|ErrorOr
operator|<
name|Child
operator|>
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|child
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|child_iterator
operator|&
name|other
operator|)
specifier|const
block|{
comment|// We ignore error states so that comparisions with end() work, which
comment|// allows range loops.
if|if
condition|(
name|child
operator|.
name|getError
argument_list|()
operator|||
name|other
operator|.
name|child
operator|.
name|getError
argument_list|()
condition|)
return|return
name|false
return|;
return|return
operator|*
name|child
operator|==
operator|*
name|other
operator|.
name|child
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|child_iterator
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|other
operator|)
return|;
block|}
comment|// Code in loops with child_iterators must check for errors on each loop
comment|// iteration.  And if there is an error break out of the loop.
name|child_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
comment|// Preincrement
name|assert
argument_list|(
name|child
operator|&&
literal|"Can't increment iterator with error"
argument_list|)
block|;
name|child
operator|=
name|child
operator|->
name|getNext
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
block|}
empty_stmt|;
name|class
name|Symbol
block|{
specifier|const
name|Archive
modifier|*
name|Parent
decl_stmt|;
name|uint32_t
name|SymbolIndex
decl_stmt|;
name|uint32_t
name|StringIndex
decl_stmt|;
comment|// Extra index to the string.
name|public
label|:
name|bool
name|operator
operator|==
operator|(
specifier|const
name|Symbol
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|(
name|Parent
operator|==
name|other
operator|.
name|Parent
operator|)
operator|&&
operator|(
name|SymbolIndex
operator|==
name|other
operator|.
name|SymbolIndex
operator|)
return|;
block|}
name|Symbol
argument_list|(
argument|const Archive *p
argument_list|,
argument|uint32_t symi
argument_list|,
argument|uint32_t stri
argument_list|)
block|:
name|Parent
argument_list|(
name|p
argument_list|)
operator|,
name|SymbolIndex
argument_list|(
name|symi
argument_list|)
operator|,
name|StringIndex
argument_list|(
argument|stri
argument_list|)
block|{}
name|StringRef
name|getName
argument_list|()
specifier|const
expr_stmt|;
name|ErrorOr
operator|<
name|Child
operator|>
name|getMember
argument_list|()
specifier|const
expr_stmt|;
name|Symbol
name|getNext
argument_list|()
specifier|const
expr_stmt|;
block|}
empty_stmt|;
name|class
name|symbol_iterator
block|{
name|Symbol
name|symbol
decl_stmt|;
name|public
label|:
name|symbol_iterator
argument_list|(
specifier|const
name|Symbol
operator|&
name|s
argument_list|)
operator|:
name|symbol
argument_list|(
argument|s
argument_list|)
block|{}
specifier|const
name|Symbol
operator|*
name|operator
operator|->
expr|(
block|)
decl|const
block|{
return|return
operator|&
name|symbol
return|;
block|}
specifier|const
name|Symbol
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|symbol
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|symbol_iterator
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|symbol
operator|==
name|other
operator|.
name|symbol
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|symbol_iterator
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|other
operator|)
return|;
block|}
name|symbol_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
comment|// Preincrement
name|symbol
operator|=
name|symbol
operator|.
name|getNext
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_macro
name|Archive
argument_list|(
argument|MemoryBufferRef Source
argument_list|,
argument|std::error_code&EC
argument_list|)
end_macro

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
specifier|static
name|ErrorOr
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|Archive
operator|>>
name|create
argument_list|(
argument|MemoryBufferRef Source
argument_list|)
expr_stmt|;
end_expr_stmt

begin_enum
enum|enum
name|Kind
block|{
name|K_GNU
block|,
name|K_MIPS64
block|,
name|K_BSD
block|,
name|K_COFF
block|}
enum|;
end_enum

begin_expr_stmt
name|Kind
name|kind
argument_list|()
specifier|const
block|{
return|return
operator|(
name|Kind
operator|)
name|Format
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isThin
argument_list|()
specifier|const
block|{
return|return
name|IsThin
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|child_iterator
name|child_begin
argument_list|(
name|bool
name|SkipInternal
operator|=
name|true
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|child_iterator
name|child_end
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|iterator_range
operator|<
name|child_iterator
operator|>
name|children
argument_list|(
argument|bool SkipInternal = true
argument_list|)
specifier|const
block|{
return|return
name|make_range
argument_list|(
name|child_begin
argument_list|(
name|SkipInternal
argument_list|)
argument_list|,
name|child_end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|symbol_iterator
name|symbol_begin
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|symbol_iterator
name|symbol_end
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|iterator_range
operator|<
name|symbol_iterator
operator|>
name|symbols
argument_list|()
specifier|const
block|{
return|return
name|make_range
argument_list|(
name|symbol_begin
argument_list|()
argument_list|,
name|symbol_end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// Cast methods.
end_comment

begin_function
specifier|static
specifier|inline
name|bool
name|classof
parameter_list|(
name|Binary
specifier|const
modifier|*
name|v
parameter_list|)
block|{
return|return
name|v
operator|->
name|isArchive
argument_list|()
return|;
block|}
end_function

begin_comment
comment|// check if a symbol is in the archive
end_comment

begin_decl_stmt
name|child_iterator
name|findSym
argument_list|(
name|StringRef
name|name
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|bool
name|hasSymbolTable
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|StringRef
name|getSymbolTable
argument_list|()
specifier|const
block|{
return|return
name|SymbolTable
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|uint32_t
name|getNumberOfSymbols
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|StringRef
name|SymbolTable
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|StringRef
name|StringTable
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|StringRef
name|FirstRegularData
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uint16_t
name|FirstRegularStartOfFile
init|=
operator|-
literal|1
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|setFirstRegular
parameter_list|(
specifier|const
name|Child
modifier|&
name|C
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|unsigned
name|Format
range|:
literal|2
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|unsigned
name|IsThin
range|:
literal|1
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|mutable
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|MemoryBuffer
operator|>>
name|ThinBuffers
expr_stmt|;
end_expr_stmt

begin_endif
unit|};  } }
endif|#
directive|endif
end_endif

end_unit

