begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- ELFYAML.h - ELF YAMLIO implementation --------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|/// \brief This file declares classes for handling the YAML representation
end_comment

begin_comment
comment|/// of ELF.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_OBJECT_ELFYAML_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_OBJECT_ELFYAML_H
end_define

begin_include
include|#
directive|include
file|"llvm/MC/YAML.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ELF.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|ELFYAML
block|{
comment|// These types are invariant across 32/64-bit ELF, so for simplicity just
comment|// directly give them their exact sizes. We don't need to worry about
comment|// endianness because these are just the types in the YAMLIO structures,
comment|// and are appropriately converted to the necessary endianness when
comment|// reading/generating binary object files.
comment|// The naming of these types is intended to be ELF_PREFIX, where PREFIX is
comment|// the common prefix of the respective constants. E.g. ELF_EM corresponds
comment|// to the `e_machine` constants, like `EM_X86_64`.
comment|// In the future, these would probably be better suited by C++11 enum
comment|// class's with appropriate fixed underlying type.
name|LLVM_YAML_STRONG_TYPEDEF
argument_list|(
argument|uint16_t
argument_list|,
argument|ELF_ET
argument_list|)
name|LLVM_YAML_STRONG_TYPEDEF
argument_list|(
argument|uint32_t
argument_list|,
argument|ELF_EM
argument_list|)
name|LLVM_YAML_STRONG_TYPEDEF
argument_list|(
argument|uint8_t
argument_list|,
argument|ELF_ELFCLASS
argument_list|)
name|LLVM_YAML_STRONG_TYPEDEF
argument_list|(
argument|uint8_t
argument_list|,
argument|ELF_ELFDATA
argument_list|)
name|LLVM_YAML_STRONG_TYPEDEF
argument_list|(
argument|uint8_t
argument_list|,
argument|ELF_ELFOSABI
argument_list|)
comment|// Just use 64, since it can hold 32-bit values too.
name|LLVM_YAML_STRONG_TYPEDEF
argument_list|(
argument|uint64_t
argument_list|,
argument|ELF_EF
argument_list|)
name|LLVM_YAML_STRONG_TYPEDEF
argument_list|(
argument|uint32_t
argument_list|,
argument|ELF_SHT
argument_list|)
name|LLVM_YAML_STRONG_TYPEDEF
argument_list|(
argument|uint32_t
argument_list|,
argument|ELF_REL
argument_list|)
comment|// Just use 64, since it can hold 32-bit values too.
name|LLVM_YAML_STRONG_TYPEDEF
argument_list|(
argument|uint64_t
argument_list|,
argument|ELF_SHF
argument_list|)
name|LLVM_YAML_STRONG_TYPEDEF
argument_list|(
argument|uint8_t
argument_list|,
argument|ELF_STT
argument_list|)
name|LLVM_YAML_STRONG_TYPEDEF
argument_list|(
argument|uint8_t
argument_list|,
argument|ELF_STV
argument_list|)
name|LLVM_YAML_STRONG_TYPEDEF
argument_list|(
argument|uint8_t
argument_list|,
argument|ELF_STO
argument_list|)
comment|// For now, hardcode 64 bits everywhere that 32 or 64 would be needed
comment|// since 64-bit can hold 32-bit values too.
struct|struct
name|FileHeader
block|{
name|ELF_ELFCLASS
name|Class
decl_stmt|;
name|ELF_ELFDATA
name|Data
decl_stmt|;
name|ELF_ELFOSABI
name|OSABI
decl_stmt|;
name|ELF_ET
name|Type
decl_stmt|;
name|ELF_EM
name|Machine
decl_stmt|;
name|ELF_EF
name|Flags
decl_stmt|;
name|llvm
operator|::
name|yaml
operator|::
name|Hex64
name|Entry
expr_stmt|;
block|}
struct|;
struct|struct
name|Symbol
block|{
name|StringRef
name|Name
decl_stmt|;
name|ELF_STT
name|Type
decl_stmt|;
name|StringRef
name|Section
decl_stmt|;
name|llvm
operator|::
name|yaml
operator|::
name|Hex64
name|Value
expr_stmt|;
name|llvm
operator|::
name|yaml
operator|::
name|Hex64
name|Size
expr_stmt|;
name|uint8_t
name|Other
decl_stmt|;
block|}
struct|;
struct|struct
name|LocalGlobalWeakSymbols
block|{
name|std
operator|::
name|vector
operator|<
name|Symbol
operator|>
name|Local
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|Symbol
operator|>
name|Global
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|Symbol
operator|>
name|Weak
expr_stmt|;
block|}
struct|;
struct|struct
name|Section
block|{
name|enum
name|class
name|SectionKind
block|{
name|RawContent
operator|,
name|Relocation
block|}
empty_stmt|;
name|SectionKind
name|Kind
decl_stmt|;
name|StringRef
name|Name
decl_stmt|;
name|ELF_SHT
name|Type
decl_stmt|;
name|ELF_SHF
name|Flags
decl_stmt|;
name|llvm
operator|::
name|yaml
operator|::
name|Hex64
name|Address
expr_stmt|;
name|StringRef
name|Link
decl_stmt|;
name|llvm
operator|::
name|yaml
operator|::
name|Hex64
name|AddressAlign
expr_stmt|;
name|Section
argument_list|(
argument|SectionKind Kind
argument_list|)
block|:
name|Kind
argument_list|(
argument|Kind
argument_list|)
block|{}
name|virtual
operator|~
name|Section
argument_list|()
expr_stmt|;
block|}
struct|;
name|struct
name|RawContentSection
range|:
name|Section
block|{
name|yaml
operator|::
name|BinaryRef
name|Content
block|;
name|llvm
operator|::
name|yaml
operator|::
name|Hex64
name|Size
block|;
name|RawContentSection
argument_list|()
operator|:
name|Section
argument_list|(
argument|SectionKind::RawContent
argument_list|)
block|{}
specifier|static
name|bool
name|classof
argument_list|(
argument|const Section *S
argument_list|)
block|{
return|return
name|S
operator|->
name|Kind
operator|==
name|SectionKind
operator|::
name|RawContent
return|;
block|}
expr|}
block|; struct
name|Relocation
block|{
name|llvm
operator|::
name|yaml
operator|::
name|Hex64
name|Offset
block|;
name|int64_t
name|Addend
block|;
name|ELF_REL
name|Type
block|;
name|StringRef
name|Symbol
block|; }
block|; struct
name|RelocationSection
operator|:
name|Section
block|{
name|StringRef
name|Info
block|;
name|std
operator|::
name|vector
operator|<
name|Relocation
operator|>
name|Relocations
block|;
name|RelocationSection
argument_list|()
operator|:
name|Section
argument_list|(
argument|SectionKind::Relocation
argument_list|)
block|{}
specifier|static
name|bool
name|classof
argument_list|(
argument|const Section *S
argument_list|)
block|{
return|return
name|S
operator|->
name|Kind
operator|==
name|SectionKind
operator|::
name|Relocation
return|;
block|}
expr|}
block|; struct
name|Object
block|{
name|FileHeader
name|Header
block|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|Section
operator|>>
name|Sections
block|;
comment|// Although in reality the symbols reside in a section, it is a lot
comment|// cleaner and nicer if we read them from the YAML as a separate
comment|// top-level key, which automatically ensures that invariants like there
comment|// being a single SHT_SYMTAB section are upheld.
name|LocalGlobalWeakSymbols
name|Symbols
block|; }
block|;  }
comment|// end namespace ELFYAML
block|}
comment|// end namespace llvm
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|std::unique_ptr<llvm::ELFYAML::Section>
argument_list|)
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::ELFYAML::Symbol
argument_list|)
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|llvm::ELFYAML::Relocation
argument_list|)
name|namespace
name|llvm
block|{
name|namespace
name|yaml
block|{
name|template
operator|<
operator|>
expr|struct
name|ScalarEnumerationTraits
operator|<
name|ELFYAML
operator|::
name|ELF_ET
operator|>
block|{
specifier|static
name|void
name|enumeration
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|ELFYAML
operator|::
name|ELF_ET
operator|&
name|Value
argument_list|)
block|; }
block|;
name|template
operator|<
operator|>
expr|struct
name|ScalarEnumerationTraits
operator|<
name|ELFYAML
operator|::
name|ELF_EM
operator|>
block|{
specifier|static
name|void
name|enumeration
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|ELFYAML
operator|::
name|ELF_EM
operator|&
name|Value
argument_list|)
block|; }
block|;
name|template
operator|<
operator|>
expr|struct
name|ScalarEnumerationTraits
operator|<
name|ELFYAML
operator|::
name|ELF_ELFCLASS
operator|>
block|{
specifier|static
name|void
name|enumeration
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|ELFYAML
operator|::
name|ELF_ELFCLASS
operator|&
name|Value
argument_list|)
block|; }
block|;
name|template
operator|<
operator|>
expr|struct
name|ScalarEnumerationTraits
operator|<
name|ELFYAML
operator|::
name|ELF_ELFDATA
operator|>
block|{
specifier|static
name|void
name|enumeration
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|ELFYAML
operator|::
name|ELF_ELFDATA
operator|&
name|Value
argument_list|)
block|; }
block|;
name|template
operator|<
operator|>
expr|struct
name|ScalarEnumerationTraits
operator|<
name|ELFYAML
operator|::
name|ELF_ELFOSABI
operator|>
block|{
specifier|static
name|void
name|enumeration
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|ELFYAML
operator|::
name|ELF_ELFOSABI
operator|&
name|Value
argument_list|)
block|; }
block|;
name|template
operator|<
operator|>
expr|struct
name|ScalarBitSetTraits
operator|<
name|ELFYAML
operator|::
name|ELF_EF
operator|>
block|{
specifier|static
name|void
name|bitset
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|ELFYAML
operator|::
name|ELF_EF
operator|&
name|Value
argument_list|)
block|; }
block|;
name|template
operator|<
operator|>
expr|struct
name|ScalarEnumerationTraits
operator|<
name|ELFYAML
operator|::
name|ELF_SHT
operator|>
block|{
specifier|static
name|void
name|enumeration
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|ELFYAML
operator|::
name|ELF_SHT
operator|&
name|Value
argument_list|)
block|; }
block|;
name|template
operator|<
operator|>
expr|struct
name|ScalarBitSetTraits
operator|<
name|ELFYAML
operator|::
name|ELF_SHF
operator|>
block|{
specifier|static
name|void
name|bitset
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|ELFYAML
operator|::
name|ELF_SHF
operator|&
name|Value
argument_list|)
block|; }
block|;
name|template
operator|<
operator|>
expr|struct
name|ScalarEnumerationTraits
operator|<
name|ELFYAML
operator|::
name|ELF_STT
operator|>
block|{
specifier|static
name|void
name|enumeration
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|ELFYAML
operator|::
name|ELF_STT
operator|&
name|Value
argument_list|)
block|; }
block|;
name|template
operator|<
operator|>
expr|struct
name|ScalarEnumerationTraits
operator|<
name|ELFYAML
operator|::
name|ELF_STV
operator|>
block|{
specifier|static
name|void
name|enumeration
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|ELFYAML
operator|::
name|ELF_STV
operator|&
name|Value
argument_list|)
block|; }
block|;
name|template
operator|<
operator|>
expr|struct
name|ScalarBitSetTraits
operator|<
name|ELFYAML
operator|::
name|ELF_STO
operator|>
block|{
specifier|static
name|void
name|bitset
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|ELFYAML
operator|::
name|ELF_STO
operator|&
name|Value
argument_list|)
block|; }
block|;
name|template
operator|<
operator|>
expr|struct
name|ScalarEnumerationTraits
operator|<
name|ELFYAML
operator|::
name|ELF_REL
operator|>
block|{
specifier|static
name|void
name|enumeration
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|ELFYAML
operator|::
name|ELF_REL
operator|&
name|Value
argument_list|)
block|; }
block|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|ELFYAML
operator|::
name|FileHeader
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|ELFYAML
operator|::
name|FileHeader
operator|&
name|FileHdr
argument_list|)
block|; }
block|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|ELFYAML
operator|::
name|Symbol
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|ELFYAML
operator|::
name|Symbol
operator|&
name|Symbol
argument_list|)
block|; }
block|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|ELFYAML
operator|::
name|LocalGlobalWeakSymbols
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|ELFYAML
operator|::
name|LocalGlobalWeakSymbols
operator|&
name|Symbols
argument_list|)
block|; }
block|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|ELFYAML
operator|::
name|Relocation
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|ELFYAML
operator|::
name|Relocation
operator|&
name|Rel
argument_list|)
block|; }
block|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|ELFYAML
operator|::
name|Section
operator|>>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|std
operator|::
name|unique_ptr
operator|<
name|ELFYAML
operator|::
name|Section
operator|>
operator|&
name|Section
argument_list|)
block|;
specifier|static
name|StringRef
name|validate
argument_list|(
name|IO
operator|&
name|io
argument_list|,
name|std
operator|::
name|unique_ptr
operator|<
name|ELFYAML
operator|::
name|Section
operator|>
operator|&
name|Section
argument_list|)
block|; }
block|;
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|ELFYAML
operator|::
name|Object
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
name|IO
operator|&
name|IO
argument_list|,
name|ELFYAML
operator|::
name|Object
operator|&
name|Object
argument_list|)
block|; }
block|;  }
comment|// end namespace yaml
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

