begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- COFF.h - COFF object file implementation -----------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares the COFFObjectFile class.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_OBJECT_COFF_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_OBJECT_COFF_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/iterator_range.h"
end_include

begin_include
include|#
directive|include
file|"llvm/BinaryFormat/COFF.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/CVDebugRecord.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/SubtargetFeature.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/Binary.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/Error.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/ObjectFile.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/BinaryByteStream.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ConvertUTF.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Endian.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ErrorHandling.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ErrorOr.h"
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<cstddef>
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_include
include|#
directive|include
file|<system_error>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|ArrayRef
expr_stmt|;
name|namespace
name|object
block|{
name|class
name|BaseRelocRef
decl_stmt|;
name|class
name|DelayImportDirectoryEntryRef
decl_stmt|;
name|class
name|ExportDirectoryEntryRef
decl_stmt|;
name|class
name|ImportDirectoryEntryRef
decl_stmt|;
name|class
name|ImportedSymbolRef
decl_stmt|;
name|class
name|ResourceSectionRef
decl_stmt|;
name|using
name|import_directory_iterator
init|=
name|content_iterator
operator|<
name|ImportDirectoryEntryRef
operator|>
decl_stmt|;
name|using
name|delay_import_directory_iterator
init|=
name|content_iterator
operator|<
name|DelayImportDirectoryEntryRef
operator|>
decl_stmt|;
name|using
name|export_directory_iterator
init|=
name|content_iterator
operator|<
name|ExportDirectoryEntryRef
operator|>
decl_stmt|;
name|using
name|imported_symbol_iterator
init|=
name|content_iterator
operator|<
name|ImportedSymbolRef
operator|>
decl_stmt|;
name|using
name|base_reloc_iterator
init|=
name|content_iterator
operator|<
name|BaseRelocRef
operator|>
decl_stmt|;
comment|/// The DOS compatible header at the front of all PE/COFF executables.
struct|struct
name|dos_header
block|{
name|char
name|Magic
index|[
literal|2
index|]
decl_stmt|;
name|support
operator|::
name|ulittle16_t
name|UsedBytesInTheLastPage
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|FileSizeInPages
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|NumberOfRelocationItems
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|HeaderSizeInParagraphs
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MinimumExtraParagraphs
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MaximumExtraParagraphs
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|InitialRelativeSS
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|InitialSP
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|Checksum
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|InitialIP
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|InitialRelativeCS
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|AddressOfRelocationTable
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|OverlayNumber
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|Reserved
index|[
literal|4
index|]
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|OEMid
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|OEMinfo
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|Reserved2
index|[
literal|10
index|]
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|AddressOfNewExeHeader
expr_stmt|;
block|}
struct|;
struct|struct
name|coff_file_header
block|{
name|support
operator|::
name|ulittle16_t
name|Machine
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|NumberOfSections
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|TimeDateStamp
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|PointerToSymbolTable
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|NumberOfSymbols
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|SizeOfOptionalHeader
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|Characteristics
expr_stmt|;
name|bool
name|isImportLibrary
argument_list|()
specifier|const
block|{
return|return
name|NumberOfSections
operator|==
literal|0xffff
return|;
block|}
block|}
struct|;
struct|struct
name|coff_bigobj_file_header
block|{
name|support
operator|::
name|ulittle16_t
name|Sig1
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|Sig2
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|Version
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|Machine
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|TimeDateStamp
expr_stmt|;
name|uint8_t
name|UUID
index|[
literal|16
index|]
decl_stmt|;
name|support
operator|::
name|ulittle32_t
name|unused1
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|unused2
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|unused3
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|unused4
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|NumberOfSections
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|PointerToSymbolTable
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|NumberOfSymbols
expr_stmt|;
block|}
struct|;
comment|/// The 32-bit PE header that follows the COFF header.
struct|struct
name|pe32_header
block|{
name|support
operator|::
name|ulittle16_t
name|Magic
expr_stmt|;
name|uint8_t
name|MajorLinkerVersion
decl_stmt|;
name|uint8_t
name|MinorLinkerVersion
decl_stmt|;
name|support
operator|::
name|ulittle32_t
name|SizeOfCode
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SizeOfInitializedData
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SizeOfUninitializedData
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|AddressOfEntryPoint
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|BaseOfCode
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|BaseOfData
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|ImageBase
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SectionAlignment
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|FileAlignment
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MajorOperatingSystemVersion
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MinorOperatingSystemVersion
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MajorImageVersion
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MinorImageVersion
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MajorSubsystemVersion
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MinorSubsystemVersion
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|Win32VersionValue
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SizeOfImage
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SizeOfHeaders
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|CheckSum
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|Subsystem
expr_stmt|;
comment|// FIXME: This should be DllCharacteristics.
name|support
operator|::
name|ulittle16_t
name|DLLCharacteristics
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SizeOfStackReserve
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SizeOfStackCommit
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SizeOfHeapReserve
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SizeOfHeapCommit
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|LoaderFlags
expr_stmt|;
comment|// FIXME: This should be NumberOfRvaAndSizes.
name|support
operator|::
name|ulittle32_t
name|NumberOfRvaAndSize
expr_stmt|;
block|}
struct|;
comment|/// The 64-bit PE header that follows the COFF header.
struct|struct
name|pe32plus_header
block|{
name|support
operator|::
name|ulittle16_t
name|Magic
expr_stmt|;
name|uint8_t
name|MajorLinkerVersion
decl_stmt|;
name|uint8_t
name|MinorLinkerVersion
decl_stmt|;
name|support
operator|::
name|ulittle32_t
name|SizeOfCode
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SizeOfInitializedData
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SizeOfUninitializedData
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|AddressOfEntryPoint
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|BaseOfCode
expr_stmt|;
name|support
operator|::
name|ulittle64_t
name|ImageBase
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SectionAlignment
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|FileAlignment
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MajorOperatingSystemVersion
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MinorOperatingSystemVersion
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MajorImageVersion
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MinorImageVersion
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MajorSubsystemVersion
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MinorSubsystemVersion
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|Win32VersionValue
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SizeOfImage
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SizeOfHeaders
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|CheckSum
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|Subsystem
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|DLLCharacteristics
expr_stmt|;
name|support
operator|::
name|ulittle64_t
name|SizeOfStackReserve
expr_stmt|;
name|support
operator|::
name|ulittle64_t
name|SizeOfStackCommit
expr_stmt|;
name|support
operator|::
name|ulittle64_t
name|SizeOfHeapReserve
expr_stmt|;
name|support
operator|::
name|ulittle64_t
name|SizeOfHeapCommit
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|LoaderFlags
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|NumberOfRvaAndSize
expr_stmt|;
block|}
struct|;
struct|struct
name|data_directory
block|{
name|support
operator|::
name|ulittle32_t
name|RelativeVirtualAddress
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|Size
expr_stmt|;
block|}
struct|;
struct|struct
name|debug_directory
block|{
name|support
operator|::
name|ulittle32_t
name|Characteristics
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|TimeDateStamp
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MajorVersion
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MinorVersion
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|Type
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SizeOfData
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|AddressOfRawData
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|PointerToRawData
expr_stmt|;
block|}
struct|;
name|template
operator|<
name|typename
name|IntTy
operator|>
expr|struct
name|import_lookup_table_entry
block|{
name|IntTy
name|Data
block|;
name|bool
name|isOrdinal
argument_list|()
specifier|const
block|{
return|return
name|Data
operator|<
literal|0
return|;
block|}
name|uint16_t
name|getOrdinal
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isOrdinal
argument_list|()
operator|&&
literal|"ILT entry is not an ordinal!"
argument_list|)
block|;
return|return
name|Data
operator|&
literal|0xFFFF
return|;
block|}
name|uint32_t
name|getHintNameRVA
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
operator|!
name|isOrdinal
argument_list|()
operator|&&
literal|"ILT entry is not a Hint/Name RVA!"
argument_list|)
block|;
return|return
name|Data
operator|&
literal|0xFFFFFFFF
return|;
block|}
expr|}
block|;
name|using
name|import_lookup_table_entry32
operator|=
name|import_lookup_table_entry
operator|<
name|support
operator|::
name|little32_t
operator|>
block|;
name|using
name|import_lookup_table_entry64
operator|=
name|import_lookup_table_entry
operator|<
name|support
operator|::
name|little64_t
operator|>
block|;  struct
name|delay_import_directory_table_entry
block|{
comment|// dumpbin reports this field as "Characteristics" instead of "Attributes".
name|support
operator|::
name|ulittle32_t
name|Attributes
block|;
name|support
operator|::
name|ulittle32_t
name|Name
block|;
name|support
operator|::
name|ulittle32_t
name|ModuleHandle
block|;
name|support
operator|::
name|ulittle32_t
name|DelayImportAddressTable
block|;
name|support
operator|::
name|ulittle32_t
name|DelayImportNameTable
block|;
name|support
operator|::
name|ulittle32_t
name|BoundDelayImportTable
block|;
name|support
operator|::
name|ulittle32_t
name|UnloadDelayImportTable
block|;
name|support
operator|::
name|ulittle32_t
name|TimeStamp
block|; }
block|;  struct
name|export_directory_table_entry
block|{
name|support
operator|::
name|ulittle32_t
name|ExportFlags
block|;
name|support
operator|::
name|ulittle32_t
name|TimeDateStamp
block|;
name|support
operator|::
name|ulittle16_t
name|MajorVersion
block|;
name|support
operator|::
name|ulittle16_t
name|MinorVersion
block|;
name|support
operator|::
name|ulittle32_t
name|NameRVA
block|;
name|support
operator|::
name|ulittle32_t
name|OrdinalBase
block|;
name|support
operator|::
name|ulittle32_t
name|AddressTableEntries
block|;
name|support
operator|::
name|ulittle32_t
name|NumberOfNamePointers
block|;
name|support
operator|::
name|ulittle32_t
name|ExportAddressTableRVA
block|;
name|support
operator|::
name|ulittle32_t
name|NamePointerRVA
block|;
name|support
operator|::
name|ulittle32_t
name|OrdinalTableRVA
block|; }
block|;
expr|union
name|export_address_table_entry
block|{
name|support
operator|::
name|ulittle32_t
name|ExportRVA
block|;
name|support
operator|::
name|ulittle32_t
name|ForwarderRVA
block|; }
block|;
name|using
name|export_name_pointer_table_entry
operator|=
name|support
operator|::
name|ulittle32_t
block|;
name|using
name|export_ordinal_table_entry
operator|=
name|support
operator|::
name|ulittle16_t
block|;  struct
name|StringTableOffset
block|{
name|support
operator|::
name|ulittle32_t
name|Zeroes
block|;
name|support
operator|::
name|ulittle32_t
name|Offset
block|; }
block|;
name|template
operator|<
name|typename
name|SectionNumberType
operator|>
expr|struct
name|coff_symbol
block|{
expr|union
block|{
name|char
name|ShortName
index|[
name|COFF
operator|::
name|NameSize
index|]
block|;
name|StringTableOffset
name|Offset
block|;   }
name|Name
block|;
name|support
operator|::
name|ulittle32_t
name|Value
block|;
name|SectionNumberType
name|SectionNumber
block|;
name|support
operator|::
name|ulittle16_t
name|Type
block|;
name|uint8_t
name|StorageClass
block|;
name|uint8_t
name|NumberOfAuxSymbols
block|; }
block|;
name|using
name|coff_symbol16
operator|=
name|coff_symbol
operator|<
name|support
operator|::
name|ulittle16_t
operator|>
block|;
name|using
name|coff_symbol32
operator|=
name|coff_symbol
operator|<
name|support
operator|::
name|ulittle32_t
operator|>
block|;
comment|// Contains only common parts of coff_symbol16 and coff_symbol32.
block|struct
name|coff_symbol_generic
block|{
expr|union
block|{
name|char
name|ShortName
index|[
name|COFF
operator|::
name|NameSize
index|]
block|;
name|StringTableOffset
name|Offset
block|;   }
name|Name
block|;
name|support
operator|::
name|ulittle32_t
name|Value
block|; }
block|;
name|class
name|COFFSymbolRef
block|{
name|public
operator|:
name|COFFSymbolRef
argument_list|()
operator|=
expr|default
block|;
name|COFFSymbolRef
argument_list|(
specifier|const
name|coff_symbol16
operator|*
name|CS
argument_list|)
operator|:
name|CS16
argument_list|(
argument|CS
argument_list|)
block|{}
name|COFFSymbolRef
argument_list|(
specifier|const
name|coff_symbol32
operator|*
name|CS
argument_list|)
operator|:
name|CS32
argument_list|(
argument|CS
argument_list|)
block|{}
specifier|const
name|void
operator|*
name|getRawPtr
argument_list|()
specifier|const
block|{
return|return
name|CS16
operator|?
name|static_cast
operator|<
specifier|const
name|void
operator|*
operator|>
operator|(
name|CS16
operator|)
operator|:
name|CS32
return|;
block|}
specifier|const
name|coff_symbol_generic
operator|*
name|getGeneric
argument_list|()
specifier|const
block|{
if|if
condition|(
name|CS16
condition|)
return|return
name|reinterpret_cast
operator|<
specifier|const
name|coff_symbol_generic
operator|*
operator|>
operator|(
name|CS16
operator|)
return|;
return|return
name|reinterpret_cast
operator|<
specifier|const
name|coff_symbol_generic
operator|*
operator|>
operator|(
name|CS32
operator|)
return|;
block|}
name|friend
name|bool
name|operator
operator|<
operator|(
name|COFFSymbolRef
name|A
operator|,
name|COFFSymbolRef
name|B
operator|)
block|{
return|return
name|A
operator|.
name|getRawPtr
argument_list|()
operator|<
name|B
operator|.
name|getRawPtr
argument_list|()
return|;
block|}
name|bool
name|isBigObj
argument_list|()
specifier|const
block|{
if|if
condition|(
name|CS16
condition|)
return|return
name|false
return|;
if|if
condition|(
name|CS32
condition|)
return|return
name|true
return|;
name|llvm_unreachable
argument_list|(
literal|"COFFSymbolRef points to nothing!"
argument_list|)
expr_stmt|;
block|}
specifier|const
name|char
operator|*
name|getShortName
argument_list|()
specifier|const
block|{
return|return
name|CS16
operator|?
name|CS16
operator|->
name|Name
operator|.
name|ShortName
operator|:
name|CS32
operator|->
name|Name
operator|.
name|ShortName
return|;
block|}
specifier|const
name|StringTableOffset
operator|&
name|getStringTableOffset
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isSet
argument_list|()
operator|&&
literal|"COFFSymbolRef points to nothing!"
argument_list|)
block|;
return|return
name|CS16
condition|?
name|CS16
operator|->
name|Name
operator|.
name|Offset
else|:
name|CS32
operator|->
name|Name
operator|.
name|Offset
return|;
block|}
name|uint32_t
name|getValue
argument_list|()
specifier|const
block|{
return|return
name|CS16
operator|?
name|CS16
operator|->
name|Value
operator|:
name|CS32
operator|->
name|Value
return|;
block|}
name|int32_t
name|getSectionNumber
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isSet
argument_list|()
operator|&&
literal|"COFFSymbolRef points to nothing!"
argument_list|)
block|;
if|if
condition|(
name|CS16
condition|)
block|{
comment|// Reserved sections are returned as negative numbers.
if|if
condition|(
name|CS16
operator|->
name|SectionNumber
operator|<=
name|COFF
operator|::
name|MaxNumberOfSections16
condition|)
return|return
name|CS16
operator|->
name|SectionNumber
return|;
return|return
name|static_cast
operator|<
name|int16_t
operator|>
operator|(
name|CS16
operator|->
name|SectionNumber
operator|)
return|;
block|}
return|return
name|static_cast
operator|<
name|int32_t
operator|>
operator|(
name|CS32
operator|->
name|SectionNumber
operator|)
return|;
block|}
name|uint16_t
name|getType
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isSet
argument_list|()
operator|&&
literal|"COFFSymbolRef points to nothing!"
argument_list|)
block|;
return|return
name|CS16
condition|?
name|CS16
operator|->
name|Type
else|:
name|CS32
operator|->
name|Type
return|;
block|}
name|uint8_t
name|getStorageClass
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isSet
argument_list|()
operator|&&
literal|"COFFSymbolRef points to nothing!"
argument_list|)
block|;
return|return
name|CS16
condition|?
name|CS16
operator|->
name|StorageClass
else|:
name|CS32
operator|->
name|StorageClass
return|;
block|}
name|uint8_t
name|getNumberOfAuxSymbols
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isSet
argument_list|()
operator|&&
literal|"COFFSymbolRef points to nothing!"
argument_list|)
block|;
return|return
name|CS16
condition|?
name|CS16
operator|->
name|NumberOfAuxSymbols
else|:
name|CS32
operator|->
name|NumberOfAuxSymbols
return|;
block|}
name|uint8_t
name|getBaseType
argument_list|()
specifier|const
block|{
return|return
name|getType
argument_list|()
operator|&
literal|0x0F
return|;
block|}
name|uint8_t
name|getComplexType
argument_list|()
specifier|const
block|{
return|return
operator|(
name|getType
argument_list|()
operator|&
literal|0xF0
operator|)
operator|>>
name|COFF
operator|::
name|SCT_COMPLEX_TYPE_SHIFT
return|;
block|}
name|bool
name|isAbsolute
argument_list|()
specifier|const
block|{
return|return
name|getSectionNumber
argument_list|()
operator|==
operator|-
literal|1
return|;
block|}
name|bool
name|isExternal
argument_list|()
specifier|const
block|{
return|return
name|getStorageClass
argument_list|()
operator|==
name|COFF
operator|::
name|IMAGE_SYM_CLASS_EXTERNAL
return|;
block|}
name|bool
name|isCommon
argument_list|()
specifier|const
block|{
return|return
name|isExternal
argument_list|()
operator|&&
name|getSectionNumber
argument_list|()
operator|==
name|COFF
operator|::
name|IMAGE_SYM_UNDEFINED
operator|&&
name|getValue
argument_list|()
operator|!=
literal|0
return|;
block|}
name|bool
name|isUndefined
argument_list|()
specifier|const
block|{
return|return
name|isExternal
argument_list|()
operator|&&
name|getSectionNumber
argument_list|()
operator|==
name|COFF
operator|::
name|IMAGE_SYM_UNDEFINED
operator|&&
name|getValue
argument_list|()
operator|==
literal|0
return|;
block|}
name|bool
name|isWeakExternal
argument_list|()
specifier|const
block|{
return|return
name|getStorageClass
argument_list|()
operator|==
name|COFF
operator|::
name|IMAGE_SYM_CLASS_WEAK_EXTERNAL
return|;
block|}
name|bool
name|isFunctionDefinition
argument_list|()
specifier|const
block|{
return|return
name|isExternal
argument_list|()
operator|&&
name|getBaseType
argument_list|()
operator|==
name|COFF
operator|::
name|IMAGE_SYM_TYPE_NULL
operator|&&
name|getComplexType
argument_list|()
operator|==
name|COFF
operator|::
name|IMAGE_SYM_DTYPE_FUNCTION
operator|&&
operator|!
name|COFF
operator|::
name|isReservedSectionNumber
argument_list|(
name|getSectionNumber
argument_list|()
argument_list|)
return|;
block|}
name|bool
name|isFunctionLineInfo
argument_list|()
specifier|const
block|{
return|return
name|getStorageClass
argument_list|()
operator|==
name|COFF
operator|::
name|IMAGE_SYM_CLASS_FUNCTION
return|;
block|}
name|bool
name|isAnyUndefined
argument_list|()
specifier|const
block|{
return|return
name|isUndefined
argument_list|()
operator|||
name|isWeakExternal
argument_list|()
return|;
block|}
name|bool
name|isFileRecord
argument_list|()
specifier|const
block|{
return|return
name|getStorageClass
argument_list|()
operator|==
name|COFF
operator|::
name|IMAGE_SYM_CLASS_FILE
return|;
block|}
name|bool
name|isSection
argument_list|()
specifier|const
block|{
return|return
name|getStorageClass
argument_list|()
operator|==
name|COFF
operator|::
name|IMAGE_SYM_CLASS_SECTION
return|;
block|}
name|bool
name|isSectionDefinition
argument_list|()
specifier|const
block|{
comment|// C++/CLI creates external ABS symbols for non-const appdomain globals.
comment|// These are also followed by an auxiliary section definition.
name|bool
name|isAppdomainGlobal
operator|=
name|getStorageClass
argument_list|()
operator|==
name|COFF
operator|::
name|IMAGE_SYM_CLASS_EXTERNAL
operator|&&
name|getSectionNumber
argument_list|()
operator|==
name|COFF
operator|::
name|IMAGE_SYM_ABSOLUTE
block|;
name|bool
name|isOrdinarySection
operator|=
name|getStorageClass
argument_list|()
operator|==
name|COFF
operator|::
name|IMAGE_SYM_CLASS_STATIC
block|;
if|if
condition|(
operator|!
name|getNumberOfAuxSymbols
argument_list|()
condition|)
return|return
name|false
return|;
return|return
name|isAppdomainGlobal
operator|||
name|isOrdinarySection
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|bool
name|isCLRToken
argument_list|()
specifier|const
block|{
return|return
name|getStorageClass
argument_list|()
operator|==
name|COFF
operator|::
name|IMAGE_SYM_CLASS_CLR_TOKEN
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|bool
name|isSet
argument_list|()
specifier|const
block|{
return|return
name|CS16
operator|||
name|CS32
return|;
block|}
end_expr_stmt

begin_decl_stmt
specifier|const
name|coff_symbol16
modifier|*
name|CS16
init|=
name|nullptr
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|coff_symbol32
modifier|*
name|CS32
init|=
name|nullptr
decl_stmt|;
end_decl_stmt

begin_struct
unit|};
struct|struct
name|coff_section
block|{
name|char
name|Name
index|[
name|COFF
operator|::
name|NameSize
index|]
decl_stmt|;
name|support
operator|::
name|ulittle32_t
name|VirtualSize
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|VirtualAddress
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SizeOfRawData
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|PointerToRawData
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|PointerToRelocations
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|PointerToLinenumbers
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|NumberOfRelocations
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|NumberOfLinenumbers
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|Characteristics
expr_stmt|;
comment|// Returns true if the actual number of relocations is stored in
comment|// VirtualAddress field of the first relocation table entry.
name|bool
name|hasExtendedRelocations
argument_list|()
specifier|const
block|{
return|return
operator|(
name|Characteristics
operator|&
name|COFF
operator|::
name|IMAGE_SCN_LNK_NRELOC_OVFL
operator|)
operator|&&
name|NumberOfRelocations
operator|==
name|UINT16_MAX
return|;
block|}
name|uint32_t
name|getAlignment
argument_list|()
specifier|const
block|{
comment|// The IMAGE_SCN_TYPE_NO_PAD bit is a legacy way of getting to
comment|// IMAGE_SCN_ALIGN_1BYTES.
if|if
condition|(
name|Characteristics
operator|&
name|COFF
operator|::
name|IMAGE_SCN_TYPE_NO_PAD
condition|)
return|return
literal|1
return|;
comment|// Bit [20:24] contains section alignment. Both 0 and 1 mean alignment 1.
name|uint32_t
name|Shift
operator|=
operator|(
name|Characteristics
operator|>>
literal|20
operator|)
operator|&
literal|0xF
expr_stmt|;
if|if
condition|(
name|Shift
operator|>
literal|0
condition|)
return|return
literal|1U
operator|<<
operator|(
name|Shift
operator|-
literal|1
operator|)
return|;
return|return
literal|1
return|;
block|}
end_struct

begin_struct
unit|};
struct|struct
name|coff_relocation
block|{
name|support
operator|::
name|ulittle32_t
name|VirtualAddress
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SymbolTableIndex
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|Type
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|coff_aux_function_definition
block|{
name|support
operator|::
name|ulittle32_t
name|TagIndex
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|TotalSize
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|PointerToLinenumber
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|PointerToNextFunction
expr_stmt|;
name|char
name|Unused1
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_expr_stmt
name|static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|coff_aux_function_definition
argument_list|)
operator|==
literal|18
argument_list|,
literal|"auxiliary entry must be 18 bytes"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_struct
struct|struct
name|coff_aux_bf_and_ef_symbol
block|{
name|char
name|Unused1
index|[
literal|4
index|]
decl_stmt|;
name|support
operator|::
name|ulittle16_t
name|Linenumber
expr_stmt|;
name|char
name|Unused2
index|[
literal|6
index|]
decl_stmt|;
name|support
operator|::
name|ulittle32_t
name|PointerToNextFunction
expr_stmt|;
name|char
name|Unused3
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_expr_stmt
name|static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|coff_aux_bf_and_ef_symbol
argument_list|)
operator|==
literal|18
argument_list|,
literal|"auxiliary entry must be 18 bytes"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_struct
struct|struct
name|coff_aux_weak_external
block|{
name|support
operator|::
name|ulittle32_t
name|TagIndex
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|Characteristics
expr_stmt|;
name|char
name|Unused1
index|[
literal|10
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_expr_stmt
name|static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|coff_aux_weak_external
argument_list|)
operator|==
literal|18
argument_list|,
literal|"auxiliary entry must be 18 bytes"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_struct
struct|struct
name|coff_aux_section_definition
block|{
name|support
operator|::
name|ulittle32_t
name|Length
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|NumberOfRelocations
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|NumberOfLinenumbers
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|CheckSum
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|NumberLowPart
expr_stmt|;
name|uint8_t
name|Selection
decl_stmt|;
name|uint8_t
name|Unused
decl_stmt|;
name|support
operator|::
name|ulittle16_t
name|NumberHighPart
expr_stmt|;
name|int32_t
name|getNumber
argument_list|(
name|bool
name|IsBigObj
argument_list|)
decl|const
block|{
name|uint32_t
name|Number
init|=
name|static_cast
operator|<
name|uint32_t
operator|>
operator|(
name|NumberLowPart
operator|)
decl_stmt|;
if|if
condition|(
name|IsBigObj
condition|)
name|Number
operator||=
name|static_cast
operator|<
name|uint32_t
operator|>
operator|(
name|NumberHighPart
operator|)
operator|<<
literal|16
expr_stmt|;
return|return
name|static_cast
operator|<
name|int32_t
operator|>
operator|(
name|Number
operator|)
return|;
block|}
block|}
struct|;
end_struct

begin_expr_stmt
name|static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|coff_aux_section_definition
argument_list|)
operator|==
literal|18
argument_list|,
literal|"auxiliary entry must be 18 bytes"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_struct
struct|struct
name|coff_aux_clr_token
block|{
name|uint8_t
name|AuxType
decl_stmt|;
name|uint8_t
name|Reserved
decl_stmt|;
name|support
operator|::
name|ulittle32_t
name|SymbolTableIndex
expr_stmt|;
name|char
name|MBZ
index|[
literal|12
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_expr_stmt
name|static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|coff_aux_clr_token
argument_list|)
operator|==
literal|18
argument_list|,
literal|"auxiliary entry must be 18 bytes"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_struct
struct|struct
name|coff_import_header
block|{
name|support
operator|::
name|ulittle16_t
name|Sig1
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|Sig2
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|Version
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|Machine
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|TimeDateStamp
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SizeOfData
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|OrdinalHint
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|TypeInfo
expr_stmt|;
name|int
name|getType
argument_list|()
specifier|const
block|{
return|return
name|TypeInfo
operator|&
literal|0x3
return|;
block|}
name|int
name|getNameType
argument_list|()
specifier|const
block|{
return|return
operator|(
name|TypeInfo
operator|>>
literal|2
operator|)
operator|&
literal|0x7
return|;
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|coff_import_directory_table_entry
block|{
name|support
operator|::
name|ulittle32_t
name|ImportLookupTableRVA
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|TimeDateStamp
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|ForwarderChain
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|NameRVA
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|ImportAddressTableRVA
expr_stmt|;
name|bool
name|isNull
argument_list|()
specifier|const
block|{
return|return
name|ImportLookupTableRVA
operator|==
literal|0
operator|&&
name|TimeDateStamp
operator|==
literal|0
operator|&&
name|ForwarderChain
operator|==
literal|0
operator|&&
name|NameRVA
operator|==
literal|0
operator|&&
name|ImportAddressTableRVA
operator|==
literal|0
return|;
block|}
block|}
struct|;
end_struct

begin_expr_stmt
name|template
operator|<
name|typename
name|IntTy
operator|>
expr|struct
name|coff_tls_directory
block|{
name|IntTy
name|StartAddressOfRawData
block|;
name|IntTy
name|EndAddressOfRawData
block|;
name|IntTy
name|AddressOfIndex
block|;
name|IntTy
name|AddressOfCallBacks
block|;
name|support
operator|::
name|ulittle32_t
name|SizeOfZeroFill
block|;
name|support
operator|::
name|ulittle32_t
name|Characteristics
block|;
name|uint32_t
name|getAlignment
argument_list|()
specifier|const
block|{
comment|// Bit [20:24] contains section alignment.
name|uint32_t
name|Shift
operator|=
operator|(
name|Characteristics
operator|&
literal|0x00F00000
operator|)
operator|>>
literal|20
block|;
if|if
condition|(
name|Shift
operator|>
literal|0
condition|)
return|return
literal|1U
operator|<<
operator|(
name|Shift
operator|-
literal|1
operator|)
return|;
return|return
literal|0
return|;
block|}
end_expr_stmt

begin_decl_stmt
unit|};
name|using
name|coff_tls_directory32
init|=
name|coff_tls_directory
operator|<
name|support
operator|::
name|little32_t
operator|>
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|using
name|coff_tls_directory64
init|=
name|coff_tls_directory
operator|<
name|support
operator|::
name|little64_t
operator|>
decl_stmt|;
end_decl_stmt

begin_comment
comment|/// Bits in control flow guard flags as we understand them.
end_comment

begin_decl_stmt
name|enum
name|class
name|coff_guard_flags
range|:
name|uint32_t
block|{
name|CFInstrumented
operator|=
literal|0x00000100
block|,
name|HasFidTable
operator|=
literal|0x00000400
block|,
name|ProtectDelayLoadIAT
operator|=
literal|0x00001000
block|,
name|DelayLoadIATSection
operator|=
literal|0x00002000
block|,
comment|// Delay load in separate section
name|HasLongJmpTable
operator|=
literal|0x00010000
block|,
name|FidTableHasFlags
operator|=
literal|0x10000000
block|,
comment|// Indicates that fid tables are 5 bytes
block|}
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|coff_load_config_code_integrity
block|{
name|support
operator|::
name|ulittle16_t
name|Flags
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|Catalog
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|CatalogOffset
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|Reserved
expr_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/// 32-bit load config (IMAGE_LOAD_CONFIG_DIRECTORY32)
end_comment

begin_struct
struct|struct
name|coff_load_configuration32
block|{
name|support
operator|::
name|ulittle32_t
name|Size
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|TimeDateStamp
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MajorVersion
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MinorVersion
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|GlobalFlagsClear
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|GlobalFlagsSet
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|CriticalSectionDefaultTimeout
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|DeCommitFreeBlockThreshold
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|DeCommitTotalFreeThreshold
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|LockPrefixTable
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|MaximumAllocationSize
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|VirtualMemoryThreshold
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|ProcessAffinityMask
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|ProcessHeapFlags
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|CSDVersion
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|DependentLoadFlags
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|EditList
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SecurityCookie
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SEHandlerTable
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SEHandlerCount
expr_stmt|;
comment|// Added in MSVC 2015 for /guard:cf.
name|support
operator|::
name|ulittle32_t
name|GuardCFCheckFunction
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|GuardCFCheckDispatch
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|GuardCFFunctionTable
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|GuardCFFunctionCount
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|GuardFlags
expr_stmt|;
comment|// coff_guard_flags
comment|// Added in MSVC 2017
name|coff_load_config_code_integrity
name|CodeIntegrity
decl_stmt|;
name|support
operator|::
name|ulittle32_t
name|GuardAddressTakenIatEntryTable
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|GuardAddressTakenIatEntryCount
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|GuardLongJumpTargetTable
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|GuardLongJumpTargetCount
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|DynamicValueRelocTable
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|CHPEMetadataPointer
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|GuardRFFailureRoutine
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|GuardRFFailureRoutineFunctionPointer
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|DynamicValueRelocTableOffset
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|DynamicValueRelocTableSection
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|Reserved2
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|GuardRFVerifyStackPointerFunctionPointer
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|HotPatchTableOffset
expr_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/// 64-bit load config (IMAGE_LOAD_CONFIG_DIRECTORY64)
end_comment

begin_struct
struct|struct
name|coff_load_configuration64
block|{
name|support
operator|::
name|ulittle32_t
name|Size
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|TimeDateStamp
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MajorVersion
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MinorVersion
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|GlobalFlagsClear
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|GlobalFlagsSet
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|CriticalSectionDefaultTimeout
expr_stmt|;
name|support
operator|::
name|ulittle64_t
name|DeCommitFreeBlockThreshold
expr_stmt|;
name|support
operator|::
name|ulittle64_t
name|DeCommitTotalFreeThreshold
expr_stmt|;
name|support
operator|::
name|ulittle64_t
name|LockPrefixTable
expr_stmt|;
name|support
operator|::
name|ulittle64_t
name|MaximumAllocationSize
expr_stmt|;
name|support
operator|::
name|ulittle64_t
name|VirtualMemoryThreshold
expr_stmt|;
name|support
operator|::
name|ulittle64_t
name|ProcessAffinityMask
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|ProcessHeapFlags
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|CSDVersion
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|DependentLoadFlags
expr_stmt|;
name|support
operator|::
name|ulittle64_t
name|EditList
expr_stmt|;
name|support
operator|::
name|ulittle64_t
name|SecurityCookie
expr_stmt|;
name|support
operator|::
name|ulittle64_t
name|SEHandlerTable
expr_stmt|;
name|support
operator|::
name|ulittle64_t
name|SEHandlerCount
expr_stmt|;
comment|// Added in MSVC 2015 for /guard:cf.
name|support
operator|::
name|ulittle64_t
name|GuardCFCheckFunction
expr_stmt|;
name|support
operator|::
name|ulittle64_t
name|GuardCFCheckDispatch
expr_stmt|;
name|support
operator|::
name|ulittle64_t
name|GuardCFFunctionTable
expr_stmt|;
name|support
operator|::
name|ulittle64_t
name|GuardCFFunctionCount
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|GuardFlags
expr_stmt|;
comment|// Added in MSVC 2017
name|coff_load_config_code_integrity
name|CodeIntegrity
decl_stmt|;
name|support
operator|::
name|ulittle64_t
name|GuardAddressTakenIatEntryTable
expr_stmt|;
name|support
operator|::
name|ulittle64_t
name|GuardAddressTakenIatEntryCount
expr_stmt|;
name|support
operator|::
name|ulittle64_t
name|GuardLongJumpTargetTable
expr_stmt|;
name|support
operator|::
name|ulittle64_t
name|GuardLongJumpTargetCount
expr_stmt|;
name|support
operator|::
name|ulittle64_t
name|DynamicValueRelocTable
expr_stmt|;
name|support
operator|::
name|ulittle64_t
name|CHPEMetadataPointer
expr_stmt|;
name|support
operator|::
name|ulittle64_t
name|GuardRFFailureRoutine
expr_stmt|;
name|support
operator|::
name|ulittle64_t
name|GuardRFFailureRoutineFunctionPointer
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|DynamicValueRelocTableOffset
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|DynamicValueRelocTableSection
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|Reserved2
expr_stmt|;
name|support
operator|::
name|ulittle64_t
name|GuardRFVerifyStackPointerFunctionPointer
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|HotPatchTableOffset
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|coff_runtime_function_x64
block|{
name|support
operator|::
name|ulittle32_t
name|BeginAddress
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|EndAddress
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|UnwindInformation
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|coff_base_reloc_block_header
block|{
name|support
operator|::
name|ulittle32_t
name|PageRVA
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|BlockSize
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|coff_base_reloc_block_entry
block|{
name|support
operator|::
name|ulittle16_t
name|Data
expr_stmt|;
name|int
name|getType
argument_list|()
specifier|const
block|{
return|return
name|Data
operator|>>
literal|12
return|;
block|}
name|int
name|getOffset
argument_list|()
specifier|const
block|{
return|return
name|Data
operator|&
operator|(
operator|(
literal|1
operator|<<
literal|12
operator|)
operator|-
literal|1
operator|)
return|;
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|coff_resource_dir_entry
block|{
union|union
block|{
name|support
operator|::
name|ulittle32_t
name|NameOffset
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|ID
expr_stmt|;
name|uint32_t
name|getNameOffset
argument_list|()
specifier|const
block|{
return|return
name|maskTrailingOnes
operator|<
name|uint32_t
operator|>
operator|(
literal|31
operator|)
operator|&
name|NameOffset
return|;
block|}
block|}
name|Identifier
union|;
union|union
block|{
name|support
operator|::
name|ulittle32_t
name|DataEntryOffset
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SubdirOffset
expr_stmt|;
name|bool
name|isSubDir
argument_list|()
specifier|const
block|{
return|return
name|SubdirOffset
operator|>>
literal|31
return|;
block|}
name|uint32_t
name|value
argument_list|()
specifier|const
block|{
return|return
name|maskTrailingOnes
operator|<
name|uint32_t
operator|>
operator|(
literal|31
operator|)
operator|&
name|SubdirOffset
return|;
block|}
block|}
name|Offset
union|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|coff_resource_data_entry
block|{
name|support
operator|::
name|ulittle32_t
name|DataRVA
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|DataSize
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|Codepage
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|Reserved
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|coff_resource_dir_table
block|{
name|support
operator|::
name|ulittle32_t
name|Characteristics
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|TimeDateStamp
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MajorVersion
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MinorVersion
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|NumberOfNameEntries
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|NumberOfIDEntries
expr_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
name|class
name|COFFObjectFile
range|:
name|public
name|ObjectFile
block|{
name|private
operator|:
name|friend
name|class
name|ImportDirectoryEntryRef
block|;
name|friend
name|class
name|ExportDirectoryEntryRef
block|;
specifier|const
name|coff_file_header
operator|*
name|COFFHeader
block|;
specifier|const
name|coff_bigobj_file_header
operator|*
name|COFFBigObjHeader
block|;
specifier|const
name|pe32_header
operator|*
name|PE32Header
block|;
specifier|const
name|pe32plus_header
operator|*
name|PE32PlusHeader
block|;
specifier|const
name|data_directory
operator|*
name|DataDirectory
block|;
specifier|const
name|coff_section
operator|*
name|SectionTable
block|;
specifier|const
name|coff_symbol16
operator|*
name|SymbolTable16
block|;
specifier|const
name|coff_symbol32
operator|*
name|SymbolTable32
block|;
specifier|const
name|char
operator|*
name|StringTable
block|;
name|uint32_t
name|StringTableSize
block|;
specifier|const
name|coff_import_directory_table_entry
operator|*
name|ImportDirectory
block|;
specifier|const
name|delay_import_directory_table_entry
operator|*
name|DelayImportDirectory
block|;
name|uint32_t
name|NumberOfDelayImportDirectory
block|;
specifier|const
name|export_directory_table_entry
operator|*
name|ExportDirectory
block|;
specifier|const
name|coff_base_reloc_block_header
operator|*
name|BaseRelocHeader
block|;
specifier|const
name|coff_base_reloc_block_header
operator|*
name|BaseRelocEnd
block|;
specifier|const
name|debug_directory
operator|*
name|DebugDirectoryBegin
block|;
specifier|const
name|debug_directory
operator|*
name|DebugDirectoryEnd
block|;
comment|// Either coff_load_configuration32 or coff_load_configuration64.
specifier|const
name|void
operator|*
name|LoadConfig
block|;
name|std
operator|::
name|error_code
name|getString
argument_list|(
argument|uint32_t offset
argument_list|,
argument|StringRef&Res
argument_list|)
specifier|const
block|;
name|template
operator|<
name|typename
name|coff_symbol_type
operator|>
specifier|const
name|coff_symbol_type
operator|*
name|toSymb
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
block|;
specifier|const
name|coff_section
operator|*
name|toSec
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
block|;
specifier|const
name|coff_relocation
operator|*
name|toRel
argument_list|(
argument|DataRefImpl Rel
argument_list|)
specifier|const
block|;
name|std
operator|::
name|error_code
name|initSymbolTablePtr
argument_list|()
block|;
name|std
operator|::
name|error_code
name|initImportTablePtr
argument_list|()
block|;
name|std
operator|::
name|error_code
name|initDelayImportTablePtr
argument_list|()
block|;
name|std
operator|::
name|error_code
name|initExportTablePtr
argument_list|()
block|;
name|std
operator|::
name|error_code
name|initBaseRelocPtr
argument_list|()
block|;
name|std
operator|::
name|error_code
name|initDebugDirectoryPtr
argument_list|()
block|;
name|std
operator|::
name|error_code
name|initLoadConfigPtr
argument_list|()
block|;
name|public
operator|:
name|uintptr_t
name|getSymbolTable
argument_list|()
specifier|const
block|{
if|if
condition|(
name|SymbolTable16
condition|)
return|return
name|reinterpret_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|SymbolTable16
operator|)
return|;
if|if
condition|(
name|SymbolTable32
condition|)
return|return
name|reinterpret_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|SymbolTable32
operator|)
return|;
end_decl_stmt

begin_return
return|return
name|uintptr_t
argument_list|(
literal|0
argument_list|)
return|;
end_return

begin_macro
unit|}    uint16_t
name|getMachine
argument_list|()
end_macro

begin_expr_stmt
specifier|const
block|{
if|if
condition|(
name|COFFHeader
condition|)
return|return
name|COFFHeader
operator|->
name|Machine
return|;
end_expr_stmt

begin_if
if|if
condition|(
name|COFFBigObjHeader
condition|)
return|return
name|COFFBigObjHeader
operator|->
name|Machine
return|;
end_if

begin_expr_stmt
name|llvm_unreachable
argument_list|(
literal|"no COFF header!"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_macro
unit|}    uint16_t
name|getSizeOfOptionalHeader
argument_list|()
end_macro

begin_expr_stmt
specifier|const
block|{
if|if
condition|(
name|COFFHeader
condition|)
return|return
name|COFFHeader
operator|->
name|isImportLibrary
argument_list|()
operator|?
literal|0
operator|:
name|COFFHeader
operator|->
name|SizeOfOptionalHeader
return|;
end_expr_stmt

begin_comment
comment|// bigobj doesn't have this field.
end_comment

begin_if
if|if
condition|(
name|COFFBigObjHeader
condition|)
return|return
literal|0
return|;
end_if

begin_expr_stmt
name|llvm_unreachable
argument_list|(
literal|"no COFF header!"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_macro
unit|}    uint16_t
name|getCharacteristics
argument_list|()
end_macro

begin_expr_stmt
specifier|const
block|{
if|if
condition|(
name|COFFHeader
condition|)
return|return
name|COFFHeader
operator|->
name|isImportLibrary
argument_list|()
operator|?
literal|0
operator|:
name|COFFHeader
operator|->
name|Characteristics
return|;
end_expr_stmt

begin_comment
comment|// bigobj doesn't have characteristics to speak of,
end_comment

begin_comment
comment|// editbin will silently lie to you if you attempt to set any.
end_comment

begin_if
if|if
condition|(
name|COFFBigObjHeader
condition|)
return|return
literal|0
return|;
end_if

begin_expr_stmt
name|llvm_unreachable
argument_list|(
literal|"no COFF header!"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_macro
unit|}    uint32_t
name|getTimeDateStamp
argument_list|()
end_macro

begin_expr_stmt
specifier|const
block|{
if|if
condition|(
name|COFFHeader
condition|)
return|return
name|COFFHeader
operator|->
name|TimeDateStamp
return|;
end_expr_stmt

begin_if
if|if
condition|(
name|COFFBigObjHeader
condition|)
return|return
name|COFFBigObjHeader
operator|->
name|TimeDateStamp
return|;
end_if

begin_expr_stmt
name|llvm_unreachable
argument_list|(
literal|"no COFF header!"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_macro
unit|}    uint32_t
name|getNumberOfSections
argument_list|()
end_macro

begin_expr_stmt
specifier|const
block|{
if|if
condition|(
name|COFFHeader
condition|)
return|return
name|COFFHeader
operator|->
name|isImportLibrary
argument_list|()
operator|?
literal|0
operator|:
name|COFFHeader
operator|->
name|NumberOfSections
return|;
end_expr_stmt

begin_if
if|if
condition|(
name|COFFBigObjHeader
condition|)
return|return
name|COFFBigObjHeader
operator|->
name|NumberOfSections
return|;
end_if

begin_expr_stmt
name|llvm_unreachable
argument_list|(
literal|"no COFF header!"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_macro
unit|}    uint32_t
name|getPointerToSymbolTable
argument_list|()
end_macro

begin_expr_stmt
specifier|const
block|{
if|if
condition|(
name|COFFHeader
condition|)
return|return
name|COFFHeader
operator|->
name|isImportLibrary
argument_list|()
operator|?
literal|0
operator|:
name|COFFHeader
operator|->
name|PointerToSymbolTable
return|;
end_expr_stmt

begin_if
if|if
condition|(
name|COFFBigObjHeader
condition|)
return|return
name|COFFBigObjHeader
operator|->
name|PointerToSymbolTable
return|;
end_if

begin_expr_stmt
name|llvm_unreachable
argument_list|(
literal|"no COFF header!"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_macro
unit|}    uint32_t
name|getRawNumberOfSymbols
argument_list|()
end_macro

begin_expr_stmt
specifier|const
block|{
if|if
condition|(
name|COFFHeader
condition|)
return|return
name|COFFHeader
operator|->
name|isImportLibrary
argument_list|()
operator|?
literal|0
operator|:
name|COFFHeader
operator|->
name|NumberOfSymbols
return|;
end_expr_stmt

begin_if
if|if
condition|(
name|COFFBigObjHeader
condition|)
return|return
name|COFFBigObjHeader
operator|->
name|NumberOfSymbols
return|;
end_if

begin_expr_stmt
name|llvm_unreachable
argument_list|(
literal|"no COFF header!"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_macro
unit|}    uint32_t
name|getNumberOfSymbols
argument_list|()
end_macro

begin_expr_stmt
specifier|const
block|{
if|if
condition|(
operator|!
name|SymbolTable16
operator|&&
operator|!
name|SymbolTable32
condition|)
return|return
literal|0
return|;
end_expr_stmt

begin_return
return|return
name|getRawNumberOfSymbols
argument_list|()
return|;
end_return

begin_expr_stmt
unit|}    const
name|coff_load_configuration32
operator|*
name|getLoadConfig32
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
operator|!
name|is64
argument_list|()
argument_list|)
block|;
return|return
name|reinterpret_cast
operator|<
specifier|const
name|coff_load_configuration32
operator|*
operator|>
operator|(
name|LoadConfig
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|const
name|coff_load_configuration64
operator|*
name|getLoadConfig64
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|is64
argument_list|()
argument_list|)
block|;
return|return
name|reinterpret_cast
operator|<
specifier|const
name|coff_load_configuration64
operator|*
operator|>
operator|(
name|LoadConfig
operator|)
return|;
block|}
end_expr_stmt

begin_label
name|protected
label|:
end_label

begin_decl_stmt
name|void
name|moveSymbolNext
argument_list|(
name|DataRefImpl
operator|&
name|Symb
argument_list|)
decl|const
name|override
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|Expected
operator|<
name|StringRef
operator|>
name|getSymbolName
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
name|override
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Expected
operator|<
name|uint64_t
operator|>
name|getSymbolAddress
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
name|override
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|uint32_t
name|getSymbolAlignment
argument_list|(
name|DataRefImpl
name|Symb
argument_list|)
decl|const
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uint64_t
name|getSymbolValueImpl
argument_list|(
name|DataRefImpl
name|Symb
argument_list|)
decl|const
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uint64_t
name|getCommonSymbolSizeImpl
argument_list|(
name|DataRefImpl
name|Symb
argument_list|)
decl|const
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uint32_t
name|getSymbolFlags
argument_list|(
name|DataRefImpl
name|Symb
argument_list|)
decl|const
name|override
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|Expected
operator|<
name|SymbolRef
operator|::
name|Type
operator|>
name|getSymbolType
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
name|override
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Expected
operator|<
name|section_iterator
operator|>
name|getSymbolSection
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
name|override
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|moveSectionNext
argument_list|(
name|DataRefImpl
operator|&
name|Sec
argument_list|)
decl|const
name|override
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|std
operator|::
name|error_code
name|getSectionName
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|StringRef&Res
argument_list|)
specifier|const
name|override
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|uint64_t
name|getSectionAddress
argument_list|(
name|DataRefImpl
name|Sec
argument_list|)
decl|const
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uint64_t
name|getSectionIndex
argument_list|(
name|DataRefImpl
name|Sec
argument_list|)
decl|const
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uint64_t
name|getSectionSize
argument_list|(
name|DataRefImpl
name|Sec
argument_list|)
decl|const
name|override
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|std
operator|::
name|error_code
name|getSectionContents
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|StringRef&Res
argument_list|)
specifier|const
name|override
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|uint64_t
name|getSectionAlignment
argument_list|(
name|DataRefImpl
name|Sec
argument_list|)
decl|const
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|isSectionCompressed
argument_list|(
name|DataRefImpl
name|Sec
argument_list|)
decl|const
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|isSectionText
argument_list|(
name|DataRefImpl
name|Sec
argument_list|)
decl|const
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|isSectionData
argument_list|(
name|DataRefImpl
name|Sec
argument_list|)
decl|const
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|isSectionBSS
argument_list|(
name|DataRefImpl
name|Sec
argument_list|)
decl|const
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|isSectionVirtual
argument_list|(
name|DataRefImpl
name|Sec
argument_list|)
decl|const
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|relocation_iterator
name|section_rel_begin
argument_list|(
name|DataRefImpl
name|Sec
argument_list|)
decl|const
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|relocation_iterator
name|section_rel_end
argument_list|(
name|DataRefImpl
name|Sec
argument_list|)
decl|const
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|moveRelocationNext
argument_list|(
name|DataRefImpl
operator|&
name|Rel
argument_list|)
decl|const
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uint64_t
name|getRelocationOffset
argument_list|(
name|DataRefImpl
name|Rel
argument_list|)
decl|const
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|symbol_iterator
name|getRelocationSymbol
argument_list|(
name|DataRefImpl
name|Rel
argument_list|)
decl|const
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uint64_t
name|getRelocationType
argument_list|(
name|DataRefImpl
name|Rel
argument_list|)
decl|const
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|getRelocationTypeName
argument_list|(
name|DataRefImpl
name|Rel
argument_list|,
name|SmallVectorImpl
operator|<
name|char
operator|>
operator|&
name|Result
argument_list|)
decl|const
name|override
decl_stmt|;
end_decl_stmt

begin_label
name|public
label|:
end_label

begin_macro
name|COFFObjectFile
argument_list|(
argument|MemoryBufferRef Object
argument_list|,
argument|std::error_code&EC
argument_list|)
end_macro

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|basic_symbol_iterator
name|symbol_begin
argument_list|()
specifier|const
name|override
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|basic_symbol_iterator
name|symbol_end
argument_list|()
specifier|const
name|override
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|section_iterator
name|section_begin
argument_list|()
specifier|const
name|override
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|section_iterator
name|section_end
argument_list|()
specifier|const
name|override
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|const
name|coff_section
modifier|*
name|getCOFFSection
argument_list|(
specifier|const
name|SectionRef
operator|&
name|Section
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|COFFSymbolRef
name|getCOFFSymbol
argument_list|(
specifier|const
name|DataRefImpl
operator|&
name|Ref
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|COFFSymbolRef
name|getCOFFSymbol
argument_list|(
specifier|const
name|SymbolRef
operator|&
name|Symbol
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|coff_relocation
modifier|*
name|getCOFFRelocation
argument_list|(
specifier|const
name|RelocationRef
operator|&
name|Reloc
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|unsigned
name|getSectionID
argument_list|(
name|SectionRef
name|Sec
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|unsigned
name|getSymbolSectionID
argument_list|(
name|SymbolRef
name|Sym
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|uint8_t
name|getBytesInAddress
argument_list|()
specifier|const
name|override
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|StringRef
name|getFileFormatName
argument_list|()
specifier|const
name|override
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|unsigned
name|getArch
argument_list|()
specifier|const
name|override
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|SubtargetFeatures
name|getFeatures
argument_list|()
specifier|const
name|override
block|{
return|return
name|SubtargetFeatures
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|import_directory_iterator
name|import_directory_begin
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|import_directory_iterator
name|import_directory_end
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|delay_import_directory_iterator
name|delay_import_directory_begin
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|delay_import_directory_iterator
name|delay_import_directory_end
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|export_directory_iterator
name|export_directory_begin
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|export_directory_iterator
name|export_directory_end
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|base_reloc_iterator
name|base_reloc_begin
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|base_reloc_iterator
name|base_reloc_end
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|debug_directory
operator|*
name|debug_directory_begin
argument_list|()
specifier|const
block|{
return|return
name|DebugDirectoryBegin
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|const
name|debug_directory
operator|*
name|debug_directory_end
argument_list|()
specifier|const
block|{
return|return
name|DebugDirectoryEnd
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|iterator_range
operator|<
name|import_directory_iterator
operator|>
name|import_directories
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|iterator_range
operator|<
name|delay_import_directory_iterator
operator|>
name|delay_import_directories
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|iterator_range
operator|<
name|export_directory_iterator
operator|>
name|export_directories
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|iterator_range
operator|<
name|base_reloc_iterator
operator|>
name|base_relocs
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|iterator_range
operator|<
specifier|const
name|debug_directory
operator|*
operator|>
name|debug_directories
argument_list|()
specifier|const
block|{
return|return
name|make_range
argument_list|(
name|debug_directory_begin
argument_list|()
argument_list|,
name|debug_directory_end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|const
name|dos_header
operator|*
name|getDOSHeader
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|PE32Header
operator|&&
operator|!
name|PE32PlusHeader
condition|)
return|return
name|nullptr
return|;
end_expr_stmt

begin_return
return|return
name|reinterpret_cast
operator|<
specifier|const
name|dos_header
operator|*
operator|>
operator|(
name|base
argument_list|()
operator|)
return|;
end_return

begin_expr_stmt
unit|}   std
operator|::
name|error_code
name|getPE32Header
argument_list|(
argument|const pe32_header *&Res
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|error_code
name|getPE32PlusHeader
argument_list|(
argument|const pe32plus_header *&Res
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|error_code
name|getDataDirectory
argument_list|(
argument|uint32_t index
argument_list|,
argument|const data_directory *&Res
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|error_code
name|getSection
argument_list|(
argument|int32_t index
argument_list|,
argument|const coff_section *&Res
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|coff_symbol_type
operator|>
name|std
operator|::
name|error_code
name|getSymbol
argument_list|(
argument|uint32_t Index
argument_list|,
argument|const coff_symbol_type *&Res
argument_list|)
specifier|const
block|{
if|if
condition|(
name|Index
operator|>=
name|getNumberOfSymbols
argument_list|()
condition|)
return|return
name|object_error
operator|::
name|parse_failed
return|;
name|Res
operator|=
name|reinterpret_cast
operator|<
name|coff_symbol_type
operator|*
operator|>
operator|(
name|getSymbolTable
argument_list|()
operator|)
operator|+
name|Index
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|std
operator|::
name|error_code
argument_list|()
return|;
end_return

begin_expr_stmt
unit|}   ErrorOr
operator|<
name|COFFSymbolRef
operator|>
name|getSymbol
argument_list|(
argument|uint32_t index
argument_list|)
specifier|const
block|{
if|if
condition|(
name|SymbolTable16
condition|)
block|{
specifier|const
name|coff_symbol16
modifier|*
name|Symb
init|=
name|nullptr
decl_stmt|;
if|if
condition|(
name|std
operator|::
name|error_code
name|EC
operator|=
name|getSymbol
argument_list|(
name|index
argument_list|,
name|Symb
argument_list|)
condition|)
return|return
name|EC
return|;
return|return
name|COFFSymbolRef
argument_list|(
name|Symb
argument_list|)
return|;
block|}
end_expr_stmt

begin_if
if|if
condition|(
name|SymbolTable32
condition|)
block|{
specifier|const
name|coff_symbol32
modifier|*
name|Symb
init|=
name|nullptr
decl_stmt|;
if|if
condition|(
name|std
operator|::
name|error_code
name|EC
operator|=
name|getSymbol
argument_list|(
name|index
argument_list|,
name|Symb
argument_list|)
condition|)
return|return
name|EC
return|;
return|return
name|COFFSymbolRef
argument_list|(
name|Symb
argument_list|)
return|;
block|}
end_if

begin_return
return|return
name|object_error
operator|::
name|parse_failed
return|;
end_return

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|T
operator|>
name|std
operator|::
name|error_code
name|getAuxSymbol
argument_list|(
argument|uint32_t index
argument_list|,
argument|const T *&Res
argument_list|)
specifier|const
block|{
name|ErrorOr
operator|<
name|COFFSymbolRef
operator|>
name|s
operator|=
name|getSymbol
argument_list|(
name|index
argument_list|)
block|;
if|if
condition|(
name|std
operator|::
name|error_code
name|EC
operator|=
name|s
operator|.
name|getError
argument_list|()
condition|)
return|return
name|EC
return|;
name|Res
operator|=
name|reinterpret_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|s
operator|->
name|getRawPtr
argument_list|()
operator|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|std
operator|::
name|error_code
argument_list|()
return|;
end_return

begin_expr_stmt
unit|}    std
operator|::
name|error_code
name|getSymbolName
argument_list|(
argument|COFFSymbolRef Symbol
argument_list|,
argument|StringRef&Res
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|error_code
name|getSymbolName
argument_list|(
argument|const coff_symbol_generic *Symbol
argument_list|,
argument|StringRef&Res
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|getSymbolAuxData
argument_list|(
argument|COFFSymbolRef Symbol
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|size_t
name|getSymbolTableEntrySize
argument_list|()
specifier|const
block|{
if|if
condition|(
name|COFFHeader
condition|)
return|return
sizeof|sizeof
argument_list|(
name|coff_symbol16
argument_list|)
return|;
end_expr_stmt

begin_if
if|if
condition|(
name|COFFBigObjHeader
condition|)
return|return
sizeof|sizeof
argument_list|(
name|coff_symbol32
argument_list|)
return|;
end_if

begin_expr_stmt
name|llvm_unreachable
argument_list|(
literal|"null symbol table pointer!"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}    iterator_range
operator|<
specifier|const
name|coff_relocation
operator|*
operator|>
name|getRelocations
argument_list|(
argument|const coff_section *Sec
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|error_code
name|getSectionName
argument_list|(
argument|const coff_section *Sec
argument_list|,
argument|StringRef&Res
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|uint64_t
name|getSectionSize
argument_list|(
specifier|const
name|coff_section
operator|*
name|Sec
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|std
operator|::
name|error_code
name|getSectionContents
argument_list|(
argument|const coff_section *Sec
argument_list|,
argument|ArrayRef<uint8_t>&Res
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|uint64_t
name|getImageBase
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|error_code
name|getVaPtr
argument_list|(
argument|uint64_t VA
argument_list|,
argument|uintptr_t&Res
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|error_code
name|getRvaPtr
argument_list|(
argument|uint32_t Rva
argument_list|,
argument|uintptr_t&Res
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_comment
comment|/// Given an RVA base and size, returns a valid array of bytes or an error
end_comment

begin_comment
comment|/// code if the RVA and size is not contained completely within a valid
end_comment

begin_comment
comment|/// section.
end_comment

begin_expr_stmt
name|std
operator|::
name|error_code
name|getRvaAndSizeAsBytes
argument_list|(
argument|uint32_t RVA
argument_list|,
argument|uint32_t Size
argument_list|,
argument|ArrayRef<uint8_t>&Contents
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|error_code
name|getHintName
argument_list|(
argument|uint32_t Rva
argument_list|,
argument|uint16_t&Hint
argument_list|,
argument|StringRef&Name
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_comment
comment|/// Get PDB information out of a codeview debug directory entry.
end_comment

begin_expr_stmt
name|std
operator|::
name|error_code
name|getDebugPDBInfo
argument_list|(
argument|const debug_directory *DebugDir
argument_list|,
argument|const codeview::DebugInfo *&Info
argument_list|,
argument|StringRef&PDBFileName
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_comment
comment|/// Get PDB information from an executable. If the information is not present,
end_comment

begin_comment
comment|/// Info will be set to nullptr and PDBFileName will be empty. An error is
end_comment

begin_comment
comment|/// returned only on corrupt object files. Convenience accessor that can be
end_comment

begin_comment
comment|/// used if the debug directory is not already handy.
end_comment

begin_expr_stmt
name|std
operator|::
name|error_code
name|getDebugPDBInfo
argument_list|(
argument|const codeview::DebugInfo *&Info
argument_list|,
argument|StringRef&PDBFileName
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|bool
name|isRelocatableObject
argument_list|()
specifier|const
name|override
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|bool
name|is64
argument_list|()
specifier|const
block|{
return|return
name|PE32PlusHeader
return|;
block|}
end_expr_stmt

begin_function
specifier|static
name|bool
name|classof
parameter_list|(
specifier|const
name|Binary
modifier|*
name|v
parameter_list|)
block|{
return|return
name|v
operator|->
name|isCOFF
argument_list|()
return|;
block|}
end_function

begin_comment
unit|};
comment|// The iterator for the import directory table.
end_comment

begin_decl_stmt
name|class
name|ImportDirectoryEntryRef
block|{
name|public
label|:
name|ImportDirectoryEntryRef
argument_list|()
operator|=
expr|default
expr_stmt|;
name|ImportDirectoryEntryRef
argument_list|(
argument|const coff_import_directory_table_entry *Table
argument_list|,
argument|uint32_t I
argument_list|,
argument|const COFFObjectFile *Owner
argument_list|)
block|:
name|ImportTable
argument_list|(
name|Table
argument_list|)
operator|,
name|Index
argument_list|(
name|I
argument_list|)
operator|,
name|OwningObject
argument_list|(
argument|Owner
argument_list|)
block|{}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|ImportDirectoryEntryRef
operator|&
name|Other
operator|)
specifier|const
expr_stmt|;
name|void
name|moveNext
parameter_list|()
function_decl|;
name|imported_symbol_iterator
name|imported_symbol_begin
argument_list|()
specifier|const
expr_stmt|;
name|imported_symbol_iterator
name|imported_symbol_end
argument_list|()
specifier|const
expr_stmt|;
name|iterator_range
operator|<
name|imported_symbol_iterator
operator|>
name|imported_symbols
argument_list|()
specifier|const
expr_stmt|;
name|imported_symbol_iterator
name|lookup_table_begin
argument_list|()
specifier|const
expr_stmt|;
name|imported_symbol_iterator
name|lookup_table_end
argument_list|()
specifier|const
expr_stmt|;
name|iterator_range
operator|<
name|imported_symbol_iterator
operator|>
name|lookup_table_symbols
argument_list|()
specifier|const
expr_stmt|;
name|std
operator|::
name|error_code
name|getName
argument_list|(
argument|StringRef&Result
argument_list|)
specifier|const
expr_stmt|;
name|std
operator|::
name|error_code
name|getImportLookupTableRVA
argument_list|(
argument|uint32_t&Result
argument_list|)
specifier|const
expr_stmt|;
name|std
operator|::
name|error_code
name|getImportAddressTableRVA
argument_list|(
argument|uint32_t&Result
argument_list|)
specifier|const
expr_stmt|;
name|std
operator|::
name|error_code
name|getImportTableEntry
argument_list|(
argument|const coff_import_directory_table_entry *&Result
argument_list|)
specifier|const
expr_stmt|;
name|private
label|:
specifier|const
name|coff_import_directory_table_entry
modifier|*
name|ImportTable
decl_stmt|;
name|uint32_t
name|Index
decl_stmt|;
specifier|const
name|COFFObjectFile
modifier|*
name|OwningObject
init|=
name|nullptr
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|DelayImportDirectoryEntryRef
block|{
name|public
label|:
name|DelayImportDirectoryEntryRef
argument_list|()
operator|=
expr|default
expr_stmt|;
name|DelayImportDirectoryEntryRef
argument_list|(
argument|const delay_import_directory_table_entry *T
argument_list|,
argument|uint32_t I
argument_list|,
argument|const COFFObjectFile *Owner
argument_list|)
block|:
name|Table
argument_list|(
name|T
argument_list|)
operator|,
name|Index
argument_list|(
name|I
argument_list|)
operator|,
name|OwningObject
argument_list|(
argument|Owner
argument_list|)
block|{}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|DelayImportDirectoryEntryRef
operator|&
name|Other
operator|)
specifier|const
expr_stmt|;
name|void
name|moveNext
parameter_list|()
function_decl|;
name|imported_symbol_iterator
name|imported_symbol_begin
argument_list|()
specifier|const
expr_stmt|;
name|imported_symbol_iterator
name|imported_symbol_end
argument_list|()
specifier|const
expr_stmt|;
name|iterator_range
operator|<
name|imported_symbol_iterator
operator|>
name|imported_symbols
argument_list|()
specifier|const
expr_stmt|;
name|std
operator|::
name|error_code
name|getName
argument_list|(
argument|StringRef&Result
argument_list|)
specifier|const
expr_stmt|;
name|std
operator|::
name|error_code
name|getDelayImportTable
argument_list|(
argument|const delay_import_directory_table_entry *&Result
argument_list|)
specifier|const
expr_stmt|;
name|std
operator|::
name|error_code
name|getImportAddress
argument_list|(
argument|int AddrIndex
argument_list|,
argument|uint64_t&Result
argument_list|)
specifier|const
expr_stmt|;
name|private
label|:
specifier|const
name|delay_import_directory_table_entry
modifier|*
name|Table
decl_stmt|;
name|uint32_t
name|Index
decl_stmt|;
specifier|const
name|COFFObjectFile
modifier|*
name|OwningObject
init|=
name|nullptr
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// The iterator for the export directory table entry.
end_comment

begin_decl_stmt
name|class
name|ExportDirectoryEntryRef
block|{
name|public
label|:
name|ExportDirectoryEntryRef
argument_list|()
operator|=
expr|default
expr_stmt|;
name|ExportDirectoryEntryRef
argument_list|(
argument|const export_directory_table_entry *Table
argument_list|,
argument|uint32_t I
argument_list|,
argument|const COFFObjectFile *Owner
argument_list|)
block|:
name|ExportTable
argument_list|(
name|Table
argument_list|)
operator|,
name|Index
argument_list|(
name|I
argument_list|)
operator|,
name|OwningObject
argument_list|(
argument|Owner
argument_list|)
block|{}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|ExportDirectoryEntryRef
operator|&
name|Other
operator|)
specifier|const
expr_stmt|;
name|void
name|moveNext
parameter_list|()
function_decl|;
name|std
operator|::
name|error_code
name|getDllName
argument_list|(
argument|StringRef&Result
argument_list|)
specifier|const
expr_stmt|;
name|std
operator|::
name|error_code
name|getOrdinalBase
argument_list|(
argument|uint32_t&Result
argument_list|)
specifier|const
expr_stmt|;
name|std
operator|::
name|error_code
name|getOrdinal
argument_list|(
argument|uint32_t&Result
argument_list|)
specifier|const
expr_stmt|;
name|std
operator|::
name|error_code
name|getExportRVA
argument_list|(
argument|uint32_t&Result
argument_list|)
specifier|const
expr_stmt|;
name|std
operator|::
name|error_code
name|getSymbolName
argument_list|(
argument|StringRef&Result
argument_list|)
specifier|const
expr_stmt|;
name|std
operator|::
name|error_code
name|isForwarder
argument_list|(
argument|bool&Result
argument_list|)
specifier|const
expr_stmt|;
name|std
operator|::
name|error_code
name|getForwardTo
argument_list|(
argument|StringRef&Result
argument_list|)
specifier|const
expr_stmt|;
name|private
label|:
specifier|const
name|export_directory_table_entry
modifier|*
name|ExportTable
decl_stmt|;
name|uint32_t
name|Index
decl_stmt|;
specifier|const
name|COFFObjectFile
modifier|*
name|OwningObject
init|=
name|nullptr
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|ImportedSymbolRef
block|{
name|public
label|:
name|ImportedSymbolRef
argument_list|()
operator|=
expr|default
expr_stmt|;
name|ImportedSymbolRef
argument_list|(
argument|const import_lookup_table_entry32 *Entry
argument_list|,
argument|uint32_t I
argument_list|,
argument|const COFFObjectFile *Owner
argument_list|)
block|:
name|Entry32
argument_list|(
name|Entry
argument_list|)
operator|,
name|Entry64
argument_list|(
name|nullptr
argument_list|)
operator|,
name|Index
argument_list|(
name|I
argument_list|)
operator|,
name|OwningObject
argument_list|(
argument|Owner
argument_list|)
block|{}
name|ImportedSymbolRef
argument_list|(
argument|const import_lookup_table_entry64 *Entry
argument_list|,
argument|uint32_t I
argument_list|,
argument|const COFFObjectFile *Owner
argument_list|)
operator|:
name|Entry32
argument_list|(
name|nullptr
argument_list|)
operator|,
name|Entry64
argument_list|(
name|Entry
argument_list|)
operator|,
name|Index
argument_list|(
name|I
argument_list|)
operator|,
name|OwningObject
argument_list|(
argument|Owner
argument_list|)
block|{}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|ImportedSymbolRef
operator|&
name|Other
operator|)
specifier|const
expr_stmt|;
name|void
name|moveNext
parameter_list|()
function_decl|;
name|std
operator|::
name|error_code
name|getSymbolName
argument_list|(
argument|StringRef&Result
argument_list|)
specifier|const
expr_stmt|;
name|std
operator|::
name|error_code
name|isOrdinal
argument_list|(
argument|bool&Result
argument_list|)
specifier|const
expr_stmt|;
name|std
operator|::
name|error_code
name|getOrdinal
argument_list|(
argument|uint16_t&Result
argument_list|)
specifier|const
expr_stmt|;
name|std
operator|::
name|error_code
name|getHintNameRVA
argument_list|(
argument|uint32_t&Result
argument_list|)
specifier|const
expr_stmt|;
name|private
label|:
specifier|const
name|import_lookup_table_entry32
modifier|*
name|Entry32
decl_stmt|;
specifier|const
name|import_lookup_table_entry64
modifier|*
name|Entry64
decl_stmt|;
name|uint32_t
name|Index
decl_stmt|;
specifier|const
name|COFFObjectFile
modifier|*
name|OwningObject
init|=
name|nullptr
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|BaseRelocRef
block|{
name|public
label|:
name|BaseRelocRef
argument_list|()
operator|=
expr|default
expr_stmt|;
name|BaseRelocRef
argument_list|(
specifier|const
name|coff_base_reloc_block_header
operator|*
name|Header
argument_list|,
specifier|const
name|COFFObjectFile
operator|*
name|Owner
argument_list|)
operator|:
name|Header
argument_list|(
name|Header
argument_list|)
operator|,
name|Index
argument_list|(
literal|0
argument_list|)
operator|,
name|OwningObject
argument_list|(
argument|Owner
argument_list|)
block|{}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|BaseRelocRef
operator|&
name|Other
operator|)
specifier|const
expr_stmt|;
name|void
name|moveNext
parameter_list|()
function_decl|;
name|std
operator|::
name|error_code
name|getType
argument_list|(
argument|uint8_t&Type
argument_list|)
specifier|const
expr_stmt|;
name|std
operator|::
name|error_code
name|getRVA
argument_list|(
argument|uint32_t&Result
argument_list|)
specifier|const
expr_stmt|;
name|private
label|:
specifier|const
name|coff_base_reloc_block_header
modifier|*
name|Header
decl_stmt|;
name|uint32_t
name|Index
decl_stmt|;
specifier|const
name|COFFObjectFile
modifier|*
name|OwningObject
init|=
name|nullptr
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|ResourceSectionRef
block|{
name|public
label|:
name|ResourceSectionRef
argument_list|()
operator|=
expr|default
expr_stmt|;
name|explicit
name|ResourceSectionRef
argument_list|(
argument|StringRef Ref
argument_list|)
block|:
name|BBS
argument_list|(
argument|Ref
argument_list|,
argument|support::little
argument_list|)
block|{}
name|ErrorOr
operator|<
name|ArrayRef
operator|<
name|UTF16
operator|>>
name|getEntryNameString
argument_list|(
specifier|const
name|coff_resource_dir_entry
operator|&
name|Entry
argument_list|)
expr_stmt|;
name|ErrorOr
operator|<
specifier|const
name|coff_resource_dir_table
operator|&
operator|>
name|getEntrySubDir
argument_list|(
specifier|const
name|coff_resource_dir_entry
operator|&
name|Entry
argument_list|)
expr_stmt|;
name|ErrorOr
operator|<
specifier|const
name|coff_resource_dir_table
operator|&
operator|>
name|getBaseTable
argument_list|()
expr_stmt|;
name|private
label|:
name|BinaryByteStream
name|BBS
decl_stmt|;
name|ErrorOr
operator|<
specifier|const
name|coff_resource_dir_table
operator|&
operator|>
name|getTableAtOffset
argument_list|(
argument|uint32_t Offset
argument_list|)
expr_stmt|;
name|ErrorOr
operator|<
name|ArrayRef
operator|<
name|UTF16
operator|>>
name|getDirStringAtOffset
argument_list|(
argument|uint32_t Offset
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// Corresponds to `_FPO_DATA` structure in the PE/COFF spec.
end_comment

begin_struct
struct|struct
name|FpoData
block|{
name|support
operator|::
name|ulittle32_t
name|Offset
expr_stmt|;
comment|// ulOffStart: Offset 1st byte of function code
name|support
operator|::
name|ulittle32_t
name|Size
expr_stmt|;
comment|// cbProcSize: # bytes in function
name|support
operator|::
name|ulittle32_t
name|NumLocals
expr_stmt|;
comment|// cdwLocals: # bytes in locals/4
name|support
operator|::
name|ulittle16_t
name|NumParams
expr_stmt|;
comment|// cdwParams: # bytes in params/4
name|support
operator|::
name|ulittle16_t
name|Attributes
expr_stmt|;
comment|// cbProlog: # bytes in prolog
name|int
name|getPrologSize
argument_list|()
specifier|const
block|{
return|return
name|Attributes
operator|&
literal|0xF
return|;
block|}
comment|// cbRegs: # regs saved
name|int
name|getNumSavedRegs
argument_list|()
specifier|const
block|{
return|return
operator|(
name|Attributes
operator|>>
literal|8
operator|)
operator|&
literal|0x7
return|;
block|}
comment|// fHasSEH: true if seh is func
name|bool
name|hasSEH
argument_list|()
specifier|const
block|{
return|return
operator|(
name|Attributes
operator|>>
literal|9
operator|)
operator|&
literal|1
return|;
block|}
comment|// fUseBP: true if EBP has been allocated
name|bool
name|useBP
argument_list|()
specifier|const
block|{
return|return
operator|(
name|Attributes
operator|>>
literal|10
operator|)
operator|&
literal|1
return|;
block|}
comment|// cbFrame: frame pointer
name|int
name|getFP
argument_list|()
specifier|const
block|{
return|return
name|Attributes
operator|>>
literal|14
return|;
block|}
block|}
struct|;
end_struct

begin_comment
unit|}
comment|// end namespace object
end_comment

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_OBJECT_COFF_H
end_comment

end_unit

