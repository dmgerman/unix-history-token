begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- COFF.h - COFF object file implementation -----------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares the COFFObjectFile class.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_OBJECT_COFF_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_OBJECT_COFF_H
end_define

begin_include
include|#
directive|include
file|"llvm/Object/ObjectFile.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/COFF.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Endian.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|object
block|{
struct|struct
name|coff_file_header
block|{
name|support
operator|::
name|ulittle16_t
name|Machine
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|NumberOfSections
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|TimeDateStamp
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|PointerToSymbolTable
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|NumberOfSymbols
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|SizeOfOptionalHeader
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|Characteristics
expr_stmt|;
block|}
struct|;
struct|struct
name|coff_symbol
block|{
struct|struct
name|StringTableOffset
block|{
name|support
operator|::
name|ulittle32_t
name|Zeroes
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|Offset
expr_stmt|;
block|}
struct|;
union|union
block|{
name|char
name|ShortName
index|[
literal|8
index|]
decl_stmt|;
name|StringTableOffset
name|Offset
decl_stmt|;
block|}
name|Name
union|;
name|support
operator|::
name|ulittle32_t
name|Value
expr_stmt|;
name|support
operator|::
name|little16_t
name|SectionNumber
expr_stmt|;
struct|struct
block|{
name|support
operator|::
name|ulittle8_t
name|BaseType
expr_stmt|;
name|support
operator|::
name|ulittle8_t
name|ComplexType
expr_stmt|;
block|}
name|Type
struct|;
name|support
operator|::
name|ulittle8_t
name|StorageClass
expr_stmt|;
name|support
operator|::
name|ulittle8_t
name|NumberOfAuxSymbols
expr_stmt|;
block|}
struct|;
struct|struct
name|coff_section
block|{
name|char
name|Name
index|[
literal|8
index|]
decl_stmt|;
name|support
operator|::
name|ulittle32_t
name|VirtualSize
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|VirtualAddress
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SizeOfRawData
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|PointerToRawData
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|PointerToRelocations
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|PointerToLinenumbers
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|NumberOfRelocations
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|NumberOfLinenumbers
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|Characteristics
expr_stmt|;
block|}
struct|;
name|class
name|COFFObjectFile
range|:
name|public
name|ObjectFile
block|{
name|private
operator|:
specifier|const
name|coff_file_header
operator|*
name|Header
block|;
specifier|const
name|coff_section
operator|*
name|SectionTable
block|;
specifier|const
name|coff_symbol
operator|*
name|SymbolTable
block|;
specifier|const
name|char
operator|*
name|StringTable
block|;
name|uint32_t
name|StringTableSize
block|;
name|error_code
name|getSection
argument_list|(
argument|int32_t index
argument_list|,
argument|const coff_section *&Res
argument_list|)
specifier|const
block|;
name|error_code
name|getString
argument_list|(
argument|uint32_t offset
argument_list|,
argument|StringRef&Res
argument_list|)
specifier|const
block|;
specifier|const
name|coff_symbol
operator|*
name|toSymb
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
block|;
specifier|const
name|coff_section
operator|*
name|toSec
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
block|;
name|protected
operator|:
name|virtual
name|error_code
name|getSymbolNext
argument_list|(
argument|DataRefImpl Symb
argument_list|,
argument|SymbolRef&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|getSymbolName
argument_list|(
argument|DataRefImpl Symb
argument_list|,
argument|StringRef&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|getSymbolAddress
argument_list|(
argument|DataRefImpl Symb
argument_list|,
argument|uint64_t&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|getSymbolSize
argument_list|(
argument|DataRefImpl Symb
argument_list|,
argument|uint64_t&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|getSymbolNMTypeChar
argument_list|(
argument|DataRefImpl Symb
argument_list|,
argument|char&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|isSymbolInternal
argument_list|(
argument|DataRefImpl Symb
argument_list|,
argument|bool&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|getSectionNext
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|SectionRef&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|getSectionName
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|StringRef&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|getSectionAddress
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|uint64_t&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|getSectionSize
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|uint64_t&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|getSectionContents
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|StringRef&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|isSectionText
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|bool&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|sectionContainsSymbol
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|DataRefImpl Symb
argument_list|,
argument|bool&Result
argument_list|)
specifier|const
block|;
name|public
operator|:
name|COFFObjectFile
argument_list|(
name|MemoryBuffer
operator|*
name|Object
argument_list|,
name|error_code
operator|&
name|ec
argument_list|)
block|;
name|virtual
name|symbol_iterator
name|begin_symbols
argument_list|()
specifier|const
block|;
name|virtual
name|symbol_iterator
name|end_symbols
argument_list|()
specifier|const
block|;
name|virtual
name|section_iterator
name|begin_sections
argument_list|()
specifier|const
block|;
name|virtual
name|section_iterator
name|end_sections
argument_list|()
specifier|const
block|;
name|virtual
name|uint8_t
name|getBytesInAddress
argument_list|()
specifier|const
block|;
name|virtual
name|StringRef
name|getFileFormatName
argument_list|()
specifier|const
block|;
name|virtual
name|unsigned
name|getArch
argument_list|()
specifier|const
block|; }
decl_stmt|;
block|}
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

