begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- COFF.h - COFF object file implementation -----------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares the COFFObjectFile class.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_OBJECT_COFF_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_OBJECT_COFF_H
end_define

begin_include
include|#
directive|include
file|"llvm/Object/ObjectFile.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/COFF.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Endian.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|ArrayRef
expr_stmt|;
name|namespace
name|object
block|{
name|class
name|ImportDirectoryEntryRef
decl_stmt|;
name|class
name|ExportDirectoryEntryRef
decl_stmt|;
typedef|typedef
name|content_iterator
operator|<
name|ImportDirectoryEntryRef
operator|>
name|import_directory_iterator
expr_stmt|;
typedef|typedef
name|content_iterator
operator|<
name|ExportDirectoryEntryRef
operator|>
name|export_directory_iterator
expr_stmt|;
comment|/// The DOS compatible header at the front of all PE/COFF executables.
struct|struct
name|dos_header
block|{
name|support
operator|::
name|ulittle16_t
name|Magic
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|UsedBytesInTheLastPage
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|FileSizeInPages
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|NumberOfRelocationItems
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|HeaderSizeInParagraphs
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MinimumExtraParagraphs
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MaximumExtraParagraphs
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|InitialRelativeSS
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|InitialSP
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|Checksum
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|InitialIP
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|InitialRelativeCS
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|AddressOfRelocationTable
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|OverlayNumber
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|Reserved
index|[
literal|4
index|]
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|OEMid
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|OEMinfo
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|Reserved2
index|[
literal|10
index|]
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|AddressOfNewExeHeader
expr_stmt|;
block|}
struct|;
struct|struct
name|coff_file_header
block|{
name|support
operator|::
name|ulittle16_t
name|Machine
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|NumberOfSections
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|TimeDateStamp
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|PointerToSymbolTable
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|NumberOfSymbols
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|SizeOfOptionalHeader
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|Characteristics
expr_stmt|;
name|bool
name|isImportLibrary
argument_list|()
specifier|const
block|{
return|return
name|NumberOfSections
operator|==
literal|0xffff
return|;
block|}
block|}
struct|;
comment|/// The 32-bit PE header that follows the COFF header.
struct|struct
name|pe32_header
block|{
name|support
operator|::
name|ulittle16_t
name|Magic
expr_stmt|;
name|uint8_t
name|MajorLinkerVersion
decl_stmt|;
name|uint8_t
name|MinorLinkerVersion
decl_stmt|;
name|support
operator|::
name|ulittle32_t
name|SizeOfCode
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SizeOfInitializedData
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SizeOfUninitializedData
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|AddressOfEntryPoint
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|BaseOfCode
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|BaseOfData
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|ImageBase
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SectionAlignment
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|FileAlignment
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MajorOperatingSystemVersion
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MinorOperatingSystemVersion
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MajorImageVersion
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MinorImageVersion
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MajorSubsystemVersion
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MinorSubsystemVersion
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|Win32VersionValue
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SizeOfImage
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SizeOfHeaders
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|CheckSum
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|Subsystem
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|DLLCharacteristics
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SizeOfStackReserve
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SizeOfStackCommit
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SizeOfHeapReserve
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SizeOfHeapCommit
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|LoaderFlags
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|NumberOfRvaAndSize
expr_stmt|;
block|}
struct|;
comment|/// The 64-bit PE header that follows the COFF header.
struct|struct
name|pe32plus_header
block|{
name|support
operator|::
name|ulittle16_t
name|Magic
expr_stmt|;
name|uint8_t
name|MajorLinkerVersion
decl_stmt|;
name|uint8_t
name|MinorLinkerVersion
decl_stmt|;
name|support
operator|::
name|ulittle32_t
name|SizeOfCode
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SizeOfInitializedData
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SizeOfUninitializedData
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|AddressOfEntryPoint
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|BaseOfCode
expr_stmt|;
name|support
operator|::
name|ulittle64_t
name|ImageBase
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SectionAlignment
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|FileAlignment
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MajorOperatingSystemVersion
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MinorOperatingSystemVersion
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MajorImageVersion
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MinorImageVersion
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MajorSubsystemVersion
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MinorSubsystemVersion
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|Win32VersionValue
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SizeOfImage
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SizeOfHeaders
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|CheckSum
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|Subsystem
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|DLLCharacteristics
expr_stmt|;
name|support
operator|::
name|ulittle64_t
name|SizeOfStackReserve
expr_stmt|;
name|support
operator|::
name|ulittle64_t
name|SizeOfStackCommit
expr_stmt|;
name|support
operator|::
name|ulittle64_t
name|SizeOfHeapReserve
expr_stmt|;
name|support
operator|::
name|ulittle64_t
name|SizeOfHeapCommit
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|LoaderFlags
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|NumberOfRvaAndSize
expr_stmt|;
block|}
struct|;
struct|struct
name|data_directory
block|{
name|support
operator|::
name|ulittle32_t
name|RelativeVirtualAddress
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|Size
expr_stmt|;
block|}
struct|;
struct|struct
name|import_directory_table_entry
block|{
name|support
operator|::
name|ulittle32_t
name|ImportLookupTableRVA
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|TimeDateStamp
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|ForwarderChain
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|NameRVA
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|ImportAddressTableRVA
expr_stmt|;
block|}
struct|;
struct|struct
name|import_lookup_table_entry32
block|{
name|support
operator|::
name|ulittle32_t
name|data
expr_stmt|;
name|bool
name|isOrdinal
argument_list|()
specifier|const
block|{
return|return
name|data
operator|&
literal|0x80000000
return|;
block|}
name|uint16_t
name|getOrdinal
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isOrdinal
argument_list|()
operator|&&
literal|"ILT entry is not an ordinal!"
argument_list|)
block|;
return|return
name|data
operator|&
literal|0xFFFF
return|;
block|}
name|uint32_t
name|getHintNameRVA
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
operator|!
name|isOrdinal
argument_list|()
operator|&&
literal|"ILT entry is not a Hint/Name RVA!"
argument_list|)
block|;
return|return
name|data
return|;
block|}
block|}
struct|;
struct|struct
name|export_directory_table_entry
block|{
name|support
operator|::
name|ulittle32_t
name|ExportFlags
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|TimeDateStamp
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MajorVersion
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MinorVersion
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|NameRVA
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|OrdinalBase
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|AddressTableEntries
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|NumberOfNamePointers
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|ExportAddressTableRVA
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|NamePointerRVA
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|OrdinalTableRVA
expr_stmt|;
block|}
struct|;
union|union
name|export_address_table_entry
block|{
name|support
operator|::
name|ulittle32_t
name|ExportRVA
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|ForwarderRVA
expr_stmt|;
block|}
union|;
typedef|typedef
name|support
operator|::
name|ulittle32_t
name|export_name_pointer_table_entry
expr_stmt|;
typedef|typedef
name|support
operator|::
name|ulittle16_t
name|export_ordinal_table_entry
expr_stmt|;
struct|struct
name|coff_symbol
block|{
struct|struct
name|StringTableOffset
block|{
name|support
operator|::
name|ulittle32_t
name|Zeroes
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|Offset
expr_stmt|;
block|}
struct|;
union|union
block|{
name|char
name|ShortName
index|[
literal|8
index|]
decl_stmt|;
name|StringTableOffset
name|Offset
decl_stmt|;
block|}
name|Name
union|;
name|support
operator|::
name|ulittle32_t
name|Value
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|SectionNumber
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|Type
expr_stmt|;
name|support
operator|::
name|ulittle8_t
name|StorageClass
expr_stmt|;
name|support
operator|::
name|ulittle8_t
name|NumberOfAuxSymbols
expr_stmt|;
name|uint8_t
name|getBaseType
argument_list|()
specifier|const
block|{
return|return
name|Type
operator|&
literal|0x0F
return|;
block|}
name|uint8_t
name|getComplexType
argument_list|()
specifier|const
block|{
return|return
operator|(
name|Type
operator|&
literal|0xF0
operator|)
operator|>>
literal|4
return|;
block|}
name|bool
name|isFunctionDefinition
argument_list|()
specifier|const
block|{
return|return
name|StorageClass
operator|==
name|COFF
operator|::
name|IMAGE_SYM_CLASS_EXTERNAL
operator|&&
name|getBaseType
argument_list|()
operator|==
name|COFF
operator|::
name|IMAGE_SYM_TYPE_NULL
operator|&&
name|getComplexType
argument_list|()
operator|==
name|COFF
operator|::
name|IMAGE_SYM_DTYPE_FUNCTION
operator|&&
operator|!
name|COFF
operator|::
name|isReservedSectionNumber
argument_list|(
name|SectionNumber
argument_list|)
return|;
block|}
name|bool
name|isFunctionLineInfo
argument_list|()
specifier|const
block|{
return|return
name|StorageClass
operator|==
name|COFF
operator|::
name|IMAGE_SYM_CLASS_FUNCTION
return|;
block|}
name|bool
name|isWeakExternal
argument_list|()
specifier|const
block|{
return|return
name|StorageClass
operator|==
name|COFF
operator|::
name|IMAGE_SYM_CLASS_WEAK_EXTERNAL
operator|||
operator|(
name|StorageClass
operator|==
name|COFF
operator|::
name|IMAGE_SYM_CLASS_EXTERNAL
operator|&&
name|SectionNumber
operator|==
name|COFF
operator|::
name|IMAGE_SYM_UNDEFINED
operator|&&
name|Value
operator|==
literal|0
operator|)
return|;
block|}
name|bool
name|isFileRecord
argument_list|()
specifier|const
block|{
return|return
name|StorageClass
operator|==
name|COFF
operator|::
name|IMAGE_SYM_CLASS_FILE
return|;
block|}
name|bool
name|isSectionDefinition
argument_list|()
specifier|const
block|{
comment|// C++/CLI creates external ABS symbols for non-const appdomain globals.
comment|// These are also followed by an auxiliary section definition.
name|bool
name|isAppdomainGlobal
operator|=
name|StorageClass
operator|==
name|COFF
operator|::
name|IMAGE_SYM_CLASS_EXTERNAL
operator|&&
name|SectionNumber
operator|==
name|COFF
operator|::
name|IMAGE_SYM_ABSOLUTE
block|;
name|bool
name|isOrdinarySection
operator|=
name|StorageClass
operator|==
name|COFF
operator|::
name|IMAGE_SYM_CLASS_STATIC
operator|&&
name|Value
operator|==
literal|0
block|;
return|return
name|isAppdomainGlobal
operator|||
name|isOrdinarySection
return|;
block|}
name|bool
name|isCLRToken
argument_list|()
specifier|const
block|{
return|return
name|StorageClass
operator|==
name|COFF
operator|::
name|IMAGE_SYM_CLASS_CLR_TOKEN
return|;
block|}
block|}
struct|;
struct|struct
name|coff_section
block|{
name|char
name|Name
index|[
literal|8
index|]
decl_stmt|;
name|support
operator|::
name|ulittle32_t
name|VirtualSize
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|VirtualAddress
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SizeOfRawData
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|PointerToRawData
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|PointerToRelocations
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|PointerToLinenumbers
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|NumberOfRelocations
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|NumberOfLinenumbers
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|Characteristics
expr_stmt|;
comment|// Returns true if the actual number of relocations is stored in
comment|// VirtualAddress field of the first relocation table entry.
name|bool
name|hasExtendedRelocations
argument_list|()
specifier|const
block|{
return|return
name|Characteristics
operator|&
name|COFF
operator|::
name|IMAGE_SCN_LNK_NRELOC_OVFL
operator|&&
name|NumberOfRelocations
operator|==
name|UINT16_MAX
return|;
block|}
empty_stmt|;
block|}
struct|;
struct|struct
name|coff_relocation
block|{
name|support
operator|::
name|ulittle32_t
name|VirtualAddress
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SymbolTableIndex
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|Type
expr_stmt|;
block|}
struct|;
struct|struct
name|coff_aux_function_definition
block|{
name|support
operator|::
name|ulittle32_t
name|TagIndex
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|TotalSize
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|PointerToLinenumber
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|PointerToNextFunction
expr_stmt|;
name|char
name|Unused
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
struct|struct
name|coff_aux_bf_and_ef_symbol
block|{
name|char
name|Unused1
index|[
literal|4
index|]
decl_stmt|;
name|support
operator|::
name|ulittle16_t
name|Linenumber
expr_stmt|;
name|char
name|Unused2
index|[
literal|6
index|]
decl_stmt|;
name|support
operator|::
name|ulittle32_t
name|PointerToNextFunction
expr_stmt|;
name|char
name|Unused3
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
struct|struct
name|coff_aux_weak_external
block|{
name|support
operator|::
name|ulittle32_t
name|TagIndex
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|Characteristics
expr_stmt|;
name|char
name|Unused
index|[
literal|10
index|]
decl_stmt|;
block|}
struct|;
struct|struct
name|coff_aux_file
block|{
name|char
name|FileName
index|[
literal|18
index|]
decl_stmt|;
block|}
struct|;
struct|struct
name|coff_aux_section_definition
block|{
name|support
operator|::
name|ulittle32_t
name|Length
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|NumberOfRelocations
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|NumberOfLinenumbers
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|CheckSum
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|Number
expr_stmt|;
name|support
operator|::
name|ulittle8_t
name|Selection
expr_stmt|;
name|char
name|Unused
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
struct|struct
name|coff_aux_clr_token
block|{
name|support
operator|::
name|ulittle8_t
name|AuxType
expr_stmt|;
name|support
operator|::
name|ulittle8_t
name|Reserved
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SymbolTableIndex
expr_stmt|;
name|char
name|Unused
index|[
literal|12
index|]
decl_stmt|;
block|}
struct|;
struct|struct
name|coff_load_configuration32
block|{
name|support
operator|::
name|ulittle32_t
name|Characteristics
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|TimeDateStamp
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MajorVersion
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|MinorVersion
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|GlobalFlagsClear
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|GlobalFlagsSet
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|CriticalSectionDefaultTimeout
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|DeCommitFreeBlockThreshold
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|DeCommitTotalFreeThreshold
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|LockPrefixTable
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|MaximumAllocationSize
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|VirtualMemoryThreshold
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|ProcessAffinityMask
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|ProcessHeapFlags
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|CSDVersion
expr_stmt|;
name|uint16_t
name|Reserved
decl_stmt|;
name|support
operator|::
name|ulittle32_t
name|EditList
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SecurityCookie
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SEHandlerTable
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|SEHandlerCount
expr_stmt|;
block|}
struct|;
struct|struct
name|coff_runtime_function_x64
block|{
name|support
operator|::
name|ulittle32_t
name|BeginAddress
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|EndAddress
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|UnwindInformation
expr_stmt|;
block|}
struct|;
name|class
name|COFFObjectFile
range|:
name|public
name|ObjectFile
block|{
name|private
operator|:
name|friend
name|class
name|ImportDirectoryEntryRef
block|;
name|friend
name|class
name|ExportDirectoryEntryRef
block|;
specifier|const
name|coff_file_header
operator|*
name|COFFHeader
block|;
specifier|const
name|pe32_header
operator|*
name|PE32Header
block|;
specifier|const
name|pe32plus_header
operator|*
name|PE32PlusHeader
block|;
specifier|const
name|data_directory
operator|*
name|DataDirectory
block|;
specifier|const
name|coff_section
operator|*
name|SectionTable
block|;
specifier|const
name|coff_symbol
operator|*
name|SymbolTable
block|;
specifier|const
name|char
operator|*
name|StringTable
block|;
name|uint32_t
name|StringTableSize
block|;
specifier|const
name|import_directory_table_entry
operator|*
name|ImportDirectory
block|;
name|uint32_t
name|NumberOfImportDirectory
block|;
specifier|const
name|export_directory_table_entry
operator|*
name|ExportDirectory
block|;
name|std
operator|::
name|error_code
name|getString
argument_list|(
argument|uint32_t offset
argument_list|,
argument|StringRef&Res
argument_list|)
specifier|const
block|;
specifier|const
name|coff_symbol
operator|*
name|toSymb
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
block|;
specifier|const
name|coff_section
operator|*
name|toSec
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
block|;
specifier|const
name|coff_relocation
operator|*
name|toRel
argument_list|(
argument|DataRefImpl Rel
argument_list|)
specifier|const
block|;
name|std
operator|::
name|error_code
name|initSymbolTablePtr
argument_list|()
block|;
name|std
operator|::
name|error_code
name|initImportTablePtr
argument_list|()
block|;
name|std
operator|::
name|error_code
name|initExportTablePtr
argument_list|()
block|;
name|protected
operator|:
name|void
name|moveSymbolNext
argument_list|(
argument|DataRefImpl&Symb
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|getSymbolName
argument_list|(
argument|DataRefImpl Symb
argument_list|,
argument|StringRef&Res
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|getSymbolAddress
argument_list|(
argument|DataRefImpl Symb
argument_list|,
argument|uint64_t&Res
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|getSymbolSize
argument_list|(
argument|DataRefImpl Symb
argument_list|,
argument|uint64_t&Res
argument_list|)
specifier|const
name|override
block|;
name|uint32_t
name|getSymbolFlags
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|getSymbolType
argument_list|(
argument|DataRefImpl Symb
argument_list|,
argument|SymbolRef::Type&Res
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|getSymbolSection
argument_list|(
argument|DataRefImpl Symb
argument_list|,
argument|section_iterator&Res
argument_list|)
specifier|const
name|override
block|;
name|void
name|moveSectionNext
argument_list|(
argument|DataRefImpl&Sec
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|getSectionName
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|StringRef&Res
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|getSectionAddress
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|uint64_t&Res
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|getSectionSize
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|uint64_t&Res
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|getSectionContents
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|StringRef&Res
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|getSectionAlignment
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|uint64_t&Res
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|isSectionText
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|bool&Res
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|isSectionData
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|bool&Res
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|isSectionBSS
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|bool&Res
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|isSectionVirtual
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|bool&Res
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|isSectionZeroInit
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|bool&Res
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|isSectionReadOnlyData
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|bool&Res
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|isSectionRequiredForExecution
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|bool&Res
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|sectionContainsSymbol
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|DataRefImpl Symb
argument_list|,
argument|bool&Result
argument_list|)
specifier|const
name|override
block|;
name|relocation_iterator
name|section_rel_begin
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
name|override
block|;
name|relocation_iterator
name|section_rel_end
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
name|override
block|;
name|void
name|moveRelocationNext
argument_list|(
argument|DataRefImpl&Rel
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|getRelocationAddress
argument_list|(
argument|DataRefImpl Rel
argument_list|,
argument|uint64_t&Res
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|getRelocationOffset
argument_list|(
argument|DataRefImpl Rel
argument_list|,
argument|uint64_t&Res
argument_list|)
specifier|const
name|override
block|;
name|symbol_iterator
name|getRelocationSymbol
argument_list|(
argument|DataRefImpl Rel
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|getRelocationType
argument_list|(
argument|DataRefImpl Rel
argument_list|,
argument|uint64_t&Res
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|getRelocationTypeName
argument_list|(
argument|DataRefImpl Rel
argument_list|,
argument|SmallVectorImpl<char>&Result
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|getRelocationValueString
argument_list|(
argument|DataRefImpl Rel
argument_list|,
argument|SmallVectorImpl<char>&Result
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|getLibraryNext
argument_list|(
argument|DataRefImpl LibData
argument_list|,
argument|LibraryRef&Result
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|getLibraryPath
argument_list|(
argument|DataRefImpl LibData
argument_list|,
argument|StringRef&Result
argument_list|)
specifier|const
name|override
block|;
name|public
operator|:
name|COFFObjectFile
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|MemoryBuffer
operator|>
name|Object
argument_list|,
name|std
operator|::
name|error_code
operator|&
name|EC
argument_list|)
block|;
name|basic_symbol_iterator
name|symbol_begin_impl
argument_list|()
specifier|const
name|override
block|;
name|basic_symbol_iterator
name|symbol_end_impl
argument_list|()
specifier|const
name|override
block|;
name|library_iterator
name|needed_library_begin
argument_list|()
specifier|const
name|override
block|;
name|library_iterator
name|needed_library_end
argument_list|()
specifier|const
name|override
block|;
name|section_iterator
name|section_begin
argument_list|()
specifier|const
name|override
block|;
name|section_iterator
name|section_end
argument_list|()
specifier|const
name|override
block|;
specifier|const
name|coff_section
operator|*
name|getCOFFSection
argument_list|(
argument|const SectionRef&Section
argument_list|)
specifier|const
block|;
specifier|const
name|coff_symbol
operator|*
name|getCOFFSymbol
argument_list|(
argument|const SymbolRef&Symbol
argument_list|)
specifier|const
block|;
specifier|const
name|coff_relocation
operator|*
name|getCOFFRelocation
argument_list|(
argument|const RelocationRef&Reloc
argument_list|)
specifier|const
block|;
name|uint8_t
name|getBytesInAddress
argument_list|()
specifier|const
name|override
block|;
name|StringRef
name|getFileFormatName
argument_list|()
specifier|const
name|override
block|;
name|unsigned
name|getArch
argument_list|()
specifier|const
name|override
block|;
name|StringRef
name|getLoadName
argument_list|()
specifier|const
name|override
block|;
name|import_directory_iterator
name|import_directory_begin
argument_list|()
specifier|const
block|;
name|import_directory_iterator
name|import_directory_end
argument_list|()
specifier|const
block|;
name|export_directory_iterator
name|export_directory_begin
argument_list|()
specifier|const
block|;
name|export_directory_iterator
name|export_directory_end
argument_list|()
specifier|const
block|;
name|std
operator|::
name|error_code
name|getHeader
argument_list|(
argument|const coff_file_header *&Res
argument_list|)
specifier|const
block|;
name|std
operator|::
name|error_code
name|getCOFFHeader
argument_list|(
argument|const coff_file_header *&Res
argument_list|)
specifier|const
block|;
name|std
operator|::
name|error_code
name|getPE32Header
argument_list|(
argument|const pe32_header *&Res
argument_list|)
specifier|const
block|;
name|std
operator|::
name|error_code
name|getPE32PlusHeader
argument_list|(
argument|const pe32plus_header *&Res
argument_list|)
specifier|const
block|;
name|std
operator|::
name|error_code
name|getDataDirectory
argument_list|(
argument|uint32_t index
argument_list|,
argument|const data_directory *&Res
argument_list|)
specifier|const
block|;
name|std
operator|::
name|error_code
name|getSection
argument_list|(
argument|int32_t index
argument_list|,
argument|const coff_section *&Res
argument_list|)
specifier|const
block|;
name|std
operator|::
name|error_code
name|getSymbol
argument_list|(
argument|uint32_t index
argument_list|,
argument|const coff_symbol *&Res
argument_list|)
specifier|const
block|;
name|template
operator|<
name|typename
name|T
operator|>
name|std
operator|::
name|error_code
name|getAuxSymbol
argument_list|(
argument|uint32_t index
argument_list|,
argument|const T *&Res
argument_list|)
specifier|const
block|{
specifier|const
name|coff_symbol
operator|*
name|s
block|;
name|std
operator|::
name|error_code
name|ec
operator|=
name|getSymbol
argument_list|(
name|index
argument_list|,
name|s
argument_list|)
block|;
name|Res
operator|=
name|reinterpret_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|s
operator|)
block|;
return|return
name|ec
return|;
block|}
name|std
operator|::
name|error_code
name|getSymbolName
argument_list|(
argument|const coff_symbol *symbol
argument_list|,
argument|StringRef&Res
argument_list|)
specifier|const
block|;
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|getSymbolAuxData
argument_list|(
argument|const coff_symbol *symbol
argument_list|)
specifier|const
block|;
name|std
operator|::
name|error_code
name|getSectionName
argument_list|(
argument|const coff_section *Sec
argument_list|,
argument|StringRef&Res
argument_list|)
specifier|const
block|;
name|std
operator|::
name|error_code
name|getSectionContents
argument_list|(
argument|const coff_section *Sec
argument_list|,
argument|ArrayRef<uint8_t>&Res
argument_list|)
specifier|const
block|;
name|std
operator|::
name|error_code
name|getVaPtr
argument_list|(
argument|uint64_t VA
argument_list|,
argument|uintptr_t&Res
argument_list|)
specifier|const
block|;
name|std
operator|::
name|error_code
name|getRvaPtr
argument_list|(
argument|uint32_t Rva
argument_list|,
argument|uintptr_t&Res
argument_list|)
specifier|const
block|;
name|std
operator|::
name|error_code
name|getHintName
argument_list|(
argument|uint32_t Rva
argument_list|,
argument|uint16_t&Hint
argument_list|,
argument|StringRef&Name
argument_list|)
specifier|const
block|;
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Binary *v
argument_list|)
block|{
return|return
name|v
operator|->
name|isCOFF
argument_list|()
return|;
block|}
expr|}
block|;
comment|// The iterator for the import directory table.
name|class
name|ImportDirectoryEntryRef
block|{
name|public
operator|:
name|ImportDirectoryEntryRef
argument_list|()
operator|:
name|OwningObject
argument_list|(
argument|nullptr
argument_list|)
block|{}
name|ImportDirectoryEntryRef
argument_list|(
argument|const import_directory_table_entry *Table
argument_list|,
argument|uint32_t I
argument_list|,
argument|const COFFObjectFile *Owner
argument_list|)
operator|:
name|ImportTable
argument_list|(
name|Table
argument_list|)
block|,
name|Index
argument_list|(
name|I
argument_list|)
block|,
name|OwningObject
argument_list|(
argument|Owner
argument_list|)
block|{}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|ImportDirectoryEntryRef
operator|&
name|Other
operator|)
specifier|const
block|;
name|void
name|moveNext
argument_list|()
block|;
name|std
operator|::
name|error_code
name|getName
argument_list|(
argument|StringRef&Result
argument_list|)
specifier|const
block|;
name|std
operator|::
name|error_code
name|getImportTableEntry
argument_list|(
argument|const import_directory_table_entry *&Result
argument_list|)
specifier|const
block|;
name|std
operator|::
name|error_code
name|getImportLookupEntry
argument_list|(
argument|const import_lookup_table_entry32 *&Result
argument_list|)
specifier|const
block|;
name|private
operator|:
specifier|const
name|import_directory_table_entry
operator|*
name|ImportTable
block|;
name|uint32_t
name|Index
block|;
specifier|const
name|COFFObjectFile
operator|*
name|OwningObject
block|; }
block|;
comment|// The iterator for the export directory table entry.
name|class
name|ExportDirectoryEntryRef
block|{
name|public
operator|:
name|ExportDirectoryEntryRef
argument_list|()
operator|:
name|OwningObject
argument_list|(
argument|nullptr
argument_list|)
block|{}
name|ExportDirectoryEntryRef
argument_list|(
argument|const export_directory_table_entry *Table
argument_list|,
argument|uint32_t I
argument_list|,
argument|const COFFObjectFile *Owner
argument_list|)
operator|:
name|ExportTable
argument_list|(
name|Table
argument_list|)
block|,
name|Index
argument_list|(
name|I
argument_list|)
block|,
name|OwningObject
argument_list|(
argument|Owner
argument_list|)
block|{}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|ExportDirectoryEntryRef
operator|&
name|Other
operator|)
specifier|const
block|;
name|void
name|moveNext
argument_list|()
block|;
name|std
operator|::
name|error_code
name|getDllName
argument_list|(
argument|StringRef&Result
argument_list|)
specifier|const
block|;
name|std
operator|::
name|error_code
name|getOrdinalBase
argument_list|(
argument|uint32_t&Result
argument_list|)
specifier|const
block|;
name|std
operator|::
name|error_code
name|getOrdinal
argument_list|(
argument|uint32_t&Result
argument_list|)
specifier|const
block|;
name|std
operator|::
name|error_code
name|getExportRVA
argument_list|(
argument|uint32_t&Result
argument_list|)
specifier|const
block|;
name|std
operator|::
name|error_code
name|getSymbolName
argument_list|(
argument|StringRef&Result
argument_list|)
specifier|const
block|;
name|private
operator|:
specifier|const
name|export_directory_table_entry
operator|*
name|ExportTable
block|;
name|uint32_t
name|Index
block|;
specifier|const
name|COFFObjectFile
operator|*
name|OwningObject
block|; }
block|; }
comment|// end namespace object
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

