begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- ELFObjectFile.h - ELF object file implementation ---------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares the ELFObjectFile template class.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_OBJECT_ELFOBJECTFILE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_OBJECT_ELFOBJECTFILE_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/Triple.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/iterator_range.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/SubtargetFeature.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/Binary.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/ELF.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/ELFTypes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/Error.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/ObjectFile.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/SymbolicFile.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ARMAttributeParser.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ARMBuildAttributes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Casting.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ELF.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Endian.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Error.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ErrorHandling.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ErrorOr.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/MemoryBuffer.h"
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_include
include|#
directive|include
file|<system_error>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|object
block|{
name|class
name|elf_symbol_iterator
decl_stmt|;
name|class
name|ELFObjectFileBase
range|:
name|public
name|ObjectFile
block|{
name|friend
name|class
name|ELFRelocationRef
block|;
name|friend
name|class
name|ELFSectionRef
block|;
name|friend
name|class
name|ELFSymbolRef
block|;
name|protected
operator|:
name|ELFObjectFileBase
argument_list|(
argument|unsigned int Type
argument_list|,
argument|MemoryBufferRef Source
argument_list|)
block|;
name|virtual
name|uint16_t
name|getEMachine
argument_list|()
specifier|const
operator|=
literal|0
block|;
name|virtual
name|uint64_t
name|getSymbolSize
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
operator|=
literal|0
block|;
name|virtual
name|uint8_t
name|getSymbolOther
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
operator|=
literal|0
block|;
name|virtual
name|uint8_t
name|getSymbolELFType
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
operator|=
literal|0
block|;
name|virtual
name|uint32_t
name|getSectionType
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
operator|=
literal|0
block|;
name|virtual
name|uint64_t
name|getSectionFlags
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
operator|=
literal|0
block|;
name|virtual
name|uint64_t
name|getSectionOffset
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
operator|=
literal|0
block|;
name|virtual
name|ErrorOr
operator|<
name|int64_t
operator|>
name|getRelocationAddend
argument_list|(
argument|DataRefImpl Rel
argument_list|)
specifier|const
operator|=
literal|0
block|;
name|public
operator|:
name|using
name|elf_symbol_iterator_range
operator|=
name|iterator_range
operator|<
name|elf_symbol_iterator
operator|>
block|;
name|virtual
name|elf_symbol_iterator_range
name|getDynamicSymbolIterators
argument_list|()
specifier|const
operator|=
literal|0
block|;
name|elf_symbol_iterator_range
name|symbols
argument_list|()
specifier|const
block|;
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Binary *v
argument_list|)
block|{
return|return
name|v
operator|->
name|isELF
argument_list|()
return|;
block|}
name|SubtargetFeatures
name|getFeatures
argument_list|()
specifier|const
name|override
block|;
name|SubtargetFeatures
name|getMIPSFeatures
argument_list|()
specifier|const
block|;
name|SubtargetFeatures
name|getARMFeatures
argument_list|()
specifier|const
block|;
name|void
name|setARMSubArch
argument_list|(
argument|Triple&TheTriple
argument_list|)
specifier|const
name|override
block|; }
decl_stmt|;
name|class
name|ELFSectionRef
range|:
name|public
name|SectionRef
block|{
name|public
operator|:
name|ELFSectionRef
argument_list|(
specifier|const
name|SectionRef
operator|&
name|B
argument_list|)
operator|:
name|SectionRef
argument_list|(
argument|B
argument_list|)
block|{
name|assert
argument_list|(
name|isa
operator|<
name|ELFObjectFileBase
operator|>
operator|(
name|SectionRef
operator|::
name|getObject
argument_list|()
operator|)
argument_list|)
block|;   }
specifier|const
name|ELFObjectFileBase
operator|*
name|getObject
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|ELFObjectFileBase
operator|>
operator|(
name|SectionRef
operator|::
name|getObject
argument_list|()
operator|)
return|;
block|}
name|uint32_t
name|getType
argument_list|()
specifier|const
block|{
return|return
name|getObject
argument_list|()
operator|->
name|getSectionType
argument_list|(
name|getRawDataRefImpl
argument_list|()
argument_list|)
return|;
block|}
name|uint64_t
name|getFlags
argument_list|()
specifier|const
block|{
return|return
name|getObject
argument_list|()
operator|->
name|getSectionFlags
argument_list|(
name|getRawDataRefImpl
argument_list|()
argument_list|)
return|;
block|}
name|uint64_t
name|getOffset
argument_list|()
specifier|const
block|{
return|return
name|getObject
argument_list|()
operator|->
name|getSectionOffset
argument_list|(
name|getRawDataRefImpl
argument_list|()
argument_list|)
return|;
block|}
expr|}
block|;
name|class
name|elf_section_iterator
operator|:
name|public
name|section_iterator
block|{
name|public
operator|:
name|elf_section_iterator
argument_list|(
specifier|const
name|section_iterator
operator|&
name|B
argument_list|)
operator|:
name|section_iterator
argument_list|(
argument|B
argument_list|)
block|{
name|assert
argument_list|(
name|isa
operator|<
name|ELFObjectFileBase
operator|>
operator|(
name|B
operator|->
name|getObject
argument_list|()
operator|)
argument_list|)
block|;   }
specifier|const
name|ELFSectionRef
operator|*
name|operator
operator|->
expr|(
block|)
specifier|const
block|{
return|return
name|static_cast
operator|<
specifier|const
name|ELFSectionRef
operator|*
operator|>
operator|(
name|section_iterator
operator|::
name|operator
operator|->
expr|(
operator|)
block|)
block|;   }
specifier|const
name|ELFSectionRef
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|static_cast
operator|<
specifier|const
name|ELFSectionRef
operator|&
operator|>
operator|(
name|section_iterator
operator|::
name|operator
operator|*
operator|(
operator|)
operator|)
return|;
block|}
block|}
empty_stmt|;
name|class
name|ELFSymbolRef
range|:
name|public
name|SymbolRef
block|{
name|public
operator|:
name|ELFSymbolRef
argument_list|(
specifier|const
name|SymbolRef
operator|&
name|B
argument_list|)
operator|:
name|SymbolRef
argument_list|(
argument|B
argument_list|)
block|{
name|assert
argument_list|(
name|isa
operator|<
name|ELFObjectFileBase
operator|>
operator|(
name|SymbolRef
operator|::
name|getObject
argument_list|()
operator|)
argument_list|)
block|;   }
specifier|const
name|ELFObjectFileBase
operator|*
name|getObject
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|ELFObjectFileBase
operator|>
operator|(
name|BasicSymbolRef
operator|::
name|getObject
argument_list|()
operator|)
return|;
block|}
name|uint64_t
name|getSize
argument_list|()
specifier|const
block|{
return|return
name|getObject
argument_list|()
operator|->
name|getSymbolSize
argument_list|(
name|getRawDataRefImpl
argument_list|()
argument_list|)
return|;
block|}
name|uint8_t
name|getOther
argument_list|()
specifier|const
block|{
return|return
name|getObject
argument_list|()
operator|->
name|getSymbolOther
argument_list|(
name|getRawDataRefImpl
argument_list|()
argument_list|)
return|;
block|}
name|uint8_t
name|getELFType
argument_list|()
specifier|const
block|{
return|return
name|getObject
argument_list|()
operator|->
name|getSymbolELFType
argument_list|(
name|getRawDataRefImpl
argument_list|()
argument_list|)
return|;
block|}
expr|}
block|;
name|class
name|elf_symbol_iterator
operator|:
name|public
name|symbol_iterator
block|{
name|public
operator|:
name|elf_symbol_iterator
argument_list|(
specifier|const
name|basic_symbol_iterator
operator|&
name|B
argument_list|)
operator|:
name|symbol_iterator
argument_list|(
argument|SymbolRef(B->getRawDataRefImpl(),                                   cast<ELFObjectFileBase>(B->getObject()))
argument_list|)
block|{}
specifier|const
name|ELFSymbolRef
operator|*
name|operator
operator|->
expr|(
block|)
specifier|const
block|{
return|return
name|static_cast
operator|<
specifier|const
name|ELFSymbolRef
operator|*
operator|>
operator|(
name|symbol_iterator
operator|::
name|operator
operator|->
expr|(
operator|)
block|)
block|;   }
specifier|const
name|ELFSymbolRef
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|static_cast
operator|<
specifier|const
name|ELFSymbolRef
operator|&
operator|>
operator|(
name|symbol_iterator
operator|::
name|operator
operator|*
operator|(
operator|)
operator|)
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|ELFRelocationRef
range|:
name|public
name|RelocationRef
block|{
name|public
operator|:
name|ELFRelocationRef
argument_list|(
specifier|const
name|RelocationRef
operator|&
name|B
argument_list|)
operator|:
name|RelocationRef
argument_list|(
argument|B
argument_list|)
block|{
name|assert
argument_list|(
name|isa
operator|<
name|ELFObjectFileBase
operator|>
operator|(
name|RelocationRef
operator|::
name|getObject
argument_list|()
operator|)
argument_list|)
block|;   }
specifier|const
name|ELFObjectFileBase
operator|*
name|getObject
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|ELFObjectFileBase
operator|>
operator|(
name|RelocationRef
operator|::
name|getObject
argument_list|()
operator|)
return|;
block|}
name|ErrorOr
operator|<
name|int64_t
operator|>
name|getAddend
argument_list|()
specifier|const
block|{
return|return
name|getObject
argument_list|()
operator|->
name|getRelocationAddend
argument_list|(
name|getRawDataRefImpl
argument_list|()
argument_list|)
return|;
block|}
expr|}
block|;
name|class
name|elf_relocation_iterator
operator|:
name|public
name|relocation_iterator
block|{
name|public
operator|:
name|elf_relocation_iterator
argument_list|(
specifier|const
name|relocation_iterator
operator|&
name|B
argument_list|)
operator|:
name|relocation_iterator
argument_list|(
argument|RelocationRef(             B->getRawDataRefImpl(), cast<ELFObjectFileBase>(B->getObject()))
argument_list|)
block|{}
specifier|const
name|ELFRelocationRef
operator|*
name|operator
operator|->
expr|(
block|)
specifier|const
block|{
return|return
name|static_cast
operator|<
specifier|const
name|ELFRelocationRef
operator|*
operator|>
operator|(
name|relocation_iterator
operator|::
name|operator
operator|->
expr|(
operator|)
block|)
block|;   }
specifier|const
name|ELFRelocationRef
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|static_cast
operator|<
specifier|const
name|ELFRelocationRef
operator|&
operator|>
operator|(
name|relocation_iterator
operator|::
name|operator
operator|*
operator|(
operator|)
operator|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
unit|};
specifier|inline
name|ELFObjectFileBase
operator|::
name|elf_symbol_iterator_range
name|ELFObjectFileBase
operator|::
name|symbols
argument_list|()
specifier|const
block|{
return|return
name|elf_symbol_iterator_range
argument_list|(
name|symbol_begin
argument_list|()
argument_list|,
name|symbol_end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|ELFObjectFile
operator|:
name|public
name|ELFObjectFileBase
block|{
name|uint16_t
name|getEMachine
argument_list|()
specifier|const
name|override
block|;
name|uint64_t
name|getSymbolSize
argument_list|(
argument|DataRefImpl Sym
argument_list|)
specifier|const
name|override
block|;
name|public
operator|:
name|LLVM_ELF_IMPORT_TYPES_ELFT
argument_list|(
argument|ELFT
argument_list|)
name|using
name|uintX_t
operator|=
name|typename
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|uintX_t
block|;
name|using
name|Elf_Sym
operator|=
name|typename
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Sym
block|;
name|using
name|Elf_Shdr
operator|=
name|typename
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Shdr
block|;
name|using
name|Elf_Ehdr
operator|=
name|typename
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Ehdr
block|;
name|using
name|Elf_Rel
operator|=
name|typename
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Rel
block|;
name|using
name|Elf_Rela
operator|=
name|typename
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Rela
block|;
name|using
name|Elf_Dyn
operator|=
name|typename
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Dyn
block|;
name|protected
operator|:
name|ELFFile
operator|<
name|ELFT
operator|>
name|EF
block|;
specifier|const
name|Elf_Shdr
operator|*
name|DotDynSymSec
operator|=
name|nullptr
block|;
comment|// Dynamic symbol table section.
specifier|const
name|Elf_Shdr
operator|*
name|DotSymtabSec
operator|=
name|nullptr
block|;
comment|// Symbol table section.
name|ArrayRef
operator|<
name|Elf_Word
operator|>
name|ShndxTable
block|;
name|void
name|moveSymbolNext
argument_list|(
argument|DataRefImpl&Symb
argument_list|)
specifier|const
name|override
block|;
name|Expected
operator|<
name|StringRef
operator|>
name|getSymbolName
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
name|override
block|;
name|Expected
operator|<
name|uint64_t
operator|>
name|getSymbolAddress
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
name|override
block|;
name|uint64_t
name|getSymbolValueImpl
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
name|override
block|;
name|uint32_t
name|getSymbolAlignment
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
name|override
block|;
name|uint64_t
name|getCommonSymbolSizeImpl
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
name|override
block|;
name|uint32_t
name|getSymbolFlags
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
name|override
block|;
name|uint8_t
name|getSymbolOther
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
name|override
block|;
name|uint8_t
name|getSymbolELFType
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
name|override
block|;
name|Expected
operator|<
name|SymbolRef
operator|::
name|Type
operator|>
name|getSymbolType
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
name|override
block|;
name|Expected
operator|<
name|section_iterator
operator|>
name|getSymbolSection
argument_list|(
argument|const Elf_Sym *Symb
argument_list|,
argument|const Elf_Shdr *SymTab
argument_list|)
specifier|const
block|;
name|Expected
operator|<
name|section_iterator
operator|>
name|getSymbolSection
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
name|override
block|;
name|void
name|moveSectionNext
argument_list|(
argument|DataRefImpl&Sec
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|getSectionName
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|StringRef&Res
argument_list|)
specifier|const
name|override
block|;
name|uint64_t
name|getSectionAddress
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
name|override
block|;
name|uint64_t
name|getSectionSize
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|getSectionContents
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|StringRef&Res
argument_list|)
specifier|const
name|override
block|;
name|uint64_t
name|getSectionAlignment
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
name|override
block|;
name|bool
name|isSectionCompressed
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
name|override
block|;
name|bool
name|isSectionText
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
name|override
block|;
name|bool
name|isSectionData
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
name|override
block|;
name|bool
name|isSectionBSS
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
name|override
block|;
name|bool
name|isSectionVirtual
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
name|override
block|;
name|relocation_iterator
name|section_rel_begin
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
name|override
block|;
name|relocation_iterator
name|section_rel_end
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
name|override
block|;
name|section_iterator
name|getRelocatedSection
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
name|override
block|;
name|void
name|moveRelocationNext
argument_list|(
argument|DataRefImpl&Rel
argument_list|)
specifier|const
name|override
block|;
name|uint64_t
name|getRelocationOffset
argument_list|(
argument|DataRefImpl Rel
argument_list|)
specifier|const
name|override
block|;
name|symbol_iterator
name|getRelocationSymbol
argument_list|(
argument|DataRefImpl Rel
argument_list|)
specifier|const
name|override
block|;
name|uint64_t
name|getRelocationType
argument_list|(
argument|DataRefImpl Rel
argument_list|)
specifier|const
name|override
block|;
name|void
name|getRelocationTypeName
argument_list|(
argument|DataRefImpl Rel
argument_list|,
argument|SmallVectorImpl<char>&Result
argument_list|)
specifier|const
name|override
block|;
name|uint32_t
name|getSectionType
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
name|override
block|;
name|uint64_t
name|getSectionFlags
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
name|override
block|;
name|uint64_t
name|getSectionOffset
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
name|override
block|;
name|StringRef
name|getRelocationTypeName
argument_list|(
argument|uint32_t Type
argument_list|)
specifier|const
block|;
comment|/// \brief Get the relocation section that contains \a Rel.
specifier|const
name|Elf_Shdr
operator|*
name|getRelSection
argument_list|(
argument|DataRefImpl Rel
argument_list|)
specifier|const
block|{
name|auto
name|RelSecOrErr
operator|=
name|EF
operator|.
name|getSection
argument_list|(
name|Rel
operator|.
name|d
operator|.
name|a
argument_list|)
block|;
if|if
condition|(
operator|!
name|RelSecOrErr
condition|)
name|report_fatal_error
argument_list|(
name|errorToErrorCode
argument_list|(
name|RelSecOrErr
operator|.
name|takeError
argument_list|()
argument_list|)
operator|.
name|message
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|*
name|RelSecOrErr
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|DataRefImpl
name|toDRI
argument_list|(
specifier|const
name|Elf_Shdr
operator|*
name|SymTable
argument_list|,
name|unsigned
name|SymbolNum
argument_list|)
decl|const
block|{
name|DataRefImpl
name|DRI
decl_stmt|;
if|if
condition|(
operator|!
name|SymTable
condition|)
block|{
name|DRI
operator|.
name|d
operator|.
name|a
operator|=
literal|0
expr_stmt|;
name|DRI
operator|.
name|d
operator|.
name|b
operator|=
literal|0
expr_stmt|;
return|return
name|DRI
return|;
block|}
name|assert
argument_list|(
name|SymTable
operator|->
name|sh_type
operator|==
name|ELF
operator|::
name|SHT_SYMTAB
operator|||
name|SymTable
operator|->
name|sh_type
operator|==
name|ELF
operator|::
name|SHT_DYNSYM
argument_list|)
expr_stmt|;
name|auto
name|SectionsOrErr
init|=
name|EF
operator|.
name|sections
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|SectionsOrErr
condition|)
block|{
name|DRI
operator|.
name|d
operator|.
name|a
operator|=
literal|0
expr_stmt|;
name|DRI
operator|.
name|d
operator|.
name|b
operator|=
literal|0
expr_stmt|;
return|return
name|DRI
return|;
block|}
name|uintptr_t
name|SHT
init|=
name|reinterpret_cast
operator|<
name|uintptr_t
operator|>
operator|(
operator|(
operator|*
name|SectionsOrErr
operator|)
operator|.
name|begin
argument_list|()
operator|)
decl_stmt|;
name|unsigned
name|SymTableIndex
init|=
operator|(
name|reinterpret_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|SymTable
operator|)
operator|-
name|SHT
operator|)
operator|/
sizeof|sizeof
argument_list|(
name|Elf_Shdr
argument_list|)
decl_stmt|;
name|DRI
operator|.
name|d
operator|.
name|a
operator|=
name|SymTableIndex
expr_stmt|;
name|DRI
operator|.
name|d
operator|.
name|b
operator|=
name|SymbolNum
expr_stmt|;
return|return
name|DRI
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|const
name|Elf_Shdr
modifier|*
name|toELFShdrIter
argument_list|(
name|DataRefImpl
name|Sec
argument_list|)
decl|const
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|Elf_Shdr
operator|*
operator|>
operator|(
name|Sec
operator|.
name|p
operator|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|DataRefImpl
name|toDRI
argument_list|(
specifier|const
name|Elf_Shdr
operator|*
name|Sec
argument_list|)
decl|const
block|{
name|DataRefImpl
name|DRI
decl_stmt|;
name|DRI
operator|.
name|p
operator|=
name|reinterpret_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|Sec
operator|)
expr_stmt|;
return|return
name|DRI
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|DataRefImpl
name|toDRI
argument_list|(
specifier|const
name|Elf_Dyn
operator|*
name|Dyn
argument_list|)
decl|const
block|{
name|DataRefImpl
name|DRI
decl_stmt|;
name|DRI
operator|.
name|p
operator|=
name|reinterpret_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|Dyn
operator|)
expr_stmt|;
return|return
name|DRI
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|bool
name|isExportedToOtherDSO
argument_list|(
specifier|const
name|Elf_Sym
operator|*
name|ESym
argument_list|)
decl|const
block|{
name|unsigned
name|char
name|Binding
init|=
name|ESym
operator|->
name|getBinding
argument_list|()
decl_stmt|;
name|unsigned
name|char
name|Visibility
init|=
name|ESym
operator|->
name|getVisibility
argument_list|()
decl_stmt|;
comment|// A symbol is exported if its binding is either GLOBAL or WEAK, and its
comment|// visibility is either DEFAULT or PROTECTED. All other symbols are not
comment|// exported.
return|return
operator|(
operator|(
name|Binding
operator|==
name|ELF
operator|::
name|STB_GLOBAL
operator|||
name|Binding
operator|==
name|ELF
operator|::
name|STB_WEAK
operator|)
operator|&&
operator|(
name|Visibility
operator|==
name|ELF
operator|::
name|STV_DEFAULT
operator|||
name|Visibility
operator|==
name|ELF
operator|::
name|STV_PROTECTED
operator|)
operator|)
return|;
block|}
end_decl_stmt

begin_comment
comment|// This flag is used for classof, to distinguish ELFObjectFile from
end_comment

begin_comment
comment|// its subclass. If more subclasses will be created, this flag will
end_comment

begin_comment
comment|// have to become an enum.
end_comment

begin_decl_stmt
name|bool
name|isDyldELFObject
decl_stmt|;
end_decl_stmt

begin_label
name|public
label|:
end_label

begin_macro
name|ELFObjectFile
argument_list|(
argument|MemoryBufferRef Object
argument_list|,
argument|std::error_code&EC
argument_list|)
end_macro

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
specifier|const
name|Elf_Rel
modifier|*
name|getRel
argument_list|(
name|DataRefImpl
name|Rel
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Elf_Rela
modifier|*
name|getRela
argument_list|(
name|DataRefImpl
name|Rela
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Elf_Sym
modifier|*
name|getSymbol
argument_list|(
name|DataRefImpl
name|Sym
argument_list|)
decl|const
block|{
name|auto
name|Ret
init|=
name|EF
operator|.
name|template
name|getEntry
operator|<
name|Elf_Sym
operator|>
operator|(
name|Sym
operator|.
name|d
operator|.
name|a
expr|,
name|Sym
operator|.
name|d
operator|.
name|b
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|Ret
condition|)
name|report_fatal_error
argument_list|(
name|errorToErrorCode
argument_list|(
name|Ret
operator|.
name|takeError
argument_list|()
argument_list|)
operator|.
name|message
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|*
name|Ret
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|const
name|Elf_Shdr
modifier|*
name|getSection
argument_list|(
name|DataRefImpl
name|Sec
argument_list|)
decl|const
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|Elf_Shdr
operator|*
operator|>
operator|(
name|Sec
operator|.
name|p
operator|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|basic_symbol_iterator
name|symbol_begin
argument_list|()
specifier|const
name|override
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|basic_symbol_iterator
name|symbol_end
argument_list|()
specifier|const
name|override
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|elf_symbol_iterator
name|dynamic_symbol_begin
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|elf_symbol_iterator
name|dynamic_symbol_end
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|section_iterator
name|section_begin
argument_list|()
specifier|const
name|override
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|section_iterator
name|section_end
argument_list|()
specifier|const
name|override
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|ErrorOr
operator|<
name|int64_t
operator|>
name|getRelocationAddend
argument_list|(
argument|DataRefImpl Rel
argument_list|)
specifier|const
name|override
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|uint8_t
name|getBytesInAddress
argument_list|()
specifier|const
name|override
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|StringRef
name|getFileFormatName
argument_list|()
specifier|const
name|override
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|unsigned
name|getArch
argument_list|()
specifier|const
name|override
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|error_code
name|getPlatformFlags
argument_list|(
argument|unsigned&Result
argument_list|)
specifier|const
name|override
block|{
name|Result
operator|=
name|EF
operator|.
name|getHeader
argument_list|()
operator|->
name|e_flags
block|;
return|return
name|std
operator|::
name|error_code
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|error_code
name|getBuildAttributes
argument_list|(
argument|ARMAttributeParser&Attributes
argument_list|)
specifier|const
name|override
block|{
name|auto
name|SectionsOrErr
operator|=
name|EF
operator|.
name|sections
argument_list|()
block|;
if|if
condition|(
operator|!
name|SectionsOrErr
condition|)
return|return
name|errorToErrorCode
argument_list|(
name|SectionsOrErr
operator|.
name|takeError
argument_list|()
argument_list|)
return|;
end_expr_stmt

begin_for
for|for
control|(
specifier|const
name|Elf_Shdr
modifier|&
name|Sec
range|:
operator|*
name|SectionsOrErr
control|)
block|{
if|if
condition|(
name|Sec
operator|.
name|sh_type
operator|==
name|ELF
operator|::
name|SHT_ARM_ATTRIBUTES
condition|)
block|{
name|auto
name|ErrorOrContents
init|=
name|EF
operator|.
name|getSectionContents
argument_list|(
operator|&
name|Sec
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ErrorOrContents
condition|)
return|return
name|errorToErrorCode
argument_list|(
name|ErrorOrContents
operator|.
name|takeError
argument_list|()
argument_list|)
return|;
name|auto
name|Contents
init|=
name|ErrorOrContents
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|Contents
index|[
literal|0
index|]
operator|!=
name|ARMBuildAttrs
operator|::
name|Format_Version
operator|||
name|Contents
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
return|return
name|std
operator|::
name|error_code
argument_list|()
return|;
name|Attributes
operator|.
name|Parse
argument_list|(
name|Contents
argument_list|,
name|ELFT
operator|::
name|TargetEndianness
operator|==
name|support
operator|::
name|little
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_for

begin_return
return|return
name|std
operator|::
name|error_code
argument_list|()
return|;
end_return

begin_expr_stmt
unit|}    const
name|ELFFile
operator|<
name|ELFT
operator|>
operator|*
name|getELFFile
argument_list|()
specifier|const
block|{
return|return
operator|&
name|EF
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isDyldType
argument_list|()
specifier|const
block|{
return|return
name|isDyldELFObject
return|;
block|}
end_expr_stmt

begin_function
specifier|static
specifier|inline
name|bool
name|classof
parameter_list|(
specifier|const
name|Binary
modifier|*
name|v
parameter_list|)
block|{
return|return
name|v
operator|->
name|getType
argument_list|()
operator|==
name|getELFType
argument_list|(
name|ELFT
operator|::
name|TargetEndianness
operator|==
name|support
operator|::
name|little
argument_list|,
name|ELFT
operator|::
name|Is64Bits
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|elf_symbol_iterator_range
name|getDynamicSymbolIterators
argument_list|()
specifier|const
name|override
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|bool
name|isRelocatableObject
argument_list|()
specifier|const
name|override
expr_stmt|;
end_expr_stmt

begin_decl_stmt
unit|};
name|using
name|ELF32LEObjectFile
init|=
name|ELFObjectFile
operator|<
name|ELFType
operator|<
name|support
operator|::
name|little
decl_stmt|,
name|false
decl|>>
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|using
name|ELF64LEObjectFile
init|=
name|ELFObjectFile
operator|<
name|ELFType
operator|<
name|support
operator|::
name|little
decl_stmt|,
name|true
decl|>>
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|using
name|ELF32BEObjectFile
init|=
name|ELFObjectFile
operator|<
name|ELFType
operator|<
name|support
operator|::
name|big
decl_stmt|,
name|false
decl|>>
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|using
name|ELF64BEObjectFile
init|=
name|ELFObjectFile
operator|<
name|ELFType
operator|<
name|support
operator|::
name|big
decl_stmt|,
name|true
decl|>>
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|void
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|moveSymbolNext
argument_list|(
argument|DataRefImpl&Sym
argument_list|)
specifier|const
block|{
operator|++
name|Sym
operator|.
name|d
operator|.
name|b
block|; }
name|template
operator|<
name|class
name|ELFT
operator|>
name|Expected
operator|<
name|StringRef
operator|>
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|getSymbolName
argument_list|(
argument|DataRefImpl Sym
argument_list|)
specifier|const
block|{
specifier|const
name|Elf_Sym
operator|*
name|ESym
operator|=
name|getSymbol
argument_list|(
name|Sym
argument_list|)
block|;
name|auto
name|SymTabOrErr
operator|=
name|EF
operator|.
name|getSection
argument_list|(
name|Sym
operator|.
name|d
operator|.
name|a
argument_list|)
block|;
if|if
condition|(
operator|!
name|SymTabOrErr
condition|)
return|return
name|SymTabOrErr
operator|.
name|takeError
argument_list|()
return|;
specifier|const
name|Elf_Shdr
operator|*
name|SymTableSec
operator|=
operator|*
name|SymTabOrErr
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|auto
name|StrTabOrErr
init|=
name|EF
operator|.
name|getSection
argument_list|(
name|SymTableSec
operator|->
name|sh_link
argument_list|)
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
operator|!
name|StrTabOrErr
condition|)
return|return
name|StrTabOrErr
operator|.
name|takeError
argument_list|()
return|;
end_if

begin_decl_stmt
specifier|const
name|Elf_Shdr
modifier|*
name|StringTableSec
init|=
operator|*
name|StrTabOrErr
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|auto
name|SymStrTabOrErr
init|=
name|EF
operator|.
name|getStringTable
argument_list|(
name|StringTableSec
argument_list|)
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
operator|!
name|SymStrTabOrErr
condition|)
return|return
name|SymStrTabOrErr
operator|.
name|takeError
argument_list|()
return|;
end_if

begin_return
return|return
name|ESym
operator|->
name|getName
argument_list|(
operator|*
name|SymStrTabOrErr
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|uint64_t
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|getSectionFlags
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
block|{
return|return
name|getSection
argument_list|(
name|Sec
argument_list|)
operator|->
name|sh_flags
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|uint32_t
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|getSectionType
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
block|{
return|return
name|getSection
argument_list|(
name|Sec
argument_list|)
operator|->
name|sh_type
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|uint64_t
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|getSectionOffset
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
block|{
return|return
name|getSection
argument_list|(
name|Sec
argument_list|)
operator|->
name|sh_offset
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|uint64_t
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|getSymbolValueImpl
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
block|{
specifier|const
name|Elf_Sym
operator|*
name|ESym
operator|=
name|getSymbol
argument_list|(
name|Symb
argument_list|)
block|;
name|uint64_t
name|Ret
operator|=
name|ESym
operator|->
name|st_value
block|;
if|if
condition|(
name|ESym
operator|->
name|st_shndx
operator|==
name|ELF
operator|::
name|SHN_ABS
condition|)
return|return
name|Ret
return|;
specifier|const
name|Elf_Ehdr
operator|*
name|Header
operator|=
name|EF
operator|.
name|getHeader
argument_list|()
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Clear the ARM/Thumb or microMIPS indicator flag.
end_comment

begin_if
if|if
condition|(
operator|(
name|Header
operator|->
name|e_machine
operator|==
name|ELF
operator|::
name|EM_ARM
operator|||
name|Header
operator|->
name|e_machine
operator|==
name|ELF
operator|::
name|EM_MIPS
operator|)
operator|&&
name|ESym
operator|->
name|getType
argument_list|()
operator|==
name|ELF
operator|::
name|STT_FUNC
condition|)
name|Ret
operator|&=
operator|~
literal|1
expr_stmt|;
end_if

begin_return
return|return
name|Ret
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|Expected
operator|<
name|uint64_t
operator|>
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|getSymbolAddress
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
block|{
name|uint64_t
name|Result
operator|=
name|getSymbolValue
argument_list|(
name|Symb
argument_list|)
block|;
specifier|const
name|Elf_Sym
operator|*
name|ESym
operator|=
name|getSymbol
argument_list|(
name|Symb
argument_list|)
block|;
switch|switch
condition|(
name|ESym
operator|->
name|st_shndx
condition|)
block|{
case|case
name|ELF
operator|::
name|SHN_COMMON
case|:
case|case
name|ELF
operator|::
name|SHN_UNDEF
case|:
case|case
name|ELF
operator|::
name|SHN_ABS
case|:
return|return
name|Result
return|;
block|}
specifier|const
name|Elf_Ehdr
operator|*
name|Header
operator|=
name|EF
operator|.
name|getHeader
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|auto
name|SymTabOrErr
init|=
name|EF
operator|.
name|getSection
argument_list|(
name|Symb
operator|.
name|d
operator|.
name|a
argument_list|)
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
operator|!
name|SymTabOrErr
condition|)
return|return
name|SymTabOrErr
operator|.
name|takeError
argument_list|()
return|;
end_if

begin_decl_stmt
specifier|const
name|Elf_Shdr
modifier|*
name|SymTab
init|=
operator|*
name|SymTabOrErr
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|Header
operator|->
name|e_type
operator|==
name|ELF
operator|::
name|ET_REL
condition|)
block|{
name|auto
name|SectionOrErr
init|=
name|EF
operator|.
name|getSection
argument_list|(
name|ESym
argument_list|,
name|SymTab
argument_list|,
name|ShndxTable
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|SectionOrErr
condition|)
return|return
name|SectionOrErr
operator|.
name|takeError
argument_list|()
return|;
specifier|const
name|Elf_Shdr
modifier|*
name|Section
init|=
operator|*
name|SectionOrErr
decl_stmt|;
if|if
condition|(
name|Section
condition|)
name|Result
operator|+=
name|Section
operator|->
name|sh_addr
expr_stmt|;
block|}
end_if

begin_return
return|return
name|Result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|uint32_t
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|getSymbolAlignment
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
block|{
specifier|const
name|Elf_Sym
operator|*
name|Sym
operator|=
name|getSymbol
argument_list|(
name|Symb
argument_list|)
block|;
if|if
condition|(
name|Sym
operator|->
name|st_shndx
operator|==
name|ELF
operator|::
name|SHN_COMMON
condition|)
return|return
name|Sym
operator|->
name|st_value
return|;
end_expr_stmt

begin_return
return|return
literal|0
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|uint16_t
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|getEMachine
argument_list|()
specifier|const
block|{
return|return
name|EF
operator|.
name|getHeader
argument_list|()
operator|->
name|e_machine
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|uint64_t
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|getSymbolSize
argument_list|(
argument|DataRefImpl Sym
argument_list|)
specifier|const
block|{
return|return
name|getSymbol
argument_list|(
name|Sym
argument_list|)
operator|->
name|st_size
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|uint64_t
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|getCommonSymbolSizeImpl
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
block|{
return|return
name|getSymbol
argument_list|(
name|Symb
argument_list|)
operator|->
name|st_size
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|uint8_t
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|getSymbolOther
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
block|{
return|return
name|getSymbol
argument_list|(
name|Symb
argument_list|)
operator|->
name|st_other
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|uint8_t
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|getSymbolELFType
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
block|{
return|return
name|getSymbol
argument_list|(
name|Symb
argument_list|)
operator|->
name|getType
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|Expected
operator|<
name|SymbolRef
operator|::
name|Type
operator|>
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|getSymbolType
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
block|{
specifier|const
name|Elf_Sym
operator|*
name|ESym
operator|=
name|getSymbol
argument_list|(
name|Symb
argument_list|)
block|;
switch|switch
condition|(
name|ESym
operator|->
name|getType
argument_list|()
condition|)
block|{
case|case
name|ELF
operator|::
name|STT_NOTYPE
case|:
return|return
name|SymbolRef
operator|::
name|ST_Unknown
return|;
case|case
name|ELF
operator|::
name|STT_SECTION
case|:
return|return
name|SymbolRef
operator|::
name|ST_Debug
return|;
case|case
name|ELF
operator|::
name|STT_FILE
case|:
return|return
name|SymbolRef
operator|::
name|ST_File
return|;
case|case
name|ELF
operator|::
name|STT_FUNC
case|:
return|return
name|SymbolRef
operator|::
name|ST_Function
return|;
case|case
name|ELF
operator|::
name|STT_OBJECT
case|:
case|case
name|ELF
operator|::
name|STT_COMMON
case|:
case|case
name|ELF
operator|::
name|STT_TLS
case|:
return|return
name|SymbolRef
operator|::
name|ST_Data
return|;
default|default:
return|return
name|SymbolRef
operator|::
name|ST_Other
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|uint32_t
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|getSymbolFlags
argument_list|(
argument|DataRefImpl Sym
argument_list|)
specifier|const
block|{
specifier|const
name|Elf_Sym
operator|*
name|ESym
operator|=
name|getSymbol
argument_list|(
name|Sym
argument_list|)
block|;
name|uint32_t
name|Result
operator|=
name|SymbolRef
operator|::
name|SF_None
block|;
if|if
condition|(
name|ESym
operator|->
name|getBinding
argument_list|()
operator|!=
name|ELF
operator|::
name|STB_LOCAL
condition|)
name|Result
operator||=
name|SymbolRef
operator|::
name|SF_Global
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|ESym
operator|->
name|getBinding
argument_list|()
operator|==
name|ELF
operator|::
name|STB_WEAK
condition|)
name|Result
operator||=
name|SymbolRef
operator|::
name|SF_Weak
expr_stmt|;
end_if

begin_if
if|if
condition|(
name|ESym
operator|->
name|st_shndx
operator|==
name|ELF
operator|::
name|SHN_ABS
condition|)
name|Result
operator||=
name|SymbolRef
operator|::
name|SF_Absolute
expr_stmt|;
end_if

begin_if
if|if
condition|(
name|ESym
operator|->
name|getType
argument_list|()
operator|==
name|ELF
operator|::
name|STT_FILE
operator|||
name|ESym
operator|->
name|getType
argument_list|()
operator|==
name|ELF
operator|::
name|STT_SECTION
condition|)
name|Result
operator||=
name|SymbolRef
operator|::
name|SF_FormatSpecific
expr_stmt|;
end_if

begin_decl_stmt
name|auto
name|DotSymtabSecSyms
init|=
name|EF
operator|.
name|symbols
argument_list|(
name|DotSymtabSec
argument_list|)
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|DotSymtabSecSyms
operator|&&
name|ESym
operator|==
operator|(
operator|*
name|DotSymtabSecSyms
operator|)
operator|.
name|begin
argument_list|()
condition|)
name|Result
operator||=
name|SymbolRef
operator|::
name|SF_FormatSpecific
expr_stmt|;
end_if

begin_decl_stmt
name|auto
name|DotDynSymSecSyms
init|=
name|EF
operator|.
name|symbols
argument_list|(
name|DotDynSymSec
argument_list|)
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|DotDynSymSecSyms
operator|&&
name|ESym
operator|==
operator|(
operator|*
name|DotDynSymSecSyms
operator|)
operator|.
name|begin
argument_list|()
condition|)
name|Result
operator||=
name|SymbolRef
operator|::
name|SF_FormatSpecific
expr_stmt|;
end_if

begin_if
if|if
condition|(
name|EF
operator|.
name|getHeader
argument_list|()
operator|->
name|e_machine
operator|==
name|ELF
operator|::
name|EM_ARM
condition|)
block|{
if|if
condition|(
name|Expected
operator|<
name|StringRef
operator|>
name|NameOrErr
operator|=
name|getSymbolName
argument_list|(
name|Sym
argument_list|)
condition|)
block|{
name|StringRef
name|Name
init|=
operator|*
name|NameOrErr
decl_stmt|;
if|if
condition|(
name|Name
operator|.
name|startswith
argument_list|(
literal|"$d"
argument_list|)
operator|||
name|Name
operator|.
name|startswith
argument_list|(
literal|"$t"
argument_list|)
operator|||
name|Name
operator|.
name|startswith
argument_list|(
literal|"$a"
argument_list|)
condition|)
name|Result
operator||=
name|SymbolRef
operator|::
name|SF_FormatSpecific
expr_stmt|;
block|}
else|else
block|{
comment|// TODO: Actually report errors helpfully.
name|consumeError
argument_list|(
name|NameOrErr
operator|.
name|takeError
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ESym
operator|->
name|getType
argument_list|()
operator|==
name|ELF
operator|::
name|STT_FUNC
operator|&&
operator|(
name|ESym
operator|->
name|st_value
operator|&
literal|1
operator|)
operator|==
literal|1
condition|)
name|Result
operator||=
name|SymbolRef
operator|::
name|SF_Thumb
expr_stmt|;
block|}
end_if

begin_if
if|if
condition|(
name|ESym
operator|->
name|st_shndx
operator|==
name|ELF
operator|::
name|SHN_UNDEF
condition|)
name|Result
operator||=
name|SymbolRef
operator|::
name|SF_Undefined
expr_stmt|;
end_if

begin_if
if|if
condition|(
name|ESym
operator|->
name|getType
argument_list|()
operator|==
name|ELF
operator|::
name|STT_COMMON
operator|||
name|ESym
operator|->
name|st_shndx
operator|==
name|ELF
operator|::
name|SHN_COMMON
condition|)
name|Result
operator||=
name|SymbolRef
operator|::
name|SF_Common
expr_stmt|;
end_if

begin_if
if|if
condition|(
name|isExportedToOtherDSO
argument_list|(
name|ESym
argument_list|)
condition|)
name|Result
operator||=
name|SymbolRef
operator|::
name|SF_Exported
expr_stmt|;
end_if

begin_if
if|if
condition|(
name|ESym
operator|->
name|getVisibility
argument_list|()
operator|==
name|ELF
operator|::
name|STV_HIDDEN
condition|)
name|Result
operator||=
name|SymbolRef
operator|::
name|SF_Hidden
expr_stmt|;
end_if

begin_return
return|return
name|Result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|Expected
operator|<
name|section_iterator
operator|>
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|getSymbolSection
argument_list|(
argument|const Elf_Sym *ESym
argument_list|,
argument|const Elf_Shdr *SymTab
argument_list|)
specifier|const
block|{
name|auto
name|ESecOrErr
operator|=
name|EF
operator|.
name|getSection
argument_list|(
name|ESym
argument_list|,
name|SymTab
argument_list|,
name|ShndxTable
argument_list|)
block|;
if|if
condition|(
operator|!
name|ESecOrErr
condition|)
return|return
name|ESecOrErr
operator|.
name|takeError
argument_list|()
return|;
specifier|const
name|Elf_Shdr
operator|*
name|ESec
operator|=
operator|*
name|ESecOrErr
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
operator|!
name|ESec
condition|)
return|return
name|section_end
argument_list|()
return|;
end_if

begin_decl_stmt
name|DataRefImpl
name|Sec
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|Sec
operator|.
name|p
operator|=
name|reinterpret_cast
operator|<
name|intptr_t
operator|>
operator|(
name|ESec
operator|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|section_iterator
argument_list|(
name|SectionRef
argument_list|(
name|Sec
argument_list|,
name|this
argument_list|)
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|Expected
operator|<
name|section_iterator
operator|>
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|getSymbolSection
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
block|{
specifier|const
name|Elf_Sym
operator|*
name|Sym
operator|=
name|getSymbol
argument_list|(
name|Symb
argument_list|)
block|;
name|auto
name|SymTabOrErr
operator|=
name|EF
operator|.
name|getSection
argument_list|(
name|Symb
operator|.
name|d
operator|.
name|a
argument_list|)
block|;
if|if
condition|(
operator|!
name|SymTabOrErr
condition|)
return|return
name|SymTabOrErr
operator|.
name|takeError
argument_list|()
return|;
specifier|const
name|Elf_Shdr
operator|*
name|SymTab
operator|=
operator|*
name|SymTabOrErr
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|getSymbolSection
argument_list|(
name|Sym
argument_list|,
name|SymTab
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|void
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|moveSectionNext
argument_list|(
argument|DataRefImpl&Sec
argument_list|)
specifier|const
block|{
specifier|const
name|Elf_Shdr
operator|*
name|ESec
operator|=
name|getSection
argument_list|(
name|Sec
argument_list|)
block|;
name|Sec
operator|=
name|toDRI
argument_list|(
operator|++
name|ESec
argument_list|)
block|; }
name|template
operator|<
name|class
name|ELFT
operator|>
name|std
operator|::
name|error_code
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|getSectionName
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|StringRef&Result
argument_list|)
specifier|const
block|{
name|auto
name|Name
operator|=
name|EF
operator|.
name|getSectionName
argument_list|(
operator|&
operator|*
name|getSection
argument_list|(
name|Sec
argument_list|)
argument_list|)
block|;
if|if
condition|(
operator|!
name|Name
condition|)
return|return
name|errorToErrorCode
argument_list|(
name|Name
operator|.
name|takeError
argument_list|()
argument_list|)
return|;
name|Result
operator|=
operator|*
name|Name
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|std
operator|::
name|error_code
argument_list|()
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|uint64_t
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|getSectionAddress
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
block|{
return|return
name|getSection
argument_list|(
name|Sec
argument_list|)
operator|->
name|sh_addr
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|uint64_t
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|getSectionSize
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
block|{
return|return
name|getSection
argument_list|(
name|Sec
argument_list|)
operator|->
name|sh_size
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|std
operator|::
name|error_code
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|getSectionContents
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|StringRef&Result
argument_list|)
specifier|const
block|{
specifier|const
name|Elf_Shdr
operator|*
name|EShdr
operator|=
name|getSection
argument_list|(
name|Sec
argument_list|)
block|;
name|Result
operator|=
name|StringRef
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|base
argument_list|()
operator|+
name|EShdr
operator|->
name|sh_offset
argument_list|,
name|EShdr
operator|->
name|sh_size
argument_list|)
block|;
return|return
name|std
operator|::
name|error_code
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|uint64_t
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|getSectionAlignment
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
block|{
return|return
name|getSection
argument_list|(
name|Sec
argument_list|)
operator|->
name|sh_addralign
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|bool
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|isSectionCompressed
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
block|{
return|return
name|getSection
argument_list|(
name|Sec
argument_list|)
operator|->
name|sh_flags
operator|&
name|ELF
operator|::
name|SHF_COMPRESSED
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|bool
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|isSectionText
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
block|{
return|return
name|getSection
argument_list|(
name|Sec
argument_list|)
operator|->
name|sh_flags
operator|&
name|ELF
operator|::
name|SHF_EXECINSTR
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|bool
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|isSectionData
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
block|{
specifier|const
name|Elf_Shdr
operator|*
name|EShdr
operator|=
name|getSection
argument_list|(
name|Sec
argument_list|)
block|;
return|return
name|EShdr
operator|->
name|sh_flags
operator|&
operator|(
name|ELF
operator|::
name|SHF_ALLOC
operator||
name|ELF
operator|::
name|SHF_WRITE
operator|)
operator|&&
name|EShdr
operator|->
name|sh_type
operator|==
name|ELF
operator|::
name|SHT_PROGBITS
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|bool
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|isSectionBSS
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
block|{
specifier|const
name|Elf_Shdr
operator|*
name|EShdr
operator|=
name|getSection
argument_list|(
name|Sec
argument_list|)
block|;
return|return
name|EShdr
operator|->
name|sh_flags
operator|&
operator|(
name|ELF
operator|::
name|SHF_ALLOC
operator||
name|ELF
operator|::
name|SHF_WRITE
operator|)
operator|&&
name|EShdr
operator|->
name|sh_type
operator|==
name|ELF
operator|::
name|SHT_NOBITS
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|bool
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|isSectionVirtual
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
block|{
return|return
name|getSection
argument_list|(
name|Sec
argument_list|)
operator|->
name|sh_type
operator|==
name|ELF
operator|::
name|SHT_NOBITS
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|relocation_iterator
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|section_rel_begin
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
block|{
name|DataRefImpl
name|RelData
block|;
name|auto
name|SectionsOrErr
operator|=
name|EF
operator|.
name|sections
argument_list|()
block|;
if|if
condition|(
operator|!
name|SectionsOrErr
condition|)
return|return
name|relocation_iterator
argument_list|(
name|RelocationRef
argument_list|()
argument_list|)
return|;
name|uintptr_t
name|SHT
operator|=
name|reinterpret_cast
operator|<
name|uintptr_t
operator|>
operator|(
operator|(
operator|*
name|SectionsOrErr
operator|)
operator|.
name|begin
argument_list|()
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|RelData
operator|.
name|d
operator|.
name|a
operator|=
operator|(
name|Sec
operator|.
name|p
operator|-
name|SHT
operator|)
operator|/
name|EF
operator|.
name|getHeader
argument_list|()
operator|->
name|e_shentsize
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|RelData
operator|.
name|d
operator|.
name|b
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|relocation_iterator
argument_list|(
name|RelocationRef
argument_list|(
name|RelData
argument_list|,
name|this
argument_list|)
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|relocation_iterator
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|section_rel_end
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
block|{
specifier|const
name|Elf_Shdr
operator|*
name|S
operator|=
name|reinterpret_cast
operator|<
specifier|const
name|Elf_Shdr
operator|*
operator|>
operator|(
name|Sec
operator|.
name|p
operator|)
block|;
name|relocation_iterator
name|Begin
operator|=
name|section_rel_begin
argument_list|(
name|Sec
argument_list|)
block|;
if|if
condition|(
name|S
operator|->
name|sh_type
operator|!=
name|ELF
operator|::
name|SHT_RELA
operator|&&
name|S
operator|->
name|sh_type
operator|!=
name|ELF
operator|::
name|SHT_REL
condition|)
return|return
name|Begin
return|;
name|DataRefImpl
name|RelData
operator|=
name|Begin
operator|->
name|getRawDataRefImpl
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|const
name|Elf_Shdr
modifier|*
name|RelSec
init|=
name|getRelSection
argument_list|(
name|RelData
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Error check sh_link here so that getRelocationSymbol can just use it.
end_comment

begin_decl_stmt
name|auto
name|SymSecOrErr
init|=
name|EF
operator|.
name|getSection
argument_list|(
name|RelSec
operator|->
name|sh_link
argument_list|)
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
operator|!
name|SymSecOrErr
condition|)
name|report_fatal_error
argument_list|(
name|errorToErrorCode
argument_list|(
name|SymSecOrErr
operator|.
name|takeError
argument_list|()
argument_list|)
operator|.
name|message
argument_list|()
argument_list|)
expr_stmt|;
end_if

begin_expr_stmt
name|RelData
operator|.
name|d
operator|.
name|b
operator|+=
name|S
operator|->
name|sh_size
operator|/
name|S
operator|->
name|sh_entsize
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|relocation_iterator
argument_list|(
name|RelocationRef
argument_list|(
name|RelData
argument_list|,
name|this
argument_list|)
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|section_iterator
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|getRelocatedSection
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
block|{
if|if
condition|(
name|EF
operator|.
name|getHeader
argument_list|()
operator|->
name|e_type
operator|!=
name|ELF
operator|::
name|ET_REL
condition|)
return|return
name|section_end
argument_list|()
return|;
specifier|const
name|Elf_Shdr
operator|*
name|EShdr
operator|=
name|getSection
argument_list|(
name|Sec
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|uintX_t
name|Type
init|=
name|EShdr
operator|->
name|sh_type
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|Type
operator|!=
name|ELF
operator|::
name|SHT_REL
operator|&&
name|Type
operator|!=
name|ELF
operator|::
name|SHT_RELA
condition|)
return|return
name|section_end
argument_list|()
return|;
end_if

begin_decl_stmt
name|auto
name|R
init|=
name|EF
operator|.
name|getSection
argument_list|(
name|EShdr
operator|->
name|sh_info
argument_list|)
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
operator|!
name|R
condition|)
name|report_fatal_error
argument_list|(
name|errorToErrorCode
argument_list|(
name|R
operator|.
name|takeError
argument_list|()
argument_list|)
operator|.
name|message
argument_list|()
argument_list|)
expr_stmt|;
end_if

begin_return
return|return
name|section_iterator
argument_list|(
name|SectionRef
argument_list|(
name|toDRI
argument_list|(
operator|*
name|R
argument_list|)
argument_list|,
name|this
argument_list|)
argument_list|)
return|;
end_return

begin_comment
unit|}
comment|// Relocations
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|ELFT
operator|>
name|void
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|moveRelocationNext
argument_list|(
argument|DataRefImpl&Rel
argument_list|)
specifier|const
block|{
operator|++
name|Rel
operator|.
name|d
operator|.
name|b
block|; }
name|template
operator|<
name|class
name|ELFT
operator|>
name|symbol_iterator
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|getRelocationSymbol
argument_list|(
argument|DataRefImpl Rel
argument_list|)
specifier|const
block|{
name|uint32_t
name|symbolIdx
block|;
specifier|const
name|Elf_Shdr
operator|*
name|sec
operator|=
name|getRelSection
argument_list|(
name|Rel
argument_list|)
block|;
if|if
condition|(
name|sec
operator|->
name|sh_type
operator|==
name|ELF
operator|::
name|SHT_REL
condition|)
name|symbolIdx
operator|=
name|getRel
argument_list|(
name|Rel
argument_list|)
operator|->
name|getSymbol
argument_list|(
name|EF
operator|.
name|isMips64EL
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|symbolIdx
operator|=
name|getRela
argument_list|(
name|Rel
argument_list|)
operator|->
name|getSymbol
argument_list|(
name|EF
operator|.
name|isMips64EL
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
operator|!
name|symbolIdx
condition|)
return|return
name|symbol_end
argument_list|()
return|;
end_if

begin_comment
comment|// FIXME: error check symbolIdx
end_comment

begin_decl_stmt
name|DataRefImpl
name|SymbolData
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|SymbolData
operator|.
name|d
operator|.
name|a
operator|=
name|sec
operator|->
name|sh_link
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|SymbolData
operator|.
name|d
operator|.
name|b
operator|=
name|symbolIdx
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|symbol_iterator
argument_list|(
name|SymbolRef
argument_list|(
name|SymbolData
argument_list|,
name|this
argument_list|)
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|uint64_t
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|getRelocationOffset
argument_list|(
argument|DataRefImpl Rel
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|EF
operator|.
name|getHeader
argument_list|()
operator|->
name|e_type
operator|==
name|ELF
operator|::
name|ET_REL
operator|&&
literal|"Only relocatable object files have relocation offsets"
argument_list|)
block|;
specifier|const
name|Elf_Shdr
operator|*
name|sec
operator|=
name|getRelSection
argument_list|(
name|Rel
argument_list|)
block|;
if|if
condition|(
name|sec
operator|->
name|sh_type
operator|==
name|ELF
operator|::
name|SHT_REL
condition|)
return|return
name|getRel
argument_list|(
name|Rel
argument_list|)
operator|->
name|r_offset
return|;
end_expr_stmt

begin_return
return|return
name|getRela
argument_list|(
name|Rel
argument_list|)
operator|->
name|r_offset
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|uint64_t
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|getRelocationType
argument_list|(
argument|DataRefImpl Rel
argument_list|)
specifier|const
block|{
specifier|const
name|Elf_Shdr
operator|*
name|sec
operator|=
name|getRelSection
argument_list|(
name|Rel
argument_list|)
block|;
if|if
condition|(
name|sec
operator|->
name|sh_type
operator|==
name|ELF
operator|::
name|SHT_REL
condition|)
return|return
name|getRel
argument_list|(
name|Rel
argument_list|)
operator|->
name|getType
argument_list|(
name|EF
operator|.
name|isMips64EL
argument_list|()
argument_list|)
return|;
else|else
return|return
name|getRela
argument_list|(
name|Rel
argument_list|)
operator|->
name|getType
argument_list|(
name|EF
operator|.
name|isMips64EL
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|StringRef
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|getRelocationTypeName
argument_list|(
argument|uint32_t Type
argument_list|)
specifier|const
block|{
return|return
name|getELFRelocationTypeName
argument_list|(
name|EF
operator|.
name|getHeader
argument_list|()
operator|->
name|e_machine
argument_list|,
name|Type
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|void
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|getRelocationTypeName
argument_list|(
argument|DataRefImpl Rel
argument_list|,
argument|SmallVectorImpl<char>&Result
argument_list|)
specifier|const
block|{
name|uint32_t
name|type
operator|=
name|getRelocationType
argument_list|(
name|Rel
argument_list|)
block|;
name|EF
operator|.
name|getRelocationTypeName
argument_list|(
name|type
argument_list|,
name|Result
argument_list|)
block|; }
name|template
operator|<
name|class
name|ELFT
operator|>
name|ErrorOr
operator|<
name|int64_t
operator|>
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|getRelocationAddend
argument_list|(
argument|DataRefImpl Rel
argument_list|)
specifier|const
block|{
if|if
condition|(
name|getRelSection
argument_list|(
name|Rel
argument_list|)
operator|->
name|sh_type
operator|!=
name|ELF
operator|::
name|SHT_RELA
condition|)
return|return
name|object_error
operator|::
name|parse_failed
return|;
end_expr_stmt

begin_return
return|return
operator|(
name|int64_t
operator|)
name|getRela
argument_list|(
name|Rel
argument_list|)
operator|->
name|r_addend
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
specifier|const
name|typename
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Rel
operator|*
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|getRel
argument_list|(
argument|DataRefImpl Rel
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|getRelSection
argument_list|(
name|Rel
argument_list|)
operator|->
name|sh_type
operator|==
name|ELF
operator|::
name|SHT_REL
argument_list|)
block|;
name|auto
name|Ret
operator|=
name|EF
operator|.
name|template
name|getEntry
operator|<
name|Elf_Rel
operator|>
operator|(
name|Rel
operator|.
name|d
operator|.
name|a
operator|,
name|Rel
operator|.
name|d
operator|.
name|b
operator|)
block|;
if|if
condition|(
operator|!
name|Ret
condition|)
name|report_fatal_error
argument_list|(
name|errorToErrorCode
argument_list|(
name|Ret
operator|.
name|takeError
argument_list|()
argument_list|)
operator|.
name|message
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|*
name|Ret
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
specifier|const
name|typename
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Rela
operator|*
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|getRela
argument_list|(
argument|DataRefImpl Rela
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|getRelSection
argument_list|(
name|Rela
argument_list|)
operator|->
name|sh_type
operator|==
name|ELF
operator|::
name|SHT_RELA
argument_list|)
block|;
name|auto
name|Ret
operator|=
name|EF
operator|.
name|template
name|getEntry
operator|<
name|Elf_Rela
operator|>
operator|(
name|Rela
operator|.
name|d
operator|.
name|a
operator|,
name|Rela
operator|.
name|d
operator|.
name|b
operator|)
block|;
if|if
condition|(
operator|!
name|Ret
condition|)
name|report_fatal_error
argument_list|(
name|errorToErrorCode
argument_list|(
name|Ret
operator|.
name|takeError
argument_list|()
argument_list|)
operator|.
name|message
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|*
name|Ret
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|ELFObjectFile
argument_list|(
argument|MemoryBufferRef Object
argument_list|,
argument|std::error_code&EC
argument_list|)
operator|:
name|ELFObjectFileBase
argument_list|(
name|getELFType
argument_list|(
name|ELFT
operator|::
name|TargetEndianness
operator|==
name|support
operator|::
name|little
argument_list|,
name|ELFT
operator|::
name|Is64Bits
argument_list|)
argument_list|,
name|Object
argument_list|)
operator|,
name|EF
argument_list|(
argument|Data.getBuffer()
argument_list|)
block|{
name|auto
name|SectionsOrErr
operator|=
name|EF
operator|.
name|sections
argument_list|()
block|;
if|if
condition|(
operator|!
name|SectionsOrErr
condition|)
block|{
name|EC
operator|=
name|errorToErrorCode
argument_list|(
name|SectionsOrErr
operator|.
name|takeError
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
end_expr_stmt

begin_for
for|for
control|(
specifier|const
name|Elf_Shdr
modifier|&
name|Sec
range|:
operator|*
name|SectionsOrErr
control|)
block|{
switch|switch
condition|(
name|Sec
operator|.
name|sh_type
condition|)
block|{
case|case
name|ELF
operator|::
name|SHT_DYNSYM
case|:
block|{
if|if
condition|(
name|DotDynSymSec
condition|)
block|{
comment|// More than one .dynsym!
name|EC
operator|=
name|object_error
operator|::
name|parse_failed
expr_stmt|;
return|return;
block|}
name|DotDynSymSec
operator|=
operator|&
name|Sec
expr_stmt|;
break|break;
block|}
case|case
name|ELF
operator|::
name|SHT_SYMTAB
case|:
block|{
if|if
condition|(
name|DotSymtabSec
condition|)
block|{
comment|// More than one .dynsym!
name|EC
operator|=
name|object_error
operator|::
name|parse_failed
expr_stmt|;
return|return;
block|}
name|DotSymtabSec
operator|=
operator|&
name|Sec
expr_stmt|;
break|break;
block|}
case|case
name|ELF
operator|::
name|SHT_SYMTAB_SHNDX
case|:
block|{
name|auto
name|TableOrErr
init|=
name|EF
operator|.
name|getSHNDXTable
argument_list|(
name|Sec
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|TableOrErr
condition|)
block|{
name|EC
operator|=
name|errorToErrorCode
argument_list|(
name|TableOrErr
operator|.
name|takeError
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|ShndxTable
operator|=
operator|*
name|TableOrErr
expr_stmt|;
break|break;
block|}
block|}
block|}
end_for

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|basic_symbol_iterator
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|symbol_begin
argument_list|()
specifier|const
block|{
name|DataRefImpl
name|Sym
operator|=
name|toDRI
argument_list|(
name|DotSymtabSec
argument_list|,
literal|0
argument_list|)
block|;
return|return
name|basic_symbol_iterator
argument_list|(
name|SymbolRef
argument_list|(
name|Sym
argument_list|,
name|this
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|basic_symbol_iterator
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|symbol_end
argument_list|()
specifier|const
block|{
specifier|const
name|Elf_Shdr
operator|*
name|SymTab
operator|=
name|DotSymtabSec
block|;
if|if
condition|(
operator|!
name|SymTab
condition|)
return|return
name|symbol_begin
argument_list|()
return|;
name|DataRefImpl
name|Sym
operator|=
name|toDRI
argument_list|(
name|SymTab
argument_list|,
name|SymTab
operator|->
name|sh_size
operator|/
sizeof|sizeof
argument_list|(
name|Elf_Sym
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|basic_symbol_iterator
argument_list|(
name|SymbolRef
argument_list|(
name|Sym
argument_list|,
name|this
argument_list|)
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|elf_symbol_iterator
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|dynamic_symbol_begin
argument_list|()
specifier|const
block|{
name|DataRefImpl
name|Sym
operator|=
name|toDRI
argument_list|(
name|DotDynSymSec
argument_list|,
literal|0
argument_list|)
block|;
return|return
name|symbol_iterator
argument_list|(
name|SymbolRef
argument_list|(
name|Sym
argument_list|,
name|this
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|elf_symbol_iterator
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|dynamic_symbol_end
argument_list|()
specifier|const
block|{
specifier|const
name|Elf_Shdr
operator|*
name|SymTab
operator|=
name|DotDynSymSec
block|;
if|if
condition|(
operator|!
name|SymTab
condition|)
return|return
name|dynamic_symbol_begin
argument_list|()
return|;
name|DataRefImpl
name|Sym
operator|=
name|toDRI
argument_list|(
name|SymTab
argument_list|,
name|SymTab
operator|->
name|sh_size
operator|/
sizeof|sizeof
argument_list|(
name|Elf_Sym
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|basic_symbol_iterator
argument_list|(
name|SymbolRef
argument_list|(
name|Sym
argument_list|,
name|this
argument_list|)
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|section_iterator
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|section_begin
argument_list|()
specifier|const
block|{
name|auto
name|SectionsOrErr
operator|=
name|EF
operator|.
name|sections
argument_list|()
block|;
if|if
condition|(
operator|!
name|SectionsOrErr
condition|)
return|return
name|section_iterator
argument_list|(
name|SectionRef
argument_list|()
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
name|section_iterator
argument_list|(
name|SectionRef
argument_list|(
name|toDRI
argument_list|(
operator|(
operator|*
name|SectionsOrErr
operator|)
operator|.
name|begin
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|)
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|section_iterator
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|section_end
argument_list|()
specifier|const
block|{
name|auto
name|SectionsOrErr
operator|=
name|EF
operator|.
name|sections
argument_list|()
block|;
if|if
condition|(
operator|!
name|SectionsOrErr
condition|)
return|return
name|section_iterator
argument_list|(
name|SectionRef
argument_list|()
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
name|section_iterator
argument_list|(
name|SectionRef
argument_list|(
name|toDRI
argument_list|(
operator|(
operator|*
name|SectionsOrErr
operator|)
operator|.
name|end
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|)
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|uint8_t
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|getBytesInAddress
argument_list|()
specifier|const
block|{
return|return
name|ELFT
operator|::
name|Is64Bits
operator|?
literal|8
operator|:
literal|4
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|StringRef
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|getFileFormatName
argument_list|()
specifier|const
block|{
name|bool
name|IsLittleEndian
operator|=
name|ELFT
operator|::
name|TargetEndianness
operator|==
name|support
operator|::
name|little
block|;
switch|switch
condition|(
name|EF
operator|.
name|getHeader
argument_list|()
operator|->
name|e_ident
index|[
name|ELF
operator|::
name|EI_CLASS
index|]
condition|)
block|{
case|case
name|ELF
operator|::
name|ELFCLASS32
case|:
switch|switch
condition|(
name|EF
operator|.
name|getHeader
argument_list|()
operator|->
name|e_machine
condition|)
block|{
case|case
name|ELF
operator|::
name|EM_386
case|:
return|return
literal|"ELF32-i386"
return|;
case|case
name|ELF
operator|::
name|EM_IAMCU
case|:
return|return
literal|"ELF32-iamcu"
return|;
case|case
name|ELF
operator|::
name|EM_X86_64
case|:
return|return
literal|"ELF32-x86-64"
return|;
case|case
name|ELF
operator|::
name|EM_ARM
case|:
return|return
operator|(
name|IsLittleEndian
condition|?
literal|"ELF32-arm-little"
else|:
literal|"ELF32-arm-big"
operator|)
return|;
case|case
name|ELF
operator|::
name|EM_AVR
case|:
return|return
literal|"ELF32-avr"
return|;
case|case
name|ELF
operator|::
name|EM_HEXAGON
case|:
return|return
literal|"ELF32-hexagon"
return|;
case|case
name|ELF
operator|::
name|EM_LANAI
case|:
return|return
literal|"ELF32-lanai"
return|;
case|case
name|ELF
operator|::
name|EM_MIPS
case|:
return|return
literal|"ELF32-mips"
return|;
case|case
name|ELF
operator|::
name|EM_PPC
case|:
return|return
literal|"ELF32-ppc"
return|;
case|case
name|ELF
operator|::
name|EM_RISCV
case|:
return|return
literal|"ELF32-riscv"
return|;
case|case
name|ELF
operator|::
name|EM_SPARC
case|:
case|case
name|ELF
operator|::
name|EM_SPARC32PLUS
case|:
return|return
literal|"ELF32-sparc"
return|;
case|case
name|ELF
operator|::
name|EM_WEBASSEMBLY
case|:
return|return
literal|"ELF32-wasm"
return|;
case|case
name|ELF
operator|::
name|EM_AMDGPU
case|:
return|return
literal|"ELF32-amdgpu"
return|;
default|default:
return|return
literal|"ELF32-unknown"
return|;
block|}
end_expr_stmt

begin_case
case|case
name|ELF
operator|::
name|ELFCLASS64
case|:
end_case

begin_switch
switch|switch
condition|(
name|EF
operator|.
name|getHeader
argument_list|()
operator|->
name|e_machine
condition|)
block|{
case|case
name|ELF
operator|::
name|EM_386
case|:
return|return
literal|"ELF64-i386"
return|;
case|case
name|ELF
operator|::
name|EM_X86_64
case|:
return|return
literal|"ELF64-x86-64"
return|;
case|case
name|ELF
operator|::
name|EM_AARCH64
case|:
return|return
operator|(
name|IsLittleEndian
condition|?
literal|"ELF64-aarch64-little"
else|:
literal|"ELF64-aarch64-big"
operator|)
return|;
case|case
name|ELF
operator|::
name|EM_PPC64
case|:
return|return
literal|"ELF64-ppc64"
return|;
case|case
name|ELF
operator|::
name|EM_RISCV
case|:
return|return
literal|"ELF64-riscv"
return|;
case|case
name|ELF
operator|::
name|EM_S390
case|:
return|return
literal|"ELF64-s390"
return|;
case|case
name|ELF
operator|::
name|EM_SPARCV9
case|:
return|return
literal|"ELF64-sparc"
return|;
case|case
name|ELF
operator|::
name|EM_MIPS
case|:
return|return
literal|"ELF64-mips"
return|;
case|case
name|ELF
operator|::
name|EM_WEBASSEMBLY
case|:
return|return
literal|"ELF64-wasm"
return|;
case|case
name|ELF
operator|::
name|EM_AMDGPU
case|:
return|return
operator|(
name|EF
operator|.
name|getHeader
argument_list|()
operator|->
name|e_ident
index|[
name|ELF
operator|::
name|EI_OSABI
index|]
operator|==
name|ELF
operator|::
name|ELFOSABI_AMDGPU_HSA
operator|&&
name|IsLittleEndian
operator|)
condition|?
literal|"ELF64-amdgpu-hsacobj"
else|:
literal|"ELF64-amdgpu"
return|;
case|case
name|ELF
operator|::
name|EM_BPF
case|:
return|return
literal|"ELF64-BPF"
return|;
default|default:
return|return
literal|"ELF64-unknown"
return|;
block|}
end_switch

begin_default
default|default:
end_default

begin_comment
comment|// FIXME: Proper error handling.
end_comment

begin_expr_stmt
name|report_fatal_error
argument_list|(
literal|"Invalid ELFCLASS!"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|} }
name|template
operator|<
name|class
name|ELFT
operator|>
name|unsigned
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|getArch
argument_list|()
specifier|const
block|{
name|bool
name|IsLittleEndian
operator|=
name|ELFT
operator|::
name|TargetEndianness
operator|==
name|support
operator|::
name|little
block|;
switch|switch
condition|(
name|EF
operator|.
name|getHeader
argument_list|()
operator|->
name|e_machine
condition|)
block|{
case|case
name|ELF
operator|::
name|EM_386
case|:
case|case
name|ELF
operator|::
name|EM_IAMCU
case|:
return|return
name|Triple
operator|::
name|x86
return|;
case|case
name|ELF
operator|::
name|EM_X86_64
case|:
return|return
name|Triple
operator|::
name|x86_64
return|;
case|case
name|ELF
operator|::
name|EM_AARCH64
case|:
return|return
name|IsLittleEndian
condition|?
name|Triple
operator|::
name|aarch64
else|:
name|Triple
operator|::
name|aarch64_be
return|;
case|case
name|ELF
operator|::
name|EM_ARM
case|:
return|return
name|Triple
operator|::
name|arm
return|;
case|case
name|ELF
operator|::
name|EM_AVR
case|:
return|return
name|Triple
operator|::
name|avr
return|;
case|case
name|ELF
operator|::
name|EM_HEXAGON
case|:
return|return
name|Triple
operator|::
name|hexagon
return|;
case|case
name|ELF
operator|::
name|EM_LANAI
case|:
return|return
name|Triple
operator|::
name|lanai
return|;
case|case
name|ELF
operator|::
name|EM_MIPS
case|:
switch|switch
condition|(
name|EF
operator|.
name|getHeader
argument_list|()
operator|->
name|e_ident
index|[
name|ELF
operator|::
name|EI_CLASS
index|]
condition|)
block|{
case|case
name|ELF
operator|::
name|ELFCLASS32
case|:
return|return
name|IsLittleEndian
condition|?
name|Triple
operator|::
name|mipsel
else|:
name|Triple
operator|::
name|mips
return|;
case|case
name|ELF
operator|::
name|ELFCLASS64
case|:
return|return
name|IsLittleEndian
condition|?
name|Triple
operator|::
name|mips64el
else|:
name|Triple
operator|::
name|mips64
return|;
default|default:
name|report_fatal_error
argument_list|(
literal|"Invalid ELFCLASS!"
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_case
case|case
name|ELF
operator|::
name|EM_PPC
case|:
end_case

begin_return
return|return
name|Triple
operator|::
name|ppc
return|;
end_return

begin_case
case|case
name|ELF
operator|::
name|EM_PPC64
case|:
end_case

begin_return
return|return
name|IsLittleEndian
condition|?
name|Triple
operator|::
name|ppc64le
else|:
name|Triple
operator|::
name|ppc64
return|;
end_return

begin_case
case|case
name|ELF
operator|::
name|EM_RISCV
case|:
end_case

begin_switch
switch|switch
condition|(
name|EF
operator|.
name|getHeader
argument_list|()
operator|->
name|e_ident
index|[
name|ELF
operator|::
name|EI_CLASS
index|]
condition|)
block|{
case|case
name|ELF
operator|::
name|ELFCLASS32
case|:
return|return
name|Triple
operator|::
name|riscv32
return|;
case|case
name|ELF
operator|::
name|ELFCLASS64
case|:
return|return
name|Triple
operator|::
name|riscv64
return|;
default|default:
name|report_fatal_error
argument_list|(
literal|"Invalid ELFCLASS!"
argument_list|)
expr_stmt|;
block|}
end_switch

begin_case
case|case
name|ELF
operator|::
name|EM_S390
case|:
end_case

begin_return
return|return
name|Triple
operator|::
name|systemz
return|;
end_return

begin_case
case|case
name|ELF
operator|::
name|EM_SPARC
case|:
end_case

begin_case
case|case
name|ELF
operator|::
name|EM_SPARC32PLUS
case|:
end_case

begin_return
return|return
name|IsLittleEndian
condition|?
name|Triple
operator|::
name|sparcel
else|:
name|Triple
operator|::
name|sparc
return|;
end_return

begin_case
case|case
name|ELF
operator|::
name|EM_SPARCV9
case|:
end_case

begin_return
return|return
name|Triple
operator|::
name|sparcv9
return|;
end_return

begin_case
case|case
name|ELF
operator|::
name|EM_WEBASSEMBLY
case|:
end_case

begin_switch
switch|switch
condition|(
name|EF
operator|.
name|getHeader
argument_list|()
operator|->
name|e_ident
index|[
name|ELF
operator|::
name|EI_CLASS
index|]
condition|)
block|{
case|case
name|ELF
operator|::
name|ELFCLASS32
case|:
return|return
name|Triple
operator|::
name|wasm32
return|;
case|case
name|ELF
operator|::
name|ELFCLASS64
case|:
return|return
name|Triple
operator|::
name|wasm64
return|;
default|default:
return|return
name|Triple
operator|::
name|UnknownArch
return|;
block|}
end_switch

begin_case
case|case
name|ELF
operator|::
name|EM_AMDGPU
case|:
end_case

begin_return
return|return
operator|(
name|EF
operator|.
name|getHeader
argument_list|()
operator|->
name|e_ident
index|[
name|ELF
operator|::
name|EI_CLASS
index|]
operator|==
name|ELF
operator|::
name|ELFCLASS64
operator|&&
name|EF
operator|.
name|getHeader
argument_list|()
operator|->
name|e_ident
index|[
name|ELF
operator|::
name|EI_OSABI
index|]
operator|==
name|ELF
operator|::
name|ELFOSABI_AMDGPU_HSA
operator|&&
name|IsLittleEndian
operator|)
condition|?
name|Triple
operator|::
name|amdgcn
else|:
name|Triple
operator|::
name|UnknownArch
return|;
end_return

begin_case
case|case
name|ELF
operator|::
name|EM_BPF
case|:
end_case

begin_return
return|return
name|IsLittleEndian
condition|?
name|Triple
operator|::
name|bpfel
else|:
name|Triple
operator|::
name|bpfeb
return|;
end_return

begin_default
default|default:
end_default

begin_return
return|return
name|Triple
operator|::
name|UnknownArch
return|;
end_return

begin_expr_stmt
unit|} }
name|template
operator|<
name|class
name|ELFT
operator|>
name|ELFObjectFileBase
operator|::
name|elf_symbol_iterator_range
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|getDynamicSymbolIterators
argument_list|()
specifier|const
block|{
return|return
name|make_range
argument_list|(
name|dynamic_symbol_begin
argument_list|()
argument_list|,
name|dynamic_symbol_end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|bool
name|ELFObjectFile
operator|<
name|ELFT
operator|>
operator|::
name|isRelocatableObject
argument_list|()
specifier|const
block|{
return|return
name|EF
operator|.
name|getHeader
argument_list|()
operator|->
name|e_type
operator|==
name|ELF
operator|::
name|ET_REL
return|;
block|}
end_expr_stmt

begin_comment
unit|}
comment|// end namespace object
end_comment

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_OBJECT_ELFOBJECTFILE_H
end_comment

end_unit

