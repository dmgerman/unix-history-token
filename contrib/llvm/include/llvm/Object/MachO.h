begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- MachO.h - MachO object file implementation ---------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares the MachOObjectFile class, which implement the ObjectFile
end_comment

begin_comment
comment|// interface for MachO files.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_OBJECT_MACHO_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_OBJECT_MACHO_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/iterator_range.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallString.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringExtras.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/Triple.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/SubtargetFeature.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/Binary.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/ObjectFile.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/SymbolicFile.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Error.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Format.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/MachO.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/MemoryBuffer.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/raw_ostream.h"
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_include
include|#
directive|include
file|<memory>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<system_error>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|object
block|{
comment|/// DiceRef - This is a value type class that represents a single
comment|/// data in code entry in the table in a Mach-O object file.
name|class
name|DiceRef
block|{
name|DataRefImpl
name|DicePimpl
decl_stmt|;
specifier|const
name|ObjectFile
modifier|*
name|OwningObject
init|=
name|nullptr
decl_stmt|;
name|public
label|:
name|DiceRef
argument_list|()
operator|=
expr|default
expr_stmt|;
name|DiceRef
argument_list|(
argument|DataRefImpl DiceP
argument_list|,
argument|const ObjectFile *Owner
argument_list|)
empty_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|DiceRef
operator|&
name|Other
operator|)
specifier|const
expr_stmt|;
name|bool
name|operator
operator|<
operator|(
specifier|const
name|DiceRef
operator|&
name|Other
operator|)
specifier|const
expr_stmt|;
name|void
name|moveNext
parameter_list|()
function_decl|;
name|std
operator|::
name|error_code
name|getOffset
argument_list|(
argument|uint32_t&Result
argument_list|)
specifier|const
expr_stmt|;
name|std
operator|::
name|error_code
name|getLength
argument_list|(
argument|uint16_t&Result
argument_list|)
specifier|const
expr_stmt|;
name|std
operator|::
name|error_code
name|getKind
argument_list|(
argument|uint16_t&Result
argument_list|)
specifier|const
expr_stmt|;
name|DataRefImpl
name|getRawDataRefImpl
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|ObjectFile
operator|*
name|getObjectFile
argument_list|()
specifier|const
expr_stmt|;
block|}
empty_stmt|;
name|using
name|dice_iterator
init|=
name|content_iterator
operator|<
name|DiceRef
operator|>
decl_stmt|;
comment|/// ExportEntry encapsulates the current-state-of-the-walk used when doing a
comment|/// non-recursive walk of the trie data structure.  This allows you to iterate
comment|/// across all exported symbols using:
comment|///      for (const llvm::object::ExportEntry&AnExport : Obj->exports()) {
comment|///      }
name|class
name|ExportEntry
block|{
name|public
label|:
name|ExportEntry
argument_list|(
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|Trie
argument_list|)
expr_stmt|;
name|StringRef
name|name
argument_list|()
specifier|const
expr_stmt|;
name|uint64_t
name|flags
argument_list|()
specifier|const
expr_stmt|;
name|uint64_t
name|address
argument_list|()
specifier|const
expr_stmt|;
name|uint64_t
name|other
argument_list|()
specifier|const
expr_stmt|;
name|StringRef
name|otherName
argument_list|()
specifier|const
expr_stmt|;
name|uint32_t
name|nodeOffset
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|ExportEntry
operator|&
operator|)
specifier|const
expr_stmt|;
name|void
name|moveNext
parameter_list|()
function_decl|;
name|private
label|:
name|friend
name|class
name|MachOObjectFile
decl_stmt|;
name|void
name|moveToFirst
parameter_list|()
function_decl|;
name|void
name|moveToEnd
parameter_list|()
function_decl|;
name|uint64_t
name|readULEB128
parameter_list|(
specifier|const
name|uint8_t
modifier|*
modifier|&
name|p
parameter_list|)
function_decl|;
name|void
name|pushDownUntilBottom
parameter_list|()
function_decl|;
name|void
name|pushNode
parameter_list|(
name|uint64_t
name|Offset
parameter_list|)
function_decl|;
comment|// Represents a node in the mach-o exports trie.
struct|struct
name|NodeState
block|{
name|NodeState
argument_list|(
specifier|const
name|uint8_t
operator|*
name|Ptr
argument_list|)
expr_stmt|;
specifier|const
name|uint8_t
modifier|*
name|Start
decl_stmt|;
specifier|const
name|uint8_t
modifier|*
name|Current
decl_stmt|;
name|uint64_t
name|Flags
init|=
literal|0
decl_stmt|;
name|uint64_t
name|Address
init|=
literal|0
decl_stmt|;
name|uint64_t
name|Other
init|=
literal|0
decl_stmt|;
specifier|const
name|char
modifier|*
name|ImportName
init|=
name|nullptr
decl_stmt|;
name|unsigned
name|ChildCount
init|=
literal|0
decl_stmt|;
name|unsigned
name|NextChildIndex
init|=
literal|0
decl_stmt|;
name|unsigned
name|ParentStringLength
init|=
literal|0
decl_stmt|;
name|bool
name|IsExportNode
init|=
name|false
decl_stmt|;
block|}
struct|;
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|Trie
expr_stmt|;
name|SmallString
operator|<
literal|256
operator|>
name|CumulativeString
expr_stmt|;
name|SmallVector
operator|<
name|NodeState
operator|,
literal|16
operator|>
name|Stack
expr_stmt|;
name|bool
name|Malformed
init|=
name|false
decl_stmt|;
name|bool
name|Done
init|=
name|false
decl_stmt|;
block|}
empty_stmt|;
name|using
name|export_iterator
init|=
name|content_iterator
operator|<
name|ExportEntry
operator|>
decl_stmt|;
comment|// Segment info so SegIndex/SegOffset pairs in a Mach-O Bind or Rebase entry
comment|// can be checked and translated.  Only the SegIndex/SegOffset pairs from
comment|// checked entries are to be used with the segmentName(), sectionName() and
comment|// address() methods below.
name|class
name|BindRebaseSegInfo
block|{
name|public
label|:
name|BindRebaseSegInfo
argument_list|(
specifier|const
name|MachOObjectFile
operator|*
name|Obj
argument_list|)
expr_stmt|;
comment|// Used to check a Mach-O Bind or Rebase entry for errors when iterating.
specifier|const
name|char
modifier|*
name|checkSegAndOffset
parameter_list|(
name|int32_t
name|SegIndex
parameter_list|,
name|uint64_t
name|SegOffset
parameter_list|,
name|bool
name|endInvalid
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|checkCountAndSkip
parameter_list|(
name|uint32_t
name|Count
parameter_list|,
name|uint32_t
name|Skip
parameter_list|,
name|uint8_t
name|PointerSize
parameter_list|,
name|int32_t
name|SegIndex
parameter_list|,
name|uint64_t
name|SegOffset
parameter_list|)
function_decl|;
comment|// Used with valid SegIndex/SegOffset values from checked entries.
name|StringRef
name|segmentName
parameter_list|(
name|int32_t
name|SegIndex
parameter_list|)
function_decl|;
name|StringRef
name|sectionName
parameter_list|(
name|int32_t
name|SegIndex
parameter_list|,
name|uint64_t
name|SegOffset
parameter_list|)
function_decl|;
name|uint64_t
name|address
parameter_list|(
name|uint32_t
name|SegIndex
parameter_list|,
name|uint64_t
name|SegOffset
parameter_list|)
function_decl|;
name|private
label|:
struct|struct
name|SectionInfo
block|{
name|uint64_t
name|Address
decl_stmt|;
name|uint64_t
name|Size
decl_stmt|;
name|StringRef
name|SectionName
decl_stmt|;
name|StringRef
name|SegmentName
decl_stmt|;
name|uint64_t
name|OffsetInSegment
decl_stmt|;
name|uint64_t
name|SegmentStartAddress
decl_stmt|;
name|int32_t
name|SegmentIndex
decl_stmt|;
block|}
struct|;
specifier|const
name|SectionInfo
modifier|&
name|findSection
parameter_list|(
name|int32_t
name|SegIndex
parameter_list|,
name|uint64_t
name|SegOffset
parameter_list|)
function_decl|;
name|SmallVector
operator|<
name|SectionInfo
operator|,
literal|32
operator|>
name|Sections
expr_stmt|;
name|int32_t
name|MaxSegIndex
decl_stmt|;
block|}
empty_stmt|;
comment|/// MachORebaseEntry encapsulates the current state in the decompression of
comment|/// rebasing opcodes. This allows you to iterate through the compressed table of
comment|/// rebasing using:
comment|///    Error Err;
comment|///    for (const llvm::object::MachORebaseEntry&Entry : Obj->rebaseTable(&Err)) {
comment|///    }
comment|///    if (Err) { report error ...
name|class
name|MachORebaseEntry
block|{
name|public
label|:
name|MachORebaseEntry
argument_list|(
argument|Error *Err
argument_list|,
argument|const MachOObjectFile *O
argument_list|,
argument|ArrayRef<uint8_t> opcodes
argument_list|,
argument|bool is64Bit
argument_list|)
empty_stmt|;
name|int32_t
name|segmentIndex
argument_list|()
specifier|const
expr_stmt|;
name|uint64_t
name|segmentOffset
argument_list|()
specifier|const
expr_stmt|;
name|StringRef
name|typeName
argument_list|()
specifier|const
expr_stmt|;
name|StringRef
name|segmentName
argument_list|()
specifier|const
expr_stmt|;
name|StringRef
name|sectionName
argument_list|()
specifier|const
expr_stmt|;
name|uint64_t
name|address
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|MachORebaseEntry
operator|&
operator|)
specifier|const
expr_stmt|;
name|void
name|moveNext
parameter_list|()
function_decl|;
name|private
label|:
name|friend
name|class
name|MachOObjectFile
decl_stmt|;
name|void
name|moveToFirst
parameter_list|()
function_decl|;
name|void
name|moveToEnd
parameter_list|()
function_decl|;
name|uint64_t
name|readULEB128
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|error
parameter_list|)
function_decl|;
name|Error
modifier|*
name|E
decl_stmt|;
specifier|const
name|MachOObjectFile
modifier|*
name|O
decl_stmt|;
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|Opcodes
expr_stmt|;
specifier|const
name|uint8_t
modifier|*
name|Ptr
decl_stmt|;
name|uint64_t
name|SegmentOffset
init|=
literal|0
decl_stmt|;
name|int32_t
name|SegmentIndex
init|=
operator|-
literal|1
decl_stmt|;
name|uint64_t
name|RemainingLoopCount
init|=
literal|0
decl_stmt|;
name|uint64_t
name|AdvanceAmount
init|=
literal|0
decl_stmt|;
name|uint8_t
name|RebaseType
init|=
literal|0
decl_stmt|;
name|uint8_t
name|PointerSize
decl_stmt|;
name|bool
name|Done
init|=
name|false
decl_stmt|;
block|}
empty_stmt|;
name|using
name|rebase_iterator
init|=
name|content_iterator
operator|<
name|MachORebaseEntry
operator|>
decl_stmt|;
comment|/// MachOBindEntry encapsulates the current state in the decompression of
comment|/// binding opcodes. This allows you to iterate through the compressed table of
comment|/// bindings using:
comment|///    Error Err;
comment|///    for (const llvm::object::MachOBindEntry&Entry : Obj->bindTable(&Err)) {
comment|///    }
comment|///    if (Err) { report error ...
name|class
name|MachOBindEntry
block|{
name|public
label|:
name|enum
name|class
name|Kind
block|{
name|Regular
operator|,
name|Lazy
operator|,
name|Weak
block|}
empty_stmt|;
name|MachOBindEntry
argument_list|(
argument|Error *Err
argument_list|,
argument|const MachOObjectFile *O
argument_list|,
argument|ArrayRef<uint8_t> Opcodes
argument_list|,
argument|bool is64Bit
argument_list|,
argument|MachOBindEntry::Kind
argument_list|)
empty_stmt|;
name|int32_t
name|segmentIndex
argument_list|()
specifier|const
expr_stmt|;
name|uint64_t
name|segmentOffset
argument_list|()
specifier|const
expr_stmt|;
name|StringRef
name|typeName
argument_list|()
specifier|const
expr_stmt|;
name|StringRef
name|symbolName
argument_list|()
specifier|const
expr_stmt|;
name|uint32_t
name|flags
argument_list|()
specifier|const
expr_stmt|;
name|int64_t
name|addend
argument_list|()
specifier|const
expr_stmt|;
name|int
name|ordinal
argument_list|()
specifier|const
expr_stmt|;
name|StringRef
name|segmentName
argument_list|()
specifier|const
expr_stmt|;
name|StringRef
name|sectionName
argument_list|()
specifier|const
expr_stmt|;
name|uint64_t
name|address
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|MachOBindEntry
operator|&
operator|)
specifier|const
expr_stmt|;
name|void
name|moveNext
parameter_list|()
function_decl|;
name|private
label|:
name|friend
name|class
name|MachOObjectFile
decl_stmt|;
name|void
name|moveToFirst
parameter_list|()
function_decl|;
name|void
name|moveToEnd
parameter_list|()
function_decl|;
name|uint64_t
name|readULEB128
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|error
parameter_list|)
function_decl|;
name|int64_t
name|readSLEB128
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|error
parameter_list|)
function_decl|;
name|Error
modifier|*
name|E
decl_stmt|;
specifier|const
name|MachOObjectFile
modifier|*
name|O
decl_stmt|;
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|Opcodes
expr_stmt|;
specifier|const
name|uint8_t
modifier|*
name|Ptr
decl_stmt|;
name|uint64_t
name|SegmentOffset
init|=
literal|0
decl_stmt|;
name|int32_t
name|SegmentIndex
init|=
operator|-
literal|1
decl_stmt|;
name|StringRef
name|SymbolName
decl_stmt|;
name|bool
name|LibraryOrdinalSet
init|=
name|false
decl_stmt|;
name|int
name|Ordinal
init|=
literal|0
decl_stmt|;
name|uint32_t
name|Flags
init|=
literal|0
decl_stmt|;
name|int64_t
name|Addend
init|=
literal|0
decl_stmt|;
name|uint64_t
name|RemainingLoopCount
init|=
literal|0
decl_stmt|;
name|uint64_t
name|AdvanceAmount
init|=
literal|0
decl_stmt|;
name|uint8_t
name|BindType
init|=
literal|0
decl_stmt|;
name|uint8_t
name|PointerSize
decl_stmt|;
name|Kind
name|TableKind
decl_stmt|;
name|bool
name|Done
init|=
name|false
decl_stmt|;
block|}
empty_stmt|;
name|using
name|bind_iterator
init|=
name|content_iterator
operator|<
name|MachOBindEntry
operator|>
decl_stmt|;
name|class
name|MachOObjectFile
range|:
name|public
name|ObjectFile
block|{
name|public
operator|:
expr|struct
name|LoadCommandInfo
block|{
specifier|const
name|char
operator|*
name|Ptr
block|;
comment|// Where in memory the load command is.
name|MachO
operator|::
name|load_command
name|C
block|;
comment|// The command itself.
block|}
block|;
name|using
name|LoadCommandList
operator|=
name|SmallVector
operator|<
name|LoadCommandInfo
block|,
literal|4
operator|>
block|;
name|using
name|load_command_iterator
operator|=
name|LoadCommandList
operator|::
name|const_iterator
block|;
specifier|static
name|Expected
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|MachOObjectFile
operator|>>
name|create
argument_list|(
argument|MemoryBufferRef Object
argument_list|,
argument|bool IsLittleEndian
argument_list|,
argument|bool Is64Bits
argument_list|,
argument|uint32_t UniversalCputype =
literal|0
argument_list|,
argument|uint32_t UniversalIndex =
literal|0
argument_list|)
block|;
name|void
name|moveSymbolNext
argument_list|(
argument|DataRefImpl&Symb
argument_list|)
specifier|const
name|override
block|;
name|uint64_t
name|getNValue
argument_list|(
argument|DataRefImpl Sym
argument_list|)
specifier|const
block|;
name|Expected
operator|<
name|StringRef
operator|>
name|getSymbolName
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
name|override
block|;
comment|// MachO specific.
name|Error
name|checkSymbolTable
argument_list|()
specifier|const
block|;
name|std
operator|::
name|error_code
name|getIndirectName
argument_list|(
argument|DataRefImpl Symb
argument_list|,
argument|StringRef&Res
argument_list|)
specifier|const
block|;
name|unsigned
name|getSectionType
argument_list|(
argument|SectionRef Sec
argument_list|)
specifier|const
block|;
name|Expected
operator|<
name|uint64_t
operator|>
name|getSymbolAddress
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
name|override
block|;
name|uint32_t
name|getSymbolAlignment
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
name|override
block|;
name|uint64_t
name|getCommonSymbolSizeImpl
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
name|override
block|;
name|Expected
operator|<
name|SymbolRef
operator|::
name|Type
operator|>
name|getSymbolType
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
name|override
block|;
name|uint32_t
name|getSymbolFlags
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
name|override
block|;
name|Expected
operator|<
name|section_iterator
operator|>
name|getSymbolSection
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
name|override
block|;
name|unsigned
name|getSymbolSectionID
argument_list|(
argument|SymbolRef Symb
argument_list|)
specifier|const
block|;
name|unsigned
name|getSectionID
argument_list|(
argument|SectionRef Sec
argument_list|)
specifier|const
block|;
name|void
name|moveSectionNext
argument_list|(
argument|DataRefImpl&Sec
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|getSectionName
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|StringRef&Res
argument_list|)
specifier|const
name|override
block|;
name|uint64_t
name|getSectionAddress
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
name|override
block|;
name|uint64_t
name|getSectionSize
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|getSectionContents
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|StringRef&Res
argument_list|)
specifier|const
name|override
block|;
name|uint64_t
name|getSectionAlignment
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
name|override
block|;
name|bool
name|isSectionCompressed
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
name|override
block|;
name|bool
name|isSectionText
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
name|override
block|;
name|bool
name|isSectionData
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
name|override
block|;
name|bool
name|isSectionBSS
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
name|override
block|;
name|bool
name|isSectionVirtual
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
name|override
block|;
name|bool
name|isSectionBitcode
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
name|override
block|;
name|relocation_iterator
name|section_rel_begin
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
name|override
block|;
name|relocation_iterator
name|section_rel_end
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
name|override
block|;
name|void
name|moveRelocationNext
argument_list|(
argument|DataRefImpl&Rel
argument_list|)
specifier|const
name|override
block|;
name|uint64_t
name|getRelocationOffset
argument_list|(
argument|DataRefImpl Rel
argument_list|)
specifier|const
name|override
block|;
name|symbol_iterator
name|getRelocationSymbol
argument_list|(
argument|DataRefImpl Rel
argument_list|)
specifier|const
name|override
block|;
name|section_iterator
name|getRelocationSection
argument_list|(
argument|DataRefImpl Rel
argument_list|)
specifier|const
block|;
name|uint64_t
name|getRelocationType
argument_list|(
argument|DataRefImpl Rel
argument_list|)
specifier|const
name|override
block|;
name|void
name|getRelocationTypeName
argument_list|(
argument|DataRefImpl Rel
argument_list|,
argument|SmallVectorImpl<char>&Result
argument_list|)
specifier|const
name|override
block|;
name|uint8_t
name|getRelocationLength
argument_list|(
argument|DataRefImpl Rel
argument_list|)
specifier|const
block|;
comment|// MachO specific.
name|std
operator|::
name|error_code
name|getLibraryShortNameByIndex
argument_list|(
argument|unsigned Index
argument_list|,
argument|StringRef&
argument_list|)
specifier|const
block|;
name|uint32_t
name|getLibraryCount
argument_list|()
specifier|const
block|;
name|section_iterator
name|getRelocationRelocatedSection
argument_list|(
argument|relocation_iterator Rel
argument_list|)
specifier|const
block|;
comment|// TODO: Would be useful to have an iterator based version
comment|// of the load command interface too.
name|basic_symbol_iterator
name|symbol_begin
argument_list|()
specifier|const
name|override
block|;
name|basic_symbol_iterator
name|symbol_end
argument_list|()
specifier|const
name|override
block|;
comment|// MachO specific.
name|basic_symbol_iterator
name|getSymbolByIndex
argument_list|(
argument|unsigned Index
argument_list|)
specifier|const
block|;
name|uint64_t
name|getSymbolIndex
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
block|;
name|section_iterator
name|section_begin
argument_list|()
specifier|const
name|override
block|;
name|section_iterator
name|section_end
argument_list|()
specifier|const
name|override
block|;
name|uint8_t
name|getBytesInAddress
argument_list|()
specifier|const
name|override
block|;
name|StringRef
name|getFileFormatName
argument_list|()
specifier|const
name|override
block|;
name|unsigned
name|getArch
argument_list|()
specifier|const
name|override
block|;
name|SubtargetFeatures
name|getFeatures
argument_list|()
specifier|const
name|override
block|{
return|return
name|SubtargetFeatures
argument_list|()
return|;
block|}
name|Triple
name|getArchTriple
argument_list|(
argument|const char **McpuDefault = nullptr
argument_list|)
specifier|const
block|;
name|relocation_iterator
name|section_rel_begin
argument_list|(
argument|unsigned Index
argument_list|)
specifier|const
block|;
name|relocation_iterator
name|section_rel_end
argument_list|(
argument|unsigned Index
argument_list|)
specifier|const
block|;
name|dice_iterator
name|begin_dices
argument_list|()
specifier|const
block|;
name|dice_iterator
name|end_dices
argument_list|()
specifier|const
block|;
name|load_command_iterator
name|begin_load_commands
argument_list|()
specifier|const
block|;
name|load_command_iterator
name|end_load_commands
argument_list|()
specifier|const
block|;
name|iterator_range
operator|<
name|load_command_iterator
operator|>
name|load_commands
argument_list|()
specifier|const
block|;
comment|/// For use iterating over all exported symbols.
name|iterator_range
operator|<
name|export_iterator
operator|>
name|exports
argument_list|()
specifier|const
block|;
comment|/// For use examining a trie not in a MachOObjectFile.
specifier|static
name|iterator_range
operator|<
name|export_iterator
operator|>
name|exports
argument_list|(
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|Trie
argument_list|)
block|;
comment|/// For use iterating over all rebase table entries.
name|iterator_range
operator|<
name|rebase_iterator
operator|>
name|rebaseTable
argument_list|(
name|Error
operator|&
name|Err
argument_list|)
block|;
comment|/// For use examining rebase opcodes in a MachOObjectFile.
specifier|static
name|iterator_range
operator|<
name|rebase_iterator
operator|>
name|rebaseTable
argument_list|(
argument|Error&Err
argument_list|,
argument|MachOObjectFile *O
argument_list|,
argument|ArrayRef<uint8_t> Opcodes
argument_list|,
argument|bool is64
argument_list|)
block|;
comment|/// For use iterating over all bind table entries.
name|iterator_range
operator|<
name|bind_iterator
operator|>
name|bindTable
argument_list|(
name|Error
operator|&
name|Err
argument_list|)
block|;
comment|/// For use iterating over all lazy bind table entries.
name|iterator_range
operator|<
name|bind_iterator
operator|>
name|lazyBindTable
argument_list|(
name|Error
operator|&
name|Err
argument_list|)
block|;
comment|/// For use iterating over all weak bind table entries.
name|iterator_range
operator|<
name|bind_iterator
operator|>
name|weakBindTable
argument_list|(
name|Error
operator|&
name|Err
argument_list|)
block|;
comment|/// For use examining bind opcodes in a MachOObjectFile.
specifier|static
name|iterator_range
operator|<
name|bind_iterator
operator|>
name|bindTable
argument_list|(
argument|Error&Err
argument_list|,
argument|MachOObjectFile *O
argument_list|,
argument|ArrayRef<uint8_t> Opcodes
argument_list|,
argument|bool is64
argument_list|,
argument|MachOBindEntry::Kind
argument_list|)
block|;
comment|/// For use with a SegIndex,SegOffset pair in MachOBindEntry::moveNext() to
comment|/// validate a MachOBindEntry.
specifier|const
name|char
operator|*
name|BindEntryCheckSegAndOffset
argument_list|(
argument|int32_t SegIndex
argument_list|,
argument|uint64_t SegOffset
argument_list|,
argument|bool endInvalid
argument_list|)
specifier|const
block|{
return|return
name|BindRebaseSectionTable
operator|->
name|checkSegAndOffset
argument_list|(
name|SegIndex
argument_list|,
name|SegOffset
argument_list|,
name|endInvalid
argument_list|)
return|;
block|}
comment|/// For use in MachOBindEntry::moveNext() to validate a MachOBindEntry for
comment|/// the BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB opcode.
specifier|const
name|char
operator|*
name|BindEntryCheckCountAndSkip
argument_list|(
argument|uint32_t Count
argument_list|,
argument|uint32_t Skip
argument_list|,
argument|uint8_t PointerSize
argument_list|,
argument|int32_t SegIndex
argument_list|,
argument|uint64_t SegOffset
argument_list|)
specifier|const
block|{
return|return
name|BindRebaseSectionTable
operator|->
name|checkCountAndSkip
argument_list|(
name|Count
argument_list|,
name|Skip
argument_list|,
name|PointerSize
argument_list|,
name|SegIndex
argument_list|,
name|SegOffset
argument_list|)
return|;
block|}
comment|/// For use with a SegIndex,SegOffset pair in MachORebaseEntry::moveNext() to
comment|/// validate a MachORebaseEntry.
specifier|const
name|char
operator|*
name|RebaseEntryCheckSegAndOffset
argument_list|(
argument|int32_t SegIndex
argument_list|,
argument|uint64_t SegOffset
argument_list|,
argument|bool endInvalid
argument_list|)
specifier|const
block|{
return|return
name|BindRebaseSectionTable
operator|->
name|checkSegAndOffset
argument_list|(
name|SegIndex
argument_list|,
name|SegOffset
argument_list|,
name|endInvalid
argument_list|)
return|;
block|}
comment|/// For use in MachORebaseEntry::moveNext() to validate a MachORebaseEntry for
comment|/// the REBASE_OPCODE_DO_*_TIMES* opcodes.
specifier|const
name|char
operator|*
name|RebaseEntryCheckCountAndSkip
argument_list|(
argument|uint32_t Count
argument_list|,
argument|uint32_t Skip
argument_list|,
argument|uint8_t PointerSize
argument_list|,
argument|int32_t SegIndex
argument_list|,
argument|uint64_t SegOffset
argument_list|)
specifier|const
block|{
return|return
name|BindRebaseSectionTable
operator|->
name|checkCountAndSkip
argument_list|(
name|Count
argument_list|,
name|Skip
argument_list|,
name|PointerSize
argument_list|,
name|SegIndex
argument_list|,
name|SegOffset
argument_list|)
return|;
block|}
comment|/// For use with the SegIndex of a checked Mach-O Bind or Rebase entry to
comment|/// get the segment name.
name|StringRef
name|BindRebaseSegmentName
argument_list|(
argument|int32_t SegIndex
argument_list|)
specifier|const
block|{
return|return
name|BindRebaseSectionTable
operator|->
name|segmentName
argument_list|(
name|SegIndex
argument_list|)
return|;
block|}
comment|/// For use with a SegIndex,SegOffset pair from a checked Mach-O Bind or
comment|/// Rebase entry to get the section name.
name|StringRef
name|BindRebaseSectionName
argument_list|(
argument|uint32_t SegIndex
argument_list|,
argument|uint64_t SegOffset
argument_list|)
specifier|const
block|{
return|return
name|BindRebaseSectionTable
operator|->
name|sectionName
argument_list|(
name|SegIndex
argument_list|,
name|SegOffset
argument_list|)
return|;
block|}
comment|/// For use with a SegIndex,SegOffset pair from a checked Mach-O Bind or
comment|/// Rebase entry to get the address.
name|uint64_t
name|BindRebaseAddress
argument_list|(
argument|uint32_t SegIndex
argument_list|,
argument|uint64_t SegOffset
argument_list|)
specifier|const
block|{
return|return
name|BindRebaseSectionTable
operator|->
name|address
argument_list|(
name|SegIndex
argument_list|,
name|SegOffset
argument_list|)
return|;
block|}
comment|// In a MachO file, sections have a segment name. This is used in the .o
comment|// files. They have a single segment, but this field specifies which segment
comment|// a section should be put in in the final object.
name|StringRef
name|getSectionFinalSegmentName
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
block|;
comment|// Names are stored as 16 bytes. These returns the raw 16 bytes without
comment|// interpreting them as a C string.
name|ArrayRef
operator|<
name|char
operator|>
name|getSectionRawName
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
block|;
name|ArrayRef
operator|<
name|char
operator|>
name|getSectionRawFinalSegmentName
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
block|;
comment|// MachO specific Info about relocations.
name|bool
name|isRelocationScattered
argument_list|(
argument|const MachO::any_relocation_info&RE
argument_list|)
specifier|const
block|;
name|unsigned
name|getPlainRelocationSymbolNum
argument_list|(
argument|const MachO::any_relocation_info&RE
argument_list|)
specifier|const
block|;
name|bool
name|getPlainRelocationExternal
argument_list|(
argument|const MachO::any_relocation_info&RE
argument_list|)
specifier|const
block|;
name|bool
name|getScatteredRelocationScattered
argument_list|(
argument|const MachO::any_relocation_info&RE
argument_list|)
specifier|const
block|;
name|uint32_t
name|getScatteredRelocationValue
argument_list|(
argument|const MachO::any_relocation_info&RE
argument_list|)
specifier|const
block|;
name|uint32_t
name|getScatteredRelocationType
argument_list|(
argument|const MachO::any_relocation_info&RE
argument_list|)
specifier|const
block|;
name|unsigned
name|getAnyRelocationAddress
argument_list|(
argument|const MachO::any_relocation_info&RE
argument_list|)
specifier|const
block|;
name|unsigned
name|getAnyRelocationPCRel
argument_list|(
argument|const MachO::any_relocation_info&RE
argument_list|)
specifier|const
block|;
name|unsigned
name|getAnyRelocationLength
argument_list|(
argument|const MachO::any_relocation_info&RE
argument_list|)
specifier|const
block|;
name|unsigned
name|getAnyRelocationType
argument_list|(
argument|const MachO::any_relocation_info&RE
argument_list|)
specifier|const
block|;
name|SectionRef
name|getAnyRelocationSection
argument_list|(
argument|const MachO::any_relocation_info&RE
argument_list|)
specifier|const
block|;
comment|// MachO specific structures.
name|MachO
operator|::
name|section
name|getSection
argument_list|(
argument|DataRefImpl DRI
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|section_64
name|getSection64
argument_list|(
argument|DataRefImpl DRI
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|section
name|getSection
argument_list|(
argument|const LoadCommandInfo&L
argument_list|,
argument|unsigned Index
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|section_64
name|getSection64
argument_list|(
argument|const LoadCommandInfo&L
argument_list|,
argument|unsigned Index
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|nlist
name|getSymbolTableEntry
argument_list|(
argument|DataRefImpl DRI
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|nlist_64
name|getSymbol64TableEntry
argument_list|(
argument|DataRefImpl DRI
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|linkedit_data_command
name|getLinkeditDataLoadCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|segment_command
name|getSegmentLoadCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|segment_command_64
name|getSegment64LoadCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|linker_option_command
name|getLinkerOptionLoadCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|version_min_command
name|getVersionMinLoadCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|note_command
name|getNoteLoadCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|build_version_command
name|getBuildVersionLoadCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|build_tool_version
name|getBuildToolVersion
argument_list|(
argument|unsigned index
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|dylib_command
name|getDylibIDLoadCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|dyld_info_command
name|getDyldInfoLoadCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|dylinker_command
name|getDylinkerCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|uuid_command
name|getUuidCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|rpath_command
name|getRpathCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|source_version_command
name|getSourceVersionCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|entry_point_command
name|getEntryPointCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|encryption_info_command
name|getEncryptionInfoCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|encryption_info_command_64
name|getEncryptionInfoCommand64
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|sub_framework_command
name|getSubFrameworkCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|sub_umbrella_command
name|getSubUmbrellaCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|sub_library_command
name|getSubLibraryCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|sub_client_command
name|getSubClientCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|routines_command
name|getRoutinesCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|routines_command_64
name|getRoutinesCommand64
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|thread_command
name|getThreadCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|any_relocation_info
name|getRelocation
argument_list|(
argument|DataRefImpl Rel
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|data_in_code_entry
name|getDice
argument_list|(
argument|DataRefImpl Rel
argument_list|)
specifier|const
block|;
specifier|const
name|MachO
operator|::
name|mach_header
operator|&
name|getHeader
argument_list|()
specifier|const
block|;
specifier|const
name|MachO
operator|::
name|mach_header_64
operator|&
name|getHeader64
argument_list|()
specifier|const
block|;
name|uint32_t
name|getIndirectSymbolTableEntry
argument_list|(
argument|const MachO::dysymtab_command&DLC
argument_list|,
argument|unsigned Index
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|data_in_code_entry
name|getDataInCodeTableEntry
argument_list|(
argument|uint32_t DataOffset
argument_list|,
argument|unsigned Index
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|symtab_command
name|getSymtabLoadCommand
argument_list|()
specifier|const
block|;
name|MachO
operator|::
name|dysymtab_command
name|getDysymtabLoadCommand
argument_list|()
specifier|const
block|;
name|MachO
operator|::
name|linkedit_data_command
name|getDataInCodeLoadCommand
argument_list|()
specifier|const
block|;
name|MachO
operator|::
name|linkedit_data_command
name|getLinkOptHintsLoadCommand
argument_list|()
specifier|const
block|;
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|getDyldInfoRebaseOpcodes
argument_list|()
specifier|const
block|;
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|getDyldInfoBindOpcodes
argument_list|()
specifier|const
block|;
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|getDyldInfoWeakBindOpcodes
argument_list|()
specifier|const
block|;
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|getDyldInfoLazyBindOpcodes
argument_list|()
specifier|const
block|;
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|getDyldInfoExportsTrie
argument_list|()
specifier|const
block|;
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|getUuid
argument_list|()
specifier|const
block|;
name|StringRef
name|getStringTableData
argument_list|()
specifier|const
block|;
name|bool
name|is64Bit
argument_list|()
specifier|const
block|;
name|void
name|ReadULEB128s
argument_list|(
argument|uint64_t Index
argument_list|,
argument|SmallVectorImpl<uint64_t>&Out
argument_list|)
specifier|const
block|;
specifier|static
name|StringRef
name|guessLibraryShortName
argument_list|(
argument|StringRef Name
argument_list|,
argument|bool&isFramework
argument_list|,
argument|StringRef&Suffix
argument_list|)
block|;
specifier|static
name|Triple
operator|::
name|ArchType
name|getArch
argument_list|(
argument|uint32_t CPUType
argument_list|)
block|;
specifier|static
name|Triple
name|getArchTriple
argument_list|(
argument|uint32_t CPUType
argument_list|,
argument|uint32_t CPUSubType
argument_list|,
argument|const char **McpuDefault = nullptr
argument_list|,
argument|const char **ArchFlag = nullptr
argument_list|)
block|;
specifier|static
name|bool
name|isValidArch
argument_list|(
argument|StringRef ArchFlag
argument_list|)
block|;
specifier|static
name|Triple
name|getHostArch
argument_list|()
block|;
name|bool
name|isRelocatableObject
argument_list|()
specifier|const
name|override
block|;
name|bool
name|hasPageZeroSegment
argument_list|()
specifier|const
block|{
return|return
name|HasPageZeroSegment
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const Binary *v
argument_list|)
block|{
return|return
name|v
operator|->
name|isMachO
argument_list|()
return|;
block|}
specifier|static
name|uint32_t
name|getVersionMinMajor
argument_list|(
argument|MachO::version_min_command&C
argument_list|,
argument|bool SDK
argument_list|)
block|{
name|uint32_t
name|VersionOrSDK
operator|=
operator|(
name|SDK
operator|)
operator|?
name|C
operator|.
name|sdk
operator|:
name|C
operator|.
name|version
block|;
return|return
operator|(
name|VersionOrSDK
operator|>>
literal|16
operator|)
operator|&
literal|0xffff
return|;
block|}
specifier|static
name|uint32_t
name|getVersionMinMinor
argument_list|(
argument|MachO::version_min_command&C
argument_list|,
argument|bool SDK
argument_list|)
block|{
name|uint32_t
name|VersionOrSDK
operator|=
operator|(
name|SDK
operator|)
condition|?
name|C
operator|.
name|sdk
else|:
name|C
operator|.
name|version
block|;
return|return
operator|(
name|VersionOrSDK
operator|>>
literal|8
operator|)
operator|&
literal|0xff
return|;
block|}
specifier|static
name|uint32_t
name|getVersionMinUpdate
argument_list|(
argument|MachO::version_min_command&C
argument_list|,
argument|bool SDK
argument_list|)
block|{
name|uint32_t
name|VersionOrSDK
operator|=
operator|(
name|SDK
operator|)
condition|?
name|C
operator|.
name|sdk
else|:
name|C
operator|.
name|version
block|;
return|return
name|VersionOrSDK
operator|&
literal|0xff
return|;
block|}
specifier|static
name|std
operator|::
name|string
name|getBuildPlatform
argument_list|(
argument|uint32_t platform
argument_list|)
block|{
switch|switch
condition|(
name|platform
condition|)
block|{
case|case
name|MachO
operator|::
name|PLATFORM_MACOS
case|:
return|return
literal|"macos"
return|;
case|case
name|MachO
operator|::
name|PLATFORM_IOS
case|:
return|return
literal|"ios"
return|;
case|case
name|MachO
operator|::
name|PLATFORM_TVOS
case|:
return|return
literal|"tvos"
return|;
case|case
name|MachO
operator|::
name|PLATFORM_WATCHOS
case|:
return|return
literal|"watchos"
return|;
case|case
name|MachO
operator|::
name|PLATFORM_BRIDGEOS
case|:
return|return
literal|"bridgeos"
return|;
default|default:
name|std
operator|::
name|string
name|ret
expr_stmt|;
name|raw_string_ostream
name|ss
parameter_list|(
name|ret
parameter_list|)
function_decl|;
name|ss
operator|<<
name|format_hex
argument_list|(
name|platform
argument_list|,
literal|8
argument_list|,
name|true
argument_list|)
expr_stmt|;
return|return
name|ss
operator|.
name|str
argument_list|()
return|;
block|}
block|}
specifier|static
name|std
operator|::
name|string
name|getBuildTool
argument_list|(
argument|uint32_t tools
argument_list|)
block|{
switch|switch
condition|(
name|tools
condition|)
block|{
case|case
name|MachO
operator|::
name|TOOL_CLANG
case|:
return|return
literal|"clang"
return|;
case|case
name|MachO
operator|::
name|TOOL_SWIFT
case|:
return|return
literal|"swift"
return|;
case|case
name|MachO
operator|::
name|TOOL_LD
case|:
return|return
literal|"ld"
return|;
default|default:
name|std
operator|::
name|string
name|ret
expr_stmt|;
name|raw_string_ostream
name|ss
parameter_list|(
name|ret
parameter_list|)
function_decl|;
name|ss
operator|<<
name|format_hex
argument_list|(
name|tools
argument_list|,
literal|8
argument_list|,
name|true
argument_list|)
expr_stmt|;
return|return
name|ss
operator|.
name|str
argument_list|()
return|;
block|}
block|}
specifier|static
name|std
operator|::
name|string
name|getVersionString
argument_list|(
argument|uint32_t version
argument_list|)
block|{
name|uint32_t
name|major
operator|=
operator|(
name|version
operator|>>
literal|16
operator|)
operator|&
literal|0xffff
block|;
name|uint32_t
name|minor
operator|=
operator|(
name|version
operator|>>
literal|8
operator|)
operator|&
literal|0xff
block|;
name|uint32_t
name|update
operator|=
name|version
operator|&
literal|0xff
block|;
name|SmallString
operator|<
literal|32
operator|>
name|Version
block|;
name|Version
operator|=
name|utostr
argument_list|(
name|major
argument_list|)
operator|+
literal|"."
operator|+
name|utostr
argument_list|(
name|minor
argument_list|)
block|;
if|if
condition|(
name|update
operator|!=
literal|0
condition|)
name|Version
operator|+=
literal|"."
operator|+
name|utostr
argument_list|(
name|update
argument_list|)
expr_stmt|;
return|return
name|Version
operator|.
name|str
argument_list|()
return|;
block|}
name|private
label|:
name|MachOObjectFile
argument_list|(
argument|MemoryBufferRef Object
argument_list|,
argument|bool IsLittleEndian
argument_list|,
argument|bool Is64Bits
argument_list|,
argument|Error&Err
argument_list|,
argument|uint32_t UniversalCputype =
literal|0
argument_list|,
argument|uint32_t UniversalIndex =
literal|0
argument_list|)
empty_stmt|;
name|uint64_t
name|getSymbolValueImpl
argument_list|(
name|DataRefImpl
name|Symb
argument_list|)
decl|const
name|override
decl_stmt|;
union|union
block|{
name|MachO
operator|::
name|mach_header_64
name|Header64
expr_stmt|;
name|MachO
operator|::
name|mach_header
name|Header
expr_stmt|;
block|}
union|;
name|using
name|SectionList
init|=
name|SmallVector
operator|<
specifier|const
name|char
operator|*
decl_stmt|, 1>;
name|SectionList
name|Sections
decl_stmt|;
name|using
name|LibraryList
init|=
name|SmallVector
operator|<
specifier|const
name|char
operator|*
decl_stmt|, 1>;
name|LibraryList
name|Libraries
decl_stmt|;
name|LoadCommandList
name|LoadCommands
decl_stmt|;
name|using
name|LibraryShortName
init|=
name|SmallVector
operator|<
name|StringRef
decl_stmt|, 1>;
name|using
name|BuildToolList
init|=
name|SmallVector
operator|<
specifier|const
name|char
operator|*
decl_stmt|, 1>;
name|BuildToolList
name|BuildTools
decl_stmt|;
name|mutable
name|LibraryShortName
name|LibrariesShortNames
decl_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|BindRebaseSegInfo
operator|>
name|BindRebaseSectionTable
expr_stmt|;
specifier|const
name|char
modifier|*
name|SymtabLoadCmd
init|=
name|nullptr
decl_stmt|;
specifier|const
name|char
modifier|*
name|DysymtabLoadCmd
init|=
name|nullptr
decl_stmt|;
specifier|const
name|char
modifier|*
name|DataInCodeLoadCmd
init|=
name|nullptr
decl_stmt|;
specifier|const
name|char
modifier|*
name|LinkOptHintsLoadCmd
init|=
name|nullptr
decl_stmt|;
specifier|const
name|char
modifier|*
name|DyldInfoLoadCmd
init|=
name|nullptr
decl_stmt|;
specifier|const
name|char
modifier|*
name|UuidLoadCmd
init|=
name|nullptr
decl_stmt|;
name|bool
name|HasPageZeroSegment
init|=
name|false
decl_stmt|;
block|}
empty_stmt|;
comment|/// DiceRef
specifier|inline
name|DiceRef
operator|::
name|DiceRef
argument_list|(
argument|DataRefImpl DiceP
argument_list|,
argument|const ObjectFile *Owner
argument_list|)
operator|:
name|DicePimpl
argument_list|(
name|DiceP
argument_list|)
operator|,
name|OwningObject
argument_list|(
argument|Owner
argument_list|)
block|{}
specifier|inline
name|bool
name|DiceRef
operator|::
name|operator
operator|==
operator|(
specifier|const
name|DiceRef
operator|&
name|Other
operator|)
specifier|const
block|{
return|return
name|DicePimpl
operator|==
name|Other
operator|.
name|DicePimpl
return|;
block|}
specifier|inline
name|bool
name|DiceRef
operator|::
name|operator
operator|<
operator|(
specifier|const
name|DiceRef
operator|&
name|Other
operator|)
specifier|const
block|{
return|return
name|DicePimpl
operator|<
name|Other
operator|.
name|DicePimpl
return|;
block|}
specifier|inline
name|void
name|DiceRef
operator|::
name|moveNext
argument_list|()
block|{
specifier|const
name|MachO
operator|::
name|data_in_code_entry
operator|*
name|P
operator|=
name|reinterpret_cast
operator|<
specifier|const
name|MachO
operator|::
name|data_in_code_entry
operator|*
operator|>
operator|(
name|DicePimpl
operator|.
name|p
operator|)
block|;
name|DicePimpl
operator|.
name|p
operator|=
name|reinterpret_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|P
operator|+
literal|1
operator|)
block|; }
comment|// Since a Mach-O data in code reference, a DiceRef, can only be created when
comment|// the OwningObject ObjectFile is a MachOObjectFile a static_cast<> is used for
comment|// the methods that get the values of the fields of the reference.
specifier|inline
name|std
operator|::
name|error_code
name|DiceRef
operator|::
name|getOffset
argument_list|(
argument|uint32_t&Result
argument_list|)
specifier|const
block|{
specifier|const
name|MachOObjectFile
operator|*
name|MachOOF
operator|=
name|static_cast
operator|<
specifier|const
name|MachOObjectFile
operator|*
operator|>
operator|(
name|OwningObject
operator|)
block|;
name|MachO
operator|::
name|data_in_code_entry
name|Dice
operator|=
name|MachOOF
operator|->
name|getDice
argument_list|(
name|DicePimpl
argument_list|)
block|;
name|Result
operator|=
name|Dice
operator|.
name|offset
block|;
return|return
name|std
operator|::
name|error_code
argument_list|()
return|;
block|}
specifier|inline
name|std
operator|::
name|error_code
name|DiceRef
operator|::
name|getLength
argument_list|(
argument|uint16_t&Result
argument_list|)
specifier|const
block|{
specifier|const
name|MachOObjectFile
operator|*
name|MachOOF
operator|=
name|static_cast
operator|<
specifier|const
name|MachOObjectFile
operator|*
operator|>
operator|(
name|OwningObject
operator|)
block|;
name|MachO
operator|::
name|data_in_code_entry
name|Dice
operator|=
name|MachOOF
operator|->
name|getDice
argument_list|(
name|DicePimpl
argument_list|)
block|;
name|Result
operator|=
name|Dice
operator|.
name|length
block|;
return|return
name|std
operator|::
name|error_code
argument_list|()
return|;
block|}
specifier|inline
name|std
operator|::
name|error_code
name|DiceRef
operator|::
name|getKind
argument_list|(
argument|uint16_t&Result
argument_list|)
specifier|const
block|{
specifier|const
name|MachOObjectFile
operator|*
name|MachOOF
operator|=
name|static_cast
operator|<
specifier|const
name|MachOObjectFile
operator|*
operator|>
operator|(
name|OwningObject
operator|)
block|;
name|MachO
operator|::
name|data_in_code_entry
name|Dice
operator|=
name|MachOOF
operator|->
name|getDice
argument_list|(
name|DicePimpl
argument_list|)
block|;
name|Result
operator|=
name|Dice
operator|.
name|kind
block|;
return|return
name|std
operator|::
name|error_code
argument_list|()
return|;
block|}
specifier|inline
name|DataRefImpl
name|DiceRef
operator|::
name|getRawDataRefImpl
argument_list|()
specifier|const
block|{
return|return
name|DicePimpl
return|;
block|}
specifier|inline
specifier|const
name|ObjectFile
operator|*
name|DiceRef
operator|::
name|getObjectFile
argument_list|()
specifier|const
block|{
return|return
name|OwningObject
return|;
block|}
block|}
end_decl_stmt

begin_comment
comment|// end namespace object
end_comment

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_OBJECT_MACHO_H
end_comment

end_unit

