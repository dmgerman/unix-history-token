begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- MachO.h - MachO object file implementation ---------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares the MachOObjectFile class, which implement the ObjectFile
end_comment

begin_comment
comment|// interface for MachO files.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_OBJECT_MACHO_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_OBJECT_MACHO_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/Triple.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/ObjectFile.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/MachO.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|object
block|{
comment|/// DiceRef - This is a value type class that represents a single
comment|/// data in code entry in the table in a Mach-O object file.
name|class
name|DiceRef
block|{
name|DataRefImpl
name|DicePimpl
decl_stmt|;
specifier|const
name|ObjectFile
modifier|*
name|OwningObject
decl_stmt|;
name|public
label|:
name|DiceRef
argument_list|()
operator|:
name|OwningObject
argument_list|(
argument|nullptr
argument_list|)
block|{ }
name|DiceRef
argument_list|(
argument|DataRefImpl DiceP
argument_list|,
argument|const ObjectFile *Owner
argument_list|)
expr_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|DiceRef
operator|&
name|Other
operator|)
specifier|const
expr_stmt|;
name|bool
name|operator
operator|<
operator|(
specifier|const
name|DiceRef
operator|&
name|Other
operator|)
specifier|const
expr_stmt|;
name|void
name|moveNext
parameter_list|()
function_decl|;
name|std
operator|::
name|error_code
name|getOffset
argument_list|(
argument|uint32_t&Result
argument_list|)
specifier|const
expr_stmt|;
name|std
operator|::
name|error_code
name|getLength
argument_list|(
argument|uint16_t&Result
argument_list|)
specifier|const
expr_stmt|;
name|std
operator|::
name|error_code
name|getKind
argument_list|(
argument|uint16_t&Result
argument_list|)
specifier|const
expr_stmt|;
name|DataRefImpl
name|getRawDataRefImpl
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|ObjectFile
operator|*
name|getObjectFile
argument_list|()
specifier|const
expr_stmt|;
block|}
empty_stmt|;
typedef|typedef
name|content_iterator
operator|<
name|DiceRef
operator|>
name|dice_iterator
expr_stmt|;
comment|/// ExportEntry encapsulates the current-state-of-the-walk used when doing a
comment|/// non-recursive walk of the trie data structure.  This allows you to iterate
comment|/// across all exported symbols using:
comment|///      for (const llvm::object::ExportEntry&AnExport : Obj->exports()) {
comment|///      }
name|class
name|ExportEntry
block|{
name|public
label|:
name|ExportEntry
argument_list|(
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|Trie
argument_list|)
expr_stmt|;
name|StringRef
name|name
argument_list|()
specifier|const
expr_stmt|;
name|uint64_t
name|flags
argument_list|()
specifier|const
expr_stmt|;
name|uint64_t
name|address
argument_list|()
specifier|const
expr_stmt|;
name|uint64_t
name|other
argument_list|()
specifier|const
expr_stmt|;
name|StringRef
name|otherName
argument_list|()
specifier|const
expr_stmt|;
name|uint32_t
name|nodeOffset
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|ExportEntry
operator|&
operator|)
specifier|const
expr_stmt|;
name|void
name|moveNext
parameter_list|()
function_decl|;
name|private
label|:
name|friend
name|class
name|MachOObjectFile
decl_stmt|;
name|void
name|moveToFirst
parameter_list|()
function_decl|;
name|void
name|moveToEnd
parameter_list|()
function_decl|;
name|uint64_t
name|readULEB128
parameter_list|(
specifier|const
name|uint8_t
modifier|*
modifier|&
name|p
parameter_list|)
function_decl|;
name|void
name|pushDownUntilBottom
parameter_list|()
function_decl|;
name|void
name|pushNode
parameter_list|(
name|uint64_t
name|Offset
parameter_list|)
function_decl|;
comment|// Represents a node in the mach-o exports trie.
struct|struct
name|NodeState
block|{
name|NodeState
argument_list|(
specifier|const
name|uint8_t
operator|*
name|Ptr
argument_list|)
expr_stmt|;
specifier|const
name|uint8_t
modifier|*
name|Start
decl_stmt|;
specifier|const
name|uint8_t
modifier|*
name|Current
decl_stmt|;
name|uint64_t
name|Flags
decl_stmt|;
name|uint64_t
name|Address
decl_stmt|;
name|uint64_t
name|Other
decl_stmt|;
specifier|const
name|char
modifier|*
name|ImportName
decl_stmt|;
name|unsigned
name|ChildCount
decl_stmt|;
name|unsigned
name|NextChildIndex
decl_stmt|;
name|unsigned
name|ParentStringLength
decl_stmt|;
name|bool
name|IsExportNode
decl_stmt|;
block|}
struct|;
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|Trie
expr_stmt|;
name|SmallString
operator|<
literal|256
operator|>
name|CumulativeString
expr_stmt|;
name|SmallVector
operator|<
name|NodeState
operator|,
literal|16
operator|>
name|Stack
expr_stmt|;
name|bool
name|Malformed
decl_stmt|;
name|bool
name|Done
decl_stmt|;
block|}
empty_stmt|;
typedef|typedef
name|content_iterator
operator|<
name|ExportEntry
operator|>
name|export_iterator
expr_stmt|;
comment|/// MachORebaseEntry encapsulates the current state in the decompression of
comment|/// rebasing opcodes. This allows you to iterate through the compressed table of
comment|/// rebasing using:
comment|///    for (const llvm::object::MachORebaseEntry&Entry : Obj->rebaseTable()) {
comment|///    }
name|class
name|MachORebaseEntry
block|{
name|public
label|:
name|MachORebaseEntry
argument_list|(
argument|ArrayRef<uint8_t> opcodes
argument_list|,
argument|bool is64Bit
argument_list|)
empty_stmt|;
name|uint32_t
name|segmentIndex
argument_list|()
specifier|const
expr_stmt|;
name|uint64_t
name|segmentOffset
argument_list|()
specifier|const
expr_stmt|;
name|StringRef
name|typeName
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|MachORebaseEntry
operator|&
operator|)
specifier|const
expr_stmt|;
name|void
name|moveNext
parameter_list|()
function_decl|;
name|private
label|:
name|friend
name|class
name|MachOObjectFile
decl_stmt|;
name|void
name|moveToFirst
parameter_list|()
function_decl|;
name|void
name|moveToEnd
parameter_list|()
function_decl|;
name|uint64_t
name|readULEB128
parameter_list|()
function_decl|;
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|Opcodes
expr_stmt|;
specifier|const
name|uint8_t
modifier|*
name|Ptr
decl_stmt|;
name|uint64_t
name|SegmentOffset
decl_stmt|;
name|uint32_t
name|SegmentIndex
decl_stmt|;
name|uint64_t
name|RemainingLoopCount
decl_stmt|;
name|uint64_t
name|AdvanceAmount
decl_stmt|;
name|uint8_t
name|RebaseType
decl_stmt|;
name|uint8_t
name|PointerSize
decl_stmt|;
name|bool
name|Malformed
decl_stmt|;
name|bool
name|Done
decl_stmt|;
block|}
empty_stmt|;
typedef|typedef
name|content_iterator
operator|<
name|MachORebaseEntry
operator|>
name|rebase_iterator
expr_stmt|;
comment|/// MachOBindEntry encapsulates the current state in the decompression of
comment|/// binding opcodes. This allows you to iterate through the compressed table of
comment|/// bindings using:
comment|///    for (const llvm::object::MachOBindEntry&Entry : Obj->bindTable()) {
comment|///    }
name|class
name|MachOBindEntry
block|{
name|public
label|:
name|enum
name|class
name|Kind
block|{
name|Regular
operator|,
name|Lazy
operator|,
name|Weak
block|}
empty_stmt|;
name|MachOBindEntry
argument_list|(
argument|ArrayRef<uint8_t> Opcodes
argument_list|,
argument|bool is64Bit
argument_list|,
argument|MachOBindEntry::Kind
argument_list|)
empty_stmt|;
name|uint32_t
name|segmentIndex
argument_list|()
specifier|const
expr_stmt|;
name|uint64_t
name|segmentOffset
argument_list|()
specifier|const
expr_stmt|;
name|StringRef
name|typeName
argument_list|()
specifier|const
expr_stmt|;
name|StringRef
name|symbolName
argument_list|()
specifier|const
expr_stmt|;
name|uint32_t
name|flags
argument_list|()
specifier|const
expr_stmt|;
name|int64_t
name|addend
argument_list|()
specifier|const
expr_stmt|;
name|int
name|ordinal
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|MachOBindEntry
operator|&
operator|)
specifier|const
expr_stmt|;
name|void
name|moveNext
parameter_list|()
function_decl|;
name|private
label|:
name|friend
name|class
name|MachOObjectFile
decl_stmt|;
name|void
name|moveToFirst
parameter_list|()
function_decl|;
name|void
name|moveToEnd
parameter_list|()
function_decl|;
name|uint64_t
name|readULEB128
parameter_list|()
function_decl|;
name|int64_t
name|readSLEB128
parameter_list|()
function_decl|;
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|Opcodes
expr_stmt|;
specifier|const
name|uint8_t
modifier|*
name|Ptr
decl_stmt|;
name|uint64_t
name|SegmentOffset
decl_stmt|;
name|uint32_t
name|SegmentIndex
decl_stmt|;
name|StringRef
name|SymbolName
decl_stmt|;
name|int
name|Ordinal
decl_stmt|;
name|uint32_t
name|Flags
decl_stmt|;
name|int64_t
name|Addend
decl_stmt|;
name|uint64_t
name|RemainingLoopCount
decl_stmt|;
name|uint64_t
name|AdvanceAmount
decl_stmt|;
name|uint8_t
name|BindType
decl_stmt|;
name|uint8_t
name|PointerSize
decl_stmt|;
name|Kind
name|TableKind
decl_stmt|;
name|bool
name|Malformed
decl_stmt|;
name|bool
name|Done
decl_stmt|;
block|}
empty_stmt|;
typedef|typedef
name|content_iterator
operator|<
name|MachOBindEntry
operator|>
name|bind_iterator
expr_stmt|;
name|class
name|MachOObjectFile
range|:
name|public
name|ObjectFile
block|{
name|public
operator|:
expr|struct
name|LoadCommandInfo
block|{
specifier|const
name|char
operator|*
name|Ptr
block|;
comment|// Where in memory the load command is.
name|MachO
operator|::
name|load_command
name|C
block|;
comment|// The command itself.
block|}
block|;
name|MachOObjectFile
argument_list|(
argument|MemoryBufferRef Object
argument_list|,
argument|bool IsLittleEndian
argument_list|,
argument|bool Is64Bits
argument_list|,
argument|std::error_code&EC
argument_list|)
block|;
name|void
name|moveSymbolNext
argument_list|(
argument|DataRefImpl&Symb
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|getSymbolName
argument_list|(
argument|DataRefImpl Symb
argument_list|,
argument|StringRef&Res
argument_list|)
specifier|const
name|override
block|;
comment|// MachO specific.
name|std
operator|::
name|error_code
name|getIndirectName
argument_list|(
argument|DataRefImpl Symb
argument_list|,
argument|StringRef&Res
argument_list|)
specifier|const
block|;
name|unsigned
name|getSectionType
argument_list|(
argument|SectionRef Sec
argument_list|)
specifier|const
block|;
name|std
operator|::
name|error_code
name|getSymbolAddress
argument_list|(
argument|DataRefImpl Symb
argument_list|,
argument|uint64_t&Res
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|getSymbolAlignment
argument_list|(
argument|DataRefImpl Symb
argument_list|,
argument|uint32_t&Res
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|getSymbolSize
argument_list|(
argument|DataRefImpl Symb
argument_list|,
argument|uint64_t&Res
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|getSymbolType
argument_list|(
argument|DataRefImpl Symb
argument_list|,
argument|SymbolRef::Type&Res
argument_list|)
specifier|const
name|override
block|;
name|uint32_t
name|getSymbolFlags
argument_list|(
argument|DataRefImpl Symb
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|getSymbolSection
argument_list|(
argument|DataRefImpl Symb
argument_list|,
argument|section_iterator&Res
argument_list|)
specifier|const
name|override
block|;
name|void
name|moveSectionNext
argument_list|(
argument|DataRefImpl&Sec
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|getSectionName
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|StringRef&Res
argument_list|)
specifier|const
name|override
block|;
name|uint64_t
name|getSectionAddress
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
name|override
block|;
name|uint64_t
name|getSectionSize
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|getSectionContents
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|StringRef&Res
argument_list|)
specifier|const
name|override
block|;
name|uint64_t
name|getSectionAlignment
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
name|override
block|;
name|bool
name|isSectionText
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
name|override
block|;
name|bool
name|isSectionData
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
name|override
block|;
name|bool
name|isSectionBSS
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
name|override
block|;
name|bool
name|isSectionVirtual
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
name|override
block|;
name|bool
name|sectionContainsSymbol
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|DataRefImpl Symb
argument_list|)
specifier|const
name|override
block|;
name|relocation_iterator
name|section_rel_begin
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
name|override
block|;
name|relocation_iterator
name|section_rel_end
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
name|override
block|;
name|void
name|moveRelocationNext
argument_list|(
argument|DataRefImpl&Rel
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|getRelocationAddress
argument_list|(
argument|DataRefImpl Rel
argument_list|,
argument|uint64_t&Res
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|getRelocationOffset
argument_list|(
argument|DataRefImpl Rel
argument_list|,
argument|uint64_t&Res
argument_list|)
specifier|const
name|override
block|;
name|symbol_iterator
name|getRelocationSymbol
argument_list|(
argument|DataRefImpl Rel
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|getRelocationType
argument_list|(
argument|DataRefImpl Rel
argument_list|,
argument|uint64_t&Res
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|getRelocationTypeName
argument_list|(
argument|DataRefImpl Rel
argument_list|,
argument|SmallVectorImpl<char>&Result
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|getRelocationValueString
argument_list|(
argument|DataRefImpl Rel
argument_list|,
argument|SmallVectorImpl<char>&Result
argument_list|)
specifier|const
name|override
block|;
name|std
operator|::
name|error_code
name|getRelocationHidden
argument_list|(
argument|DataRefImpl Rel
argument_list|,
argument|bool&Result
argument_list|)
specifier|const
name|override
block|;
comment|// MachO specific.
name|std
operator|::
name|error_code
name|getLibraryShortNameByIndex
argument_list|(
argument|unsigned Index
argument_list|,
argument|StringRef&
argument_list|)
specifier|const
block|;
comment|// TODO: Would be useful to have an iterator based version
comment|// of the load command interface too.
name|basic_symbol_iterator
name|symbol_begin_impl
argument_list|()
specifier|const
name|override
block|;
name|basic_symbol_iterator
name|symbol_end_impl
argument_list|()
specifier|const
name|override
block|;
comment|// MachO specific.
name|basic_symbol_iterator
name|getSymbolByIndex
argument_list|(
argument|unsigned Index
argument_list|)
specifier|const
block|;
name|section_iterator
name|section_begin
argument_list|()
specifier|const
name|override
block|;
name|section_iterator
name|section_end
argument_list|()
specifier|const
name|override
block|;
name|uint8_t
name|getBytesInAddress
argument_list|()
specifier|const
name|override
block|;
name|StringRef
name|getFileFormatName
argument_list|()
specifier|const
name|override
block|;
name|unsigned
name|getArch
argument_list|()
specifier|const
name|override
block|;
name|Triple
name|getArch
argument_list|(
argument|const char **McpuDefault
argument_list|,
argument|Triple *ThumbTriple
argument_list|)
specifier|const
block|;
name|relocation_iterator
name|section_rel_begin
argument_list|(
argument|unsigned Index
argument_list|)
specifier|const
block|;
name|relocation_iterator
name|section_rel_end
argument_list|(
argument|unsigned Index
argument_list|)
specifier|const
block|;
name|dice_iterator
name|begin_dices
argument_list|()
specifier|const
block|;
name|dice_iterator
name|end_dices
argument_list|()
specifier|const
block|;
comment|/// For use iterating over all exported symbols.
name|iterator_range
operator|<
name|export_iterator
operator|>
name|exports
argument_list|()
specifier|const
block|;
comment|/// For use examining a trie not in a MachOObjectFile.
specifier|static
name|iterator_range
operator|<
name|export_iterator
operator|>
name|exports
argument_list|(
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|Trie
argument_list|)
block|;
comment|/// For use iterating over all rebase table entries.
name|iterator_range
operator|<
name|rebase_iterator
operator|>
name|rebaseTable
argument_list|()
specifier|const
block|;
comment|/// For use examining rebase opcodes not in a MachOObjectFile.
specifier|static
name|iterator_range
operator|<
name|rebase_iterator
operator|>
name|rebaseTable
argument_list|(
argument|ArrayRef<uint8_t> Opcodes
argument_list|,
argument|bool is64
argument_list|)
block|;
comment|/// For use iterating over all bind table entries.
name|iterator_range
operator|<
name|bind_iterator
operator|>
name|bindTable
argument_list|()
specifier|const
block|;
comment|/// For use iterating over all lazy bind table entries.
name|iterator_range
operator|<
name|bind_iterator
operator|>
name|lazyBindTable
argument_list|()
specifier|const
block|;
comment|/// For use iterating over all lazy bind table entries.
name|iterator_range
operator|<
name|bind_iterator
operator|>
name|weakBindTable
argument_list|()
specifier|const
block|;
comment|/// For use examining bind opcodes not in a MachOObjectFile.
specifier|static
name|iterator_range
operator|<
name|bind_iterator
operator|>
name|bindTable
argument_list|(
argument|ArrayRef<uint8_t> Opcodes
argument_list|,
argument|bool is64
argument_list|,
argument|MachOBindEntry::Kind
argument_list|)
block|;
comment|// In a MachO file, sections have a segment name. This is used in the .o
comment|// files. They have a single segment, but this field specifies which segment
comment|// a section should be put in in the final object.
name|StringRef
name|getSectionFinalSegmentName
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
block|;
comment|// Names are stored as 16 bytes. These returns the raw 16 bytes without
comment|// interpreting them as a C string.
name|ArrayRef
operator|<
name|char
operator|>
name|getSectionRawName
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
block|;
name|ArrayRef
operator|<
name|char
operator|>
name|getSectionRawFinalSegmentName
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
block|;
comment|// MachO specific Info about relocations.
name|bool
name|isRelocationScattered
argument_list|(
argument|const MachO::any_relocation_info&RE
argument_list|)
specifier|const
block|;
name|unsigned
name|getPlainRelocationSymbolNum
argument_list|(
argument|const MachO::any_relocation_info&RE
argument_list|)
specifier|const
block|;
name|bool
name|getPlainRelocationExternal
argument_list|(
argument|const MachO::any_relocation_info&RE
argument_list|)
specifier|const
block|;
name|bool
name|getScatteredRelocationScattered
argument_list|(
argument|const MachO::any_relocation_info&RE
argument_list|)
specifier|const
block|;
name|uint32_t
name|getScatteredRelocationValue
argument_list|(
argument|const MachO::any_relocation_info&RE
argument_list|)
specifier|const
block|;
name|uint32_t
name|getScatteredRelocationType
argument_list|(
argument|const MachO::any_relocation_info&RE
argument_list|)
specifier|const
block|;
name|unsigned
name|getAnyRelocationAddress
argument_list|(
argument|const MachO::any_relocation_info&RE
argument_list|)
specifier|const
block|;
name|unsigned
name|getAnyRelocationPCRel
argument_list|(
argument|const MachO::any_relocation_info&RE
argument_list|)
specifier|const
block|;
name|unsigned
name|getAnyRelocationLength
argument_list|(
argument|const MachO::any_relocation_info&RE
argument_list|)
specifier|const
block|;
name|unsigned
name|getAnyRelocationType
argument_list|(
argument|const MachO::any_relocation_info&RE
argument_list|)
specifier|const
block|;
name|SectionRef
name|getRelocationSection
argument_list|(
argument|const MachO::any_relocation_info&RE
argument_list|)
specifier|const
block|;
comment|// Walk load commands.
name|LoadCommandInfo
name|getFirstLoadCommandInfo
argument_list|()
specifier|const
block|;
name|LoadCommandInfo
name|getNextLoadCommandInfo
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
comment|// MachO specific structures.
name|MachO
operator|::
name|section
name|getSection
argument_list|(
argument|DataRefImpl DRI
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|section_64
name|getSection64
argument_list|(
argument|DataRefImpl DRI
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|section
name|getSection
argument_list|(
argument|const LoadCommandInfo&L
argument_list|,
argument|unsigned Index
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|section_64
name|getSection64
argument_list|(
argument|const LoadCommandInfo&L
argument_list|,
argument|unsigned Index
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|nlist
name|getSymbolTableEntry
argument_list|(
argument|DataRefImpl DRI
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|nlist_64
name|getSymbol64TableEntry
argument_list|(
argument|DataRefImpl DRI
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|linkedit_data_command
name|getLinkeditDataLoadCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|segment_command
name|getSegmentLoadCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|segment_command_64
name|getSegment64LoadCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|linker_option_command
name|getLinkerOptionLoadCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|version_min_command
name|getVersionMinLoadCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|dylib_command
name|getDylibIDLoadCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|dyld_info_command
name|getDyldInfoLoadCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|dylinker_command
name|getDylinkerCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|uuid_command
name|getUuidCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|rpath_command
name|getRpathCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|source_version_command
name|getSourceVersionCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|entry_point_command
name|getEntryPointCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|encryption_info_command
name|getEncryptionInfoCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|encryption_info_command_64
name|getEncryptionInfoCommand64
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|sub_framework_command
name|getSubFrameworkCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|sub_umbrella_command
name|getSubUmbrellaCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|sub_library_command
name|getSubLibraryCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|sub_client_command
name|getSubClientCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|routines_command
name|getRoutinesCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|routines_command_64
name|getRoutinesCommand64
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|thread_command
name|getThreadCommand
argument_list|(
argument|const LoadCommandInfo&L
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|any_relocation_info
name|getRelocation
argument_list|(
argument|DataRefImpl Rel
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|data_in_code_entry
name|getDice
argument_list|(
argument|DataRefImpl Rel
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|mach_header
name|getHeader
argument_list|()
specifier|const
block|;
name|MachO
operator|::
name|mach_header_64
name|getHeader64
argument_list|()
specifier|const
block|;
name|uint32_t
name|getIndirectSymbolTableEntry
argument_list|(
argument|const MachO::dysymtab_command&DLC
argument_list|,
argument|unsigned Index
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|data_in_code_entry
name|getDataInCodeTableEntry
argument_list|(
argument|uint32_t DataOffset
argument_list|,
argument|unsigned Index
argument_list|)
specifier|const
block|;
name|MachO
operator|::
name|symtab_command
name|getSymtabLoadCommand
argument_list|()
specifier|const
block|;
name|MachO
operator|::
name|dysymtab_command
name|getDysymtabLoadCommand
argument_list|()
specifier|const
block|;
name|MachO
operator|::
name|linkedit_data_command
name|getDataInCodeLoadCommand
argument_list|()
specifier|const
block|;
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|getDyldInfoRebaseOpcodes
argument_list|()
specifier|const
block|;
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|getDyldInfoBindOpcodes
argument_list|()
specifier|const
block|;
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|getDyldInfoWeakBindOpcodes
argument_list|()
specifier|const
block|;
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|getDyldInfoLazyBindOpcodes
argument_list|()
specifier|const
block|;
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|getDyldInfoExportsTrie
argument_list|()
specifier|const
block|;
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|getUuid
argument_list|()
specifier|const
block|;
name|StringRef
name|getStringTableData
argument_list|()
specifier|const
block|;
name|bool
name|is64Bit
argument_list|()
specifier|const
block|;
name|void
name|ReadULEB128s
argument_list|(
argument|uint64_t Index
argument_list|,
argument|SmallVectorImpl<uint64_t>&Out
argument_list|)
specifier|const
block|;
specifier|static
name|StringRef
name|guessLibraryShortName
argument_list|(
argument|StringRef Name
argument_list|,
argument|bool&isFramework
argument_list|,
argument|StringRef&Suffix
argument_list|)
block|;
specifier|static
name|Triple
operator|::
name|ArchType
name|getArch
argument_list|(
argument|uint32_t CPUType
argument_list|)
block|;
specifier|static
name|Triple
name|getArch
argument_list|(
argument|uint32_t CPUType
argument_list|,
argument|uint32_t CPUSubType
argument_list|,
argument|const char **McpuDefault = nullptr
argument_list|)
block|;
specifier|static
name|Triple
name|getThumbArch
argument_list|(
argument|uint32_t CPUType
argument_list|,
argument|uint32_t CPUSubType
argument_list|,
argument|const char **McpuDefault = nullptr
argument_list|)
block|;
specifier|static
name|Triple
name|getArch
argument_list|(
argument|uint32_t CPUType
argument_list|,
argument|uint32_t CPUSubType
argument_list|,
argument|const char **McpuDefault
argument_list|,
argument|Triple *ThumbTriple
argument_list|)
block|;
specifier|static
name|bool
name|isValidArch
argument_list|(
argument|StringRef ArchFlag
argument_list|)
block|;
specifier|static
name|Triple
name|getHostArch
argument_list|()
block|;
name|bool
name|isRelocatableObject
argument_list|()
specifier|const
name|override
block|;
name|bool
name|hasPageZeroSegment
argument_list|()
specifier|const
block|{
return|return
name|HasPageZeroSegment
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const Binary *v
argument_list|)
block|{
return|return
name|v
operator|->
name|isMachO
argument_list|()
return|;
block|}
name|private
operator|:
typedef|typedef
name|SmallVector
operator|<
specifier|const
name|char
operator|*
operator|,
literal|1
operator|>
name|SectionList
expr_stmt|;
name|SectionList
name|Sections
decl_stmt|;
typedef|typedef
name|SmallVector
operator|<
specifier|const
name|char
operator|*
operator|,
literal|1
operator|>
name|LibraryList
expr_stmt|;
name|LibraryList
name|Libraries
decl_stmt|;
typedef|typedef
name|SmallVector
operator|<
name|StringRef
operator|,
literal|1
operator|>
name|LibraryShortName
expr_stmt|;
name|mutable
name|LibraryShortName
name|LibrariesShortNames
decl_stmt|;
specifier|const
name|char
modifier|*
name|SymtabLoadCmd
decl_stmt|;
specifier|const
name|char
modifier|*
name|DysymtabLoadCmd
decl_stmt|;
specifier|const
name|char
modifier|*
name|DataInCodeLoadCmd
decl_stmt|;
specifier|const
name|char
modifier|*
name|DyldInfoLoadCmd
decl_stmt|;
specifier|const
name|char
modifier|*
name|UuidLoadCmd
decl_stmt|;
name|bool
name|HasPageZeroSegment
decl_stmt|;
block|}
empty_stmt|;
comment|/// DiceRef
specifier|inline
name|DiceRef
operator|::
name|DiceRef
argument_list|(
argument|DataRefImpl DiceP
argument_list|,
argument|const ObjectFile *Owner
argument_list|)
operator|:
name|DicePimpl
argument_list|(
name|DiceP
argument_list|)
operator|,
name|OwningObject
argument_list|(
argument|Owner
argument_list|)
block|{}
specifier|inline
name|bool
name|DiceRef
operator|::
name|operator
operator|==
operator|(
specifier|const
name|DiceRef
operator|&
name|Other
operator|)
specifier|const
block|{
return|return
name|DicePimpl
operator|==
name|Other
operator|.
name|DicePimpl
return|;
block|}
specifier|inline
name|bool
name|DiceRef
operator|::
name|operator
operator|<
operator|(
specifier|const
name|DiceRef
operator|&
name|Other
operator|)
specifier|const
block|{
return|return
name|DicePimpl
operator|<
name|Other
operator|.
name|DicePimpl
return|;
block|}
specifier|inline
name|void
name|DiceRef
operator|::
name|moveNext
argument_list|()
block|{
specifier|const
name|MachO
operator|::
name|data_in_code_entry
operator|*
name|P
operator|=
name|reinterpret_cast
operator|<
specifier|const
name|MachO
operator|::
name|data_in_code_entry
operator|*
operator|>
operator|(
name|DicePimpl
operator|.
name|p
operator|)
block|;
name|DicePimpl
operator|.
name|p
operator|=
name|reinterpret_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|P
operator|+
literal|1
operator|)
block|; }
comment|// Since a Mach-O data in code reference, a DiceRef, can only be created when
comment|// the OwningObject ObjectFile is a MachOObjectFile a static_cast<> is used for
comment|// the methods that get the values of the fields of the reference.
specifier|inline
name|std
operator|::
name|error_code
name|DiceRef
operator|::
name|getOffset
argument_list|(
argument|uint32_t&Result
argument_list|)
specifier|const
block|{
specifier|const
name|MachOObjectFile
operator|*
name|MachOOF
operator|=
name|static_cast
operator|<
specifier|const
name|MachOObjectFile
operator|*
operator|>
operator|(
name|OwningObject
operator|)
block|;
name|MachO
operator|::
name|data_in_code_entry
name|Dice
operator|=
name|MachOOF
operator|->
name|getDice
argument_list|(
name|DicePimpl
argument_list|)
block|;
name|Result
operator|=
name|Dice
operator|.
name|offset
block|;
return|return
name|object_error
operator|::
name|success
return|;
block|}
specifier|inline
name|std
operator|::
name|error_code
name|DiceRef
operator|::
name|getLength
argument_list|(
argument|uint16_t&Result
argument_list|)
specifier|const
block|{
specifier|const
name|MachOObjectFile
operator|*
name|MachOOF
operator|=
name|static_cast
operator|<
specifier|const
name|MachOObjectFile
operator|*
operator|>
operator|(
name|OwningObject
operator|)
block|;
name|MachO
operator|::
name|data_in_code_entry
name|Dice
operator|=
name|MachOOF
operator|->
name|getDice
argument_list|(
name|DicePimpl
argument_list|)
block|;
name|Result
operator|=
name|Dice
operator|.
name|length
block|;
return|return
name|object_error
operator|::
name|success
return|;
block|}
specifier|inline
name|std
operator|::
name|error_code
name|DiceRef
operator|::
name|getKind
argument_list|(
argument|uint16_t&Result
argument_list|)
specifier|const
block|{
specifier|const
name|MachOObjectFile
operator|*
name|MachOOF
operator|=
name|static_cast
operator|<
specifier|const
name|MachOObjectFile
operator|*
operator|>
operator|(
name|OwningObject
operator|)
block|;
name|MachO
operator|::
name|data_in_code_entry
name|Dice
operator|=
name|MachOOF
operator|->
name|getDice
argument_list|(
name|DicePimpl
argument_list|)
block|;
name|Result
operator|=
name|Dice
operator|.
name|kind
block|;
return|return
name|object_error
operator|::
name|success
return|;
block|}
specifier|inline
name|DataRefImpl
name|DiceRef
operator|::
name|getRawDataRefImpl
argument_list|()
specifier|const
block|{
return|return
name|DicePimpl
return|;
block|}
specifier|inline
specifier|const
name|ObjectFile
operator|*
name|DiceRef
operator|::
name|getObjectFile
argument_list|()
specifier|const
block|{
return|return
name|OwningObject
return|;
block|}
block|}
end_decl_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

end_unit

