begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- MachO.h - MachO object file implementation ---------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares the MachOObjectFile class, which binds the MachOObject
end_comment

begin_comment
comment|// class to the generic ObjectFile wrapper.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_OBJECT_MACHO_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_OBJECT_MACHO_H
end_define

begin_include
include|#
directive|include
file|"llvm/Object/ObjectFile.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/MachOObject.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/MachO.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/raw_ostream.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|object
block|{
typedef|typedef
name|MachOObject
operator|::
name|LoadCommandInfo
name|LoadCommandInfo
expr_stmt|;
name|class
name|MachOObjectFile
range|:
name|public
name|ObjectFile
block|{
name|public
operator|:
name|MachOObjectFile
argument_list|(
name|MemoryBuffer
operator|*
name|Object
argument_list|,
name|MachOObject
operator|*
name|MOO
argument_list|,
name|error_code
operator|&
name|ec
argument_list|)
block|;
name|virtual
name|symbol_iterator
name|begin_symbols
argument_list|()
specifier|const
block|;
name|virtual
name|symbol_iterator
name|end_symbols
argument_list|()
specifier|const
block|;
name|virtual
name|symbol_iterator
name|begin_dynamic_symbols
argument_list|()
specifier|const
block|;
name|virtual
name|symbol_iterator
name|end_dynamic_symbols
argument_list|()
specifier|const
block|;
name|virtual
name|library_iterator
name|begin_libraries_needed
argument_list|()
specifier|const
block|;
name|virtual
name|library_iterator
name|end_libraries_needed
argument_list|()
specifier|const
block|;
name|virtual
name|section_iterator
name|begin_sections
argument_list|()
specifier|const
block|;
name|virtual
name|section_iterator
name|end_sections
argument_list|()
specifier|const
block|;
name|virtual
name|uint8_t
name|getBytesInAddress
argument_list|()
specifier|const
block|;
name|virtual
name|StringRef
name|getFileFormatName
argument_list|()
specifier|const
block|;
name|virtual
name|unsigned
name|getArch
argument_list|()
specifier|const
block|;
name|virtual
name|StringRef
name|getLoadName
argument_list|()
specifier|const
block|;
name|MachOObject
operator|*
name|getObject
argument_list|()
block|{
return|return
name|MachOObj
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const Binary *v
argument_list|)
block|{
return|return
name|v
operator|->
name|isMachO
argument_list|()
return|;
block|}
name|protected
operator|:
name|virtual
name|error_code
name|getSymbolNext
argument_list|(
argument|DataRefImpl Symb
argument_list|,
argument|SymbolRef&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|getSymbolName
argument_list|(
argument|DataRefImpl Symb
argument_list|,
argument|StringRef&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|getSymbolFileOffset
argument_list|(
argument|DataRefImpl Symb
argument_list|,
argument|uint64_t&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|getSymbolAddress
argument_list|(
argument|DataRefImpl Symb
argument_list|,
argument|uint64_t&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|getSymbolSize
argument_list|(
argument|DataRefImpl Symb
argument_list|,
argument|uint64_t&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|getSymbolNMTypeChar
argument_list|(
argument|DataRefImpl Symb
argument_list|,
argument|char&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|getSymbolFlags
argument_list|(
argument|DataRefImpl Symb
argument_list|,
argument|uint32_t&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|getSymbolType
argument_list|(
argument|DataRefImpl Symb
argument_list|,
argument|SymbolRef::Type&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|getSymbolSection
argument_list|(
argument|DataRefImpl Symb
argument_list|,
argument|section_iterator&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|getSymbolValue
argument_list|(
argument|DataRefImpl Symb
argument_list|,
argument|uint64_t&Val
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|getSectionNext
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|SectionRef&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|getSectionName
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|StringRef&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|getSectionAddress
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|uint64_t&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|getSectionSize
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|uint64_t&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|getSectionContents
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|StringRef&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|getSectionAlignment
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|uint64_t&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|isSectionText
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|bool&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|isSectionData
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|bool&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|isSectionBSS
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|bool&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|isSectionRequiredForExecution
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|bool&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|isSectionVirtual
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|bool&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|isSectionZeroInit
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|bool&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|isSectionReadOnlyData
argument_list|(
argument|DataRefImpl Sec
argument_list|,
argument|bool&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|sectionContainsSymbol
argument_list|(
argument|DataRefImpl DRI
argument_list|,
argument|DataRefImpl S
argument_list|,
argument|bool&Result
argument_list|)
specifier|const
block|;
name|virtual
name|relocation_iterator
name|getSectionRelBegin
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
block|;
name|virtual
name|relocation_iterator
name|getSectionRelEnd
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|getRelocationNext
argument_list|(
argument|DataRefImpl Rel
argument_list|,
argument|RelocationRef&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|getRelocationAddress
argument_list|(
argument|DataRefImpl Rel
argument_list|,
argument|uint64_t&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|getRelocationOffset
argument_list|(
argument|DataRefImpl Rel
argument_list|,
argument|uint64_t&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|getRelocationSymbol
argument_list|(
argument|DataRefImpl Rel
argument_list|,
argument|SymbolRef&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|getRelocationType
argument_list|(
argument|DataRefImpl Rel
argument_list|,
argument|uint64_t&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|getRelocationTypeName
argument_list|(
argument|DataRefImpl Rel
argument_list|,
argument|SmallVectorImpl<char>&Result
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|getRelocationAdditionalInfo
argument_list|(
argument|DataRefImpl Rel
argument_list|,
argument|int64_t&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|getRelocationValueString
argument_list|(
argument|DataRefImpl Rel
argument_list|,
argument|SmallVectorImpl<char>&Result
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|getRelocationHidden
argument_list|(
argument|DataRefImpl Rel
argument_list|,
argument|bool&Result
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|getLibraryNext
argument_list|(
argument|DataRefImpl LibData
argument_list|,
argument|LibraryRef&Res
argument_list|)
specifier|const
block|;
name|virtual
name|error_code
name|getLibraryPath
argument_list|(
argument|DataRefImpl LibData
argument_list|,
argument|StringRef&Res
argument_list|)
specifier|const
block|;
name|private
operator|:
name|MachOObject
operator|*
name|MachOObj
block|;
name|mutable
name|uint32_t
name|RegisteredStringTable
block|;
typedef|typedef
name|SmallVector
operator|<
name|DataRefImpl
operator|,
literal|1
operator|>
name|SectionList
expr_stmt|;
name|SectionList
name|Sections
decl_stmt|;
name|void
name|moveToNextSection
argument_list|(
name|DataRefImpl
operator|&
name|DRI
argument_list|)
decl|const
decl_stmt|;
name|void
name|getSymbolTableEntry
argument_list|(
name|DataRefImpl
name|DRI
argument_list|,
name|InMemoryStruct
operator|<
name|macho
operator|::
name|SymbolTableEntry
operator|>
operator|&
name|Res
argument_list|)
decl|const
decl_stmt|;
name|void
name|getSymbol64TableEntry
argument_list|(
name|DataRefImpl
name|DRI
argument_list|,
name|InMemoryStruct
operator|<
name|macho
operator|::
name|Symbol64TableEntry
operator|>
operator|&
name|Res
argument_list|)
decl|const
decl_stmt|;
name|void
name|moveToNextSymbol
argument_list|(
name|DataRefImpl
operator|&
name|DRI
argument_list|)
decl|const
decl_stmt|;
name|void
name|getSection
argument_list|(
name|DataRefImpl
name|DRI
argument_list|,
name|InMemoryStruct
operator|<
name|macho
operator|::
name|Section
operator|>
operator|&
name|Res
argument_list|)
decl|const
decl_stmt|;
name|void
name|getSection64
argument_list|(
name|DataRefImpl
name|DRI
argument_list|,
name|InMemoryStruct
operator|<
name|macho
operator|::
name|Section64
operator|>
operator|&
name|Res
argument_list|)
decl|const
decl_stmt|;
name|void
name|getRelocation
argument_list|(
name|DataRefImpl
name|Rel
argument_list|,
name|InMemoryStruct
operator|<
name|macho
operator|::
name|RelocationEntry
operator|>
operator|&
name|Res
argument_list|)
decl|const
decl_stmt|;
name|std
operator|::
name|size_t
name|getSectionIndex
argument_list|(
argument|DataRefImpl Sec
argument_list|)
specifier|const
expr_stmt|;
name|void
name|printRelocationTargetName
argument_list|(
name|InMemoryStruct
operator|<
name|macho
operator|::
name|RelocationEntry
operator|>
operator|&
name|RE
argument_list|,
name|raw_string_ostream
operator|&
name|fmt
argument_list|)
decl|const
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

end_unit

