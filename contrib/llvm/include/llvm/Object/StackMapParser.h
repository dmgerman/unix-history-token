begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-------- StackMapParser.h - StackMap Parsing Support -------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CODEGEN_STACKMAPPARSER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CODEGEN_STACKMAPPARSER_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Endian.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|template
operator|<
name|support
operator|::
name|endianness
name|Endianness
operator|>
name|class
name|StackMapV1Parser
block|{
name|public
operator|:
name|template
operator|<
name|typename
name|AccessorT
operator|>
name|class
name|AccessorIterator
block|{
name|public
operator|:
name|AccessorIterator
argument_list|(
argument|AccessorT A
argument_list|)
operator|:
name|A
argument_list|(
argument|A
argument_list|)
block|{}
name|AccessorIterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|A
operator|=
name|A
operator|.
name|next
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
name|AccessorIterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|auto
name|tmp
operator|=
operator|*
name|this
block|;
operator|++
operator|*
name|this
block|;
return|return
name|tmp
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|AccessorIterator
operator|&
name|Other
operator|)
block|{
return|return
name|A
operator|.
name|P
operator|==
name|Other
operator|.
name|A
operator|.
name|P
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|AccessorIterator
operator|&
name|Other
operator|)
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|Other
operator|)
return|;
block|}
name|AccessorT
operator|&
name|operator
operator|*
operator|(
operator|)
block|{
return|return
name|A
return|;
block|}
name|AccessorT
operator|*
name|operator
operator|->
expr|(
block|)
block|{
return|return
operator|&
name|A
return|;
block|}
name|private
operator|:
name|AccessorT
name|A
block|;   }
expr_stmt|;
comment|/// Accessor for function records.
name|class
name|FunctionAccessor
block|{
name|friend
name|class
name|StackMapV1Parser
decl_stmt|;
name|public
label|:
comment|/// Get the function address.
name|uint64_t
name|getFunctionAddress
argument_list|()
specifier|const
block|{
return|return
name|read
operator|<
name|uint64_t
operator|>
operator|(
name|P
operator|)
return|;
block|}
comment|/// Get the function's stack size.
name|uint32_t
name|getStackSize
argument_list|()
specifier|const
block|{
return|return
name|read
operator|<
name|uint64_t
operator|>
operator|(
name|P
operator|+
sizeof|sizeof
argument_list|(
name|uint64_t
argument_list|)
operator|)
return|;
block|}
name|private
label|:
name|FunctionAccessor
argument_list|(
specifier|const
name|uint8_t
operator|*
name|P
argument_list|)
operator|:
name|P
argument_list|(
argument|P
argument_list|)
block|{}
specifier|const
specifier|static
name|int
name|FunctionAccessorSize
operator|=
literal|2
operator|*
sizeof|sizeof
argument_list|(
name|uint64_t
argument_list|)
expr_stmt|;
name|FunctionAccessor
name|next
argument_list|()
specifier|const
block|{
return|return
name|FunctionAccessor
argument_list|(
name|P
operator|+
name|FunctionAccessorSize
argument_list|)
return|;
block|}
specifier|const
name|uint8_t
modifier|*
name|P
decl_stmt|;
block|}
empty_stmt|;
comment|/// Accessor for constants.
name|class
name|ConstantAccessor
block|{
name|friend
name|class
name|StackMapV1Parser
decl_stmt|;
name|public
label|:
comment|/// Return the value of this constant.
name|uint64_t
name|getValue
argument_list|()
specifier|const
block|{
return|return
name|read
operator|<
name|uint64_t
operator|>
operator|(
name|P
operator|)
return|;
block|}
name|private
label|:
name|ConstantAccessor
argument_list|(
specifier|const
name|uint8_t
operator|*
name|P
argument_list|)
operator|:
name|P
argument_list|(
argument|P
argument_list|)
block|{}
specifier|const
specifier|static
name|int
name|ConstantAccessorSize
operator|=
sizeof|sizeof
argument_list|(
name|uint64_t
argument_list|)
expr_stmt|;
name|ConstantAccessor
name|next
argument_list|()
specifier|const
block|{
return|return
name|ConstantAccessor
argument_list|(
name|P
operator|+
name|ConstantAccessorSize
argument_list|)
return|;
block|}
specifier|const
name|uint8_t
modifier|*
name|P
decl_stmt|;
block|}
empty_stmt|;
comment|// Forward-declare RecordAccessor so we can friend it below.
name|class
name|RecordAccessor
decl_stmt|;
name|enum
name|class
name|LocationKind
range|:
name|uint8_t
block|{
name|Register
operator|=
literal|1
block|,
name|Direct
operator|=
literal|2
block|,
name|Indirect
operator|=
literal|3
block|,
name|Constant
operator|=
literal|4
block|,
name|ConstantIndex
operator|=
literal|5
block|}
decl_stmt|;
comment|/// Accessor for location records.
name|class
name|LocationAccessor
block|{
name|friend
name|class
name|StackMapV1Parser
decl_stmt|;
name|friend
name|class
name|RecordAccessor
decl_stmt|;
name|public
label|:
comment|/// Get the Kind for this location.
name|LocationKind
name|getKind
argument_list|()
specifier|const
block|{
return|return
name|LocationKind
argument_list|(
name|P
index|[
name|KindOffset
index|]
argument_list|)
return|;
block|}
comment|/// Get the Dwarf register number for this location.
name|uint16_t
name|getDwarfRegNum
argument_list|()
specifier|const
block|{
return|return
name|read
operator|<
name|uint16_t
operator|>
operator|(
name|P
operator|+
name|DwarfRegNumOffset
operator|)
return|;
block|}
comment|/// Get the small-constant for this location. (Kind must be Constant).
name|uint32_t
name|getSmallConstant
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|getKind
argument_list|()
operator|==
name|LocationKind
operator|::
name|Constant
operator|&&
literal|"Not a small constant."
argument_list|)
block|;
return|return
name|read
operator|<
name|uint32_t
operator|>
operator|(
name|P
operator|+
name|SmallConstantOffset
operator|)
return|;
block|}
comment|/// Get the constant-index for this location. (Kind must be ConstantIndex).
name|uint32_t
name|getConstantIndex
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|getKind
argument_list|()
operator|==
name|LocationKind
operator|::
name|ConstantIndex
operator|&&
literal|"Not a constant-index."
argument_list|)
block|;
return|return
name|read
operator|<
name|uint32_t
operator|>
operator|(
name|P
operator|+
name|SmallConstantOffset
operator|)
return|;
block|}
comment|/// Get the offset for this location. (Kind must be Direct or Indirect).
name|int32_t
name|getOffset
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
operator|(
name|getKind
argument_list|()
operator|==
name|LocationKind
operator|::
name|Direct
operator|||
name|getKind
argument_list|()
operator|==
name|LocationKind
operator|::
name|Indirect
operator|)
operator|&&
literal|"Not direct or indirect."
argument_list|)
block|;
return|return
name|read
operator|<
name|int32_t
operator|>
operator|(
name|P
operator|+
name|SmallConstantOffset
operator|)
return|;
block|}
name|private
label|:
name|LocationAccessor
argument_list|(
specifier|const
name|uint8_t
operator|*
name|P
argument_list|)
operator|:
name|P
argument_list|(
argument|P
argument_list|)
block|{}
name|LocationAccessor
name|next
argument_list|()
specifier|const
block|{
return|return
name|LocationAccessor
argument_list|(
name|P
operator|+
name|LocationAccessorSize
argument_list|)
return|;
block|}
specifier|static
specifier|const
name|int
name|KindOffset
init|=
literal|0
decl_stmt|;
specifier|static
specifier|const
name|int
name|DwarfRegNumOffset
init|=
name|KindOffset
operator|+
sizeof|sizeof
argument_list|(
name|uint16_t
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|int
name|SmallConstantOffset
init|=
name|DwarfRegNumOffset
operator|+
sizeof|sizeof
argument_list|(
name|uint16_t
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|int
name|LocationAccessorSize
init|=
sizeof|sizeof
argument_list|(
name|uint64_t
argument_list|)
decl_stmt|;
specifier|const
name|uint8_t
modifier|*
name|P
decl_stmt|;
block|}
empty_stmt|;
comment|/// Accessor for stackmap live-out fields.
name|class
name|LiveOutAccessor
block|{
name|friend
name|class
name|StackMapV1Parser
decl_stmt|;
name|friend
name|class
name|RecordAccessor
decl_stmt|;
name|public
label|:
comment|/// Get the Dwarf register number for this live-out.
name|uint16_t
name|getDwarfRegNum
argument_list|()
specifier|const
block|{
return|return
name|read
operator|<
name|uint16_t
operator|>
operator|(
name|P
operator|+
name|DwarfRegNumOffset
operator|)
return|;
block|}
comment|/// Get the size in bytes of live [sub]register.
name|unsigned
name|getSizeInBytes
argument_list|()
specifier|const
block|{
return|return
name|read
operator|<
name|uint8_t
operator|>
operator|(
name|P
operator|+
name|SizeOffset
operator|)
return|;
block|}
name|private
label|:
name|LiveOutAccessor
argument_list|(
specifier|const
name|uint8_t
operator|*
name|P
argument_list|)
operator|:
name|P
argument_list|(
argument|P
argument_list|)
block|{}
name|LiveOutAccessor
name|next
argument_list|()
specifier|const
block|{
return|return
name|LiveOutAccessor
argument_list|(
name|P
operator|+
name|LiveOutAccessorSize
argument_list|)
return|;
block|}
specifier|static
specifier|const
name|int
name|DwarfRegNumOffset
init|=
literal|0
decl_stmt|;
specifier|static
specifier|const
name|int
name|SizeOffset
init|=
name|DwarfRegNumOffset
operator|+
sizeof|sizeof
argument_list|(
name|uint16_t
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|uint8_t
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|int
name|LiveOutAccessorSize
init|=
sizeof|sizeof
argument_list|(
name|uint32_t
argument_list|)
decl_stmt|;
specifier|const
name|uint8_t
modifier|*
name|P
decl_stmt|;
block|}
empty_stmt|;
comment|/// Accessor for stackmap records.
name|class
name|RecordAccessor
block|{
name|friend
name|class
name|StackMapV1Parser
decl_stmt|;
name|public
label|:
typedef|typedef
name|AccessorIterator
operator|<
name|LocationAccessor
operator|>
name|location_iterator
expr_stmt|;
typedef|typedef
name|AccessorIterator
operator|<
name|LiveOutAccessor
operator|>
name|liveout_iterator
expr_stmt|;
comment|/// Get the patchpoint/stackmap ID for this record.
name|uint64_t
name|getID
argument_list|()
specifier|const
block|{
return|return
name|read
operator|<
name|uint64_t
operator|>
operator|(
name|P
operator|+
name|PatchpointIDOffset
operator|)
return|;
block|}
comment|/// Get the instruction offset (from the start of the containing function)
comment|/// for this record.
name|uint32_t
name|getInstructionOffset
argument_list|()
specifier|const
block|{
return|return
name|read
operator|<
name|uint32_t
operator|>
operator|(
name|P
operator|+
name|InstructionOffsetOffset
operator|)
return|;
block|}
comment|/// Get the number of locations contained in this record.
name|uint16_t
name|getNumLocations
argument_list|()
specifier|const
block|{
return|return
name|read
operator|<
name|uint16_t
operator|>
operator|(
name|P
operator|+
name|NumLocationsOffset
operator|)
return|;
block|}
comment|/// Get the location with the given index.
name|LocationAccessor
name|getLocation
argument_list|(
name|unsigned
name|LocationIndex
argument_list|)
decl|const
block|{
name|unsigned
name|LocationOffset
init|=
name|LocationListOffset
operator|+
name|LocationIndex
operator|*
name|LocationSize
decl_stmt|;
return|return
name|LocationAccessor
argument_list|(
name|P
operator|+
name|LocationOffset
argument_list|)
return|;
block|}
comment|/// Begin iterator for locations.
name|location_iterator
name|location_begin
argument_list|()
specifier|const
block|{
return|return
name|location_iterator
argument_list|(
name|getLocation
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
comment|/// End iterator for locations.
name|location_iterator
name|location_end
argument_list|()
specifier|const
block|{
return|return
name|location_iterator
argument_list|(
name|getLocation
argument_list|(
name|getNumLocations
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/// Iterator range for locations.
name|iterator_range
operator|<
name|location_iterator
operator|>
name|locations
argument_list|()
specifier|const
block|{
return|return
name|make_range
argument_list|(
name|location_begin
argument_list|()
argument_list|,
name|location_end
argument_list|()
argument_list|)
return|;
block|}
comment|/// Get the number of liveouts contained in this record.
name|uint16_t
name|getNumLiveOuts
argument_list|()
specifier|const
block|{
return|return
name|read
operator|<
name|uint16_t
operator|>
operator|(
name|P
operator|+
name|getNumLiveOutsOffset
argument_list|()
operator|)
return|;
block|}
comment|/// Get the live-out with the given index.
name|LiveOutAccessor
name|getLiveOut
argument_list|(
name|unsigned
name|LiveOutIndex
argument_list|)
decl|const
block|{
name|unsigned
name|LiveOutOffset
init|=
name|getNumLiveOutsOffset
argument_list|()
operator|+
sizeof|sizeof
argument_list|(
name|uint16_t
argument_list|)
operator|+
name|LiveOutIndex
operator|*
name|LiveOutSize
decl_stmt|;
return|return
name|LiveOutAccessor
argument_list|(
name|P
operator|+
name|LiveOutOffset
argument_list|)
return|;
block|}
comment|/// Begin iterator for live-outs.
name|liveout_iterator
name|liveouts_begin
argument_list|()
specifier|const
block|{
return|return
name|liveout_iterator
argument_list|(
name|getLiveOut
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
comment|/// End iterator for live-outs.
name|liveout_iterator
name|liveouts_end
argument_list|()
specifier|const
block|{
return|return
name|liveout_iterator
argument_list|(
name|getLiveOut
argument_list|(
name|getNumLiveOuts
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/// Iterator range for live-outs.
name|iterator_range
operator|<
name|liveout_iterator
operator|>
name|liveouts
argument_list|()
specifier|const
block|{
return|return
name|make_range
argument_list|(
name|liveouts_begin
argument_list|()
argument_list|,
name|liveouts_end
argument_list|()
argument_list|)
return|;
block|}
name|private
label|:
name|RecordAccessor
argument_list|(
specifier|const
name|uint8_t
operator|*
name|P
argument_list|)
operator|:
name|P
argument_list|(
argument|P
argument_list|)
block|{}
name|unsigned
name|getNumLiveOutsOffset
argument_list|()
specifier|const
block|{
return|return
name|LocationListOffset
operator|+
name|LocationSize
operator|*
name|getNumLocations
argument_list|()
operator|+
sizeof|sizeof
argument_list|(
name|uint16_t
argument_list|)
return|;
block|}
name|unsigned
name|getSizeInBytes
argument_list|()
specifier|const
block|{
name|unsigned
name|RecordSize
operator|=
name|getNumLiveOutsOffset
argument_list|()
operator|+
sizeof|sizeof
argument_list|(
name|uint16_t
argument_list|)
operator|+
name|getNumLiveOuts
argument_list|()
operator|*
name|LiveOutSize
block|;
return|return
operator|(
name|RecordSize
operator|+
literal|7
operator|)
operator|&
operator|~
literal|0x7
return|;
block|}
name|RecordAccessor
name|next
argument_list|()
specifier|const
block|{
return|return
name|RecordAccessor
argument_list|(
name|P
operator|+
name|getSizeInBytes
argument_list|()
argument_list|)
return|;
block|}
specifier|static
specifier|const
name|unsigned
name|PatchpointIDOffset
init|=
literal|0
decl_stmt|;
specifier|static
specifier|const
name|unsigned
name|InstructionOffsetOffset
init|=
name|PatchpointIDOffset
operator|+
sizeof|sizeof
argument_list|(
name|uint64_t
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|unsigned
name|NumLocationsOffset
init|=
name|InstructionOffsetOffset
operator|+
sizeof|sizeof
argument_list|(
name|uint32_t
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|uint16_t
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|unsigned
name|LocationListOffset
init|=
name|NumLocationsOffset
operator|+
sizeof|sizeof
argument_list|(
name|uint16_t
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|unsigned
name|LocationSize
init|=
sizeof|sizeof
argument_list|(
name|uint64_t
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|unsigned
name|LiveOutSize
init|=
sizeof|sizeof
argument_list|(
name|uint32_t
argument_list|)
decl_stmt|;
specifier|const
name|uint8_t
modifier|*
name|P
decl_stmt|;
block|}
empty_stmt|;
comment|/// Construct a parser for a version-1 stackmap. StackMap data will be read
comment|/// from the given array.
name|StackMapV1Parser
argument_list|(
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|StackMapSection
argument_list|)
operator|:
name|StackMapSection
argument_list|(
argument|StackMapSection
argument_list|)
block|{
name|ConstantsListOffset
operator|=
name|FunctionListOffset
operator|+
name|getNumFunctions
argument_list|()
operator|*
name|FunctionSize
block|;
name|assert
argument_list|(
name|StackMapSection
index|[
literal|0
index|]
operator|==
literal|1
operator|&&
literal|"StackMapV1Parser can only parse version 1 stackmaps"
argument_list|)
block|;
name|unsigned
name|CurrentRecordOffset
operator|=
name|ConstantsListOffset
operator|+
name|getNumConstants
argument_list|()
operator|*
name|ConstantSize
block|;
for|for
control|(
name|unsigned
name|I
init|=
literal|0
init|,
name|E
init|=
name|getNumRecords
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
block|{
name|StackMapRecordOffsets
operator|.
name|push_back
argument_list|(
name|CurrentRecordOffset
argument_list|)
expr_stmt|;
name|CurrentRecordOffset
operator|+=
name|RecordAccessor
argument_list|(
operator|&
name|StackMapSection
index|[
name|CurrentRecordOffset
index|]
argument_list|)
operator|.
name|getSizeInBytes
argument_list|()
expr_stmt|;
block|}
block|}
typedef|typedef
name|AccessorIterator
operator|<
name|FunctionAccessor
operator|>
name|function_iterator
expr_stmt|;
typedef|typedef
name|AccessorIterator
operator|<
name|ConstantAccessor
operator|>
name|constant_iterator
expr_stmt|;
typedef|typedef
name|AccessorIterator
operator|<
name|RecordAccessor
operator|>
name|record_iterator
expr_stmt|;
comment|/// Get the version number of this stackmap. (Always returns 1).
name|unsigned
name|getVersion
argument_list|()
specifier|const
block|{
return|return
literal|1
return|;
block|}
comment|/// Get the number of functions in the stack map.
name|uint32_t
name|getNumFunctions
argument_list|()
specifier|const
block|{
return|return
name|read
operator|<
name|uint32_t
operator|>
operator|(
operator|&
name|StackMapSection
index|[
name|NumFunctionsOffset
index|]
operator|)
return|;
block|}
comment|/// Get the number of large constants in the stack map.
name|uint32_t
name|getNumConstants
argument_list|()
specifier|const
block|{
return|return
name|read
operator|<
name|uint32_t
operator|>
operator|(
operator|&
name|StackMapSection
index|[
name|NumConstantsOffset
index|]
operator|)
return|;
block|}
comment|/// Get the number of stackmap records in the stackmap.
name|uint32_t
name|getNumRecords
argument_list|()
specifier|const
block|{
return|return
name|read
operator|<
name|uint32_t
operator|>
operator|(
operator|&
name|StackMapSection
index|[
name|NumRecordsOffset
index|]
operator|)
return|;
block|}
comment|/// Return an FunctionAccessor for the given function index.
name|FunctionAccessor
name|getFunction
argument_list|(
name|unsigned
name|FunctionIndex
argument_list|)
decl|const
block|{
return|return
name|FunctionAccessor
argument_list|(
name|StackMapSection
operator|.
name|data
argument_list|()
operator|+
name|getFunctionOffset
argument_list|(
name|FunctionIndex
argument_list|)
argument_list|)
return|;
block|}
comment|/// Begin iterator for functions.
name|function_iterator
name|functions_begin
argument_list|()
specifier|const
block|{
return|return
name|function_iterator
argument_list|(
name|getFunction
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
comment|/// End iterator for functions.
name|function_iterator
name|functions_end
argument_list|()
specifier|const
block|{
return|return
name|function_iterator
argument_list|(
name|FunctionAccessor
argument_list|(
name|StackMapSection
operator|.
name|data
argument_list|()
operator|+
name|getFunctionOffset
argument_list|(
name|getNumFunctions
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/// Iterator range for functions.
name|iterator_range
operator|<
name|function_iterator
operator|>
name|functions
argument_list|()
specifier|const
block|{
return|return
name|make_range
argument_list|(
name|functions_begin
argument_list|()
argument_list|,
name|functions_end
argument_list|()
argument_list|)
return|;
block|}
comment|/// Return the large constant at the given index.
name|ConstantAccessor
name|getConstant
argument_list|(
name|unsigned
name|ConstantIndex
argument_list|)
decl|const
block|{
return|return
name|ConstantAccessor
argument_list|(
name|StackMapSection
operator|.
name|data
argument_list|()
operator|+
name|getConstantOffset
argument_list|(
name|ConstantIndex
argument_list|)
argument_list|)
return|;
block|}
comment|/// Begin iterator for constants.
name|constant_iterator
name|constants_begin
argument_list|()
specifier|const
block|{
return|return
name|constant_iterator
argument_list|(
name|getConstant
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
comment|/// End iterator for constants.
name|constant_iterator
name|constants_end
argument_list|()
specifier|const
block|{
return|return
name|constant_iterator
argument_list|(
name|ConstantAccessor
argument_list|(
name|StackMapSection
operator|.
name|data
argument_list|()
operator|+
name|getConstantOffset
argument_list|(
name|getNumConstants
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/// Iterator range for constants.
name|iterator_range
operator|<
name|constant_iterator
operator|>
name|constants
argument_list|()
specifier|const
block|{
return|return
name|make_range
argument_list|(
name|constants_begin
argument_list|()
argument_list|,
name|constants_end
argument_list|()
argument_list|)
return|;
block|}
comment|/// Return a RecordAccessor for the given record index.
name|RecordAccessor
name|getRecord
argument_list|(
name|unsigned
name|RecordIndex
argument_list|)
decl|const
block|{
name|std
operator|::
name|size_t
name|RecordOffset
operator|=
name|StackMapRecordOffsets
index|[
name|RecordIndex
index|]
expr_stmt|;
return|return
name|RecordAccessor
argument_list|(
name|StackMapSection
operator|.
name|data
argument_list|()
operator|+
name|RecordOffset
argument_list|)
return|;
block|}
comment|/// Begin iterator for records.
name|record_iterator
name|records_begin
argument_list|()
specifier|const
block|{
if|if
condition|(
name|getNumRecords
argument_list|()
operator|==
literal|0
condition|)
return|return
name|record_iterator
argument_list|(
name|RecordAccessor
argument_list|(
name|nullptr
argument_list|)
argument_list|)
return|;
return|return
name|record_iterator
argument_list|(
name|getRecord
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/// End iterator for records.
end_comment

begin_expr_stmt
name|record_iterator
name|records_end
argument_list|()
specifier|const
block|{
comment|// Records need to be handled specially, since we cache the start addresses
comment|// for them: We can't just compute the 1-past-the-end address, we have to
comment|// look at the last record and use the 'next' method.
if|if
condition|(
name|getNumRecords
argument_list|()
operator|==
literal|0
condition|)
return|return
name|record_iterator
argument_list|(
name|RecordAccessor
argument_list|(
name|nullptr
argument_list|)
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
name|record_iterator
argument_list|(
name|getRecord
argument_list|(
name|getNumRecords
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|next
argument_list|()
argument_list|)
return|;
end_return

begin_comment
unit|}
comment|/// Iterator range for records.
end_comment

begin_expr_stmt
unit|iterator_range
operator|<
name|record_iterator
operator|>
name|records
argument_list|()
specifier|const
block|{
return|return
name|make_range
argument_list|(
name|records_begin
argument_list|()
argument_list|,
name|records_end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
name|T
name|read
argument_list|(
argument|const uint8_t *P
argument_list|)
block|{
return|return
name|support
operator|::
name|endian
operator|::
name|read
operator|<
name|T
operator|,
name|Endianness
operator|,
literal|1
operator|>
operator|(
name|P
operator|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
specifier|static
specifier|const
name|unsigned
name|HeaderOffset
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|unsigned
name|NumFunctionsOffset
init|=
name|HeaderOffset
operator|+
sizeof|sizeof
argument_list|(
name|uint32_t
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|unsigned
name|NumConstantsOffset
init|=
name|NumFunctionsOffset
operator|+
sizeof|sizeof
argument_list|(
name|uint32_t
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|unsigned
name|NumRecordsOffset
init|=
name|NumConstantsOffset
operator|+
sizeof|sizeof
argument_list|(
name|uint32_t
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|unsigned
name|FunctionListOffset
init|=
name|NumRecordsOffset
operator|+
sizeof|sizeof
argument_list|(
name|uint32_t
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|unsigned
name|FunctionSize
init|=
literal|2
operator|*
sizeof|sizeof
argument_list|(
name|uint64_t
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|unsigned
name|ConstantSize
init|=
sizeof|sizeof
argument_list|(
name|uint64_t
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|std
operator|::
name|size_t
name|getFunctionOffset
argument_list|(
argument|unsigned FunctionIndex
argument_list|)
specifier|const
block|{
return|return
name|FunctionListOffset
operator|+
name|FunctionIndex
operator|*
name|FunctionSize
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|size_t
name|getConstantOffset
argument_list|(
argument|unsigned ConstantIndex
argument_list|)
specifier|const
block|{
return|return
name|ConstantsListOffset
operator|+
name|ConstantIndex
operator|*
name|ConstantSize
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|StackMapSection
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|unsigned
name|ConstantsListOffset
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|unsigned
operator|>
name|StackMapRecordOffsets
expr_stmt|;
end_expr_stmt

begin_endif
unit|};  }
endif|#
directive|endif
end_endif

end_unit

