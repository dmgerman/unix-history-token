begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- ELF.h - ELF object file implementation -------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares the ELFFile template class.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_OBJECT_ELF_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_OBJECT_ELF_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/PointerIntPair.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringSwitch.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/Triple.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/ELFTypes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/Error.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Casting.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ELF.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Endian.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ErrorHandling.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ErrorOr.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/MemoryBuffer.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/raw_ostream.h"
end_include

begin_include
include|#
directive|include
file|<algorithm>
end_include

begin_include
include|#
directive|include
file|<limits>
end_include

begin_include
include|#
directive|include
file|<utility>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|object
block|{
name|StringRef
name|getELFRelocationTypeName
parameter_list|(
name|uint32_t
name|Machine
parameter_list|,
name|uint32_t
name|Type
parameter_list|)
function_decl|;
comment|// Subclasses of ELFFile may need this for template instantiation
specifier|inline
name|std
operator|::
name|pair
operator|<
name|unsigned
name|char
operator|,
name|unsigned
name|char
operator|>
name|getElfArchType
argument_list|(
argument|StringRef Object
argument_list|)
block|{
if|if
condition|(
name|Object
operator|.
name|size
argument_list|()
operator|<
name|ELF
operator|::
name|EI_NIDENT
condition|)
return|return
name|std
operator|::
name|make_pair
argument_list|(
operator|(
name|uint8_t
operator|)
name|ELF
operator|::
name|ELFCLASSNONE
argument_list|,
operator|(
name|uint8_t
operator|)
name|ELF
operator|::
name|ELFDATANONE
argument_list|)
return|;
return|return
name|std
operator|::
name|make_pair
argument_list|(
operator|(
name|uint8_t
operator|)
name|Object
index|[
name|ELF
operator|::
name|EI_CLASS
index|]
argument_list|,
operator|(
name|uint8_t
operator|)
name|Object
index|[
name|ELF
operator|::
name|EI_DATA
index|]
argument_list|)
return|;
block|}
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|ELFFile
block|{
name|public
operator|:
name|LLVM_ELF_IMPORT_TYPES_ELFT
argument_list|(
argument|ELFT
argument_list|)
typedef|typedef
name|typename
name|std
operator|::
name|conditional
operator|<
name|ELFT
operator|::
name|Is64Bits
operator|,
name|uint64_t
operator|,
name|uint32_t
operator|>
operator|::
name|type
name|uintX_t
expr_stmt|;
comment|/// \brief Iterate over constant sized entities.
name|template
operator|<
name|class
name|EntT
operator|>
name|class
name|ELFEntityIterator
block|{
name|public
operator|:
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
typedef|typedef
name|EntT
name|value_type
typedef|;
typedef|typedef
name|std
operator|::
name|forward_iterator_tag
name|iterator_category
expr_stmt|;
typedef|typedef
name|value_type
modifier|&
name|reference
typedef|;
typedef|typedef
name|value_type
modifier|*
name|pointer
typedef|;
comment|/// \brief Default construct iterator.
name|ELFEntityIterator
argument_list|()
operator|:
name|EntitySize
argument_list|(
literal|0
argument_list|)
operator|,
name|Current
argument_list|(
argument|nullptr
argument_list|)
block|{}
name|ELFEntityIterator
argument_list|(
argument|uintX_t EntSize
argument_list|,
argument|const char *Start
argument_list|)
operator|:
name|EntitySize
argument_list|(
name|EntSize
argument_list|)
operator|,
name|Current
argument_list|(
argument|Start
argument_list|)
block|{}
name|reference
name|operator
operator|*
operator|(
operator|)
block|{
name|assert
argument_list|(
name|Current
operator|&&
literal|"Attempted to dereference an invalid iterator!"
argument_list|)
block|;
return|return
operator|*
name|reinterpret_cast
operator|<
name|pointer
operator|>
operator|(
name|Current
operator|)
return|;
block|}
name|pointer
name|operator
operator|->
expr|(
block|)
block|{
name|assert
argument_list|(
name|Current
operator|&&
literal|"Attempted to dereference an invalid iterator!"
argument_list|)
expr_stmt|;
return|return
name|reinterpret_cast
operator|<
name|pointer
operator|>
operator|(
name|Current
operator|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|ELFEntityIterator
operator|&
name|Other
operator|)
block|{
return|return
name|Current
operator|==
name|Other
operator|.
name|Current
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|ELFEntityIterator
operator|&
name|Other
operator|)
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|Other
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|ELFEntityIterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|assert
argument_list|(
name|Current
operator|&&
literal|"Attempted to increment an invalid iterator!"
argument_list|)
block|;
name|Current
operator|+=
name|EntitySize
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|ELFEntityIterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|ELFEntityIterator
name|Tmp
operator|=
operator|*
name|this
block|;
operator|++
operator|*
name|this
block|;
return|return
name|Tmp
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|ELFEntityIterator
modifier|&
name|operator
init|=
operator|(
specifier|const
name|ELFEntityIterator
operator|&
name|Other
operator|)
block|{
name|EntitySize
operator|=
name|Other
operator|.
name|EntitySize
block|;
name|Current
operator|=
name|Other
operator|.
name|Current
block|;
return|return
operator|*
name|this
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|difference_type
name|operator
operator|-
operator|(
specifier|const
name|ELFEntityIterator
operator|&
name|Other
operator|)
specifier|const
block|{
name|assert
argument_list|(
name|EntitySize
operator|==
name|Other
operator|.
name|EntitySize
operator|&&
literal|"Subtracting iterators of different EntitySize!"
argument_list|)
block|;
return|return
operator|(
name|Current
operator|-
name|Other
operator|.
name|Current
operator|)
operator|/
name|EntitySize
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|const
name|char
operator|*
name|get
argument_list|()
specifier|const
block|{
return|return
name|Current
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|uintX_t
name|getEntSize
argument_list|()
specifier|const
block|{
return|return
name|EntitySize
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|uintX_t
name|EntitySize
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|char
modifier|*
name|Current
decl_stmt|;
end_decl_stmt

begin_typedef
unit|};
typedef|typedef
name|Elf_Ehdr_Impl
operator|<
name|ELFT
operator|>
name|Elf_Ehdr
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|Elf_Shdr_Impl
operator|<
name|ELFT
operator|>
name|Elf_Shdr
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|Elf_Sym_Impl
operator|<
name|ELFT
operator|>
name|Elf_Sym
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|Elf_Dyn_Impl
operator|<
name|ELFT
operator|>
name|Elf_Dyn
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|Elf_Phdr_Impl
operator|<
name|ELFT
operator|>
name|Elf_Phdr
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|Elf_Rel_Impl
operator|<
name|ELFT
operator|,
name|false
operator|>
name|Elf_Rel
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|Elf_Rel_Impl
operator|<
name|ELFT
operator|,
name|true
operator|>
name|Elf_Rela
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|Elf_Verdef_Impl
operator|<
name|ELFT
operator|>
name|Elf_Verdef
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|Elf_Verdaux_Impl
operator|<
name|ELFT
operator|>
name|Elf_Verdaux
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|Elf_Verneed_Impl
operator|<
name|ELFT
operator|>
name|Elf_Verneed
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|Elf_Vernaux_Impl
operator|<
name|ELFT
operator|>
name|Elf_Vernaux
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|Elf_Versym_Impl
operator|<
name|ELFT
operator|>
name|Elf_Versym
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|ELFEntityIterator
operator|<
specifier|const
name|Elf_Dyn
operator|>
name|Elf_Dyn_Iter
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|iterator_range
operator|<
name|Elf_Dyn_Iter
operator|>
name|Elf_Dyn_Range
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|ELFEntityIterator
operator|<
specifier|const
name|Elf_Rela
operator|>
name|Elf_Rela_Iter
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|ELFEntityIterator
operator|<
specifier|const
name|Elf_Rel
operator|>
name|Elf_Rel_Iter
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|ELFEntityIterator
operator|<
specifier|const
name|Elf_Shdr
operator|>
name|Elf_Shdr_Iter
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|iterator_range
operator|<
name|Elf_Shdr_Iter
operator|>
name|Elf_Shdr_Range
expr_stmt|;
end_typedef

begin_comment
comment|/// \brief Archive files are 2 byte aligned, so we need this for
end_comment

begin_comment
comment|///     PointerIntPair to work.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|ArchivePointerTypeTraits
block|{
name|public
operator|:
specifier|static
specifier|inline
specifier|const
name|void
operator|*
name|getAsVoidPointer
argument_list|(
argument|T *P
argument_list|)
block|{
return|return
name|P
return|;
block|}
specifier|static
specifier|inline
name|T
operator|*
name|getFromVoidPointer
argument_list|(
argument|const void *P
argument_list|)
block|{
return|return
name|static_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|P
operator|)
return|;
block|}
end_expr_stmt

begin_enum
enum|enum
block|{
name|NumLowBitsAvailable
init|=
literal|1
block|}
enum|;
end_enum

begin_decl_stmt
unit|};
name|class
name|Elf_Sym_Iter
block|{
name|public
label|:
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
typedef|typedef
specifier|const
name|Elf_Sym
name|value_type
typedef|;
typedef|typedef
name|std
operator|::
name|random_access_iterator_tag
name|iterator_category
expr_stmt|;
typedef|typedef
name|value_type
modifier|&
name|reference
typedef|;
typedef|typedef
name|value_type
modifier|*
name|pointer
typedef|;
comment|/// \brief Default construct iterator.
name|Elf_Sym_Iter
argument_list|()
operator|:
name|EntitySize
argument_list|(
literal|0
argument_list|)
operator|,
name|Current
argument_list|(
literal|0
argument_list|,
argument|false
argument_list|)
block|{}
name|Elf_Sym_Iter
argument_list|(
argument|uintX_t EntSize
argument_list|,
argument|const char *Start
argument_list|,
argument|bool IsDynamic
argument_list|)
operator|:
name|EntitySize
argument_list|(
name|EntSize
argument_list|)
operator|,
name|Current
argument_list|(
argument|Start
argument_list|,
argument|IsDynamic
argument_list|)
block|{}
name|reference
name|operator
operator|*
operator|(
operator|)
block|{
name|assert
argument_list|(
name|Current
operator|.
name|getPointer
argument_list|()
operator|&&
literal|"Attempted to dereference an invalid iterator!"
argument_list|)
block|;
return|return
operator|*
name|reinterpret_cast
operator|<
name|pointer
operator|>
operator|(
name|Current
operator|.
name|getPointer
argument_list|()
operator|)
return|;
block|}
name|pointer
name|operator
operator|->
expr|(
block|)
block|{
name|assert
argument_list|(
name|Current
operator|.
name|getPointer
argument_list|()
operator|&&
literal|"Attempted to dereference an invalid iterator!"
argument_list|)
expr_stmt|;
return|return
name|reinterpret_cast
operator|<
name|pointer
operator|>
operator|(
name|Current
operator|.
name|getPointer
argument_list|()
operator|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|Elf_Sym_Iter
operator|&
name|Other
operator|)
block|{
return|return
name|Current
operator|==
name|Other
operator|.
name|Current
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|Elf_Sym_Iter
operator|&
name|Other
operator|)
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|Other
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|Elf_Sym_Iter
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|assert
argument_list|(
name|Current
operator|.
name|getPointer
argument_list|()
operator|&&
literal|"Attempted to increment an invalid iterator!"
argument_list|)
block|;
name|Current
operator|.
name|setPointer
argument_list|(
name|Current
operator|.
name|getPointer
argument_list|()
operator|+
name|EntitySize
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|Elf_Sym_Iter
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|Elf_Sym_Iter
name|Tmp
operator|=
operator|*
name|this
block|;
operator|++
operator|*
name|this
block|;
return|return
name|Tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|Elf_Sym_Iter
name|operator
operator|+
operator|(
name|difference_type
name|Dist
operator|)
block|{
name|assert
argument_list|(
name|Current
operator|.
name|getPointer
argument_list|()
operator|&&
literal|"Attempted to increment an invalid iterator!"
argument_list|)
block|;
name|Current
operator|.
name|setPointer
argument_list|(
name|Current
operator|.
name|getPointer
argument_list|()
operator|+
name|EntitySize
operator|*
name|Dist
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|Elf_Sym_Iter
modifier|&
name|operator
init|=
operator|(
specifier|const
name|Elf_Sym_Iter
operator|&
name|Other
operator|)
block|{
name|EntitySize
operator|=
name|Other
operator|.
name|EntitySize
block|;
name|Current
operator|=
name|Other
operator|.
name|Current
block|;
return|return
operator|*
name|this
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|difference_type
name|operator
operator|-
operator|(
specifier|const
name|Elf_Sym_Iter
operator|&
name|Other
operator|)
specifier|const
block|{
name|assert
argument_list|(
name|EntitySize
operator|==
name|Other
operator|.
name|EntitySize
operator|&&
literal|"Subtracting iterators of different EntitySize!"
argument_list|)
block|;
return|return
operator|(
name|Current
operator|.
name|getPointer
argument_list|()
operator|-
name|Other
operator|.
name|Current
operator|.
name|getPointer
argument_list|()
operator|)
operator|/
name|EntitySize
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|const
name|char
operator|*
name|get
argument_list|()
specifier|const
block|{
return|return
name|Current
operator|.
name|getPointer
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isDynamic
argument_list|()
specifier|const
block|{
return|return
name|Current
operator|.
name|getInt
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|uintX_t
name|getEntSize
argument_list|()
specifier|const
block|{
return|return
name|EntitySize
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|uintX_t
name|EntitySize
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|PointerIntPair
operator|<
specifier|const
name|char
operator|*
operator|,
literal|1
operator|,
name|bool
operator|,
name|ArchivePointerTypeTraits
operator|<
specifier|const
name|char
operator|>
expr|>
name|Current
expr_stmt|;
end_expr_stmt

begin_label
unit|};
name|private
label|:
end_label

begin_typedef
typedef|typedef
name|SmallVector
operator|<
specifier|const
name|Elf_Shdr
operator|*
operator|,
literal|2
operator|>
name|Sections_t
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|DenseMap
operator|<
name|unsigned
operator|,
name|unsigned
operator|>
name|IndexMap_t
expr_stmt|;
end_typedef

begin_decl_stmt
name|StringRef
name|Buf
decl_stmt|;
end_decl_stmt

begin_expr_stmt
specifier|const
name|uint8_t
operator|*
name|base
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|uint8_t
operator|*
operator|>
operator|(
name|Buf
operator|.
name|data
argument_list|()
operator|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
specifier|const
name|Elf_Ehdr
modifier|*
name|Header
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Elf_Shdr
modifier|*
name|SectionHeaderTable
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Elf_Shdr
modifier|*
name|dot_shstrtab_sec
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Section header string table.
end_comment

begin_decl_stmt
specifier|const
name|Elf_Shdr
modifier|*
name|dot_strtab_sec
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Symbol header string table.
end_comment

begin_decl_stmt
specifier|const
name|Elf_Shdr
modifier|*
name|dot_symtab_sec
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Symbol table section.
end_comment

begin_decl_stmt
specifier|const
name|Elf_Shdr
modifier|*
name|SymbolTableSectionHeaderIndex
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|DenseMap
operator|<
specifier|const
name|Elf_Sym
operator|*
operator|,
name|ELF
operator|::
name|Elf64_Word
operator|>
name|ExtendedSymbolTable
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|const
name|Elf_Shdr
modifier|*
name|dot_gnu_version_sec
decl_stmt|;
end_decl_stmt

begin_comment
comment|// .gnu.version
end_comment

begin_decl_stmt
specifier|const
name|Elf_Shdr
modifier|*
name|dot_gnu_version_r_sec
decl_stmt|;
end_decl_stmt

begin_comment
comment|// .gnu.version_r
end_comment

begin_decl_stmt
specifier|const
name|Elf_Shdr
modifier|*
name|dot_gnu_version_d_sec
decl_stmt|;
end_decl_stmt

begin_comment
comment|// .gnu.version_d
end_comment

begin_comment
comment|/// \brief Represents a region described by entries in the .dynamic table.
end_comment

begin_struct
struct|struct
name|DynRegionInfo
block|{
name|DynRegionInfo
argument_list|()
operator|:
name|Addr
argument_list|(
name|nullptr
argument_list|)
operator|,
name|Size
argument_list|(
literal|0
argument_list|)
operator|,
name|EntSize
argument_list|(
literal|0
argument_list|)
block|{}
comment|/// \brief Address in current address space.
specifier|const
name|void
operator|*
name|Addr
expr_stmt|;
comment|/// \brief Size in bytes of the region.
name|uintX_t
name|Size
decl_stmt|;
comment|/// \brief Size of each entity in the region.
name|uintX_t
name|EntSize
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
name|DynRegionInfo
name|DynamicRegion
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|DynRegionInfo
name|DynHashRegion
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|DynRegionInfo
name|DynStrRegion
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|DynRegionInfo
name|DynSymRegion
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Pointer to SONAME entry in dynamic string table
end_comment

begin_comment
comment|// This is set the first time getLoadName is called.
end_comment

begin_decl_stmt
name|mutable
specifier|const
name|char
modifier|*
name|dt_soname
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Records for each version index the corresponding Verdef or Vernaux entry.
end_comment

begin_comment
comment|// This is filled the first time LoadVersionMap() is called.
end_comment

begin_decl_stmt
name|class
name|VersionMapEntry
range|:
name|public
name|PointerIntPair
operator|<
specifier|const
name|void
operator|*
decl_stmt|, 1>
block|{
name|public
label|:
comment|// If the integer is 0, this is an Elf_Verdef*.
comment|// If the integer is 1, this is an Elf_Vernaux*.
name|VersionMapEntry
argument_list|()
operator|:
name|PointerIntPair
operator|<
specifier|const
name|void
operator|*
operator|,
literal|1
operator|>
operator|(
name|nullptr
operator|,
literal|0
operator|)
block|{ }
name|VersionMapEntry
argument_list|(
specifier|const
name|Elf_Verdef
operator|*
name|verdef
argument_list|)
operator|:
name|PointerIntPair
operator|<
specifier|const
name|void
operator|*
operator|,
literal|1
operator|>
operator|(
name|verdef
operator|,
literal|0
operator|)
block|{ }
name|VersionMapEntry
argument_list|(
specifier|const
name|Elf_Vernaux
operator|*
name|vernaux
argument_list|)
operator|:
name|PointerIntPair
operator|<
specifier|const
name|void
operator|*
operator|,
literal|1
operator|>
operator|(
name|vernaux
operator|,
literal|1
operator|)
block|{ }
name|bool
name|isNull
argument_list|()
specifier|const
block|{
return|return
name|getPointer
argument_list|()
operator|==
name|nullptr
return|;
block|}
name|bool
name|isVerdef
argument_list|()
specifier|const
block|{
return|return
operator|!
name|isNull
argument_list|()
operator|&&
name|getInt
argument_list|()
operator|==
literal|0
return|;
block|}
name|bool
name|isVernaux
argument_list|()
specifier|const
block|{
return|return
operator|!
name|isNull
argument_list|()
operator|&&
name|getInt
argument_list|()
operator|==
literal|1
return|;
block|}
specifier|const
name|Elf_Verdef
operator|*
name|getVerdef
argument_list|()
specifier|const
block|{
return|return
name|isVerdef
argument_list|()
operator|?
operator|(
specifier|const
name|Elf_Verdef
operator|*
operator|)
name|getPointer
argument_list|()
operator|:
name|nullptr
return|;
block|}
specifier|const
name|Elf_Vernaux
operator|*
name|getVernaux
argument_list|()
specifier|const
block|{
return|return
name|isVernaux
argument_list|()
operator|?
operator|(
specifier|const
name|Elf_Vernaux
operator|*
operator|)
name|getPointer
argument_list|()
operator|:
name|nullptr
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|mutable
name|SmallVector
operator|<
name|VersionMapEntry
operator|,
literal|16
operator|>
name|VersionMap
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|LoadVersionDefs
argument_list|(
specifier|const
name|Elf_Shdr
operator|*
name|sec
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|LoadVersionNeeds
argument_list|(
specifier|const
name|Elf_Shdr
operator|*
name|ec
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|void
name|LoadVersionMap
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|const
name|T
operator|*
name|getEntry
argument_list|(
argument|uint32_t Section
argument_list|,
argument|uint32_t Entry
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|const
name|T
operator|*
name|getEntry
argument_list|(
argument|const Elf_Shdr *Section
argument_list|,
argument|uint32_t Entry
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|const
name|char
modifier|*
name|getString
argument_list|(
name|uint32_t
name|section
argument_list|,
name|uint32_t
name|offset
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|char
modifier|*
name|getString
argument_list|(
specifier|const
name|Elf_Shdr
operator|*
name|section
argument_list|,
name|uint32_t
name|offset
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|char
modifier|*
name|getDynamicString
argument_list|(
name|uintX_t
name|Offset
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|ErrorOr
operator|<
name|StringRef
operator|>
name|getSymbolVersion
argument_list|(
argument|const Elf_Shdr *section
argument_list|,
argument|const Elf_Sym *Symb
argument_list|,
argument|bool&IsDefault
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|VerifyStrTab
argument_list|(
specifier|const
name|Elf_Shdr
operator|*
name|sh
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|StringRef
name|getRelocationTypeName
argument_list|(
name|uint32_t
name|Type
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|getRelocationTypeName
argument_list|(
name|uint32_t
name|Type
argument_list|,
name|SmallVectorImpl
operator|<
name|char
operator|>
operator|&
name|Result
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_comment
comment|/// \brief Get the symbol table section and symbol for a given relocation.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|RelT
operator|>
name|std
operator|::
name|pair
operator|<
specifier|const
name|Elf_Shdr
operator|*
operator|,
specifier|const
name|Elf_Sym
operator|*
operator|>
name|getRelocationSymbol
argument_list|(
argument|const Elf_Shdr *RelSec
argument_list|,
argument|const RelT *Rel
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_macro
name|ELFFile
argument_list|(
argument|StringRef Object
argument_list|,
argument|std::error_code&ec
argument_list|)
end_macro

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|bool
name|isMipsELF64
argument_list|()
specifier|const
block|{
return|return
name|Header
operator|->
name|e_machine
operator|==
name|ELF
operator|::
name|EM_MIPS
operator|&&
name|Header
operator|->
name|getFileClass
argument_list|()
operator|==
name|ELF
operator|::
name|ELFCLASS64
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isMips64EL
argument_list|()
specifier|const
block|{
return|return
name|Header
operator|->
name|e_machine
operator|==
name|ELF
operator|::
name|EM_MIPS
operator|&&
name|Header
operator|->
name|getFileClass
argument_list|()
operator|==
name|ELF
operator|::
name|ELFCLASS64
operator|&&
name|Header
operator|->
name|getDataEncoding
argument_list|()
operator|==
name|ELF
operator|::
name|ELFDATA2LSB
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|Elf_Shdr_Iter
name|begin_sections
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Elf_Shdr_Iter
name|end_sections
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Elf_Shdr_Range
name|sections
argument_list|()
specifier|const
block|{
return|return
name|make_range
argument_list|(
name|begin_sections
argument_list|()
argument_list|,
name|end_sections
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|Elf_Sym_Iter
name|begin_symbols
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Elf_Sym_Iter
name|end_symbols
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Elf_Dyn_Iter
name|begin_dynamic_table
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_comment
comment|/// \param NULLEnd use one past the first DT_NULL entry as the end instead of
end_comment

begin_comment
comment|/// the section size.
end_comment

begin_decl_stmt
name|Elf_Dyn_Iter
name|end_dynamic_table
argument_list|(
name|bool
name|NULLEnd
operator|=
name|false
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|Elf_Dyn_Range
name|dynamic_table
argument_list|(
name|bool
name|NULLEnd
operator|=
name|false
argument_list|)
decl|const
block|{
return|return
name|make_range
argument_list|(
name|begin_dynamic_table
argument_list|()
argument_list|,
name|end_dynamic_table
argument_list|(
name|NULLEnd
argument_list|)
argument_list|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|Elf_Sym_Iter
name|begin_dynamic_symbols
argument_list|()
specifier|const
block|{
if|if
condition|(
name|DynSymRegion
operator|.
name|Addr
condition|)
return|return
name|Elf_Sym_Iter
argument_list|(
name|DynSymRegion
operator|.
name|EntSize
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|DynSymRegion
operator|.
name|Addr
argument_list|,
name|true
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
name|Elf_Sym_Iter
argument_list|(
literal|0
argument_list|,
name|nullptr
argument_list|,
name|true
argument_list|)
return|;
end_return

begin_macro
unit|}    Elf_Sym_Iter
name|end_dynamic_symbols
argument_list|()
end_macro

begin_expr_stmt
specifier|const
block|{
if|if
condition|(
name|DynSymRegion
operator|.
name|Addr
condition|)
return|return
name|Elf_Sym_Iter
argument_list|(
name|DynSymRegion
operator|.
name|EntSize
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|DynSymRegion
operator|.
name|Addr
operator|+
name|DynSymRegion
operator|.
name|Size
argument_list|,
name|true
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
name|Elf_Sym_Iter
argument_list|(
literal|0
argument_list|,
name|nullptr
argument_list|,
name|true
argument_list|)
return|;
end_return

begin_macro
unit|}    Elf_Rela_Iter
name|begin_rela
argument_list|(
argument|const Elf_Shdr *sec
argument_list|)
end_macro

begin_expr_stmt
specifier|const
block|{
return|return
name|Elf_Rela_Iter
argument_list|(
name|sec
operator|->
name|sh_entsize
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
operator|(
name|base
argument_list|()
operator|+
name|sec
operator|->
name|sh_offset
operator|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|Elf_Rela_Iter
name|end_rela
argument_list|(
specifier|const
name|Elf_Shdr
operator|*
name|sec
argument_list|)
decl|const
block|{
return|return
name|Elf_Rela_Iter
argument_list|(
name|sec
operator|->
name|sh_entsize
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
operator|(
name|base
argument_list|()
operator|+
name|sec
operator|->
name|sh_offset
operator|+
name|sec
operator|->
name|sh_size
operator|)
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|Elf_Rel_Iter
name|begin_rel
argument_list|(
specifier|const
name|Elf_Shdr
operator|*
name|sec
argument_list|)
decl|const
block|{
return|return
name|Elf_Rel_Iter
argument_list|(
name|sec
operator|->
name|sh_entsize
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
operator|(
name|base
argument_list|()
operator|+
name|sec
operator|->
name|sh_offset
operator|)
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|Elf_Rel_Iter
name|end_rel
argument_list|(
specifier|const
name|Elf_Shdr
operator|*
name|sec
argument_list|)
decl|const
block|{
return|return
name|Elf_Rel_Iter
argument_list|(
name|sec
operator|->
name|sh_entsize
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
operator|(
name|base
argument_list|()
operator|+
name|sec
operator|->
name|sh_offset
operator|+
name|sec
operator|->
name|sh_size
operator|)
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/// \brief Iterate over program header table.
end_comment

begin_typedef
typedef|typedef
name|ELFEntityIterator
operator|<
specifier|const
name|Elf_Phdr
operator|>
name|Elf_Phdr_Iter
expr_stmt|;
end_typedef

begin_expr_stmt
name|Elf_Phdr_Iter
name|begin_program_headers
argument_list|()
specifier|const
block|{
return|return
name|Elf_Phdr_Iter
argument_list|(
name|Header
operator|->
name|e_phentsize
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|base
argument_list|()
operator|+
name|Header
operator|->
name|e_phoff
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|Elf_Phdr_Iter
name|end_program_headers
argument_list|()
specifier|const
block|{
return|return
name|Elf_Phdr_Iter
argument_list|(
name|Header
operator|->
name|e_phentsize
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|base
argument_list|()
operator|+
name|Header
operator|->
name|e_phoff
operator|+
operator|(
name|Header
operator|->
name|e_phnum
operator|*
name|Header
operator|->
name|e_phentsize
operator|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|uint64_t
name|getNumSections
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|uintX_t
name|getStringTableIndex
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|ELF
operator|::
name|Elf64_Word
name|getSymbolTableIndex
argument_list|(
argument|const Elf_Sym *symb
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|Elf_Ehdr
operator|*
name|getHeader
argument_list|()
specifier|const
block|{
return|return
name|Header
return|;
block|}
end_expr_stmt

begin_decl_stmt
specifier|const
name|Elf_Shdr
modifier|*
name|getSection
argument_list|(
specifier|const
name|Elf_Sym
operator|*
name|symb
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Elf_Shdr
modifier|*
name|getSection
argument_list|(
name|uint32_t
name|Index
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Elf_Sym
modifier|*
name|getSymbol
argument_list|(
name|uint32_t
name|index
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|ErrorOr
operator|<
name|StringRef
operator|>
name|getSymbolName
argument_list|(
argument|Elf_Sym_Iter Sym
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_comment
comment|/// \brief Get the name of \p Symb.
end_comment

begin_comment
comment|/// \param SymTab The symbol table section \p Symb is contained in.
end_comment

begin_comment
comment|/// \param Symb The symbol to get the name of.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// \p SymTab is used to lookup the string table to use to get the symbol's
end_comment

begin_comment
comment|/// name.
end_comment

begin_expr_stmt
name|ErrorOr
operator|<
name|StringRef
operator|>
name|getSymbolName
argument_list|(
argument|const Elf_Shdr *SymTab
argument_list|,
argument|const Elf_Sym *Symb
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|ErrorOr
operator|<
name|StringRef
operator|>
name|getSectionName
argument_list|(
argument|const Elf_Shdr *Section
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|uint64_t
name|getSymbolIndex
argument_list|(
specifier|const
name|Elf_Sym
operator|*
name|sym
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|ErrorOr
operator|<
name|ArrayRef
operator|<
name|uint8_t
operator|>
expr|>
name|getSectionContents
argument_list|(
argument|const Elf_Shdr *Sec
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|StringRef
name|getLoadName
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_comment
unit|};
comment|// Use an alignment of 2 for the typedefs since that is the worst case for
end_comment

begin_comment
comment|// ELF files in archives.
end_comment

begin_typedef
typedef|typedef
name|ELFFile
operator|<
name|ELFType
operator|<
name|support
operator|::
name|little
operator|,
literal|2
operator|,
name|false
operator|>
expr|>
name|ELF32LEFile
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|ELFFile
operator|<
name|ELFType
operator|<
name|support
operator|::
name|little
operator|,
literal|2
operator|,
name|true
operator|>
expr|>
name|ELF64LEFile
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|ELFFile
operator|<
name|ELFType
operator|<
name|support
operator|::
name|big
operator|,
literal|2
operator|,
name|false
operator|>
expr|>
name|ELF32BEFile
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|ELFFile
operator|<
name|ELFType
operator|<
name|support
operator|::
name|big
operator|,
literal|2
operator|,
name|true
operator|>
expr|>
name|ELF64BEFile
expr_stmt|;
end_typedef

begin_comment
comment|// Iterate through the version definitions, and place each Elf_Verdef
end_comment

begin_comment
comment|// in the VersionMap according to its index.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|void
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|LoadVersionDefs
argument_list|(
argument|const Elf_Shdr *sec
argument_list|)
specifier|const
block|{
name|unsigned
name|vd_size
operator|=
name|sec
operator|->
name|sh_size
block|;
comment|// Size of section in bytes
name|unsigned
name|vd_count
operator|=
name|sec
operator|->
name|sh_info
block|;
comment|// Number of Verdef entries
specifier|const
name|char
operator|*
name|sec_start
operator|=
operator|(
specifier|const
name|char
operator|*
operator|)
name|base
argument_list|()
operator|+
name|sec
operator|->
name|sh_offset
block|;
specifier|const
name|char
operator|*
name|sec_end
operator|=
name|sec_start
operator|+
name|vd_size
block|;
comment|// The first Verdef entry is at the start of the section.
specifier|const
name|char
operator|*
name|p
operator|=
name|sec_start
block|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vd_count
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|p
operator|+
sizeof|sizeof
argument_list|(
name|Elf_Verdef
argument_list|)
operator|>
name|sec_end
condition|)
name|report_fatal_error
argument_list|(
literal|"Section ended unexpectedly while scanning "
literal|"version definitions."
argument_list|)
expr_stmt|;
specifier|const
name|Elf_Verdef
modifier|*
name|vd
init|=
name|reinterpret_cast
operator|<
specifier|const
name|Elf_Verdef
operator|*
operator|>
operator|(
name|p
operator|)
decl_stmt|;
if|if
condition|(
name|vd
operator|->
name|vd_version
operator|!=
name|ELF
operator|::
name|VER_DEF_CURRENT
condition|)
name|report_fatal_error
argument_list|(
literal|"Unexpected verdef version"
argument_list|)
expr_stmt|;
name|size_t
name|index
init|=
name|vd
operator|->
name|vd_ndx
operator|&
name|ELF
operator|::
name|VERSYM_VERSION
decl_stmt|;
if|if
condition|(
name|index
operator|>=
name|VersionMap
operator|.
name|size
argument_list|()
condition|)
name|VersionMap
operator|.
name|resize
argument_list|(
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
name|VersionMap
index|[
name|index
index|]
operator|=
name|VersionMapEntry
argument_list|(
name|vd
argument_list|)
expr_stmt|;
name|p
operator|+=
name|vd
operator|->
name|vd_next
expr_stmt|;
block|}
end_expr_stmt

begin_comment
unit|}
comment|// Iterate through the versions needed section, and place each Elf_Vernaux
end_comment

begin_comment
comment|// in the VersionMap according to its index.
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|ELFT
operator|>
name|void
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|LoadVersionNeeds
argument_list|(
argument|const Elf_Shdr *sec
argument_list|)
specifier|const
block|{
name|unsigned
name|vn_size
operator|=
name|sec
operator|->
name|sh_size
block|;
comment|// Size of section in bytes
name|unsigned
name|vn_count
operator|=
name|sec
operator|->
name|sh_info
block|;
comment|// Number of Verneed entries
specifier|const
name|char
operator|*
name|sec_start
operator|=
operator|(
specifier|const
name|char
operator|*
operator|)
name|base
argument_list|()
operator|+
name|sec
operator|->
name|sh_offset
block|;
specifier|const
name|char
operator|*
name|sec_end
operator|=
name|sec_start
operator|+
name|vn_size
block|;
comment|// The first Verneed entry is at the start of the section.
specifier|const
name|char
operator|*
name|p
operator|=
name|sec_start
block|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vn_count
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|p
operator|+
sizeof|sizeof
argument_list|(
name|Elf_Verneed
argument_list|)
operator|>
name|sec_end
condition|)
name|report_fatal_error
argument_list|(
literal|"Section ended unexpectedly while scanning "
literal|"version needed records."
argument_list|)
expr_stmt|;
specifier|const
name|Elf_Verneed
modifier|*
name|vn
init|=
name|reinterpret_cast
operator|<
specifier|const
name|Elf_Verneed
operator|*
operator|>
operator|(
name|p
operator|)
decl_stmt|;
if|if
condition|(
name|vn
operator|->
name|vn_version
operator|!=
name|ELF
operator|::
name|VER_NEED_CURRENT
condition|)
name|report_fatal_error
argument_list|(
literal|"Unexpected verneed version"
argument_list|)
expr_stmt|;
comment|// Iterate through the Vernaux entries
specifier|const
name|char
modifier|*
name|paux
init|=
name|p
operator|+
name|vn
operator|->
name|vn_aux
decl_stmt|;
for|for
control|(
name|unsigned
name|j
init|=
literal|0
init|;
name|j
operator|<
name|vn
operator|->
name|vn_cnt
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|paux
operator|+
sizeof|sizeof
argument_list|(
name|Elf_Vernaux
argument_list|)
operator|>
name|sec_end
condition|)
name|report_fatal_error
argument_list|(
literal|"Section ended unexpected while scanning auxiliary "
literal|"version needed records."
argument_list|)
expr_stmt|;
specifier|const
name|Elf_Vernaux
modifier|*
name|vna
init|=
name|reinterpret_cast
operator|<
specifier|const
name|Elf_Vernaux
operator|*
operator|>
operator|(
name|paux
operator|)
decl_stmt|;
name|size_t
name|index
init|=
name|vna
operator|->
name|vna_other
operator|&
name|ELF
operator|::
name|VERSYM_VERSION
decl_stmt|;
if|if
condition|(
name|index
operator|>=
name|VersionMap
operator|.
name|size
argument_list|()
condition|)
name|VersionMap
operator|.
name|resize
argument_list|(
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
name|VersionMap
index|[
name|index
index|]
operator|=
name|VersionMapEntry
argument_list|(
name|vna
argument_list|)
expr_stmt|;
name|paux
operator|+=
name|vna
operator|->
name|vna_next
expr_stmt|;
block|}
name|p
operator|+=
name|vn
operator|->
name|vn_next
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|} }
name|template
operator|<
name|class
name|ELFT
operator|>
name|void
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|LoadVersionMap
argument_list|()
specifier|const
block|{
comment|// If there is no dynamic symtab or version table, there is nothing to do.
if|if
condition|(
operator|!
name|DynSymRegion
operator|.
name|Addr
operator|||
operator|!
name|dot_gnu_version_sec
condition|)
return|return;
end_expr_stmt

begin_comment
comment|// Has the VersionMap already been loaded?
end_comment

begin_if
if|if
condition|(
name|VersionMap
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
return|return;
end_if

begin_comment
comment|// The first two version indexes are reserved.
end_comment

begin_comment
comment|// Index 0 is LOCAL, index 1 is GLOBAL.
end_comment

begin_expr_stmt
name|VersionMap
operator|.
name|push_back
argument_list|(
name|VersionMapEntry
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|VersionMap
operator|.
name|push_back
argument_list|(
name|VersionMapEntry
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|dot_gnu_version_d_sec
condition|)
name|LoadVersionDefs
argument_list|(
name|dot_gnu_version_d_sec
argument_list|)
expr_stmt|;
end_if

begin_if
if|if
condition|(
name|dot_gnu_version_r_sec
condition|)
name|LoadVersionNeeds
argument_list|(
name|dot_gnu_version_r_sec
argument_list|)
expr_stmt|;
end_if

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|ELF
operator|::
name|Elf64_Word
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getSymbolTableIndex
argument_list|(
argument|const Elf_Sym *symb
argument_list|)
specifier|const
block|{
if|if
condition|(
name|symb
operator|->
name|st_shndx
operator|==
name|ELF
operator|::
name|SHN_XINDEX
condition|)
return|return
name|ExtendedSymbolTable
operator|.
name|lookup
argument_list|(
name|symb
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
name|symb
operator|->
name|st_shndx
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
specifier|const
name|typename
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Shdr
operator|*
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getSection
argument_list|(
argument|const Elf_Sym *symb
argument_list|)
specifier|const
block|{
if|if
condition|(
name|symb
operator|->
name|st_shndx
operator|==
name|ELF
operator|::
name|SHN_XINDEX
condition|)
return|return
name|getSection
argument_list|(
name|ExtendedSymbolTable
operator|.
name|lookup
argument_list|(
name|symb
argument_list|)
argument_list|)
return|;
end_expr_stmt

begin_if
if|if
condition|(
name|symb
operator|->
name|st_shndx
operator|>=
name|ELF
operator|::
name|SHN_LORESERVE
condition|)
return|return
name|nullptr
return|;
end_if

begin_return
return|return
name|getSection
argument_list|(
name|symb
operator|->
name|st_shndx
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
specifier|const
name|typename
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Sym
operator|*
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getSymbol
argument_list|(
argument|uint32_t Index
argument_list|)
specifier|const
block|{
return|return
operator|&
operator|*
operator|(
name|begin_symbols
argument_list|()
operator|+
name|Index
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|ErrorOr
operator|<
name|ArrayRef
operator|<
name|uint8_t
operator|>
expr|>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getSectionContents
argument_list|(
argument|const Elf_Shdr *Sec
argument_list|)
specifier|const
block|{
if|if
condition|(
name|Sec
operator|->
name|sh_offset
operator|+
name|Sec
operator|->
name|sh_size
operator|>
name|Buf
operator|.
name|size
argument_list|()
condition|)
return|return
name|object_error
operator|::
name|parse_failed
return|;
specifier|const
name|uint8_t
operator|*
name|Start
operator|=
name|base
argument_list|()
operator|+
name|Sec
operator|->
name|sh_offset
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|makeArrayRef
argument_list|(
name|Start
argument_list|,
name|Sec
operator|->
name|sh_size
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|StringRef
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getRelocationTypeName
argument_list|(
argument|uint32_t Type
argument_list|)
specifier|const
block|{
return|return
name|getELFRelocationTypeName
argument_list|(
name|Header
operator|->
name|e_machine
argument_list|,
name|Type
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|void
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getRelocationTypeName
argument_list|(
argument|uint32_t Type
argument_list|,
argument|SmallVectorImpl<char>&Result
argument_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|isMipsELF64
argument_list|()
condition|)
block|{
name|StringRef
name|Name
init|=
name|getRelocationTypeName
argument_list|(
name|Type
argument_list|)
decl_stmt|;
name|Result
operator|.
name|append
argument_list|(
name|Name
operator|.
name|begin
argument_list|()
argument_list|,
name|Name
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
comment|// The Mips N64 ABI allows up to three operations to be specified per
comment|// relocation record. Unfortunately there's no easy way to test for the
comment|// presence of N64 ELFs as they have no special flag that identifies them
comment|// as being N64. We can safely assume at the moment that all Mips
comment|// ELFCLASS64 ELFs are N64. New Mips64 ABIs should provide enough
comment|// information to disambiguate between old vs new ABIs.
name|uint8_t
name|Type1
init|=
operator|(
name|Type
operator|>>
literal|0
operator|)
operator|&
literal|0xFF
decl_stmt|;
name|uint8_t
name|Type2
init|=
operator|(
name|Type
operator|>>
literal|8
operator|)
operator|&
literal|0xFF
decl_stmt|;
name|uint8_t
name|Type3
init|=
operator|(
name|Type
operator|>>
literal|16
operator|)
operator|&
literal|0xFF
decl_stmt|;
comment|// Concat all three relocation type names.
name|StringRef
name|Name
init|=
name|getRelocationTypeName
argument_list|(
name|Type1
argument_list|)
decl_stmt|;
name|Result
operator|.
name|append
argument_list|(
name|Name
operator|.
name|begin
argument_list|()
argument_list|,
name|Name
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|Name
operator|=
name|getRelocationTypeName
argument_list|(
name|Type2
argument_list|)
expr_stmt|;
name|Result
operator|.
name|append
argument_list|(
literal|1
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|Result
operator|.
name|append
argument_list|(
name|Name
operator|.
name|begin
argument_list|()
argument_list|,
name|Name
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|Name
operator|=
name|getRelocationTypeName
argument_list|(
name|Type3
argument_list|)
expr_stmt|;
name|Result
operator|.
name|append
argument_list|(
literal|1
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|Result
operator|.
name|append
argument_list|(
name|Name
operator|.
name|begin
argument_list|()
argument_list|,
name|Name
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_else

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|template
operator|<
name|class
name|RelT
operator|>
name|std
operator|::
name|pair
operator|<
specifier|const
name|typename
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Shdr
operator|*
operator|,
specifier|const
name|typename
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Sym
operator|*
operator|>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getRelocationSymbol
argument_list|(
argument|const Elf_Shdr *Sec
argument_list|,
argument|const RelT *Rel
argument_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|Sec
operator|->
name|sh_link
condition|)
return|return
name|std
operator|::
name|make_pair
argument_list|(
name|nullptr
argument_list|,
name|nullptr
argument_list|)
return|;
specifier|const
name|Elf_Shdr
operator|*
name|SymTable
operator|=
name|getSection
argument_list|(
name|Sec
operator|->
name|sh_link
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|std
operator|::
name|make_pair
argument_list|(
name|SymTable
argument_list|,
name|getEntry
operator|<
name|Elf_Sym
operator|>
operator|(
name|SymTable
operator|,
name|Rel
operator|->
name|getSymbol
argument_list|(
name|isMips64EL
argument_list|()
argument_list|)
operator|)
argument_list|)
return|;
end_return

begin_comment
unit|}
comment|// Verify that the last byte in the string table in a null.
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|ELFT
operator|>
name|void
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|VerifyStrTab
argument_list|(
argument|const Elf_Shdr *sh
argument_list|)
specifier|const
block|{
specifier|const
name|char
operator|*
name|strtab
operator|=
operator|(
specifier|const
name|char
operator|*
operator|)
name|base
argument_list|()
operator|+
name|sh
operator|->
name|sh_offset
block|;
if|if
condition|(
name|strtab
index|[
name|sh
operator|->
name|sh_size
operator|-
literal|1
index|]
operator|!=
literal|0
condition|)
comment|// FIXME: Proper error handling.
name|report_fatal_error
argument_list|(
literal|"String table must end with a null terminator!"
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|uint64_t
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getNumSections
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|Header
operator|&&
literal|"Header not initialized!"
argument_list|)
block|;
if|if
condition|(
name|Header
operator|->
name|e_shnum
operator|==
name|ELF
operator|::
name|SHN_UNDEF
operator|&&
name|Header
operator|->
name|e_shoff
operator|>
literal|0
condition|)
block|{
name|assert
argument_list|(
name|SectionHeaderTable
operator|&&
literal|"SectionHeaderTable not initialized!"
argument_list|)
expr_stmt|;
return|return
name|SectionHeaderTable
operator|->
name|sh_size
return|;
block|}
end_expr_stmt

begin_return
return|return
name|Header
operator|->
name|e_shnum
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|typename
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|uintX_t
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getStringTableIndex
argument_list|()
specifier|const
block|{
if|if
condition|(
name|Header
operator|->
name|e_shnum
operator|==
name|ELF
operator|::
name|SHN_UNDEF
condition|)
block|{
if|if
condition|(
name|Header
operator|->
name|e_shstrndx
operator|==
name|ELF
operator|::
name|SHN_HIRESERVE
condition|)
return|return
name|SectionHeaderTable
operator|->
name|sh_link
return|;
if|if
condition|(
name|Header
operator|->
name|e_shstrndx
operator|>=
name|getNumSections
argument_list|()
condition|)
return|return
literal|0
return|;
block|}
end_expr_stmt

begin_return
return|return
name|Header
operator|->
name|e_shstrndx
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|ELFFile
argument_list|(
argument|StringRef Object
argument_list|,
argument|std::error_code&ec
argument_list|)
operator|:
name|Buf
argument_list|(
name|Object
argument_list|)
operator|,
name|SectionHeaderTable
argument_list|(
name|nullptr
argument_list|)
operator|,
name|dot_shstrtab_sec
argument_list|(
name|nullptr
argument_list|)
operator|,
name|dot_strtab_sec
argument_list|(
name|nullptr
argument_list|)
operator|,
name|dot_symtab_sec
argument_list|(
name|nullptr
argument_list|)
operator|,
name|SymbolTableSectionHeaderIndex
argument_list|(
name|nullptr
argument_list|)
operator|,
name|dot_gnu_version_sec
argument_list|(
name|nullptr
argument_list|)
operator|,
name|dot_gnu_version_r_sec
argument_list|(
name|nullptr
argument_list|)
operator|,
name|dot_gnu_version_d_sec
argument_list|(
name|nullptr
argument_list|)
operator|,
name|dt_soname
argument_list|(
argument|nullptr
argument_list|)
block|{
specifier|const
name|uint64_t
name|FileSize
operator|=
name|Buf
operator|.
name|size
argument_list|()
block|;
if|if
condition|(
sizeof|sizeof
argument_list|(
name|Elf_Ehdr
argument_list|)
operator|>
name|FileSize
condition|)
comment|// FIXME: Proper error handling.
name|report_fatal_error
argument_list|(
literal|"File too short!"
argument_list|)
expr_stmt|;
name|Header
operator|=
name|reinterpret_cast
operator|<
specifier|const
name|Elf_Ehdr
operator|*
operator|>
operator|(
name|base
argument_list|()
operator|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|Header
operator|->
name|e_shoff
operator|==
literal|0
condition|)
return|return;
end_if

begin_decl_stmt
specifier|const
name|uint64_t
name|SectionTableOffset
init|=
name|Header
operator|->
name|e_shoff
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|SectionTableOffset
operator|+
sizeof|sizeof
argument_list|(
name|Elf_Shdr
argument_list|)
operator|>
name|FileSize
condition|)
comment|// FIXME: Proper error handling.
name|report_fatal_error
argument_list|(
literal|"Section header table goes past end of file!"
argument_list|)
expr_stmt|;
end_if

begin_comment
comment|// The getNumSections() call below depends on SectionHeaderTable being set.
end_comment

begin_expr_stmt
name|SectionHeaderTable
operator|=
name|reinterpret_cast
operator|<
specifier|const
name|Elf_Shdr
operator|*
operator|>
operator|(
name|base
argument_list|()
operator|+
name|SectionTableOffset
operator|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|const
name|uint64_t
name|SectionTableSize
init|=
name|getNumSections
argument_list|()
operator|*
name|Header
operator|->
name|e_shentsize
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|SectionTableOffset
operator|+
name|SectionTableSize
operator|>
name|FileSize
condition|)
comment|// FIXME: Proper error handling.
name|report_fatal_error
argument_list|(
literal|"Section table goes past end of file!"
argument_list|)
expr_stmt|;
end_if

begin_comment
comment|// Scan sections for special sections.
end_comment

begin_for
for|for
control|(
specifier|const
name|Elf_Shdr
modifier|&
name|Sec
range|:
name|sections
argument_list|()
control|)
block|{
switch|switch
condition|(
name|Sec
operator|.
name|sh_type
condition|)
block|{
case|case
name|ELF
operator|::
name|SHT_SYMTAB_SHNDX
case|:
if|if
condition|(
name|SymbolTableSectionHeaderIndex
condition|)
comment|// FIXME: Proper error handling.
name|report_fatal_error
argument_list|(
literal|"More than one .symtab_shndx!"
argument_list|)
expr_stmt|;
name|SymbolTableSectionHeaderIndex
operator|=
operator|&
name|Sec
expr_stmt|;
break|break;
case|case
name|ELF
operator|::
name|SHT_SYMTAB
case|:
if|if
condition|(
name|dot_symtab_sec
condition|)
comment|// FIXME: Proper error handling.
name|report_fatal_error
argument_list|(
literal|"More than one .symtab!"
argument_list|)
expr_stmt|;
name|dot_symtab_sec
operator|=
operator|&
name|Sec
expr_stmt|;
name|dot_strtab_sec
operator|=
name|getSection
argument_list|(
name|Sec
operator|.
name|sh_link
argument_list|)
expr_stmt|;
break|break;
case|case
name|ELF
operator|::
name|SHT_DYNSYM
case|:
block|{
if|if
condition|(
name|DynSymRegion
operator|.
name|Addr
condition|)
comment|// FIXME: Proper error handling.
name|report_fatal_error
argument_list|(
literal|"More than one .dynsym!"
argument_list|)
expr_stmt|;
name|DynSymRegion
operator|.
name|Addr
operator|=
name|base
argument_list|()
operator|+
name|Sec
operator|.
name|sh_offset
expr_stmt|;
name|DynSymRegion
operator|.
name|Size
operator|=
name|Sec
operator|.
name|sh_size
expr_stmt|;
name|DynSymRegion
operator|.
name|EntSize
operator|=
name|Sec
operator|.
name|sh_entsize
expr_stmt|;
specifier|const
name|Elf_Shdr
modifier|*
name|DynStr
init|=
name|getSection
argument_list|(
name|Sec
operator|.
name|sh_link
argument_list|)
decl_stmt|;
name|DynStrRegion
operator|.
name|Addr
operator|=
name|base
argument_list|()
operator|+
name|DynStr
operator|->
name|sh_offset
expr_stmt|;
name|DynStrRegion
operator|.
name|Size
operator|=
name|DynStr
operator|->
name|sh_size
expr_stmt|;
name|DynStrRegion
operator|.
name|EntSize
operator|=
name|DynStr
operator|->
name|sh_entsize
expr_stmt|;
break|break;
block|}
case|case
name|ELF
operator|::
name|SHT_DYNAMIC
case|:
if|if
condition|(
name|DynamicRegion
operator|.
name|Addr
condition|)
comment|// FIXME: Proper error handling.
name|report_fatal_error
argument_list|(
literal|"More than one .dynamic!"
argument_list|)
expr_stmt|;
name|DynamicRegion
operator|.
name|Addr
operator|=
name|base
argument_list|()
operator|+
name|Sec
operator|.
name|sh_offset
expr_stmt|;
name|DynamicRegion
operator|.
name|Size
operator|=
name|Sec
operator|.
name|sh_size
expr_stmt|;
name|DynamicRegion
operator|.
name|EntSize
operator|=
name|Sec
operator|.
name|sh_entsize
expr_stmt|;
break|break;
case|case
name|ELF
operator|::
name|SHT_GNU_versym
case|:
if|if
condition|(
name|dot_gnu_version_sec
operator|!=
name|nullptr
condition|)
comment|// FIXME: Proper error handling.
name|report_fatal_error
argument_list|(
literal|"More than one .gnu.version section!"
argument_list|)
expr_stmt|;
name|dot_gnu_version_sec
operator|=
operator|&
name|Sec
expr_stmt|;
break|break;
case|case
name|ELF
operator|::
name|SHT_GNU_verdef
case|:
if|if
condition|(
name|dot_gnu_version_d_sec
operator|!=
name|nullptr
condition|)
comment|// FIXME: Proper error handling.
name|report_fatal_error
argument_list|(
literal|"More than one .gnu.version_d section!"
argument_list|)
expr_stmt|;
name|dot_gnu_version_d_sec
operator|=
operator|&
name|Sec
expr_stmt|;
break|break;
case|case
name|ELF
operator|::
name|SHT_GNU_verneed
case|:
if|if
condition|(
name|dot_gnu_version_r_sec
operator|!=
name|nullptr
condition|)
comment|// FIXME: Proper error handling.
name|report_fatal_error
argument_list|(
literal|"More than one .gnu.version_r section!"
argument_list|)
expr_stmt|;
name|dot_gnu_version_r_sec
operator|=
operator|&
name|Sec
expr_stmt|;
break|break;
block|}
block|}
end_for

begin_comment
comment|// Get string table sections.
end_comment

begin_expr_stmt
name|dot_shstrtab_sec
operator|=
name|getSection
argument_list|(
name|getStringTableIndex
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|dot_shstrtab_sec
condition|)
block|{
comment|// Verify that the last byte in the string table in a null.
name|VerifyStrTab
argument_list|(
name|dot_shstrtab_sec
argument_list|)
expr_stmt|;
block|}
end_if

begin_comment
comment|// Build symbol name side-mapping if there is one.
end_comment

begin_if
if|if
condition|(
name|SymbolTableSectionHeaderIndex
condition|)
block|{
specifier|const
name|Elf_Word
modifier|*
name|ShndxTable
init|=
name|reinterpret_cast
operator|<
specifier|const
name|Elf_Word
operator|*
operator|>
operator|(
name|base
argument_list|()
operator|+
name|SymbolTableSectionHeaderIndex
operator|->
name|sh_offset
operator|)
decl_stmt|;
for|for
control|(
name|Elf_Sym_Iter
name|SI
init|=
name|begin_symbols
argument_list|()
init|,
name|SE
init|=
name|end_symbols
argument_list|()
init|;
name|SI
operator|!=
name|SE
condition|;
operator|++
name|SI
control|)
block|{
if|if
condition|(
operator|*
name|ShndxTable
operator|!=
name|ELF
operator|::
name|SHN_UNDEF
condition|)
name|ExtendedSymbolTable
index|[
operator|&
operator|*
name|SI
index|]
operator|=
operator|*
name|ShndxTable
expr_stmt|;
operator|++
name|ShndxTable
expr_stmt|;
block|}
block|}
end_if

begin_comment
comment|// Scan program headers.
end_comment

begin_for
for|for
control|(
name|Elf_Phdr_Iter
name|PhdrI
init|=
name|begin_program_headers
argument_list|()
init|,
name|PhdrE
init|=
name|end_program_headers
argument_list|()
init|;
name|PhdrI
operator|!=
name|PhdrE
condition|;
operator|++
name|PhdrI
control|)
block|{
if|if
condition|(
name|PhdrI
operator|->
name|p_type
operator|==
name|ELF
operator|::
name|PT_DYNAMIC
condition|)
block|{
name|DynamicRegion
operator|.
name|Addr
operator|=
name|base
argument_list|()
operator|+
name|PhdrI
operator|->
name|p_offset
expr_stmt|;
name|DynamicRegion
operator|.
name|Size
operator|=
name|PhdrI
operator|->
name|p_filesz
expr_stmt|;
name|DynamicRegion
operator|.
name|EntSize
operator|=
sizeof|sizeof
argument_list|(
name|Elf_Dyn
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_for

begin_expr_stmt
name|ec
operator|=
name|std
operator|::
name|error_code
argument_list|()
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|// Get the symbol table index in the symtab section given a symbol
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|ELFT
operator|>
name|uint64_t
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getSymbolIndex
argument_list|(
argument|const Elf_Sym *Sym
argument_list|)
specifier|const
block|{
name|uintptr_t
name|SymLoc
operator|=
name|uintptr_t
argument_list|(
name|Sym
argument_list|)
block|;
name|uintptr_t
name|SymTabLoc
operator|=
name|uintptr_t
argument_list|(
name|base
argument_list|()
operator|+
name|dot_symtab_sec
operator|->
name|sh_offset
argument_list|)
block|;
name|assert
argument_list|(
name|SymLoc
operator|>
name|SymTabLoc
operator|&&
literal|"Symbol not in symbol table!"
argument_list|)
block|;
name|uint64_t
name|SymOffset
operator|=
name|SymLoc
operator|-
name|SymTabLoc
block|;
name|assert
argument_list|(
name|SymOffset
operator|%
name|dot_symtab_sec
operator|->
name|sh_entsize
operator|==
literal|0
operator|&&
literal|"Symbol not multiple of symbol size!"
argument_list|)
block|;
return|return
name|SymOffset
operator|/
name|dot_symtab_sec
operator|->
name|sh_entsize
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|typename
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Shdr_Iter
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|begin_sections
argument_list|()
specifier|const
block|{
return|return
name|Elf_Shdr_Iter
argument_list|(
name|Header
operator|->
name|e_shentsize
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|base
argument_list|()
operator|+
name|Header
operator|->
name|e_shoff
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|typename
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Shdr_Iter
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|end_sections
argument_list|()
specifier|const
block|{
return|return
name|Elf_Shdr_Iter
argument_list|(
name|Header
operator|->
name|e_shentsize
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|base
argument_list|()
operator|+
name|Header
operator|->
name|e_shoff
operator|+
operator|(
name|getNumSections
argument_list|()
operator|*
name|Header
operator|->
name|e_shentsize
operator|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|typename
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Sym_Iter
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|begin_symbols
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|dot_symtab_sec
condition|)
return|return
name|Elf_Sym_Iter
argument_list|(
literal|0
argument_list|,
name|nullptr
argument_list|,
name|false
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
name|Elf_Sym_Iter
argument_list|(
name|dot_symtab_sec
operator|->
name|sh_entsize
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|base
argument_list|()
operator|+
name|dot_symtab_sec
operator|->
name|sh_offset
argument_list|,
name|false
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|typename
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Sym_Iter
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|end_symbols
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|dot_symtab_sec
condition|)
return|return
name|Elf_Sym_Iter
argument_list|(
literal|0
argument_list|,
name|nullptr
argument_list|,
name|false
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
name|Elf_Sym_Iter
argument_list|(
name|dot_symtab_sec
operator|->
name|sh_entsize
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|base
argument_list|()
operator|+
name|dot_symtab_sec
operator|->
name|sh_offset
operator|+
name|dot_symtab_sec
operator|->
name|sh_size
argument_list|,
name|false
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|typename
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Dyn_Iter
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|begin_dynamic_table
argument_list|()
specifier|const
block|{
if|if
condition|(
name|DynamicRegion
operator|.
name|Addr
condition|)
return|return
name|Elf_Dyn_Iter
argument_list|(
name|DynamicRegion
operator|.
name|EntSize
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|DynamicRegion
operator|.
name|Addr
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
name|Elf_Dyn_Iter
argument_list|(
literal|0
argument_list|,
name|nullptr
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|typename
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Dyn_Iter
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|end_dynamic_table
argument_list|(
argument|bool NULLEnd
argument_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|DynamicRegion
operator|.
name|Addr
condition|)
return|return
name|Elf_Dyn_Iter
argument_list|(
literal|0
argument_list|,
name|nullptr
argument_list|)
return|;
name|Elf_Dyn_Iter
name|Ret
argument_list|(
name|DynamicRegion
operator|.
name|EntSize
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|DynamicRegion
operator|.
name|Addr
operator|+
name|DynamicRegion
operator|.
name|Size
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|NULLEnd
condition|)
block|{
name|Elf_Dyn_Iter
name|Start
init|=
name|begin_dynamic_table
argument_list|()
decl_stmt|;
while|while
condition|(
name|Start
operator|!=
name|Ret
operator|&&
name|Start
operator|->
name|getTag
argument_list|()
operator|!=
name|ELF
operator|::
name|DT_NULL
condition|)
operator|++
name|Start
expr_stmt|;
comment|// Include the DT_NULL.
if|if
condition|(
name|Start
operator|!=
name|Ret
condition|)
operator|++
name|Start
expr_stmt|;
name|Ret
operator|=
name|Start
expr_stmt|;
block|}
end_if

begin_return
return|return
name|Ret
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|StringRef
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getLoadName
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|dt_soname
condition|)
block|{
name|dt_soname
operator|=
literal|""
expr_stmt|;
comment|// Find the DT_SONAME entry
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|Entry
range|:
name|dynamic_table
argument_list|()
control|)
if|if
condition|(
name|Entry
operator|.
name|getTag
argument_list|()
operator|==
name|ELF
operator|::
name|DT_SONAME
condition|)
block|{
name|dt_soname
operator|=
name|getDynamicString
argument_list|(
name|Entry
operator|.
name|getVal
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
end_expr_stmt

begin_expr_stmt
unit|}   return
name|dt_soname
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|const
name|T
operator|*
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getEntry
argument_list|(
argument|uint32_t Section
argument_list|,
argument|uint32_t Entry
argument_list|)
specifier|const
block|{
return|return
name|getEntry
operator|<
name|T
operator|>
operator|(
name|getSection
argument_list|(
name|Section
argument_list|)
operator|,
name|Entry
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|const
name|T
operator|*
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getEntry
argument_list|(
argument|const Elf_Shdr *Section
argument_list|,
argument|uint32_t Entry
argument_list|)
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|base
argument_list|()
operator|+
name|Section
operator|->
name|sh_offset
operator|+
operator|(
name|Entry
operator|*
name|Section
operator|->
name|sh_entsize
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
specifier|const
name|typename
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Shdr
operator|*
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getSection
argument_list|(
argument|uint32_t index
argument_list|)
specifier|const
block|{
if|if
condition|(
name|index
operator|==
literal|0
condition|)
return|return
name|nullptr
return|;
end_expr_stmt

begin_if
if|if
condition|(
operator|!
name|SectionHeaderTable
operator|||
name|index
operator|>=
name|getNumSections
argument_list|()
condition|)
comment|// FIXME: Proper error handling.
name|report_fatal_error
argument_list|(
literal|"Invalid section index!"
argument_list|)
expr_stmt|;
end_if

begin_return
return|return
name|reinterpret_cast
operator|<
specifier|const
name|Elf_Shdr
operator|*
operator|>
operator|(
name|reinterpret_cast
operator|<
specifier|const
name|char
operator|*
operator|>
operator|(
name|SectionHeaderTable
operator|)
operator|+
operator|(
name|index
operator|*
name|Header
operator|->
name|e_shentsize
operator|)
operator|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
specifier|const
name|char
operator|*
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getString
argument_list|(
argument|uint32_t section
argument_list|,
argument|ELF::Elf32_Word offset
argument_list|)
specifier|const
block|{
return|return
name|getString
argument_list|(
name|getSection
argument_list|(
name|section
argument_list|)
argument_list|,
name|offset
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
specifier|const
name|char
operator|*
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getString
argument_list|(
argument|const Elf_Shdr *section
argument_list|,
argument|ELF::Elf32_Word offset
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|section
operator|&&
name|section
operator|->
name|sh_type
operator|==
name|ELF
operator|::
name|SHT_STRTAB
operator|&&
literal|"Invalid section!"
argument_list|)
block|;
if|if
condition|(
name|offset
operator|>=
name|section
operator|->
name|sh_size
condition|)
comment|// FIXME: Proper error handling.
name|report_fatal_error
argument_list|(
literal|"Symbol name offset outside of string table!"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|(
specifier|const
name|char
operator|*
operator|)
name|base
argument_list|()
operator|+
name|section
operator|->
name|sh_offset
operator|+
name|offset
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
specifier|const
name|char
operator|*
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getDynamicString
argument_list|(
argument|uintX_t Offset
argument_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|DynStrRegion
operator|.
name|Addr
operator|||
name|Offset
operator|>=
name|DynStrRegion
operator|.
name|Size
condition|)
return|return
name|nullptr
return|;
end_expr_stmt

begin_return
return|return
operator|(
specifier|const
name|char
operator|*
operator|)
name|DynStrRegion
operator|.
name|Addr
operator|+
name|Offset
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|ErrorOr
operator|<
name|StringRef
operator|>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getSymbolName
argument_list|(
argument|Elf_Sym_Iter Sym
argument_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|Sym
operator|.
name|isDynamic
argument_list|()
condition|)
return|return
name|getSymbolName
argument_list|(
name|dot_symtab_sec
argument_list|,
operator|&
operator|*
name|Sym
argument_list|)
return|;
end_expr_stmt

begin_if
if|if
condition|(
operator|!
name|DynStrRegion
operator|.
name|Addr
operator|||
name|Sym
operator|->
name|st_name
operator|>=
name|DynStrRegion
operator|.
name|Size
condition|)
return|return
name|object_error
operator|::
name|parse_failed
return|;
end_if

begin_return
return|return
name|StringRef
argument_list|(
name|getDynamicString
argument_list|(
name|Sym
operator|->
name|st_name
argument_list|)
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|ErrorOr
operator|<
name|StringRef
operator|>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getSymbolName
argument_list|(
argument|const Elf_Shdr *Section
argument_list|,
argument|const Elf_Sym *Symb
argument_list|)
specifier|const
block|{
if|if
condition|(
name|Symb
operator|->
name|st_name
operator|==
literal|0
condition|)
block|{
specifier|const
name|Elf_Shdr
modifier|*
name|ContainingSec
init|=
name|getSection
argument_list|(
name|Symb
argument_list|)
decl_stmt|;
if|if
condition|(
name|ContainingSec
condition|)
return|return
name|getSectionName
argument_list|(
name|ContainingSec
argument_list|)
return|;
block|}
specifier|const
name|Elf_Shdr
operator|*
name|StrTab
operator|=
name|getSection
argument_list|(
name|Section
operator|->
name|sh_link
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|Symb
operator|->
name|st_name
operator|>=
name|StrTab
operator|->
name|sh_size
condition|)
return|return
name|object_error
operator|::
name|parse_failed
return|;
end_if

begin_return
return|return
name|StringRef
argument_list|(
name|getString
argument_list|(
name|StrTab
argument_list|,
name|Symb
operator|->
name|st_name
argument_list|)
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|ErrorOr
operator|<
name|StringRef
operator|>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getSectionName
argument_list|(
argument|const Elf_Shdr *Section
argument_list|)
specifier|const
block|{
if|if
condition|(
name|Section
operator|->
name|sh_name
operator|>=
name|dot_shstrtab_sec
operator|->
name|sh_size
condition|)
return|return
name|object_error
operator|::
name|parse_failed
return|;
end_expr_stmt

begin_return
return|return
name|StringRef
argument_list|(
name|getString
argument_list|(
name|dot_shstrtab_sec
argument_list|,
name|Section
operator|->
name|sh_name
argument_list|)
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|ErrorOr
operator|<
name|StringRef
operator|>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getSymbolVersion
argument_list|(
argument|const Elf_Shdr *section
argument_list|,
argument|const Elf_Sym *symb
argument_list|,
argument|bool&IsDefault
argument_list|)
specifier|const
block|{
comment|// Handle non-dynamic symbols.
if|if
condition|(
name|section
operator|!=
name|DynSymRegion
operator|.
name|Addr
operator|&&
name|section
operator|!=
name|nullptr
condition|)
block|{
comment|// Non-dynamic symbols can have versions in their names
comment|// A name of the form 'foo@V1' indicates version 'V1', non-default.
comment|// A name of the form 'foo@@V2' indicates version 'V2', default version.
name|ErrorOr
operator|<
name|StringRef
operator|>
name|SymName
operator|=
name|getSymbolName
argument_list|(
name|section
argument_list|,
name|symb
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|SymName
condition|)
return|return
name|SymName
return|;
name|StringRef
name|Name
init|=
operator|*
name|SymName
decl_stmt|;
name|size_t
name|atpos
init|=
name|Name
operator|.
name|find
argument_list|(
literal|'@'
argument_list|)
decl_stmt|;
if|if
condition|(
name|atpos
operator|==
name|StringRef
operator|::
name|npos
condition|)
block|{
name|IsDefault
operator|=
name|false
expr_stmt|;
return|return
name|StringRef
argument_list|(
literal|""
argument_list|)
return|;
block|}
operator|++
name|atpos
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|atpos
operator|<
name|Name
operator|.
name|size
argument_list|()
operator|&&
name|Name
index|[
name|atpos
index|]
operator|==
literal|'@'
condition|)
block|{
name|IsDefault
operator|=
name|true
expr_stmt|;
operator|++
name|atpos
expr_stmt|;
block|}
else|else
block|{
name|IsDefault
operator|=
name|false
expr_stmt|;
block|}
end_if

begin_return
return|return
name|Name
operator|.
name|substr
argument_list|(
name|atpos
argument_list|)
return|;
end_return

begin_comment
unit|}
comment|// This is a dynamic symbol. Look in the GNU symbol version table.
end_comment

begin_expr_stmt
unit|if
operator|(
operator|!
name|dot_gnu_version_sec
operator|)
block|{
comment|// No version table.
name|IsDefault
operator|=
name|false
block|;
return|return
name|StringRef
argument_list|(
literal|""
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// Determine the position in the symbol table of this entry.
end_comment

begin_decl_stmt
name|size_t
name|entry_index
init|=
operator|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|symb
operator|-
operator|(
specifier|const
name|char
operator|*
operator|)
name|DynSymRegion
operator|.
name|Addr
operator|)
operator|/
name|DynSymRegion
operator|.
name|EntSize
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Get the corresponding version index entry
end_comment

begin_decl_stmt
specifier|const
name|Elf_Versym
modifier|*
name|vs
init|=
name|getEntry
operator|<
name|Elf_Versym
operator|>
operator|(
name|dot_gnu_version_sec
expr|,
name|entry_index
operator|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|size_t
name|version_index
init|=
name|vs
operator|->
name|vs_index
operator|&
name|ELF
operator|::
name|VERSYM_VERSION
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Special markers for unversioned symbols.
end_comment

begin_if
if|if
condition|(
name|version_index
operator|==
name|ELF
operator|::
name|VER_NDX_LOCAL
operator|||
name|version_index
operator|==
name|ELF
operator|::
name|VER_NDX_GLOBAL
condition|)
block|{
name|IsDefault
operator|=
name|false
expr_stmt|;
return|return
name|StringRef
argument_list|(
literal|""
argument_list|)
return|;
block|}
end_if

begin_comment
comment|// Lookup this symbol in the version table
end_comment

begin_expr_stmt
name|LoadVersionMap
argument_list|()
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|version_index
operator|>=
name|VersionMap
operator|.
name|size
argument_list|()
operator|||
name|VersionMap
index|[
name|version_index
index|]
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|object_error
operator|::
name|parse_failed
return|;
end_if

begin_decl_stmt
specifier|const
name|VersionMapEntry
modifier|&
name|entry
init|=
name|VersionMap
index|[
name|version_index
index|]
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Get the version name string
end_comment

begin_decl_stmt
name|size_t
name|name_offset
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|entry
operator|.
name|isVerdef
argument_list|()
condition|)
block|{
comment|// The first Verdaux entry holds the name.
name|name_offset
operator|=
name|entry
operator|.
name|getVerdef
argument_list|()
operator|->
name|getAux
argument_list|()
operator|->
name|vda_name
expr_stmt|;
block|}
else|else
block|{
name|name_offset
operator|=
name|entry
operator|.
name|getVernaux
argument_list|()
operator|->
name|vna_name
expr_stmt|;
block|}
end_if

begin_comment
comment|// Set IsDefault
end_comment

begin_if
if|if
condition|(
name|entry
operator|.
name|isVerdef
argument_list|()
condition|)
block|{
name|IsDefault
operator|=
operator|!
operator|(
name|vs
operator|->
name|vs_index
operator|&
name|ELF
operator|::
name|VERSYM_HIDDEN
operator|)
expr_stmt|;
block|}
else|else
block|{
name|IsDefault
operator|=
name|false
expr_stmt|;
block|}
end_if

begin_if
if|if
condition|(
name|name_offset
operator|>=
name|DynStrRegion
operator|.
name|Size
condition|)
return|return
name|object_error
operator|::
name|parse_failed
return|;
end_if

begin_return
return|return
name|StringRef
argument_list|(
name|getDynamicString
argument_list|(
name|name_offset
argument_list|)
argument_list|)
return|;
end_return

begin_comment
unit|}
comment|/// This function returns the hash value for a symbol in the .dynsym section
end_comment

begin_comment
comment|/// Name of the API remains consistent as specified in the libelf
end_comment

begin_comment
comment|/// REF : http://www.sco.com/developers/gabi/latest/ch5.dynamic.html#hash
end_comment

begin_function
unit|static
specifier|inline
name|unsigned
name|elf_hash
parameter_list|(
name|StringRef
modifier|&
name|symbolName
parameter_list|)
block|{
name|unsigned
name|h
init|=
literal|0
decl_stmt|,
name|g
decl_stmt|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|,
name|j
init|=
name|symbolName
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|j
condition|;
name|i
operator|++
control|)
block|{
name|h
operator|=
operator|(
name|h
operator|<<
literal|4
operator|)
operator|+
name|symbolName
index|[
name|i
index|]
expr_stmt|;
name|g
operator|=
name|h
operator|&
literal|0xf0000000L
expr_stmt|;
if|if
condition|(
name|g
operator|!=
literal|0
condition|)
name|h
operator|^=
name|g
operator|>>
literal|24
expr_stmt|;
name|h
operator|&=
operator|~
name|g
expr_stmt|;
block|}
return|return
name|h
return|;
block|}
end_function

begin_comment
unit|}
comment|// end namespace object
end_comment

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

