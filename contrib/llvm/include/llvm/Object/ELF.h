begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- ELF.h - ELF object file implementation -------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares the ELFFile template class.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_OBJECT_ELF_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_OBJECT_ELF_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/ELFTypes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/MemoryBuffer.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|object
block|{
name|StringRef
name|getELFRelocationTypeName
parameter_list|(
name|uint32_t
name|Machine
parameter_list|,
name|uint32_t
name|Type
parameter_list|)
function_decl|;
comment|// Subclasses of ELFFile may need this for template instantiation
specifier|inline
name|std
operator|::
name|pair
operator|<
name|unsigned
name|char
operator|,
name|unsigned
name|char
operator|>
name|getElfArchType
argument_list|(
argument|StringRef Object
argument_list|)
block|{
if|if
condition|(
name|Object
operator|.
name|size
argument_list|()
operator|<
name|ELF
operator|::
name|EI_NIDENT
condition|)
return|return
name|std
operator|::
name|make_pair
argument_list|(
operator|(
name|uint8_t
operator|)
name|ELF
operator|::
name|ELFCLASSNONE
argument_list|,
operator|(
name|uint8_t
operator|)
name|ELF
operator|::
name|ELFDATANONE
argument_list|)
return|;
return|return
name|std
operator|::
name|make_pair
argument_list|(
operator|(
name|uint8_t
operator|)
name|Object
index|[
name|ELF
operator|::
name|EI_CLASS
index|]
argument_list|,
operator|(
name|uint8_t
operator|)
name|Object
index|[
name|ELF
operator|::
name|EI_DATA
index|]
argument_list|)
return|;
block|}
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|ELFFile
block|{
name|public
operator|:
name|LLVM_ELF_IMPORT_TYPES_ELFT
argument_list|(
argument|ELFT
argument_list|)
typedef|typedef
name|typename
name|std
operator|::
name|conditional
operator|<
name|ELFT
operator|::
name|Is64Bits
operator|,
name|uint64_t
operator|,
name|uint32_t
operator|>
operator|::
name|type
name|uintX_t
expr_stmt|;
typedef|typedef
name|Elf_Ehdr_Impl
operator|<
name|ELFT
operator|>
name|Elf_Ehdr
expr_stmt|;
typedef|typedef
name|Elf_Shdr_Impl
operator|<
name|ELFT
operator|>
name|Elf_Shdr
expr_stmt|;
typedef|typedef
name|Elf_Sym_Impl
operator|<
name|ELFT
operator|>
name|Elf_Sym
expr_stmt|;
typedef|typedef
name|Elf_Dyn_Impl
operator|<
name|ELFT
operator|>
name|Elf_Dyn
expr_stmt|;
typedef|typedef
name|Elf_Phdr_Impl
operator|<
name|ELFT
operator|>
name|Elf_Phdr
expr_stmt|;
typedef|typedef
name|Elf_Rel_Impl
operator|<
name|ELFT
operator|,
name|false
operator|>
name|Elf_Rel
expr_stmt|;
typedef|typedef
name|Elf_Rel_Impl
operator|<
name|ELFT
operator|,
name|true
operator|>
name|Elf_Rela
expr_stmt|;
typedef|typedef
name|Elf_Verdef_Impl
operator|<
name|ELFT
operator|>
name|Elf_Verdef
expr_stmt|;
typedef|typedef
name|Elf_Verdaux_Impl
operator|<
name|ELFT
operator|>
name|Elf_Verdaux
expr_stmt|;
typedef|typedef
name|Elf_Verneed_Impl
operator|<
name|ELFT
operator|>
name|Elf_Verneed
expr_stmt|;
typedef|typedef
name|Elf_Vernaux_Impl
operator|<
name|ELFT
operator|>
name|Elf_Vernaux
expr_stmt|;
typedef|typedef
name|Elf_Versym_Impl
operator|<
name|ELFT
operator|>
name|Elf_Versym
expr_stmt|;
typedef|typedef
name|Elf_Hash_Impl
operator|<
name|ELFT
operator|>
name|Elf_Hash
expr_stmt|;
typedef|typedef
name|Elf_GnuHash_Impl
operator|<
name|ELFT
operator|>
name|Elf_GnuHash
expr_stmt|;
typedef|typedef
name|iterator_range
operator|<
specifier|const
name|Elf_Dyn
operator|*
operator|>
name|Elf_Dyn_Range
expr_stmt|;
typedef|typedef
name|iterator_range
operator|<
specifier|const
name|Elf_Shdr
operator|*
operator|>
name|Elf_Shdr_Range
expr_stmt|;
typedef|typedef
name|iterator_range
operator|<
specifier|const
name|Elf_Sym
operator|*
operator|>
name|Elf_Sym_Range
expr_stmt|;
specifier|const
name|uint8_t
operator|*
name|base
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|uint8_t
operator|*
operator|>
operator|(
name|Buf
operator|.
name|data
argument_list|()
operator|)
return|;
block|}
name|private
label|:
name|StringRef
name|Buf
decl_stmt|;
specifier|const
name|Elf_Ehdr
modifier|*
name|Header
decl_stmt|;
specifier|const
name|Elf_Shdr
modifier|*
name|SectionHeaderTable
init|=
name|nullptr
decl_stmt|;
name|StringRef
name|DotShstrtab
decl_stmt|;
comment|// Section header string table.
name|public
label|:
name|template
operator|<
name|typename
name|T
operator|>
specifier|const
name|T
operator|*
name|getEntry
argument_list|(
argument|uint32_t Section
argument_list|,
argument|uint32_t Entry
argument_list|)
specifier|const
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
specifier|const
name|T
operator|*
name|getEntry
argument_list|(
argument|const Elf_Shdr *Section
argument_list|,
argument|uint32_t Entry
argument_list|)
specifier|const
expr_stmt|;
name|ErrorOr
operator|<
name|StringRef
operator|>
name|getStringTable
argument_list|(
argument|const Elf_Shdr *Section
argument_list|)
specifier|const
expr_stmt|;
name|ErrorOr
operator|<
name|StringRef
operator|>
name|getStringTableForSymtab
argument_list|(
argument|const Elf_Shdr&Section
argument_list|)
specifier|const
expr_stmt|;
name|ErrorOr
operator|<
name|ArrayRef
operator|<
name|Elf_Word
operator|>>
name|getSHNDXTable
argument_list|(
argument|const Elf_Shdr&Section
argument_list|)
specifier|const
expr_stmt|;
name|void
name|VerifyStrTab
argument_list|(
specifier|const
name|Elf_Shdr
operator|*
name|sh
argument_list|)
decl|const
decl_stmt|;
name|StringRef
name|getRelocationTypeName
argument_list|(
name|uint32_t
name|Type
argument_list|)
decl|const
decl_stmt|;
name|void
name|getRelocationTypeName
argument_list|(
name|uint32_t
name|Type
argument_list|,
name|SmallVectorImpl
operator|<
name|char
operator|>
operator|&
name|Result
argument_list|)
decl|const
decl_stmt|;
comment|/// \brief Get the symbol for a given relocation.
specifier|const
name|Elf_Sym
modifier|*
name|getRelocationSymbol
parameter_list|(
specifier|const
name|Elf_Rel
modifier|*
name|Rel
parameter_list|,
specifier|const
name|Elf_Shdr
modifier|*
name|SymTab
parameter_list|)
function_decl|const;
name|ELFFile
argument_list|(
argument|StringRef Object
argument_list|,
argument|std::error_code&EC
argument_list|)
empty_stmt|;
name|bool
name|isMipsELF64
argument_list|()
specifier|const
block|{
return|return
name|Header
operator|->
name|e_machine
operator|==
name|ELF
operator|::
name|EM_MIPS
operator|&&
name|Header
operator|->
name|getFileClass
argument_list|()
operator|==
name|ELF
operator|::
name|ELFCLASS64
return|;
block|}
name|bool
name|isMips64EL
argument_list|()
specifier|const
block|{
return|return
name|Header
operator|->
name|e_machine
operator|==
name|ELF
operator|::
name|EM_MIPS
operator|&&
name|Header
operator|->
name|getFileClass
argument_list|()
operator|==
name|ELF
operator|::
name|ELFCLASS64
operator|&&
name|Header
operator|->
name|getDataEncoding
argument_list|()
operator|==
name|ELF
operator|::
name|ELFDATA2LSB
return|;
block|}
name|ErrorOr
operator|<
specifier|const
name|Elf_Dyn
operator|*
operator|>
name|dynamic_table_begin
argument_list|(
argument|const Elf_Phdr *Phdr
argument_list|)
specifier|const
expr_stmt|;
name|ErrorOr
operator|<
specifier|const
name|Elf_Dyn
operator|*
operator|>
name|dynamic_table_end
argument_list|(
argument|const Elf_Phdr *Phdr
argument_list|)
specifier|const
expr_stmt|;
name|ErrorOr
operator|<
name|Elf_Dyn_Range
operator|>
name|dynamic_table
argument_list|(
argument|const Elf_Phdr *Phdr
argument_list|)
specifier|const
block|{
name|ErrorOr
operator|<
specifier|const
name|Elf_Dyn
operator|*
operator|>
name|Begin
operator|=
name|dynamic_table_begin
argument_list|(
name|Phdr
argument_list|)
block|;
if|if
condition|(
name|std
operator|::
name|error_code
name|EC
operator|=
name|Begin
operator|.
name|getError
argument_list|()
condition|)
return|return
name|EC
return|;
name|ErrorOr
operator|<
specifier|const
name|Elf_Dyn
operator|*
operator|>
name|End
operator|=
name|dynamic_table_end
argument_list|(
name|Phdr
argument_list|)
expr_stmt|;
if|if
condition|(
name|std
operator|::
name|error_code
name|EC
operator|=
name|End
operator|.
name|getError
argument_list|()
condition|)
return|return
name|EC
return|;
return|return
name|make_range
argument_list|(
operator|*
name|Begin
argument_list|,
operator|*
name|End
argument_list|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
specifier|const
name|Elf_Shdr
operator|*
name|section_begin
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|Elf_Shdr
operator|*
name|section_end
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Elf_Shdr_Range
name|sections
argument_list|()
specifier|const
block|{
return|return
name|make_range
argument_list|(
name|section_begin
argument_list|()
argument_list|,
name|section_end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
specifier|const
name|Elf_Sym
modifier|*
name|symbol_begin
argument_list|(
specifier|const
name|Elf_Shdr
operator|*
name|Sec
argument_list|)
decl|const
block|{
if|if
condition|(
operator|!
name|Sec
condition|)
return|return
name|nullptr
return|;
if|if
condition|(
name|Sec
operator|->
name|sh_entsize
operator|!=
sizeof|sizeof
argument_list|(
name|Elf_Sym
argument_list|)
condition|)
name|report_fatal_error
argument_list|(
literal|"Invalid symbol size"
argument_list|)
expr_stmt|;
return|return
name|reinterpret_cast
operator|<
specifier|const
name|Elf_Sym
operator|*
operator|>
operator|(
name|base
argument_list|()
operator|+
name|Sec
operator|->
name|sh_offset
operator|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|const
name|Elf_Sym
modifier|*
name|symbol_end
argument_list|(
specifier|const
name|Elf_Shdr
operator|*
name|Sec
argument_list|)
decl|const
block|{
if|if
condition|(
operator|!
name|Sec
condition|)
return|return
name|nullptr
return|;
name|uint64_t
name|Size
init|=
name|Sec
operator|->
name|sh_size
decl_stmt|;
if|if
condition|(
name|Size
operator|%
sizeof|sizeof
argument_list|(
name|Elf_Sym
argument_list|)
condition|)
name|report_fatal_error
argument_list|(
literal|"Invalid symbol table size"
argument_list|)
expr_stmt|;
return|return
name|symbol_begin
argument_list|(
name|Sec
argument_list|)
operator|+
name|Size
operator|/
sizeof|sizeof
argument_list|(
name|Elf_Sym
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|Elf_Sym_Range
name|symbols
argument_list|(
specifier|const
name|Elf_Shdr
operator|*
name|Sec
argument_list|)
decl|const
block|{
return|return
name|make_range
argument_list|(
name|symbol_begin
argument_list|(
name|Sec
argument_list|)
argument_list|,
name|symbol_end
argument_list|(
name|Sec
argument_list|)
argument_list|)
return|;
block|}
end_decl_stmt

begin_typedef
typedef|typedef
name|iterator_range
operator|<
specifier|const
name|Elf_Rela
operator|*
operator|>
name|Elf_Rela_Range
expr_stmt|;
end_typedef

begin_decl_stmt
specifier|const
name|Elf_Rela
modifier|*
name|rela_begin
argument_list|(
specifier|const
name|Elf_Shdr
operator|*
name|sec
argument_list|)
decl|const
block|{
if|if
condition|(
name|sec
operator|->
name|sh_entsize
operator|!=
sizeof|sizeof
argument_list|(
name|Elf_Rela
argument_list|)
condition|)
name|report_fatal_error
argument_list|(
literal|"Invalid relocation entry size"
argument_list|)
expr_stmt|;
return|return
name|reinterpret_cast
operator|<
specifier|const
name|Elf_Rela
operator|*
operator|>
operator|(
name|base
argument_list|()
operator|+
name|sec
operator|->
name|sh_offset
operator|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|const
name|Elf_Rela
modifier|*
name|rela_end
argument_list|(
specifier|const
name|Elf_Shdr
operator|*
name|sec
argument_list|)
decl|const
block|{
name|uint64_t
name|Size
init|=
name|sec
operator|->
name|sh_size
decl_stmt|;
if|if
condition|(
name|Size
operator|%
sizeof|sizeof
argument_list|(
name|Elf_Rela
argument_list|)
condition|)
name|report_fatal_error
argument_list|(
literal|"Invalid relocation table size"
argument_list|)
expr_stmt|;
return|return
name|rela_begin
argument_list|(
name|sec
argument_list|)
operator|+
name|Size
operator|/
sizeof|sizeof
argument_list|(
name|Elf_Rela
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|Elf_Rela_Range
name|relas
argument_list|(
specifier|const
name|Elf_Shdr
operator|*
name|Sec
argument_list|)
decl|const
block|{
return|return
name|make_range
argument_list|(
name|rela_begin
argument_list|(
name|Sec
argument_list|)
argument_list|,
name|rela_end
argument_list|(
name|Sec
argument_list|)
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|const
name|Elf_Rel
modifier|*
name|rel_begin
argument_list|(
specifier|const
name|Elf_Shdr
operator|*
name|sec
argument_list|)
decl|const
block|{
if|if
condition|(
name|sec
operator|->
name|sh_entsize
operator|!=
sizeof|sizeof
argument_list|(
name|Elf_Rel
argument_list|)
condition|)
name|report_fatal_error
argument_list|(
literal|"Invalid relocation entry size"
argument_list|)
expr_stmt|;
return|return
name|reinterpret_cast
operator|<
specifier|const
name|Elf_Rel
operator|*
operator|>
operator|(
name|base
argument_list|()
operator|+
name|sec
operator|->
name|sh_offset
operator|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|const
name|Elf_Rel
modifier|*
name|rel_end
argument_list|(
specifier|const
name|Elf_Shdr
operator|*
name|sec
argument_list|)
decl|const
block|{
name|uint64_t
name|Size
init|=
name|sec
operator|->
name|sh_size
decl_stmt|;
if|if
condition|(
name|Size
operator|%
sizeof|sizeof
argument_list|(
name|Elf_Rel
argument_list|)
condition|)
name|report_fatal_error
argument_list|(
literal|"Invalid relocation table size"
argument_list|)
expr_stmt|;
return|return
name|rel_begin
argument_list|(
name|sec
argument_list|)
operator|+
name|Size
operator|/
sizeof|sizeof
argument_list|(
name|Elf_Rel
argument_list|)
return|;
block|}
end_decl_stmt

begin_typedef
typedef|typedef
name|iterator_range
operator|<
specifier|const
name|Elf_Rel
operator|*
operator|>
name|Elf_Rel_Range
expr_stmt|;
end_typedef

begin_decl_stmt
name|Elf_Rel_Range
name|rels
argument_list|(
specifier|const
name|Elf_Shdr
operator|*
name|Sec
argument_list|)
decl|const
block|{
return|return
name|make_range
argument_list|(
name|rel_begin
argument_list|(
name|Sec
argument_list|)
argument_list|,
name|rel_end
argument_list|(
name|Sec
argument_list|)
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/// \brief Iterate over program header table.
end_comment

begin_expr_stmt
specifier|const
name|Elf_Phdr
operator|*
name|program_header_begin
argument_list|()
specifier|const
block|{
if|if
condition|(
name|Header
operator|->
name|e_phnum
operator|&&
name|Header
operator|->
name|e_phentsize
operator|!=
sizeof|sizeof
argument_list|(
name|Elf_Phdr
argument_list|)
condition|)
name|report_fatal_error
argument_list|(
literal|"Invalid program header size"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|reinterpret_cast
operator|<
specifier|const
name|Elf_Phdr
operator|*
operator|>
operator|(
name|base
argument_list|()
operator|+
name|Header
operator|->
name|e_phoff
operator|)
return|;
end_return

begin_expr_stmt
unit|}    const
name|Elf_Phdr
operator|*
name|program_header_end
argument_list|()
specifier|const
block|{
return|return
name|program_header_begin
argument_list|()
operator|+
name|Header
operator|->
name|e_phnum
return|;
block|}
end_expr_stmt

begin_typedef
typedef|typedef
name|iterator_range
operator|<
specifier|const
name|Elf_Phdr
operator|*
operator|>
name|Elf_Phdr_Range
expr_stmt|;
end_typedef

begin_expr_stmt
specifier|const
name|Elf_Phdr_Range
name|program_headers
argument_list|()
specifier|const
block|{
return|return
name|make_range
argument_list|(
name|program_header_begin
argument_list|()
argument_list|,
name|program_header_end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|uint64_t
name|getNumSections
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|uintX_t
name|getStringTableIndex
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|uint32_t
name|getExtendedSymbolTableIndex
argument_list|(
specifier|const
name|Elf_Sym
operator|*
name|Sym
argument_list|,
specifier|const
name|Elf_Shdr
operator|*
name|SymTab
argument_list|,
name|ArrayRef
operator|<
name|Elf_Word
operator|>
name|ShndxTable
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_expr_stmt
specifier|const
name|Elf_Ehdr
operator|*
name|getHeader
argument_list|()
specifier|const
block|{
return|return
name|Header
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|ErrorOr
operator|<
specifier|const
name|Elf_Shdr
operator|*
operator|>
name|getSection
argument_list|(
argument|const Elf_Sym *Sym
argument_list|,
argument|const Elf_Shdr *SymTab
argument_list|,
argument|ArrayRef<Elf_Word> ShndxTable
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|ErrorOr
operator|<
specifier|const
name|Elf_Shdr
operator|*
operator|>
name|getSection
argument_list|(
argument|uint32_t Index
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|const
name|Elf_Sym
modifier|*
name|getSymbol
argument_list|(
specifier|const
name|Elf_Shdr
operator|*
name|Sec
argument_list|,
name|uint32_t
name|Index
argument_list|)
decl|const
block|{
return|return
operator|&
operator|*
operator|(
name|symbol_begin
argument_list|(
name|Sec
argument_list|)
operator|+
name|Index
operator|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|ErrorOr
operator|<
name|StringRef
operator|>
name|getSectionName
argument_list|(
argument|const Elf_Shdr *Section
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|ErrorOr
operator|<
name|ArrayRef
operator|<
name|T
operator|>>
name|getSectionContentsAsArray
argument_list|(
argument|const Elf_Shdr *Sec
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|ErrorOr
operator|<
name|ArrayRef
operator|<
name|uint8_t
operator|>
expr|>
name|getSectionContents
argument_list|(
argument|const Elf_Shdr *Sec
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_typedef
unit|};
typedef|typedef
name|ELFFile
operator|<
name|ELFType
operator|<
name|support
operator|::
name|little
operator|,
name|false
operator|>>
name|ELF32LEFile
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|ELFFile
operator|<
name|ELFType
operator|<
name|support
operator|::
name|little
operator|,
name|true
operator|>>
name|ELF64LEFile
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|ELFFile
operator|<
name|ELFType
operator|<
name|support
operator|::
name|big
operator|,
name|false
operator|>>
name|ELF32BEFile
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|ELFFile
operator|<
name|ELFType
operator|<
name|support
operator|::
name|big
operator|,
name|true
operator|>>
name|ELF64BEFile
expr_stmt|;
end_typedef

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|uint32_t
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getExtendedSymbolTableIndex
argument_list|(
argument|const Elf_Sym *Sym
argument_list|,
argument|const Elf_Shdr *SymTab
argument_list|,
argument|ArrayRef<Elf_Word> ShndxTable
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|Sym
operator|->
name|st_shndx
operator|==
name|ELF
operator|::
name|SHN_XINDEX
argument_list|)
block|;
name|unsigned
name|Index
operator|=
name|Sym
operator|-
name|symbol_begin
argument_list|(
name|SymTab
argument_list|)
block|;
comment|// The size of the table was checked in getSHNDXTable.
return|return
name|ShndxTable
index|[
name|Index
index|]
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|ErrorOr
operator|<
specifier|const
name|typename
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Shdr
operator|*
operator|>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getSection
argument_list|(
argument|const Elf_Sym *Sym
argument_list|,
argument|const Elf_Shdr *SymTab
argument_list|,
argument|ArrayRef<Elf_Word> ShndxTable
argument_list|)
specifier|const
block|{
name|uint32_t
name|Index
operator|=
name|Sym
operator|->
name|st_shndx
block|;
if|if
condition|(
name|Index
operator|==
name|ELF
operator|::
name|SHN_XINDEX
condition|)
return|return
name|getSection
argument_list|(
name|getExtendedSymbolTableIndex
argument_list|(
name|Sym
argument_list|,
name|SymTab
argument_list|,
name|ShndxTable
argument_list|)
argument_list|)
return|;
end_expr_stmt

begin_if
if|if
condition|(
name|Index
operator|==
name|ELF
operator|::
name|SHN_UNDEF
operator|||
name|Index
operator|>=
name|ELF
operator|::
name|SHN_LORESERVE
condition|)
return|return
name|nullptr
return|;
end_if

begin_return
return|return
name|getSection
argument_list|(
name|Sym
operator|->
name|st_shndx
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|template
operator|<
name|typename
name|T
operator|>
name|ErrorOr
operator|<
name|ArrayRef
operator|<
name|T
operator|>>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getSectionContentsAsArray
argument_list|(
argument|const Elf_Shdr *Sec
argument_list|)
specifier|const
block|{
name|uintX_t
name|Offset
operator|=
name|Sec
operator|->
name|sh_offset
block|;
name|uintX_t
name|Size
operator|=
name|Sec
operator|->
name|sh_size
block|;
if|if
condition|(
name|Size
operator|%
sizeof|sizeof
argument_list|(
name|T
argument_list|)
condition|)
return|return
name|object_error
operator|::
name|parse_failed
return|;
end_expr_stmt

begin_if
if|if
condition|(
name|Offset
operator|+
name|Size
operator|>
name|Buf
operator|.
name|size
argument_list|()
condition|)
return|return
name|object_error
operator|::
name|parse_failed
return|;
end_if

begin_decl_stmt
specifier|const
name|T
modifier|*
name|Start
init|=
name|reinterpret_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|base
argument_list|()
operator|+
name|Offset
operator|)
decl_stmt|;
end_decl_stmt

begin_return
return|return
name|makeArrayRef
argument_list|(
name|Start
argument_list|,
name|Size
operator|/
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|ErrorOr
operator|<
name|ArrayRef
operator|<
name|uint8_t
operator|>>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getSectionContents
argument_list|(
argument|const Elf_Shdr *Sec
argument_list|)
specifier|const
block|{
return|return
name|getSectionContentsAsArray
operator|<
name|uint8_t
operator|>
operator|(
name|Sec
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|StringRef
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getRelocationTypeName
argument_list|(
argument|uint32_t Type
argument_list|)
specifier|const
block|{
return|return
name|getELFRelocationTypeName
argument_list|(
name|Header
operator|->
name|e_machine
argument_list|,
name|Type
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|void
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getRelocationTypeName
argument_list|(
argument|uint32_t Type
argument_list|,
argument|SmallVectorImpl<char>&Result
argument_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|isMipsELF64
argument_list|()
condition|)
block|{
name|StringRef
name|Name
init|=
name|getRelocationTypeName
argument_list|(
name|Type
argument_list|)
decl_stmt|;
name|Result
operator|.
name|append
argument_list|(
name|Name
operator|.
name|begin
argument_list|()
argument_list|,
name|Name
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
comment|// The Mips N64 ABI allows up to three operations to be specified per
comment|// relocation record. Unfortunately there's no easy way to test for the
comment|// presence of N64 ELFs as they have no special flag that identifies them
comment|// as being N64. We can safely assume at the moment that all Mips
comment|// ELFCLASS64 ELFs are N64. New Mips64 ABIs should provide enough
comment|// information to disambiguate between old vs new ABIs.
name|uint8_t
name|Type1
init|=
operator|(
name|Type
operator|>>
literal|0
operator|)
operator|&
literal|0xFF
decl_stmt|;
name|uint8_t
name|Type2
init|=
operator|(
name|Type
operator|>>
literal|8
operator|)
operator|&
literal|0xFF
decl_stmt|;
name|uint8_t
name|Type3
init|=
operator|(
name|Type
operator|>>
literal|16
operator|)
operator|&
literal|0xFF
decl_stmt|;
comment|// Concat all three relocation type names.
name|StringRef
name|Name
init|=
name|getRelocationTypeName
argument_list|(
name|Type1
argument_list|)
decl_stmt|;
name|Result
operator|.
name|append
argument_list|(
name|Name
operator|.
name|begin
argument_list|()
argument_list|,
name|Name
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|Name
operator|=
name|getRelocationTypeName
argument_list|(
name|Type2
argument_list|)
expr_stmt|;
name|Result
operator|.
name|append
argument_list|(
literal|1
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|Result
operator|.
name|append
argument_list|(
name|Name
operator|.
name|begin
argument_list|()
argument_list|,
name|Name
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|Name
operator|=
name|getRelocationTypeName
argument_list|(
name|Type3
argument_list|)
expr_stmt|;
name|Result
operator|.
name|append
argument_list|(
literal|1
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|Result
operator|.
name|append
argument_list|(
name|Name
operator|.
name|begin
argument_list|()
argument_list|,
name|Name
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_else

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
specifier|const
name|typename
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Sym
operator|*
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getRelocationSymbol
argument_list|(
argument|const Elf_Rel *Rel
argument_list|,
argument|const Elf_Shdr *SymTab
argument_list|)
specifier|const
block|{
name|uint32_t
name|Index
operator|=
name|Rel
operator|->
name|getSymbol
argument_list|(
name|isMips64EL
argument_list|()
argument_list|)
block|;
if|if
condition|(
name|Index
operator|==
literal|0
condition|)
return|return
name|nullptr
return|;
end_expr_stmt

begin_return
return|return
name|getEntry
operator|<
name|Elf_Sym
operator|>
operator|(
name|SymTab
operator|,
name|Index
operator|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|uint64_t
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getNumSections
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|Header
operator|&&
literal|"Header not initialized!"
argument_list|)
block|;
if|if
condition|(
name|Header
operator|->
name|e_shnum
operator|==
name|ELF
operator|::
name|SHN_UNDEF
operator|&&
name|Header
operator|->
name|e_shoff
operator|>
literal|0
condition|)
block|{
name|assert
argument_list|(
name|SectionHeaderTable
operator|&&
literal|"SectionHeaderTable not initialized!"
argument_list|)
expr_stmt|;
return|return
name|SectionHeaderTable
operator|->
name|sh_size
return|;
block|}
end_expr_stmt

begin_return
return|return
name|Header
operator|->
name|e_shnum
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|typename
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|uintX_t
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getStringTableIndex
argument_list|()
specifier|const
block|{
if|if
condition|(
name|Header
operator|->
name|e_shnum
operator|==
name|ELF
operator|::
name|SHN_UNDEF
condition|)
block|{
if|if
condition|(
name|Header
operator|->
name|e_shstrndx
operator|==
name|ELF
operator|::
name|SHN_HIRESERVE
condition|)
return|return
name|SectionHeaderTable
operator|->
name|sh_link
return|;
if|if
condition|(
name|Header
operator|->
name|e_shstrndx
operator|>=
name|getNumSections
argument_list|()
condition|)
return|return
literal|0
return|;
block|}
end_expr_stmt

begin_return
return|return
name|Header
operator|->
name|e_shstrndx
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|ELFFile
argument_list|(
argument|StringRef Object
argument_list|,
argument|std::error_code&EC
argument_list|)
operator|:
name|Buf
argument_list|(
argument|Object
argument_list|)
block|{
specifier|const
name|uint64_t
name|FileSize
operator|=
name|Buf
operator|.
name|size
argument_list|()
block|;
if|if
condition|(
sizeof|sizeof
argument_list|(
name|Elf_Ehdr
argument_list|)
operator|>
name|FileSize
condition|)
block|{
comment|// File too short!
name|EC
operator|=
name|object_error
operator|::
name|parse_failed
expr_stmt|;
return|return;
block|}
name|Header
operator|=
name|reinterpret_cast
operator|<
specifier|const
name|Elf_Ehdr
operator|*
operator|>
operator|(
name|base
argument_list|()
operator|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|Header
operator|->
name|e_shoff
operator|==
literal|0
condition|)
return|return;
end_if

begin_decl_stmt
specifier|const
name|uint64_t
name|SectionTableOffset
init|=
name|Header
operator|->
name|e_shoff
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|SectionTableOffset
operator|+
sizeof|sizeof
argument_list|(
name|Elf_Shdr
argument_list|)
operator|>
name|FileSize
condition|)
block|{
comment|// Section header table goes past end of file!
name|EC
operator|=
name|object_error
operator|::
name|parse_failed
expr_stmt|;
return|return;
block|}
end_if

begin_comment
comment|// The getNumSections() call below depends on SectionHeaderTable being set.
end_comment

begin_expr_stmt
name|SectionHeaderTable
operator|=
name|reinterpret_cast
operator|<
specifier|const
name|Elf_Shdr
operator|*
operator|>
operator|(
name|base
argument_list|()
operator|+
name|SectionTableOffset
operator|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|const
name|uint64_t
name|SectionTableSize
init|=
name|getNumSections
argument_list|()
operator|*
name|Header
operator|->
name|e_shentsize
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|SectionTableOffset
operator|+
name|SectionTableSize
operator|>
name|FileSize
condition|)
block|{
comment|// Section table goes past end of file!
name|EC
operator|=
name|object_error
operator|::
name|parse_failed
expr_stmt|;
return|return;
block|}
end_if

begin_comment
comment|// Get string table sections.
end_comment

begin_decl_stmt
name|uintX_t
name|StringTableIndex
init|=
name|getStringTableIndex
argument_list|()
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|StringTableIndex
condition|)
block|{
name|ErrorOr
operator|<
specifier|const
name|Elf_Shdr
operator|*
operator|>
name|StrTabSecOrErr
operator|=
name|getSection
argument_list|(
name|StringTableIndex
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|EC
operator|=
name|StrTabSecOrErr
operator|.
name|getError
argument_list|()
operator|)
condition|)
return|return;
name|ErrorOr
operator|<
name|StringRef
operator|>
name|StringTableOrErr
operator|=
name|getStringTable
argument_list|(
operator|*
name|StrTabSecOrErr
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|EC
operator|=
name|StringTableOrErr
operator|.
name|getError
argument_list|()
operator|)
condition|)
return|return;
name|DotShstrtab
operator|=
operator|*
name|StringTableOrErr
expr_stmt|;
block|}
end_if

begin_expr_stmt
name|EC
operator|=
name|std
operator|::
name|error_code
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
specifier|static
name|bool
name|compareAddr
argument_list|(
argument|uint64_t VAddr
argument_list|,
argument|const Elf_Phdr_Impl<ELFT> *Phdr
argument_list|)
block|{
return|return
name|VAddr
operator|<
name|Phdr
operator|->
name|p_vaddr
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
specifier|const
name|typename
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Shdr
operator|*
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|section_begin
argument_list|()
specifier|const
block|{
if|if
condition|(
name|Header
operator|->
name|e_shentsize
operator|!=
sizeof|sizeof
argument_list|(
name|Elf_Shdr
argument_list|)
condition|)
name|report_fatal_error
argument_list|(
literal|"Invalid section header entry size (e_shentsize) in ELF header"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|reinterpret_cast
operator|<
specifier|const
name|Elf_Shdr
operator|*
operator|>
operator|(
name|base
argument_list|()
operator|+
name|Header
operator|->
name|e_shoff
operator|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
specifier|const
name|typename
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Shdr
operator|*
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|section_end
argument_list|()
specifier|const
block|{
return|return
name|section_begin
argument_list|()
operator|+
name|getNumSections
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|ErrorOr
operator|<
specifier|const
name|typename
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Dyn
operator|*
operator|>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|dynamic_table_begin
argument_list|(
argument|const Elf_Phdr *Phdr
argument_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|Phdr
condition|)
return|return
name|nullptr
return|;
name|assert
argument_list|(
name|Phdr
operator|->
name|p_type
operator|==
name|ELF
operator|::
name|PT_DYNAMIC
operator|&&
literal|"Got the wrong program header"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|uintX_t
name|Offset
init|=
name|Phdr
operator|->
name|p_offset
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|Offset
operator|>
name|Buf
operator|.
name|size
argument_list|()
condition|)
return|return
name|object_error
operator|::
name|parse_failed
return|;
end_if

begin_return
return|return
name|reinterpret_cast
operator|<
specifier|const
name|Elf_Dyn
operator|*
operator|>
operator|(
name|base
argument_list|()
operator|+
name|Offset
operator|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|ErrorOr
operator|<
specifier|const
name|typename
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Dyn
operator|*
operator|>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|dynamic_table_end
argument_list|(
argument|const Elf_Phdr *Phdr
argument_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|Phdr
condition|)
return|return
name|nullptr
return|;
name|assert
argument_list|(
name|Phdr
operator|->
name|p_type
operator|==
name|ELF
operator|::
name|PT_DYNAMIC
operator|&&
literal|"Got the wrong program header"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|uintX_t
name|Size
init|=
name|Phdr
operator|->
name|p_filesz
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|Size
operator|%
sizeof|sizeof
argument_list|(
name|Elf_Dyn
argument_list|)
condition|)
return|return
name|object_error
operator|::
name|elf_invalid_dynamic_table_size
return|;
end_if

begin_comment
comment|// FIKME: Check for overflow?
end_comment

begin_decl_stmt
name|uintX_t
name|End
init|=
name|Phdr
operator|->
name|p_offset
operator|+
name|Size
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|End
operator|>
name|Buf
operator|.
name|size
argument_list|()
condition|)
return|return
name|object_error
operator|::
name|parse_failed
return|;
end_if

begin_return
return|return
name|reinterpret_cast
operator|<
specifier|const
name|Elf_Dyn
operator|*
operator|>
operator|(
name|base
argument_list|()
operator|+
name|End
operator|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|const
name|T
operator|*
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getEntry
argument_list|(
argument|uint32_t Section
argument_list|,
argument|uint32_t Entry
argument_list|)
specifier|const
block|{
name|ErrorOr
operator|<
specifier|const
name|Elf_Shdr
operator|*
operator|>
name|Sec
operator|=
name|getSection
argument_list|(
name|Section
argument_list|)
block|;
if|if
condition|(
name|std
operator|::
name|error_code
name|EC
operator|=
name|Sec
operator|.
name|getError
argument_list|()
condition|)
name|report_fatal_error
argument_list|(
name|EC
operator|.
name|message
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|getEntry
operator|<
name|T
operator|>
operator|(
operator|*
name|Sec
operator|,
name|Entry
operator|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|template
operator|<
name|typename
name|T
operator|>
specifier|const
name|T
operator|*
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getEntry
argument_list|(
argument|const Elf_Shdr *Section
argument_list|,
argument|uint32_t Entry
argument_list|)
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|base
argument_list|()
operator|+
name|Section
operator|->
name|sh_offset
operator|+
operator|(
name|Entry
operator|*
name|Section
operator|->
name|sh_entsize
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|ErrorOr
operator|<
specifier|const
name|typename
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Shdr
operator|*
operator|>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getSection
argument_list|(
argument|uint32_t Index
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|SectionHeaderTable
operator|&&
literal|"SectionHeaderTable not initialized!"
argument_list|)
block|;
if|if
condition|(
name|Index
operator|>=
name|getNumSections
argument_list|()
condition|)
return|return
name|object_error
operator|::
name|invalid_section_index
return|;
end_expr_stmt

begin_return
return|return
name|reinterpret_cast
operator|<
specifier|const
name|Elf_Shdr
operator|*
operator|>
operator|(
name|reinterpret_cast
operator|<
specifier|const
name|char
operator|*
operator|>
operator|(
name|SectionHeaderTable
operator|)
operator|+
operator|(
name|Index
operator|*
name|Header
operator|->
name|e_shentsize
operator|)
operator|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|ErrorOr
operator|<
name|StringRef
operator|>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getStringTable
argument_list|(
argument|const Elf_Shdr *Section
argument_list|)
specifier|const
block|{
if|if
condition|(
name|Section
operator|->
name|sh_type
operator|!=
name|ELF
operator|::
name|SHT_STRTAB
condition|)
return|return
name|object_error
operator|::
name|parse_failed
return|;
name|uint64_t
name|Offset
operator|=
name|Section
operator|->
name|sh_offset
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|uint64_t
name|Size
init|=
name|Section
operator|->
name|sh_size
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|Offset
operator|+
name|Size
operator|>
name|Buf
operator|.
name|size
argument_list|()
condition|)
return|return
name|object_error
operator|::
name|parse_failed
return|;
end_if

begin_decl_stmt
name|StringRef
name|Data
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|base
argument_list|()
operator|+
name|Section
operator|->
name|sh_offset
argument_list|,
name|Size
argument_list|)
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|Data
index|[
name|Size
operator|-
literal|1
index|]
operator|!=
literal|'\0'
condition|)
return|return
name|object_error
operator|::
name|string_table_non_null_end
return|;
end_if

begin_return
return|return
name|Data
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|ErrorOr
operator|<
name|ArrayRef
operator|<
name|typename
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Word
operator|>>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getSHNDXTable
argument_list|(
argument|const Elf_Shdr&Section
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|Section
operator|.
name|sh_type
operator|==
name|ELF
operator|::
name|SHT_SYMTAB_SHNDX
argument_list|)
block|;
specifier|const
name|Elf_Word
operator|*
name|ShndxTableBegin
operator|=
name|reinterpret_cast
operator|<
specifier|const
name|Elf_Word
operator|*
operator|>
operator|(
name|base
argument_list|()
operator|+
name|Section
operator|.
name|sh_offset
operator|)
block|;
name|uintX_t
name|Size
operator|=
name|Section
operator|.
name|sh_size
block|;
if|if
condition|(
name|Size
operator|%
sizeof|sizeof
argument_list|(
name|uint32_t
argument_list|)
condition|)
return|return
name|object_error
operator|::
name|parse_failed
return|;
name|uintX_t
name|NumSymbols
operator|=
name|Size
operator|/
sizeof|sizeof
argument_list|(
name|uint32_t
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|const
name|Elf_Word
modifier|*
name|ShndxTableEnd
init|=
name|ShndxTableBegin
operator|+
name|NumSymbols
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|reinterpret_cast
operator|<
specifier|const
name|char
operator|*
operator|>
operator|(
name|ShndxTableEnd
operator|)
operator|>
name|Buf
operator|.
name|end
argument_list|()
condition|)
return|return
name|object_error
operator|::
name|parse_failed
return|;
end_if

begin_expr_stmt
name|ErrorOr
operator|<
specifier|const
name|Elf_Shdr
operator|*
operator|>
name|SymTableOrErr
operator|=
name|getSection
argument_list|(
name|Section
operator|.
name|sh_link
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|std
operator|::
name|error_code
name|EC
operator|=
name|SymTableOrErr
operator|.
name|getError
argument_list|()
condition|)
return|return
name|EC
return|;
end_if

begin_decl_stmt
specifier|const
name|Elf_Shdr
modifier|&
name|SymTable
init|=
operator|*
operator|*
name|SymTableOrErr
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|SymTable
operator|.
name|sh_type
operator|!=
name|ELF
operator|::
name|SHT_SYMTAB
operator|&&
name|SymTable
operator|.
name|sh_type
operator|!=
name|ELF
operator|::
name|SHT_DYNSYM
condition|)
return|return
name|object_error
operator|::
name|parse_failed
return|;
end_if

begin_if
if|if
condition|(
name|NumSymbols
operator|!=
operator|(
name|SymTable
operator|.
name|sh_size
operator|/
sizeof|sizeof
argument_list|(
name|Elf_Sym
argument_list|)
operator|)
condition|)
return|return
name|object_error
operator|::
name|parse_failed
return|;
end_if

begin_return
return|return
name|makeArrayRef
argument_list|(
name|ShndxTableBegin
argument_list|,
name|ShndxTableEnd
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|ErrorOr
operator|<
name|StringRef
operator|>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getStringTableForSymtab
argument_list|(
argument|const Elf_Shdr&Sec
argument_list|)
specifier|const
block|{
if|if
condition|(
name|Sec
operator|.
name|sh_type
operator|!=
name|ELF
operator|::
name|SHT_SYMTAB
operator|&&
name|Sec
operator|.
name|sh_type
operator|!=
name|ELF
operator|::
name|SHT_DYNSYM
condition|)
return|return
name|object_error
operator|::
name|parse_failed
return|;
name|ErrorOr
operator|<
specifier|const
name|Elf_Shdr
operator|*
operator|>
name|SectionOrErr
operator|=
name|getSection
argument_list|(
name|Sec
operator|.
name|sh_link
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|std
operator|::
name|error_code
name|EC
operator|=
name|SectionOrErr
operator|.
name|getError
argument_list|()
condition|)
return|return
name|EC
return|;
end_if

begin_return
return|return
name|getStringTable
argument_list|(
operator|*
name|SectionOrErr
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|ErrorOr
operator|<
name|StringRef
operator|>
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|getSectionName
argument_list|(
argument|const Elf_Shdr *Section
argument_list|)
specifier|const
block|{
name|uint32_t
name|Offset
operator|=
name|Section
operator|->
name|sh_name
block|;
if|if
condition|(
name|Offset
operator|==
literal|0
condition|)
return|return
name|StringRef
argument_list|()
return|;
end_expr_stmt

begin_if
if|if
condition|(
name|Offset
operator|>=
name|DotShstrtab
operator|.
name|size
argument_list|()
condition|)
return|return
name|object_error
operator|::
name|parse_failed
return|;
end_if

begin_return
return|return
name|StringRef
argument_list|(
name|DotShstrtab
operator|.
name|data
argument_list|()
operator|+
name|Offset
argument_list|)
return|;
end_return

begin_comment
unit|}
comment|/// This function returns the hash value for a symbol in the .dynsym section
end_comment

begin_comment
comment|/// Name of the API remains consistent as specified in the libelf
end_comment

begin_comment
comment|/// REF : http://www.sco.com/developers/gabi/latest/ch5.dynamic.html#hash
end_comment

begin_function
unit|static
specifier|inline
name|unsigned
name|elf_hash
parameter_list|(
name|StringRef
modifier|&
name|symbolName
parameter_list|)
block|{
name|unsigned
name|h
init|=
literal|0
decl_stmt|,
name|g
decl_stmt|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|,
name|j
init|=
name|symbolName
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|j
condition|;
name|i
operator|++
control|)
block|{
name|h
operator|=
operator|(
name|h
operator|<<
literal|4
operator|)
operator|+
name|symbolName
index|[
name|i
index|]
expr_stmt|;
name|g
operator|=
name|h
operator|&
literal|0xf0000000L
expr_stmt|;
if|if
condition|(
name|g
operator|!=
literal|0
condition|)
name|h
operator|^=
name|g
operator|>>
literal|24
expr_stmt|;
name|h
operator|&=
operator|~
name|g
expr_stmt|;
block|}
return|return
name|h
return|;
block|}
end_function

begin_comment
unit|}
comment|// end namespace object
end_comment

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

