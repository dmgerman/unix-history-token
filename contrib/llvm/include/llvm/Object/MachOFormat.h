begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- MachOFormat.h - Mach-O Format Structures And Constants ---*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares various structures and constants which are platform
end_comment

begin_comment
comment|// independent and can be shared by any client which wishes to interact with
end_comment

begin_comment
comment|// Mach object files.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// The definitions here are purposely chosen to match the LLVM style as opposed
end_comment

begin_comment
comment|// to following the platform specific definition of the format.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// On a Mach system, see the<mach-o/...> includes for more information, in
end_comment

begin_comment
comment|// particular<mach-o/loader.h>.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_OBJECT_MACHOFORMAT_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_OBJECT_MACHOFORMAT_H
end_define

begin_include
include|#
directive|include
file|"llvm/Support/DataTypes.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|object
block|{
comment|/// General Mach platform information.
name|namespace
name|mach
block|{
comment|/// @name CPU Type and Subtype Information
comment|/// {
comment|/// \brief Capability bits used in CPU type encoding.
enum|enum
name|CPUTypeFlagsMask
block|{
name|CTFM_ArchMask
init|=
literal|0xFF000000
block|,
name|CTFM_ArchABI64
init|=
literal|0x01000000
block|}
enum|;
comment|/// \brief Machine type IDs used in CPU type encoding.
enum|enum
name|CPUTypeMachine
block|{
name|CTM_i386
init|=
literal|7
block|,
name|CTM_x86_64
init|=
name|CTM_i386
operator||
name|CTFM_ArchABI64
block|,
name|CTM_ARM
init|=
literal|12
block|,
name|CTM_SPARC
init|=
literal|14
block|,
name|CTM_PowerPC
init|=
literal|18
block|,
name|CTM_PowerPC64
init|=
name|CTM_PowerPC
operator||
name|CTFM_ArchABI64
block|}
enum|;
comment|/// \brief Capability bits used in CPU subtype encoding.
enum|enum
name|CPUSubtypeFlagsMask
block|{
name|CSFM_SubtypeMask
init|=
literal|0xFF000000
block|,
name|CSFM_SubtypeLib64
init|=
literal|0x80000000
block|}
enum|;
comment|/// \brief ARM Machine Subtypes.
enum|enum
name|CPUSubtypeARM
block|{
name|CSARM_ALL
init|=
literal|0
block|,
name|CSARM_V4T
init|=
literal|5
block|,
name|CSARM_V6
init|=
literal|6
block|,
name|CSARM_V5TEJ
init|=
literal|7
block|,
name|CSARM_XSCALE
init|=
literal|8
block|,
name|CSARM_V7
init|=
literal|9
block|}
enum|;
comment|/// \brief PowerPC Machine Subtypes.
enum|enum
name|CPUSubtypePowerPC
block|{
name|CSPPC_ALL
init|=
literal|0
block|}
enum|;
comment|/// \brief SPARC Machine Subtypes.
enum|enum
name|CPUSubtypeSPARC
block|{
name|CSSPARC_ALL
init|=
literal|0
block|}
enum|;
comment|/// \brief x86 Machine Subtypes.
enum|enum
name|CPUSubtypeX86
block|{
name|CSX86_ALL
init|=
literal|3
block|}
enum|;
comment|/// @}
block|}
comment|// end namespace mach
comment|/// Format information for Mach object files.
name|namespace
name|macho
block|{
comment|/// \brief Constants for structure sizes.
enum|enum
name|StructureSizes
block|{
name|Header32Size
init|=
literal|28
block|,
name|Header64Size
init|=
literal|32
block|,
name|SegmentLoadCommand32Size
init|=
literal|56
block|,
name|SegmentLoadCommand64Size
init|=
literal|72
block|,
name|Section32Size
init|=
literal|68
block|,
name|Section64Size
init|=
literal|80
block|,
name|SymtabLoadCommandSize
init|=
literal|24
block|,
name|DysymtabLoadCommandSize
init|=
literal|80
block|,
name|Nlist32Size
init|=
literal|12
block|,
name|Nlist64Size
init|=
literal|16
block|,
name|RelocationInfoSize
init|=
literal|8
block|}
enum|;
comment|/// \brief Constants for header magic field.
enum|enum
name|HeaderMagic
block|{
name|HM_Object32
init|=
literal|0xFEEDFACE
block|,
comment|///< 32-bit mach object file
name|HM_Object64
init|=
literal|0xFEEDFACF
block|,
comment|///< 64-bit mach object file
name|HM_Universal
init|=
literal|0xCAFEBABE
comment|///< Universal object file
block|}
enum|;
comment|/// \brief Header common to all Mach object files.
struct|struct
name|Header
block|{
name|uint32_t
name|Magic
decl_stmt|;
name|uint32_t
name|CPUType
decl_stmt|;
name|uint32_t
name|CPUSubtype
decl_stmt|;
name|uint32_t
name|FileType
decl_stmt|;
name|uint32_t
name|NumLoadCommands
decl_stmt|;
name|uint32_t
name|SizeOfLoadCommands
decl_stmt|;
name|uint32_t
name|Flags
decl_stmt|;
block|}
struct|;
comment|/// \brief Extended header for 64-bit object files.
struct|struct
name|Header64Ext
block|{
name|uint32_t
name|Reserved
decl_stmt|;
block|}
struct|;
comment|// See<mach-o/loader.h>.
enum|enum
name|HeaderFileType
block|{
name|HFT_Object
init|=
literal|0x1
block|}
enum|;
enum|enum
name|HeaderFlags
block|{
name|HF_SubsectionsViaSymbols
init|=
literal|0x2000
block|}
enum|;
enum|enum
name|LoadCommandType
block|{
name|LCT_Segment
init|=
literal|0x1
block|,
name|LCT_Symtab
init|=
literal|0x2
block|,
name|LCT_Dysymtab
init|=
literal|0xb
block|,
name|LCT_Segment64
init|=
literal|0x19
block|,
name|LCT_UUID
init|=
literal|0x1b
block|}
enum|;
comment|/// \brief Load command structure.
struct|struct
name|LoadCommand
block|{
name|uint32_t
name|Type
decl_stmt|;
name|uint32_t
name|Size
decl_stmt|;
block|}
struct|;
comment|/// @name Load Command Structures
comment|/// @{
struct|struct
name|SegmentLoadCommand
block|{
name|uint32_t
name|Type
decl_stmt|;
name|uint32_t
name|Size
decl_stmt|;
name|char
name|Name
index|[
literal|16
index|]
decl_stmt|;
name|uint32_t
name|VMAddress
decl_stmt|;
name|uint32_t
name|VMSize
decl_stmt|;
name|uint32_t
name|FileOffset
decl_stmt|;
name|uint32_t
name|FileSize
decl_stmt|;
name|uint32_t
name|MaxVMProtection
decl_stmt|;
name|uint32_t
name|InitialVMProtection
decl_stmt|;
name|uint32_t
name|NumSections
decl_stmt|;
name|uint32_t
name|Flags
decl_stmt|;
block|}
struct|;
struct|struct
name|Segment64LoadCommand
block|{
name|uint32_t
name|Type
decl_stmt|;
name|uint32_t
name|Size
decl_stmt|;
name|char
name|Name
index|[
literal|16
index|]
decl_stmt|;
name|uint64_t
name|VMAddress
decl_stmt|;
name|uint64_t
name|VMSize
decl_stmt|;
name|uint64_t
name|FileOffset
decl_stmt|;
name|uint64_t
name|FileSize
decl_stmt|;
name|uint32_t
name|MaxVMProtection
decl_stmt|;
name|uint32_t
name|InitialVMProtection
decl_stmt|;
name|uint32_t
name|NumSections
decl_stmt|;
name|uint32_t
name|Flags
decl_stmt|;
block|}
struct|;
struct|struct
name|SymtabLoadCommand
block|{
name|uint32_t
name|Type
decl_stmt|;
name|uint32_t
name|Size
decl_stmt|;
name|uint32_t
name|SymbolTableOffset
decl_stmt|;
name|uint32_t
name|NumSymbolTableEntries
decl_stmt|;
name|uint32_t
name|StringTableOffset
decl_stmt|;
name|uint32_t
name|StringTableSize
decl_stmt|;
block|}
struct|;
struct|struct
name|DysymtabLoadCommand
block|{
name|uint32_t
name|Type
decl_stmt|;
name|uint32_t
name|Size
decl_stmt|;
name|uint32_t
name|LocalSymbolsIndex
decl_stmt|;
name|uint32_t
name|NumLocalSymbols
decl_stmt|;
name|uint32_t
name|ExternalSymbolsIndex
decl_stmt|;
name|uint32_t
name|NumExternalSymbols
decl_stmt|;
name|uint32_t
name|UndefinedSymbolsIndex
decl_stmt|;
name|uint32_t
name|NumUndefinedSymbols
decl_stmt|;
name|uint32_t
name|TOCOffset
decl_stmt|;
name|uint32_t
name|NumTOCEntries
decl_stmt|;
name|uint32_t
name|ModuleTableOffset
decl_stmt|;
name|uint32_t
name|NumModuleTableEntries
decl_stmt|;
name|uint32_t
name|ReferenceSymbolTableOffset
decl_stmt|;
name|uint32_t
name|NumReferencedSymbolTableEntries
decl_stmt|;
name|uint32_t
name|IndirectSymbolTableOffset
decl_stmt|;
name|uint32_t
name|NumIndirectSymbolTableEntries
decl_stmt|;
name|uint32_t
name|ExternalRelocationTableOffset
decl_stmt|;
name|uint32_t
name|NumExternalRelocationTableEntries
decl_stmt|;
name|uint32_t
name|LocalRelocationTableOffset
decl_stmt|;
name|uint32_t
name|NumLocalRelocationTableEntries
decl_stmt|;
block|}
struct|;
comment|/// @}
comment|/// @name Section Data
comment|/// @{
struct|struct
name|Section
block|{
name|char
name|Name
index|[
literal|16
index|]
decl_stmt|;
name|char
name|SegmentName
index|[
literal|16
index|]
decl_stmt|;
name|uint32_t
name|Address
decl_stmt|;
name|uint32_t
name|Size
decl_stmt|;
name|uint32_t
name|Offset
decl_stmt|;
name|uint32_t
name|Align
decl_stmt|;
name|uint32_t
name|RelocationTableOffset
decl_stmt|;
name|uint32_t
name|NumRelocationTableEntries
decl_stmt|;
name|uint32_t
name|Flags
decl_stmt|;
name|uint32_t
name|Reserved1
decl_stmt|;
name|uint32_t
name|Reserved2
decl_stmt|;
block|}
struct|;
struct|struct
name|Section64
block|{
name|char
name|Name
index|[
literal|16
index|]
decl_stmt|;
name|char
name|SegmentName
index|[
literal|16
index|]
decl_stmt|;
name|uint64_t
name|Address
decl_stmt|;
name|uint64_t
name|Size
decl_stmt|;
name|uint32_t
name|Offset
decl_stmt|;
name|uint32_t
name|Align
decl_stmt|;
name|uint32_t
name|RelocationTableOffset
decl_stmt|;
name|uint32_t
name|NumRelocationTableEntries
decl_stmt|;
name|uint32_t
name|Flags
decl_stmt|;
name|uint32_t
name|Reserved1
decl_stmt|;
name|uint32_t
name|Reserved2
decl_stmt|;
name|uint32_t
name|Reserved3
decl_stmt|;
block|}
struct|;
comment|/// @}
comment|/// @name Symbol Table Entries
comment|/// @{
struct|struct
name|SymbolTableEntry
block|{
name|uint32_t
name|StringIndex
decl_stmt|;
name|uint8_t
name|Type
decl_stmt|;
name|uint8_t
name|SectionIndex
decl_stmt|;
name|uint16_t
name|Flags
decl_stmt|;
name|uint32_t
name|Value
decl_stmt|;
block|}
struct|;
struct|struct
name|Symbol64TableEntry
block|{
name|uint32_t
name|StringIndex
decl_stmt|;
name|uint8_t
name|Type
decl_stmt|;
name|uint8_t
name|SectionIndex
decl_stmt|;
name|uint16_t
name|Flags
decl_stmt|;
name|uint64_t
name|Value
decl_stmt|;
block|}
struct|;
comment|/// @}
comment|/// @name Indirect Symbol Table
comment|/// @{
struct|struct
name|IndirectSymbolTableEntry
block|{
name|uint32_t
name|Index
decl_stmt|;
block|}
struct|;
comment|/// @}
comment|/// @name Relocation Data
comment|/// @{
struct|struct
name|RelocationEntry
block|{
name|uint32_t
name|Word0
decl_stmt|;
name|uint32_t
name|Word1
decl_stmt|;
block|}
struct|;
comment|/// @}
comment|// See<mach-o/nlist.h>.
enum|enum
name|SymbolTypeType
block|{
name|STT_Undefined
init|=
literal|0x00
block|,
name|STT_Absolute
init|=
literal|0x02
block|,
name|STT_Section
init|=
literal|0x0e
block|}
enum|;
enum|enum
name|SymbolTypeFlags
block|{
comment|// If any of these bits are set, then the entry is a stab entry number (see
comment|//<mach-o/stab.h>. Otherwise the other masks apply.
name|STF_StabsEntryMask
init|=
literal|0xe0
block|,
name|STF_TypeMask
init|=
literal|0x0e
block|,
name|STF_External
init|=
literal|0x01
block|,
name|STF_PrivateExtern
init|=
literal|0x10
block|}
enum|;
comment|/// IndirectSymbolFlags - Flags for encoding special values in the indirect
comment|/// symbol entry.
enum|enum
name|IndirectSymbolFlags
block|{
name|ISF_Local
init|=
literal|0x80000000
block|,
name|ISF_Absolute
init|=
literal|0x40000000
block|}
enum|;
comment|/// RelocationFlags - Special flags for addresses.
enum|enum
name|RelocationFlags
block|{
name|RF_Scattered
init|=
literal|0x80000000
block|}
enum|;
comment|/// Common relocation info types.
enum|enum
name|RelocationInfoType
block|{
name|RIT_Vanilla
init|=
literal|0
block|,
name|RIT_Pair
init|=
literal|1
block|,
name|RIT_Difference
init|=
literal|2
block|}
enum|;
comment|/// Generic relocation info types, which are shared by some (but not all)
comment|/// platforms.
enum|enum
name|RelocationInfoType_Generic
block|{
name|RIT_Generic_PreboundLazyPointer
init|=
literal|3
block|,
name|RIT_Generic_LocalDifference
init|=
literal|4
block|,
name|RIT_Generic_TLV
init|=
literal|5
block|}
enum|;
comment|/// X86_64 uses its own relocation types.
enum|enum
name|RelocationInfoTypeX86_64
block|{
comment|// Note that x86_64 doesn't even share the common relocation types.
name|RIT_X86_64_Unsigned
init|=
literal|0
block|,
name|RIT_X86_64_Signed
init|=
literal|1
block|,
name|RIT_X86_64_Branch
init|=
literal|2
block|,
name|RIT_X86_64_GOTLoad
init|=
literal|3
block|,
name|RIT_X86_64_GOT
init|=
literal|4
block|,
name|RIT_X86_64_Subtractor
init|=
literal|5
block|,
name|RIT_X86_64_Signed1
init|=
literal|6
block|,
name|RIT_X86_64_Signed2
init|=
literal|7
block|,
name|RIT_X86_64_Signed4
init|=
literal|8
block|,
name|RIT_X86_64_TLV
init|=
literal|9
block|}
enum|;
comment|/// ARM uses its own relocation types.
enum|enum
name|RelocationInfoTypeARM
block|{
name|RIT_ARM_LocalDifference
init|=
literal|3
block|,
name|RIT_ARM_PreboundLazyPointer
init|=
literal|4
block|,
name|RIT_ARM_Branch24Bit
init|=
literal|5
block|,
name|RIT_ARM_ThumbBranch22Bit
init|=
literal|6
block|,
name|RIT_ARM_ThumbBranch32Bit
init|=
literal|7
block|,
name|RIT_ARM_Half
init|=
literal|8
block|,
name|RIT_ARM_HalfDifference
init|=
literal|9
block|}
enum|;
block|}
comment|// end namespace macho
block|}
comment|// end namespace object
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

