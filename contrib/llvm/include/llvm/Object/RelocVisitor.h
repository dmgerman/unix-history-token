begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- RelocVisitor.h - Visitor for object file relocations -----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file provides a wrapper around all the different types of relocations
end_comment

begin_comment
comment|// in different file formats, such that a client can handle them in a unified
end_comment

begin_comment
comment|// manner by only implementing a minimal number of functions.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_OBJECT_RELOCVISITOR_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_OBJECT_RELOCVISITOR_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/Triple.h"
end_include

begin_include
include|#
directive|include
file|"llvm/BinaryFormat/ELF.h"
end_include

begin_include
include|#
directive|include
file|"llvm/BinaryFormat/MachO.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/COFF.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/ELFObjectFile.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/MachO.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/ObjectFile.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Casting.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ErrorHandling.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ErrorOr.h"
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_include
include|#
directive|include
file|<system_error>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|object
block|{
comment|/// @brief Base class for object file relocation visitors.
name|class
name|RelocVisitor
block|{
name|public
label|:
name|explicit
name|RelocVisitor
argument_list|(
specifier|const
name|ObjectFile
operator|&
name|Obj
argument_list|)
operator|:
name|ObjToVisit
argument_list|(
argument|Obj
argument_list|)
block|{}
comment|// TODO: Should handle multiple applied relocations via either passing in the
comment|// previously computed value or just count paired relocations as a single
comment|// visit.
name|uint64_t
name|visit
argument_list|(
argument|uint32_t Rel
argument_list|,
argument|RelocationRef R
argument_list|,
argument|uint64_t Value =
literal|0
argument_list|)
block|{
if|if
condition|(
name|isa
operator|<
name|ELFObjectFileBase
operator|>
operator|(
name|ObjToVisit
operator|)
condition|)
return|return
name|visitELF
argument_list|(
name|Rel
argument_list|,
name|R
argument_list|,
name|Value
argument_list|)
return|;
if|if
condition|(
name|isa
operator|<
name|COFFObjectFile
operator|>
operator|(
name|ObjToVisit
operator|)
condition|)
return|return
name|visitCOFF
argument_list|(
name|Rel
argument_list|,
name|R
argument_list|,
name|Value
argument_list|)
return|;
if|if
condition|(
name|isa
operator|<
name|MachOObjectFile
operator|>
operator|(
name|ObjToVisit
operator|)
condition|)
return|return
name|visitMachO
argument_list|(
name|Rel
argument_list|,
name|R
argument_list|,
name|Value
argument_list|)
return|;
name|HasError
operator|=
name|true
expr_stmt|;
return|return
literal|0
return|;
block|}
name|bool
name|error
parameter_list|()
block|{
return|return
name|HasError
return|;
block|}
name|private
label|:
specifier|const
name|ObjectFile
modifier|&
name|ObjToVisit
decl_stmt|;
name|bool
name|HasError
init|=
name|false
decl_stmt|;
name|uint64_t
name|visitELF
parameter_list|(
name|uint32_t
name|Rel
parameter_list|,
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
if|if
condition|(
name|ObjToVisit
operator|.
name|getBytesInAddress
argument_list|()
operator|==
literal|8
condition|)
block|{
comment|// 64-bit object file
switch|switch
condition|(
name|ObjToVisit
operator|.
name|getArch
argument_list|()
condition|)
block|{
case|case
name|Triple
operator|::
name|x86_64
case|:
return|return
name|visitX86_64
argument_list|(
name|Rel
argument_list|,
name|R
argument_list|,
name|Value
argument_list|)
return|;
case|case
name|Triple
operator|::
name|aarch64
case|:
case|case
name|Triple
operator|::
name|aarch64_be
case|:
return|return
name|visitAarch64
argument_list|(
name|Rel
argument_list|,
name|R
argument_list|,
name|Value
argument_list|)
return|;
case|case
name|Triple
operator|::
name|bpfel
case|:
case|case
name|Triple
operator|::
name|bpfeb
case|:
return|return
name|visitBpf
argument_list|(
name|Rel
argument_list|,
name|R
argument_list|,
name|Value
argument_list|)
return|;
case|case
name|Triple
operator|::
name|mips64el
case|:
case|case
name|Triple
operator|::
name|mips64
case|:
return|return
name|visitMips64
argument_list|(
name|Rel
argument_list|,
name|R
argument_list|,
name|Value
argument_list|)
return|;
case|case
name|Triple
operator|::
name|ppc64le
case|:
case|case
name|Triple
operator|::
name|ppc64
case|:
return|return
name|visitPPC64
argument_list|(
name|Rel
argument_list|,
name|R
argument_list|,
name|Value
argument_list|)
return|;
case|case
name|Triple
operator|::
name|systemz
case|:
return|return
name|visitSystemz
argument_list|(
name|Rel
argument_list|,
name|R
argument_list|,
name|Value
argument_list|)
return|;
case|case
name|Triple
operator|::
name|sparcv9
case|:
return|return
name|visitSparc64
argument_list|(
name|Rel
argument_list|,
name|R
argument_list|,
name|Value
argument_list|)
return|;
case|case
name|Triple
operator|::
name|amdgcn
case|:
return|return
name|visitAmdgpu
argument_list|(
name|Rel
argument_list|,
name|R
argument_list|,
name|Value
argument_list|)
return|;
default|default:
name|HasError
operator|=
name|true
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
comment|// 32-bit object file
name|assert
argument_list|(
name|ObjToVisit
operator|.
name|getBytesInAddress
argument_list|()
operator|==
literal|4
operator|&&
literal|"Invalid word size in object file"
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|ObjToVisit
operator|.
name|getArch
argument_list|()
condition|)
block|{
case|case
name|Triple
operator|::
name|x86
case|:
return|return
name|visitX86
argument_list|(
name|Rel
argument_list|,
name|R
argument_list|,
name|Value
argument_list|)
return|;
case|case
name|Triple
operator|::
name|ppc
case|:
return|return
name|visitPPC32
argument_list|(
name|Rel
argument_list|,
name|R
argument_list|,
name|Value
argument_list|)
return|;
case|case
name|Triple
operator|::
name|arm
case|:
case|case
name|Triple
operator|::
name|armeb
case|:
return|return
name|visitARM
argument_list|(
name|Rel
argument_list|,
name|R
argument_list|,
name|Value
argument_list|)
return|;
case|case
name|Triple
operator|::
name|lanai
case|:
return|return
name|visitLanai
argument_list|(
name|Rel
argument_list|,
name|R
argument_list|,
name|Value
argument_list|)
return|;
case|case
name|Triple
operator|::
name|mipsel
case|:
case|case
name|Triple
operator|::
name|mips
case|:
return|return
name|visitMips32
argument_list|(
name|Rel
argument_list|,
name|R
argument_list|,
name|Value
argument_list|)
return|;
case|case
name|Triple
operator|::
name|sparc
case|:
return|return
name|visitSparc32
argument_list|(
name|Rel
argument_list|,
name|R
argument_list|,
name|Value
argument_list|)
return|;
case|case
name|Triple
operator|::
name|hexagon
case|:
return|return
name|visitHexagon
argument_list|(
name|Rel
argument_list|,
name|R
argument_list|,
name|Value
argument_list|)
return|;
default|default:
name|HasError
operator|=
name|true
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
name|int64_t
name|getELFAddend
parameter_list|(
name|RelocationRef
name|R
parameter_list|)
block|{
name|ErrorOr
operator|<
name|int64_t
operator|>
name|AddendOrErr
operator|=
name|ELFRelocationRef
argument_list|(
name|R
argument_list|)
operator|.
name|getAddend
argument_list|()
expr_stmt|;
if|if
condition|(
name|std
operator|::
name|error_code
name|EC
operator|=
name|AddendOrErr
operator|.
name|getError
argument_list|()
condition|)
name|report_fatal_error
argument_list|(
name|EC
operator|.
name|message
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|*
name|AddendOrErr
return|;
block|}
name|uint64_t
name|visitX86_64
parameter_list|(
name|uint32_t
name|Rel
parameter_list|,
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
switch|switch
condition|(
name|Rel
condition|)
block|{
case|case
name|ELF
operator|::
name|R_X86_64_NONE
case|:
return|return
literal|0
return|;
case|case
name|ELF
operator|::
name|R_X86_64_64
case|:
return|return
name|Value
operator|+
name|getELFAddend
argument_list|(
name|R
argument_list|)
return|;
case|case
name|ELF
operator|::
name|R_X86_64_PC32
case|:
return|return
name|Value
operator|+
name|getELFAddend
argument_list|(
name|R
argument_list|)
operator|-
name|R
operator|.
name|getOffset
argument_list|()
return|;
case|case
name|ELF
operator|::
name|R_X86_64_32
case|:
case|case
name|ELF
operator|::
name|R_X86_64_32S
case|:
return|return
operator|(
name|Value
operator|+
name|getELFAddend
argument_list|(
name|R
argument_list|)
operator|)
operator|&
literal|0xFFFFFFFF
return|;
block|}
name|HasError
operator|=
name|true
expr_stmt|;
return|return
literal|0
return|;
block|}
name|uint64_t
name|visitAarch64
parameter_list|(
name|uint32_t
name|Rel
parameter_list|,
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
switch|switch
condition|(
name|Rel
condition|)
block|{
case|case
name|ELF
operator|::
name|R_AARCH64_ABS32
case|:
block|{
name|int64_t
name|Res
init|=
name|Value
operator|+
name|getELFAddend
argument_list|(
name|R
argument_list|)
decl_stmt|;
if|if
condition|(
name|Res
operator|<
name|INT32_MIN
operator|||
name|Res
operator|>
name|UINT32_MAX
condition|)
name|HasError
operator|=
name|true
expr_stmt|;
return|return
name|static_cast
operator|<
name|uint32_t
operator|>
operator|(
name|Res
operator|)
return|;
block|}
case|case
name|ELF
operator|::
name|R_AARCH64_ABS64
case|:
return|return
name|Value
operator|+
name|getELFAddend
argument_list|(
name|R
argument_list|)
return|;
block|}
name|HasError
operator|=
name|true
expr_stmt|;
return|return
literal|0
return|;
block|}
name|uint64_t
name|visitBpf
parameter_list|(
name|uint32_t
name|Rel
parameter_list|,
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
switch|switch
condition|(
name|Rel
condition|)
block|{
case|case
name|ELF
operator|::
name|R_BPF_64_32
case|:
return|return
name|Value
operator|&
literal|0xFFFFFFFF
return|;
case|case
name|ELF
operator|::
name|R_BPF_64_64
case|:
return|return
name|Value
return|;
block|}
name|HasError
operator|=
name|true
expr_stmt|;
return|return
literal|0
return|;
block|}
name|uint64_t
name|visitMips64
parameter_list|(
name|uint32_t
name|Rel
parameter_list|,
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
switch|switch
condition|(
name|Rel
condition|)
block|{
case|case
name|ELF
operator|::
name|R_MIPS_32
case|:
return|return
operator|(
name|Value
operator|+
name|getELFAddend
argument_list|(
name|R
argument_list|)
operator|)
operator|&
literal|0xFFFFFFFF
return|;
case|case
name|ELF
operator|::
name|R_MIPS_64
case|:
return|return
name|Value
operator|+
name|getELFAddend
argument_list|(
name|R
argument_list|)
return|;
block|}
name|HasError
operator|=
name|true
expr_stmt|;
return|return
literal|0
return|;
block|}
name|uint64_t
name|visitPPC64
parameter_list|(
name|uint32_t
name|Rel
parameter_list|,
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
switch|switch
condition|(
name|Rel
condition|)
block|{
case|case
name|ELF
operator|::
name|R_PPC64_ADDR32
case|:
return|return
operator|(
name|Value
operator|+
name|getELFAddend
argument_list|(
name|R
argument_list|)
operator|)
operator|&
literal|0xFFFFFFFF
return|;
case|case
name|ELF
operator|::
name|R_PPC64_ADDR64
case|:
return|return
name|Value
operator|+
name|getELFAddend
argument_list|(
name|R
argument_list|)
return|;
block|}
name|HasError
operator|=
name|true
expr_stmt|;
return|return
literal|0
return|;
block|}
name|uint64_t
name|visitSystemz
parameter_list|(
name|uint32_t
name|Rel
parameter_list|,
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
switch|switch
condition|(
name|Rel
condition|)
block|{
case|case
name|ELF
operator|::
name|R_390_32
case|:
block|{
name|int64_t
name|Res
init|=
name|Value
operator|+
name|getELFAddend
argument_list|(
name|R
argument_list|)
decl_stmt|;
if|if
condition|(
name|Res
operator|<
name|INT32_MIN
operator|||
name|Res
operator|>
name|UINT32_MAX
condition|)
name|HasError
operator|=
name|true
expr_stmt|;
return|return
name|static_cast
operator|<
name|uint32_t
operator|>
operator|(
name|Res
operator|)
return|;
block|}
case|case
name|ELF
operator|::
name|R_390_64
case|:
return|return
name|Value
operator|+
name|getELFAddend
argument_list|(
name|R
argument_list|)
return|;
block|}
name|HasError
operator|=
name|true
expr_stmt|;
return|return
literal|0
return|;
block|}
name|uint64_t
name|visitSparc64
parameter_list|(
name|uint32_t
name|Rel
parameter_list|,
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
switch|switch
condition|(
name|Rel
condition|)
block|{
case|case
name|ELF
operator|::
name|R_SPARC_32
case|:
case|case
name|ELF
operator|::
name|R_SPARC_64
case|:
case|case
name|ELF
operator|::
name|R_SPARC_UA32
case|:
case|case
name|ELF
operator|::
name|R_SPARC_UA64
case|:
return|return
name|Value
operator|+
name|getELFAddend
argument_list|(
name|R
argument_list|)
return|;
block|}
name|HasError
operator|=
name|true
expr_stmt|;
return|return
literal|0
return|;
block|}
name|uint64_t
name|visitAmdgpu
parameter_list|(
name|uint32_t
name|Rel
parameter_list|,
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
switch|switch
condition|(
name|Rel
condition|)
block|{
case|case
name|ELF
operator|::
name|R_AMDGPU_ABS32
case|:
case|case
name|ELF
operator|::
name|R_AMDGPU_ABS64
case|:
return|return
name|Value
operator|+
name|getELFAddend
argument_list|(
name|R
argument_list|)
return|;
block|}
name|HasError
operator|=
name|true
expr_stmt|;
return|return
literal|0
return|;
block|}
name|uint64_t
name|visitX86
parameter_list|(
name|uint32_t
name|Rel
parameter_list|,
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
switch|switch
condition|(
name|Rel
condition|)
block|{
case|case
name|ELF
operator|::
name|R_386_NONE
case|:
return|return
literal|0
return|;
case|case
name|ELF
operator|::
name|R_386_32
case|:
return|return
name|Value
return|;
case|case
name|ELF
operator|::
name|R_386_PC32
case|:
return|return
name|Value
operator|-
name|R
operator|.
name|getOffset
argument_list|()
return|;
block|}
name|HasError
operator|=
name|true
expr_stmt|;
return|return
literal|0
return|;
block|}
name|uint64_t
name|visitPPC32
parameter_list|(
name|uint32_t
name|Rel
parameter_list|,
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
if|if
condition|(
name|Rel
operator|==
name|ELF
operator|::
name|R_PPC_ADDR32
condition|)
return|return
operator|(
name|Value
operator|+
name|getELFAddend
argument_list|(
name|R
argument_list|)
operator|)
operator|&
literal|0xFFFFFFFF
return|;
name|HasError
operator|=
name|true
expr_stmt|;
return|return
literal|0
return|;
block|}
name|uint64_t
name|visitARM
parameter_list|(
name|uint32_t
name|Rel
parameter_list|,
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
if|if
condition|(
name|Rel
operator|==
name|ELF
operator|::
name|R_ARM_ABS32
condition|)
block|{
if|if
condition|(
operator|(
name|int64_t
operator|)
name|Value
operator|<
name|INT32_MIN
operator|||
operator|(
name|int64_t
operator|)
name|Value
operator|>
name|UINT32_MAX
condition|)
name|HasError
operator|=
name|true
expr_stmt|;
return|return
name|static_cast
operator|<
name|uint32_t
operator|>
operator|(
name|Value
operator|)
return|;
block|}
name|HasError
operator|=
name|true
expr_stmt|;
return|return
literal|0
return|;
block|}
name|uint64_t
name|visitLanai
parameter_list|(
name|uint32_t
name|Rel
parameter_list|,
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
if|if
condition|(
name|Rel
operator|==
name|ELF
operator|::
name|R_LANAI_32
condition|)
return|return
operator|(
name|Value
operator|+
name|getELFAddend
argument_list|(
name|R
argument_list|)
operator|)
operator|&
literal|0xFFFFFFFF
return|;
name|HasError
operator|=
name|true
expr_stmt|;
return|return
literal|0
return|;
block|}
name|uint64_t
name|visitMips32
parameter_list|(
name|uint32_t
name|Rel
parameter_list|,
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
if|if
condition|(
name|Rel
operator|==
name|ELF
operator|::
name|R_MIPS_32
condition|)
return|return
name|Value
operator|&
literal|0xFFFFFFFF
return|;
name|HasError
operator|=
name|true
expr_stmt|;
return|return
literal|0
return|;
block|}
name|uint64_t
name|visitSparc32
parameter_list|(
name|uint32_t
name|Rel
parameter_list|,
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
if|if
condition|(
name|Rel
operator|==
name|ELF
operator|::
name|R_SPARC_32
operator|||
name|Rel
operator|==
name|ELF
operator|::
name|R_SPARC_UA32
condition|)
return|return
name|Value
operator|+
name|getELFAddend
argument_list|(
name|R
argument_list|)
return|;
name|HasError
operator|=
name|true
expr_stmt|;
return|return
literal|0
return|;
block|}
name|uint64_t
name|visitHexagon
parameter_list|(
name|uint32_t
name|Rel
parameter_list|,
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
if|if
condition|(
name|Rel
operator|==
name|ELF
operator|::
name|R_HEX_32
condition|)
return|return
name|Value
operator|+
name|getELFAddend
argument_list|(
name|R
argument_list|)
return|;
name|HasError
operator|=
name|true
expr_stmt|;
return|return
literal|0
return|;
block|}
name|uint64_t
name|visitCOFF
parameter_list|(
name|uint32_t
name|Rel
parameter_list|,
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
switch|switch
condition|(
name|ObjToVisit
operator|.
name|getArch
argument_list|()
condition|)
block|{
case|case
name|Triple
operator|::
name|x86
case|:
switch|switch
condition|(
name|Rel
condition|)
block|{
case|case
name|COFF
operator|::
name|IMAGE_REL_I386_SECREL
case|:
case|case
name|COFF
operator|::
name|IMAGE_REL_I386_DIR32
case|:
return|return
name|static_cast
operator|<
name|uint32_t
operator|>
operator|(
name|Value
operator|)
return|;
block|}
break|break;
case|case
name|Triple
operator|::
name|x86_64
case|:
switch|switch
condition|(
name|Rel
condition|)
block|{
case|case
name|COFF
operator|::
name|IMAGE_REL_AMD64_SECREL
case|:
return|return
name|static_cast
operator|<
name|uint32_t
operator|>
operator|(
name|Value
operator|)
return|;
case|case
name|COFF
operator|::
name|IMAGE_REL_AMD64_ADDR64
case|:
return|return
name|Value
return|;
block|}
break|break;
block|}
name|HasError
operator|=
name|true
expr_stmt|;
return|return
literal|0
return|;
block|}
name|uint64_t
name|visitMachO
parameter_list|(
name|uint32_t
name|Rel
parameter_list|,
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
if|if
condition|(
name|ObjToVisit
operator|.
name|getArch
argument_list|()
operator|==
name|Triple
operator|::
name|x86_64
operator|&&
name|Rel
operator|==
name|MachO
operator|::
name|X86_64_RELOC_UNSIGNED
condition|)
return|return
name|Value
return|;
name|HasError
operator|=
name|true
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace object
end_comment

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_OBJECT_RELOCVISITOR_H
end_comment

end_unit

