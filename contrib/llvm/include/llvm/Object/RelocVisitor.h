begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- RelocVisitor.h - Visitor for object file relocations -*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file provides a wrapper around all the different types of relocations
end_comment

begin_comment
comment|// in different file formats, such that a client can handle them in a unified
end_comment

begin_comment
comment|// manner by only implementing a minimal number of functions.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LLVM_OBJECT_RELOCVISITOR
end_ifndef

begin_define
define|#
directive|define
name|_LLVM_OBJECT_RELOCVISITOR
end_define

begin_include
include|#
directive|include
file|"llvm/Support/Debug.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/raw_ostream.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/ObjectFile.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/ELF.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|object
block|{
struct|struct
name|RelocToApply
block|{
comment|// The computed value after applying the relevant relocations.
name|int64_t
name|Value
decl_stmt|;
comment|// The width of the value; how many bytes to touch when applying the
comment|// relocation.
name|char
name|Width
decl_stmt|;
name|RelocToApply
argument_list|(
specifier|const
name|RelocToApply
operator|&
name|In
argument_list|)
operator|:
name|Value
argument_list|(
name|In
operator|.
name|Value
argument_list|)
operator|,
name|Width
argument_list|(
argument|In.Width
argument_list|)
block|{}
name|RelocToApply
argument_list|(
argument|int64_t Value
argument_list|,
argument|char Width
argument_list|)
operator|:
name|Value
argument_list|(
name|Value
argument_list|)
operator|,
name|Width
argument_list|(
argument|Width
argument_list|)
block|{}
name|RelocToApply
argument_list|()
operator|:
name|Value
argument_list|(
literal|0
argument_list|)
operator|,
name|Width
argument_list|(
literal|0
argument_list|)
block|{}
block|}
struct|;
comment|/// @brief Base class for object file relocation visitors.
name|class
name|RelocVisitor
block|{
name|public
label|:
name|explicit
name|RelocVisitor
argument_list|(
name|llvm
operator|::
name|StringRef
name|FileFormat
argument_list|)
range|:
name|FileFormat
argument_list|(
name|FileFormat
argument_list|)
decl_stmt|,
name|HasError
argument_list|(
name|false
argument_list|)
block|{}
comment|// TODO: Should handle multiple applied relocations via either passing in the
comment|// previously computed value or just count paired relocations as a single
comment|// visit.
name|RelocToApply
name|visit
parameter_list|(
name|uint32_t
name|RelocType
parameter_list|,
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|SecAddr
init|=
literal|0
parameter_list|,
name|uint64_t
name|Value
init|=
literal|0
parameter_list|)
block|{
if|if
condition|(
name|FileFormat
operator|==
literal|"ELF64-x86-64"
condition|)
block|{
switch|switch
condition|(
name|RelocType
condition|)
block|{
case|case
name|llvm
operator|::
name|ELF
operator|::
name|R_X86_64_NONE
case|:
return|return
name|visitELF_X86_64_NONE
argument_list|(
name|R
argument_list|)
return|;
case|case
name|llvm
operator|::
name|ELF
operator|::
name|R_X86_64_64
case|:
return|return
name|visitELF_X86_64_64
argument_list|(
name|R
argument_list|,
name|Value
argument_list|)
return|;
case|case
name|llvm
operator|::
name|ELF
operator|::
name|R_X86_64_PC32
case|:
return|return
name|visitELF_X86_64_PC32
argument_list|(
name|R
argument_list|,
name|Value
argument_list|,
name|SecAddr
argument_list|)
return|;
case|case
name|llvm
operator|::
name|ELF
operator|::
name|R_X86_64_32
case|:
return|return
name|visitELF_X86_64_32
argument_list|(
name|R
argument_list|,
name|Value
argument_list|)
return|;
case|case
name|llvm
operator|::
name|ELF
operator|::
name|R_X86_64_32S
case|:
return|return
name|visitELF_X86_64_32S
argument_list|(
name|R
argument_list|,
name|Value
argument_list|)
return|;
default|default:
name|HasError
operator|=
name|true
expr_stmt|;
return|return
name|RelocToApply
argument_list|()
return|;
block|}
block|}
return|return
name|RelocToApply
argument_list|()
return|;
block|}
name|bool
name|error
parameter_list|()
block|{
return|return
name|HasError
return|;
block|}
name|private
label|:
name|llvm
operator|::
name|StringRef
name|FileFormat
expr_stmt|;
name|bool
name|HasError
decl_stmt|;
comment|/// Operations
comment|// Width is the width in bytes of the extend.
name|RelocToApply
name|zeroExtend
parameter_list|(
name|RelocToApply
name|r
parameter_list|,
name|char
name|Width
parameter_list|)
block|{
if|if
condition|(
name|Width
operator|==
name|r
operator|.
name|Width
condition|)
return|return
name|r
return|;
name|r
operator|.
name|Value
operator|&=
operator|(
literal|1
operator|<<
operator|(
operator|(
name|Width
operator|*
literal|8
operator|)
operator|)
operator|)
operator|-
literal|1
expr_stmt|;
return|return
name|r
return|;
block|}
name|RelocToApply
name|signExtend
parameter_list|(
name|RelocToApply
name|r
parameter_list|,
name|char
name|Width
parameter_list|)
block|{
if|if
condition|(
name|Width
operator|==
name|r
operator|.
name|Width
condition|)
return|return
name|r
return|;
name|bool
name|SignBit
init|=
name|r
operator|.
name|Value
operator|&
operator|(
literal|1
operator|<<
operator|(
operator|(
name|Width
operator|*
literal|8
operator|)
operator|-
literal|1
operator|)
operator|)
decl_stmt|;
if|if
condition|(
name|SignBit
condition|)
block|{
name|r
operator|.
name|Value
operator||=
operator|~
operator|(
operator|(
literal|1
operator|<<
operator|(
name|Width
operator|*
literal|8
operator|)
operator|)
operator|-
literal|1
operator|)
expr_stmt|;
block|}
else|else
block|{
name|r
operator|.
name|Value
operator|&=
operator|(
literal|1
operator|<<
operator|(
name|Width
operator|*
literal|8
operator|)
operator|)
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
comment|/// X86-64 ELF
name|RelocToApply
name|visitELF_X86_64_NONE
parameter_list|(
name|RelocationRef
name|R
parameter_list|)
block|{
return|return
name|RelocToApply
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
name|RelocToApply
name|visitELF_X86_64_64
parameter_list|(
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
name|int64_t
name|Addend
decl_stmt|;
name|R
operator|.
name|getAdditionalInfo
argument_list|(
name|Addend
argument_list|)
expr_stmt|;
return|return
name|RelocToApply
argument_list|(
name|Value
operator|+
name|Addend
argument_list|,
literal|8
argument_list|)
return|;
block|}
name|RelocToApply
name|visitELF_X86_64_PC32
parameter_list|(
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|,
name|uint64_t
name|SecAddr
parameter_list|)
block|{
name|int64_t
name|Addend
decl_stmt|;
name|R
operator|.
name|getAdditionalInfo
argument_list|(
name|Addend
argument_list|)
expr_stmt|;
name|uint64_t
name|Address
decl_stmt|;
name|R
operator|.
name|getAddress
argument_list|(
name|Address
argument_list|)
expr_stmt|;
return|return
name|RelocToApply
argument_list|(
name|Value
operator|+
name|Addend
operator|-
name|Address
argument_list|,
literal|4
argument_list|)
return|;
block|}
name|RelocToApply
name|visitELF_X86_64_32
parameter_list|(
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
name|int64_t
name|Addend
decl_stmt|;
name|R
operator|.
name|getAdditionalInfo
argument_list|(
name|Addend
argument_list|)
expr_stmt|;
name|uint32_t
name|Res
init|=
operator|(
name|Value
operator|+
name|Addend
operator|)
operator|&
literal|0xFFFFFFFF
decl_stmt|;
return|return
name|RelocToApply
argument_list|(
name|Res
argument_list|,
literal|4
argument_list|)
return|;
block|}
name|RelocToApply
name|visitELF_X86_64_32S
parameter_list|(
name|RelocationRef
name|R
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
name|int64_t
name|Addend
decl_stmt|;
name|R
operator|.
name|getAdditionalInfo
argument_list|(
name|Addend
argument_list|)
expr_stmt|;
name|int32_t
name|Res
init|=
operator|(
name|Value
operator|+
name|Addend
operator|)
operator|&
literal|0xFFFFFFFF
decl_stmt|;
return|return
name|RelocToApply
argument_list|(
name|Res
argument_list|,
literal|4
argument_list|)
return|;
block|}
block|}
empty_stmt|;
block|}
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

