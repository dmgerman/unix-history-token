begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- TargetParser - Parser for target features ---------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file implements a target parser to recognise hardware features such as
end_comment

begin_comment
comment|// FPU/CPU/ARCH names as well as specific support such as HDIV, etc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_SUPPORT_TARGETPARSER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_SUPPORT_TARGETPARSER_H
end_define

begin_comment
comment|// FIXME: vector is used because that's what clang uses for subtarget feature
end_comment

begin_comment
comment|// lists, but SmallVector would probably be better
end_comment

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|StringRef
decl_stmt|;
comment|// Target specific information into their own namespaces. These should be
comment|// generated from TableGen because the information is already there, and there
comment|// is where new information about targets will be added.
comment|// FIXME: To TableGen this we need to make some table generated files available
comment|// even if the back-end is not compiled with LLVM, plus we need to create a new
comment|// back-end to TableGen to create these clean tables.
name|namespace
name|ARM
block|{
comment|// FPU names.
enum|enum
name|FPUKind
block|{
define|#
directive|define
name|ARM_FPU
parameter_list|(
name|NAME
parameter_list|,
name|KIND
parameter_list|,
name|VERSION
parameter_list|,
name|NEON_SUPPORT
parameter_list|,
name|RESTRICTION
parameter_list|)
value|KIND,
include|#
directive|include
file|"ARMTargetParser.def"
name|FK_LAST
block|}
enum|;
comment|// FPU Version
enum|enum
name|FPUVersion
block|{
name|FV_NONE
init|=
literal|0
block|,
name|FV_VFPV2
block|,
name|FV_VFPV3
block|,
name|FV_VFPV3_FP16
block|,
name|FV_VFPV4
block|,
name|FV_VFPV5
block|}
enum|;
comment|// An FPU name implies one of three levels of Neon support:
enum|enum
name|NeonSupportLevel
block|{
name|NS_None
init|=
literal|0
block|,
comment|///< No Neon
name|NS_Neon
block|,
comment|///< Neon
name|NS_Crypto
comment|///< Neon with Crypto
block|}
enum|;
comment|// An FPU name restricts the FPU in one of three ways:
enum|enum
name|FPURestriction
block|{
name|FR_None
init|=
literal|0
block|,
comment|///< No restriction
name|FR_D16
block|,
comment|///< Only 16 D registers
name|FR_SP_D16
comment|///< Only single-precision instructions, with 16 D registers
block|}
enum|;
comment|// Arch names.
enum|enum
name|ArchKind
block|{
define|#
directive|define
name|ARM_ARCH
parameter_list|(
name|NAME
parameter_list|,
name|ID
parameter_list|,
name|CPU_ATTR
parameter_list|,
name|SUB_ARCH
parameter_list|,
name|ARCH_ATTR
parameter_list|,
name|ARCH_FPU
parameter_list|,
name|ARCH_BASE_EXT
parameter_list|)
value|ID,
include|#
directive|include
file|"ARMTargetParser.def"
name|AK_LAST
block|}
enum|;
comment|// Arch extension modifiers for CPUs.
enum|enum
name|ArchExtKind
enum|:
name|unsigned
block|{
name|AEK_INVALID
init|=
literal|0x0
block|,
name|AEK_NONE
init|=
literal|0x1
block|,
name|AEK_CRC
init|=
literal|0x2
block|,
name|AEK_CRYPTO
init|=
literal|0x4
block|,
name|AEK_FP
init|=
literal|0x8
block|,
name|AEK_HWDIV
init|=
literal|0x10
block|,
name|AEK_HWDIVARM
init|=
literal|0x20
block|,
name|AEK_MP
init|=
literal|0x40
block|,
name|AEK_SIMD
init|=
literal|0x80
block|,
name|AEK_SEC
init|=
literal|0x100
block|,
name|AEK_VIRT
init|=
literal|0x200
block|,
name|AEK_DSP
init|=
literal|0x400
block|,
name|AEK_FP16
init|=
literal|0x800
block|,
name|AEK_RAS
init|=
literal|0x1000
block|,
comment|// Unsupported extensions.
name|AEK_OS
init|=
literal|0x8000000
block|,
name|AEK_IWMMXT
init|=
literal|0x10000000
block|,
name|AEK_IWMMXT2
init|=
literal|0x20000000
block|,
name|AEK_MAVERICK
init|=
literal|0x40000000
block|,
name|AEK_XSCALE
init|=
literal|0x80000000
block|, }
enum|;
comment|// ISA kinds.
enum|enum
name|ISAKind
block|{
name|IK_INVALID
init|=
literal|0
block|,
name|IK_ARM
block|,
name|IK_THUMB
block|,
name|IK_AARCH64
block|}
enum|;
comment|// Endianness
comment|// FIXME: BE8 vs. BE32?
enum|enum
name|EndianKind
block|{
name|EK_INVALID
init|=
literal|0
block|,
name|EK_LITTLE
block|,
name|EK_BIG
block|}
enum|;
comment|// v6/v7/v8 Profile
enum|enum
name|ProfileKind
block|{
name|PK_INVALID
init|=
literal|0
block|,
name|PK_A
block|,
name|PK_R
block|,
name|PK_M
block|}
enum|;
name|StringRef
name|getCanonicalArchName
parameter_list|(
name|StringRef
name|Arch
parameter_list|)
function_decl|;
comment|// Information by ID
name|StringRef
name|getFPUName
parameter_list|(
name|unsigned
name|FPUKind
parameter_list|)
function_decl|;
name|unsigned
name|getFPUVersion
parameter_list|(
name|unsigned
name|FPUKind
parameter_list|)
function_decl|;
name|unsigned
name|getFPUNeonSupportLevel
parameter_list|(
name|unsigned
name|FPUKind
parameter_list|)
function_decl|;
name|unsigned
name|getFPURestriction
parameter_list|(
name|unsigned
name|FPUKind
parameter_list|)
function_decl|;
comment|// FIXME: These should be moved to TargetTuple once it exists
name|bool
name|getFPUFeatures
argument_list|(
name|unsigned
name|FPUKind
argument_list|,
name|std
operator|::
name|vector
operator|<
name|StringRef
operator|>
operator|&
name|Features
argument_list|)
decl_stmt|;
name|bool
name|getHWDivFeatures
argument_list|(
name|unsigned
name|HWDivKind
argument_list|,
name|std
operator|::
name|vector
operator|<
name|StringRef
operator|>
operator|&
name|Features
argument_list|)
decl_stmt|;
name|bool
name|getExtensionFeatures
argument_list|(
name|unsigned
name|Extensions
argument_list|,
name|std
operator|::
name|vector
operator|<
name|StringRef
operator|>
operator|&
name|Features
argument_list|)
decl_stmt|;
name|StringRef
name|getArchName
parameter_list|(
name|unsigned
name|ArchKind
parameter_list|)
function_decl|;
name|unsigned
name|getArchAttr
parameter_list|(
name|unsigned
name|ArchKind
parameter_list|)
function_decl|;
name|StringRef
name|getCPUAttr
parameter_list|(
name|unsigned
name|ArchKind
parameter_list|)
function_decl|;
name|StringRef
name|getSubArch
parameter_list|(
name|unsigned
name|ArchKind
parameter_list|)
function_decl|;
name|StringRef
name|getArchExtName
parameter_list|(
name|unsigned
name|ArchExtKind
parameter_list|)
function_decl|;
name|StringRef
name|getArchExtFeature
parameter_list|(
name|StringRef
name|ArchExt
parameter_list|)
function_decl|;
name|StringRef
name|getHWDivName
parameter_list|(
name|unsigned
name|HWDivKind
parameter_list|)
function_decl|;
comment|// Information by Name
name|unsigned
name|getDefaultFPU
parameter_list|(
name|StringRef
name|CPU
parameter_list|,
name|unsigned
name|ArchKind
parameter_list|)
function_decl|;
name|unsigned
name|getDefaultExtensions
parameter_list|(
name|StringRef
name|CPU
parameter_list|,
name|unsigned
name|ArchKind
parameter_list|)
function_decl|;
name|StringRef
name|getDefaultCPU
parameter_list|(
name|StringRef
name|Arch
parameter_list|)
function_decl|;
comment|// Parser
name|unsigned
name|parseHWDiv
parameter_list|(
name|StringRef
name|HWDiv
parameter_list|)
function_decl|;
name|unsigned
name|parseFPU
parameter_list|(
name|StringRef
name|FPU
parameter_list|)
function_decl|;
name|unsigned
name|parseArch
parameter_list|(
name|StringRef
name|Arch
parameter_list|)
function_decl|;
name|unsigned
name|parseArchExt
parameter_list|(
name|StringRef
name|ArchExt
parameter_list|)
function_decl|;
name|unsigned
name|parseCPUArch
parameter_list|(
name|StringRef
name|CPU
parameter_list|)
function_decl|;
name|unsigned
name|parseArchISA
parameter_list|(
name|StringRef
name|Arch
parameter_list|)
function_decl|;
name|unsigned
name|parseArchEndian
parameter_list|(
name|StringRef
name|Arch
parameter_list|)
function_decl|;
name|unsigned
name|parseArchProfile
parameter_list|(
name|StringRef
name|Arch
parameter_list|)
function_decl|;
name|unsigned
name|parseArchVersion
parameter_list|(
name|StringRef
name|Arch
parameter_list|)
function_decl|;
block|}
comment|// namespace ARM
comment|// FIXME:This should be made into class design,to avoid dupplication.
name|namespace
name|AArch64
block|{
comment|// Arch names.
name|enum
name|class
name|ArchKind
block|{
define|#
directive|define
name|AARCH64_ARCH
parameter_list|(
name|NAME
parameter_list|,
name|ID
parameter_list|,
name|CPU_ATTR
parameter_list|,
name|SUB_ARCH
parameter_list|,
name|ARCH_ATTR
parameter_list|,
name|ARCH_FPU
parameter_list|,
name|ARCH_BASE_EXT
parameter_list|)
value|ID,
include|#
directive|include
file|"AArch64TargetParser.def"
name|AK_LAST
block|}
empty_stmt|;
comment|// Arch extension modifiers for CPUs.
enum|enum
name|ArchExtKind
enum|:
name|unsigned
block|{
name|AEK_INVALID
init|=
literal|0x0
block|,
name|AEK_NONE
init|=
literal|0x1
block|,
name|AEK_CRC
init|=
literal|0x2
block|,
name|AEK_CRYPTO
init|=
literal|0x4
block|,
name|AEK_FP
init|=
literal|0x8
block|,
name|AEK_SIMD
init|=
literal|0x10
block|,
name|AEK_FP16
init|=
literal|0x20
block|,
name|AEK_PROFILE
init|=
literal|0x40
block|,
name|AEK_RAS
init|=
literal|0x80
block|,
name|AEK_LSE
init|=
literal|0x100
block|}
enum|;
name|StringRef
name|getCanonicalArchName
parameter_list|(
name|StringRef
name|Arch
parameter_list|)
function_decl|;
comment|// Information by ID
name|StringRef
name|getFPUName
parameter_list|(
name|unsigned
name|FPUKind
parameter_list|)
function_decl|;
name|unsigned
name|getFPUVersion
parameter_list|(
name|unsigned
name|FPUKind
parameter_list|)
function_decl|;
name|unsigned
name|getFPUNeonSupportLevel
parameter_list|(
name|unsigned
name|FPUKind
parameter_list|)
function_decl|;
name|unsigned
name|getFPURestriction
parameter_list|(
name|unsigned
name|FPUKind
parameter_list|)
function_decl|;
comment|// FIXME: These should be moved to TargetTuple once it exists
name|bool
name|getFPUFeatures
argument_list|(
name|unsigned
name|FPUKind
argument_list|,
name|std
operator|::
name|vector
operator|<
name|StringRef
operator|>
operator|&
name|Features
argument_list|)
decl_stmt|;
name|bool
name|getExtensionFeatures
argument_list|(
name|unsigned
name|Extensions
argument_list|,
name|std
operator|::
name|vector
operator|<
name|StringRef
operator|>
operator|&
name|Features
argument_list|)
decl_stmt|;
name|bool
name|getArchFeatures
argument_list|(
name|unsigned
name|ArchKind
argument_list|,
name|std
operator|::
name|vector
operator|<
name|StringRef
operator|>
operator|&
name|Features
argument_list|)
decl_stmt|;
name|StringRef
name|getArchName
parameter_list|(
name|unsigned
name|ArchKind
parameter_list|)
function_decl|;
name|unsigned
name|getArchAttr
parameter_list|(
name|unsigned
name|ArchKind
parameter_list|)
function_decl|;
name|StringRef
name|getCPUAttr
parameter_list|(
name|unsigned
name|ArchKind
parameter_list|)
function_decl|;
name|StringRef
name|getSubArch
parameter_list|(
name|unsigned
name|ArchKind
parameter_list|)
function_decl|;
name|StringRef
name|getArchExtName
parameter_list|(
name|unsigned
name|ArchExtKind
parameter_list|)
function_decl|;
name|StringRef
name|getArchExtFeature
parameter_list|(
name|StringRef
name|ArchExt
parameter_list|)
function_decl|;
name|unsigned
name|checkArchVersion
parameter_list|(
name|StringRef
name|Arch
parameter_list|)
function_decl|;
comment|// Information by Name
name|unsigned
name|getDefaultFPU
parameter_list|(
name|StringRef
name|CPU
parameter_list|,
name|unsigned
name|ArchKind
parameter_list|)
function_decl|;
name|unsigned
name|getDefaultExtensions
parameter_list|(
name|StringRef
name|CPU
parameter_list|,
name|unsigned
name|ArchKind
parameter_list|)
function_decl|;
name|StringRef
name|getDefaultCPU
parameter_list|(
name|StringRef
name|Arch
parameter_list|)
function_decl|;
comment|// Parser
name|unsigned
name|parseFPU
parameter_list|(
name|StringRef
name|FPU
parameter_list|)
function_decl|;
name|unsigned
name|parseArch
parameter_list|(
name|StringRef
name|Arch
parameter_list|)
function_decl|;
name|unsigned
name|parseArchExt
parameter_list|(
name|StringRef
name|ArchExt
parameter_list|)
function_decl|;
name|unsigned
name|parseCPUArch
parameter_list|(
name|StringRef
name|CPU
parameter_list|)
function_decl|;
name|unsigned
name|parseArchISA
parameter_list|(
name|StringRef
name|Arch
parameter_list|)
function_decl|;
name|unsigned
name|parseArchEndian
parameter_list|(
name|StringRef
name|Arch
parameter_list|)
function_decl|;
name|unsigned
name|parseArchProfile
parameter_list|(
name|StringRef
name|Arch
parameter_list|)
function_decl|;
name|unsigned
name|parseArchVersion
parameter_list|(
name|StringRef
name|Arch
parameter_list|)
function_decl|;
block|}
comment|// namespace AArch64
block|}
end_decl_stmt

begin_comment
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

