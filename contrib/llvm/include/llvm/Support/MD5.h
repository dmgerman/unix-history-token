begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* -*- C++ -*-  * This code is derived from (original license follows):  *  * This is an OpenSSL-compatible implementation of the RSA Data Security, Inc.  * MD5 Message-Digest Algorithm (RFC 1321).  *  * Homepage:  * http://openwall.info/wiki/people/solar/software/public-domain-source-code/md5  *  * Author:  * Alexander Peslyak, better known as Solar Designer<solar at openwall.com>  *  * This software was written by Alexander Peslyak in 2001.  No copyright is  * claimed, and the software is hereby placed in the public domain.  * In case this attempt to disclaim copyright and place the software in the  * public domain is deemed null and void, then the software is  * Copyright (c) 2001 Alexander Peslyak and it is hereby released to the  * general public under the following terms:  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted.  *  * There's ABSOLUTELY NO WARRANTY, express or implied.  *  * See md5.c for more information.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_SUPPORT_MD5_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_SUPPORT_MD5_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/SmallString.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Endian.h"
end_include

begin_include
include|#
directive|include
file|<array>
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|ArrayRef
expr_stmt|;
name|class
name|MD5
block|{
comment|// Any 32-bit or wider unsigned integer data type will do.
typedef|typedef
name|uint32_t
name|MD5_u32plus
typedef|;
name|MD5_u32plus
name|a
init|=
literal|0x67452301
decl_stmt|;
name|MD5_u32plus
name|b
init|=
literal|0xefcdab89
decl_stmt|;
name|MD5_u32plus
name|c
init|=
literal|0x98badcfe
decl_stmt|;
name|MD5_u32plus
name|d
init|=
literal|0x10325476
decl_stmt|;
name|MD5_u32plus
name|hi
init|=
literal|0
decl_stmt|;
name|MD5_u32plus
name|lo
init|=
literal|0
decl_stmt|;
name|uint8_t
name|buffer
index|[
literal|64
index|]
decl_stmt|;
name|MD5_u32plus
name|block
index|[
literal|16
index|]
decl_stmt|;
name|public
label|:
struct|struct
name|MD5Result
block|{
name|std
operator|::
name|array
operator|<
name|uint8_t
operator|,
literal|16
operator|>
name|Bytes
expr_stmt|;
name|operator
name|std
operator|::
name|array
operator|<
name|uint8_t
operator|,
literal|16
operator|>
operator|(
operator|)
specifier|const
block|{
return|return
name|Bytes
return|;
block|}
specifier|const
name|uint8_t
modifier|&
name|operator
index|[]
argument_list|(
name|size_t
name|I
argument_list|)
decl|const
block|{
return|return
name|Bytes
index|[
name|I
index|]
return|;
block|}
name|uint8_t
modifier|&
name|operator
function|[]
parameter_list|(
name|size_t
name|I
parameter_list|)
block|{
return|return
name|Bytes
index|[
name|I
index|]
return|;
block|}
name|SmallString
operator|<
literal|32
operator|>
name|digest
argument_list|()
specifier|const
expr_stmt|;
name|uint64_t
name|low
argument_list|()
specifier|const
block|{
comment|// Our MD5 implementation returns the result in little endian, so the low
comment|// word is first.
name|using
name|namespace
name|support
block|;
return|return
name|endian
operator|::
name|read
operator|<
name|uint64_t
operator|,
name|little
operator|,
name|unaligned
operator|>
operator|(
name|Bytes
operator|.
name|data
argument_list|()
operator|)
return|;
block|}
name|uint64_t
name|high
argument_list|()
specifier|const
block|{
name|using
name|namespace
name|support
block|;
return|return
name|endian
operator|::
name|read
operator|<
name|uint64_t
operator|,
name|little
operator|,
name|unaligned
operator|>
operator|(
name|Bytes
operator|.
name|data
argument_list|()
operator|+
literal|8
operator|)
return|;
block|}
name|std
operator|::
name|pair
operator|<
name|uint64_t
operator|,
name|uint64_t
operator|>
name|words
argument_list|()
specifier|const
block|{
name|using
name|namespace
name|support
block|;
return|return
name|std
operator|::
name|make_pair
argument_list|(
name|high
argument_list|()
argument_list|,
name|low
argument_list|()
argument_list|)
return|;
block|}
block|}
struct|;
name|MD5
argument_list|()
expr_stmt|;
comment|/// \brief Updates the hash for the byte stream provided.
name|void
name|update
argument_list|(
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|Data
argument_list|)
decl_stmt|;
comment|/// \brief Updates the hash for the StringRef provided.
name|void
name|update
parameter_list|(
name|StringRef
name|Str
parameter_list|)
function_decl|;
comment|/// \brief Finishes off the hash and puts the result in result.
name|void
name|final
parameter_list|(
name|MD5Result
modifier|&
name|Result
parameter_list|)
function_decl|;
comment|/// \brief Translates the bytes in \p Res to a hex string that is
comment|/// deposited into \p Str. The result will be of length 32.
specifier|static
name|void
name|stringifyResult
argument_list|(
name|MD5Result
operator|&
name|Result
argument_list|,
name|SmallString
operator|<
literal|32
operator|>
operator|&
name|Str
argument_list|)
decl_stmt|;
comment|/// \brief Computes the hash for a given bytes.
specifier|static
name|std
operator|::
name|array
operator|<
name|uint8_t
operator|,
literal|16
operator|>
name|hash
argument_list|(
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|Data
argument_list|)
expr_stmt|;
name|private
label|:
specifier|const
name|uint8_t
modifier|*
name|body
argument_list|(
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|Data
argument_list|)
decl_stmt|;
block|}
empty_stmt|;
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|MD5
operator|::
name|MD5Result
operator|&
name|LHS
operator|,
specifier|const
name|MD5
operator|::
name|MD5Result
operator|&
name|RHS
operator|)
block|{
return|return
name|LHS
operator|.
name|Bytes
operator|==
name|RHS
operator|.
name|Bytes
return|;
block|}
comment|/// Helper to compute and return lower 64 bits of the given string's MD5 hash.
specifier|inline
name|uint64_t
name|MD5Hash
parameter_list|(
name|StringRef
name|Str
parameter_list|)
block|{
name|using
name|namespace
name|support
decl_stmt|;
name|MD5
name|Hash
decl_stmt|;
name|Hash
operator|.
name|update
argument_list|(
name|Str
argument_list|)
expr_stmt|;
name|MD5
operator|::
name|MD5Result
name|Result
expr_stmt|;
name|Hash
operator|.
name|final
argument_list|(
name|Result
argument_list|)
expr_stmt|;
comment|// Return the least significant word.
return|return
name|Result
operator|.
name|low
argument_list|()
return|;
block|}
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_SUPPORT_MD5_H
end_comment

end_unit

