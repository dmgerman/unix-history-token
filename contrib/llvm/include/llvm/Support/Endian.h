begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- Endian.h - Utilities for IO with endian specific data ----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares generic functions to read and write endian specific data.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_SUPPORT_ENDIAN_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_SUPPORT_ENDIAN_H
end_define

begin_include
include|#
directive|include
file|"llvm/Support/Host.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/SwapByteOrder.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/type_traits.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|support
block|{
enum|enum
name|endianness
block|{
name|big
block|,
name|little
block|}
enum|;
enum|enum
name|alignment
block|{
name|unaligned
block|,
name|aligned
block|}
enum|;
name|namespace
name|detail
block|{
name|template
operator|<
name|typename
name|value_type
operator|,
name|alignment
name|align
operator|>
expr|struct
name|alignment_access_helper
expr_stmt|;
name|template
operator|<
name|typename
name|value_type
operator|>
expr|struct
name|alignment_access_helper
operator|<
name|value_type
operator|,
name|aligned
operator|>
block|{
name|value_type
name|val
block|; }
expr_stmt|;
comment|// Provides unaligned loads and stores.
pragma|#
directive|pragma
name|pack
name|(
name|push
name|)
pragma|#
directive|pragma
name|pack
name|(
name|1
name|)
name|template
operator|<
name|typename
name|value_type
operator|>
expr|struct
name|alignment_access_helper
operator|<
name|value_type
operator|,
name|unaligned
operator|>
block|{
name|value_type
name|val
block|; }
expr_stmt|;
pragma|#
directive|pragma
name|pack
name|(
name|pop
name|)
block|}
comment|// end namespace detail
name|namespace
name|endian
block|{
name|template
operator|<
name|typename
name|value_type
operator|,
name|alignment
name|align
operator|>
specifier|static
name|value_type
name|read_le
argument_list|(
argument|const void *memory
argument_list|)
block|{
name|value_type
name|t
operator|=
name|reinterpret_cast
operator|<
specifier|const
name|detail
operator|::
name|alignment_access_helper
operator|<
name|value_type
block|,
name|align
operator|>
operator|*
operator|>
operator|(
name|memory
operator|)
operator|->
name|val
block|;
if|if
condition|(
name|sys
operator|::
name|isBigEndianHost
argument_list|()
condition|)
return|return
name|sys
operator|::
name|SwapByteOrder
argument_list|(
name|t
argument_list|)
return|;
return|return
name|t
return|;
block|}
name|template
operator|<
name|typename
name|value_type
operator|,
name|alignment
name|align
operator|>
specifier|static
name|void
name|write_le
argument_list|(
argument|void *memory
argument_list|,
argument|value_type value
argument_list|)
block|{
if|if
condition|(
name|sys
operator|::
name|isBigEndianHost
argument_list|()
condition|)
name|value
operator|=
name|sys
operator|::
name|SwapByteOrder
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|reinterpret_cast
operator|<
name|detail
operator|::
name|alignment_access_helper
operator|<
name|value_type
operator|,
name|align
operator|>
operator|*
operator|>
operator|(
name|memory
operator|)
operator|->
name|val
operator|=
name|value
expr_stmt|;
block|}
name|template
operator|<
name|typename
name|value_type
operator|,
name|alignment
name|align
operator|>
specifier|static
name|value_type
name|read_be
argument_list|(
argument|const void *memory
argument_list|)
block|{
name|value_type
name|t
operator|=
name|reinterpret_cast
operator|<
specifier|const
name|detail
operator|::
name|alignment_access_helper
operator|<
name|value_type
block|,
name|align
operator|>
operator|*
operator|>
operator|(
name|memory
operator|)
operator|->
name|val
block|;
if|if
condition|(
name|sys
operator|::
name|isLittleEndianHost
argument_list|()
condition|)
return|return
name|sys
operator|::
name|SwapByteOrder
argument_list|(
name|t
argument_list|)
return|;
return|return
name|t
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|value_type
operator|,
name|alignment
name|align
operator|>
specifier|static
name|void
name|write_be
argument_list|(
argument|void *memory
argument_list|,
argument|value_type value
argument_list|)
block|{
if|if
condition|(
name|sys
operator|::
name|isLittleEndianHost
argument_list|()
condition|)
name|value
operator|=
name|sys
operator|::
name|SwapByteOrder
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|reinterpret_cast
operator|<
name|detail
operator|::
name|alignment_access_helper
operator|<
name|value_type
operator|,
name|align
operator|>
operator|*
operator|>
operator|(
name|memory
operator|)
operator|->
name|val
operator|=
name|value
expr_stmt|;
end_expr_stmt

begin_decl_stmt
unit|} }
name|namespace
name|detail
block|{
name|template
operator|<
name|typename
name|value_type
operator|,
name|endianness
name|endian
operator|,
name|alignment
name|align
operator|>
name|class
name|packed_endian_specific_integral
expr_stmt|;
name|template
operator|<
name|typename
name|value_type
operator|>
name|class
name|packed_endian_specific_integral
operator|<
name|value_type
operator|,
name|little
operator|,
name|unaligned
operator|>
block|{
name|public
operator|:
name|operator
name|value_type
argument_list|()
specifier|const
block|{
return|return
name|endian
operator|::
name|read_le
operator|<
name|value_type
operator|,
name|unaligned
operator|>
operator|(
name|Value
operator|)
return|;
block|}
name|void
name|operator
operator|=
operator|(
name|value_type
name|newValue
operator|)
block|{
name|endian
operator|::
name|write_le
operator|<
name|value_type
block|,
name|unaligned
operator|>
operator|(
operator|(
name|void
operator|*
operator|)
operator|&
name|Value
operator|,
name|newValue
operator|)
block|;   }
name|private
operator|:
name|uint8_t
name|Value
index|[
sizeof|sizeof
argument_list|(
name|value_type
argument_list|)
index|]
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|value_type
operator|>
name|class
name|packed_endian_specific_integral
operator|<
name|value_type
operator|,
name|big
operator|,
name|unaligned
operator|>
block|{
name|public
operator|:
name|operator
name|value_type
argument_list|()
specifier|const
block|{
return|return
name|endian
operator|::
name|read_be
operator|<
name|value_type
operator|,
name|unaligned
operator|>
operator|(
name|Value
operator|)
return|;
block|}
name|void
name|operator
operator|=
operator|(
name|value_type
name|newValue
operator|)
block|{
name|endian
operator|::
name|write_be
operator|<
name|value_type
block|,
name|unaligned
operator|>
operator|(
operator|(
name|void
operator|*
operator|)
operator|&
name|Value
operator|,
name|newValue
operator|)
block|;   }
name|private
operator|:
name|uint8_t
name|Value
index|[
sizeof|sizeof
argument_list|(
name|value_type
argument_list|)
index|]
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|value_type
operator|>
name|class
name|packed_endian_specific_integral
operator|<
name|value_type
operator|,
name|little
operator|,
name|aligned
operator|>
block|{
name|public
operator|:
name|operator
name|value_type
argument_list|()
specifier|const
block|{
return|return
name|endian
operator|::
name|read_le
operator|<
name|value_type
operator|,
name|aligned
operator|>
operator|(
operator|&
name|Value
operator|)
return|;
block|}
name|void
name|operator
operator|=
operator|(
name|value_type
name|newValue
operator|)
block|{
name|endian
operator|::
name|write_le
operator|<
name|value_type
block|,
name|aligned
operator|>
operator|(
operator|(
name|void
operator|*
operator|)
operator|&
name|Value
operator|,
name|newValue
operator|)
block|;   }
name|private
operator|:
name|value_type
name|Value
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|value_type
operator|>
name|class
name|packed_endian_specific_integral
operator|<
name|value_type
operator|,
name|big
operator|,
name|aligned
operator|>
block|{
name|public
operator|:
name|operator
name|value_type
argument_list|()
specifier|const
block|{
return|return
name|endian
operator|::
name|read_be
operator|<
name|value_type
operator|,
name|aligned
operator|>
operator|(
operator|&
name|Value
operator|)
return|;
block|}
name|void
name|operator
operator|=
operator|(
name|value_type
name|newValue
operator|)
block|{
name|endian
operator|::
name|write_be
operator|<
name|value_type
block|,
name|aligned
operator|>
operator|(
operator|(
name|void
operator|*
operator|)
operator|&
name|Value
operator|,
name|newValue
operator|)
block|;   }
name|private
operator|:
name|value_type
name|Value
block|; }
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace detail
end_comment

begin_typedef
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|uint8_t
operator|,
name|little
operator|,
name|unaligned
operator|>
name|ulittle8_t
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|uint16_t
operator|,
name|little
operator|,
name|unaligned
operator|>
name|ulittle16_t
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|uint32_t
operator|,
name|little
operator|,
name|unaligned
operator|>
name|ulittle32_t
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|uint64_t
operator|,
name|little
operator|,
name|unaligned
operator|>
name|ulittle64_t
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|int8_t
operator|,
name|little
operator|,
name|unaligned
operator|>
name|little8_t
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|int16_t
operator|,
name|little
operator|,
name|unaligned
operator|>
name|little16_t
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|int32_t
operator|,
name|little
operator|,
name|unaligned
operator|>
name|little32_t
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|int64_t
operator|,
name|little
operator|,
name|unaligned
operator|>
name|little64_t
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|uint8_t
operator|,
name|little
operator|,
name|aligned
operator|>
name|aligned_ulittle8_t
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|uint16_t
operator|,
name|little
operator|,
name|aligned
operator|>
name|aligned_ulittle16_t
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|uint32_t
operator|,
name|little
operator|,
name|aligned
operator|>
name|aligned_ulittle32_t
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|uint64_t
operator|,
name|little
operator|,
name|aligned
operator|>
name|aligned_ulittle64_t
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|int8_t
operator|,
name|little
operator|,
name|aligned
operator|>
name|aligned_little8_t
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|int16_t
operator|,
name|little
operator|,
name|aligned
operator|>
name|aligned_little16_t
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|int32_t
operator|,
name|little
operator|,
name|aligned
operator|>
name|aligned_little32_t
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|int64_t
operator|,
name|little
operator|,
name|aligned
operator|>
name|aligned_little64_t
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|uint8_t
operator|,
name|big
operator|,
name|unaligned
operator|>
name|ubig8_t
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|uint16_t
operator|,
name|big
operator|,
name|unaligned
operator|>
name|ubig16_t
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|uint32_t
operator|,
name|big
operator|,
name|unaligned
operator|>
name|ubig32_t
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|uint64_t
operator|,
name|big
operator|,
name|unaligned
operator|>
name|ubig64_t
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|int8_t
operator|,
name|big
operator|,
name|unaligned
operator|>
name|big8_t
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|int16_t
operator|,
name|big
operator|,
name|unaligned
operator|>
name|big16_t
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|int32_t
operator|,
name|big
operator|,
name|unaligned
operator|>
name|big32_t
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|int64_t
operator|,
name|big
operator|,
name|unaligned
operator|>
name|big64_t
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|uint8_t
operator|,
name|big
operator|,
name|aligned
operator|>
name|aligned_ubig8_t
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|uint16_t
operator|,
name|big
operator|,
name|aligned
operator|>
name|aligned_ubig16_t
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|uint32_t
operator|,
name|big
operator|,
name|aligned
operator|>
name|aligned_ubig32_t
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|uint64_t
operator|,
name|big
operator|,
name|aligned
operator|>
name|aligned_ubig64_t
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|int8_t
operator|,
name|big
operator|,
name|aligned
operator|>
name|aligned_big8_t
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|int16_t
operator|,
name|big
operator|,
name|aligned
operator|>
name|aligned_big16_t
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|int32_t
operator|,
name|big
operator|,
name|aligned
operator|>
name|aligned_big32_t
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|int64_t
operator|,
name|big
operator|,
name|aligned
operator|>
name|aligned_big64_t
expr_stmt|;
end_typedef

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_comment
unit|}
comment|// end namespace support
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

