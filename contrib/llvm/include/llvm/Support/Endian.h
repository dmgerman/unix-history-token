begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- Endian.h - Utilities for IO with endian specific data ----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares generic functions to read and write endian specific data.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_SUPPORT_ENDIAN_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_SUPPORT_ENDIAN_H
end_define

begin_include
include|#
directive|include
file|"llvm/Support/AlignOf.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Host.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/SwapByteOrder.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/type_traits.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|support
block|{
enum|enum
name|endianness
block|{
name|big
block|,
name|little
block|,
name|native
block|}
enum|;
comment|// These are named values for common alignments.
enum|enum
block|{
name|aligned
init|=
literal|0
block|,
name|unaligned
init|=
literal|1
block|}
enum|;
name|namespace
name|detail
block|{
comment|/// \brief ::value is either alignment, or alignof(T) if alignment is 0.
name|template
operator|<
name|class
name|T
operator|,
name|int
name|alignment
operator|>
expr|struct
name|PickAlignment
block|{     enum
block|{
name|value
operator|=
name|alignment
operator|==
literal|0
operator|?
name|AlignOf
operator|<
name|T
operator|>
operator|::
name|Alignment
operator|:
name|alignment
block|}
block|;   }
expr_stmt|;
block|}
comment|// end namespace detail
name|namespace
name|endian
block|{
name|template
operator|<
name|typename
name|value_type
operator|,
name|endianness
name|endian
operator|>
specifier|inline
name|value_type
name|byte_swap
argument_list|(
argument|value_type value
argument_list|)
block|{
if|if
condition|(
name|endian
operator|!=
name|native
operator|&&
name|sys
operator|::
name|IsBigEndianHost
operator|!=
operator|(
name|endian
operator|==
name|big
operator|)
condition|)
return|return
name|sys
operator|::
name|SwapByteOrder
argument_list|(
name|value
argument_list|)
return|;
return|return
name|value
return|;
block|}
name|template
operator|<
name|typename
name|value_type
operator|,
name|endianness
name|endian
operator|,
name|std
operator|::
name|size_t
name|alignment
operator|>
specifier|inline
name|value_type
name|read
argument_list|(
argument|const void *memory
argument_list|)
block|{
name|value_type
name|ret
block|;
name|memcpy
argument_list|(
operator|&
name|ret
argument_list|,
name|LLVM_ASSUME_ALIGNED
argument_list|(
name|memory
argument_list|,
operator|(
name|detail
operator|::
name|PickAlignment
operator|<
name|value_type
operator|,
name|alignment
operator|>
operator|::
name|value
operator|)
argument_list|)
argument_list|,
sizeof|sizeof
argument_list|(
name|value_type
argument_list|)
argument_list|)
block|;
return|return
name|byte_swap
operator|<
name|value_type
operator|,
name|endian
operator|>
operator|(
name|ret
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|value_type
operator|,
name|endianness
name|endian
operator|,
name|std
operator|::
name|size_t
name|alignment
operator|>
specifier|inline
name|void
name|write
argument_list|(
argument|void *memory
argument_list|,
argument|value_type value
argument_list|)
block|{
name|value
operator|=
name|byte_swap
operator|<
name|value_type
block|,
name|endian
operator|>
operator|(
name|value
operator|)
block|;
name|memcpy
argument_list|(
name|LLVM_ASSUME_ALIGNED
argument_list|(
name|memory
argument_list|,
operator|(
name|detail
operator|::
name|PickAlignment
operator|<
name|value_type
operator|,
name|alignment
operator|>
operator|::
name|value
operator|)
argument_list|)
argument_list|,
operator|&
name|value
argument_list|,
sizeof|sizeof
argument_list|(
name|value_type
argument_list|)
argument_list|)
block|; }
block|}
comment|// end namespace endian
name|namespace
name|detail
block|{
name|template
operator|<
name|typename
name|value_type
operator|,
name|endianness
name|endian
operator|,
name|std
operator|::
name|size_t
name|alignment
operator|>
expr|struct
name|packed_endian_specific_integral
block|{
name|operator
name|value_type
argument_list|()
specifier|const
block|{
return|return
name|endian
operator|::
name|read
operator|<
name|value_type
operator|,
name|endian
operator|,
name|alignment
operator|>
operator|(
operator|(
specifier|const
name|void
operator|*
operator|)
name|Value
operator|.
name|buffer
operator|)
return|;
block|}
name|void
name|operator
operator|=
operator|(
name|value_type
name|newValue
operator|)
block|{
name|endian
operator|::
name|write
operator|<
name|value_type
block|,
name|endian
block|,
name|alignment
operator|>
operator|(
operator|(
name|void
operator|*
operator|)
name|Value
operator|.
name|buffer
operator|,
name|newValue
operator|)
block|;   }
name|private
operator|:
name|AlignedCharArray
operator|<
name|PickAlignment
operator|<
name|value_type
block|,
name|alignment
operator|>
operator|::
name|value
block|,
sizeof|sizeof
argument_list|(
name|value_type
argument_list|)
operator|>
name|Value
block|; }
expr_stmt|;
block|}
comment|// end namespace detail
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|uint8_t
operator|,
name|little
operator|,
name|unaligned
operator|>
name|ulittle8_t
expr_stmt|;
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|uint16_t
operator|,
name|little
operator|,
name|unaligned
operator|>
name|ulittle16_t
expr_stmt|;
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|uint32_t
operator|,
name|little
operator|,
name|unaligned
operator|>
name|ulittle32_t
expr_stmt|;
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|uint64_t
operator|,
name|little
operator|,
name|unaligned
operator|>
name|ulittle64_t
expr_stmt|;
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|int8_t
operator|,
name|little
operator|,
name|unaligned
operator|>
name|little8_t
expr_stmt|;
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|int16_t
operator|,
name|little
operator|,
name|unaligned
operator|>
name|little16_t
expr_stmt|;
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|int32_t
operator|,
name|little
operator|,
name|unaligned
operator|>
name|little32_t
expr_stmt|;
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|int64_t
operator|,
name|little
operator|,
name|unaligned
operator|>
name|little64_t
expr_stmt|;
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|uint8_t
operator|,
name|little
operator|,
name|aligned
operator|>
name|aligned_ulittle8_t
expr_stmt|;
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|uint16_t
operator|,
name|little
operator|,
name|aligned
operator|>
name|aligned_ulittle16_t
expr_stmt|;
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|uint32_t
operator|,
name|little
operator|,
name|aligned
operator|>
name|aligned_ulittle32_t
expr_stmt|;
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|uint64_t
operator|,
name|little
operator|,
name|aligned
operator|>
name|aligned_ulittle64_t
expr_stmt|;
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|int8_t
operator|,
name|little
operator|,
name|aligned
operator|>
name|aligned_little8_t
expr_stmt|;
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|int16_t
operator|,
name|little
operator|,
name|aligned
operator|>
name|aligned_little16_t
expr_stmt|;
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|int32_t
operator|,
name|little
operator|,
name|aligned
operator|>
name|aligned_little32_t
expr_stmt|;
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|int64_t
operator|,
name|little
operator|,
name|aligned
operator|>
name|aligned_little64_t
expr_stmt|;
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|uint8_t
operator|,
name|big
operator|,
name|unaligned
operator|>
name|ubig8_t
expr_stmt|;
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|uint16_t
operator|,
name|big
operator|,
name|unaligned
operator|>
name|ubig16_t
expr_stmt|;
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|uint32_t
operator|,
name|big
operator|,
name|unaligned
operator|>
name|ubig32_t
expr_stmt|;
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|uint64_t
operator|,
name|big
operator|,
name|unaligned
operator|>
name|ubig64_t
expr_stmt|;
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|int8_t
operator|,
name|big
operator|,
name|unaligned
operator|>
name|big8_t
expr_stmt|;
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|int16_t
operator|,
name|big
operator|,
name|unaligned
operator|>
name|big16_t
expr_stmt|;
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|int32_t
operator|,
name|big
operator|,
name|unaligned
operator|>
name|big32_t
expr_stmt|;
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|int64_t
operator|,
name|big
operator|,
name|unaligned
operator|>
name|big64_t
expr_stmt|;
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|uint8_t
operator|,
name|big
operator|,
name|aligned
operator|>
name|aligned_ubig8_t
expr_stmt|;
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|uint16_t
operator|,
name|big
operator|,
name|aligned
operator|>
name|aligned_ubig16_t
expr_stmt|;
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|uint32_t
operator|,
name|big
operator|,
name|aligned
operator|>
name|aligned_ubig32_t
expr_stmt|;
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|uint64_t
operator|,
name|big
operator|,
name|aligned
operator|>
name|aligned_ubig64_t
expr_stmt|;
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|int8_t
operator|,
name|big
operator|,
name|aligned
operator|>
name|aligned_big8_t
expr_stmt|;
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|int16_t
operator|,
name|big
operator|,
name|aligned
operator|>
name|aligned_big16_t
expr_stmt|;
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|int32_t
operator|,
name|big
operator|,
name|aligned
operator|>
name|aligned_big32_t
expr_stmt|;
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|int64_t
operator|,
name|big
operator|,
name|aligned
operator|>
name|aligned_big64_t
expr_stmt|;
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|uint16_t
operator|,
name|native
operator|,
name|unaligned
operator|>
name|unaligned_uint16_t
expr_stmt|;
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|uint32_t
operator|,
name|native
operator|,
name|unaligned
operator|>
name|unaligned_uint32_t
expr_stmt|;
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|uint64_t
operator|,
name|native
operator|,
name|unaligned
operator|>
name|unaligned_uint64_t
expr_stmt|;
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|int16_t
operator|,
name|native
operator|,
name|unaligned
operator|>
name|unaligned_int16_t
expr_stmt|;
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|int32_t
operator|,
name|native
operator|,
name|unaligned
operator|>
name|unaligned_int32_t
expr_stmt|;
typedef|typedef
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|int64_t
operator|,
name|native
operator|,
name|unaligned
operator|>
name|unaligned_int64_t
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_comment
unit|}
comment|// end namespace support
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

