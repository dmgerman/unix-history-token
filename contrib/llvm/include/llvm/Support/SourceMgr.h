begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- SourceMgr.h - Manager for Source Buffers& Diagnostics ---*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares the SMDiagnostic and SourceMgr classes.  This
end_comment

begin_comment
comment|// provides a simple substrate for diagnostics, #include handling, and other low
end_comment

begin_comment
comment|// level things for simple parsers.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_SUPPORT_SOURCEMGR_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_SUPPORT_SOURCEMGR_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/Twine.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/SMLoc.h"
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MemoryBuffer
decl_stmt|;
name|class
name|SourceMgr
decl_stmt|;
name|class
name|SMDiagnostic
decl_stmt|;
name|class
name|SMFixIt
decl_stmt|;
name|class
name|Twine
decl_stmt|;
name|class
name|raw_ostream
decl_stmt|;
comment|/// SourceMgr - This owns the files read by a parser, handles include stacks,
comment|/// and handles diagnostic wrangling.
name|class
name|SourceMgr
block|{
name|public
label|:
enum|enum
name|DiagKind
block|{
name|DK_Error
block|,
name|DK_Warning
block|,
name|DK_Note
block|}
enum|;
comment|/// DiagHandlerTy - Clients that want to handle their own diagnostics in a
comment|/// custom way can register a function pointer+context as a diagnostic
comment|/// handler.  It gets called each time PrintMessage is invoked.
typedef|typedef
name|void
function_decl|(
modifier|*
name|DiagHandlerTy
function_decl|)
parameter_list|(
specifier|const
name|SMDiagnostic
modifier|&
parameter_list|,
name|void
modifier|*
name|Context
parameter_list|)
function_decl|;
name|private
label|:
struct|struct
name|SrcBuffer
block|{
comment|/// Buffer - The memory buffer for the file.
name|MemoryBuffer
modifier|*
name|Buffer
decl_stmt|;
comment|/// IncludeLoc - This is the location of the parent include, or null if at
comment|/// the top level.
name|SMLoc
name|IncludeLoc
decl_stmt|;
block|}
struct|;
comment|/// Buffers - This is all of the buffers that we are reading from.
name|std
operator|::
name|vector
operator|<
name|SrcBuffer
operator|>
name|Buffers
expr_stmt|;
comment|// IncludeDirectories - This is the list of directories we should search for
comment|// include files in.
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
name|IncludeDirectories
expr_stmt|;
comment|/// LineNoCache - This is a cache for line number queries, its implementation
comment|/// is really private to SourceMgr.cpp.
name|mutable
name|void
modifier|*
name|LineNoCache
decl_stmt|;
name|DiagHandlerTy
name|DiagHandler
decl_stmt|;
name|void
modifier|*
name|DiagContext
decl_stmt|;
name|SourceMgr
argument_list|(
argument|const SourceMgr&
argument_list|)
name|LLVM_DELETED_FUNCTION
expr_stmt|;
name|void
name|operator
init|=
operator|(
specifier|const
name|SourceMgr
operator|&
operator|)
name|LLVM_DELETED_FUNCTION
decl_stmt|;
name|public
label|:
name|SourceMgr
argument_list|()
operator|:
name|LineNoCache
argument_list|(
literal|0
argument_list|)
operator|,
name|DiagHandler
argument_list|(
literal|0
argument_list|)
operator|,
name|DiagContext
argument_list|(
literal|0
argument_list|)
block|{}
operator|~
name|SourceMgr
argument_list|()
expr_stmt|;
name|void
name|setIncludeDirs
argument_list|(
specifier|const
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
operator|&
name|Dirs
argument_list|)
block|{
name|IncludeDirectories
operator|=
name|Dirs
expr_stmt|;
block|}
comment|/// setDiagHandler - Specify a diagnostic handler to be invoked every time
comment|/// PrintMessage is called. Ctx is passed into the handler when it is invoked.
name|void
name|setDiagHandler
parameter_list|(
name|DiagHandlerTy
name|DH
parameter_list|,
name|void
modifier|*
name|Ctx
init|=
literal|0
parameter_list|)
block|{
name|DiagHandler
operator|=
name|DH
expr_stmt|;
name|DiagContext
operator|=
name|Ctx
expr_stmt|;
block|}
name|DiagHandlerTy
name|getDiagHandler
argument_list|()
specifier|const
block|{
return|return
name|DiagHandler
return|;
block|}
name|void
operator|*
name|getDiagContext
argument_list|()
specifier|const
block|{
return|return
name|DiagContext
return|;
block|}
specifier|const
name|SrcBuffer
modifier|&
name|getBufferInfo
argument_list|(
name|unsigned
name|i
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|i
operator|<
name|Buffers
operator|.
name|size
argument_list|()
operator|&&
literal|"Invalid Buffer ID!"
argument_list|)
expr_stmt|;
return|return
name|Buffers
index|[
name|i
index|]
return|;
block|}
specifier|const
name|MemoryBuffer
modifier|*
name|getMemoryBuffer
argument_list|(
name|unsigned
name|i
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|i
operator|<
name|Buffers
operator|.
name|size
argument_list|()
operator|&&
literal|"Invalid Buffer ID!"
argument_list|)
expr_stmt|;
return|return
name|Buffers
index|[
name|i
index|]
operator|.
name|Buffer
return|;
block|}
name|size_t
name|getNumBuffers
argument_list|()
specifier|const
block|{
return|return
name|Buffers
operator|.
name|size
argument_list|()
return|;
block|}
name|SMLoc
name|getParentIncludeLoc
argument_list|(
name|unsigned
name|i
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|i
operator|<
name|Buffers
operator|.
name|size
argument_list|()
operator|&&
literal|"Invalid Buffer ID!"
argument_list|)
expr_stmt|;
return|return
name|Buffers
index|[
name|i
index|]
operator|.
name|IncludeLoc
return|;
block|}
comment|/// AddNewSourceBuffer - Add a new source buffer to this source manager.  This
comment|/// takes ownership of the memory buffer.
name|size_t
name|AddNewSourceBuffer
parameter_list|(
name|MemoryBuffer
modifier|*
name|F
parameter_list|,
name|SMLoc
name|IncludeLoc
parameter_list|)
block|{
name|SrcBuffer
name|NB
decl_stmt|;
name|NB
operator|.
name|Buffer
operator|=
name|F
expr_stmt|;
name|NB
operator|.
name|IncludeLoc
operator|=
name|IncludeLoc
expr_stmt|;
name|Buffers
operator|.
name|push_back
argument_list|(
name|NB
argument_list|)
expr_stmt|;
return|return
name|Buffers
operator|.
name|size
argument_list|()
operator|-
literal|1
return|;
block|}
comment|/// AddIncludeFile - Search for a file with the specified name in the current
comment|/// directory or in one of the IncludeDirs.  If no file is found, this returns
comment|/// ~0, otherwise it returns the buffer ID of the stacked file.
comment|/// The full path to the included file can be found in IncludedFile.
name|size_t
name|AddIncludeFile
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Filename
argument_list|,
name|SMLoc
name|IncludeLoc
argument_list|,
name|std
operator|::
name|string
operator|&
name|IncludedFile
argument_list|)
decl_stmt|;
comment|/// FindBufferContainingLoc - Return the ID of the buffer containing the
comment|/// specified location, returning -1 if not found.
name|int
name|FindBufferContainingLoc
argument_list|(
name|SMLoc
name|Loc
argument_list|)
decl|const
decl_stmt|;
comment|/// FindLineNumber - Find the line number for the specified location in the
comment|/// specified file.  This is not a fast method.
name|unsigned
name|FindLineNumber
argument_list|(
name|SMLoc
name|Loc
argument_list|,
name|int
name|BufferID
operator|=
operator|-
literal|1
argument_list|)
decl|const
block|{
return|return
name|getLineAndColumn
argument_list|(
name|Loc
argument_list|,
name|BufferID
argument_list|)
operator|.
name|first
return|;
block|}
comment|/// getLineAndColumn - Find the line and column number for the specified
comment|/// location in the specified file.  This is not a fast method.
name|std
operator|::
name|pair
operator|<
name|unsigned
operator|,
name|unsigned
operator|>
name|getLineAndColumn
argument_list|(
argument|SMLoc Loc
argument_list|,
argument|int BufferID = -
literal|1
argument_list|)
specifier|const
expr_stmt|;
comment|/// PrintMessage - Emit a message about the specified location with the
comment|/// specified string.
comment|///
comment|/// @param ShowColors - Display colored messages if output is a terminal and
comment|/// the default error handler is used.
name|void
name|PrintMessage
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|,
name|SMLoc
name|Loc
argument_list|,
name|DiagKind
name|Kind
argument_list|,
specifier|const
name|Twine
operator|&
name|Msg
argument_list|,
name|ArrayRef
operator|<
name|SMRange
operator|>
name|Ranges
operator|=
name|None
argument_list|,
name|ArrayRef
operator|<
name|SMFixIt
operator|>
name|FixIts
operator|=
name|None
argument_list|,
name|bool
name|ShowColors
operator|=
name|true
argument_list|)
decl|const
decl_stmt|;
comment|/// Emits a diagnostic to llvm::errs().
name|void
name|PrintMessage
argument_list|(
name|SMLoc
name|Loc
argument_list|,
name|DiagKind
name|Kind
argument_list|,
specifier|const
name|Twine
operator|&
name|Msg
argument_list|,
name|ArrayRef
operator|<
name|SMRange
operator|>
name|Ranges
operator|=
name|None
argument_list|,
name|ArrayRef
operator|<
name|SMFixIt
operator|>
name|FixIts
operator|=
name|None
argument_list|,
name|bool
name|ShowColors
operator|=
name|true
argument_list|)
decl|const
decl_stmt|;
comment|/// GetMessage - Return an SMDiagnostic at the specified location with the
comment|/// specified string.
comment|///
comment|/// @param Msg If non-null, the kind of message (e.g., "error") which is
comment|/// prefixed to the message.
name|SMDiagnostic
name|GetMessage
argument_list|(
name|SMLoc
name|Loc
argument_list|,
name|DiagKind
name|Kind
argument_list|,
specifier|const
name|Twine
operator|&
name|Msg
argument_list|,
name|ArrayRef
operator|<
name|SMRange
operator|>
name|Ranges
operator|=
name|None
argument_list|,
name|ArrayRef
operator|<
name|SMFixIt
operator|>
name|FixIts
operator|=
name|None
argument_list|)
decl|const
decl_stmt|;
comment|/// PrintIncludeStack - Prints the names of included files and the line of the
comment|/// file they were included from.  A diagnostic handler can use this before
comment|/// printing its custom formatted message.
comment|///
comment|/// @param IncludeLoc - The line of the include.
comment|/// @param OS the raw_ostream to print on.
name|void
name|PrintIncludeStack
argument_list|(
name|SMLoc
name|IncludeLoc
argument_list|,
name|raw_ostream
operator|&
name|OS
argument_list|)
decl|const
decl_stmt|;
block|}
empty_stmt|;
comment|/// Represents a single fixit, a replacement of one range of text with another.
name|class
name|SMFixIt
block|{
name|SMRange
name|Range
decl_stmt|;
name|std
operator|::
name|string
name|Text
expr_stmt|;
name|public
label|:
comment|// FIXME: Twine.str() is not very efficient.
name|SMFixIt
argument_list|(
argument|SMLoc Loc
argument_list|,
argument|const Twine&Insertion
argument_list|)
block|:
name|Range
argument_list|(
name|Loc
argument_list|,
name|Loc
argument_list|)
operator|,
name|Text
argument_list|(
argument|Insertion.str()
argument_list|)
block|{
name|assert
argument_list|(
name|Loc
operator|.
name|isValid
argument_list|()
argument_list|)
block|;   }
comment|// FIXME: Twine.str() is not very efficient.
name|SMFixIt
argument_list|(
argument|SMRange R
argument_list|,
argument|const Twine&Replacement
argument_list|)
operator|:
name|Range
argument_list|(
name|R
argument_list|)
operator|,
name|Text
argument_list|(
argument|Replacement.str()
argument_list|)
block|{
name|assert
argument_list|(
name|R
operator|.
name|isValid
argument_list|()
argument_list|)
block|;   }
name|StringRef
name|getText
argument_list|()
specifier|const
block|{
return|return
name|Text
return|;
block|}
name|SMRange
name|getRange
argument_list|()
specifier|const
block|{
return|return
name|Range
return|;
block|}
name|bool
name|operator
operator|<
operator|(
specifier|const
name|SMFixIt
operator|&
name|Other
operator|)
specifier|const
block|{
if|if
condition|(
name|Range
operator|.
name|Start
operator|.
name|getPointer
argument_list|()
operator|!=
name|Other
operator|.
name|Range
operator|.
name|Start
operator|.
name|getPointer
argument_list|()
condition|)
return|return
name|Range
operator|.
name|Start
operator|.
name|getPointer
argument_list|()
operator|<
name|Other
operator|.
name|Range
operator|.
name|Start
operator|.
name|getPointer
argument_list|()
return|;
if|if
condition|(
name|Range
operator|.
name|End
operator|.
name|getPointer
argument_list|()
operator|!=
name|Other
operator|.
name|Range
operator|.
name|End
operator|.
name|getPointer
argument_list|()
condition|)
return|return
name|Range
operator|.
name|End
operator|.
name|getPointer
argument_list|()
operator|<
name|Other
operator|.
name|Range
operator|.
name|End
operator|.
name|getPointer
argument_list|()
return|;
return|return
name|Text
operator|<
name|Other
operator|.
name|Text
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/// SMDiagnostic - Instances of this class encapsulate one diagnostic report,
end_comment

begin_comment
comment|/// allowing printing to a raw_ostream as a caret diagnostic.
end_comment

begin_decl_stmt
name|class
name|SMDiagnostic
block|{
specifier|const
name|SourceMgr
modifier|*
name|SM
decl_stmt|;
name|SMLoc
name|Loc
decl_stmt|;
name|std
operator|::
name|string
name|Filename
expr_stmt|;
name|int
name|LineNo
decl_stmt|,
name|ColumnNo
decl_stmt|;
name|SourceMgr
operator|::
name|DiagKind
name|Kind
expr_stmt|;
name|std
operator|::
name|string
name|Message
operator|,
name|LineContents
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|pair
operator|<
name|unsigned
operator|,
name|unsigned
operator|>
expr|>
name|Ranges
expr_stmt|;
name|SmallVector
operator|<
name|SMFixIt
operator|,
literal|4
operator|>
name|FixIts
expr_stmt|;
name|public
label|:
comment|// Null diagnostic.
name|SMDiagnostic
argument_list|()
operator|:
name|SM
argument_list|(
literal|0
argument_list|)
operator|,
name|LineNo
argument_list|(
literal|0
argument_list|)
operator|,
name|ColumnNo
argument_list|(
literal|0
argument_list|)
operator|,
name|Kind
argument_list|(
argument|SourceMgr::DK_Error
argument_list|)
block|{}
comment|// Diagnostic with no location (e.g. file not found, command line arg error).
name|SMDiagnostic
argument_list|(
argument|StringRef filename
argument_list|,
argument|SourceMgr::DiagKind Knd
argument_list|,
argument|StringRef Msg
argument_list|)
operator|:
name|SM
argument_list|(
literal|0
argument_list|)
operator|,
name|Filename
argument_list|(
name|filename
argument_list|)
operator|,
name|LineNo
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|ColumnNo
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|Kind
argument_list|(
name|Knd
argument_list|)
operator|,
name|Message
argument_list|(
argument|Msg
argument_list|)
block|{}
comment|// Diagnostic with a location.
name|SMDiagnostic
argument_list|(
argument|const SourceMgr&sm
argument_list|,
argument|SMLoc L
argument_list|,
argument|StringRef FN
argument_list|,
argument|int Line
argument_list|,
argument|int Col
argument_list|,
argument|SourceMgr::DiagKind Kind
argument_list|,
argument|StringRef Msg
argument_list|,
argument|StringRef LineStr
argument_list|,
argument|ArrayRef<std::pair<unsigned
argument_list|,
argument|unsigned>> Ranges
argument_list|,
argument|ArrayRef<SMFixIt> FixIts = None
argument_list|)
expr_stmt|;
specifier|const
name|SourceMgr
operator|*
name|getSourceMgr
argument_list|()
specifier|const
block|{
return|return
name|SM
return|;
block|}
name|SMLoc
name|getLoc
argument_list|()
specifier|const
block|{
return|return
name|Loc
return|;
block|}
name|StringRef
name|getFilename
argument_list|()
specifier|const
block|{
return|return
name|Filename
return|;
block|}
name|int
name|getLineNo
argument_list|()
specifier|const
block|{
return|return
name|LineNo
return|;
block|}
name|int
name|getColumnNo
argument_list|()
specifier|const
block|{
return|return
name|ColumnNo
return|;
block|}
name|SourceMgr
operator|::
name|DiagKind
name|getKind
argument_list|()
specifier|const
block|{
return|return
name|Kind
return|;
block|}
name|StringRef
name|getMessage
argument_list|()
specifier|const
block|{
return|return
name|Message
return|;
block|}
name|StringRef
name|getLineContents
argument_list|()
specifier|const
block|{
return|return
name|LineContents
return|;
block|}
name|ArrayRef
operator|<
name|std
operator|::
name|pair
operator|<
name|unsigned
operator|,
name|unsigned
operator|>
expr|>
name|getRanges
argument_list|()
specifier|const
block|{
return|return
name|Ranges
return|;
block|}
name|void
name|addFixIt
parameter_list|(
specifier|const
name|SMFixIt
modifier|&
name|Hint
parameter_list|)
block|{
name|FixIts
operator|.
name|push_back
argument_list|(
name|Hint
argument_list|)
expr_stmt|;
block|}
name|ArrayRef
operator|<
name|SMFixIt
operator|>
name|getFixIts
argument_list|()
specifier|const
block|{
return|return
name|FixIts
return|;
block|}
name|void
name|print
argument_list|(
specifier|const
name|char
operator|*
name|ProgName
argument_list|,
name|raw_ostream
operator|&
name|S
argument_list|,
name|bool
name|ShowColors
operator|=
name|true
argument_list|)
decl|const
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// end llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

