begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- llvm/Support/Dwarf.h ---Dwarf Constants------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// \file
end_comment

begin_comment
comment|// \brief This file contains constants used for implementing Dwarf
end_comment

begin_comment
comment|// debug support.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// For details on the Dwarf specfication see the latest DWARF Debugging
end_comment

begin_comment
comment|// Information Format standard document on http://www.dwarfstd.org. This
end_comment

begin_comment
comment|// file often includes support for non-released standard features.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_SUPPORT_DWARF_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_SUPPORT_DWARF_H
end_define

begin_include
include|#
directive|include
file|"llvm/Support/Compiler.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/DataTypes.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|StringRef
decl_stmt|;
name|namespace
name|dwarf
block|{
comment|//===----------------------------------------------------------------------===//
comment|// Dwarf constants as gleaned from the DWARF Debugging Information Format V.4
comment|// reference manual http://www.dwarfstd.org/.
comment|//
comment|// Do not mix the following two enumerations sets.  DW_TAG_invalid changes the
comment|// enumeration base type.
enum|enum
name|LLVMConstants
enum|:
name|uint32_t
block|{
comment|// LLVM mock tags (see also llvm/Support/Dwarf.def).
name|DW_TAG_invalid
init|=
operator|~
literal|0U
block|,
comment|// Tag for invalid results.
name|DW_VIRTUALITY_invalid
init|=
operator|~
literal|0U
block|,
comment|// Virtuality for invalid results.
name|DW_MACINFO_invalid
init|=
operator|~
literal|0U
block|,
comment|// Macinfo type for invalid results.
comment|// Other constants.
name|DWARF_VERSION
init|=
literal|4
block|,
comment|// Default dwarf version we output.
name|DW_PUBTYPES_VERSION
init|=
literal|2
block|,
comment|// Section version number for .debug_pubtypes.
name|DW_PUBNAMES_VERSION
init|=
literal|2
block|,
comment|// Section version number for .debug_pubnames.
name|DW_ARANGES_VERSION
init|=
literal|2
comment|// Section version number for .debug_aranges.
block|}
enum|;
comment|// Special ID values that distinguish a CIE from a FDE in DWARF CFI.
comment|// Not inside an enum because a 64-bit value is needed.
specifier|const
name|uint32_t
name|DW_CIE_ID
init|=
name|UINT32_MAX
decl_stmt|;
specifier|const
name|uint64_t
name|DW64_CIE_ID
init|=
name|UINT64_MAX
decl_stmt|;
enum|enum
name|Tag
enum|:
name|uint16_t
block|{
define|#
directive|define
name|HANDLE_DW_TAG
parameter_list|(
name|ID
parameter_list|,
name|NAME
parameter_list|)
value|DW_TAG_##NAME = ID,
include|#
directive|include
file|"llvm/Support/Dwarf.def"
name|DW_TAG_lo_user
init|=
literal|0x4080
block|,
name|DW_TAG_hi_user
init|=
literal|0xffff
block|,
name|DW_TAG_user_base
init|=
literal|0x1000
comment|// Recommended base for user tags.
block|}
enum|;
specifier|inline
name|bool
name|isType
parameter_list|(
name|Tag
name|T
parameter_list|)
block|{
switch|switch
condition|(
name|T
condition|)
block|{
case|case
name|DW_TAG_array_type
case|:
case|case
name|DW_TAG_class_type
case|:
case|case
name|DW_TAG_interface_type
case|:
case|case
name|DW_TAG_enumeration_type
case|:
case|case
name|DW_TAG_pointer_type
case|:
case|case
name|DW_TAG_reference_type
case|:
case|case
name|DW_TAG_rvalue_reference_type
case|:
case|case
name|DW_TAG_string_type
case|:
case|case
name|DW_TAG_structure_type
case|:
case|case
name|DW_TAG_subroutine_type
case|:
case|case
name|DW_TAG_union_type
case|:
case|case
name|DW_TAG_ptr_to_member_type
case|:
case|case
name|DW_TAG_set_type
case|:
case|case
name|DW_TAG_subrange_type
case|:
case|case
name|DW_TAG_base_type
case|:
case|case
name|DW_TAG_const_type
case|:
case|case
name|DW_TAG_file_type
case|:
case|case
name|DW_TAG_packed_type
case|:
case|case
name|DW_TAG_volatile_type
case|:
case|case
name|DW_TAG_typedef
case|:
return|return
name|true
return|;
default|default:
return|return
name|false
return|;
block|}
block|}
enum|enum
name|Attribute
enum|:
name|uint16_t
block|{
comment|// Attributes
name|DW_AT_sibling
init|=
literal|0x01
block|,
name|DW_AT_location
init|=
literal|0x02
block|,
name|DW_AT_name
init|=
literal|0x03
block|,
name|DW_AT_ordering
init|=
literal|0x09
block|,
name|DW_AT_byte_size
init|=
literal|0x0b
block|,
name|DW_AT_bit_offset
init|=
literal|0x0c
block|,
name|DW_AT_bit_size
init|=
literal|0x0d
block|,
name|DW_AT_stmt_list
init|=
literal|0x10
block|,
name|DW_AT_low_pc
init|=
literal|0x11
block|,
name|DW_AT_high_pc
init|=
literal|0x12
block|,
name|DW_AT_language
init|=
literal|0x13
block|,
name|DW_AT_discr
init|=
literal|0x15
block|,
name|DW_AT_discr_value
init|=
literal|0x16
block|,
name|DW_AT_visibility
init|=
literal|0x17
block|,
name|DW_AT_import
init|=
literal|0x18
block|,
name|DW_AT_string_length
init|=
literal|0x19
block|,
name|DW_AT_common_reference
init|=
literal|0x1a
block|,
name|DW_AT_comp_dir
init|=
literal|0x1b
block|,
name|DW_AT_const_value
init|=
literal|0x1c
block|,
name|DW_AT_containing_type
init|=
literal|0x1d
block|,
name|DW_AT_default_value
init|=
literal|0x1e
block|,
name|DW_AT_inline
init|=
literal|0x20
block|,
name|DW_AT_is_optional
init|=
literal|0x21
block|,
name|DW_AT_lower_bound
init|=
literal|0x22
block|,
name|DW_AT_producer
init|=
literal|0x25
block|,
name|DW_AT_prototyped
init|=
literal|0x27
block|,
name|DW_AT_return_addr
init|=
literal|0x2a
block|,
name|DW_AT_start_scope
init|=
literal|0x2c
block|,
name|DW_AT_bit_stride
init|=
literal|0x2e
block|,
name|DW_AT_upper_bound
init|=
literal|0x2f
block|,
name|DW_AT_abstract_origin
init|=
literal|0x31
block|,
name|DW_AT_accessibility
init|=
literal|0x32
block|,
name|DW_AT_address_class
init|=
literal|0x33
block|,
name|DW_AT_artificial
init|=
literal|0x34
block|,
name|DW_AT_base_types
init|=
literal|0x35
block|,
name|DW_AT_calling_convention
init|=
literal|0x36
block|,
name|DW_AT_count
init|=
literal|0x37
block|,
name|DW_AT_data_member_location
init|=
literal|0x38
block|,
name|DW_AT_decl_column
init|=
literal|0x39
block|,
name|DW_AT_decl_file
init|=
literal|0x3a
block|,
name|DW_AT_decl_line
init|=
literal|0x3b
block|,
name|DW_AT_declaration
init|=
literal|0x3c
block|,
name|DW_AT_discr_list
init|=
literal|0x3d
block|,
name|DW_AT_encoding
init|=
literal|0x3e
block|,
name|DW_AT_external
init|=
literal|0x3f
block|,
name|DW_AT_frame_base
init|=
literal|0x40
block|,
name|DW_AT_friend
init|=
literal|0x41
block|,
name|DW_AT_identifier_case
init|=
literal|0x42
block|,
name|DW_AT_macro_info
init|=
literal|0x43
block|,
name|DW_AT_namelist_item
init|=
literal|0x44
block|,
name|DW_AT_priority
init|=
literal|0x45
block|,
name|DW_AT_segment
init|=
literal|0x46
block|,
name|DW_AT_specification
init|=
literal|0x47
block|,
name|DW_AT_static_link
init|=
literal|0x48
block|,
name|DW_AT_type
init|=
literal|0x49
block|,
name|DW_AT_use_location
init|=
literal|0x4a
block|,
name|DW_AT_variable_parameter
init|=
literal|0x4b
block|,
name|DW_AT_virtuality
init|=
literal|0x4c
block|,
name|DW_AT_vtable_elem_location
init|=
literal|0x4d
block|,
name|DW_AT_allocated
init|=
literal|0x4e
block|,
name|DW_AT_associated
init|=
literal|0x4f
block|,
name|DW_AT_data_location
init|=
literal|0x50
block|,
name|DW_AT_byte_stride
init|=
literal|0x51
block|,
name|DW_AT_entry_pc
init|=
literal|0x52
block|,
name|DW_AT_use_UTF8
init|=
literal|0x53
block|,
name|DW_AT_extension
init|=
literal|0x54
block|,
name|DW_AT_ranges
init|=
literal|0x55
block|,
name|DW_AT_trampoline
init|=
literal|0x56
block|,
name|DW_AT_call_column
init|=
literal|0x57
block|,
name|DW_AT_call_file
init|=
literal|0x58
block|,
name|DW_AT_call_line
init|=
literal|0x59
block|,
name|DW_AT_description
init|=
literal|0x5a
block|,
name|DW_AT_binary_scale
init|=
literal|0x5b
block|,
name|DW_AT_decimal_scale
init|=
literal|0x5c
block|,
name|DW_AT_small
init|=
literal|0x5d
block|,
name|DW_AT_decimal_sign
init|=
literal|0x5e
block|,
name|DW_AT_digit_count
init|=
literal|0x5f
block|,
name|DW_AT_picture_string
init|=
literal|0x60
block|,
name|DW_AT_mutable
init|=
literal|0x61
block|,
name|DW_AT_threads_scaled
init|=
literal|0x62
block|,
name|DW_AT_explicit
init|=
literal|0x63
block|,
name|DW_AT_object_pointer
init|=
literal|0x64
block|,
name|DW_AT_endianity
init|=
literal|0x65
block|,
name|DW_AT_elemental
init|=
literal|0x66
block|,
name|DW_AT_pure
init|=
literal|0x67
block|,
name|DW_AT_recursive
init|=
literal|0x68
block|,
name|DW_AT_signature
init|=
literal|0x69
block|,
name|DW_AT_main_subprogram
init|=
literal|0x6a
block|,
name|DW_AT_data_bit_offset
init|=
literal|0x6b
block|,
name|DW_AT_const_expr
init|=
literal|0x6c
block|,
name|DW_AT_enum_class
init|=
literal|0x6d
block|,
name|DW_AT_linkage_name
init|=
literal|0x6e
block|,
comment|// New in DWARF 5:
name|DW_AT_string_length_bit_size
init|=
literal|0x6f
block|,
name|DW_AT_string_length_byte_size
init|=
literal|0x70
block|,
name|DW_AT_rank
init|=
literal|0x71
block|,
name|DW_AT_str_offsets_base
init|=
literal|0x72
block|,
name|DW_AT_addr_base
init|=
literal|0x73
block|,
name|DW_AT_ranges_base
init|=
literal|0x74
block|,
name|DW_AT_dwo_id
init|=
literal|0x75
block|,
name|DW_AT_dwo_name
init|=
literal|0x76
block|,
name|DW_AT_reference
init|=
literal|0x77
block|,
name|DW_AT_rvalue_reference
init|=
literal|0x78
block|,
name|DW_AT_macros
init|=
literal|0x79
block|,
name|DW_AT_lo_user
init|=
literal|0x2000
block|,
name|DW_AT_hi_user
init|=
literal|0x3fff
block|,
name|DW_AT_MIPS_loop_begin
init|=
literal|0x2002
block|,
name|DW_AT_MIPS_tail_loop_begin
init|=
literal|0x2003
block|,
name|DW_AT_MIPS_epilog_begin
init|=
literal|0x2004
block|,
name|DW_AT_MIPS_loop_unroll_factor
init|=
literal|0x2005
block|,
name|DW_AT_MIPS_software_pipeline_depth
init|=
literal|0x2006
block|,
name|DW_AT_MIPS_linkage_name
init|=
literal|0x2007
block|,
name|DW_AT_MIPS_stride
init|=
literal|0x2008
block|,
name|DW_AT_MIPS_abstract_name
init|=
literal|0x2009
block|,
name|DW_AT_MIPS_clone_origin
init|=
literal|0x200a
block|,
name|DW_AT_MIPS_has_inlines
init|=
literal|0x200b
block|,
name|DW_AT_MIPS_stride_byte
init|=
literal|0x200c
block|,
name|DW_AT_MIPS_stride_elem
init|=
literal|0x200d
block|,
name|DW_AT_MIPS_ptr_dopetype
init|=
literal|0x200e
block|,
name|DW_AT_MIPS_allocatable_dopetype
init|=
literal|0x200f
block|,
name|DW_AT_MIPS_assumed_shape_dopetype
init|=
literal|0x2010
block|,
comment|// This one appears to have only been implemented by Open64 for
comment|// fortran and may conflict with other extensions.
name|DW_AT_MIPS_assumed_size
init|=
literal|0x2011
block|,
comment|// GNU extensions
name|DW_AT_sf_names
init|=
literal|0x2101
block|,
name|DW_AT_src_info
init|=
literal|0x2102
block|,
name|DW_AT_mac_info
init|=
literal|0x2103
block|,
name|DW_AT_src_coords
init|=
literal|0x2104
block|,
name|DW_AT_body_begin
init|=
literal|0x2105
block|,
name|DW_AT_body_end
init|=
literal|0x2106
block|,
name|DW_AT_GNU_vector
init|=
literal|0x2107
block|,
name|DW_AT_GNU_template_name
init|=
literal|0x2110
block|,
name|DW_AT_GNU_odr_signature
init|=
literal|0x210f
block|,
name|DW_AT_GNU_macros
init|=
literal|0x2119
block|,
comment|// Extensions for Fission proposal.
name|DW_AT_GNU_dwo_name
init|=
literal|0x2130
block|,
name|DW_AT_GNU_dwo_id
init|=
literal|0x2131
block|,
name|DW_AT_GNU_ranges_base
init|=
literal|0x2132
block|,
name|DW_AT_GNU_addr_base
init|=
literal|0x2133
block|,
name|DW_AT_GNU_pubnames
init|=
literal|0x2134
block|,
name|DW_AT_GNU_pubtypes
init|=
literal|0x2135
block|,
name|DW_AT_GNU_discriminator
init|=
literal|0x2136
block|,
comment|// Borland extensions.
name|DW_AT_BORLAND_property_read
init|=
literal|0x3b11
block|,
name|DW_AT_BORLAND_property_write
init|=
literal|0x3b12
block|,
name|DW_AT_BORLAND_property_implements
init|=
literal|0x3b13
block|,
name|DW_AT_BORLAND_property_index
init|=
literal|0x3b14
block|,
name|DW_AT_BORLAND_property_default
init|=
literal|0x3b15
block|,
name|DW_AT_BORLAND_Delphi_unit
init|=
literal|0x3b20
block|,
name|DW_AT_BORLAND_Delphi_class
init|=
literal|0x3b21
block|,
name|DW_AT_BORLAND_Delphi_record
init|=
literal|0x3b22
block|,
name|DW_AT_BORLAND_Delphi_metaclass
init|=
literal|0x3b23
block|,
name|DW_AT_BORLAND_Delphi_constructor
init|=
literal|0x3b24
block|,
name|DW_AT_BORLAND_Delphi_destructor
init|=
literal|0x3b25
block|,
name|DW_AT_BORLAND_Delphi_anonymous_method
init|=
literal|0x3b26
block|,
name|DW_AT_BORLAND_Delphi_interface
init|=
literal|0x3b27
block|,
name|DW_AT_BORLAND_Delphi_ABI
init|=
literal|0x3b28
block|,
name|DW_AT_BORLAND_Delphi_return
init|=
literal|0x3b29
block|,
name|DW_AT_BORLAND_Delphi_frameptr
init|=
literal|0x3b30
block|,
name|DW_AT_BORLAND_closure
init|=
literal|0x3b31
block|,
comment|// LLVM project extensions.
name|DW_AT_LLVM_include_path
init|=
literal|0x3e00
block|,
name|DW_AT_LLVM_config_macros
init|=
literal|0x3e01
block|,
name|DW_AT_LLVM_isysroot
init|=
literal|0x3e02
block|,
comment|// Apple extensions.
name|DW_AT_APPLE_optimized
init|=
literal|0x3fe1
block|,
name|DW_AT_APPLE_flags
init|=
literal|0x3fe2
block|,
name|DW_AT_APPLE_isa
init|=
literal|0x3fe3
block|,
name|DW_AT_APPLE_block
init|=
literal|0x3fe4
block|,
name|DW_AT_APPLE_major_runtime_vers
init|=
literal|0x3fe5
block|,
name|DW_AT_APPLE_runtime_class
init|=
literal|0x3fe6
block|,
name|DW_AT_APPLE_omit_frame_ptr
init|=
literal|0x3fe7
block|,
name|DW_AT_APPLE_property_name
init|=
literal|0x3fe8
block|,
name|DW_AT_APPLE_property_getter
init|=
literal|0x3fe9
block|,
name|DW_AT_APPLE_property_setter
init|=
literal|0x3fea
block|,
name|DW_AT_APPLE_property_attribute
init|=
literal|0x3feb
block|,
name|DW_AT_APPLE_objc_complete_type
init|=
literal|0x3fec
block|,
name|DW_AT_APPLE_property
init|=
literal|0x3fed
block|}
enum|;
enum|enum
name|Form
enum|:
name|uint16_t
block|{
comment|// Attribute form encodings
name|DW_FORM_addr
init|=
literal|0x01
block|,
name|DW_FORM_block2
init|=
literal|0x03
block|,
name|DW_FORM_block4
init|=
literal|0x04
block|,
name|DW_FORM_data2
init|=
literal|0x05
block|,
name|DW_FORM_data4
init|=
literal|0x06
block|,
name|DW_FORM_data8
init|=
literal|0x07
block|,
name|DW_FORM_string
init|=
literal|0x08
block|,
name|DW_FORM_block
init|=
literal|0x09
block|,
name|DW_FORM_block1
init|=
literal|0x0a
block|,
name|DW_FORM_data1
init|=
literal|0x0b
block|,
name|DW_FORM_flag
init|=
literal|0x0c
block|,
name|DW_FORM_sdata
init|=
literal|0x0d
block|,
name|DW_FORM_strp
init|=
literal|0x0e
block|,
name|DW_FORM_udata
init|=
literal|0x0f
block|,
name|DW_FORM_ref_addr
init|=
literal|0x10
block|,
name|DW_FORM_ref1
init|=
literal|0x11
block|,
name|DW_FORM_ref2
init|=
literal|0x12
block|,
name|DW_FORM_ref4
init|=
literal|0x13
block|,
name|DW_FORM_ref8
init|=
literal|0x14
block|,
name|DW_FORM_ref_udata
init|=
literal|0x15
block|,
name|DW_FORM_indirect
init|=
literal|0x16
block|,
name|DW_FORM_sec_offset
init|=
literal|0x17
block|,
name|DW_FORM_exprloc
init|=
literal|0x18
block|,
name|DW_FORM_flag_present
init|=
literal|0x19
block|,
name|DW_FORM_ref_sig8
init|=
literal|0x20
block|,
comment|// Extensions for Fission proposal
name|DW_FORM_GNU_addr_index
init|=
literal|0x1f01
block|,
name|DW_FORM_GNU_str_index
init|=
literal|0x1f02
block|,
comment|// Alternate debug sections proposal (output of "dwz" tool).
name|DW_FORM_GNU_ref_alt
init|=
literal|0x1f20
block|,
name|DW_FORM_GNU_strp_alt
init|=
literal|0x1f21
block|}
enum|;
enum|enum
name|LocationAtom
block|{
define|#
directive|define
name|HANDLE_DW_OP
parameter_list|(
name|ID
parameter_list|,
name|NAME
parameter_list|)
value|DW_OP_##NAME = ID,
include|#
directive|include
file|"llvm/Support/Dwarf.def"
name|DW_OP_lo_user
init|=
literal|0xe0
block|,
name|DW_OP_hi_user
init|=
literal|0xff
block|}
enum|;
enum|enum
name|TypeKind
block|{
define|#
directive|define
name|HANDLE_DW_ATE
parameter_list|(
name|ID
parameter_list|,
name|NAME
parameter_list|)
value|DW_ATE_##NAME = ID,
include|#
directive|include
file|"llvm/Support/Dwarf.def"
name|DW_ATE_lo_user
init|=
literal|0x80
block|,
name|DW_ATE_hi_user
init|=
literal|0xff
block|}
enum|;
enum|enum
name|DecimalSignEncoding
block|{
comment|// Decimal sign attribute values
name|DW_DS_unsigned
init|=
literal|0x01
block|,
name|DW_DS_leading_overpunch
init|=
literal|0x02
block|,
name|DW_DS_trailing_overpunch
init|=
literal|0x03
block|,
name|DW_DS_leading_separate
init|=
literal|0x04
block|,
name|DW_DS_trailing_separate
init|=
literal|0x05
block|}
enum|;
enum|enum
name|EndianityEncoding
block|{
comment|// Endianity attribute values
name|DW_END_default
init|=
literal|0x00
block|,
name|DW_END_big
init|=
literal|0x01
block|,
name|DW_END_little
init|=
literal|0x02
block|,
name|DW_END_lo_user
init|=
literal|0x40
block|,
name|DW_END_hi_user
init|=
literal|0xff
block|}
enum|;
enum|enum
name|AccessAttribute
block|{
comment|// Accessibility codes
name|DW_ACCESS_public
init|=
literal|0x01
block|,
name|DW_ACCESS_protected
init|=
literal|0x02
block|,
name|DW_ACCESS_private
init|=
literal|0x03
block|}
enum|;
enum|enum
name|VisibilityAttribute
block|{
comment|// Visibility codes
name|DW_VIS_local
init|=
literal|0x01
block|,
name|DW_VIS_exported
init|=
literal|0x02
block|,
name|DW_VIS_qualified
init|=
literal|0x03
block|}
enum|;
enum|enum
name|VirtualityAttribute
block|{
define|#
directive|define
name|HANDLE_DW_VIRTUALITY
parameter_list|(
name|ID
parameter_list|,
name|NAME
parameter_list|)
value|DW_VIRTUALITY_##NAME = ID,
include|#
directive|include
file|"llvm/Support/Dwarf.def"
name|DW_VIRTUALITY_max
init|=
literal|0x02
block|}
enum|;
enum|enum
name|SourceLanguage
block|{
define|#
directive|define
name|HANDLE_DW_LANG
parameter_list|(
name|ID
parameter_list|,
name|NAME
parameter_list|)
value|DW_LANG_##NAME = ID,
include|#
directive|include
file|"llvm/Support/Dwarf.def"
name|DW_LANG_lo_user
init|=
literal|0x8000
block|,
name|DW_LANG_hi_user
init|=
literal|0xffff
block|}
enum|;
enum|enum
name|CaseSensitivity
block|{
comment|// Identifier case codes
name|DW_ID_case_sensitive
init|=
literal|0x00
block|,
name|DW_ID_up_case
init|=
literal|0x01
block|,
name|DW_ID_down_case
init|=
literal|0x02
block|,
name|DW_ID_case_insensitive
init|=
literal|0x03
block|}
enum|;
enum|enum
name|CallingConvention
block|{
comment|// Calling convention codes
define|#
directive|define
name|HANDLE_DW_CC
parameter_list|(
name|ID
parameter_list|,
name|NAME
parameter_list|)
value|DW_CC_##NAME = ID,
include|#
directive|include
file|"llvm/Support/Dwarf.def"
name|DW_CC_lo_user
init|=
literal|0x40
block|,
name|DW_CC_hi_user
init|=
literal|0xff
block|}
enum|;
enum|enum
name|InlineAttribute
block|{
comment|// Inline codes
name|DW_INL_not_inlined
init|=
literal|0x00
block|,
name|DW_INL_inlined
init|=
literal|0x01
block|,
name|DW_INL_declared_not_inlined
init|=
literal|0x02
block|,
name|DW_INL_declared_inlined
init|=
literal|0x03
block|}
enum|;
enum|enum
name|ArrayDimensionOrdering
block|{
comment|// Array ordering
name|DW_ORD_row_major
init|=
literal|0x00
block|,
name|DW_ORD_col_major
init|=
literal|0x01
block|}
enum|;
enum|enum
name|DiscriminantList
block|{
comment|// Discriminant descriptor values
name|DW_DSC_label
init|=
literal|0x00
block|,
name|DW_DSC_range
init|=
literal|0x01
block|}
enum|;
enum|enum
name|LineNumberOps
block|{
comment|// Line Number Standard Opcode Encodings
name|DW_LNS_extended_op
init|=
literal|0x00
block|,
name|DW_LNS_copy
init|=
literal|0x01
block|,
name|DW_LNS_advance_pc
init|=
literal|0x02
block|,
name|DW_LNS_advance_line
init|=
literal|0x03
block|,
name|DW_LNS_set_file
init|=
literal|0x04
block|,
name|DW_LNS_set_column
init|=
literal|0x05
block|,
name|DW_LNS_negate_stmt
init|=
literal|0x06
block|,
name|DW_LNS_set_basic_block
init|=
literal|0x07
block|,
name|DW_LNS_const_add_pc
init|=
literal|0x08
block|,
name|DW_LNS_fixed_advance_pc
init|=
literal|0x09
block|,
name|DW_LNS_set_prologue_end
init|=
literal|0x0a
block|,
name|DW_LNS_set_epilogue_begin
init|=
literal|0x0b
block|,
name|DW_LNS_set_isa
init|=
literal|0x0c
block|}
enum|;
enum|enum
name|LineNumberExtendedOps
block|{
comment|// Line Number Extended Opcode Encodings
name|DW_LNE_end_sequence
init|=
literal|0x01
block|,
name|DW_LNE_set_address
init|=
literal|0x02
block|,
name|DW_LNE_define_file
init|=
literal|0x03
block|,
name|DW_LNE_set_discriminator
init|=
literal|0x04
block|,
name|DW_LNE_lo_user
init|=
literal|0x80
block|,
name|DW_LNE_hi_user
init|=
literal|0xff
block|}
enum|;
enum|enum
name|MacinfoRecordType
block|{
comment|// Macinfo Type Encodings
name|DW_MACINFO_define
init|=
literal|0x01
block|,
name|DW_MACINFO_undef
init|=
literal|0x02
block|,
name|DW_MACINFO_start_file
init|=
literal|0x03
block|,
name|DW_MACINFO_end_file
init|=
literal|0x04
block|,
name|DW_MACINFO_vendor_ext
init|=
literal|0xff
block|}
enum|;
enum|enum
name|MacroEntryType
block|{
comment|// Macro Information Entry Type Encodings
name|DW_MACRO_define
init|=
literal|0x01
block|,
name|DW_MACRO_undef
init|=
literal|0x02
block|,
name|DW_MACRO_start_file
init|=
literal|0x03
block|,
name|DW_MACRO_end_file
init|=
literal|0x04
block|,
name|DW_MACRO_define_indirect
init|=
literal|0x05
block|,
name|DW_MACRO_undef_indirect
init|=
literal|0x06
block|,
name|DW_MACRO_transparent_include
init|=
literal|0x07
block|,
name|DW_MACRO_define_indirect_sup
init|=
literal|0x08
block|,
name|DW_MACRO_undef_indirect_sup
init|=
literal|0x09
block|,
name|DW_MACRO_transparent_include_sup
init|=
literal|0x0a
block|,
name|DW_MACRO_define_indirectx
init|=
literal|0x0b
block|,
name|DW_MACRO_undef_indirectx
init|=
literal|0x0c
block|,
name|DW_MACRO_lo_user
init|=
literal|0xe0
block|,
name|DW_MACRO_hi_user
init|=
literal|0xff
block|}
enum|;
enum|enum
name|CallFrameInfo
block|{
comment|// Call frame instruction encodings
name|DW_CFA_extended
init|=
literal|0x00
block|,
name|DW_CFA_nop
init|=
literal|0x00
block|,
name|DW_CFA_advance_loc
init|=
literal|0x40
block|,
name|DW_CFA_offset
init|=
literal|0x80
block|,
name|DW_CFA_restore
init|=
literal|0xc0
block|,
name|DW_CFA_set_loc
init|=
literal|0x01
block|,
name|DW_CFA_advance_loc1
init|=
literal|0x02
block|,
name|DW_CFA_advance_loc2
init|=
literal|0x03
block|,
name|DW_CFA_advance_loc4
init|=
literal|0x04
block|,
name|DW_CFA_offset_extended
init|=
literal|0x05
block|,
name|DW_CFA_restore_extended
init|=
literal|0x06
block|,
name|DW_CFA_undefined
init|=
literal|0x07
block|,
name|DW_CFA_same_value
init|=
literal|0x08
block|,
name|DW_CFA_register
init|=
literal|0x09
block|,
name|DW_CFA_remember_state
init|=
literal|0x0a
block|,
name|DW_CFA_restore_state
init|=
literal|0x0b
block|,
name|DW_CFA_def_cfa
init|=
literal|0x0c
block|,
name|DW_CFA_def_cfa_register
init|=
literal|0x0d
block|,
name|DW_CFA_def_cfa_offset
init|=
literal|0x0e
block|,
name|DW_CFA_def_cfa_expression
init|=
literal|0x0f
block|,
name|DW_CFA_expression
init|=
literal|0x10
block|,
name|DW_CFA_offset_extended_sf
init|=
literal|0x11
block|,
name|DW_CFA_def_cfa_sf
init|=
literal|0x12
block|,
name|DW_CFA_def_cfa_offset_sf
init|=
literal|0x13
block|,
name|DW_CFA_val_offset
init|=
literal|0x14
block|,
name|DW_CFA_val_offset_sf
init|=
literal|0x15
block|,
name|DW_CFA_val_expression
init|=
literal|0x16
block|,
name|DW_CFA_MIPS_advance_loc8
init|=
literal|0x1d
block|,
name|DW_CFA_GNU_window_save
init|=
literal|0x2d
block|,
name|DW_CFA_GNU_args_size
init|=
literal|0x2e
block|,
name|DW_CFA_lo_user
init|=
literal|0x1c
block|,
name|DW_CFA_hi_user
init|=
literal|0x3f
block|}
enum|;
enum|enum
name|Constants
block|{
comment|// Children flag
name|DW_CHILDREN_no
init|=
literal|0x00
block|,
name|DW_CHILDREN_yes
init|=
literal|0x01
block|,
name|DW_EH_PE_absptr
init|=
literal|0x00
block|,
name|DW_EH_PE_omit
init|=
literal|0xff
block|,
name|DW_EH_PE_uleb128
init|=
literal|0x01
block|,
name|DW_EH_PE_udata2
init|=
literal|0x02
block|,
name|DW_EH_PE_udata4
init|=
literal|0x03
block|,
name|DW_EH_PE_udata8
init|=
literal|0x04
block|,
name|DW_EH_PE_sleb128
init|=
literal|0x09
block|,
name|DW_EH_PE_sdata2
init|=
literal|0x0A
block|,
name|DW_EH_PE_sdata4
init|=
literal|0x0B
block|,
name|DW_EH_PE_sdata8
init|=
literal|0x0C
block|,
name|DW_EH_PE_signed
init|=
literal|0x08
block|,
name|DW_EH_PE_pcrel
init|=
literal|0x10
block|,
name|DW_EH_PE_textrel
init|=
literal|0x20
block|,
name|DW_EH_PE_datarel
init|=
literal|0x30
block|,
name|DW_EH_PE_funcrel
init|=
literal|0x40
block|,
name|DW_EH_PE_aligned
init|=
literal|0x50
block|,
name|DW_EH_PE_indirect
init|=
literal|0x80
block|}
enum|;
comment|// Constants for debug_loc.dwo in the DWARF5 Split Debug Info Proposal
enum|enum
name|LocationListEntry
enum|:
name|unsigned
name|char
block|{
name|DW_LLE_end_of_list_entry
block|,
name|DW_LLE_base_address_selection_entry
block|,
name|DW_LLE_start_end_entry
block|,
name|DW_LLE_start_length_entry
block|,
name|DW_LLE_offset_pair_entry
block|}
enum|;
comment|/// Constants for the DW_APPLE_PROPERTY_attributes attribute.
comment|/// Keep this list in sync with clang's DeclSpec.h ObjCPropertyAttributeKind.
enum|enum
name|ApplePropertyAttributes
block|{
comment|// Apple Objective-C Property Attributes
name|DW_APPLE_PROPERTY_readonly
init|=
literal|0x01
block|,
name|DW_APPLE_PROPERTY_getter
init|=
literal|0x02
block|,
name|DW_APPLE_PROPERTY_assign
init|=
literal|0x04
block|,
name|DW_APPLE_PROPERTY_readwrite
init|=
literal|0x08
block|,
name|DW_APPLE_PROPERTY_retain
init|=
literal|0x10
block|,
name|DW_APPLE_PROPERTY_copy
init|=
literal|0x20
block|,
name|DW_APPLE_PROPERTY_nonatomic
init|=
literal|0x40
block|,
name|DW_APPLE_PROPERTY_setter
init|=
literal|0x80
block|,
name|DW_APPLE_PROPERTY_atomic
init|=
literal|0x100
block|,
name|DW_APPLE_PROPERTY_weak
init|=
literal|0x200
block|,
name|DW_APPLE_PROPERTY_strong
init|=
literal|0x400
block|,
name|DW_APPLE_PROPERTY_unsafe_unretained
init|=
literal|0x800
block|,
name|DW_APPLE_PROPERTY_nullability
init|=
literal|0x1000
block|,
name|DW_APPLE_PROPERTY_null_resettable
init|=
literal|0x2000
block|,
name|DW_APPLE_PROPERTY_class
init|=
literal|0x4000
block|}
enum|;
comment|// Constants for the DWARF5 Accelerator Table Proposal
enum|enum
name|AcceleratorTable
block|{
comment|// Data layout descriptors.
name|DW_ATOM_null
init|=
literal|0u
block|,
comment|// Marker as the end of a list of atoms.
name|DW_ATOM_die_offset
init|=
literal|1u
block|,
comment|// DIE offset in the debug_info section.
name|DW_ATOM_cu_offset
init|=
literal|2u
block|,
comment|// Offset of the compile unit header that contains the
comment|// item in question.
name|DW_ATOM_die_tag
init|=
literal|3u
block|,
comment|// A tag entry.
name|DW_ATOM_type_flags
init|=
literal|4u
block|,
comment|// Set of flags for a type.
comment|// DW_ATOM_type_flags values.
comment|// Always set for C++, only set for ObjC if this is the @implementation for a
comment|// class.
name|DW_FLAG_type_implementation
init|=
literal|2u
block|,
comment|// Hash functions.
comment|// Daniel J. Bernstein hash.
name|DW_hash_function_djb
init|=
literal|0u
block|}
enum|;
comment|// Constants for the GNU pubnames/pubtypes extensions supporting gdb index.
enum|enum
name|GDBIndexEntryKind
block|{
name|GIEK_NONE
block|,
name|GIEK_TYPE
block|,
name|GIEK_VARIABLE
block|,
name|GIEK_FUNCTION
block|,
name|GIEK_OTHER
block|,
name|GIEK_UNUSED5
block|,
name|GIEK_UNUSED6
block|,
name|GIEK_UNUSED7
block|}
enum|;
enum|enum
name|GDBIndexEntryLinkage
block|{
name|GIEL_EXTERNAL
block|,
name|GIEL_STATIC
block|}
enum|;
comment|/// \defgroup DwarfConstantsDumping Dwarf constants dumping functions
comment|///
comment|/// All these functions map their argument's value back to the
comment|/// corresponding enumerator name or return nullptr if the value isn't
comment|/// known.
comment|///
comment|/// @{
specifier|const
name|char
modifier|*
name|TagString
parameter_list|(
name|unsigned
name|Tag
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|ChildrenString
parameter_list|(
name|unsigned
name|Children
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|AttributeString
parameter_list|(
name|unsigned
name|Attribute
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|FormEncodingString
parameter_list|(
name|unsigned
name|Encoding
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|OperationEncodingString
parameter_list|(
name|unsigned
name|Encoding
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|AttributeEncodingString
parameter_list|(
name|unsigned
name|Encoding
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|DecimalSignString
parameter_list|(
name|unsigned
name|Sign
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|EndianityString
parameter_list|(
name|unsigned
name|Endian
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|AccessibilityString
parameter_list|(
name|unsigned
name|Access
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|VisibilityString
parameter_list|(
name|unsigned
name|Visibility
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|VirtualityString
parameter_list|(
name|unsigned
name|Virtuality
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|LanguageString
parameter_list|(
name|unsigned
name|Language
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|CaseString
parameter_list|(
name|unsigned
name|Case
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|ConventionString
parameter_list|(
name|unsigned
name|Convention
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|InlineCodeString
parameter_list|(
name|unsigned
name|Code
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|ArrayOrderString
parameter_list|(
name|unsigned
name|Order
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|DiscriminantString
parameter_list|(
name|unsigned
name|Discriminant
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|LNStandardString
parameter_list|(
name|unsigned
name|Standard
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|LNExtendedString
parameter_list|(
name|unsigned
name|Encoding
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|MacinfoString
parameter_list|(
name|unsigned
name|Encoding
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|CallFrameString
parameter_list|(
name|unsigned
name|Encoding
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|ApplePropertyString
parameter_list|(
name|unsigned
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|AtomTypeString
parameter_list|(
name|unsigned
name|Atom
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|GDBIndexEntryKindString
parameter_list|(
name|GDBIndexEntryKind
name|Kind
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|GDBIndexEntryLinkageString
parameter_list|(
name|GDBIndexEntryLinkage
name|Linkage
parameter_list|)
function_decl|;
comment|/// @}
comment|/// \defgroup DwarfConstantsParsing Dwarf constants parsing functions
comment|///
comment|/// These functions map their strings back to the corresponding enumeration
comment|/// value or return 0 if there is none, except for these exceptions:
comment|///
comment|/// \li \a getTag() returns \a DW_TAG_invalid on invalid input.
comment|/// \li \a getVirtuality() returns \a DW_VIRTUALITY_invalid on invalid input.
comment|/// \li \a getMacinfo() returns \a DW_MACINFO_invalid on invalid input.
comment|///
comment|/// @{
name|unsigned
name|getTag
parameter_list|(
name|StringRef
name|TagString
parameter_list|)
function_decl|;
name|unsigned
name|getOperationEncoding
parameter_list|(
name|StringRef
name|OperationEncodingString
parameter_list|)
function_decl|;
name|unsigned
name|getVirtuality
parameter_list|(
name|StringRef
name|VirtualityString
parameter_list|)
function_decl|;
name|unsigned
name|getLanguage
parameter_list|(
name|StringRef
name|LanguageString
parameter_list|)
function_decl|;
name|unsigned
name|getCallingConvention
parameter_list|(
name|StringRef
name|LanguageString
parameter_list|)
function_decl|;
name|unsigned
name|getAttributeEncoding
parameter_list|(
name|StringRef
name|EncodingString
parameter_list|)
function_decl|;
name|unsigned
name|getMacinfo
parameter_list|(
name|StringRef
name|MacinfoString
parameter_list|)
function_decl|;
comment|/// @}
comment|/// \brief Returns the symbolic string representing Val when used as a value
comment|/// for attribute Attr.
specifier|const
name|char
modifier|*
name|AttributeValueString
parameter_list|(
name|uint16_t
name|Attr
parameter_list|,
name|unsigned
name|Val
parameter_list|)
function_decl|;
comment|/// \brief Decsribes an entry of the various gnu_pub* debug sections.
comment|///
comment|/// The gnu_pub* kind looks like:
comment|///
comment|/// 0-3  reserved
comment|/// 4-6  symbol kind
comment|/// 7    0 == global, 1 == static
comment|///
comment|/// A gdb_index descriptor includes the above kind, shifted 24 bits up with the
comment|/// offset of the cu within the debug_info section stored in those 24 bits.
struct|struct
name|PubIndexEntryDescriptor
block|{
name|GDBIndexEntryKind
name|Kind
decl_stmt|;
name|GDBIndexEntryLinkage
name|Linkage
decl_stmt|;
name|PubIndexEntryDescriptor
argument_list|(
argument|GDBIndexEntryKind Kind
argument_list|,
argument|GDBIndexEntryLinkage Linkage
argument_list|)
block|:
name|Kind
argument_list|(
name|Kind
argument_list|)
operator|,
name|Linkage
argument_list|(
argument|Linkage
argument_list|)
block|{}
comment|/* implicit */
name|PubIndexEntryDescriptor
argument_list|(
argument|GDBIndexEntryKind Kind
argument_list|)
operator|:
name|Kind
argument_list|(
name|Kind
argument_list|)
operator|,
name|Linkage
argument_list|(
argument|GIEL_EXTERNAL
argument_list|)
block|{}
name|explicit
name|PubIndexEntryDescriptor
argument_list|(
argument|uint8_t Value
argument_list|)
operator|:
name|Kind
argument_list|(
name|static_cast
operator|<
name|GDBIndexEntryKind
operator|>
operator|(
operator|(
name|Value
operator|&
name|KIND_MASK
operator|)
operator|>>
name|KIND_OFFSET
operator|)
argument_list|)
operator|,
name|Linkage
argument_list|(
argument|static_cast<GDBIndexEntryLinkage>((Value& LINKAGE_MASK)>>                                                   LINKAGE_OFFSET)
argument_list|)
block|{}
name|uint8_t
name|toBits
argument_list|()
block|{
return|return
name|Kind
operator|<<
name|KIND_OFFSET
operator||
name|Linkage
operator|<<
name|LINKAGE_OFFSET
return|;
block|}
name|private
label|:
enum|enum
block|{
name|KIND_OFFSET
init|=
literal|4
block|,
name|KIND_MASK
init|=
literal|7
operator|<<
name|KIND_OFFSET
block|,
name|LINKAGE_OFFSET
init|=
literal|7
block|,
name|LINKAGE_MASK
init|=
literal|1
operator|<<
name|LINKAGE_OFFSET
block|}
enum|;
block|}
struct|;
block|}
comment|// End of namespace dwarf
block|}
end_decl_stmt

begin_comment
comment|// End of namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

