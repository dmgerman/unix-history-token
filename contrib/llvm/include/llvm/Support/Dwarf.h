begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- llvm/Support/Dwarf.h ---Dwarf Constants------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file contains constants used for implementing Dwarf debug support.  For
end_comment

begin_comment
comment|// Details on the Dwarf 3 specfication see DWARF Debugging Information Format
end_comment

begin_comment
comment|// V.3 reference manual http://dwarf.freestandards.org ,
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_SUPPORT_DWARF_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_SUPPORT_DWARF_H
end_define

begin_include
include|#
directive|include
file|"llvm/Support/Compiler.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/DataTypes.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|//===----------------------------------------------------------------------===//
comment|// Debug info constants.
name|enum
name|LLVM_ENUM_INT_TYPE
function|(
name|uint32_t
function|)
block|{
name|LLVMDebugVersion
operator|=
operator|(
literal|12
operator|<<
literal|16
operator|)
operator|,
comment|// Current version of debug information.
name|LLVMDebugVersion11
operator|=
operator|(
literal|11
operator|<<
literal|16
operator|)
operator|,
comment|// Constant for version 11.
name|LLVMDebugVersion10
operator|=
operator|(
literal|10
operator|<<
literal|16
operator|)
operator|,
comment|// Constant for version 10.
name|LLVMDebugVersion9
operator|=
operator|(
literal|9
operator|<<
literal|16
operator|)
operator|,
comment|// Constant for version 9.
name|LLVMDebugVersion8
operator|=
operator|(
literal|8
operator|<<
literal|16
operator|)
operator|,
comment|// Constant for version 8.
name|LLVMDebugVersion7
operator|=
operator|(
literal|7
operator|<<
literal|16
operator|)
operator|,
comment|// Constant for version 7.
name|LLVMDebugVersion6
operator|=
operator|(
literal|6
operator|<<
literal|16
operator|)
operator|,
comment|// Constant for version 6.
name|LLVMDebugVersion5
operator|=
operator|(
literal|5
operator|<<
literal|16
operator|)
operator|,
comment|// Constant for version 5.
name|LLVMDebugVersion4
operator|=
operator|(
literal|4
operator|<<
literal|16
operator|)
operator|,
comment|// Constant for version 4.
name|LLVMDebugVersionMask
operator|=
literal|0xffff0000
comment|// Mask for version number.
block|}
empty_stmt|;
name|namespace
name|dwarf
block|{
comment|//===----------------------------------------------------------------------===//
comment|// Dwarf constants as gleaned from the DWARF Debugging Information Format V.4
comment|// reference manual http://dwarf.freestandards.org.
comment|//
comment|// Do not mix the following two enumerations sets.  DW_TAG_invalid changes the
comment|// enumeration base type.
name|enum
name|LLVMConstants
name|LLVM_ENUM_INT_TYPE
parameter_list|(
name|uint32_t
parameter_list|)
block|{
comment|// llvm mock tags
name|DW_TAG_invalid
operator|=
operator|~
literal|0U
operator|,
comment|// Tag for invalid results.
name|DW_TAG_auto_variable
operator|=
literal|0x100
operator|,
comment|// Tag for local (auto) variables.
name|DW_TAG_arg_variable
operator|=
literal|0x101
operator|,
comment|// Tag for argument variables.
name|DW_TAG_user_base
operator|=
literal|0x1000
operator|,
comment|// Recommended base for user tags.
name|DWARF_VERSION
operator|=
literal|4
operator|,
comment|// Default dwarf version we output.
name|DW_CIE_VERSION
operator|=
literal|1
operator|,
comment|// Common frame information version.
name|DW_PUBTYPES_VERSION
operator|=
literal|2
operator|,
comment|// Section version number for .debug_pubtypes.
name|DW_PUBNAMES_VERSION
operator|=
literal|2
operator|,
comment|// Section version number for .debug_pubnames.
name|DW_ARANGES_VERSION
operator|=
literal|2
comment|// Section version number for .debug_aranges.
block|}
empty_stmt|;
comment|// Special ID values that distinguish a CIE from a FDE in DWARF CFI.
comment|// Not inside an enum because a 64-bit value is needed.
specifier|const
name|uint32_t
name|DW_CIE_ID
init|=
name|UINT32_MAX
decl_stmt|;
specifier|const
name|uint64_t
name|DW64_CIE_ID
init|=
name|UINT64_MAX
decl_stmt|;
name|enum
name|Tag
name|LLVM_ENUM_INT_TYPE
parameter_list|(
name|uint16_t
parameter_list|)
block|{
name|DW_TAG_array_type
operator|=
literal|0x01
operator|,
name|DW_TAG_class_type
operator|=
literal|0x02
operator|,
name|DW_TAG_entry_point
operator|=
literal|0x03
operator|,
name|DW_TAG_enumeration_type
operator|=
literal|0x04
operator|,
name|DW_TAG_formal_parameter
operator|=
literal|0x05
operator|,
name|DW_TAG_imported_declaration
operator|=
literal|0x08
operator|,
name|DW_TAG_label
operator|=
literal|0x0a
operator|,
name|DW_TAG_lexical_block
operator|=
literal|0x0b
operator|,
name|DW_TAG_member
operator|=
literal|0x0d
operator|,
name|DW_TAG_pointer_type
operator|=
literal|0x0f
operator|,
name|DW_TAG_reference_type
operator|=
literal|0x10
operator|,
name|DW_TAG_compile_unit
operator|=
literal|0x11
operator|,
name|DW_TAG_string_type
operator|=
literal|0x12
operator|,
name|DW_TAG_structure_type
operator|=
literal|0x13
operator|,
name|DW_TAG_subroutine_type
operator|=
literal|0x15
operator|,
name|DW_TAG_typedef
operator|=
literal|0x16
operator|,
name|DW_TAG_union_type
operator|=
literal|0x17
operator|,
name|DW_TAG_unspecified_parameters
operator|=
literal|0x18
operator|,
name|DW_TAG_variant
operator|=
literal|0x19
operator|,
name|DW_TAG_common_block
operator|=
literal|0x1a
operator|,
name|DW_TAG_common_inclusion
operator|=
literal|0x1b
operator|,
name|DW_TAG_inheritance
operator|=
literal|0x1c
operator|,
name|DW_TAG_inlined_subroutine
operator|=
literal|0x1d
operator|,
name|DW_TAG_module
operator|=
literal|0x1e
operator|,
name|DW_TAG_ptr_to_member_type
operator|=
literal|0x1f
operator|,
name|DW_TAG_set_type
operator|=
literal|0x20
operator|,
name|DW_TAG_subrange_type
operator|=
literal|0x21
operator|,
name|DW_TAG_with_stmt
operator|=
literal|0x22
operator|,
name|DW_TAG_access_declaration
operator|=
literal|0x23
operator|,
name|DW_TAG_base_type
operator|=
literal|0x24
operator|,
name|DW_TAG_catch_block
operator|=
literal|0x25
operator|,
name|DW_TAG_const_type
operator|=
literal|0x26
operator|,
name|DW_TAG_constant
operator|=
literal|0x27
operator|,
name|DW_TAG_enumerator
operator|=
literal|0x28
operator|,
name|DW_TAG_file_type
operator|=
literal|0x29
operator|,
name|DW_TAG_friend
operator|=
literal|0x2a
operator|,
name|DW_TAG_namelist
operator|=
literal|0x2b
operator|,
name|DW_TAG_namelist_item
operator|=
literal|0x2c
operator|,
name|DW_TAG_packed_type
operator|=
literal|0x2d
operator|,
name|DW_TAG_subprogram
operator|=
literal|0x2e
operator|,
name|DW_TAG_template_type_parameter
operator|=
literal|0x2f
operator|,
name|DW_TAG_template_value_parameter
operator|=
literal|0x30
operator|,
name|DW_TAG_thrown_type
operator|=
literal|0x31
operator|,
name|DW_TAG_try_block
operator|=
literal|0x32
operator|,
name|DW_TAG_variant_part
operator|=
literal|0x33
operator|,
name|DW_TAG_variable
operator|=
literal|0x34
operator|,
name|DW_TAG_volatile_type
operator|=
literal|0x35
operator|,
name|DW_TAG_dwarf_procedure
operator|=
literal|0x36
operator|,
name|DW_TAG_restrict_type
operator|=
literal|0x37
operator|,
name|DW_TAG_interface_type
operator|=
literal|0x38
operator|,
name|DW_TAG_namespace
operator|=
literal|0x39
operator|,
name|DW_TAG_imported_module
operator|=
literal|0x3a
operator|,
name|DW_TAG_unspecified_type
operator|=
literal|0x3b
operator|,
name|DW_TAG_partial_unit
operator|=
literal|0x3c
operator|,
name|DW_TAG_imported_unit
operator|=
literal|0x3d
operator|,
name|DW_TAG_condition
operator|=
literal|0x3f
operator|,
name|DW_TAG_shared_type
operator|=
literal|0x40
operator|,
name|DW_TAG_type_unit
operator|=
literal|0x41
operator|,
name|DW_TAG_rvalue_reference_type
operator|=
literal|0x42
operator|,
name|DW_TAG_template_alias
operator|=
literal|0x43
operator|,
name|DW_TAG_MIPS_loop
operator|=
literal|0x4081
operator|,
name|DW_TAG_format_label
operator|=
literal|0x4101
operator|,
name|DW_TAG_function_template
operator|=
literal|0x4102
operator|,
name|DW_TAG_class_template
operator|=
literal|0x4103
operator|,
name|DW_TAG_GNU_template_template_param
operator|=
literal|0x4106
operator|,
name|DW_TAG_GNU_template_parameter_pack
operator|=
literal|0x4107
operator|,
name|DW_TAG_GNU_formal_parameter_pack
operator|=
literal|0x4108
operator|,
name|DW_TAG_lo_user
operator|=
literal|0x4080
operator|,
name|DW_TAG_APPLE_property
operator|=
literal|0x4200
operator|,
name|DW_TAG_hi_user
operator|=
literal|0xffff
block|}
empty_stmt|;
specifier|inline
name|bool
name|isType
parameter_list|(
name|Tag
name|T
parameter_list|)
block|{
switch|switch
condition|(
name|T
condition|)
block|{
case|case
name|DW_TAG_array_type
case|:
case|case
name|DW_TAG_class_type
case|:
case|case
name|DW_TAG_interface_type
case|:
case|case
name|DW_TAG_enumeration_type
case|:
case|case
name|DW_TAG_pointer_type
case|:
case|case
name|DW_TAG_reference_type
case|:
case|case
name|DW_TAG_rvalue_reference_type
case|:
case|case
name|DW_TAG_string_type
case|:
case|case
name|DW_TAG_structure_type
case|:
case|case
name|DW_TAG_subroutine_type
case|:
case|case
name|DW_TAG_union_type
case|:
case|case
name|DW_TAG_ptr_to_member_type
case|:
case|case
name|DW_TAG_set_type
case|:
case|case
name|DW_TAG_subrange_type
case|:
case|case
name|DW_TAG_base_type
case|:
case|case
name|DW_TAG_const_type
case|:
case|case
name|DW_TAG_file_type
case|:
case|case
name|DW_TAG_packed_type
case|:
case|case
name|DW_TAG_volatile_type
case|:
case|case
name|DW_TAG_typedef
case|:
return|return
name|true
return|;
default|default:
return|return
name|false
return|;
block|}
block|}
name|enum
name|Attribute
name|LLVM_ENUM_INT_TYPE
parameter_list|(
name|uint16_t
parameter_list|)
block|{
comment|// Attributes
name|DW_AT_sibling
operator|=
literal|0x01
operator|,
name|DW_AT_location
operator|=
literal|0x02
operator|,
name|DW_AT_name
operator|=
literal|0x03
operator|,
name|DW_AT_ordering
operator|=
literal|0x09
operator|,
name|DW_AT_byte_size
operator|=
literal|0x0b
operator|,
name|DW_AT_bit_offset
operator|=
literal|0x0c
operator|,
name|DW_AT_bit_size
operator|=
literal|0x0d
operator|,
name|DW_AT_stmt_list
operator|=
literal|0x10
operator|,
name|DW_AT_low_pc
operator|=
literal|0x11
operator|,
name|DW_AT_high_pc
operator|=
literal|0x12
operator|,
name|DW_AT_language
operator|=
literal|0x13
operator|,
name|DW_AT_discr
operator|=
literal|0x15
operator|,
name|DW_AT_discr_value
operator|=
literal|0x16
operator|,
name|DW_AT_visibility
operator|=
literal|0x17
operator|,
name|DW_AT_import
operator|=
literal|0x18
operator|,
name|DW_AT_string_length
operator|=
literal|0x19
operator|,
name|DW_AT_common_reference
operator|=
literal|0x1a
operator|,
name|DW_AT_comp_dir
operator|=
literal|0x1b
operator|,
name|DW_AT_const_value
operator|=
literal|0x1c
operator|,
name|DW_AT_containing_type
operator|=
literal|0x1d
operator|,
name|DW_AT_default_value
operator|=
literal|0x1e
operator|,
name|DW_AT_inline
operator|=
literal|0x20
operator|,
name|DW_AT_is_optional
operator|=
literal|0x21
operator|,
name|DW_AT_lower_bound
operator|=
literal|0x22
operator|,
name|DW_AT_producer
operator|=
literal|0x25
operator|,
name|DW_AT_prototyped
operator|=
literal|0x27
operator|,
name|DW_AT_return_addr
operator|=
literal|0x2a
operator|,
name|DW_AT_start_scope
operator|=
literal|0x2c
operator|,
name|DW_AT_bit_stride
operator|=
literal|0x2e
operator|,
name|DW_AT_upper_bound
operator|=
literal|0x2f
operator|,
name|DW_AT_abstract_origin
operator|=
literal|0x31
operator|,
name|DW_AT_accessibility
operator|=
literal|0x32
operator|,
name|DW_AT_address_class
operator|=
literal|0x33
operator|,
name|DW_AT_artificial
operator|=
literal|0x34
operator|,
name|DW_AT_base_types
operator|=
literal|0x35
operator|,
name|DW_AT_calling_convention
operator|=
literal|0x36
operator|,
name|DW_AT_count
operator|=
literal|0x37
operator|,
name|DW_AT_data_member_location
operator|=
literal|0x38
operator|,
name|DW_AT_decl_column
operator|=
literal|0x39
operator|,
name|DW_AT_decl_file
operator|=
literal|0x3a
operator|,
name|DW_AT_decl_line
operator|=
literal|0x3b
operator|,
name|DW_AT_declaration
operator|=
literal|0x3c
operator|,
name|DW_AT_discr_list
operator|=
literal|0x3d
operator|,
name|DW_AT_encoding
operator|=
literal|0x3e
operator|,
name|DW_AT_external
operator|=
literal|0x3f
operator|,
name|DW_AT_frame_base
operator|=
literal|0x40
operator|,
name|DW_AT_friend
operator|=
literal|0x41
operator|,
name|DW_AT_identifier_case
operator|=
literal|0x42
operator|,
name|DW_AT_macro_info
operator|=
literal|0x43
operator|,
name|DW_AT_namelist_item
operator|=
literal|0x44
operator|,
name|DW_AT_priority
operator|=
literal|0x45
operator|,
name|DW_AT_segment
operator|=
literal|0x46
operator|,
name|DW_AT_specification
operator|=
literal|0x47
operator|,
name|DW_AT_static_link
operator|=
literal|0x48
operator|,
name|DW_AT_type
operator|=
literal|0x49
operator|,
name|DW_AT_use_location
operator|=
literal|0x4a
operator|,
name|DW_AT_variable_parameter
operator|=
literal|0x4b
operator|,
name|DW_AT_virtuality
operator|=
literal|0x4c
operator|,
name|DW_AT_vtable_elem_location
operator|=
literal|0x4d
operator|,
name|DW_AT_allocated
operator|=
literal|0x4e
operator|,
name|DW_AT_associated
operator|=
literal|0x4f
operator|,
name|DW_AT_data_location
operator|=
literal|0x50
operator|,
name|DW_AT_byte_stride
operator|=
literal|0x51
operator|,
name|DW_AT_entry_pc
operator|=
literal|0x52
operator|,
name|DW_AT_use_UTF8
operator|=
literal|0x53
operator|,
name|DW_AT_extension
operator|=
literal|0x54
operator|,
name|DW_AT_ranges
operator|=
literal|0x55
operator|,
name|DW_AT_trampoline
operator|=
literal|0x56
operator|,
name|DW_AT_call_column
operator|=
literal|0x57
operator|,
name|DW_AT_call_file
operator|=
literal|0x58
operator|,
name|DW_AT_call_line
operator|=
literal|0x59
operator|,
name|DW_AT_description
operator|=
literal|0x5a
operator|,
name|DW_AT_binary_scale
operator|=
literal|0x5b
operator|,
name|DW_AT_decimal_scale
operator|=
literal|0x5c
operator|,
name|DW_AT_small
operator|=
literal|0x5d
operator|,
name|DW_AT_decimal_sign
operator|=
literal|0x5e
operator|,
name|DW_AT_digit_count
operator|=
literal|0x5f
operator|,
name|DW_AT_picture_string
operator|=
literal|0x60
operator|,
name|DW_AT_mutable
operator|=
literal|0x61
operator|,
name|DW_AT_threads_scaled
operator|=
literal|0x62
operator|,
name|DW_AT_explicit
operator|=
literal|0x63
operator|,
name|DW_AT_object_pointer
operator|=
literal|0x64
operator|,
name|DW_AT_endianity
operator|=
literal|0x65
operator|,
name|DW_AT_elemental
operator|=
literal|0x66
operator|,
name|DW_AT_pure
operator|=
literal|0x67
operator|,
name|DW_AT_recursive
operator|=
literal|0x68
operator|,
name|DW_AT_signature
operator|=
literal|0x69
operator|,
name|DW_AT_main_subprogram
operator|=
literal|0x6a
operator|,
name|DW_AT_data_bit_offset
operator|=
literal|0x6b
operator|,
name|DW_AT_const_expr
operator|=
literal|0x6c
operator|,
name|DW_AT_enum_class
operator|=
literal|0x6d
operator|,
name|DW_AT_linkage_name
operator|=
literal|0x6e
operator|,
name|DW_AT_lo_user
operator|=
literal|0x2000
operator|,
name|DW_AT_hi_user
operator|=
literal|0x3fff
operator|,
name|DW_AT_MIPS_loop_begin
operator|=
literal|0x2002
operator|,
name|DW_AT_MIPS_tail_loop_begin
operator|=
literal|0x2003
operator|,
name|DW_AT_MIPS_epilog_begin
operator|=
literal|0x2004
operator|,
name|DW_AT_MIPS_loop_unroll_factor
operator|=
literal|0x2005
operator|,
name|DW_AT_MIPS_software_pipeline_depth
operator|=
literal|0x2006
operator|,
name|DW_AT_MIPS_linkage_name
operator|=
literal|0x2007
operator|,
name|DW_AT_MIPS_stride
operator|=
literal|0x2008
operator|,
name|DW_AT_MIPS_abstract_name
operator|=
literal|0x2009
operator|,
name|DW_AT_MIPS_clone_origin
operator|=
literal|0x200a
operator|,
name|DW_AT_MIPS_has_inlines
operator|=
literal|0x200b
operator|,
name|DW_AT_MIPS_stride_byte
operator|=
literal|0x200c
operator|,
name|DW_AT_MIPS_stride_elem
operator|=
literal|0x200d
operator|,
name|DW_AT_MIPS_ptr_dopetype
operator|=
literal|0x200e
operator|,
name|DW_AT_MIPS_allocatable_dopetype
operator|=
literal|0x200f
operator|,
name|DW_AT_MIPS_assumed_shape_dopetype
operator|=
literal|0x2010
operator|,
comment|// This one appears to have only been implemented by Open64 for
comment|// fortran and may conflict with other extensions.
name|DW_AT_MIPS_assumed_size
operator|=
literal|0x2011
operator|,
comment|// GNU extensions
name|DW_AT_sf_names
operator|=
literal|0x2101
operator|,
name|DW_AT_src_info
operator|=
literal|0x2102
operator|,
name|DW_AT_mac_info
operator|=
literal|0x2103
operator|,
name|DW_AT_src_coords
operator|=
literal|0x2104
operator|,
name|DW_AT_body_begin
operator|=
literal|0x2105
operator|,
name|DW_AT_body_end
operator|=
literal|0x2106
operator|,
name|DW_AT_GNU_vector
operator|=
literal|0x2107
operator|,
name|DW_AT_GNU_template_name
operator|=
literal|0x2110
operator|,
name|DW_AT_GNU_odr_signature
operator|=
literal|0x210f
operator|,
comment|// Extensions for Fission proposal.
name|DW_AT_GNU_dwo_name
operator|=
literal|0x2130
operator|,
name|DW_AT_GNU_dwo_id
operator|=
literal|0x2131
operator|,
name|DW_AT_GNU_ranges_base
operator|=
literal|0x2132
operator|,
name|DW_AT_GNU_addr_base
operator|=
literal|0x2133
operator|,
name|DW_AT_GNU_pubnames
operator|=
literal|0x2134
operator|,
name|DW_AT_GNU_pubtypes
operator|=
literal|0x2135
operator|,
comment|// Apple extensions.
name|DW_AT_APPLE_optimized
operator|=
literal|0x3fe1
operator|,
name|DW_AT_APPLE_flags
operator|=
literal|0x3fe2
operator|,
name|DW_AT_APPLE_isa
operator|=
literal|0x3fe3
operator|,
name|DW_AT_APPLE_block
operator|=
literal|0x3fe4
operator|,
name|DW_AT_APPLE_major_runtime_vers
operator|=
literal|0x3fe5
operator|,
name|DW_AT_APPLE_runtime_class
operator|=
literal|0x3fe6
operator|,
name|DW_AT_APPLE_omit_frame_ptr
operator|=
literal|0x3fe7
operator|,
name|DW_AT_APPLE_property_name
operator|=
literal|0x3fe8
operator|,
name|DW_AT_APPLE_property_getter
operator|=
literal|0x3fe9
operator|,
name|DW_AT_APPLE_property_setter
operator|=
literal|0x3fea
operator|,
name|DW_AT_APPLE_property_attribute
operator|=
literal|0x3feb
operator|,
name|DW_AT_APPLE_objc_complete_type
operator|=
literal|0x3fec
operator|,
name|DW_AT_APPLE_property
operator|=
literal|0x3fed
block|}
empty_stmt|;
name|enum
name|Form
name|LLVM_ENUM_INT_TYPE
parameter_list|(
name|uint16_t
parameter_list|)
block|{
comment|// Attribute form encodings
name|DW_FORM_addr
operator|=
literal|0x01
operator|,
name|DW_FORM_block2
operator|=
literal|0x03
operator|,
name|DW_FORM_block4
operator|=
literal|0x04
operator|,
name|DW_FORM_data2
operator|=
literal|0x05
operator|,
name|DW_FORM_data4
operator|=
literal|0x06
operator|,
name|DW_FORM_data8
operator|=
literal|0x07
operator|,
name|DW_FORM_string
operator|=
literal|0x08
operator|,
name|DW_FORM_block
operator|=
literal|0x09
operator|,
name|DW_FORM_block1
operator|=
literal|0x0a
operator|,
name|DW_FORM_data1
operator|=
literal|0x0b
operator|,
name|DW_FORM_flag
operator|=
literal|0x0c
operator|,
name|DW_FORM_sdata
operator|=
literal|0x0d
operator|,
name|DW_FORM_strp
operator|=
literal|0x0e
operator|,
name|DW_FORM_udata
operator|=
literal|0x0f
operator|,
name|DW_FORM_ref_addr
operator|=
literal|0x10
operator|,
name|DW_FORM_ref1
operator|=
literal|0x11
operator|,
name|DW_FORM_ref2
operator|=
literal|0x12
operator|,
name|DW_FORM_ref4
operator|=
literal|0x13
operator|,
name|DW_FORM_ref8
operator|=
literal|0x14
operator|,
name|DW_FORM_ref_udata
operator|=
literal|0x15
operator|,
name|DW_FORM_indirect
operator|=
literal|0x16
operator|,
name|DW_FORM_sec_offset
operator|=
literal|0x17
operator|,
name|DW_FORM_exprloc
operator|=
literal|0x18
operator|,
name|DW_FORM_flag_present
operator|=
literal|0x19
operator|,
name|DW_FORM_ref_sig8
operator|=
literal|0x20
operator|,
comment|// Extensions for Fission proposal
name|DW_FORM_GNU_addr_index
operator|=
literal|0x1f01
operator|,
name|DW_FORM_GNU_str_index
operator|=
literal|0x1f02
block|}
empty_stmt|;
enum|enum
name|LocationAtom
block|{
comment|// Operation encodings
name|DW_OP_addr
init|=
literal|0x03
block|,
name|DW_OP_deref
init|=
literal|0x06
block|,
name|DW_OP_const1u
init|=
literal|0x08
block|,
name|DW_OP_const1s
init|=
literal|0x09
block|,
name|DW_OP_const2u
init|=
literal|0x0a
block|,
name|DW_OP_const2s
init|=
literal|0x0b
block|,
name|DW_OP_const4u
init|=
literal|0x0c
block|,
name|DW_OP_const4s
init|=
literal|0x0d
block|,
name|DW_OP_const8u
init|=
literal|0x0e
block|,
name|DW_OP_const8s
init|=
literal|0x0f
block|,
name|DW_OP_constu
init|=
literal|0x10
block|,
name|DW_OP_consts
init|=
literal|0x11
block|,
name|DW_OP_dup
init|=
literal|0x12
block|,
name|DW_OP_drop
init|=
literal|0x13
block|,
name|DW_OP_over
init|=
literal|0x14
block|,
name|DW_OP_pick
init|=
literal|0x15
block|,
name|DW_OP_swap
init|=
literal|0x16
block|,
name|DW_OP_rot
init|=
literal|0x17
block|,
name|DW_OP_xderef
init|=
literal|0x18
block|,
name|DW_OP_abs
init|=
literal|0x19
block|,
name|DW_OP_and
init|=
literal|0x1a
block|,
name|DW_OP_div
init|=
literal|0x1b
block|,
name|DW_OP_minus
init|=
literal|0x1c
block|,
name|DW_OP_mod
init|=
literal|0x1d
block|,
name|DW_OP_mul
init|=
literal|0x1e
block|,
name|DW_OP_neg
init|=
literal|0x1f
block|,
name|DW_OP_not
init|=
literal|0x20
block|,
name|DW_OP_or
init|=
literal|0x21
block|,
name|DW_OP_plus
init|=
literal|0x22
block|,
name|DW_OP_plus_uconst
init|=
literal|0x23
block|,
name|DW_OP_shl
init|=
literal|0x24
block|,
name|DW_OP_shr
init|=
literal|0x25
block|,
name|DW_OP_shra
init|=
literal|0x26
block|,
name|DW_OP_xor
init|=
literal|0x27
block|,
name|DW_OP_skip
init|=
literal|0x2f
block|,
name|DW_OP_bra
init|=
literal|0x28
block|,
name|DW_OP_eq
init|=
literal|0x29
block|,
name|DW_OP_ge
init|=
literal|0x2a
block|,
name|DW_OP_gt
init|=
literal|0x2b
block|,
name|DW_OP_le
init|=
literal|0x2c
block|,
name|DW_OP_lt
init|=
literal|0x2d
block|,
name|DW_OP_ne
init|=
literal|0x2e
block|,
name|DW_OP_lit0
init|=
literal|0x30
block|,
name|DW_OP_lit1
init|=
literal|0x31
block|,
name|DW_OP_lit2
init|=
literal|0x32
block|,
name|DW_OP_lit3
init|=
literal|0x33
block|,
name|DW_OP_lit4
init|=
literal|0x34
block|,
name|DW_OP_lit5
init|=
literal|0x35
block|,
name|DW_OP_lit6
init|=
literal|0x36
block|,
name|DW_OP_lit7
init|=
literal|0x37
block|,
name|DW_OP_lit8
init|=
literal|0x38
block|,
name|DW_OP_lit9
init|=
literal|0x39
block|,
name|DW_OP_lit10
init|=
literal|0x3a
block|,
name|DW_OP_lit11
init|=
literal|0x3b
block|,
name|DW_OP_lit12
init|=
literal|0x3c
block|,
name|DW_OP_lit13
init|=
literal|0x3d
block|,
name|DW_OP_lit14
init|=
literal|0x3e
block|,
name|DW_OP_lit15
init|=
literal|0x3f
block|,
name|DW_OP_lit16
init|=
literal|0x40
block|,
name|DW_OP_lit17
init|=
literal|0x41
block|,
name|DW_OP_lit18
init|=
literal|0x42
block|,
name|DW_OP_lit19
init|=
literal|0x43
block|,
name|DW_OP_lit20
init|=
literal|0x44
block|,
name|DW_OP_lit21
init|=
literal|0x45
block|,
name|DW_OP_lit22
init|=
literal|0x46
block|,
name|DW_OP_lit23
init|=
literal|0x47
block|,
name|DW_OP_lit24
init|=
literal|0x48
block|,
name|DW_OP_lit25
init|=
literal|0x49
block|,
name|DW_OP_lit26
init|=
literal|0x4a
block|,
name|DW_OP_lit27
init|=
literal|0x4b
block|,
name|DW_OP_lit28
init|=
literal|0x4c
block|,
name|DW_OP_lit29
init|=
literal|0x4d
block|,
name|DW_OP_lit30
init|=
literal|0x4e
block|,
name|DW_OP_lit31
init|=
literal|0x4f
block|,
name|DW_OP_reg0
init|=
literal|0x50
block|,
name|DW_OP_reg1
init|=
literal|0x51
block|,
name|DW_OP_reg2
init|=
literal|0x52
block|,
name|DW_OP_reg3
init|=
literal|0x53
block|,
name|DW_OP_reg4
init|=
literal|0x54
block|,
name|DW_OP_reg5
init|=
literal|0x55
block|,
name|DW_OP_reg6
init|=
literal|0x56
block|,
name|DW_OP_reg7
init|=
literal|0x57
block|,
name|DW_OP_reg8
init|=
literal|0x58
block|,
name|DW_OP_reg9
init|=
literal|0x59
block|,
name|DW_OP_reg10
init|=
literal|0x5a
block|,
name|DW_OP_reg11
init|=
literal|0x5b
block|,
name|DW_OP_reg12
init|=
literal|0x5c
block|,
name|DW_OP_reg13
init|=
literal|0x5d
block|,
name|DW_OP_reg14
init|=
literal|0x5e
block|,
name|DW_OP_reg15
init|=
literal|0x5f
block|,
name|DW_OP_reg16
init|=
literal|0x60
block|,
name|DW_OP_reg17
init|=
literal|0x61
block|,
name|DW_OP_reg18
init|=
literal|0x62
block|,
name|DW_OP_reg19
init|=
literal|0x63
block|,
name|DW_OP_reg20
init|=
literal|0x64
block|,
name|DW_OP_reg21
init|=
literal|0x65
block|,
name|DW_OP_reg22
init|=
literal|0x66
block|,
name|DW_OP_reg23
init|=
literal|0x67
block|,
name|DW_OP_reg24
init|=
literal|0x68
block|,
name|DW_OP_reg25
init|=
literal|0x69
block|,
name|DW_OP_reg26
init|=
literal|0x6a
block|,
name|DW_OP_reg27
init|=
literal|0x6b
block|,
name|DW_OP_reg28
init|=
literal|0x6c
block|,
name|DW_OP_reg29
init|=
literal|0x6d
block|,
name|DW_OP_reg30
init|=
literal|0x6e
block|,
name|DW_OP_reg31
init|=
literal|0x6f
block|,
name|DW_OP_breg0
init|=
literal|0x70
block|,
name|DW_OP_breg1
init|=
literal|0x71
block|,
name|DW_OP_breg2
init|=
literal|0x72
block|,
name|DW_OP_breg3
init|=
literal|0x73
block|,
name|DW_OP_breg4
init|=
literal|0x74
block|,
name|DW_OP_breg5
init|=
literal|0x75
block|,
name|DW_OP_breg6
init|=
literal|0x76
block|,
name|DW_OP_breg7
init|=
literal|0x77
block|,
name|DW_OP_breg8
init|=
literal|0x78
block|,
name|DW_OP_breg9
init|=
literal|0x79
block|,
name|DW_OP_breg10
init|=
literal|0x7a
block|,
name|DW_OP_breg11
init|=
literal|0x7b
block|,
name|DW_OP_breg12
init|=
literal|0x7c
block|,
name|DW_OP_breg13
init|=
literal|0x7d
block|,
name|DW_OP_breg14
init|=
literal|0x7e
block|,
name|DW_OP_breg15
init|=
literal|0x7f
block|,
name|DW_OP_breg16
init|=
literal|0x80
block|,
name|DW_OP_breg17
init|=
literal|0x81
block|,
name|DW_OP_breg18
init|=
literal|0x82
block|,
name|DW_OP_breg19
init|=
literal|0x83
block|,
name|DW_OP_breg20
init|=
literal|0x84
block|,
name|DW_OP_breg21
init|=
literal|0x85
block|,
name|DW_OP_breg22
init|=
literal|0x86
block|,
name|DW_OP_breg23
init|=
literal|0x87
block|,
name|DW_OP_breg24
init|=
literal|0x88
block|,
name|DW_OP_breg25
init|=
literal|0x89
block|,
name|DW_OP_breg26
init|=
literal|0x8a
block|,
name|DW_OP_breg27
init|=
literal|0x8b
block|,
name|DW_OP_breg28
init|=
literal|0x8c
block|,
name|DW_OP_breg29
init|=
literal|0x8d
block|,
name|DW_OP_breg30
init|=
literal|0x8e
block|,
name|DW_OP_breg31
init|=
literal|0x8f
block|,
name|DW_OP_regx
init|=
literal|0x90
block|,
name|DW_OP_fbreg
init|=
literal|0x91
block|,
name|DW_OP_bregx
init|=
literal|0x92
block|,
name|DW_OP_piece
init|=
literal|0x93
block|,
name|DW_OP_deref_size
init|=
literal|0x94
block|,
name|DW_OP_xderef_size
init|=
literal|0x95
block|,
name|DW_OP_nop
init|=
literal|0x96
block|,
name|DW_OP_push_object_address
init|=
literal|0x97
block|,
name|DW_OP_call2
init|=
literal|0x98
block|,
name|DW_OP_call4
init|=
literal|0x99
block|,
name|DW_OP_call_ref
init|=
literal|0x9a
block|,
name|DW_OP_form_tls_address
init|=
literal|0x9b
block|,
name|DW_OP_call_frame_cfa
init|=
literal|0x9c
block|,
name|DW_OP_bit_piece
init|=
literal|0x9d
block|,
name|DW_OP_implicit_value
init|=
literal|0x9e
block|,
name|DW_OP_stack_value
init|=
literal|0x9f
block|,
name|DW_OP_lo_user
init|=
literal|0xe0
block|,
name|DW_OP_hi_user
init|=
literal|0xff
block|,
comment|// Extensions for GNU-style thread-local storage.
name|DW_OP_GNU_push_tls_address
init|=
literal|0xe0
block|,
comment|// Extensions for Fission proposal.
name|DW_OP_GNU_addr_index
init|=
literal|0xfb
block|,
name|DW_OP_GNU_const_index
init|=
literal|0xfc
block|}
enum|;
enum|enum
name|TypeKind
block|{
comment|// Encoding attribute values
name|DW_ATE_address
init|=
literal|0x01
block|,
name|DW_ATE_boolean
init|=
literal|0x02
block|,
name|DW_ATE_complex_float
init|=
literal|0x03
block|,
name|DW_ATE_float
init|=
literal|0x04
block|,
name|DW_ATE_signed
init|=
literal|0x05
block|,
name|DW_ATE_signed_char
init|=
literal|0x06
block|,
name|DW_ATE_unsigned
init|=
literal|0x07
block|,
name|DW_ATE_unsigned_char
init|=
literal|0x08
block|,
name|DW_ATE_imaginary_float
init|=
literal|0x09
block|,
name|DW_ATE_packed_decimal
init|=
literal|0x0a
block|,
name|DW_ATE_numeric_string
init|=
literal|0x0b
block|,
name|DW_ATE_edited
init|=
literal|0x0c
block|,
name|DW_ATE_signed_fixed
init|=
literal|0x0d
block|,
name|DW_ATE_unsigned_fixed
init|=
literal|0x0e
block|,
name|DW_ATE_decimal_float
init|=
literal|0x0f
block|,
name|DW_ATE_UTF
init|=
literal|0x10
block|,
name|DW_ATE_lo_user
init|=
literal|0x80
block|,
name|DW_ATE_hi_user
init|=
literal|0xff
block|}
enum|;
enum|enum
name|DecimalSignEncoding
block|{
comment|// Decimal sign attribute values
name|DW_DS_unsigned
init|=
literal|0x01
block|,
name|DW_DS_leading_overpunch
init|=
literal|0x02
block|,
name|DW_DS_trailing_overpunch
init|=
literal|0x03
block|,
name|DW_DS_leading_separate
init|=
literal|0x04
block|,
name|DW_DS_trailing_separate
init|=
literal|0x05
block|}
enum|;
enum|enum
name|EndianityEncoding
block|{
comment|// Endianity attribute values
name|DW_END_default
init|=
literal|0x00
block|,
name|DW_END_big
init|=
literal|0x01
block|,
name|DW_END_little
init|=
literal|0x02
block|,
name|DW_END_lo_user
init|=
literal|0x40
block|,
name|DW_END_hi_user
init|=
literal|0xff
block|}
enum|;
enum|enum
name|AccessAttribute
block|{
comment|// Accessibility codes
name|DW_ACCESS_public
init|=
literal|0x01
block|,
name|DW_ACCESS_protected
init|=
literal|0x02
block|,
name|DW_ACCESS_private
init|=
literal|0x03
block|}
enum|;
enum|enum
name|VisibilityAttribute
block|{
comment|// Visibility codes
name|DW_VIS_local
init|=
literal|0x01
block|,
name|DW_VIS_exported
init|=
literal|0x02
block|,
name|DW_VIS_qualified
init|=
literal|0x03
block|}
enum|;
enum|enum
name|VirtualityAttribute
block|{
comment|// Virtuality codes
name|DW_VIRTUALITY_none
init|=
literal|0x00
block|,
name|DW_VIRTUALITY_virtual
init|=
literal|0x01
block|,
name|DW_VIRTUALITY_pure_virtual
init|=
literal|0x02
block|}
enum|;
enum|enum
name|SourceLanguage
block|{
comment|// Language names
name|DW_LANG_C89
init|=
literal|0x0001
block|,
name|DW_LANG_C
init|=
literal|0x0002
block|,
name|DW_LANG_Ada83
init|=
literal|0x0003
block|,
name|DW_LANG_C_plus_plus
init|=
literal|0x0004
block|,
name|DW_LANG_Cobol74
init|=
literal|0x0005
block|,
name|DW_LANG_Cobol85
init|=
literal|0x0006
block|,
name|DW_LANG_Fortran77
init|=
literal|0x0007
block|,
name|DW_LANG_Fortran90
init|=
literal|0x0008
block|,
name|DW_LANG_Pascal83
init|=
literal|0x0009
block|,
name|DW_LANG_Modula2
init|=
literal|0x000a
block|,
name|DW_LANG_Java
init|=
literal|0x000b
block|,
name|DW_LANG_C99
init|=
literal|0x000c
block|,
name|DW_LANG_Ada95
init|=
literal|0x000d
block|,
name|DW_LANG_Fortran95
init|=
literal|0x000e
block|,
name|DW_LANG_PLI
init|=
literal|0x000f
block|,
name|DW_LANG_ObjC
init|=
literal|0x0010
block|,
name|DW_LANG_ObjC_plus_plus
init|=
literal|0x0011
block|,
name|DW_LANG_UPC
init|=
literal|0x0012
block|,
name|DW_LANG_D
init|=
literal|0x0013
block|,
name|DW_LANG_Python
init|=
literal|0x0014
block|,
name|DW_LANG_lo_user
init|=
literal|0x8000
block|,
name|DW_LANG_Mips_Assembler
init|=
literal|0x8001
block|,
name|DW_LANG_hi_user
init|=
literal|0xffff
block|}
enum|;
enum|enum
name|CaseSensitivity
block|{
comment|// Identifier case codes
name|DW_ID_case_sensitive
init|=
literal|0x00
block|,
name|DW_ID_up_case
init|=
literal|0x01
block|,
name|DW_ID_down_case
init|=
literal|0x02
block|,
name|DW_ID_case_insensitive
init|=
literal|0x03
block|}
enum|;
enum|enum
name|CallingConvention
block|{
comment|// Calling convention codes
name|DW_CC_normal
init|=
literal|0x01
block|,
name|DW_CC_program
init|=
literal|0x02
block|,
name|DW_CC_nocall
init|=
literal|0x03
block|,
name|DW_CC_lo_user
init|=
literal|0x40
block|,
name|DW_CC_hi_user
init|=
literal|0xff
block|}
enum|;
enum|enum
name|InlineAttribute
block|{
comment|// Inline codes
name|DW_INL_not_inlined
init|=
literal|0x00
block|,
name|DW_INL_inlined
init|=
literal|0x01
block|,
name|DW_INL_declared_not_inlined
init|=
literal|0x02
block|,
name|DW_INL_declared_inlined
init|=
literal|0x03
block|}
enum|;
enum|enum
name|ArrayDimensionOrdering
block|{
comment|// Array ordering
name|DW_ORD_row_major
init|=
literal|0x00
block|,
name|DW_ORD_col_major
init|=
literal|0x01
block|}
enum|;
enum|enum
name|DiscriminantList
block|{
comment|// Discriminant descriptor values
name|DW_DSC_label
init|=
literal|0x00
block|,
name|DW_DSC_range
init|=
literal|0x01
block|}
enum|;
enum|enum
name|LineNumberOps
block|{
comment|// Line Number Standard Opcode Encodings
name|DW_LNS_extended_op
init|=
literal|0x00
block|,
name|DW_LNS_copy
init|=
literal|0x01
block|,
name|DW_LNS_advance_pc
init|=
literal|0x02
block|,
name|DW_LNS_advance_line
init|=
literal|0x03
block|,
name|DW_LNS_set_file
init|=
literal|0x04
block|,
name|DW_LNS_set_column
init|=
literal|0x05
block|,
name|DW_LNS_negate_stmt
init|=
literal|0x06
block|,
name|DW_LNS_set_basic_block
init|=
literal|0x07
block|,
name|DW_LNS_const_add_pc
init|=
literal|0x08
block|,
name|DW_LNS_fixed_advance_pc
init|=
literal|0x09
block|,
name|DW_LNS_set_prologue_end
init|=
literal|0x0a
block|,
name|DW_LNS_set_epilogue_begin
init|=
literal|0x0b
block|,
name|DW_LNS_set_isa
init|=
literal|0x0c
block|}
enum|;
enum|enum
name|LineNumberExtendedOps
block|{
comment|// Line Number Extended Opcode Encodings
name|DW_LNE_end_sequence
init|=
literal|0x01
block|,
name|DW_LNE_set_address
init|=
literal|0x02
block|,
name|DW_LNE_define_file
init|=
literal|0x03
block|,
name|DW_LNE_set_discriminator
init|=
literal|0x04
block|,
name|DW_LNE_lo_user
init|=
literal|0x80
block|,
name|DW_LNE_hi_user
init|=
literal|0xff
block|}
enum|;
enum|enum
name|MacinfoRecordType
block|{
comment|// Macinfo Type Encodings
name|DW_MACINFO_define
init|=
literal|0x01
block|,
name|DW_MACINFO_undef
init|=
literal|0x02
block|,
name|DW_MACINFO_start_file
init|=
literal|0x03
block|,
name|DW_MACINFO_end_file
init|=
literal|0x04
block|,
name|DW_MACINFO_vendor_ext
init|=
literal|0xff
block|}
enum|;
enum|enum
name|CallFrameInfo
block|{
comment|// Call frame instruction encodings
name|DW_CFA_extended
init|=
literal|0x00
block|,
name|DW_CFA_nop
init|=
literal|0x00
block|,
name|DW_CFA_advance_loc
init|=
literal|0x40
block|,
name|DW_CFA_offset
init|=
literal|0x80
block|,
name|DW_CFA_restore
init|=
literal|0xc0
block|,
name|DW_CFA_set_loc
init|=
literal|0x01
block|,
name|DW_CFA_advance_loc1
init|=
literal|0x02
block|,
name|DW_CFA_advance_loc2
init|=
literal|0x03
block|,
name|DW_CFA_advance_loc4
init|=
literal|0x04
block|,
name|DW_CFA_offset_extended
init|=
literal|0x05
block|,
name|DW_CFA_restore_extended
init|=
literal|0x06
block|,
name|DW_CFA_undefined
init|=
literal|0x07
block|,
name|DW_CFA_same_value
init|=
literal|0x08
block|,
name|DW_CFA_register
init|=
literal|0x09
block|,
name|DW_CFA_remember_state
init|=
literal|0x0a
block|,
name|DW_CFA_restore_state
init|=
literal|0x0b
block|,
name|DW_CFA_def_cfa
init|=
literal|0x0c
block|,
name|DW_CFA_def_cfa_register
init|=
literal|0x0d
block|,
name|DW_CFA_def_cfa_offset
init|=
literal|0x0e
block|,
name|DW_CFA_def_cfa_expression
init|=
literal|0x0f
block|,
name|DW_CFA_expression
init|=
literal|0x10
block|,
name|DW_CFA_offset_extended_sf
init|=
literal|0x11
block|,
name|DW_CFA_def_cfa_sf
init|=
literal|0x12
block|,
name|DW_CFA_def_cfa_offset_sf
init|=
literal|0x13
block|,
name|DW_CFA_val_offset
init|=
literal|0x14
block|,
name|DW_CFA_val_offset_sf
init|=
literal|0x15
block|,
name|DW_CFA_val_expression
init|=
literal|0x16
block|,
name|DW_CFA_MIPS_advance_loc8
init|=
literal|0x1d
block|,
name|DW_CFA_GNU_window_save
init|=
literal|0x2d
block|,
name|DW_CFA_GNU_args_size
init|=
literal|0x2e
block|,
name|DW_CFA_lo_user
init|=
literal|0x1c
block|,
name|DW_CFA_hi_user
init|=
literal|0x3f
block|}
enum|;
enum|enum
name|Constants
block|{
comment|// Children flag
name|DW_CHILDREN_no
init|=
literal|0x00
block|,
name|DW_CHILDREN_yes
init|=
literal|0x01
block|,
name|DW_EH_PE_absptr
init|=
literal|0x00
block|,
name|DW_EH_PE_omit
init|=
literal|0xff
block|,
name|DW_EH_PE_uleb128
init|=
literal|0x01
block|,
name|DW_EH_PE_udata2
init|=
literal|0x02
block|,
name|DW_EH_PE_udata4
init|=
literal|0x03
block|,
name|DW_EH_PE_udata8
init|=
literal|0x04
block|,
name|DW_EH_PE_sleb128
init|=
literal|0x09
block|,
name|DW_EH_PE_sdata2
init|=
literal|0x0A
block|,
name|DW_EH_PE_sdata4
init|=
literal|0x0B
block|,
name|DW_EH_PE_sdata8
init|=
literal|0x0C
block|,
name|DW_EH_PE_signed
init|=
literal|0x08
block|,
name|DW_EH_PE_pcrel
init|=
literal|0x10
block|,
name|DW_EH_PE_textrel
init|=
literal|0x20
block|,
name|DW_EH_PE_datarel
init|=
literal|0x30
block|,
name|DW_EH_PE_funcrel
init|=
literal|0x40
block|,
name|DW_EH_PE_aligned
init|=
literal|0x50
block|,
name|DW_EH_PE_indirect
init|=
literal|0x80
block|}
enum|;
enum|enum
name|ApplePropertyAttributes
block|{
comment|// Apple Objective-C Property Attributes
name|DW_APPLE_PROPERTY_readonly
init|=
literal|0x01
block|,
name|DW_APPLE_PROPERTY_readwrite
init|=
literal|0x02
block|,
name|DW_APPLE_PROPERTY_assign
init|=
literal|0x04
block|,
name|DW_APPLE_PROPERTY_retain
init|=
literal|0x08
block|,
name|DW_APPLE_PROPERTY_copy
init|=
literal|0x10
block|,
name|DW_APPLE_PROPERTY_nonatomic
init|=
literal|0x20
block|}
enum|;
comment|/// TagString - Return the string for the specified tag.
comment|///
specifier|const
name|char
modifier|*
name|TagString
parameter_list|(
name|unsigned
name|Tag
parameter_list|)
function_decl|;
comment|/// ChildrenString - Return the string for the specified children flag.
comment|///
specifier|const
name|char
modifier|*
name|ChildrenString
parameter_list|(
name|unsigned
name|Children
parameter_list|)
function_decl|;
comment|/// AttributeString - Return the string for the specified attribute.
comment|///
specifier|const
name|char
modifier|*
name|AttributeString
parameter_list|(
name|unsigned
name|Attribute
parameter_list|)
function_decl|;
comment|/// FormEncodingString - Return the string for the specified form encoding.
comment|///
specifier|const
name|char
modifier|*
name|FormEncodingString
parameter_list|(
name|unsigned
name|Encoding
parameter_list|)
function_decl|;
comment|/// OperationEncodingString - Return the string for the specified operation
comment|/// encoding.
specifier|const
name|char
modifier|*
name|OperationEncodingString
parameter_list|(
name|unsigned
name|Encoding
parameter_list|)
function_decl|;
comment|/// AttributeEncodingString - Return the string for the specified attribute
comment|/// encoding.
specifier|const
name|char
modifier|*
name|AttributeEncodingString
parameter_list|(
name|unsigned
name|Encoding
parameter_list|)
function_decl|;
comment|/// DecimalSignString - Return the string for the specified decimal sign
comment|/// attribute.
specifier|const
name|char
modifier|*
name|DecimalSignString
parameter_list|(
name|unsigned
name|Sign
parameter_list|)
function_decl|;
comment|/// EndianityString - Return the string for the specified endianity.
comment|///
specifier|const
name|char
modifier|*
name|EndianityString
parameter_list|(
name|unsigned
name|Endian
parameter_list|)
function_decl|;
comment|/// AccessibilityString - Return the string for the specified accessibility.
comment|///
specifier|const
name|char
modifier|*
name|AccessibilityString
parameter_list|(
name|unsigned
name|Access
parameter_list|)
function_decl|;
comment|/// VisibilityString - Return the string for the specified visibility.
comment|///
specifier|const
name|char
modifier|*
name|VisibilityString
parameter_list|(
name|unsigned
name|Visibility
parameter_list|)
function_decl|;
comment|/// VirtualityString - Return the string for the specified virtuality.
comment|///
specifier|const
name|char
modifier|*
name|VirtualityString
parameter_list|(
name|unsigned
name|Virtuality
parameter_list|)
function_decl|;
comment|/// LanguageString - Return the string for the specified language.
comment|///
specifier|const
name|char
modifier|*
name|LanguageString
parameter_list|(
name|unsigned
name|Language
parameter_list|)
function_decl|;
comment|/// CaseString - Return the string for the specified identifier case.
comment|///
specifier|const
name|char
modifier|*
name|CaseString
parameter_list|(
name|unsigned
name|Case
parameter_list|)
function_decl|;
comment|/// ConventionString - Return the string for the specified calling convention.
comment|///
specifier|const
name|char
modifier|*
name|ConventionString
parameter_list|(
name|unsigned
name|Convention
parameter_list|)
function_decl|;
comment|/// InlineCodeString - Return the string for the specified inline code.
comment|///
specifier|const
name|char
modifier|*
name|InlineCodeString
parameter_list|(
name|unsigned
name|Code
parameter_list|)
function_decl|;
comment|/// ArrayOrderString - Return the string for the specified array order.
comment|///
specifier|const
name|char
modifier|*
name|ArrayOrderString
parameter_list|(
name|unsigned
name|Order
parameter_list|)
function_decl|;
comment|/// DiscriminantString - Return the string for the specified discriminant
comment|/// descriptor.
specifier|const
name|char
modifier|*
name|DiscriminantString
parameter_list|(
name|unsigned
name|Discriminant
parameter_list|)
function_decl|;
comment|/// LNStandardString - Return the string for the specified line number standard.
comment|///
specifier|const
name|char
modifier|*
name|LNStandardString
parameter_list|(
name|unsigned
name|Standard
parameter_list|)
function_decl|;
comment|/// LNExtendedString - Return the string for the specified line number extended
comment|/// opcode encodings.
specifier|const
name|char
modifier|*
name|LNExtendedString
parameter_list|(
name|unsigned
name|Encoding
parameter_list|)
function_decl|;
comment|/// MacinfoString - Return the string for the specified macinfo type encodings.
comment|///
specifier|const
name|char
modifier|*
name|MacinfoString
parameter_list|(
name|unsigned
name|Encoding
parameter_list|)
function_decl|;
comment|/// CallFrameString - Return the string for the specified call frame instruction
comment|/// encodings.
specifier|const
name|char
modifier|*
name|CallFrameString
parameter_list|(
name|unsigned
name|Encoding
parameter_list|)
function_decl|;
comment|// Constants for the DWARF5 Accelerator Table Proposal
enum|enum
name|AcceleratorTable
block|{
comment|// Data layout descriptors.
name|DW_ATOM_null
init|=
literal|0u
block|,
comment|// Marker as the end of a list of atoms.
name|DW_ATOM_die_offset
init|=
literal|1u
block|,
comment|// DIE offset in the debug_info section.
name|DW_ATOM_cu_offset
init|=
literal|2u
block|,
comment|// Offset of the compile unit header that contains the
comment|// item in question.
name|DW_ATOM_die_tag
init|=
literal|3u
block|,
comment|// A tag entry.
name|DW_ATOM_type_flags
init|=
literal|4u
block|,
comment|// Set of flags for a type.
comment|// DW_ATOM_type_flags values.
comment|// Always set for C++, only set for ObjC if this is the @implementation for a
comment|// class.
name|DW_FLAG_type_implementation
init|=
literal|2u
block|,
comment|// Hash functions.
comment|// Daniel J. Bernstein hash.
name|DW_hash_function_djb
init|=
literal|0u
block|}
enum|;
comment|/// AtomTypeString - Return the string for the specified Atom type.
specifier|const
name|char
modifier|*
name|AtomTypeString
parameter_list|(
name|unsigned
name|Atom
parameter_list|)
function_decl|;
comment|// Constants for the GNU pubnames/pubtypes extensions supporting gdb index.
enum|enum
name|GDBIndexEntryKind
block|{
name|GIEK_NONE
block|,
name|GIEK_TYPE
block|,
name|GIEK_VARIABLE
block|,
name|GIEK_FUNCTION
block|,
name|GIEK_OTHER
block|,
name|GIEK_UNUSED5
block|,
name|GIEK_UNUSED6
block|,
name|GIEK_UNUSED7
block|}
enum|;
specifier|const
name|char
modifier|*
name|GDBIndexEntryKindString
parameter_list|(
name|GDBIndexEntryKind
name|Kind
parameter_list|)
function_decl|;
enum|enum
name|GDBIndexEntryLinkage
block|{
name|GIEL_EXTERNAL
block|,
name|GIEL_STATIC
block|}
enum|;
specifier|const
name|char
modifier|*
name|GDBIndexEntryLinkageString
parameter_list|(
name|GDBIndexEntryLinkage
name|Linkage
parameter_list|)
function_decl|;
comment|/// The gnu_pub* kind looks like:
comment|///
comment|/// 0-3  reserved
comment|/// 4-6  symbol kind
comment|/// 7    0 == global, 1 == static
comment|///
comment|/// A gdb_index descriptor includes the above kind, shifted 24 bits up with the
comment|/// offset of the cu within the debug_info section stored in those 24 bits.
struct|struct
name|PubIndexEntryDescriptor
block|{
name|GDBIndexEntryKind
name|Kind
decl_stmt|;
name|GDBIndexEntryLinkage
name|Linkage
decl_stmt|;
name|PubIndexEntryDescriptor
argument_list|(
argument|GDBIndexEntryKind Kind
argument_list|,
argument|GDBIndexEntryLinkage Linkage
argument_list|)
block|:
name|Kind
argument_list|(
name|Kind
argument_list|)
operator|,
name|Linkage
argument_list|(
argument|Linkage
argument_list|)
block|{}
comment|/* implicit */
name|PubIndexEntryDescriptor
argument_list|(
argument|GDBIndexEntryKind Kind
argument_list|)
operator|:
name|Kind
argument_list|(
name|Kind
argument_list|)
operator|,
name|Linkage
argument_list|(
argument|GIEL_EXTERNAL
argument_list|)
block|{}
name|explicit
name|PubIndexEntryDescriptor
argument_list|(
argument|uint8_t Value
argument_list|)
operator|:
name|Kind
argument_list|(
name|static_cast
operator|<
name|GDBIndexEntryKind
operator|>
operator|(
operator|(
name|Value
operator|&
name|KIND_MASK
operator|)
operator|>>
name|KIND_OFFSET
operator|)
argument_list|)
operator|,
name|Linkage
argument_list|(
argument|static_cast<GDBIndexEntryLinkage>((Value& LINKAGE_MASK)>>                                                   LINKAGE_OFFSET)
argument_list|)
block|{}
name|uint8_t
name|toBits
argument_list|()
block|{
return|return
name|Kind
operator|<<
name|KIND_OFFSET
operator||
name|Linkage
operator|<<
name|LINKAGE_OFFSET
return|;
block|}
name|private
label|:
enum|enum
block|{
name|KIND_OFFSET
init|=
literal|4
block|,
name|KIND_MASK
init|=
literal|7
operator|<<
name|KIND_OFFSET
block|,
name|LINKAGE_OFFSET
init|=
literal|7
block|,
name|LINKAGE_MASK
init|=
literal|1
operator|<<
name|LINKAGE_OFFSET
block|}
enum|;
block|}
struct|;
block|}
comment|// End of namespace dwarf
block|}
end_decl_stmt

begin_comment
comment|// End of namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

