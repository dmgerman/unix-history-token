begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- FormatVariadicDetails.h - Helpers for FormatVariadic.h ----*- C++-*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_SUPPORT_FORMATVARIADIC_DETAILS_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_SUPPORT_FORMATVARIADIC_DETAILS_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/raw_ostream.h"
end_include

begin_include
include|#
directive|include
file|<type_traits>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Enable
operator|=
name|void
operator|>
expr|struct
name|format_provider
block|{}
expr_stmt|;
name|namespace
name|detail
block|{
name|class
name|format_adapter
block|{
name|protected
label|:
name|virtual
operator|~
name|format_adapter
argument_list|()
block|{}
name|public
operator|:
name|virtual
name|void
name|format
argument_list|(
argument|raw_ostream&S
argument_list|,
argument|StringRef Options
argument_list|)
operator|=
literal|0
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|provider_format_adapter
operator|:
name|public
name|format_adapter
block|{
name|T
name|Item
block|;
name|public
operator|:
name|explicit
name|provider_format_adapter
argument_list|(
name|T
operator|&&
name|Item
argument_list|)
operator|:
name|Item
argument_list|(
argument|Item
argument_list|)
block|{}
name|void
name|format
argument_list|(
argument|llvm::raw_ostream&S
argument_list|,
argument|StringRef Options
argument_list|)
name|override
block|{
name|format_provider
operator|<
name|typename
name|std
operator|::
name|decay
operator|<
name|T
operator|>
operator|::
name|type
operator|>
operator|::
name|format
argument_list|(
name|Item
argument_list|,
name|S
argument_list|,
name|Options
argument_list|)
block|;   }
block|}
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|missing_format_adapter
expr_stmt|;
comment|// Test if format_provider<T> is defined on T and contains a member function
comment|// with the signature:
comment|//   static void format(const T&, raw_stream&, StringRef);
comment|//
name|template
operator|<
name|class
name|T
operator|>
name|class
name|has_FormatProvider
block|{
name|public
operator|:
name|using
name|Decayed
operator|=
name|typename
name|std
operator|::
name|decay
operator|<
name|T
operator|>
operator|::
name|type
block|;
typedef|typedef
name|void
argument_list|(
operator|*
name|Signature_format
argument_list|)
argument_list|(
specifier|const
name|Decayed
operator|&
argument_list|,
name|llvm
operator|::
name|raw_ostream
operator|&
argument_list|,
name|StringRef
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|U
operator|>
specifier|static
name|char
name|test
argument_list|(
name|SameType
operator|<
name|Signature_format
argument_list|,
operator|&
name|U
operator|::
name|format
operator|>
operator|*
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|U
operator|>
specifier|static
name|double
name|test
argument_list|(
operator|...
argument_list|)
expr_stmt|;
specifier|static
name|bool
specifier|const
name|value
init|=
operator|(
sizeof|sizeof
argument_list|(
name|test
operator|<
name|llvm
operator|::
name|format_provider
operator|<
name|Decayed
operator|>>
operator|(
name|nullptr
operator|)
argument_list|)
operator|==
literal|1
operator|)
decl_stmt|;
block|}
empty_stmt|;
comment|// Simple template that decides whether a type T should use the member-function
comment|// based format() invocation.
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|uses_format_member
operator|:
name|public
name|std
operator|::
name|integral_constant
operator|<
name|bool
operator|,
name|std
operator|::
name|is_base_of
operator|<
name|format_adapter
operator|,
name|typename
name|std
operator|::
name|remove_reference
operator|<
name|T
operator|>
operator|::
name|type
operator|>
operator|::
name|value
operator|>
block|{}
expr_stmt|;
comment|// Simple template that decides whether a type T should use the format_provider
comment|// based format() invocation.  The member function takes priority, so this test
comment|// will only be true if there is not ALSO a format member.
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|uses_format_provider
operator|:
name|public
name|std
operator|::
name|integral_constant
operator|<
name|bool
operator|,
operator|!
name|uses_format_member
operator|<
name|T
operator|>
operator|::
name|value
operator|&&
name|has_FormatProvider
operator|<
name|T
operator|>
operator|::
name|value
operator|>
block|{ }
expr_stmt|;
comment|// Simple template that decides whether a type T has neither a member-function
comment|// nor format_provider based implementation that it can use.  Mostly used so
comment|// that the compiler spits out a nice diagnostic when a type with no format
comment|// implementation can be located.
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|uses_missing_provider
operator|:
name|public
name|std
operator|::
name|integral_constant
operator|<
name|bool
operator|,
operator|!
name|uses_format_member
operator|<
name|T
operator|>
operator|::
name|value
operator|&&
operator|!
name|uses_format_provider
operator|<
name|T
operator|>
operator|::
name|value
operator|>
block|{}
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
name|typename
name|std
operator|::
name|enable_if
operator|<
name|uses_format_member
operator|<
name|T
operator|>
operator|::
name|value
operator|,
name|T
operator|>
operator|::
name|type
name|build_format_adapter
argument_list|(
argument|T&&Item
argument_list|)
block|{
return|return
name|std
operator|::
name|forward
operator|<
name|T
operator|>
operator|(
name|Item
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|typename
name|std
operator|::
name|enable_if
operator|<
name|uses_format_provider
operator|<
name|T
operator|>
operator|::
name|value
operator|,
name|provider_format_adapter
operator|<
name|T
operator|>>
operator|::
name|type
name|build_format_adapter
argument_list|(
argument|T&&Item
argument_list|)
block|{
return|return
name|provider_format_adapter
operator|<
name|T
operator|>
operator|(
name|std
operator|::
name|forward
operator|<
name|T
operator|>
operator|(
name|Item
operator|)
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|typename
name|std
operator|::
name|enable_if
operator|<
name|uses_missing_provider
operator|<
name|T
operator|>
operator|::
name|value
operator|,
name|missing_format_adapter
operator|<
name|T
operator|>>
operator|::
name|type
name|build_format_adapter
argument_list|(
argument|T&&Item
argument_list|)
block|{
return|return
name|missing_format_adapter
operator|<
name|T
operator|>
operator|(
operator|)
return|;
block|}
block|}
end_decl_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

end_unit

