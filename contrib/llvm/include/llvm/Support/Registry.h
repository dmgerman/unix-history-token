begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//=== Registry.h - Linker-supported plugin registries -----------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Defines a registry template for discovering pluggable modules.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_SUPPORT_REGISTRY_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_SUPPORT_REGISTRY_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/STLExtras.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/iterator_range.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Compiler.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/DynamicLibrary.h"
end_include

begin_include
include|#
directive|include
file|<memory>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|/// A simple registry entry which provides only a name, description, and
comment|/// no-argument constructor.
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|SimpleRegistryEntry
block|{
specifier|const
name|char
operator|*
name|Name
block|,
operator|*
name|Desc
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|T
operator|>
call|(
modifier|*
name|Ctor
call|)
argument_list|()
block|;
name|public
operator|:
name|SimpleRegistryEntry
argument_list|(
specifier|const
name|char
operator|*
name|N
argument_list|,
specifier|const
name|char
operator|*
name|D
argument_list|,
name|std
operator|::
name|unique_ptr
operator|<
name|T
operator|>
call|(
modifier|*
name|C
call|)
argument_list|()
argument_list|)
operator|:
name|Name
argument_list|(
name|N
argument_list|)
block|,
name|Desc
argument_list|(
name|D
argument_list|)
block|,
name|Ctor
argument_list|(
argument|C
argument_list|)
block|{}
specifier|const
name|char
operator|*
name|getName
argument_list|()
specifier|const
block|{
return|return
name|Name
return|;
block|}
specifier|const
name|char
operator|*
name|getDesc
argument_list|()
specifier|const
block|{
return|return
name|Desc
return|;
block|}
name|std
operator|::
name|unique_ptr
operator|<
name|T
operator|>
name|instantiate
argument_list|()
specifier|const
block|{
return|return
name|Ctor
argument_list|()
return|;
block|}
expr|}
block|;
comment|/// A global registry used in conjunction with static constructors to make
comment|/// pluggable components (like targets or garbage collectors) "just work" when
comment|/// linked with an executable.
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|Registry
block|{
name|public
operator|:
typedef|typedef
name|SimpleRegistryEntry
operator|<
name|T
operator|>
name|entry
expr_stmt|;
name|class
name|node
block|;
name|class
name|iterator
block|;
name|private
operator|:
name|Registry
argument_list|()
operator|=
name|delete
block|;
name|friend
name|class
name|node
block|;
specifier|static
name|node
operator|*
name|Head
block|,
operator|*
name|Tail
block|;
name|public
operator|:
comment|/// Node in linked list of entries.
comment|///
name|class
name|node
block|{
name|friend
name|class
name|iterator
block|;
name|friend
name|Registry
operator|<
name|T
operator|>
block|;
name|node
operator|*
name|Next
block|;
specifier|const
name|entry
operator|&
name|Val
block|;
name|public
operator|:
name|node
argument_list|(
specifier|const
name|entry
operator|&
name|V
argument_list|)
operator|:
name|Next
argument_list|(
name|nullptr
argument_list|)
block|,
name|Val
argument_list|(
argument|V
argument_list|)
block|{}
block|}
block|;
specifier|static
name|void
name|add_node
argument_list|(
argument|node *N
argument_list|)
block|{
if|if
condition|(
name|Tail
condition|)
name|Tail
operator|->
name|Next
operator|=
name|N
expr_stmt|;
else|else
name|Head
operator|=
name|N
expr_stmt|;
name|Tail
operator|=
name|N
block|;     }
comment|/// Iterators for registry entries.
comment|///
name|class
name|iterator
block|{
specifier|const
name|node
operator|*
name|Cur
block|;
name|public
operator|:
name|explicit
name|iterator
argument_list|(
specifier|const
name|node
operator|*
name|N
argument_list|)
operator|:
name|Cur
argument_list|(
argument|N
argument_list|)
block|{}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|iterator
operator|&
name|That
operator|)
specifier|const
block|{
return|return
name|Cur
operator|==
name|That
operator|.
name|Cur
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|iterator
operator|&
name|That
operator|)
specifier|const
block|{
return|return
name|Cur
operator|!=
name|That
operator|.
name|Cur
return|;
block|}
name|iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|Cur
operator|=
name|Cur
operator|->
name|Next
block|;
return|return
operator|*
name|this
return|;
block|}
specifier|const
name|entry
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|Cur
operator|->
name|Val
return|;
block|}
specifier|const
name|entry
operator|*
name|operator
operator|->
expr|(
block|)
specifier|const
block|{
return|return
operator|&
name|Cur
operator|->
name|Val
return|;
block|}
block|}
empty_stmt|;
specifier|static
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|iterator
argument_list|(
name|Head
argument_list|)
return|;
block|}
specifier|static
name|iterator
name|end
parameter_list|()
block|{
return|return
name|iterator
argument_list|(
name|nullptr
argument_list|)
return|;
block|}
specifier|static
name|iterator_range
operator|<
name|iterator
operator|>
name|entries
argument_list|()
block|{
return|return
name|make_range
argument_list|(
name|begin
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|)
return|;
block|}
comment|/// A static registration template. Use like such:
comment|///
comment|///   Registry<Collector>::Add<FancyGC>
comment|///   X("fancy-gc", "Newfangled garbage collector.");
comment|///
comment|/// Use of this template requires that:
comment|///
comment|///  1. The registered subclass has a default constructor.
name|template
operator|<
name|typename
name|V
operator|>
name|class
name|Add
block|{
name|entry
name|Entry
block|;
name|node
name|Node
block|;
specifier|static
name|std
operator|::
name|unique_ptr
operator|<
name|T
operator|>
name|CtorFn
argument_list|()
block|{
return|return
name|make_unique
operator|<
name|V
operator|>
operator|(
operator|)
return|;
block|}
name|public
operator|:
name|Add
argument_list|(
specifier|const
name|char
operator|*
name|Name
argument_list|,
specifier|const
name|char
operator|*
name|Desc
argument_list|)
operator|:
name|Entry
argument_list|(
name|Name
argument_list|,
name|Desc
argument_list|,
name|CtorFn
argument_list|)
block|,
name|Node
argument_list|(
argument|Entry
argument_list|)
block|{
name|add_node
argument_list|(
operator|&
name|Node
argument_list|)
block|;       }
block|}
expr_stmt|;
comment|/// A dynamic import facility.  This is used on Windows to
comment|/// import the entries added in the plugin.
specifier|static
name|void
name|import
argument_list|(
name|sys
operator|::
name|DynamicLibrary
operator|&
name|DL
argument_list|,
specifier|const
name|char
operator|*
name|RegistryName
argument_list|)
block|{
typedef|typedef
name|void
modifier|*
function_decl|(
modifier|*
name|GetRegistry
function_decl|)
parameter_list|()
function_decl|;
name|std
operator|::
name|string
name|Name
argument_list|(
literal|"LLVMGetRegistry_"
argument_list|)
expr_stmt|;
name|Name
operator|.
name|append
argument_list|(
name|RegistryName
argument_list|)
expr_stmt|;
name|GetRegistry
name|Getter
init|=
operator|(
name|GetRegistry
operator|)
operator|(
name|intptr_t
operator|)
name|DL
operator|.
name|getAddressOfSymbol
argument_list|(
name|Name
operator|.
name|c_str
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Getter
condition|)
block|{
comment|// Call the getter function in order to get the full copy of the
comment|// registry defined in the plugin DLL, and copy them over to the
comment|// current Registry.
typedef|typedef
name|std
operator|::
name|pair
operator|<
specifier|const
name|node
operator|*
operator|,
specifier|const
name|node
operator|*
operator|>
name|Info
expr_stmt|;
name|Info
modifier|*
name|I
init|=
name|static_cast
operator|<
name|Info
operator|*
operator|>
operator|(
name|Getter
argument_list|()
operator|)
decl_stmt|;
name|iterator
name|begin
parameter_list|(
name|I
operator|->
name|first
parameter_list|)
function_decl|;
name|iterator
name|end
parameter_list|(
name|I
operator|->
name|second
parameter_list|)
function_decl|;
for|for
control|(
operator|++
name|end
init|;
name|begin
operator|!=
name|end
condition|;
operator|++
name|begin
control|)
block|{
comment|// This Node object needs to remain alive for the
comment|// duration of the program.
name|add_node
argument_list|(
argument|new node(*begin)
argument_list|)
empty_stmt|;
block|}
block|}
block|}
comment|/// Retrieve the data to be passed across DLL boundaries when
comment|/// importing registries from another DLL on Windows.
specifier|static
name|void
modifier|*
name|exportRegistry
parameter_list|()
block|{
specifier|static
name|std
operator|::
name|pair
operator|<
specifier|const
name|node
operator|*
operator|,
specifier|const
name|node
operator|*
operator|>
name|Info
argument_list|(
name|Head
argument_list|,
name|Tail
argument_list|)
expr_stmt|;
return|return
operator|&
name|Info
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// Since these are defined in a header file, plugins must be sure to export
end_comment

begin_comment
comment|// these symbols.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|typename
name|Registry
operator|<
name|T
operator|>
operator|::
name|node
operator|*
name|Registry
operator|<
name|T
operator|>
operator|::
name|Head
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|typename
name|Registry
operator|<
name|T
operator|>
operator|::
name|node
operator|*
name|Registry
operator|<
name|T
operator|>
operator|::
name|Tail
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|LLVM_ON_WIN32
end_ifdef

begin_define
define|#
directive|define
name|LLVM_EXPORT_REGISTRY
parameter_list|(
name|REGISTRY_CLASS
parameter_list|)
define|\
value|extern "C" {                                                                 \   __declspec(dllexport) void *__cdecl LLVMGetRegistry_##REGISTRY_CLASS() {     \     return REGISTRY_CLASS::exportRegistry();                                   \   }                                                                            \   }
end_define

begin_define
define|#
directive|define
name|LLVM_IMPORT_REGISTRY
parameter_list|(
name|REGISTRY_CLASS
parameter_list|,
name|DL
parameter_list|)
define|\
value|REGISTRY_CLASS::import(DL, #REGISTRY_CLASS)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|LLVM_EXPORT_REGISTRY
parameter_list|(
name|REGISTRY_CLASS
parameter_list|)
end_define

begin_define
define|#
directive|define
name|LLVM_IMPORT_REGISTRY
parameter_list|(
name|REGISTRY_CLASS
parameter_list|,
name|DL
parameter_list|)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_SUPPORT_REGISTRY_H
end_comment

end_unit

