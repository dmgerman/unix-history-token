begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- llvm/Support/Errc.h - Defines the llvm::errc enum --------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// While std::error_code works OK on all platforms we use, there are some
end_comment

begin_comment
comment|// some problems with std::errc that can be avoided by using our own
end_comment

begin_comment
comment|// enumeration:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// * std::errc is a namespace in some implementations. That meas that ADL
end_comment

begin_comment
comment|//   doesn't work and it is sometimes necessary to write std::make_error_code
end_comment

begin_comment
comment|//   or in templates:
end_comment

begin_comment
comment|//   using std::make_error_code;
end_comment

begin_comment
comment|//   make_error_code(...);
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//   with this enum it is safe to always just use make_error_code.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// * Some implementations define fewer names than others. This header has
end_comment

begin_comment
comment|//   the intersection of all the ones we support.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// * std::errc is just marked with is_error_condition_enum. This means that
end_comment

begin_comment
comment|//   common patters like AnErrorCode == errc::no_such_file_or_directory take
end_comment

begin_comment
comment|//   4 virtual calls instead of two comparisons.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_SUPPORT_ERRC_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_SUPPORT_ERRC_H
end_define

begin_include
include|#
directive|include
file|<system_error>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|enum
name|class
name|errc
block|{
name|argument_list_too_long
operator|=
name|int
argument_list|(
name|std
operator|::
name|errc
operator|::
name|argument_list_too_long
argument_list|)
operator|,
name|argument_out_of_domain
operator|=
name|int
argument_list|(
name|std
operator|::
name|errc
operator|::
name|argument_out_of_domain
argument_list|)
operator|,
name|bad_address
operator|=
name|int
argument_list|(
name|std
operator|::
name|errc
operator|::
name|bad_address
argument_list|)
operator|,
name|bad_file_descriptor
operator|=
name|int
argument_list|(
name|std
operator|::
name|errc
operator|::
name|bad_file_descriptor
argument_list|)
operator|,
name|broken_pipe
operator|=
name|int
argument_list|(
name|std
operator|::
name|errc
operator|::
name|broken_pipe
argument_list|)
operator|,
name|device_or_resource_busy
operator|=
name|int
argument_list|(
name|std
operator|::
name|errc
operator|::
name|device_or_resource_busy
argument_list|)
operator|,
name|directory_not_empty
operator|=
name|int
argument_list|(
name|std
operator|::
name|errc
operator|::
name|directory_not_empty
argument_list|)
operator|,
name|executable_format_error
operator|=
name|int
argument_list|(
name|std
operator|::
name|errc
operator|::
name|executable_format_error
argument_list|)
operator|,
name|file_exists
operator|=
name|int
argument_list|(
name|std
operator|::
name|errc
operator|::
name|file_exists
argument_list|)
operator|,
name|file_too_large
operator|=
name|int
argument_list|(
name|std
operator|::
name|errc
operator|::
name|file_too_large
argument_list|)
operator|,
name|filename_too_long
operator|=
name|int
argument_list|(
name|std
operator|::
name|errc
operator|::
name|filename_too_long
argument_list|)
operator|,
name|function_not_supported
operator|=
name|int
argument_list|(
name|std
operator|::
name|errc
operator|::
name|function_not_supported
argument_list|)
operator|,
name|illegal_byte_sequence
operator|=
name|int
argument_list|(
name|std
operator|::
name|errc
operator|::
name|illegal_byte_sequence
argument_list|)
operator|,
name|inappropriate_io_control_operation
operator|=
name|int
argument_list|(
name|std
operator|::
name|errc
operator|::
name|inappropriate_io_control_operation
argument_list|)
operator|,
name|interrupted
operator|=
name|int
argument_list|(
name|std
operator|::
name|errc
operator|::
name|interrupted
argument_list|)
operator|,
name|invalid_argument
operator|=
name|int
argument_list|(
name|std
operator|::
name|errc
operator|::
name|invalid_argument
argument_list|)
operator|,
name|invalid_seek
operator|=
name|int
argument_list|(
name|std
operator|::
name|errc
operator|::
name|invalid_seek
argument_list|)
operator|,
name|io_error
operator|=
name|int
argument_list|(
name|std
operator|::
name|errc
operator|::
name|io_error
argument_list|)
operator|,
name|is_a_directory
operator|=
name|int
argument_list|(
name|std
operator|::
name|errc
operator|::
name|is_a_directory
argument_list|)
operator|,
name|no_child_process
operator|=
name|int
argument_list|(
name|std
operator|::
name|errc
operator|::
name|no_child_process
argument_list|)
operator|,
name|no_lock_available
operator|=
name|int
argument_list|(
name|std
operator|::
name|errc
operator|::
name|no_lock_available
argument_list|)
operator|,
name|no_space_on_device
operator|=
name|int
argument_list|(
name|std
operator|::
name|errc
operator|::
name|no_space_on_device
argument_list|)
operator|,
name|no_such_device_or_address
operator|=
name|int
argument_list|(
name|std
operator|::
name|errc
operator|::
name|no_such_device_or_address
argument_list|)
operator|,
name|no_such_device
operator|=
name|int
argument_list|(
name|std
operator|::
name|errc
operator|::
name|no_such_device
argument_list|)
operator|,
name|no_such_file_or_directory
operator|=
name|int
argument_list|(
name|std
operator|::
name|errc
operator|::
name|no_such_file_or_directory
argument_list|)
operator|,
name|no_such_process
operator|=
name|int
argument_list|(
name|std
operator|::
name|errc
operator|::
name|no_such_process
argument_list|)
operator|,
name|not_a_directory
operator|=
name|int
argument_list|(
name|std
operator|::
name|errc
operator|::
name|not_a_directory
argument_list|)
operator|,
name|not_enough_memory
operator|=
name|int
argument_list|(
name|std
operator|::
name|errc
operator|::
name|not_enough_memory
argument_list|)
operator|,
name|operation_not_permitted
operator|=
name|int
argument_list|(
name|std
operator|::
name|errc
operator|::
name|operation_not_permitted
argument_list|)
operator|,
name|permission_denied
operator|=
name|int
argument_list|(
name|std
operator|::
name|errc
operator|::
name|permission_denied
argument_list|)
operator|,
name|read_only_file_system
operator|=
name|int
argument_list|(
name|std
operator|::
name|errc
operator|::
name|read_only_file_system
argument_list|)
operator|,
name|resource_deadlock_would_occur
operator|=
name|int
argument_list|(
name|std
operator|::
name|errc
operator|::
name|resource_deadlock_would_occur
argument_list|)
operator|,
name|resource_unavailable_try_again
operator|=
name|int
argument_list|(
name|std
operator|::
name|errc
operator|::
name|resource_unavailable_try_again
argument_list|)
operator|,
name|result_out_of_range
operator|=
name|int
argument_list|(
name|std
operator|::
name|errc
operator|::
name|result_out_of_range
argument_list|)
operator|,
name|too_many_files_open_in_system
operator|=
name|int
argument_list|(
name|std
operator|::
name|errc
operator|::
name|too_many_files_open_in_system
argument_list|)
operator|,
name|too_many_files_open
operator|=
name|int
argument_list|(
name|std
operator|::
name|errc
operator|::
name|too_many_files_open
argument_list|)
operator|,
name|too_many_links
operator|=
name|int
argument_list|(
argument|std::errc::too_many_links
argument_list|)
block|}
empty_stmt|;
specifier|inline
name|std
operator|::
name|error_code
name|make_error_code
argument_list|(
argument|errc E
argument_list|)
block|{
return|return
name|std
operator|::
name|error_code
argument_list|(
name|static_cast
operator|<
name|int
operator|>
operator|(
name|E
operator|)
argument_list|,
name|std
operator|::
name|generic_category
argument_list|()
argument_list|)
return|;
block|}
block|}
end_decl_stmt

begin_comment
comment|// namespace llvm
end_comment

begin_decl_stmt
name|namespace
name|std
block|{
name|template
operator|<
operator|>
expr|struct
name|is_error_code_enum
operator|<
name|llvm
operator|::
name|errc
operator|>
operator|:
name|std
operator|::
name|true_type
block|{}
expr_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

