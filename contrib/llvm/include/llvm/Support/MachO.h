begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- llvm/Support/MachO.h - The MachO file format ------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines manifest constants for the MachO object file format.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_SUPPORT_MACHO_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_SUPPORT_MACHO_H
end_define

begin_include
include|#
directive|include
file|"llvm/Support/Compiler.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/DataTypes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Host.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|MachO
block|{
comment|// Enums from<mach-o/loader.h>
enum_decl|enum :
name|uint32_t
block|{
comment|// Constants for the "magic" field in llvm::MachO::mach_header and
comment|// llvm::MachO::mach_header_64
name|MH_MAGIC
init|=
literal|0xFEEDFACEu
block|,
name|MH_CIGAM
init|=
literal|0xCEFAEDFEu
block|,
name|MH_MAGIC_64
init|=
literal|0xFEEDFACFu
block|,
name|MH_CIGAM_64
init|=
literal|0xCFFAEDFEu
block|,
name|FAT_MAGIC
init|=
literal|0xCAFEBABEu
block|,
name|FAT_CIGAM
init|=
literal|0xBEBAFECAu
block|}
enum_decl|;
enum|enum
name|HeaderFileType
block|{
comment|// Constants for the "filetype" field in llvm::MachO::mach_header and
comment|// llvm::MachO::mach_header_64
name|MH_OBJECT
init|=
literal|0x1u
block|,
name|MH_EXECUTE
init|=
literal|0x2u
block|,
name|MH_FVMLIB
init|=
literal|0x3u
block|,
name|MH_CORE
init|=
literal|0x4u
block|,
name|MH_PRELOAD
init|=
literal|0x5u
block|,
name|MH_DYLIB
init|=
literal|0x6u
block|,
name|MH_DYLINKER
init|=
literal|0x7u
block|,
name|MH_BUNDLE
init|=
literal|0x8u
block|,
name|MH_DYLIB_STUB
init|=
literal|0x9u
block|,
name|MH_DSYM
init|=
literal|0xAu
block|,
name|MH_KEXT_BUNDLE
init|=
literal|0xBu
block|}
enum|;
enum|enum
block|{
comment|// Constant bits for the "flags" field in llvm::MachO::mach_header and
comment|// llvm::MachO::mach_header_64
name|MH_NOUNDEFS
init|=
literal|0x00000001u
block|,
name|MH_INCRLINK
init|=
literal|0x00000002u
block|,
name|MH_DYLDLINK
init|=
literal|0x00000004u
block|,
name|MH_BINDATLOAD
init|=
literal|0x00000008u
block|,
name|MH_PREBOUND
init|=
literal|0x00000010u
block|,
name|MH_SPLIT_SEGS
init|=
literal|0x00000020u
block|,
name|MH_LAZY_INIT
init|=
literal|0x00000040u
block|,
name|MH_TWOLEVEL
init|=
literal|0x00000080u
block|,
name|MH_FORCE_FLAT
init|=
literal|0x00000100u
block|,
name|MH_NOMULTIDEFS
init|=
literal|0x00000200u
block|,
name|MH_NOFIXPREBINDING
init|=
literal|0x00000400u
block|,
name|MH_PREBINDABLE
init|=
literal|0x00000800u
block|,
name|MH_ALLMODSBOUND
init|=
literal|0x00001000u
block|,
name|MH_SUBSECTIONS_VIA_SYMBOLS
init|=
literal|0x00002000u
block|,
name|MH_CANONICAL
init|=
literal|0x00004000u
block|,
name|MH_WEAK_DEFINES
init|=
literal|0x00008000u
block|,
name|MH_BINDS_TO_WEAK
init|=
literal|0x00010000u
block|,
name|MH_ALLOW_STACK_EXECUTION
init|=
literal|0x00020000u
block|,
name|MH_ROOT_SAFE
init|=
literal|0x00040000u
block|,
name|MH_SETUID_SAFE
init|=
literal|0x00080000u
block|,
name|MH_NO_REEXPORTED_DYLIBS
init|=
literal|0x00100000u
block|,
name|MH_PIE
init|=
literal|0x00200000u
block|,
name|MH_DEAD_STRIPPABLE_DYLIB
init|=
literal|0x00400000u
block|,
name|MH_HAS_TLV_DESCRIPTORS
init|=
literal|0x00800000u
block|,
name|MH_NO_HEAP_EXECUTION
init|=
literal|0x01000000u
block|,
name|MH_APP_EXTENSION_SAFE
init|=
literal|0x02000000u
block|}
enum|;
enum_decl|enum :
name|uint32_t
block|{
comment|// Flags for the "cmd" field in llvm::MachO::load_command
name|LC_REQ_DYLD
init|=
literal|0x80000000u
block|}
enum_decl|;
enum|enum
name|LoadCommandType
enum|:
name|uint32_t
block|{
comment|// Constants for the "cmd" field in llvm::MachO::load_command
name|LC_SEGMENT
init|=
literal|0x00000001u
block|,
name|LC_SYMTAB
init|=
literal|0x00000002u
block|,
name|LC_SYMSEG
init|=
literal|0x00000003u
block|,
name|LC_THREAD
init|=
literal|0x00000004u
block|,
name|LC_UNIXTHREAD
init|=
literal|0x00000005u
block|,
name|LC_LOADFVMLIB
init|=
literal|0x00000006u
block|,
name|LC_IDFVMLIB
init|=
literal|0x00000007u
block|,
name|LC_IDENT
init|=
literal|0x00000008u
block|,
name|LC_FVMFILE
init|=
literal|0x00000009u
block|,
name|LC_PREPAGE
init|=
literal|0x0000000Au
block|,
name|LC_DYSYMTAB
init|=
literal|0x0000000Bu
block|,
name|LC_LOAD_DYLIB
init|=
literal|0x0000000Cu
block|,
name|LC_ID_DYLIB
init|=
literal|0x0000000Du
block|,
name|LC_LOAD_DYLINKER
init|=
literal|0x0000000Eu
block|,
name|LC_ID_DYLINKER
init|=
literal|0x0000000Fu
block|,
name|LC_PREBOUND_DYLIB
init|=
literal|0x00000010u
block|,
name|LC_ROUTINES
init|=
literal|0x00000011u
block|,
name|LC_SUB_FRAMEWORK
init|=
literal|0x00000012u
block|,
name|LC_SUB_UMBRELLA
init|=
literal|0x00000013u
block|,
name|LC_SUB_CLIENT
init|=
literal|0x00000014u
block|,
name|LC_SUB_LIBRARY
init|=
literal|0x00000015u
block|,
name|LC_TWOLEVEL_HINTS
init|=
literal|0x00000016u
block|,
name|LC_PREBIND_CKSUM
init|=
literal|0x00000017u
block|,
name|LC_LOAD_WEAK_DYLIB
init|=
literal|0x80000018u
block|,
name|LC_SEGMENT_64
init|=
literal|0x00000019u
block|,
name|LC_ROUTINES_64
init|=
literal|0x0000001Au
block|,
name|LC_UUID
init|=
literal|0x0000001Bu
block|,
name|LC_RPATH
init|=
literal|0x8000001Cu
block|,
name|LC_CODE_SIGNATURE
init|=
literal|0x0000001Du
block|,
name|LC_SEGMENT_SPLIT_INFO
init|=
literal|0x0000001Eu
block|,
name|LC_REEXPORT_DYLIB
init|=
literal|0x8000001Fu
block|,
name|LC_LAZY_LOAD_DYLIB
init|=
literal|0x00000020u
block|,
name|LC_ENCRYPTION_INFO
init|=
literal|0x00000021u
block|,
name|LC_DYLD_INFO
init|=
literal|0x00000022u
block|,
name|LC_DYLD_INFO_ONLY
init|=
literal|0x80000022u
block|,
name|LC_LOAD_UPWARD_DYLIB
init|=
literal|0x80000023u
block|,
name|LC_VERSION_MIN_MACOSX
init|=
literal|0x00000024u
block|,
name|LC_VERSION_MIN_IPHONEOS
init|=
literal|0x00000025u
block|,
name|LC_FUNCTION_STARTS
init|=
literal|0x00000026u
block|,
name|LC_DYLD_ENVIRONMENT
init|=
literal|0x00000027u
block|,
name|LC_MAIN
init|=
literal|0x80000028u
block|,
name|LC_DATA_IN_CODE
init|=
literal|0x00000029u
block|,
name|LC_SOURCE_VERSION
init|=
literal|0x0000002Au
block|,
name|LC_DYLIB_CODE_SIGN_DRS
init|=
literal|0x0000002Bu
block|,
name|LC_ENCRYPTION_INFO_64
init|=
literal|0x0000002Cu
block|,
name|LC_LINKER_OPTION
init|=
literal|0x0000002Du
block|,
name|LC_LINKER_OPTIMIZATION_HINT
init|=
literal|0x0000002Eu
block|,
name|LC_VERSION_MIN_TVOS
init|=
literal|0x0000002Fu
block|,
name|LC_VERSION_MIN_WATCHOS
init|=
literal|0x00000030u
block|,     }
enum|;
enum_decl|enum :
name|uint32_t
block|{
comment|// Constant bits for the "flags" field in llvm::MachO::segment_command
name|SG_HIGHVM
init|=
literal|0x1u
block|,
name|SG_FVMLIB
init|=
literal|0x2u
block|,
name|SG_NORELOC
init|=
literal|0x4u
block|,
name|SG_PROTECTED_VERSION_1
init|=
literal|0x8u
block|,
comment|// Constant masks for the "flags" field in llvm::MachO::section and
comment|// llvm::MachO::section_64
name|SECTION_TYPE
init|=
literal|0x000000ffu
block|,
comment|// SECTION_TYPE
name|SECTION_ATTRIBUTES
init|=
literal|0xffffff00u
block|,
comment|// SECTION_ATTRIBUTES
name|SECTION_ATTRIBUTES_USR
init|=
literal|0xff000000u
block|,
comment|// SECTION_ATTRIBUTES_USR
name|SECTION_ATTRIBUTES_SYS
init|=
literal|0x00ffff00u
comment|// SECTION_ATTRIBUTES_SYS
block|}
enum_decl|;
comment|/// These are the section type and attributes fields.  A MachO section can
comment|/// have only one Type, but can have any of the attributes specified.
enum|enum
name|SectionType
enum|:
name|uint32_t
block|{
comment|// Constant masks for the "flags[7:0]" field in llvm::MachO::section and
comment|// llvm::MachO::section_64 (mask "flags" with SECTION_TYPE)
comment|/// S_REGULAR - Regular section.
name|S_REGULAR
init|=
literal|0x00u
block|,
comment|/// S_ZEROFILL - Zero fill on demand section.
name|S_ZEROFILL
init|=
literal|0x01u
block|,
comment|/// S_CSTRING_LITERALS - Section with literal C strings.
name|S_CSTRING_LITERALS
init|=
literal|0x02u
block|,
comment|/// S_4BYTE_LITERALS - Section with 4 byte literals.
name|S_4BYTE_LITERALS
init|=
literal|0x03u
block|,
comment|/// S_8BYTE_LITERALS - Section with 8 byte literals.
name|S_8BYTE_LITERALS
init|=
literal|0x04u
block|,
comment|/// S_LITERAL_POINTERS - Section with pointers to literals.
name|S_LITERAL_POINTERS
init|=
literal|0x05u
block|,
comment|/// S_NON_LAZY_SYMBOL_POINTERS - Section with non-lazy symbol pointers.
name|S_NON_LAZY_SYMBOL_POINTERS
init|=
literal|0x06u
block|,
comment|/// S_LAZY_SYMBOL_POINTERS - Section with lazy symbol pointers.
name|S_LAZY_SYMBOL_POINTERS
init|=
literal|0x07u
block|,
comment|/// S_SYMBOL_STUBS - Section with symbol stubs, byte size of stub in
comment|/// the Reserved2 field.
name|S_SYMBOL_STUBS
init|=
literal|0x08u
block|,
comment|/// S_MOD_INIT_FUNC_POINTERS - Section with only function pointers for
comment|/// initialization.
name|S_MOD_INIT_FUNC_POINTERS
init|=
literal|0x09u
block|,
comment|/// S_MOD_TERM_FUNC_POINTERS - Section with only function pointers for
comment|/// termination.
name|S_MOD_TERM_FUNC_POINTERS
init|=
literal|0x0au
block|,
comment|/// S_COALESCED - Section contains symbols that are to be coalesced.
name|S_COALESCED
init|=
literal|0x0bu
block|,
comment|/// S_GB_ZEROFILL - Zero fill on demand section (that can be larger than 4
comment|/// gigabytes).
name|S_GB_ZEROFILL
init|=
literal|0x0cu
block|,
comment|/// S_INTERPOSING - Section with only pairs of function pointers for
comment|/// interposing.
name|S_INTERPOSING
init|=
literal|0x0du
block|,
comment|/// S_16BYTE_LITERALS - Section with only 16 byte literals.
name|S_16BYTE_LITERALS
init|=
literal|0x0eu
block|,
comment|/// S_DTRACE_DOF - Section contains DTrace Object Format.
name|S_DTRACE_DOF
init|=
literal|0x0fu
block|,
comment|/// S_LAZY_DYLIB_SYMBOL_POINTERS - Section with lazy symbol pointers to
comment|/// lazy loaded dylibs.
name|S_LAZY_DYLIB_SYMBOL_POINTERS
init|=
literal|0x10u
block|,
comment|/// S_THREAD_LOCAL_REGULAR - Thread local data section.
name|S_THREAD_LOCAL_REGULAR
init|=
literal|0x11u
block|,
comment|/// S_THREAD_LOCAL_ZEROFILL - Thread local zerofill section.
name|S_THREAD_LOCAL_ZEROFILL
init|=
literal|0x12u
block|,
comment|/// S_THREAD_LOCAL_VARIABLES - Section with thread local variable
comment|/// structure data.
name|S_THREAD_LOCAL_VARIABLES
init|=
literal|0x13u
block|,
comment|/// S_THREAD_LOCAL_VARIABLE_POINTERS - Section with pointers to thread
comment|/// local structures.
name|S_THREAD_LOCAL_VARIABLE_POINTERS
init|=
literal|0x14u
block|,
comment|/// S_THREAD_LOCAL_INIT_FUNCTION_POINTERS - Section with thread local
comment|/// variable initialization pointers to functions.
name|S_THREAD_LOCAL_INIT_FUNCTION_POINTERS
init|=
literal|0x15u
block|,
name|LAST_KNOWN_SECTION_TYPE
init|=
name|S_THREAD_LOCAL_INIT_FUNCTION_POINTERS
block|}
enum|;
enum_decl|enum :
name|uint32_t
block|{
comment|// Constant masks for the "flags[31:24]" field in llvm::MachO::section and
comment|// llvm::MachO::section_64 (mask "flags" with SECTION_ATTRIBUTES_USR)
comment|/// S_ATTR_PURE_INSTRUCTIONS - Section contains only true machine
comment|/// instructions.
name|S_ATTR_PURE_INSTRUCTIONS
init|=
literal|0x80000000u
block|,
comment|/// S_ATTR_NO_TOC - Section contains coalesced symbols that are not to be
comment|/// in a ranlib table of contents.
name|S_ATTR_NO_TOC
init|=
literal|0x40000000u
block|,
comment|/// S_ATTR_STRIP_STATIC_SYMS - Ok to strip static symbols in this section
comment|/// in files with the MY_DYLDLINK flag.
name|S_ATTR_STRIP_STATIC_SYMS
init|=
literal|0x20000000u
block|,
comment|/// S_ATTR_NO_DEAD_STRIP - No dead stripping.
name|S_ATTR_NO_DEAD_STRIP
init|=
literal|0x10000000u
block|,
comment|/// S_ATTR_LIVE_SUPPORT - Blocks are live if they reference live blocks.
name|S_ATTR_LIVE_SUPPORT
init|=
literal|0x08000000u
block|,
comment|/// S_ATTR_SELF_MODIFYING_CODE - Used with i386 code stubs written on by
comment|/// dyld.
name|S_ATTR_SELF_MODIFYING_CODE
init|=
literal|0x04000000u
block|,
comment|/// S_ATTR_DEBUG - A debug section.
name|S_ATTR_DEBUG
init|=
literal|0x02000000u
block|,
comment|// Constant masks for the "flags[23:8]" field in llvm::MachO::section and
comment|// llvm::MachO::section_64 (mask "flags" with SECTION_ATTRIBUTES_SYS)
comment|/// S_ATTR_SOME_INSTRUCTIONS - Section contains some machine instructions.
name|S_ATTR_SOME_INSTRUCTIONS
init|=
literal|0x00000400u
block|,
comment|/// S_ATTR_EXT_RELOC - Section has external relocation entries.
name|S_ATTR_EXT_RELOC
init|=
literal|0x00000200u
block|,
comment|/// S_ATTR_LOC_RELOC - Section has local relocation entries.
name|S_ATTR_LOC_RELOC
init|=
literal|0x00000100u
block|,
comment|// Constant masks for the value of an indirect symbol in an indirect
comment|// symbol table
name|INDIRECT_SYMBOL_LOCAL
init|=
literal|0x80000000u
block|,
name|INDIRECT_SYMBOL_ABS
init|=
literal|0x40000000u
block|}
enum_decl|;
enum|enum
name|DataRegionType
block|{
comment|// Constants for the "kind" field in a data_in_code_entry structure
name|DICE_KIND_DATA
init|=
literal|1u
block|,
name|DICE_KIND_JUMP_TABLE8
init|=
literal|2u
block|,
name|DICE_KIND_JUMP_TABLE16
init|=
literal|3u
block|,
name|DICE_KIND_JUMP_TABLE32
init|=
literal|4u
block|,
name|DICE_KIND_ABS_JUMP_TABLE32
init|=
literal|5u
block|}
enum|;
enum|enum
name|RebaseType
block|{
name|REBASE_TYPE_POINTER
init|=
literal|1u
block|,
name|REBASE_TYPE_TEXT_ABSOLUTE32
init|=
literal|2u
block|,
name|REBASE_TYPE_TEXT_PCREL32
init|=
literal|3u
block|}
enum|;
enum|enum
block|{
name|REBASE_OPCODE_MASK
init|=
literal|0xF0u
block|,
name|REBASE_IMMEDIATE_MASK
init|=
literal|0x0Fu
block|}
enum|;
enum|enum
name|RebaseOpcode
block|{
name|REBASE_OPCODE_DONE
init|=
literal|0x00u
block|,
name|REBASE_OPCODE_SET_TYPE_IMM
init|=
literal|0x10u
block|,
name|REBASE_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB
init|=
literal|0x20u
block|,
name|REBASE_OPCODE_ADD_ADDR_ULEB
init|=
literal|0x30u
block|,
name|REBASE_OPCODE_ADD_ADDR_IMM_SCALED
init|=
literal|0x40u
block|,
name|REBASE_OPCODE_DO_REBASE_IMM_TIMES
init|=
literal|0x50u
block|,
name|REBASE_OPCODE_DO_REBASE_ULEB_TIMES
init|=
literal|0x60u
block|,
name|REBASE_OPCODE_DO_REBASE_ADD_ADDR_ULEB
init|=
literal|0x70u
block|,
name|REBASE_OPCODE_DO_REBASE_ULEB_TIMES_SKIPPING_ULEB
init|=
literal|0x80u
block|}
enum|;
enum|enum
name|BindType
block|{
name|BIND_TYPE_POINTER
init|=
literal|1u
block|,
name|BIND_TYPE_TEXT_ABSOLUTE32
init|=
literal|2u
block|,
name|BIND_TYPE_TEXT_PCREL32
init|=
literal|3u
block|}
enum|;
enum|enum
name|BindSpecialDylib
block|{
name|BIND_SPECIAL_DYLIB_SELF
init|=
literal|0
block|,
name|BIND_SPECIAL_DYLIB_MAIN_EXECUTABLE
init|=
operator|-
literal|1
block|,
name|BIND_SPECIAL_DYLIB_FLAT_LOOKUP
init|=
operator|-
literal|2
block|}
enum|;
enum|enum
block|{
name|BIND_SYMBOL_FLAGS_WEAK_IMPORT
init|=
literal|0x1u
block|,
name|BIND_SYMBOL_FLAGS_NON_WEAK_DEFINITION
init|=
literal|0x8u
block|,
name|BIND_OPCODE_MASK
init|=
literal|0xF0u
block|,
name|BIND_IMMEDIATE_MASK
init|=
literal|0x0Fu
block|}
enum|;
enum|enum
name|BindOpcode
block|{
name|BIND_OPCODE_DONE
init|=
literal|0x00u
block|,
name|BIND_OPCODE_SET_DYLIB_ORDINAL_IMM
init|=
literal|0x10u
block|,
name|BIND_OPCODE_SET_DYLIB_ORDINAL_ULEB
init|=
literal|0x20u
block|,
name|BIND_OPCODE_SET_DYLIB_SPECIAL_IMM
init|=
literal|0x30u
block|,
name|BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM
init|=
literal|0x40u
block|,
name|BIND_OPCODE_SET_TYPE_IMM
init|=
literal|0x50u
block|,
name|BIND_OPCODE_SET_ADDEND_SLEB
init|=
literal|0x60u
block|,
name|BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB
init|=
literal|0x70u
block|,
name|BIND_OPCODE_ADD_ADDR_ULEB
init|=
literal|0x80u
block|,
name|BIND_OPCODE_DO_BIND
init|=
literal|0x90u
block|,
name|BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB
init|=
literal|0xA0u
block|,
name|BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED
init|=
literal|0xB0u
block|,
name|BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB
init|=
literal|0xC0u
block|}
enum|;
enum|enum
block|{
name|EXPORT_SYMBOL_FLAGS_KIND_MASK
init|=
literal|0x03u
block|,
name|EXPORT_SYMBOL_FLAGS_WEAK_DEFINITION
init|=
literal|0x04u
block|,
name|EXPORT_SYMBOL_FLAGS_REEXPORT
init|=
literal|0x08u
block|,
name|EXPORT_SYMBOL_FLAGS_STUB_AND_RESOLVER
init|=
literal|0x10u
block|}
enum|;
enum|enum
name|ExportSymbolKind
block|{
name|EXPORT_SYMBOL_FLAGS_KIND_REGULAR
init|=
literal|0x00u
block|,
name|EXPORT_SYMBOL_FLAGS_KIND_THREAD_LOCAL
init|=
literal|0x01u
block|,
name|EXPORT_SYMBOL_FLAGS_KIND_ABSOLUTE
init|=
literal|0x02u
block|}
enum|;
enum|enum
block|{
comment|// Constant masks for the "n_type" field in llvm::MachO::nlist and
comment|// llvm::MachO::nlist_64
name|N_STAB
init|=
literal|0xe0
block|,
name|N_PEXT
init|=
literal|0x10
block|,
name|N_TYPE
init|=
literal|0x0e
block|,
name|N_EXT
init|=
literal|0x01
block|}
enum|;
enum|enum
name|NListType
block|{
comment|// Constants for the "n_type& N_TYPE" llvm::MachO::nlist and
comment|// llvm::MachO::nlist_64
name|N_UNDF
init|=
literal|0x0u
block|,
name|N_ABS
init|=
literal|0x2u
block|,
name|N_SECT
init|=
literal|0xeu
block|,
name|N_PBUD
init|=
literal|0xcu
block|,
name|N_INDR
init|=
literal|0xau
block|}
enum|;
enum|enum
name|SectionOrdinal
block|{
comment|// Constants for the "n_sect" field in llvm::MachO::nlist and
comment|// llvm::MachO::nlist_64
name|NO_SECT
init|=
literal|0u
block|,
name|MAX_SECT
init|=
literal|0xffu
block|}
enum|;
enum|enum
block|{
comment|// Constant masks for the "n_desc" field in llvm::MachO::nlist and
comment|// llvm::MachO::nlist_64
comment|// The low 3 bits are the for the REFERENCE_TYPE.
name|REFERENCE_TYPE
init|=
literal|0x7
block|,
name|REFERENCE_FLAG_UNDEFINED_NON_LAZY
init|=
literal|0
block|,
name|REFERENCE_FLAG_UNDEFINED_LAZY
init|=
literal|1
block|,
name|REFERENCE_FLAG_DEFINED
init|=
literal|2
block|,
name|REFERENCE_FLAG_PRIVATE_DEFINED
init|=
literal|3
block|,
name|REFERENCE_FLAG_PRIVATE_UNDEFINED_NON_LAZY
init|=
literal|4
block|,
name|REFERENCE_FLAG_PRIVATE_UNDEFINED_LAZY
init|=
literal|5
block|,
comment|// Flag bits (some overlap with the library ordinal bits).
name|N_ARM_THUMB_DEF
init|=
literal|0x0008u
block|,
name|REFERENCED_DYNAMICALLY
init|=
literal|0x0010u
block|,
name|N_NO_DEAD_STRIP
init|=
literal|0x0020u
block|,
name|N_WEAK_REF
init|=
literal|0x0040u
block|,
name|N_WEAK_DEF
init|=
literal|0x0080u
block|,
name|N_SYMBOL_RESOLVER
init|=
literal|0x0100u
block|,
name|N_ALT_ENTRY
init|=
literal|0x0200u
block|,
comment|// For undefined symbols coming from libraries, see GET_LIBRARY_ORDINAL()
comment|// as these are in the top 8 bits.
name|SELF_LIBRARY_ORDINAL
init|=
literal|0x0
block|,
name|MAX_LIBRARY_ORDINAL
init|=
literal|0xfd
block|,
name|DYNAMIC_LOOKUP_ORDINAL
init|=
literal|0xfe
block|,
name|EXECUTABLE_ORDINAL
init|=
literal|0xff
block|}
enum|;
enum|enum
name|StabType
block|{
comment|// Constant values for the "n_type" field in llvm::MachO::nlist and
comment|// llvm::MachO::nlist_64 when "(n_type& N_STAB) != 0"
name|N_GSYM
init|=
literal|0x20u
block|,
name|N_FNAME
init|=
literal|0x22u
block|,
name|N_FUN
init|=
literal|0x24u
block|,
name|N_STSYM
init|=
literal|0x26u
block|,
name|N_LCSYM
init|=
literal|0x28u
block|,
name|N_BNSYM
init|=
literal|0x2Eu
block|,
name|N_PC
init|=
literal|0x30u
block|,
name|N_AST
init|=
literal|0x32u
block|,
name|N_OPT
init|=
literal|0x3Cu
block|,
name|N_RSYM
init|=
literal|0x40u
block|,
name|N_SLINE
init|=
literal|0x44u
block|,
name|N_ENSYM
init|=
literal|0x4Eu
block|,
name|N_SSYM
init|=
literal|0x60u
block|,
name|N_SO
init|=
literal|0x64u
block|,
name|N_OSO
init|=
literal|0x66u
block|,
name|N_LSYM
init|=
literal|0x80u
block|,
name|N_BINCL
init|=
literal|0x82u
block|,
name|N_SOL
init|=
literal|0x84u
block|,
name|N_PARAMS
init|=
literal|0x86u
block|,
name|N_VERSION
init|=
literal|0x88u
block|,
name|N_OLEVEL
init|=
literal|0x8Au
block|,
name|N_PSYM
init|=
literal|0xA0u
block|,
name|N_EINCL
init|=
literal|0xA2u
block|,
name|N_ENTRY
init|=
literal|0xA4u
block|,
name|N_LBRAC
init|=
literal|0xC0u
block|,
name|N_EXCL
init|=
literal|0xC2u
block|,
name|N_RBRAC
init|=
literal|0xE0u
block|,
name|N_BCOMM
init|=
literal|0xE2u
block|,
name|N_ECOMM
init|=
literal|0xE4u
block|,
name|N_ECOML
init|=
literal|0xE8u
block|,
name|N_LENG
init|=
literal|0xFEu
block|}
enum|;
enum_decl|enum :
name|uint32_t
block|{
comment|// Constant values for the r_symbolnum field in an
comment|// llvm::MachO::relocation_info structure when r_extern is 0.
name|R_ABS
init|=
literal|0
block|,
comment|// Constant bits for the r_address field in an
comment|// llvm::MachO::relocation_info structure.
name|R_SCATTERED
init|=
literal|0x80000000
block|}
enum_decl|;
enum|enum
name|RelocationInfoType
block|{
comment|// Constant values for the r_type field in an
comment|// llvm::MachO::relocation_info or llvm::MachO::scattered_relocation_info
comment|// structure.
name|GENERIC_RELOC_VANILLA
init|=
literal|0
block|,
name|GENERIC_RELOC_PAIR
init|=
literal|1
block|,
name|GENERIC_RELOC_SECTDIFF
init|=
literal|2
block|,
name|GENERIC_RELOC_PB_LA_PTR
init|=
literal|3
block|,
name|GENERIC_RELOC_LOCAL_SECTDIFF
init|=
literal|4
block|,
name|GENERIC_RELOC_TLV
init|=
literal|5
block|,
comment|// Constant values for the r_type field in a PowerPC architecture
comment|// llvm::MachO::relocation_info or llvm::MachO::scattered_relocation_info
comment|// structure.
name|PPC_RELOC_VANILLA
init|=
name|GENERIC_RELOC_VANILLA
block|,
name|PPC_RELOC_PAIR
init|=
name|GENERIC_RELOC_PAIR
block|,
name|PPC_RELOC_BR14
init|=
literal|2
block|,
name|PPC_RELOC_BR24
init|=
literal|3
block|,
name|PPC_RELOC_HI16
init|=
literal|4
block|,
name|PPC_RELOC_LO16
init|=
literal|5
block|,
name|PPC_RELOC_HA16
init|=
literal|6
block|,
name|PPC_RELOC_LO14
init|=
literal|7
block|,
name|PPC_RELOC_SECTDIFF
init|=
literal|8
block|,
name|PPC_RELOC_PB_LA_PTR
init|=
literal|9
block|,
name|PPC_RELOC_HI16_SECTDIFF
init|=
literal|10
block|,
name|PPC_RELOC_LO16_SECTDIFF
init|=
literal|11
block|,
name|PPC_RELOC_HA16_SECTDIFF
init|=
literal|12
block|,
name|PPC_RELOC_JBSR
init|=
literal|13
block|,
name|PPC_RELOC_LO14_SECTDIFF
init|=
literal|14
block|,
name|PPC_RELOC_LOCAL_SECTDIFF
init|=
literal|15
block|,
comment|// Constant values for the r_type field in an ARM architecture
comment|// llvm::MachO::relocation_info or llvm::MachO::scattered_relocation_info
comment|// structure.
name|ARM_RELOC_VANILLA
init|=
name|GENERIC_RELOC_VANILLA
block|,
name|ARM_RELOC_PAIR
init|=
name|GENERIC_RELOC_PAIR
block|,
name|ARM_RELOC_SECTDIFF
init|=
name|GENERIC_RELOC_SECTDIFF
block|,
name|ARM_RELOC_LOCAL_SECTDIFF
init|=
literal|3
block|,
name|ARM_RELOC_PB_LA_PTR
init|=
literal|4
block|,
name|ARM_RELOC_BR24
init|=
literal|5
block|,
name|ARM_THUMB_RELOC_BR22
init|=
literal|6
block|,
name|ARM_THUMB_32BIT_BRANCH
init|=
literal|7
block|,
comment|// obsolete
name|ARM_RELOC_HALF
init|=
literal|8
block|,
name|ARM_RELOC_HALF_SECTDIFF
init|=
literal|9
block|,
comment|// Constant values for the r_type field in an ARM64 architecture
comment|// llvm::MachO::relocation_info or llvm::MachO::scattered_relocation_info
comment|// structure.
comment|// For pointers.
name|ARM64_RELOC_UNSIGNED
init|=
literal|0
block|,
comment|// Must be followed by an ARM64_RELOC_UNSIGNED
name|ARM64_RELOC_SUBTRACTOR
init|=
literal|1
block|,
comment|// A B/BL instruction with 26-bit displacement.
name|ARM64_RELOC_BRANCH26
init|=
literal|2
block|,
comment|// PC-rel distance to page of target.
name|ARM64_RELOC_PAGE21
init|=
literal|3
block|,
comment|// Offset within page, scaled by r_length.
name|ARM64_RELOC_PAGEOFF12
init|=
literal|4
block|,
comment|// PC-rel distance to page of GOT slot.
name|ARM64_RELOC_GOT_LOAD_PAGE21
init|=
literal|5
block|,
comment|// Offset within page of GOT slot, scaled by r_length.
name|ARM64_RELOC_GOT_LOAD_PAGEOFF12
init|=
literal|6
block|,
comment|// For pointers to GOT slots.
name|ARM64_RELOC_POINTER_TO_GOT
init|=
literal|7
block|,
comment|// PC-rel distance to page of TLVP slot.
name|ARM64_RELOC_TLVP_LOAD_PAGE21
init|=
literal|8
block|,
comment|// Offset within page of TLVP slot, scaled by r_length.
name|ARM64_RELOC_TLVP_LOAD_PAGEOFF12
init|=
literal|9
block|,
comment|// Must be followed by ARM64_RELOC_PAGE21 or ARM64_RELOC_PAGEOFF12.
name|ARM64_RELOC_ADDEND
init|=
literal|10
block|,
comment|// Constant values for the r_type field in an x86_64 architecture
comment|// llvm::MachO::relocation_info or llvm::MachO::scattered_relocation_info
comment|// structure
name|X86_64_RELOC_UNSIGNED
init|=
literal|0
block|,
name|X86_64_RELOC_SIGNED
init|=
literal|1
block|,
name|X86_64_RELOC_BRANCH
init|=
literal|2
block|,
name|X86_64_RELOC_GOT_LOAD
init|=
literal|3
block|,
name|X86_64_RELOC_GOT
init|=
literal|4
block|,
name|X86_64_RELOC_SUBTRACTOR
init|=
literal|5
block|,
name|X86_64_RELOC_SIGNED_1
init|=
literal|6
block|,
name|X86_64_RELOC_SIGNED_2
init|=
literal|7
block|,
name|X86_64_RELOC_SIGNED_4
init|=
literal|8
block|,
name|X86_64_RELOC_TLV
init|=
literal|9
block|}
enum|;
comment|// Values for segment_command.initprot.
comment|// From<mach/vm_prot.h>
enum|enum
block|{
name|VM_PROT_READ
init|=
literal|0x1
block|,
name|VM_PROT_WRITE
init|=
literal|0x2
block|,
name|VM_PROT_EXECUTE
init|=
literal|0x4
block|}
enum|;
comment|// Structs from<mach-o/loader.h>
struct|struct
name|mach_header
block|{
name|uint32_t
name|magic
decl_stmt|;
name|uint32_t
name|cputype
decl_stmt|;
name|uint32_t
name|cpusubtype
decl_stmt|;
name|uint32_t
name|filetype
decl_stmt|;
name|uint32_t
name|ncmds
decl_stmt|;
name|uint32_t
name|sizeofcmds
decl_stmt|;
name|uint32_t
name|flags
decl_stmt|;
block|}
struct|;
struct|struct
name|mach_header_64
block|{
name|uint32_t
name|magic
decl_stmt|;
name|uint32_t
name|cputype
decl_stmt|;
name|uint32_t
name|cpusubtype
decl_stmt|;
name|uint32_t
name|filetype
decl_stmt|;
name|uint32_t
name|ncmds
decl_stmt|;
name|uint32_t
name|sizeofcmds
decl_stmt|;
name|uint32_t
name|flags
decl_stmt|;
name|uint32_t
name|reserved
decl_stmt|;
block|}
struct|;
struct|struct
name|load_command
block|{
name|uint32_t
name|cmd
decl_stmt|;
name|uint32_t
name|cmdsize
decl_stmt|;
block|}
struct|;
struct|struct
name|segment_command
block|{
name|uint32_t
name|cmd
decl_stmt|;
name|uint32_t
name|cmdsize
decl_stmt|;
name|char
name|segname
index|[
literal|16
index|]
decl_stmt|;
name|uint32_t
name|vmaddr
decl_stmt|;
name|uint32_t
name|vmsize
decl_stmt|;
name|uint32_t
name|fileoff
decl_stmt|;
name|uint32_t
name|filesize
decl_stmt|;
name|uint32_t
name|maxprot
decl_stmt|;
name|uint32_t
name|initprot
decl_stmt|;
name|uint32_t
name|nsects
decl_stmt|;
name|uint32_t
name|flags
decl_stmt|;
block|}
struct|;
struct|struct
name|segment_command_64
block|{
name|uint32_t
name|cmd
decl_stmt|;
name|uint32_t
name|cmdsize
decl_stmt|;
name|char
name|segname
index|[
literal|16
index|]
decl_stmt|;
name|uint64_t
name|vmaddr
decl_stmt|;
name|uint64_t
name|vmsize
decl_stmt|;
name|uint64_t
name|fileoff
decl_stmt|;
name|uint64_t
name|filesize
decl_stmt|;
name|uint32_t
name|maxprot
decl_stmt|;
name|uint32_t
name|initprot
decl_stmt|;
name|uint32_t
name|nsects
decl_stmt|;
name|uint32_t
name|flags
decl_stmt|;
block|}
struct|;
struct|struct
name|section
block|{
name|char
name|sectname
index|[
literal|16
index|]
decl_stmt|;
name|char
name|segname
index|[
literal|16
index|]
decl_stmt|;
name|uint32_t
name|addr
decl_stmt|;
name|uint32_t
name|size
decl_stmt|;
name|uint32_t
name|offset
decl_stmt|;
name|uint32_t
name|align
decl_stmt|;
name|uint32_t
name|reloff
decl_stmt|;
name|uint32_t
name|nreloc
decl_stmt|;
name|uint32_t
name|flags
decl_stmt|;
name|uint32_t
name|reserved1
decl_stmt|;
name|uint32_t
name|reserved2
decl_stmt|;
block|}
struct|;
struct|struct
name|section_64
block|{
name|char
name|sectname
index|[
literal|16
index|]
decl_stmt|;
name|char
name|segname
index|[
literal|16
index|]
decl_stmt|;
name|uint64_t
name|addr
decl_stmt|;
name|uint64_t
name|size
decl_stmt|;
name|uint32_t
name|offset
decl_stmt|;
name|uint32_t
name|align
decl_stmt|;
name|uint32_t
name|reloff
decl_stmt|;
name|uint32_t
name|nreloc
decl_stmt|;
name|uint32_t
name|flags
decl_stmt|;
name|uint32_t
name|reserved1
decl_stmt|;
name|uint32_t
name|reserved2
decl_stmt|;
name|uint32_t
name|reserved3
decl_stmt|;
block|}
struct|;
struct|struct
name|fvmlib
block|{
name|uint32_t
name|name
decl_stmt|;
name|uint32_t
name|minor_version
decl_stmt|;
name|uint32_t
name|header_addr
decl_stmt|;
block|}
struct|;
struct|struct
name|fvmlib_command
block|{
name|uint32_t
name|cmd
decl_stmt|;
name|uint32_t
name|cmdsize
decl_stmt|;
name|struct
name|fvmlib
name|fvmlib
decl_stmt|;
block|}
struct|;
struct|struct
name|dylib
block|{
name|uint32_t
name|name
decl_stmt|;
name|uint32_t
name|timestamp
decl_stmt|;
name|uint32_t
name|current_version
decl_stmt|;
name|uint32_t
name|compatibility_version
decl_stmt|;
block|}
struct|;
struct|struct
name|dylib_command
block|{
name|uint32_t
name|cmd
decl_stmt|;
name|uint32_t
name|cmdsize
decl_stmt|;
name|struct
name|dylib
name|dylib
decl_stmt|;
block|}
struct|;
struct|struct
name|sub_framework_command
block|{
name|uint32_t
name|cmd
decl_stmt|;
name|uint32_t
name|cmdsize
decl_stmt|;
name|uint32_t
name|umbrella
decl_stmt|;
block|}
struct|;
struct|struct
name|sub_client_command
block|{
name|uint32_t
name|cmd
decl_stmt|;
name|uint32_t
name|cmdsize
decl_stmt|;
name|uint32_t
name|client
decl_stmt|;
block|}
struct|;
struct|struct
name|sub_umbrella_command
block|{
name|uint32_t
name|cmd
decl_stmt|;
name|uint32_t
name|cmdsize
decl_stmt|;
name|uint32_t
name|sub_umbrella
decl_stmt|;
block|}
struct|;
struct|struct
name|sub_library_command
block|{
name|uint32_t
name|cmd
decl_stmt|;
name|uint32_t
name|cmdsize
decl_stmt|;
name|uint32_t
name|sub_library
decl_stmt|;
block|}
struct|;
struct|struct
name|prebound_dylib_command
block|{
name|uint32_t
name|cmd
decl_stmt|;
name|uint32_t
name|cmdsize
decl_stmt|;
name|uint32_t
name|name
decl_stmt|;
name|uint32_t
name|nmodules
decl_stmt|;
name|uint32_t
name|linked_modules
decl_stmt|;
block|}
struct|;
struct|struct
name|dylinker_command
block|{
name|uint32_t
name|cmd
decl_stmt|;
name|uint32_t
name|cmdsize
decl_stmt|;
name|uint32_t
name|name
decl_stmt|;
block|}
struct|;
struct|struct
name|thread_command
block|{
name|uint32_t
name|cmd
decl_stmt|;
name|uint32_t
name|cmdsize
decl_stmt|;
block|}
struct|;
struct|struct
name|routines_command
block|{
name|uint32_t
name|cmd
decl_stmt|;
name|uint32_t
name|cmdsize
decl_stmt|;
name|uint32_t
name|init_address
decl_stmt|;
name|uint32_t
name|init_module
decl_stmt|;
name|uint32_t
name|reserved1
decl_stmt|;
name|uint32_t
name|reserved2
decl_stmt|;
name|uint32_t
name|reserved3
decl_stmt|;
name|uint32_t
name|reserved4
decl_stmt|;
name|uint32_t
name|reserved5
decl_stmt|;
name|uint32_t
name|reserved6
decl_stmt|;
block|}
struct|;
struct|struct
name|routines_command_64
block|{
name|uint32_t
name|cmd
decl_stmt|;
name|uint32_t
name|cmdsize
decl_stmt|;
name|uint64_t
name|init_address
decl_stmt|;
name|uint64_t
name|init_module
decl_stmt|;
name|uint64_t
name|reserved1
decl_stmt|;
name|uint64_t
name|reserved2
decl_stmt|;
name|uint64_t
name|reserved3
decl_stmt|;
name|uint64_t
name|reserved4
decl_stmt|;
name|uint64_t
name|reserved5
decl_stmt|;
name|uint64_t
name|reserved6
decl_stmt|;
block|}
struct|;
struct|struct
name|symtab_command
block|{
name|uint32_t
name|cmd
decl_stmt|;
name|uint32_t
name|cmdsize
decl_stmt|;
name|uint32_t
name|symoff
decl_stmt|;
name|uint32_t
name|nsyms
decl_stmt|;
name|uint32_t
name|stroff
decl_stmt|;
name|uint32_t
name|strsize
decl_stmt|;
block|}
struct|;
struct|struct
name|dysymtab_command
block|{
name|uint32_t
name|cmd
decl_stmt|;
name|uint32_t
name|cmdsize
decl_stmt|;
name|uint32_t
name|ilocalsym
decl_stmt|;
name|uint32_t
name|nlocalsym
decl_stmt|;
name|uint32_t
name|iextdefsym
decl_stmt|;
name|uint32_t
name|nextdefsym
decl_stmt|;
name|uint32_t
name|iundefsym
decl_stmt|;
name|uint32_t
name|nundefsym
decl_stmt|;
name|uint32_t
name|tocoff
decl_stmt|;
name|uint32_t
name|ntoc
decl_stmt|;
name|uint32_t
name|modtaboff
decl_stmt|;
name|uint32_t
name|nmodtab
decl_stmt|;
name|uint32_t
name|extrefsymoff
decl_stmt|;
name|uint32_t
name|nextrefsyms
decl_stmt|;
name|uint32_t
name|indirectsymoff
decl_stmt|;
name|uint32_t
name|nindirectsyms
decl_stmt|;
name|uint32_t
name|extreloff
decl_stmt|;
name|uint32_t
name|nextrel
decl_stmt|;
name|uint32_t
name|locreloff
decl_stmt|;
name|uint32_t
name|nlocrel
decl_stmt|;
block|}
struct|;
struct|struct
name|dylib_table_of_contents
block|{
name|uint32_t
name|symbol_index
decl_stmt|;
name|uint32_t
name|module_index
decl_stmt|;
block|}
struct|;
struct|struct
name|dylib_module
block|{
name|uint32_t
name|module_name
decl_stmt|;
name|uint32_t
name|iextdefsym
decl_stmt|;
name|uint32_t
name|nextdefsym
decl_stmt|;
name|uint32_t
name|irefsym
decl_stmt|;
name|uint32_t
name|nrefsym
decl_stmt|;
name|uint32_t
name|ilocalsym
decl_stmt|;
name|uint32_t
name|nlocalsym
decl_stmt|;
name|uint32_t
name|iextrel
decl_stmt|;
name|uint32_t
name|nextrel
decl_stmt|;
name|uint32_t
name|iinit_iterm
decl_stmt|;
name|uint32_t
name|ninit_nterm
decl_stmt|;
name|uint32_t
name|objc_module_info_addr
decl_stmt|;
name|uint32_t
name|objc_module_info_size
decl_stmt|;
block|}
struct|;
struct|struct
name|dylib_module_64
block|{
name|uint32_t
name|module_name
decl_stmt|;
name|uint32_t
name|iextdefsym
decl_stmt|;
name|uint32_t
name|nextdefsym
decl_stmt|;
name|uint32_t
name|irefsym
decl_stmt|;
name|uint32_t
name|nrefsym
decl_stmt|;
name|uint32_t
name|ilocalsym
decl_stmt|;
name|uint32_t
name|nlocalsym
decl_stmt|;
name|uint32_t
name|iextrel
decl_stmt|;
name|uint32_t
name|nextrel
decl_stmt|;
name|uint32_t
name|iinit_iterm
decl_stmt|;
name|uint32_t
name|ninit_nterm
decl_stmt|;
name|uint32_t
name|objc_module_info_size
decl_stmt|;
name|uint64_t
name|objc_module_info_addr
decl_stmt|;
block|}
struct|;
struct|struct
name|dylib_reference
block|{
name|uint32_t
name|isym
range|:
literal|24
decl_stmt|,
name|flags
range|:
literal|8
decl_stmt|;
block|}
struct|;
struct|struct
name|twolevel_hints_command
block|{
name|uint32_t
name|cmd
decl_stmt|;
name|uint32_t
name|cmdsize
decl_stmt|;
name|uint32_t
name|offset
decl_stmt|;
name|uint32_t
name|nhints
decl_stmt|;
block|}
struct|;
struct|struct
name|twolevel_hint
block|{
name|uint32_t
name|isub_image
range|:
literal|8
decl_stmt|,
name|itoc
range|:
literal|24
decl_stmt|;
block|}
struct|;
struct|struct
name|prebind_cksum_command
block|{
name|uint32_t
name|cmd
decl_stmt|;
name|uint32_t
name|cmdsize
decl_stmt|;
name|uint32_t
name|cksum
decl_stmt|;
block|}
struct|;
struct|struct
name|uuid_command
block|{
name|uint32_t
name|cmd
decl_stmt|;
name|uint32_t
name|cmdsize
decl_stmt|;
name|uint8_t
name|uuid
index|[
literal|16
index|]
decl_stmt|;
block|}
struct|;
struct|struct
name|rpath_command
block|{
name|uint32_t
name|cmd
decl_stmt|;
name|uint32_t
name|cmdsize
decl_stmt|;
name|uint32_t
name|path
decl_stmt|;
block|}
struct|;
struct|struct
name|linkedit_data_command
block|{
name|uint32_t
name|cmd
decl_stmt|;
name|uint32_t
name|cmdsize
decl_stmt|;
name|uint32_t
name|dataoff
decl_stmt|;
name|uint32_t
name|datasize
decl_stmt|;
block|}
struct|;
struct|struct
name|data_in_code_entry
block|{
name|uint32_t
name|offset
decl_stmt|;
name|uint16_t
name|length
decl_stmt|;
name|uint16_t
name|kind
decl_stmt|;
block|}
struct|;
struct|struct
name|source_version_command
block|{
name|uint32_t
name|cmd
decl_stmt|;
name|uint32_t
name|cmdsize
decl_stmt|;
name|uint64_t
name|version
decl_stmt|;
block|}
struct|;
struct|struct
name|encryption_info_command
block|{
name|uint32_t
name|cmd
decl_stmt|;
name|uint32_t
name|cmdsize
decl_stmt|;
name|uint32_t
name|cryptoff
decl_stmt|;
name|uint32_t
name|cryptsize
decl_stmt|;
name|uint32_t
name|cryptid
decl_stmt|;
block|}
struct|;
struct|struct
name|encryption_info_command_64
block|{
name|uint32_t
name|cmd
decl_stmt|;
name|uint32_t
name|cmdsize
decl_stmt|;
name|uint32_t
name|cryptoff
decl_stmt|;
name|uint32_t
name|cryptsize
decl_stmt|;
name|uint32_t
name|cryptid
decl_stmt|;
name|uint32_t
name|pad
decl_stmt|;
block|}
struct|;
struct|struct
name|version_min_command
block|{
name|uint32_t
name|cmd
decl_stmt|;
comment|// LC_VERSION_MIN_MACOSX or
comment|// LC_VERSION_MIN_IPHONEOS
name|uint32_t
name|cmdsize
decl_stmt|;
comment|// sizeof(struct version_min_command)
name|uint32_t
name|version
decl_stmt|;
comment|// X.Y.Z is encoded in nibbles xxxx.yy.zz
name|uint32_t
name|sdk
decl_stmt|;
comment|// X.Y.Z is encoded in nibbles xxxx.yy.zz
block|}
struct|;
struct|struct
name|dyld_info_command
block|{
name|uint32_t
name|cmd
decl_stmt|;
name|uint32_t
name|cmdsize
decl_stmt|;
name|uint32_t
name|rebase_off
decl_stmt|;
name|uint32_t
name|rebase_size
decl_stmt|;
name|uint32_t
name|bind_off
decl_stmt|;
name|uint32_t
name|bind_size
decl_stmt|;
name|uint32_t
name|weak_bind_off
decl_stmt|;
name|uint32_t
name|weak_bind_size
decl_stmt|;
name|uint32_t
name|lazy_bind_off
decl_stmt|;
name|uint32_t
name|lazy_bind_size
decl_stmt|;
name|uint32_t
name|export_off
decl_stmt|;
name|uint32_t
name|export_size
decl_stmt|;
block|}
struct|;
struct|struct
name|linker_option_command
block|{
name|uint32_t
name|cmd
decl_stmt|;
name|uint32_t
name|cmdsize
decl_stmt|;
name|uint32_t
name|count
decl_stmt|;
block|}
struct|;
struct|struct
name|symseg_command
block|{
name|uint32_t
name|cmd
decl_stmt|;
name|uint32_t
name|cmdsize
decl_stmt|;
name|uint32_t
name|offset
decl_stmt|;
name|uint32_t
name|size
decl_stmt|;
block|}
struct|;
struct|struct
name|ident_command
block|{
name|uint32_t
name|cmd
decl_stmt|;
name|uint32_t
name|cmdsize
decl_stmt|;
block|}
struct|;
struct|struct
name|fvmfile_command
block|{
name|uint32_t
name|cmd
decl_stmt|;
name|uint32_t
name|cmdsize
decl_stmt|;
name|uint32_t
name|name
decl_stmt|;
name|uint32_t
name|header_addr
decl_stmt|;
block|}
struct|;
struct|struct
name|tlv_descriptor_32
block|{
name|uint32_t
name|thunk
decl_stmt|;
name|uint32_t
name|key
decl_stmt|;
name|uint32_t
name|offset
decl_stmt|;
block|}
struct|;
struct|struct
name|tlv_descriptor_64
block|{
name|uint64_t
name|thunk
decl_stmt|;
name|uint64_t
name|key
decl_stmt|;
name|uint64_t
name|offset
decl_stmt|;
block|}
struct|;
struct|struct
name|tlv_descriptor
block|{
name|uintptr_t
name|thunk
decl_stmt|;
name|uintptr_t
name|key
decl_stmt|;
name|uintptr_t
name|offset
decl_stmt|;
block|}
struct|;
struct|struct
name|entry_point_command
block|{
name|uint32_t
name|cmd
decl_stmt|;
name|uint32_t
name|cmdsize
decl_stmt|;
name|uint64_t
name|entryoff
decl_stmt|;
name|uint64_t
name|stacksize
decl_stmt|;
block|}
struct|;
comment|// Structs from<mach-o/fat.h>
struct|struct
name|fat_header
block|{
name|uint32_t
name|magic
decl_stmt|;
name|uint32_t
name|nfat_arch
decl_stmt|;
block|}
struct|;
struct|struct
name|fat_arch
block|{
name|uint32_t
name|cputype
decl_stmt|;
name|uint32_t
name|cpusubtype
decl_stmt|;
name|uint32_t
name|offset
decl_stmt|;
name|uint32_t
name|size
decl_stmt|;
name|uint32_t
name|align
decl_stmt|;
block|}
struct|;
comment|// Structs from<mach-o/reloc.h>
struct|struct
name|relocation_info
block|{
name|int32_t
name|r_address
decl_stmt|;
name|uint32_t
name|r_symbolnum
range|:
literal|24
decl_stmt|,
name|r_pcrel
range|:
literal|1
decl_stmt|,
name|r_length
range|:
literal|2
decl_stmt|,
name|r_extern
range|:
literal|1
decl_stmt|,
name|r_type
range|:
literal|4
decl_stmt|;
block|}
struct|;
struct|struct
name|scattered_relocation_info
block|{
if|#
directive|if
name|defined
argument_list|(
name|BYTE_ORDER
argument_list|)
operator|&&
name|defined
argument_list|(
name|BIG_ENDIAN
argument_list|)
operator|&&
operator|(
name|BYTE_ORDER
operator|==
name|BIG_ENDIAN
operator|)
name|uint32_t
name|r_scattered
range|:
literal|1
decl_stmt|,
name|r_pcrel
range|:
literal|1
decl_stmt|,
name|r_length
range|:
literal|2
decl_stmt|,
name|r_type
range|:
literal|4
decl_stmt|,
name|r_address
range|:
literal|24
decl_stmt|;
else|#
directive|else
name|uint32_t
name|r_address
range|:
literal|24
decl_stmt|,
name|r_type
range|:
literal|4
decl_stmt|,
name|r_length
range|:
literal|2
decl_stmt|,
name|r_pcrel
range|:
literal|1
decl_stmt|,
name|r_scattered
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
name|int32_t
name|r_value
decl_stmt|;
block|}
struct|;
comment|// Structs NOT from<mach-o/reloc.h>, but that make LLVM's life easier
struct|struct
name|any_relocation_info
block|{
name|uint32_t
name|r_word0
decl_stmt|,
name|r_word1
decl_stmt|;
block|}
struct|;
comment|// Structs from<mach-o/nlist.h>
struct|struct
name|nlist_base
block|{
name|uint32_t
name|n_strx
decl_stmt|;
name|uint8_t
name|n_type
decl_stmt|;
name|uint8_t
name|n_sect
decl_stmt|;
name|uint16_t
name|n_desc
decl_stmt|;
block|}
struct|;
struct|struct
name|nlist
block|{
name|uint32_t
name|n_strx
decl_stmt|;
name|uint8_t
name|n_type
decl_stmt|;
name|uint8_t
name|n_sect
decl_stmt|;
name|int16_t
name|n_desc
decl_stmt|;
name|uint32_t
name|n_value
decl_stmt|;
block|}
struct|;
struct|struct
name|nlist_64
block|{
name|uint32_t
name|n_strx
decl_stmt|;
name|uint8_t
name|n_type
decl_stmt|;
name|uint8_t
name|n_sect
decl_stmt|;
name|uint16_t
name|n_desc
decl_stmt|;
name|uint64_t
name|n_value
decl_stmt|;
block|}
struct|;
comment|// Byte order swapping functions for MachO structs
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|mach_header
modifier|&
name|mh
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|mh
operator|.
name|magic
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|mh
operator|.
name|cputype
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|mh
operator|.
name|cpusubtype
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|mh
operator|.
name|filetype
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|mh
operator|.
name|ncmds
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|mh
operator|.
name|sizeofcmds
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|mh
operator|.
name|flags
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|mach_header_64
modifier|&
name|H
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|H
operator|.
name|magic
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|H
operator|.
name|cputype
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|H
operator|.
name|cpusubtype
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|H
operator|.
name|filetype
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|H
operator|.
name|ncmds
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|H
operator|.
name|sizeofcmds
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|H
operator|.
name|flags
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|H
operator|.
name|reserved
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|load_command
modifier|&
name|lc
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|lc
operator|.
name|cmd
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|lc
operator|.
name|cmdsize
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|symtab_command
modifier|&
name|lc
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|lc
operator|.
name|cmd
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|lc
operator|.
name|cmdsize
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|lc
operator|.
name|symoff
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|lc
operator|.
name|nsyms
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|lc
operator|.
name|stroff
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|lc
operator|.
name|strsize
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|segment_command_64
modifier|&
name|seg
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|seg
operator|.
name|cmd
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|seg
operator|.
name|cmdsize
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|seg
operator|.
name|vmaddr
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|seg
operator|.
name|vmsize
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|seg
operator|.
name|fileoff
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|seg
operator|.
name|filesize
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|seg
operator|.
name|maxprot
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|seg
operator|.
name|initprot
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|seg
operator|.
name|nsects
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|seg
operator|.
name|flags
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|segment_command
modifier|&
name|seg
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|seg
operator|.
name|cmd
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|seg
operator|.
name|cmdsize
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|seg
operator|.
name|vmaddr
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|seg
operator|.
name|vmsize
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|seg
operator|.
name|fileoff
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|seg
operator|.
name|filesize
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|seg
operator|.
name|maxprot
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|seg
operator|.
name|initprot
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|seg
operator|.
name|nsects
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|seg
operator|.
name|flags
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|section_64
modifier|&
name|sect
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|sect
operator|.
name|addr
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|sect
operator|.
name|size
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|sect
operator|.
name|offset
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|sect
operator|.
name|align
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|sect
operator|.
name|reloff
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|sect
operator|.
name|nreloc
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|sect
operator|.
name|flags
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|sect
operator|.
name|reserved1
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|sect
operator|.
name|reserved2
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|section
modifier|&
name|sect
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|sect
operator|.
name|addr
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|sect
operator|.
name|size
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|sect
operator|.
name|offset
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|sect
operator|.
name|align
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|sect
operator|.
name|reloff
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|sect
operator|.
name|nreloc
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|sect
operator|.
name|flags
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|sect
operator|.
name|reserved1
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|sect
operator|.
name|reserved2
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|dyld_info_command
modifier|&
name|info
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|info
operator|.
name|cmd
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|info
operator|.
name|cmdsize
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|info
operator|.
name|rebase_off
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|info
operator|.
name|rebase_size
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|info
operator|.
name|bind_off
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|info
operator|.
name|bind_size
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|info
operator|.
name|weak_bind_off
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|info
operator|.
name|weak_bind_size
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|info
operator|.
name|lazy_bind_off
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|info
operator|.
name|lazy_bind_size
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|info
operator|.
name|export_off
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|info
operator|.
name|export_size
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|dylib_command
modifier|&
name|d
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|d
operator|.
name|cmd
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|d
operator|.
name|cmdsize
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|d
operator|.
name|dylib
operator|.
name|name
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|d
operator|.
name|dylib
operator|.
name|timestamp
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|d
operator|.
name|dylib
operator|.
name|current_version
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|d
operator|.
name|dylib
operator|.
name|compatibility_version
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|sub_framework_command
modifier|&
name|s
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|s
operator|.
name|cmd
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|s
operator|.
name|cmdsize
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|s
operator|.
name|umbrella
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|sub_umbrella_command
modifier|&
name|s
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|s
operator|.
name|cmd
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|s
operator|.
name|cmdsize
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|s
operator|.
name|sub_umbrella
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|sub_library_command
modifier|&
name|s
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|s
operator|.
name|cmd
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|s
operator|.
name|cmdsize
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|s
operator|.
name|sub_library
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|sub_client_command
modifier|&
name|s
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|s
operator|.
name|cmd
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|s
operator|.
name|cmdsize
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|s
operator|.
name|client
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|routines_command
modifier|&
name|r
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|r
operator|.
name|cmd
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|r
operator|.
name|cmdsize
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|r
operator|.
name|init_address
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|r
operator|.
name|init_module
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|r
operator|.
name|reserved1
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|r
operator|.
name|reserved2
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|r
operator|.
name|reserved3
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|r
operator|.
name|reserved4
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|r
operator|.
name|reserved5
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|r
operator|.
name|reserved6
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|routines_command_64
modifier|&
name|r
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|r
operator|.
name|cmd
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|r
operator|.
name|cmdsize
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|r
operator|.
name|init_address
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|r
operator|.
name|init_module
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|r
operator|.
name|reserved1
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|r
operator|.
name|reserved2
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|r
operator|.
name|reserved3
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|r
operator|.
name|reserved4
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|r
operator|.
name|reserved5
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|r
operator|.
name|reserved6
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|thread_command
modifier|&
name|t
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|t
operator|.
name|cmd
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|t
operator|.
name|cmdsize
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|dylinker_command
modifier|&
name|d
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|d
operator|.
name|cmd
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|d
operator|.
name|cmdsize
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|d
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|uuid_command
modifier|&
name|u
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|u
operator|.
name|cmd
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|u
operator|.
name|cmdsize
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|rpath_command
modifier|&
name|r
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|r
operator|.
name|cmd
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|r
operator|.
name|cmdsize
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|r
operator|.
name|path
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|source_version_command
modifier|&
name|s
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|s
operator|.
name|cmd
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|s
operator|.
name|cmdsize
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|s
operator|.
name|version
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|entry_point_command
modifier|&
name|e
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|e
operator|.
name|cmd
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|e
operator|.
name|cmdsize
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|e
operator|.
name|entryoff
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|e
operator|.
name|stacksize
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|encryption_info_command
modifier|&
name|e
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|e
operator|.
name|cmd
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|e
operator|.
name|cmdsize
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|e
operator|.
name|cryptoff
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|e
operator|.
name|cryptsize
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|e
operator|.
name|cryptid
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|encryption_info_command_64
modifier|&
name|e
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|e
operator|.
name|cmd
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|e
operator|.
name|cmdsize
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|e
operator|.
name|cryptoff
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|e
operator|.
name|cryptsize
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|e
operator|.
name|cryptid
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|e
operator|.
name|pad
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|dysymtab_command
modifier|&
name|dst
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|dst
operator|.
name|cmd
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|dst
operator|.
name|cmdsize
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|dst
operator|.
name|ilocalsym
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|dst
operator|.
name|nlocalsym
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|dst
operator|.
name|iextdefsym
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|dst
operator|.
name|nextdefsym
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|dst
operator|.
name|iundefsym
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|dst
operator|.
name|nundefsym
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|dst
operator|.
name|tocoff
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|dst
operator|.
name|ntoc
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|dst
operator|.
name|modtaboff
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|dst
operator|.
name|nmodtab
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|dst
operator|.
name|extrefsymoff
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|dst
operator|.
name|nextrefsyms
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|dst
operator|.
name|indirectsymoff
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|dst
operator|.
name|nindirectsyms
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|dst
operator|.
name|extreloff
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|dst
operator|.
name|nextrel
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|dst
operator|.
name|locreloff
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|dst
operator|.
name|nlocrel
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|any_relocation_info
modifier|&
name|reloc
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|reloc
operator|.
name|r_word0
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|reloc
operator|.
name|r_word1
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|nlist_base
modifier|&
name|S
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|S
operator|.
name|n_strx
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|S
operator|.
name|n_desc
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|nlist
modifier|&
name|sym
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|sym
operator|.
name|n_strx
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|sym
operator|.
name|n_desc
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|sym
operator|.
name|n_value
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|nlist_64
modifier|&
name|sym
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|sym
operator|.
name|n_strx
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|sym
operator|.
name|n_desc
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|sym
operator|.
name|n_value
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|linkedit_data_command
modifier|&
name|C
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|C
operator|.
name|cmd
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|C
operator|.
name|cmdsize
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|C
operator|.
name|dataoff
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|C
operator|.
name|datasize
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|linker_option_command
modifier|&
name|C
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|C
operator|.
name|cmd
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|C
operator|.
name|cmdsize
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|C
operator|.
name|count
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|version_min_command
modifier|&
name|C
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|C
operator|.
name|cmd
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|C
operator|.
name|cmdsize
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|C
operator|.
name|version
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|C
operator|.
name|sdk
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|data_in_code_entry
modifier|&
name|C
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|C
operator|.
name|offset
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|C
operator|.
name|length
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|C
operator|.
name|kind
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|uint32_t
modifier|&
name|C
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|C
argument_list|)
expr_stmt|;
block|}
comment|// Get/Set functions from<mach-o/nlist.h>
specifier|static
specifier|inline
name|uint16_t
name|GET_LIBRARY_ORDINAL
parameter_list|(
name|uint16_t
name|n_desc
parameter_list|)
block|{
return|return
operator|(
operator|(
operator|(
name|n_desc
operator|)
operator|>>
literal|8u
operator|)
operator|&
literal|0xffu
operator|)
return|;
block|}
specifier|static
specifier|inline
name|void
name|SET_LIBRARY_ORDINAL
parameter_list|(
name|uint16_t
modifier|&
name|n_desc
parameter_list|,
name|uint8_t
name|ordinal
parameter_list|)
block|{
name|n_desc
operator|=
operator|(
operator|(
operator|(
name|n_desc
operator|)
operator|&
literal|0x00ff
operator|)
operator||
operator|(
operator|(
operator|(
name|ordinal
operator|)
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator|)
expr_stmt|;
block|}
specifier|static
specifier|inline
name|uint8_t
name|GET_COMM_ALIGN
parameter_list|(
name|uint16_t
name|n_desc
parameter_list|)
block|{
return|return
operator|(
name|n_desc
operator|>>
literal|8u
operator|)
operator|&
literal|0x0fu
return|;
block|}
specifier|static
specifier|inline
name|void
name|SET_COMM_ALIGN
parameter_list|(
name|uint16_t
modifier|&
name|n_desc
parameter_list|,
name|uint8_t
name|align
parameter_list|)
block|{
name|n_desc
operator|=
operator|(
operator|(
name|n_desc
operator|&
literal|0xf0ffu
operator|)
operator||
operator|(
operator|(
name|align
operator|&
literal|0x0fu
operator|)
operator|<<
literal|8u
operator|)
operator|)
expr_stmt|;
block|}
comment|// Enums from<mach/machine.h>
enum_decl|enum :
name|uint32_t
block|{
comment|// Capability bits used in the definition of cpu_type.
name|CPU_ARCH_MASK
init|=
literal|0xff000000
block|,
comment|// Mask for architecture bits
name|CPU_ARCH_ABI64
init|=
literal|0x01000000
comment|// 64 bit ABI
block|}
enum_decl|;
comment|// Constants for the cputype field.
enum|enum
name|CPUType
block|{
name|CPU_TYPE_ANY
init|=
operator|-
literal|1
block|,
name|CPU_TYPE_X86
init|=
literal|7
block|,
name|CPU_TYPE_I386
init|=
name|CPU_TYPE_X86
block|,
name|CPU_TYPE_X86_64
init|=
name|CPU_TYPE_X86
operator||
name|CPU_ARCH_ABI64
block|,
comment|/* CPU_TYPE_MIPS      = 8, */
name|CPU_TYPE_MC98000
init|=
literal|10
block|,
comment|// Old Motorola PowerPC
name|CPU_TYPE_ARM
init|=
literal|12
block|,
name|CPU_TYPE_ARM64
init|=
name|CPU_TYPE_ARM
operator||
name|CPU_ARCH_ABI64
block|,
name|CPU_TYPE_SPARC
init|=
literal|14
block|,
name|CPU_TYPE_POWERPC
init|=
literal|18
block|,
name|CPU_TYPE_POWERPC64
init|=
name|CPU_TYPE_POWERPC
operator||
name|CPU_ARCH_ABI64
block|}
enum|;
enum_decl|enum :
name|uint32_t
block|{
comment|// Capability bits used in the definition of cpusubtype.
name|CPU_SUBTYPE_MASK
init|=
literal|0xff000000
block|,
comment|// Mask for architecture bits
name|CPU_SUBTYPE_LIB64
init|=
literal|0x80000000
block|,
comment|// 64 bit libraries
comment|// Special CPU subtype constants.
name|CPU_SUBTYPE_MULTIPLE
init|=
operator|~
literal|0u
block|}
enum_decl|;
comment|// Constants for the cpusubtype field.
enum|enum
name|CPUSubTypeX86
block|{
name|CPU_SUBTYPE_I386_ALL
init|=
literal|3
block|,
name|CPU_SUBTYPE_386
init|=
literal|3
block|,
name|CPU_SUBTYPE_486
init|=
literal|4
block|,
name|CPU_SUBTYPE_486SX
init|=
literal|0x84
block|,
name|CPU_SUBTYPE_586
init|=
literal|5
block|,
name|CPU_SUBTYPE_PENT
init|=
name|CPU_SUBTYPE_586
block|,
name|CPU_SUBTYPE_PENTPRO
init|=
literal|0x16
block|,
name|CPU_SUBTYPE_PENTII_M3
init|=
literal|0x36
block|,
name|CPU_SUBTYPE_PENTII_M5
init|=
literal|0x56
block|,
name|CPU_SUBTYPE_CELERON
init|=
literal|0x67
block|,
name|CPU_SUBTYPE_CELERON_MOBILE
init|=
literal|0x77
block|,
name|CPU_SUBTYPE_PENTIUM_3
init|=
literal|0x08
block|,
name|CPU_SUBTYPE_PENTIUM_3_M
init|=
literal|0x18
block|,
name|CPU_SUBTYPE_PENTIUM_3_XEON
init|=
literal|0x28
block|,
name|CPU_SUBTYPE_PENTIUM_M
init|=
literal|0x09
block|,
name|CPU_SUBTYPE_PENTIUM_4
init|=
literal|0x0a
block|,
name|CPU_SUBTYPE_PENTIUM_4_M
init|=
literal|0x1a
block|,
name|CPU_SUBTYPE_ITANIUM
init|=
literal|0x0b
block|,
name|CPU_SUBTYPE_ITANIUM_2
init|=
literal|0x1b
block|,
name|CPU_SUBTYPE_XEON
init|=
literal|0x0c
block|,
name|CPU_SUBTYPE_XEON_MP
init|=
literal|0x1c
block|,
name|CPU_SUBTYPE_X86_ALL
init|=
literal|3
block|,
name|CPU_SUBTYPE_X86_64_ALL
init|=
literal|3
block|,
name|CPU_SUBTYPE_X86_ARCH1
init|=
literal|4
block|,
name|CPU_SUBTYPE_X86_64_H
init|=
literal|8
block|}
enum|;
specifier|static
specifier|inline
name|int
name|CPU_SUBTYPE_INTEL
parameter_list|(
name|int
name|Family
parameter_list|,
name|int
name|Model
parameter_list|)
block|{
return|return
name|Family
operator||
operator|(
name|Model
operator|<<
literal|4
operator|)
return|;
block|}
specifier|static
specifier|inline
name|int
name|CPU_SUBTYPE_INTEL_FAMILY
parameter_list|(
name|CPUSubTypeX86
name|ST
parameter_list|)
block|{
return|return
operator|(
operator|(
name|int
operator|)
name|ST
operator|)
operator|&
literal|0x0f
return|;
block|}
specifier|static
specifier|inline
name|int
name|CPU_SUBTYPE_INTEL_MODEL
parameter_list|(
name|CPUSubTypeX86
name|ST
parameter_list|)
block|{
return|return
operator|(
operator|(
name|int
operator|)
name|ST
operator|)
operator|>>
literal|4
return|;
block|}
enum|enum
block|{
name|CPU_SUBTYPE_INTEL_FAMILY_MAX
init|=
literal|15
block|,
name|CPU_SUBTYPE_INTEL_MODEL_ALL
init|=
literal|0
block|}
enum|;
enum|enum
name|CPUSubTypeARM
block|{
name|CPU_SUBTYPE_ARM_ALL
init|=
literal|0
block|,
name|CPU_SUBTYPE_ARM_V4T
init|=
literal|5
block|,
name|CPU_SUBTYPE_ARM_V6
init|=
literal|6
block|,
name|CPU_SUBTYPE_ARM_V5
init|=
literal|7
block|,
name|CPU_SUBTYPE_ARM_V5TEJ
init|=
literal|7
block|,
name|CPU_SUBTYPE_ARM_XSCALE
init|=
literal|8
block|,
name|CPU_SUBTYPE_ARM_V7
init|=
literal|9
block|,
comment|//  unused  ARM_V7F     = 10,
name|CPU_SUBTYPE_ARM_V7S
init|=
literal|11
block|,
name|CPU_SUBTYPE_ARM_V7K
init|=
literal|12
block|,
name|CPU_SUBTYPE_ARM_V6M
init|=
literal|14
block|,
name|CPU_SUBTYPE_ARM_V7M
init|=
literal|15
block|,
name|CPU_SUBTYPE_ARM_V7EM
init|=
literal|16
block|}
enum|;
enum|enum
name|CPUSubTypeARM64
block|{
name|CPU_SUBTYPE_ARM64_ALL
init|=
literal|0
block|}
enum|;
enum|enum
name|CPUSubTypeSPARC
block|{
name|CPU_SUBTYPE_SPARC_ALL
init|=
literal|0
block|}
enum|;
enum|enum
name|CPUSubTypePowerPC
block|{
name|CPU_SUBTYPE_POWERPC_ALL
init|=
literal|0
block|,
name|CPU_SUBTYPE_POWERPC_601
init|=
literal|1
block|,
name|CPU_SUBTYPE_POWERPC_602
init|=
literal|2
block|,
name|CPU_SUBTYPE_POWERPC_603
init|=
literal|3
block|,
name|CPU_SUBTYPE_POWERPC_603e
init|=
literal|4
block|,
name|CPU_SUBTYPE_POWERPC_603ev
init|=
literal|5
block|,
name|CPU_SUBTYPE_POWERPC_604
init|=
literal|6
block|,
name|CPU_SUBTYPE_POWERPC_604e
init|=
literal|7
block|,
name|CPU_SUBTYPE_POWERPC_620
init|=
literal|8
block|,
name|CPU_SUBTYPE_POWERPC_750
init|=
literal|9
block|,
name|CPU_SUBTYPE_POWERPC_7400
init|=
literal|10
block|,
name|CPU_SUBTYPE_POWERPC_7450
init|=
literal|11
block|,
name|CPU_SUBTYPE_POWERPC_970
init|=
literal|100
block|,
name|CPU_SUBTYPE_MC980000_ALL
init|=
name|CPU_SUBTYPE_POWERPC_ALL
block|,
name|CPU_SUBTYPE_MC98601
init|=
name|CPU_SUBTYPE_POWERPC_601
block|}
enum|;
struct|struct
name|x86_thread_state64_t
block|{
name|uint64_t
name|rax
decl_stmt|;
name|uint64_t
name|rbx
decl_stmt|;
name|uint64_t
name|rcx
decl_stmt|;
name|uint64_t
name|rdx
decl_stmt|;
name|uint64_t
name|rdi
decl_stmt|;
name|uint64_t
name|rsi
decl_stmt|;
name|uint64_t
name|rbp
decl_stmt|;
name|uint64_t
name|rsp
decl_stmt|;
name|uint64_t
name|r8
decl_stmt|;
name|uint64_t
name|r9
decl_stmt|;
name|uint64_t
name|r10
decl_stmt|;
name|uint64_t
name|r11
decl_stmt|;
name|uint64_t
name|r12
decl_stmt|;
name|uint64_t
name|r13
decl_stmt|;
name|uint64_t
name|r14
decl_stmt|;
name|uint64_t
name|r15
decl_stmt|;
name|uint64_t
name|rip
decl_stmt|;
name|uint64_t
name|rflags
decl_stmt|;
name|uint64_t
name|cs
decl_stmt|;
name|uint64_t
name|fs
decl_stmt|;
name|uint64_t
name|gs
decl_stmt|;
block|}
struct|;
enum|enum
name|x86_fp_control_precis
block|{
name|x86_FP_PREC_24B
init|=
literal|0
block|,
name|x86_FP_PREC_53B
init|=
literal|2
block|,
name|x86_FP_PREC_64B
init|=
literal|3
block|}
enum|;
enum|enum
name|x86_fp_control_rc
block|{
name|x86_FP_RND_NEAR
init|=
literal|0
block|,
name|x86_FP_RND_DOWN
init|=
literal|1
block|,
name|x86_FP_RND_UP
init|=
literal|2
block|,
name|x86_FP_CHOP
init|=
literal|3
block|}
enum|;
struct|struct
name|fp_control_t
block|{
name|unsigned
name|short
name|invalid
range|:
literal|1
decl_stmt|,
name|denorm
range|:
literal|1
decl_stmt|,
name|zdiv
range|:
literal|1
decl_stmt|,
name|ovrfl
range|:
literal|1
decl_stmt|,
name|undfl
range|:
literal|1
decl_stmt|,
name|precis
range|:
literal|1
decl_stmt|,
range|:
literal|2
decl_stmt|,
name|pc
range|:
literal|2
decl_stmt|,
name|rc
range|:
literal|2
decl_stmt|,
range|:
literal|1
decl_stmt|,
range|:
literal|3
decl_stmt|;
block|}
struct|;
struct|struct
name|fp_status_t
block|{
name|unsigned
name|short
name|invalid
range|:
literal|1
decl_stmt|,
name|denorm
range|:
literal|1
decl_stmt|,
name|zdiv
range|:
literal|1
decl_stmt|,
name|ovrfl
range|:
literal|1
decl_stmt|,
name|undfl
range|:
literal|1
decl_stmt|,
name|precis
range|:
literal|1
decl_stmt|,
name|stkflt
range|:
literal|1
decl_stmt|,
name|errsumm
range|:
literal|1
decl_stmt|,
name|c0
range|:
literal|1
decl_stmt|,
name|c1
range|:
literal|1
decl_stmt|,
name|c2
range|:
literal|1
decl_stmt|,
name|tos
range|:
literal|3
decl_stmt|,
name|c3
range|:
literal|1
decl_stmt|,
name|busy
range|:
literal|1
decl_stmt|;
block|}
struct|;
struct|struct
name|mmst_reg_t
block|{
name|char
name|mmst_reg
index|[
literal|10
index|]
decl_stmt|;
name|char
name|mmst_rsrv
index|[
literal|6
index|]
decl_stmt|;
block|}
struct|;
struct|struct
name|xmm_reg_t
block|{
name|char
name|xmm_reg
index|[
literal|16
index|]
decl_stmt|;
block|}
struct|;
struct|struct
name|x86_float_state64_t
block|{
name|int32_t
name|fpu_reserved
index|[
literal|2
index|]
decl_stmt|;
name|fp_control_t
name|fpu_fcw
decl_stmt|;
name|fp_status_t
name|fpu_fsw
decl_stmt|;
name|uint8_t
name|fpu_ftw
decl_stmt|;
name|uint8_t
name|fpu_rsrv1
decl_stmt|;
name|uint16_t
name|fpu_fop
decl_stmt|;
name|uint32_t
name|fpu_ip
decl_stmt|;
name|uint16_t
name|fpu_cs
decl_stmt|;
name|uint16_t
name|fpu_rsrv2
decl_stmt|;
name|uint32_t
name|fpu_dp
decl_stmt|;
name|uint16_t
name|fpu_ds
decl_stmt|;
name|uint16_t
name|fpu_rsrv3
decl_stmt|;
name|uint32_t
name|fpu_mxcsr
decl_stmt|;
name|uint32_t
name|fpu_mxcsrmask
decl_stmt|;
name|mmst_reg_t
name|fpu_stmm0
decl_stmt|;
name|mmst_reg_t
name|fpu_stmm1
decl_stmt|;
name|mmst_reg_t
name|fpu_stmm2
decl_stmt|;
name|mmst_reg_t
name|fpu_stmm3
decl_stmt|;
name|mmst_reg_t
name|fpu_stmm4
decl_stmt|;
name|mmst_reg_t
name|fpu_stmm5
decl_stmt|;
name|mmst_reg_t
name|fpu_stmm6
decl_stmt|;
name|mmst_reg_t
name|fpu_stmm7
decl_stmt|;
name|xmm_reg_t
name|fpu_xmm0
decl_stmt|;
name|xmm_reg_t
name|fpu_xmm1
decl_stmt|;
name|xmm_reg_t
name|fpu_xmm2
decl_stmt|;
name|xmm_reg_t
name|fpu_xmm3
decl_stmt|;
name|xmm_reg_t
name|fpu_xmm4
decl_stmt|;
name|xmm_reg_t
name|fpu_xmm5
decl_stmt|;
name|xmm_reg_t
name|fpu_xmm6
decl_stmt|;
name|xmm_reg_t
name|fpu_xmm7
decl_stmt|;
name|xmm_reg_t
name|fpu_xmm8
decl_stmt|;
name|xmm_reg_t
name|fpu_xmm9
decl_stmt|;
name|xmm_reg_t
name|fpu_xmm10
decl_stmt|;
name|xmm_reg_t
name|fpu_xmm11
decl_stmt|;
name|xmm_reg_t
name|fpu_xmm12
decl_stmt|;
name|xmm_reg_t
name|fpu_xmm13
decl_stmt|;
name|xmm_reg_t
name|fpu_xmm14
decl_stmt|;
name|xmm_reg_t
name|fpu_xmm15
decl_stmt|;
name|char
name|fpu_rsrv4
index|[
literal|6
operator|*
literal|16
index|]
decl_stmt|;
name|uint32_t
name|fpu_reserved1
decl_stmt|;
block|}
struct|;
struct|struct
name|x86_exception_state64_t
block|{
name|uint16_t
name|trapno
decl_stmt|;
name|uint16_t
name|cpu
decl_stmt|;
name|uint32_t
name|err
decl_stmt|;
name|uint64_t
name|faultvaddr
decl_stmt|;
block|}
struct|;
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|x86_thread_state64_t
modifier|&
name|x
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|rax
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|rbx
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|rcx
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|rdx
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|rdi
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|rsi
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|rbp
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|rsp
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|r8
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|r9
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|r10
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|r11
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|r12
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|r13
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|r14
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|r15
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|rip
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|rflags
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|cs
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|fs
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|gs
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|x86_float_state64_t
modifier|&
name|x
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|fpu_reserved
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|fpu_reserved
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// TODO swap: fp_control_t fpu_fcw;
comment|// TODO swap: fp_status_t fpu_fsw;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|fpu_fop
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|fpu_ip
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|fpu_cs
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|fpu_rsrv2
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|fpu_dp
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|fpu_ds
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|fpu_rsrv3
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|fpu_mxcsr
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|fpu_mxcsrmask
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|fpu_reserved1
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|x86_exception_state64_t
modifier|&
name|x
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|trapno
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|cpu
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|err
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|faultvaddr
argument_list|)
expr_stmt|;
block|}
struct|struct
name|x86_state_hdr_t
block|{
name|uint32_t
name|flavor
decl_stmt|;
name|uint32_t
name|count
decl_stmt|;
block|}
struct|;
struct|struct
name|x86_thread_state_t
block|{
name|x86_state_hdr_t
name|tsh
decl_stmt|;
union|union
block|{
name|x86_thread_state64_t
name|ts64
decl_stmt|;
block|}
name|uts
union|;
block|}
struct|;
struct|struct
name|x86_float_state_t
block|{
name|x86_state_hdr_t
name|fsh
decl_stmt|;
union|union
block|{
name|x86_float_state64_t
name|fs64
decl_stmt|;
block|}
name|ufs
union|;
block|}
struct|;
struct|struct
name|x86_exception_state_t
block|{
name|x86_state_hdr_t
name|esh
decl_stmt|;
union|union
block|{
name|x86_exception_state64_t
name|es64
decl_stmt|;
block|}
name|ues
union|;
block|}
struct|;
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|x86_state_hdr_t
modifier|&
name|x
parameter_list|)
block|{
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|flavor
argument_list|)
expr_stmt|;
name|sys
operator|::
name|swapByteOrder
argument_list|(
name|x
operator|.
name|count
argument_list|)
expr_stmt|;
block|}
enum|enum
name|X86ThreadFlavors
block|{
name|x86_THREAD_STATE32
init|=
literal|1
block|,
name|x86_FLOAT_STATE32
init|=
literal|2
block|,
name|x86_EXCEPTION_STATE32
init|=
literal|3
block|,
name|x86_THREAD_STATE64
init|=
literal|4
block|,
name|x86_FLOAT_STATE64
init|=
literal|5
block|,
name|x86_EXCEPTION_STATE64
init|=
literal|6
block|,
name|x86_THREAD_STATE
init|=
literal|7
block|,
name|x86_FLOAT_STATE
init|=
literal|8
block|,
name|x86_EXCEPTION_STATE
init|=
literal|9
block|,
name|x86_DEBUG_STATE32
init|=
literal|10
block|,
name|x86_DEBUG_STATE64
init|=
literal|11
block|,
name|x86_DEBUG_STATE
init|=
literal|12
block|}
enum|;
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|x86_thread_state_t
modifier|&
name|x
parameter_list|)
block|{
name|swapStruct
argument_list|(
name|x
operator|.
name|tsh
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|.
name|tsh
operator|.
name|flavor
operator|==
name|x86_THREAD_STATE64
condition|)
name|swapStruct
argument_list|(
name|x
operator|.
name|uts
operator|.
name|ts64
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|x86_float_state_t
modifier|&
name|x
parameter_list|)
block|{
name|swapStruct
argument_list|(
name|x
operator|.
name|fsh
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|.
name|fsh
operator|.
name|flavor
operator|==
name|x86_FLOAT_STATE64
condition|)
name|swapStruct
argument_list|(
name|x
operator|.
name|ufs
operator|.
name|fs64
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|swapStruct
parameter_list|(
name|x86_exception_state_t
modifier|&
name|x
parameter_list|)
block|{
name|swapStruct
argument_list|(
name|x
operator|.
name|esh
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|.
name|esh
operator|.
name|flavor
operator|==
name|x86_EXCEPTION_STATE64
condition|)
name|swapStruct
argument_list|(
name|x
operator|.
name|ues
operator|.
name|es64
argument_list|)
expr_stmt|;
block|}
specifier|const
name|uint32_t
name|x86_THREAD_STATE64_COUNT
init|=
sizeof|sizeof
argument_list|(
name|x86_thread_state64_t
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|uint32_t
argument_list|)
decl_stmt|;
specifier|const
name|uint32_t
name|x86_FLOAT_STATE64_COUNT
init|=
sizeof|sizeof
argument_list|(
name|x86_float_state64_t
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|uint32_t
argument_list|)
decl_stmt|;
specifier|const
name|uint32_t
name|x86_EXCEPTION_STATE64_COUNT
init|=
sizeof|sizeof
argument_list|(
name|x86_exception_state64_t
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|uint32_t
argument_list|)
decl_stmt|;
specifier|const
name|uint32_t
name|x86_THREAD_STATE_COUNT
init|=
sizeof|sizeof
argument_list|(
name|x86_thread_state_t
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|uint32_t
argument_list|)
decl_stmt|;
specifier|const
name|uint32_t
name|x86_FLOAT_STATE_COUNT
init|=
sizeof|sizeof
argument_list|(
name|x86_float_state_t
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|uint32_t
argument_list|)
decl_stmt|;
specifier|const
name|uint32_t
name|x86_EXCEPTION_STATE_COUNT
init|=
sizeof|sizeof
argument_list|(
name|x86_exception_state_t
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|uint32_t
argument_list|)
decl_stmt|;
block|}
comment|// end namespace MachO
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

