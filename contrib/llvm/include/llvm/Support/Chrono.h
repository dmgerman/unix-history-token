begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- llvm/Support/Chrono.h - Utilities for Timing Manipulation-*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_SUPPORT_CHRONO_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_SUPPORT_CHRONO_H
end_define

begin_include
include|#
directive|include
file|"llvm/Support/Compiler.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/FormatProviders.h"
end_include

begin_include
include|#
directive|include
file|<chrono>
end_include

begin_include
include|#
directive|include
file|<ctime>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|raw_ostream
decl_stmt|;
name|namespace
name|sys
block|{
comment|/// A time point on the system clock. This is provided for two reasons:
comment|/// - to insulate us agains subtle differences in behavoir to differences in
comment|///   system clock precision (which is implementation-defined and differs between
comment|///   platforms).
comment|/// - to shorten the type name
comment|/// The default precision is nanoseconds. If need a specific precision specify
comment|/// it explicitly. If unsure, use the default. If you need a time point on a
comment|/// clock other than the system_clock, use std::chrono directly.
name|template
operator|<
name|typename
name|D
operator|=
name|std
operator|::
name|chrono
operator|::
name|nanoseconds
operator|>
name|using
name|TimePoint
operator|=
name|std
operator|::
name|chrono
operator|::
name|time_point
operator|<
name|std
operator|::
name|chrono
operator|::
name|system_clock
operator|,
name|D
operator|>
expr_stmt|;
comment|/// Convert a TimePoint to std::time_t
name|LLVM_ATTRIBUTE_ALWAYS_INLINE
specifier|inline
name|std
operator|::
name|time_t
name|toTimeT
argument_list|(
argument|TimePoint<> TP
argument_list|)
block|{
name|using
name|namespace
name|std
operator|::
name|chrono
block|;
return|return
name|system_clock
operator|::
name|to_time_t
argument_list|(
name|time_point_cast
operator|<
name|system_clock
operator|::
name|time_point
operator|::
name|duration
operator|>
operator|(
name|TP
operator|)
argument_list|)
return|;
block|}
comment|/// Convert a std::time_t to a TimePoint
name|LLVM_ATTRIBUTE_ALWAYS_INLINE
specifier|inline
name|TimePoint
operator|<
name|std
operator|::
name|chrono
operator|::
name|seconds
operator|>
name|toTimePoint
argument_list|(
argument|std::time_t T
argument_list|)
block|{
name|using
name|namespace
name|std
operator|::
name|chrono
block|;
return|return
name|time_point_cast
operator|<
name|seconds
operator|>
operator|(
name|system_clock
operator|::
name|from_time_t
argument_list|(
name|T
argument_list|)
operator|)
return|;
block|}
block|}
comment|// namespace sys
name|raw_ostream
operator|&
name|operator
operator|<<
operator|(
name|raw_ostream
operator|&
name|OS
operator|,
name|sys
operator|::
name|TimePoint
operator|<
operator|>
name|TP
operator|)
expr_stmt|;
comment|/// Implementation of format_provider<T> for duration types.
comment|///
comment|/// The options string of a duration  type has the grammar:
comment|///
comment|///   duration_options  ::= [unit][show_unit [number_options]]
comment|///   unit              ::= `h`|`m`|`s`|`ms|`us`|`ns`
comment|///   show_unit         ::= `+` | `-`
comment|///   number_options    ::= options string for a integral or floating point type
comment|///
comment|///   Examples
comment|///   =================================
comment|///   |  options  | Input | Output    |
comment|///   =================================
comment|///   | ""        | 1s    | 1 s       |
comment|///   | "ms"      | 1s    | 1000 ms   |
comment|///   | "ms-"     | 1s    | 1000      |
comment|///   | "ms-n"    | 1s    | 1,000     |
comment|///   | ""        | 1.0s  | 1.00 s    |
comment|///   =================================
comment|///
comment|///  If the unit of the duration type is not one of the units specified above,
comment|///  it is still possible to format it, provided you explicitly request a
comment|///  display unit or you request that the unit is not displayed.
name|namespace
name|detail
block|{
name|template
operator|<
name|typename
name|Period
operator|>
expr|struct
name|unit
block|{
specifier|static
specifier|const
name|char
name|value
index|[]
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|Period
operator|>
specifier|const
name|char
name|unit
operator|<
name|Period
operator|>
operator|::
name|value
index|[]
operator|=
literal|""
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|unit
operator|<
name|std
operator|::
name|ratio
operator|<
literal|3600
operator|>>
block|{
specifier|static
specifier|const
name|char
name|value
index|[]
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|unit
operator|<
name|std
operator|::
name|ratio
operator|<
literal|60
operator|>>
block|{
specifier|static
specifier|const
name|char
name|value
index|[]
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|unit
operator|<
name|std
operator|::
name|ratio
operator|<
literal|1
operator|>>
block|{
specifier|static
specifier|const
name|char
name|value
index|[]
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|unit
operator|<
name|std
operator|::
name|milli
operator|>
block|{
specifier|static
specifier|const
name|char
name|value
index|[]
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|unit
operator|<
name|std
operator|::
name|micro
operator|>
block|{
specifier|static
specifier|const
name|char
name|value
index|[]
block|; }
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|unit
operator|<
name|std
operator|::
name|nano
operator|>
block|{
specifier|static
specifier|const
name|char
name|value
index|[]
block|; }
expr_stmt|;
block|}
comment|// namespace detail
name|template
operator|<
name|typename
name|Rep
operator|,
name|typename
name|Period
operator|>
expr|struct
name|format_provider
operator|<
name|std
operator|::
name|chrono
operator|::
name|duration
operator|<
name|Rep
operator|,
name|Period
operator|>>
block|{
name|private
operator|:
typedef|typedef
name|std
operator|::
name|chrono
operator|::
name|duration
operator|<
name|Rep
operator|,
name|Period
operator|>
name|Dur
expr_stmt|;
typedef|typedef
name|typename
name|std
operator|::
name|conditional
operator|<
name|std
operator|::
name|chrono
operator|::
name|treat_as_floating_point
operator|<
name|Rep
operator|>
operator|::
name|value
operator|,
name|double
operator|,
name|intmax_t
operator|>
operator|::
name|type
name|InternalRep
expr_stmt|;
name|template
operator|<
name|typename
name|AsPeriod
operator|>
specifier|static
name|InternalRep
name|getAs
argument_list|(
argument|const Dur&D
argument_list|)
block|{
name|using
name|namespace
name|std
operator|::
name|chrono
block|;
return|return
name|duration_cast
operator|<
name|duration
operator|<
name|InternalRep
operator|,
name|AsPeriod
operator|>>
operator|(
name|D
operator|)
operator|.
name|count
argument_list|()
return|;
block|}
specifier|static
name|std
operator|::
name|pair
operator|<
name|InternalRep
operator|,
name|StringRef
operator|>
name|consumeUnit
argument_list|(
argument|StringRef&Style
argument_list|,
argument|const Dur&D
argument_list|)
block|{
name|using
name|namespace
name|std
operator|::
name|chrono
block|;
if|if
condition|(
name|Style
operator|.
name|consume_front
argument_list|(
literal|"ns"
argument_list|)
condition|)
return|return
block|{
name|getAs
operator|<
name|std
operator|::
name|nano
operator|>
operator|(
name|D
operator|)
block|,
literal|"ns"
block|}
return|;
if|if
condition|(
name|Style
operator|.
name|consume_front
argument_list|(
literal|"us"
argument_list|)
condition|)
return|return
block|{
name|getAs
operator|<
name|std
operator|::
name|micro
operator|>
operator|(
name|D
operator|)
block|,
literal|"us"
block|}
return|;
if|if
condition|(
name|Style
operator|.
name|consume_front
argument_list|(
literal|"ms"
argument_list|)
condition|)
return|return
block|{
name|getAs
operator|<
name|std
operator|::
name|milli
operator|>
operator|(
name|D
operator|)
block|,
literal|"ms"
block|}
return|;
if|if
condition|(
name|Style
operator|.
name|consume_front
argument_list|(
literal|"s"
argument_list|)
condition|)
return|return
block|{
name|getAs
operator|<
name|std
operator|::
name|ratio
operator|<
literal|1
operator|>>
operator|(
name|D
operator|)
block|,
literal|"s"
block|}
return|;
if|if
condition|(
name|Style
operator|.
name|consume_front
argument_list|(
literal|"m"
argument_list|)
condition|)
return|return
block|{
name|getAs
operator|<
name|std
operator|::
name|ratio
operator|<
literal|60
operator|>>
operator|(
name|D
operator|)
block|,
literal|"m"
block|}
return|;
if|if
condition|(
name|Style
operator|.
name|consume_front
argument_list|(
literal|"h"
argument_list|)
condition|)
return|return
block|{
name|getAs
operator|<
name|std
operator|::
name|ratio
operator|<
literal|3600
operator|>>
operator|(
name|D
operator|)
block|,
literal|"h"
block|}
return|;
return|return
block|{
name|D
operator|.
name|count
argument_list|()
block|,
name|detail
operator|::
name|unit
operator|<
name|Period
operator|>
operator|::
name|value
block|}
return|;
block|}
end_decl_stmt

begin_function
specifier|static
name|bool
name|consumeShowUnit
parameter_list|(
name|StringRef
modifier|&
name|Style
parameter_list|)
block|{
if|if
condition|(
name|Style
operator|.
name|empty
argument_list|()
condition|)
return|return
name|true
return|;
if|if
condition|(
name|Style
operator|.
name|consume_front
argument_list|(
literal|"-"
argument_list|)
condition|)
return|return
name|false
return|;
if|if
condition|(
name|Style
operator|.
name|consume_front
argument_list|(
literal|"+"
argument_list|)
condition|)
return|return
name|true
return|;
name|assert
argument_list|(
literal|0
operator|&&
literal|"Unrecognised duration format"
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
end_function

begin_label
name|public
label|:
end_label

begin_decl_stmt
specifier|static
name|void
name|format
argument_list|(
specifier|const
name|Dur
operator|&
name|D
argument_list|,
name|llvm
operator|::
name|raw_ostream
operator|&
name|Stream
argument_list|,
name|StringRef
name|Style
argument_list|)
block|{
name|InternalRep
name|count
decl_stmt|;
name|StringRef
name|unit
decl_stmt|;
name|std
operator|::
name|tie
argument_list|(
name|count
argument_list|,
name|unit
argument_list|)
operator|=
name|consumeUnit
argument_list|(
name|Style
argument_list|,
name|D
argument_list|)
expr_stmt|;
name|bool
name|show_unit
init|=
name|consumeShowUnit
argument_list|(
name|Style
argument_list|)
decl_stmt|;
name|format_provider
operator|<
name|InternalRep
operator|>
operator|::
name|format
argument_list|(
name|count
argument_list|,
name|Stream
argument_list|,
name|Style
argument_list|)
expr_stmt|;
if|if
condition|(
name|show_unit
condition|)
block|{
name|assert
argument_list|(
operator|!
name|unit
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|Stream
operator|<<
literal|" "
operator|<<
name|unit
expr_stmt|;
block|}
block|}
end_decl_stmt

begin_comment
unit|};  }
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_SUPPORT_CHRONO_H
end_comment

end_unit

