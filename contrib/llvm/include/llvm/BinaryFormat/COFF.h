begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- llvm/BinaryFormat/COFF.h --------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file contains an definitions used in Windows COFF Files.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Structures and enums defined within this file where created using
end_comment

begin_comment
comment|// information from Microsoft's publicly available PE/COFF format document:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Microsoft Portable Executable and Common Object File Format Specification
end_comment

begin_comment
comment|// Revision 8.1 - February 15, 2008
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// As of 5/2/2010, hosted by Microsoft at:
end_comment

begin_comment
comment|// http://www.microsoft.com/whdc/system/platform/firmware/pecoff.mspx
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_BINARYFORMAT_COFF_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_BINARYFORMAT_COFF_H
end_define

begin_include
include|#
directive|include
file|"llvm/Support/DataTypes.h"
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<cstring>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|COFF
block|{
comment|// The maximum number of sections that a COFF object can have (inclusive).
specifier|const
name|int32_t
name|MaxNumberOfSections16
init|=
literal|65279
decl_stmt|;
comment|// The PE signature bytes that follows the DOS stub header.
specifier|static
specifier|const
name|char
name|PEMagic
index|[]
init|=
block|{
literal|'P'
block|,
literal|'E'
block|,
literal|'\0'
block|,
literal|'\0'
block|}
decl_stmt|;
specifier|static
specifier|const
name|char
name|BigObjMagic
index|[]
init|=
block|{
literal|'\xc7'
block|,
literal|'\xa1'
block|,
literal|'\xba'
block|,
literal|'\xd1'
block|,
literal|'\xee'
block|,
literal|'\xba'
block|,
literal|'\xa9'
block|,
literal|'\x4b'
block|,
literal|'\xaf'
block|,
literal|'\x20'
block|,
literal|'\xfa'
block|,
literal|'\xf6'
block|,
literal|'\x6a'
block|,
literal|'\xa4'
block|,
literal|'\xdc'
block|,
literal|'\xb8'
block|, }
decl_stmt|;
specifier|static
specifier|const
name|char
name|ClGlObjMagic
index|[]
init|=
block|{
literal|'\x38'
block|,
literal|'\xfe'
block|,
literal|'\xb3'
block|,
literal|'\x0c'
block|,
literal|'\xa5'
block|,
literal|'\xd9'
block|,
literal|'\xab'
block|,
literal|'\x4d'
block|,
literal|'\xac'
block|,
literal|'\x9b'
block|,
literal|'\xd6'
block|,
literal|'\xb6'
block|,
literal|'\x22'
block|,
literal|'\x26'
block|,
literal|'\x53'
block|,
literal|'\xc2'
block|, }
decl_stmt|;
comment|// The signature bytes that start a .res file.
specifier|static
specifier|const
name|char
name|WinResMagic
index|[]
init|=
block|{
literal|'\x00'
block|,
literal|'\x00'
block|,
literal|'\x00'
block|,
literal|'\x00'
block|,
literal|'\x20'
block|,
literal|'\x00'
block|,
literal|'\x00'
block|,
literal|'\x00'
block|,
literal|'\xff'
block|,
literal|'\xff'
block|,
literal|'\x00'
block|,
literal|'\x00'
block|,
literal|'\xff'
block|,
literal|'\xff'
block|,
literal|'\x00'
block|,
literal|'\x00'
block|, }
decl_stmt|;
comment|// Sizes in bytes of various things in the COFF format.
enum|enum
block|{
name|Header16Size
init|=
literal|20
block|,
name|Header32Size
init|=
literal|56
block|,
name|NameSize
init|=
literal|8
block|,
name|Symbol16Size
init|=
literal|18
block|,
name|Symbol32Size
init|=
literal|20
block|,
name|SectionSize
init|=
literal|40
block|,
name|RelocationSize
init|=
literal|10
block|}
enum|;
struct|struct
name|header
block|{
name|uint16_t
name|Machine
decl_stmt|;
name|int32_t
name|NumberOfSections
decl_stmt|;
name|uint32_t
name|TimeDateStamp
decl_stmt|;
name|uint32_t
name|PointerToSymbolTable
decl_stmt|;
name|uint32_t
name|NumberOfSymbols
decl_stmt|;
name|uint16_t
name|SizeOfOptionalHeader
decl_stmt|;
name|uint16_t
name|Characteristics
decl_stmt|;
block|}
struct|;
struct|struct
name|BigObjHeader
block|{
enum_decl|enum :
name|uint16_t
block|{
name|MinBigObjectVersion
init|=
literal|2
block|}
enum_decl|;
name|uint16_t
name|Sig1
decl_stmt|;
comment|///< Must be IMAGE_FILE_MACHINE_UNKNOWN (0).
name|uint16_t
name|Sig2
decl_stmt|;
comment|///< Must be 0xFFFF.
name|uint16_t
name|Version
decl_stmt|;
name|uint16_t
name|Machine
decl_stmt|;
name|uint32_t
name|TimeDateStamp
decl_stmt|;
name|uint8_t
name|UUID
index|[
literal|16
index|]
decl_stmt|;
name|uint32_t
name|unused1
decl_stmt|;
name|uint32_t
name|unused2
decl_stmt|;
name|uint32_t
name|unused3
decl_stmt|;
name|uint32_t
name|unused4
decl_stmt|;
name|uint32_t
name|NumberOfSections
decl_stmt|;
name|uint32_t
name|PointerToSymbolTable
decl_stmt|;
name|uint32_t
name|NumberOfSymbols
decl_stmt|;
block|}
struct|;
enum|enum
name|MachineTypes
block|{
name|MT_Invalid
init|=
literal|0xffff
block|,
name|IMAGE_FILE_MACHINE_UNKNOWN
init|=
literal|0x0
block|,
name|IMAGE_FILE_MACHINE_AM33
init|=
literal|0x13
block|,
name|IMAGE_FILE_MACHINE_AMD64
init|=
literal|0x8664
block|,
name|IMAGE_FILE_MACHINE_ARM
init|=
literal|0x1C0
block|,
name|IMAGE_FILE_MACHINE_ARMNT
init|=
literal|0x1C4
block|,
name|IMAGE_FILE_MACHINE_ARM64
init|=
literal|0xAA64
block|,
name|IMAGE_FILE_MACHINE_EBC
init|=
literal|0xEBC
block|,
name|IMAGE_FILE_MACHINE_I386
init|=
literal|0x14C
block|,
name|IMAGE_FILE_MACHINE_IA64
init|=
literal|0x200
block|,
name|IMAGE_FILE_MACHINE_M32R
init|=
literal|0x9041
block|,
name|IMAGE_FILE_MACHINE_MIPS16
init|=
literal|0x266
block|,
name|IMAGE_FILE_MACHINE_MIPSFPU
init|=
literal|0x366
block|,
name|IMAGE_FILE_MACHINE_MIPSFPU16
init|=
literal|0x466
block|,
name|IMAGE_FILE_MACHINE_POWERPC
init|=
literal|0x1F0
block|,
name|IMAGE_FILE_MACHINE_POWERPCFP
init|=
literal|0x1F1
block|,
name|IMAGE_FILE_MACHINE_R4000
init|=
literal|0x166
block|,
name|IMAGE_FILE_MACHINE_SH3
init|=
literal|0x1A2
block|,
name|IMAGE_FILE_MACHINE_SH3DSP
init|=
literal|0x1A3
block|,
name|IMAGE_FILE_MACHINE_SH4
init|=
literal|0x1A6
block|,
name|IMAGE_FILE_MACHINE_SH5
init|=
literal|0x1A8
block|,
name|IMAGE_FILE_MACHINE_THUMB
init|=
literal|0x1C2
block|,
name|IMAGE_FILE_MACHINE_WCEMIPSV2
init|=
literal|0x169
block|}
enum|;
enum|enum
name|Characteristics
block|{
name|C_Invalid
init|=
literal|0
block|,
comment|/// The file does not contain base relocations and must be loaded at its
comment|/// preferred base. If this cannot be done, the loader will error.
name|IMAGE_FILE_RELOCS_STRIPPED
init|=
literal|0x0001
block|,
comment|/// The file is valid and can be run.
name|IMAGE_FILE_EXECUTABLE_IMAGE
init|=
literal|0x0002
block|,
comment|/// COFF line numbers have been stripped. This is deprecated and should be
comment|/// 0.
name|IMAGE_FILE_LINE_NUMS_STRIPPED
init|=
literal|0x0004
block|,
comment|/// COFF symbol table entries for local symbols have been removed. This is
comment|/// deprecated and should be 0.
name|IMAGE_FILE_LOCAL_SYMS_STRIPPED
init|=
literal|0x0008
block|,
comment|/// Aggressively trim working set. This is deprecated and must be 0.
name|IMAGE_FILE_AGGRESSIVE_WS_TRIM
init|=
literal|0x0010
block|,
comment|/// Image can handle> 2GiB addresses.
name|IMAGE_FILE_LARGE_ADDRESS_AWARE
init|=
literal|0x0020
block|,
comment|/// Little endian: the LSB precedes the MSB in memory. This is deprecated
comment|/// and should be 0.
name|IMAGE_FILE_BYTES_REVERSED_LO
init|=
literal|0x0080
block|,
comment|/// Machine is based on a 32bit word architecture.
name|IMAGE_FILE_32BIT_MACHINE
init|=
literal|0x0100
block|,
comment|/// Debugging info has been removed.
name|IMAGE_FILE_DEBUG_STRIPPED
init|=
literal|0x0200
block|,
comment|/// If the image is on removable media, fully load it and copy it to swap.
name|IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP
init|=
literal|0x0400
block|,
comment|/// If the image is on network media, fully load it and copy it to swap.
name|IMAGE_FILE_NET_RUN_FROM_SWAP
init|=
literal|0x0800
block|,
comment|/// The image file is a system file, not a user program.
name|IMAGE_FILE_SYSTEM
init|=
literal|0x1000
block|,
comment|/// The image file is a DLL.
name|IMAGE_FILE_DLL
init|=
literal|0x2000
block|,
comment|/// This file should only be run on a uniprocessor machine.
name|IMAGE_FILE_UP_SYSTEM_ONLY
init|=
literal|0x4000
block|,
comment|/// Big endian: the MSB precedes the LSB in memory. This is deprecated
comment|/// and should be 0.
name|IMAGE_FILE_BYTES_REVERSED_HI
init|=
literal|0x8000
block|}
enum|;
enum|enum
name|ResourceTypeID
block|{
name|RID_Cursor
init|=
literal|1
block|,
name|RID_Bitmap
init|=
literal|2
block|,
name|RID_Icon
init|=
literal|3
block|,
name|RID_Menu
init|=
literal|4
block|,
name|RID_Dialog
init|=
literal|5
block|,
name|RID_String
init|=
literal|6
block|,
name|RID_FontDir
init|=
literal|7
block|,
name|RID_Font
init|=
literal|8
block|,
name|RID_Accelerator
init|=
literal|9
block|,
name|RID_RCData
init|=
literal|10
block|,
name|RID_MessageTable
init|=
literal|11
block|,
name|RID_Group_Cursor
init|=
literal|12
block|,
name|RID_Group_Icon
init|=
literal|14
block|,
name|RID_Version
init|=
literal|16
block|,
name|RID_DLGInclude
init|=
literal|17
block|,
name|RID_PlugPlay
init|=
literal|19
block|,
name|RID_VXD
init|=
literal|20
block|,
name|RID_AniCursor
init|=
literal|21
block|,
name|RID_AniIcon
init|=
literal|22
block|,
name|RID_HTML
init|=
literal|23
block|,
name|RID_Manifest
init|=
literal|24
block|, }
enum|;
struct|struct
name|symbol
block|{
name|char
name|Name
index|[
name|NameSize
index|]
decl_stmt|;
name|uint32_t
name|Value
decl_stmt|;
name|int32_t
name|SectionNumber
decl_stmt|;
name|uint16_t
name|Type
decl_stmt|;
name|uint8_t
name|StorageClass
decl_stmt|;
name|uint8_t
name|NumberOfAuxSymbols
decl_stmt|;
block|}
struct|;
enum|enum
name|SymbolSectionNumber
enum|:
name|int32_t
block|{
name|IMAGE_SYM_DEBUG
init|=
operator|-
literal|2
block|,
name|IMAGE_SYM_ABSOLUTE
init|=
operator|-
literal|1
block|,
name|IMAGE_SYM_UNDEFINED
init|=
literal|0
block|}
enum|;
comment|/// Storage class tells where and what the symbol represents
enum|enum
name|SymbolStorageClass
block|{
name|SSC_Invalid
init|=
literal|0xff
block|,
name|IMAGE_SYM_CLASS_END_OF_FUNCTION
init|=
operator|-
literal|1
block|,
comment|///< Physical end of function
name|IMAGE_SYM_CLASS_NULL
init|=
literal|0
block|,
comment|///< No symbol
name|IMAGE_SYM_CLASS_AUTOMATIC
init|=
literal|1
block|,
comment|///< Stack variable
name|IMAGE_SYM_CLASS_EXTERNAL
init|=
literal|2
block|,
comment|///< External symbol
name|IMAGE_SYM_CLASS_STATIC
init|=
literal|3
block|,
comment|///< Static
name|IMAGE_SYM_CLASS_REGISTER
init|=
literal|4
block|,
comment|///< Register variable
name|IMAGE_SYM_CLASS_EXTERNAL_DEF
init|=
literal|5
block|,
comment|///< External definition
name|IMAGE_SYM_CLASS_LABEL
init|=
literal|6
block|,
comment|///< Label
name|IMAGE_SYM_CLASS_UNDEFINED_LABEL
init|=
literal|7
block|,
comment|///< Undefined label
name|IMAGE_SYM_CLASS_MEMBER_OF_STRUCT
init|=
literal|8
block|,
comment|///< Member of structure
name|IMAGE_SYM_CLASS_ARGUMENT
init|=
literal|9
block|,
comment|///< Function argument
name|IMAGE_SYM_CLASS_STRUCT_TAG
init|=
literal|10
block|,
comment|///< Structure tag
name|IMAGE_SYM_CLASS_MEMBER_OF_UNION
init|=
literal|11
block|,
comment|///< Member of union
name|IMAGE_SYM_CLASS_UNION_TAG
init|=
literal|12
block|,
comment|///< Union tag
name|IMAGE_SYM_CLASS_TYPE_DEFINITION
init|=
literal|13
block|,
comment|///< Type definition
name|IMAGE_SYM_CLASS_UNDEFINED_STATIC
init|=
literal|14
block|,
comment|///< Undefined static
name|IMAGE_SYM_CLASS_ENUM_TAG
init|=
literal|15
block|,
comment|///< Enumeration tag
name|IMAGE_SYM_CLASS_MEMBER_OF_ENUM
init|=
literal|16
block|,
comment|///< Member of enumeration
name|IMAGE_SYM_CLASS_REGISTER_PARAM
init|=
literal|17
block|,
comment|///< Register parameter
name|IMAGE_SYM_CLASS_BIT_FIELD
init|=
literal|18
block|,
comment|///< Bit field
comment|/// ".bb" or ".eb" - beginning or end of block
name|IMAGE_SYM_CLASS_BLOCK
init|=
literal|100
block|,
comment|/// ".bf" or ".ef" - beginning or end of function
name|IMAGE_SYM_CLASS_FUNCTION
init|=
literal|101
block|,
name|IMAGE_SYM_CLASS_END_OF_STRUCT
init|=
literal|102
block|,
comment|///< End of structure
name|IMAGE_SYM_CLASS_FILE
init|=
literal|103
block|,
comment|///< File name
comment|/// Line number, reformatted as symbol
name|IMAGE_SYM_CLASS_SECTION
init|=
literal|104
block|,
name|IMAGE_SYM_CLASS_WEAK_EXTERNAL
init|=
literal|105
block|,
comment|///< Duplicate tag
comment|/// External symbol in dmert public lib
name|IMAGE_SYM_CLASS_CLR_TOKEN
init|=
literal|107
block|}
enum|;
enum|enum
name|SymbolBaseType
block|{
name|IMAGE_SYM_TYPE_NULL
init|=
literal|0
block|,
comment|///< No type information or unknown base type.
name|IMAGE_SYM_TYPE_VOID
init|=
literal|1
block|,
comment|///< Used with void pointers and functions.
name|IMAGE_SYM_TYPE_CHAR
init|=
literal|2
block|,
comment|///< A character (signed byte).
name|IMAGE_SYM_TYPE_SHORT
init|=
literal|3
block|,
comment|///< A 2-byte signed integer.
name|IMAGE_SYM_TYPE_INT
init|=
literal|4
block|,
comment|///< A natural integer type on the target.
name|IMAGE_SYM_TYPE_LONG
init|=
literal|5
block|,
comment|///< A 4-byte signed integer.
name|IMAGE_SYM_TYPE_FLOAT
init|=
literal|6
block|,
comment|///< A 4-byte floating-point number.
name|IMAGE_SYM_TYPE_DOUBLE
init|=
literal|7
block|,
comment|///< An 8-byte floating-point number.
name|IMAGE_SYM_TYPE_STRUCT
init|=
literal|8
block|,
comment|///< A structure.
name|IMAGE_SYM_TYPE_UNION
init|=
literal|9
block|,
comment|///< An union.
name|IMAGE_SYM_TYPE_ENUM
init|=
literal|10
block|,
comment|///< An enumerated type.
name|IMAGE_SYM_TYPE_MOE
init|=
literal|11
block|,
comment|///< A member of enumeration (a specific value).
name|IMAGE_SYM_TYPE_BYTE
init|=
literal|12
block|,
comment|///< A byte; unsigned 1-byte integer.
name|IMAGE_SYM_TYPE_WORD
init|=
literal|13
block|,
comment|///< A word; unsigned 2-byte integer.
name|IMAGE_SYM_TYPE_UINT
init|=
literal|14
block|,
comment|///< An unsigned integer of natural size.
name|IMAGE_SYM_TYPE_DWORD
init|=
literal|15
comment|///< An unsigned 4-byte integer.
block|}
enum|;
enum|enum
name|SymbolComplexType
block|{
name|IMAGE_SYM_DTYPE_NULL
init|=
literal|0
block|,
comment|///< No complex type; simple scalar variable.
name|IMAGE_SYM_DTYPE_POINTER
init|=
literal|1
block|,
comment|///< A pointer to base type.
name|IMAGE_SYM_DTYPE_FUNCTION
init|=
literal|2
block|,
comment|///< A function that returns a base type.
name|IMAGE_SYM_DTYPE_ARRAY
init|=
literal|3
block|,
comment|///< An array of base type.
comment|/// Type is formed as (base + (derived<< SCT_COMPLEX_TYPE_SHIFT))
name|SCT_COMPLEX_TYPE_SHIFT
init|=
literal|4
block|}
enum|;
enum|enum
name|AuxSymbolType
block|{
name|IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF
init|=
literal|1
block|}
enum|;
struct|struct
name|section
block|{
name|char
name|Name
index|[
name|NameSize
index|]
decl_stmt|;
name|uint32_t
name|VirtualSize
decl_stmt|;
name|uint32_t
name|VirtualAddress
decl_stmt|;
name|uint32_t
name|SizeOfRawData
decl_stmt|;
name|uint32_t
name|PointerToRawData
decl_stmt|;
name|uint32_t
name|PointerToRelocations
decl_stmt|;
name|uint32_t
name|PointerToLineNumbers
decl_stmt|;
name|uint16_t
name|NumberOfRelocations
decl_stmt|;
name|uint16_t
name|NumberOfLineNumbers
decl_stmt|;
name|uint32_t
name|Characteristics
decl_stmt|;
block|}
struct|;
enum|enum
name|SectionCharacteristics
enum|:
name|uint32_t
block|{
name|SC_Invalid
init|=
literal|0xffffffff
block|,
name|IMAGE_SCN_TYPE_NOLOAD
init|=
literal|0x00000002
block|,
name|IMAGE_SCN_TYPE_NO_PAD
init|=
literal|0x00000008
block|,
name|IMAGE_SCN_CNT_CODE
init|=
literal|0x00000020
block|,
name|IMAGE_SCN_CNT_INITIALIZED_DATA
init|=
literal|0x00000040
block|,
name|IMAGE_SCN_CNT_UNINITIALIZED_DATA
init|=
literal|0x00000080
block|,
name|IMAGE_SCN_LNK_OTHER
init|=
literal|0x00000100
block|,
name|IMAGE_SCN_LNK_INFO
init|=
literal|0x00000200
block|,
name|IMAGE_SCN_LNK_REMOVE
init|=
literal|0x00000800
block|,
name|IMAGE_SCN_LNK_COMDAT
init|=
literal|0x00001000
block|,
name|IMAGE_SCN_GPREL
init|=
literal|0x00008000
block|,
name|IMAGE_SCN_MEM_PURGEABLE
init|=
literal|0x00020000
block|,
name|IMAGE_SCN_MEM_16BIT
init|=
literal|0x00020000
block|,
name|IMAGE_SCN_MEM_LOCKED
init|=
literal|0x00040000
block|,
name|IMAGE_SCN_MEM_PRELOAD
init|=
literal|0x00080000
block|,
name|IMAGE_SCN_ALIGN_1BYTES
init|=
literal|0x00100000
block|,
name|IMAGE_SCN_ALIGN_2BYTES
init|=
literal|0x00200000
block|,
name|IMAGE_SCN_ALIGN_4BYTES
init|=
literal|0x00300000
block|,
name|IMAGE_SCN_ALIGN_8BYTES
init|=
literal|0x00400000
block|,
name|IMAGE_SCN_ALIGN_16BYTES
init|=
literal|0x00500000
block|,
name|IMAGE_SCN_ALIGN_32BYTES
init|=
literal|0x00600000
block|,
name|IMAGE_SCN_ALIGN_64BYTES
init|=
literal|0x00700000
block|,
name|IMAGE_SCN_ALIGN_128BYTES
init|=
literal|0x00800000
block|,
name|IMAGE_SCN_ALIGN_256BYTES
init|=
literal|0x00900000
block|,
name|IMAGE_SCN_ALIGN_512BYTES
init|=
literal|0x00A00000
block|,
name|IMAGE_SCN_ALIGN_1024BYTES
init|=
literal|0x00B00000
block|,
name|IMAGE_SCN_ALIGN_2048BYTES
init|=
literal|0x00C00000
block|,
name|IMAGE_SCN_ALIGN_4096BYTES
init|=
literal|0x00D00000
block|,
name|IMAGE_SCN_ALIGN_8192BYTES
init|=
literal|0x00E00000
block|,
name|IMAGE_SCN_LNK_NRELOC_OVFL
init|=
literal|0x01000000
block|,
name|IMAGE_SCN_MEM_DISCARDABLE
init|=
literal|0x02000000
block|,
name|IMAGE_SCN_MEM_NOT_CACHED
init|=
literal|0x04000000
block|,
name|IMAGE_SCN_MEM_NOT_PAGED
init|=
literal|0x08000000
block|,
name|IMAGE_SCN_MEM_SHARED
init|=
literal|0x10000000
block|,
name|IMAGE_SCN_MEM_EXECUTE
init|=
literal|0x20000000
block|,
name|IMAGE_SCN_MEM_READ
init|=
literal|0x40000000
block|,
name|IMAGE_SCN_MEM_WRITE
init|=
literal|0x80000000
block|}
enum|;
struct|struct
name|relocation
block|{
name|uint32_t
name|VirtualAddress
decl_stmt|;
name|uint32_t
name|SymbolTableIndex
decl_stmt|;
name|uint16_t
name|Type
decl_stmt|;
block|}
struct|;
enum|enum
name|RelocationTypeI386
block|{
name|IMAGE_REL_I386_ABSOLUTE
init|=
literal|0x0000
block|,
name|IMAGE_REL_I386_DIR16
init|=
literal|0x0001
block|,
name|IMAGE_REL_I386_REL16
init|=
literal|0x0002
block|,
name|IMAGE_REL_I386_DIR32
init|=
literal|0x0006
block|,
name|IMAGE_REL_I386_DIR32NB
init|=
literal|0x0007
block|,
name|IMAGE_REL_I386_SEG12
init|=
literal|0x0009
block|,
name|IMAGE_REL_I386_SECTION
init|=
literal|0x000A
block|,
name|IMAGE_REL_I386_SECREL
init|=
literal|0x000B
block|,
name|IMAGE_REL_I386_TOKEN
init|=
literal|0x000C
block|,
name|IMAGE_REL_I386_SECREL7
init|=
literal|0x000D
block|,
name|IMAGE_REL_I386_REL32
init|=
literal|0x0014
block|}
enum|;
enum|enum
name|RelocationTypeAMD64
block|{
name|IMAGE_REL_AMD64_ABSOLUTE
init|=
literal|0x0000
block|,
name|IMAGE_REL_AMD64_ADDR64
init|=
literal|0x0001
block|,
name|IMAGE_REL_AMD64_ADDR32
init|=
literal|0x0002
block|,
name|IMAGE_REL_AMD64_ADDR32NB
init|=
literal|0x0003
block|,
name|IMAGE_REL_AMD64_REL32
init|=
literal|0x0004
block|,
name|IMAGE_REL_AMD64_REL32_1
init|=
literal|0x0005
block|,
name|IMAGE_REL_AMD64_REL32_2
init|=
literal|0x0006
block|,
name|IMAGE_REL_AMD64_REL32_3
init|=
literal|0x0007
block|,
name|IMAGE_REL_AMD64_REL32_4
init|=
literal|0x0008
block|,
name|IMAGE_REL_AMD64_REL32_5
init|=
literal|0x0009
block|,
name|IMAGE_REL_AMD64_SECTION
init|=
literal|0x000A
block|,
name|IMAGE_REL_AMD64_SECREL
init|=
literal|0x000B
block|,
name|IMAGE_REL_AMD64_SECREL7
init|=
literal|0x000C
block|,
name|IMAGE_REL_AMD64_TOKEN
init|=
literal|0x000D
block|,
name|IMAGE_REL_AMD64_SREL32
init|=
literal|0x000E
block|,
name|IMAGE_REL_AMD64_PAIR
init|=
literal|0x000F
block|,
name|IMAGE_REL_AMD64_SSPAN32
init|=
literal|0x0010
block|}
enum|;
enum|enum
name|RelocationTypesARM
block|{
name|IMAGE_REL_ARM_ABSOLUTE
init|=
literal|0x0000
block|,
name|IMAGE_REL_ARM_ADDR32
init|=
literal|0x0001
block|,
name|IMAGE_REL_ARM_ADDR32NB
init|=
literal|0x0002
block|,
name|IMAGE_REL_ARM_BRANCH24
init|=
literal|0x0003
block|,
name|IMAGE_REL_ARM_BRANCH11
init|=
literal|0x0004
block|,
name|IMAGE_REL_ARM_TOKEN
init|=
literal|0x0005
block|,
name|IMAGE_REL_ARM_BLX24
init|=
literal|0x0008
block|,
name|IMAGE_REL_ARM_BLX11
init|=
literal|0x0009
block|,
name|IMAGE_REL_ARM_SECTION
init|=
literal|0x000E
block|,
name|IMAGE_REL_ARM_SECREL
init|=
literal|0x000F
block|,
name|IMAGE_REL_ARM_MOV32A
init|=
literal|0x0010
block|,
name|IMAGE_REL_ARM_MOV32T
init|=
literal|0x0011
block|,
name|IMAGE_REL_ARM_BRANCH20T
init|=
literal|0x0012
block|,
name|IMAGE_REL_ARM_BRANCH24T
init|=
literal|0x0014
block|,
name|IMAGE_REL_ARM_BLX23T
init|=
literal|0x0015
block|}
enum|;
enum|enum
name|RelocationTypesARM64
block|{
name|IMAGE_REL_ARM64_ABSOLUTE
init|=
literal|0x0000
block|,
name|IMAGE_REL_ARM64_ADDR32
init|=
literal|0x0001
block|,
name|IMAGE_REL_ARM64_ADDR32NB
init|=
literal|0x0002
block|,
name|IMAGE_REL_ARM64_BRANCH26
init|=
literal|0x0003
block|,
name|IMAGE_REL_ARM64_PAGEBASE_REL2
init|=
literal|0x0004
block|,
name|IMAGE_REL_ARM64_REL21
init|=
literal|0x0005
block|,
name|IMAGE_REL_ARM64_PAGEOFFSET_12A
init|=
literal|0x0006
block|,
name|IMAGE_REL_ARM64_PAGEOFFSET_12L
init|=
literal|0x0007
block|,
name|IMAGE_REL_ARM64_SECREL
init|=
literal|0x0008
block|,
name|IMAGE_REL_ARM64_SECREL_LOW12A
init|=
literal|0x0009
block|,
name|IMAGE_REL_ARM64_SECREL_HIGH12A
init|=
literal|0x000A
block|,
name|IMAGE_REL_ARM64_SECREL_LOW12L
init|=
literal|0x000B
block|,
name|IMAGE_REL_ARM64_TOKEN
init|=
literal|0x000C
block|,
name|IMAGE_REL_ARM64_SECTION
init|=
literal|0x000D
block|,
name|IMAGE_REL_ARM64_ADDR64
init|=
literal|0x000E
block|,
name|IMAGE_REL_ARM64_BRANCH19
init|=
literal|0x000F
block|,
name|IMAGE_REL_ARM64_BRANCH14
init|=
literal|0x0010
block|, }
enum|;
enum|enum
name|COMDATType
block|{
name|IMAGE_COMDAT_SELECT_NODUPLICATES
init|=
literal|1
block|,
name|IMAGE_COMDAT_SELECT_ANY
block|,
name|IMAGE_COMDAT_SELECT_SAME_SIZE
block|,
name|IMAGE_COMDAT_SELECT_EXACT_MATCH
block|,
name|IMAGE_COMDAT_SELECT_ASSOCIATIVE
block|,
name|IMAGE_COMDAT_SELECT_LARGEST
block|,
name|IMAGE_COMDAT_SELECT_NEWEST
block|}
enum|;
comment|// Auxiliary Symbol Formats
struct|struct
name|AuxiliaryFunctionDefinition
block|{
name|uint32_t
name|TagIndex
decl_stmt|;
name|uint32_t
name|TotalSize
decl_stmt|;
name|uint32_t
name|PointerToLinenumber
decl_stmt|;
name|uint32_t
name|PointerToNextFunction
decl_stmt|;
name|char
name|unused
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
struct|struct
name|AuxiliarybfAndefSymbol
block|{
name|uint8_t
name|unused1
index|[
literal|4
index|]
decl_stmt|;
name|uint16_t
name|Linenumber
decl_stmt|;
name|uint8_t
name|unused2
index|[
literal|6
index|]
decl_stmt|;
name|uint32_t
name|PointerToNextFunction
decl_stmt|;
name|uint8_t
name|unused3
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
struct|struct
name|AuxiliaryWeakExternal
block|{
name|uint32_t
name|TagIndex
decl_stmt|;
name|uint32_t
name|Characteristics
decl_stmt|;
name|uint8_t
name|unused
index|[
literal|10
index|]
decl_stmt|;
block|}
struct|;
enum|enum
name|WeakExternalCharacteristics
block|{
name|IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY
init|=
literal|1
block|,
name|IMAGE_WEAK_EXTERN_SEARCH_LIBRARY
init|=
literal|2
block|,
name|IMAGE_WEAK_EXTERN_SEARCH_ALIAS
init|=
literal|3
block|}
enum|;
struct|struct
name|AuxiliarySectionDefinition
block|{
name|uint32_t
name|Length
decl_stmt|;
name|uint16_t
name|NumberOfRelocations
decl_stmt|;
name|uint16_t
name|NumberOfLinenumbers
decl_stmt|;
name|uint32_t
name|CheckSum
decl_stmt|;
name|uint32_t
name|Number
decl_stmt|;
name|uint8_t
name|Selection
decl_stmt|;
name|char
name|unused
decl_stmt|;
block|}
struct|;
struct|struct
name|AuxiliaryCLRToken
block|{
name|uint8_t
name|AuxType
decl_stmt|;
name|uint8_t
name|unused1
decl_stmt|;
name|uint32_t
name|SymbolTableIndex
decl_stmt|;
name|char
name|unused2
index|[
literal|12
index|]
decl_stmt|;
block|}
struct|;
union|union
name|Auxiliary
block|{
name|AuxiliaryFunctionDefinition
name|FunctionDefinition
decl_stmt|;
name|AuxiliarybfAndefSymbol
name|bfAndefSymbol
decl_stmt|;
name|AuxiliaryWeakExternal
name|WeakExternal
decl_stmt|;
name|AuxiliarySectionDefinition
name|SectionDefinition
decl_stmt|;
block|}
union|;
comment|/// @brief The Import Directory Table.
comment|///
comment|/// There is a single array of these and one entry per imported DLL.
struct|struct
name|ImportDirectoryTableEntry
block|{
name|uint32_t
name|ImportLookupTableRVA
decl_stmt|;
name|uint32_t
name|TimeDateStamp
decl_stmt|;
name|uint32_t
name|ForwarderChain
decl_stmt|;
name|uint32_t
name|NameRVA
decl_stmt|;
name|uint32_t
name|ImportAddressTableRVA
decl_stmt|;
block|}
struct|;
comment|/// @brief The PE32 Import Lookup Table.
comment|///
comment|/// There is an array of these for each imported DLL. It represents either
comment|/// the ordinal to import from the target DLL, or a name to lookup and import
comment|/// from the target DLL.
comment|///
comment|/// This also happens to be the same format used by the Import Address Table
comment|/// when it is initially written out to the image.
struct|struct
name|ImportLookupTableEntry32
block|{
name|uint32_t
name|data
decl_stmt|;
comment|/// @brief Is this entry specified by ordinal, or name?
name|bool
name|isOrdinal
argument_list|()
specifier|const
block|{
return|return
name|data
operator|&
literal|0x80000000
return|;
block|}
comment|/// @brief Get the ordinal value of this entry. isOrdinal must be true.
name|uint16_t
name|getOrdinal
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isOrdinal
argument_list|()
operator|&&
literal|"ILT entry is not an ordinal!"
argument_list|)
block|;
return|return
name|data
operator|&
literal|0xFFFF
return|;
block|}
comment|/// @brief Set the ordinal value and set isOrdinal to true.
name|void
name|setOrdinal
parameter_list|(
name|uint16_t
name|o
parameter_list|)
block|{
name|data
operator|=
name|o
expr_stmt|;
name|data
operator||=
literal|0x80000000
expr_stmt|;
block|}
comment|/// @brief Get the Hint/Name entry RVA. isOrdinal must be false.
name|uint32_t
name|getHintNameRVA
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
operator|!
name|isOrdinal
argument_list|()
operator|&&
literal|"ILT entry is not a Hint/Name RVA!"
argument_list|)
block|;
return|return
name|data
return|;
block|}
comment|/// @brief Set the Hint/Name entry RVA and set isOrdinal to false.
name|void
name|setHintNameRVA
parameter_list|(
name|uint32_t
name|rva
parameter_list|)
block|{
name|data
operator|=
name|rva
expr_stmt|;
block|}
block|}
struct|;
comment|/// @brief The DOS compatible header at the front of all PEs.
struct|struct
name|DOSHeader
block|{
name|uint16_t
name|Magic
decl_stmt|;
name|uint16_t
name|UsedBytesInTheLastPage
decl_stmt|;
name|uint16_t
name|FileSizeInPages
decl_stmt|;
name|uint16_t
name|NumberOfRelocationItems
decl_stmt|;
name|uint16_t
name|HeaderSizeInParagraphs
decl_stmt|;
name|uint16_t
name|MinimumExtraParagraphs
decl_stmt|;
name|uint16_t
name|MaximumExtraParagraphs
decl_stmt|;
name|uint16_t
name|InitialRelativeSS
decl_stmt|;
name|uint16_t
name|InitialSP
decl_stmt|;
name|uint16_t
name|Checksum
decl_stmt|;
name|uint16_t
name|InitialIP
decl_stmt|;
name|uint16_t
name|InitialRelativeCS
decl_stmt|;
name|uint16_t
name|AddressOfRelocationTable
decl_stmt|;
name|uint16_t
name|OverlayNumber
decl_stmt|;
name|uint16_t
name|Reserved
index|[
literal|4
index|]
decl_stmt|;
name|uint16_t
name|OEMid
decl_stmt|;
name|uint16_t
name|OEMinfo
decl_stmt|;
name|uint16_t
name|Reserved2
index|[
literal|10
index|]
decl_stmt|;
name|uint32_t
name|AddressOfNewExeHeader
decl_stmt|;
block|}
struct|;
struct|struct
name|PE32Header
block|{
enum|enum
block|{
name|PE32
init|=
literal|0x10b
block|,
name|PE32_PLUS
init|=
literal|0x20b
block|}
enum|;
name|uint16_t
name|Magic
decl_stmt|;
name|uint8_t
name|MajorLinkerVersion
decl_stmt|;
name|uint8_t
name|MinorLinkerVersion
decl_stmt|;
name|uint32_t
name|SizeOfCode
decl_stmt|;
name|uint32_t
name|SizeOfInitializedData
decl_stmt|;
name|uint32_t
name|SizeOfUninitializedData
decl_stmt|;
name|uint32_t
name|AddressOfEntryPoint
decl_stmt|;
comment|// RVA
name|uint32_t
name|BaseOfCode
decl_stmt|;
comment|// RVA
name|uint32_t
name|BaseOfData
decl_stmt|;
comment|// RVA
name|uint32_t
name|ImageBase
decl_stmt|;
name|uint32_t
name|SectionAlignment
decl_stmt|;
name|uint32_t
name|FileAlignment
decl_stmt|;
name|uint16_t
name|MajorOperatingSystemVersion
decl_stmt|;
name|uint16_t
name|MinorOperatingSystemVersion
decl_stmt|;
name|uint16_t
name|MajorImageVersion
decl_stmt|;
name|uint16_t
name|MinorImageVersion
decl_stmt|;
name|uint16_t
name|MajorSubsystemVersion
decl_stmt|;
name|uint16_t
name|MinorSubsystemVersion
decl_stmt|;
name|uint32_t
name|Win32VersionValue
decl_stmt|;
name|uint32_t
name|SizeOfImage
decl_stmt|;
name|uint32_t
name|SizeOfHeaders
decl_stmt|;
name|uint32_t
name|CheckSum
decl_stmt|;
name|uint16_t
name|Subsystem
decl_stmt|;
comment|// FIXME: This should be DllCharacteristics to match the COFF spec.
name|uint16_t
name|DLLCharacteristics
decl_stmt|;
name|uint32_t
name|SizeOfStackReserve
decl_stmt|;
name|uint32_t
name|SizeOfStackCommit
decl_stmt|;
name|uint32_t
name|SizeOfHeapReserve
decl_stmt|;
name|uint32_t
name|SizeOfHeapCommit
decl_stmt|;
name|uint32_t
name|LoaderFlags
decl_stmt|;
comment|// FIXME: This should be NumberOfRvaAndSizes to match the COFF spec.
name|uint32_t
name|NumberOfRvaAndSize
decl_stmt|;
block|}
struct|;
struct|struct
name|DataDirectory
block|{
name|uint32_t
name|RelativeVirtualAddress
decl_stmt|;
name|uint32_t
name|Size
decl_stmt|;
block|}
struct|;
enum|enum
name|DataDirectoryIndex
block|{
name|EXPORT_TABLE
init|=
literal|0
block|,
name|IMPORT_TABLE
block|,
name|RESOURCE_TABLE
block|,
name|EXCEPTION_TABLE
block|,
name|CERTIFICATE_TABLE
block|,
name|BASE_RELOCATION_TABLE
block|,
name|DEBUG_DIRECTORY
block|,
name|ARCHITECTURE
block|,
name|GLOBAL_PTR
block|,
name|TLS_TABLE
block|,
name|LOAD_CONFIG_TABLE
block|,
name|BOUND_IMPORT
block|,
name|IAT
block|,
name|DELAY_IMPORT_DESCRIPTOR
block|,
name|CLR_RUNTIME_HEADER
block|,
name|NUM_DATA_DIRECTORIES
block|}
enum|;
enum|enum
name|WindowsSubsystem
block|{
name|IMAGE_SUBSYSTEM_UNKNOWN
init|=
literal|0
block|,
comment|///< An unknown subsystem.
name|IMAGE_SUBSYSTEM_NATIVE
init|=
literal|1
block|,
comment|///< Device drivers and native Windows processes
name|IMAGE_SUBSYSTEM_WINDOWS_GUI
init|=
literal|2
block|,
comment|///< The Windows GUI subsystem.
name|IMAGE_SUBSYSTEM_WINDOWS_CUI
init|=
literal|3
block|,
comment|///< The Windows character subsystem.
name|IMAGE_SUBSYSTEM_OS2_CUI
init|=
literal|5
block|,
comment|///< The OS/2 character subsytem.
name|IMAGE_SUBSYSTEM_POSIX_CUI
init|=
literal|7
block|,
comment|///< The POSIX character subsystem.
name|IMAGE_SUBSYSTEM_NATIVE_WINDOWS
init|=
literal|8
block|,
comment|///< Native Windows 9x driver.
name|IMAGE_SUBSYSTEM_WINDOWS_CE_GUI
init|=
literal|9
block|,
comment|///< Windows CE.
name|IMAGE_SUBSYSTEM_EFI_APPLICATION
init|=
literal|10
block|,
comment|///< An EFI application.
name|IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER
init|=
literal|11
block|,
comment|///< An EFI driver with boot
comment|///  services.
name|IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER
init|=
literal|12
block|,
comment|///< An EFI driver with run-time
comment|///  services.
name|IMAGE_SUBSYSTEM_EFI_ROM
init|=
literal|13
block|,
comment|///< An EFI ROM image.
name|IMAGE_SUBSYSTEM_XBOX
init|=
literal|14
block|,
comment|///< XBOX.
name|IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION
init|=
literal|16
comment|///< A BCD application.
block|}
enum|;
enum|enum
name|DLLCharacteristics
block|{
comment|/// ASLR with 64 bit address space.
name|IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA
init|=
literal|0x0020
block|,
comment|/// DLL can be relocated at load time.
name|IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE
init|=
literal|0x0040
block|,
comment|/// Code integrity checks are enforced.
name|IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY
init|=
literal|0x0080
block|,
comment|///< Image is NX compatible.
name|IMAGE_DLL_CHARACTERISTICS_NX_COMPAT
init|=
literal|0x0100
block|,
comment|/// Isolation aware, but do not isolate the image.
name|IMAGE_DLL_CHARACTERISTICS_NO_ISOLATION
init|=
literal|0x0200
block|,
comment|/// Does not use structured exception handling (SEH). No SEH handler may be
comment|/// called in this image.
name|IMAGE_DLL_CHARACTERISTICS_NO_SEH
init|=
literal|0x0400
block|,
comment|/// Do not bind the image.
name|IMAGE_DLL_CHARACTERISTICS_NO_BIND
init|=
literal|0x0800
block|,
comment|///< Image should execute in an AppContainer.
name|IMAGE_DLL_CHARACTERISTICS_APPCONTAINER
init|=
literal|0x1000
block|,
comment|///< A WDM driver.
name|IMAGE_DLL_CHARACTERISTICS_WDM_DRIVER
init|=
literal|0x2000
block|,
comment|///< Image supports Control Flow Guard.
name|IMAGE_DLL_CHARACTERISTICS_GUARD_CF
init|=
literal|0x4000
block|,
comment|/// Terminal Server aware.
name|IMAGE_DLL_CHARACTERISTICS_TERMINAL_SERVER_AWARE
init|=
literal|0x8000
block|}
enum|;
enum|enum
name|DebugType
block|{
name|IMAGE_DEBUG_TYPE_UNKNOWN
init|=
literal|0
block|,
name|IMAGE_DEBUG_TYPE_COFF
init|=
literal|1
block|,
name|IMAGE_DEBUG_TYPE_CODEVIEW
init|=
literal|2
block|,
name|IMAGE_DEBUG_TYPE_FPO
init|=
literal|3
block|,
name|IMAGE_DEBUG_TYPE_MISC
init|=
literal|4
block|,
name|IMAGE_DEBUG_TYPE_EXCEPTION
init|=
literal|5
block|,
name|IMAGE_DEBUG_TYPE_FIXUP
init|=
literal|6
block|,
name|IMAGE_DEBUG_TYPE_OMAP_TO_SRC
init|=
literal|7
block|,
name|IMAGE_DEBUG_TYPE_OMAP_FROM_SRC
init|=
literal|8
block|,
name|IMAGE_DEBUG_TYPE_BORLAND
init|=
literal|9
block|,
name|IMAGE_DEBUG_TYPE_RESERVED10
init|=
literal|10
block|,
name|IMAGE_DEBUG_TYPE_CLSID
init|=
literal|11
block|,
name|IMAGE_DEBUG_TYPE_VC_FEATURE
init|=
literal|12
block|,
name|IMAGE_DEBUG_TYPE_POGO
init|=
literal|13
block|,
name|IMAGE_DEBUG_TYPE_ILTCG
init|=
literal|14
block|,
name|IMAGE_DEBUG_TYPE_MPX
init|=
literal|15
block|,
name|IMAGE_DEBUG_TYPE_REPRO
init|=
literal|16
block|, }
enum|;
enum|enum
name|BaseRelocationType
block|{
name|IMAGE_REL_BASED_ABSOLUTE
init|=
literal|0
block|,
name|IMAGE_REL_BASED_HIGH
init|=
literal|1
block|,
name|IMAGE_REL_BASED_LOW
init|=
literal|2
block|,
name|IMAGE_REL_BASED_HIGHLOW
init|=
literal|3
block|,
name|IMAGE_REL_BASED_HIGHADJ
init|=
literal|4
block|,
name|IMAGE_REL_BASED_MIPS_JMPADDR
init|=
literal|5
block|,
name|IMAGE_REL_BASED_ARM_MOV32A
init|=
literal|5
block|,
name|IMAGE_REL_BASED_ARM_MOV32T
init|=
literal|7
block|,
name|IMAGE_REL_BASED_MIPS_JMPADDR16
init|=
literal|9
block|,
name|IMAGE_REL_BASED_DIR64
init|=
literal|10
block|}
enum|;
enum|enum
name|ImportType
block|{
name|IMPORT_CODE
init|=
literal|0
block|,
name|IMPORT_DATA
init|=
literal|1
block|,
name|IMPORT_CONST
init|=
literal|2
block|}
enum|;
enum|enum
name|ImportNameType
block|{
comment|/// Import is by ordinal. This indicates that the value in the Ordinal/Hint
comment|/// field of the import header is the import's ordinal. If this constant is
comment|/// not specified, then the Ordinal/Hint field should always be interpreted
comment|/// as the import's hint.
name|IMPORT_ORDINAL
init|=
literal|0
block|,
comment|/// The import name is identical to the public symbol name
name|IMPORT_NAME
init|=
literal|1
block|,
comment|/// The import name is the public symbol name, but skipping the leading ?,
comment|/// @, or optionally _.
name|IMPORT_NAME_NOPREFIX
init|=
literal|2
block|,
comment|/// The import name is the public symbol name, but skipping the leading ?,
comment|/// @, or optionally _, and truncating at the first @.
name|IMPORT_NAME_UNDECORATE
init|=
literal|3
block|}
enum|;
struct|struct
name|ImportHeader
block|{
name|uint16_t
name|Sig1
decl_stmt|;
comment|///< Must be IMAGE_FILE_MACHINE_UNKNOWN (0).
name|uint16_t
name|Sig2
decl_stmt|;
comment|///< Must be 0xFFFF.
name|uint16_t
name|Version
decl_stmt|;
name|uint16_t
name|Machine
decl_stmt|;
name|uint32_t
name|TimeDateStamp
decl_stmt|;
name|uint32_t
name|SizeOfData
decl_stmt|;
name|uint16_t
name|OrdinalHint
decl_stmt|;
name|uint16_t
name|TypeInfo
decl_stmt|;
name|ImportType
name|getType
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|ImportType
operator|>
operator|(
name|TypeInfo
operator|&
literal|0x3
operator|)
return|;
block|}
name|ImportNameType
name|getNameType
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|ImportNameType
operator|>
operator|(
operator|(
name|TypeInfo
operator|&
literal|0x1C
operator|)
operator|>>
literal|2
operator|)
return|;
block|}
block|}
struct|;
enum|enum
name|CodeViewIdentifiers
block|{
name|DEBUG_SECTION_MAGIC
init|=
literal|0x4
block|, }
enum|;
specifier|inline
name|bool
name|isReservedSectionNumber
parameter_list|(
name|int32_t
name|SectionNumber
parameter_list|)
block|{
return|return
name|SectionNumber
operator|<=
literal|0
return|;
block|}
block|}
comment|// End namespace COFF.
block|}
end_decl_stmt

begin_comment
comment|// End namespace llvm.
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

