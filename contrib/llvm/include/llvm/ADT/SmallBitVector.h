begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- llvm/ADT/SmallBitVector.h - 'Normally small' bit vectors -*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file implements the SmallBitVector class.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_ADT_SMALLBITVECTOR_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_ADT_SMALLBITVECTOR_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/BitVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/MathExtras.h"
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|/// SmallBitVector - This is a 'bitvector' (really, a variable-sized bit array),
comment|/// optimized for the case when the array is small.  It contains one
comment|/// pointer-sized field, which is directly used as a plain collection of bits
comment|/// when possible, or as a pointer to a larger heap-allocated array when
comment|/// necessary.  This allows normal "small" cases to be fast without losing
comment|/// generality for large inputs.
comment|///
name|class
name|SmallBitVector
block|{
comment|// TODO: In "large" mode, a pointer to a BitVector is used, leading to an
comment|// unnecessary level of indirection. It would be more efficient to use a
comment|// pointer to memory containing size, allocation size, and the array of bits.
name|uintptr_t
name|X
decl_stmt|;
enum|enum
block|{
comment|// The number of bits in this class.
name|NumBaseBits
init|=
sizeof|sizeof
argument_list|(
name|uintptr_t
argument_list|)
operator|*
name|CHAR_BIT
block|,
comment|// One bit is used to discriminate between small and large mode. The
comment|// remaining bits are used for the small-mode representation.
name|SmallNumRawBits
init|=
name|NumBaseBits
operator|-
literal|1
block|,
comment|// A few more bits are used to store the size of the bit set in small mode.
comment|// Theoretically this is a ceil-log2. These bits are encoded in the most
comment|// significant bits of the raw bits.
name|SmallNumSizeBits
init|=
operator|(
name|NumBaseBits
operator|==
literal|32
condition|?
literal|5
else|:
name|NumBaseBits
operator|==
literal|64
condition|?
literal|6
else|:
name|SmallNumRawBits
operator|)
block|,
comment|// The remaining bits are used to store the actual set in small mode.
name|SmallNumDataBits
init|=
name|SmallNumRawBits
operator|-
name|SmallNumSizeBits
block|}
enum|;
name|public
label|:
comment|// Encapsulation of a single bit.
name|class
name|reference
block|{
name|SmallBitVector
modifier|&
name|TheVector
decl_stmt|;
name|unsigned
name|BitPos
decl_stmt|;
name|public
label|:
name|reference
argument_list|(
argument|SmallBitVector&b
argument_list|,
argument|unsigned Idx
argument_list|)
block|:
name|TheVector
argument_list|(
name|b
argument_list|)
operator|,
name|BitPos
argument_list|(
argument|Idx
argument_list|)
block|{}
name|reference
operator|&
name|operator
operator|=
operator|(
name|reference
name|t
operator|)
block|{
operator|*
name|this
operator|=
name|bool
argument_list|(
name|t
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
name|reference
modifier|&
name|operator
init|=
operator|(
name|bool
name|t
operator|)
block|{
if|if
condition|(
name|t
condition|)
name|TheVector
operator|.
name|set
argument_list|(
name|BitPos
argument_list|)
expr_stmt|;
else|else
name|TheVector
operator|.
name|reset
argument_list|(
name|BitPos
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|operator
name|bool
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
specifier|const
name|SmallBitVector
operator|&
operator|>
operator|(
name|TheVector
operator|)
operator|.
name|operator
index|[]
operator|(
name|BitPos
operator|)
return|;
block|}
block|}
empty_stmt|;
name|private
label|:
name|bool
name|isSmall
argument_list|()
specifier|const
block|{
return|return
name|X
operator|&
name|uintptr_t
argument_list|(
literal|1
argument_list|)
return|;
block|}
name|BitVector
operator|*
name|getPointer
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
operator|!
name|isSmall
argument_list|()
argument_list|)
block|;
return|return
name|reinterpret_cast
operator|<
name|BitVector
operator|*
operator|>
operator|(
name|X
operator|)
return|;
block|}
name|void
name|switchToSmall
parameter_list|(
name|uintptr_t
name|NewSmallBits
parameter_list|,
name|size_t
name|NewSize
parameter_list|)
block|{
name|X
operator|=
literal|1
expr_stmt|;
name|setSmallSize
argument_list|(
name|NewSize
argument_list|)
expr_stmt|;
name|setSmallBits
argument_list|(
name|NewSmallBits
argument_list|)
expr_stmt|;
block|}
name|void
name|switchToLarge
parameter_list|(
name|BitVector
modifier|*
name|BV
parameter_list|)
block|{
name|X
operator|=
name|reinterpret_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|BV
operator|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|isSmall
argument_list|()
operator|&&
literal|"Tried to use an unaligned pointer"
argument_list|)
expr_stmt|;
block|}
comment|// Return all the bits used for the "small" representation; this includes
comment|// bits for the size as well as the element bits.
name|uintptr_t
name|getSmallRawBits
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isSmall
argument_list|()
argument_list|)
block|;
return|return
name|X
operator|>>
literal|1
return|;
block|}
name|void
name|setSmallRawBits
parameter_list|(
name|uintptr_t
name|NewRawBits
parameter_list|)
block|{
name|assert
argument_list|(
name|isSmall
argument_list|()
argument_list|)
expr_stmt|;
name|X
operator|=
operator|(
name|NewRawBits
operator|<<
literal|1
operator|)
operator||
name|uintptr_t
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Return the size.
name|size_t
name|getSmallSize
argument_list|()
specifier|const
block|{
return|return
name|getSmallRawBits
argument_list|()
operator|>>
name|SmallNumDataBits
return|;
block|}
name|void
name|setSmallSize
parameter_list|(
name|size_t
name|Size
parameter_list|)
block|{
name|setSmallRawBits
argument_list|(
name|getSmallBits
argument_list|()
operator||
operator|(
name|Size
operator|<<
name|SmallNumDataBits
operator|)
argument_list|)
expr_stmt|;
block|}
comment|// Return the element bits.
name|uintptr_t
name|getSmallBits
argument_list|()
specifier|const
block|{
return|return
name|getSmallRawBits
argument_list|()
operator|&
operator|~
operator|(
operator|~
name|uintptr_t
argument_list|(
literal|0
argument_list|)
operator|<<
name|getSmallSize
argument_list|()
operator|)
return|;
block|}
name|void
name|setSmallBits
parameter_list|(
name|uintptr_t
name|NewBits
parameter_list|)
block|{
name|setSmallRawBits
argument_list|(
operator|(
name|NewBits
operator|&
operator|~
operator|(
operator|~
name|uintptr_t
argument_list|(
literal|0
argument_list|)
operator|<<
name|getSmallSize
argument_list|()
operator|)
operator|)
operator||
operator|(
name|getSmallSize
argument_list|()
operator|<<
name|SmallNumDataBits
operator|)
argument_list|)
expr_stmt|;
block|}
name|public
label|:
comment|/// SmallBitVector default ctor - Creates an empty bitvector.
name|SmallBitVector
argument_list|()
operator|:
name|X
argument_list|(
literal|1
argument_list|)
block|{}
comment|/// SmallBitVector ctor - Creates a bitvector of specified number of bits. All
comment|/// bits are initialized to the specified value.
name|explicit
name|SmallBitVector
argument_list|(
argument|unsigned s
argument_list|,
argument|bool t = false
argument_list|)
block|{
if|if
condition|(
name|s
operator|<=
name|SmallNumDataBits
condition|)
name|switchToSmall
argument_list|(
name|t
operator|?
operator|~
name|uintptr_t
argument_list|(
literal|0
argument_list|)
operator|:
literal|0
argument_list|,
name|s
argument_list|)
expr_stmt|;
else|else
name|switchToLarge
argument_list|(
argument|new BitVector(s, t)
argument_list|)
empty_stmt|;
block|}
comment|/// SmallBitVector copy ctor.
name|SmallBitVector
argument_list|(
argument|const SmallBitVector&RHS
argument_list|)
block|{
if|if
condition|(
name|RHS
operator|.
name|isSmall
argument_list|()
condition|)
name|X
operator|=
name|RHS
operator|.
name|X
expr_stmt|;
else|else
name|switchToLarge
argument_list|(
argument|new BitVector(*RHS.getPointer())
argument_list|)
empty_stmt|;
block|}
operator|~
name|SmallBitVector
argument_list|()
block|{
if|if
condition|(
operator|!
name|isSmall
argument_list|()
condition|)
name|delete
name|getPointer
parameter_list|()
function_decl|;
block|}
comment|/// empty - Tests whether there are no bits in this bitvector.
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|isSmall
argument_list|()
operator|?
name|getSmallSize
argument_list|()
operator|==
literal|0
operator|:
name|getPointer
argument_list|()
operator|->
name|empty
argument_list|()
return|;
block|}
comment|/// size - Returns the number of bits in this bitvector.
name|size_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|isSmall
argument_list|()
operator|?
name|getSmallSize
argument_list|()
operator|:
name|getPointer
argument_list|()
operator|->
name|size
argument_list|()
return|;
block|}
comment|/// count - Returns the number of bits which are set.
name|unsigned
name|count
argument_list|()
specifier|const
block|{
if|if
condition|(
name|isSmall
argument_list|()
condition|)
block|{
name|uintptr_t
name|Bits
init|=
name|getSmallBits
argument_list|()
decl_stmt|;
if|if
condition|(
sizeof|sizeof
argument_list|(
name|uintptr_t
argument_list|)
operator|*
name|CHAR_BIT
operator|==
literal|32
condition|)
return|return
name|CountPopulation_32
argument_list|(
name|Bits
argument_list|)
return|;
if|if
condition|(
sizeof|sizeof
argument_list|(
name|uintptr_t
argument_list|)
operator|*
name|CHAR_BIT
operator|==
literal|64
condition|)
return|return
name|CountPopulation_64
argument_list|(
name|Bits
argument_list|)
return|;
name|assert
argument_list|(
literal|0
operator|&&
literal|"Unsupported!"
argument_list|)
expr_stmt|;
block|}
return|return
name|getPointer
argument_list|()
operator|->
name|count
argument_list|()
return|;
block|}
comment|/// any - Returns true if any bit is set.
name|bool
name|any
argument_list|()
specifier|const
block|{
if|if
condition|(
name|isSmall
argument_list|()
condition|)
return|return
name|getSmallBits
argument_list|()
operator|!=
literal|0
return|;
return|return
name|getPointer
argument_list|()
operator|->
name|any
argument_list|()
return|;
block|}
end_decl_stmt

begin_comment
comment|/// none - Returns true if none of the bits are set.
end_comment

begin_expr_stmt
name|bool
name|none
argument_list|()
specifier|const
block|{
if|if
condition|(
name|isSmall
argument_list|()
condition|)
return|return
name|getSmallBits
argument_list|()
operator|==
literal|0
return|;
end_expr_stmt

begin_return
return|return
name|getPointer
argument_list|()
operator|->
name|none
argument_list|()
return|;
end_return

begin_comment
unit|}
comment|/// find_first - Returns the index of the first set bit, -1 if none
end_comment

begin_comment
comment|/// of the bits are set.
end_comment

begin_macro
unit|int
name|find_first
argument_list|()
end_macro

begin_expr_stmt
specifier|const
block|{
if|if
condition|(
name|isSmall
argument_list|()
condition|)
block|{
name|uintptr_t
name|Bits
init|=
name|getSmallBits
argument_list|()
decl_stmt|;
if|if
condition|(
name|Bits
operator|==
literal|0
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
sizeof|sizeof
argument_list|(
name|uintptr_t
argument_list|)
operator|*
name|CHAR_BIT
operator|==
literal|32
condition|)
return|return
name|CountTrailingZeros_32
argument_list|(
name|Bits
argument_list|)
return|;
if|if
condition|(
sizeof|sizeof
argument_list|(
name|uintptr_t
argument_list|)
operator|*
name|CHAR_BIT
operator|==
literal|64
condition|)
return|return
name|CountTrailingZeros_64
argument_list|(
name|Bits
argument_list|)
return|;
name|assert
argument_list|(
literal|0
operator|&&
literal|"Unsupported!"
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|getPointer
argument_list|()
operator|->
name|find_first
argument_list|()
return|;
end_return

begin_comment
unit|}
comment|/// find_next - Returns the index of the next set bit following the
end_comment

begin_comment
comment|/// "Prev" bit. Returns -1 if the next set bit is not found.
end_comment

begin_macro
unit|int
name|find_next
argument_list|(
argument|unsigned Prev
argument_list|)
end_macro

begin_expr_stmt
specifier|const
block|{
if|if
condition|(
name|isSmall
argument_list|()
condition|)
block|{
name|uintptr_t
name|Bits
init|=
name|getSmallBits
argument_list|()
decl_stmt|;
comment|// Mask off previous bits.
name|Bits
operator|&=
operator|~
name|uintptr_t
argument_list|(
literal|0
argument_list|)
operator|<<
operator|(
name|Prev
operator|+
literal|1
operator|)
expr_stmt|;
if|if
condition|(
name|Bits
operator|==
literal|0
operator|||
name|Prev
operator|+
literal|1
operator|>=
name|getSmallSize
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
sizeof|sizeof
argument_list|(
name|uintptr_t
argument_list|)
operator|*
name|CHAR_BIT
operator|==
literal|32
condition|)
return|return
name|CountTrailingZeros_32
argument_list|(
name|Bits
argument_list|)
return|;
if|if
condition|(
sizeof|sizeof
argument_list|(
name|uintptr_t
argument_list|)
operator|*
name|CHAR_BIT
operator|==
literal|64
condition|)
return|return
name|CountTrailingZeros_64
argument_list|(
name|Bits
argument_list|)
return|;
name|assert
argument_list|(
literal|0
operator|&&
literal|"Unsupported!"
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|getPointer
argument_list|()
operator|->
name|find_next
argument_list|(
name|Prev
argument_list|)
return|;
end_return

begin_comment
unit|}
comment|/// clear - Clear all bits.
end_comment

begin_macro
unit|void
name|clear
argument_list|()
end_macro

begin_block
block|{
if|if
condition|(
operator|!
name|isSmall
argument_list|()
condition|)
name|delete
name|getPointer
parameter_list|()
function_decl|;
name|switchToSmall
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_block

begin_comment
comment|/// resize - Grow or shrink the bitvector.
end_comment

begin_function
name|void
name|resize
parameter_list|(
name|unsigned
name|N
parameter_list|,
name|bool
name|t
init|=
name|false
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isSmall
argument_list|()
condition|)
block|{
name|getPointer
argument_list|()
operator|->
name|resize
argument_list|(
name|N
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SmallNumDataBits
operator|>=
name|N
condition|)
block|{
name|uintptr_t
name|NewBits
init|=
name|t
condition|?
operator|~
name|uintptr_t
argument_list|(
literal|0
argument_list|)
operator|<<
name|getSmallSize
argument_list|()
else|:
literal|0
decl_stmt|;
name|setSmallSize
argument_list|(
name|N
argument_list|)
expr_stmt|;
name|setSmallBits
argument_list|(
name|NewBits
operator||
name|getSmallBits
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BitVector
modifier|*
name|BV
init|=
name|new
name|BitVector
argument_list|(
name|N
argument_list|,
name|t
argument_list|)
decl_stmt|;
name|uintptr_t
name|OldBits
init|=
name|getSmallBits
argument_list|()
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|,
name|e
init|=
name|getSmallSize
argument_list|()
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
operator|(
operator|*
name|BV
operator|)
index|[
name|i
index|]
operator|=
operator|(
name|OldBits
operator|>>
name|i
operator|)
operator|&
literal|1
expr_stmt|;
name|switchToLarge
argument_list|(
name|BV
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
name|void
name|reserve
parameter_list|(
name|unsigned
name|N
parameter_list|)
block|{
if|if
condition|(
name|isSmall
argument_list|()
condition|)
block|{
if|if
condition|(
name|N
operator|>
name|SmallNumDataBits
condition|)
block|{
name|uintptr_t
name|OldBits
init|=
name|getSmallRawBits
argument_list|()
decl_stmt|;
name|size_t
name|SmallSize
init|=
name|getSmallSize
argument_list|()
decl_stmt|;
name|BitVector
modifier|*
name|BV
init|=
name|new
name|BitVector
argument_list|(
name|SmallSize
argument_list|)
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SmallSize
condition|;
operator|++
name|i
control|)
if|if
condition|(
operator|(
name|OldBits
operator|>>
name|i
operator|)
operator|&
literal|1
condition|)
name|BV
operator|->
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|BV
operator|->
name|reserve
argument_list|(
name|N
argument_list|)
expr_stmt|;
name|switchToLarge
argument_list|(
name|BV
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|getPointer
argument_list|()
operator|->
name|reserve
argument_list|(
name|N
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|// Set, reset, flip
end_comment

begin_function
name|SmallBitVector
modifier|&
name|set
parameter_list|()
block|{
if|if
condition|(
name|isSmall
argument_list|()
condition|)
name|setSmallBits
argument_list|(
operator|~
name|uintptr_t
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|getPointer
argument_list|()
operator|->
name|set
argument_list|()
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function

begin_function
name|SmallBitVector
modifier|&
name|set
parameter_list|(
name|unsigned
name|Idx
parameter_list|)
block|{
if|if
condition|(
name|isSmall
argument_list|()
condition|)
name|setSmallBits
argument_list|(
name|getSmallBits
argument_list|()
operator||
operator|(
name|uintptr_t
argument_list|(
literal|1
argument_list|)
operator|<<
name|Idx
operator|)
argument_list|)
expr_stmt|;
else|else
name|getPointer
argument_list|()
operator|->
name|set
argument_list|(
name|Idx
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function

begin_function
name|SmallBitVector
modifier|&
name|reset
parameter_list|()
block|{
if|if
condition|(
name|isSmall
argument_list|()
condition|)
name|setSmallBits
argument_list|(
literal|0
argument_list|)
expr_stmt|;
else|else
name|getPointer
argument_list|()
operator|->
name|reset
argument_list|()
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function

begin_function
name|SmallBitVector
modifier|&
name|reset
parameter_list|(
name|unsigned
name|Idx
parameter_list|)
block|{
if|if
condition|(
name|isSmall
argument_list|()
condition|)
name|setSmallBits
argument_list|(
name|getSmallBits
argument_list|()
operator|&
operator|~
operator|(
name|uintptr_t
argument_list|(
literal|1
argument_list|)
operator|<<
name|Idx
operator|)
argument_list|)
expr_stmt|;
else|else
name|getPointer
argument_list|()
operator|->
name|reset
argument_list|(
name|Idx
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function

begin_function
name|SmallBitVector
modifier|&
name|flip
parameter_list|()
block|{
if|if
condition|(
name|isSmall
argument_list|()
condition|)
name|setSmallBits
argument_list|(
operator|~
name|getSmallBits
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|getPointer
argument_list|()
operator|->
name|flip
argument_list|()
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function

begin_function
name|SmallBitVector
modifier|&
name|flip
parameter_list|(
name|unsigned
name|Idx
parameter_list|)
block|{
if|if
condition|(
name|isSmall
argument_list|()
condition|)
name|setSmallBits
argument_list|(
name|getSmallBits
argument_list|()
operator|^
operator|(
name|uintptr_t
argument_list|(
literal|1
argument_list|)
operator|<<
name|Idx
operator|)
argument_list|)
expr_stmt|;
else|else
name|getPointer
argument_list|()
operator|->
name|flip
argument_list|(
name|Idx
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function

begin_comment
comment|// No argument flip.
end_comment

begin_expr_stmt
name|SmallBitVector
name|operator
operator|~
operator|(
operator|)
specifier|const
block|{
return|return
name|SmallBitVector
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|flip
argument_list|()
return|;
block|}
end_expr_stmt

begin_comment
comment|// Indexing.
end_comment

begin_function
name|reference
name|operator
function|[]
parameter_list|(
name|unsigned
name|Idx
parameter_list|)
block|{
name|assert
argument_list|(
name|Idx
operator|<
name|size
argument_list|()
operator|&&
literal|"Out-of-bounds Bit access."
argument_list|)
expr_stmt|;
return|return
name|reference
argument_list|(
operator|*
name|this
argument_list|,
name|Idx
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
name|bool
name|operator
index|[]
argument_list|(
name|unsigned
name|Idx
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|Idx
operator|<
name|size
argument_list|()
operator|&&
literal|"Out-of-bounds Bit access."
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSmall
argument_list|()
condition|)
return|return
operator|(
operator|(
name|getSmallBits
argument_list|()
operator|>>
name|Idx
operator|)
operator|&
literal|1
operator|)
operator|!=
literal|0
return|;
return|return
name|getPointer
argument_list|()
operator|->
name|operator
index|[]
operator|(
name|Idx
operator|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|bool
name|test
argument_list|(
name|unsigned
name|Idx
argument_list|)
decl|const
block|{
return|return
operator|(
operator|*
name|this
operator|)
index|[
name|Idx
index|]
return|;
block|}
end_decl_stmt

begin_comment
comment|// Comparison operators.
end_comment

begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|SmallBitVector
operator|&
name|RHS
operator|)
specifier|const
block|{
if|if
condition|(
name|size
argument_list|()
operator|!=
name|RHS
operator|.
name|size
argument_list|()
condition|)
return|return
name|false
return|;
end_expr_stmt

begin_if
if|if
condition|(
name|isSmall
argument_list|()
condition|)
return|return
name|getSmallBits
argument_list|()
operator|==
name|RHS
operator|.
name|getSmallBits
argument_list|()
return|;
else|else
return|return
operator|*
name|getPointer
argument_list|()
operator|==
operator|*
name|RHS
operator|.
name|getPointer
argument_list|()
return|;
end_if

begin_expr_stmt
unit|}    bool
name|operator
operator|!=
operator|(
specifier|const
name|SmallBitVector
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|RHS
operator|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// Intersection, union, disjoint union.
end_comment

begin_expr_stmt
name|SmallBitVector
operator|&
name|operator
operator|&=
operator|(
specifier|const
name|SmallBitVector
operator|&
name|RHS
operator|)
block|{
name|resize
argument_list|(
name|std
operator|::
name|max
argument_list|(
name|size
argument_list|()
argument_list|,
name|RHS
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
block|;
if|if
condition|(
name|isSmall
argument_list|()
condition|)
name|setSmallBits
argument_list|(
name|getSmallBits
argument_list|()
operator|&
name|RHS
operator|.
name|getSmallBits
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|RHS
operator|.
name|isSmall
argument_list|()
condition|)
name|getPointer
argument_list|()
operator|->
name|operator
operator|&=
operator|(
operator|*
name|RHS
operator|.
name|getPointer
argument_list|()
operator|)
expr_stmt|;
else|else
block|{
name|SmallBitVector
name|Copy
init|=
name|RHS
decl_stmt|;
name|Copy
operator|.
name|resize
argument_list|(
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|getPointer
argument_list|()
operator|->
name|operator
operator|&=
operator|(
operator|*
name|Copy
operator|.
name|getPointer
argument_list|()
operator|)
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}    SmallBitVector
operator|&
name|operator
operator||=
operator|(
specifier|const
name|SmallBitVector
operator|&
name|RHS
operator|)
block|{
name|resize
argument_list|(
name|std
operator|::
name|max
argument_list|(
name|size
argument_list|()
argument_list|,
name|RHS
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
block|;
if|if
condition|(
name|isSmall
argument_list|()
condition|)
name|setSmallBits
argument_list|(
name|getSmallBits
argument_list|()
operator||
name|RHS
operator|.
name|getSmallBits
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|RHS
operator|.
name|isSmall
argument_list|()
condition|)
name|getPointer
argument_list|()
operator|->
name|operator
operator||=
operator|(
operator|*
name|RHS
operator|.
name|getPointer
argument_list|()
operator|)
expr_stmt|;
else|else
block|{
name|SmallBitVector
name|Copy
init|=
name|RHS
decl_stmt|;
name|Copy
operator|.
name|resize
argument_list|(
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|getPointer
argument_list|()
operator|->
name|operator
operator||=
operator|(
operator|*
name|Copy
operator|.
name|getPointer
argument_list|()
operator|)
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}    SmallBitVector
operator|&
name|operator
operator|^=
operator|(
specifier|const
name|SmallBitVector
operator|&
name|RHS
operator|)
block|{
name|resize
argument_list|(
name|std
operator|::
name|max
argument_list|(
name|size
argument_list|()
argument_list|,
name|RHS
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
block|;
if|if
condition|(
name|isSmall
argument_list|()
condition|)
name|setSmallBits
argument_list|(
name|getSmallBits
argument_list|()
operator|^
name|RHS
operator|.
name|getSmallBits
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|RHS
operator|.
name|isSmall
argument_list|()
condition|)
name|getPointer
argument_list|()
operator|->
name|operator
operator|^=
operator|(
operator|*
name|RHS
operator|.
name|getPointer
argument_list|()
operator|)
expr_stmt|;
else|else
block|{
name|SmallBitVector
name|Copy
init|=
name|RHS
decl_stmt|;
name|Copy
operator|.
name|resize
argument_list|(
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|getPointer
argument_list|()
operator|->
name|operator
operator|^=
operator|(
operator|*
name|Copy
operator|.
name|getPointer
argument_list|()
operator|)
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_comment
unit|}
comment|// Assignment operator.
end_comment

begin_decl_stmt
unit|const
name|SmallBitVector
modifier|&
name|operator
init|=
operator|(
specifier|const
name|SmallBitVector
operator|&
name|RHS
operator|)
block|{
if|if
condition|(
name|isSmall
argument_list|()
condition|)
block|{
if|if
condition|(
name|RHS
operator|.
name|isSmall
argument_list|()
condition|)
name|X
operator|=
name|RHS
operator|.
name|X
expr_stmt|;
else|else
name|switchToLarge
argument_list|(
argument|new BitVector(*RHS.getPointer())
argument_list|)
empty_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|RHS
operator|.
name|isSmall
argument_list|()
condition|)
operator|*
name|getPointer
argument_list|()
operator|=
operator|*
name|RHS
operator|.
name|getPointer
argument_list|()
expr_stmt|;
else|else
block|{
name|delete
name|getPointer
parameter_list|()
function_decl|;
name|X
operator|=
name|RHS
operator|.
name|X
expr_stmt|;
block|}
block|}
return|return
operator|*
name|this
return|;
block|}
end_decl_stmt

begin_function
name|void
name|swap
parameter_list|(
name|SmallBitVector
modifier|&
name|RHS
parameter_list|)
block|{
name|std
operator|::
name|swap
argument_list|(
name|X
argument_list|,
name|RHS
operator|.
name|X
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
unit|};
specifier|inline
name|SmallBitVector
name|operator
function|&(const
name|SmallBitVector
function|&LHS
operator|,
function|const SmallBitVector&RHS
end_function

begin_block
unit|)
block|{
name|SmallBitVector
name|Result
parameter_list|(
name|LHS
parameter_list|)
function_decl|;
name|Result
operator|&=
name|RHS
expr_stmt|;
return|return
name|Result
return|;
block|}
end_block

begin_expr_stmt
specifier|inline
name|SmallBitVector
name|operator
operator||
operator|(
specifier|const
name|SmallBitVector
operator|&
name|LHS
operator|,
specifier|const
name|SmallBitVector
operator|&
name|RHS
operator|)
block|{
name|SmallBitVector
name|Result
argument_list|(
name|LHS
argument_list|)
block|;
name|Result
operator||=
name|RHS
block|;
return|return
name|Result
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|SmallBitVector
name|operator
modifier|^
parameter_list|(
specifier|const
name|SmallBitVector
modifier|&
name|LHS
parameter_list|,
specifier|const
name|SmallBitVector
modifier|&
name|RHS
parameter_list|)
block|{
name|SmallBitVector
name|Result
argument_list|(
name|LHS
argument_list|)
decl_stmt|;
name|Result
operator|^=
name|RHS
expr_stmt|;
return|return
name|Result
return|;
block|}
end_function

begin_comment
unit|}
comment|// End llvm namespace
end_comment

begin_macro
unit|namespace
name|std
end_macro

begin_block
block|{
comment|/// Implement std::swap in terms of BitVector swap.
specifier|inline
name|void
name|swap
argument_list|(
name|llvm
operator|::
name|SmallBitVector
operator|&
name|LHS
argument_list|,
name|llvm
operator|::
name|SmallBitVector
operator|&
name|RHS
argument_list|)
block|{
name|LHS
operator|.
name|swap
argument_list|(
name|RHS
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_endif
endif|#
directive|endif
end_endif

end_unit

