begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- VariadicFunctions.h - Variadic Functions ---------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file implements compile-time type-safe variadic functions.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_ADT_VARIADICFUNCTION_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_ADT_VARIADICFUNCTION_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|// Define macros to aid in expanding a comma separated series with the index of
comment|// the series pasted onto the last token.
define|#
directive|define
name|LLVM_COMMA_JOIN1
parameter_list|(
name|x
parameter_list|)
value|x ## 0
define|#
directive|define
name|LLVM_COMMA_JOIN2
parameter_list|(
name|x
parameter_list|)
value|LLVM_COMMA_JOIN1(x), x ## 1
define|#
directive|define
name|LLVM_COMMA_JOIN3
parameter_list|(
name|x
parameter_list|)
value|LLVM_COMMA_JOIN2(x), x ## 2
define|#
directive|define
name|LLVM_COMMA_JOIN4
parameter_list|(
name|x
parameter_list|)
value|LLVM_COMMA_JOIN3(x), x ## 3
define|#
directive|define
name|LLVM_COMMA_JOIN5
parameter_list|(
name|x
parameter_list|)
value|LLVM_COMMA_JOIN4(x), x ## 4
define|#
directive|define
name|LLVM_COMMA_JOIN6
parameter_list|(
name|x
parameter_list|)
value|LLVM_COMMA_JOIN5(x), x ## 5
define|#
directive|define
name|LLVM_COMMA_JOIN7
parameter_list|(
name|x
parameter_list|)
value|LLVM_COMMA_JOIN6(x), x ## 6
define|#
directive|define
name|LLVM_COMMA_JOIN8
parameter_list|(
name|x
parameter_list|)
value|LLVM_COMMA_JOIN7(x), x ## 7
define|#
directive|define
name|LLVM_COMMA_JOIN9
parameter_list|(
name|x
parameter_list|)
value|LLVM_COMMA_JOIN8(x), x ## 8
define|#
directive|define
name|LLVM_COMMA_JOIN10
parameter_list|(
name|x
parameter_list|)
value|LLVM_COMMA_JOIN9(x), x ## 9
define|#
directive|define
name|LLVM_COMMA_JOIN11
parameter_list|(
name|x
parameter_list|)
value|LLVM_COMMA_JOIN10(x), x ## 10
define|#
directive|define
name|LLVM_COMMA_JOIN12
parameter_list|(
name|x
parameter_list|)
value|LLVM_COMMA_JOIN11(x), x ## 11
define|#
directive|define
name|LLVM_COMMA_JOIN13
parameter_list|(
name|x
parameter_list|)
value|LLVM_COMMA_JOIN12(x), x ## 12
define|#
directive|define
name|LLVM_COMMA_JOIN14
parameter_list|(
name|x
parameter_list|)
value|LLVM_COMMA_JOIN13(x), x ## 13
define|#
directive|define
name|LLVM_COMMA_JOIN15
parameter_list|(
name|x
parameter_list|)
value|LLVM_COMMA_JOIN14(x), x ## 14
define|#
directive|define
name|LLVM_COMMA_JOIN16
parameter_list|(
name|x
parameter_list|)
value|LLVM_COMMA_JOIN15(x), x ## 15
define|#
directive|define
name|LLVM_COMMA_JOIN17
parameter_list|(
name|x
parameter_list|)
value|LLVM_COMMA_JOIN16(x), x ## 16
define|#
directive|define
name|LLVM_COMMA_JOIN18
parameter_list|(
name|x
parameter_list|)
value|LLVM_COMMA_JOIN17(x), x ## 17
define|#
directive|define
name|LLVM_COMMA_JOIN19
parameter_list|(
name|x
parameter_list|)
value|LLVM_COMMA_JOIN18(x), x ## 18
define|#
directive|define
name|LLVM_COMMA_JOIN20
parameter_list|(
name|x
parameter_list|)
value|LLVM_COMMA_JOIN19(x), x ## 19
define|#
directive|define
name|LLVM_COMMA_JOIN21
parameter_list|(
name|x
parameter_list|)
value|LLVM_COMMA_JOIN20(x), x ## 20
define|#
directive|define
name|LLVM_COMMA_JOIN22
parameter_list|(
name|x
parameter_list|)
value|LLVM_COMMA_JOIN21(x), x ## 21
define|#
directive|define
name|LLVM_COMMA_JOIN23
parameter_list|(
name|x
parameter_list|)
value|LLVM_COMMA_JOIN22(x), x ## 22
define|#
directive|define
name|LLVM_COMMA_JOIN24
parameter_list|(
name|x
parameter_list|)
value|LLVM_COMMA_JOIN23(x), x ## 23
define|#
directive|define
name|LLVM_COMMA_JOIN25
parameter_list|(
name|x
parameter_list|)
value|LLVM_COMMA_JOIN24(x), x ## 24
define|#
directive|define
name|LLVM_COMMA_JOIN26
parameter_list|(
name|x
parameter_list|)
value|LLVM_COMMA_JOIN25(x), x ## 25
define|#
directive|define
name|LLVM_COMMA_JOIN27
parameter_list|(
name|x
parameter_list|)
value|LLVM_COMMA_JOIN26(x), x ## 26
define|#
directive|define
name|LLVM_COMMA_JOIN28
parameter_list|(
name|x
parameter_list|)
value|LLVM_COMMA_JOIN27(x), x ## 27
define|#
directive|define
name|LLVM_COMMA_JOIN29
parameter_list|(
name|x
parameter_list|)
value|LLVM_COMMA_JOIN28(x), x ## 28
define|#
directive|define
name|LLVM_COMMA_JOIN30
parameter_list|(
name|x
parameter_list|)
value|LLVM_COMMA_JOIN29(x), x ## 29
define|#
directive|define
name|LLVM_COMMA_JOIN31
parameter_list|(
name|x
parameter_list|)
value|LLVM_COMMA_JOIN30(x), x ## 30
define|#
directive|define
name|LLVM_COMMA_JOIN32
parameter_list|(
name|x
parameter_list|)
value|LLVM_COMMA_JOIN31(x), x ## 31
comment|/// \brief Class which can simulate a type-safe variadic function.
comment|///
comment|/// The VariadicFunction class template makes it easy to define
comment|/// type-safe variadic functions where all arguments have the same
comment|/// type.
comment|///
comment|/// Suppose we need a variadic function like this:
comment|///
comment|///   ResultT Foo(const ArgT&A_0, const ArgT&A_1, ..., const ArgT&A_N);
comment|///
comment|/// Instead of many overloads of Foo(), we only need to define a helper
comment|/// function that takes an array of arguments:
comment|///
comment|///   ResultT FooImpl(ArrayRef<const ArgT *> Args) {
comment|///     // 'Args[i]' is a pointer to the i-th argument passed to Foo().
comment|///     ...
comment|///   }
comment|///
comment|/// and then define Foo() like this:
comment|///
comment|///   const VariadicFunction<ResultT, ArgT, FooImpl> Foo;
comment|///
comment|/// VariadicFunction takes care of defining the overloads of Foo().
comment|///
comment|/// Actually, Foo is a function object (i.e. functor) instead of a plain
comment|/// function.  This object is stateless and its constructor/destructor
comment|/// does nothing, so it's safe to create global objects and call Foo(...) at
comment|/// any time.
comment|///
comment|/// Sometimes we need a variadic function to have some fixed leading
comment|/// arguments whose types may be different from that of the optional
comment|/// arguments.  For example:
comment|///
comment|///   bool FullMatch(const StringRef&S, const RE&Regex,
comment|///                  const ArgT&A_0, ..., const ArgT&A_N);
comment|///
comment|/// VariadicFunctionN is for such cases, where N is the number of fixed
comment|/// arguments.  It is like VariadicFunction, except that it takes N more
comment|/// template arguments for the types of the fixed arguments:
comment|///
comment|///   bool FullMatchImpl(const StringRef&S, const RE&Regex,
comment|///                      ArrayRef<const ArgT *> Args) { ... }
comment|///   const VariadicFunction2<bool, const StringRef&,
comment|///                           const RE&, ArgT, FullMatchImpl>
comment|///       FullMatch;
comment|///
comment|/// Currently VariadicFunction and friends support up-to 3
comment|/// fixed leading arguments and up-to 32 optional arguments.
name|template
operator|<
name|typename
name|ResultT
operator|,
name|typename
name|ArgT
operator|,
name|ResultT
argument_list|(
operator|*
name|Func
argument_list|)
argument_list|(
name|ArrayRef
operator|<
specifier|const
name|ArgT
operator|*
operator|>
argument_list|)
operator|>
expr|struct
name|VariadicFunction
block|{
name|ResultT
name|operator
argument_list|()
operator|(
operator|)
specifier|const
block|{
return|return
name|Func
argument_list|(
name|ArrayRef
operator|<
specifier|const
name|ArgT
operator|*
operator|>
operator|(
operator|)
argument_list|)
return|;
block|}
define|#
directive|define
name|LLVM_DEFINE_OVERLOAD
parameter_list|(
name|N
parameter_list|)
define|\
value|ResultT operator()(LLVM_COMMA_JOIN ## N(const ArgT&A)) const { \     const ArgT *const Args[] = { LLVM_COMMA_JOIN ## N(&A) }; \     return Func(makeArrayRef(Args)); \   }
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|1
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|2
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|3
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|4
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|5
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|6
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|7
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|8
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|9
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|10
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|11
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|12
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|13
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|14
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|15
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|16
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|17
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|18
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|19
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|20
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|21
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|22
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|23
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|24
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|25
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|26
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|27
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|28
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|29
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|30
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|31
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|32
argument_list|)
undef|#
directive|undef
name|LLVM_DEFINE_OVERLOAD
expr|}
block|;
name|template
operator|<
name|typename
name|ResultT
block|,
name|typename
name|Param0T
block|,
name|typename
name|ArgT
block|,
name|ResultT
argument_list|(
operator|*
name|Func
argument_list|)
argument_list|(
name|Param0T
argument_list|,
name|ArrayRef
operator|<
specifier|const
name|ArgT
operator|*
operator|>
argument_list|)
operator|>
expr|struct
name|VariadicFunction1
block|{
name|ResultT
name|operator
argument_list|()
operator|(
name|Param0T
name|P0
operator|)
specifier|const
block|{
return|return
name|Func
argument_list|(
name|P0
argument_list|,
name|ArrayRef
operator|<
specifier|const
name|ArgT
operator|*
operator|>
operator|(
operator|)
argument_list|)
return|;
block|}
define|#
directive|define
name|LLVM_DEFINE_OVERLOAD
parameter_list|(
name|N
parameter_list|)
define|\
value|ResultT operator()(Param0T P0, LLVM_COMMA_JOIN ## N(const ArgT&A)) const { \     const ArgT *const Args[] = { LLVM_COMMA_JOIN ## N(&A) }; \     return Func(P0, makeArrayRef(Args)); \   }
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|1
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|2
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|3
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|4
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|5
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|6
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|7
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|8
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|9
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|10
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|11
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|12
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|13
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|14
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|15
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|16
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|17
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|18
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|19
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|20
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|21
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|22
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|23
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|24
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|25
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|26
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|27
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|28
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|29
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|30
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|31
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|32
argument_list|)
undef|#
directive|undef
name|LLVM_DEFINE_OVERLOAD
expr|}
block|;
name|template
operator|<
name|typename
name|ResultT
block|,
name|typename
name|Param0T
block|,
name|typename
name|Param1T
block|,
name|typename
name|ArgT
block|,
name|ResultT
argument_list|(
operator|*
name|Func
argument_list|)
argument_list|(
name|Param0T
argument_list|,
name|Param1T
argument_list|,
name|ArrayRef
operator|<
specifier|const
name|ArgT
operator|*
operator|>
argument_list|)
operator|>
expr|struct
name|VariadicFunction2
block|{
name|ResultT
name|operator
argument_list|()
operator|(
name|Param0T
name|P0
operator|,
name|Param1T
name|P1
operator|)
specifier|const
block|{
return|return
name|Func
argument_list|(
name|P0
argument_list|,
name|P1
argument_list|,
name|ArrayRef
operator|<
specifier|const
name|ArgT
operator|*
operator|>
operator|(
operator|)
argument_list|)
return|;
block|}
define|#
directive|define
name|LLVM_DEFINE_OVERLOAD
parameter_list|(
name|N
parameter_list|)
define|\
value|ResultT operator()(Param0T P0, Param1T P1, \                      LLVM_COMMA_JOIN ## N(const ArgT&A)) const { \     const ArgT *const Args[] = { LLVM_COMMA_JOIN ## N(&A) }; \     return Func(P0, P1, makeArrayRef(Args)); \   }
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|1
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|2
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|3
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|4
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|5
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|6
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|7
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|8
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|9
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|10
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|11
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|12
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|13
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|14
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|15
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|16
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|17
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|18
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|19
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|20
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|21
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|22
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|23
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|24
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|25
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|26
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|27
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|28
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|29
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|30
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|31
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|32
argument_list|)
undef|#
directive|undef
name|LLVM_DEFINE_OVERLOAD
expr|}
block|;
name|template
operator|<
name|typename
name|ResultT
block|,
name|typename
name|Param0T
block|,
name|typename
name|Param1T
block|,
name|typename
name|Param2T
block|,
name|typename
name|ArgT
block|,
name|ResultT
argument_list|(
operator|*
name|Func
argument_list|)
argument_list|(
name|Param0T
argument_list|,
name|Param1T
argument_list|,
name|Param2T
argument_list|,
name|ArrayRef
operator|<
specifier|const
name|ArgT
operator|*
operator|>
argument_list|)
operator|>
expr|struct
name|VariadicFunction3
block|{
name|ResultT
name|operator
argument_list|()
operator|(
name|Param0T
name|P0
operator|,
name|Param1T
name|P1
operator|,
name|Param2T
name|P2
operator|)
specifier|const
block|{
return|return
name|Func
argument_list|(
name|P0
argument_list|,
name|P1
argument_list|,
name|P2
argument_list|,
name|ArrayRef
operator|<
specifier|const
name|ArgT
operator|*
operator|>
operator|(
operator|)
argument_list|)
return|;
block|}
define|#
directive|define
name|LLVM_DEFINE_OVERLOAD
parameter_list|(
name|N
parameter_list|)
define|\
value|ResultT operator()(Param0T P0, Param1T P1, Param2T P2, \                      LLVM_COMMA_JOIN ## N(const ArgT&A)) const { \     const ArgT *const Args[] = { LLVM_COMMA_JOIN ## N(&A) }; \     return Func(P0, P1, P2, makeArrayRef(Args)); \   }
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|1
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|2
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|3
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|4
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|5
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|6
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|7
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|8
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|9
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|10
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|11
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|12
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|13
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|14
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|15
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|16
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|17
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|18
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|19
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|20
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|21
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|22
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|23
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|24
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|25
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|26
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|27
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|28
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|29
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|30
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|31
argument_list|)
name|LLVM_DEFINE_OVERLOAD
argument_list|(
literal|32
argument_list|)
undef|#
directive|undef
name|LLVM_DEFINE_OVERLOAD
expr|}
block|;
comment|// Cleanup the macro namespace.
undef|#
directive|undef
name|LLVM_COMMA_JOIN1
undef|#
directive|undef
name|LLVM_COMMA_JOIN2
undef|#
directive|undef
name|LLVM_COMMA_JOIN3
undef|#
directive|undef
name|LLVM_COMMA_JOIN4
undef|#
directive|undef
name|LLVM_COMMA_JOIN5
undef|#
directive|undef
name|LLVM_COMMA_JOIN6
undef|#
directive|undef
name|LLVM_COMMA_JOIN7
undef|#
directive|undef
name|LLVM_COMMA_JOIN8
undef|#
directive|undef
name|LLVM_COMMA_JOIN9
undef|#
directive|undef
name|LLVM_COMMA_JOIN10
undef|#
directive|undef
name|LLVM_COMMA_JOIN11
undef|#
directive|undef
name|LLVM_COMMA_JOIN12
undef|#
directive|undef
name|LLVM_COMMA_JOIN13
undef|#
directive|undef
name|LLVM_COMMA_JOIN14
undef|#
directive|undef
name|LLVM_COMMA_JOIN15
undef|#
directive|undef
name|LLVM_COMMA_JOIN16
undef|#
directive|undef
name|LLVM_COMMA_JOIN17
undef|#
directive|undef
name|LLVM_COMMA_JOIN18
undef|#
directive|undef
name|LLVM_COMMA_JOIN19
undef|#
directive|undef
name|LLVM_COMMA_JOIN20
undef|#
directive|undef
name|LLVM_COMMA_JOIN21
undef|#
directive|undef
name|LLVM_COMMA_JOIN22
undef|#
directive|undef
name|LLVM_COMMA_JOIN23
undef|#
directive|undef
name|LLVM_COMMA_JOIN24
undef|#
directive|undef
name|LLVM_COMMA_JOIN25
undef|#
directive|undef
name|LLVM_COMMA_JOIN26
undef|#
directive|undef
name|LLVM_COMMA_JOIN27
undef|#
directive|undef
name|LLVM_COMMA_JOIN28
undef|#
directive|undef
name|LLVM_COMMA_JOIN29
undef|#
directive|undef
name|LLVM_COMMA_JOIN30
undef|#
directive|undef
name|LLVM_COMMA_JOIN31
undef|#
directive|undef
name|LLVM_COMMA_JOIN32
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_ADT_VARIADICFUNCTION_H
end_comment

end_unit

