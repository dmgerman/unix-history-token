begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- StringMap.h - String Hash table map interface ----------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines the StringMap class.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_ADT_STRINGMAP_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_ADT_STRINGMAP_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Allocator.h"
end_include

begin_include
include|#
directive|include
file|<cstring>
end_include

begin_include
include|#
directive|include
file|<utility>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|template
operator|<
name|typename
name|ValueT
operator|>
name|class
name|StringMapConstIterator
expr_stmt|;
name|template
operator|<
name|typename
name|ValueT
operator|>
name|class
name|StringMapIterator
expr_stmt|;
name|template
operator|<
name|typename
name|ValueTy
operator|>
name|class
name|StringMapEntry
expr_stmt|;
comment|/// StringMapEntryBase - Shared base class of StringMapEntry instances.
name|class
name|StringMapEntryBase
block|{
name|unsigned
name|StrLen
decl_stmt|;
name|public
label|:
name|explicit
name|StringMapEntryBase
argument_list|(
argument|unsigned Len
argument_list|)
block|:
name|StrLen
argument_list|(
argument|Len
argument_list|)
block|{}
name|unsigned
name|getKeyLength
argument_list|()
specifier|const
block|{
return|return
name|StrLen
return|;
block|}
block|}
empty_stmt|;
comment|/// StringMapImpl - This is the base class of StringMap that is shared among
comment|/// all of its instantiations.
name|class
name|StringMapImpl
block|{
name|protected
label|:
comment|// Array of NumBuckets pointers to entries, null pointers are holes.
comment|// TheTable[NumBuckets] contains a sentinel value for easy iteration. Followed
comment|// by an array of the actual hash values as unsigned integers.
name|StringMapEntryBase
modifier|*
modifier|*
name|TheTable
decl_stmt|;
name|unsigned
name|NumBuckets
decl_stmt|;
name|unsigned
name|NumItems
decl_stmt|;
name|unsigned
name|NumTombstones
decl_stmt|;
name|unsigned
name|ItemSize
decl_stmt|;
name|protected
label|:
name|explicit
name|StringMapImpl
argument_list|(
argument|unsigned itemSize
argument_list|)
block|:
name|TheTable
argument_list|(
name|nullptr
argument_list|)
operator|,
comment|// Initialize the map with zero buckets to allocation.
name|NumBuckets
argument_list|(
literal|0
argument_list|)
operator|,
name|NumItems
argument_list|(
literal|0
argument_list|)
operator|,
name|NumTombstones
argument_list|(
literal|0
argument_list|)
operator|,
name|ItemSize
argument_list|(
argument|itemSize
argument_list|)
block|{}
name|StringMapImpl
argument_list|(
name|StringMapImpl
operator|&&
name|RHS
argument_list|)
operator|:
name|TheTable
argument_list|(
name|RHS
operator|.
name|TheTable
argument_list|)
operator|,
name|NumBuckets
argument_list|(
name|RHS
operator|.
name|NumBuckets
argument_list|)
operator|,
name|NumItems
argument_list|(
name|RHS
operator|.
name|NumItems
argument_list|)
operator|,
name|NumTombstones
argument_list|(
name|RHS
operator|.
name|NumTombstones
argument_list|)
operator|,
name|ItemSize
argument_list|(
argument|RHS.ItemSize
argument_list|)
block|{
name|RHS
operator|.
name|TheTable
operator|=
name|nullptr
block|;
name|RHS
operator|.
name|NumBuckets
operator|=
literal|0
block|;
name|RHS
operator|.
name|NumItems
operator|=
literal|0
block|;
name|RHS
operator|.
name|NumTombstones
operator|=
literal|0
block|;   }
name|StringMapImpl
argument_list|(
argument|unsigned InitSize
argument_list|,
argument|unsigned ItemSize
argument_list|)
expr_stmt|;
name|unsigned
name|RehashTable
parameter_list|(
name|unsigned
name|BucketNo
init|=
literal|0
parameter_list|)
function_decl|;
comment|/// LookupBucketFor - Look up the bucket that the specified string should end
comment|/// up in.  If it already exists as a key in the map, the Item pointer for the
comment|/// specified bucket will be non-null.  Otherwise, it will be null.  In either
comment|/// case, the FullHashValue field of the bucket will be set to the hash value
comment|/// of the string.
name|unsigned
name|LookupBucketFor
parameter_list|(
name|StringRef
name|Key
parameter_list|)
function_decl|;
comment|/// FindKey - Look up the bucket that contains the specified key. If it exists
comment|/// in the map, return the bucket number of the key.  Otherwise return -1.
comment|/// This does not modify the map.
name|int
name|FindKey
argument_list|(
name|StringRef
name|Key
argument_list|)
decl|const
decl_stmt|;
comment|/// RemoveKey - Remove the specified StringMapEntry from the table, but do not
comment|/// delete it.  This aborts if the value isn't in the table.
name|void
name|RemoveKey
parameter_list|(
name|StringMapEntryBase
modifier|*
name|V
parameter_list|)
function_decl|;
comment|/// RemoveKey - Remove the StringMapEntry for the specified key from the
comment|/// table, returning it.  If the key is not in the table, this returns null.
name|StringMapEntryBase
modifier|*
name|RemoveKey
parameter_list|(
name|StringRef
name|Key
parameter_list|)
function_decl|;
name|private
label|:
name|void
name|init
parameter_list|(
name|unsigned
name|Size
parameter_list|)
function_decl|;
name|public
label|:
specifier|static
name|StringMapEntryBase
modifier|*
name|getTombstoneVal
parameter_list|()
block|{
return|return
operator|(
name|StringMapEntryBase
operator|*
operator|)
operator|-
literal|1
return|;
block|}
name|unsigned
name|getNumBuckets
argument_list|()
specifier|const
block|{
return|return
name|NumBuckets
return|;
block|}
name|unsigned
name|getNumItems
argument_list|()
specifier|const
block|{
return|return
name|NumItems
return|;
block|}
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|NumItems
operator|==
literal|0
return|;
block|}
name|unsigned
name|size
argument_list|()
specifier|const
block|{
return|return
name|NumItems
return|;
block|}
name|void
name|swap
parameter_list|(
name|StringMapImpl
modifier|&
name|Other
parameter_list|)
block|{
name|std
operator|::
name|swap
argument_list|(
name|TheTable
argument_list|,
name|Other
operator|.
name|TheTable
argument_list|)
expr_stmt|;
name|std
operator|::
name|swap
argument_list|(
name|NumBuckets
argument_list|,
name|Other
operator|.
name|NumBuckets
argument_list|)
expr_stmt|;
name|std
operator|::
name|swap
argument_list|(
name|NumItems
argument_list|,
name|Other
operator|.
name|NumItems
argument_list|)
expr_stmt|;
name|std
operator|::
name|swap
argument_list|(
name|NumTombstones
argument_list|,
name|Other
operator|.
name|NumTombstones
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
comment|/// StringMapEntry - This is used to represent one value that is inserted into
comment|/// a StringMap.  It contains the Value itself and the key: the string length
comment|/// and data.
name|template
operator|<
name|typename
name|ValueTy
operator|>
name|class
name|StringMapEntry
operator|:
name|public
name|StringMapEntryBase
block|{
name|StringMapEntry
argument_list|(
name|StringMapEntry
operator|&
name|E
argument_list|)
operator|=
name|delete
block|;
name|public
operator|:
name|ValueTy
name|second
block|;
name|explicit
name|StringMapEntry
argument_list|(
argument|unsigned strLen
argument_list|)
operator|:
name|StringMapEntryBase
argument_list|(
name|strLen
argument_list|)
block|,
name|second
argument_list|()
block|{}
name|template
operator|<
name|class
name|InitTy
operator|>
name|StringMapEntry
argument_list|(
argument|unsigned strLen
argument_list|,
argument|InitTy&&V
argument_list|)
operator|:
name|StringMapEntryBase
argument_list|(
name|strLen
argument_list|)
block|,
name|second
argument_list|(
argument|std::forward<InitTy>(V)
argument_list|)
block|{}
name|StringRef
name|getKey
argument_list|()
specifier|const
block|{
return|return
name|StringRef
argument_list|(
name|getKeyData
argument_list|()
argument_list|,
name|getKeyLength
argument_list|()
argument_list|)
return|;
block|}
specifier|const
name|ValueTy
operator|&
name|getValue
argument_list|()
specifier|const
block|{
return|return
name|second
return|;
block|}
name|ValueTy
operator|&
name|getValue
argument_list|()
block|{
return|return
name|second
return|;
block|}
name|void
name|setValue
argument_list|(
argument|const ValueTy&V
argument_list|)
block|{
name|second
operator|=
name|V
block|; }
comment|/// getKeyData - Return the start of the string data that is the key for this
comment|/// value.  The string data is always stored immediately after the
comment|/// StringMapEntry object.
specifier|const
name|char
operator|*
name|getKeyData
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|char
operator|*
operator|>
operator|(
name|this
operator|+
literal|1
operator|)
return|;
block|}
name|StringRef
name|first
argument_list|()
specifier|const
block|{
return|return
name|StringRef
argument_list|(
name|getKeyData
argument_list|()
argument_list|,
name|getKeyLength
argument_list|()
argument_list|)
return|;
block|}
comment|/// Create - Create a StringMapEntry for the specified key and default
comment|/// construct the value.
name|template
operator|<
name|typename
name|AllocatorTy
block|,
name|typename
name|InitType
operator|>
specifier|static
name|StringMapEntry
operator|*
name|Create
argument_list|(
argument|StringRef Key
argument_list|,
argument|AllocatorTy&Allocator
argument_list|,
argument|InitType&&InitVal
argument_list|)
block|{
name|unsigned
name|KeyLength
operator|=
name|Key
operator|.
name|size
argument_list|()
block|;
comment|// Allocate a new item with space for the string at the end and a null
comment|// terminator.
name|unsigned
name|AllocSize
operator|=
name|static_cast
operator|<
name|unsigned
operator|>
operator|(
sizeof|sizeof
argument_list|(
name|StringMapEntry
argument_list|)
operator|)
operator|+
name|KeyLength
operator|+
literal|1
block|;
name|unsigned
name|Alignment
operator|=
name|alignOf
operator|<
name|StringMapEntry
operator|>
operator|(
operator|)
block|;
name|StringMapEntry
operator|*
name|NewItem
operator|=
name|static_cast
operator|<
name|StringMapEntry
operator|*
operator|>
operator|(
name|Allocator
operator|.
name|Allocate
argument_list|(
name|AllocSize
argument_list|,
name|Alignment
argument_list|)
operator|)
block|;
comment|// Default construct the value.
name|new
argument_list|(
argument|NewItem
argument_list|)
name|StringMapEntry
argument_list|(
name|KeyLength
argument_list|,
name|std
operator|::
name|forward
operator|<
name|InitType
operator|>
operator|(
name|InitVal
operator|)
argument_list|)
block|;
comment|// Copy the string information.
name|char
operator|*
name|StrBuffer
operator|=
name|const_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|NewItem
operator|->
name|getKeyData
argument_list|()
operator|)
block|;
if|if
condition|(
name|KeyLength
operator|>
literal|0
condition|)
name|memcpy
argument_list|(
name|StrBuffer
argument_list|,
name|Key
operator|.
name|data
argument_list|()
argument_list|,
name|KeyLength
argument_list|)
expr_stmt|;
name|StrBuffer
index|[
name|KeyLength
index|]
operator|=
literal|0
block|;
comment|// Null terminate for convenience of clients.
return|return
name|NewItem
return|;
block|}
name|template
operator|<
name|typename
name|AllocatorTy
operator|>
specifier|static
name|StringMapEntry
operator|*
name|Create
argument_list|(
argument|StringRef Key
argument_list|,
argument|AllocatorTy&Allocator
argument_list|)
block|{
return|return
name|Create
argument_list|(
name|Key
argument_list|,
name|Allocator
argument_list|,
name|ValueTy
argument_list|()
argument_list|)
return|;
block|}
comment|/// Create - Create a StringMapEntry with normal malloc/free.
name|template
operator|<
name|typename
name|InitType
operator|>
specifier|static
name|StringMapEntry
operator|*
name|Create
argument_list|(
argument|StringRef Key
argument_list|,
argument|InitType&&InitVal
argument_list|)
block|{
name|MallocAllocator
name|A
block|;
return|return
name|Create
argument_list|(
name|Key
argument_list|,
name|A
argument_list|,
name|std
operator|::
name|forward
operator|<
name|InitType
operator|>
operator|(
name|InitVal
operator|)
argument_list|)
return|;
block|}
specifier|static
name|StringMapEntry
modifier|*
name|Create
parameter_list|(
name|StringRef
name|Key
parameter_list|)
block|{
return|return
name|Create
argument_list|(
name|Key
argument_list|,
name|ValueTy
argument_list|()
argument_list|)
return|;
block|}
comment|/// GetStringMapEntryFromKeyData - Given key data that is known to be embedded
comment|/// into a StringMapEntry, return the StringMapEntry itself.
specifier|static
name|StringMapEntry
modifier|&
name|GetStringMapEntryFromKeyData
parameter_list|(
specifier|const
name|char
modifier|*
name|KeyData
parameter_list|)
block|{
name|char
modifier|*
name|Ptr
init|=
name|const_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|KeyData
operator|)
operator|-
sizeof|sizeof
argument_list|(
name|StringMapEntry
operator|<
name|ValueTy
operator|>
argument_list|)
decl_stmt|;
return|return
operator|*
name|reinterpret_cast
operator|<
name|StringMapEntry
operator|*
operator|>
operator|(
name|Ptr
operator|)
return|;
block|}
comment|/// Destroy - Destroy this StringMapEntry, releasing memory back to the
comment|/// specified allocator.
name|template
operator|<
name|typename
name|AllocatorTy
operator|>
name|void
name|Destroy
argument_list|(
argument|AllocatorTy&Allocator
argument_list|)
block|{
comment|// Free memory referenced by the item.
name|unsigned
name|AllocSize
operator|=
name|static_cast
operator|<
name|unsigned
operator|>
operator|(
sizeof|sizeof
argument_list|(
name|StringMapEntry
argument_list|)
operator|)
operator|+
name|getKeyLength
argument_list|()
operator|+
literal|1
block|;
name|this
operator|->
expr|~
name|StringMapEntry
argument_list|()
block|;
name|Allocator
operator|.
name|Deallocate
argument_list|(
name|static_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|,
name|AllocSize
argument_list|)
block|;   }
comment|/// Destroy this object, releasing memory back to the malloc allocator.
name|void
name|Destroy
argument_list|()
block|{
name|MallocAllocator
name|A
block|;
name|Destroy
argument_list|(
name|A
argument_list|)
block|;   }
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/// StringMap - This is an unconventional map that is specialized for handling
end_comment

begin_comment
comment|/// keys that are "strings", which are basically ranges of bytes. This does some
end_comment

begin_comment
comment|/// funky memory allocation and hashing things to make it extremely efficient,
end_comment

begin_comment
comment|/// storing the string data *after* the value in the map.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|ValueTy
operator|,
name|typename
name|AllocatorTy
operator|=
name|MallocAllocator
operator|>
name|class
name|StringMap
operator|:
name|public
name|StringMapImpl
block|{
name|AllocatorTy
name|Allocator
block|;
name|public
operator|:
typedef|typedef
name|StringMapEntry
operator|<
name|ValueTy
operator|>
name|MapEntryTy
expr_stmt|;
name|StringMap
argument_list|()
operator|:
name|StringMapImpl
argument_list|(
argument|static_cast<unsigned>(sizeof(MapEntryTy))
argument_list|)
block|{}
name|explicit
name|StringMap
argument_list|(
argument|unsigned InitialSize
argument_list|)
operator|:
name|StringMapImpl
argument_list|(
argument|InitialSize
argument_list|,
argument|static_cast<unsigned>(sizeof(MapEntryTy))
argument_list|)
block|{}
name|explicit
name|StringMap
argument_list|(
argument|AllocatorTy A
argument_list|)
operator|:
name|StringMapImpl
argument_list|(
name|static_cast
operator|<
name|unsigned
operator|>
operator|(
sizeof|sizeof
argument_list|(
name|MapEntryTy
argument_list|)
operator|)
argument_list|)
operator|,
name|Allocator
argument_list|(
argument|A
argument_list|)
block|{}
name|StringMap
argument_list|(
argument|unsigned InitialSize
argument_list|,
argument|AllocatorTy A
argument_list|)
operator|:
name|StringMapImpl
argument_list|(
name|InitialSize
argument_list|,
name|static_cast
operator|<
name|unsigned
operator|>
operator|(
sizeof|sizeof
argument_list|(
name|MapEntryTy
argument_list|)
operator|)
argument_list|)
operator|,
name|Allocator
argument_list|(
argument|A
argument_list|)
block|{}
name|StringMap
argument_list|(
name|StringMap
operator|&&
name|RHS
argument_list|)
operator|:
name|StringMapImpl
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|RHS
argument_list|)
argument_list|)
operator|,
name|Allocator
argument_list|(
argument|std::move(RHS.Allocator)
argument_list|)
block|{}
name|StringMap
operator|&
name|operator
operator|=
operator|(
name|StringMap
name|RHS
operator|)
block|{
name|StringMapImpl
operator|::
name|swap
argument_list|(
name|RHS
argument_list|)
block|;
name|std
operator|::
name|swap
argument_list|(
name|Allocator
argument_list|,
name|RHS
operator|.
name|Allocator
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_comment
comment|// FIXME: Implement copy operations if/when they're needed.
end_comment

begin_function
name|AllocatorTy
modifier|&
name|getAllocator
parameter_list|()
block|{
return|return
name|Allocator
return|;
block|}
end_function

begin_expr_stmt
specifier|const
name|AllocatorTy
operator|&
name|getAllocator
argument_list|()
specifier|const
block|{
return|return
name|Allocator
return|;
block|}
end_expr_stmt

begin_typedef
typedef|typedef
specifier|const
name|char
modifier|*
name|key_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|ValueTy
name|mapped_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|StringMapEntry
operator|<
name|ValueTy
operator|>
name|value_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|size_t
name|size_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|StringMapConstIterator
operator|<
name|ValueTy
operator|>
name|const_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|StringMapIterator
operator|<
name|ValueTy
operator|>
name|iterator
expr_stmt|;
end_typedef

begin_function
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|iterator
argument_list|(
name|TheTable
argument_list|,
name|NumBuckets
operator|==
literal|0
argument_list|)
return|;
block|}
end_function

begin_function
name|iterator
name|end
parameter_list|()
block|{
return|return
name|iterator
argument_list|(
name|TheTable
operator|+
name|NumBuckets
argument_list|,
name|true
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|TheTable
argument_list|,
name|NumBuckets
operator|==
literal|0
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|TheTable
operator|+
name|NumBuckets
argument_list|,
name|true
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|iterator
name|find
parameter_list|(
name|StringRef
name|Key
parameter_list|)
block|{
name|int
name|Bucket
init|=
name|FindKey
argument_list|(
name|Key
argument_list|)
decl_stmt|;
if|if
condition|(
name|Bucket
operator|==
operator|-
literal|1
condition|)
return|return
name|end
argument_list|()
return|;
return|return
name|iterator
argument_list|(
name|TheTable
operator|+
name|Bucket
argument_list|,
name|true
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
name|const_iterator
name|find
argument_list|(
name|StringRef
name|Key
argument_list|)
decl|const
block|{
name|int
name|Bucket
init|=
name|FindKey
argument_list|(
name|Key
argument_list|)
decl_stmt|;
if|if
condition|(
name|Bucket
operator|==
operator|-
literal|1
condition|)
return|return
name|end
argument_list|()
return|;
return|return
name|const_iterator
argument_list|(
name|TheTable
operator|+
name|Bucket
argument_list|,
name|true
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/// lookup - Return the entry for the specified key, or a default
end_comment

begin_comment
comment|/// constructed value if no such entry exists.
end_comment

begin_decl_stmt
name|ValueTy
name|lookup
argument_list|(
name|StringRef
name|Key
argument_list|)
decl|const
block|{
name|const_iterator
name|it
init|=
name|find
argument_list|(
name|Key
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|end
argument_list|()
condition|)
return|return
name|it
operator|->
name|second
return|;
return|return
name|ValueTy
argument_list|()
return|;
block|}
end_decl_stmt

begin_function
name|ValueTy
modifier|&
name|operator
function|[]
parameter_list|(
name|StringRef
name|Key
parameter_list|)
block|{
return|return
name|insert
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|Key
argument_list|,
name|ValueTy
argument_list|()
argument_list|)
argument_list|)
operator|.
name|first
operator|->
name|second
return|;
block|}
end_function

begin_comment
comment|/// count - Return 1 if the element is in the map, 0 otherwise.
end_comment

begin_decl_stmt
name|size_type
name|count
argument_list|(
name|StringRef
name|Key
argument_list|)
decl|const
block|{
return|return
name|find
argument_list|(
name|Key
argument_list|)
operator|==
name|end
argument_list|()
condition|?
literal|0
else|:
literal|1
return|;
block|}
end_decl_stmt

begin_comment
comment|/// insert - Insert the specified key/value pair into the map.  If the key
end_comment

begin_comment
comment|/// already exists in the map, return false and ignore the request, otherwise
end_comment

begin_comment
comment|/// insert it and return true.
end_comment

begin_function
name|bool
name|insert
parameter_list|(
name|MapEntryTy
modifier|*
name|KeyValue
parameter_list|)
block|{
name|unsigned
name|BucketNo
init|=
name|LookupBucketFor
argument_list|(
name|KeyValue
operator|->
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|StringMapEntryBase
modifier|*
modifier|&
name|Bucket
init|=
name|TheTable
index|[
name|BucketNo
index|]
decl_stmt|;
if|if
condition|(
name|Bucket
operator|&&
name|Bucket
operator|!=
name|getTombstoneVal
argument_list|()
condition|)
return|return
name|false
return|;
comment|// Already exists in map.
if|if
condition|(
name|Bucket
operator|==
name|getTombstoneVal
argument_list|()
condition|)
operator|--
name|NumTombstones
expr_stmt|;
name|Bucket
operator|=
name|KeyValue
expr_stmt|;
operator|++
name|NumItems
expr_stmt|;
name|assert
argument_list|(
name|NumItems
operator|+
name|NumTombstones
operator|<=
name|NumBuckets
argument_list|)
expr_stmt|;
name|RehashTable
argument_list|()
expr_stmt|;
return|return
name|true
return|;
block|}
end_function

begin_comment
comment|/// insert - Inserts the specified key/value pair into the map if the key
end_comment

begin_comment
comment|/// isn't already in the map. The bool component of the returned pair is true
end_comment

begin_comment
comment|/// if and only if the insertion takes place, and the iterator component of
end_comment

begin_comment
comment|/// the pair points to the element with key equivalent to the key of the pair.
end_comment

begin_expr_stmt
name|std
operator|::
name|pair
operator|<
name|iterator
operator|,
name|bool
operator|>
name|insert
argument_list|(
argument|std::pair<StringRef
argument_list|,
argument|ValueTy> KV
argument_list|)
block|{
name|unsigned
name|BucketNo
operator|=
name|LookupBucketFor
argument_list|(
name|KV
operator|.
name|first
argument_list|)
block|;
name|StringMapEntryBase
operator|*
operator|&
name|Bucket
operator|=
name|TheTable
index|[
name|BucketNo
index|]
block|;
if|if
condition|(
name|Bucket
operator|&&
name|Bucket
operator|!=
name|getTombstoneVal
argument_list|()
condition|)
return|return
name|std
operator|::
name|make_pair
argument_list|(
name|iterator
argument_list|(
name|TheTable
operator|+
name|BucketNo
argument_list|,
name|false
argument_list|)
argument_list|,
name|false
argument_list|)
return|;
end_expr_stmt

begin_comment
comment|// Already exists in map.
end_comment

begin_if
if|if
condition|(
name|Bucket
operator|==
name|getTombstoneVal
argument_list|()
condition|)
operator|--
name|NumTombstones
expr_stmt|;
end_if

begin_expr_stmt
name|Bucket
operator|=
name|MapEntryTy
operator|::
name|Create
argument_list|(
name|KV
operator|.
name|first
argument_list|,
name|Allocator
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|KV
operator|.
name|second
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|++
name|NumItems
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assert
argument_list|(
name|NumItems
operator|+
name|NumTombstones
operator|<=
name|NumBuckets
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|BucketNo
operator|=
name|RehashTable
argument_list|(
name|BucketNo
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|std
operator|::
name|make_pair
argument_list|(
name|iterator
argument_list|(
name|TheTable
operator|+
name|BucketNo
argument_list|,
name|false
argument_list|)
argument_list|,
name|true
argument_list|)
return|;
end_return

begin_comment
unit|}
comment|// clear - Empties out the StringMap
end_comment

begin_macro
unit|void
name|clear
argument_list|()
end_macro

begin_block
block|{
if|if
condition|(
name|empty
argument_list|()
condition|)
return|return;
comment|// Zap all values, resetting the keys back to non-present (not tombstone),
comment|// which is safe because we're removing all elements.
for|for
control|(
name|unsigned
name|I
init|=
literal|0
init|,
name|E
init|=
name|NumBuckets
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
block|{
name|StringMapEntryBase
modifier|*
modifier|&
name|Bucket
init|=
name|TheTable
index|[
name|I
index|]
decl_stmt|;
if|if
condition|(
name|Bucket
operator|&&
name|Bucket
operator|!=
name|getTombstoneVal
argument_list|()
condition|)
block|{
name|static_cast
operator|<
name|MapEntryTy
operator|*
operator|>
operator|(
name|Bucket
operator|)
operator|->
name|Destroy
argument_list|(
name|Allocator
argument_list|)
expr_stmt|;
block|}
name|Bucket
operator|=
name|nullptr
expr_stmt|;
block|}
name|NumItems
operator|=
literal|0
expr_stmt|;
name|NumTombstones
operator|=
literal|0
expr_stmt|;
block|}
end_block

begin_comment
comment|/// remove - Remove the specified key/value pair from the map, but do not
end_comment

begin_comment
comment|/// erase it.  This aborts if the key is not in the map.
end_comment

begin_function
name|void
name|remove
parameter_list|(
name|MapEntryTy
modifier|*
name|KeyValue
parameter_list|)
block|{
name|RemoveKey
argument_list|(
name|KeyValue
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|erase
parameter_list|(
name|iterator
name|I
parameter_list|)
block|{
name|MapEntryTy
modifier|&
name|V
init|=
operator|*
name|I
decl_stmt|;
name|remove
argument_list|(
operator|&
name|V
argument_list|)
expr_stmt|;
name|V
operator|.
name|Destroy
argument_list|(
name|Allocator
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|bool
name|erase
parameter_list|(
name|StringRef
name|Key
parameter_list|)
block|{
name|iterator
name|I
init|=
name|find
argument_list|(
name|Key
argument_list|)
decl_stmt|;
if|if
condition|(
name|I
operator|==
name|end
argument_list|()
condition|)
return|return
name|false
return|;
name|erase
argument_list|(
name|I
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
end_function

begin_expr_stmt
operator|~
name|StringMap
argument_list|()
block|{
comment|// Delete all the elements in the map, but don't reset the elements
comment|// to default values.  This is a copy of clear(), but avoids unnecessary
comment|// work not required in the destructor.
if|if
condition|(
operator|!
name|empty
argument_list|()
condition|)
block|{
for|for
control|(
name|unsigned
name|I
init|=
literal|0
init|,
name|E
init|=
name|NumBuckets
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
block|{
name|StringMapEntryBase
modifier|*
name|Bucket
init|=
name|TheTable
index|[
name|I
index|]
decl_stmt|;
if|if
condition|(
name|Bucket
operator|&&
name|Bucket
operator|!=
name|getTombstoneVal
argument_list|()
condition|)
block|{
name|static_cast
operator|<
name|MapEntryTy
operator|*
operator|>
operator|(
name|Bucket
operator|)
operator|->
name|Destroy
argument_list|(
name|Allocator
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}     }
name|free
argument_list|(
name|TheTable
argument_list|)
expr_stmt|;
end_expr_stmt

begin_empty_stmt
unit|} }
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|ValueTy
operator|>
name|class
name|StringMapConstIterator
block|{
name|protected
operator|:
name|StringMapEntryBase
operator|*
operator|*
name|Ptr
block|;
name|public
operator|:
typedef|typedef
name|StringMapEntry
operator|<
name|ValueTy
operator|>
name|value_type
expr_stmt|;
name|StringMapConstIterator
argument_list|()
operator|:
name|Ptr
argument_list|(
argument|nullptr
argument_list|)
block|{ }
name|explicit
name|StringMapConstIterator
argument_list|(
argument|StringMapEntryBase **Bucket
argument_list|,
argument|bool NoAdvance = false
argument_list|)
operator|:
name|Ptr
argument_list|(
argument|Bucket
argument_list|)
block|{
if|if
condition|(
operator|!
name|NoAdvance
condition|)
name|AdvancePastEmptyBuckets
argument_list|()
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|const
name|value_type
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|static_cast
operator|<
name|StringMapEntry
operator|<
name|ValueTy
operator|>
operator|*
operator|>
operator|(
operator|*
name|Ptr
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|const
name|value_type
operator|*
name|operator
operator|->
expr|(
end_expr_stmt

begin_expr_stmt
unit|)
specifier|const
block|{
return|return
name|static_cast
operator|<
name|StringMapEntry
operator|<
name|ValueTy
operator|>
operator|*
operator|>
operator|(
operator|*
name|Ptr
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|StringMapConstIterator
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|Ptr
operator|==
name|RHS
operator|.
name|Ptr
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|StringMapConstIterator
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|Ptr
operator|!=
name|RHS
operator|.
name|Ptr
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|StringMapConstIterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
comment|// Preincrement
operator|++
name|Ptr
block|;
name|AdvancePastEmptyBuckets
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|StringMapConstIterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
comment|// Postincrement
name|StringMapConstIterator
name|tmp
operator|=
operator|*
name|this
block|;
operator|++
operator|*
name|this
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_function
name|void
name|AdvancePastEmptyBuckets
parameter_list|()
block|{
while|while
condition|(
operator|*
name|Ptr
operator|==
name|nullptr
operator|||
operator|*
name|Ptr
operator|==
name|StringMapImpl
operator|::
name|getTombstoneVal
argument_list|()
condition|)
operator|++
name|Ptr
expr_stmt|;
block|}
end_function

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|ValueTy
operator|>
name|class
name|StringMapIterator
operator|:
name|public
name|StringMapConstIterator
operator|<
name|ValueTy
operator|>
block|{
name|public
operator|:
name|StringMapIterator
argument_list|()
block|{}
name|explicit
name|StringMapIterator
argument_list|(
argument|StringMapEntryBase **Bucket
argument_list|,
argument|bool NoAdvance = false
argument_list|)
operator|:
name|StringMapConstIterator
operator|<
name|ValueTy
operator|>
operator|(
name|Bucket
operator|,
name|NoAdvance
operator|)
block|{   }
name|StringMapEntry
operator|<
name|ValueTy
operator|>
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|static_cast
operator|<
name|StringMapEntry
operator|<
name|ValueTy
operator|>
operator|*
operator|>
operator|(
operator|*
name|this
operator|->
name|Ptr
operator|)
return|;
block|}
name|StringMapEntry
operator|<
name|ValueTy
operator|>
operator|*
name|operator
operator|->
expr|(
end_expr_stmt

begin_expr_stmt
unit|)
specifier|const
block|{
return|return
name|static_cast
operator|<
name|StringMapEntry
operator|<
name|ValueTy
operator|>
operator|*
operator|>
operator|(
operator|*
name|this
operator|->
name|Ptr
operator|)
return|;
block|}
end_expr_stmt

begin_endif
unit|};  }
endif|#
directive|endif
end_endif

end_unit

