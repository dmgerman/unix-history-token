begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- llvm/ADT/CachedHashString.h - Prehashed string/StringRef -*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines CachedHashString and CachedHashStringRef.  These are owning
end_comment

begin_comment
comment|// and not-owning string types that store their hash in addition to their string
end_comment

begin_comment
comment|// data.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unlike std::string, CachedHashString can be used in DenseSet/DenseMap
end_comment

begin_comment
comment|// (because, unlike std::string, CachedHashString lets us have empty and
end_comment

begin_comment
comment|// tombstone values).
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_ADT_CACHED_HASH_STRING_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_ADT_CACHED_HASH_STRING_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/raw_ostream.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|/// A container which contains a StringRef plus a precomputed hash.
name|class
name|CachedHashStringRef
block|{
specifier|const
name|char
modifier|*
name|P
decl_stmt|;
name|uint32_t
name|Size
decl_stmt|;
name|uint32_t
name|Hash
decl_stmt|;
name|public
label|:
comment|// Explicit because hashing a string isn't free.
name|explicit
name|CachedHashStringRef
argument_list|(
argument|StringRef S
argument_list|)
block|:
name|CachedHashStringRef
argument_list|(
argument|S
argument_list|,
argument|DenseMapInfo<StringRef>::getHashValue(S)
argument_list|)
block|{}
name|CachedHashStringRef
argument_list|(
argument|StringRef S
argument_list|,
argument|uint32_t Hash
argument_list|)
block|:
name|P
argument_list|(
name|S
operator|.
name|data
argument_list|()
argument_list|)
operator|,
name|Size
argument_list|(
name|S
operator|.
name|size
argument_list|()
argument_list|)
operator|,
name|Hash
argument_list|(
argument|Hash
argument_list|)
block|{
name|assert
argument_list|(
name|S
operator|.
name|size
argument_list|()
operator|<=
name|std
operator|::
name|numeric_limits
operator|<
name|uint32_t
operator|>
operator|::
name|max
argument_list|()
argument_list|)
block|;   }
name|StringRef
name|val
argument_list|()
specifier|const
block|{
return|return
name|StringRef
argument_list|(
name|P
argument_list|,
name|Size
argument_list|)
return|;
block|}
name|uint32_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|Size
return|;
block|}
name|uint32_t
name|hash
argument_list|()
specifier|const
block|{
return|return
name|Hash
return|;
block|}
block|}
empty_stmt|;
name|template
operator|<
operator|>
expr|struct
name|DenseMapInfo
operator|<
name|CachedHashStringRef
operator|>
block|{
specifier|static
name|CachedHashStringRef
name|getEmptyKey
argument_list|()
block|{
return|return
name|CachedHashStringRef
argument_list|(
name|DenseMapInfo
operator|<
name|StringRef
operator|>
operator|::
name|getEmptyKey
argument_list|()
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|static
name|CachedHashStringRef
name|getTombstoneKey
argument_list|()
block|{
return|return
name|CachedHashStringRef
argument_list|(
name|DenseMapInfo
operator|<
name|StringRef
operator|>
operator|::
name|getTombstoneKey
argument_list|()
argument_list|,
literal|1
argument_list|)
return|;
block|}
specifier|static
name|unsigned
name|getHashValue
argument_list|(
argument|const CachedHashStringRef&S
argument_list|)
block|{
name|assert
argument_list|(
operator|!
name|isEqual
argument_list|(
name|S
argument_list|,
name|getEmptyKey
argument_list|()
argument_list|)
operator|&&
literal|"Cannot hash the empty key!"
argument_list|)
block|;
name|assert
argument_list|(
operator|!
name|isEqual
argument_list|(
name|S
argument_list|,
name|getTombstoneKey
argument_list|()
argument_list|)
operator|&&
literal|"Cannot hash the tombstone key!"
argument_list|)
block|;
return|return
name|S
operator|.
name|hash
argument_list|()
return|;
block|}
specifier|static
name|bool
name|isEqual
argument_list|(
argument|const CachedHashStringRef&LHS
argument_list|,
argument|const CachedHashStringRef&RHS
argument_list|)
block|{
return|return
name|LHS
operator|.
name|hash
argument_list|()
operator|==
name|RHS
operator|.
name|hash
argument_list|()
operator|&&
name|DenseMapInfo
operator|<
name|StringRef
operator|>
operator|::
name|isEqual
argument_list|(
name|LHS
operator|.
name|val
argument_list|()
argument_list|,
name|RHS
operator|.
name|val
argument_list|()
argument_list|)
return|;
block|}
expr|}
block|;
comment|/// A container which contains a string, which it owns, plus a precomputed hash.
comment|///
comment|/// We do not null-terminate the string.
name|class
name|CachedHashString
block|{
name|friend
expr|struct
name|DenseMapInfo
operator|<
name|CachedHashString
operator|>
block|;
name|char
operator|*
name|P
block|;
name|uint32_t
name|Size
block|;
name|uint32_t
name|Hash
block|;
specifier|static
name|char
operator|*
name|getEmptyKeyPtr
argument_list|()
block|{
return|return
name|DenseMapInfo
operator|<
name|char
operator|*
operator|>
operator|::
name|getEmptyKey
argument_list|()
return|;
block|}
specifier|static
name|char
operator|*
name|getTombstoneKeyPtr
argument_list|()
block|{
return|return
name|DenseMapInfo
operator|<
name|char
operator|*
operator|>
operator|::
name|getTombstoneKey
argument_list|()
return|;
block|}
name|bool
name|isEmptyOrTombstone
argument_list|()
specifier|const
block|{
return|return
name|P
operator|==
name|getEmptyKeyPtr
argument_list|()
operator|||
name|P
operator|==
name|getTombstoneKeyPtr
argument_list|()
return|;
block|}
expr|struct
name|ConstructEmptyOrTombstoneTy
block|{}
block|;
name|CachedHashString
argument_list|(
name|ConstructEmptyOrTombstoneTy
argument_list|,
name|char
operator|*
name|EmptyOrTombstonePtr
argument_list|)
operator|:
name|P
argument_list|(
name|EmptyOrTombstonePtr
argument_list|)
block|,
name|Size
argument_list|(
literal|0
argument_list|)
block|,
name|Hash
argument_list|(
literal|0
argument_list|)
block|{
name|assert
argument_list|(
name|isEmptyOrTombstone
argument_list|()
argument_list|)
block|;   }
comment|// TODO: Use small-string optimization to avoid allocating.
name|public
operator|:
name|explicit
name|CachedHashString
argument_list|(
specifier|const
name|char
operator|*
name|S
argument_list|)
operator|:
name|CachedHashString
argument_list|(
argument|StringRef(S)
argument_list|)
block|{}
comment|// Explicit because copying and hashing a string isn't free.
name|explicit
name|CachedHashString
argument_list|(
argument|StringRef S
argument_list|)
operator|:
name|CachedHashString
argument_list|(
argument|S
argument_list|,
argument|DenseMapInfo<StringRef>::getHashValue(S)
argument_list|)
block|{}
name|CachedHashString
argument_list|(
argument|StringRef S
argument_list|,
argument|uint32_t Hash
argument_list|)
operator|:
name|P
argument_list|(
argument|new char[S.size()]
argument_list|)
block|,
name|Size
argument_list|(
name|S
operator|.
name|size
argument_list|()
argument_list|)
block|,
name|Hash
argument_list|(
argument|Hash
argument_list|)
block|{
name|memcpy
argument_list|(
name|P
argument_list|,
name|S
operator|.
name|data
argument_list|()
argument_list|,
name|S
operator|.
name|size
argument_list|()
argument_list|)
block|;   }
comment|// Ideally this class would not be copyable.  But SetVector requires copyable
comment|// keys, and we want this to be usable there.
name|CachedHashString
argument_list|(
specifier|const
name|CachedHashString
operator|&
name|Other
argument_list|)
operator|:
name|Size
argument_list|(
name|Other
operator|.
name|Size
argument_list|)
block|,
name|Hash
argument_list|(
argument|Other.Hash
argument_list|)
block|{
if|if
condition|(
name|Other
operator|.
name|isEmptyOrTombstone
argument_list|()
condition|)
block|{
name|P
operator|=
name|Other
operator|.
name|P
expr_stmt|;
block|}
else|else
block|{
name|P
operator|=
name|new
name|char
index|[
name|Size
index|]
expr_stmt|;
name|memcpy
argument_list|(
name|P
argument_list|,
name|Other
operator|.
name|P
argument_list|,
name|Size
argument_list|)
expr_stmt|;
block|}
block|}
name|CachedHashString
operator|&
name|operator
operator|=
operator|(
name|CachedHashString
name|Other
operator|)
block|{
name|swap
argument_list|(
operator|*
name|this
argument_list|,
name|Other
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
name|CachedHashString
argument_list|(
argument|CachedHashString&&Other
argument_list|)
name|noexcept
operator|:
name|P
argument_list|(
name|Other
operator|.
name|P
argument_list|)
block|,
name|Size
argument_list|(
name|Other
operator|.
name|Size
argument_list|)
block|,
name|Hash
argument_list|(
argument|Other.Hash
argument_list|)
block|{
name|Other
operator|.
name|P
operator|=
name|getEmptyKeyPtr
argument_list|()
block|;   }
operator|~
name|CachedHashString
argument_list|()
block|{
if|if
condition|(
operator|!
name|isEmptyOrTombstone
argument_list|()
condition|)
name|delete
index|[]
name|P
decl_stmt|;
block|}
name|StringRef
name|val
argument_list|()
specifier|const
block|{
return|return
name|StringRef
argument_list|(
name|P
argument_list|,
name|Size
argument_list|)
return|;
block|}
name|uint32_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|Size
return|;
block|}
name|uint32_t
name|hash
argument_list|()
specifier|const
block|{
return|return
name|Hash
return|;
block|}
name|operator
name|StringRef
argument_list|()
specifier|const
block|{
return|return
name|val
argument_list|()
return|;
block|}
name|operator
name|CachedHashStringRef
argument_list|()
specifier|const
block|{
return|return
name|CachedHashStringRef
argument_list|(
name|val
argument_list|()
argument_list|,
name|Hash
argument_list|)
return|;
block|}
name|friend
name|void
name|swap
argument_list|(
argument|CachedHashString&LHS
argument_list|,
argument|CachedHashString&RHS
argument_list|)
block|{
name|using
name|std
operator|::
name|swap
block|;
name|swap
argument_list|(
name|LHS
operator|.
name|P
argument_list|,
name|RHS
operator|.
name|P
argument_list|)
block|;
name|swap
argument_list|(
name|LHS
operator|.
name|Size
argument_list|,
name|RHS
operator|.
name|Size
argument_list|)
block|;
name|swap
argument_list|(
name|LHS
operator|.
name|Hash
argument_list|,
name|RHS
operator|.
name|Hash
argument_list|)
block|;   }
expr|}
block|;
name|template
operator|<
operator|>
expr|struct
name|DenseMapInfo
operator|<
name|CachedHashString
operator|>
block|{
specifier|static
name|CachedHashString
name|getEmptyKey
argument_list|()
block|{
return|return
name|CachedHashString
argument_list|(
name|CachedHashString
operator|::
name|ConstructEmptyOrTombstoneTy
argument_list|()
argument_list|,
name|CachedHashString
operator|::
name|getEmptyKeyPtr
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|CachedHashString
name|getTombstoneKey
argument_list|()
block|{
return|return
name|CachedHashString
argument_list|(
name|CachedHashString
operator|::
name|ConstructEmptyOrTombstoneTy
argument_list|()
argument_list|,
name|CachedHashString
operator|::
name|getTombstoneKeyPtr
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|unsigned
name|getHashValue
argument_list|(
argument|const CachedHashString&S
argument_list|)
block|{
name|assert
argument_list|(
operator|!
name|isEqual
argument_list|(
name|S
argument_list|,
name|getEmptyKey
argument_list|()
argument_list|)
operator|&&
literal|"Cannot hash the empty key!"
argument_list|)
block|;
name|assert
argument_list|(
operator|!
name|isEqual
argument_list|(
name|S
argument_list|,
name|getTombstoneKey
argument_list|()
argument_list|)
operator|&&
literal|"Cannot hash the tombstone key!"
argument_list|)
block|;
return|return
name|S
operator|.
name|hash
argument_list|()
return|;
block|}
specifier|static
name|bool
name|isEqual
argument_list|(
argument|const CachedHashString&LHS
argument_list|,
argument|const CachedHashString&RHS
argument_list|)
block|{
if|if
condition|(
name|LHS
operator|.
name|hash
argument_list|()
operator|!=
name|RHS
operator|.
name|hash
argument_list|()
condition|)
return|return
name|false
return|;
if|if
condition|(
name|LHS
operator|.
name|P
operator|==
name|CachedHashString
operator|::
name|getEmptyKeyPtr
argument_list|()
condition|)
return|return
name|RHS
operator|.
name|P
operator|==
name|CachedHashString
operator|::
name|getEmptyKeyPtr
argument_list|()
return|;
if|if
condition|(
name|LHS
operator|.
name|P
operator|==
name|CachedHashString
operator|::
name|getTombstoneKeyPtr
argument_list|()
condition|)
return|return
name|RHS
operator|.
name|P
operator|==
name|CachedHashString
operator|::
name|getTombstoneKeyPtr
argument_list|()
return|;
comment|// This is safe because if RHS.P is the empty or tombstone key, it will have
comment|// length 0, so we'll never dereference its pointer.
return|return
name|LHS
operator|.
name|val
argument_list|()
operator|==
name|RHS
operator|.
name|val
argument_list|()
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

