begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- llvm/ADT/DenseSet.h - Dense probed hash table ------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines the DenseSet and SmallDenseSet classes.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_ADT_DENSESET_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_ADT_DENSESET_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|<initializer_list>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|detail
block|{
struct|struct
name|DenseSetEmpty
block|{}
struct|;
comment|// Use the empty base class trick so we can create a DenseMap where the buckets
comment|// contain only a single item.
name|template
operator|<
name|typename
name|KeyT
operator|>
name|class
name|DenseSetPair
operator|:
name|public
name|DenseSetEmpty
block|{
name|KeyT
name|key
block|;
name|public
operator|:
name|KeyT
operator|&
name|getFirst
argument_list|()
block|{
return|return
name|key
return|;
block|}
specifier|const
name|KeyT
operator|&
name|getFirst
argument_list|()
specifier|const
block|{
return|return
name|key
return|;
block|}
name|DenseSetEmpty
operator|&
name|getSecond
argument_list|()
block|{
return|return
operator|*
name|this
return|;
block|}
specifier|const
name|DenseSetEmpty
operator|&
name|getSecond
argument_list|()
specifier|const
block|{
return|return
operator|*
name|this
return|;
block|}
expr|}
block|;
comment|/// Base class for DenseSet and DenseSmallSet.
comment|///
comment|/// MapTy should be either
comment|///
comment|///   DenseMap<ValueT, detail::DenseSetEmpty, ValueInfoT,
comment|///            detail::DenseSetPair<ValueT>>
comment|///
comment|/// or the equivalent SmallDenseMap type.  ValueInfoT must implement the
comment|/// DenseMapInfo "concept".
name|template
operator|<
name|typename
name|ValueT
block|,
name|typename
name|MapTy
block|,
name|typename
name|ValueInfoT
operator|>
name|class
name|DenseSetImpl
block|{
name|static_assert
argument_list|(
expr|sizeof
operator|(
name|typename
name|MapTy
operator|::
name|value_type
operator|)
operator|==
sizeof|sizeof
argument_list|(
name|ValueT
argument_list|)
argument_list|,
literal|"DenseMap buckets unexpectedly large!"
argument_list|)
block|;
name|MapTy
name|TheMap
block|;
name|public
operator|:
typedef|typedef
name|ValueT
name|key_type
typedef|;
typedef|typedef
name|ValueT
name|value_type
typedef|;
typedef|typedef
name|unsigned
name|size_type
typedef|;
name|explicit
name|DenseSetImpl
argument_list|(
argument|unsigned InitialReserve =
literal|0
argument_list|)
block|:
name|TheMap
argument_list|(
argument|InitialReserve
argument_list|)
block|{}
name|DenseSetImpl
argument_list|(
name|std
operator|::
name|initializer_list
operator|<
name|ValueT
operator|>
name|Elems
argument_list|)
operator|:
name|DenseSetImpl
argument_list|(
argument|Elems.size()
argument_list|)
block|{
name|insert
argument_list|(
name|Elems
operator|.
name|begin
argument_list|()
argument_list|,
name|Elems
operator|.
name|end
argument_list|()
argument_list|)
block|;   }
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|TheMap
operator|.
name|empty
argument_list|()
return|;
block|}
name|size_type
name|size
argument_list|()
specifier|const
block|{
return|return
name|TheMap
operator|.
name|size
argument_list|()
return|;
block|}
name|size_t
name|getMemorySize
argument_list|()
specifier|const
block|{
return|return
name|TheMap
operator|.
name|getMemorySize
argument_list|()
return|;
block|}
comment|/// Grow the DenseSet so that it has at least Size buckets. Will not shrink
comment|/// the Size of the set.
name|void
name|resize
parameter_list|(
name|size_t
name|Size
parameter_list|)
block|{
name|TheMap
operator|.
name|resize
argument_list|(
name|Size
argument_list|)
expr_stmt|;
block|}
comment|/// Grow the DenseSet so that it can contain at least \p NumEntries items
comment|/// before resizing again.
name|void
name|reserve
parameter_list|(
name|size_t
name|Size
parameter_list|)
block|{
name|TheMap
operator|.
name|reserve
argument_list|(
name|Size
argument_list|)
expr_stmt|;
block|}
name|void
name|clear
parameter_list|()
block|{
name|TheMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/// Return 1 if the specified key is in the set, 0 otherwise.
name|size_type
name|count
argument_list|(
specifier|const
name|ValueT
operator|&
name|V
argument_list|)
decl|const
block|{
return|return
name|TheMap
operator|.
name|count
argument_list|(
name|V
argument_list|)
return|;
block|}
name|bool
name|erase
parameter_list|(
specifier|const
name|ValueT
modifier|&
name|V
parameter_list|)
block|{
return|return
name|TheMap
operator|.
name|erase
argument_list|(
name|V
argument_list|)
return|;
block|}
name|void
name|swap
parameter_list|(
name|DenseSetImpl
modifier|&
name|RHS
parameter_list|)
block|{
name|TheMap
operator|.
name|swap
argument_list|(
name|RHS
operator|.
name|TheMap
argument_list|)
expr_stmt|;
block|}
comment|// Iterators.
name|class
name|Iterator
block|{
name|typename
name|MapTy
operator|::
name|iterator
name|I
expr_stmt|;
name|friend
name|class
name|DenseSetImpl
decl_stmt|;
name|public
label|:
typedef|typedef
name|typename
name|MapTy
operator|::
name|iterator
operator|::
name|difference_type
name|difference_type
expr_stmt|;
typedef|typedef
name|ValueT
name|value_type
typedef|;
typedef|typedef
name|value_type
modifier|*
name|pointer
typedef|;
typedef|typedef
name|value_type
modifier|&
name|reference
typedef|;
typedef|typedef
name|std
operator|::
name|forward_iterator_tag
name|iterator_category
expr_stmt|;
name|Iterator
argument_list|(
argument|const typename MapTy::iterator&i
argument_list|)
block|:
name|I
argument_list|(
argument|i
argument_list|)
block|{}
name|ValueT
modifier|&
name|operator
modifier|*
parameter_list|()
block|{
return|return
name|I
operator|->
name|getFirst
argument_list|()
return|;
block|}
name|ValueT
operator|*
name|operator
operator|->
expr|(
block|)
block|{
return|return
operator|&
name|I
operator|->
name|getFirst
argument_list|()
return|;
block|}
name|Iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|I
block|;
return|return
operator|*
name|this
return|;
block|}
name|Iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|auto
name|T
operator|=
operator|*
name|this
block|;
operator|++
name|I
block|;
return|return
name|T
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|Iterator
operator|&
name|X
operator|)
specifier|const
block|{
return|return
name|I
operator|==
name|X
operator|.
name|I
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|Iterator
operator|&
name|X
operator|)
specifier|const
block|{
return|return
name|I
operator|!=
name|X
operator|.
name|I
return|;
block|}
block|}
empty_stmt|;
name|class
name|ConstIterator
block|{
name|typename
name|MapTy
operator|::
name|const_iterator
name|I
expr_stmt|;
name|friend
name|class
name|DenseSet
decl_stmt|;
name|public
label|:
typedef|typedef
name|typename
name|MapTy
operator|::
name|const_iterator
operator|::
name|difference_type
name|difference_type
expr_stmt|;
typedef|typedef
name|ValueT
name|value_type
typedef|;
typedef|typedef
name|value_type
modifier|*
name|pointer
typedef|;
typedef|typedef
name|value_type
modifier|&
name|reference
typedef|;
typedef|typedef
name|std
operator|::
name|forward_iterator_tag
name|iterator_category
expr_stmt|;
name|ConstIterator
argument_list|(
argument|const typename MapTy::const_iterator&i
argument_list|)
block|:
name|I
argument_list|(
argument|i
argument_list|)
block|{}
specifier|const
name|ValueT
modifier|&
name|operator
modifier|*
parameter_list|()
block|{
return|return
name|I
operator|->
name|getFirst
argument_list|()
return|;
block|}
specifier|const
name|ValueT
operator|*
name|operator
operator|->
expr|(
block|)
block|{
return|return
operator|&
name|I
operator|->
name|getFirst
argument_list|()
return|;
block|}
name|ConstIterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|I
block|;
return|return
operator|*
name|this
return|;
block|}
name|ConstIterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|auto
name|T
operator|=
operator|*
name|this
block|;
operator|++
name|I
block|;
return|return
name|T
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|ConstIterator
operator|&
name|X
operator|)
specifier|const
block|{
return|return
name|I
operator|==
name|X
operator|.
name|I
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|ConstIterator
operator|&
name|X
operator|)
specifier|const
block|{
return|return
name|I
operator|!=
name|X
operator|.
name|I
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_typedef
typedef|typedef
name|Iterator
name|iterator
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|ConstIterator
name|const_iterator
typedef|;
end_typedef

begin_function
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|Iterator
argument_list|(
name|TheMap
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
name|iterator
name|end
parameter_list|()
block|{
return|return
name|Iterator
argument_list|(
name|TheMap
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|ConstIterator
argument_list|(
name|TheMap
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|ConstIterator
argument_list|(
name|TheMap
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|iterator
name|find
parameter_list|(
specifier|const
name|ValueT
modifier|&
name|V
parameter_list|)
block|{
return|return
name|Iterator
argument_list|(
name|TheMap
operator|.
name|find
argument_list|(
name|V
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
name|const_iterator
name|find
argument_list|(
specifier|const
name|ValueT
operator|&
name|V
argument_list|)
decl|const
block|{
return|return
name|ConstIterator
argument_list|(
name|TheMap
operator|.
name|find
argument_list|(
name|V
argument_list|)
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/// Alternative version of find() which allows a different, and possibly less
end_comment

begin_comment
comment|/// expensive, key type.
end_comment

begin_comment
comment|/// The DenseMapInfo is responsible for supplying methods
end_comment

begin_comment
comment|/// getHashValue(LookupKeyT) and isEqual(LookupKeyT, KeyT) for each key type
end_comment

begin_comment
comment|/// used.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|LookupKeyT
operator|>
name|iterator
name|find_as
argument_list|(
argument|const LookupKeyT&Val
argument_list|)
block|{
return|return
name|Iterator
argument_list|(
name|TheMap
operator|.
name|find_as
argument_list|(
name|Val
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|LookupKeyT
operator|>
name|const_iterator
name|find_as
argument_list|(
argument|const LookupKeyT&Val
argument_list|)
specifier|const
block|{
return|return
name|ConstIterator
argument_list|(
name|TheMap
operator|.
name|find_as
argument_list|(
name|Val
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|void
name|erase
parameter_list|(
name|Iterator
name|I
parameter_list|)
block|{
return|return
name|TheMap
operator|.
name|erase
argument_list|(
name|I
operator|.
name|I
argument_list|)
return|;
block|}
end_function

begin_function
name|void
name|erase
parameter_list|(
name|ConstIterator
name|CI
parameter_list|)
block|{
return|return
name|TheMap
operator|.
name|erase
argument_list|(
name|CI
operator|.
name|I
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|std
operator|::
name|pair
operator|<
name|iterator
operator|,
name|bool
operator|>
name|insert
argument_list|(
argument|const ValueT&V
argument_list|)
block|{
name|detail
operator|::
name|DenseSetEmpty
name|Empty
block|;
return|return
name|TheMap
operator|.
name|try_emplace
argument_list|(
name|V
argument_list|,
name|Empty
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|pair
operator|<
name|iterator
operator|,
name|bool
operator|>
name|insert
argument_list|(
argument|ValueT&&V
argument_list|)
block|{
name|detail
operator|::
name|DenseSetEmpty
name|Empty
block|;
return|return
name|TheMap
operator|.
name|try_emplace
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|V
argument_list|)
argument_list|,
name|Empty
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/// Alternative version of insert that uses a different (and possibly less
end_comment

begin_comment
comment|/// expensive) key type.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|LookupKeyT
operator|>
name|std
operator|::
name|pair
operator|<
name|iterator
operator|,
name|bool
operator|>
name|insert_as
argument_list|(
argument|const ValueT&V
argument_list|,
argument|const LookupKeyT&LookupKey
argument_list|)
block|{
return|return
name|TheMap
operator|.
name|insert_as
argument_list|(
block|{
name|V
block|,
name|detail
operator|::
name|DenseSetEmpty
argument_list|()
block|}
argument_list|,
name|LookupKey
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|LookupKeyT
operator|>
name|std
operator|::
name|pair
operator|<
name|iterator
operator|,
name|bool
operator|>
name|insert_as
argument_list|(
argument|ValueT&&V
argument_list|,
argument|const LookupKeyT&LookupKey
argument_list|)
block|{
return|return
name|TheMap
operator|.
name|insert_as
argument_list|(
block|{
name|std
operator|::
name|move
argument_list|(
name|V
argument_list|)
block|,
name|detail
operator|::
name|DenseSetEmpty
argument_list|()
block|}
argument_list|,
name|LookupKey
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// Range insertion of values.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|InputIt
operator|>
name|void
name|insert
argument_list|(
argument|InputIt I
argument_list|,
argument|InputIt E
argument_list|)
block|{
for|for
control|(
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
name|insert
argument_list|(
operator|*
name|I
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_comment
unit|};  }
comment|// namespace detail
end_comment

begin_comment
comment|/// Implements a dense probed hash-table based set.
end_comment

begin_expr_stmt
unit|template
operator|<
name|typename
name|ValueT
operator|,
name|typename
name|ValueInfoT
operator|=
name|DenseMapInfo
operator|<
name|ValueT
operator|>>
name|class
name|DenseSet
operator|:
name|public
name|detail
operator|::
name|DenseSetImpl
operator|<
name|ValueT
operator|,
name|DenseMap
operator|<
name|ValueT
operator|,
name|detail
operator|::
name|DenseSetEmpty
operator|,
name|ValueInfoT
operator|,
name|detail
operator|::
name|DenseSetPair
operator|<
name|ValueT
operator|>>
operator|,
name|ValueInfoT
operator|>
block|{
name|using
name|BaseT
operator|=
name|detail
operator|::
name|DenseSetImpl
operator|<
name|ValueT
block|,
name|DenseMap
operator|<
name|ValueT
block|,
name|detail
operator|::
name|DenseSetEmpty
block|,
name|ValueInfoT
block|,
name|detail
operator|::
name|DenseSetPair
operator|<
name|ValueT
operator|>>
block|,
name|ValueInfoT
operator|>
block|;
name|public
operator|:
name|using
name|BaseT
operator|::
name|BaseT
block|; }
expr_stmt|;
end_expr_stmt

begin_comment
comment|/// Implements a dense probed hash-table based set with some number of buckets
end_comment

begin_comment
comment|/// stored inline.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|ValueT
operator|,
name|unsigned
name|InlineBuckets
operator|=
literal|4
operator|,
name|typename
name|ValueInfoT
operator|=
name|DenseMapInfo
operator|<
name|ValueT
operator|>>
name|class
name|SmallDenseSet
operator|:
name|public
name|detail
operator|::
name|DenseSetImpl
operator|<
name|ValueT
operator|,
name|SmallDenseMap
operator|<
name|ValueT
operator|,
name|detail
operator|::
name|DenseSetEmpty
operator|,
name|InlineBuckets
operator|,
name|ValueInfoT
operator|,
name|detail
operator|::
name|DenseSetPair
operator|<
name|ValueT
operator|>>
operator|,
name|ValueInfoT
operator|>
block|{
name|using
name|BaseT
operator|=
name|detail
operator|::
name|DenseSetImpl
operator|<
name|ValueT
block|,
name|SmallDenseMap
operator|<
name|ValueT
block|,
name|detail
operator|::
name|DenseSetEmpty
block|,
name|InlineBuckets
block|,
name|ValueInfoT
block|,
name|detail
operator|::
name|DenseSetPair
operator|<
name|ValueT
operator|>>
block|,
name|ValueInfoT
operator|>
block|;
name|public
operator|:
name|using
name|BaseT
operator|::
name|BaseT
block|; }
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

