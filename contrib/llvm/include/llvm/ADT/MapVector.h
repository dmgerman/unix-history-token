begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- llvm/ADT/MapVector.h - Map w/ deterministic value order --*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file implements a map that provides insertion order iteration. The
end_comment

begin_comment
comment|// interface is purposefully minimal. The key is assumed to be cheap to copy
end_comment

begin_comment
comment|// and 2 copies are kept, one for indexing in a DenseMap, one for iteration in
end_comment

begin_comment
comment|// a std::vector.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_ADT_MAPVECTOR_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_ADT_MAPVECTOR_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|/// This class implements a map that also provides access to all stored values
comment|/// in a deterministic order. The values are kept in a std::vector and the
comment|/// mapping is done with DenseMap from Keys to indexes in that vector.
name|template
operator|<
name|typename
name|KeyT
operator|,
name|typename
name|ValueT
operator|,
name|typename
name|MapType
operator|=
name|llvm
operator|::
name|DenseMap
operator|<
name|KeyT
operator|,
name|unsigned
operator|>
operator|,
name|typename
name|VectorType
operator|=
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|pair
operator|<
name|KeyT
operator|,
name|ValueT
operator|>
expr|>
operator|>
name|class
name|MapVector
block|{
typedef|typedef
name|typename
name|VectorType
operator|::
name|size_type
name|size_type
expr_stmt|;
name|MapType
name|Map
expr_stmt|;
name|VectorType
name|Vector
decl_stmt|;
name|public
label|:
typedef|typedef
name|typename
name|VectorType
operator|::
name|iterator
name|iterator
expr_stmt|;
typedef|typedef
name|typename
name|VectorType
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
typedef|typedef
name|typename
name|VectorType
operator|::
name|reverse_iterator
name|reverse_iterator
expr_stmt|;
typedef|typedef
name|typename
name|VectorType
operator|::
name|const_reverse_iterator
name|const_reverse_iterator
expr_stmt|;
name|size_type
name|size
argument_list|()
specifier|const
block|{
return|return
name|Vector
operator|.
name|size
argument_list|()
return|;
block|}
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|Vector
operator|.
name|begin
argument_list|()
return|;
block|}
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|Vector
operator|.
name|begin
argument_list|()
return|;
block|}
name|iterator
name|end
parameter_list|()
block|{
return|return
name|Vector
operator|.
name|end
argument_list|()
return|;
block|}
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|Vector
operator|.
name|end
argument_list|()
return|;
block|}
name|reverse_iterator
name|rbegin
parameter_list|()
block|{
return|return
name|Vector
operator|.
name|rbegin
argument_list|()
return|;
block|}
name|const_reverse_iterator
name|rbegin
argument_list|()
specifier|const
block|{
return|return
name|Vector
operator|.
name|rbegin
argument_list|()
return|;
block|}
name|reverse_iterator
name|rend
parameter_list|()
block|{
return|return
name|Vector
operator|.
name|rend
argument_list|()
return|;
block|}
name|const_reverse_iterator
name|rend
argument_list|()
specifier|const
block|{
return|return
name|Vector
operator|.
name|rend
argument_list|()
return|;
block|}
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|Vector
operator|.
name|empty
argument_list|()
return|;
block|}
name|std
operator|::
name|pair
operator|<
name|KeyT
operator|,
name|ValueT
operator|>
operator|&
name|front
argument_list|()
block|{
return|return
name|Vector
operator|.
name|front
argument_list|()
return|;
block|}
specifier|const
name|std
operator|::
name|pair
operator|<
name|KeyT
operator|,
name|ValueT
operator|>
operator|&
name|front
argument_list|()
specifier|const
block|{
return|return
name|Vector
operator|.
name|front
argument_list|()
return|;
block|}
name|std
operator|::
name|pair
operator|<
name|KeyT
operator|,
name|ValueT
operator|>
operator|&
name|back
argument_list|()
block|{
return|return
name|Vector
operator|.
name|back
argument_list|()
return|;
block|}
specifier|const
name|std
operator|::
name|pair
operator|<
name|KeyT
operator|,
name|ValueT
operator|>
operator|&
name|back
argument_list|()
specifier|const
block|{
return|return
name|Vector
operator|.
name|back
argument_list|()
return|;
block|}
name|void
name|clear
parameter_list|()
block|{
name|Map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Vector
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|ValueT
modifier|&
name|operator
function|[]
parameter_list|(
specifier|const
name|KeyT
modifier|&
name|Key
parameter_list|)
block|{
name|std
operator|::
name|pair
operator|<
name|KeyT
operator|,
name|unsigned
operator|>
name|Pair
operator|=
name|std
operator|::
name|make_pair
argument_list|(
name|Key
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|std
operator|::
name|pair
operator|<
name|typename
name|MapType
operator|::
name|iterator
operator|,
name|bool
operator|>
name|Result
operator|=
name|Map
operator|.
name|insert
argument_list|(
name|Pair
argument_list|)
expr_stmt|;
name|unsigned
modifier|&
name|I
init|=
name|Result
operator|.
name|first
operator|->
name|second
decl_stmt|;
if|if
condition|(
name|Result
operator|.
name|second
condition|)
block|{
name|Vector
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|Key
argument_list|,
name|ValueT
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|I
operator|=
name|Vector
operator|.
name|size
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|Vector
index|[
name|I
index|]
operator|.
name|second
return|;
block|}
name|ValueT
name|lookup
argument_list|(
specifier|const
name|KeyT
operator|&
name|Key
argument_list|)
decl|const
block|{
name|typename
name|MapType
operator|::
name|const_iterator
name|Pos
operator|=
name|Map
operator|.
name|find
argument_list|(
name|Key
argument_list|)
expr_stmt|;
return|return
name|Pos
operator|==
name|Map
operator|.
name|end
argument_list|()
condition|?
name|ValueT
argument_list|()
else|:
name|Vector
index|[
name|Pos
operator|->
name|second
index|]
operator|.
name|second
return|;
block|}
name|std
operator|::
name|pair
operator|<
name|iterator
operator|,
name|bool
operator|>
name|insert
argument_list|(
argument|const std::pair<KeyT
argument_list|,
argument|ValueT>&KV
argument_list|)
block|{
name|std
operator|::
name|pair
operator|<
name|KeyT
block|,
name|unsigned
operator|>
name|Pair
operator|=
name|std
operator|::
name|make_pair
argument_list|(
name|KV
operator|.
name|first
argument_list|,
literal|0
argument_list|)
block|;
name|std
operator|::
name|pair
operator|<
name|typename
name|MapType
operator|::
name|iterator
block|,
name|bool
operator|>
name|Result
operator|=
name|Map
operator|.
name|insert
argument_list|(
name|Pair
argument_list|)
block|;
name|unsigned
operator|&
name|I
operator|=
name|Result
operator|.
name|first
operator|->
name|second
block|;
if|if
condition|(
name|Result
operator|.
name|second
condition|)
block|{
name|Vector
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|KV
operator|.
name|first
argument_list|,
name|KV
operator|.
name|second
argument_list|)
argument_list|)
expr_stmt|;
name|I
operator|=
name|Vector
operator|.
name|size
argument_list|()
operator|-
literal|1
expr_stmt|;
return|return
name|std
operator|::
name|make_pair
argument_list|(
name|std
operator|::
name|prev
argument_list|(
name|end
argument_list|()
argument_list|)
argument_list|,
name|true
argument_list|)
return|;
block|}
return|return
name|std
operator|::
name|make_pair
argument_list|(
name|begin
argument_list|()
operator|+
name|I
argument_list|,
name|false
argument_list|)
return|;
block|}
name|size_type
name|count
argument_list|(
specifier|const
name|KeyT
operator|&
name|Key
argument_list|)
decl|const
block|{
name|typename
name|MapType
operator|::
name|const_iterator
name|Pos
operator|=
name|Map
operator|.
name|find
argument_list|(
name|Key
argument_list|)
expr_stmt|;
return|return
name|Pos
operator|==
name|Map
operator|.
name|end
argument_list|()
condition|?
literal|0
else|:
literal|1
return|;
block|}
name|iterator
name|find
parameter_list|(
specifier|const
name|KeyT
modifier|&
name|Key
parameter_list|)
block|{
name|typename
name|MapType
operator|::
name|const_iterator
name|Pos
operator|=
name|Map
operator|.
name|find
argument_list|(
name|Key
argument_list|)
expr_stmt|;
return|return
name|Pos
operator|==
name|Map
operator|.
name|end
argument_list|()
condition|?
name|Vector
operator|.
name|end
argument_list|()
else|:
operator|(
name|Vector
operator|.
name|begin
argument_list|()
operator|+
name|Pos
operator|->
name|second
operator|)
return|;
block|}
name|const_iterator
name|find
argument_list|(
specifier|const
name|KeyT
operator|&
name|Key
argument_list|)
decl|const
block|{
name|typename
name|MapType
operator|::
name|const_iterator
name|Pos
operator|=
name|Map
operator|.
name|find
argument_list|(
name|Key
argument_list|)
expr_stmt|;
return|return
name|Pos
operator|==
name|Map
operator|.
name|end
argument_list|()
condition|?
name|Vector
operator|.
name|end
argument_list|()
else|:
operator|(
name|Vector
operator|.
name|begin
argument_list|()
operator|+
name|Pos
operator|->
name|second
operator|)
return|;
block|}
comment|/// \brief Remove the last element from the vector.
name|void
name|pop_back
parameter_list|()
block|{
name|typename
name|MapType
operator|::
name|iterator
name|Pos
operator|=
name|Map
operator|.
name|find
argument_list|(
name|Vector
operator|.
name|back
argument_list|()
operator|.
name|first
argument_list|)
expr_stmt|;
name|Map
operator|.
name|erase
argument_list|(
name|Pos
argument_list|)
expr_stmt|;
name|Vector
operator|.
name|pop_back
argument_list|()
expr_stmt|;
block|}
comment|/// \brief Remove the element given by Iterator.
comment|///
comment|/// Returns an iterator to the element following the one which was removed,
comment|/// which may be end().
comment|///
comment|/// \note This is a deceivingly expensive operation (linear time).  It's
comment|/// usually better to use \a remove_if() if possible.
name|typename
name|VectorType
operator|::
name|iterator
name|erase
argument_list|(
argument|typename VectorType::iterator Iterator
argument_list|)
block|{
name|Map
operator|.
name|erase
argument_list|(
name|Iterator
operator|->
name|first
argument_list|)
block|;
name|auto
name|Next
operator|=
name|Vector
operator|.
name|erase
argument_list|(
name|Iterator
argument_list|)
block|;
if|if
condition|(
name|Next
operator|==
name|Vector
operator|.
name|end
argument_list|()
condition|)
return|return
name|Next
return|;
comment|// Update indices in the map.
name|size_t
name|Index
operator|=
name|Next
operator|-
name|Vector
operator|.
name|begin
argument_list|()
expr_stmt|;
for|for
control|(
name|auto
operator|&
name|I
operator|:
name|Map
control|)
block|{
name|assert
argument_list|(
name|I
operator|.
name|second
operator|!=
name|Index
operator|&&
literal|"Index was already erased!"
argument_list|)
expr_stmt|;
if|if
condition|(
name|I
operator|.
name|second
operator|>
name|Index
condition|)
operator|--
name|I
operator|.
name|second
expr_stmt|;
block|}
return|return
name|Next
return|;
block|}
end_decl_stmt

begin_comment
comment|/// \brief Remove all elements with the key value Key.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// Returns the number of elements removed.
end_comment

begin_function
name|size_type
name|erase
parameter_list|(
specifier|const
name|KeyT
modifier|&
name|Key
parameter_list|)
block|{
name|auto
name|Iterator
init|=
name|find
argument_list|(
name|Key
argument_list|)
decl_stmt|;
if|if
condition|(
name|Iterator
operator|==
name|end
argument_list|()
condition|)
return|return
literal|0
return|;
name|erase
argument_list|(
name|Iterator
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
end_function

begin_comment
comment|/// \brief Remove the elements that match the predicate.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// Erase all elements that match \c Pred in a single pass.  Takes linear
end_comment

begin_comment
comment|/// time.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|Predicate
operator|>
name|void
name|remove_if
argument_list|(
argument|Predicate Pred
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|KeyT
operator|,
name|typename
name|ValueT
operator|,
name|typename
name|MapType
operator|,
name|typename
name|VectorType
operator|>
name|template
operator|<
name|class
name|Function
operator|>
name|void
name|MapVector
operator|<
name|KeyT
operator|,
name|ValueT
operator|,
name|MapType
operator|,
name|VectorType
operator|>
operator|::
name|remove_if
argument_list|(
argument|Function Pred
argument_list|)
block|{
name|auto
name|O
operator|=
name|Vector
operator|.
name|begin
argument_list|()
block|;
for|for
control|(
name|auto
name|I
init|=
name|O
init|,
name|E
init|=
name|Vector
operator|.
name|end
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
block|{
if|if
condition|(
name|Pred
argument_list|(
operator|*
name|I
argument_list|)
condition|)
block|{
comment|// Erase from the map.
name|Map
operator|.
name|erase
argument_list|(
name|I
operator|->
name|first
argument_list|)
expr_stmt|;
continue|continue;
block|}
end_expr_stmt

begin_if
if|if
condition|(
name|I
operator|!=
name|O
condition|)
block|{
comment|// Move the value and update the index in the map.
operator|*
name|O
operator|=
name|std
operator|::
name|move
argument_list|(
operator|*
name|I
argument_list|)
expr_stmt|;
name|Map
index|[
name|O
operator|->
name|first
index|]
operator|=
name|O
operator|-
name|Vector
operator|.
name|begin
argument_list|()
expr_stmt|;
block|}
end_if

begin_expr_stmt
operator|++
name|O
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|// Erase trailing entries in the vector.
end_comment

begin_expr_stmt
unit|Vector
operator|.
name|erase
argument_list|(
name|O
argument_list|,
name|Vector
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|/// \brief A MapVector that performs no allocations if smaller than a certain
end_comment

begin_comment
comment|/// size.
end_comment

begin_expr_stmt
unit|template
operator|<
name|typename
name|KeyT
operator|,
name|typename
name|ValueT
operator|,
name|unsigned
name|N
operator|>
expr|struct
name|SmallMapVector
operator|:
name|MapVector
operator|<
name|KeyT
operator|,
name|ValueT
operator|,
name|SmallDenseMap
operator|<
name|KeyT
operator|,
name|unsigned
operator|,
name|N
operator|>
operator|,
name|SmallVector
operator|<
name|std
operator|::
name|pair
operator|<
name|KeyT
operator|,
name|ValueT
operator|>
operator|,
name|N
operator|>>
block|{ }
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

