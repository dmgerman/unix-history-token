begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- llvm/ADT/TinyPtrVector.h - 'Normally tiny' vectors -------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_ADT_TINYPTRVECTOR_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_ADT_TINYPTRVECTOR_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/None.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/PointerUnion.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<cstddef>
end_include

begin_include
include|#
directive|include
file|<iterator>
end_include

begin_include
include|#
directive|include
file|<type_traits>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|/// TinyPtrVector - This class is specialized for cases where there are
comment|/// normally 0 or 1 element in a vector, but is general enough to go beyond that
comment|/// when required.
comment|///
comment|/// NOTE: This container doesn't allow you to store a null pointer into it.
comment|///
name|template
operator|<
name|typename
name|EltTy
operator|>
name|class
name|TinyPtrVector
block|{
name|public
operator|:
typedef|typedef
name|SmallVector
operator|<
name|EltTy
operator|,
literal|4
operator|>
name|VecTy
expr_stmt|;
typedef|typedef
name|typename
name|VecTy
operator|::
name|value_type
name|value_type
expr_stmt|;
typedef|typedef
name|PointerUnion
operator|<
name|EltTy
operator|,
name|VecTy
operator|*
operator|>
name|PtrUnion
expr_stmt|;
name|private
label|:
name|PtrUnion
name|Val
decl_stmt|;
name|public
label|:
name|TinyPtrVector
argument_list|()
operator|=
expr|default
expr_stmt|;
operator|~
name|TinyPtrVector
argument_list|()
block|{
if|if
condition|(
name|VecTy
modifier|*
name|V
init|=
name|Val
operator|.
name|template
name|dyn_cast
operator|<
name|VecTy
operator|*
operator|>
operator|(
operator|)
condition|)
name|delete
name|V
decl_stmt|;
block|}
name|TinyPtrVector
argument_list|(
specifier|const
name|TinyPtrVector
operator|&
name|RHS
argument_list|)
operator|:
name|Val
argument_list|(
argument|RHS.Val
argument_list|)
block|{
if|if
condition|(
name|VecTy
modifier|*
name|V
init|=
name|Val
operator|.
name|template
name|dyn_cast
operator|<
name|VecTy
operator|*
operator|>
operator|(
operator|)
condition|)
name|Val
operator|=
name|new
name|VecTy
argument_list|(
operator|*
name|V
argument_list|)
expr_stmt|;
block|}
name|TinyPtrVector
modifier|&
name|operator
init|=
operator|(
specifier|const
name|TinyPtrVector
operator|&
name|RHS
operator|)
block|{
if|if
condition|(
name|this
operator|==
operator|&
name|RHS
condition|)
return|return
operator|*
name|this
return|;
if|if
condition|(
name|RHS
operator|.
name|empty
argument_list|()
condition|)
block|{
name|this
operator|->
name|clear
argument_list|()
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
comment|// Try to squeeze into the single slot. If it won't fit, allocate a copied
comment|// vector.
if|if
condition|(
name|Val
operator|.
name|template
name|is
operator|<
name|EltTy
operator|>
operator|(
operator|)
condition|)
block|{
if|if
condition|(
name|RHS
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
name|Val
operator|=
name|RHS
operator|.
name|front
argument_list|()
expr_stmt|;
else|else
name|Val
operator|=
name|new
name|VecTy
argument_list|(
argument|*RHS.Val.template get<VecTy*>()
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
comment|// If we have a full vector allocated, try to re-use it.
if|if
condition|(
name|RHS
operator|.
name|Val
operator|.
name|template
name|is
operator|<
name|EltTy
operator|>
operator|(
operator|)
condition|)
block|{
name|Val
operator|.
name|template
name|get
operator|<
name|VecTy
operator|*
operator|>
operator|(
operator|)
operator|->
name|clear
argument_list|()
expr_stmt|;
name|Val
operator|.
name|template
name|get
operator|<
name|VecTy
operator|*
operator|>
operator|(
operator|)
operator|->
name|push_back
argument_list|(
name|RHS
operator|.
name|front
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|*
name|Val
operator|.
name|template
name|get
operator|<
name|VecTy
operator|*
operator|>
operator|(
operator|)
operator|=
operator|*
name|RHS
operator|.
name|Val
operator|.
name|template
name|get
operator|<
name|VecTy
operator|*
operator|>
operator|(
operator|)
expr_stmt|;
block|}
return|return
operator|*
name|this
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|TinyPtrVector
argument_list|(
name|TinyPtrVector
operator|&&
name|RHS
argument_list|)
operator|:
name|Val
argument_list|(
argument|RHS.Val
argument_list|)
block|{
name|RHS
operator|.
name|Val
operator|=
operator|(
name|EltTy
operator|)
name|nullptr
block|;   }
name|TinyPtrVector
operator|&
name|operator
operator|=
operator|(
name|TinyPtrVector
operator|&&
name|RHS
operator|)
block|{
if|if
condition|(
name|this
operator|==
operator|&
name|RHS
condition|)
return|return
operator|*
name|this
return|;
end_expr_stmt

begin_if
if|if
condition|(
name|RHS
operator|.
name|empty
argument_list|()
condition|)
block|{
name|this
operator|->
name|clear
argument_list|()
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_if

begin_comment
comment|// If this vector has been allocated on the heap, re-use it if cheap. If it
end_comment

begin_comment
comment|// would require more copying, just delete it and we'll steal the other
end_comment

begin_comment
comment|// side.
end_comment

begin_if
if|if
condition|(
name|VecTy
modifier|*
name|V
init|=
name|Val
operator|.
name|template
name|dyn_cast
operator|<
name|VecTy
operator|*
operator|>
operator|(
operator|)
condition|)
block|{
if|if
condition|(
name|RHS
operator|.
name|Val
operator|.
name|template
name|is
operator|<
name|EltTy
operator|>
operator|(
operator|)
condition|)
block|{
name|V
operator|->
name|clear
argument_list|()
expr_stmt|;
name|V
operator|->
name|push_back
argument_list|(
name|RHS
operator|.
name|front
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|delete
name|V
decl_stmt|;
block|}
end_if

begin_expr_stmt
name|Val
operator|=
name|RHS
operator|.
name|Val
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|RHS
operator|.
name|Val
operator|=
operator|(
name|EltTy
operator|)
name|nullptr
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_comment
unit|}
comment|/// Constructor from an ArrayRef.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// This also is a constructor for individual array elements due to the single
end_comment

begin_comment
comment|/// element constructor for ArrayRef.
end_comment

begin_expr_stmt
unit|explicit
name|TinyPtrVector
argument_list|(
name|ArrayRef
operator|<
name|EltTy
operator|>
name|Elts
argument_list|)
operator|:
name|Val
argument_list|(
argument|Elts.empty()                 ? PtrUnion()                 : Elts.size() ==
literal|1
argument|? PtrUnion(Elts[
literal|0
argument|])                       : PtrUnion(new VecTy(Elts.begin(), Elts.end()))
argument_list|)
block|{}
name|TinyPtrVector
argument_list|(
argument|size_t Count
argument_list|,
argument|EltTy Value
argument_list|)
operator|:
name|Val
argument_list|(
argument|Count ==
literal|0
argument|? PtrUnion()                        : Count ==
literal|1
argument|? PtrUnion(Value)                                     : PtrUnion(new VecTy(Count, Value))
argument_list|)
block|{}
comment|// implicit conversion operator to ArrayRef.
name|operator
name|ArrayRef
operator|<
name|EltTy
operator|>
operator|(
operator|)
specifier|const
block|{
if|if
condition|(
name|Val
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|None
return|;
end_expr_stmt

begin_if
if|if
condition|(
name|Val
operator|.
name|template
name|is
operator|<
name|EltTy
operator|>
operator|(
operator|)
condition|)
return|return
operator|*
name|Val
operator|.
name|getAddrOfPtr1
argument_list|()
return|;
end_if

begin_return
return|return
operator|*
name|Val
operator|.
name|template
name|get
operator|<
name|VecTy
operator|*
operator|>
operator|(
operator|)
return|;
end_return

begin_comment
unit|}
comment|// implicit conversion operator to MutableArrayRef.
end_comment

begin_expr_stmt
unit|operator
name|MutableArrayRef
operator|<
name|EltTy
operator|>
operator|(
operator|)
block|{
if|if
condition|(
name|Val
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|None
return|;
end_expr_stmt

begin_if
if|if
condition|(
name|Val
operator|.
name|template
name|is
operator|<
name|EltTy
operator|>
operator|(
operator|)
condition|)
return|return
operator|*
name|Val
operator|.
name|getAddrOfPtr1
argument_list|()
return|;
end_if

begin_return
return|return
operator|*
name|Val
operator|.
name|template
name|get
operator|<
name|VecTy
operator|*
operator|>
operator|(
operator|)
return|;
end_return

begin_comment
unit|}
comment|// Implicit conversion to ArrayRef<U> if EltTy* implicitly converts to U*.
end_comment

begin_expr_stmt
unit|template
operator|<
name|typename
name|U
operator|,
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_convertible
operator|<
name|ArrayRef
operator|<
name|EltTy
operator|>
operator|,
name|ArrayRef
operator|<
name|U
operator|>>
operator|::
name|value
operator|,
name|bool
operator|>
operator|::
name|type
operator|=
name|false
operator|>
name|operator
name|ArrayRef
operator|<
name|U
operator|>
operator|(
operator|)
specifier|const
block|{
return|return
name|operator
name|ArrayRef
operator|<
name|EltTy
operator|>
operator|(
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|empty
argument_list|()
specifier|const
block|{
comment|// This vector can be empty if it contains no element, or if it
comment|// contains a pointer to an empty vector.
if|if
condition|(
name|Val
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|true
return|;
end_expr_stmt

begin_if
if|if
condition|(
name|VecTy
modifier|*
name|Vec
init|=
name|Val
operator|.
name|template
name|dyn_cast
operator|<
name|VecTy
operator|*
operator|>
operator|(
operator|)
condition|)
return|return
name|Vec
operator|->
name|empty
argument_list|()
return|;
end_if

begin_return
return|return
name|false
return|;
end_return

begin_macro
unit|}    unsigned
name|size
argument_list|()
end_macro

begin_expr_stmt
specifier|const
block|{
if|if
condition|(
name|empty
argument_list|()
condition|)
return|return
literal|0
return|;
end_expr_stmt

begin_if
if|if
condition|(
name|Val
operator|.
name|template
name|is
operator|<
name|EltTy
operator|>
operator|(
operator|)
condition|)
return|return
literal|1
return|;
end_if

begin_return
return|return
name|Val
operator|.
name|template
name|get
operator|<
name|VecTy
operator|*
operator|>
operator|(
operator|)
operator|->
name|size
argument_list|()
return|;
end_return

begin_decl_stmt
unit|}    typedef
name|EltTy
modifier|*
name|iterator
decl_stmt|;
end_decl_stmt

begin_typedef
typedef|typedef
specifier|const
name|EltTy
modifier|*
name|const_iterator
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|std
operator|::
name|reverse_iterator
operator|<
name|iterator
operator|>
name|reverse_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|std
operator|::
name|reverse_iterator
operator|<
name|const_iterator
operator|>
name|const_reverse_iterator
expr_stmt|;
end_typedef

begin_function
name|iterator
name|begin
parameter_list|()
block|{
if|if
condition|(
name|Val
operator|.
name|template
name|is
operator|<
name|EltTy
operator|>
operator|(
operator|)
condition|)
return|return
name|Val
operator|.
name|getAddrOfPtr1
argument_list|()
return|;
return|return
name|Val
operator|.
name|template
name|get
operator|<
name|VecTy
operator|*
operator|>
operator|(
operator|)
operator|->
name|begin
argument_list|()
return|;
block|}
end_function

begin_function
name|iterator
name|end
parameter_list|()
block|{
if|if
condition|(
name|Val
operator|.
name|template
name|is
operator|<
name|EltTy
operator|>
operator|(
operator|)
condition|)
return|return
name|begin
argument_list|()
operator|+
operator|(
name|Val
operator|.
name|isNull
argument_list|()
condition|?
literal|0
else|:
literal|1
operator|)
return|;
return|return
name|Val
operator|.
name|template
name|get
operator|<
name|VecTy
operator|*
operator|>
operator|(
operator|)
operator|->
name|end
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
operator|(
name|const_iterator
operator|)
name|const_cast
operator|<
name|TinyPtrVector
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|begin
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
operator|(
name|const_iterator
operator|)
name|const_cast
operator|<
name|TinyPtrVector
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|end
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|reverse_iterator
name|rbegin
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|end
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
name|reverse_iterator
name|rend
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|const_reverse_iterator
name|rbegin
argument_list|()
specifier|const
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_reverse_iterator
name|rend
argument_list|()
specifier|const
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|EltTy
name|operator
index|[]
argument_list|(
name|unsigned
name|i
argument_list|)
decl|const
block|{
name|assert
argument_list|(
operator|!
name|Val
operator|.
name|isNull
argument_list|()
operator|&&
literal|"can't index into an empty vector"
argument_list|)
expr_stmt|;
if|if
condition|(
name|EltTy
name|V
init|=
name|Val
operator|.
name|template
name|dyn_cast
operator|<
name|EltTy
operator|>
operator|(
operator|)
condition|)
block|{
name|assert
argument_list|(
name|i
operator|==
literal|0
operator|&&
literal|"tinyvector index out of range"
argument_list|)
expr_stmt|;
return|return
name|V
return|;
block|}
name|assert
argument_list|(
argument|i< Val.template get<VecTy*>()->size()&&
literal|"tinyvector index out of range"
argument_list|)
empty_stmt|;
return|return
operator|(
operator|*
name|Val
operator|.
name|template
name|get
operator|<
name|VecTy
operator|*
operator|>
operator|(
operator|)
operator|)
index|[
name|i
index|]
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|EltTy
name|front
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
operator|!
name|empty
argument_list|()
operator|&&
literal|"vector empty"
argument_list|)
block|;
if|if
condition|(
name|EltTy
name|V
init|=
name|Val
operator|.
name|template
name|dyn_cast
operator|<
name|EltTy
operator|>
operator|(
operator|)
condition|)
return|return
name|V
return|;
end_expr_stmt

begin_return
return|return
name|Val
operator|.
name|template
name|get
operator|<
name|VecTy
operator|*
operator|>
operator|(
operator|)
operator|->
name|front
argument_list|()
return|;
end_return

begin_macro
unit|}    EltTy
name|back
argument_list|()
end_macro

begin_expr_stmt
specifier|const
block|{
name|assert
argument_list|(
operator|!
name|empty
argument_list|()
operator|&&
literal|"vector empty"
argument_list|)
block|;
if|if
condition|(
name|EltTy
name|V
init|=
name|Val
operator|.
name|template
name|dyn_cast
operator|<
name|EltTy
operator|>
operator|(
operator|)
condition|)
return|return
name|V
return|;
end_expr_stmt

begin_return
return|return
name|Val
operator|.
name|template
name|get
operator|<
name|VecTy
operator|*
operator|>
operator|(
operator|)
operator|->
name|back
argument_list|()
return|;
end_return

begin_macro
unit|}    void
name|push_back
argument_list|(
argument|EltTy NewVal
argument_list|)
end_macro

begin_block
block|{
name|assert
argument_list|(
name|NewVal
operator|&&
literal|"Can't add a null value"
argument_list|)
expr_stmt|;
comment|// If we have nothing, add something.
if|if
condition|(
name|Val
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|Val
operator|=
name|NewVal
expr_stmt|;
return|return;
block|}
comment|// If we have a single value, convert to a vector.
if|if
condition|(
name|EltTy
name|V
init|=
name|Val
operator|.
name|template
name|dyn_cast
operator|<
name|EltTy
operator|>
operator|(
operator|)
condition|)
block|{
name|Val
operator|=
name|new
name|VecTy
argument_list|()
expr_stmt|;
name|Val
operator|.
name|template
name|get
operator|<
name|VecTy
operator|*
operator|>
operator|(
operator|)
operator|->
name|push_back
argument_list|(
name|V
argument_list|)
expr_stmt|;
block|}
comment|// Add the new value, we know we have a vector.
name|Val
operator|.
name|template
name|get
operator|<
name|VecTy
operator|*
operator|>
operator|(
operator|)
operator|->
name|push_back
argument_list|(
name|NewVal
argument_list|)
expr_stmt|;
block|}
end_block

begin_function
name|void
name|pop_back
parameter_list|()
block|{
comment|// If we have a single value, convert to empty.
if|if
condition|(
name|Val
operator|.
name|template
name|is
operator|<
name|EltTy
operator|>
operator|(
operator|)
condition|)
name|Val
operator|=
operator|(
name|EltTy
operator|)
name|nullptr
expr_stmt|;
elseif|else
if|if
condition|(
name|VecTy
modifier|*
name|Vec
init|=
name|Val
operator|.
name|template
name|get
operator|<
name|VecTy
operator|*
operator|>
operator|(
operator|)
condition|)
name|Vec
operator|->
name|pop_back
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
name|void
name|clear
parameter_list|()
block|{
comment|// If we have a single value, convert to empty.
if|if
condition|(
name|Val
operator|.
name|template
name|is
operator|<
name|EltTy
operator|>
operator|(
operator|)
condition|)
block|{
name|Val
operator|=
operator|(
name|EltTy
operator|)
name|nullptr
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|VecTy
modifier|*
name|Vec
init|=
name|Val
operator|.
name|template
name|dyn_cast
operator|<
name|VecTy
operator|*
operator|>
operator|(
operator|)
condition|)
block|{
comment|// If we have a vector form, just clear it.
name|Vec
operator|->
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// Otherwise, we're already empty.
block|}
end_function

begin_function
name|iterator
name|erase
parameter_list|(
name|iterator
name|I
parameter_list|)
block|{
name|assert
argument_list|(
name|I
operator|>=
name|begin
argument_list|()
operator|&&
literal|"Iterator to erase is out of bounds."
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|I
operator|<
name|end
argument_list|()
operator|&&
literal|"Erasing at past-the-end iterator."
argument_list|)
expr_stmt|;
comment|// If we have a single value, convert to empty.
if|if
condition|(
name|Val
operator|.
name|template
name|is
operator|<
name|EltTy
operator|>
operator|(
operator|)
condition|)
block|{
if|if
condition|(
name|I
operator|==
name|begin
argument_list|()
condition|)
name|Val
operator|=
operator|(
name|EltTy
operator|)
name|nullptr
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|VecTy
modifier|*
name|Vec
init|=
name|Val
operator|.
name|template
name|dyn_cast
operator|<
name|VecTy
operator|*
operator|>
operator|(
operator|)
condition|)
block|{
comment|// multiple items in a vector; just do the erase, there is no
comment|// benefit to collapsing back to a pointer
return|return
name|Vec
operator|->
name|erase
argument_list|(
name|I
argument_list|)
return|;
block|}
return|return
name|end
argument_list|()
return|;
block|}
end_function

begin_function
name|iterator
name|erase
parameter_list|(
name|iterator
name|S
parameter_list|,
name|iterator
name|E
parameter_list|)
block|{
name|assert
argument_list|(
name|S
operator|>=
name|begin
argument_list|()
operator|&&
literal|"Range to erase is out of bounds."
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|S
operator|<=
name|E
operator|&&
literal|"Trying to erase invalid range."
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|E
operator|<=
name|end
argument_list|()
operator|&&
literal|"Trying to erase past the end."
argument_list|)
expr_stmt|;
if|if
condition|(
name|Val
operator|.
name|template
name|is
operator|<
name|EltTy
operator|>
operator|(
operator|)
condition|)
block|{
if|if
condition|(
name|S
operator|==
name|begin
argument_list|()
operator|&&
name|S
operator|!=
name|E
condition|)
name|Val
operator|=
operator|(
name|EltTy
operator|)
name|nullptr
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|VecTy
modifier|*
name|Vec
init|=
name|Val
operator|.
name|template
name|dyn_cast
operator|<
name|VecTy
operator|*
operator|>
operator|(
operator|)
condition|)
block|{
return|return
name|Vec
operator|->
name|erase
argument_list|(
name|S
argument_list|,
name|E
argument_list|)
return|;
block|}
return|return
name|end
argument_list|()
return|;
block|}
end_function

begin_function
name|iterator
name|insert
parameter_list|(
name|iterator
name|I
parameter_list|,
specifier|const
name|EltTy
modifier|&
name|Elt
parameter_list|)
block|{
name|assert
argument_list|(
name|I
operator|>=
name|this
operator|->
name|begin
argument_list|()
operator|&&
literal|"Insertion iterator is out of bounds."
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|I
operator|<=
name|this
operator|->
name|end
argument_list|()
operator|&&
literal|"Inserting past the end of the vector."
argument_list|)
expr_stmt|;
if|if
condition|(
name|I
operator|==
name|end
argument_list|()
condition|)
block|{
name|push_back
argument_list|(
name|Elt
argument_list|)
expr_stmt|;
return|return
name|std
operator|::
name|prev
argument_list|(
name|end
argument_list|()
argument_list|)
return|;
block|}
name|assert
argument_list|(
operator|!
name|Val
operator|.
name|isNull
argument_list|()
operator|&&
literal|"Null value with non-end insert iterator."
argument_list|)
expr_stmt|;
if|if
condition|(
name|EltTy
name|V
init|=
name|Val
operator|.
name|template
name|dyn_cast
operator|<
name|EltTy
operator|>
operator|(
operator|)
condition|)
block|{
name|assert
argument_list|(
name|I
operator|==
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|Val
operator|=
name|Elt
expr_stmt|;
name|push_back
argument_list|(
name|V
argument_list|)
expr_stmt|;
return|return
name|begin
argument_list|()
return|;
block|}
return|return
name|Val
operator|.
name|template
name|get
operator|<
name|VecTy
operator|*
operator|>
operator|(
operator|)
operator|->
name|insert
argument_list|(
name|I
argument_list|,
name|Elt
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|typename
name|ItTy
operator|>
name|iterator
name|insert
argument_list|(
argument|iterator I
argument_list|,
argument|ItTy From
argument_list|,
argument|ItTy To
argument_list|)
block|{
name|assert
argument_list|(
name|I
operator|>=
name|this
operator|->
name|begin
argument_list|()
operator|&&
literal|"Insertion iterator is out of bounds."
argument_list|)
block|;
name|assert
argument_list|(
name|I
operator|<=
name|this
operator|->
name|end
argument_list|()
operator|&&
literal|"Inserting past the end of the vector."
argument_list|)
block|;
if|if
condition|(
name|From
operator|==
name|To
condition|)
return|return
name|I
return|;
comment|// If we have a single value, convert to a vector.
name|ptrdiff_t
name|Offset
operator|=
name|I
operator|-
name|begin
argument_list|()
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|Val
operator|.
name|isNull
argument_list|()
condition|)
block|{
if|if
condition|(
name|std
operator|::
name|next
argument_list|(
name|From
argument_list|)
operator|==
name|To
condition|)
block|{
name|Val
operator|=
operator|*
name|From
expr_stmt|;
return|return
name|begin
argument_list|()
return|;
block|}
name|Val
operator|=
name|new
name|VecTy
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|EltTy
name|V
init|=
name|Val
operator|.
name|template
name|dyn_cast
operator|<
name|EltTy
operator|>
operator|(
operator|)
condition|)
block|{
name|Val
operator|=
name|new
name|VecTy
argument_list|()
expr_stmt|;
name|Val
operator|.
name|template
name|get
operator|<
name|VecTy
operator|*
operator|>
operator|(
operator|)
operator|->
name|push_back
argument_list|(
name|V
argument_list|)
expr_stmt|;
block|}
end_if

begin_return
return|return
name|Val
operator|.
name|template
name|get
operator|<
name|VecTy
operator|*
operator|>
operator|(
operator|)
operator|->
name|insert
argument_list|(
name|begin
argument_list|()
operator|+
name|Offset
argument_list|,
name|From
argument_list|,
name|To
argument_list|)
return|;
end_return

begin_empty_stmt
unit|} }
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_ADT_TINYPTRVECTOR_H
end_comment

end_unit

