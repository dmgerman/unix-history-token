begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- llvm/ADT/TinyPtrVector.h - 'Normally tiny' vectors -------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_ADT_TINYPTRVECTOR_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_ADT_TINYPTRVECTOR_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/PointerUnion.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|/// TinyPtrVector - This class is specialized for cases where there are
comment|/// normally 0 or 1 element in a vector, but is general enough to go beyond that
comment|/// when required.
comment|///
comment|/// NOTE: This container doesn't allow you to store a null pointer into it.
comment|///
name|template
operator|<
name|typename
name|EltTy
operator|>
name|class
name|TinyPtrVector
block|{
name|public
operator|:
typedef|typedef
name|llvm
operator|::
name|SmallVector
operator|<
name|EltTy
operator|,
literal|4
operator|>
name|VecTy
expr_stmt|;
name|llvm
operator|::
name|PointerUnion
operator|<
name|EltTy
operator|,
name|VecTy
operator|*
operator|>
name|Val
expr_stmt|;
name|TinyPtrVector
argument_list|()
block|{}
name|TinyPtrVector
argument_list|(
specifier|const
name|TinyPtrVector
operator|&
name|RHS
argument_list|)
operator|:
name|Val
argument_list|(
argument|RHS.Val
argument_list|)
block|{
if|if
condition|(
name|VecTy
modifier|*
name|V
init|=
name|Val
operator|.
name|template
name|dyn_cast
operator|<
name|VecTy
operator|*
operator|>
operator|(
operator|)
condition|)
name|Val
operator|=
name|new
name|VecTy
argument_list|(
operator|*
name|V
argument_list|)
expr_stmt|;
block|}
operator|~
name|TinyPtrVector
argument_list|()
block|{
if|if
condition|(
name|VecTy
modifier|*
name|V
init|=
name|Val
operator|.
name|template
name|dyn_cast
operator|<
name|VecTy
operator|*
operator|>
operator|(
operator|)
condition|)
name|delete
name|V
decl_stmt|;
block|}
name|bool
name|empty
argument_list|()
specifier|const
block|{
comment|// This vector can be empty if it contains no element, or if it
comment|// contains a pointer to an empty vector.
if|if
condition|(
name|Val
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|true
return|;
if|if
condition|(
name|VecTy
modifier|*
name|Vec
init|=
name|Val
operator|.
name|template
name|dyn_cast
operator|<
name|VecTy
operator|*
operator|>
operator|(
operator|)
condition|)
return|return
name|Vec
operator|->
name|empty
argument_list|()
return|;
return|return
name|false
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|unsigned
name|size
argument_list|()
specifier|const
block|{
if|if
condition|(
name|empty
argument_list|()
condition|)
return|return
literal|0
return|;
end_expr_stmt

begin_if
if|if
condition|(
name|Val
operator|.
name|template
name|is
operator|<
name|EltTy
operator|>
operator|(
operator|)
condition|)
return|return
literal|1
return|;
end_if

begin_return
return|return
name|Val
operator|.
name|template
name|get
operator|<
name|VecTy
operator|*
operator|>
operator|(
operator|)
operator|->
name|size
argument_list|()
return|;
end_return

begin_decl_stmt
unit|}      typedef
specifier|const
name|EltTy
modifier|*
name|iterator
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|iterator
name|begin
argument_list|()
specifier|const
block|{
if|if
condition|(
name|empty
argument_list|()
condition|)
return|return
literal|0
return|;
end_expr_stmt

begin_if
if|if
condition|(
name|Val
operator|.
name|template
name|is
operator|<
name|EltTy
operator|>
operator|(
operator|)
condition|)
return|return
name|Val
operator|.
name|template
name|getAddrOf
operator|<
name|EltTy
operator|>
operator|(
operator|)
return|;
end_if

begin_return
return|return
name|Val
operator|.
name|template
name|get
operator|<
name|VecTy
operator|*
operator|>
operator|(
operator|)
operator|->
name|begin
argument_list|()
return|;
end_return

begin_macro
unit|}   iterator
name|end
argument_list|()
end_macro

begin_expr_stmt
specifier|const
block|{
if|if
condition|(
name|empty
argument_list|()
condition|)
return|return
literal|0
return|;
end_expr_stmt

begin_if
if|if
condition|(
name|Val
operator|.
name|template
name|is
operator|<
name|EltTy
operator|>
operator|(
operator|)
condition|)
return|return
name|begin
argument_list|()
operator|+
literal|1
return|;
end_if

begin_return
return|return
name|Val
operator|.
name|template
name|get
operator|<
name|VecTy
operator|*
operator|>
operator|(
operator|)
operator|->
name|end
argument_list|()
return|;
end_return

begin_expr_stmt
unit|}       EltTy
name|operator
index|[]
operator|(
name|unsigned
name|i
operator|)
specifier|const
block|{
name|assert
argument_list|(
operator|!
name|Val
operator|.
name|isNull
argument_list|()
operator|&&
literal|"can't index into an empty vector"
argument_list|)
block|;
if|if
condition|(
name|EltTy
name|V
init|=
name|Val
operator|.
name|template
name|dyn_cast
operator|<
name|EltTy
operator|>
operator|(
operator|)
condition|)
block|{
name|assert
argument_list|(
name|i
operator|==
literal|0
operator|&&
literal|"tinyvector index out of range"
argument_list|)
expr_stmt|;
return|return
name|V
return|;
block|}
name|assert
argument_list|(
argument|i< Val.template get<VecTy*>()->size()&&
literal|"tinyvector index out of range"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|(
operator|*
name|Val
operator|.
name|template
name|get
operator|<
name|VecTy
operator|*
operator|>
operator|(
operator|)
operator|)
index|[
name|i
index|]
return|;
end_return

begin_macro
unit|}      EltTy
name|front
argument_list|()
end_macro

begin_expr_stmt
specifier|const
block|{
name|assert
argument_list|(
operator|!
name|empty
argument_list|()
operator|&&
literal|"vector empty"
argument_list|)
block|;
if|if
condition|(
name|EltTy
name|V
init|=
name|Val
operator|.
name|template
name|dyn_cast
operator|<
name|EltTy
operator|>
operator|(
operator|)
condition|)
return|return
name|V
return|;
end_expr_stmt

begin_return
return|return
name|Val
operator|.
name|template
name|get
operator|<
name|VecTy
operator|*
operator|>
operator|(
operator|)
operator|->
name|front
argument_list|()
return|;
end_return

begin_macro
unit|}      void
name|push_back
argument_list|(
argument|EltTy NewVal
argument_list|)
end_macro

begin_block
block|{
name|assert
argument_list|(
name|NewVal
operator|!=
literal|0
operator|&&
literal|"Can't add a null value"
argument_list|)
expr_stmt|;
comment|// If we have nothing, add something.
if|if
condition|(
name|Val
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|Val
operator|=
name|NewVal
expr_stmt|;
return|return;
block|}
comment|// If we have a single value, convert to a vector.
if|if
condition|(
name|EltTy
name|V
init|=
name|Val
operator|.
name|template
name|dyn_cast
operator|<
name|EltTy
operator|>
operator|(
operator|)
condition|)
block|{
name|Val
operator|=
name|new
name|VecTy
argument_list|()
expr_stmt|;
name|Val
operator|.
name|template
name|get
operator|<
name|VecTy
operator|*
operator|>
operator|(
operator|)
operator|->
name|push_back
argument_list|(
name|V
argument_list|)
expr_stmt|;
block|}
comment|// Add the new value, we know we have a vector.
name|Val
operator|.
name|template
name|get
operator|<
name|VecTy
operator|*
operator|>
operator|(
operator|)
operator|->
name|push_back
argument_list|(
name|NewVal
argument_list|)
expr_stmt|;
block|}
end_block

begin_function
name|void
name|clear
parameter_list|()
block|{
comment|// If we have a single value, convert to empty.
if|if
condition|(
name|Val
operator|.
name|template
name|is
operator|<
name|EltTy
operator|>
operator|(
operator|)
condition|)
block|{
name|Val
operator|=
operator|(
name|EltTy
operator|)
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|VecTy
modifier|*
name|Vec
init|=
name|Val
operator|.
name|template
name|dyn_cast
operator|<
name|VecTy
operator|*
operator|>
operator|(
operator|)
condition|)
block|{
comment|// If we have a vector form, just clear it.
name|Vec
operator|->
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// Otherwise, we're already empty.
block|}
end_function

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|void
name|operator
init|=
operator|(
specifier|const
name|TinyPtrVector
operator|&
operator|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|// NOT IMPLEMENTED YET.
end_comment

begin_comment
unit|}; }
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

