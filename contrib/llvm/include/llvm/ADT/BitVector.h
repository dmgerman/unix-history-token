begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- llvm/ADT/BitVector.h - Bit vectors -----------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file implements the BitVector class.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_ADT_BITVECTOR_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_ADT_BITVECTOR_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/iterator_range.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/MathExtras.h"
end_include

begin_include
include|#
directive|include
file|<algorithm>
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<climits>
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_include
include|#
directive|include
file|<cstdlib>
end_include

begin_include
include|#
directive|include
file|<cstring>
end_include

begin_include
include|#
directive|include
file|<utility>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|/// ForwardIterator for the bits that are set.
comment|/// Iterators get invalidated when resize / reserve is called.
name|template
operator|<
name|typename
name|BitVectorT
operator|>
name|class
name|const_set_bits_iterator_impl
block|{
specifier|const
name|BitVectorT
operator|&
name|Parent
block|;
name|int
name|Current
operator|=
literal|0
block|;
name|void
name|advance
argument_list|()
block|{
name|assert
argument_list|(
name|Current
operator|!=
operator|-
literal|1
operator|&&
literal|"Trying to advance past end."
argument_list|)
block|;
name|Current
operator|=
name|Parent
operator|.
name|find_next
argument_list|(
name|Current
argument_list|)
block|;   }
name|public
operator|:
name|const_set_bits_iterator_impl
argument_list|(
argument|const BitVectorT&Parent
argument_list|,
argument|int Current
argument_list|)
operator|:
name|Parent
argument_list|(
name|Parent
argument_list|)
block|,
name|Current
argument_list|(
argument|Current
argument_list|)
block|{}
name|explicit
name|const_set_bits_iterator_impl
argument_list|(
specifier|const
name|BitVectorT
operator|&
name|Parent
argument_list|)
operator|:
name|const_set_bits_iterator_impl
argument_list|(
argument|Parent
argument_list|,
argument|Parent.find_first()
argument_list|)
block|{}
name|const_set_bits_iterator_impl
argument_list|(
specifier|const
name|const_set_bits_iterator_impl
operator|&
argument_list|)
operator|=
expr|default
block|;
name|const_set_bits_iterator_impl
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|auto
name|Prev
operator|=
operator|*
name|this
block|;
name|advance
argument_list|()
block|;
return|return
name|Prev
return|;
block|}
name|const_set_bits_iterator_impl
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|advance
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
name|unsigned
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|Current
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|const_set_bits_iterator_impl
operator|&
name|Other
operator|)
specifier|const
block|{
name|assert
argument_list|(
operator|&
name|Parent
operator|==
operator|&
name|Other
operator|.
name|Parent
operator|&&
literal|"Comparing iterators from different BitVectors"
argument_list|)
block|;
return|return
name|Current
operator|==
name|Other
operator|.
name|Current
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|const_set_bits_iterator_impl
operator|&
name|Other
operator|)
specifier|const
block|{
name|assert
argument_list|(
operator|&
name|Parent
operator|==
operator|&
name|Other
operator|.
name|Parent
operator|&&
literal|"Comparing iterators from different BitVectors"
argument_list|)
block|;
return|return
name|Current
operator|!=
name|Other
operator|.
name|Current
return|;
block|}
expr|}
block|;
name|class
name|BitVector
block|{
typedef|typedef
name|unsigned
name|long
name|BitWord
typedef|;
block|enum
block|{
name|BITWORD_SIZE
operator|=
operator|(
name|unsigned
operator|)
sizeof|sizeof
argument_list|(
name|BitWord
argument_list|)
operator|*
name|CHAR_BIT
block|}
block|;
name|static_assert
argument_list|(
name|BITWORD_SIZE
operator|==
literal|64
operator|||
name|BITWORD_SIZE
operator|==
literal|32
argument_list|,
literal|"Unsupported word size"
argument_list|)
block|;
name|MutableArrayRef
operator|<
name|BitWord
operator|>
name|Bits
block|;
comment|// Actual bits.
name|unsigned
name|Size
block|;
comment|// Size of bitvector in bits.
name|public
operator|:
typedef|typedef
name|unsigned
name|size_type
typedef|;
comment|// Encapsulation of a single bit.
name|class
name|reference
block|{
name|friend
name|class
name|BitVector
block|;
name|BitWord
operator|*
name|WordRef
block|;
name|unsigned
name|BitPos
block|;
name|public
operator|:
name|reference
argument_list|(
argument|BitVector&b
argument_list|,
argument|unsigned Idx
argument_list|)
block|{
name|WordRef
operator|=
operator|&
name|b
operator|.
name|Bits
index|[
name|Idx
operator|/
name|BITWORD_SIZE
index|]
block|;
name|BitPos
operator|=
name|Idx
operator|%
name|BITWORD_SIZE
block|;     }
name|reference
argument_list|()
operator|=
name|delete
block|;
name|reference
argument_list|(
specifier|const
name|reference
operator|&
argument_list|)
operator|=
expr|default
block|;
name|reference
operator|&
name|operator
operator|=
operator|(
name|reference
name|t
operator|)
block|{
operator|*
name|this
operator|=
name|bool
argument_list|(
name|t
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
name|reference
operator|&
name|operator
operator|=
operator|(
name|bool
name|t
operator|)
block|{
if|if
condition|(
name|t
condition|)
operator|*
name|WordRef
operator||=
name|BitWord
argument_list|(
literal|1
argument_list|)
operator|<<
name|BitPos
expr_stmt|;
else|else
operator|*
name|WordRef
operator|&=
operator|~
operator|(
name|BitWord
argument_list|(
literal|1
argument_list|)
operator|<<
name|BitPos
operator|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|operator
name|bool
argument_list|()
specifier|const
block|{
return|return
operator|(
operator|(
operator|*
name|WordRef
operator|)
operator|&
operator|(
name|BitWord
argument_list|(
literal|1
argument_list|)
operator|<<
name|BitPos
operator|)
operator|)
operator|!=
literal|0
return|;
block|}
block|}
empty_stmt|;
typedef|typedef
name|const_set_bits_iterator_impl
operator|<
name|BitVector
operator|>
name|const_set_bits_iterator
expr_stmt|;
typedef|typedef
name|const_set_bits_iterator
name|set_iterator
typedef|;
name|const_set_bits_iterator
name|set_bits_begin
argument_list|()
specifier|const
block|{
return|return
name|const_set_bits_iterator
argument_list|(
operator|*
name|this
argument_list|)
return|;
block|}
name|const_set_bits_iterator
name|set_bits_end
argument_list|()
specifier|const
block|{
return|return
name|const_set_bits_iterator
argument_list|(
operator|*
name|this
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
name|iterator_range
operator|<
name|const_set_bits_iterator
operator|>
name|set_bits
argument_list|()
specifier|const
block|{
return|return
name|make_range
argument_list|(
name|set_bits_begin
argument_list|()
argument_list|,
name|set_bits_end
argument_list|()
argument_list|)
return|;
block|}
comment|/// BitVector default ctor - Creates an empty bitvector.
name|BitVector
argument_list|()
operator|:
name|Size
argument_list|(
literal|0
argument_list|)
block|{}
comment|/// BitVector ctor - Creates a bitvector of specified number of bits. All
comment|/// bits are initialized to the specified value.
name|explicit
name|BitVector
argument_list|(
argument|unsigned s
argument_list|,
argument|bool t = false
argument_list|)
operator|:
name|Size
argument_list|(
argument|s
argument_list|)
block|{
name|size_t
name|Capacity
operator|=
name|NumBitWords
argument_list|(
name|s
argument_list|)
block|;
name|Bits
operator|=
name|allocate
argument_list|(
name|Capacity
argument_list|)
block|;
name|init_words
argument_list|(
name|Bits
argument_list|,
name|t
argument_list|)
block|;
if|if
condition|(
name|t
condition|)
name|clear_unused_bits
argument_list|()
expr_stmt|;
block|}
comment|/// BitVector copy ctor.
name|BitVector
argument_list|(
specifier|const
name|BitVector
operator|&
name|RHS
argument_list|)
operator|:
name|Size
argument_list|(
argument|RHS.size()
argument_list|)
block|{
if|if
condition|(
name|Size
operator|==
literal|0
condition|)
block|{
name|Bits
operator|=
name|MutableArrayRef
operator|<
name|BitWord
operator|>
operator|(
operator|)
expr_stmt|;
return|return;
block|}
name|size_t
name|Capacity
init|=
name|NumBitWords
argument_list|(
name|RHS
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Bits
operator|=
name|allocate
argument_list|(
name|Capacity
argument_list|)
expr_stmt|;
name|std
operator|::
name|memcpy
argument_list|(
name|Bits
operator|.
name|data
argument_list|()
argument_list|,
name|RHS
operator|.
name|Bits
operator|.
name|data
argument_list|()
argument_list|,
name|Capacity
operator|*
sizeof|sizeof
argument_list|(
name|BitWord
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_expr_stmt
name|BitVector
argument_list|(
name|BitVector
operator|&&
name|RHS
argument_list|)
operator|:
name|Bits
argument_list|(
name|RHS
operator|.
name|Bits
argument_list|)
operator|,
name|Size
argument_list|(
argument|RHS.Size
argument_list|)
block|{
name|RHS
operator|.
name|Bits
operator|=
name|MutableArrayRef
operator|<
name|BitWord
operator|>
operator|(
operator|)
block|;
name|RHS
operator|.
name|Size
operator|=
literal|0
block|;   }
operator|~
name|BitVector
argument_list|()
block|{
name|std
operator|::
name|free
argument_list|(
name|Bits
operator|.
name|data
argument_list|()
argument_list|)
block|; }
comment|/// empty - Tests whether there are no bits in this bitvector.
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|Size
operator|==
literal|0
return|;
block|}
end_expr_stmt

begin_comment
comment|/// size - Returns the number of bits in this bitvector.
end_comment

begin_expr_stmt
name|size_type
name|size
argument_list|()
specifier|const
block|{
return|return
name|Size
return|;
block|}
end_expr_stmt

begin_comment
comment|/// count - Returns the number of bits which are set.
end_comment

begin_expr_stmt
name|size_type
name|count
argument_list|()
specifier|const
block|{
name|unsigned
name|NumBits
operator|=
literal|0
block|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumBitWords
argument_list|(
name|size
argument_list|()
argument_list|)
condition|;
operator|++
name|i
control|)
name|NumBits
operator|+=
name|countPopulation
argument_list|(
name|Bits
index|[
name|i
index|]
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|NumBits
return|;
end_return

begin_comment
unit|}
comment|/// any - Returns true if any bit is set.
end_comment

begin_macro
unit|bool
name|any
argument_list|()
end_macro

begin_expr_stmt
specifier|const
block|{
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumBitWords
argument_list|(
name|size
argument_list|()
argument_list|)
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|Bits
index|[
name|i
index|]
operator|!=
literal|0
condition|)
return|return
name|true
return|;
end_expr_stmt

begin_return
return|return
name|false
return|;
end_return

begin_comment
unit|}
comment|/// all - Returns true if all bits are set.
end_comment

begin_macro
unit|bool
name|all
argument_list|()
end_macro

begin_expr_stmt
specifier|const
block|{
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Size
operator|/
name|BITWORD_SIZE
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|Bits
index|[
name|i
index|]
operator|!=
operator|~
literal|0UL
condition|)
return|return
name|false
return|;
end_expr_stmt

begin_comment
comment|// If bits remain check that they are ones. The unused bits are always zero.
end_comment

begin_if
if|if
condition|(
name|unsigned
name|Remainder
init|=
name|Size
operator|%
name|BITWORD_SIZE
condition|)
return|return
name|Bits
index|[
name|Size
operator|/
name|BITWORD_SIZE
index|]
operator|==
operator|(
literal|1UL
operator|<<
name|Remainder
operator|)
operator|-
literal|1
return|;
end_if

begin_return
return|return
name|true
return|;
end_return

begin_comment
unit|}
comment|/// none - Returns true if none of the bits are set.
end_comment

begin_macro
unit|bool
name|none
argument_list|()
end_macro

begin_expr_stmt
specifier|const
block|{
return|return
operator|!
name|any
argument_list|()
return|;
block|}
end_expr_stmt

begin_comment
comment|/// find_first_in - Returns the index of the first set bit in the range
end_comment

begin_comment
comment|/// [Begin, End).  Returns -1 if all bits in the range are unset.
end_comment

begin_decl_stmt
name|int
name|find_first_in
argument_list|(
name|unsigned
name|Begin
argument_list|,
name|unsigned
name|End
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|Begin
operator|<=
name|End
operator|&&
name|End
operator|<=
name|Size
argument_list|)
expr_stmt|;
if|if
condition|(
name|Begin
operator|==
name|End
condition|)
return|return
operator|-
literal|1
return|;
name|unsigned
name|FirstWord
init|=
name|Begin
operator|/
name|BITWORD_SIZE
decl_stmt|;
name|unsigned
name|LastWord
init|=
operator|(
name|End
operator|-
literal|1
operator|)
operator|/
name|BITWORD_SIZE
decl_stmt|;
comment|// Check subsequent words.
for|for
control|(
name|unsigned
name|i
init|=
name|FirstWord
init|;
name|i
operator|<=
name|LastWord
condition|;
operator|++
name|i
control|)
block|{
name|BitWord
name|Copy
init|=
name|Bits
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|FirstWord
condition|)
block|{
name|unsigned
name|FirstBit
init|=
name|Begin
operator|%
name|BITWORD_SIZE
decl_stmt|;
name|Copy
operator|&=
name|maskTrailingZeros
operator|<
name|BitWord
operator|>
operator|(
name|FirstBit
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|==
name|LastWord
condition|)
block|{
name|unsigned
name|LastBit
init|=
operator|(
name|End
operator|-
literal|1
operator|)
operator|%
name|BITWORD_SIZE
decl_stmt|;
name|Copy
operator|&=
name|maskTrailingOnes
operator|<
name|BitWord
operator|>
operator|(
name|LastBit
operator|+
literal|1
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|Copy
operator|!=
literal|0
condition|)
return|return
name|i
operator|*
name|BITWORD_SIZE
operator|+
name|countTrailingZeros
argument_list|(
name|Copy
argument_list|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_decl_stmt

begin_comment
comment|/// find_last_in - Returns the index of the last set bit in the range
end_comment

begin_comment
comment|/// [Begin, End).  Returns -1 if all bits in the range are unset.
end_comment

begin_decl_stmt
name|int
name|find_last_in
argument_list|(
name|unsigned
name|Begin
argument_list|,
name|unsigned
name|End
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|Begin
operator|<=
name|End
operator|&&
name|End
operator|<=
name|Size
argument_list|)
expr_stmt|;
if|if
condition|(
name|Begin
operator|==
name|End
condition|)
return|return
operator|-
literal|1
return|;
name|unsigned
name|LastWord
init|=
operator|(
name|End
operator|-
literal|1
operator|)
operator|/
name|BITWORD_SIZE
decl_stmt|;
name|unsigned
name|FirstWord
init|=
name|Begin
operator|/
name|BITWORD_SIZE
decl_stmt|;
for|for
control|(
name|unsigned
name|i
init|=
name|LastWord
operator|+
literal|1
init|;
name|i
operator|>=
name|FirstWord
operator|+
literal|1
condition|;
operator|--
name|i
control|)
block|{
name|unsigned
name|CurrentWord
init|=
name|i
operator|-
literal|1
decl_stmt|;
name|BitWord
name|Copy
init|=
name|Bits
index|[
name|CurrentWord
index|]
decl_stmt|;
if|if
condition|(
name|CurrentWord
operator|==
name|LastWord
condition|)
block|{
name|unsigned
name|LastBit
init|=
operator|(
name|End
operator|-
literal|1
operator|)
operator|%
name|BITWORD_SIZE
decl_stmt|;
name|Copy
operator|&=
name|maskTrailingOnes
operator|<
name|BitWord
operator|>
operator|(
name|LastBit
operator|+
literal|1
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|CurrentWord
operator|==
name|FirstWord
condition|)
block|{
name|unsigned
name|FirstBit
init|=
name|Begin
operator|%
name|BITWORD_SIZE
decl_stmt|;
name|Copy
operator|&=
name|maskTrailingZeros
operator|<
name|BitWord
operator|>
operator|(
name|FirstBit
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|Copy
operator|!=
literal|0
condition|)
return|return
operator|(
name|CurrentWord
operator|+
literal|1
operator|)
operator|*
name|BITWORD_SIZE
operator|-
name|countLeadingZeros
argument_list|(
name|Copy
argument_list|)
operator|-
literal|1
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_decl_stmt

begin_comment
comment|/// find_first_unset_in - Returns the index of the first unset bit in the
end_comment

begin_comment
comment|/// range [Begin, End).  Returns -1 if all bits in the range are set.
end_comment

begin_decl_stmt
name|int
name|find_first_unset_in
argument_list|(
name|unsigned
name|Begin
argument_list|,
name|unsigned
name|End
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|Begin
operator|<=
name|End
operator|&&
name|End
operator|<=
name|Size
argument_list|)
expr_stmt|;
if|if
condition|(
name|Begin
operator|==
name|End
condition|)
return|return
operator|-
literal|1
return|;
name|unsigned
name|FirstWord
init|=
name|Begin
operator|/
name|BITWORD_SIZE
decl_stmt|;
name|unsigned
name|LastWord
init|=
operator|(
name|End
operator|-
literal|1
operator|)
operator|/
name|BITWORD_SIZE
decl_stmt|;
comment|// Check subsequent words.
for|for
control|(
name|unsigned
name|i
init|=
name|FirstWord
init|;
name|i
operator|<=
name|LastWord
condition|;
operator|++
name|i
control|)
block|{
name|BitWord
name|Copy
init|=
name|Bits
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|FirstWord
condition|)
block|{
name|unsigned
name|FirstBit
init|=
name|Begin
operator|%
name|BITWORD_SIZE
decl_stmt|;
name|Copy
operator||=
name|maskTrailingOnes
operator|<
name|BitWord
operator|>
operator|(
name|FirstBit
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|==
name|LastWord
condition|)
block|{
name|unsigned
name|LastBit
init|=
operator|(
name|End
operator|-
literal|1
operator|)
operator|%
name|BITWORD_SIZE
decl_stmt|;
name|Copy
operator||=
name|maskTrailingZeros
operator|<
name|BitWord
operator|>
operator|(
name|LastBit
operator|+
literal|1
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|Copy
operator|!=
operator|~
literal|0UL
condition|)
block|{
name|unsigned
name|Result
init|=
name|i
operator|*
name|BITWORD_SIZE
operator|+
name|countTrailingOnes
argument_list|(
name|Copy
argument_list|)
decl_stmt|;
return|return
name|Result
operator|<
name|size
argument_list|()
condition|?
name|Result
else|:
operator|-
literal|1
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
end_decl_stmt

begin_comment
comment|/// find_last_unset_in - Returns the index of the last unset bit in the
end_comment

begin_comment
comment|/// range [Begin, End).  Returns -1 if all bits in the range are set.
end_comment

begin_decl_stmt
name|int
name|find_last_unset_in
argument_list|(
name|unsigned
name|Begin
argument_list|,
name|unsigned
name|End
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|Begin
operator|<=
name|End
operator|&&
name|End
operator|<=
name|Size
argument_list|)
expr_stmt|;
if|if
condition|(
name|Begin
operator|==
name|End
condition|)
return|return
operator|-
literal|1
return|;
name|unsigned
name|LastWord
init|=
operator|(
name|End
operator|-
literal|1
operator|)
operator|/
name|BITWORD_SIZE
decl_stmt|;
name|unsigned
name|FirstWord
init|=
name|Begin
operator|/
name|BITWORD_SIZE
decl_stmt|;
for|for
control|(
name|unsigned
name|i
init|=
name|LastWord
operator|+
literal|1
init|;
name|i
operator|>=
name|FirstWord
operator|+
literal|1
condition|;
operator|--
name|i
control|)
block|{
name|unsigned
name|CurrentWord
init|=
name|i
operator|-
literal|1
decl_stmt|;
name|BitWord
name|Copy
init|=
name|Bits
index|[
name|CurrentWord
index|]
decl_stmt|;
if|if
condition|(
name|CurrentWord
operator|==
name|LastWord
condition|)
block|{
name|unsigned
name|LastBit
init|=
operator|(
name|End
operator|-
literal|1
operator|)
operator|%
name|BITWORD_SIZE
decl_stmt|;
name|Copy
operator||=
name|maskTrailingZeros
operator|<
name|BitWord
operator|>
operator|(
name|LastBit
operator|+
literal|1
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|CurrentWord
operator|==
name|FirstWord
condition|)
block|{
name|unsigned
name|FirstBit
init|=
name|Begin
operator|%
name|BITWORD_SIZE
decl_stmt|;
name|Copy
operator||=
name|maskTrailingOnes
operator|<
name|BitWord
operator|>
operator|(
name|FirstBit
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|Copy
operator|!=
operator|~
literal|0UL
condition|)
block|{
name|unsigned
name|Result
init|=
operator|(
name|CurrentWord
operator|+
literal|1
operator|)
operator|*
name|BITWORD_SIZE
operator|-
name|countLeadingOnes
argument_list|(
name|Copy
argument_list|)
operator|-
literal|1
decl_stmt|;
return|return
name|Result
operator|<
name|Size
condition|?
name|Result
else|:
operator|-
literal|1
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
end_decl_stmt

begin_comment
comment|/// find_first - Returns the index of the first set bit, -1 if none
end_comment

begin_comment
comment|/// of the bits are set.
end_comment

begin_expr_stmt
name|int
name|find_first
argument_list|()
specifier|const
block|{
return|return
name|find_first_in
argument_list|(
literal|0
argument_list|,
name|Size
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/// find_last - Returns the index of the last set bit, -1 if none of the bits
end_comment

begin_comment
comment|/// are set.
end_comment

begin_expr_stmt
name|int
name|find_last
argument_list|()
specifier|const
block|{
return|return
name|find_last_in
argument_list|(
literal|0
argument_list|,
name|Size
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/// find_next - Returns the index of the next set bit following the
end_comment

begin_comment
comment|/// "Prev" bit. Returns -1 if the next set bit is not found.
end_comment

begin_decl_stmt
name|int
name|find_next
argument_list|(
name|unsigned
name|Prev
argument_list|)
decl|const
block|{
return|return
name|find_first_in
argument_list|(
name|Prev
operator|+
literal|1
argument_list|,
name|Size
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/// find_prev - Returns the index of the first set bit that precedes the
end_comment

begin_comment
comment|/// the bit at \p PriorTo.  Returns -1 if all previous bits are unset.
end_comment

begin_decl_stmt
name|int
name|find_prev
argument_list|(
name|unsigned
name|PriorTo
argument_list|)
decl|const
block|{
return|return
name|find_last_in
argument_list|(
literal|0
argument_list|,
name|PriorTo
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/// find_first_unset - Returns the index of the first unset bit, -1 if all
end_comment

begin_comment
comment|/// of the bits are set.
end_comment

begin_expr_stmt
name|int
name|find_first_unset
argument_list|()
specifier|const
block|{
return|return
name|find_first_unset_in
argument_list|(
literal|0
argument_list|,
name|Size
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/// find_next_unset - Returns the index of the next unset bit following the
end_comment

begin_comment
comment|/// "Prev" bit.  Returns -1 if all remaining bits are set.
end_comment

begin_decl_stmt
name|int
name|find_next_unset
argument_list|(
name|unsigned
name|Prev
argument_list|)
decl|const
block|{
return|return
name|find_first_unset_in
argument_list|(
name|Prev
operator|+
literal|1
argument_list|,
name|Size
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/// find_last_unset - Returns the index of the last unset bit, -1 if all of
end_comment

begin_comment
comment|/// the bits are set.
end_comment

begin_expr_stmt
name|int
name|find_last_unset
argument_list|()
specifier|const
block|{
return|return
name|find_last_unset_in
argument_list|(
literal|0
argument_list|,
name|Size
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/// find_prev_unset - Returns the index of the first unset bit that precedes
end_comment

begin_comment
comment|/// the bit at \p PriorTo.  Returns -1 if all previous bits are set.
end_comment

begin_function
name|int
name|find_prev_unset
parameter_list|(
name|unsigned
name|PriorTo
parameter_list|)
block|{
return|return
name|find_last_unset_in
argument_list|(
literal|0
argument_list|,
name|PriorTo
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/// clear - Removes all bits from the bitvector. Does not change capacity.
end_comment

begin_function
name|void
name|clear
parameter_list|()
block|{
name|Size
operator|=
literal|0
expr_stmt|;
block|}
end_function

begin_comment
comment|/// resize - Grow or shrink the bitvector.
end_comment

begin_function
name|void
name|resize
parameter_list|(
name|unsigned
name|N
parameter_list|,
name|bool
name|t
init|=
name|false
parameter_list|)
block|{
if|if
condition|(
name|N
operator|>
name|getBitCapacity
argument_list|()
condition|)
block|{
name|unsigned
name|OldCapacity
init|=
name|Bits
operator|.
name|size
argument_list|()
decl_stmt|;
name|grow
argument_list|(
name|N
argument_list|)
expr_stmt|;
name|init_words
argument_list|(
name|Bits
operator|.
name|drop_front
argument_list|(
name|OldCapacity
argument_list|)
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
comment|// Set any old unused bits that are now included in the BitVector. This
comment|// may set bits that are not included in the new vector, but we will clear
comment|// them back out below.
if|if
condition|(
name|N
operator|>
name|Size
condition|)
name|set_unused_bits
argument_list|(
name|t
argument_list|)
expr_stmt|;
comment|// Update the size, and clear out any bits that are now unused
name|unsigned
name|OldSize
init|=
name|Size
decl_stmt|;
name|Size
operator|=
name|N
expr_stmt|;
if|if
condition|(
name|t
operator|||
name|N
operator|<
name|OldSize
condition|)
name|clear_unused_bits
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
name|void
name|reserve
parameter_list|(
name|unsigned
name|N
parameter_list|)
block|{
if|if
condition|(
name|N
operator|>
name|getBitCapacity
argument_list|()
condition|)
name|grow
argument_list|(
name|N
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|// Set, reset, flip
end_comment

begin_function
name|BitVector
modifier|&
name|set
parameter_list|()
block|{
name|init_words
argument_list|(
name|Bits
argument_list|,
name|true
argument_list|)
expr_stmt|;
name|clear_unused_bits
argument_list|()
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function

begin_function
name|BitVector
modifier|&
name|set
parameter_list|(
name|unsigned
name|Idx
parameter_list|)
block|{
name|assert
argument_list|(
name|Bits
operator|.
name|data
argument_list|()
operator|&&
literal|"Bits never allocated"
argument_list|)
expr_stmt|;
name|Bits
index|[
name|Idx
operator|/
name|BITWORD_SIZE
index|]
operator||=
name|BitWord
argument_list|(
literal|1
argument_list|)
operator|<<
operator|(
name|Idx
operator|%
name|BITWORD_SIZE
operator|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function

begin_comment
comment|/// set - Efficiently set a range of bits in [I, E)
end_comment

begin_function
name|BitVector
modifier|&
name|set
parameter_list|(
name|unsigned
name|I
parameter_list|,
name|unsigned
name|E
parameter_list|)
block|{
name|assert
argument_list|(
name|I
operator|<=
name|E
operator|&&
literal|"Attempted to set backwards range!"
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|E
operator|<=
name|size
argument_list|()
operator|&&
literal|"Attempted to set out-of-bounds range!"
argument_list|)
expr_stmt|;
if|if
condition|(
name|I
operator|==
name|E
condition|)
return|return
operator|*
name|this
return|;
if|if
condition|(
name|I
operator|/
name|BITWORD_SIZE
operator|==
name|E
operator|/
name|BITWORD_SIZE
condition|)
block|{
name|BitWord
name|EMask
init|=
literal|1UL
operator|<<
operator|(
name|E
operator|%
name|BITWORD_SIZE
operator|)
decl_stmt|;
name|BitWord
name|IMask
init|=
literal|1UL
operator|<<
operator|(
name|I
operator|%
name|BITWORD_SIZE
operator|)
decl_stmt|;
name|BitWord
name|Mask
init|=
name|EMask
operator|-
name|IMask
decl_stmt|;
name|Bits
index|[
name|I
operator|/
name|BITWORD_SIZE
index|]
operator||=
name|Mask
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|BitWord
name|PrefixMask
init|=
operator|~
literal|0UL
operator|<<
operator|(
name|I
operator|%
name|BITWORD_SIZE
operator|)
decl_stmt|;
name|Bits
index|[
name|I
operator|/
name|BITWORD_SIZE
index|]
operator||=
name|PrefixMask
expr_stmt|;
name|I
operator|=
name|alignTo
argument_list|(
name|I
argument_list|,
name|BITWORD_SIZE
argument_list|)
expr_stmt|;
for|for
control|(
init|;
name|I
operator|+
name|BITWORD_SIZE
operator|<=
name|E
condition|;
name|I
operator|+=
name|BITWORD_SIZE
control|)
name|Bits
index|[
name|I
operator|/
name|BITWORD_SIZE
index|]
operator|=
operator|~
literal|0UL
expr_stmt|;
name|BitWord
name|PostfixMask
init|=
operator|(
literal|1UL
operator|<<
operator|(
name|E
operator|%
name|BITWORD_SIZE
operator|)
operator|)
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|I
operator|<
name|E
condition|)
name|Bits
index|[
name|I
operator|/
name|BITWORD_SIZE
index|]
operator||=
name|PostfixMask
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function

begin_function
name|BitVector
modifier|&
name|reset
parameter_list|()
block|{
name|init_words
argument_list|(
name|Bits
argument_list|,
name|false
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function

begin_function
name|BitVector
modifier|&
name|reset
parameter_list|(
name|unsigned
name|Idx
parameter_list|)
block|{
name|Bits
index|[
name|Idx
operator|/
name|BITWORD_SIZE
index|]
operator|&=
operator|~
operator|(
name|BitWord
argument_list|(
literal|1
argument_list|)
operator|<<
operator|(
name|Idx
operator|%
name|BITWORD_SIZE
operator|)
operator|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function

begin_comment
comment|/// reset - Efficiently reset a range of bits in [I, E)
end_comment

begin_function
name|BitVector
modifier|&
name|reset
parameter_list|(
name|unsigned
name|I
parameter_list|,
name|unsigned
name|E
parameter_list|)
block|{
name|assert
argument_list|(
name|I
operator|<=
name|E
operator|&&
literal|"Attempted to reset backwards range!"
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|E
operator|<=
name|size
argument_list|()
operator|&&
literal|"Attempted to reset out-of-bounds range!"
argument_list|)
expr_stmt|;
if|if
condition|(
name|I
operator|==
name|E
condition|)
return|return
operator|*
name|this
return|;
if|if
condition|(
name|I
operator|/
name|BITWORD_SIZE
operator|==
name|E
operator|/
name|BITWORD_SIZE
condition|)
block|{
name|BitWord
name|EMask
init|=
literal|1UL
operator|<<
operator|(
name|E
operator|%
name|BITWORD_SIZE
operator|)
decl_stmt|;
name|BitWord
name|IMask
init|=
literal|1UL
operator|<<
operator|(
name|I
operator|%
name|BITWORD_SIZE
operator|)
decl_stmt|;
name|BitWord
name|Mask
init|=
name|EMask
operator|-
name|IMask
decl_stmt|;
name|Bits
index|[
name|I
operator|/
name|BITWORD_SIZE
index|]
operator|&=
operator|~
name|Mask
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|BitWord
name|PrefixMask
init|=
operator|~
literal|0UL
operator|<<
operator|(
name|I
operator|%
name|BITWORD_SIZE
operator|)
decl_stmt|;
name|Bits
index|[
name|I
operator|/
name|BITWORD_SIZE
index|]
operator|&=
operator|~
name|PrefixMask
expr_stmt|;
name|I
operator|=
name|alignTo
argument_list|(
name|I
argument_list|,
name|BITWORD_SIZE
argument_list|)
expr_stmt|;
for|for
control|(
init|;
name|I
operator|+
name|BITWORD_SIZE
operator|<=
name|E
condition|;
name|I
operator|+=
name|BITWORD_SIZE
control|)
name|Bits
index|[
name|I
operator|/
name|BITWORD_SIZE
index|]
operator|=
literal|0UL
expr_stmt|;
name|BitWord
name|PostfixMask
init|=
operator|(
literal|1UL
operator|<<
operator|(
name|E
operator|%
name|BITWORD_SIZE
operator|)
operator|)
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|I
operator|<
name|E
condition|)
name|Bits
index|[
name|I
operator|/
name|BITWORD_SIZE
index|]
operator|&=
operator|~
name|PostfixMask
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function

begin_function
name|BitVector
modifier|&
name|flip
parameter_list|()
block|{
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumBitWords
argument_list|(
name|size
argument_list|()
argument_list|)
condition|;
operator|++
name|i
control|)
name|Bits
index|[
name|i
index|]
operator|=
operator|~
name|Bits
index|[
name|i
index|]
expr_stmt|;
name|clear_unused_bits
argument_list|()
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function

begin_function
name|BitVector
modifier|&
name|flip
parameter_list|(
name|unsigned
name|Idx
parameter_list|)
block|{
name|Bits
index|[
name|Idx
operator|/
name|BITWORD_SIZE
index|]
operator|^=
name|BitWord
argument_list|(
literal|1
argument_list|)
operator|<<
operator|(
name|Idx
operator|%
name|BITWORD_SIZE
operator|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function

begin_comment
comment|// Indexing.
end_comment

begin_function
name|reference
name|operator
function|[]
parameter_list|(
name|unsigned
name|Idx
parameter_list|)
block|{
name|assert
argument_list|(
name|Idx
operator|<
name|Size
operator|&&
literal|"Out-of-bounds Bit access."
argument_list|)
expr_stmt|;
return|return
name|reference
argument_list|(
operator|*
name|this
argument_list|,
name|Idx
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
name|bool
name|operator
index|[]
argument_list|(
name|unsigned
name|Idx
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|Idx
operator|<
name|Size
operator|&&
literal|"Out-of-bounds Bit access."
argument_list|)
expr_stmt|;
name|BitWord
name|Mask
init|=
name|BitWord
argument_list|(
literal|1
argument_list|)
operator|<<
operator|(
name|Idx
operator|%
name|BITWORD_SIZE
operator|)
decl_stmt|;
return|return
operator|(
name|Bits
index|[
name|Idx
operator|/
name|BITWORD_SIZE
index|]
operator|&
name|Mask
operator|)
operator|!=
literal|0
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|bool
name|test
argument_list|(
name|unsigned
name|Idx
argument_list|)
decl|const
block|{
return|return
operator|(
operator|*
name|this
operator|)
index|[
name|Idx
index|]
return|;
block|}
end_decl_stmt

begin_comment
comment|/// Test if any common bits are set.
end_comment

begin_decl_stmt
name|bool
name|anyCommon
argument_list|(
specifier|const
name|BitVector
operator|&
name|RHS
argument_list|)
decl|const
block|{
name|unsigned
name|ThisWords
init|=
name|NumBitWords
argument_list|(
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|unsigned
name|RHSWords
init|=
name|NumBitWords
argument_list|(
name|RHS
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|,
name|e
init|=
name|std
operator|::
name|min
argument_list|(
name|ThisWords
argument_list|,
name|RHSWords
argument_list|)
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|Bits
index|[
name|i
index|]
operator|&
name|RHS
operator|.
name|Bits
index|[
name|i
index|]
condition|)
return|return
name|true
return|;
return|return
name|false
return|;
block|}
end_decl_stmt

begin_comment
comment|// Comparison operators.
end_comment

begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|BitVector
operator|&
name|RHS
operator|)
specifier|const
block|{
name|unsigned
name|ThisWords
operator|=
name|NumBitWords
argument_list|(
name|size
argument_list|()
argument_list|)
block|;
name|unsigned
name|RHSWords
operator|=
name|NumBitWords
argument_list|(
name|RHS
operator|.
name|size
argument_list|()
argument_list|)
block|;
name|unsigned
name|i
block|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|!=
name|std
operator|::
name|min
argument_list|(
name|ThisWords
argument_list|,
name|RHSWords
argument_list|)
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|Bits
index|[
name|i
index|]
operator|!=
name|RHS
operator|.
name|Bits
index|[
name|i
index|]
condition|)
return|return
name|false
return|;
end_expr_stmt

begin_comment
comment|// Verify that any extra words are all zeros.
end_comment

begin_if
if|if
condition|(
name|i
operator|!=
name|ThisWords
condition|)
block|{
for|for
control|(
init|;
name|i
operator|!=
name|ThisWords
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|Bits
index|[
name|i
index|]
condition|)
return|return
name|false
return|;
block|}
elseif|else
if|if
condition|(
name|i
operator|!=
name|RHSWords
condition|)
block|{
for|for
control|(
init|;
name|i
operator|!=
name|RHSWords
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|RHS
operator|.
name|Bits
index|[
name|i
index|]
condition|)
return|return
name|false
return|;
block|}
end_if

begin_return
return|return
name|true
return|;
end_return

begin_expr_stmt
unit|}    bool
name|operator
operator|!=
operator|(
specifier|const
name|BitVector
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|RHS
operator|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/// Intersection, union, disjoint union.
end_comment

begin_expr_stmt
name|BitVector
operator|&
name|operator
operator|&=
operator|(
specifier|const
name|BitVector
operator|&
name|RHS
operator|)
block|{
name|unsigned
name|ThisWords
operator|=
name|NumBitWords
argument_list|(
name|size
argument_list|()
argument_list|)
block|;
name|unsigned
name|RHSWords
operator|=
name|NumBitWords
argument_list|(
name|RHS
operator|.
name|size
argument_list|()
argument_list|)
block|;
name|unsigned
name|i
block|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|!=
name|std
operator|::
name|min
argument_list|(
name|ThisWords
argument_list|,
name|RHSWords
argument_list|)
condition|;
operator|++
name|i
control|)
name|Bits
index|[
name|i
index|]
operator|&=
name|RHS
operator|.
name|Bits
index|[
name|i
index|]
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Any bits that are just in this bitvector become zero, because they aren't
end_comment

begin_comment
comment|// in the RHS bit vector.  Any words only in RHS are ignored because they
end_comment

begin_comment
comment|// are already zero in the LHS.
end_comment

begin_for
for|for
control|(
init|;
name|i
operator|!=
name|ThisWords
condition|;
operator|++
name|i
control|)
name|Bits
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
end_for

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_comment
unit|}
comment|/// reset - Reset bits that are set in RHS. Same as *this&= ~RHS.
end_comment

begin_expr_stmt
unit|BitVector
operator|&
name|reset
argument_list|(
argument|const BitVector&RHS
argument_list|)
block|{
name|unsigned
name|ThisWords
operator|=
name|NumBitWords
argument_list|(
name|size
argument_list|()
argument_list|)
block|;
name|unsigned
name|RHSWords
operator|=
name|NumBitWords
argument_list|(
name|RHS
operator|.
name|size
argument_list|()
argument_list|)
block|;
name|unsigned
name|i
block|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|!=
name|std
operator|::
name|min
argument_list|(
name|ThisWords
argument_list|,
name|RHSWords
argument_list|)
condition|;
operator|++
name|i
control|)
name|Bits
index|[
name|i
index|]
operator|&=
operator|~
name|RHS
operator|.
name|Bits
index|[
name|i
index|]
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_comment
unit|}
comment|/// test - Check if (This - RHS) is zero.
end_comment

begin_comment
comment|/// This is the same as reset(RHS) and any().
end_comment

begin_macro
unit|bool
name|test
argument_list|(
argument|const BitVector&RHS
argument_list|)
end_macro

begin_expr_stmt
specifier|const
block|{
name|unsigned
name|ThisWords
operator|=
name|NumBitWords
argument_list|(
name|size
argument_list|()
argument_list|)
block|;
name|unsigned
name|RHSWords
operator|=
name|NumBitWords
argument_list|(
name|RHS
operator|.
name|size
argument_list|()
argument_list|)
block|;
name|unsigned
name|i
block|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|!=
name|std
operator|::
name|min
argument_list|(
name|ThisWords
argument_list|,
name|RHSWords
argument_list|)
condition|;
operator|++
name|i
control|)
if|if
condition|(
operator|(
name|Bits
index|[
name|i
index|]
operator|&
operator|~
name|RHS
operator|.
name|Bits
index|[
name|i
index|]
operator|)
operator|!=
literal|0
condition|)
return|return
name|true
return|;
end_expr_stmt

begin_for
for|for
control|(
init|;
name|i
operator|!=
name|ThisWords
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|Bits
index|[
name|i
index|]
operator|!=
literal|0
condition|)
return|return
name|true
return|;
end_for

begin_return
return|return
name|false
return|;
end_return

begin_expr_stmt
unit|}    BitVector
operator|&
name|operator
operator||=
operator|(
specifier|const
name|BitVector
operator|&
name|RHS
operator|)
block|{
if|if
condition|(
name|size
argument_list|()
operator|<
name|RHS
operator|.
name|size
argument_list|()
condition|)
name|resize
argument_list|(
name|RHS
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|,
name|e
init|=
name|NumBitWords
argument_list|(
name|RHS
operator|.
name|size
argument_list|()
argument_list|)
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
name|Bits
index|[
name|i
index|]
operator||=
name|RHS
operator|.
name|Bits
index|[
name|i
index|]
expr_stmt|;
end_for

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}    BitVector
operator|&
name|operator
operator|^=
operator|(
specifier|const
name|BitVector
operator|&
name|RHS
operator|)
block|{
if|if
condition|(
name|size
argument_list|()
operator|<
name|RHS
operator|.
name|size
argument_list|()
condition|)
name|resize
argument_list|(
name|RHS
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|,
name|e
init|=
name|NumBitWords
argument_list|(
name|RHS
operator|.
name|size
argument_list|()
argument_list|)
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
name|Bits
index|[
name|i
index|]
operator|^=
name|RHS
operator|.
name|Bits
index|[
name|i
index|]
expr_stmt|;
end_for

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}    BitVector
operator|&
name|operator
operator|>>=
operator|(
name|unsigned
name|N
operator|)
block|{
name|assert
argument_list|(
name|N
operator|<=
name|Size
argument_list|)
block|;
if|if
condition|(
name|LLVM_UNLIKELY
argument_list|(
name|empty
argument_list|()
operator|||
name|N
operator|==
literal|0
argument_list|)
condition|)
return|return
operator|*
name|this
return|;
name|unsigned
name|NumWords
operator|=
name|NumBitWords
argument_list|(
name|Size
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assert
argument_list|(
name|NumWords
operator|>=
literal|1
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|wordShr
argument_list|(
name|N
operator|/
name|BITWORD_SIZE
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|unsigned
name|BitDistance
init|=
name|N
operator|%
name|BITWORD_SIZE
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|BitDistance
operator|==
literal|0
condition|)
return|return
operator|*
name|this
return|;
end_if

begin_comment
comment|// When the shift size is not a multiple of the word size, then we have
end_comment

begin_comment
comment|// a tricky situation where each word in succession needs to extract some
end_comment

begin_comment
comment|// of the bits from the next word and or them into this word while
end_comment

begin_comment
comment|// shifting this word to make room for the new bits.  This has to be done
end_comment

begin_comment
comment|// for every word in the array.
end_comment

begin_comment
comment|// Since we're shifting each word right, some bits will fall off the end
end_comment

begin_comment
comment|// of each word to the right, and empty space will be created on the left.
end_comment

begin_comment
comment|// The final word in the array will lose bits permanently, so starting at
end_comment

begin_comment
comment|// the beginning, work forwards shifting each word to the right, and
end_comment

begin_comment
comment|// OR'ing in the bits from the end of the next word to the beginning of
end_comment

begin_comment
comment|// the current word.
end_comment

begin_comment
comment|// Example:
end_comment

begin_comment
comment|//   Starting with {0xAABBCCDD, 0xEEFF0011, 0x22334455} and shifting right
end_comment

begin_comment
comment|//   by 4 bits.
end_comment

begin_comment
comment|// Step 1: Word[0]>>= 4           ; 0x0ABBCCDD
end_comment

begin_comment
comment|// Step 2: Word[0] |= 0x10000000   ; 0x1ABBCCDD
end_comment

begin_comment
comment|// Step 3: Word[1]>>= 4           ; 0x0EEFF001
end_comment

begin_comment
comment|// Step 4: Word[1] |= 0x50000000   ; 0x5EEFF001
end_comment

begin_comment
comment|// Step 5: Word[2]>>= 4           ; 0x02334455
end_comment

begin_comment
comment|// Result: { 0x1ABBCCDD, 0x5EEFF001, 0x02334455 }
end_comment

begin_decl_stmt
specifier|const
name|BitWord
name|Mask
init|=
name|maskTrailingOnes
operator|<
name|BitWord
operator|>
operator|(
name|BitDistance
operator|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|unsigned
name|LSH
init|=
name|BITWORD_SIZE
operator|-
name|BitDistance
decl_stmt|;
end_decl_stmt

begin_for
for|for
control|(
name|unsigned
name|I
init|=
literal|0
init|;
name|I
operator|<
name|NumWords
operator|-
literal|1
condition|;
operator|++
name|I
control|)
block|{
name|Bits
index|[
name|I
index|]
operator|>>=
name|BitDistance
expr_stmt|;
name|Bits
index|[
name|I
index|]
operator||=
operator|(
name|Bits
index|[
name|I
operator|+
literal|1
index|]
operator|&
name|Mask
operator|)
operator|<<
name|LSH
expr_stmt|;
block|}
end_for

begin_expr_stmt
name|Bits
index|[
name|NumWords
operator|-
literal|1
index|]
operator|>>=
name|BitDistance
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}    BitVector
operator|&
name|operator
operator|<<=
operator|(
name|unsigned
name|N
operator|)
block|{
name|assert
argument_list|(
name|N
operator|<=
name|Size
argument_list|)
block|;
if|if
condition|(
name|LLVM_UNLIKELY
argument_list|(
name|empty
argument_list|()
operator|||
name|N
operator|==
literal|0
argument_list|)
condition|)
return|return
operator|*
name|this
return|;
name|unsigned
name|NumWords
operator|=
name|NumBitWords
argument_list|(
name|Size
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assert
argument_list|(
name|NumWords
operator|>=
literal|1
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|wordShl
argument_list|(
name|N
operator|/
name|BITWORD_SIZE
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|unsigned
name|BitDistance
init|=
name|N
operator|%
name|BITWORD_SIZE
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|BitDistance
operator|==
literal|0
condition|)
return|return
operator|*
name|this
return|;
end_if

begin_comment
comment|// When the shift size is not a multiple of the word size, then we have
end_comment

begin_comment
comment|// a tricky situation where each word in succession needs to extract some
end_comment

begin_comment
comment|// of the bits from the previous word and or them into this word while
end_comment

begin_comment
comment|// shifting this word to make room for the new bits.  This has to be done
end_comment

begin_comment
comment|// for every word in the array.  This is similar to the algorithm outlined
end_comment

begin_comment
comment|// in operator>>=, but backwards.
end_comment

begin_comment
comment|// Since we're shifting each word left, some bits will fall off the end
end_comment

begin_comment
comment|// of each word to the left, and empty space will be created on the right.
end_comment

begin_comment
comment|// The first word in the array will lose bits permanently, so starting at
end_comment

begin_comment
comment|// the end, work backwards shifting each word to the left, and OR'ing
end_comment

begin_comment
comment|// in the bits from the end of the next word to the beginning of the
end_comment

begin_comment
comment|// current word.
end_comment

begin_comment
comment|// Example:
end_comment

begin_comment
comment|//   Starting with {0xAABBCCDD, 0xEEFF0011, 0x22334455} and shifting left
end_comment

begin_comment
comment|//   by 4 bits.
end_comment

begin_comment
comment|// Step 1: Word[2]<<= 4           ; 0x23344550
end_comment

begin_comment
comment|// Step 2: Word[2] |= 0x0000000E   ; 0x2334455E
end_comment

begin_comment
comment|// Step 3: Word[1]<<= 4           ; 0xEFF00110
end_comment

begin_comment
comment|// Step 4: Word[1] |= 0x0000000A   ; 0xEFF0011A
end_comment

begin_comment
comment|// Step 5: Word[0]<<= 4           ; 0xABBCCDD0
end_comment

begin_comment
comment|// Result: { 0xABBCCDD0, 0xEFF0011A, 0x2334455E }
end_comment

begin_decl_stmt
specifier|const
name|BitWord
name|Mask
init|=
name|maskLeadingOnes
operator|<
name|BitWord
operator|>
operator|(
name|BitDistance
operator|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|unsigned
name|RSH
init|=
name|BITWORD_SIZE
operator|-
name|BitDistance
decl_stmt|;
end_decl_stmt

begin_for
for|for
control|(
name|int
name|I
init|=
name|NumWords
operator|-
literal|1
init|;
name|I
operator|>
literal|0
condition|;
operator|--
name|I
control|)
block|{
name|Bits
index|[
name|I
index|]
operator|<<=
name|BitDistance
expr_stmt|;
name|Bits
index|[
name|I
index|]
operator||=
operator|(
name|Bits
index|[
name|I
operator|-
literal|1
index|]
operator|&
name|Mask
operator|)
operator|>>
name|RSH
expr_stmt|;
block|}
end_for

begin_expr_stmt
name|Bits
index|[
literal|0
index|]
operator|<<=
name|BitDistance
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|clear_unused_bits
argument_list|()
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_comment
unit|}
comment|// Assignment operator.
end_comment

begin_decl_stmt
unit|const
name|BitVector
modifier|&
name|operator
init|=
operator|(
specifier|const
name|BitVector
operator|&
name|RHS
operator|)
block|{
if|if
condition|(
name|this
operator|==
operator|&
name|RHS
condition|)
return|return
operator|*
name|this
return|;
name|Size
operator|=
name|RHS
operator|.
name|size
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|unsigned
name|RHSWords
init|=
name|NumBitWords
argument_list|(
name|Size
argument_list|)
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|Size
operator|<=
name|getBitCapacity
argument_list|()
condition|)
block|{
if|if
condition|(
name|Size
condition|)
name|std
operator|::
name|memcpy
argument_list|(
name|Bits
operator|.
name|data
argument_list|()
argument_list|,
name|RHS
operator|.
name|Bits
operator|.
name|data
argument_list|()
argument_list|,
name|RHSWords
operator|*
sizeof|sizeof
argument_list|(
name|BitWord
argument_list|)
argument_list|)
expr_stmt|;
name|clear_unused_bits
argument_list|()
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_if

begin_comment
comment|// Grow the bitvector to have enough elements.
end_comment

begin_decl_stmt
name|unsigned
name|NewCapacity
init|=
name|RHSWords
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|assert
argument_list|(
name|NewCapacity
operator|>
literal|0
operator|&&
literal|"negative capacity?"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|auto
name|NewBits
init|=
name|allocate
argument_list|(
name|NewCapacity
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|std
operator|::
name|memcpy
argument_list|(
name|NewBits
operator|.
name|data
argument_list|()
argument_list|,
name|RHS
operator|.
name|Bits
operator|.
name|data
argument_list|()
argument_list|,
name|NewCapacity
operator|*
sizeof|sizeof
argument_list|(
name|BitWord
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Destroy the old bits.
end_comment

begin_expr_stmt
name|std
operator|::
name|free
argument_list|(
name|Bits
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Bits
operator|=
name|NewBits
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_decl_stmt
unit|}    const
name|BitVector
modifier|&
name|operator
init|=
operator|(
name|BitVector
operator|&&
name|RHS
operator|)
block|{
if|if
condition|(
name|this
operator|==
operator|&
name|RHS
condition|)
return|return
operator|*
name|this
return|;
name|std
operator|::
name|free
argument_list|(
name|Bits
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|Bits
operator|=
name|RHS
operator|.
name|Bits
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Size
operator|=
name|RHS
operator|.
name|Size
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|RHS
operator|.
name|Bits
operator|=
name|MutableArrayRef
operator|<
name|BitWord
operator|>
operator|(
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|RHS
operator|.
name|Size
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_macro
unit|}    void
name|swap
argument_list|(
argument|BitVector&RHS
argument_list|)
end_macro

begin_block
block|{
name|std
operator|::
name|swap
argument_list|(
name|Bits
argument_list|,
name|RHS
operator|.
name|Bits
argument_list|)
expr_stmt|;
name|std
operator|::
name|swap
argument_list|(
name|Size
argument_list|,
name|RHS
operator|.
name|Size
argument_list|)
expr_stmt|;
block|}
end_block

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_comment
comment|// Portable bit mask operations.
end_comment

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// These methods all operate on arrays of uint32_t, each holding 32 bits. The
end_comment

begin_comment
comment|// fixed word size makes it easier to work with literal bit vector constants
end_comment

begin_comment
comment|// in portable code.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// The LSB in each word is the lowest numbered bit.  The size of a portable
end_comment

begin_comment
comment|// bit mask is always a whole multiple of 32 bits.  If no bit mask size is
end_comment

begin_comment
comment|// given, the bit mask is assumed to cover the entire BitVector.
end_comment

begin_comment
comment|/// setBitsInMask - Add '1' bits from Mask to this vector. Don't resize.
end_comment

begin_comment
comment|/// This computes "*this |= Mask".
end_comment

begin_function
name|void
name|setBitsInMask
parameter_list|(
specifier|const
name|uint32_t
modifier|*
name|Mask
parameter_list|,
name|unsigned
name|MaskWords
init|=
operator|~
literal|0u
parameter_list|)
block|{
name|applyMask
operator|<
name|true
operator|,
name|false
operator|>
operator|(
name|Mask
operator|,
name|MaskWords
operator|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/// clearBitsInMask - Clear any bits in this vector that are set in Mask.
end_comment

begin_comment
comment|/// Don't resize. This computes "*this&= ~Mask".
end_comment

begin_function
name|void
name|clearBitsInMask
parameter_list|(
specifier|const
name|uint32_t
modifier|*
name|Mask
parameter_list|,
name|unsigned
name|MaskWords
init|=
operator|~
literal|0u
parameter_list|)
block|{
name|applyMask
operator|<
name|false
operator|,
name|false
operator|>
operator|(
name|Mask
operator|,
name|MaskWords
operator|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/// setBitsNotInMask - Add a bit to this vector for every '0' bit in Mask.
end_comment

begin_comment
comment|/// Don't resize.  This computes "*this |= ~Mask".
end_comment

begin_function
name|void
name|setBitsNotInMask
parameter_list|(
specifier|const
name|uint32_t
modifier|*
name|Mask
parameter_list|,
name|unsigned
name|MaskWords
init|=
operator|~
literal|0u
parameter_list|)
block|{
name|applyMask
operator|<
name|true
operator|,
name|true
operator|>
operator|(
name|Mask
operator|,
name|MaskWords
operator|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/// clearBitsNotInMask - Clear a bit in this vector for every '0' bit in Mask.
end_comment

begin_comment
comment|/// Don't resize.  This computes "*this&= Mask".
end_comment

begin_function
name|void
name|clearBitsNotInMask
parameter_list|(
specifier|const
name|uint32_t
modifier|*
name|Mask
parameter_list|,
name|unsigned
name|MaskWords
init|=
operator|~
literal|0u
parameter_list|)
block|{
name|applyMask
operator|<
name|false
operator|,
name|true
operator|>
operator|(
name|Mask
operator|,
name|MaskWords
operator|)
expr_stmt|;
block|}
end_function

begin_label
name|private
label|:
end_label

begin_comment
comment|/// \brief Perform a logical left shift of \p Count words by moving everything
end_comment

begin_comment
comment|/// \p Count words to the right in memory.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// While confusing, words are stored from least significant at Bits[0] to
end_comment

begin_comment
comment|/// most significant at Bits[NumWords-1].  A logical shift left, however,
end_comment

begin_comment
comment|/// moves the current least significant bit to a higher logical index, and
end_comment

begin_comment
comment|/// fills the previous least significant bits with 0.  Thus, we actually
end_comment

begin_comment
comment|/// need to move the bytes of the memory to the right, not to the left.
end_comment

begin_comment
comment|/// Example:
end_comment

begin_comment
comment|///   Words = [0xBBBBAAAA, 0xDDDDFFFF, 0x00000000, 0xDDDD0000]
end_comment

begin_comment
comment|/// represents a BitVector where 0xBBBBAAAA contain the least significant
end_comment

begin_comment
comment|/// bits.  So if we want to shift the BitVector left by 2 words, we need to
end_comment

begin_comment
comment|/// turn this into 0x00000000 0x00000000 0xBBBBAAAA 0xDDDDFFFF by using a
end_comment

begin_comment
comment|/// memmove which moves right, not left.
end_comment

begin_function
name|void
name|wordShl
parameter_list|(
name|uint32_t
name|Count
parameter_list|)
block|{
if|if
condition|(
name|Count
operator|==
literal|0
condition|)
return|return;
name|uint32_t
name|NumWords
init|=
name|NumBitWords
argument_list|(
name|Size
argument_list|)
decl_stmt|;
name|auto
name|Src
init|=
name|Bits
operator|.
name|take_front
argument_list|(
name|NumWords
argument_list|)
operator|.
name|drop_back
argument_list|(
name|Count
argument_list|)
decl_stmt|;
name|auto
name|Dest
init|=
name|Bits
operator|.
name|take_front
argument_list|(
name|NumWords
argument_list|)
operator|.
name|drop_front
argument_list|(
name|Count
argument_list|)
decl_stmt|;
comment|// Since we always move Word-sized chunks of data with src and dest both
comment|// aligned to a word-boundary, we don't need to worry about endianness
comment|// here.
name|std
operator|::
name|memmove
argument_list|(
name|Dest
operator|.
name|begin
argument_list|()
argument_list|,
name|Src
operator|.
name|begin
argument_list|()
argument_list|,
name|Dest
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|BitWord
argument_list|)
argument_list|)
expr_stmt|;
name|std
operator|::
name|memset
argument_list|(
name|Bits
operator|.
name|data
argument_list|()
argument_list|,
literal|0
argument_list|,
name|Count
operator|*
sizeof|sizeof
argument_list|(
name|BitWord
argument_list|)
argument_list|)
expr_stmt|;
name|clear_unused_bits
argument_list|()
expr_stmt|;
block|}
end_function

begin_comment
comment|/// \brief Perform a logical right shift of \p Count words by moving those
end_comment

begin_comment
comment|/// words to the left in memory.  See wordShl for more information.
end_comment

begin_comment
comment|///
end_comment

begin_function
name|void
name|wordShr
parameter_list|(
name|uint32_t
name|Count
parameter_list|)
block|{
if|if
condition|(
name|Count
operator|==
literal|0
condition|)
return|return;
name|uint32_t
name|NumWords
init|=
name|NumBitWords
argument_list|(
name|Size
argument_list|)
decl_stmt|;
name|auto
name|Src
init|=
name|Bits
operator|.
name|take_front
argument_list|(
name|NumWords
argument_list|)
operator|.
name|drop_front
argument_list|(
name|Count
argument_list|)
decl_stmt|;
name|auto
name|Dest
init|=
name|Bits
operator|.
name|take_front
argument_list|(
name|NumWords
argument_list|)
operator|.
name|drop_back
argument_list|(
name|Count
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|Dest
operator|.
name|size
argument_list|()
operator|==
name|Src
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|std
operator|::
name|memmove
argument_list|(
name|Dest
operator|.
name|begin
argument_list|()
argument_list|,
name|Src
operator|.
name|begin
argument_list|()
argument_list|,
name|Dest
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|BitWord
argument_list|)
argument_list|)
expr_stmt|;
name|std
operator|::
name|memset
argument_list|(
name|Dest
operator|.
name|end
argument_list|()
argument_list|,
literal|0
argument_list|,
name|Count
operator|*
sizeof|sizeof
argument_list|(
name|BitWord
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|MutableArrayRef
operator|<
name|BitWord
operator|>
name|allocate
argument_list|(
argument|size_t NumWords
argument_list|)
block|{
name|BitWord
operator|*
name|RawBits
operator|=
operator|(
name|BitWord
operator|*
operator|)
name|std
operator|::
name|malloc
argument_list|(
name|NumWords
operator|*
sizeof|sizeof
argument_list|(
name|BitWord
argument_list|)
argument_list|)
block|;
return|return
name|MutableArrayRef
operator|<
name|BitWord
operator|>
operator|(
name|RawBits
operator|,
name|NumWords
operator|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|int
name|next_unset_in_word
argument_list|(
name|int
name|WordIndex
argument_list|,
name|BitWord
name|Word
argument_list|)
decl|const
block|{
name|unsigned
name|Result
init|=
name|WordIndex
operator|*
name|BITWORD_SIZE
operator|+
name|countTrailingOnes
argument_list|(
name|Word
argument_list|)
decl_stmt|;
return|return
name|Result
operator|<
name|size
argument_list|()
condition|?
name|Result
else|:
operator|-
literal|1
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|unsigned
name|NumBitWords
argument_list|(
name|unsigned
name|S
argument_list|)
decl|const
block|{
return|return
operator|(
name|S
operator|+
name|BITWORD_SIZE
operator|-
literal|1
operator|)
operator|/
name|BITWORD_SIZE
return|;
block|}
end_decl_stmt

begin_comment
comment|// Set the unused bits in the high words.
end_comment

begin_function
name|void
name|set_unused_bits
parameter_list|(
name|bool
name|t
init|=
name|true
parameter_list|)
block|{
comment|//  Set high words first.
name|unsigned
name|UsedWords
init|=
name|NumBitWords
argument_list|(
name|Size
argument_list|)
decl_stmt|;
if|if
condition|(
name|Bits
operator|.
name|size
argument_list|()
operator|>
name|UsedWords
condition|)
name|init_words
argument_list|(
name|Bits
operator|.
name|drop_front
argument_list|(
name|UsedWords
argument_list|)
argument_list|,
name|t
argument_list|)
expr_stmt|;
comment|//  Then set any stray high bits of the last used word.
name|unsigned
name|ExtraBits
init|=
name|Size
operator|%
name|BITWORD_SIZE
decl_stmt|;
if|if
condition|(
name|ExtraBits
condition|)
block|{
name|BitWord
name|ExtraBitMask
init|=
operator|~
literal|0UL
operator|<<
name|ExtraBits
decl_stmt|;
if|if
condition|(
name|t
condition|)
name|Bits
index|[
name|UsedWords
operator|-
literal|1
index|]
operator||=
name|ExtraBitMask
expr_stmt|;
else|else
name|Bits
index|[
name|UsedWords
operator|-
literal|1
index|]
operator|&=
operator|~
name|ExtraBitMask
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|// Clear the unused bits in the high words.
end_comment

begin_function
name|void
name|clear_unused_bits
parameter_list|()
block|{
name|set_unused_bits
argument_list|(
name|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|grow
parameter_list|(
name|unsigned
name|NewSize
parameter_list|)
block|{
name|size_t
name|NewCapacity
init|=
name|std
operator|::
name|max
operator|<
name|size_t
operator|>
operator|(
name|NumBitWords
argument_list|(
name|NewSize
argument_list|)
expr|,
name|Bits
operator|.
name|size
argument_list|()
operator|*
literal|2
operator|)
decl_stmt|;
name|assert
argument_list|(
name|NewCapacity
operator|>
literal|0
operator|&&
literal|"realloc-ing zero space"
argument_list|)
expr_stmt|;
name|BitWord
modifier|*
name|NewBits
init|=
operator|(
name|BitWord
operator|*
operator|)
name|std
operator|::
name|realloc
argument_list|(
name|Bits
operator|.
name|data
argument_list|()
argument_list|,
name|NewCapacity
operator|*
sizeof|sizeof
argument_list|(
name|BitWord
argument_list|)
argument_list|)
decl_stmt|;
name|Bits
operator|=
name|MutableArrayRef
operator|<
name|BitWord
operator|>
operator|(
name|NewBits
operator|,
name|NewCapacity
operator|)
expr_stmt|;
name|clear_unused_bits
argument_list|()
expr_stmt|;
block|}
end_function

begin_decl_stmt
name|void
name|init_words
argument_list|(
name|MutableArrayRef
operator|<
name|BitWord
operator|>
name|B
argument_list|,
name|bool
name|t
argument_list|)
block|{
if|if
condition|(
name|B
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|memset
argument_list|(
name|B
operator|.
name|data
argument_list|()
argument_list|,
literal|0
operator|-
operator|(
name|int
operator|)
name|t
argument_list|,
name|B
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|BitWord
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|bool
name|AddBits
operator|,
name|bool
name|InvertMask
operator|>
name|void
name|applyMask
argument_list|(
argument|const uint32_t *Mask
argument_list|,
argument|unsigned MaskWords
argument_list|)
block|{
name|static_assert
argument_list|(
name|BITWORD_SIZE
operator|%
literal|32
operator|==
literal|0
argument_list|,
literal|"Unsupported BitWord size."
argument_list|)
block|;
name|MaskWords
operator|=
name|std
operator|::
name|min
argument_list|(
name|MaskWords
argument_list|,
operator|(
name|size
argument_list|()
operator|+
literal|31
operator|)
operator|/
literal|32
argument_list|)
block|;
specifier|const
name|unsigned
name|Scale
operator|=
name|BITWORD_SIZE
operator|/
literal|32
block|;
name|unsigned
name|i
block|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|MaskWords
operator|>=
name|Scale
condition|;
operator|++
name|i
operator|,
name|MaskWords
operator|-=
name|Scale
control|)
block|{
name|BitWord
name|BW
init|=
name|Bits
index|[
name|i
index|]
decl_stmt|;
comment|// This inner loop should unroll completely when BITWORD_SIZE> 32.
for|for
control|(
name|unsigned
name|b
init|=
literal|0
init|;
name|b
operator|!=
name|BITWORD_SIZE
condition|;
name|b
operator|+=
literal|32
control|)
block|{
name|uint32_t
name|M
init|=
operator|*
name|Mask
operator|++
decl_stmt|;
if|if
condition|(
name|InvertMask
condition|)
name|M
operator|=
operator|~
name|M
expr_stmt|;
if|if
condition|(
name|AddBits
condition|)
name|BW
operator||=
name|BitWord
argument_list|(
name|M
argument_list|)
operator|<<
name|b
expr_stmt|;
else|else
name|BW
operator|&=
operator|~
operator|(
name|BitWord
argument_list|(
name|M
argument_list|)
operator|<<
name|b
operator|)
expr_stmt|;
block|}
name|Bits
index|[
name|i
index|]
operator|=
name|BW
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}     for
operator|(
name|unsigned
name|b
operator|=
literal|0
expr|;
name|MaskWords
expr|;
name|b
operator|+=
literal|32
operator|,
operator|--
name|MaskWords
operator|)
block|{
name|uint32_t
name|M
operator|=
operator|*
name|Mask
operator|++
block|;
if|if
condition|(
name|InvertMask
condition|)
name|M
operator|=
operator|~
name|M
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|AddBits
condition|)
name|Bits
index|[
name|i
index|]
operator||=
name|BitWord
argument_list|(
name|M
argument_list|)
operator|<<
name|b
expr_stmt|;
else|else
name|Bits
index|[
name|i
index|]
operator|&=
operator|~
operator|(
name|BitWord
argument_list|(
name|M
argument_list|)
operator|<<
name|b
operator|)
expr_stmt|;
end_if

begin_expr_stmt
unit|}     if
operator|(
name|AddBits
operator|)
name|clear_unused_bits
argument_list|()
expr_stmt|;
end_expr_stmt

begin_comment
unit|}  public:
comment|/// Return the size (in bytes) of the bit vector.
end_comment

begin_expr_stmt
name|size_t
name|getMemorySize
argument_list|()
specifier|const
block|{
return|return
name|Bits
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|BitWord
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_t
name|getBitCapacity
argument_list|()
specifier|const
block|{
return|return
name|Bits
operator|.
name|size
argument_list|()
operator|*
name|BITWORD_SIZE
return|;
block|}
end_expr_stmt

begin_function
unit|};
specifier|static
specifier|inline
name|size_t
name|capacity_in_bytes
parameter_list|(
specifier|const
name|BitVector
modifier|&
name|X
parameter_list|)
block|{
return|return
name|X
operator|.
name|getMemorySize
argument_list|()
return|;
block|}
end_function

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_macro
unit|namespace
name|std
end_macro

begin_block
block|{
comment|/// Implement std::swap in terms of BitVector swap.
specifier|inline
name|void
name|swap
argument_list|(
name|llvm
operator|::
name|BitVector
operator|&
name|LHS
argument_list|,
name|llvm
operator|::
name|BitVector
operator|&
name|RHS
argument_list|)
block|{
name|LHS
operator|.
name|swap
argument_list|(
name|RHS
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_comment
comment|// end namespace std
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_ADT_BITVECTOR_H
end_comment

end_unit

