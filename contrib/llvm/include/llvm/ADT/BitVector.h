begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- llvm/ADT/BitVector.h - Bit vectors -----------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file implements the BitVector class.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_ADT_BITVECTOR_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_ADT_BITVECTOR_H
end_define

begin_include
include|#
directive|include
file|"llvm/Support/Compiler.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ErrorHandling.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/MathExtras.h"
end_include

begin_include
include|#
directive|include
file|<algorithm>
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<climits>
end_include

begin_include
include|#
directive|include
file|<cstdlib>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|BitVector
block|{
typedef|typedef
name|unsigned
name|long
name|BitWord
typedef|;
enum|enum
block|{
name|BITWORD_SIZE
init|=
operator|(
name|unsigned
operator|)
sizeof|sizeof
argument_list|(
name|BitWord
argument_list|)
operator|*
name|CHAR_BIT
block|}
enum|;
name|BitWord
modifier|*
name|Bits
decl_stmt|;
comment|// Actual bits.
name|unsigned
name|Size
decl_stmt|;
comment|// Size of bitvector in bits.
name|unsigned
name|Capacity
decl_stmt|;
comment|// Size of allocated memory in BitWord.
name|public
label|:
comment|// Encapsulation of a single bit.
name|class
name|reference
block|{
name|friend
name|class
name|BitVector
decl_stmt|;
name|BitWord
modifier|*
name|WordRef
decl_stmt|;
name|unsigned
name|BitPos
decl_stmt|;
name|reference
argument_list|()
expr_stmt|;
comment|// Undefined
name|public
label|:
name|reference
argument_list|(
argument|BitVector&b
argument_list|,
argument|unsigned Idx
argument_list|)
block|{
name|WordRef
operator|=
operator|&
name|b
operator|.
name|Bits
index|[
name|Idx
operator|/
name|BITWORD_SIZE
index|]
expr_stmt|;
name|BitPos
operator|=
name|Idx
operator|%
name|BITWORD_SIZE
expr_stmt|;
block|}
operator|~
name|reference
argument_list|()
block|{}
name|reference
operator|&
name|operator
operator|=
operator|(
name|reference
name|t
operator|)
block|{
operator|*
name|this
operator|=
name|bool
argument_list|(
name|t
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
name|reference
modifier|&
name|operator
init|=
operator|(
name|bool
name|t
operator|)
block|{
if|if
condition|(
name|t
condition|)
operator|*
name|WordRef
operator||=
literal|1L
operator|<<
name|BitPos
expr_stmt|;
else|else
operator|*
name|WordRef
operator|&=
operator|~
operator|(
literal|1L
operator|<<
name|BitPos
operator|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|operator
name|bool
argument_list|()
specifier|const
block|{
return|return
operator|(
operator|(
operator|*
name|WordRef
operator|)
operator|&
operator|(
literal|1L
operator|<<
name|BitPos
operator|)
operator|)
operator|?
name|true
operator|:
name|false
return|;
block|}
block|}
empty_stmt|;
comment|/// BitVector default ctor - Creates an empty bitvector.
name|BitVector
argument_list|()
operator|:
name|Size
argument_list|(
literal|0
argument_list|)
operator|,
name|Capacity
argument_list|(
literal|0
argument_list|)
block|{
name|Bits
operator|=
literal|0
block|;   }
comment|/// BitVector ctor - Creates a bitvector of specified number of bits. All
comment|/// bits are initialized to the specified value.
name|explicit
name|BitVector
argument_list|(
argument|unsigned s
argument_list|,
argument|bool t = false
argument_list|)
operator|:
name|Size
argument_list|(
argument|s
argument_list|)
block|{
name|Capacity
operator|=
name|NumBitWords
argument_list|(
name|s
argument_list|)
block|;
name|Bits
operator|=
operator|(
name|BitWord
operator|*
operator|)
name|std
operator|::
name|malloc
argument_list|(
name|Capacity
operator|*
sizeof|sizeof
argument_list|(
name|BitWord
argument_list|)
argument_list|)
block|;
name|init_words
argument_list|(
name|Bits
argument_list|,
name|Capacity
argument_list|,
name|t
argument_list|)
block|;
if|if
condition|(
name|t
condition|)
name|clear_unused_bits
argument_list|()
expr_stmt|;
block|}
comment|/// BitVector copy ctor.
name|BitVector
argument_list|(
specifier|const
name|BitVector
operator|&
name|RHS
argument_list|)
operator|:
name|Size
argument_list|(
argument|RHS.size()
argument_list|)
block|{
if|if
condition|(
name|Size
operator|==
literal|0
condition|)
block|{
name|Bits
operator|=
literal|0
expr_stmt|;
name|Capacity
operator|=
literal|0
expr_stmt|;
return|return;
block|}
name|Capacity
operator|=
name|NumBitWords
argument_list|(
name|RHS
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Bits
operator|=
operator|(
name|BitWord
operator|*
operator|)
name|std
operator|::
name|malloc
argument_list|(
name|Capacity
operator|*
sizeof|sizeof
argument_list|(
name|BitWord
argument_list|)
argument_list|)
expr_stmt|;
name|std
operator|::
name|memcpy
argument_list|(
name|Bits
argument_list|,
name|RHS
operator|.
name|Bits
argument_list|,
name|Capacity
operator|*
sizeof|sizeof
argument_list|(
name|BitWord
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_if
if|#
directive|if
name|LLVM_USE_RVALUE_REFERENCES
end_if

begin_expr_stmt
name|BitVector
argument_list|(
name|BitVector
operator|&&
name|RHS
argument_list|)
operator|:
name|Bits
argument_list|(
name|RHS
operator|.
name|Bits
argument_list|)
operator|,
name|Size
argument_list|(
name|RHS
operator|.
name|Size
argument_list|)
operator|,
name|Capacity
argument_list|(
argument|RHS.Capacity
argument_list|)
block|{
name|RHS
operator|.
name|Bits
operator|=
literal|0
block|;   }
endif|#
directive|endif
operator|~
name|BitVector
argument_list|()
block|{
name|std
operator|::
name|free
argument_list|(
name|Bits
argument_list|)
block|;   }
comment|/// empty - Tests whether there are no bits in this bitvector.
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|Size
operator|==
literal|0
return|;
block|}
end_expr_stmt

begin_comment
comment|/// size - Returns the number of bits in this bitvector.
end_comment

begin_expr_stmt
name|unsigned
name|size
argument_list|()
specifier|const
block|{
return|return
name|Size
return|;
block|}
end_expr_stmt

begin_comment
comment|/// count - Returns the number of bits which are set.
end_comment

begin_expr_stmt
name|unsigned
name|count
argument_list|()
specifier|const
block|{
name|unsigned
name|NumBits
operator|=
literal|0
block|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumBitWords
argument_list|(
name|size
argument_list|()
argument_list|)
condition|;
operator|++
name|i
control|)
if|if
condition|(
sizeof|sizeof
argument_list|(
name|BitWord
argument_list|)
operator|==
literal|4
condition|)
name|NumBits
operator|+=
name|CountPopulation_32
argument_list|(
operator|(
name|uint32_t
operator|)
name|Bits
index|[
name|i
index|]
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
sizeof|sizeof
argument_list|(
name|BitWord
argument_list|)
operator|==
literal|8
condition|)
name|NumBits
operator|+=
name|CountPopulation_64
argument_list|(
name|Bits
index|[
name|i
index|]
argument_list|)
expr_stmt|;
else|else
name|llvm_unreachable
argument_list|(
literal|"Unsupported!"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|NumBits
return|;
end_return

begin_comment
unit|}
comment|/// any - Returns true if any bit is set.
end_comment

begin_macro
unit|bool
name|any
argument_list|()
end_macro

begin_expr_stmt
specifier|const
block|{
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumBitWords
argument_list|(
name|size
argument_list|()
argument_list|)
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|Bits
index|[
name|i
index|]
operator|!=
literal|0
condition|)
return|return
name|true
return|;
end_expr_stmt

begin_return
return|return
name|false
return|;
end_return

begin_comment
unit|}
comment|/// all - Returns true if all bits are set.
end_comment

begin_macro
unit|bool
name|all
argument_list|()
end_macro

begin_expr_stmt
specifier|const
block|{
comment|// TODO: Optimize this.
return|return
name|count
argument_list|()
operator|==
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_comment
comment|/// none - Returns true if none of the bits are set.
end_comment

begin_expr_stmt
name|bool
name|none
argument_list|()
specifier|const
block|{
return|return
operator|!
name|any
argument_list|()
return|;
block|}
end_expr_stmt

begin_comment
comment|/// find_first - Returns the index of the first set bit, -1 if none
end_comment

begin_comment
comment|/// of the bits are set.
end_comment

begin_expr_stmt
name|int
name|find_first
argument_list|()
specifier|const
block|{
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumBitWords
argument_list|(
name|size
argument_list|()
argument_list|)
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|Bits
index|[
name|i
index|]
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
sizeof|sizeof
argument_list|(
name|BitWord
argument_list|)
operator|==
literal|4
condition|)
return|return
name|i
operator|*
name|BITWORD_SIZE
operator|+
name|CountTrailingZeros_32
argument_list|(
operator|(
name|uint32_t
operator|)
name|Bits
index|[
name|i
index|]
argument_list|)
return|;
if|if
condition|(
sizeof|sizeof
argument_list|(
name|BitWord
argument_list|)
operator|==
literal|8
condition|)
return|return
name|i
operator|*
name|BITWORD_SIZE
operator|+
name|CountTrailingZeros_64
argument_list|(
name|Bits
index|[
name|i
index|]
argument_list|)
return|;
name|llvm_unreachable
argument_list|(
literal|"Unsupported!"
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|-
literal|1
return|;
end_return

begin_comment
unit|}
comment|/// find_next - Returns the index of the next set bit following the
end_comment

begin_comment
comment|/// "Prev" bit. Returns -1 if the next set bit is not found.
end_comment

begin_macro
unit|int
name|find_next
argument_list|(
argument|unsigned Prev
argument_list|)
end_macro

begin_expr_stmt
specifier|const
block|{
operator|++
name|Prev
block|;
if|if
condition|(
name|Prev
operator|>=
name|Size
condition|)
return|return
operator|-
literal|1
return|;
name|unsigned
name|WordPos
operator|=
name|Prev
operator|/
name|BITWORD_SIZE
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|unsigned
name|BitPos
init|=
name|Prev
operator|%
name|BITWORD_SIZE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|BitWord
name|Copy
init|=
name|Bits
index|[
name|WordPos
index|]
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Mask off previous bits.
end_comment

begin_expr_stmt
name|Copy
operator|&=
operator|~
literal|0L
operator|<<
name|BitPos
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|Copy
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
sizeof|sizeof
argument_list|(
name|BitWord
argument_list|)
operator|==
literal|4
condition|)
return|return
name|WordPos
operator|*
name|BITWORD_SIZE
operator|+
name|CountTrailingZeros_32
argument_list|(
operator|(
name|uint32_t
operator|)
name|Copy
argument_list|)
return|;
if|if
condition|(
sizeof|sizeof
argument_list|(
name|BitWord
argument_list|)
operator|==
literal|8
condition|)
return|return
name|WordPos
operator|*
name|BITWORD_SIZE
operator|+
name|CountTrailingZeros_64
argument_list|(
name|Copy
argument_list|)
return|;
name|llvm_unreachable
argument_list|(
literal|"Unsupported!"
argument_list|)
expr_stmt|;
block|}
end_if

begin_comment
comment|// Check subsequent words.
end_comment

begin_for
for|for
control|(
name|unsigned
name|i
init|=
name|WordPos
operator|+
literal|1
init|;
name|i
operator|<
name|NumBitWords
argument_list|(
name|size
argument_list|()
argument_list|)
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|Bits
index|[
name|i
index|]
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
sizeof|sizeof
argument_list|(
name|BitWord
argument_list|)
operator|==
literal|4
condition|)
return|return
name|i
operator|*
name|BITWORD_SIZE
operator|+
name|CountTrailingZeros_32
argument_list|(
operator|(
name|uint32_t
operator|)
name|Bits
index|[
name|i
index|]
argument_list|)
return|;
if|if
condition|(
sizeof|sizeof
argument_list|(
name|BitWord
argument_list|)
operator|==
literal|8
condition|)
return|return
name|i
operator|*
name|BITWORD_SIZE
operator|+
name|CountTrailingZeros_64
argument_list|(
name|Bits
index|[
name|i
index|]
argument_list|)
return|;
name|llvm_unreachable
argument_list|(
literal|"Unsupported!"
argument_list|)
expr_stmt|;
block|}
end_for

begin_return
return|return
operator|-
literal|1
return|;
end_return

begin_comment
unit|}
comment|/// clear - Clear all bits.
end_comment

begin_macro
unit|void
name|clear
argument_list|()
end_macro

begin_block
block|{
name|Size
operator|=
literal|0
expr_stmt|;
block|}
end_block

begin_comment
comment|/// resize - Grow or shrink the bitvector.
end_comment

begin_function
name|void
name|resize
parameter_list|(
name|unsigned
name|N
parameter_list|,
name|bool
name|t
init|=
name|false
parameter_list|)
block|{
if|if
condition|(
name|N
operator|>
name|Capacity
operator|*
name|BITWORD_SIZE
condition|)
block|{
name|unsigned
name|OldCapacity
init|=
name|Capacity
decl_stmt|;
name|grow
argument_list|(
name|N
argument_list|)
expr_stmt|;
name|init_words
argument_list|(
operator|&
name|Bits
index|[
name|OldCapacity
index|]
argument_list|,
operator|(
name|Capacity
operator|-
name|OldCapacity
operator|)
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
comment|// Set any old unused bits that are now included in the BitVector. This
comment|// may set bits that are not included in the new vector, but we will clear
comment|// them back out below.
if|if
condition|(
name|N
operator|>
name|Size
condition|)
name|set_unused_bits
argument_list|(
name|t
argument_list|)
expr_stmt|;
comment|// Update the size, and clear out any bits that are now unused
name|unsigned
name|OldSize
init|=
name|Size
decl_stmt|;
name|Size
operator|=
name|N
expr_stmt|;
if|if
condition|(
name|t
operator|||
name|N
operator|<
name|OldSize
condition|)
name|clear_unused_bits
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
name|void
name|reserve
parameter_list|(
name|unsigned
name|N
parameter_list|)
block|{
if|if
condition|(
name|N
operator|>
name|Capacity
operator|*
name|BITWORD_SIZE
condition|)
name|grow
argument_list|(
name|N
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|// Set, reset, flip
end_comment

begin_function
name|BitVector
modifier|&
name|set
parameter_list|()
block|{
name|init_words
argument_list|(
name|Bits
argument_list|,
name|Capacity
argument_list|,
name|true
argument_list|)
expr_stmt|;
name|clear_unused_bits
argument_list|()
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function

begin_function
name|BitVector
modifier|&
name|set
parameter_list|(
name|unsigned
name|Idx
parameter_list|)
block|{
name|Bits
index|[
name|Idx
operator|/
name|BITWORD_SIZE
index|]
operator||=
literal|1L
operator|<<
operator|(
name|Idx
operator|%
name|BITWORD_SIZE
operator|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function

begin_function
name|BitVector
modifier|&
name|reset
parameter_list|()
block|{
name|init_words
argument_list|(
name|Bits
argument_list|,
name|Capacity
argument_list|,
name|false
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function

begin_function
name|BitVector
modifier|&
name|reset
parameter_list|(
name|unsigned
name|Idx
parameter_list|)
block|{
name|Bits
index|[
name|Idx
operator|/
name|BITWORD_SIZE
index|]
operator|&=
operator|~
operator|(
literal|1L
operator|<<
operator|(
name|Idx
operator|%
name|BITWORD_SIZE
operator|)
operator|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function

begin_function
name|BitVector
modifier|&
name|flip
parameter_list|()
block|{
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumBitWords
argument_list|(
name|size
argument_list|()
argument_list|)
condition|;
operator|++
name|i
control|)
name|Bits
index|[
name|i
index|]
operator|=
operator|~
name|Bits
index|[
name|i
index|]
expr_stmt|;
name|clear_unused_bits
argument_list|()
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function

begin_function
name|BitVector
modifier|&
name|flip
parameter_list|(
name|unsigned
name|Idx
parameter_list|)
block|{
name|Bits
index|[
name|Idx
operator|/
name|BITWORD_SIZE
index|]
operator|^=
literal|1L
operator|<<
operator|(
name|Idx
operator|%
name|BITWORD_SIZE
operator|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function

begin_comment
comment|// Indexing.
end_comment

begin_function
name|reference
name|operator
function|[]
parameter_list|(
name|unsigned
name|Idx
parameter_list|)
block|{
name|assert
argument_list|(
name|Idx
operator|<
name|Size
operator|&&
literal|"Out-of-bounds Bit access."
argument_list|)
expr_stmt|;
return|return
name|reference
argument_list|(
operator|*
name|this
argument_list|,
name|Idx
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
name|bool
name|operator
index|[]
argument_list|(
name|unsigned
name|Idx
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|Idx
operator|<
name|Size
operator|&&
literal|"Out-of-bounds Bit access."
argument_list|)
expr_stmt|;
name|BitWord
name|Mask
init|=
literal|1L
operator|<<
operator|(
name|Idx
operator|%
name|BITWORD_SIZE
operator|)
decl_stmt|;
return|return
operator|(
name|Bits
index|[
name|Idx
operator|/
name|BITWORD_SIZE
index|]
operator|&
name|Mask
operator|)
operator|!=
literal|0
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|bool
name|test
argument_list|(
name|unsigned
name|Idx
argument_list|)
decl|const
block|{
return|return
operator|(
operator|*
name|this
operator|)
index|[
name|Idx
index|]
return|;
block|}
end_decl_stmt

begin_comment
comment|/// Test if any common bits are set.
end_comment

begin_decl_stmt
name|bool
name|anyCommon
argument_list|(
specifier|const
name|BitVector
operator|&
name|RHS
argument_list|)
decl|const
block|{
name|unsigned
name|ThisWords
init|=
name|NumBitWords
argument_list|(
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|unsigned
name|RHSWords
init|=
name|NumBitWords
argument_list|(
name|RHS
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|,
name|e
init|=
name|std
operator|::
name|min
argument_list|(
name|ThisWords
argument_list|,
name|RHSWords
argument_list|)
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|Bits
index|[
name|i
index|]
operator|&
name|RHS
operator|.
name|Bits
index|[
name|i
index|]
condition|)
return|return
name|true
return|;
return|return
name|false
return|;
block|}
end_decl_stmt

begin_comment
comment|// Comparison operators.
end_comment

begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|BitVector
operator|&
name|RHS
operator|)
specifier|const
block|{
name|unsigned
name|ThisWords
operator|=
name|NumBitWords
argument_list|(
name|size
argument_list|()
argument_list|)
block|;
name|unsigned
name|RHSWords
operator|=
name|NumBitWords
argument_list|(
name|RHS
operator|.
name|size
argument_list|()
argument_list|)
block|;
name|unsigned
name|i
block|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|!=
name|std
operator|::
name|min
argument_list|(
name|ThisWords
argument_list|,
name|RHSWords
argument_list|)
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|Bits
index|[
name|i
index|]
operator|!=
name|RHS
operator|.
name|Bits
index|[
name|i
index|]
condition|)
return|return
name|false
return|;
end_expr_stmt

begin_comment
comment|// Verify that any extra words are all zeros.
end_comment

begin_if
if|if
condition|(
name|i
operator|!=
name|ThisWords
condition|)
block|{
for|for
control|(
init|;
name|i
operator|!=
name|ThisWords
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|Bits
index|[
name|i
index|]
condition|)
return|return
name|false
return|;
block|}
elseif|else
if|if
condition|(
name|i
operator|!=
name|RHSWords
condition|)
block|{
for|for
control|(
init|;
name|i
operator|!=
name|RHSWords
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|RHS
operator|.
name|Bits
index|[
name|i
index|]
condition|)
return|return
name|false
return|;
block|}
end_if

begin_return
return|return
name|true
return|;
end_return

begin_expr_stmt
unit|}    bool
name|operator
operator|!=
operator|(
specifier|const
name|BitVector
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|RHS
operator|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// Intersection, union, disjoint union.
end_comment

begin_expr_stmt
name|BitVector
operator|&
name|operator
operator|&=
operator|(
specifier|const
name|BitVector
operator|&
name|RHS
operator|)
block|{
name|unsigned
name|ThisWords
operator|=
name|NumBitWords
argument_list|(
name|size
argument_list|()
argument_list|)
block|;
name|unsigned
name|RHSWords
operator|=
name|NumBitWords
argument_list|(
name|RHS
operator|.
name|size
argument_list|()
argument_list|)
block|;
name|unsigned
name|i
block|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|!=
name|std
operator|::
name|min
argument_list|(
name|ThisWords
argument_list|,
name|RHSWords
argument_list|)
condition|;
operator|++
name|i
control|)
name|Bits
index|[
name|i
index|]
operator|&=
name|RHS
operator|.
name|Bits
index|[
name|i
index|]
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Any bits that are just in this bitvector become zero, because they aren't
end_comment

begin_comment
comment|// in the RHS bit vector.  Any words only in RHS are ignored because they
end_comment

begin_comment
comment|// are already zero in the LHS.
end_comment

begin_for
for|for
control|(
init|;
name|i
operator|!=
name|ThisWords
condition|;
operator|++
name|i
control|)
name|Bits
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
end_for

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_comment
unit|}
comment|// reset - Reset bits that are set in RHS. Same as *this&= ~RHS.
end_comment

begin_expr_stmt
unit|BitVector
operator|&
name|reset
argument_list|(
argument|const BitVector&RHS
argument_list|)
block|{
name|unsigned
name|ThisWords
operator|=
name|NumBitWords
argument_list|(
name|size
argument_list|()
argument_list|)
block|;
name|unsigned
name|RHSWords
operator|=
name|NumBitWords
argument_list|(
name|RHS
operator|.
name|size
argument_list|()
argument_list|)
block|;
name|unsigned
name|i
block|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|!=
name|std
operator|::
name|min
argument_list|(
name|ThisWords
argument_list|,
name|RHSWords
argument_list|)
condition|;
operator|++
name|i
control|)
name|Bits
index|[
name|i
index|]
operator|&=
operator|~
name|RHS
operator|.
name|Bits
index|[
name|i
index|]
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}    BitVector
operator|&
name|operator
operator||=
operator|(
specifier|const
name|BitVector
operator|&
name|RHS
operator|)
block|{
if|if
condition|(
name|size
argument_list|()
operator|<
name|RHS
operator|.
name|size
argument_list|()
condition|)
name|resize
argument_list|(
name|RHS
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|,
name|e
init|=
name|NumBitWords
argument_list|(
name|RHS
operator|.
name|size
argument_list|()
argument_list|)
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
name|Bits
index|[
name|i
index|]
operator||=
name|RHS
operator|.
name|Bits
index|[
name|i
index|]
expr_stmt|;
end_for

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}    BitVector
operator|&
name|operator
operator|^=
operator|(
specifier|const
name|BitVector
operator|&
name|RHS
operator|)
block|{
if|if
condition|(
name|size
argument_list|()
operator|<
name|RHS
operator|.
name|size
argument_list|()
condition|)
name|resize
argument_list|(
name|RHS
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|,
name|e
init|=
name|NumBitWords
argument_list|(
name|RHS
operator|.
name|size
argument_list|()
argument_list|)
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
name|Bits
index|[
name|i
index|]
operator|^=
name|RHS
operator|.
name|Bits
index|[
name|i
index|]
expr_stmt|;
end_for

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_comment
unit|}
comment|// Assignment operator.
end_comment

begin_decl_stmt
unit|const
name|BitVector
modifier|&
name|operator
init|=
operator|(
specifier|const
name|BitVector
operator|&
name|RHS
operator|)
block|{
if|if
condition|(
name|this
operator|==
operator|&
name|RHS
condition|)
return|return
operator|*
name|this
return|;
name|Size
operator|=
name|RHS
operator|.
name|size
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|unsigned
name|RHSWords
init|=
name|NumBitWords
argument_list|(
name|Size
argument_list|)
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|Size
operator|<=
name|Capacity
operator|*
name|BITWORD_SIZE
condition|)
block|{
if|if
condition|(
name|Size
condition|)
name|std
operator|::
name|memcpy
argument_list|(
name|Bits
argument_list|,
name|RHS
operator|.
name|Bits
argument_list|,
name|RHSWords
operator|*
sizeof|sizeof
argument_list|(
name|BitWord
argument_list|)
argument_list|)
expr_stmt|;
name|clear_unused_bits
argument_list|()
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_if

begin_comment
comment|// Grow the bitvector to have enough elements.
end_comment

begin_expr_stmt
name|Capacity
operator|=
name|RHSWords
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|BitWord
modifier|*
name|NewBits
init|=
operator|(
name|BitWord
operator|*
operator|)
name|std
operator|::
name|malloc
argument_list|(
name|Capacity
operator|*
sizeof|sizeof
argument_list|(
name|BitWord
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|std
operator|::
name|memcpy
argument_list|(
name|NewBits
argument_list|,
name|RHS
operator|.
name|Bits
argument_list|,
name|Capacity
operator|*
sizeof|sizeof
argument_list|(
name|BitWord
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Destroy the old bits.
end_comment

begin_expr_stmt
name|std
operator|::
name|free
argument_list|(
name|Bits
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Bits
operator|=
name|NewBits
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_if
unit|}
if|#
directive|if
name|LLVM_USE_RVALUE_REFERENCES
end_if

begin_decl_stmt
unit|const
name|BitVector
modifier|&
name|operator
init|=
operator|(
name|BitVector
operator|&&
name|RHS
operator|)
block|{
if|if
condition|(
name|this
operator|==
operator|&
name|RHS
condition|)
return|return
operator|*
name|this
return|;
name|std
operator|::
name|free
argument_list|(
name|Bits
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|Bits
operator|=
name|RHS
operator|.
name|Bits
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Size
operator|=
name|RHS
operator|.
name|Size
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Capacity
operator|=
name|RHS
operator|.
name|Capacity
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|RHS
operator|.
name|Bits
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_macro
unit|void
name|swap
argument_list|(
argument|BitVector&RHS
argument_list|)
end_macro

begin_block
block|{
name|std
operator|::
name|swap
argument_list|(
name|Bits
argument_list|,
name|RHS
operator|.
name|Bits
argument_list|)
expr_stmt|;
name|std
operator|::
name|swap
argument_list|(
name|Size
argument_list|,
name|RHS
operator|.
name|Size
argument_list|)
expr_stmt|;
name|std
operator|::
name|swap
argument_list|(
name|Capacity
argument_list|,
name|RHS
operator|.
name|Capacity
argument_list|)
expr_stmt|;
block|}
end_block

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_comment
comment|// Portable bit mask operations.
end_comment

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// These methods all operate on arrays of uint32_t, each holding 32 bits. The
end_comment

begin_comment
comment|// fixed word size makes it easier to work with literal bit vector constants
end_comment

begin_comment
comment|// in portable code.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// The LSB in each word is the lowest numbered bit.  The size of a portable
end_comment

begin_comment
comment|// bit mask is always a whole multiple of 32 bits.  If no bit mask size is
end_comment

begin_comment
comment|// given, the bit mask is assumed to cover the entire BitVector.
end_comment

begin_comment
comment|/// setBitsInMask - Add '1' bits from Mask to this vector. Don't resize.
end_comment

begin_comment
comment|/// This computes "*this |= Mask".
end_comment

begin_function
name|void
name|setBitsInMask
parameter_list|(
specifier|const
name|uint32_t
modifier|*
name|Mask
parameter_list|,
name|unsigned
name|MaskWords
init|=
operator|~
literal|0u
parameter_list|)
block|{
name|applyMask
operator|<
name|true
operator|,
name|false
operator|>
operator|(
name|Mask
operator|,
name|MaskWords
operator|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/// clearBitsInMask - Clear any bits in this vector that are set in Mask.
end_comment

begin_comment
comment|/// Don't resize. This computes "*this&= ~Mask".
end_comment

begin_function
name|void
name|clearBitsInMask
parameter_list|(
specifier|const
name|uint32_t
modifier|*
name|Mask
parameter_list|,
name|unsigned
name|MaskWords
init|=
operator|~
literal|0u
parameter_list|)
block|{
name|applyMask
operator|<
name|false
operator|,
name|false
operator|>
operator|(
name|Mask
operator|,
name|MaskWords
operator|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/// setBitsNotInMask - Add a bit to this vector for every '0' bit in Mask.
end_comment

begin_comment
comment|/// Don't resize.  This computes "*this |= ~Mask".
end_comment

begin_function
name|void
name|setBitsNotInMask
parameter_list|(
specifier|const
name|uint32_t
modifier|*
name|Mask
parameter_list|,
name|unsigned
name|MaskWords
init|=
operator|~
literal|0u
parameter_list|)
block|{
name|applyMask
operator|<
name|true
operator|,
name|true
operator|>
operator|(
name|Mask
operator|,
name|MaskWords
operator|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/// clearBitsNotInMask - Clear a bit in this vector for every '0' bit in Mask.
end_comment

begin_comment
comment|/// Don't resize.  This computes "*this&= Mask".
end_comment

begin_function
name|void
name|clearBitsNotInMask
parameter_list|(
specifier|const
name|uint32_t
modifier|*
name|Mask
parameter_list|,
name|unsigned
name|MaskWords
init|=
operator|~
literal|0u
parameter_list|)
block|{
name|applyMask
operator|<
name|false
operator|,
name|true
operator|>
operator|(
name|Mask
operator|,
name|MaskWords
operator|)
expr_stmt|;
block|}
end_function

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|unsigned
name|NumBitWords
argument_list|(
name|unsigned
name|S
argument_list|)
decl|const
block|{
return|return
operator|(
name|S
operator|+
name|BITWORD_SIZE
operator|-
literal|1
operator|)
operator|/
name|BITWORD_SIZE
return|;
block|}
end_decl_stmt

begin_comment
comment|// Set the unused bits in the high words.
end_comment

begin_function
name|void
name|set_unused_bits
parameter_list|(
name|bool
name|t
init|=
name|true
parameter_list|)
block|{
comment|//  Set high words first.
name|unsigned
name|UsedWords
init|=
name|NumBitWords
argument_list|(
name|Size
argument_list|)
decl_stmt|;
if|if
condition|(
name|Capacity
operator|>
name|UsedWords
condition|)
name|init_words
argument_list|(
operator|&
name|Bits
index|[
name|UsedWords
index|]
argument_list|,
operator|(
name|Capacity
operator|-
name|UsedWords
operator|)
argument_list|,
name|t
argument_list|)
expr_stmt|;
comment|//  Then set any stray high bits of the last used word.
name|unsigned
name|ExtraBits
init|=
name|Size
operator|%
name|BITWORD_SIZE
decl_stmt|;
if|if
condition|(
name|ExtraBits
condition|)
block|{
name|Bits
index|[
name|UsedWords
operator|-
literal|1
index|]
operator|&=
operator|~
operator|(
operator|~
literal|0L
operator|<<
name|ExtraBits
operator|)
expr_stmt|;
name|Bits
index|[
name|UsedWords
operator|-
literal|1
index|]
operator||=
operator|(
literal|0
operator|-
operator|(
name|BitWord
operator|)
name|t
operator|)
operator|<<
name|ExtraBits
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|// Clear the unused bits in the high words.
end_comment

begin_function
name|void
name|clear_unused_bits
parameter_list|()
block|{
name|set_unused_bits
argument_list|(
name|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|grow
parameter_list|(
name|unsigned
name|NewSize
parameter_list|)
block|{
name|Capacity
operator|=
name|std
operator|::
name|max
argument_list|(
name|NumBitWords
argument_list|(
name|NewSize
argument_list|)
argument_list|,
name|Capacity
operator|*
literal|2
argument_list|)
expr_stmt|;
name|Bits
operator|=
operator|(
name|BitWord
operator|*
operator|)
name|std
operator|::
name|realloc
argument_list|(
name|Bits
argument_list|,
name|Capacity
operator|*
sizeof|sizeof
argument_list|(
name|BitWord
argument_list|)
argument_list|)
expr_stmt|;
name|clear_unused_bits
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
name|void
name|init_words
parameter_list|(
name|BitWord
modifier|*
name|B
parameter_list|,
name|unsigned
name|NumWords
parameter_list|,
name|bool
name|t
parameter_list|)
block|{
name|memset
argument_list|(
name|B
argument_list|,
literal|0
operator|-
operator|(
name|int
operator|)
name|t
argument_list|,
name|NumWords
operator|*
sizeof|sizeof
argument_list|(
name|BitWord
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|bool
name|AddBits
operator|,
name|bool
name|InvertMask
operator|>
name|void
name|applyMask
argument_list|(
argument|const uint32_t *Mask
argument_list|,
argument|unsigned MaskWords
argument_list|)
block|{
name|assert
argument_list|(
name|BITWORD_SIZE
operator|%
literal|32
operator|==
literal|0
operator|&&
literal|"Unsupported BitWord size."
argument_list|)
block|;
name|MaskWords
operator|=
name|std
operator|::
name|min
argument_list|(
name|MaskWords
argument_list|,
operator|(
name|size
argument_list|()
operator|+
literal|31
operator|)
operator|/
literal|32
argument_list|)
block|;
specifier|const
name|unsigned
name|Scale
operator|=
name|BITWORD_SIZE
operator|/
literal|32
block|;
name|unsigned
name|i
block|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|MaskWords
operator|>=
name|Scale
condition|;
operator|++
name|i
operator|,
name|MaskWords
operator|-=
name|Scale
control|)
block|{
name|BitWord
name|BW
init|=
name|Bits
index|[
name|i
index|]
decl_stmt|;
comment|// This inner loop should unroll completely when BITWORD_SIZE> 32.
for|for
control|(
name|unsigned
name|b
init|=
literal|0
init|;
name|b
operator|!=
name|BITWORD_SIZE
condition|;
name|b
operator|+=
literal|32
control|)
block|{
name|uint32_t
name|M
init|=
operator|*
name|Mask
operator|++
decl_stmt|;
if|if
condition|(
name|InvertMask
condition|)
name|M
operator|=
operator|~
name|M
expr_stmt|;
if|if
condition|(
name|AddBits
condition|)
name|BW
operator||=
name|BitWord
argument_list|(
name|M
argument_list|)
operator|<<
name|b
expr_stmt|;
else|else
name|BW
operator|&=
operator|~
operator|(
name|BitWord
argument_list|(
name|M
argument_list|)
operator|<<
name|b
operator|)
expr_stmt|;
block|}
name|Bits
index|[
name|i
index|]
operator|=
name|BW
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}     for
operator|(
name|unsigned
name|b
operator|=
literal|0
expr|;
name|MaskWords
expr|;
name|b
operator|+=
literal|32
operator|,
operator|--
name|MaskWords
operator|)
block|{
name|uint32_t
name|M
operator|=
operator|*
name|Mask
operator|++
block|;
if|if
condition|(
name|InvertMask
condition|)
name|M
operator|=
operator|~
name|M
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|AddBits
condition|)
name|Bits
index|[
name|i
index|]
operator||=
name|BitWord
argument_list|(
name|M
argument_list|)
operator|<<
name|b
expr_stmt|;
else|else
name|Bits
index|[
name|i
index|]
operator|&=
operator|~
operator|(
name|BitWord
argument_list|(
name|M
argument_list|)
operator|<<
name|b
operator|)
expr_stmt|;
end_if

begin_expr_stmt
unit|}     if
operator|(
name|AddBits
operator|)
name|clear_unused_bits
argument_list|()
expr_stmt|;
end_expr_stmt

begin_empty_stmt
unit|} }
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// End llvm namespace
end_comment

begin_macro
unit|namespace
name|std
end_macro

begin_block
block|{
comment|/// Implement std::swap in terms of BitVector swap.
specifier|inline
name|void
name|swap
argument_list|(
name|llvm
operator|::
name|BitVector
operator|&
name|LHS
argument_list|,
name|llvm
operator|::
name|BitVector
operator|&
name|RHS
argument_list|)
block|{
name|LHS
operator|.
name|swap
argument_list|(
name|RHS
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_endif
endif|#
directive|endif
end_endif

end_unit

