begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- ImmutableMap.h - Immutable (functional) map interface --*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines the ImmutableMap class.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_ADT_IMMUTABLEMAP_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_ADT_IMMUTABLEMAP_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/ImmutableSet.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|/// ImutKeyValueInfo -Traits class used by ImmutableMap.  While both the first
comment|/// and second elements in a pair are used to generate profile information,
comment|/// only the first element (the key) is used by isEqual and isLess.
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|S
operator|>
expr|struct
name|ImutKeyValueInfo
block|{
typedef|typedef
specifier|const
name|std
operator|::
name|pair
operator|<
name|T
operator|,
name|S
operator|>
name|value_type
expr_stmt|;
typedef|typedef
specifier|const
name|value_type
modifier|&
name|value_type_ref
typedef|;
typedef|typedef
specifier|const
name|T
name|key_type
typedef|;
typedef|typedef
specifier|const
name|T
modifier|&
name|key_type_ref
typedef|;
typedef|typedef
specifier|const
name|S
name|data_type
typedef|;
typedef|typedef
specifier|const
name|S
modifier|&
name|data_type_ref
typedef|;
specifier|static
specifier|inline
name|key_type_ref
name|KeyOfValue
parameter_list|(
name|value_type_ref
name|V
parameter_list|)
block|{
return|return
name|V
operator|.
name|first
return|;
block|}
specifier|static
specifier|inline
name|data_type_ref
name|DataOfValue
parameter_list|(
name|value_type_ref
name|V
parameter_list|)
block|{
return|return
name|V
operator|.
name|second
return|;
block|}
specifier|static
specifier|inline
name|bool
name|isEqual
parameter_list|(
name|key_type_ref
name|L
parameter_list|,
name|key_type_ref
name|R
parameter_list|)
block|{
return|return
name|ImutContainerInfo
operator|<
name|T
operator|>
operator|::
name|isEqual
argument_list|(
name|L
argument_list|,
name|R
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|bool
name|isLess
parameter_list|(
name|key_type_ref
name|L
parameter_list|,
name|key_type_ref
name|R
parameter_list|)
block|{
return|return
name|ImutContainerInfo
operator|<
name|T
operator|>
operator|::
name|isLess
argument_list|(
name|L
argument_list|,
name|R
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|bool
name|isDataEqual
parameter_list|(
name|data_type_ref
name|L
parameter_list|,
name|data_type_ref
name|R
parameter_list|)
block|{
return|return
name|ImutContainerInfo
operator|<
name|S
operator|>
operator|::
name|isEqual
argument_list|(
name|L
argument_list|,
name|R
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|void
name|Profile
parameter_list|(
name|FoldingSetNodeID
modifier|&
name|ID
parameter_list|,
name|value_type_ref
name|V
parameter_list|)
block|{
name|ImutContainerInfo
operator|<
name|T
operator|>
operator|::
name|Profile
argument_list|(
name|ID
argument_list|,
name|V
operator|.
name|first
argument_list|)
expr_stmt|;
name|ImutContainerInfo
operator|<
name|S
operator|>
operator|::
name|Profile
argument_list|(
name|ID
argument_list|,
name|V
operator|.
name|second
argument_list|)
expr_stmt|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|KeyT
operator|,
name|typename
name|ValT
operator|,
name|typename
name|ValInfo
operator|=
name|ImutKeyValueInfo
operator|<
name|KeyT
operator|,
name|ValT
operator|>
expr|>
name|class
name|ImmutableMap
block|{
name|public
operator|:
typedef|typedef
name|typename
name|ValInfo
operator|::
name|value_type
name|value_type
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|ValInfo
operator|::
name|value_type_ref
name|value_type_ref
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|ValInfo
operator|::
name|key_type
name|key_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|ValInfo
operator|::
name|key_type_ref
name|key_type_ref
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|ValInfo
operator|::
name|data_type
name|data_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|ValInfo
operator|::
name|data_type_ref
name|data_type_ref
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|ImutAVLTree
operator|<
name|ValInfo
operator|>
name|TreeTy
expr_stmt|;
end_typedef

begin_label
name|protected
label|:
end_label

begin_decl_stmt
name|TreeTy
modifier|*
name|Root
decl_stmt|;
end_decl_stmt

begin_label
name|public
label|:
end_label

begin_comment
comment|/// Constructs a map from a pointer to a tree root.  In general one
end_comment

begin_comment
comment|/// should use a Factory object to create maps instead of directly
end_comment

begin_comment
comment|/// invoking the constructor, but there are cases where make this
end_comment

begin_comment
comment|/// constructor public is useful.
end_comment

begin_macro
name|explicit
end_macro

begin_expr_stmt
name|ImmutableMap
argument_list|(
specifier|const
name|TreeTy
operator|*
name|R
argument_list|)
operator|:
name|Root
argument_list|(
argument|const_cast<TreeTy*>(R)
argument_list|)
block|{
if|if
condition|(
name|Root
condition|)
block|{
name|Root
operator|->
name|retain
argument_list|()
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}   ImmutableMap
operator|(
specifier|const
name|ImmutableMap
operator|&
name|X
operator|)
operator|:
name|Root
argument_list|(
argument|X.Root
argument_list|)
block|{
if|if
condition|(
name|Root
condition|)
block|{
name|Root
operator|->
name|retain
argument_list|()
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}   ImmutableMap
operator|&
name|operator
operator|=
operator|(
specifier|const
name|ImmutableMap
operator|&
name|X
operator|)
block|{
if|if
condition|(
name|Root
operator|!=
name|X
operator|.
name|Root
condition|)
block|{
if|if
condition|(
name|X
operator|.
name|Root
condition|)
block|{
name|X
operator|.
name|Root
operator|->
name|retain
argument_list|()
expr_stmt|;
block|}
end_expr_stmt

begin_if
if|if
condition|(
name|Root
condition|)
block|{
name|Root
operator|->
name|release
argument_list|()
expr_stmt|;
block|}
end_if

begin_expr_stmt
name|Root
operator|=
name|X
operator|.
name|Root
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}     return
operator|*
name|this
expr_stmt|;
end_expr_stmt

begin_macro
unit|}   ~
name|ImmutableMap
argument_list|()
end_macro

begin_block
block|{
if|if
condition|(
name|Root
condition|)
block|{
name|Root
operator|->
name|release
argument_list|()
expr_stmt|;
block|}
block|}
end_block

begin_decl_stmt
name|class
name|Factory
block|{
name|typename
name|TreeTy
operator|::
name|Factory
name|F
expr_stmt|;
specifier|const
name|bool
name|Canonicalize
decl_stmt|;
name|public
label|:
name|Factory
argument_list|(
argument|bool canonicalize = true
argument_list|)
block|:
name|Canonicalize
argument_list|(
argument|canonicalize
argument_list|)
block|{}
name|Factory
argument_list|(
argument|BumpPtrAllocator& Alloc
argument_list|,
argument|bool canonicalize = true
argument_list|)
block|:
name|F
argument_list|(
name|Alloc
argument_list|)
operator|,
name|Canonicalize
argument_list|(
argument|canonicalize
argument_list|)
block|{}
name|ImmutableMap
name|getEmptyMap
argument_list|()
block|{
return|return
name|ImmutableMap
argument_list|(
name|F
operator|.
name|getEmptyTree
argument_list|()
argument_list|)
return|;
block|}
name|ImmutableMap
name|add
parameter_list|(
name|ImmutableMap
name|Old
parameter_list|,
name|key_type_ref
name|K
parameter_list|,
name|data_type_ref
name|D
parameter_list|)
block|{
name|TreeTy
modifier|*
name|T
init|=
name|F
operator|.
name|add
argument_list|(
name|Old
operator|.
name|Root
argument_list|,
name|std
operator|::
name|pair
operator|<
name|key_type
argument_list|,
name|data_type
operator|>
operator|(
name|K
expr|,
name|D
operator|)
argument_list|)
decl_stmt|;
return|return
name|ImmutableMap
argument_list|(
name|Canonicalize
condition|?
name|F
operator|.
name|getCanonicalTree
argument_list|(
name|T
argument_list|)
else|:
name|T
argument_list|)
return|;
block|}
name|ImmutableMap
name|remove
parameter_list|(
name|ImmutableMap
name|Old
parameter_list|,
name|key_type_ref
name|K
parameter_list|)
block|{
name|TreeTy
modifier|*
name|T
init|=
name|F
operator|.
name|remove
argument_list|(
name|Old
operator|.
name|Root
argument_list|,
name|K
argument_list|)
decl_stmt|;
return|return
name|ImmutableMap
argument_list|(
name|Canonicalize
condition|?
name|F
operator|.
name|getCanonicalTree
argument_list|(
name|T
argument_list|)
else|:
name|T
argument_list|)
return|;
block|}
name|typename
name|TreeTy
operator|::
name|Factory
operator|*
name|getTreeFactory
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|typename
name|TreeTy
operator|::
name|Factory
operator|*
operator|>
operator|(
operator|&
name|F
operator|)
return|;
block|}
name|private
label|:
name|Factory
argument_list|(
specifier|const
name|Factory
operator|&
name|RHS
argument_list|)
operator|=
name|delete
expr_stmt|;
name|void
name|operator
init|=
operator|(
specifier|const
name|Factory
operator|&
name|RHS
operator|)
operator|=
name|delete
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|bool
name|contains
argument_list|(
name|key_type_ref
name|K
argument_list|)
decl|const
block|{
return|return
name|Root
condition|?
name|Root
operator|->
name|contains
argument_list|(
name|K
argument_list|)
else|:
name|false
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|ImmutableMap
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|Root
operator|&&
name|RHS
operator|.
name|Root
operator|?
name|Root
operator|->
name|isEqual
argument_list|(
operator|*
name|RHS
operator|.
name|Root
argument_list|)
operator|:
name|Root
operator|==
name|RHS
operator|.
name|Root
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|ImmutableMap
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|Root
operator|&&
name|RHS
operator|.
name|Root
operator|?
name|Root
operator|->
name|isNotEqual
argument_list|(
operator|*
name|RHS
operator|.
name|Root
argument_list|)
operator|:
name|Root
operator|!=
name|RHS
operator|.
name|Root
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|TreeTy
operator|*
name|getRoot
argument_list|()
specifier|const
block|{
if|if
condition|(
name|Root
condition|)
block|{
name|Root
operator|->
name|retain
argument_list|()
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|Root
return|;
end_return

begin_expr_stmt
unit|}    TreeTy
operator|*
name|getRootWithoutRetain
argument_list|()
specifier|const
block|{
return|return
name|Root
return|;
block|}
end_expr_stmt

begin_function
name|void
name|manualRetain
parameter_list|()
block|{
if|if
condition|(
name|Root
condition|)
name|Root
operator|->
name|retain
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
name|void
name|manualRelease
parameter_list|()
block|{
if|if
condition|(
name|Root
condition|)
name|Root
operator|->
name|release
argument_list|()
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|bool
name|isEmpty
argument_list|()
specifier|const
block|{
return|return
operator|!
name|Root
return|;
block|}
end_expr_stmt

begin_comment
comment|//===--------------------------------------------------===//
end_comment

begin_comment
comment|// Foreach - A limited form of map iteration.
end_comment

begin_comment
comment|//===--------------------------------------------------===//
end_comment

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|template
operator|<
name|typename
name|Callback
operator|>
expr|struct
name|CBWrapper
block|{
name|Callback
name|C
block|;
name|void
name|operator
argument_list|()
operator|(
name|value_type_ref
name|V
operator|)
block|{
name|C
argument_list|(
name|V
operator|.
name|first
argument_list|,
name|V
operator|.
name|second
argument_list|)
block|; }
block|}
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|Callback
operator|>
expr|struct
name|CBWrapperRef
block|{
name|Callback
operator|&
name|C
block|;
name|CBWrapperRef
argument_list|(
name|Callback
operator|&
name|c
argument_list|)
operator|:
name|C
argument_list|(
argument|c
argument_list|)
block|{}
name|void
name|operator
argument_list|()
operator|(
name|value_type_ref
name|V
operator|)
block|{
name|C
argument_list|(
name|V
operator|.
name|first
argument_list|,
name|V
operator|.
name|second
argument_list|)
block|; }
block|}
expr_stmt|;
end_expr_stmt

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|template
operator|<
name|typename
name|Callback
operator|>
name|void
name|foreach
argument_list|(
argument|Callback& C
argument_list|)
block|{
if|if
condition|(
name|Root
condition|)
block|{
name|CBWrapperRef
operator|<
name|Callback
operator|>
name|CB
argument_list|(
name|C
argument_list|)
expr_stmt|;
name|Root
operator|->
name|foreach
argument_list|(
name|CB
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|Callback
operator|>
name|void
name|foreach
argument_list|()
block|{
if|if
condition|(
name|Root
condition|)
block|{
name|CBWrapper
operator|<
name|Callback
operator|>
name|CB
expr_stmt|;
name|Root
operator|->
name|foreach
argument_list|(
name|CB
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_comment
unit|}
comment|//===--------------------------------------------------===//
end_comment

begin_comment
comment|// For testing.
end_comment

begin_comment
comment|//===--------------------------------------------------===//
end_comment

begin_macro
unit|void
name|verify
argument_list|()
end_macro

begin_expr_stmt
specifier|const
block|{
if|if
condition|(
name|Root
condition|)
name|Root
operator|->
name|verify
argument_list|()
expr_stmt|;
block|}
end_expr_stmt

begin_comment
comment|//===--------------------------------------------------===//
end_comment

begin_comment
comment|// Iterators.
end_comment

begin_comment
comment|//===--------------------------------------------------===//
end_comment

begin_decl_stmt
name|class
name|iterator
range|:
name|public
name|ImutAVLValueIterator
operator|<
name|ImmutableMap
operator|>
block|{
name|iterator
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|iterator
argument_list|(
name|TreeTy
operator|*
name|Tree
argument_list|)
operator|:
name|iterator
operator|::
name|ImutAVLValueIterator
argument_list|(
argument|Tree
argument_list|)
block|{}
name|friend
name|class
name|ImmutableMap
block|;
name|public
operator|:
name|key_type_ref
name|getKey
argument_list|()
specifier|const
block|{
return|return
operator|(
operator|*
name|this
operator|)
operator|->
name|first
return|;
block|}
name|data_type_ref
name|getData
argument_list|()
specifier|const
block|{
return|return
operator|(
operator|*
name|this
operator|)
operator|->
name|second
return|;
block|}
expr|}
block|;
name|iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|iterator
argument_list|(
name|Root
argument_list|)
return|;
block|}
name|iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|iterator
argument_list|()
return|;
block|}
name|data_type
operator|*
name|lookup
argument_list|(
argument|key_type_ref K
argument_list|)
specifier|const
block|{
if|if
condition|(
name|Root
condition|)
block|{
name|TreeTy
modifier|*
name|T
init|=
name|Root
operator|->
name|find
argument_list|(
name|K
argument_list|)
decl_stmt|;
if|if
condition|(
name|T
condition|)
return|return
operator|&
name|T
operator|->
name|getValue
argument_list|()
operator|.
name|second
return|;
block|}
return|return
name|nullptr
return|;
block|}
comment|/// getMaxElement - Returns the<key,value> pair in the ImmutableMap for
comment|///  which key is the highest in the ordering of keys in the map.  This
comment|///  method returns NULL if the map is empty.
name|value_type
operator|*
name|getMaxElement
argument_list|()
specifier|const
block|{
return|return
name|Root
operator|?
operator|&
operator|(
name|Root
operator|->
name|getMaxElement
argument_list|()
operator|->
name|getValue
argument_list|()
operator|)
operator|:
name|nullptr
return|;
block|}
comment|//===--------------------------------------------------===//
comment|// Utility methods.
comment|//===--------------------------------------------------===//
name|unsigned
name|getHeight
argument_list|()
specifier|const
block|{
return|return
name|Root
condition|?
name|Root
operator|->
name|getHeight
argument_list|()
else|:
literal|0
return|;
block|}
specifier|static
specifier|inline
name|void
name|Profile
argument_list|(
argument|FoldingSetNodeID& ID
argument_list|,
argument|const ImmutableMap& M
argument_list|)
block|{
name|ID
operator|.
name|AddPointer
argument_list|(
name|M
operator|.
name|Root
argument_list|)
block|;   }
specifier|inline
name|void
name|Profile
argument_list|(
argument|FoldingSetNodeID& ID
argument_list|)
specifier|const
block|{
return|return
name|Profile
argument_list|(
name|ID
argument_list|,
operator|*
name|this
argument_list|)
return|;
block|}
expr|}
block|;
comment|// NOTE: This will possibly become the new implementation of ImmutableMap some day.
name|template
operator|<
name|typename
name|KeyT
block|,
name|typename
name|ValT
block|,
name|typename
name|ValInfo
operator|=
name|ImutKeyValueInfo
operator|<
name|KeyT
block|,
name|ValT
operator|>
expr|>
name|class
name|ImmutableMapRef
block|{
name|public
operator|:
typedef|typedef
name|typename
name|ValInfo
operator|::
name|value_type
name|value_type
expr_stmt|;
typedef|typedef
name|typename
name|ValInfo
operator|::
name|value_type_ref
name|value_type_ref
expr_stmt|;
end_decl_stmt

begin_typedef
typedef|typedef
name|typename
name|ValInfo
operator|::
name|key_type
name|key_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|ValInfo
operator|::
name|key_type_ref
name|key_type_ref
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|ValInfo
operator|::
name|data_type
name|data_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|ValInfo
operator|::
name|data_type_ref
name|data_type_ref
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|ImutAVLTree
operator|<
name|ValInfo
operator|>
name|TreeTy
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|TreeTy
operator|::
name|Factory
name|FactoryTy
expr_stmt|;
end_typedef

begin_label
name|protected
label|:
end_label

begin_decl_stmt
name|TreeTy
modifier|*
name|Root
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|FactoryTy
modifier|*
name|Factory
decl_stmt|;
end_decl_stmt

begin_label
name|public
label|:
end_label

begin_comment
comment|/// Constructs a map from a pointer to a tree root.  In general one
end_comment

begin_comment
comment|/// should use a Factory object to create maps instead of directly
end_comment

begin_comment
comment|/// invoking the constructor, but there are cases where make this
end_comment

begin_comment
comment|/// constructor public is useful.
end_comment

begin_macro
name|explicit
end_macro

begin_expr_stmt
name|ImmutableMapRef
argument_list|(
specifier|const
name|TreeTy
operator|*
name|R
argument_list|,
name|FactoryTy
operator|*
name|F
argument_list|)
operator|:
name|Root
argument_list|(
name|const_cast
operator|<
name|TreeTy
operator|*
operator|>
operator|(
name|R
operator|)
argument_list|)
operator|,
name|Factory
argument_list|(
argument|F
argument_list|)
block|{
if|if
condition|(
name|Root
condition|)
block|{
name|Root
operator|->
name|retain
argument_list|()
expr_stmt|;
block|}
end_expr_stmt

begin_macro
unit|}    explicit
name|ImmutableMapRef
argument_list|(
argument|const ImmutableMap<KeyT
argument_list|,
argument|ValT>&X
argument_list|,
argument|typename ImmutableMap<KeyT
argument_list|,
argument|ValT>::Factory&F
argument_list|)
end_macro

begin_expr_stmt
unit|:
name|Root
argument_list|(
name|X
operator|.
name|getRootWithoutRetain
argument_list|()
argument_list|)
operator|,
name|Factory
argument_list|(
argument|F.getTreeFactory()
argument_list|)
block|{
if|if
condition|(
name|Root
condition|)
block|{
name|Root
operator|->
name|retain
argument_list|()
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}      ImmutableMapRef
operator|(
specifier|const
name|ImmutableMapRef
operator|&
name|X
operator|)
operator|:
name|Root
argument_list|(
name|X
operator|.
name|Root
argument_list|)
operator|,
name|Factory
argument_list|(
argument|X.Factory
argument_list|)
block|{
if|if
condition|(
name|Root
condition|)
block|{
name|Root
operator|->
name|retain
argument_list|()
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}    ImmutableMapRef
operator|&
name|operator
operator|=
operator|(
specifier|const
name|ImmutableMapRef
operator|&
name|X
operator|)
block|{
if|if
condition|(
name|Root
operator|!=
name|X
operator|.
name|Root
condition|)
block|{
if|if
condition|(
name|X
operator|.
name|Root
condition|)
name|X
operator|.
name|Root
operator|->
name|retain
argument_list|()
expr_stmt|;
if|if
condition|(
name|Root
condition|)
name|Root
operator|->
name|release
argument_list|()
expr_stmt|;
name|Root
operator|=
name|X
operator|.
name|Root
expr_stmt|;
name|Factory
operator|=
name|X
operator|.
name|Factory
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_macro
unit|}    ~
name|ImmutableMapRef
argument_list|()
end_macro

begin_block
block|{
if|if
condition|(
name|Root
condition|)
name|Root
operator|->
name|release
argument_list|()
expr_stmt|;
block|}
end_block

begin_function
specifier|static
specifier|inline
name|ImmutableMapRef
name|getEmptyMap
parameter_list|(
name|FactoryTy
modifier|*
name|F
parameter_list|)
block|{
return|return
name|ImmutableMapRef
argument_list|(
literal|0
argument_list|,
name|F
argument_list|)
return|;
block|}
end_function

begin_function
name|void
name|manualRetain
parameter_list|()
block|{
if|if
condition|(
name|Root
condition|)
name|Root
operator|->
name|retain
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
name|void
name|manualRelease
parameter_list|()
block|{
if|if
condition|(
name|Root
condition|)
name|Root
operator|->
name|release
argument_list|()
expr_stmt|;
block|}
end_function

begin_decl_stmt
name|ImmutableMapRef
name|add
argument_list|(
name|key_type_ref
name|K
argument_list|,
name|data_type_ref
name|D
argument_list|)
decl|const
block|{
name|TreeTy
modifier|*
name|NewT
init|=
name|Factory
operator|->
name|add
argument_list|(
name|Root
argument_list|,
name|std
operator|::
name|pair
operator|<
name|key_type
argument_list|,
name|data_type
operator|>
operator|(
name|K
expr|,
name|D
operator|)
argument_list|)
decl_stmt|;
return|return
name|ImmutableMapRef
argument_list|(
name|NewT
argument_list|,
name|Factory
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|ImmutableMapRef
name|remove
argument_list|(
name|key_type_ref
name|K
argument_list|)
decl|const
block|{
name|TreeTy
modifier|*
name|NewT
init|=
name|Factory
operator|->
name|remove
argument_list|(
name|Root
argument_list|,
name|K
argument_list|)
decl_stmt|;
return|return
name|ImmutableMapRef
argument_list|(
name|NewT
argument_list|,
name|Factory
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|bool
name|contains
argument_list|(
name|key_type_ref
name|K
argument_list|)
decl|const
block|{
return|return
name|Root
condition|?
name|Root
operator|->
name|contains
argument_list|(
name|K
argument_list|)
else|:
name|false
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|ImmutableMap
operator|<
name|KeyT
operator|,
name|ValT
operator|>
name|asImmutableMap
argument_list|()
specifier|const
block|{
return|return
name|ImmutableMap
operator|<
name|KeyT
operator|,
name|ValT
operator|>
operator|(
name|Factory
operator|->
name|getCanonicalTree
argument_list|(
name|Root
argument_list|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|ImmutableMapRef
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|Root
operator|&&
name|RHS
operator|.
name|Root
operator|?
name|Root
operator|->
name|isEqual
argument_list|(
operator|*
name|RHS
operator|.
name|Root
argument_list|)
operator|:
name|Root
operator|==
name|RHS
operator|.
name|Root
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|ImmutableMapRef
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|Root
operator|&&
name|RHS
operator|.
name|Root
operator|?
name|Root
operator|->
name|isNotEqual
argument_list|(
operator|*
name|RHS
operator|.
name|Root
argument_list|)
operator|:
name|Root
operator|!=
name|RHS
operator|.
name|Root
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isEmpty
argument_list|()
specifier|const
block|{
return|return
operator|!
name|Root
return|;
block|}
end_expr_stmt

begin_comment
comment|//===--------------------------------------------------===//
end_comment

begin_comment
comment|// For testing.
end_comment

begin_comment
comment|//===--------------------------------------------------===//
end_comment

begin_expr_stmt
name|void
name|verify
argument_list|()
specifier|const
block|{
if|if
condition|(
name|Root
condition|)
name|Root
operator|->
name|verify
argument_list|()
expr_stmt|;
block|}
end_expr_stmt

begin_comment
comment|//===--------------------------------------------------===//
end_comment

begin_comment
comment|// Iterators.
end_comment

begin_comment
comment|//===--------------------------------------------------===//
end_comment

begin_decl_stmt
name|class
name|iterator
range|:
name|public
name|ImutAVLValueIterator
operator|<
name|ImmutableMapRef
operator|>
block|{
name|iterator
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|iterator
argument_list|(
name|TreeTy
operator|*
name|Tree
argument_list|)
operator|:
name|iterator
operator|::
name|ImutAVLValueIterator
argument_list|(
argument|Tree
argument_list|)
block|{}
name|friend
name|class
name|ImmutableMapRef
block|;
name|public
operator|:
name|key_type_ref
name|getKey
argument_list|()
specifier|const
block|{
return|return
operator|(
operator|*
name|this
operator|)
operator|->
name|first
return|;
block|}
name|data_type_ref
name|getData
argument_list|()
specifier|const
block|{
return|return
operator|(
operator|*
name|this
operator|)
operator|->
name|second
return|;
block|}
expr|}
block|;
name|iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|iterator
argument_list|(
name|Root
argument_list|)
return|;
block|}
name|iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|iterator
argument_list|()
return|;
block|}
name|data_type
operator|*
name|lookup
argument_list|(
argument|key_type_ref K
argument_list|)
specifier|const
block|{
if|if
condition|(
name|Root
condition|)
block|{
name|TreeTy
modifier|*
name|T
init|=
name|Root
operator|->
name|find
argument_list|(
name|K
argument_list|)
decl_stmt|;
if|if
condition|(
name|T
condition|)
return|return
operator|&
name|T
operator|->
name|getValue
argument_list|()
operator|.
name|second
return|;
block|}
return|return
literal|0
return|;
block|}
comment|/// getMaxElement - Returns the<key,value> pair in the ImmutableMap for
comment|///  which key is the highest in the ordering of keys in the map.  This
comment|///  method returns NULL if the map is empty.
name|value_type
operator|*
name|getMaxElement
argument_list|()
specifier|const
block|{
return|return
name|Root
operator|?
operator|&
operator|(
name|Root
operator|->
name|getMaxElement
argument_list|()
operator|->
name|getValue
argument_list|()
operator|)
operator|:
literal|0
return|;
block|}
comment|//===--------------------------------------------------===//
comment|// Utility methods.
comment|//===--------------------------------------------------===//
name|unsigned
name|getHeight
argument_list|()
specifier|const
block|{
return|return
name|Root
condition|?
name|Root
operator|->
name|getHeight
argument_list|()
else|:
literal|0
return|;
block|}
specifier|static
specifier|inline
name|void
name|Profile
argument_list|(
argument|FoldingSetNodeID& ID
argument_list|,
argument|const ImmutableMapRef&M
argument_list|)
block|{
name|ID
operator|.
name|AddPointer
argument_list|(
name|M
operator|.
name|Root
argument_list|)
block|;   }
specifier|inline
name|void
name|Profile
argument_list|(
argument|FoldingSetNodeID& ID
argument_list|)
specifier|const
block|{
return|return
name|Profile
argument_list|(
name|ID
argument_list|,
operator|*
name|this
argument_list|)
return|;
block|}
expr|}
block|;    }
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

