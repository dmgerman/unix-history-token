begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- llvm/ADT/APSInt.h - Arbitrary Precision Signed Int -----*- C++ -*--===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file implements the APSInt class, which is a simple class that
end_comment

begin_comment
comment|// represents an arbitrary sized integer that knows its signedness.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_ADT_APSINT_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_ADT_APSINT_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/APInt.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|APSInt
range|:
name|public
name|APInt
block|{
name|bool
name|IsUnsigned
block|;
name|public
operator|:
comment|/// Default constructor that creates an uninitialized APInt.
name|explicit
name|APSInt
argument_list|()
operator|:
name|IsUnsigned
argument_list|(
argument|false
argument_list|)
block|{}
comment|/// APSInt ctor - Create an APSInt with the specified width, default to
comment|/// unsigned.
name|explicit
name|APSInt
argument_list|(
argument|uint32_t BitWidth
argument_list|,
argument|bool isUnsigned = true
argument_list|)
operator|:
name|APInt
argument_list|(
name|BitWidth
argument_list|,
literal|0
argument_list|)
block|,
name|IsUnsigned
argument_list|(
argument|isUnsigned
argument_list|)
block|{}
name|explicit
name|APSInt
argument_list|(
argument|const APInt&I
argument_list|,
argument|bool isUnsigned = true
argument_list|)
operator|:
name|APInt
argument_list|(
name|I
argument_list|)
block|,
name|IsUnsigned
argument_list|(
argument|isUnsigned
argument_list|)
block|{}
name|APSInt
operator|&
name|operator
operator|=
operator|(
specifier|const
name|APSInt
operator|&
name|RHS
operator|)
block|{
name|APInt
operator|::
name|operator
operator|=
operator|(
name|RHS
operator|)
block|;
name|IsUnsigned
operator|=
name|RHS
operator|.
name|IsUnsigned
block|;
return|return
operator|*
name|this
return|;
block|}
name|APSInt
operator|&
name|operator
operator|=
operator|(
specifier|const
name|APInt
operator|&
name|RHS
operator|)
block|{
comment|// Retain our current sign.
name|APInt
operator|::
name|operator
operator|=
operator|(
name|RHS
operator|)
block|;
return|return
operator|*
name|this
return|;
block|}
name|APSInt
operator|&
name|operator
operator|=
operator|(
name|uint64_t
name|RHS
operator|)
block|{
comment|// Retain our current sign.
name|APInt
operator|::
name|operator
operator|=
operator|(
name|RHS
operator|)
block|;
return|return
operator|*
name|this
return|;
block|}
comment|// Query sign information.
name|bool
name|isSigned
argument_list|()
specifier|const
block|{
return|return
operator|!
name|IsUnsigned
return|;
block|}
name|bool
name|isUnsigned
argument_list|()
specifier|const
block|{
return|return
name|IsUnsigned
return|;
block|}
name|void
name|setIsUnsigned
argument_list|(
argument|bool Val
argument_list|)
block|{
name|IsUnsigned
operator|=
name|Val
block|; }
name|void
name|setIsSigned
argument_list|(
argument|bool Val
argument_list|)
block|{
name|IsUnsigned
operator|=
operator|!
name|Val
block|; }
comment|/// toString - Append this APSInt to the specified SmallString.
name|void
name|toString
argument_list|(
argument|SmallVectorImpl<char>&Str
argument_list|,
argument|unsigned Radix =
literal|10
argument_list|)
specifier|const
block|{
name|APInt
operator|::
name|toString
argument_list|(
name|Str
argument_list|,
name|Radix
argument_list|,
name|isSigned
argument_list|()
argument_list|)
block|;   }
comment|/// toString - Converts an APInt to a std::string.  This is an inefficient
comment|/// method, your should prefer passing in a SmallString instead.
name|std
operator|::
name|string
name|toString
argument_list|(
argument|unsigned Radix
argument_list|)
specifier|const
block|{
return|return
name|APInt
operator|::
name|toString
argument_list|(
name|Radix
argument_list|,
name|isSigned
argument_list|()
argument_list|)
return|;
block|}
name|using
name|APInt
operator|::
name|toString
block|;
name|APSInt
name|trunc
argument_list|(
argument|uint32_t width
argument_list|)
specifier|const
block|{
return|return
name|APSInt
argument_list|(
name|APInt
operator|::
name|trunc
argument_list|(
name|width
argument_list|)
argument_list|,
name|IsUnsigned
argument_list|)
return|;
block|}
name|APSInt
name|extend
argument_list|(
argument|uint32_t width
argument_list|)
specifier|const
block|{
if|if
condition|(
name|IsUnsigned
condition|)
return|return
name|APSInt
argument_list|(
name|zext
argument_list|(
name|width
argument_list|)
argument_list|,
name|IsUnsigned
argument_list|)
return|;
else|else
return|return
name|APSInt
argument_list|(
name|sext
argument_list|(
name|width
argument_list|)
argument_list|,
name|IsUnsigned
argument_list|)
return|;
block|}
name|APSInt
name|extOrTrunc
argument_list|(
argument|uint32_t width
argument_list|)
specifier|const
block|{
if|if
condition|(
name|IsUnsigned
condition|)
return|return
name|APSInt
argument_list|(
name|zextOrTrunc
argument_list|(
name|width
argument_list|)
argument_list|,
name|IsUnsigned
argument_list|)
return|;
else|else
return|return
name|APSInt
argument_list|(
name|sextOrTrunc
argument_list|(
name|width
argument_list|)
argument_list|,
name|IsUnsigned
argument_list|)
return|;
block|}
specifier|const
name|APSInt
operator|&
name|operator
operator|%=
operator|(
specifier|const
name|APSInt
operator|&
name|RHS
operator|)
block|{
name|assert
argument_list|(
name|IsUnsigned
operator|==
name|RHS
operator|.
name|IsUnsigned
operator|&&
literal|"Signedness mismatch!"
argument_list|)
block|;
if|if
condition|(
name|IsUnsigned
condition|)
operator|*
name|this
operator|=
name|urem
argument_list|(
name|RHS
argument_list|)
expr_stmt|;
else|else
operator|*
name|this
operator|=
name|srem
argument_list|(
name|RHS
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
specifier|const
name|APSInt
operator|&
name|operator
operator|/=
operator|(
specifier|const
name|APSInt
operator|&
name|RHS
operator|)
block|{
name|assert
argument_list|(
name|IsUnsigned
operator|==
name|RHS
operator|.
name|IsUnsigned
operator|&&
literal|"Signedness mismatch!"
argument_list|)
block|;
if|if
condition|(
name|IsUnsigned
condition|)
operator|*
name|this
operator|=
name|udiv
argument_list|(
name|RHS
argument_list|)
expr_stmt|;
else|else
operator|*
name|this
operator|=
name|sdiv
argument_list|(
name|RHS
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|APSInt
name|operator
operator|%
operator|(
specifier|const
name|APSInt
operator|&
name|RHS
operator|)
specifier|const
block|{
name|assert
argument_list|(
name|IsUnsigned
operator|==
name|RHS
operator|.
name|IsUnsigned
operator|&&
literal|"Signedness mismatch!"
argument_list|)
block|;
return|return
name|IsUnsigned
condition|?
name|APSInt
argument_list|(
name|urem
argument_list|(
name|RHS
argument_list|)
argument_list|,
name|true
argument_list|)
else|:
name|APSInt
argument_list|(
name|srem
argument_list|(
name|RHS
argument_list|)
argument_list|,
name|false
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|APSInt
name|operator
operator|/
operator|(
specifier|const
name|APSInt
operator|&
name|RHS
operator|)
specifier|const
block|{
name|assert
argument_list|(
name|IsUnsigned
operator|==
name|RHS
operator|.
name|IsUnsigned
operator|&&
literal|"Signedness mismatch!"
argument_list|)
block|;
return|return
name|IsUnsigned
condition|?
name|APSInt
argument_list|(
name|udiv
argument_list|(
name|RHS
argument_list|)
argument_list|,
name|true
argument_list|)
else|:
name|APSInt
argument_list|(
name|sdiv
argument_list|(
name|RHS
argument_list|)
argument_list|,
name|false
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|APSInt
name|operator
operator|>>
operator|(
name|unsigned
name|Amt
operator|)
specifier|const
block|{
return|return
name|IsUnsigned
operator|?
name|APSInt
argument_list|(
name|lshr
argument_list|(
name|Amt
argument_list|)
argument_list|,
name|true
argument_list|)
operator|:
name|APSInt
argument_list|(
name|ashr
argument_list|(
name|Amt
argument_list|)
argument_list|,
name|false
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|APSInt
operator|&
name|operator
operator|>>=
operator|(
name|unsigned
name|Amt
operator|)
block|{
operator|*
name|this
operator|=
operator|*
name|this
operator|>>
name|Amt
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|APSInt
operator|&
name|RHS
operator|)
specifier|const
block|{
name|assert
argument_list|(
name|IsUnsigned
operator|==
name|RHS
operator|.
name|IsUnsigned
operator|&&
literal|"Signedness mismatch!"
argument_list|)
block|;
return|return
name|IsUnsigned
condition|?
name|ult
argument_list|(
name|RHS
argument_list|)
else|:
name|slt
argument_list|(
name|RHS
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|>
operator|(
specifier|const
name|APSInt
operator|&
name|RHS
operator|)
specifier|const
block|{
name|assert
argument_list|(
name|IsUnsigned
operator|==
name|RHS
operator|.
name|IsUnsigned
operator|&&
literal|"Signedness mismatch!"
argument_list|)
block|;
return|return
name|IsUnsigned
condition|?
name|ugt
argument_list|(
name|RHS
argument_list|)
else|:
name|sgt
argument_list|(
name|RHS
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|APSInt
operator|&
name|RHS
operator|)
specifier|const
block|{
name|assert
argument_list|(
name|IsUnsigned
operator|==
name|RHS
operator|.
name|IsUnsigned
operator|&&
literal|"Signedness mismatch!"
argument_list|)
block|;
return|return
name|IsUnsigned
condition|?
name|ule
argument_list|(
name|RHS
argument_list|)
else|:
name|sle
argument_list|(
name|RHS
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|APSInt
operator|&
name|RHS
operator|)
specifier|const
block|{
name|assert
argument_list|(
name|IsUnsigned
operator|==
name|RHS
operator|.
name|IsUnsigned
operator|&&
literal|"Signedness mismatch!"
argument_list|)
block|;
return|return
name|IsUnsigned
condition|?
name|uge
argument_list|(
name|RHS
argument_list|)
else|:
name|sge
argument_list|(
name|RHS
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|APSInt
operator|&
name|RHS
operator|)
specifier|const
block|{
name|assert
argument_list|(
name|IsUnsigned
operator|==
name|RHS
operator|.
name|IsUnsigned
operator|&&
literal|"Signedness mismatch!"
argument_list|)
block|;
return|return
name|eq
argument_list|(
name|RHS
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|==
operator|(
name|int64_t
name|RHS
operator|)
specifier|const
block|{
return|return
name|isSameValue
argument_list|(
operator|*
name|this
argument_list|,
name|APSInt
argument_list|(
name|APInt
argument_list|(
literal|64
argument_list|,
name|RHS
argument_list|)
argument_list|,
name|true
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|APSInt
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|(
operator|*
name|this
operator|)
operator|==
name|RHS
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
name|int64_t
name|RHS
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|(
operator|*
name|this
operator|)
operator|==
name|RHS
operator|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// The remaining operators just wrap the logic of APInt, but retain the
end_comment

begin_comment
comment|// signedness information.
end_comment

begin_expr_stmt
name|APSInt
name|operator
operator|<<
operator|(
name|unsigned
name|Bits
operator|)
specifier|const
block|{
return|return
name|APSInt
argument_list|(
name|static_cast
operator|<
specifier|const
name|APInt
operator|&
operator|>
operator|(
operator|*
name|this
operator|)
operator|<<
name|Bits
argument_list|,
name|IsUnsigned
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|APSInt
operator|&
name|operator
operator|<<=
operator|(
name|unsigned
name|Amt
operator|)
block|{
operator|*
name|this
operator|=
operator|*
name|this
operator|<<
name|Amt
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|APSInt
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
operator|(
name|static_cast
operator|<
name|APInt
operator|&
operator|>
operator|(
operator|*
name|this
operator|)
operator|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|APSInt
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
operator|--
operator|(
name|static_cast
operator|<
name|APInt
operator|&
operator|>
operator|(
operator|*
name|this
operator|)
operator|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|APSInt
name|operator
operator|++
operator|(
name|int
operator|)
block|{
return|return
name|APSInt
argument_list|(
operator|++
name|static_cast
operator|<
name|APInt
operator|&
operator|>
operator|(
operator|*
name|this
operator|)
argument_list|,
name|IsUnsigned
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|APSInt
name|operator
operator|--
operator|(
name|int
operator|)
block|{
return|return
name|APSInt
argument_list|(
operator|--
name|static_cast
operator|<
name|APInt
operator|&
operator|>
operator|(
operator|*
name|this
operator|)
argument_list|,
name|IsUnsigned
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|APSInt
name|operator
operator|-
operator|(
operator|)
specifier|const
block|{
return|return
name|APSInt
argument_list|(
operator|-
name|static_cast
operator|<
specifier|const
name|APInt
operator|&
operator|>
operator|(
operator|*
name|this
operator|)
argument_list|,
name|IsUnsigned
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|APSInt
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|APSInt
operator|&
name|RHS
operator|)
block|{
name|assert
argument_list|(
name|IsUnsigned
operator|==
name|RHS
operator|.
name|IsUnsigned
operator|&&
literal|"Signedness mismatch!"
argument_list|)
block|;
name|static_cast
operator|<
name|APInt
operator|&
operator|>
operator|(
operator|*
name|this
operator|)
operator|+=
name|RHS
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|APSInt
operator|&
name|operator
operator|-=
operator|(
specifier|const
name|APSInt
operator|&
name|RHS
operator|)
block|{
name|assert
argument_list|(
name|IsUnsigned
operator|==
name|RHS
operator|.
name|IsUnsigned
operator|&&
literal|"Signedness mismatch!"
argument_list|)
block|;
name|static_cast
operator|<
name|APInt
operator|&
operator|>
operator|(
operator|*
name|this
operator|)
operator|-=
name|RHS
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|APSInt
operator|&
name|operator
operator|*=
operator|(
specifier|const
name|APSInt
operator|&
name|RHS
operator|)
block|{
name|assert
argument_list|(
name|IsUnsigned
operator|==
name|RHS
operator|.
name|IsUnsigned
operator|&&
literal|"Signedness mismatch!"
argument_list|)
block|;
name|static_cast
operator|<
name|APInt
operator|&
operator|>
operator|(
operator|*
name|this
operator|)
operator|*=
name|RHS
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|APSInt
operator|&
name|operator
operator|&=
operator|(
specifier|const
name|APSInt
operator|&
name|RHS
operator|)
block|{
name|assert
argument_list|(
name|IsUnsigned
operator|==
name|RHS
operator|.
name|IsUnsigned
operator|&&
literal|"Signedness mismatch!"
argument_list|)
block|;
name|static_cast
operator|<
name|APInt
operator|&
operator|>
operator|(
operator|*
name|this
operator|)
operator|&=
name|RHS
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|APSInt
operator|&
name|operator
operator||=
operator|(
specifier|const
name|APSInt
operator|&
name|RHS
operator|)
block|{
name|assert
argument_list|(
name|IsUnsigned
operator|==
name|RHS
operator|.
name|IsUnsigned
operator|&&
literal|"Signedness mismatch!"
argument_list|)
block|;
name|static_cast
operator|<
name|APInt
operator|&
operator|>
operator|(
operator|*
name|this
operator|)
operator||=
name|RHS
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|APSInt
operator|&
name|operator
operator|^=
operator|(
specifier|const
name|APSInt
operator|&
name|RHS
operator|)
block|{
name|assert
argument_list|(
name|IsUnsigned
operator|==
name|RHS
operator|.
name|IsUnsigned
operator|&&
literal|"Signedness mismatch!"
argument_list|)
block|;
name|static_cast
operator|<
name|APInt
operator|&
operator|>
operator|(
operator|*
name|this
operator|)
operator|^=
name|RHS
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|APSInt
name|operator
modifier|&
argument_list|(
specifier|const
name|APSInt
operator|&
name|RHS
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|IsUnsigned
operator|==
name|RHS
operator|.
name|IsUnsigned
operator|&&
literal|"Signedness mismatch!"
argument_list|)
expr_stmt|;
return|return
name|APSInt
argument_list|(
name|static_cast
operator|<
specifier|const
name|APInt
operator|&
operator|>
operator|(
operator|*
name|this
operator|)
operator|&
name|RHS
argument_list|,
name|IsUnsigned
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|APSInt
name|And
argument_list|(
specifier|const
name|APSInt
operator|&
name|RHS
argument_list|)
decl|const
block|{
return|return
name|this
operator|->
name|operator
operator|&
operator|(
name|RHS
operator|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|APSInt
name|operator
operator||
operator|(
specifier|const
name|APSInt
operator|&
name|RHS
operator|)
specifier|const
block|{
name|assert
argument_list|(
name|IsUnsigned
operator|==
name|RHS
operator|.
name|IsUnsigned
operator|&&
literal|"Signedness mismatch!"
argument_list|)
block|;
return|return
name|APSInt
argument_list|(
name|static_cast
operator|<
specifier|const
name|APInt
operator|&
operator|>
operator|(
operator|*
name|this
operator|)
operator||
name|RHS
argument_list|,
name|IsUnsigned
argument_list|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|APSInt
name|Or
argument_list|(
specifier|const
name|APSInt
operator|&
name|RHS
argument_list|)
decl|const
block|{
return|return
name|this
operator|->
name|operator
operator||
operator|(
name|RHS
operator|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|APSInt
name|operator
modifier|^
argument_list|(
specifier|const
name|APSInt
operator|&
name|RHS
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|IsUnsigned
operator|==
name|RHS
operator|.
name|IsUnsigned
operator|&&
literal|"Signedness mismatch!"
argument_list|)
expr_stmt|;
return|return
name|APSInt
argument_list|(
name|static_cast
operator|<
specifier|const
name|APInt
operator|&
operator|>
operator|(
operator|*
name|this
operator|)
operator|^
name|RHS
argument_list|,
name|IsUnsigned
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|APSInt
name|Xor
argument_list|(
specifier|const
name|APSInt
operator|&
name|RHS
argument_list|)
decl|const
block|{
return|return
name|this
operator|->
name|operator
operator|^
operator|(
name|RHS
operator|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|APSInt
name|operator
modifier|*
argument_list|(
specifier|const
name|APSInt
operator|&
name|RHS
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|IsUnsigned
operator|==
name|RHS
operator|.
name|IsUnsigned
operator|&&
literal|"Signedness mismatch!"
argument_list|)
expr_stmt|;
return|return
name|APSInt
argument_list|(
name|static_cast
operator|<
specifier|const
name|APInt
operator|&
operator|>
operator|(
operator|*
name|this
operator|)
operator|*
name|RHS
argument_list|,
name|IsUnsigned
argument_list|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|APSInt
name|operator
operator|+
operator|(
specifier|const
name|APSInt
operator|&
name|RHS
operator|)
specifier|const
block|{
name|assert
argument_list|(
name|IsUnsigned
operator|==
name|RHS
operator|.
name|IsUnsigned
operator|&&
literal|"Signedness mismatch!"
argument_list|)
block|;
return|return
name|APSInt
argument_list|(
name|static_cast
operator|<
specifier|const
name|APInt
operator|&
operator|>
operator|(
operator|*
name|this
operator|)
operator|+
name|RHS
argument_list|,
name|IsUnsigned
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|APSInt
name|operator
operator|-
operator|(
specifier|const
name|APSInt
operator|&
name|RHS
operator|)
specifier|const
block|{
name|assert
argument_list|(
name|IsUnsigned
operator|==
name|RHS
operator|.
name|IsUnsigned
operator|&&
literal|"Signedness mismatch!"
argument_list|)
block|;
return|return
name|APSInt
argument_list|(
name|static_cast
operator|<
specifier|const
name|APInt
operator|&
operator|>
operator|(
operator|*
name|this
operator|)
operator|-
name|RHS
argument_list|,
name|IsUnsigned
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|APSInt
name|operator
operator|~
operator|(
operator|)
specifier|const
block|{
return|return
name|APSInt
argument_list|(
operator|~
name|static_cast
operator|<
specifier|const
name|APInt
operator|&
operator|>
operator|(
operator|*
name|this
operator|)
argument_list|,
name|IsUnsigned
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/// getMaxValue - Return the APSInt representing the maximum integer value
end_comment

begin_comment
comment|///  with the given bit width and signedness.
end_comment

begin_function
specifier|static
name|APSInt
name|getMaxValue
parameter_list|(
name|uint32_t
name|numBits
parameter_list|,
name|bool
name|Unsigned
parameter_list|)
block|{
return|return
name|APSInt
argument_list|(
name|Unsigned
condition|?
name|APInt
operator|::
name|getMaxValue
argument_list|(
name|numBits
argument_list|)
else|:
name|APInt
operator|::
name|getSignedMaxValue
argument_list|(
name|numBits
argument_list|)
argument_list|,
name|Unsigned
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/// getMinValue - Return the APSInt representing the minimum integer value
end_comment

begin_comment
comment|///  with the given bit width and signedness.
end_comment

begin_function
specifier|static
name|APSInt
name|getMinValue
parameter_list|(
name|uint32_t
name|numBits
parameter_list|,
name|bool
name|Unsigned
parameter_list|)
block|{
return|return
name|APSInt
argument_list|(
name|Unsigned
condition|?
name|APInt
operator|::
name|getMinValue
argument_list|(
name|numBits
argument_list|)
else|:
name|APInt
operator|::
name|getSignedMinValue
argument_list|(
name|numBits
argument_list|)
argument_list|,
name|Unsigned
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/// \brief Determine if two APSInts have the same value, zero- or
end_comment

begin_comment
comment|/// sign-extending as needed.
end_comment

begin_function
specifier|static
name|bool
name|isSameValue
parameter_list|(
specifier|const
name|APSInt
modifier|&
name|I1
parameter_list|,
specifier|const
name|APSInt
modifier|&
name|I2
parameter_list|)
block|{
if|if
condition|(
name|I1
operator|.
name|getBitWidth
argument_list|()
operator|==
name|I2
operator|.
name|getBitWidth
argument_list|()
operator|&&
name|I1
operator|.
name|isSigned
argument_list|()
operator|==
name|I2
operator|.
name|isSigned
argument_list|()
condition|)
return|return
name|I1
operator|==
name|I2
return|;
comment|// Check for a bit-width mismatch.
if|if
condition|(
name|I1
operator|.
name|getBitWidth
argument_list|()
operator|>
name|I2
operator|.
name|getBitWidth
argument_list|()
condition|)
return|return
name|isSameValue
argument_list|(
name|I1
argument_list|,
name|I2
operator|.
name|extend
argument_list|(
name|I1
operator|.
name|getBitWidth
argument_list|()
argument_list|)
argument_list|)
return|;
elseif|else
if|if
condition|(
name|I2
operator|.
name|getBitWidth
argument_list|()
operator|>
name|I1
operator|.
name|getBitWidth
argument_list|()
condition|)
return|return
name|isSameValue
argument_list|(
name|I1
operator|.
name|extend
argument_list|(
name|I2
operator|.
name|getBitWidth
argument_list|()
argument_list|)
argument_list|,
name|I2
argument_list|)
return|;
comment|// We have a signedness mismatch. Turn the signed value into an unsigned
comment|// value.
if|if
condition|(
name|I1
operator|.
name|isSigned
argument_list|()
condition|)
block|{
if|if
condition|(
name|I1
operator|.
name|isNegative
argument_list|()
condition|)
return|return
name|false
return|;
return|return
name|APSInt
argument_list|(
name|I1
argument_list|,
name|true
argument_list|)
operator|==
name|I2
return|;
block|}
if|if
condition|(
name|I2
operator|.
name|isNegative
argument_list|()
condition|)
return|return
name|false
return|;
return|return
name|I1
operator|==
name|APSInt
argument_list|(
name|I2
argument_list|,
name|true
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/// Profile - Used to insert APSInt objects, or objects that contain APSInt
end_comment

begin_comment
comment|///  objects, into FoldingSets.
end_comment

begin_decl_stmt
name|void
name|Profile
argument_list|(
name|FoldingSetNodeID
operator|&
name|ID
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
specifier|inline
name|bool
name|operator
operator|==
operator|(
name|int64_t
name|V1
operator|,
specifier|const
name|APSInt
operator|&
name|V2
operator|)
block|{
return|return
name|V2
operator|==
name|V1
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
name|int64_t
name|V1
operator|,
specifier|const
name|APSInt
operator|&
name|V2
operator|)
block|{
return|return
name|V2
operator|!=
name|V1
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|raw_ostream
operator|&
name|operator
operator|<<
operator|(
name|raw_ostream
operator|&
name|OS
operator|,
specifier|const
name|APSInt
operator|&
name|I
operator|)
block|{
name|I
operator|.
name|print
argument_list|(
name|OS
argument_list|,
name|I
operator|.
name|isSigned
argument_list|()
argument_list|)
block|;
return|return
name|OS
return|;
block|}
end_expr_stmt

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

