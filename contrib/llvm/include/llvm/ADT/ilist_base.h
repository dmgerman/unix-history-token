begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- llvm/ADT/ilist_base.h - Intrusive List Base --------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_ADT_ILIST_BASE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_ADT_ILIST_BASE_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/ilist_node_base.h"
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|/// Implementations of list algorithms using ilist_node_base.
name|template
operator|<
name|bool
name|EnableSentinelTracking
operator|>
name|class
name|ilist_base
block|{
name|public
operator|:
name|using
name|node_base_type
operator|=
name|ilist_node_base
operator|<
name|EnableSentinelTracking
operator|>
block|;
specifier|static
name|void
name|insertBeforeImpl
argument_list|(
argument|node_base_type&Next
argument_list|,
argument|node_base_type&N
argument_list|)
block|{
name|node_base_type
operator|&
name|Prev
operator|=
operator|*
name|Next
operator|.
name|getPrev
argument_list|()
block|;
name|N
operator|.
name|setNext
argument_list|(
operator|&
name|Next
argument_list|)
block|;
name|N
operator|.
name|setPrev
argument_list|(
operator|&
name|Prev
argument_list|)
block|;
name|Prev
operator|.
name|setNext
argument_list|(
operator|&
name|N
argument_list|)
block|;
name|Next
operator|.
name|setPrev
argument_list|(
operator|&
name|N
argument_list|)
block|;   }
specifier|static
name|void
name|removeImpl
argument_list|(
argument|node_base_type&N
argument_list|)
block|{
name|node_base_type
operator|*
name|Prev
operator|=
name|N
operator|.
name|getPrev
argument_list|()
block|;
name|node_base_type
operator|*
name|Next
operator|=
name|N
operator|.
name|getNext
argument_list|()
block|;
name|Next
operator|->
name|setPrev
argument_list|(
name|Prev
argument_list|)
block|;
name|Prev
operator|->
name|setNext
argument_list|(
name|Next
argument_list|)
block|;
comment|// Not strictly necessary, but helps catch a class of bugs.
name|N
operator|.
name|setPrev
argument_list|(
name|nullptr
argument_list|)
block|;
name|N
operator|.
name|setNext
argument_list|(
name|nullptr
argument_list|)
block|;   }
specifier|static
name|void
name|removeRangeImpl
argument_list|(
argument|node_base_type&First
argument_list|,
argument|node_base_type&Last
argument_list|)
block|{
name|node_base_type
operator|*
name|Prev
operator|=
name|First
operator|.
name|getPrev
argument_list|()
block|;
name|node_base_type
operator|*
name|Final
operator|=
name|Last
operator|.
name|getPrev
argument_list|()
block|;
name|Last
operator|.
name|setPrev
argument_list|(
name|Prev
argument_list|)
block|;
name|Prev
operator|->
name|setNext
argument_list|(
operator|&
name|Last
argument_list|)
block|;
comment|// Not strictly necessary, but helps catch a class of bugs.
name|First
operator|.
name|setPrev
argument_list|(
name|nullptr
argument_list|)
block|;
name|Final
operator|->
name|setNext
argument_list|(
name|nullptr
argument_list|)
block|;   }
specifier|static
name|void
name|transferBeforeImpl
argument_list|(
argument|node_base_type&Next
argument_list|,
argument|node_base_type&First
argument_list|,
argument|node_base_type&Last
argument_list|)
block|{
if|if
condition|(
operator|&
name|Next
operator|==
operator|&
name|Last
operator|||
operator|&
name|First
operator|==
operator|&
name|Last
condition|)
return|return;
comment|// Position cannot be contained in the range to be transferred.
name|assert
argument_list|(
operator|&
name|Next
operator|!=
operator|&
name|First
operator|&&
comment|// Check for the most common mistake.
literal|"Insertion point can't be one of the transferred nodes"
argument_list|)
block|;
name|node_base_type
operator|&
name|Final
operator|=
operator|*
name|Last
operator|.
name|getPrev
argument_list|()
block|;
comment|// Detach from old list/position.
name|First
operator|.
name|getPrev
argument_list|()
operator|->
name|setNext
argument_list|(
operator|&
name|Last
argument_list|)
block|;
name|Last
operator|.
name|setPrev
argument_list|(
name|First
operator|.
name|getPrev
argument_list|()
argument_list|)
block|;
comment|// Splice [First, Final] into its new list/position.
name|node_base_type
operator|&
name|Prev
operator|=
operator|*
name|Next
operator|.
name|getPrev
argument_list|()
block|;
name|Final
operator|.
name|setNext
argument_list|(
operator|&
name|Next
argument_list|)
block|;
name|First
operator|.
name|setPrev
argument_list|(
operator|&
name|Prev
argument_list|)
block|;
name|Prev
operator|.
name|setNext
argument_list|(
operator|&
name|First
argument_list|)
block|;
name|Next
operator|.
name|setPrev
argument_list|(
operator|&
name|Final
argument_list|)
block|;   }
name|template
operator|<
name|class
name|T
operator|>
specifier|static
name|void
name|insertBefore
argument_list|(
argument|T&Next
argument_list|,
argument|T&N
argument_list|)
block|{
name|insertBeforeImpl
argument_list|(
name|Next
argument_list|,
name|N
argument_list|)
block|;   }
name|template
operator|<
name|class
name|T
operator|>
specifier|static
name|void
name|remove
argument_list|(
argument|T&N
argument_list|)
block|{
name|removeImpl
argument_list|(
name|N
argument_list|)
block|; }
name|template
operator|<
name|class
name|T
operator|>
specifier|static
name|void
name|removeRange
argument_list|(
argument|T&First
argument_list|,
argument|T&Last
argument_list|)
block|{
name|removeRangeImpl
argument_list|(
name|First
argument_list|,
name|Last
argument_list|)
block|;   }
name|template
operator|<
name|class
name|T
operator|>
specifier|static
name|void
name|transferBefore
argument_list|(
argument|T&Next
argument_list|,
argument|T&First
argument_list|,
argument|T&Last
argument_list|)
block|{
name|transferBeforeImpl
argument_list|(
name|Next
argument_list|,
name|First
argument_list|,
name|Last
argument_list|)
block|;   }
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_ADT_ILIST_BASE_H
end_comment

end_unit

