begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- llvm/ADT/ValueMap.h - Safe map from Values to data -------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines the ValueMap class.  ValueMap maps Value* or any subclass
end_comment

begin_comment
comment|// to an arbitrary other type.  It provides the DenseMap interface but updates
end_comment

begin_comment
comment|// itself to remain safe when keys are RAUWed or deleted.  By default, when a
end_comment

begin_comment
comment|// key is RAUWed from V1 to V2, the old mapping V1->target is removed, and a new
end_comment

begin_comment
comment|// mapping V2->target is added.  If V2 already existed, its old target is
end_comment

begin_comment
comment|// overwritten.  When a key is deleted, its mapping is removed.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// You can override a ValueMap's Config parameter to control exactly what
end_comment

begin_comment
comment|// happens on RAUW and destruction and to get called back on each event.  It's
end_comment

begin_comment
comment|// legal to call back into the ValueMap from a Config's callbacks.  Config
end_comment

begin_comment
comment|// parameters should inherit from ValueMapConfig<KeyT> to get default
end_comment

begin_comment
comment|// implementations of all the methods ValueMap uses.  See ValueMapConfig for
end_comment

begin_comment
comment|// documentation of the functions you can override.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_ADT_VALUEMAP_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_ADT_VALUEMAP_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ValueHandle.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/type_traits.h"
end_include

begin_include
include|#
directive|include
file|"llvm/System/Mutex.h"
end_include

begin_include
include|#
directive|include
file|<iterator>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|template
operator|<
name|typename
name|KeyT
operator|,
name|typename
name|ValueT
operator|,
name|typename
name|Config
operator|,
name|typename
name|ValueInfoT
operator|>
name|class
name|ValueMapCallbackVH
expr_stmt|;
name|template
operator|<
name|typename
name|DenseMapT
operator|,
name|typename
name|KeyT
operator|>
name|class
name|ValueMapIterator
expr_stmt|;
name|template
operator|<
name|typename
name|DenseMapT
operator|,
name|typename
name|KeyT
operator|>
name|class
name|ValueMapConstIterator
expr_stmt|;
comment|/// This class defines the default behavior for configurable aspects of
comment|/// ValueMap<>.  User Configs should inherit from this class to be as compatible
comment|/// as possible with future versions of ValueMap.
name|template
operator|<
name|typename
name|KeyT
operator|>
expr|struct
name|ValueMapConfig
block|{
comment|/// If FollowRAUW is true, the ValueMap will update mappings on RAUW. If it's
comment|/// false, the ValueMap will leave the original mapping in place.
block|enum
block|{
name|FollowRAUW
operator|=
name|true
block|}
block|;
comment|// All methods will be called with a first argument of type ExtraData.  The
comment|// default implementations in this class take a templated first argument so
comment|// that users' subclasses can use any type they want without having to
comment|// override all the defaults.
block|struct
name|ExtraData
block|{}
block|;
name|template
operator|<
name|typename
name|ExtraDataT
operator|>
specifier|static
name|void
name|onRAUW
argument_list|(
argument|const ExtraDataT&
comment|/*Data*/
argument_list|,
argument|KeyT
comment|/*Old*/
argument_list|,
argument|KeyT
comment|/*New*/
argument_list|)
block|{}
name|template
operator|<
name|typename
name|ExtraDataT
operator|>
specifier|static
name|void
name|onDelete
argument_list|(
argument|const ExtraDataT&
comment|/*Data*/
argument_list|,
argument|KeyT
comment|/*Old*/
argument_list|)
block|{}
comment|/// Returns a mutex that should be acquired around any changes to the map.
comment|/// This is only acquired from the CallbackVH (and held around calls to onRAUW
comment|/// and onDelete) and not inside other ValueMap methods.  NULL means that no
comment|/// mutex is necessary.
name|template
operator|<
name|typename
name|ExtraDataT
operator|>
specifier|static
name|sys
operator|::
name|Mutex
operator|*
name|getMutex
argument_list|(
argument|const ExtraDataT&
comment|/*Data*/
argument_list|)
block|{
return|return
name|NULL
return|;
block|}
expr|}
block|;
comment|/// See the file comment.
name|template
operator|<
name|typename
name|KeyT
block|,
name|typename
name|ValueT
block|,
name|typename
name|Config
operator|=
name|ValueMapConfig
operator|<
name|KeyT
operator|>
block|,
name|typename
name|ValueInfoT
operator|=
name|DenseMapInfo
operator|<
name|ValueT
operator|>
expr|>
name|class
name|ValueMap
block|{
name|friend
name|class
name|ValueMapCallbackVH
operator|<
name|KeyT
block|,
name|ValueT
block|,
name|Config
block|,
name|ValueInfoT
operator|>
block|;
typedef|typedef
name|ValueMapCallbackVH
operator|<
name|KeyT
operator|,
name|ValueT
operator|,
name|Config
operator|,
name|ValueInfoT
operator|>
name|ValueMapCVH
expr_stmt|;
typedef|typedef
name|DenseMap
operator|<
name|ValueMapCVH
operator|,
name|ValueT
operator|,
name|DenseMapInfo
operator|<
name|ValueMapCVH
operator|>
operator|,
name|ValueInfoT
operator|>
name|MapT
expr_stmt|;
typedef|typedef
name|typename
name|Config
operator|::
name|ExtraData
name|ExtraData
expr_stmt|;
name|MapT
name|Map
decl_stmt|;
name|ExtraData
name|Data
decl_stmt|;
name|public
label|:
typedef|typedef
name|KeyT
name|key_type
typedef|;
typedef|typedef
name|ValueT
name|mapped_type
typedef|;
typedef|typedef
name|std
operator|::
name|pair
operator|<
name|KeyT
operator|,
name|ValueT
operator|>
name|value_type
expr_stmt|;
name|ValueMap
argument_list|(
specifier|const
name|ValueMap
operator|&
name|Other
argument_list|)
operator|:
name|Map
argument_list|(
name|Other
operator|.
name|Map
argument_list|)
operator|,
name|Data
argument_list|(
argument|Other.Data
argument_list|)
block|{}
name|explicit
name|ValueMap
argument_list|(
argument|unsigned NumInitBuckets =
literal|64
argument_list|)
operator|:
name|Map
argument_list|(
name|NumInitBuckets
argument_list|)
operator|,
name|Data
argument_list|()
block|{}
name|explicit
name|ValueMap
argument_list|(
argument|const ExtraData&Data
argument_list|,
argument|unsigned NumInitBuckets =
literal|64
argument_list|)
operator|:
name|Map
argument_list|(
name|NumInitBuckets
argument_list|)
operator|,
name|Data
argument_list|(
argument|Data
argument_list|)
block|{}
operator|~
name|ValueMap
argument_list|()
block|{}
typedef|typedef
name|ValueMapIterator
operator|<
name|MapT
operator|,
name|KeyT
operator|>
name|iterator
expr_stmt|;
typedef|typedef
name|ValueMapConstIterator
operator|<
name|MapT
operator|,
name|KeyT
operator|>
name|const_iterator
expr_stmt|;
specifier|inline
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|iterator
argument_list|(
name|Map
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
specifier|inline
name|iterator
name|end
parameter_list|()
block|{
return|return
name|iterator
argument_list|(
name|Map
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
specifier|inline
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|Map
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
specifier|inline
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|Map
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|Map
operator|.
name|empty
argument_list|()
return|;
block|}
name|unsigned
name|size
argument_list|()
specifier|const
block|{
return|return
name|Map
operator|.
name|size
argument_list|()
return|;
block|}
comment|/// Grow the map so that it has at least Size buckets. Does not shrink
name|void
name|resize
parameter_list|(
name|size_t
name|Size
parameter_list|)
block|{
name|Map
operator|.
name|resize
argument_list|(
name|Size
argument_list|)
expr_stmt|;
block|}
name|void
name|clear
parameter_list|()
block|{
name|Map
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/// count - Return true if the specified key is in the map.
name|bool
name|count
argument_list|(
specifier|const
name|KeyT
operator|&
name|Val
argument_list|)
decl|const
block|{
return|return
name|Map
operator|.
name|count
argument_list|(
name|Wrap
argument_list|(
name|Val
argument_list|)
argument_list|)
return|;
block|}
name|iterator
name|find
parameter_list|(
specifier|const
name|KeyT
modifier|&
name|Val
parameter_list|)
block|{
return|return
name|iterator
argument_list|(
name|Map
operator|.
name|find
argument_list|(
name|Wrap
argument_list|(
name|Val
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
name|const_iterator
name|find
argument_list|(
specifier|const
name|KeyT
operator|&
name|Val
argument_list|)
decl|const
block|{
return|return
name|const_iterator
argument_list|(
name|Map
operator|.
name|find
argument_list|(
name|Wrap
argument_list|(
name|Val
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/// lookup - Return the entry for the specified key, or a default
comment|/// constructed value if no such entry exists.
name|ValueT
name|lookup
argument_list|(
specifier|const
name|KeyT
operator|&
name|Val
argument_list|)
decl|const
block|{
return|return
name|Map
operator|.
name|lookup
argument_list|(
name|Wrap
argument_list|(
name|Val
argument_list|)
argument_list|)
return|;
block|}
comment|// Inserts key,value pair into the map if the key isn't already in the map.
comment|// If the key is already in the map, it returns false and doesn't update the
comment|// value.
name|std
operator|::
name|pair
operator|<
name|iterator
operator|,
name|bool
operator|>
name|insert
argument_list|(
argument|const std::pair<KeyT
argument_list|,
argument|ValueT>&KV
argument_list|)
block|{
name|std
operator|::
name|pair
operator|<
name|typename
name|MapT
operator|::
name|iterator
block|,
name|bool
operator|>
name|map_result
operator|=
name|Map
operator|.
name|insert
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|Wrap
argument_list|(
name|KV
operator|.
name|first
argument_list|)
argument_list|,
name|KV
operator|.
name|second
argument_list|)
argument_list|)
block|;
return|return
name|std
operator|::
name|make_pair
argument_list|(
name|iterator
argument_list|(
name|map_result
operator|.
name|first
argument_list|)
argument_list|,
name|map_result
operator|.
name|second
argument_list|)
return|;
block|}
comment|/// insert - Range insertion of pairs.
name|template
operator|<
name|typename
name|InputIt
operator|>
name|void
name|insert
argument_list|(
argument|InputIt I
argument_list|,
argument|InputIt E
argument_list|)
block|{
for|for
control|(
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
name|insert
argument_list|(
operator|*
name|I
argument_list|)
expr_stmt|;
block|}
name|bool
name|erase
parameter_list|(
specifier|const
name|KeyT
modifier|&
name|Val
parameter_list|)
block|{
return|return
name|Map
operator|.
name|erase
argument_list|(
name|Wrap
argument_list|(
name|Val
argument_list|)
argument_list|)
return|;
block|}
name|bool
name|erase
parameter_list|(
name|iterator
name|I
parameter_list|)
block|{
return|return
name|Map
operator|.
name|erase
argument_list|(
name|I
operator|.
name|base
argument_list|()
argument_list|)
return|;
block|}
name|value_type
modifier|&
name|FindAndConstruct
parameter_list|(
specifier|const
name|KeyT
modifier|&
name|Key
parameter_list|)
block|{
return|return
name|Map
operator|.
name|FindAndConstruct
argument_list|(
name|Wrap
argument_list|(
name|Key
argument_list|)
argument_list|)
return|;
block|}
name|ValueT
modifier|&
name|operator
function|[]
parameter_list|(
specifier|const
name|KeyT
modifier|&
name|Key
parameter_list|)
block|{
return|return
name|Map
index|[
name|Wrap
argument_list|(
name|Key
argument_list|)
index|]
return|;
block|}
name|ValueMap
modifier|&
name|operator
init|=
operator|(
specifier|const
name|ValueMap
operator|&
name|Other
operator|)
block|{
name|Map
operator|=
name|Other
operator|.
name|Map
block|;
name|Data
operator|=
name|Other
operator|.
name|Data
block|;
return|return
operator|*
name|this
return|;
block|}
comment|/// isPointerIntoBucketsArray - Return true if the specified pointer points
comment|/// somewhere into the ValueMap's array of buckets (i.e. either to a key or
comment|/// value in the ValueMap).
name|bool
name|isPointerIntoBucketsArray
argument_list|(
specifier|const
name|void
operator|*
name|Ptr
argument_list|)
decl|const
block|{
return|return
name|Map
operator|.
name|isPointerIntoBucketsArray
argument_list|(
name|Ptr
argument_list|)
return|;
block|}
comment|/// getPointerIntoBucketsArray() - Return an opaque pointer into the buckets
comment|/// array.  In conjunction with the previous method, this can be used to
comment|/// determine whether an insertion caused the ValueMap to reallocate.
specifier|const
name|void
operator|*
name|getPointerIntoBucketsArray
argument_list|()
specifier|const
block|{
return|return
name|Map
operator|.
name|getPointerIntoBucketsArray
argument_list|()
return|;
block|}
name|private
label|:
comment|// Takes a key being looked up in the map and wraps it into a
comment|// ValueMapCallbackVH, the actual key type of the map.  We use a helper
comment|// function because ValueMapCVH is constructed with a second parameter.
name|ValueMapCVH
name|Wrap
argument_list|(
name|KeyT
name|key
argument_list|)
decl|const
block|{
comment|// The only way the resulting CallbackVH could try to modify *this (making
comment|// the const_cast incorrect) is if it gets inserted into the map.  But then
comment|// this function must have been called from a non-const method, making the
comment|// const_cast ok.
return|return
name|ValueMapCVH
argument_list|(
name|key
argument_list|,
name|const_cast
operator|<
name|ValueMap
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// This CallbackVH updates its ValueMap when the contained Value changes,
end_comment

begin_comment
comment|// according to the user's preferences expressed through the Config object.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|KeyT
operator|,
name|typename
name|ValueT
operator|,
name|typename
name|Config
operator|,
name|typename
name|ValueInfoT
operator|>
name|class
name|ValueMapCallbackVH
operator|:
name|public
name|CallbackVH
block|{
name|friend
name|class
name|ValueMap
operator|<
name|KeyT
block|,
name|ValueT
block|,
name|Config
block|,
name|ValueInfoT
operator|>
block|;
name|friend
expr|struct
name|DenseMapInfo
operator|<
name|ValueMapCallbackVH
operator|>
block|;
typedef|typedef
name|ValueMap
operator|<
name|KeyT
operator|,
name|ValueT
operator|,
name|Config
operator|,
name|ValueInfoT
operator|>
name|ValueMapT
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|llvm
operator|::
name|remove_pointer
operator|<
name|KeyT
operator|>
operator|::
name|type
name|KeySansPointerT
expr_stmt|;
end_typedef

begin_decl_stmt
name|ValueMapT
modifier|*
name|Map
decl_stmt|;
end_decl_stmt

begin_macro
name|ValueMapCallbackVH
argument_list|(
argument|KeyT Key
argument_list|,
argument|ValueMapT *Map
argument_list|)
end_macro

begin_expr_stmt
unit|:
name|CallbackVH
argument_list|(
name|const_cast
operator|<
name|Value
operator|*
operator|>
operator|(
name|static_cast
operator|<
specifier|const
name|Value
operator|*
operator|>
operator|(
name|Key
operator|)
operator|)
argument_list|)
operator|,
name|Map
argument_list|(
argument|Map
argument_list|)
block|{}
name|public
operator|:
name|KeyT
name|Unwrap
argument_list|()
specifier|const
block|{
return|return
name|cast_or_null
operator|<
name|KeySansPointerT
operator|>
operator|(
name|getValPtr
argument_list|()
operator|)
return|;
block|}
end_expr_stmt

begin_function
name|virtual
name|void
name|deleted
parameter_list|()
block|{
comment|// Make a copy that won't get changed even when *this is destroyed.
name|ValueMapCallbackVH
name|Copy
argument_list|(
operator|*
name|this
argument_list|)
decl_stmt|;
name|sys
operator|::
name|Mutex
operator|*
name|M
operator|=
name|Config
operator|::
name|getMutex
argument_list|(
name|Copy
operator|.
name|Map
operator|->
name|Data
argument_list|)
expr_stmt|;
if|if
condition|(
name|M
condition|)
name|M
operator|->
name|acquire
argument_list|()
expr_stmt|;
name|Config
operator|::
name|onDelete
argument_list|(
name|Copy
operator|.
name|Map
operator|->
name|Data
argument_list|,
name|Copy
operator|.
name|Unwrap
argument_list|()
argument_list|)
expr_stmt|;
comment|// May destroy *this.
name|Copy
operator|.
name|Map
operator|->
name|Map
operator|.
name|erase
argument_list|(
name|Copy
argument_list|)
expr_stmt|;
comment|// Definitely destroys *this.
if|if
condition|(
name|M
condition|)
name|M
operator|->
name|release
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
name|virtual
name|void
name|allUsesReplacedWith
parameter_list|(
name|Value
modifier|*
name|new_key
parameter_list|)
block|{
name|assert
argument_list|(
name|isa
operator|<
name|KeySansPointerT
operator|>
operator|(
name|new_key
operator|)
operator|&&
literal|"Invalid RAUW on key of ValueMap<>"
argument_list|)
expr_stmt|;
comment|// Make a copy that won't get changed even when *this is destroyed.
name|ValueMapCallbackVH
name|Copy
argument_list|(
operator|*
name|this
argument_list|)
decl_stmt|;
name|sys
operator|::
name|Mutex
operator|*
name|M
operator|=
name|Config
operator|::
name|getMutex
argument_list|(
name|Copy
operator|.
name|Map
operator|->
name|Data
argument_list|)
expr_stmt|;
if|if
condition|(
name|M
condition|)
name|M
operator|->
name|acquire
argument_list|()
expr_stmt|;
name|KeyT
name|typed_new_key
init|=
name|cast
operator|<
name|KeySansPointerT
operator|>
operator|(
name|new_key
operator|)
decl_stmt|;
comment|// Can destroy *this:
name|Config
operator|::
name|onRAUW
argument_list|(
name|Copy
operator|.
name|Map
operator|->
name|Data
argument_list|,
name|Copy
operator|.
name|Unwrap
argument_list|()
argument_list|,
name|typed_new_key
argument_list|)
expr_stmt|;
if|if
condition|(
name|Config
operator|::
name|FollowRAUW
condition|)
block|{
name|typename
name|ValueMapT
operator|::
name|MapT
operator|::
name|iterator
name|I
operator|=
name|Copy
operator|.
name|Map
operator|->
name|Map
operator|.
name|find
argument_list|(
name|Copy
argument_list|)
expr_stmt|;
comment|// I could == Copy.Map->Map.end() if the onRAUW callback already
comment|// removed the old mapping.
if|if
condition|(
name|I
operator|!=
name|Copy
operator|.
name|Map
operator|->
name|Map
operator|.
name|end
argument_list|()
condition|)
block|{
name|ValueT
name|Target
argument_list|(
name|I
operator|->
name|second
argument_list|)
decl_stmt|;
name|Copy
operator|.
name|Map
operator|->
name|Map
operator|.
name|erase
argument_list|(
name|I
argument_list|)
expr_stmt|;
comment|// Definitely destroys *this.
name|Copy
operator|.
name|Map
operator|->
name|insert
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|typed_new_key
argument_list|,
name|Target
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|M
condition|)
name|M
operator|->
name|release
argument_list|()
expr_stmt|;
block|}
end_function

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|KeyT
operator|,
name|typename
name|ValueT
operator|,
name|typename
name|Config
operator|,
name|typename
name|ValueInfoT
operator|>
expr|struct
name|isPodLike
operator|<
name|ValueMapCallbackVH
operator|<
name|KeyT
operator|,
name|ValueT
operator|,
name|Config
operator|,
name|ValueInfoT
operator|>
expr|>
block|{
specifier|static
specifier|const
name|bool
name|value
operator|=
name|true
block|; }
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|KeyT
operator|,
name|typename
name|ValueT
operator|,
name|typename
name|Config
operator|,
name|typename
name|ValueInfoT
operator|>
expr|struct
name|DenseMapInfo
operator|<
name|ValueMapCallbackVH
operator|<
name|KeyT
operator|,
name|ValueT
operator|,
name|Config
operator|,
name|ValueInfoT
operator|>
expr|>
block|{
typedef|typedef
name|ValueMapCallbackVH
operator|<
name|KeyT
operator|,
name|ValueT
operator|,
name|Config
operator|,
name|ValueInfoT
operator|>
name|VH
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|DenseMapInfo
operator|<
name|KeyT
operator|>
name|PointerInfo
expr_stmt|;
end_typedef

begin_function
specifier|static
specifier|inline
name|VH
name|getEmptyKey
parameter_list|()
block|{
return|return
name|VH
argument_list|(
name|PointerInfo
operator|::
name|getEmptyKey
argument_list|()
argument_list|,
name|NULL
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|VH
name|getTombstoneKey
parameter_list|()
block|{
return|return
name|VH
argument_list|(
name|PointerInfo
operator|::
name|getTombstoneKey
argument_list|()
argument_list|,
name|NULL
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|unsigned
name|getHashValue
parameter_list|(
specifier|const
name|VH
modifier|&
name|Val
parameter_list|)
block|{
return|return
name|PointerInfo
operator|::
name|getHashValue
argument_list|(
name|Val
operator|.
name|Unwrap
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|bool
name|isEqual
parameter_list|(
specifier|const
name|VH
modifier|&
name|LHS
parameter_list|,
specifier|const
name|VH
modifier|&
name|RHS
parameter_list|)
block|{
return|return
name|LHS
operator|==
name|RHS
return|;
block|}
end_function

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|DenseMapT
operator|,
name|typename
name|KeyT
operator|>
name|class
name|ValueMapIterator
operator|:
name|public
name|std
operator|::
name|iterator
operator|<
name|std
operator|::
name|forward_iterator_tag
operator|,
name|std
operator|::
name|pair
operator|<
name|KeyT
operator|,
name|typename
name|DenseMapT
operator|::
name|mapped_type
operator|>
operator|,
name|ptrdiff_t
operator|>
block|{
typedef|typedef
name|typename
name|DenseMapT
operator|::
name|iterator
name|BaseT
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|DenseMapT
operator|::
name|mapped_type
name|ValueT
expr_stmt|;
end_typedef

begin_decl_stmt
name|BaseT
name|I
decl_stmt|;
end_decl_stmt

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|ValueMapIterator
argument_list|()
operator|:
name|I
argument_list|()
block|{}
name|ValueMapIterator
argument_list|(
argument|BaseT I
argument_list|)
operator|:
name|I
argument_list|(
argument|I
argument_list|)
block|{}
name|BaseT
name|base
argument_list|()
specifier|const
block|{
return|return
name|I
return|;
block|}
end_expr_stmt

begin_struct
struct|struct
name|ValueTypeProxy
block|{
specifier|const
name|KeyT
name|first
decl_stmt|;
name|ValueT
modifier|&
name|second
decl_stmt|;
name|ValueTypeProxy
operator|*
name|operator
operator|->
expr|(
block|)
block|{
return|return
name|this
return|;
block|}
name|operator
name|std
decl|::
name|pair
decl|<
name|KeyT
struct|,
name|ValueT
decl|>
argument_list|()
decl|const
block|{
return|return
name|std
operator|::
name|make_pair
argument_list|(
name|first
argument_list|,
name|second
argument_list|)
return|;
block|}
end_struct

begin_expr_stmt
unit|};
name|ValueTypeProxy
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
name|ValueTypeProxy
name|Result
operator|=
block|{
name|I
operator|->
name|first
operator|.
name|Unwrap
argument_list|()
block|,
name|I
operator|->
name|second
block|}
block|;
return|return
name|Result
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|ValueTypeProxy
name|operator
operator|->
expr|(
end_expr_stmt

begin_expr_stmt
unit|)
specifier|const
block|{
return|return
name|operator
operator|*
operator|(
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|ValueMapIterator
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|I
operator|==
name|RHS
operator|.
name|I
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|ValueMapIterator
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|I
operator|!=
name|RHS
operator|.
name|I
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|ValueMapIterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
comment|// Preincrement
operator|++
name|I
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|ValueMapIterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
comment|// Postincrement
name|ValueMapIterator
name|tmp
operator|=
operator|*
name|this
block|;
operator|++
operator|*
name|this
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|DenseMapT
operator|,
name|typename
name|KeyT
operator|>
name|class
name|ValueMapConstIterator
operator|:
name|public
name|std
operator|::
name|iterator
operator|<
name|std
operator|::
name|forward_iterator_tag
operator|,
name|std
operator|::
name|pair
operator|<
name|KeyT
operator|,
name|typename
name|DenseMapT
operator|::
name|mapped_type
operator|>
operator|,
name|ptrdiff_t
operator|>
block|{
typedef|typedef
name|typename
name|DenseMapT
operator|::
name|const_iterator
name|BaseT
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|DenseMapT
operator|::
name|mapped_type
name|ValueT
expr_stmt|;
end_typedef

begin_decl_stmt
name|BaseT
name|I
decl_stmt|;
end_decl_stmt

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|ValueMapConstIterator
argument_list|()
operator|:
name|I
argument_list|()
block|{}
name|ValueMapConstIterator
argument_list|(
argument|BaseT I
argument_list|)
operator|:
name|I
argument_list|(
argument|I
argument_list|)
block|{}
name|ValueMapConstIterator
argument_list|(
name|ValueMapIterator
operator|<
name|DenseMapT
argument_list|,
name|KeyT
operator|>
name|Other
argument_list|)
operator|:
name|I
argument_list|(
argument|Other.base()
argument_list|)
block|{}
name|BaseT
name|base
argument_list|()
specifier|const
block|{
return|return
name|I
return|;
block|}
end_expr_stmt

begin_struct
struct|struct
name|ValueTypeProxy
block|{
specifier|const
name|KeyT
name|first
decl_stmt|;
specifier|const
name|ValueT
modifier|&
name|second
decl_stmt|;
name|ValueTypeProxy
operator|*
name|operator
operator|->
expr|(
block|)
block|{
return|return
name|this
return|;
block|}
name|operator
name|std
decl|::
name|pair
decl|<
name|KeyT
struct|,
name|ValueT
decl|>
argument_list|()
decl|const
block|{
return|return
name|std
operator|::
name|make_pair
argument_list|(
name|first
argument_list|,
name|second
argument_list|)
return|;
block|}
end_struct

begin_expr_stmt
unit|};
name|ValueTypeProxy
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
name|ValueTypeProxy
name|Result
operator|=
block|{
name|I
operator|->
name|first
operator|.
name|Unwrap
argument_list|()
block|,
name|I
operator|->
name|second
block|}
block|;
return|return
name|Result
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|ValueTypeProxy
name|operator
operator|->
expr|(
end_expr_stmt

begin_expr_stmt
unit|)
specifier|const
block|{
return|return
name|operator
operator|*
operator|(
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|ValueMapConstIterator
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|I
operator|==
name|RHS
operator|.
name|I
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|ValueMapConstIterator
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|I
operator|!=
name|RHS
operator|.
name|I
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|ValueMapConstIterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
comment|// Preincrement
operator|++
name|I
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|ValueMapConstIterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
comment|// Postincrement
name|ValueMapConstIterator
name|tmp
operator|=
operator|*
name|this
block|;
operator|++
operator|*
name|this
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_comment
unit|};  }
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

