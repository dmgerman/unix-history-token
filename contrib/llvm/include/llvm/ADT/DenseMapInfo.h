begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- llvm/ADT/DenseMapInfo.h - Type traits for DenseMap -------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines DenseMapInfo traits for DenseMap.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_ADT_DENSEMAPINFO_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_ADT_DENSEMAPINFO_H
end_define

begin_include
include|#
directive|include
file|"llvm/Support/PointerLikeTypeTraits.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/type_traits.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|DenseMapInfo
block|{
comment|//static inline T getEmptyKey();
comment|//static inline T getTombstoneKey();
comment|//static unsigned getHashValue(const T&Val);
comment|//static bool isEqual(const T&LHS, const T&RHS);
block|}
expr_stmt|;
comment|// Provide DenseMapInfo for all pointers.
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|DenseMapInfo
operator|<
name|T
operator|*
operator|>
block|{
specifier|static
specifier|inline
name|T
operator|*
name|getEmptyKey
argument_list|()
block|{
name|uintptr_t
name|Val
operator|=
name|static_cast
operator|<
name|uintptr_t
operator|>
operator|(
operator|-
literal|1
operator|)
block|;
name|Val
operator|<<=
name|PointerLikeTypeTraits
operator|<
name|T
operator|*
operator|>
operator|::
name|NumLowBitsAvailable
block|;
return|return
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|Val
operator|)
return|;
block|}
specifier|static
specifier|inline
name|T
operator|*
name|getTombstoneKey
argument_list|()
block|{
name|uintptr_t
name|Val
operator|=
name|static_cast
operator|<
name|uintptr_t
operator|>
operator|(
operator|-
literal|2
operator|)
block|;
name|Val
operator|<<=
name|PointerLikeTypeTraits
operator|<
name|T
operator|*
operator|>
operator|::
name|NumLowBitsAvailable
block|;
return|return
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|Val
operator|)
return|;
block|}
specifier|static
name|unsigned
name|getHashValue
argument_list|(
argument|const T *PtrVal
argument_list|)
block|{
return|return
operator|(
name|unsigned
argument_list|(
operator|(
name|uintptr_t
operator|)
name|PtrVal
argument_list|)
operator|>>
literal|4
operator|)
operator|^
operator|(
name|unsigned
argument_list|(
operator|(
name|uintptr_t
operator|)
name|PtrVal
argument_list|)
operator|>>
literal|9
operator|)
return|;
block|}
specifier|static
name|bool
name|isEqual
argument_list|(
argument|const T *LHS
argument_list|,
argument|const T *RHS
argument_list|)
block|{
return|return
name|LHS
operator|==
name|RHS
return|;
block|}
expr|}
block|;
comment|// Provide DenseMapInfo for chars.
name|template
operator|<
operator|>
expr|struct
name|DenseMapInfo
operator|<
name|char
operator|>
block|{
specifier|static
specifier|inline
name|char
name|getEmptyKey
argument_list|()
block|{
return|return
operator|~
literal|0
return|;
block|}
specifier|static
specifier|inline
name|char
name|getTombstoneKey
argument_list|()
block|{
return|return
operator|~
literal|0
operator|-
literal|1
return|;
block|}
specifier|static
name|unsigned
name|getHashValue
argument_list|(
argument|const char& Val
argument_list|)
block|{
return|return
name|Val
operator|*
literal|37U
return|;
block|}
specifier|static
name|bool
name|isEqual
argument_list|(
argument|const char&LHS
argument_list|,
argument|const char&RHS
argument_list|)
block|{
return|return
name|LHS
operator|==
name|RHS
return|;
block|}
expr|}
block|;
comment|// Provide DenseMapInfo for unsigned ints.
name|template
operator|<
operator|>
expr|struct
name|DenseMapInfo
operator|<
name|unsigned
operator|>
block|{
specifier|static
specifier|inline
name|unsigned
name|getEmptyKey
argument_list|()
block|{
return|return
operator|~
literal|0U
return|;
block|}
specifier|static
specifier|inline
name|unsigned
name|getTombstoneKey
argument_list|()
block|{
return|return
operator|~
literal|0U
operator|-
literal|1
return|;
block|}
specifier|static
name|unsigned
name|getHashValue
argument_list|(
argument|const unsigned& Val
argument_list|)
block|{
return|return
name|Val
operator|*
literal|37U
return|;
block|}
specifier|static
name|bool
name|isEqual
argument_list|(
argument|const unsigned& LHS
argument_list|,
argument|const unsigned& RHS
argument_list|)
block|{
return|return
name|LHS
operator|==
name|RHS
return|;
block|}
expr|}
block|;
comment|// Provide DenseMapInfo for unsigned longs.
name|template
operator|<
operator|>
expr|struct
name|DenseMapInfo
operator|<
name|unsigned
name|long
operator|>
block|{
specifier|static
specifier|inline
name|unsigned
name|long
name|getEmptyKey
argument_list|()
block|{
return|return
operator|~
literal|0UL
return|;
block|}
specifier|static
specifier|inline
name|unsigned
name|long
name|getTombstoneKey
argument_list|()
block|{
return|return
operator|~
literal|0UL
operator|-
literal|1L
return|;
block|}
specifier|static
name|unsigned
name|getHashValue
argument_list|(
argument|const unsigned long& Val
argument_list|)
block|{
return|return
call|(
name|unsigned
call|)
argument_list|(
name|Val
operator|*
literal|37UL
argument_list|)
return|;
block|}
specifier|static
name|bool
name|isEqual
argument_list|(
argument|const unsigned long& LHS
argument_list|,
argument|const unsigned long& RHS
argument_list|)
block|{
return|return
name|LHS
operator|==
name|RHS
return|;
block|}
expr|}
block|;
comment|// Provide DenseMapInfo for unsigned long longs.
name|template
operator|<
operator|>
expr|struct
name|DenseMapInfo
operator|<
name|unsigned
name|long
name|long
operator|>
block|{
specifier|static
specifier|inline
name|unsigned
name|long
name|long
name|getEmptyKey
argument_list|()
block|{
return|return
operator|~
literal|0ULL
return|;
block|}
specifier|static
specifier|inline
name|unsigned
name|long
name|long
name|getTombstoneKey
argument_list|()
block|{
return|return
operator|~
literal|0ULL
operator|-
literal|1ULL
return|;
block|}
specifier|static
name|unsigned
name|getHashValue
argument_list|(
argument|const unsigned long long& Val
argument_list|)
block|{
return|return
call|(
name|unsigned
call|)
argument_list|(
name|Val
operator|*
literal|37ULL
argument_list|)
return|;
block|}
specifier|static
name|bool
name|isEqual
argument_list|(
argument|const unsigned long long& LHS
argument_list|,
argument|const unsigned long long& RHS
argument_list|)
block|{
return|return
name|LHS
operator|==
name|RHS
return|;
block|}
expr|}
block|;
comment|// Provide DenseMapInfo for ints.
name|template
operator|<
operator|>
expr|struct
name|DenseMapInfo
operator|<
name|int
operator|>
block|{
specifier|static
specifier|inline
name|int
name|getEmptyKey
argument_list|()
block|{
return|return
literal|0x7fffffff
return|;
block|}
specifier|static
specifier|inline
name|int
name|getTombstoneKey
argument_list|()
block|{
return|return
operator|-
literal|0x7fffffff
operator|-
literal|1
return|;
block|}
specifier|static
name|unsigned
name|getHashValue
argument_list|(
argument|const int& Val
argument_list|)
block|{
return|return
call|(
name|unsigned
call|)
argument_list|(
name|Val
operator|*
literal|37U
argument_list|)
return|;
block|}
specifier|static
name|bool
name|isEqual
argument_list|(
argument|const int& LHS
argument_list|,
argument|const int& RHS
argument_list|)
block|{
return|return
name|LHS
operator|==
name|RHS
return|;
block|}
expr|}
block|;
comment|// Provide DenseMapInfo for longs.
name|template
operator|<
operator|>
expr|struct
name|DenseMapInfo
operator|<
name|long
operator|>
block|{
specifier|static
specifier|inline
name|long
name|getEmptyKey
argument_list|()
block|{
return|return
operator|(
literal|1UL
operator|<<
operator|(
sizeof|sizeof
argument_list|(
name|long
argument_list|)
operator|*
literal|8
operator|-
literal|1
operator|)
operator|)
operator|-
literal|1UL
return|;
block|}
specifier|static
specifier|inline
name|long
name|getTombstoneKey
argument_list|()
block|{
return|return
name|getEmptyKey
argument_list|()
operator|-
literal|1L
return|;
block|}
specifier|static
name|unsigned
name|getHashValue
argument_list|(
argument|const long& Val
argument_list|)
block|{
return|return
call|(
name|unsigned
call|)
argument_list|(
name|Val
operator|*
literal|37UL
argument_list|)
return|;
block|}
specifier|static
name|bool
name|isEqual
argument_list|(
argument|const long& LHS
argument_list|,
argument|const long& RHS
argument_list|)
block|{
return|return
name|LHS
operator|==
name|RHS
return|;
block|}
expr|}
block|;
comment|// Provide DenseMapInfo for long longs.
name|template
operator|<
operator|>
expr|struct
name|DenseMapInfo
operator|<
name|long
name|long
operator|>
block|{
specifier|static
specifier|inline
name|long
name|long
name|getEmptyKey
argument_list|()
block|{
return|return
literal|0x7fffffffffffffffLL
return|;
block|}
specifier|static
specifier|inline
name|long
name|long
name|getTombstoneKey
argument_list|()
block|{
return|return
operator|-
literal|0x7fffffffffffffffLL
operator|-
literal|1
return|;
block|}
specifier|static
name|unsigned
name|getHashValue
argument_list|(
argument|const long long& Val
argument_list|)
block|{
return|return
call|(
name|unsigned
call|)
argument_list|(
name|Val
operator|*
literal|37ULL
argument_list|)
return|;
block|}
specifier|static
name|bool
name|isEqual
argument_list|(
argument|const long long& LHS
argument_list|,
argument|const long long& RHS
argument_list|)
block|{
return|return
name|LHS
operator|==
name|RHS
return|;
block|}
expr|}
block|;
comment|// Provide DenseMapInfo for all pairs whose members have info.
name|template
operator|<
name|typename
name|T
block|,
name|typename
name|U
operator|>
expr|struct
name|DenseMapInfo
operator|<
name|std
operator|::
name|pair
operator|<
name|T
block|,
name|U
operator|>
expr|>
block|{
typedef|typedef
name|std
operator|::
name|pair
operator|<
name|T
operator|,
name|U
operator|>
name|Pair
expr_stmt|;
typedef|typedef
name|DenseMapInfo
operator|<
name|T
operator|>
name|FirstInfo
expr_stmt|;
typedef|typedef
name|DenseMapInfo
operator|<
name|U
operator|>
name|SecondInfo
expr_stmt|;
specifier|static
specifier|inline
name|Pair
name|getEmptyKey
argument_list|()
block|{
return|return
name|std
operator|::
name|make_pair
argument_list|(
name|FirstInfo
operator|::
name|getEmptyKey
argument_list|()
argument_list|,
name|SecondInfo
operator|::
name|getEmptyKey
argument_list|()
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|Pair
name|getTombstoneKey
argument_list|()
block|{
return|return
name|std
operator|::
name|make_pair
argument_list|(
name|FirstInfo
operator|::
name|getTombstoneKey
argument_list|()
argument_list|,
name|SecondInfo
operator|::
name|getTombstoneKey
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|unsigned
name|getHashValue
argument_list|(
argument|const Pair& PairVal
argument_list|)
block|{
name|uint64_t
name|key
operator|=
operator|(
name|uint64_t
operator|)
name|FirstInfo
operator|::
name|getHashValue
argument_list|(
name|PairVal
operator|.
name|first
argument_list|)
operator|<<
literal|32
operator||
operator|(
name|uint64_t
operator|)
name|SecondInfo
operator|::
name|getHashValue
argument_list|(
name|PairVal
operator|.
name|second
argument_list|)
block|;
name|key
operator|+=
operator|~
operator|(
name|key
operator|<<
literal|32
operator|)
block|;
name|key
operator|^=
operator|(
name|key
operator|>>
literal|22
operator|)
block|;
name|key
operator|+=
operator|~
operator|(
name|key
operator|<<
literal|13
operator|)
block|;
name|key
operator|^=
operator|(
name|key
operator|>>
literal|8
operator|)
block|;
name|key
operator|+=
operator|(
name|key
operator|<<
literal|3
operator|)
block|;
name|key
operator|^=
operator|(
name|key
operator|>>
literal|15
operator|)
block|;
name|key
operator|+=
operator|~
operator|(
name|key
operator|<<
literal|27
operator|)
block|;
name|key
operator|^=
operator|(
name|key
operator|>>
literal|31
operator|)
block|;
return|return
operator|(
name|unsigned
operator|)
name|key
return|;
block|}
specifier|static
name|bool
name|isEqual
argument_list|(
argument|const Pair&LHS
argument_list|,
argument|const Pair&RHS
argument_list|)
block|{
return|return
name|FirstInfo
operator|::
name|isEqual
argument_list|(
name|LHS
operator|.
name|first
argument_list|,
name|RHS
operator|.
name|first
argument_list|)
operator|&&
name|SecondInfo
operator|::
name|isEqual
argument_list|(
name|LHS
operator|.
name|second
argument_list|,
name|RHS
operator|.
name|second
argument_list|)
return|;
block|}
expr|}
block|;  }
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

