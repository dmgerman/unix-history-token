begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- llvm/ADT/polymorphic_ptr.h - Smart copyable owned ptr ----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|/// This file provides a polymorphic_ptr class template. See the class comments
end_comment

begin_comment
comment|/// for details about this API, its intended use cases, etc.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// The primary motivation here is to work around the necessity of copy
end_comment

begin_comment
comment|/// semantics in C++98. This is typically used where any actual copies are
end_comment

begin_comment
comment|/// incidental or unnecessary. As a consequence, it is expected to cease to be
end_comment

begin_comment
comment|/// useful and be removed when we can directly rely on move-only types.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_ADT_POLYMORPHIC_PTR_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_ADT_POLYMORPHIC_PTR_H
end_define

begin_include
include|#
directive|include
file|"llvm/Support/Compiler.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|/// \brief An owning, copyable polymorphic smart pointer.
comment|///
comment|/// This pointer exists to provide copyable owned smart pointer. Rather than
comment|/// shared ownership semantics, it has unique ownership semantics and deep copy
comment|/// semantics. It is copyable by requiring that the underlying type exposes
comment|/// a method which can produce a (heap allocated) clone.
comment|///
comment|/// Note that in almost all scenarios use of this could be avoided if we could
comment|/// build move-only containers of a std::unique_ptr, but until then this
comment|/// provides an effective way to place polymorphic objects in a container.
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|polymorphic_ptr
block|{
name|T
operator|*
name|ptr
block|;
name|public
operator|:
name|polymorphic_ptr
argument_list|(
name|T
operator|*
name|ptr
operator|=
literal|0
argument_list|)
operator|:
name|ptr
argument_list|(
argument|ptr
argument_list|)
block|{}
name|polymorphic_ptr
argument_list|(
specifier|const
name|polymorphic_ptr
operator|&
name|arg
argument_list|)
operator|:
name|ptr
argument_list|(
argument|arg ? arg->clone() :
literal|0
argument_list|)
block|{}
if|#
directive|if
name|LLVM_HAS_RVALUE_REFERENCES
name|polymorphic_ptr
argument_list|(
name|polymorphic_ptr
operator|&&
name|arg
argument_list|)
operator|:
name|ptr
argument_list|(
argument|arg.take()
argument_list|)
block|{}
endif|#
directive|endif
operator|~
name|polymorphic_ptr
argument_list|()
block|{
name|delete
name|ptr
block|; }
name|polymorphic_ptr
operator|&
name|operator
operator|=
operator|(
name|polymorphic_ptr
name|arg
operator|)
block|{
name|swap
argument_list|(
name|arg
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
name|polymorphic_ptr
operator|&
name|operator
operator|=
operator|(
name|T
operator|*
name|arg
operator|)
block|{
if|if
condition|(
name|arg
operator|!=
name|ptr
condition|)
block|{
name|delete
name|ptr
decl_stmt|;
name|ptr
operator|=
name|arg
expr_stmt|;
block|}
return|return
operator|*
name|this
return|;
block|}
name|T
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|ptr
return|;
block|}
name|T
operator|*
name|operator
operator|->
expr|(
block|)
specifier|const
block|{
return|return
name|ptr
return|;
block|}
name|LLVM_EXPLICIT
name|operator
name|bool
argument_list|()
specifier|const
block|{
return|return
name|ptr
operator|!=
literal|0
return|;
block|}
name|bool
name|operator
operator|!
operator|(
operator|)
specifier|const
block|{
return|return
name|ptr
operator|==
literal|0
return|;
block|}
name|T
operator|*
name|get
argument_list|()
specifier|const
block|{
return|return
name|ptr
return|;
block|}
name|T
operator|*
name|take
argument_list|()
block|{
name|T
operator|*
name|tmp
operator|=
name|ptr
block|;
name|ptr
operator|=
literal|0
block|;
return|return
name|tmp
return|;
block|}
name|void
name|swap
argument_list|(
argument|polymorphic_ptr&arg
argument_list|)
block|{
name|T
operator|*
name|tmp
operator|=
name|ptr
block|;
name|ptr
operator|=
name|arg
operator|.
name|ptr
block|;
name|arg
operator|.
name|ptr
operator|=
name|tmp
block|;   }
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|void
name|swap
argument_list|(
argument|polymorphic_ptr<T>&lhs
argument_list|,
argument|polymorphic_ptr<T>&rhs
argument_list|)
block|{
name|lhs
operator|.
name|swap
argument_list|(
name|rhs
argument_list|)
block|; }
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|U
operator|>
name|bool
name|operator
operator|==
operator|(
specifier|const
name|polymorphic_ptr
operator|<
name|T
operator|>
operator|&
name|lhs
operator|,
specifier|const
name|polymorphic_ptr
operator|<
name|U
operator|>
operator|&
name|rhs
operator|)
block|{
return|return
name|lhs
operator|.
name|get
argument_list|()
operator|==
name|rhs
operator|.
name|get
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|U
operator|>
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|polymorphic_ptr
operator|<
name|T
operator|>
operator|&
name|lhs
operator|,
specifier|const
name|polymorphic_ptr
operator|<
name|U
operator|>
operator|&
name|rhs
operator|)
block|{
return|return
name|lhs
operator|.
name|get
argument_list|()
operator|!=
name|rhs
operator|.
name|get
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|U
operator|>
name|bool
name|operator
operator|==
operator|(
specifier|const
name|polymorphic_ptr
operator|<
name|T
operator|>
operator|&
name|lhs
operator|,
name|U
operator|*
name|rhs
operator|)
block|{
return|return
name|lhs
operator|.
name|get
argument_list|()
operator|==
name|rhs
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|U
operator|>
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|polymorphic_ptr
operator|<
name|T
operator|>
operator|&
name|lhs
operator|,
name|U
operator|*
name|rhs
operator|)
block|{
return|return
name|lhs
operator|.
name|get
argument_list|()
operator|!=
name|rhs
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|U
operator|>
name|bool
name|operator
operator|==
operator|(
name|T
operator|*
name|lhs
operator|,
specifier|const
name|polymorphic_ptr
operator|<
name|U
operator|>
operator|&
name|rhs
operator|)
block|{
return|return
name|lhs
operator|==
name|rhs
operator|.
name|get
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|U
operator|>
name|bool
name|operator
operator|!=
operator|(
name|T
operator|*
name|lhs
operator|,
specifier|const
name|polymorphic_ptr
operator|<
name|U
operator|>
operator|&
name|rhs
operator|)
block|{
return|return
name|lhs
operator|!=
name|rhs
operator|.
name|get
argument_list|()
return|;
block|}
end_expr_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

end_unit

