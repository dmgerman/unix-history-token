begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- iterator.h - Utilities for using and defining iterators --*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_ADT_ITERATOR_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_ADT_ITERATOR_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/iterator_range.h"
end_include

begin_include
include|#
directive|include
file|<cstddef>
end_include

begin_include
include|#
directive|include
file|<iterator>
end_include

begin_include
include|#
directive|include
file|<type_traits>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|/// \brief CRTP base class which implements the entire standard iterator facade
comment|/// in terms of a minimal subset of the interface.
comment|///
comment|/// Use this when it is reasonable to implement most of the iterator
comment|/// functionality in terms of a core subset. If you need special behavior or
comment|/// there are performance implications for this, you may want to override the
comment|/// relevant members instead.
comment|///
comment|/// Note, one abstraction that this does *not* provide is implementing
comment|/// subtraction in terms of addition by negating the difference. Negation isn't
comment|/// always information preserving, and I can see very reasonable iterator
comment|/// designs where this doesn't work well. It doesn't really force much added
comment|/// boilerplate anyways.
comment|///
comment|/// Another abstraction that this doesn't provide is implementing increment in
comment|/// terms of addition of one. These aren't equivalent for all iterator
comment|/// categories, and respecting that adds a lot of complexity for little gain.
comment|///
comment|/// Classes wishing to use `iterator_facade_base` should implement the following
comment|/// methods:
comment|///
comment|/// Forward Iterators:
comment|///   (All of the following methods)
comment|///   - DerivedT&operator=(const DerivedT&R);
comment|///   - bool operator==(const DerivedT&R) const;
comment|///   - const T&operator*() const;
comment|///   - T&operator*();
comment|///   - DerivedT&operator++();
comment|///
comment|/// Bidirectional Iterators:
comment|///   (All methods of forward iterators, plus the following)
comment|///   - DerivedT&operator--();
comment|///
comment|/// Random-access Iterators:
comment|///   (All methods of bidirectional iterators excluding the following)
comment|///   - DerivedT&operator++();
comment|///   - DerivedT&operator--();
comment|///   (and plus the following)
comment|///   - bool operator<(const DerivedT&RHS) const;
comment|///   - DifferenceTypeT operator-(const DerivedT&R) const;
comment|///   - DerivedT&operator+=(DifferenceTypeT N);
comment|///   - DerivedT&operator-=(DifferenceTypeT N);
comment|///
name|template
operator|<
name|typename
name|DerivedT
operator|,
name|typename
name|IteratorCategoryT
operator|,
name|typename
name|T
operator|,
name|typename
name|DifferenceTypeT
operator|=
name|std
operator|::
name|ptrdiff_t
operator|,
name|typename
name|PointerT
operator|=
name|T
operator|*
operator|,
name|typename
name|ReferenceT
operator|=
name|T
operator|&
operator|>
name|class
name|iterator_facade_base
operator|:
name|public
name|std
operator|::
name|iterator
operator|<
name|IteratorCategoryT
operator|,
name|T
operator|,
name|DifferenceTypeT
operator|,
name|PointerT
operator|,
name|ReferenceT
operator|>
block|{
name|protected
operator|:
expr|enum
block|{
name|IsRandomAccess
operator|=
name|std
operator|::
name|is_base_of
operator|<
name|std
operator|::
name|random_access_iterator_tag
block|,
name|IteratorCategoryT
operator|>
operator|::
name|value
block|,
name|IsBidirectional
operator|=
name|std
operator|::
name|is_base_of
operator|<
name|std
operator|::
name|bidirectional_iterator_tag
block|,
name|IteratorCategoryT
operator|>
operator|::
name|value
block|,   }
block|;
comment|/// A proxy object for computing a reference via indirecting a copy of an
comment|/// iterator. This is used in APIs which need to produce a reference via
comment|/// indirection but for which the iterator object might be a temporary. The
comment|/// proxy preserves the iterator internally and exposes the indirected
comment|/// reference via a conversion operator.
name|class
name|ReferenceProxy
block|{
name|friend
name|iterator_facade_base
block|;
name|DerivedT
name|I
block|;
name|ReferenceProxy
argument_list|(
argument|DerivedT I
argument_list|)
operator|:
name|I
argument_list|(
argument|std::move(I)
argument_list|)
block|{}
name|public
operator|:
name|operator
name|ReferenceT
argument_list|()
specifier|const
block|{
return|return
operator|*
name|I
return|;
block|}
expr|}
block|;
name|public
operator|:
name|DerivedT
name|operator
operator|+
operator|(
name|DifferenceTypeT
name|n
operator|)
specifier|const
block|{
name|static_assert
argument_list|(
name|std
operator|::
name|is_base_of
operator|<
name|iterator_facade_base
argument_list|,
name|DerivedT
operator|>
operator|::
name|value
argument_list|,
literal|"Must pass the derived type to this template!"
argument_list|)
block|;
name|static_assert
argument_list|(
name|IsRandomAccess
argument_list|,
literal|"The '+' operator is only defined for random access iterators."
argument_list|)
block|;
name|DerivedT
name|tmp
operator|=
operator|*
name|static_cast
operator|<
specifier|const
name|DerivedT
operator|*
operator|>
operator|(
name|this
operator|)
block|;
name|tmp
operator|+=
name|n
block|;
return|return
name|tmp
return|;
block|}
name|friend
name|DerivedT
name|operator
operator|+
operator|(
name|DifferenceTypeT
name|n
operator|,
specifier|const
name|DerivedT
operator|&
name|i
operator|)
block|{
name|static_assert
argument_list|(
name|IsRandomAccess
argument_list|,
literal|"The '+' operator is only defined for random access iterators."
argument_list|)
block|;
return|return
name|i
operator|+
name|n
return|;
block|}
name|DerivedT
name|operator
operator|-
operator|(
name|DifferenceTypeT
name|n
operator|)
specifier|const
block|{
name|static_assert
argument_list|(
name|IsRandomAccess
argument_list|,
literal|"The '-' operator is only defined for random access iterators."
argument_list|)
block|;
name|DerivedT
name|tmp
operator|=
operator|*
name|static_cast
operator|<
specifier|const
name|DerivedT
operator|*
operator|>
operator|(
name|this
operator|)
block|;
name|tmp
operator|-=
name|n
block|;
return|return
name|tmp
return|;
block|}
name|DerivedT
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|static_assert
argument_list|(
name|std
operator|::
name|is_base_of
operator|<
name|iterator_facade_base
argument_list|,
name|DerivedT
operator|>
operator|::
name|value
argument_list|,
literal|"Must pass the derived type to this template!"
argument_list|)
block|;
return|return
name|static_cast
operator|<
name|DerivedT
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|operator
operator|+=
operator|(
literal|1
operator|)
return|;
block|}
name|DerivedT
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|DerivedT
name|tmp
operator|=
operator|*
name|static_cast
operator|<
name|DerivedT
operator|*
operator|>
operator|(
name|this
operator|)
block|;
operator|++
operator|*
name|static_cast
operator|<
name|DerivedT
operator|*
operator|>
operator|(
name|this
operator|)
block|;
return|return
name|tmp
return|;
block|}
name|DerivedT
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
name|static_assert
argument_list|(
name|IsBidirectional
argument_list|,
literal|"The decrement operator is only defined for bidirectional iterators."
argument_list|)
block|;
return|return
name|static_cast
operator|<
name|DerivedT
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|operator
operator|-=
operator|(
literal|1
operator|)
return|;
block|}
name|DerivedT
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|static_assert
argument_list|(
name|IsBidirectional
argument_list|,
literal|"The decrement operator is only defined for bidirectional iterators."
argument_list|)
block|;
name|DerivedT
name|tmp
operator|=
operator|*
name|static_cast
operator|<
name|DerivedT
operator|*
operator|>
operator|(
name|this
operator|)
block|;
operator|--
operator|*
name|static_cast
operator|<
name|DerivedT
operator|*
operator|>
operator|(
name|this
operator|)
block|;
return|return
name|tmp
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|DerivedT
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
operator|!
name|static_cast
operator|<
specifier|const
name|DerivedT
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|operator
operator|==
operator|(
name|RHS
operator|)
return|;
block|}
name|bool
name|operator
operator|>
operator|(
specifier|const
name|DerivedT
operator|&
name|RHS
operator|)
specifier|const
block|{
name|static_assert
argument_list|(
name|IsRandomAccess
argument_list|,
literal|"Relational operators are only defined for random access iterators."
argument_list|)
block|;
return|return
operator|!
name|static_cast
operator|<
specifier|const
name|DerivedT
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|operator
operator|<
operator|(
name|RHS
operator|)
operator|&&
operator|!
name|static_cast
operator|<
specifier|const
name|DerivedT
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|operator
operator|==
operator|(
name|RHS
operator|)
return|;
block|}
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|DerivedT
operator|&
name|RHS
operator|)
specifier|const
block|{
name|static_assert
argument_list|(
name|IsRandomAccess
argument_list|,
literal|"Relational operators are only defined for random access iterators."
argument_list|)
block|;
return|return
operator|!
name|static_cast
operator|<
specifier|const
name|DerivedT
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|operator
operator|>
operator|(
name|RHS
operator|)
return|;
block|}
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|DerivedT
operator|&
name|RHS
operator|)
specifier|const
block|{
name|static_assert
argument_list|(
name|IsRandomAccess
argument_list|,
literal|"Relational operators are only defined for random access iterators."
argument_list|)
block|;
return|return
operator|!
name|static_cast
operator|<
specifier|const
name|DerivedT
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|operator
operator|<
operator|(
name|RHS
operator|)
return|;
block|}
name|PointerT
name|operator
operator|->
expr|(
block|)
block|{
return|return
operator|&
name|static_cast
operator|<
name|DerivedT
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|operator
operator|*
operator|(
operator|)
return|;
block|}
name|PointerT
name|operator
operator|->
expr|(
block|)
specifier|const
block|{
return|return
operator|&
name|static_cast
operator|<
specifier|const
name|DerivedT
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|operator
operator|*
operator|(
operator|)
return|;
block|}
name|ReferenceProxy
name|operator
index|[]
operator|(
name|DifferenceTypeT
name|n
operator|)
block|{
name|static_assert
argument_list|(
name|IsRandomAccess
argument_list|,
literal|"Subscripting is only defined for random access iterators."
argument_list|)
block|;
return|return
name|ReferenceProxy
argument_list|(
name|static_cast
operator|<
name|DerivedT
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|operator
operator|+
operator|(
name|n
operator|)
argument_list|)
return|;
block|}
name|ReferenceProxy
name|operator
index|[]
operator|(
name|DifferenceTypeT
name|n
operator|)
specifier|const
block|{
name|static_assert
argument_list|(
name|IsRandomAccess
argument_list|,
literal|"Subscripting is only defined for random access iterators."
argument_list|)
block|;
return|return
name|ReferenceProxy
argument_list|(
name|static_cast
operator|<
specifier|const
name|DerivedT
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|operator
operator|+
operator|(
name|n
operator|)
argument_list|)
return|;
block|}
block|}
empty_stmt|;
comment|/// \brief CRTP base class for adapting an iterator to a different type.
comment|///
comment|/// This class can be used through CRTP to adapt one iterator into another.
comment|/// Typically this is done through providing in the derived class a custom \c
comment|/// operator* implementation. Other methods can be overridden as well.
name|template
operator|<
name|typename
name|DerivedT
operator|,
name|typename
name|WrappedIteratorT
operator|,
name|typename
name|IteratorCategoryT
operator|=
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|WrappedIteratorT
operator|>
operator|::
name|iterator_category
operator|,
name|typename
name|T
operator|=
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|WrappedIteratorT
operator|>
operator|::
name|value_type
operator|,
name|typename
name|DifferenceTypeT
operator|=
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|WrappedIteratorT
operator|>
operator|::
name|difference_type
operator|,
name|typename
name|PointerT
operator|=
name|typename
name|std
operator|::
name|conditional
operator|<
name|std
operator|::
name|is_same
operator|<
name|T
operator|,
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|WrappedIteratorT
operator|>
operator|::
name|value_type
operator|>
operator|::
name|value
operator|,
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|WrappedIteratorT
operator|>
operator|::
name|pointer
operator|,
name|T
operator|*
operator|>
operator|::
name|type
operator|,
name|typename
name|ReferenceT
operator|=
name|typename
name|std
operator|::
name|conditional
operator|<
name|std
operator|::
name|is_same
operator|<
name|T
operator|,
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|WrappedIteratorT
operator|>
operator|::
name|value_type
operator|>
operator|::
name|value
operator|,
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|WrappedIteratorT
operator|>
operator|::
name|reference
operator|,
name|T
operator|&
operator|>
operator|::
name|type
operator|,
comment|// Don't provide these, they are mostly to act as aliases below.
name|typename
name|WrappedTraitsT
operator|=
name|std
operator|::
name|iterator_traits
operator|<
name|WrappedIteratorT
operator|>>
name|class
name|iterator_adaptor_base
operator|:
name|public
name|iterator_facade_base
operator|<
name|DerivedT
operator|,
name|IteratorCategoryT
operator|,
name|T
operator|,
name|DifferenceTypeT
operator|,
name|PointerT
operator|,
name|ReferenceT
operator|>
block|{
typedef|typedef
name|typename
name|iterator_adaptor_base
operator|::
name|iterator_facade_base
name|BaseT
expr_stmt|;
name|protected
operator|:
name|WrappedIteratorT
name|I
expr_stmt|;
name|iterator_adaptor_base
argument_list|()
operator|=
expr|default
expr_stmt|;
name|explicit
name|iterator_adaptor_base
argument_list|(
argument|WrappedIteratorT u
argument_list|)
block|:
name|I
argument_list|(
argument|std::move(u)
argument_list|)
block|{
name|static_assert
argument_list|(
name|std
operator|::
name|is_base_of
operator|<
name|iterator_adaptor_base
argument_list|,
name|DerivedT
operator|>
operator|::
name|value
argument_list|,
literal|"Must pass the derived type to this template!"
argument_list|)
expr_stmt|;
block|}
specifier|const
name|WrappedIteratorT
operator|&
name|wrapped
argument_list|()
specifier|const
block|{
return|return
name|I
return|;
block|}
name|public
label|:
typedef|typedef
name|DifferenceTypeT
name|difference_type
typedef|;
name|DerivedT
operator|&
name|operator
operator|+=
operator|(
name|difference_type
name|n
operator|)
block|{
name|static_assert
argument_list|(
name|BaseT
operator|::
name|IsRandomAccess
argument_list|,
literal|"The '+=' operator is only defined for random access iterators."
argument_list|)
block|;
name|I
operator|+=
name|n
block|;
return|return
operator|*
name|static_cast
operator|<
name|DerivedT
operator|*
operator|>
operator|(
name|this
operator|)
return|;
block|}
name|DerivedT
operator|&
name|operator
operator|-=
operator|(
name|difference_type
name|n
operator|)
block|{
name|static_assert
argument_list|(
name|BaseT
operator|::
name|IsRandomAccess
argument_list|,
literal|"The '-=' operator is only defined for random access iterators."
argument_list|)
block|;
name|I
operator|-=
name|n
block|;
return|return
operator|*
name|static_cast
operator|<
name|DerivedT
operator|*
operator|>
operator|(
name|this
operator|)
return|;
block|}
name|using
name|BaseT
operator|::
name|operator
operator|-
expr_stmt|;
name|difference_type
name|operator
operator|-
operator|(
specifier|const
name|DerivedT
operator|&
name|RHS
operator|)
specifier|const
block|{
name|static_assert
argument_list|(
name|BaseT
operator|::
name|IsRandomAccess
argument_list|,
literal|"The '-' operator is only defined for random access iterators."
argument_list|)
block|;
return|return
name|I
operator|-
name|RHS
operator|.
name|I
return|;
block|}
comment|// We have to explicitly provide ++ and -- rather than letting the facade
comment|// forward to += because WrappedIteratorT might not support +=.
name|using
name|BaseT
operator|::
name|operator
operator|++
expr_stmt|;
name|DerivedT
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|I
block|;
return|return
operator|*
name|static_cast
operator|<
name|DerivedT
operator|*
operator|>
operator|(
name|this
operator|)
return|;
block|}
name|using
name|BaseT
operator|::
name|operator
operator|--
expr_stmt|;
name|DerivedT
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
name|static_assert
argument_list|(
name|BaseT
operator|::
name|IsBidirectional
argument_list|,
literal|"The decrement operator is only defined for bidirectional iterators."
argument_list|)
block|;
operator|--
name|I
block|;
return|return
operator|*
name|static_cast
operator|<
name|DerivedT
operator|*
operator|>
operator|(
name|this
operator|)
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|DerivedT
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|I
operator|==
name|RHS
operator|.
name|I
return|;
block|}
name|bool
name|operator
operator|<
operator|(
specifier|const
name|DerivedT
operator|&
name|RHS
operator|)
specifier|const
block|{
name|static_assert
argument_list|(
name|BaseT
operator|::
name|IsRandomAccess
argument_list|,
literal|"Relational operators are only defined for random access iterators."
argument_list|)
block|;
return|return
name|I
operator|<
name|RHS
operator|.
name|I
return|;
block|}
name|ReferenceT
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|I
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/// \brief An iterator type that allows iterating over the pointees via some
end_comment

begin_comment
comment|/// other iterator.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// The typical usage of this is to expose a type that iterates over Ts, but
end_comment

begin_comment
comment|/// which is implemented with some iterator over T*s:
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// \code
end_comment

begin_comment
comment|///   typedef pointee_iterator<SmallVectorImpl<T *>::iterator> iterator;
end_comment

begin_comment
comment|/// \endcode
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|WrappedIteratorT
operator|,
name|typename
name|T
operator|=
name|typename
name|std
operator|::
name|remove_reference
operator|<
name|decltype
argument_list|(
operator|*
operator|*
name|std
operator|::
name|declval
operator|<
name|WrappedIteratorT
operator|>
operator|(
operator|)
argument_list|)
operator|>
operator|::
name|type
operator|>
expr|struct
name|pointee_iterator
operator|:
name|iterator_adaptor_base
operator|<
name|pointee_iterator
operator|<
name|WrappedIteratorT
operator|>
operator|,
name|WrappedIteratorT
operator|,
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|WrappedIteratorT
operator|>
operator|::
name|iterator_category
operator|,
name|T
operator|>
block|{
name|pointee_iterator
argument_list|()
operator|=
expr|default
block|;
name|template
operator|<
name|typename
name|U
operator|>
name|pointee_iterator
argument_list|(
name|U
operator|&&
name|u
argument_list|)
operator|:
name|pointee_iterator
operator|::
name|iterator_adaptor_base
argument_list|(
argument|std::forward<U&&>(u)
argument_list|)
block|{}
name|T
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
operator|*
name|this
operator|->
name|I
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|RangeT
operator|,
name|typename
name|WrappedIteratorT
operator|=
name|decltype
argument_list|(
name|std
operator|::
name|begin
argument_list|(
name|std
operator|::
name|declval
operator|<
name|RangeT
operator|>
operator|(
operator|)
argument_list|)
argument_list|)
operator|>
name|iterator_range
operator|<
name|pointee_iterator
operator|<
name|WrappedIteratorT
operator|>>
name|make_pointee_range
argument_list|(
argument|RangeT&&Range
argument_list|)
block|{
name|using
name|PointeeIteratorT
operator|=
name|pointee_iterator
operator|<
name|WrappedIteratorT
operator|>
block|;
return|return
name|make_range
argument_list|(
name|PointeeIteratorT
argument_list|(
name|std
operator|::
name|begin
argument_list|(
name|std
operator|::
name|forward
operator|<
name|RangeT
operator|>
operator|(
name|Range
operator|)
argument_list|)
argument_list|)
argument_list|,
name|PointeeIteratorT
argument_list|(
name|std
operator|::
name|end
argument_list|(
name|std
operator|::
name|forward
operator|<
name|RangeT
operator|>
operator|(
name|Range
operator|)
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|WrappedIteratorT
operator|,
name|typename
name|T
operator|=
name|decltype
argument_list|(
operator|&
operator|*
name|std
operator|::
name|declval
operator|<
name|WrappedIteratorT
operator|>
operator|(
operator|)
argument_list|)
operator|>
name|class
name|pointer_iterator
operator|:
name|public
name|iterator_adaptor_base
operator|<
name|pointer_iterator
operator|<
name|WrappedIteratorT
operator|>
operator|,
name|WrappedIteratorT
operator|,
name|T
operator|>
block|{
name|mutable
name|T
name|Ptr
block|;
name|public
operator|:
name|pointer_iterator
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|pointer_iterator
argument_list|(
argument|WrappedIteratorT u
argument_list|)
operator|:
name|pointer_iterator
operator|::
name|iterator_adaptor_base
argument_list|(
argument|std::move(u)
argument_list|)
block|{}
name|T
operator|&
name|operator
operator|*
operator|(
operator|)
block|{
return|return
name|Ptr
operator|=
operator|&
operator|*
name|this
operator|->
name|I
return|;
block|}
specifier|const
name|T
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|Ptr
operator|=
operator|&
operator|*
name|this
operator|->
name|I
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|RangeT
operator|,
name|typename
name|WrappedIteratorT
operator|=
name|decltype
argument_list|(
name|std
operator|::
name|begin
argument_list|(
name|std
operator|::
name|declval
operator|<
name|RangeT
operator|>
operator|(
operator|)
argument_list|)
argument_list|)
operator|>
name|iterator_range
operator|<
name|pointer_iterator
operator|<
name|WrappedIteratorT
operator|>>
name|make_pointer_range
argument_list|(
argument|RangeT&&Range
argument_list|)
block|{
name|using
name|PointerIteratorT
operator|=
name|pointer_iterator
operator|<
name|WrappedIteratorT
operator|>
block|;
return|return
name|make_range
argument_list|(
name|PointerIteratorT
argument_list|(
name|std
operator|::
name|begin
argument_list|(
name|std
operator|::
name|forward
operator|<
name|RangeT
operator|>
operator|(
name|Range
operator|)
argument_list|)
argument_list|)
argument_list|,
name|PointerIteratorT
argument_list|(
name|std
operator|::
name|end
argument_list|(
name|std
operator|::
name|forward
operator|<
name|RangeT
operator|>
operator|(
name|Range
operator|)
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_ADT_ITERATOR_H
end_comment

end_unit

