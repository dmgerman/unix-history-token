begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- llvm/ADT/PostOrderIterator.h - PostOrder iterator --------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file builds on the ADT/GraphTraits.h file to build a generic graph
end_comment

begin_comment
comment|// post order iterator.  This should work over any graph type that has a
end_comment

begin_comment
comment|// GraphTraits specialization.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_ADT_POSTORDERITERATOR_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_ADT_POSTORDERITERATOR_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/GraphTraits.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallPtrSet.h"
end_include

begin_include
include|#
directive|include
file|<set>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|template
operator|<
name|class
name|SetType
operator|,
name|bool
name|External
operator|>
comment|// Non-external set
name|class
name|po_iterator_storage
block|{
name|public
operator|:
name|SetType
name|Visited
block|; }
expr_stmt|;
comment|/// DFSetTraits - Allow the SetType used to record depth-first search results to
comment|/// optionally record node postorder.
name|template
operator|<
name|class
name|SetType
operator|>
expr|struct
name|DFSetTraits
block|{
specifier|static
name|void
name|finishPostorder
argument_list|(
argument|typename SetType::iterator::value_type
argument_list|,
argument|SetType&
argument_list|)
block|{}
block|}
expr_stmt|;
name|template
operator|<
name|class
name|SetType
operator|>
name|class
name|po_iterator_storage
operator|<
name|SetType
operator|,
name|true
operator|>
block|{
name|public
operator|:
name|po_iterator_storage
argument_list|(
name|SetType
operator|&
name|VSet
argument_list|)
operator|:
name|Visited
argument_list|(
argument|VSet
argument_list|)
block|{}
name|po_iterator_storage
argument_list|(
specifier|const
name|po_iterator_storage
operator|&
name|S
argument_list|)
operator|:
name|Visited
argument_list|(
argument|S.Visited
argument_list|)
block|{}
name|SetType
operator|&
name|Visited
block|; }
expr_stmt|;
name|template
operator|<
name|class
name|GraphT
operator|,
name|class
name|SetType
operator|=
name|llvm
operator|::
name|SmallPtrSet
operator|<
name|typename
name|GraphTraits
operator|<
name|GraphT
operator|>
operator|::
name|NodeType
operator|*
operator|,
literal|8
operator|>
operator|,
name|bool
name|ExtStorage
operator|=
name|false
operator|,
name|class
name|GT
operator|=
name|GraphTraits
operator|<
name|GraphT
operator|>
expr|>
name|class
name|po_iterator
operator|:
name|public
name|std
operator|::
name|iterator
operator|<
name|std
operator|::
name|forward_iterator_tag
operator|,
name|typename
name|GT
operator|::
name|NodeType
operator|,
name|ptrdiff_t
operator|>
operator|,
name|public
name|po_iterator_storage
operator|<
name|SetType
operator|,
name|ExtStorage
operator|>
block|{
typedef|typedef
name|std
operator|::
name|iterator
operator|<
name|std
operator|::
name|forward_iterator_tag
operator|,
name|typename
name|GT
operator|::
name|NodeType
operator|,
name|ptrdiff_t
operator|>
name|super
expr_stmt|;
typedef|typedef
name|typename
name|GT
operator|::
name|NodeType
name|NodeType
expr_stmt|;
typedef|typedef
name|typename
name|GT
operator|::
name|ChildIteratorType
name|ChildItTy
expr_stmt|;
comment|// VisitStack - Used to maintain the ordering.  Top = current block
comment|// First element is basic block pointer, second is the 'next child' to visit
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|pair
operator|<
name|NodeType
operator|*
operator|,
name|ChildItTy
operator|>
expr|>
name|VisitStack
expr_stmt|;
name|void
name|traverseChild
parameter_list|()
block|{
while|while
condition|(
name|VisitStack
operator|.
name|back
argument_list|()
operator|.
name|second
operator|!=
name|GT
operator|::
name|child_end
argument_list|(
name|VisitStack
operator|.
name|back
argument_list|()
operator|.
name|first
argument_list|)
condition|)
block|{
name|NodeType
modifier|*
name|BB
init|=
operator|*
name|VisitStack
operator|.
name|back
argument_list|()
operator|.
name|second
operator|++
decl_stmt|;
if|if
condition|(
name|this
operator|->
name|Visited
operator|.
name|insert
argument_list|(
name|BB
argument_list|)
condition|)
block|{
comment|// If the block is not visited...
name|VisitStack
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|BB
argument_list|,
name|GT
operator|::
name|child_begin
argument_list|(
name|BB
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|inline
name|po_iterator
argument_list|(
argument|NodeType *BB
argument_list|)
block|{
name|this
operator|->
name|Visited
operator|.
name|insert
argument_list|(
name|BB
argument_list|)
block|;
name|VisitStack
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|BB
argument_list|,
name|GT
operator|::
name|child_begin
argument_list|(
name|BB
argument_list|)
argument_list|)
argument_list|)
block|;
name|traverseChild
argument_list|()
block|;   }
specifier|inline
name|po_iterator
argument_list|()
block|{}
comment|// End is when stack is empty.
specifier|inline
name|po_iterator
argument_list|(
name|NodeType
operator|*
name|BB
argument_list|,
name|SetType
operator|&
name|S
argument_list|)
operator|:
name|po_iterator_storage
operator|<
name|SetType
operator|,
name|ExtStorage
operator|>
operator|(
name|S
operator|)
block|{
if|if
condition|(
name|this
operator|->
name|Visited
operator|.
name|insert
argument_list|(
name|BB
argument_list|)
condition|)
block|{
name|VisitStack
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|BB
argument_list|,
name|GT
operator|::
name|child_begin
argument_list|(
name|BB
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|traverseChild
argument_list|()
expr_stmt|;
block|}
block|}
specifier|inline
name|po_iterator
argument_list|(
name|SetType
operator|&
name|S
argument_list|)
operator|:
name|po_iterator_storage
operator|<
name|SetType
operator|,
name|ExtStorage
operator|>
operator|(
name|S
operator|)
block|{   }
comment|// End is when stack is empty.
name|public
operator|:
typedef|typedef
name|typename
name|super
operator|::
name|pointer
name|pointer
expr_stmt|;
typedef|typedef
name|po_iterator
operator|<
name|GraphT
operator|,
name|SetType
operator|,
name|ExtStorage
operator|,
name|GT
operator|>
name|_Self
expr_stmt|;
comment|// Provide static "constructors"...
specifier|static
specifier|inline
name|_Self
name|begin
parameter_list|(
name|GraphT
name|G
parameter_list|)
block|{
return|return
name|_Self
argument_list|(
name|GT
operator|::
name|getEntryNode
argument_list|(
name|G
argument_list|)
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|_Self
name|end
parameter_list|(
name|GraphT
name|G
parameter_list|)
block|{
return|return
name|_Self
argument_list|()
return|;
block|}
specifier|static
specifier|inline
name|_Self
name|begin
parameter_list|(
name|GraphT
name|G
parameter_list|,
name|SetType
modifier|&
name|S
parameter_list|)
block|{
return|return
name|_Self
argument_list|(
name|GT
operator|::
name|getEntryNode
argument_list|(
name|G
argument_list|)
argument_list|,
name|S
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|_Self
name|end
parameter_list|(
name|GraphT
name|G
parameter_list|,
name|SetType
modifier|&
name|S
parameter_list|)
block|{
return|return
name|_Self
argument_list|(
name|S
argument_list|)
return|;
block|}
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|_Self
operator|&
name|x
operator|)
specifier|const
block|{
return|return
name|VisitStack
operator|==
name|x
operator|.
name|VisitStack
return|;
block|}
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|_Self
operator|&
name|x
operator|)
specifier|const
block|{
return|return
operator|!
name|operator
operator|==
operator|(
name|x
operator|)
return|;
block|}
specifier|inline
name|pointer
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|VisitStack
operator|.
name|back
argument_list|()
operator|.
name|first
return|;
block|}
comment|// This is a nonstandard operator-> that dereferences the pointer an extra
comment|// time... so that you can actually call methods ON the BasicBlock, because
comment|// the contained type is a pointer.  This allows BBIt->getTerminator() f.e.
comment|//
specifier|inline
name|NodeType
operator|*
name|operator
operator|->
expr|(
block|)
decl|const
block|{
return|return
name|operator
operator|*
operator|(
operator|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
specifier|inline
name|_Self
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
comment|// Preincrement
name|DFSetTraits
operator|<
name|SetType
operator|>
operator|::
name|finishPostorder
argument_list|(
name|VisitStack
operator|.
name|back
argument_list|()
operator|.
name|first
argument_list|,
name|this
operator|->
name|Visited
argument_list|)
block|;
name|VisitStack
operator|.
name|pop_back
argument_list|()
block|;
if|if
condition|(
operator|!
name|VisitStack
operator|.
name|empty
argument_list|()
condition|)
name|traverseChild
argument_list|()
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}    inline
name|_Self
name|operator
operator|++
operator|(
name|int
operator|)
block|{
comment|// Postincrement
name|_Self
name|tmp
operator|=
operator|*
name|this
block|;
operator|++
operator|*
name|this
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_comment
unit|};
comment|// Provide global constructors that automatically figure out correct types...
end_comment

begin_comment
comment|//
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|po_iterator
operator|<
name|T
operator|>
name|po_begin
argument_list|(
argument|T G
argument_list|)
block|{
return|return
name|po_iterator
operator|<
name|T
operator|>
operator|::
name|begin
argument_list|(
name|G
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|po_iterator
operator|<
name|T
operator|>
name|po_end
argument_list|(
argument|T G
argument_list|)
block|{
return|return
name|po_iterator
operator|<
name|T
operator|>
operator|::
name|end
argument_list|(
name|G
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// Provide global definitions of external postorder iterators...
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|SetType
operator|=
name|std
operator|::
name|set
operator|<
name|typename
name|GraphTraits
operator|<
name|T
operator|>
operator|::
name|NodeType
operator|*
operator|>
expr|> struct
name|po_ext_iterator
operator|:
name|public
name|po_iterator
operator|<
name|T
operator|,
name|SetType
operator|,
name|true
operator|>
block|{
name|po_ext_iterator
argument_list|(
specifier|const
name|po_iterator
operator|<
name|T
argument_list|,
name|SetType
argument_list|,
name|true
operator|>
operator|&
name|V
argument_list|)
operator|:
name|po_iterator
operator|<
name|T
block|,
name|SetType
block|,
name|true
operator|>
operator|(
name|V
operator|)
block|{}
block|}
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|SetType
operator|>
name|po_ext_iterator
operator|<
name|T
operator|,
name|SetType
operator|>
name|po_ext_begin
argument_list|(
argument|T G
argument_list|,
argument|SetType&S
argument_list|)
block|{
return|return
name|po_ext_iterator
operator|<
name|T
operator|,
name|SetType
operator|>
operator|::
name|begin
argument_list|(
name|G
argument_list|,
name|S
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|SetType
operator|>
name|po_ext_iterator
operator|<
name|T
operator|,
name|SetType
operator|>
name|po_ext_end
argument_list|(
argument|T G
argument_list|,
argument|SetType&S
argument_list|)
block|{
return|return
name|po_ext_iterator
operator|<
name|T
operator|,
name|SetType
operator|>
operator|::
name|end
argument_list|(
name|G
argument_list|,
name|S
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// Provide global definitions of inverse post order iterators...
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|SetType
operator|=
name|std
operator|::
name|set
operator|<
name|typename
name|GraphTraits
operator|<
name|T
operator|>
operator|::
name|NodeType
operator|*
operator|>
operator|,
name|bool
name|External
operator|=
name|false
operator|>
expr|struct
name|ipo_iterator
operator|:
name|public
name|po_iterator
operator|<
name|Inverse
operator|<
name|T
operator|>
operator|,
name|SetType
operator|,
name|External
operator|>
block|{
name|ipo_iterator
argument_list|(
specifier|const
name|po_iterator
operator|<
name|Inverse
operator|<
name|T
operator|>
argument_list|,
name|SetType
argument_list|,
name|External
operator|>
operator|&
name|V
argument_list|)
operator|:
name|po_iterator
operator|<
name|Inverse
operator|<
name|T
operator|>
block|,
name|SetType
block|,
name|External
operator|>
operator|(
name|V
operator|)
block|{}
block|}
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|ipo_iterator
operator|<
name|T
operator|>
name|ipo_begin
argument_list|(
argument|T G
argument_list|,
argument|bool Reverse = false
argument_list|)
block|{
return|return
name|ipo_iterator
operator|<
name|T
operator|>
operator|::
name|begin
argument_list|(
name|G
argument_list|,
name|Reverse
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|ipo_iterator
operator|<
name|T
operator|>
name|ipo_end
argument_list|(
argument|T G
argument_list|)
block|{
return|return
name|ipo_iterator
operator|<
name|T
operator|>
operator|::
name|end
argument_list|(
name|G
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|//Provide global definitions of external inverse postorder iterators...
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|SetType
operator|=
name|std
operator|::
name|set
operator|<
name|typename
name|GraphTraits
operator|<
name|T
operator|>
operator|::
name|NodeType
operator|*
operator|>
expr|> struct
name|ipo_ext_iterator
operator|:
name|public
name|ipo_iterator
operator|<
name|T
operator|,
name|SetType
operator|,
name|true
operator|>
block|{
name|ipo_ext_iterator
argument_list|(
specifier|const
name|ipo_iterator
operator|<
name|T
argument_list|,
name|SetType
argument_list|,
name|true
operator|>
operator|&
name|V
argument_list|)
operator|:
name|ipo_iterator
operator|<
name|T
block|,
name|SetType
block|,
name|true
operator|>
operator|(
operator|&
name|V
operator|)
block|{}
name|ipo_ext_iterator
argument_list|(
specifier|const
name|po_iterator
operator|<
name|Inverse
operator|<
name|T
operator|>
argument_list|,
name|SetType
argument_list|,
name|true
operator|>
operator|&
name|V
argument_list|)
operator|:
name|ipo_iterator
operator|<
name|T
block|,
name|SetType
block|,
name|true
operator|>
operator|(
operator|&
name|V
operator|)
block|{}
block|}
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|SetType
operator|>
name|ipo_ext_iterator
operator|<
name|T
operator|,
name|SetType
operator|>
name|ipo_ext_begin
argument_list|(
argument|T G
argument_list|,
argument|SetType&S
argument_list|)
block|{
return|return
name|ipo_ext_iterator
operator|<
name|T
operator|,
name|SetType
operator|>
operator|::
name|begin
argument_list|(
name|G
argument_list|,
name|S
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|SetType
operator|>
name|ipo_ext_iterator
operator|<
name|T
operator|,
name|SetType
operator|>
name|ipo_ext_end
argument_list|(
argument|T G
argument_list|,
argument|SetType&S
argument_list|)
block|{
return|return
name|ipo_ext_iterator
operator|<
name|T
operator|,
name|SetType
operator|>
operator|::
name|end
argument_list|(
name|G
argument_list|,
name|S
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_comment
comment|// Reverse Post Order CFG iterator code
end_comment

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This is used to visit basic blocks in a method in reverse post order.  This
end_comment

begin_comment
comment|// class is awkward to use because I don't know a good incremental algorithm to
end_comment

begin_comment
comment|// computer RPO from a graph.  Because of this, the construction of the
end_comment

begin_comment
comment|// ReversePostOrderTraversal object is expensive (it must walk the entire graph
end_comment

begin_comment
comment|// with a postorder iterator to build the data structures).  The moral of this
end_comment

begin_comment
comment|// story is: Don't create more ReversePostOrderTraversal classes than necessary.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This class should be used like this:
end_comment

begin_comment
comment|// {
end_comment

begin_comment
comment|//   ReversePostOrderTraversal<Function*> RPOT(FuncPtr); // Expensive to create
end_comment

begin_comment
comment|//   for (rpo_iterator I = RPOT.begin(); I != RPOT.end(); ++I) {
end_comment

begin_comment
comment|//      ...
end_comment

begin_comment
comment|//   }
end_comment

begin_comment
comment|//   for (rpo_iterator I = RPOT.begin(); I != RPOT.end(); ++I) {
end_comment

begin_comment
comment|//      ...
end_comment

begin_comment
comment|//   }
end_comment

begin_comment
comment|// }
end_comment

begin_comment
comment|//
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|GraphT
operator|,
name|class
name|GT
operator|=
name|GraphTraits
operator|<
name|GraphT
operator|>
expr|>
name|class
name|ReversePostOrderTraversal
block|{
typedef|typedef
name|typename
name|GT
operator|::
name|NodeType
name|NodeType
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|NodeType
operator|*
operator|>
name|Blocks
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Block list in normal PO order
end_comment

begin_function
specifier|inline
name|void
name|Initialize
parameter_list|(
name|NodeType
modifier|*
name|BB
parameter_list|)
block|{
name|copy
argument_list|(
name|po_begin
argument_list|(
name|BB
argument_list|)
argument_list|,
name|po_end
argument_list|(
name|BB
argument_list|)
argument_list|,
name|back_inserter
argument_list|(
name|Blocks
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_label
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|typename
name|std
operator|::
name|vector
operator|<
name|NodeType
operator|*
operator|>
operator|::
name|reverse_iterator
name|rpo_iterator
expr_stmt|;
end_typedef

begin_expr_stmt
specifier|inline
name|ReversePostOrderTraversal
argument_list|(
argument|GraphT G
argument_list|)
block|{
name|Initialize
argument_list|(
name|GT
operator|::
name|getEntryNode
argument_list|(
name|G
argument_list|)
argument_list|)
block|;   }
comment|// Because we want a reverse post order, use reverse iterators from the vector
specifier|inline
name|rpo_iterator
name|begin
argument_list|()
block|{
return|return
name|Blocks
operator|.
name|rbegin
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|rpo_iterator
name|end
parameter_list|()
block|{
return|return
name|Blocks
operator|.
name|rend
argument_list|()
return|;
block|}
end_function

begin_comment
unit|};  }
comment|// End llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

