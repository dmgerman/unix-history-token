begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//=-- CoverageMappingReader.h - Code coverage mapping reader ------*- C++ -*-=//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file contains support for reading coverage mapping data for
end_comment

begin_comment
comment|// instrumentation based coverage.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_PROFILEDATA_COVERAGEMAPPINGREADER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_PROFILEDATA_COVERAGEMAPPINGREADER_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/Triple.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/ObjectFile.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ProfileData/Coverage/CoverageMapping.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ProfileData/InstrProf.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/FileSystem.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/MemoryBuffer.h"
end_include

begin_include
include|#
directive|include
file|<iterator>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|coverage
block|{
name|class
name|CoverageMappingReader
decl_stmt|;
comment|/// \brief Coverage mapping information for a single function.
struct|struct
name|CoverageMappingRecord
block|{
name|StringRef
name|FunctionName
decl_stmt|;
name|uint64_t
name|FunctionHash
decl_stmt|;
name|ArrayRef
operator|<
name|StringRef
operator|>
name|Filenames
expr_stmt|;
name|ArrayRef
operator|<
name|CounterExpression
operator|>
name|Expressions
expr_stmt|;
name|ArrayRef
operator|<
name|CounterMappingRegion
operator|>
name|MappingRegions
expr_stmt|;
block|}
struct|;
comment|/// \brief A file format agnostic iterator over coverage mapping data.
name|class
name|CoverageMappingIterator
range|:
name|public
name|std
operator|::
name|iterator
operator|<
name|std
operator|::
name|input_iterator_tag
decl_stmt|,
name|CoverageMappingRecord
decl|>
block|{
name|CoverageMappingReader
modifier|*
name|Reader
decl_stmt|;
name|CoverageMappingRecord
name|Record
decl_stmt|;
name|void
name|increment
parameter_list|()
function_decl|;
name|public
label|:
name|CoverageMappingIterator
argument_list|()
operator|:
name|Reader
argument_list|(
argument|nullptr
argument_list|)
block|{}
name|CoverageMappingIterator
argument_list|(
name|CoverageMappingReader
operator|*
name|Reader
argument_list|)
operator|:
name|Reader
argument_list|(
argument|Reader
argument_list|)
block|{
name|increment
argument_list|()
block|;   }
name|CoverageMappingIterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|increment
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|CoverageMappingIterator
operator|&
name|RHS
operator|)
block|{
return|return
name|Reader
operator|==
name|RHS
operator|.
name|Reader
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|CoverageMappingIterator
operator|&
name|RHS
operator|)
block|{
return|return
name|Reader
operator|!=
name|RHS
operator|.
name|Reader
return|;
block|}
name|CoverageMappingRecord
modifier|&
name|operator
modifier|*
parameter_list|()
block|{
return|return
name|Record
return|;
block|}
name|CoverageMappingRecord
operator|*
name|operator
operator|->
expr|(
block|)
block|{
return|return
operator|&
name|Record
return|;
block|}
block|}
empty_stmt|;
name|class
name|CoverageMappingReader
block|{
name|public
label|:
name|virtual
name|Error
name|readNextRecord
parameter_list|(
name|CoverageMappingRecord
modifier|&
name|Record
parameter_list|)
init|=
literal|0
function_decl|;
name|CoverageMappingIterator
name|begin
parameter_list|()
block|{
return|return
name|CoverageMappingIterator
argument_list|(
name|this
argument_list|)
return|;
block|}
name|CoverageMappingIterator
name|end
parameter_list|()
block|{
return|return
name|CoverageMappingIterator
argument_list|()
return|;
block|}
name|virtual
operator|~
name|CoverageMappingReader
argument_list|()
block|{}
block|}
empty_stmt|;
comment|/// \brief Base class for the raw coverage mapping and filenames data readers.
name|class
name|RawCoverageReader
block|{
name|protected
label|:
name|StringRef
name|Data
decl_stmt|;
name|RawCoverageReader
argument_list|(
argument|StringRef Data
argument_list|)
block|:
name|Data
argument_list|(
argument|Data
argument_list|)
block|{}
name|Error
name|readULEB128
parameter_list|(
name|uint64_t
modifier|&
name|Result
parameter_list|)
function_decl|;
name|Error
name|readIntMax
parameter_list|(
name|uint64_t
modifier|&
name|Result
parameter_list|,
name|uint64_t
name|MaxPlus1
parameter_list|)
function_decl|;
name|Error
name|readSize
parameter_list|(
name|uint64_t
modifier|&
name|Result
parameter_list|)
function_decl|;
name|Error
name|readString
parameter_list|(
name|StringRef
modifier|&
name|Result
parameter_list|)
function_decl|;
block|}
empty_stmt|;
comment|/// \brief Reader for the raw coverage filenames.
name|class
name|RawCoverageFilenamesReader
range|:
name|public
name|RawCoverageReader
block|{
name|std
operator|::
name|vector
operator|<
name|StringRef
operator|>
operator|&
name|Filenames
block|;
name|RawCoverageFilenamesReader
argument_list|(
specifier|const
name|RawCoverageFilenamesReader
operator|&
argument_list|)
operator|=
name|delete
block|;
name|RawCoverageFilenamesReader
operator|&
name|operator
operator|=
operator|(
specifier|const
name|RawCoverageFilenamesReader
operator|&
operator|)
operator|=
name|delete
block|;
name|public
operator|:
name|RawCoverageFilenamesReader
argument_list|(
argument|StringRef Data
argument_list|,
argument|std::vector<StringRef>&Filenames
argument_list|)
operator|:
name|RawCoverageReader
argument_list|(
name|Data
argument_list|)
block|,
name|Filenames
argument_list|(
argument|Filenames
argument_list|)
block|{}
name|Error
name|read
argument_list|()
block|; }
decl_stmt|;
comment|/// \brief Checks if the given coverage mapping data is exported for
comment|/// an unused function.
name|class
name|RawCoverageMappingDummyChecker
range|:
name|public
name|RawCoverageReader
block|{
name|public
operator|:
name|RawCoverageMappingDummyChecker
argument_list|(
argument|StringRef MappingData
argument_list|)
operator|:
name|RawCoverageReader
argument_list|(
argument|MappingData
argument_list|)
block|{}
name|Expected
operator|<
name|bool
operator|>
name|isDummy
argument_list|()
block|; }
decl_stmt|;
comment|/// \brief Reader for the raw coverage mapping data.
name|class
name|RawCoverageMappingReader
range|:
name|public
name|RawCoverageReader
block|{
name|ArrayRef
operator|<
name|StringRef
operator|>
name|TranslationUnitFilenames
block|;
name|std
operator|::
name|vector
operator|<
name|StringRef
operator|>
operator|&
name|Filenames
block|;
name|std
operator|::
name|vector
operator|<
name|CounterExpression
operator|>
operator|&
name|Expressions
block|;
name|std
operator|::
name|vector
operator|<
name|CounterMappingRegion
operator|>
operator|&
name|MappingRegions
block|;
name|RawCoverageMappingReader
argument_list|(
specifier|const
name|RawCoverageMappingReader
operator|&
argument_list|)
operator|=
name|delete
block|;
name|RawCoverageMappingReader
operator|&
name|operator
operator|=
operator|(
specifier|const
name|RawCoverageMappingReader
operator|&
operator|)
operator|=
name|delete
block|;
name|public
operator|:
name|RawCoverageMappingReader
argument_list|(
argument|StringRef MappingData
argument_list|,
argument|ArrayRef<StringRef> TranslationUnitFilenames
argument_list|,
argument|std::vector<StringRef>&Filenames
argument_list|,
argument|std::vector<CounterExpression>&Expressions
argument_list|,
argument|std::vector<CounterMappingRegion>&MappingRegions
argument_list|)
operator|:
name|RawCoverageReader
argument_list|(
name|MappingData
argument_list|)
block|,
name|TranslationUnitFilenames
argument_list|(
name|TranslationUnitFilenames
argument_list|)
block|,
name|Filenames
argument_list|(
name|Filenames
argument_list|)
block|,
name|Expressions
argument_list|(
name|Expressions
argument_list|)
block|,
name|MappingRegions
argument_list|(
argument|MappingRegions
argument_list|)
block|{}
name|Error
name|read
argument_list|()
block|;
name|private
operator|:
name|Error
name|decodeCounter
argument_list|(
argument|unsigned Value
argument_list|,
argument|Counter&C
argument_list|)
block|;
name|Error
name|readCounter
argument_list|(
name|Counter
operator|&
name|C
argument_list|)
block|;
name|Error
name|readMappingRegionsSubArray
argument_list|(
argument|std::vector<CounterMappingRegion>&MappingRegions
argument_list|,
argument|unsigned InferredFileID
argument_list|,
argument|size_t NumFileIDs
argument_list|)
block|; }
decl_stmt|;
comment|/// \brief Reader for the coverage mapping data that is emitted by the
comment|/// frontend and stored in an object file.
name|class
name|BinaryCoverageReader
range|:
name|public
name|CoverageMappingReader
block|{
name|public
operator|:
expr|struct
name|ProfileMappingRecord
block|{
name|CovMapVersion
name|Version
block|;
name|StringRef
name|FunctionName
block|;
name|uint64_t
name|FunctionHash
block|;
name|StringRef
name|CoverageMapping
block|;
name|size_t
name|FilenamesBegin
block|;
name|size_t
name|FilenamesSize
block|;
name|ProfileMappingRecord
argument_list|(
argument|CovMapVersion Version
argument_list|,
argument|StringRef FunctionName
argument_list|,
argument|uint64_t FunctionHash
argument_list|,
argument|StringRef CoverageMapping
argument_list|,
argument|size_t FilenamesBegin
argument_list|,
argument|size_t FilenamesSize
argument_list|)
operator|:
name|Version
argument_list|(
name|Version
argument_list|)
block|,
name|FunctionName
argument_list|(
name|FunctionName
argument_list|)
block|,
name|FunctionHash
argument_list|(
name|FunctionHash
argument_list|)
block|,
name|CoverageMapping
argument_list|(
name|CoverageMapping
argument_list|)
block|,
name|FilenamesBegin
argument_list|(
name|FilenamesBegin
argument_list|)
block|,
name|FilenamesSize
argument_list|(
argument|FilenamesSize
argument_list|)
block|{}
block|}
block|;
name|private
operator|:
name|std
operator|::
name|vector
operator|<
name|StringRef
operator|>
name|Filenames
block|;
name|std
operator|::
name|vector
operator|<
name|ProfileMappingRecord
operator|>
name|MappingRecords
block|;
name|InstrProfSymtab
name|ProfileNames
block|;
name|size_t
name|CurrentRecord
block|;
name|std
operator|::
name|vector
operator|<
name|StringRef
operator|>
name|FunctionsFilenames
block|;
name|std
operator|::
name|vector
operator|<
name|CounterExpression
operator|>
name|Expressions
block|;
name|std
operator|::
name|vector
operator|<
name|CounterMappingRegion
operator|>
name|MappingRegions
block|;
name|BinaryCoverageReader
argument_list|(
specifier|const
name|BinaryCoverageReader
operator|&
argument_list|)
operator|=
name|delete
block|;
name|BinaryCoverageReader
operator|&
name|operator
operator|=
operator|(
specifier|const
name|BinaryCoverageReader
operator|&
operator|)
operator|=
name|delete
block|;
name|BinaryCoverageReader
argument_list|()
operator|:
name|CurrentRecord
argument_list|(
literal|0
argument_list|)
block|{}
name|public
operator|:
specifier|static
name|Expected
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|BinaryCoverageReader
operator|>>
name|create
argument_list|(
argument|std::unique_ptr<MemoryBuffer>&ObjectBuffer
argument_list|,
argument|StringRef Arch
argument_list|)
block|;
name|Error
name|readNextRecord
argument_list|(
argument|CoverageMappingRecord&Record
argument_list|)
name|override
block|; }
decl_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace coverage
end_comment

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

