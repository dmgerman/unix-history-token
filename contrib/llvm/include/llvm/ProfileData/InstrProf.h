begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//=-- InstrProf.h - Instrumented profiling format support ---------*- C++ -*-=//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Instrumentation-based profiling data is generated by instrumented
end_comment

begin_comment
comment|// binaries through library functions in compiler-rt, and read by the clang
end_comment

begin_comment
comment|// frontend to feed PGO.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_PROFILEDATA_INSTRPROF_H_
end_ifndef

begin_define
define|#
directive|define
name|LLVM_PROFILEDATA_INSTRPROF_H_
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_include
include|#
directive|include
file|<system_error>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
specifier|const
name|std
operator|::
name|error_category
operator|&
name|instrprof_category
argument_list|()
expr_stmt|;
name|enum
name|class
name|instrprof_error
block|{
name|success
operator|=
literal|0
operator|,
name|eof
operator|,
name|bad_magic
operator|,
name|bad_header
operator|,
name|unsupported_version
operator|,
name|unsupported_hash_type
operator|,
name|too_large
operator|,
name|truncated
operator|,
name|malformed
operator|,
name|unknown_function
operator|,
name|hash_mismatch
operator|,
name|count_mismatch
operator|,
name|counter_overflow
block|}
empty_stmt|;
specifier|inline
name|std
operator|::
name|error_code
name|make_error_code
argument_list|(
argument|instrprof_error E
argument_list|)
block|{
return|return
name|std
operator|::
name|error_code
argument_list|(
name|static_cast
operator|<
name|int
operator|>
operator|(
name|E
operator|)
argument_list|,
name|instrprof_category
argument_list|()
argument_list|)
return|;
block|}
comment|/// Profiling information for a single function.
struct|struct
name|InstrProfRecord
block|{
name|InstrProfRecord
argument_list|()
block|{}
name|InstrProfRecord
argument_list|(
argument|StringRef Name
argument_list|,
argument|uint64_t Hash
argument_list|,
argument|std::vector<uint64_t> Counts
argument_list|)
block|:
name|Name
argument_list|(
name|Name
argument_list|)
operator|,
name|Hash
argument_list|(
name|Hash
argument_list|)
operator|,
name|Counts
argument_list|(
argument|std::move(Counts)
argument_list|)
block|{}
name|StringRef
name|Name
expr_stmt|;
name|uint64_t
name|Hash
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|uint64_t
operator|>
name|Counts
expr_stmt|;
block|}
struct|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_decl_stmt
name|namespace
name|std
block|{
name|template
operator|<
operator|>
expr|struct
name|is_error_code_enum
operator|<
name|llvm
operator|::
name|instrprof_error
operator|>
operator|:
name|std
operator|::
name|true_type
block|{}
expr_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_PROFILEDATA_INSTRPROF_H_
end_comment

end_unit

