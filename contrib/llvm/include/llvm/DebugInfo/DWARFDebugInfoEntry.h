begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- DWARFDebugInfoEntry.h -----------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_DEBUGINFO_DWARFDEBUGINFOENTRY_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_DEBUGINFO_DWARFDEBUGINFOENTRY_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/DIContext.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/DWARFAbbreviationDeclaration.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/DWARFDebugRangeList.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/DataTypes.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|DWARFDebugAranges
decl_stmt|;
name|class
name|DWARFCompileUnit
decl_stmt|;
name|class
name|DWARFUnit
decl_stmt|;
name|class
name|DWARFContext
decl_stmt|;
name|class
name|DWARFFormValue
decl_stmt|;
struct_decl|struct
name|DWARFDebugInfoEntryInlinedChain
struct_decl|;
comment|/// DWARFDebugInfoEntryMinimal - A DIE with only the minimum required data.
name|class
name|DWARFDebugInfoEntryMinimal
block|{
comment|/// Offset within the .debug_info of the start of this entry.
name|uint32_t
name|Offset
decl_stmt|;
comment|/// How many to add to "this" to get the sibling.
name|uint32_t
name|SiblingIdx
decl_stmt|;
specifier|const
name|DWARFAbbreviationDeclaration
modifier|*
name|AbbrevDecl
decl_stmt|;
name|public
label|:
name|DWARFDebugInfoEntryMinimal
argument_list|()
operator|:
name|Offset
argument_list|(
literal|0
argument_list|)
operator|,
name|SiblingIdx
argument_list|(
literal|0
argument_list|)
operator|,
name|AbbrevDecl
argument_list|(
argument|nullptr
argument_list|)
block|{}
name|void
name|dump
argument_list|(
argument|raw_ostream&OS
argument_list|,
argument|DWARFUnit *u
argument_list|,
argument|unsigned recurseDepth
argument_list|,
argument|unsigned indent =
literal|0
argument_list|)
specifier|const
expr_stmt|;
name|void
name|dumpAttribute
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|,
name|DWARFUnit
operator|*
name|u
argument_list|,
name|uint32_t
operator|*
name|offset_ptr
argument_list|,
name|uint16_t
name|attr
argument_list|,
name|uint16_t
name|form
argument_list|,
name|unsigned
name|indent
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
comment|/// Extracts a debug info entry, which is a child of a given unit,
comment|/// starting at a given offset. If DIE can't be extracted, returns false and
comment|/// doesn't change OffsetPtr.
name|bool
name|extractFast
parameter_list|(
specifier|const
name|DWARFUnit
modifier|*
name|U
parameter_list|,
name|uint32_t
modifier|*
name|OffsetPtr
parameter_list|)
function_decl|;
name|uint32_t
name|getTag
argument_list|()
specifier|const
block|{
return|return
name|AbbrevDecl
operator|?
name|AbbrevDecl
operator|->
name|getTag
argument_list|()
operator|:
literal|0
return|;
block|}
name|bool
name|isNULL
argument_list|()
specifier|const
block|{
return|return
name|AbbrevDecl
operator|==
name|nullptr
return|;
block|}
comment|/// Returns true if DIE represents a subprogram (not inlined).
name|bool
name|isSubprogramDIE
argument_list|()
specifier|const
expr_stmt|;
comment|/// Returns true if DIE represents a subprogram or an inlined
comment|/// subroutine.
name|bool
name|isSubroutineDIE
argument_list|()
specifier|const
expr_stmt|;
name|uint32_t
name|getOffset
argument_list|()
specifier|const
block|{
return|return
name|Offset
return|;
block|}
name|bool
name|hasChildren
argument_list|()
specifier|const
block|{
return|return
operator|!
name|isNULL
argument_list|()
operator|&&
name|AbbrevDecl
operator|->
name|hasChildren
argument_list|()
return|;
block|}
comment|// We know we are kept in a vector of contiguous entries, so we know
comment|// our sibling will be some index after "this".
specifier|const
name|DWARFDebugInfoEntryMinimal
operator|*
name|getSibling
argument_list|()
specifier|const
block|{
return|return
name|SiblingIdx
operator|>
literal|0
operator|?
name|this
operator|+
name|SiblingIdx
operator|:
name|nullptr
return|;
block|}
comment|// We know we are kept in a vector of contiguous entries, so we know
comment|// we don't need to store our child pointer, if we have a child it will
comment|// be the next entry in the list...
specifier|const
name|DWARFDebugInfoEntryMinimal
operator|*
name|getFirstChild
argument_list|()
specifier|const
block|{
return|return
name|hasChildren
argument_list|()
operator|?
name|this
operator|+
literal|1
operator|:
name|nullptr
return|;
block|}
name|void
name|setSibling
parameter_list|(
specifier|const
name|DWARFDebugInfoEntryMinimal
modifier|*
name|Sibling
parameter_list|)
block|{
if|if
condition|(
name|Sibling
condition|)
block|{
comment|// We know we are kept in a vector of contiguous entries, so we know
comment|// our sibling will be some index after "this".
name|SiblingIdx
operator|=
name|Sibling
operator|-
name|this
expr_stmt|;
block|}
else|else
name|SiblingIdx
operator|=
literal|0
expr_stmt|;
block|}
specifier|const
name|DWARFAbbreviationDeclaration
operator|*
name|getAbbreviationDeclarationPtr
argument_list|()
specifier|const
block|{
return|return
name|AbbrevDecl
return|;
block|}
name|bool
name|getAttributeValue
argument_list|(
specifier|const
name|DWARFUnit
operator|*
name|U
argument_list|,
specifier|const
name|uint16_t
name|Attr
argument_list|,
name|DWARFFormValue
operator|&
name|FormValue
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|char
modifier|*
name|getAttributeValueAsString
argument_list|(
specifier|const
name|DWARFUnit
operator|*
name|U
argument_list|,
specifier|const
name|uint16_t
name|Attr
argument_list|,
specifier|const
name|char
operator|*
name|FailValue
argument_list|)
decl|const
decl_stmt|;
name|uint64_t
name|getAttributeValueAsAddress
argument_list|(
specifier|const
name|DWARFUnit
operator|*
name|U
argument_list|,
specifier|const
name|uint16_t
name|Attr
argument_list|,
name|uint64_t
name|FailValue
argument_list|)
decl|const
decl_stmt|;
name|uint64_t
name|getAttributeValueAsUnsignedConstant
argument_list|(
specifier|const
name|DWARFUnit
operator|*
name|U
argument_list|,
specifier|const
name|uint16_t
name|Attr
argument_list|,
name|uint64_t
name|FailValue
argument_list|)
decl|const
decl_stmt|;
name|uint64_t
name|getAttributeValueAsReference
argument_list|(
specifier|const
name|DWARFUnit
operator|*
name|U
argument_list|,
specifier|const
name|uint16_t
name|Attr
argument_list|,
name|uint64_t
name|FailValue
argument_list|)
decl|const
decl_stmt|;
name|uint64_t
name|getAttributeValueAsSectionOffset
argument_list|(
specifier|const
name|DWARFUnit
operator|*
name|U
argument_list|,
specifier|const
name|uint16_t
name|Attr
argument_list|,
name|uint64_t
name|FailValue
argument_list|)
decl|const
decl_stmt|;
name|uint64_t
name|getRangesBaseAttribute
argument_list|(
specifier|const
name|DWARFUnit
operator|*
name|U
argument_list|,
name|uint64_t
name|FailValue
argument_list|)
decl|const
decl_stmt|;
comment|/// Retrieves DW_AT_low_pc and DW_AT_high_pc from CU.
comment|/// Returns true if both attributes are present.
name|bool
name|getLowAndHighPC
argument_list|(
specifier|const
name|DWARFUnit
operator|*
name|U
argument_list|,
name|uint64_t
operator|&
name|LowPC
argument_list|,
name|uint64_t
operator|&
name|HighPC
argument_list|)
decl|const
decl_stmt|;
name|DWARFAddressRangesVector
name|getAddressRanges
argument_list|(
specifier|const
name|DWARFUnit
operator|*
name|U
argument_list|)
decl|const
decl_stmt|;
name|void
name|collectChildrenAddressRanges
argument_list|(
specifier|const
name|DWARFUnit
operator|*
name|U
argument_list|,
name|DWARFAddressRangesVector
operator|&
name|Ranges
argument_list|)
decl|const
decl_stmt|;
name|bool
name|addressRangeContainsAddress
argument_list|(
specifier|const
name|DWARFUnit
operator|*
name|U
argument_list|,
specifier|const
name|uint64_t
name|Address
argument_list|)
decl|const
decl_stmt|;
comment|/// If a DIE represents a subprogram (or inlined subroutine),
comment|/// returns its mangled name (or short name, if mangled is missing).
comment|/// This name may be fetched from specification or abstract origin
comment|/// for this subprogram. Returns null if no name is found.
specifier|const
name|char
modifier|*
name|getSubroutineName
argument_list|(
specifier|const
name|DWARFUnit
operator|*
name|U
argument_list|,
name|DINameKind
name|Kind
argument_list|)
decl|const
decl_stmt|;
comment|/// Return the DIE name resolving DW_AT_sepcification or
comment|/// DW_AT_abstract_origin references if necessary.
comment|/// Returns null if no name is found.
specifier|const
name|char
modifier|*
name|getName
argument_list|(
specifier|const
name|DWARFUnit
operator|*
name|U
argument_list|,
name|DINameKind
name|Kind
argument_list|)
decl|const
decl_stmt|;
comment|/// Retrieves values of DW_AT_call_file, DW_AT_call_line and
comment|/// DW_AT_call_column from DIE (or zeroes if they are missing).
name|void
name|getCallerFrame
argument_list|(
specifier|const
name|DWARFUnit
operator|*
name|U
argument_list|,
name|uint32_t
operator|&
name|CallFile
argument_list|,
name|uint32_t
operator|&
name|CallLine
argument_list|,
name|uint32_t
operator|&
name|CallColumn
argument_list|)
decl|const
decl_stmt|;
comment|/// Get inlined chain for a given address, rooted at the current DIE.
comment|/// Returns empty chain if address is not contained in address range
comment|/// of current DIE.
name|DWARFDebugInfoEntryInlinedChain
name|getInlinedChainForAddress
argument_list|(
specifier|const
name|DWARFUnit
operator|*
name|U
argument_list|,
specifier|const
name|uint64_t
name|Address
argument_list|)
decl|const
decl_stmt|;
block|}
empty_stmt|;
comment|/// DWARFDebugInfoEntryInlinedChain - represents a chain of inlined_subroutine
comment|/// DIEs, (possibly ending with subprogram DIE), all of which are contained
comment|/// in some concrete inlined instance tree. Address range for each DIE
comment|/// (except the last DIE) in this chain is contained in address
comment|/// range for next DIE in the chain.
struct|struct
name|DWARFDebugInfoEntryInlinedChain
block|{
name|DWARFDebugInfoEntryInlinedChain
argument_list|()
operator|:
name|U
argument_list|(
argument|nullptr
argument_list|)
block|{}
name|SmallVector
operator|<
name|DWARFDebugInfoEntryMinimal
operator|,
literal|4
operator|>
name|DIEs
expr_stmt|;
specifier|const
name|DWARFUnit
modifier|*
name|U
decl_stmt|;
block|}
struct|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

