begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- TpiHashing.h ---------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_PDB_TPIHASHING_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_PDB_TPIHASHING_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/Optional.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringExtras.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/TypeIndex.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/TypeRecord.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/PDB/Native/RawError.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/BinaryStreamArray.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Endian.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Error.h"
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|pdb
block|{
name|class
name|TpiHashUpdater
range|:
name|public
name|codeview
operator|::
name|TypeVisitorCallbacks
block|{
name|public
operator|:
name|TpiHashUpdater
argument_list|()
operator|=
expr|default
block|;
define|#
directive|define
name|TYPE_RECORD
parameter_list|(
name|EnumName
parameter_list|,
name|EnumVal
parameter_list|,
name|Name
parameter_list|)
define|\
value|virtual Error visitKnownRecord(codeview::CVType&CVR,                        \                                  codeview::Name##Record&Record) override {    \     visitKnownRecordImpl(CVR, Record);                                         \     return Error::success();                                                   \   }
define|#
directive|define
name|TYPE_RECORD_ALIAS
parameter_list|(
name|EnumName
parameter_list|,
name|EnumVal
parameter_list|,
name|Name
parameter_list|,
name|AliasName
parameter_list|)
define|#
directive|define
name|MEMBER_RECORD
parameter_list|(
name|EnumName
parameter_list|,
name|EnumVal
parameter_list|,
name|Name
parameter_list|)
define|#
directive|define
name|MEMBER_RECORD_ALIAS
parameter_list|(
name|EnumName
parameter_list|,
name|EnumVal
parameter_list|,
name|Name
parameter_list|,
name|AliasName
parameter_list|)
include|#
directive|include
file|"llvm/DebugInfo/CodeView/TypeRecords.def"
name|private
operator|:
name|template
operator|<
name|typename
name|RecordKind
operator|>
name|void
name|visitKnownRecordImpl
argument_list|(
argument|codeview::CVType&CVR
argument_list|,
argument|RecordKind&Record
argument_list|)
block|{
name|CVR
operator|.
name|Hash
operator|=
literal|0
block|;   }
name|void
name|visitKnownRecordImpl
argument_list|(
name|codeview
operator|::
name|CVType
operator|&
name|CVR
argument_list|,
name|codeview
operator|::
name|UdtSourceLineRecord
operator|&
name|Rec
argument_list|)
block|;
name|void
name|visitKnownRecordImpl
argument_list|(
name|codeview
operator|::
name|CVType
operator|&
name|CVR
argument_list|,
name|codeview
operator|::
name|UdtModSourceLineRecord
operator|&
name|Rec
argument_list|)
block|;
name|void
name|visitKnownRecordImpl
argument_list|(
name|codeview
operator|::
name|CVType
operator|&
name|CVR
argument_list|,
name|codeview
operator|::
name|ClassRecord
operator|&
name|Rec
argument_list|)
block|;
name|void
name|visitKnownRecordImpl
argument_list|(
name|codeview
operator|::
name|CVType
operator|&
name|CVR
argument_list|,
name|codeview
operator|::
name|EnumRecord
operator|&
name|Rec
argument_list|)
block|;
name|void
name|visitKnownRecordImpl
argument_list|(
name|codeview
operator|::
name|CVType
operator|&
name|CVR
argument_list|,
name|codeview
operator|::
name|UnionRecord
operator|&
name|Rec
argument_list|)
block|; }
decl_stmt|;
name|class
name|TpiHashVerifier
range|:
name|public
name|codeview
operator|::
name|TypeVisitorCallbacks
block|{
name|public
operator|:
name|TpiHashVerifier
argument_list|(
argument|FixedStreamArray<support::ulittle32_t>&HashValues
argument_list|,
argument|uint32_t NumHashBuckets
argument_list|)
operator|:
name|HashValues
argument_list|(
name|HashValues
argument_list|)
block|,
name|NumHashBuckets
argument_list|(
argument|NumHashBuckets
argument_list|)
block|{}
name|Error
name|visitKnownRecord
argument_list|(
argument|codeview::CVType&CVR
argument_list|,
argument|codeview::UdtSourceLineRecord&Rec
argument_list|)
name|override
block|;
name|Error
name|visitKnownRecord
argument_list|(
argument|codeview::CVType&CVR
argument_list|,
argument|codeview::UdtModSourceLineRecord&Rec
argument_list|)
name|override
block|;
name|Error
name|visitKnownRecord
argument_list|(
argument|codeview::CVType&CVR
argument_list|,
argument|codeview::ClassRecord&Rec
argument_list|)
name|override
block|;
name|Error
name|visitKnownRecord
argument_list|(
argument|codeview::CVType&CVR
argument_list|,
argument|codeview::EnumRecord&Rec
argument_list|)
name|override
block|;
name|Error
name|visitKnownRecord
argument_list|(
argument|codeview::CVType&CVR
argument_list|,
argument|codeview::UnionRecord&Rec
argument_list|)
name|override
block|;
name|Error
name|visitTypeBegin
argument_list|(
argument|codeview::CVType&CVR
argument_list|)
name|override
block|;
name|private
operator|:
name|Error
name|verifySourceLine
argument_list|(
argument|codeview::TypeIndex TI
argument_list|)
block|;
name|Error
name|errorInvalidHash
argument_list|()
block|{
return|return
name|make_error
operator|<
name|RawError
operator|>
operator|(
name|raw_error_code
operator|::
name|invalid_tpi_hash
expr|,
literal|"Type index is 0x"
operator|+
name|utohexstr
argument_list|(
name|codeview
operator|::
name|TypeIndex
operator|::
name|FirstNonSimpleIndex
operator|+
name|Index
argument_list|)
operator|)
return|;
block|}
name|FixedStreamArray
operator|<
name|support
operator|::
name|ulittle32_t
operator|>
name|HashValues
block|;
name|codeview
operator|::
name|CVType
name|RawRecord
block|;
name|uint32_t
name|NumHashBuckets
block|;
name|uint32_t
name|Index
operator|=
operator|-
literal|1
block|; }
decl_stmt|;
block|}
comment|// end namespace pdb
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_DEBUGINFO_PDB_TPIHASHING_H
end_comment

end_unit

