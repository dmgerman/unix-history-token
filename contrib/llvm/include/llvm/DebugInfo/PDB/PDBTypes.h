begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- PDBTypes.h - Defines enums for various fields contained in PDB ---*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_PDB_PDBTYPES_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_PDB_PDBTYPES_H
end_define

begin_include
include|#
directive|include
file|"llvm/Config/llvm-config.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Endian.h"
end_include

begin_include
include|#
directive|include
file|<functional>
end_include

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|PDBSymDumper
decl_stmt|;
name|class
name|PDBSymbol
decl_stmt|;
name|class
name|IPDBDataStream
decl_stmt|;
name|template
operator|<
name|class
name|T
operator|>
name|class
name|IPDBEnumChildren
expr_stmt|;
name|class
name|IPDBLineNumber
decl_stmt|;
name|class
name|IPDBRawSymbol
decl_stmt|;
name|class
name|IPDBSession
decl_stmt|;
name|class
name|IPDBSourceFile
decl_stmt|;
typedef|typedef
name|IPDBEnumChildren
operator|<
name|PDBSymbol
operator|>
name|IPDBEnumSymbols
expr_stmt|;
typedef|typedef
name|IPDBEnumChildren
operator|<
name|IPDBSourceFile
operator|>
name|IPDBEnumSourceFiles
expr_stmt|;
typedef|typedef
name|IPDBEnumChildren
operator|<
name|IPDBDataStream
operator|>
name|IPDBEnumDataStreams
expr_stmt|;
typedef|typedef
name|IPDBEnumChildren
operator|<
name|IPDBLineNumber
operator|>
name|IPDBEnumLineNumbers
expr_stmt|;
name|class
name|PDBSymbolExe
decl_stmt|;
name|class
name|PDBSymbolCompiland
decl_stmt|;
name|class
name|PDBSymbolCompilandDetails
decl_stmt|;
name|class
name|PDBSymbolCompilandEnv
decl_stmt|;
name|class
name|PDBSymbolFunc
decl_stmt|;
name|class
name|PDBSymbolBlock
decl_stmt|;
name|class
name|PDBSymbolData
decl_stmt|;
name|class
name|PDBSymbolAnnotation
decl_stmt|;
name|class
name|PDBSymbolLabel
decl_stmt|;
name|class
name|PDBSymbolPublicSymbol
decl_stmt|;
name|class
name|PDBSymbolTypeUDT
decl_stmt|;
name|class
name|PDBSymbolTypeEnum
decl_stmt|;
name|class
name|PDBSymbolTypeFunctionSig
decl_stmt|;
name|class
name|PDBSymbolTypePointer
decl_stmt|;
name|class
name|PDBSymbolTypeArray
decl_stmt|;
name|class
name|PDBSymbolTypeBuiltin
decl_stmt|;
name|class
name|PDBSymbolTypeTypedef
decl_stmt|;
name|class
name|PDBSymbolTypeBaseClass
decl_stmt|;
name|class
name|PDBSymbolTypeFriend
decl_stmt|;
name|class
name|PDBSymbolTypeFunctionArg
decl_stmt|;
name|class
name|PDBSymbolFuncDebugStart
decl_stmt|;
name|class
name|PDBSymbolFuncDebugEnd
decl_stmt|;
name|class
name|PDBSymbolUsingNamespace
decl_stmt|;
name|class
name|PDBSymbolTypeVTableShape
decl_stmt|;
name|class
name|PDBSymbolTypeVTable
decl_stmt|;
name|class
name|PDBSymbolCustom
decl_stmt|;
name|class
name|PDBSymbolThunk
decl_stmt|;
name|class
name|PDBSymbolTypeCustom
decl_stmt|;
name|class
name|PDBSymbolTypeManaged
decl_stmt|;
name|class
name|PDBSymbolTypeDimension
decl_stmt|;
name|class
name|PDBSymbolUnknown
decl_stmt|;
comment|/// Specifies which PDB reader implementation is to be used.  Only a value
comment|/// of PDB_ReaderType::DIA is supported.
name|enum
name|class
name|PDB_ReaderType
block|{
name|DIA
operator|=
literal|0
operator|,
block|}
empty_stmt|;
comment|/// Defines a 128-bit unique identifier.  This maps to a GUID on Windows, but
comment|/// is abstracted here for the purposes of non-Windows platforms that don't have
comment|/// the GUID structure defined.
struct|struct
name|PDB_UniqueId
block|{
name|uint64_t
name|HighPart
decl_stmt|;
name|uint64_t
name|LowPart
decl_stmt|;
block|}
struct|;
comment|/// An enumeration indicating the type of data contained in this table.
name|enum
name|class
name|PDB_TableType
block|{
name|Symbols
operator|,
name|SourceFiles
operator|,
name|LineNumbers
operator|,
name|SectionContribs
operator|,
name|Segments
operator|,
name|InjectedSources
operator|,
name|FrameData
block|}
empty_stmt|;
comment|/// Defines flags used for enumerating child symbols.  This corresponds to the
comment|/// NameSearchOptions enumeration which is documented here:
comment|/// https://msdn.microsoft.com/en-us/library/yat28ads.aspx
enum|enum
name|PDB_NameSearchFlags
block|{
name|NS_Default
init|=
literal|0x0
block|,
name|NS_CaseSensitive
init|=
literal|0x1
block|,
name|NS_CaseInsensitive
init|=
literal|0x2
block|,
name|NS_FileNameExtMatch
init|=
literal|0x4
block|,
name|NS_Regex
init|=
literal|0x8
block|,
name|NS_UndecoratedName
init|=
literal|0x10
block|}
enum|;
comment|/// Specifies the hash algorithm that a source file from a PDB was hashed with.
comment|/// This corresponds to the CV_SourceChksum_t enumeration and are documented
comment|/// here: https://msdn.microsoft.com/en-us/library/e96az21x.aspx
name|enum
name|class
name|PDB_Checksum
block|{
name|None
operator|=
literal|0
operator|,
name|MD5
operator|=
literal|1
operator|,
name|SHA1
operator|=
literal|2
block|}
empty_stmt|;
comment|/// These values correspond to the CV_CPU_TYPE_e enumeration, and are documented
comment|/// here: https://msdn.microsoft.com/en-us/library/b2fc64ek.aspx
name|enum
name|class
name|PDB_Cpu
block|{
name|Intel8080
operator|=
literal|0x0
operator|,
name|Intel8086
operator|=
literal|0x1
operator|,
name|Intel80286
operator|=
literal|0x2
operator|,
name|Intel80386
operator|=
literal|0x3
operator|,
name|Intel80486
operator|=
literal|0x4
operator|,
name|Pentium
operator|=
literal|0x5
operator|,
name|PentiumPro
operator|=
literal|0x6
operator|,
name|Pentium3
operator|=
literal|0x7
operator|,
name|MIPS
operator|=
literal|0x10
operator|,
name|MIPS16
operator|=
literal|0x11
operator|,
name|MIPS32
operator|=
literal|0x12
operator|,
name|MIPS64
operator|=
literal|0x13
operator|,
name|MIPSI
operator|=
literal|0x14
operator|,
name|MIPSII
operator|=
literal|0x15
operator|,
name|MIPSIII
operator|=
literal|0x16
operator|,
name|MIPSIV
operator|=
literal|0x17
operator|,
name|MIPSV
operator|=
literal|0x18
operator|,
name|M68000
operator|=
literal|0x20
operator|,
name|M68010
operator|=
literal|0x21
operator|,
name|M68020
operator|=
literal|0x22
operator|,
name|M68030
operator|=
literal|0x23
operator|,
name|M68040
operator|=
literal|0x24
operator|,
name|Alpha
operator|=
literal|0x30
operator|,
name|Alpha21164
operator|=
literal|0x31
operator|,
name|Alpha21164A
operator|=
literal|0x32
operator|,
name|Alpha21264
operator|=
literal|0x33
operator|,
name|Alpha21364
operator|=
literal|0x34
operator|,
name|PPC601
operator|=
literal|0x40
operator|,
name|PPC603
operator|=
literal|0x41
operator|,
name|PPC604
operator|=
literal|0x42
operator|,
name|PPC620
operator|=
literal|0x43
operator|,
name|PPCFP
operator|=
literal|0x44
operator|,
name|PPCBE
operator|=
literal|0x45
operator|,
name|SH3
operator|=
literal|0x50
operator|,
name|SH3E
operator|=
literal|0x51
operator|,
name|SH3DSP
operator|=
literal|0x52
operator|,
name|SH4
operator|=
literal|0x53
operator|,
name|SHMedia
operator|=
literal|0x54
operator|,
name|ARM3
operator|=
literal|0x60
operator|,
name|ARM4
operator|=
literal|0x61
operator|,
name|ARM4T
operator|=
literal|0x62
operator|,
name|ARM5
operator|=
literal|0x63
operator|,
name|ARM5T
operator|=
literal|0x64
operator|,
name|ARM6
operator|=
literal|0x65
operator|,
name|ARM_XMAC
operator|=
literal|0x66
operator|,
name|ARM_WMMX
operator|=
literal|0x67
operator|,
name|ARM7
operator|=
literal|0x68
operator|,
name|Omni
operator|=
literal|0x70
operator|,
name|Ia64
operator|=
literal|0x80
operator|,
name|Ia64_2
operator|=
literal|0x81
operator|,
name|CEE
operator|=
literal|0x90
operator|,
name|AM33
operator|=
literal|0xa0
operator|,
name|M32R
operator|=
literal|0xb0
operator|,
name|TriCore
operator|=
literal|0xc0
operator|,
name|X64
operator|=
literal|0xd0
operator|,
name|EBC
operator|=
literal|0xe0
operator|,
name|Thumb
operator|=
literal|0xf0
operator|,
name|ARMNT
operator|=
literal|0xf4
operator|,
name|D3D11_Shader
operator|=
literal|0x100
operator|,
block|}
empty_stmt|;
name|enum
name|class
name|PDB_Machine
block|{
name|Invalid
operator|=
literal|0xffff
operator|,
name|Unknown
operator|=
literal|0x0
operator|,
name|Am33
operator|=
literal|0x13
operator|,
name|Amd64
operator|=
literal|0x8664
operator|,
name|Arm
operator|=
literal|0x1C0
operator|,
name|ArmNT
operator|=
literal|0x1C4
operator|,
name|Ebc
operator|=
literal|0xEBC
operator|,
name|x86
operator|=
literal|0x14C
operator|,
name|Ia64
operator|=
literal|0x200
operator|,
name|M32R
operator|=
literal|0x9041
operator|,
name|Mips16
operator|=
literal|0x266
operator|,
name|MipsFpu
operator|=
literal|0x366
operator|,
name|MipsFpu16
operator|=
literal|0x466
operator|,
name|PowerPC
operator|=
literal|0x1F0
operator|,
name|PowerPCFP
operator|=
literal|0x1F1
operator|,
name|R4000
operator|=
literal|0x166
operator|,
name|SH3
operator|=
literal|0x1A2
operator|,
name|SH3DSP
operator|=
literal|0x1A3
operator|,
name|SH4
operator|=
literal|0x1A6
operator|,
name|SH5
operator|=
literal|0x1A8
operator|,
name|Thumb
operator|=
literal|0x1C2
operator|,
name|WceMipsV2
operator|=
literal|0x169
block|}
empty_stmt|;
comment|/// These values correspond to the CV_call_e enumeration, and are documented
comment|/// at the following locations:
comment|///   https://msdn.microsoft.com/en-us/library/b2fc64ek.aspx
comment|///   https://msdn.microsoft.com/en-us/library/windows/desktop/ms680207(v=vs.85).aspx
comment|///
name|enum
name|class
name|PDB_CallingConv
block|{
name|NearCdecl
operator|=
literal|0x00
operator|,
name|FarCdecl
operator|=
literal|0x01
operator|,
name|NearPascal
operator|=
literal|0x02
operator|,
name|FarPascal
operator|=
literal|0x03
operator|,
name|NearFastcall
operator|=
literal|0x04
operator|,
name|FarFastcall
operator|=
literal|0x05
operator|,
name|Skipped
operator|=
literal|0x06
operator|,
name|NearStdcall
operator|=
literal|0x07
operator|,
name|FarStdcall
operator|=
literal|0x08
operator|,
name|NearSyscall
operator|=
literal|0x09
operator|,
name|FarSyscall
operator|=
literal|0x0a
operator|,
name|Thiscall
operator|=
literal|0x0b
operator|,
name|MipsCall
operator|=
literal|0x0c
operator|,
name|Generic
operator|=
literal|0x0d
operator|,
name|Alphacall
operator|=
literal|0x0e
operator|,
name|Ppccall
operator|=
literal|0x0f
operator|,
name|SuperHCall
operator|=
literal|0x10
operator|,
name|Armcall
operator|=
literal|0x11
operator|,
name|AM33call
operator|=
literal|0x12
operator|,
name|Tricall
operator|=
literal|0x13
operator|,
name|Sh5call
operator|=
literal|0x14
operator|,
name|M32R
operator|=
literal|0x15
operator|,
name|Clrcall
operator|=
literal|0x16
operator|,
name|Inline
operator|=
literal|0x17
operator|,
name|NearVectorcall
operator|=
literal|0x18
operator|,
name|Reserved
operator|=
literal|0x19
operator|,
block|}
empty_stmt|;
comment|/// These values correspond to the CV_CFL_LANG enumeration, and are documented
comment|/// here: https://msdn.microsoft.com/en-us/library/bw3aekw6.aspx
name|enum
name|class
name|PDB_Lang
block|{
name|C
operator|=
literal|0x00
operator|,
name|Cpp
operator|=
literal|0x01
operator|,
name|Fortran
operator|=
literal|0x02
operator|,
name|Masm
operator|=
literal|0x03
operator|,
name|Pascal
operator|=
literal|0x04
operator|,
name|Basic
operator|=
literal|0x05
operator|,
name|Cobol
operator|=
literal|0x06
operator|,
name|Link
operator|=
literal|0x07
operator|,
name|Cvtres
operator|=
literal|0x08
operator|,
name|Cvtpgd
operator|=
literal|0x09
operator|,
name|CSharp
operator|=
literal|0x0a
operator|,
name|VB
operator|=
literal|0x0b
operator|,
name|ILAsm
operator|=
literal|0x0c
operator|,
name|Java
operator|=
literal|0x0d
operator|,
name|JScript
operator|=
literal|0x0e
operator|,
name|MSIL
operator|=
literal|0x0f
operator|,
name|HLSL
operator|=
literal|0x10
block|}
empty_stmt|;
comment|/// These values correspond to the DataKind enumeration, and are documented
comment|/// here: https://msdn.microsoft.com/en-us/library/b2x2t313.aspx
name|enum
name|class
name|PDB_DataKind
block|{
name|Unknown
operator|,
name|Local
operator|,
name|StaticLocal
operator|,
name|Param
operator|,
name|ObjectPtr
operator|,
name|FileStatic
operator|,
name|Global
operator|,
name|Member
operator|,
name|StaticMember
operator|,
name|Constant
block|}
empty_stmt|;
comment|/// These values correspond to the SymTagEnum enumeration, and are documented
comment|/// here: https://msdn.microsoft.com/en-us/library/bkedss5f.aspx
name|enum
name|class
name|PDB_SymType
block|{
name|None
operator|,
name|Exe
operator|,
name|Compiland
operator|,
name|CompilandDetails
operator|,
name|CompilandEnv
operator|,
name|Function
operator|,
name|Block
operator|,
name|Data
operator|,
name|Annotation
operator|,
name|Label
operator|,
name|PublicSymbol
operator|,
name|UDT
operator|,
name|Enum
operator|,
name|FunctionSig
operator|,
name|PointerType
operator|,
name|ArrayType
operator|,
name|BuiltinType
operator|,
name|Typedef
operator|,
name|BaseClass
operator|,
name|Friend
operator|,
name|FunctionArg
operator|,
name|FuncDebugStart
operator|,
name|FuncDebugEnd
operator|,
name|UsingNamespace
operator|,
name|VTableShape
operator|,
name|VTable
operator|,
name|Custom
operator|,
name|Thunk
operator|,
name|CustomType
operator|,
name|ManagedType
operator|,
name|Dimension
operator|,
name|Max
block|}
empty_stmt|;
comment|/// These values correspond to the LocationType enumeration, and are documented
comment|/// here: https://msdn.microsoft.com/en-us/library/f57kaez3.aspx
name|enum
name|class
name|PDB_LocType
block|{
name|Null
operator|,
name|Static
operator|,
name|TLS
operator|,
name|RegRel
operator|,
name|ThisRel
operator|,
name|Enregistered
operator|,
name|BitField
operator|,
name|Slot
operator|,
name|IlRel
operator|,
name|MetaData
operator|,
name|Constant
operator|,
name|Max
block|}
empty_stmt|;
comment|/// These values correspond to the THUNK_ORDINAL enumeration, and are documented
comment|/// here: https://msdn.microsoft.com/en-us/library/dh0k8hft.aspx
name|enum
name|class
name|PDB_ThunkOrdinal
block|{
name|Standard
operator|,
name|ThisAdjustor
operator|,
name|Vcall
operator|,
name|Pcode
operator|,
name|UnknownLoad
operator|,
name|TrampIncremental
operator|,
name|BranchIsland
block|}
empty_stmt|;
comment|/// These values correspond to the UdtKind enumeration, and are documented
comment|/// here: https://msdn.microsoft.com/en-us/library/wcstk66t.aspx
name|enum
name|class
name|PDB_UdtType
block|{
name|Struct
operator|,
name|Class
operator|,
name|Union
operator|,
name|Interface
block|}
empty_stmt|;
comment|/// These values correspond to the StackFrameTypeEnum enumeration, and are
comment|/// documented here: https://msdn.microsoft.com/en-us/library/bc5207xw.aspx.
name|enum
name|class
name|PDB_StackFrameType
block|{
name|FPO
operator|,
name|KernelTrap
operator|,
name|KernelTSS
operator|,
name|EBP
operator|,
name|FrameData
block|}
empty_stmt|;
comment|/// These values correspond to the StackFrameTypeEnum enumeration, and are
comment|/// documented here: https://msdn.microsoft.com/en-us/library/bc5207xw.aspx.
name|enum
name|class
name|PDB_MemoryType
block|{
name|Code
operator|,
name|Data
operator|,
name|Stack
operator|,
name|HeapCode
block|}
empty_stmt|;
comment|/// These values correspond to the Basictype enumeration, and are documented
comment|/// here: https://msdn.microsoft.com/en-us/library/4szdtzc3.aspx
name|enum
name|class
name|PDB_BuiltinType
block|{
name|None
operator|=
literal|0
operator|,
name|Void
operator|=
literal|1
operator|,
name|Char
operator|=
literal|2
operator|,
name|WCharT
operator|=
literal|3
operator|,
name|Int
operator|=
literal|6
operator|,
name|UInt
operator|=
literal|7
operator|,
name|Float
operator|=
literal|8
operator|,
name|BCD
operator|=
literal|9
operator|,
name|Bool
operator|=
literal|10
operator|,
name|Long
operator|=
literal|13
operator|,
name|ULong
operator|=
literal|14
operator|,
name|Currency
operator|=
literal|25
operator|,
name|Date
operator|=
literal|26
operator|,
name|Variant
operator|=
literal|27
operator|,
name|Complex
operator|=
literal|28
operator|,
name|Bitfield
operator|=
literal|29
operator|,
name|BSTR
operator|=
literal|30
operator|,
name|HResult
operator|=
literal|31
block|}
empty_stmt|;
name|enum
name|class
name|PDB_RegisterId
block|{
name|Unknown
operator|=
literal|0
operator|,
name|VFrame
operator|=
literal|30006
operator|,
name|AL
operator|=
literal|1
operator|,
name|CL
operator|=
literal|2
operator|,
name|DL
operator|=
literal|3
operator|,
name|BL
operator|=
literal|4
operator|,
name|AH
operator|=
literal|5
operator|,
name|CH
operator|=
literal|6
operator|,
name|DH
operator|=
literal|7
operator|,
name|BH
operator|=
literal|8
operator|,
name|AX
operator|=
literal|9
operator|,
name|CX
operator|=
literal|10
operator|,
name|DX
operator|=
literal|11
operator|,
name|BX
operator|=
literal|12
operator|,
name|SP
operator|=
literal|13
operator|,
name|BP
operator|=
literal|14
operator|,
name|SI
operator|=
literal|15
operator|,
name|DI
operator|=
literal|16
operator|,
name|EAX
operator|=
literal|17
operator|,
name|ECX
operator|=
literal|18
operator|,
name|EDX
operator|=
literal|19
operator|,
name|EBX
operator|=
literal|20
operator|,
name|ESP
operator|=
literal|21
operator|,
name|EBP
operator|=
literal|22
operator|,
name|ESI
operator|=
literal|23
operator|,
name|EDI
operator|=
literal|24
operator|,
name|ES
operator|=
literal|25
operator|,
name|CS
operator|=
literal|26
operator|,
name|SS
operator|=
literal|27
operator|,
name|DS
operator|=
literal|28
operator|,
name|FS
operator|=
literal|29
operator|,
name|GS
operator|=
literal|30
operator|,
name|IP
operator|=
literal|31
operator|,
name|RAX
operator|=
literal|328
operator|,
name|RBX
operator|=
literal|329
operator|,
name|RCX
operator|=
literal|330
operator|,
name|RDX
operator|=
literal|331
operator|,
name|RSI
operator|=
literal|332
operator|,
name|RDI
operator|=
literal|333
operator|,
name|RBP
operator|=
literal|334
operator|,
name|RSP
operator|=
literal|335
operator|,
name|R8
operator|=
literal|336
operator|,
name|R9
operator|=
literal|337
operator|,
name|R10
operator|=
literal|338
operator|,
name|R11
operator|=
literal|339
operator|,
name|R12
operator|=
literal|340
operator|,
name|R13
operator|=
literal|341
operator|,
name|R14
operator|=
literal|342
operator|,
name|R15
operator|=
literal|343
operator|,
block|}
empty_stmt|;
name|enum
name|class
name|PDB_MemberAccess
block|{
name|Private
operator|=
literal|1
operator|,
name|Protected
operator|=
literal|2
operator|,
name|Public
operator|=
literal|3
block|}
empty_stmt|;
name|enum
name|class
name|PDB_ErrorCode
block|{
name|Success
operator|,
name|NoPdbImpl
operator|,
name|InvalidPath
operator|,
name|InvalidFileFormat
operator|,
name|InvalidParameter
operator|,
name|AlreadyLoaded
operator|,
name|UnknownError
operator|,
name|NoMemory
operator|,
name|DebugInfoMismatch
block|}
empty_stmt|;
struct|struct
name|VersionInfo
block|{
name|uint32_t
name|Major
decl_stmt|;
name|uint32_t
name|Minor
decl_stmt|;
name|uint32_t
name|Build
decl_stmt|;
name|uint32_t
name|QFE
decl_stmt|;
block|}
struct|;
enum|enum
name|PDB_VariantType
block|{
name|Empty
block|,
name|Unknown
block|,
name|Int8
block|,
name|Int16
block|,
name|Int32
block|,
name|Int64
block|,
name|Single
block|,
name|Double
block|,
name|UInt8
block|,
name|UInt16
block|,
name|UInt32
block|,
name|UInt64
block|,
name|Bool
block|, }
enum|;
struct|struct
name|Variant
block|{
name|Variant
argument_list|()
operator|:
name|Type
argument_list|(
argument|PDB_VariantType::Empty
argument_list|)
block|{   }
name|PDB_VariantType
name|Type
expr_stmt|;
union|union
block|{
name|bool
name|Bool
decl_stmt|;
name|int8_t
name|Int8
decl_stmt|;
name|int16_t
name|Int16
decl_stmt|;
name|int32_t
name|Int32
decl_stmt|;
name|int64_t
name|Int64
decl_stmt|;
name|float
name|Single
decl_stmt|;
name|double
name|Double
decl_stmt|;
name|uint8_t
name|UInt8
decl_stmt|;
name|uint16_t
name|UInt16
decl_stmt|;
name|uint32_t
name|UInt32
decl_stmt|;
name|uint64_t
name|UInt64
decl_stmt|;
block|}
union|;
define|#
directive|define
name|VARIANT_EQUAL_CASE
parameter_list|(
name|Enum
parameter_list|)
define|\
value|case PDB_VariantType::Enum:                                                  \     return Enum == Other.Enum;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|Variant
operator|&
name|Other
operator|)
specifier|const
block|{
if|if
condition|(
name|Type
operator|!=
name|Other
operator|.
name|Type
condition|)
return|return
name|false
return|;
switch|switch
condition|(
name|Type
condition|)
block|{
name|VARIANT_EQUAL_CASE
argument_list|(
argument|Bool
argument_list|)
name|VARIANT_EQUAL_CASE
argument_list|(
argument|Int8
argument_list|)
name|VARIANT_EQUAL_CASE
argument_list|(
argument|Int16
argument_list|)
name|VARIANT_EQUAL_CASE
argument_list|(
argument|Int32
argument_list|)
name|VARIANT_EQUAL_CASE
argument_list|(
argument|Int64
argument_list|)
name|VARIANT_EQUAL_CASE
argument_list|(
argument|Single
argument_list|)
name|VARIANT_EQUAL_CASE
argument_list|(
argument|Double
argument_list|)
name|VARIANT_EQUAL_CASE
argument_list|(
argument|UInt8
argument_list|)
name|VARIANT_EQUAL_CASE
argument_list|(
argument|UInt16
argument_list|)
name|VARIANT_EQUAL_CASE
argument_list|(
argument|UInt32
argument_list|)
name|VARIANT_EQUAL_CASE
argument_list|(
argument|UInt64
argument_list|)
default|default:
return|return
name|true
return|;
block|}
block|}
undef|#
directive|undef
name|VARIANT_EQUAL_CASE
name|bool
name|operator
decl|!=
argument_list|(
specifier|const
name|Variant
operator|&
name|Other
argument_list|)
decl|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|Other
operator|)
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|namespace
name|PDB
block|{
specifier|static
specifier|const
name|char
name|Magic
index|[]
init|=
block|{
literal|'M'
block|,
literal|'i'
block|,
literal|'c'
block|,
literal|'r'
block|,
literal|'o'
block|,
literal|'s'
block|,
literal|'o'
block|,
literal|'f'
block|,
literal|'t'
block|,
literal|' '
block|,
literal|'C'
block|,
literal|'/'
block|,
literal|'C'
block|,
literal|'+'
block|,
literal|'+'
block|,
literal|' '
block|,
literal|'M'
block|,
literal|'S'
block|,
literal|'F'
block|,
literal|' '
block|,
literal|'7'
block|,
literal|'.'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'\r'
block|,
literal|'\n'
block|,
literal|'\x1a'
block|,
literal|'D'
block|,
literal|'S'
block|,
literal|'\0'
block|,
literal|'\0'
block|,
literal|'\0'
block|}
decl_stmt|;
comment|// The superblock is overlaid at the beginning of the file (offset 0).
comment|// It starts with a magic header and is followed by information which describes
comment|// the layout of the file system.
struct|struct
name|SuperBlock
block|{
name|char
name|MagicBytes
index|[
sizeof|sizeof
argument_list|(
name|Magic
argument_list|)
index|]
decl_stmt|;
comment|// The file system is split into a variable number of fixed size elements.
comment|// These elements are referred to as blocks.  The size of a block may vary
comment|// from system to system.
name|support
operator|::
name|ulittle32_t
name|BlockSize
expr_stmt|;
comment|// This field's purpose is not yet known.
name|support
operator|::
name|ulittle32_t
name|Unknown0
expr_stmt|;
comment|// This contains the number of blocks resident in the file system.  In
comment|// practice, NumBlocks * BlockSize is equivalent to the size of the PDB file.
name|support
operator|::
name|ulittle32_t
name|NumBlocks
expr_stmt|;
comment|// This contains the number of bytes which make up the directory.
name|support
operator|::
name|ulittle32_t
name|NumDirectoryBytes
expr_stmt|;
comment|// This field's purpose is not yet known.
name|support
operator|::
name|ulittle32_t
name|Unknown1
expr_stmt|;
comment|// This contains the block # of the block map.
name|support
operator|::
name|ulittle32_t
name|BlockMapAddr
expr_stmt|;
block|}
struct|;
block|}
end_decl_stmt

begin_comment
unit|}
comment|// namespace llvm
end_comment

begin_macro
unit|namespace
name|std
end_macro

begin_block
block|{
name|template
operator|<
operator|>
expr|struct
name|hash
operator|<
name|llvm
operator|::
name|PDB_SymType
operator|>
block|{
typedef|typedef
name|llvm
operator|::
name|PDB_SymType
name|argument_type
expr_stmt|;
typedef|typedef
name|std
operator|::
name|size_t
name|result_type
expr_stmt|;
name|result_type
name|operator
argument_list|()
operator|(
specifier|const
name|argument_type
operator|&
name|Arg
operator|)
specifier|const
block|{
return|return
name|std
operator|::
name|hash
operator|<
name|int
operator|>
operator|(
operator|)
operator|(
name|static_cast
operator|<
name|int
operator|>
operator|(
name|Arg
operator|)
operator|)
return|;
block|}
block|}
end_block

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

end_unit

