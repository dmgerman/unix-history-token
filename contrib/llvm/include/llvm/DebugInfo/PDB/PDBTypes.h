begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- PDBTypes.h - Defines enums for various fields contained in PDB ---*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_PDB_PDBTYPES_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_PDB_PDBTYPES_H
end_define

begin_include
include|#
directive|include
file|"llvm/Config/llvm-config.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/CodeView.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/PDB/Raw/RawTypes.h"
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_include
include|#
directive|include
file|<cstring>
end_include

begin_include
include|#
directive|include
file|<functional>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|pdb
block|{
name|class
name|PDBSymDumper
decl_stmt|;
name|class
name|PDBSymbol
decl_stmt|;
name|class
name|IPDBDataStream
decl_stmt|;
name|template
operator|<
name|class
name|T
operator|>
name|class
name|IPDBEnumChildren
expr_stmt|;
name|class
name|IPDBLineNumber
decl_stmt|;
name|class
name|IPDBRawSymbol
decl_stmt|;
name|class
name|IPDBSession
decl_stmt|;
name|class
name|IPDBSourceFile
decl_stmt|;
typedef|typedef
name|IPDBEnumChildren
operator|<
name|PDBSymbol
operator|>
name|IPDBEnumSymbols
expr_stmt|;
typedef|typedef
name|IPDBEnumChildren
operator|<
name|IPDBSourceFile
operator|>
name|IPDBEnumSourceFiles
expr_stmt|;
typedef|typedef
name|IPDBEnumChildren
operator|<
name|IPDBDataStream
operator|>
name|IPDBEnumDataStreams
expr_stmt|;
typedef|typedef
name|IPDBEnumChildren
operator|<
name|IPDBLineNumber
operator|>
name|IPDBEnumLineNumbers
expr_stmt|;
name|class
name|PDBSymbolExe
decl_stmt|;
name|class
name|PDBSymbolCompiland
decl_stmt|;
name|class
name|PDBSymbolCompilandDetails
decl_stmt|;
name|class
name|PDBSymbolCompilandEnv
decl_stmt|;
name|class
name|PDBSymbolFunc
decl_stmt|;
name|class
name|PDBSymbolBlock
decl_stmt|;
name|class
name|PDBSymbolData
decl_stmt|;
name|class
name|PDBSymbolAnnotation
decl_stmt|;
name|class
name|PDBSymbolLabel
decl_stmt|;
name|class
name|PDBSymbolPublicSymbol
decl_stmt|;
name|class
name|PDBSymbolTypeUDT
decl_stmt|;
name|class
name|PDBSymbolTypeEnum
decl_stmt|;
name|class
name|PDBSymbolTypeFunctionSig
decl_stmt|;
name|class
name|PDBSymbolTypePointer
decl_stmt|;
name|class
name|PDBSymbolTypeArray
decl_stmt|;
name|class
name|PDBSymbolTypeBuiltin
decl_stmt|;
name|class
name|PDBSymbolTypeTypedef
decl_stmt|;
name|class
name|PDBSymbolTypeBaseClass
decl_stmt|;
name|class
name|PDBSymbolTypeFriend
decl_stmt|;
name|class
name|PDBSymbolTypeFunctionArg
decl_stmt|;
name|class
name|PDBSymbolFuncDebugStart
decl_stmt|;
name|class
name|PDBSymbolFuncDebugEnd
decl_stmt|;
name|class
name|PDBSymbolUsingNamespace
decl_stmt|;
name|class
name|PDBSymbolTypeVTableShape
decl_stmt|;
name|class
name|PDBSymbolTypeVTable
decl_stmt|;
name|class
name|PDBSymbolCustom
decl_stmt|;
name|class
name|PDBSymbolThunk
decl_stmt|;
name|class
name|PDBSymbolTypeCustom
decl_stmt|;
name|class
name|PDBSymbolTypeManaged
decl_stmt|;
name|class
name|PDBSymbolTypeDimension
decl_stmt|;
name|class
name|PDBSymbolUnknown
decl_stmt|;
comment|/// Specifies which PDB reader implementation is to be used.  Only a value
comment|/// of PDB_ReaderType::DIA is supported.
name|enum
name|class
name|PDB_ReaderType
block|{
name|DIA
operator|=
literal|0
operator|,
name|Raw
operator|=
literal|1
operator|,
block|}
empty_stmt|;
comment|/// An enumeration indicating the type of data contained in this table.
name|enum
name|class
name|PDB_TableType
block|{
name|Symbols
operator|,
name|SourceFiles
operator|,
name|LineNumbers
operator|,
name|SectionContribs
operator|,
name|Segments
operator|,
name|InjectedSources
operator|,
name|FrameData
block|}
empty_stmt|;
comment|/// Defines flags used for enumerating child symbols.  This corresponds to the
comment|/// NameSearchOptions enumeration which is documented here:
comment|/// https://msdn.microsoft.com/en-us/library/yat28ads.aspx
enum|enum
name|PDB_NameSearchFlags
block|{
name|NS_Default
init|=
literal|0x0
block|,
name|NS_CaseSensitive
init|=
literal|0x1
block|,
name|NS_CaseInsensitive
init|=
literal|0x2
block|,
name|NS_FileNameExtMatch
init|=
literal|0x4
block|,
name|NS_Regex
init|=
literal|0x8
block|,
name|NS_UndecoratedName
init|=
literal|0x10
block|}
enum|;
comment|/// Specifies the hash algorithm that a source file from a PDB was hashed with.
comment|/// This corresponds to the CV_SourceChksum_t enumeration and are documented
comment|/// here: https://msdn.microsoft.com/en-us/library/e96az21x.aspx
name|enum
name|class
name|PDB_Checksum
block|{
name|None
operator|=
literal|0
operator|,
name|MD5
operator|=
literal|1
operator|,
name|SHA1
operator|=
literal|2
block|}
empty_stmt|;
comment|/// These values correspond to the CV_CPU_TYPE_e enumeration, and are documented
comment|/// here: https://msdn.microsoft.com/en-us/library/b2fc64ek.aspx
typedef|typedef
name|codeview
operator|::
name|CPUType
name|PDB_Cpu
expr_stmt|;
name|enum
name|class
name|PDB_Machine
block|{
name|Invalid
operator|=
literal|0xffff
operator|,
name|Unknown
operator|=
literal|0x0
operator|,
name|Am33
operator|=
literal|0x13
operator|,
name|Amd64
operator|=
literal|0x8664
operator|,
name|Arm
operator|=
literal|0x1C0
operator|,
name|ArmNT
operator|=
literal|0x1C4
operator|,
name|Ebc
operator|=
literal|0xEBC
operator|,
name|x86
operator|=
literal|0x14C
operator|,
name|Ia64
operator|=
literal|0x200
operator|,
name|M32R
operator|=
literal|0x9041
operator|,
name|Mips16
operator|=
literal|0x266
operator|,
name|MipsFpu
operator|=
literal|0x366
operator|,
name|MipsFpu16
operator|=
literal|0x466
operator|,
name|PowerPC
operator|=
literal|0x1F0
operator|,
name|PowerPCFP
operator|=
literal|0x1F1
operator|,
name|R4000
operator|=
literal|0x166
operator|,
name|SH3
operator|=
literal|0x1A2
operator|,
name|SH3DSP
operator|=
literal|0x1A3
operator|,
name|SH4
operator|=
literal|0x1A6
operator|,
name|SH5
operator|=
literal|0x1A8
operator|,
name|Thumb
operator|=
literal|0x1C2
operator|,
name|WceMipsV2
operator|=
literal|0x169
block|}
empty_stmt|;
comment|/// These values correspond to the CV_call_e enumeration, and are documented
comment|/// at the following locations:
comment|///   https://msdn.microsoft.com/en-us/library/b2fc64ek.aspx
comment|///   https://msdn.microsoft.com/en-us/library/windows/desktop/ms680207(v=vs.85).aspx
comment|///
typedef|typedef
name|codeview
operator|::
name|CallingConvention
name|PDB_CallingConv
expr_stmt|;
comment|/// These values correspond to the CV_CFL_LANG enumeration, and are documented
comment|/// here: https://msdn.microsoft.com/en-us/library/bw3aekw6.aspx
typedef|typedef
name|codeview
operator|::
name|SourceLanguage
name|PDB_Lang
expr_stmt|;
comment|/// These values correspond to the DataKind enumeration, and are documented
comment|/// here: https://msdn.microsoft.com/en-us/library/b2x2t313.aspx
name|enum
name|class
name|PDB_DataKind
block|{
name|Unknown
operator|,
name|Local
operator|,
name|StaticLocal
operator|,
name|Param
operator|,
name|ObjectPtr
operator|,
name|FileStatic
operator|,
name|Global
operator|,
name|Member
operator|,
name|StaticMember
operator|,
name|Constant
block|}
empty_stmt|;
comment|/// These values correspond to the SymTagEnum enumeration, and are documented
comment|/// here: https://msdn.microsoft.com/en-us/library/bkedss5f.aspx
name|enum
name|class
name|PDB_SymType
block|{
name|None
operator|,
name|Exe
operator|,
name|Compiland
operator|,
name|CompilandDetails
operator|,
name|CompilandEnv
operator|,
name|Function
operator|,
name|Block
operator|,
name|Data
operator|,
name|Annotation
operator|,
name|Label
operator|,
name|PublicSymbol
operator|,
name|UDT
operator|,
name|Enum
operator|,
name|FunctionSig
operator|,
name|PointerType
operator|,
name|ArrayType
operator|,
name|BuiltinType
operator|,
name|Typedef
operator|,
name|BaseClass
operator|,
name|Friend
operator|,
name|FunctionArg
operator|,
name|FuncDebugStart
operator|,
name|FuncDebugEnd
operator|,
name|UsingNamespace
operator|,
name|VTableShape
operator|,
name|VTable
operator|,
name|Custom
operator|,
name|Thunk
operator|,
name|CustomType
operator|,
name|ManagedType
operator|,
name|Dimension
operator|,
name|Max
block|}
empty_stmt|;
comment|/// These values correspond to the LocationType enumeration, and are documented
comment|/// here: https://msdn.microsoft.com/en-us/library/f57kaez3.aspx
name|enum
name|class
name|PDB_LocType
block|{
name|Null
operator|,
name|Static
operator|,
name|TLS
operator|,
name|RegRel
operator|,
name|ThisRel
operator|,
name|Enregistered
operator|,
name|BitField
operator|,
name|Slot
operator|,
name|IlRel
operator|,
name|MetaData
operator|,
name|Constant
operator|,
name|Max
block|}
empty_stmt|;
comment|/// These values correspond to the UdtKind enumeration, and are documented
comment|/// here: https://msdn.microsoft.com/en-us/library/wcstk66t.aspx
name|enum
name|class
name|PDB_UdtType
block|{
name|Struct
operator|,
name|Class
operator|,
name|Union
operator|,
name|Interface
block|}
empty_stmt|;
comment|/// These values correspond to the StackFrameTypeEnum enumeration, and are
comment|/// documented here: https://msdn.microsoft.com/en-us/library/bc5207xw.aspx.
name|enum
name|class
name|PDB_StackFrameType
block|{
name|FPO
operator|,
name|KernelTrap
operator|,
name|KernelTSS
operator|,
name|EBP
operator|,
name|FrameData
block|}
empty_stmt|;
comment|/// These values correspond to the StackFrameTypeEnum enumeration, and are
comment|/// documented here: https://msdn.microsoft.com/en-us/library/bc5207xw.aspx.
name|enum
name|class
name|PDB_MemoryType
block|{
name|Code
operator|,
name|Data
operator|,
name|Stack
operator|,
name|HeapCode
block|}
empty_stmt|;
comment|/// These values correspond to the Basictype enumeration, and are documented
comment|/// here: https://msdn.microsoft.com/en-us/library/4szdtzc3.aspx
name|enum
name|class
name|PDB_BuiltinType
block|{
name|None
operator|=
literal|0
operator|,
name|Void
operator|=
literal|1
operator|,
name|Char
operator|=
literal|2
operator|,
name|WCharT
operator|=
literal|3
operator|,
name|Int
operator|=
literal|6
operator|,
name|UInt
operator|=
literal|7
operator|,
name|Float
operator|=
literal|8
operator|,
name|BCD
operator|=
literal|9
operator|,
name|Bool
operator|=
literal|10
operator|,
name|Long
operator|=
literal|13
operator|,
name|ULong
operator|=
literal|14
operator|,
name|Currency
operator|=
literal|25
operator|,
name|Date
operator|=
literal|26
operator|,
name|Variant
operator|=
literal|27
operator|,
name|Complex
operator|=
literal|28
operator|,
name|Bitfield
operator|=
literal|29
operator|,
name|BSTR
operator|=
literal|30
operator|,
name|HResult
operator|=
literal|31
block|}
empty_stmt|;
name|enum
name|class
name|PDB_MemberAccess
block|{
name|Private
operator|=
literal|1
operator|,
name|Protected
operator|=
literal|2
operator|,
name|Public
operator|=
literal|3
block|}
empty_stmt|;
struct|struct
name|VersionInfo
block|{
name|uint32_t
name|Major
decl_stmt|;
name|uint32_t
name|Minor
decl_stmt|;
name|uint32_t
name|Build
decl_stmt|;
name|uint32_t
name|QFE
decl_stmt|;
block|}
struct|;
enum|enum
name|PDB_VariantType
block|{
name|Empty
block|,
name|Unknown
block|,
name|Int8
block|,
name|Int16
block|,
name|Int32
block|,
name|Int64
block|,
name|Single
block|,
name|Double
block|,
name|UInt8
block|,
name|UInt16
block|,
name|UInt32
block|,
name|UInt64
block|,
name|Bool
block|,
name|String
block|}
enum|;
struct|struct
name|Variant
block|{
name|Variant
argument_list|()
operator|:
name|Type
argument_list|(
argument|PDB_VariantType::Empty
argument_list|)
block|{}
name|Variant
argument_list|(
specifier|const
name|Variant
operator|&
name|Other
argument_list|)
operator|:
name|Type
argument_list|(
argument|PDB_VariantType::Empty
argument_list|)
block|{
operator|*
name|this
operator|=
name|Other
block|;   }
operator|~
name|Variant
argument_list|()
block|{
if|if
condition|(
name|Type
operator|==
name|PDB_VariantType
operator|::
name|String
condition|)
name|delete
index|[]
name|Value
operator|.
name|String
decl_stmt|;
block|}
name|PDB_VariantType
name|Type
decl_stmt|;
union|union
block|{
name|bool
name|Bool
decl_stmt|;
name|int8_t
name|Int8
decl_stmt|;
name|int16_t
name|Int16
decl_stmt|;
name|int32_t
name|Int32
decl_stmt|;
name|int64_t
name|Int64
decl_stmt|;
name|float
name|Single
decl_stmt|;
name|double
name|Double
decl_stmt|;
name|uint8_t
name|UInt8
decl_stmt|;
name|uint16_t
name|UInt16
decl_stmt|;
name|uint32_t
name|UInt32
decl_stmt|;
name|uint64_t
name|UInt64
decl_stmt|;
name|char
modifier|*
name|String
decl_stmt|;
block|}
name|Value
union|;
define|#
directive|define
name|VARIANT_EQUAL_CASE
parameter_list|(
name|Enum
parameter_list|)
define|\
value|case PDB_VariantType::Enum:                                                  \     return Value.Enum == Other.Value.Enum;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|Variant
operator|&
name|Other
operator|)
specifier|const
block|{
if|if
condition|(
name|Type
operator|!=
name|Other
operator|.
name|Type
condition|)
return|return
name|false
return|;
switch|switch
condition|(
name|Type
condition|)
block|{
name|VARIANT_EQUAL_CASE
argument_list|(
argument|Bool
argument_list|)
name|VARIANT_EQUAL_CASE
argument_list|(
argument|Int8
argument_list|)
name|VARIANT_EQUAL_CASE
argument_list|(
argument|Int16
argument_list|)
name|VARIANT_EQUAL_CASE
argument_list|(
argument|Int32
argument_list|)
name|VARIANT_EQUAL_CASE
argument_list|(
argument|Int64
argument_list|)
name|VARIANT_EQUAL_CASE
argument_list|(
argument|Single
argument_list|)
name|VARIANT_EQUAL_CASE
argument_list|(
argument|Double
argument_list|)
name|VARIANT_EQUAL_CASE
argument_list|(
argument|UInt8
argument_list|)
name|VARIANT_EQUAL_CASE
argument_list|(
argument|UInt16
argument_list|)
name|VARIANT_EQUAL_CASE
argument_list|(
argument|UInt32
argument_list|)
name|VARIANT_EQUAL_CASE
argument_list|(
argument|UInt64
argument_list|)
name|VARIANT_EQUAL_CASE
argument_list|(
argument|String
argument_list|)
default|default:
return|return
name|true
return|;
block|}
block|}
undef|#
directive|undef
name|VARIANT_EQUAL_CASE
name|bool
name|operator
decl|!=
argument_list|(
specifier|const
name|Variant
operator|&
name|Other
argument_list|)
decl|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|Other
operator|)
return|;
block|}
name|Variant
modifier|&
name|operator
init|=
operator|(
specifier|const
name|Variant
operator|&
name|Other
operator|)
block|{
if|if
condition|(
name|this
operator|==
operator|&
name|Other
condition|)
return|return
operator|*
name|this
return|;
if|if
condition|(
name|Type
operator|==
name|PDB_VariantType
operator|::
name|String
condition|)
name|delete
index|[]
name|Value
operator|.
name|String
decl_stmt|;
name|Type
operator|=
name|Other
operator|.
name|Type
expr_stmt|;
name|Value
operator|=
name|Other
operator|.
name|Value
expr_stmt|;
if|if
condition|(
name|Other
operator|.
name|Type
operator|==
name|PDB_VariantType
operator|::
name|String
operator|&&
name|Other
operator|.
name|Value
operator|.
name|String
operator|!=
name|nullptr
condition|)
block|{
name|Value
operator|.
name|String
operator|=
name|new
name|char
index|[
name|strlen
argument_list|(
name|Other
operator|.
name|Value
operator|.
name|String
argument_list|)
operator|+
literal|1
index|]
expr_stmt|;
operator|::
name|strcpy
argument_list|(
name|Value
operator|.
name|String
argument_list|,
name|Other
operator|.
name|Value
operator|.
name|String
argument_list|)
expr_stmt|;
block|}
return|return
operator|*
name|this
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_decl_stmt
unit|}
name|namespace
name|std
block|{
name|template
operator|<
operator|>
expr|struct
name|hash
operator|<
name|llvm
operator|::
name|pdb
operator|::
name|PDB_SymType
operator|>
block|{
typedef|typedef
name|llvm
operator|::
name|pdb
operator|::
name|PDB_SymType
name|argument_type
expr_stmt|;
typedef|typedef
name|std
operator|::
name|size_t
name|result_type
expr_stmt|;
name|result_type
name|operator
argument_list|()
operator|(
specifier|const
name|argument_type
operator|&
name|Arg
operator|)
specifier|const
block|{
return|return
name|std
operator|::
name|hash
operator|<
name|int
operator|>
operator|(
operator|)
operator|(
name|static_cast
operator|<
name|int
operator|>
operator|(
name|Arg
operator|)
operator|)
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// end namespace std
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_DEBUGINFO_PDB_PDBTYPES_H
end_comment

end_unit

