begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- UDTLayout.h - UDT layout info ----------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_PDB_UDTLAYOUT_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_PDB_UDTLAYOUT_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/BitVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/PDB/PDBSymbol.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/PDB/PDBSymbolData.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/PDB/PDBSymbolTypeBaseClass.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/PDB/PDBSymbolTypeBuiltin.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/PDB/PDBSymbolTypeUDT.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/PDB/PDBSymbolTypeVTable.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/PDB/PDBTypes.h"
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_include
include|#
directive|include
file|<memory>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|pdb
block|{
name|class
name|BaseClassLayout
decl_stmt|;
name|class
name|ClassLayout
decl_stmt|;
name|class
name|UDTLayoutBase
decl_stmt|;
name|class
name|LayoutItemBase
block|{
name|public
label|:
name|LayoutItemBase
argument_list|(
argument|const UDTLayoutBase *Parent
argument_list|,
argument|const PDBSymbol *Symbol
argument_list|,
argument|const std::string&Name
argument_list|,
argument|uint32_t OffsetInParent
argument_list|,
argument|uint32_t Size
argument_list|,
argument|bool IsElided
argument_list|)
empty_stmt|;
name|virtual
operator|~
name|LayoutItemBase
argument_list|()
operator|=
expr|default
expr_stmt|;
name|uint32_t
name|deepPaddingSize
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|uint32_t
name|immediatePadding
argument_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|uint32_t
name|tailPadding
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|UDTLayoutBase
operator|*
name|getParent
argument_list|()
specifier|const
block|{
return|return
name|Parent
return|;
block|}
name|StringRef
name|getName
argument_list|()
specifier|const
block|{
return|return
name|Name
return|;
block|}
name|uint32_t
name|getOffsetInParent
argument_list|()
specifier|const
block|{
return|return
name|OffsetInParent
return|;
block|}
name|uint32_t
name|getSize
argument_list|()
specifier|const
block|{
return|return
name|SizeOf
return|;
block|}
name|uint32_t
name|getLayoutSize
argument_list|()
specifier|const
block|{
return|return
name|LayoutSize
return|;
block|}
specifier|const
name|PDBSymbol
operator|*
name|getSymbol
argument_list|()
specifier|const
block|{
return|return
name|Symbol
return|;
block|}
specifier|const
name|BitVector
operator|&
name|usedBytes
argument_list|()
specifier|const
block|{
return|return
name|UsedBytes
return|;
block|}
name|bool
name|isElided
argument_list|()
specifier|const
block|{
return|return
name|IsElided
return|;
block|}
name|virtual
name|bool
name|isVBPtr
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|uint32_t
name|containsOffset
argument_list|(
name|uint32_t
name|Off
argument_list|)
decl|const
block|{
name|uint32_t
name|Begin
init|=
name|getOffsetInParent
argument_list|()
decl_stmt|;
name|uint32_t
name|End
init|=
name|Begin
operator|+
name|getSize
argument_list|()
decl_stmt|;
return|return
operator|(
name|Off
operator|>=
name|Begin
operator|&&
name|Off
operator|<
name|End
operator|)
return|;
block|}
name|protected
label|:
specifier|const
name|PDBSymbol
modifier|*
name|Symbol
init|=
name|nullptr
decl_stmt|;
specifier|const
name|UDTLayoutBase
modifier|*
name|Parent
init|=
name|nullptr
decl_stmt|;
name|BitVector
name|UsedBytes
decl_stmt|;
name|std
operator|::
name|string
name|Name
expr_stmt|;
name|uint32_t
name|OffsetInParent
init|=
literal|0
decl_stmt|;
name|uint32_t
name|SizeOf
init|=
literal|0
decl_stmt|;
name|uint32_t
name|LayoutSize
init|=
literal|0
decl_stmt|;
name|bool
name|IsElided
init|=
name|false
decl_stmt|;
block|}
empty_stmt|;
name|class
name|VBPtrLayoutItem
range|:
name|public
name|LayoutItemBase
block|{
name|public
operator|:
name|VBPtrLayoutItem
argument_list|(
argument|const UDTLayoutBase&Parent
argument_list|,
argument|std::unique_ptr<PDBSymbolTypeBuiltin> Sym
argument_list|,
argument|uint32_t Offset
argument_list|,
argument|uint32_t Size
argument_list|)
block|;
name|bool
name|isVBPtr
argument_list|()
specifier|const
name|override
block|{
return|return
name|true
return|;
block|}
name|private
operator|:
name|std
operator|::
name|unique_ptr
operator|<
name|PDBSymbolTypeBuiltin
operator|>
name|Type
block|; }
decl_stmt|;
name|class
name|DataMemberLayoutItem
range|:
name|public
name|LayoutItemBase
block|{
name|public
operator|:
name|DataMemberLayoutItem
argument_list|(
specifier|const
name|UDTLayoutBase
operator|&
name|Parent
argument_list|,
name|std
operator|::
name|unique_ptr
operator|<
name|PDBSymbolData
operator|>
name|DataMember
argument_list|)
block|;
specifier|const
name|PDBSymbolData
operator|&
name|getDataMember
argument_list|()
block|;
name|bool
name|hasUDTLayout
argument_list|()
specifier|const
block|;
specifier|const
name|ClassLayout
operator|&
name|getUDTLayout
argument_list|()
specifier|const
block|;
name|private
operator|:
name|std
operator|::
name|unique_ptr
operator|<
name|PDBSymbolData
operator|>
name|DataMember
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|ClassLayout
operator|>
name|UdtLayout
block|; }
decl_stmt|;
name|class
name|VTableLayoutItem
range|:
name|public
name|LayoutItemBase
block|{
name|public
operator|:
name|VTableLayoutItem
argument_list|(
specifier|const
name|UDTLayoutBase
operator|&
name|Parent
argument_list|,
name|std
operator|::
name|unique_ptr
operator|<
name|PDBSymbolTypeVTable
operator|>
name|VTable
argument_list|)
block|;
name|uint32_t
name|getElementSize
argument_list|()
specifier|const
block|{
return|return
name|ElementSize
return|;
block|}
name|private
operator|:
name|uint32_t
name|ElementSize
operator|=
literal|0
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|PDBSymbolTypeVTable
operator|>
name|VTable
block|; }
decl_stmt|;
name|class
name|UDTLayoutBase
range|:
name|public
name|LayoutItemBase
block|{
name|template
operator|<
name|typename
name|T
operator|>
name|using
name|UniquePtrVector
operator|=
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|T
operator|>>
block|;
name|public
operator|:
name|UDTLayoutBase
argument_list|(
argument|const UDTLayoutBase *Parent
argument_list|,
argument|const PDBSymbol&Sym
argument_list|,
argument|const std::string&Name
argument_list|,
argument|uint32_t OffsetInParent
argument_list|,
argument|uint32_t Size
argument_list|,
argument|bool IsElided
argument_list|)
block|;
name|uint32_t
name|tailPadding
argument_list|()
specifier|const
name|override
block|;
name|ArrayRef
operator|<
name|LayoutItemBase
operator|*
operator|>
name|layout_items
argument_list|()
specifier|const
block|{
return|return
name|LayoutItems
return|;
block|}
name|ArrayRef
operator|<
name|BaseClassLayout
operator|*
operator|>
name|bases
argument_list|()
specifier|const
block|{
return|return
name|AllBases
return|;
block|}
name|ArrayRef
operator|<
name|BaseClassLayout
operator|*
operator|>
name|regular_bases
argument_list|()
specifier|const
block|{
return|return
name|NonVirtualBases
return|;
block|}
name|ArrayRef
operator|<
name|BaseClassLayout
operator|*
operator|>
name|virtual_bases
argument_list|()
specifier|const
block|{
return|return
name|VirtualBases
return|;
block|}
name|uint32_t
name|directVirtualBaseCount
argument_list|()
specifier|const
block|{
return|return
name|DirectVBaseCount
return|;
block|}
name|ArrayRef
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|PDBSymbolFunc
operator|>>
name|funcs
argument_list|()
specifier|const
block|{
return|return
name|Funcs
return|;
block|}
name|ArrayRef
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|PDBSymbol
operator|>>
name|other_items
argument_list|()
specifier|const
block|{
return|return
name|Other
return|;
block|}
name|protected
operator|:
name|bool
name|hasVBPtrAtOffset
argument_list|(
argument|uint32_t Off
argument_list|)
specifier|const
block|;
name|void
name|initializeChildren
argument_list|(
specifier|const
name|PDBSymbol
operator|&
name|Sym
argument_list|)
block|;
name|void
name|addChildToLayout
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|LayoutItemBase
operator|>
name|Child
argument_list|)
block|;
name|uint32_t
name|DirectVBaseCount
operator|=
literal|0
block|;
name|UniquePtrVector
operator|<
name|PDBSymbol
operator|>
name|Other
block|;
name|UniquePtrVector
operator|<
name|PDBSymbolFunc
operator|>
name|Funcs
block|;
name|UniquePtrVector
operator|<
name|LayoutItemBase
operator|>
name|ChildStorage
block|;
name|std
operator|::
name|vector
operator|<
name|LayoutItemBase
operator|*
operator|>
name|LayoutItems
block|;
name|std
operator|::
name|vector
operator|<
name|BaseClassLayout
operator|*
operator|>
name|AllBases
block|;
name|ArrayRef
operator|<
name|BaseClassLayout
operator|*
operator|>
name|NonVirtualBases
block|;
name|ArrayRef
operator|<
name|BaseClassLayout
operator|*
operator|>
name|VirtualBases
block|;
name|VTableLayoutItem
operator|*
name|VTable
operator|=
name|nullptr
block|;
name|VBPtrLayoutItem
operator|*
name|VBPtr
operator|=
name|nullptr
block|; }
decl_stmt|;
name|class
name|BaseClassLayout
range|:
name|public
name|UDTLayoutBase
block|{
name|public
operator|:
name|BaseClassLayout
argument_list|(
argument|const UDTLayoutBase&Parent
argument_list|,
argument|uint32_t OffsetInParent
argument_list|,
argument|bool Elide
argument_list|,
argument|std::unique_ptr<PDBSymbolTypeBaseClass> Base
argument_list|)
block|;
specifier|const
name|PDBSymbolTypeBaseClass
operator|&
name|getBase
argument_list|()
specifier|const
block|{
return|return
operator|*
name|Base
return|;
block|}
name|bool
name|isVirtualBase
argument_list|()
specifier|const
block|{
return|return
name|IsVirtualBase
return|;
block|}
name|bool
name|isEmptyBase
argument_list|()
block|{
return|return
name|SizeOf
operator|==
literal|1
operator|&&
name|LayoutSize
operator|==
literal|0
return|;
block|}
name|private
operator|:
name|std
operator|::
name|unique_ptr
operator|<
name|PDBSymbolTypeBaseClass
operator|>
name|Base
block|;
name|bool
name|IsVirtualBase
block|; }
decl_stmt|;
name|class
name|ClassLayout
range|:
name|public
name|UDTLayoutBase
block|{
name|public
operator|:
name|explicit
name|ClassLayout
argument_list|(
specifier|const
name|PDBSymbolTypeUDT
operator|&
name|UDT
argument_list|)
block|;
name|explicit
name|ClassLayout
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|PDBSymbolTypeUDT
operator|>
name|UDT
argument_list|)
block|;
name|ClassLayout
argument_list|(
name|ClassLayout
operator|&&
name|Other
argument_list|)
operator|=
expr|default
block|;
specifier|const
name|PDBSymbolTypeUDT
operator|&
name|getClass
argument_list|()
specifier|const
block|{
return|return
name|UDT
return|;
block|}
name|uint32_t
name|immediatePadding
argument_list|()
specifier|const
name|override
block|;
name|private
operator|:
name|BitVector
name|ImmediateUsedBytes
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|PDBSymbolTypeUDT
operator|>
name|OwnedStorage
block|;
specifier|const
name|PDBSymbolTypeUDT
operator|&
name|UDT
block|; }
decl_stmt|;
block|}
comment|// end namespace pdb
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_DEBUGINFO_PDB_UDTLAYOUT_H
end_comment

end_unit

