begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- StreamReader.h - Reads bytes and objects from a stream ---*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_MSF_STREAMREADER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_MSF_STREAMREADER_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/MSF/MSFError.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/MSF/StreamArray.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/MSF/StreamInterface.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/MSF/StreamRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Endian.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Error.h"
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|msf
block|{
name|class
name|StreamReader
block|{
name|public
label|:
name|StreamReader
argument_list|(
argument|ReadableStreamRef Stream
argument_list|)
empty_stmt|;
name|Error
name|readLongestContiguousChunk
argument_list|(
name|ArrayRef
operator|<
name|uint8_t
operator|>
operator|&
name|Buffer
argument_list|)
decl_stmt|;
name|Error
name|readBytes
argument_list|(
name|ArrayRef
operator|<
name|uint8_t
operator|>
operator|&
name|Buffer
argument_list|,
name|uint32_t
name|Size
argument_list|)
decl_stmt|;
name|Error
name|readInteger
parameter_list|(
name|uint8_t
modifier|&
name|Dest
parameter_list|)
function_decl|;
name|Error
name|readInteger
parameter_list|(
name|uint16_t
modifier|&
name|Dest
parameter_list|)
function_decl|;
name|Error
name|readInteger
parameter_list|(
name|uint32_t
modifier|&
name|Dest
parameter_list|)
function_decl|;
name|Error
name|readInteger
parameter_list|(
name|uint64_t
modifier|&
name|Dest
parameter_list|)
function_decl|;
name|Error
name|readInteger
parameter_list|(
name|int8_t
modifier|&
name|Dest
parameter_list|)
function_decl|;
name|Error
name|readInteger
parameter_list|(
name|int16_t
modifier|&
name|Dest
parameter_list|)
function_decl|;
name|Error
name|readInteger
parameter_list|(
name|int32_t
modifier|&
name|Dest
parameter_list|)
function_decl|;
name|Error
name|readInteger
parameter_list|(
name|int64_t
modifier|&
name|Dest
parameter_list|)
function_decl|;
name|Error
name|readZeroString
parameter_list|(
name|StringRef
modifier|&
name|Dest
parameter_list|)
function_decl|;
name|Error
name|readFixedString
parameter_list|(
name|StringRef
modifier|&
name|Dest
parameter_list|,
name|uint32_t
name|Length
parameter_list|)
function_decl|;
name|Error
name|readStreamRef
parameter_list|(
name|ReadableStreamRef
modifier|&
name|Ref
parameter_list|)
function_decl|;
name|Error
name|readStreamRef
parameter_list|(
name|ReadableStreamRef
modifier|&
name|Ref
parameter_list|,
name|uint32_t
name|Length
parameter_list|)
function_decl|;
name|template
operator|<
name|typename
name|T
operator|>
name|Error
name|readEnum
argument_list|(
argument|T&Dest
argument_list|)
block|{
name|typename
name|std
operator|::
name|underlying_type
operator|<
name|T
operator|>
operator|::
name|type
name|N
block|;
if|if
condition|(
name|auto
name|EC
init|=
name|readInteger
argument_list|(
name|N
argument_list|)
condition|)
return|return
name|EC
return|;
name|Dest
operator|=
name|static_cast
operator|<
name|T
operator|>
operator|(
name|N
operator|)
expr_stmt|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|Error
name|readObject
argument_list|(
argument|const T *&Dest
argument_list|)
block|{
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|Buffer
block|;
if|if
condition|(
name|auto
name|EC
init|=
name|readBytes
argument_list|(
name|Buffer
argument_list|,
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
condition|)
return|return
name|EC
return|;
name|Dest
operator|=
name|reinterpret_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|Buffer
operator|.
name|data
argument_list|()
operator|)
expr_stmt|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|Error
name|readArray
argument_list|(
argument|ArrayRef<T>&Array
argument_list|,
argument|uint32_t NumElements
argument_list|)
block|{
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|Bytes
block|;
if|if
condition|(
name|NumElements
operator|==
literal|0
condition|)
block|{
name|Array
operator|=
name|ArrayRef
operator|<
name|T
operator|>
operator|(
operator|)
expr_stmt|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
if|if
condition|(
name|NumElements
operator|>
name|UINT32_MAX
operator|/
sizeof|sizeof
argument_list|(
name|T
argument_list|)
condition|)
return|return
name|make_error
operator|<
name|MSFError
operator|>
operator|(
name|msf_error_code
operator|::
name|insufficient_buffer
operator|)
return|;
if|if
condition|(
name|auto
name|EC
init|=
name|readBytes
argument_list|(
name|Bytes
argument_list|,
name|NumElements
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
condition|)
return|return
name|EC
return|;
name|Array
operator|=
name|ArrayRef
operator|<
name|T
operator|>
operator|(
name|reinterpret_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|Bytes
operator|.
name|data
argument_list|()
operator|)
operator|,
name|NumElements
operator|)
expr_stmt|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|U
operator|>
name|Error
name|readArray
argument_list|(
argument|VarStreamArray<T
argument_list|,
argument|U>&Array
argument_list|,
argument|uint32_t Size
argument_list|)
block|{
name|ReadableStreamRef
name|S
block|;
if|if
condition|(
name|auto
name|EC
init|=
name|readStreamRef
argument_list|(
name|S
argument_list|,
name|Size
argument_list|)
condition|)
return|return
name|EC
return|;
name|Array
operator|=
name|VarStreamArray
operator|<
name|T
operator|,
name|U
operator|>
operator|(
name|S
operator|,
name|Array
operator|.
name|getExtractor
argument_list|()
operator|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
end_return

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|T
operator|>
name|Error
name|readArray
argument_list|(
argument|FixedStreamArray<T>&Array
argument_list|,
argument|uint32_t NumItems
argument_list|)
block|{
if|if
condition|(
name|NumItems
operator|==
literal|0
condition|)
block|{
name|Array
operator|=
name|FixedStreamArray
operator|<
name|T
operator|>
operator|(
operator|)
expr_stmt|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
name|uint32_t
name|Length
operator|=
name|NumItems
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|Length
operator|/
sizeof|sizeof
argument_list|(
name|T
argument_list|)
operator|!=
name|NumItems
condition|)
return|return
name|make_error
operator|<
name|MSFError
operator|>
operator|(
name|msf_error_code
operator|::
name|invalid_format
operator|)
return|;
end_if

begin_if
if|if
condition|(
name|Offset
operator|+
name|Length
operator|>
name|Stream
operator|.
name|getLength
argument_list|()
condition|)
return|return
name|make_error
operator|<
name|MSFError
operator|>
operator|(
name|msf_error_code
operator|::
name|insufficient_buffer
operator|)
return|;
end_if

begin_decl_stmt
name|ReadableStreamRef
name|View
init|=
name|Stream
operator|.
name|slice
argument_list|(
name|Offset
argument_list|,
name|Length
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|Array
operator|=
name|FixedStreamArray
operator|<
name|T
operator|>
operator|(
name|View
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Offset
operator|+=
name|Length
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
end_return

begin_macro
unit|}    bool
name|empty
argument_list|()
end_macro

begin_expr_stmt
specifier|const
block|{
return|return
name|bytesRemaining
argument_list|()
operator|==
literal|0
return|;
block|}
end_expr_stmt

begin_function
name|void
name|setOffset
parameter_list|(
name|uint32_t
name|Off
parameter_list|)
block|{
name|Offset
operator|=
name|Off
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|uint32_t
name|getOffset
argument_list|()
specifier|const
block|{
return|return
name|Offset
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|uint32_t
name|getLength
argument_list|()
specifier|const
block|{
return|return
name|Stream
operator|.
name|getLength
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|uint32_t
name|bytesRemaining
argument_list|()
specifier|const
block|{
return|return
name|getLength
argument_list|()
operator|-
name|getOffset
argument_list|()
return|;
block|}
end_expr_stmt

begin_function_decl
name|Error
name|skip
parameter_list|(
name|uint32_t
name|Amount
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|uint8_t
name|peek
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|ReadableStreamRef
name|Stream
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uint32_t
name|Offset
decl_stmt|;
end_decl_stmt

begin_comment
unit|}; }
comment|// namespace msf
end_comment

begin_comment
unit|}
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_DEBUGINFO_MSF_STREAMREADER_H
end_comment

end_unit

