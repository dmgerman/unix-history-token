begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- RecordIterator.h -----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_CODEVIEW_RECORDITERATOR_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_CODEVIEW_RECORDITERATOR_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/iterator_range.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/RecordSerialization.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/StreamInterface.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/StreamReader.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Endian.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|codeview
block|{
name|template
operator|<
name|typename
name|Kind
operator|>
expr|struct
name|CVRecord
block|{
name|uint32_t
name|Length
block|;
name|Kind
name|Type
block|;
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|Data
block|;
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|RawData
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|Kind
operator|>
expr|struct
name|VarStreamArrayExtractor
operator|<
name|CVRecord
operator|<
name|Kind
operator|>>
block|{
name|Error
name|operator
argument_list|()
operator|(
name|StreamRef
name|Stream
operator|,
name|uint32_t
operator|&
name|Len
operator|,
name|CVRecord
operator|<
name|Kind
operator|>
operator|&
name|Item
operator|)
specifier|const
block|{
specifier|const
name|RecordPrefix
operator|*
name|Prefix
operator|=
name|nullptr
block|;
name|StreamReader
name|Reader
argument_list|(
name|Stream
argument_list|)
block|;
name|uint32_t
name|Offset
operator|=
name|Reader
operator|.
name|getOffset
argument_list|()
block|;
if|if
condition|(
name|auto
name|EC
init|=
name|Reader
operator|.
name|readObject
argument_list|(
name|Prefix
argument_list|)
condition|)
return|return
name|EC
return|;
name|Item
operator|.
name|Length
operator|=
name|Prefix
operator|->
name|RecordLen
block|;
if|if
condition|(
name|Item
operator|.
name|Length
operator|<
literal|2
condition|)
return|return
name|make_error
operator|<
name|CodeViewError
operator|>
operator|(
name|cv_error_code
operator|::
name|corrupt_record
operator|)
return|;
name|Item
operator|.
name|Type
operator|=
name|static_cast
operator|<
name|Kind
operator|>
operator|(
name|uint16_t
argument_list|(
name|Prefix
operator|->
name|RecordKind
argument_list|)
operator|)
expr_stmt|;
name|Reader
operator|.
name|setOffset
argument_list|(
name|Offset
argument_list|)
expr_stmt|;
if|if
condition|(
name|auto
name|EC
init|=
name|Reader
operator|.
name|readBytes
argument_list|(
name|Item
operator|.
name|RawData
argument_list|,
name|Item
operator|.
name|Length
operator|+
sizeof|sizeof
argument_list|(
name|uint16_t
argument_list|)
argument_list|)
condition|)
return|return
name|EC
return|;
name|Item
operator|.
name|Data
operator|=
name|Item
operator|.
name|RawData
operator|.
name|slice
argument_list|(
sizeof|sizeof
argument_list|(
name|RecordPrefix
argument_list|)
argument_list|)
expr_stmt|;
name|Len
operator|=
name|Prefix
operator|->
name|RecordLen
operator|+
literal|2
expr_stmt|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
unit|} }
endif|#
directive|endif
end_endif

end_unit

