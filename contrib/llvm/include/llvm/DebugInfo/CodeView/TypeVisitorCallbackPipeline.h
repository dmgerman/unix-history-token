begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- TypeVisitorCallbackPipeline.h ----------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_CODEVIEW_TYPEVISITORCALLBACKPIPELINE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_CODEVIEW_TYPEVISITORCALLBACKPIPELINE_H
end_define

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/CodeView.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/TypeRecord.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Error.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|codeview
block|{
name|class
name|TypeVisitorCallbackPipeline
range|:
name|public
name|TypeVisitorCallbacks
block|{
name|public
operator|:
name|TypeVisitorCallbackPipeline
argument_list|()
operator|=
expr|default
block|;
name|Error
name|visitUnknownType
argument_list|(
argument|CVRecord<TypeLeafKind>&Record
argument_list|)
name|override
block|{
for|for
control|(
name|auto
name|Visitor
range|:
name|Pipeline
control|)
block|{
if|if
condition|(
name|auto
name|EC
init|=
name|Visitor
operator|->
name|visitUnknownType
argument_list|(
name|Record
argument_list|)
condition|)
return|return
name|EC
return|;
block|}
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
name|Error
name|visitUnknownMember
argument_list|(
argument|CVMemberRecord&Record
argument_list|)
name|override
block|{
for|for
control|(
name|auto
name|Visitor
range|:
name|Pipeline
control|)
block|{
if|if
condition|(
name|auto
name|EC
init|=
name|Visitor
operator|->
name|visitUnknownMember
argument_list|(
name|Record
argument_list|)
condition|)
return|return
name|EC
return|;
block|}
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
name|Error
name|visitTypeBegin
argument_list|(
argument|CVType&Record
argument_list|)
name|override
block|{
for|for
control|(
name|auto
name|Visitor
range|:
name|Pipeline
control|)
block|{
if|if
condition|(
name|auto
name|EC
init|=
name|Visitor
operator|->
name|visitTypeBegin
argument_list|(
name|Record
argument_list|)
condition|)
return|return
name|EC
return|;
block|}
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
name|Error
name|visitTypeEnd
argument_list|(
argument|CVType&Record
argument_list|)
name|override
block|{
for|for
control|(
name|auto
name|Visitor
range|:
name|Pipeline
control|)
block|{
if|if
condition|(
name|auto
name|EC
init|=
name|Visitor
operator|->
name|visitTypeEnd
argument_list|(
name|Record
argument_list|)
condition|)
return|return
name|EC
return|;
block|}
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
name|Error
name|visitMemberBegin
argument_list|(
argument|CVMemberRecord&Record
argument_list|)
name|override
block|{
for|for
control|(
name|auto
name|Visitor
range|:
name|Pipeline
control|)
block|{
if|if
condition|(
name|auto
name|EC
init|=
name|Visitor
operator|->
name|visitMemberBegin
argument_list|(
name|Record
argument_list|)
condition|)
return|return
name|EC
return|;
block|}
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
name|Error
name|visitMemberEnd
argument_list|(
argument|CVMemberRecord&Record
argument_list|)
name|override
block|{
for|for
control|(
name|auto
name|Visitor
range|:
name|Pipeline
control|)
block|{
if|if
condition|(
name|auto
name|EC
init|=
name|Visitor
operator|->
name|visitMemberEnd
argument_list|(
name|Record
argument_list|)
condition|)
return|return
name|EC
return|;
block|}
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
name|void
name|addCallbackToPipeline
argument_list|(
argument|TypeVisitorCallbacks&Callbacks
argument_list|)
block|{
name|Pipeline
operator|.
name|push_back
argument_list|(
operator|&
name|Callbacks
argument_list|)
block|;   }
define|#
directive|define
name|TYPE_RECORD
parameter_list|(
name|EnumName
parameter_list|,
name|EnumVal
parameter_list|,
name|Name
parameter_list|)
define|\
value|Error visitKnownRecord(CVType&CVR, Name##Record&Record) override {         \     return visitKnownRecordImpl(CVR, Record);                                  \   }
define|#
directive|define
name|MEMBER_RECORD
parameter_list|(
name|EnumName
parameter_list|,
name|EnumVal
parameter_list|,
name|Name
parameter_list|)
define|\
value|Error visitKnownMember(CVMemberRecord&CVMR, Name##Record&Record)           \       override {                                                               \     return visitKnownMemberImpl(CVMR, Record);                                 \   }
define|#
directive|define
name|TYPE_RECORD_ALIAS
parameter_list|(
name|EnumName
parameter_list|,
name|EnumVal
parameter_list|,
name|Name
parameter_list|,
name|AliasName
parameter_list|)
define|#
directive|define
name|MEMBER_RECORD_ALIAS
parameter_list|(
name|EnumName
parameter_list|,
name|EnumVal
parameter_list|,
name|Name
parameter_list|,
name|AliasName
parameter_list|)
include|#
directive|include
file|"llvm/DebugInfo/CodeView/TypeRecords.def"
name|private
operator|:
name|template
operator|<
name|typename
name|T
operator|>
name|Error
name|visitKnownRecordImpl
argument_list|(
argument|CVType&CVR
argument_list|,
argument|T&Record
argument_list|)
block|{
for|for
control|(
name|auto
name|Visitor
range|:
name|Pipeline
control|)
block|{
if|if
condition|(
name|auto
name|EC
init|=
name|Visitor
operator|->
name|visitKnownRecord
argument_list|(
name|CVR
argument_list|,
name|Record
argument_list|)
condition|)
return|return
name|EC
return|;
block|}
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|Error
name|visitKnownMemberImpl
argument_list|(
argument|CVMemberRecord&CVMR
argument_list|,
argument|T&Record
argument_list|)
block|{
for|for
control|(
name|auto
name|Visitor
range|:
name|Pipeline
control|)
block|{
if|if
condition|(
name|auto
name|EC
init|=
name|Visitor
operator|->
name|visitKnownMember
argument_list|(
name|CVMR
argument_list|,
name|Record
argument_list|)
condition|)
return|return
name|EC
return|;
block|}
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
name|std
operator|::
name|vector
operator|<
name|TypeVisitorCallbacks
operator|*
operator|>
name|Pipeline
block|; }
decl_stmt|;
block|}
comment|// end namespace codeview
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_DEBUGINFO_CODEVIEW_TYPEVISITORCALLBACKPIPELINE_H
end_comment

end_unit

