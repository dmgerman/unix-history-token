begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- TypeIndex.h ----------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_CODEVIEW_TYPEINDEX_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_CODEVIEW_TYPEINDEX_H
end_define

begin_include
include|#
directive|include
file|"llvm/Support/Endian.h"
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<cinttypes>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|codeview
block|{
name|enum
name|class
name|SimpleTypeKind
range|:
name|uint32_t
block|{
name|None
operator|=
literal|0x0000
block|,
comment|// uncharacterized type (no type)
name|Void
operator|=
literal|0x0003
block|,
comment|// void
name|NotTranslated
operator|=
literal|0x0007
block|,
comment|// type not translated by cvpack
name|HResult
operator|=
literal|0x0008
block|,
comment|// OLE/COM HRESULT
name|SignedCharacter
operator|=
literal|0x0010
block|,
comment|// 8 bit signed
name|UnsignedCharacter
operator|=
literal|0x0020
block|,
comment|// 8 bit unsigned
name|NarrowCharacter
operator|=
literal|0x0070
block|,
comment|// really a char
name|WideCharacter
operator|=
literal|0x0071
block|,
comment|// wide char
name|Character16
operator|=
literal|0x007a
block|,
comment|// char16_t
name|Character32
operator|=
literal|0x007b
block|,
comment|// char32_t
name|SByte
operator|=
literal|0x0068
block|,
comment|// 8 bit signed int
name|Byte
operator|=
literal|0x0069
block|,
comment|// 8 bit unsigned int
name|Int16Short
operator|=
literal|0x0011
block|,
comment|// 16 bit signed
name|UInt16Short
operator|=
literal|0x0021
block|,
comment|// 16 bit unsigned
name|Int16
operator|=
literal|0x0072
block|,
comment|// 16 bit signed int
name|UInt16
operator|=
literal|0x0073
block|,
comment|// 16 bit unsigned int
name|Int32Long
operator|=
literal|0x0012
block|,
comment|// 32 bit signed
name|UInt32Long
operator|=
literal|0x0022
block|,
comment|// 32 bit unsigned
name|Int32
operator|=
literal|0x0074
block|,
comment|// 32 bit signed int
name|UInt32
operator|=
literal|0x0075
block|,
comment|// 32 bit unsigned int
name|Int64Quad
operator|=
literal|0x0013
block|,
comment|// 64 bit signed
name|UInt64Quad
operator|=
literal|0x0023
block|,
comment|// 64 bit unsigned
name|Int64
operator|=
literal|0x0076
block|,
comment|// 64 bit signed int
name|UInt64
operator|=
literal|0x0077
block|,
comment|// 64 bit unsigned int
name|Int128Oct
operator|=
literal|0x0014
block|,
comment|// 128 bit signed int
name|UInt128Oct
operator|=
literal|0x0024
block|,
comment|// 128 bit unsigned int
name|Int128
operator|=
literal|0x0078
block|,
comment|// 128 bit signed int
name|UInt128
operator|=
literal|0x0079
block|,
comment|// 128 bit unsigned int
name|Float16
operator|=
literal|0x0046
block|,
comment|// 16 bit real
name|Float32
operator|=
literal|0x0040
block|,
comment|// 32 bit real
name|Float32PartialPrecision
operator|=
literal|0x0045
block|,
comment|// 32 bit PP real
name|Float48
operator|=
literal|0x0044
block|,
comment|// 48 bit real
name|Float64
operator|=
literal|0x0041
block|,
comment|// 64 bit real
name|Float80
operator|=
literal|0x0042
block|,
comment|// 80 bit real
name|Float128
operator|=
literal|0x0043
block|,
comment|// 128 bit real
name|Complex16
operator|=
literal|0x0056
block|,
comment|// 16 bit complex
name|Complex32
operator|=
literal|0x0050
block|,
comment|// 32 bit complex
name|Complex32PartialPrecision
operator|=
literal|0x0055
block|,
comment|// 32 bit PP complex
name|Complex48
operator|=
literal|0x0054
block|,
comment|// 48 bit complex
name|Complex64
operator|=
literal|0x0051
block|,
comment|// 64 bit complex
name|Complex80
operator|=
literal|0x0052
block|,
comment|// 80 bit complex
name|Complex128
operator|=
literal|0x0053
block|,
comment|// 128 bit complex
name|Boolean8
operator|=
literal|0x0030
block|,
comment|// 8 bit boolean
name|Boolean16
operator|=
literal|0x0031
block|,
comment|// 16 bit boolean
name|Boolean32
operator|=
literal|0x0032
block|,
comment|// 32 bit boolean
name|Boolean64
operator|=
literal|0x0033
block|,
comment|// 64 bit boolean
name|Boolean128
operator|=
literal|0x0034
block|,
comment|// 128 bit boolean
block|}
decl_stmt|;
name|enum
name|class
name|SimpleTypeMode
range|:
name|uint32_t
block|{
name|Direct
operator|=
literal|0x00000000
block|,
comment|// Not a pointer
name|NearPointer
operator|=
literal|0x00000100
block|,
comment|// Near pointer
name|FarPointer
operator|=
literal|0x00000200
block|,
comment|// Far pointer
name|HugePointer
operator|=
literal|0x00000300
block|,
comment|// Huge pointer
name|NearPointer32
operator|=
literal|0x00000400
block|,
comment|// 32 bit near pointer
name|FarPointer32
operator|=
literal|0x00000500
block|,
comment|// 32 bit far pointer
name|NearPointer64
operator|=
literal|0x00000600
block|,
comment|// 64 bit near pointer
name|NearPointer128
operator|=
literal|0x00000700
comment|// 128 bit near pointer
block|}
decl_stmt|;
comment|/// A 32-bit type reference. Types are indexed by their order of appearance in
comment|/// .debug$T plus 0x1000. Type indices less than 0x1000 are "simple" types,
comment|/// composed of a SimpleTypeMode byte followed by a SimpleTypeKind byte.
name|class
name|TypeIndex
block|{
name|public
label|:
specifier|static
specifier|const
name|uint32_t
name|FirstNonSimpleIndex
init|=
literal|0x1000
decl_stmt|;
specifier|static
specifier|const
name|uint32_t
name|SimpleKindMask
init|=
literal|0x000000ff
decl_stmt|;
specifier|static
specifier|const
name|uint32_t
name|SimpleModeMask
init|=
literal|0x00000700
decl_stmt|;
name|public
label|:
name|TypeIndex
argument_list|()
operator|:
name|Index
argument_list|(
argument|static_cast<uint32_t>(SimpleTypeKind::None)
argument_list|)
block|{}
name|explicit
name|TypeIndex
argument_list|(
argument|uint32_t Index
argument_list|)
operator|:
name|Index
argument_list|(
argument|Index
argument_list|)
block|{}
name|explicit
name|TypeIndex
argument_list|(
argument|SimpleTypeKind Kind
argument_list|)
operator|:
name|Index
argument_list|(
argument|static_cast<uint32_t>(Kind)
argument_list|)
block|{}
name|TypeIndex
argument_list|(
argument|SimpleTypeKind Kind
argument_list|,
argument|SimpleTypeMode Mode
argument_list|)
operator|:
name|Index
argument_list|(
argument|static_cast<uint32_t>(Kind) | static_cast<uint32_t>(Mode)
argument_list|)
block|{}
name|uint32_t
name|getIndex
argument_list|()
specifier|const
block|{
return|return
name|Index
return|;
block|}
name|void
name|setIndex
parameter_list|(
name|uint32_t
name|I
parameter_list|)
block|{
name|Index
operator|=
name|I
expr_stmt|;
block|}
name|bool
name|isSimple
argument_list|()
specifier|const
block|{
return|return
name|Index
operator|<
name|FirstNonSimpleIndex
return|;
block|}
name|bool
name|isNoneType
argument_list|()
specifier|const
block|{
return|return
operator|*
name|this
operator|==
name|None
argument_list|()
return|;
block|}
name|uint32_t
name|toArrayIndex
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
operator|!
name|isSimple
argument_list|()
argument_list|)
block|;
return|return
name|getIndex
argument_list|()
operator|-
name|FirstNonSimpleIndex
return|;
block|}
specifier|static
name|TypeIndex
name|fromArrayIndex
parameter_list|(
name|uint32_t
name|Index
parameter_list|)
block|{
return|return
name|TypeIndex
argument_list|(
name|Index
operator|+
name|FirstNonSimpleIndex
argument_list|)
return|;
block|}
name|SimpleTypeKind
name|getSimpleKind
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isSimple
argument_list|()
argument_list|)
block|;
return|return
name|static_cast
operator|<
name|SimpleTypeKind
operator|>
operator|(
name|Index
operator|&
name|SimpleKindMask
operator|)
return|;
block|}
name|SimpleTypeMode
name|getSimpleMode
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isSimple
argument_list|()
argument_list|)
block|;
return|return
name|static_cast
operator|<
name|SimpleTypeMode
operator|>
operator|(
name|Index
operator|&
name|SimpleModeMask
operator|)
return|;
block|}
specifier|static
name|TypeIndex
name|None
parameter_list|()
block|{
return|return
name|TypeIndex
argument_list|(
name|SimpleTypeKind
operator|::
name|None
argument_list|)
return|;
block|}
specifier|static
name|TypeIndex
name|Void
parameter_list|()
block|{
return|return
name|TypeIndex
argument_list|(
name|SimpleTypeKind
operator|::
name|Void
argument_list|)
return|;
block|}
specifier|static
name|TypeIndex
name|VoidPointer32
parameter_list|()
block|{
return|return
name|TypeIndex
argument_list|(
name|SimpleTypeKind
operator|::
name|Void
argument_list|,
name|SimpleTypeMode
operator|::
name|NearPointer32
argument_list|)
return|;
block|}
specifier|static
name|TypeIndex
name|VoidPointer64
parameter_list|()
block|{
return|return
name|TypeIndex
argument_list|(
name|SimpleTypeKind
operator|::
name|Void
argument_list|,
name|SimpleTypeMode
operator|::
name|NearPointer64
argument_list|)
return|;
block|}
specifier|static
name|TypeIndex
name|SignedCharacter
parameter_list|()
block|{
return|return
name|TypeIndex
argument_list|(
name|SimpleTypeKind
operator|::
name|SignedCharacter
argument_list|)
return|;
block|}
specifier|static
name|TypeIndex
name|UnsignedCharacter
parameter_list|()
block|{
return|return
name|TypeIndex
argument_list|(
name|SimpleTypeKind
operator|::
name|UnsignedCharacter
argument_list|)
return|;
block|}
specifier|static
name|TypeIndex
name|NarrowCharacter
parameter_list|()
block|{
return|return
name|TypeIndex
argument_list|(
name|SimpleTypeKind
operator|::
name|NarrowCharacter
argument_list|)
return|;
block|}
specifier|static
name|TypeIndex
name|WideCharacter
parameter_list|()
block|{
return|return
name|TypeIndex
argument_list|(
name|SimpleTypeKind
operator|::
name|WideCharacter
argument_list|)
return|;
block|}
specifier|static
name|TypeIndex
name|Int16Short
parameter_list|()
block|{
return|return
name|TypeIndex
argument_list|(
name|SimpleTypeKind
operator|::
name|Int16Short
argument_list|)
return|;
block|}
specifier|static
name|TypeIndex
name|UInt16Short
parameter_list|()
block|{
return|return
name|TypeIndex
argument_list|(
name|SimpleTypeKind
operator|::
name|UInt16Short
argument_list|)
return|;
block|}
specifier|static
name|TypeIndex
name|Int32
parameter_list|()
block|{
return|return
name|TypeIndex
argument_list|(
name|SimpleTypeKind
operator|::
name|Int32
argument_list|)
return|;
block|}
specifier|static
name|TypeIndex
name|UInt32
parameter_list|()
block|{
return|return
name|TypeIndex
argument_list|(
name|SimpleTypeKind
operator|::
name|UInt32
argument_list|)
return|;
block|}
specifier|static
name|TypeIndex
name|Int32Long
parameter_list|()
block|{
return|return
name|TypeIndex
argument_list|(
name|SimpleTypeKind
operator|::
name|Int32Long
argument_list|)
return|;
block|}
specifier|static
name|TypeIndex
name|UInt32Long
parameter_list|()
block|{
return|return
name|TypeIndex
argument_list|(
name|SimpleTypeKind
operator|::
name|UInt32Long
argument_list|)
return|;
block|}
specifier|static
name|TypeIndex
name|Int64
parameter_list|()
block|{
return|return
name|TypeIndex
argument_list|(
name|SimpleTypeKind
operator|::
name|Int64
argument_list|)
return|;
block|}
specifier|static
name|TypeIndex
name|UInt64
parameter_list|()
block|{
return|return
name|TypeIndex
argument_list|(
name|SimpleTypeKind
operator|::
name|UInt64
argument_list|)
return|;
block|}
specifier|static
name|TypeIndex
name|Int64Quad
parameter_list|()
block|{
return|return
name|TypeIndex
argument_list|(
name|SimpleTypeKind
operator|::
name|Int64Quad
argument_list|)
return|;
block|}
specifier|static
name|TypeIndex
name|UInt64Quad
parameter_list|()
block|{
return|return
name|TypeIndex
argument_list|(
name|SimpleTypeKind
operator|::
name|UInt64Quad
argument_list|)
return|;
block|}
specifier|static
name|TypeIndex
name|Float32
parameter_list|()
block|{
return|return
name|TypeIndex
argument_list|(
name|SimpleTypeKind
operator|::
name|Float32
argument_list|)
return|;
block|}
specifier|static
name|TypeIndex
name|Float64
parameter_list|()
block|{
return|return
name|TypeIndex
argument_list|(
name|SimpleTypeKind
operator|::
name|Float64
argument_list|)
return|;
block|}
name|TypeIndex
operator|&
name|operator
operator|+=
operator|(
name|unsigned
name|N
operator|)
block|{
name|Index
operator|+=
name|N
block|;
return|return
operator|*
name|this
return|;
block|}
name|TypeIndex
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|Index
operator|+=
literal|1
block|;
return|return
operator|*
name|this
return|;
block|}
name|TypeIndex
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|TypeIndex
name|Copy
operator|=
operator|*
name|this
block|;
name|operator
operator|++
operator|(
operator|)
block|;
return|return
name|Copy
return|;
block|}
name|TypeIndex
operator|&
name|operator
operator|-=
operator|(
name|unsigned
name|N
operator|)
block|{
name|assert
argument_list|(
name|Index
operator|>=
name|N
argument_list|)
block|;
name|Index
operator|-=
name|N
block|;
return|return
operator|*
name|this
return|;
block|}
name|TypeIndex
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
name|Index
operator|-=
literal|1
block|;
return|return
operator|*
name|this
return|;
block|}
name|TypeIndex
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|TypeIndex
name|Copy
operator|=
operator|*
name|this
block|;
name|operator
operator|--
operator|(
operator|)
block|;
return|return
name|Copy
return|;
block|}
name|friend
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|TypeIndex
operator|&
name|A
operator|,
specifier|const
name|TypeIndex
operator|&
name|B
operator|)
block|{
return|return
name|A
operator|.
name|getIndex
argument_list|()
operator|==
name|B
operator|.
name|getIndex
argument_list|()
return|;
block|}
name|friend
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|TypeIndex
operator|&
name|A
operator|,
specifier|const
name|TypeIndex
operator|&
name|B
operator|)
block|{
return|return
name|A
operator|.
name|getIndex
argument_list|()
operator|!=
name|B
operator|.
name|getIndex
argument_list|()
return|;
block|}
name|friend
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|TypeIndex
operator|&
name|A
operator|,
specifier|const
name|TypeIndex
operator|&
name|B
operator|)
block|{
return|return
name|A
operator|.
name|getIndex
argument_list|()
operator|<
name|B
operator|.
name|getIndex
argument_list|()
return|;
block|}
name|friend
specifier|inline
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|TypeIndex
operator|&
name|A
operator|,
specifier|const
name|TypeIndex
operator|&
name|B
operator|)
block|{
return|return
name|A
operator|.
name|getIndex
argument_list|()
operator|<=
name|B
operator|.
name|getIndex
argument_list|()
return|;
block|}
name|friend
specifier|inline
name|bool
name|operator
operator|>
operator|(
specifier|const
name|TypeIndex
operator|&
name|A
operator|,
specifier|const
name|TypeIndex
operator|&
name|B
operator|)
block|{
return|return
name|A
operator|.
name|getIndex
argument_list|()
operator|>
name|B
operator|.
name|getIndex
argument_list|()
return|;
block|}
name|friend
specifier|inline
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|TypeIndex
operator|&
name|A
operator|,
specifier|const
name|TypeIndex
operator|&
name|B
operator|)
block|{
return|return
name|A
operator|.
name|getIndex
argument_list|()
operator|>=
name|B
operator|.
name|getIndex
argument_list|()
return|;
block|}
name|friend
specifier|inline
name|TypeIndex
name|operator
operator|+
operator|(
specifier|const
name|TypeIndex
operator|&
name|A
operator|,
name|uint32_t
name|N
operator|)
block|{
name|TypeIndex
name|Result
argument_list|(
name|A
argument_list|)
block|;
name|Result
operator|+=
name|N
block|;
return|return
name|Result
return|;
block|}
name|friend
specifier|inline
name|TypeIndex
name|operator
operator|-
operator|(
specifier|const
name|TypeIndex
operator|&
name|A
operator|,
name|uint32_t
name|N
operator|)
block|{
name|assert
argument_list|(
name|A
operator|.
name|getIndex
argument_list|()
operator|>=
name|N
argument_list|)
block|;
name|TypeIndex
name|Result
argument_list|(
name|A
argument_list|)
block|;
name|Result
operator|-=
name|N
block|;
return|return
name|Result
return|;
block|}
name|private
label|:
name|support
operator|::
name|ulittle32_t
name|Index
expr_stmt|;
block|}
empty_stmt|;
comment|// Used for pseudo-indexing an array of type records.  An array of such records
comment|// sorted by TypeIndex can allow log(N) lookups even though such a type record
comment|// stream does not provide random access.
struct|struct
name|TypeIndexOffset
block|{
name|TypeIndex
name|Type
decl_stmt|;
name|support
operator|::
name|ulittle32_t
name|Offset
expr_stmt|;
block|}
struct|;
block|}
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

