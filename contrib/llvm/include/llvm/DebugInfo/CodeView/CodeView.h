begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- CodeView.h -----------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_CODEVIEW_CODEVIEW_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_CODEVIEW_CODEVIEW_H
end_define

begin_include
include|#
directive|include
file|<cinttypes>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|codeview
block|{
name|enum
name|class
name|CallingConvention
range|:
name|uint8_t
block|{
name|NearC
operator|=
literal|0x00
block|,
comment|// near right to left push, caller pops stack
name|FarC
operator|=
literal|0x01
block|,
comment|// far right to left push, caller pops stack
name|NearPascal
operator|=
literal|0x02
block|,
comment|// near left to right push, callee pops stack
name|FarPascal
operator|=
literal|0x03
block|,
comment|// far left to right push, callee pops stack
name|NearFast
operator|=
literal|0x04
block|,
comment|// near left to right push with regs, callee pops stack
name|FarFast
operator|=
literal|0x05
block|,
comment|// far left to right push with regs, callee pops stack
name|NearStdCall
operator|=
literal|0x07
block|,
comment|// near standard call
name|FarStdCall
operator|=
literal|0x08
block|,
comment|// far standard call
name|NearSysCall
operator|=
literal|0x09
block|,
comment|// near sys call
name|FarSysCall
operator|=
literal|0x0a
block|,
comment|// far sys call
name|ThisCall
operator|=
literal|0x0b
block|,
comment|// this call (this passed in register)
name|MipsCall
operator|=
literal|0x0c
block|,
comment|// Mips call
name|Generic
operator|=
literal|0x0d
block|,
comment|// Generic call sequence
name|AlphaCall
operator|=
literal|0x0e
block|,
comment|// Alpha call
name|PpcCall
operator|=
literal|0x0f
block|,
comment|// PPC call
name|SHCall
operator|=
literal|0x10
block|,
comment|// Hitachi SuperH call
name|ArmCall
operator|=
literal|0x11
block|,
comment|// ARM call
name|AM33Call
operator|=
literal|0x12
block|,
comment|// AM33 call
name|TriCall
operator|=
literal|0x13
block|,
comment|// TriCore Call
name|SH5Call
operator|=
literal|0x14
block|,
comment|// Hitachi SuperH-5 call
name|M32RCall
operator|=
literal|0x15
block|,
comment|// M32R Call
name|ClrCall
operator|=
literal|0x16
block|,
comment|// clr call
name|Inline
operator|=
literal|0x17
block|,
comment|// Marker for routines always inlined and thus lacking a convention
name|NearVector
operator|=
literal|0x18
comment|// near left to right push with regs, callee pops stack
block|}
decl_stmt|;
name|enum
name|class
name|ClassOptions
range|:
name|uint16_t
block|{
name|None
operator|=
literal|0x0000
block|,
name|Packed
operator|=
literal|0x0001
block|,
name|HasConstructorOrDestructor
operator|=
literal|0x0002
block|,
name|HasOverloadedOperator
operator|=
literal|0x0004
block|,
name|Nested
operator|=
literal|0x0008
block|,
name|ContainsNestedClass
operator|=
literal|0x0010
block|,
name|HasOverloadedAssignmentOperator
operator|=
literal|0x0020
block|,
name|HasConversionOperator
operator|=
literal|0x0040
block|,
name|ForwardReference
operator|=
literal|0x0080
block|,
name|Scoped
operator|=
literal|0x0100
block|,
name|HasUniqueName
operator|=
literal|0x0200
block|,
name|Sealed
operator|=
literal|0x0400
block|,
name|Intrinsic
operator|=
literal|0x2000
block|}
decl_stmt|;
specifier|inline
name|ClassOptions
name|operator
operator||
operator|(
name|ClassOptions
name|a
operator|,
name|ClassOptions
name|b
operator|)
block|{
return|return
name|static_cast
operator|<
name|ClassOptions
operator|>
operator|(
name|static_cast
operator|<
name|uint16_t
operator|>
operator|(
name|a
operator|)
operator||
name|static_cast
operator|<
name|uint16_t
operator|>
operator|(
name|b
operator|)
operator|)
return|;
block|}
specifier|inline
name|ClassOptions
name|operator
function|&(
name|ClassOptions
name|a
function|,
name|ClassOptions
function|b
block|)
block|{
return|return
name|static_cast
operator|<
name|ClassOptions
operator|>
operator|(
name|static_cast
operator|<
name|uint16_t
operator|>
operator|(
name|a
operator|)
operator|&
name|static_cast
operator|<
name|uint16_t
operator|>
operator|(
name|b
operator|)
operator|)
return|;
block|}
specifier|inline
name|ClassOptions
name|operator
operator|~
operator|(
name|ClassOptions
name|a
operator|)
block|{
return|return
name|static_cast
operator|<
name|ClassOptions
operator|>
operator|(
operator|~
name|static_cast
operator|<
name|uint16_t
operator|>
operator|(
name|a
operator|)
operator|)
return|;
block|}
name|enum
name|class
name|FrameProcedureOptions
range|:
name|uint32_t
block|{
name|None
operator|=
literal|0x00000000
block|,
name|HasAlloca
operator|=
literal|0x00000001
block|,
name|HasSetJmp
operator|=
literal|0x00000002
block|,
name|HasLongJmp
operator|=
literal|0x00000004
block|,
name|HasInlineAssembly
operator|=
literal|0x00000008
block|,
name|HasExceptionHandling
operator|=
literal|0x00000010
block|,
name|MarkedInline
operator|=
literal|0x00000020
block|,
name|HasStructuredExceptionHandling
operator|=
literal|0x00000040
block|,
name|Naked
operator|=
literal|0x00000080
block|,
name|SecurityChecks
operator|=
literal|0x00000100
block|,
name|AsynchronousExceptionHandling
operator|=
literal|0x00000200
block|,
name|NoStackOrderingForSecurityChecks
operator|=
literal|0x00000400
block|,
name|Inlined
operator|=
literal|0x00000800
block|,
name|StrictSecurityChecks
operator|=
literal|0x00001000
block|,
name|SafeBuffers
operator|=
literal|0x00002000
block|,
name|ProfileGuidedOptimization
operator|=
literal|0x00040000
block|,
name|ValidProfileCounts
operator|=
literal|0x00080000
block|,
name|OptimizedForSpeed
operator|=
literal|0x00100000
block|,
name|GuardCfg
operator|=
literal|0x00200000
block|,
name|GuardCfw
operator|=
literal|0x00400000
block|}
decl_stmt|;
specifier|inline
name|FrameProcedureOptions
name|operator
operator||
operator|(
name|FrameProcedureOptions
name|a
operator|,
name|FrameProcedureOptions
name|b
operator|)
block|{
return|return
name|static_cast
operator|<
name|FrameProcedureOptions
operator|>
operator|(
name|static_cast
operator|<
name|uint32_t
operator|>
operator|(
name|a
operator|)
operator||
name|static_cast
operator|<
name|uint32_t
operator|>
operator|(
name|b
operator|)
operator|)
return|;
block|}
specifier|inline
name|FrameProcedureOptions
name|operator
function|&(
name|FrameProcedureOptions
name|a
function|,
name|FrameProcedureOptions
function|b
block|)
block|{
return|return
name|static_cast
operator|<
name|FrameProcedureOptions
operator|>
operator|(
name|static_cast
operator|<
name|uint32_t
operator|>
operator|(
name|a
operator|)
operator|&
name|static_cast
operator|<
name|uint32_t
operator|>
operator|(
name|b
operator|)
operator|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
specifier|inline
name|FrameProcedureOptions
name|operator
operator|~
operator|(
name|FrameProcedureOptions
name|a
operator|)
block|{
return|return
name|static_cast
operator|<
name|FrameProcedureOptions
operator|>
operator|(
operator|~
name|static_cast
operator|<
name|uint32_t
operator|>
operator|(
name|a
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|enum
name|class
name|FunctionOptions
range|:
name|uint8_t
block|{
name|None
operator|=
literal|0x00
block|,
name|CxxReturnUdt
operator|=
literal|0x01
block|,
name|Constructor
operator|=
literal|0x02
block|,
name|ConstructorWithVirtualBases
operator|=
literal|0x04
block|}
decl_stmt|;
end_decl_stmt

begin_expr_stmt
specifier|inline
name|FunctionOptions
name|operator
operator||
operator|(
name|FunctionOptions
name|a
operator|,
name|FunctionOptions
name|b
operator|)
block|{
return|return
name|static_cast
operator|<
name|FunctionOptions
operator|>
operator|(
name|static_cast
operator|<
name|uint8_t
operator|>
operator|(
name|a
operator|)
operator||
name|static_cast
operator|<
name|uint8_t
operator|>
operator|(
name|b
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|FunctionOptions
name|operator
function|&(
name|FunctionOptions
name|a
function|,
name|FunctionOptions
function|b
end_function

begin_block
unit|)
block|{
return|return
name|static_cast
operator|<
name|FunctionOptions
operator|>
operator|(
name|static_cast
operator|<
name|uint8_t
operator|>
operator|(
name|a
operator|)
operator|&
name|static_cast
operator|<
name|uint8_t
operator|>
operator|(
name|b
operator|)
operator|)
return|;
block|}
end_block

begin_expr_stmt
specifier|inline
name|FunctionOptions
name|operator
operator|~
operator|(
name|FunctionOptions
name|a
operator|)
block|{
return|return
name|static_cast
operator|<
name|FunctionOptions
operator|>
operator|(
operator|~
name|static_cast
operator|<
name|uint8_t
operator|>
operator|(
name|a
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|enum
name|class
name|HfaKind
range|:
name|uint8_t
block|{
name|None
operator|=
literal|0x00
block|,
name|Float
operator|=
literal|0x01
block|,
name|Double
operator|=
literal|0x02
block|,
name|Other
operator|=
literal|0x03
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|enum
name|class
name|MemberAccess
range|:
name|uint8_t
block|{
name|None
operator|=
literal|0
block|,
name|Private
operator|=
literal|1
block|,
name|Protected
operator|=
literal|2
block|,
name|Public
operator|=
literal|3
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|enum
name|class
name|MethodKind
range|:
name|uint8_t
block|{
name|Vanilla
operator|=
literal|0x00
block|,
name|Virtual
operator|=
literal|0x01
block|,
name|Static
operator|=
literal|0x02
block|,
name|Friend
operator|=
literal|0x03
block|,
name|IntroducingVirtual
operator|=
literal|0x04
block|,
name|PureVirtual
operator|=
literal|0x05
block|,
name|PureIntroducingVirtual
operator|=
literal|0x06
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|enum
name|class
name|MethodOptions
range|:
name|uint16_t
block|{
name|None
operator|=
literal|0x0000
block|,
name|Pseudo
operator|=
literal|0x0020
block|,
name|CompilerGenerated
operator|=
literal|0x0100
block|,
name|Sealed
operator|=
literal|0x0200
block|}
decl_stmt|;
end_decl_stmt

begin_expr_stmt
specifier|inline
name|MethodOptions
name|operator
operator||
operator|(
name|MethodOptions
name|a
operator|,
name|MethodOptions
name|b
operator|)
block|{
return|return
name|static_cast
operator|<
name|MethodOptions
operator|>
operator|(
name|static_cast
operator|<
name|uint16_t
operator|>
operator|(
name|a
operator|)
operator||
name|static_cast
operator|<
name|uint16_t
operator|>
operator|(
name|b
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|MethodOptions
name|operator
function|&(
name|MethodOptions
name|a
function|,
name|MethodOptions
function|b
end_function

begin_block
unit|)
block|{
return|return
name|static_cast
operator|<
name|MethodOptions
operator|>
operator|(
name|static_cast
operator|<
name|uint16_t
operator|>
operator|(
name|a
operator|)
operator|&
name|static_cast
operator|<
name|uint16_t
operator|>
operator|(
name|b
operator|)
operator|)
return|;
block|}
end_block

begin_expr_stmt
specifier|inline
name|MethodOptions
name|operator
operator|~
operator|(
name|MethodOptions
name|a
operator|)
block|{
return|return
name|static_cast
operator|<
name|MethodOptions
operator|>
operator|(
operator|~
name|static_cast
operator|<
name|uint16_t
operator|>
operator|(
name|a
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|enum
name|class
name|ModifierOptions
range|:
name|uint16_t
block|{
name|None
operator|=
literal|0x0000
block|,
name|Const
operator|=
literal|0x0001
block|,
name|Volatile
operator|=
literal|0x0002
block|,
name|Unaligned
operator|=
literal|0x0004
block|}
decl_stmt|;
end_decl_stmt

begin_expr_stmt
specifier|inline
name|ModifierOptions
name|operator
operator||
operator|(
name|ModifierOptions
name|a
operator|,
name|ModifierOptions
name|b
operator|)
block|{
return|return
name|static_cast
operator|<
name|ModifierOptions
operator|>
operator|(
name|static_cast
operator|<
name|uint16_t
operator|>
operator|(
name|a
operator|)
operator||
name|static_cast
operator|<
name|uint16_t
operator|>
operator|(
name|b
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|ModifierOptions
name|operator
function|&(
name|ModifierOptions
name|a
function|,
name|ModifierOptions
function|b
end_function

begin_block
unit|)
block|{
return|return
name|static_cast
operator|<
name|ModifierOptions
operator|>
operator|(
name|static_cast
operator|<
name|uint16_t
operator|>
operator|(
name|a
operator|)
operator|&
name|static_cast
operator|<
name|uint16_t
operator|>
operator|(
name|b
operator|)
operator|)
return|;
block|}
end_block

begin_expr_stmt
specifier|inline
name|ModifierOptions
name|operator
operator|~
operator|(
name|ModifierOptions
name|a
operator|)
block|{
return|return
name|static_cast
operator|<
name|ModifierOptions
operator|>
operator|(
operator|~
name|static_cast
operator|<
name|uint16_t
operator|>
operator|(
name|a
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|enum
name|class
name|ModuleSubstreamKind
range|:
name|uint32_t
block|{
name|Symbols
operator|=
literal|0xf1
block|,
name|Lines
operator|=
literal|0xf2
block|,
name|StringTable
operator|=
literal|0xf3
block|,
name|FileChecksums
operator|=
literal|0xf4
block|,
name|FrameData
operator|=
literal|0xf5
block|,
name|InlineeLines
operator|=
literal|0xf6
block|,
name|CrossScopeImports
operator|=
literal|0xf7
block|,
name|CrossScopeExports
operator|=
literal|0xf8
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|enum
name|class
name|PointerKind
range|:
name|uint8_t
block|{
name|Near16
operator|=
literal|0x00
block|,
comment|// 16 bit pointer
name|Far16
operator|=
literal|0x01
block|,
comment|// 16:16 far pointer
name|Huge16
operator|=
literal|0x02
block|,
comment|// 16:16 huge pointer
name|BasedOnSegment
operator|=
literal|0x03
block|,
comment|// based on segment
name|BasedOnValue
operator|=
literal|0x04
block|,
comment|// based on value of base
name|BasedOnSegmentValue
operator|=
literal|0x05
block|,
comment|// based on segment value of base
name|BasedOnAddress
operator|=
literal|0x06
block|,
comment|// based on address of base
name|BasedOnSegmentAddress
operator|=
literal|0x07
block|,
comment|// based on segment address of base
name|BasedOnType
operator|=
literal|0x08
block|,
comment|// based on type
name|BasedOnSelf
operator|=
literal|0x09
block|,
comment|// based on self
name|Near32
operator|=
literal|0x0a
block|,
comment|// 32 bit pointer
name|Far32
operator|=
literal|0x0b
block|,
comment|// 16:32 pointer
name|Near64
operator|=
literal|0x0c
comment|// 64 bit pointer
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|enum
name|class
name|PointerMode
range|:
name|uint8_t
block|{
name|Pointer
operator|=
literal|0x00
block|,
comment|// "normal" pointer
name|LValueReference
operator|=
literal|0x01
block|,
comment|// "old" reference
name|PointerToDataMember
operator|=
literal|0x02
block|,
comment|// pointer to data member
name|PointerToMemberFunction
operator|=
literal|0x03
block|,
comment|// pointer to member function
name|RValueReference
operator|=
literal|0x04
comment|// r-value reference
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|enum
name|class
name|PointerOptions
range|:
name|uint32_t
block|{
name|None
operator|=
literal|0x00000000
block|,
name|Flat32
operator|=
literal|0x00000100
block|,
name|Volatile
operator|=
literal|0x00000200
block|,
name|Const
operator|=
literal|0x00000400
block|,
name|Unaligned
operator|=
literal|0x00000800
block|,
name|Restrict
operator|=
literal|0x00001000
block|,
name|WinRTSmartPointer
operator|=
literal|0x00080000
block|}
decl_stmt|;
end_decl_stmt

begin_expr_stmt
specifier|inline
name|PointerOptions
name|operator
operator||
operator|(
name|PointerOptions
name|a
operator|,
name|PointerOptions
name|b
operator|)
block|{
return|return
name|static_cast
operator|<
name|PointerOptions
operator|>
operator|(
name|static_cast
operator|<
name|uint16_t
operator|>
operator|(
name|a
operator|)
operator||
name|static_cast
operator|<
name|uint16_t
operator|>
operator|(
name|b
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|PointerOptions
name|operator
function|&(
name|PointerOptions
name|a
function|,
name|PointerOptions
function|b
end_function

begin_block
unit|)
block|{
return|return
name|static_cast
operator|<
name|PointerOptions
operator|>
operator|(
name|static_cast
operator|<
name|uint16_t
operator|>
operator|(
name|a
operator|)
operator|&
name|static_cast
operator|<
name|uint16_t
operator|>
operator|(
name|b
operator|)
operator|)
return|;
block|}
end_block

begin_expr_stmt
specifier|inline
name|PointerOptions
name|operator
operator|~
operator|(
name|PointerOptions
name|a
operator|)
block|{
return|return
name|static_cast
operator|<
name|PointerOptions
operator|>
operator|(
operator|~
name|static_cast
operator|<
name|uint16_t
operator|>
operator|(
name|a
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|enum
name|class
name|PointerToMemberRepresentation
range|:
name|uint16_t
block|{
name|Unknown
operator|=
literal|0x00
block|,
comment|// not specified (pre VC8)
name|SingleInheritanceData
operator|=
literal|0x01
block|,
comment|// member data, single inheritance
name|MultipleInheritanceData
operator|=
literal|0x02
block|,
comment|// member data, multiple inheritance
name|VirtualInheritanceData
operator|=
literal|0x03
block|,
comment|// member data, virtual inheritance
name|GeneralData
operator|=
literal|0x04
block|,
comment|// member data, most general
name|SingleInheritanceFunction
operator|=
literal|0x05
block|,
comment|// member function, single inheritance
name|MultipleInheritanceFunction
operator|=
literal|0x06
block|,
comment|// member function, multiple inheritance
name|VirtualInheritanceFunction
operator|=
literal|0x07
block|,
comment|// member function, virtual inheritance
name|GeneralFunction
operator|=
literal|0x08
comment|// member function, most general
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|enum
name|class
name|TypeRecordKind
range|:
name|uint16_t
block|{
name|None
operator|=
literal|0
block|,
name|VirtualTableShape
operator|=
literal|0x000a
block|,
name|Label
operator|=
literal|0x000e
block|,
name|EndPrecompiledHeader
operator|=
literal|0x0014
block|,
name|Modifier
operator|=
literal|0x1001
block|,
name|Pointer
operator|=
literal|0x1002
block|,
name|Procedure
operator|=
literal|0x1008
block|,
name|MemberFunction
operator|=
literal|0x1009
block|,
name|Oem
operator|=
literal|0x100f
block|,
name|Oem2
operator|=
literal|0x1011
block|,
name|ArgumentList
operator|=
literal|0x1201
block|,
name|FieldList
operator|=
literal|0x1203
block|,
name|BitField
operator|=
literal|0x1205
block|,
name|MethodList
operator|=
literal|0x1206
block|,
name|BaseClass
operator|=
literal|0x1400
block|,
name|VirtualBaseClass
operator|=
literal|0x1401
block|,
name|IndirectVirtualBaseClass
operator|=
literal|0x1402
block|,
name|Index
operator|=
literal|0x1404
block|,
name|VirtualFunctionTablePointer
operator|=
literal|0x1409
block|,
name|Enumerate
operator|=
literal|0x1502
block|,
name|Array
operator|=
literal|0x1503
block|,
name|Class
operator|=
literal|0x1504
block|,
name|Structure
operator|=
literal|0x1505
block|,
name|Union
operator|=
literal|0x1506
block|,
name|Enum
operator|=
literal|0x1507
block|,
name|Alias
operator|=
literal|0x150a
block|,
name|Member
operator|=
literal|0x150d
block|,
name|StaticMember
operator|=
literal|0x150e
block|,
name|Method
operator|=
literal|0x150f
block|,
name|NestedType
operator|=
literal|0x1510
block|,
name|OneMethod
operator|=
literal|0x1511
block|,
name|VirtualFunctionTable
operator|=
literal|0x151d
block|,
name|FunctionId
operator|=
literal|0x1601
block|,
name|MemberFunctionId
operator|=
literal|0x1602
block|,
name|BuildInfo
operator|=
literal|0x1603
block|,
name|SubstringList
operator|=
literal|0x1604
block|,
name|StringId
operator|=
literal|0x1605
block|,
name|UdtSourceLine
operator|=
literal|0x1606
block|,
name|SByte
operator|=
literal|0x8000
block|,
name|Int16
operator|=
literal|0x8001
block|,
name|UInt16
operator|=
literal|0x8002
block|,
name|Int32
operator|=
literal|0x8003
block|,
name|UInt32
operator|=
literal|0x8004
block|,
name|Single
operator|=
literal|0x8005
block|,
name|Double
operator|=
literal|0x8006
block|,
name|Float80
operator|=
literal|0x8007
block|,
name|Float128
operator|=
literal|0x8008
block|,
name|Int64
operator|=
literal|0x8009
block|,
name|UInt64
operator|=
literal|0x800a
block|,
name|Float48
operator|=
literal|0x800b
block|,
name|Complex32
operator|=
literal|0x800c
block|,
name|Complex64
operator|=
literal|0x800d
block|,
name|Complex80
operator|=
literal|0x800e
block|,
name|Complex128
operator|=
literal|0x800f
block|,
name|VarString
operator|=
literal|0x8010
block|,
name|Int128
operator|=
literal|0x8017
block|,
name|UInt128
operator|=
literal|0x8018
block|,
name|Decimal
operator|=
literal|0x8019
block|,
name|Date
operator|=
literal|0x801a
block|,
name|Utf8String
operator|=
literal|0x801b
block|,
name|Float16
operator|=
literal|0x801c
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|enum
name|class
name|VirtualTableSlotKind
range|:
name|uint8_t
block|{
name|Near16
operator|=
literal|0x00
block|,
name|Far16
operator|=
literal|0x01
block|,
name|This
operator|=
literal|0x02
block|,
name|Outer
operator|=
literal|0x03
block|,
name|Meta
operator|=
literal|0x04
block|,
name|Near
operator|=
literal|0x05
block|,
name|Far
operator|=
literal|0x06
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|enum
name|class
name|WindowsRTClassKind
range|:
name|uint8_t
block|{
name|None
operator|=
literal|0x00
block|,
name|RefClass
operator|=
literal|0x01
block|,
name|ValueClass
operator|=
literal|0x02
block|,
name|Interface
operator|=
literal|0x03
block|}
decl_stmt|;
end_decl_stmt

begin_endif
unit|} }
endif|#
directive|endif
end_endif

end_unit

