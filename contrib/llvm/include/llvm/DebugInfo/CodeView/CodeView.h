begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- CodeView.h -----------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_CODEVIEW_CODEVIEW_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_CODEVIEW_CODEVIEW_H
end_define

begin_include
include|#
directive|include
file|<cinttypes>
end_include

begin_include
include|#
directive|include
file|<type_traits>
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Endian.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|codeview
block|{
comment|/// Distinguishes individual records in .debug$T section or PDB type stream. The
comment|/// documentation and headers talk about this as the "leaf" type.
name|enum
name|class
name|TypeRecordKind
range|:
name|uint16_t
block|{
define|#
directive|define
name|TYPE_RECORD
parameter_list|(
name|lf_ename
parameter_list|,
name|value
parameter_list|,
name|name
parameter_list|)
value|name = value,
include|#
directive|include
file|"TypeRecords.def"
block|}
decl_stmt|;
comment|/// Duplicate copy of the above enum, but using the official CV names. Useful
comment|/// for reference purposes and when dealing with unknown record types.
enum|enum
name|TypeLeafKind
enum|:
name|uint16_t
block|{
define|#
directive|define
name|CV_TYPE
parameter_list|(
name|name
parameter_list|,
name|val
parameter_list|)
value|name = val,
include|#
directive|include
file|"TypeRecords.def"
block|}
enum|;
comment|/// Distinguishes individual records in the Symbols subsection of a .debug$S
comment|/// section. Equivalent to SYM_ENUM_e in cvinfo.h.
name|enum
name|class
name|SymbolRecordKind
range|:
name|uint16_t
block|{
define|#
directive|define
name|SYMBOL_RECORD
parameter_list|(
name|lf_ename
parameter_list|,
name|value
parameter_list|,
name|name
parameter_list|)
value|name = value,
include|#
directive|include
file|"CVSymbolTypes.def"
block|}
decl_stmt|;
comment|/// Duplicate copy of the above enum, but using the official CV names. Useful
comment|/// for reference purposes and when dealing with unknown record types.
enum|enum
name|SymbolKind
enum|:
name|uint16_t
block|{
define|#
directive|define
name|CV_SYMBOL
parameter_list|(
name|name
parameter_list|,
name|val
parameter_list|)
value|name = val,
include|#
directive|include
file|"CVSymbolTypes.def"
block|}
enum|;
define|#
directive|define
name|CV_DEFINE_ENUM_CLASS_FLAGS_OPERATORS
parameter_list|(
name|Class
parameter_list|)
define|\
value|inline Class operator|(Class a, Class b) {                                   \     return static_cast<Class>(                                                 \         static_cast<std::underlying_type<Class>::type>(a) |                    \         static_cast<std::underlying_type<Class>::type>(b));                    \   }                                                                            \   inline Class operator&(Class a, Class b) {                                   \     return static_cast<Class>(                                                 \         static_cast<std::underlying_type<Class>::type>(a)&                    \         static_cast<std::underlying_type<Class>::type>(b));                    \   }                                                                            \   inline Class operator~(Class a) {                                            \     return static_cast<Class>(                                                 \         ~static_cast<std::underlying_type<Class>::type>(a));                   \   }                                                                            \   inline Class&operator|=(Class&a, Class b) {                                \     a = a | b;                                                                 \     return a;                                                                  \   }                                                                            \   inline Class&operator&=(Class&a, Class b) {                                \     a = a& b;                                                                 \     return a;                                                                  \   }
comment|/// These values correspond to the CV_CPU_TYPE_e enumeration, and are documented
comment|/// here: https://msdn.microsoft.com/en-us/library/b2fc64ek.aspx
name|enum
name|class
name|CPUType
range|:
name|uint16_t
block|{
name|Intel8080
operator|=
literal|0x0
block|,
name|Intel8086
operator|=
literal|0x1
block|,
name|Intel80286
operator|=
literal|0x2
block|,
name|Intel80386
operator|=
literal|0x3
block|,
name|Intel80486
operator|=
literal|0x4
block|,
name|Pentium
operator|=
literal|0x5
block|,
name|PentiumPro
operator|=
literal|0x6
block|,
name|Pentium3
operator|=
literal|0x7
block|,
name|MIPS
operator|=
literal|0x10
block|,
name|MIPS16
operator|=
literal|0x11
block|,
name|MIPS32
operator|=
literal|0x12
block|,
name|MIPS64
operator|=
literal|0x13
block|,
name|MIPSI
operator|=
literal|0x14
block|,
name|MIPSII
operator|=
literal|0x15
block|,
name|MIPSIII
operator|=
literal|0x16
block|,
name|MIPSIV
operator|=
literal|0x17
block|,
name|MIPSV
operator|=
literal|0x18
block|,
name|M68000
operator|=
literal|0x20
block|,
name|M68010
operator|=
literal|0x21
block|,
name|M68020
operator|=
literal|0x22
block|,
name|M68030
operator|=
literal|0x23
block|,
name|M68040
operator|=
literal|0x24
block|,
name|Alpha
operator|=
literal|0x30
block|,
name|Alpha21164
operator|=
literal|0x31
block|,
name|Alpha21164A
operator|=
literal|0x32
block|,
name|Alpha21264
operator|=
literal|0x33
block|,
name|Alpha21364
operator|=
literal|0x34
block|,
name|PPC601
operator|=
literal|0x40
block|,
name|PPC603
operator|=
literal|0x41
block|,
name|PPC604
operator|=
literal|0x42
block|,
name|PPC620
operator|=
literal|0x43
block|,
name|PPCFP
operator|=
literal|0x44
block|,
name|PPCBE
operator|=
literal|0x45
block|,
name|SH3
operator|=
literal|0x50
block|,
name|SH3E
operator|=
literal|0x51
block|,
name|SH3DSP
operator|=
literal|0x52
block|,
name|SH4
operator|=
literal|0x53
block|,
name|SHMedia
operator|=
literal|0x54
block|,
name|ARM3
operator|=
literal|0x60
block|,
name|ARM4
operator|=
literal|0x61
block|,
name|ARM4T
operator|=
literal|0x62
block|,
name|ARM5
operator|=
literal|0x63
block|,
name|ARM5T
operator|=
literal|0x64
block|,
name|ARM6
operator|=
literal|0x65
block|,
name|ARM_XMAC
operator|=
literal|0x66
block|,
name|ARM_WMMX
operator|=
literal|0x67
block|,
name|ARM7
operator|=
literal|0x68
block|,
name|Omni
operator|=
literal|0x70
block|,
name|Ia64
operator|=
literal|0x80
block|,
name|Ia64_2
operator|=
literal|0x81
block|,
name|CEE
operator|=
literal|0x90
block|,
name|AM33
operator|=
literal|0xa0
block|,
name|M32R
operator|=
literal|0xb0
block|,
name|TriCore
operator|=
literal|0xc0
block|,
name|X64
operator|=
literal|0xd0
block|,
name|EBC
operator|=
literal|0xe0
block|,
name|Thumb
operator|=
literal|0xf0
block|,
name|ARMNT
operator|=
literal|0xf4
block|,
name|D3D11_Shader
operator|=
literal|0x100
block|, }
decl_stmt|;
comment|/// These values correspond to the CV_CFL_LANG enumeration, and are documented
comment|/// here: https://msdn.microsoft.com/en-us/library/bw3aekw6.aspx
enum|enum
name|SourceLanguage
enum|:
name|uint8_t
block|{
name|C
init|=
literal|0x00
block|,
name|Cpp
init|=
literal|0x01
block|,
name|Fortran
init|=
literal|0x02
block|,
name|Masm
init|=
literal|0x03
block|,
name|Pascal
init|=
literal|0x04
block|,
name|Basic
init|=
literal|0x05
block|,
name|Cobol
init|=
literal|0x06
block|,
name|Link
init|=
literal|0x07
block|,
name|Cvtres
init|=
literal|0x08
block|,
name|Cvtpgd
init|=
literal|0x09
block|,
name|CSharp
init|=
literal|0x0a
block|,
name|VB
init|=
literal|0x0b
block|,
name|ILAsm
init|=
literal|0x0c
block|,
name|Java
init|=
literal|0x0d
block|,
name|JScript
init|=
literal|0x0e
block|,
name|MSIL
init|=
literal|0x0f
block|,
name|HLSL
init|=
literal|0x10
block|}
enum|;
comment|/// These values correspond to the CV_call_e enumeration, and are documented
comment|/// at the following locations:
comment|///   https://msdn.microsoft.com/en-us/library/b2fc64ek.aspx
comment|///   https://msdn.microsoft.com/en-us/library/windows/desktop/ms680207(v=vs.85).aspx
comment|///
name|enum
name|class
name|CallingConvention
range|:
name|uint8_t
block|{
name|NearC
operator|=
literal|0x00
block|,
comment|// near right to left push, caller pops stack
name|FarC
operator|=
literal|0x01
block|,
comment|// far right to left push, caller pops stack
name|NearPascal
operator|=
literal|0x02
block|,
comment|// near left to right push, callee pops stack
name|FarPascal
operator|=
literal|0x03
block|,
comment|// far left to right push, callee pops stack
name|NearFast
operator|=
literal|0x04
block|,
comment|// near left to right push with regs, callee pops stack
name|FarFast
operator|=
literal|0x05
block|,
comment|// far left to right push with regs, callee pops stack
name|NearStdCall
operator|=
literal|0x07
block|,
comment|// near standard call
name|FarStdCall
operator|=
literal|0x08
block|,
comment|// far standard call
name|NearSysCall
operator|=
literal|0x09
block|,
comment|// near sys call
name|FarSysCall
operator|=
literal|0x0a
block|,
comment|// far sys call
name|ThisCall
operator|=
literal|0x0b
block|,
comment|// this call (this passed in register)
name|MipsCall
operator|=
literal|0x0c
block|,
comment|// Mips call
name|Generic
operator|=
literal|0x0d
block|,
comment|// Generic call sequence
name|AlphaCall
operator|=
literal|0x0e
block|,
comment|// Alpha call
name|PpcCall
operator|=
literal|0x0f
block|,
comment|// PPC call
name|SHCall
operator|=
literal|0x10
block|,
comment|// Hitachi SuperH call
name|ArmCall
operator|=
literal|0x11
block|,
comment|// ARM call
name|AM33Call
operator|=
literal|0x12
block|,
comment|// AM33 call
name|TriCall
operator|=
literal|0x13
block|,
comment|// TriCore Call
name|SH5Call
operator|=
literal|0x14
block|,
comment|// Hitachi SuperH-5 call
name|M32RCall
operator|=
literal|0x15
block|,
comment|// M32R Call
name|ClrCall
operator|=
literal|0x16
block|,
comment|// clr call
name|Inline
operator|=
literal|0x17
block|,
comment|// Marker for routines always inlined and thus lacking a convention
name|NearVector
operator|=
literal|0x18
comment|// near left to right push with regs, callee pops stack
block|}
decl_stmt|;
name|enum
name|class
name|ClassOptions
range|:
name|uint16_t
block|{
name|None
operator|=
literal|0x0000
block|,
name|Packed
operator|=
literal|0x0001
block|,
name|HasConstructorOrDestructor
operator|=
literal|0x0002
block|,
name|HasOverloadedOperator
operator|=
literal|0x0004
block|,
name|Nested
operator|=
literal|0x0008
block|,
name|ContainsNestedClass
operator|=
literal|0x0010
block|,
name|HasOverloadedAssignmentOperator
operator|=
literal|0x0020
block|,
name|HasConversionOperator
operator|=
literal|0x0040
block|,
name|ForwardReference
operator|=
literal|0x0080
block|,
name|Scoped
operator|=
literal|0x0100
block|,
name|HasUniqueName
operator|=
literal|0x0200
block|,
name|Sealed
operator|=
literal|0x0400
block|,
name|Intrinsic
operator|=
literal|0x2000
block|}
decl_stmt|;
name|CV_DEFINE_ENUM_CLASS_FLAGS_OPERATORS
argument_list|(
name|ClassOptions
argument_list|)
expr|enum
name|class
name|FrameProcedureOptions
operator|:
name|uint32_t
block|{
name|None
operator|=
literal|0x00000000
block|,
name|HasAlloca
operator|=
literal|0x00000001
block|,
name|HasSetJmp
operator|=
literal|0x00000002
block|,
name|HasLongJmp
operator|=
literal|0x00000004
block|,
name|HasInlineAssembly
operator|=
literal|0x00000008
block|,
name|HasExceptionHandling
operator|=
literal|0x00000010
block|,
name|MarkedInline
operator|=
literal|0x00000020
block|,
name|HasStructuredExceptionHandling
operator|=
literal|0x00000040
block|,
name|Naked
operator|=
literal|0x00000080
block|,
name|SecurityChecks
operator|=
literal|0x00000100
block|,
name|AsynchronousExceptionHandling
operator|=
literal|0x00000200
block|,
name|NoStackOrderingForSecurityChecks
operator|=
literal|0x00000400
block|,
name|Inlined
operator|=
literal|0x00000800
block|,
name|StrictSecurityChecks
operator|=
literal|0x00001000
block|,
name|SafeBuffers
operator|=
literal|0x00002000
block|,
name|ProfileGuidedOptimization
operator|=
literal|0x00040000
block|,
name|ValidProfileCounts
operator|=
literal|0x00080000
block|,
name|OptimizedForSpeed
operator|=
literal|0x00100000
block|,
name|GuardCfg
operator|=
literal|0x00200000
block|,
name|GuardCfw
operator|=
literal|0x00400000
block|}
expr_stmt|;
name|CV_DEFINE_ENUM_CLASS_FLAGS_OPERATORS
argument_list|(
name|FrameProcedureOptions
argument_list|)
expr|enum
name|class
name|FunctionOptions
operator|:
name|uint8_t
block|{
name|None
operator|=
literal|0x00
block|,
name|CxxReturnUdt
operator|=
literal|0x01
block|,
name|Constructor
operator|=
literal|0x02
block|,
name|ConstructorWithVirtualBases
operator|=
literal|0x04
block|}
expr_stmt|;
name|CV_DEFINE_ENUM_CLASS_FLAGS_OPERATORS
argument_list|(
name|FunctionOptions
argument_list|)
expr|enum
name|class
name|HfaKind
operator|:
name|uint8_t
block|{
name|None
operator|=
literal|0x00
block|,
name|Float
operator|=
literal|0x01
block|,
name|Double
operator|=
literal|0x02
block|,
name|Other
operator|=
literal|0x03
block|}
expr_stmt|;
comment|/// Source-level access specifier. (CV_access_e)
name|enum
name|class
name|MemberAccess
range|:
name|uint8_t
block|{
name|None
operator|=
literal|0
block|,
name|Private
operator|=
literal|1
block|,
name|Protected
operator|=
literal|2
block|,
name|Public
operator|=
literal|3
block|}
decl_stmt|;
comment|/// Part of member attribute flags. (CV_methodprop_e)
name|enum
name|class
name|MethodKind
range|:
name|uint8_t
block|{
name|Vanilla
operator|=
literal|0x00
block|,
name|Virtual
operator|=
literal|0x01
block|,
name|Static
operator|=
literal|0x02
block|,
name|Friend
operator|=
literal|0x03
block|,
name|IntroducingVirtual
operator|=
literal|0x04
block|,
name|PureVirtual
operator|=
literal|0x05
block|,
name|PureIntroducingVirtual
operator|=
literal|0x06
block|}
decl_stmt|;
comment|/// Equivalent to CV_fldattr_t bitfield.
name|enum
name|class
name|MethodOptions
range|:
name|uint16_t
block|{
name|None
operator|=
literal|0x0000
block|,
name|AccessMask
operator|=
literal|0x0003
block|,
name|MethodKindMask
operator|=
literal|0x001c
block|,
name|Pseudo
operator|=
literal|0x0020
block|,
name|NoInherit
operator|=
literal|0x0040
block|,
name|NoConstruct
operator|=
literal|0x0080
block|,
name|CompilerGenerated
operator|=
literal|0x0100
block|,
name|Sealed
operator|=
literal|0x0200
block|}
decl_stmt|;
name|CV_DEFINE_ENUM_CLASS_FLAGS_OPERATORS
argument_list|(
name|MethodOptions
argument_list|)
comment|/// Equivalent to CV_LABEL_TYPE_e.
expr|enum
name|class
name|LabelType
operator|:
name|uint16_t
block|{
name|Near
operator|=
literal|0x0
block|,
name|Far
operator|=
literal|0x4
block|, }
expr_stmt|;
comment|/// Equivalent to CV_modifier_t.
comment|/// TODO: Add flag for _Atomic modifier
name|enum
name|class
name|ModifierOptions
range|:
name|uint16_t
block|{
name|None
operator|=
literal|0x0000
block|,
name|Const
operator|=
literal|0x0001
block|,
name|Volatile
operator|=
literal|0x0002
block|,
name|Unaligned
operator|=
literal|0x0004
block|}
decl_stmt|;
name|CV_DEFINE_ENUM_CLASS_FLAGS_OPERATORS
argument_list|(
name|ModifierOptions
argument_list|)
expr|enum
name|class
name|DebugSubsectionKind
operator|:
name|uint32_t
block|{
name|None
operator|=
literal|0
block|,
name|Symbols
operator|=
literal|0xf1
block|,
name|Lines
operator|=
literal|0xf2
block|,
name|StringTable
operator|=
literal|0xf3
block|,
name|FileChecksums
operator|=
literal|0xf4
block|,
name|FrameData
operator|=
literal|0xf5
block|,
name|InlineeLines
operator|=
literal|0xf6
block|,
name|CrossScopeImports
operator|=
literal|0xf7
block|,
name|CrossScopeExports
operator|=
literal|0xf8
block|,
comment|// These appear to relate to .Net assembly info.
name|ILLines
operator|=
literal|0xf9
block|,
name|FuncMDTokenMap
operator|=
literal|0xfa
block|,
name|TypeMDTokenMap
operator|=
literal|0xfb
block|,
name|MergedAssemblyInput
operator|=
literal|0xfc
block|,
name|CoffSymbolRVA
operator|=
literal|0xfd
block|, }
expr_stmt|;
comment|/// Equivalent to CV_ptrtype_e.
name|enum
name|class
name|PointerKind
range|:
name|uint8_t
block|{
name|Near16
operator|=
literal|0x00
block|,
comment|// 16 bit pointer
name|Far16
operator|=
literal|0x01
block|,
comment|// 16:16 far pointer
name|Huge16
operator|=
literal|0x02
block|,
comment|// 16:16 huge pointer
name|BasedOnSegment
operator|=
literal|0x03
block|,
comment|// based on segment
name|BasedOnValue
operator|=
literal|0x04
block|,
comment|// based on value of base
name|BasedOnSegmentValue
operator|=
literal|0x05
block|,
comment|// based on segment value of base
name|BasedOnAddress
operator|=
literal|0x06
block|,
comment|// based on address of base
name|BasedOnSegmentAddress
operator|=
literal|0x07
block|,
comment|// based on segment address of base
name|BasedOnType
operator|=
literal|0x08
block|,
comment|// based on type
name|BasedOnSelf
operator|=
literal|0x09
block|,
comment|// based on self
name|Near32
operator|=
literal|0x0a
block|,
comment|// 32 bit pointer
name|Far32
operator|=
literal|0x0b
block|,
comment|// 16:32 pointer
name|Near64
operator|=
literal|0x0c
comment|// 64 bit pointer
block|}
decl_stmt|;
comment|/// Equivalent to CV_ptrmode_e.
name|enum
name|class
name|PointerMode
range|:
name|uint8_t
block|{
name|Pointer
operator|=
literal|0x00
block|,
comment|// "normal" pointer
name|LValueReference
operator|=
literal|0x01
block|,
comment|// "old" reference
name|PointerToDataMember
operator|=
literal|0x02
block|,
comment|// pointer to data member
name|PointerToMemberFunction
operator|=
literal|0x03
block|,
comment|// pointer to member function
name|RValueReference
operator|=
literal|0x04
comment|// r-value reference
block|}
decl_stmt|;
comment|/// Equivalent to misc lfPointerAttr bitfields.
name|enum
name|class
name|PointerOptions
range|:
name|uint32_t
block|{
name|None
operator|=
literal|0x00000000
block|,
name|Flat32
operator|=
literal|0x00000100
block|,
name|Volatile
operator|=
literal|0x00000200
block|,
name|Const
operator|=
literal|0x00000400
block|,
name|Unaligned
operator|=
literal|0x00000800
block|,
name|Restrict
operator|=
literal|0x00001000
block|,
name|WinRTSmartPointer
operator|=
literal|0x00080000
block|}
decl_stmt|;
name|CV_DEFINE_ENUM_CLASS_FLAGS_OPERATORS
argument_list|(
name|PointerOptions
argument_list|)
comment|/// Equivalent to CV_pmtype_e.
expr|enum
name|class
name|PointerToMemberRepresentation
operator|:
name|uint16_t
block|{
name|Unknown
operator|=
literal|0x00
block|,
comment|// not specified (pre VC8)
name|SingleInheritanceData
operator|=
literal|0x01
block|,
comment|// member data, single inheritance
name|MultipleInheritanceData
operator|=
literal|0x02
block|,
comment|// member data, multiple inheritance
name|VirtualInheritanceData
operator|=
literal|0x03
block|,
comment|// member data, virtual inheritance
name|GeneralData
operator|=
literal|0x04
block|,
comment|// member data, most general
name|SingleInheritanceFunction
operator|=
literal|0x05
block|,
comment|// member function, single inheritance
name|MultipleInheritanceFunction
operator|=
literal|0x06
block|,
comment|// member function, multiple inheritance
name|VirtualInheritanceFunction
operator|=
literal|0x07
block|,
comment|// member function, virtual inheritance
name|GeneralFunction
operator|=
literal|0x08
comment|// member function, most general
block|}
expr_stmt|;
name|enum
name|class
name|VFTableSlotKind
range|:
name|uint8_t
block|{
name|Near16
operator|=
literal|0x00
block|,
name|Far16
operator|=
literal|0x01
block|,
name|This
operator|=
literal|0x02
block|,
name|Outer
operator|=
literal|0x03
block|,
name|Meta
operator|=
literal|0x04
block|,
name|Near
operator|=
literal|0x05
block|,
name|Far
operator|=
literal|0x06
block|}
decl_stmt|;
name|enum
name|class
name|WindowsRTClassKind
range|:
name|uint8_t
block|{
name|None
operator|=
literal|0x00
block|,
name|RefClass
operator|=
literal|0x01
block|,
name|ValueClass
operator|=
literal|0x02
block|,
name|Interface
operator|=
literal|0x03
block|}
decl_stmt|;
comment|/// Corresponds to CV_LVARFLAGS bitfield.
name|enum
name|class
name|LocalSymFlags
range|:
name|uint16_t
block|{
name|None
operator|=
literal|0
block|,
name|IsParameter
operator|=
literal|1
operator|<<
literal|0
block|,
name|IsAddressTaken
operator|=
literal|1
operator|<<
literal|1
block|,
name|IsCompilerGenerated
operator|=
literal|1
operator|<<
literal|2
block|,
name|IsAggregate
operator|=
literal|1
operator|<<
literal|3
block|,
name|IsAggregated
operator|=
literal|1
operator|<<
literal|4
block|,
name|IsAliased
operator|=
literal|1
operator|<<
literal|5
block|,
name|IsAlias
operator|=
literal|1
operator|<<
literal|6
block|,
name|IsReturnValue
operator|=
literal|1
operator|<<
literal|7
block|,
name|IsOptimizedOut
operator|=
literal|1
operator|<<
literal|8
block|,
name|IsEnregisteredGlobal
operator|=
literal|1
operator|<<
literal|9
block|,
name|IsEnregisteredStatic
operator|=
literal|1
operator|<<
literal|10
block|, }
decl_stmt|;
name|CV_DEFINE_ENUM_CLASS_FLAGS_OPERATORS
argument_list|(
name|LocalSymFlags
argument_list|)
comment|/// Corresponds to the CV_PROCFLAGS bitfield.
expr|enum
name|class
name|ProcSymFlags
operator|:
name|uint8_t
block|{
name|None
operator|=
literal|0
block|,
name|HasFP
operator|=
literal|1
operator|<<
literal|0
block|,
name|HasIRET
operator|=
literal|1
operator|<<
literal|1
block|,
name|HasFRET
operator|=
literal|1
operator|<<
literal|2
block|,
name|IsNoReturn
operator|=
literal|1
operator|<<
literal|3
block|,
name|IsUnreachable
operator|=
literal|1
operator|<<
literal|4
block|,
name|HasCustomCallingConv
operator|=
literal|1
operator|<<
literal|5
block|,
name|IsNoInline
operator|=
literal|1
operator|<<
literal|6
block|,
name|HasOptimizedDebugInfo
operator|=
literal|1
operator|<<
literal|7
block|, }
expr_stmt|;
name|CV_DEFINE_ENUM_CLASS_FLAGS_OPERATORS
argument_list|(
name|ProcSymFlags
argument_list|)
comment|/// Corresponds to COMPILESYM2::Flags bitfield.
expr|enum
name|class
name|CompileSym2Flags
operator|:
name|uint32_t
block|{
name|EC
operator|=
literal|1
operator|<<
literal|8
block|,
name|NoDbgInfo
operator|=
literal|1
operator|<<
literal|9
block|,
name|LTCG
operator|=
literal|1
operator|<<
literal|10
block|,
name|NoDataAlign
operator|=
literal|1
operator|<<
literal|11
block|,
name|ManagedPresent
operator|=
literal|1
operator|<<
literal|12
block|,
name|SecurityChecks
operator|=
literal|1
operator|<<
literal|13
block|,
name|HotPatch
operator|=
literal|1
operator|<<
literal|14
block|,
name|CVTCIL
operator|=
literal|1
operator|<<
literal|15
block|,
name|MSILModule
operator|=
literal|1
operator|<<
literal|16
block|, }
expr_stmt|;
name|CV_DEFINE_ENUM_CLASS_FLAGS_OPERATORS
argument_list|(
name|CompileSym2Flags
argument_list|)
comment|/// Corresponds to COMPILESYM3::Flags bitfield.
expr|enum
name|class
name|CompileSym3Flags
operator|:
name|uint32_t
block|{
name|EC
operator|=
literal|1
operator|<<
literal|8
block|,
name|NoDbgInfo
operator|=
literal|1
operator|<<
literal|9
block|,
name|LTCG
operator|=
literal|1
operator|<<
literal|10
block|,
name|NoDataAlign
operator|=
literal|1
operator|<<
literal|11
block|,
name|ManagedPresent
operator|=
literal|1
operator|<<
literal|12
block|,
name|SecurityChecks
operator|=
literal|1
operator|<<
literal|13
block|,
name|HotPatch
operator|=
literal|1
operator|<<
literal|14
block|,
name|CVTCIL
operator|=
literal|1
operator|<<
literal|15
block|,
name|MSILModule
operator|=
literal|1
operator|<<
literal|16
block|,
name|Sdl
operator|=
literal|1
operator|<<
literal|17
block|,
name|PGO
operator|=
literal|1
operator|<<
literal|18
block|,
name|Exp
operator|=
literal|1
operator|<<
literal|19
block|, }
expr_stmt|;
name|CV_DEFINE_ENUM_CLASS_FLAGS_OPERATORS
argument_list|(
name|CompileSym3Flags
argument_list|)
expr|enum
name|class
name|ExportFlags
operator|:
name|uint16_t
block|{
name|IsConstant
operator|=
literal|1
operator|<<
literal|0
block|,
name|IsData
operator|=
literal|1
operator|<<
literal|1
block|,
name|IsPrivate
operator|=
literal|1
operator|<<
literal|2
block|,
name|HasNoName
operator|=
literal|1
operator|<<
literal|3
block|,
name|HasExplicitOrdinal
operator|=
literal|1
operator|<<
literal|4
block|,
name|IsForwarder
operator|=
literal|1
operator|<<
literal|5
block|}
expr_stmt|;
name|CV_DEFINE_ENUM_CLASS_FLAGS_OPERATORS
argument_list|(
name|ExportFlags
argument_list|)
comment|// Corresponds to BinaryAnnotationOpcode enum.
expr|enum
name|class
name|BinaryAnnotationsOpCode
operator|:
name|uint32_t
block|{
name|Invalid
block|,
name|CodeOffset
block|,
name|ChangeCodeOffsetBase
block|,
name|ChangeCodeOffset
block|,
name|ChangeCodeLength
block|,
name|ChangeFile
block|,
name|ChangeLineOffset
block|,
name|ChangeLineEndDelta
block|,
name|ChangeRangeKind
block|,
name|ChangeColumnStart
block|,
name|ChangeColumnEndDelta
block|,
name|ChangeCodeOffsetAndLineOffset
block|,
name|ChangeCodeLengthAndCodeOffset
block|,
name|ChangeColumnEnd
block|, }
expr_stmt|;
comment|// Corresponds to CV_cookietype_e enum.
name|enum
name|class
name|FrameCookieKind
range|:
name|uint8_t
block|{
name|Copy
block|,
name|XorStackPointer
block|,
name|XorFramePointer
block|,
name|XorR13
block|, }
decl_stmt|;
comment|// Corresponds to CV_HREG_e enum.
name|enum
name|class
name|RegisterId
range|:
name|uint16_t
block|{
name|Unknown
operator|=
literal|0
block|,
name|VFrame
operator|=
literal|30006
block|,
name|AL
operator|=
literal|1
block|,
name|CL
operator|=
literal|2
block|,
name|DL
operator|=
literal|3
block|,
name|BL
operator|=
literal|4
block|,
name|AH
operator|=
literal|5
block|,
name|CH
operator|=
literal|6
block|,
name|DH
operator|=
literal|7
block|,
name|BH
operator|=
literal|8
block|,
name|AX
operator|=
literal|9
block|,
name|CX
operator|=
literal|10
block|,
name|DX
operator|=
literal|11
block|,
name|BX
operator|=
literal|12
block|,
name|SP
operator|=
literal|13
block|,
name|BP
operator|=
literal|14
block|,
name|SI
operator|=
literal|15
block|,
name|DI
operator|=
literal|16
block|,
name|EAX
operator|=
literal|17
block|,
name|ECX
operator|=
literal|18
block|,
name|EDX
operator|=
literal|19
block|,
name|EBX
operator|=
literal|20
block|,
name|ESP
operator|=
literal|21
block|,
name|EBP
operator|=
literal|22
block|,
name|ESI
operator|=
literal|23
block|,
name|EDI
operator|=
literal|24
block|,
name|ES
operator|=
literal|25
block|,
name|CS
operator|=
literal|26
block|,
name|SS
operator|=
literal|27
block|,
name|DS
operator|=
literal|28
block|,
name|FS
operator|=
literal|29
block|,
name|GS
operator|=
literal|30
block|,
name|IP
operator|=
literal|31
block|,
name|RAX
operator|=
literal|328
block|,
name|RBX
operator|=
literal|329
block|,
name|RCX
operator|=
literal|330
block|,
name|RDX
operator|=
literal|331
block|,
name|RSI
operator|=
literal|332
block|,
name|RDI
operator|=
literal|333
block|,
name|RBP
operator|=
literal|334
block|,
name|RSP
operator|=
literal|335
block|,
name|R8
operator|=
literal|336
block|,
name|R9
operator|=
literal|337
block|,
name|R10
operator|=
literal|338
block|,
name|R11
operator|=
literal|339
block|,
name|R12
operator|=
literal|340
block|,
name|R13
operator|=
literal|341
block|,
name|R14
operator|=
literal|342
block|,
name|R15
operator|=
literal|343
block|, }
decl_stmt|;
comment|/// These values correspond to the THUNK_ORDINAL enumeration.
name|enum
name|class
name|ThunkOrdinal
range|:
name|uint8_t
block|{
name|Standard
block|,
name|ThisAdjustor
block|,
name|Vcall
block|,
name|Pcode
block|,
name|UnknownLoad
block|,
name|TrampIncremental
block|,
name|BranchIsland
block|}
decl_stmt|;
name|enum
name|class
name|TrampolineType
range|:
name|uint16_t
block|{
name|TrampIncremental
block|,
name|BranchIsland
block|}
decl_stmt|;
comment|// These values correspond to the CV_SourceChksum_t enumeration.
name|enum
name|class
name|FileChecksumKind
range|:
name|uint8_t
block|{
name|None
block|,
name|MD5
block|,
name|SHA1
block|,
name|SHA256
block|}
decl_stmt|;
enum|enum
name|LineFlags
enum|:
name|uint16_t
block|{
name|LF_None
init|=
literal|0
block|,
name|LF_HaveColumns
init|=
literal|1
block|,
comment|// CV_LINES_HAVE_COLUMNS
block|}
enum|;
comment|/// Data in the the SUBSEC_FRAMEDATA subection.
struct|struct
name|FrameData
block|{
name|support
operator|::
name|ulittle32_t
name|RvaStart
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|CodeSize
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|LocalSize
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|ParamsSize
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|MaxStackSize
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|FrameFunc
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|PrologSize
expr_stmt|;
name|support
operator|::
name|ulittle16_t
name|SavedRegsSize
expr_stmt|;
name|support
operator|::
name|ulittle32_t
name|Flags
expr_stmt|;
enum_decl|enum :
name|uint32_t
block|{
name|HasSEH
init|=
literal|1
operator|<<
literal|0
block|,
name|HasEH
init|=
literal|1
operator|<<
literal|1
block|,
name|IsFunctionStart
init|=
literal|1
operator|<<
literal|2
block|,   }
enum_decl|;
block|}
struct|;
block|}
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

