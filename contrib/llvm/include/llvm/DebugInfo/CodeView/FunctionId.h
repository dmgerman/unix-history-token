begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- FunctionId.h ---------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_CODEVIEW_FUNCTIONID_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_CODEVIEW_FUNCTIONID_H
end_define

begin_include
include|#
directive|include
file|<cinttypes>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|codeview
block|{
name|class
name|FunctionId
block|{
name|public
label|:
name|FunctionId
argument_list|()
operator|:
name|Index
argument_list|(
literal|0
argument_list|)
block|{}
name|explicit
name|FunctionId
argument_list|(
argument|uint32_t Index
argument_list|)
operator|:
name|Index
argument_list|(
argument|Index
argument_list|)
block|{}
name|uint32_t
name|getIndex
argument_list|()
specifier|const
block|{
return|return
name|Index
return|;
block|}
name|private
label|:
name|uint32_t
name|Index
decl_stmt|;
block|}
empty_stmt|;
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|FunctionId
operator|&
name|A
operator|,
specifier|const
name|FunctionId
operator|&
name|B
operator|)
block|{
return|return
name|A
operator|.
name|getIndex
argument_list|()
operator|==
name|B
operator|.
name|getIndex
argument_list|()
return|;
block|}
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|FunctionId
operator|&
name|A
operator|,
specifier|const
name|FunctionId
operator|&
name|B
operator|)
block|{
return|return
name|A
operator|.
name|getIndex
argument_list|()
operator|!=
name|B
operator|.
name|getIndex
argument_list|()
return|;
block|}
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|FunctionId
operator|&
name|A
operator|,
specifier|const
name|FunctionId
operator|&
name|B
operator|)
block|{
return|return
name|A
operator|.
name|getIndex
argument_list|()
operator|<
name|B
operator|.
name|getIndex
argument_list|()
return|;
block|}
specifier|inline
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|FunctionId
operator|&
name|A
operator|,
specifier|const
name|FunctionId
operator|&
name|B
operator|)
block|{
return|return
name|A
operator|.
name|getIndex
argument_list|()
operator|<=
name|B
operator|.
name|getIndex
argument_list|()
return|;
block|}
specifier|inline
name|bool
name|operator
operator|>
operator|(
specifier|const
name|FunctionId
operator|&
name|A
operator|,
specifier|const
name|FunctionId
operator|&
name|B
operator|)
block|{
return|return
name|A
operator|.
name|getIndex
argument_list|()
operator|>
name|B
operator|.
name|getIndex
argument_list|()
return|;
block|}
specifier|inline
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|FunctionId
operator|&
name|A
operator|,
specifier|const
name|FunctionId
operator|&
name|B
operator|)
block|{
return|return
name|A
operator|.
name|getIndex
argument_list|()
operator|>=
name|B
operator|.
name|getIndex
argument_list|()
return|;
block|}
block|}
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

