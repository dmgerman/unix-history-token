begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- TypeRecord.h ---------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_CODEVIEW_TYPERECORD_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_CODEVIEW_TYPERECORD_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/APSInt.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/Optional.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/iterator_range.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/CVRecord.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/CodeView.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/GUID.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/TypeIndex.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/BinaryStreamArray.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Endian.h"
end_include

begin_include
include|#
directive|include
file|<algorithm>
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|codeview
block|{
name|using
name|support
operator|::
name|little32_t
expr_stmt|;
name|using
name|support
operator|::
name|ulittle16_t
expr_stmt|;
name|using
name|support
operator|::
name|ulittle32_t
expr_stmt|;
name|using
name|CVType
init|=
name|CVRecord
operator|<
name|TypeLeafKind
operator|>
decl_stmt|;
name|using
name|RemappedType
init|=
name|RemappedRecord
operator|<
name|TypeLeafKind
operator|>
decl_stmt|;
struct|struct
name|CVMemberRecord
block|{
name|TypeLeafKind
name|Kind
decl_stmt|;
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|Data
expr_stmt|;
block|}
struct|;
name|using
name|CVTypeArray
init|=
name|VarStreamArray
operator|<
name|CVType
operator|>
decl_stmt|;
name|using
name|CVTypeRange
init|=
name|iterator_range
operator|<
name|CVTypeArray
operator|::
name|Iterator
operator|>
decl_stmt|;
comment|/// Equvalent to CV_fldattr_t in cvinfo.h.
struct|struct
name|MemberAttributes
block|{
name|uint16_t
name|Attrs
init|=
literal|0
decl_stmt|;
enum|enum
block|{
name|MethodKindShift
init|=
literal|2
block|,   }
enum|;
name|MemberAttributes
argument_list|()
operator|=
expr|default
expr_stmt|;
name|explicit
name|MemberAttributes
argument_list|(
argument|MemberAccess Access
argument_list|)
block|:
name|Attrs
argument_list|(
argument|static_cast<uint16_t>(Access)
argument_list|)
block|{}
name|MemberAttributes
argument_list|(
argument|MemberAccess Access
argument_list|,
argument|MethodKind Kind
argument_list|,
argument|MethodOptions Flags
argument_list|)
block|{
name|Attrs
operator|=
name|static_cast
operator|<
name|uint16_t
operator|>
operator|(
name|Access
operator|)
expr_stmt|;
name|Attrs
operator||=
operator|(
name|static_cast
operator|<
name|uint16_t
operator|>
operator|(
name|Kind
operator|)
operator|<<
name|MethodKindShift
operator|)
expr_stmt|;
name|Attrs
operator||=
name|static_cast
operator|<
name|uint16_t
operator|>
operator|(
name|Flags
operator|)
expr_stmt|;
block|}
comment|/// Get the access specifier. Valid for any kind of member.
name|MemberAccess
name|getAccess
argument_list|()
specifier|const
block|{
return|return
name|MemberAccess
argument_list|(
name|unsigned
argument_list|(
name|Attrs
argument_list|)
operator|&
name|unsigned
argument_list|(
name|MethodOptions
operator|::
name|AccessMask
argument_list|)
argument_list|)
return|;
block|}
comment|/// Indicates if a method is defined with friend, virtual, static, etc.
name|MethodKind
name|getMethodKind
argument_list|()
specifier|const
block|{
return|return
name|MethodKind
argument_list|(
operator|(
name|unsigned
argument_list|(
name|Attrs
argument_list|)
operator|&
name|unsigned
argument_list|(
name|MethodOptions
operator|::
name|MethodKindMask
argument_list|)
operator|)
operator|>>
name|MethodKindShift
argument_list|)
return|;
block|}
comment|/// Get the flags that are not included in access control or method
comment|/// properties.
name|MethodOptions
name|getFlags
argument_list|()
specifier|const
block|{
return|return
name|MethodOptions
argument_list|(
name|unsigned
argument_list|(
name|Attrs
argument_list|)
operator|&
operator|~
name|unsigned
argument_list|(
name|MethodOptions
operator|::
name|AccessMask
operator||
name|MethodOptions
operator|::
name|MethodKindMask
argument_list|)
argument_list|)
return|;
block|}
comment|/// Is this method virtual.
name|bool
name|isVirtual
argument_list|()
specifier|const
block|{
name|auto
name|MP
operator|=
name|getMethodKind
argument_list|()
block|;
return|return
name|MP
operator|!=
name|MethodKind
operator|::
name|Vanilla
operator|&&
name|MP
operator|!=
name|MethodKind
operator|::
name|Friend
operator|&&
name|MP
operator|!=
name|MethodKind
operator|::
name|Static
return|;
block|}
comment|/// Does this member introduce a new virtual method.
name|bool
name|isIntroducedVirtual
argument_list|()
specifier|const
block|{
name|auto
name|MP
operator|=
name|getMethodKind
argument_list|()
block|;
return|return
name|MP
operator|==
name|MethodKind
operator|::
name|IntroducingVirtual
operator|||
name|MP
operator|==
name|MethodKind
operator|::
name|PureIntroducingVirtual
return|;
block|}
block|}
struct|;
comment|// Does not correspond to any tag, this is the tail of an LF_POINTER record
comment|// if it represents a member pointer.
name|class
name|MemberPointerInfo
block|{
name|public
label|:
name|MemberPointerInfo
argument_list|()
operator|=
expr|default
expr_stmt|;
name|MemberPointerInfo
argument_list|(
argument|TypeIndex ContainingType
argument_list|,
argument|PointerToMemberRepresentation Representation
argument_list|)
block|:
name|ContainingType
argument_list|(
name|ContainingType
argument_list|)
operator|,
name|Representation
argument_list|(
argument|Representation
argument_list|)
block|{}
name|TypeIndex
name|getContainingType
argument_list|()
specifier|const
block|{
return|return
name|ContainingType
return|;
block|}
name|PointerToMemberRepresentation
name|getRepresentation
argument_list|()
specifier|const
block|{
return|return
name|Representation
return|;
block|}
name|TypeIndex
name|ContainingType
decl_stmt|;
name|PointerToMemberRepresentation
name|Representation
decl_stmt|;
block|}
empty_stmt|;
name|class
name|TypeRecord
block|{
name|protected
label|:
name|TypeRecord
argument_list|()
operator|=
expr|default
expr_stmt|;
name|explicit
name|TypeRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|)
block|:
name|Kind
argument_list|(
argument|Kind
argument_list|)
block|{}
name|public
label|:
name|TypeRecordKind
name|getKind
argument_list|()
specifier|const
block|{
return|return
name|Kind
return|;
block|}
name|TypeRecordKind
name|Kind
decl_stmt|;
block|}
empty_stmt|;
comment|// LF_MODIFIER
name|class
name|ModifierRecord
range|:
name|public
name|TypeRecord
block|{
name|public
operator|:
name|ModifierRecord
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|ModifierRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|)
operator|:
name|TypeRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|ModifierRecord
argument_list|(
argument|TypeIndex ModifiedType
argument_list|,
argument|ModifierOptions Modifiers
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|TypeRecordKind
operator|::
name|Modifier
argument_list|)
block|,
name|ModifiedType
argument_list|(
name|ModifiedType
argument_list|)
block|,
name|Modifiers
argument_list|(
argument|Modifiers
argument_list|)
block|{}
name|TypeIndex
name|getModifiedType
argument_list|()
specifier|const
block|{
return|return
name|ModifiedType
return|;
block|}
name|ModifierOptions
name|getModifiers
argument_list|()
specifier|const
block|{
return|return
name|Modifiers
return|;
block|}
name|TypeIndex
name|ModifiedType
block|;
name|ModifierOptions
name|Modifiers
block|; }
decl_stmt|;
comment|// LF_PROCEDURE
name|class
name|ProcedureRecord
range|:
name|public
name|TypeRecord
block|{
name|public
operator|:
name|ProcedureRecord
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|ProcedureRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|)
operator|:
name|TypeRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|ProcedureRecord
argument_list|(
argument|TypeIndex ReturnType
argument_list|,
argument|CallingConvention CallConv
argument_list|,
argument|FunctionOptions Options
argument_list|,
argument|uint16_t ParameterCount
argument_list|,
argument|TypeIndex ArgumentList
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|TypeRecordKind
operator|::
name|Procedure
argument_list|)
block|,
name|ReturnType
argument_list|(
name|ReturnType
argument_list|)
block|,
name|CallConv
argument_list|(
name|CallConv
argument_list|)
block|,
name|Options
argument_list|(
name|Options
argument_list|)
block|,
name|ParameterCount
argument_list|(
name|ParameterCount
argument_list|)
block|,
name|ArgumentList
argument_list|(
argument|ArgumentList
argument_list|)
block|{}
name|TypeIndex
name|getReturnType
argument_list|()
specifier|const
block|{
return|return
name|ReturnType
return|;
block|}
name|CallingConvention
name|getCallConv
argument_list|()
specifier|const
block|{
return|return
name|CallConv
return|;
block|}
name|FunctionOptions
name|getOptions
argument_list|()
specifier|const
block|{
return|return
name|Options
return|;
block|}
name|uint16_t
name|getParameterCount
argument_list|()
specifier|const
block|{
return|return
name|ParameterCount
return|;
block|}
name|TypeIndex
name|getArgumentList
argument_list|()
specifier|const
block|{
return|return
name|ArgumentList
return|;
block|}
name|TypeIndex
name|ReturnType
block|;
name|CallingConvention
name|CallConv
block|;
name|FunctionOptions
name|Options
block|;
name|uint16_t
name|ParameterCount
block|;
name|TypeIndex
name|ArgumentList
block|; }
decl_stmt|;
comment|// LF_MFUNCTION
name|class
name|MemberFunctionRecord
range|:
name|public
name|TypeRecord
block|{
name|public
operator|:
name|MemberFunctionRecord
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|MemberFunctionRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|)
operator|:
name|TypeRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|MemberFunctionRecord
argument_list|(
argument|TypeIndex ReturnType
argument_list|,
argument|TypeIndex ClassType
argument_list|,
argument|TypeIndex ThisType
argument_list|,
argument|CallingConvention CallConv
argument_list|,
argument|FunctionOptions Options
argument_list|,
argument|uint16_t ParameterCount
argument_list|,
argument|TypeIndex ArgumentList
argument_list|,
argument|int32_t ThisPointerAdjustment
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|TypeRecordKind
operator|::
name|MemberFunction
argument_list|)
block|,
name|ReturnType
argument_list|(
name|ReturnType
argument_list|)
block|,
name|ClassType
argument_list|(
name|ClassType
argument_list|)
block|,
name|ThisType
argument_list|(
name|ThisType
argument_list|)
block|,
name|CallConv
argument_list|(
name|CallConv
argument_list|)
block|,
name|Options
argument_list|(
name|Options
argument_list|)
block|,
name|ParameterCount
argument_list|(
name|ParameterCount
argument_list|)
block|,
name|ArgumentList
argument_list|(
name|ArgumentList
argument_list|)
block|,
name|ThisPointerAdjustment
argument_list|(
argument|ThisPointerAdjustment
argument_list|)
block|{}
name|TypeIndex
name|getReturnType
argument_list|()
specifier|const
block|{
return|return
name|ReturnType
return|;
block|}
name|TypeIndex
name|getClassType
argument_list|()
specifier|const
block|{
return|return
name|ClassType
return|;
block|}
name|TypeIndex
name|getThisType
argument_list|()
specifier|const
block|{
return|return
name|ThisType
return|;
block|}
name|CallingConvention
name|getCallConv
argument_list|()
specifier|const
block|{
return|return
name|CallConv
return|;
block|}
name|FunctionOptions
name|getOptions
argument_list|()
specifier|const
block|{
return|return
name|Options
return|;
block|}
name|uint16_t
name|getParameterCount
argument_list|()
specifier|const
block|{
return|return
name|ParameterCount
return|;
block|}
name|TypeIndex
name|getArgumentList
argument_list|()
specifier|const
block|{
return|return
name|ArgumentList
return|;
block|}
name|int32_t
name|getThisPointerAdjustment
argument_list|()
specifier|const
block|{
return|return
name|ThisPointerAdjustment
return|;
block|}
name|TypeIndex
name|ReturnType
block|;
name|TypeIndex
name|ClassType
block|;
name|TypeIndex
name|ThisType
block|;
name|CallingConvention
name|CallConv
block|;
name|FunctionOptions
name|Options
block|;
name|uint16_t
name|ParameterCount
block|;
name|TypeIndex
name|ArgumentList
block|;
name|int32_t
name|ThisPointerAdjustment
block|; }
decl_stmt|;
comment|// LF_LABEL
name|class
name|LabelRecord
range|:
name|public
name|TypeRecord
block|{
name|public
operator|:
name|LabelRecord
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|LabelRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|)
operator|:
name|TypeRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|LabelRecord
argument_list|(
argument|LabelType Mode
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|TypeRecordKind
operator|::
name|Label
argument_list|)
block|,
name|Mode
argument_list|(
argument|Mode
argument_list|)
block|{}
name|LabelType
name|Mode
block|; }
decl_stmt|;
comment|// LF_MFUNC_ID
name|class
name|MemberFuncIdRecord
range|:
name|public
name|TypeRecord
block|{
name|public
operator|:
name|MemberFuncIdRecord
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|MemberFuncIdRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|)
operator|:
name|TypeRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|MemberFuncIdRecord
argument_list|(
argument|TypeIndex ClassType
argument_list|,
argument|TypeIndex FunctionType
argument_list|,
argument|StringRef Name
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|TypeRecordKind
operator|::
name|MemberFuncId
argument_list|)
block|,
name|ClassType
argument_list|(
name|ClassType
argument_list|)
block|,
name|FunctionType
argument_list|(
name|FunctionType
argument_list|)
block|,
name|Name
argument_list|(
argument|Name
argument_list|)
block|{}
name|TypeIndex
name|getClassType
argument_list|()
specifier|const
block|{
return|return
name|ClassType
return|;
block|}
name|TypeIndex
name|getFunctionType
argument_list|()
specifier|const
block|{
return|return
name|FunctionType
return|;
block|}
name|StringRef
name|getName
argument_list|()
specifier|const
block|{
return|return
name|Name
return|;
block|}
name|TypeIndex
name|ClassType
block|;
name|TypeIndex
name|FunctionType
block|;
name|StringRef
name|Name
block|; }
decl_stmt|;
comment|// LF_ARGLIST
name|class
name|ArgListRecord
range|:
name|public
name|TypeRecord
block|{
name|public
operator|:
name|ArgListRecord
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|ArgListRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|)
operator|:
name|TypeRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|ArgListRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|,
argument|ArrayRef<TypeIndex> Indices
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|Kind
argument_list|)
block|,
name|ArgIndices
argument_list|(
argument|Indices
argument_list|)
block|{}
name|ArrayRef
operator|<
name|TypeIndex
operator|>
name|getIndices
argument_list|()
specifier|const
block|{
return|return
name|ArgIndices
return|;
block|}
name|std
operator|::
name|vector
operator|<
name|TypeIndex
operator|>
name|ArgIndices
block|; }
decl_stmt|;
comment|// LF_SUBSTR_LIST
name|class
name|StringListRecord
range|:
name|public
name|TypeRecord
block|{
name|public
operator|:
name|StringListRecord
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|StringListRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|)
operator|:
name|TypeRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|StringListRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|,
argument|ArrayRef<TypeIndex> Indices
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|Kind
argument_list|)
block|,
name|StringIndices
argument_list|(
argument|Indices
argument_list|)
block|{}
name|ArrayRef
operator|<
name|TypeIndex
operator|>
name|getIndices
argument_list|()
specifier|const
block|{
return|return
name|StringIndices
return|;
block|}
name|std
operator|::
name|vector
operator|<
name|TypeIndex
operator|>
name|StringIndices
block|; }
decl_stmt|;
comment|// LF_POINTER
name|class
name|PointerRecord
range|:
name|public
name|TypeRecord
block|{
name|public
operator|:
specifier|static
specifier|const
name|uint32_t
name|PointerKindShift
operator|=
literal|0
block|;
specifier|static
specifier|const
name|uint32_t
name|PointerKindMask
operator|=
literal|0x1F
block|;
specifier|static
specifier|const
name|uint32_t
name|PointerModeShift
operator|=
literal|5
block|;
specifier|static
specifier|const
name|uint32_t
name|PointerModeMask
operator|=
literal|0x07
block|;
specifier|static
specifier|const
name|uint32_t
name|PointerOptionMask
operator|=
literal|0xFF
block|;
specifier|static
specifier|const
name|uint32_t
name|PointerSizeShift
operator|=
literal|13
block|;
specifier|static
specifier|const
name|uint32_t
name|PointerSizeMask
operator|=
literal|0xFF
block|;
name|PointerRecord
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|PointerRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|)
operator|:
name|TypeRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|PointerRecord
argument_list|(
argument|TypeIndex ReferentType
argument_list|,
argument|uint32_t Attrs
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|TypeRecordKind
operator|::
name|Pointer
argument_list|)
block|,
name|ReferentType
argument_list|(
name|ReferentType
argument_list|)
block|,
name|Attrs
argument_list|(
argument|Attrs
argument_list|)
block|{}
name|PointerRecord
argument_list|(
argument|TypeIndex ReferentType
argument_list|,
argument|PointerKind PK
argument_list|,
argument|PointerMode PM
argument_list|,
argument|PointerOptions PO
argument_list|,
argument|uint8_t Size
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|TypeRecordKind
operator|::
name|Pointer
argument_list|)
block|,
name|ReferentType
argument_list|(
name|ReferentType
argument_list|)
block|,
name|Attrs
argument_list|(
argument|calcAttrs(PK, PM, PO, Size)
argument_list|)
block|{}
name|PointerRecord
argument_list|(
argument|TypeIndex ReferentType
argument_list|,
argument|PointerKind PK
argument_list|,
argument|PointerMode PM
argument_list|,
argument|PointerOptions PO
argument_list|,
argument|uint8_t Size
argument_list|,
argument|const MemberPointerInfo&MPI
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|TypeRecordKind
operator|::
name|Pointer
argument_list|)
block|,
name|ReferentType
argument_list|(
name|ReferentType
argument_list|)
block|,
name|Attrs
argument_list|(
name|calcAttrs
argument_list|(
name|PK
argument_list|,
name|PM
argument_list|,
name|PO
argument_list|,
name|Size
argument_list|)
argument_list|)
block|,
name|MemberInfo
argument_list|(
argument|MPI
argument_list|)
block|{}
name|TypeIndex
name|getReferentType
argument_list|()
specifier|const
block|{
return|return
name|ReferentType
return|;
block|}
name|PointerKind
name|getPointerKind
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|PointerKind
operator|>
operator|(
operator|(
name|Attrs
operator|>>
name|PointerKindShift
operator|)
operator|&
name|PointerKindMask
operator|)
return|;
block|}
name|PointerMode
name|getMode
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|PointerMode
operator|>
operator|(
operator|(
name|Attrs
operator|>>
name|PointerModeShift
operator|)
operator|&
name|PointerModeMask
operator|)
return|;
block|}
name|PointerOptions
name|getOptions
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|PointerOptions
operator|>
operator|(
name|Attrs
operator|)
return|;
block|}
name|uint8_t
name|getSize
argument_list|()
specifier|const
block|{
return|return
operator|(
name|Attrs
operator|>>
name|PointerSizeShift
operator|)
operator|&
name|PointerSizeMask
return|;
block|}
name|MemberPointerInfo
name|getMemberInfo
argument_list|()
specifier|const
block|{
return|return
operator|*
name|MemberInfo
return|;
block|}
name|bool
name|isPointerToMember
argument_list|()
specifier|const
block|{
return|return
name|getMode
argument_list|()
operator|==
name|PointerMode
operator|::
name|PointerToDataMember
operator|||
name|getMode
argument_list|()
operator|==
name|PointerMode
operator|::
name|PointerToMemberFunction
return|;
block|}
name|bool
name|isFlat
argument_list|()
specifier|const
block|{
return|return
operator|!
operator|!
operator|(
name|Attrs
operator|&
name|uint32_t
argument_list|(
name|PointerOptions
operator|::
name|Flat32
argument_list|)
operator|)
return|;
block|}
name|bool
name|isConst
argument_list|()
specifier|const
block|{
return|return
operator|!
operator|!
operator|(
name|Attrs
operator|&
name|uint32_t
argument_list|(
name|PointerOptions
operator|::
name|Const
argument_list|)
operator|)
return|;
block|}
name|bool
name|isVolatile
argument_list|()
specifier|const
block|{
return|return
operator|!
operator|!
operator|(
name|Attrs
operator|&
name|uint32_t
argument_list|(
name|PointerOptions
operator|::
name|Volatile
argument_list|)
operator|)
return|;
block|}
name|bool
name|isUnaligned
argument_list|()
specifier|const
block|{
return|return
operator|!
operator|!
operator|(
name|Attrs
operator|&
name|uint32_t
argument_list|(
name|PointerOptions
operator|::
name|Unaligned
argument_list|)
operator|)
return|;
block|}
name|TypeIndex
name|ReferentType
block|;
name|uint32_t
name|Attrs
block|;
name|Optional
operator|<
name|MemberPointerInfo
operator|>
name|MemberInfo
block|;
name|private
operator|:
specifier|static
name|uint32_t
name|calcAttrs
argument_list|(
argument|PointerKind PK
argument_list|,
argument|PointerMode PM
argument_list|,
argument|PointerOptions PO
argument_list|,
argument|uint8_t Size
argument_list|)
block|{
name|uint32_t
name|A
operator|=
literal|0
block|;
name|A
operator||=
name|static_cast
operator|<
name|uint32_t
operator|>
operator|(
name|PK
operator|)
block|;
name|A
operator||=
name|static_cast
operator|<
name|uint32_t
operator|>
operator|(
name|PO
operator|)
block|;
name|A
operator||=
operator|(
name|static_cast
operator|<
name|uint32_t
operator|>
operator|(
name|PM
operator|)
operator|<<
name|PointerModeShift
operator|)
block|;
name|A
operator||=
operator|(
name|static_cast
operator|<
name|uint32_t
operator|>
operator|(
name|Size
operator|)
operator|<<
name|PointerSizeShift
operator|)
block|;
return|return
name|A
return|;
block|}
expr|}
block|;
comment|// LF_NESTTYPE
name|class
name|NestedTypeRecord
operator|:
name|public
name|TypeRecord
block|{
name|public
operator|:
name|NestedTypeRecord
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|NestedTypeRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|)
operator|:
name|TypeRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|NestedTypeRecord
argument_list|(
argument|TypeIndex Type
argument_list|,
argument|StringRef Name
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|TypeRecordKind
operator|::
name|NestedType
argument_list|)
block|,
name|Type
argument_list|(
name|Type
argument_list|)
block|,
name|Name
argument_list|(
argument|Name
argument_list|)
block|{}
name|TypeIndex
name|getNestedType
argument_list|()
specifier|const
block|{
return|return
name|Type
return|;
block|}
name|StringRef
name|getName
argument_list|()
specifier|const
block|{
return|return
name|Name
return|;
block|}
name|TypeIndex
name|Type
block|;
name|StringRef
name|Name
block|; }
block|;
comment|// LF_FIELDLIST
name|class
name|FieldListRecord
operator|:
name|public
name|TypeRecord
block|{
name|public
operator|:
name|FieldListRecord
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|FieldListRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|)
operator|:
name|TypeRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|explicit
name|FieldListRecord
argument_list|(
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|Data
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|TypeRecordKind
operator|::
name|FieldList
argument_list|)
block|,
name|Data
argument_list|(
argument|Data
argument_list|)
block|{}
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|Data
block|; }
block|;
comment|// LF_ARRAY
name|class
name|ArrayRecord
operator|:
name|public
name|TypeRecord
block|{
name|public
operator|:
name|ArrayRecord
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|ArrayRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|)
operator|:
name|TypeRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|ArrayRecord
argument_list|(
argument|TypeIndex ElementType
argument_list|,
argument|TypeIndex IndexType
argument_list|,
argument|uint64_t Size
argument_list|,
argument|StringRef Name
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|TypeRecordKind
operator|::
name|Array
argument_list|)
block|,
name|ElementType
argument_list|(
name|ElementType
argument_list|)
block|,
name|IndexType
argument_list|(
name|IndexType
argument_list|)
block|,
name|Size
argument_list|(
name|Size
argument_list|)
block|,
name|Name
argument_list|(
argument|Name
argument_list|)
block|{}
name|TypeIndex
name|getElementType
argument_list|()
specifier|const
block|{
return|return
name|ElementType
return|;
block|}
name|TypeIndex
name|getIndexType
argument_list|()
specifier|const
block|{
return|return
name|IndexType
return|;
block|}
name|uint64_t
name|getSize
argument_list|()
specifier|const
block|{
return|return
name|Size
return|;
block|}
name|StringRef
name|getName
argument_list|()
specifier|const
block|{
return|return
name|Name
return|;
block|}
name|TypeIndex
name|ElementType
block|;
name|TypeIndex
name|IndexType
block|;
name|uint64_t
name|Size
block|;
name|StringRef
name|Name
block|; }
block|;
name|class
name|TagRecord
operator|:
name|public
name|TypeRecord
block|{
name|protected
operator|:
name|TagRecord
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|TagRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|)
operator|:
name|TypeRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|TagRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|,
argument|uint16_t MemberCount
argument_list|,
argument|ClassOptions Options
argument_list|,
argument|TypeIndex FieldList
argument_list|,
argument|StringRef Name
argument_list|,
argument|StringRef UniqueName
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|Kind
argument_list|)
block|,
name|MemberCount
argument_list|(
name|MemberCount
argument_list|)
block|,
name|Options
argument_list|(
name|Options
argument_list|)
block|,
name|FieldList
argument_list|(
name|FieldList
argument_list|)
block|,
name|Name
argument_list|(
name|Name
argument_list|)
block|,
name|UniqueName
argument_list|(
argument|UniqueName
argument_list|)
block|{}
name|public
operator|:
specifier|static
specifier|const
name|int
name|HfaKindShift
operator|=
literal|11
block|;
specifier|static
specifier|const
name|int
name|HfaKindMask
operator|=
literal|0x1800
block|;
specifier|static
specifier|const
name|int
name|WinRTKindShift
operator|=
literal|14
block|;
specifier|static
specifier|const
name|int
name|WinRTKindMask
operator|=
literal|0xC000
block|;
name|bool
name|hasUniqueName
argument_list|()
specifier|const
block|{
return|return
operator|(
name|Options
operator|&
name|ClassOptions
operator|::
name|HasUniqueName
operator|)
operator|!=
name|ClassOptions
operator|::
name|None
return|;
block|}
name|uint16_t
name|getMemberCount
argument_list|()
specifier|const
block|{
return|return
name|MemberCount
return|;
block|}
name|ClassOptions
name|getOptions
argument_list|()
specifier|const
block|{
return|return
name|Options
return|;
block|}
name|TypeIndex
name|getFieldList
argument_list|()
specifier|const
block|{
return|return
name|FieldList
return|;
block|}
name|StringRef
name|getName
argument_list|()
specifier|const
block|{
return|return
name|Name
return|;
block|}
name|StringRef
name|getUniqueName
argument_list|()
specifier|const
block|{
return|return
name|UniqueName
return|;
block|}
name|uint16_t
name|MemberCount
block|;
name|ClassOptions
name|Options
block|;
name|TypeIndex
name|FieldList
block|;
name|StringRef
name|Name
block|;
name|StringRef
name|UniqueName
block|; }
block|;
comment|// LF_CLASS, LF_STRUCTURE, LF_INTERFACE
name|class
name|ClassRecord
operator|:
name|public
name|TagRecord
block|{
name|public
operator|:
name|ClassRecord
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|ClassRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|)
operator|:
name|TagRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|ClassRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|,
argument|uint16_t MemberCount
argument_list|,
argument|ClassOptions Options
argument_list|,
argument|TypeIndex FieldList
argument_list|,
argument|TypeIndex DerivationList
argument_list|,
argument|TypeIndex VTableShape
argument_list|,
argument|uint64_t Size
argument_list|,
argument|StringRef Name
argument_list|,
argument|StringRef UniqueName
argument_list|)
operator|:
name|TagRecord
argument_list|(
name|Kind
argument_list|,
name|MemberCount
argument_list|,
name|Options
argument_list|,
name|FieldList
argument_list|,
name|Name
argument_list|,
name|UniqueName
argument_list|)
block|,
name|DerivationList
argument_list|(
name|DerivationList
argument_list|)
block|,
name|VTableShape
argument_list|(
name|VTableShape
argument_list|)
block|,
name|Size
argument_list|(
argument|Size
argument_list|)
block|{}
name|HfaKind
name|getHfa
argument_list|()
specifier|const
block|{
name|uint16_t
name|Value
operator|=
name|static_cast
operator|<
name|uint16_t
operator|>
operator|(
name|Options
operator|)
block|;
name|Value
operator|=
operator|(
name|Value
operator|&
name|HfaKindMask
operator|)
operator|>>
name|HfaKindShift
block|;
return|return
name|static_cast
operator|<
name|HfaKind
operator|>
operator|(
name|Value
operator|)
return|;
block|}
name|WindowsRTClassKind
name|getWinRTKind
argument_list|()
specifier|const
block|{
name|uint16_t
name|Value
operator|=
name|static_cast
operator|<
name|uint16_t
operator|>
operator|(
name|Options
operator|)
block|;
name|Value
operator|=
operator|(
name|Value
operator|&
name|WinRTKindMask
operator|)
operator|>>
name|WinRTKindShift
block|;
return|return
name|static_cast
operator|<
name|WindowsRTClassKind
operator|>
operator|(
name|Value
operator|)
return|;
block|}
name|TypeIndex
name|getDerivationList
argument_list|()
specifier|const
block|{
return|return
name|DerivationList
return|;
block|}
name|TypeIndex
name|getVTableShape
argument_list|()
specifier|const
block|{
return|return
name|VTableShape
return|;
block|}
name|uint64_t
name|getSize
argument_list|()
specifier|const
block|{
return|return
name|Size
return|;
block|}
name|TypeIndex
name|DerivationList
block|;
name|TypeIndex
name|VTableShape
block|;
name|uint64_t
name|Size
block|; }
block|;
comment|// LF_UNION
block|struct
name|UnionRecord
operator|:
name|public
name|TagRecord
block|{
name|UnionRecord
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|UnionRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|)
operator|:
name|TagRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|UnionRecord
argument_list|(
argument|uint16_t MemberCount
argument_list|,
argument|ClassOptions Options
argument_list|,
argument|TypeIndex FieldList
argument_list|,
argument|uint64_t Size
argument_list|,
argument|StringRef Name
argument_list|,
argument|StringRef UniqueName
argument_list|)
operator|:
name|TagRecord
argument_list|(
name|TypeRecordKind
operator|::
name|Union
argument_list|,
name|MemberCount
argument_list|,
name|Options
argument_list|,
name|FieldList
argument_list|,
name|Name
argument_list|,
name|UniqueName
argument_list|)
block|,
name|Size
argument_list|(
argument|Size
argument_list|)
block|{}
name|HfaKind
name|getHfa
argument_list|()
specifier|const
block|{
name|uint16_t
name|Value
operator|=
name|static_cast
operator|<
name|uint16_t
operator|>
operator|(
name|Options
operator|)
block|;
name|Value
operator|=
operator|(
name|Value
operator|&
name|HfaKindMask
operator|)
operator|>>
name|HfaKindShift
block|;
return|return
name|static_cast
operator|<
name|HfaKind
operator|>
operator|(
name|Value
operator|)
return|;
block|}
name|uint64_t
name|getSize
argument_list|()
specifier|const
block|{
return|return
name|Size
return|;
block|}
name|uint64_t
name|Size
block|; }
block|;
comment|// LF_ENUM
name|class
name|EnumRecord
operator|:
name|public
name|TagRecord
block|{
name|public
operator|:
name|EnumRecord
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|EnumRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|)
operator|:
name|TagRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|EnumRecord
argument_list|(
argument|uint16_t MemberCount
argument_list|,
argument|ClassOptions Options
argument_list|,
argument|TypeIndex FieldList
argument_list|,
argument|StringRef Name
argument_list|,
argument|StringRef UniqueName
argument_list|,
argument|TypeIndex UnderlyingType
argument_list|)
operator|:
name|TagRecord
argument_list|(
name|TypeRecordKind
operator|::
name|Enum
argument_list|,
name|MemberCount
argument_list|,
name|Options
argument_list|,
name|FieldList
argument_list|,
name|Name
argument_list|,
name|UniqueName
argument_list|)
block|,
name|UnderlyingType
argument_list|(
argument|UnderlyingType
argument_list|)
block|{}
name|TypeIndex
name|getUnderlyingType
argument_list|()
specifier|const
block|{
return|return
name|UnderlyingType
return|;
block|}
name|TypeIndex
name|UnderlyingType
block|; }
block|;
comment|// LF_BITFIELD
name|class
name|BitFieldRecord
operator|:
name|public
name|TypeRecord
block|{
name|public
operator|:
name|BitFieldRecord
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|BitFieldRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|)
operator|:
name|TypeRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|BitFieldRecord
argument_list|(
argument|TypeIndex Type
argument_list|,
argument|uint8_t BitSize
argument_list|,
argument|uint8_t BitOffset
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|TypeRecordKind
operator|::
name|BitField
argument_list|)
block|,
name|Type
argument_list|(
name|Type
argument_list|)
block|,
name|BitSize
argument_list|(
name|BitSize
argument_list|)
block|,
name|BitOffset
argument_list|(
argument|BitOffset
argument_list|)
block|{}
name|TypeIndex
name|getType
argument_list|()
specifier|const
block|{
return|return
name|Type
return|;
block|}
name|uint8_t
name|getBitOffset
argument_list|()
specifier|const
block|{
return|return
name|BitOffset
return|;
block|}
name|uint8_t
name|getBitSize
argument_list|()
specifier|const
block|{
return|return
name|BitSize
return|;
block|}
name|TypeIndex
name|Type
block|;
name|uint8_t
name|BitSize
block|;
name|uint8_t
name|BitOffset
block|; }
block|;
comment|// LF_VTSHAPE
name|class
name|VFTableShapeRecord
operator|:
name|public
name|TypeRecord
block|{
name|public
operator|:
name|VFTableShapeRecord
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|VFTableShapeRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|)
operator|:
name|TypeRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|explicit
name|VFTableShapeRecord
argument_list|(
name|ArrayRef
operator|<
name|VFTableSlotKind
operator|>
name|Slots
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|TypeRecordKind
operator|::
name|VFTableShape
argument_list|)
block|,
name|SlotsRef
argument_list|(
argument|Slots
argument_list|)
block|{}
name|explicit
name|VFTableShapeRecord
argument_list|(
name|std
operator|::
name|vector
operator|<
name|VFTableSlotKind
operator|>
name|Slots
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|TypeRecordKind
operator|::
name|VFTableShape
argument_list|)
block|,
name|Slots
argument_list|(
argument|std::move(Slots)
argument_list|)
block|{}
name|ArrayRef
operator|<
name|VFTableSlotKind
operator|>
name|getSlots
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|SlotsRef
operator|.
name|empty
argument_list|()
condition|)
return|return
name|SlotsRef
return|;
return|return
name|Slots
return|;
block|}
name|uint32_t
name|getEntryCount
argument_list|()
specifier|const
block|{
return|return
name|getSlots
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
name|ArrayRef
operator|<
name|VFTableSlotKind
operator|>
name|SlotsRef
block|;
name|std
operator|::
name|vector
operator|<
name|VFTableSlotKind
operator|>
name|Slots
block|; }
decl_stmt|;
comment|// LF_TYPESERVER2
name|class
name|TypeServer2Record
range|:
name|public
name|TypeRecord
block|{
name|public
operator|:
name|TypeServer2Record
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|TypeServer2Record
argument_list|(
argument|TypeRecordKind Kind
argument_list|)
operator|:
name|TypeRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|TypeServer2Record
argument_list|(
argument|StringRef GuidStr
argument_list|,
argument|uint32_t Age
argument_list|,
argument|StringRef Name
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|TypeRecordKind
operator|::
name|TypeServer2
argument_list|)
block|,
name|Age
argument_list|(
name|Age
argument_list|)
block|,
name|Name
argument_list|(
argument|Name
argument_list|)
block|{
name|assert
argument_list|(
name|GuidStr
operator|.
name|size
argument_list|()
operator|==
literal|16
operator|&&
literal|"guid isn't 16 bytes"
argument_list|)
block|;
operator|::
name|memcpy
argument_list|(
name|Guid
operator|.
name|Guid
argument_list|,
name|GuidStr
operator|.
name|data
argument_list|()
argument_list|,
literal|16
argument_list|)
block|;   }
specifier|const
name|GUID
operator|&
name|getGuid
argument_list|()
specifier|const
block|{
return|return
name|Guid
return|;
block|}
name|uint32_t
name|getAge
argument_list|()
specifier|const
block|{
return|return
name|Age
return|;
block|}
name|StringRef
name|getName
argument_list|()
specifier|const
block|{
return|return
name|Name
return|;
block|}
name|GUID
name|Guid
block|;
name|uint32_t
name|Age
block|;
name|StringRef
name|Name
block|; }
decl_stmt|;
comment|// LF_STRING_ID
name|class
name|StringIdRecord
range|:
name|public
name|TypeRecord
block|{
name|public
operator|:
name|StringIdRecord
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|StringIdRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|)
operator|:
name|TypeRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|StringIdRecord
argument_list|(
argument|TypeIndex Id
argument_list|,
argument|StringRef String
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|TypeRecordKind
operator|::
name|StringId
argument_list|)
block|,
name|Id
argument_list|(
name|Id
argument_list|)
block|,
name|String
argument_list|(
argument|String
argument_list|)
block|{}
name|TypeIndex
name|getId
argument_list|()
specifier|const
block|{
return|return
name|Id
return|;
block|}
name|StringRef
name|getString
argument_list|()
specifier|const
block|{
return|return
name|String
return|;
block|}
name|TypeIndex
name|Id
block|;
name|StringRef
name|String
block|; }
decl_stmt|;
comment|// LF_FUNC_ID
name|class
name|FuncIdRecord
range|:
name|public
name|TypeRecord
block|{
name|public
operator|:
name|FuncIdRecord
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|FuncIdRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|)
operator|:
name|TypeRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|FuncIdRecord
argument_list|(
argument|TypeIndex ParentScope
argument_list|,
argument|TypeIndex FunctionType
argument_list|,
argument|StringRef Name
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|TypeRecordKind
operator|::
name|FuncId
argument_list|)
block|,
name|ParentScope
argument_list|(
name|ParentScope
argument_list|)
block|,
name|FunctionType
argument_list|(
name|FunctionType
argument_list|)
block|,
name|Name
argument_list|(
argument|Name
argument_list|)
block|{}
name|TypeIndex
name|getParentScope
argument_list|()
specifier|const
block|{
return|return
name|ParentScope
return|;
block|}
name|TypeIndex
name|getFunctionType
argument_list|()
specifier|const
block|{
return|return
name|FunctionType
return|;
block|}
name|StringRef
name|getName
argument_list|()
specifier|const
block|{
return|return
name|Name
return|;
block|}
name|TypeIndex
name|ParentScope
block|;
name|TypeIndex
name|FunctionType
block|;
name|StringRef
name|Name
block|; }
decl_stmt|;
comment|// LF_UDT_SRC_LINE
name|class
name|UdtSourceLineRecord
range|:
name|public
name|TypeRecord
block|{
name|public
operator|:
name|UdtSourceLineRecord
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|UdtSourceLineRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|)
operator|:
name|TypeRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|UdtSourceLineRecord
argument_list|(
argument|TypeIndex UDT
argument_list|,
argument|TypeIndex SourceFile
argument_list|,
argument|uint32_t LineNumber
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|TypeRecordKind
operator|::
name|UdtSourceLine
argument_list|)
block|,
name|UDT
argument_list|(
name|UDT
argument_list|)
block|,
name|SourceFile
argument_list|(
name|SourceFile
argument_list|)
block|,
name|LineNumber
argument_list|(
argument|LineNumber
argument_list|)
block|{}
name|TypeIndex
name|getUDT
argument_list|()
specifier|const
block|{
return|return
name|UDT
return|;
block|}
name|TypeIndex
name|getSourceFile
argument_list|()
specifier|const
block|{
return|return
name|SourceFile
return|;
block|}
name|uint32_t
name|getLineNumber
argument_list|()
specifier|const
block|{
return|return
name|LineNumber
return|;
block|}
name|TypeIndex
name|UDT
block|;
name|TypeIndex
name|SourceFile
block|;
name|uint32_t
name|LineNumber
block|; }
decl_stmt|;
comment|// LF_UDT_MOD_SRC_LINE
name|class
name|UdtModSourceLineRecord
range|:
name|public
name|TypeRecord
block|{
name|public
operator|:
name|UdtModSourceLineRecord
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|UdtModSourceLineRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|)
operator|:
name|TypeRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|UdtModSourceLineRecord
argument_list|(
argument|TypeIndex UDT
argument_list|,
argument|TypeIndex SourceFile
argument_list|,
argument|uint32_t LineNumber
argument_list|,
argument|uint16_t Module
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|TypeRecordKind
operator|::
name|UdtSourceLine
argument_list|)
block|,
name|UDT
argument_list|(
name|UDT
argument_list|)
block|,
name|SourceFile
argument_list|(
name|SourceFile
argument_list|)
block|,
name|LineNumber
argument_list|(
name|LineNumber
argument_list|)
block|,
name|Module
argument_list|(
argument|Module
argument_list|)
block|{}
name|TypeIndex
name|getUDT
argument_list|()
specifier|const
block|{
return|return
name|UDT
return|;
block|}
name|TypeIndex
name|getSourceFile
argument_list|()
specifier|const
block|{
return|return
name|SourceFile
return|;
block|}
name|uint32_t
name|getLineNumber
argument_list|()
specifier|const
block|{
return|return
name|LineNumber
return|;
block|}
name|uint16_t
name|getModule
argument_list|()
specifier|const
block|{
return|return
name|Module
return|;
block|}
name|TypeIndex
name|UDT
block|;
name|TypeIndex
name|SourceFile
block|;
name|uint32_t
name|LineNumber
block|;
name|uint16_t
name|Module
block|; }
decl_stmt|;
comment|// LF_BUILDINFO
name|class
name|BuildInfoRecord
range|:
name|public
name|TypeRecord
block|{
name|public
operator|:
name|BuildInfoRecord
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|BuildInfoRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|)
operator|:
name|TypeRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|BuildInfoRecord
argument_list|(
name|ArrayRef
operator|<
name|TypeIndex
operator|>
name|ArgIndices
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|TypeRecordKind
operator|::
name|BuildInfo
argument_list|)
block|,
name|ArgIndices
argument_list|(
argument|ArgIndices.begin()
argument_list|,
argument|ArgIndices.end()
argument_list|)
block|{}
name|ArrayRef
operator|<
name|TypeIndex
operator|>
name|getArgs
argument_list|()
specifier|const
block|{
return|return
name|ArgIndices
return|;
block|}
name|SmallVector
operator|<
name|TypeIndex
block|,
literal|4
operator|>
name|ArgIndices
block|; }
decl_stmt|;
comment|// LF_VFTABLE
name|class
name|VFTableRecord
range|:
name|public
name|TypeRecord
block|{
name|public
operator|:
name|VFTableRecord
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|VFTableRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|)
operator|:
name|TypeRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|VFTableRecord
argument_list|(
argument|TypeIndex CompleteClass
argument_list|,
argument|TypeIndex OverriddenVFTable
argument_list|,
argument|uint32_t VFPtrOffset
argument_list|,
argument|StringRef Name
argument_list|,
argument|ArrayRef<StringRef> Methods
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|TypeRecordKind
operator|::
name|VFTable
argument_list|)
block|,
name|CompleteClass
argument_list|(
name|CompleteClass
argument_list|)
block|,
name|OverriddenVFTable
argument_list|(
name|OverriddenVFTable
argument_list|)
block|,
name|VFPtrOffset
argument_list|(
argument|VFPtrOffset
argument_list|)
block|{
name|MethodNames
operator|.
name|push_back
argument_list|(
name|Name
argument_list|)
block|;
name|MethodNames
operator|.
name|insert
argument_list|(
name|MethodNames
operator|.
name|end
argument_list|()
argument_list|,
name|Methods
operator|.
name|begin
argument_list|()
argument_list|,
name|Methods
operator|.
name|end
argument_list|()
argument_list|)
block|;   }
name|TypeIndex
name|getCompleteClass
argument_list|()
specifier|const
block|{
return|return
name|CompleteClass
return|;
block|}
name|TypeIndex
name|getOverriddenVTable
argument_list|()
specifier|const
block|{
return|return
name|OverriddenVFTable
return|;
block|}
name|uint32_t
name|getVFPtrOffset
argument_list|()
specifier|const
block|{
return|return
name|VFPtrOffset
return|;
block|}
name|StringRef
name|getName
argument_list|()
specifier|const
block|{
return|return
name|makeArrayRef
argument_list|(
name|MethodNames
argument_list|)
operator|.
name|front
argument_list|()
return|;
block|}
name|ArrayRef
operator|<
name|StringRef
operator|>
name|getMethodNames
argument_list|()
specifier|const
block|{
return|return
name|makeArrayRef
argument_list|(
name|MethodNames
argument_list|)
operator|.
name|drop_front
argument_list|()
return|;
block|}
name|TypeIndex
name|CompleteClass
block|;
name|TypeIndex
name|OverriddenVFTable
block|;
name|uint32_t
name|VFPtrOffset
block|;
name|std
operator|::
name|vector
operator|<
name|StringRef
operator|>
name|MethodNames
block|; }
decl_stmt|;
comment|// LF_ONEMETHOD
name|class
name|OneMethodRecord
range|:
name|public
name|TypeRecord
block|{
name|public
operator|:
name|OneMethodRecord
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|OneMethodRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|)
operator|:
name|TypeRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|OneMethodRecord
argument_list|(
argument|TypeIndex Type
argument_list|,
argument|MemberAttributes Attrs
argument_list|,
argument|int32_t VFTableOffset
argument_list|,
argument|StringRef Name
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|TypeRecordKind
operator|::
name|OneMethod
argument_list|)
block|,
name|Type
argument_list|(
name|Type
argument_list|)
block|,
name|Attrs
argument_list|(
name|Attrs
argument_list|)
block|,
name|VFTableOffset
argument_list|(
name|VFTableOffset
argument_list|)
block|,
name|Name
argument_list|(
argument|Name
argument_list|)
block|{}
name|OneMethodRecord
argument_list|(
argument|TypeIndex Type
argument_list|,
argument|MemberAccess Access
argument_list|,
argument|MethodKind MK
argument_list|,
argument|MethodOptions Options
argument_list|,
argument|int32_t VFTableOffset
argument_list|,
argument|StringRef Name
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|TypeRecordKind
operator|::
name|OneMethod
argument_list|)
block|,
name|Type
argument_list|(
name|Type
argument_list|)
block|,
name|Attrs
argument_list|(
name|Access
argument_list|,
name|MK
argument_list|,
name|Options
argument_list|)
block|,
name|VFTableOffset
argument_list|(
name|VFTableOffset
argument_list|)
block|,
name|Name
argument_list|(
argument|Name
argument_list|)
block|{}
name|TypeIndex
name|getType
argument_list|()
specifier|const
block|{
return|return
name|Type
return|;
block|}
name|MethodKind
name|getMethodKind
argument_list|()
specifier|const
block|{
return|return
name|Attrs
operator|.
name|getMethodKind
argument_list|()
return|;
block|}
name|MethodOptions
name|getOptions
argument_list|()
specifier|const
block|{
return|return
name|Attrs
operator|.
name|getFlags
argument_list|()
return|;
block|}
name|MemberAccess
name|getAccess
argument_list|()
specifier|const
block|{
return|return
name|Attrs
operator|.
name|getAccess
argument_list|()
return|;
block|}
name|int32_t
name|getVFTableOffset
argument_list|()
specifier|const
block|{
return|return
name|VFTableOffset
return|;
block|}
name|StringRef
name|getName
argument_list|()
specifier|const
block|{
return|return
name|Name
return|;
block|}
name|bool
name|isIntroducingVirtual
argument_list|()
specifier|const
block|{
return|return
name|getMethodKind
argument_list|()
operator|==
name|MethodKind
operator|::
name|IntroducingVirtual
operator|||
name|getMethodKind
argument_list|()
operator|==
name|MethodKind
operator|::
name|PureIntroducingVirtual
return|;
block|}
name|TypeIndex
name|Type
block|;
name|MemberAttributes
name|Attrs
block|;
name|int32_t
name|VFTableOffset
block|;
name|StringRef
name|Name
block|; }
decl_stmt|;
comment|// LF_METHODLIST
name|class
name|MethodOverloadListRecord
range|:
name|public
name|TypeRecord
block|{
name|public
operator|:
name|MethodOverloadListRecord
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|MethodOverloadListRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|)
operator|:
name|TypeRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|MethodOverloadListRecord
argument_list|(
name|ArrayRef
operator|<
name|OneMethodRecord
operator|>
name|Methods
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|TypeRecordKind
operator|::
name|MethodOverloadList
argument_list|)
block|,
name|Methods
argument_list|(
argument|Methods
argument_list|)
block|{}
name|ArrayRef
operator|<
name|OneMethodRecord
operator|>
name|getMethods
argument_list|()
specifier|const
block|{
return|return
name|Methods
return|;
block|}
name|std
operator|::
name|vector
operator|<
name|OneMethodRecord
operator|>
name|Methods
block|; }
decl_stmt|;
comment|/// For method overload sets.  LF_METHOD
name|class
name|OverloadedMethodRecord
range|:
name|public
name|TypeRecord
block|{
name|public
operator|:
name|OverloadedMethodRecord
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|OverloadedMethodRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|)
operator|:
name|TypeRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|OverloadedMethodRecord
argument_list|(
argument|uint16_t NumOverloads
argument_list|,
argument|TypeIndex MethodList
argument_list|,
argument|StringRef Name
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|TypeRecordKind
operator|::
name|OverloadedMethod
argument_list|)
block|,
name|NumOverloads
argument_list|(
name|NumOverloads
argument_list|)
block|,
name|MethodList
argument_list|(
name|MethodList
argument_list|)
block|,
name|Name
argument_list|(
argument|Name
argument_list|)
block|{}
name|uint16_t
name|getNumOverloads
argument_list|()
specifier|const
block|{
return|return
name|NumOverloads
return|;
block|}
name|TypeIndex
name|getMethodList
argument_list|()
specifier|const
block|{
return|return
name|MethodList
return|;
block|}
name|StringRef
name|getName
argument_list|()
specifier|const
block|{
return|return
name|Name
return|;
block|}
name|uint16_t
name|NumOverloads
block|;
name|TypeIndex
name|MethodList
block|;
name|StringRef
name|Name
block|; }
decl_stmt|;
comment|// LF_MEMBER
name|class
name|DataMemberRecord
range|:
name|public
name|TypeRecord
block|{
name|public
operator|:
name|DataMemberRecord
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|DataMemberRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|)
operator|:
name|TypeRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|DataMemberRecord
argument_list|(
argument|MemberAttributes Attrs
argument_list|,
argument|TypeIndex Type
argument_list|,
argument|uint64_t Offset
argument_list|,
argument|StringRef Name
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|TypeRecordKind
operator|::
name|DataMember
argument_list|)
block|,
name|Attrs
argument_list|(
name|Attrs
argument_list|)
block|,
name|Type
argument_list|(
name|Type
argument_list|)
block|,
name|FieldOffset
argument_list|(
name|Offset
argument_list|)
block|,
name|Name
argument_list|(
argument|Name
argument_list|)
block|{}
name|DataMemberRecord
argument_list|(
argument|MemberAccess Access
argument_list|,
argument|TypeIndex Type
argument_list|,
argument|uint64_t Offset
argument_list|,
argument|StringRef Name
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|TypeRecordKind
operator|::
name|DataMember
argument_list|)
block|,
name|Attrs
argument_list|(
name|Access
argument_list|)
block|,
name|Type
argument_list|(
name|Type
argument_list|)
block|,
name|FieldOffset
argument_list|(
name|Offset
argument_list|)
block|,
name|Name
argument_list|(
argument|Name
argument_list|)
block|{}
name|MemberAccess
name|getAccess
argument_list|()
specifier|const
block|{
return|return
name|Attrs
operator|.
name|getAccess
argument_list|()
return|;
block|}
name|TypeIndex
name|getType
argument_list|()
specifier|const
block|{
return|return
name|Type
return|;
block|}
name|uint64_t
name|getFieldOffset
argument_list|()
specifier|const
block|{
return|return
name|FieldOffset
return|;
block|}
name|StringRef
name|getName
argument_list|()
specifier|const
block|{
return|return
name|Name
return|;
block|}
name|MemberAttributes
name|Attrs
block|;
name|TypeIndex
name|Type
block|;
name|uint64_t
name|FieldOffset
block|;
name|StringRef
name|Name
block|; }
decl_stmt|;
comment|// LF_STMEMBER
name|class
name|StaticDataMemberRecord
range|:
name|public
name|TypeRecord
block|{
name|public
operator|:
name|StaticDataMemberRecord
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|StaticDataMemberRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|)
operator|:
name|TypeRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|StaticDataMemberRecord
argument_list|(
argument|MemberAttributes Attrs
argument_list|,
argument|TypeIndex Type
argument_list|,
argument|StringRef Name
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|TypeRecordKind
operator|::
name|StaticDataMember
argument_list|)
block|,
name|Attrs
argument_list|(
name|Attrs
argument_list|)
block|,
name|Type
argument_list|(
name|Type
argument_list|)
block|,
name|Name
argument_list|(
argument|Name
argument_list|)
block|{}
name|StaticDataMemberRecord
argument_list|(
argument|MemberAccess Access
argument_list|,
argument|TypeIndex Type
argument_list|,
argument|StringRef Name
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|TypeRecordKind
operator|::
name|StaticDataMember
argument_list|)
block|,
name|Attrs
argument_list|(
name|Access
argument_list|)
block|,
name|Type
argument_list|(
name|Type
argument_list|)
block|,
name|Name
argument_list|(
argument|Name
argument_list|)
block|{}
name|MemberAccess
name|getAccess
argument_list|()
specifier|const
block|{
return|return
name|Attrs
operator|.
name|getAccess
argument_list|()
return|;
block|}
name|TypeIndex
name|getType
argument_list|()
specifier|const
block|{
return|return
name|Type
return|;
block|}
name|StringRef
name|getName
argument_list|()
specifier|const
block|{
return|return
name|Name
return|;
block|}
name|MemberAttributes
name|Attrs
block|;
name|TypeIndex
name|Type
block|;
name|StringRef
name|Name
block|; }
decl_stmt|;
comment|// LF_ENUMERATE
name|class
name|EnumeratorRecord
range|:
name|public
name|TypeRecord
block|{
name|public
operator|:
name|EnumeratorRecord
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|EnumeratorRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|)
operator|:
name|TypeRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|EnumeratorRecord
argument_list|(
argument|MemberAttributes Attrs
argument_list|,
argument|APSInt Value
argument_list|,
argument|StringRef Name
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|TypeRecordKind
operator|::
name|Enumerator
argument_list|)
block|,
name|Attrs
argument_list|(
name|Attrs
argument_list|)
block|,
name|Value
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|Value
argument_list|)
argument_list|)
block|,
name|Name
argument_list|(
argument|Name
argument_list|)
block|{}
name|EnumeratorRecord
argument_list|(
argument|MemberAccess Access
argument_list|,
argument|APSInt Value
argument_list|,
argument|StringRef Name
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|TypeRecordKind
operator|::
name|Enumerator
argument_list|)
block|,
name|Attrs
argument_list|(
name|Access
argument_list|)
block|,
name|Value
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|Value
argument_list|)
argument_list|)
block|,
name|Name
argument_list|(
argument|Name
argument_list|)
block|{}
name|MemberAccess
name|getAccess
argument_list|()
specifier|const
block|{
return|return
name|Attrs
operator|.
name|getAccess
argument_list|()
return|;
block|}
name|APSInt
name|getValue
argument_list|()
specifier|const
block|{
return|return
name|Value
return|;
block|}
name|StringRef
name|getName
argument_list|()
specifier|const
block|{
return|return
name|Name
return|;
block|}
name|MemberAttributes
name|Attrs
block|;
name|APSInt
name|Value
block|;
name|StringRef
name|Name
block|; }
decl_stmt|;
comment|// LF_VFUNCTAB
name|class
name|VFPtrRecord
range|:
name|public
name|TypeRecord
block|{
name|public
operator|:
name|VFPtrRecord
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|VFPtrRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|)
operator|:
name|TypeRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|VFPtrRecord
argument_list|(
argument|TypeIndex Type
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|TypeRecordKind
operator|::
name|VFPtr
argument_list|)
block|,
name|Type
argument_list|(
argument|Type
argument_list|)
block|{}
name|TypeIndex
name|getType
argument_list|()
specifier|const
block|{
return|return
name|Type
return|;
block|}
name|TypeIndex
name|Type
block|; }
decl_stmt|;
comment|// LF_BCLASS, LF_BINTERFACE
name|class
name|BaseClassRecord
range|:
name|public
name|TypeRecord
block|{
name|public
operator|:
name|BaseClassRecord
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|BaseClassRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|)
operator|:
name|TypeRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|BaseClassRecord
argument_list|(
argument|MemberAttributes Attrs
argument_list|,
argument|TypeIndex Type
argument_list|,
argument|uint64_t Offset
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|TypeRecordKind
operator|::
name|BaseClass
argument_list|)
block|,
name|Attrs
argument_list|(
name|Attrs
argument_list|)
block|,
name|Type
argument_list|(
name|Type
argument_list|)
block|,
name|Offset
argument_list|(
argument|Offset
argument_list|)
block|{}
name|BaseClassRecord
argument_list|(
argument|MemberAccess Access
argument_list|,
argument|TypeIndex Type
argument_list|,
argument|uint64_t Offset
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|TypeRecordKind
operator|::
name|BaseClass
argument_list|)
block|,
name|Attrs
argument_list|(
name|Access
argument_list|)
block|,
name|Type
argument_list|(
name|Type
argument_list|)
block|,
name|Offset
argument_list|(
argument|Offset
argument_list|)
block|{}
name|MemberAccess
name|getAccess
argument_list|()
specifier|const
block|{
return|return
name|Attrs
operator|.
name|getAccess
argument_list|()
return|;
block|}
name|TypeIndex
name|getBaseType
argument_list|()
specifier|const
block|{
return|return
name|Type
return|;
block|}
name|uint64_t
name|getBaseOffset
argument_list|()
specifier|const
block|{
return|return
name|Offset
return|;
block|}
name|MemberAttributes
name|Attrs
block|;
name|TypeIndex
name|Type
block|;
name|uint64_t
name|Offset
block|; }
decl_stmt|;
comment|// LF_VBCLASS, LF_IVBCLASS
name|class
name|VirtualBaseClassRecord
range|:
name|public
name|TypeRecord
block|{
name|public
operator|:
name|VirtualBaseClassRecord
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|VirtualBaseClassRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|)
operator|:
name|TypeRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|VirtualBaseClassRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|,
argument|MemberAttributes Attrs
argument_list|,
argument|TypeIndex BaseType
argument_list|,
argument|TypeIndex VBPtrType
argument_list|,
argument|uint64_t Offset
argument_list|,
argument|uint64_t Index
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|Kind
argument_list|)
block|,
name|Attrs
argument_list|(
name|Attrs
argument_list|)
block|,
name|BaseType
argument_list|(
name|BaseType
argument_list|)
block|,
name|VBPtrType
argument_list|(
name|VBPtrType
argument_list|)
block|,
name|VBPtrOffset
argument_list|(
name|Offset
argument_list|)
block|,
name|VTableIndex
argument_list|(
argument|Index
argument_list|)
block|{}
name|VirtualBaseClassRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|,
argument|MemberAccess Access
argument_list|,
argument|TypeIndex BaseType
argument_list|,
argument|TypeIndex VBPtrType
argument_list|,
argument|uint64_t Offset
argument_list|,
argument|uint64_t Index
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|Kind
argument_list|)
block|,
name|Attrs
argument_list|(
name|Access
argument_list|)
block|,
name|BaseType
argument_list|(
name|BaseType
argument_list|)
block|,
name|VBPtrType
argument_list|(
name|VBPtrType
argument_list|)
block|,
name|VBPtrOffset
argument_list|(
name|Offset
argument_list|)
block|,
name|VTableIndex
argument_list|(
argument|Index
argument_list|)
block|{}
name|MemberAccess
name|getAccess
argument_list|()
specifier|const
block|{
return|return
name|Attrs
operator|.
name|getAccess
argument_list|()
return|;
block|}
name|TypeIndex
name|getBaseType
argument_list|()
specifier|const
block|{
return|return
name|BaseType
return|;
block|}
name|TypeIndex
name|getVBPtrType
argument_list|()
specifier|const
block|{
return|return
name|VBPtrType
return|;
block|}
name|uint64_t
name|getVBPtrOffset
argument_list|()
specifier|const
block|{
return|return
name|VBPtrOffset
return|;
block|}
name|uint64_t
name|getVTableIndex
argument_list|()
specifier|const
block|{
return|return
name|VTableIndex
return|;
block|}
name|MemberAttributes
name|Attrs
block|;
name|TypeIndex
name|BaseType
block|;
name|TypeIndex
name|VBPtrType
block|;
name|uint64_t
name|VBPtrOffset
block|;
name|uint64_t
name|VTableIndex
block|; }
decl_stmt|;
comment|/// LF_INDEX - Used to chain two large LF_FIELDLIST or LF_METHODLIST records
comment|/// together. The first will end in an LF_INDEX record that points to the next.
name|class
name|ListContinuationRecord
range|:
name|public
name|TypeRecord
block|{
name|public
operator|:
name|ListContinuationRecord
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|ListContinuationRecord
argument_list|(
argument|TypeRecordKind Kind
argument_list|)
operator|:
name|TypeRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|ListContinuationRecord
argument_list|(
argument|TypeIndex ContinuationIndex
argument_list|)
operator|:
name|TypeRecord
argument_list|(
name|TypeRecordKind
operator|::
name|ListContinuation
argument_list|)
block|,
name|ContinuationIndex
argument_list|(
argument|ContinuationIndex
argument_list|)
block|{}
name|TypeIndex
name|getContinuationIndex
argument_list|()
specifier|const
block|{
return|return
name|ContinuationIndex
return|;
block|}
name|TypeIndex
name|ContinuationIndex
block|; }
decl_stmt|;
block|}
comment|// end namespace codeview
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_DEBUGINFO_CODEVIEW_TYPERECORD_H
end_comment

end_unit

