begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- StreamRef.h - A copyable reference to a stream -----------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_CODEVIEW_STREAMREF_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_CODEVIEW_STREAMREF_H
end_define

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/CodeViewError.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/StreamInterface.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|codeview
block|{
name|class
name|StreamRef
block|{
name|public
label|:
name|StreamRef
argument_list|()
operator|:
name|Stream
argument_list|(
name|nullptr
argument_list|)
operator|,
name|ViewOffset
argument_list|(
literal|0
argument_list|)
operator|,
name|Length
argument_list|(
literal|0
argument_list|)
block|{}
name|StreamRef
argument_list|(
specifier|const
name|StreamInterface
operator|&
name|Stream
argument_list|)
operator|:
name|Stream
argument_list|(
operator|&
name|Stream
argument_list|)
operator|,
name|ViewOffset
argument_list|(
literal|0
argument_list|)
operator|,
name|Length
argument_list|(
argument|Stream.getLength()
argument_list|)
block|{}
name|StreamRef
argument_list|(
argument|const StreamInterface&Stream
argument_list|,
argument|uint32_t Offset
argument_list|,
argument|uint32_t Length
argument_list|)
operator|:
name|Stream
argument_list|(
operator|&
name|Stream
argument_list|)
operator|,
name|ViewOffset
argument_list|(
name|Offset
argument_list|)
operator|,
name|Length
argument_list|(
argument|Length
argument_list|)
block|{}
comment|// Use StreamRef.slice() instead.
name|StreamRef
argument_list|(
argument|const StreamRef&S
argument_list|,
argument|uint32_t Offset
argument_list|,
argument|uint32_t Length
argument_list|)
operator|=
name|delete
expr_stmt|;
name|Error
name|readBytes
argument_list|(
name|uint32_t
name|Offset
argument_list|,
name|uint32_t
name|Size
argument_list|,
name|ArrayRef
operator|<
name|uint8_t
operator|>
operator|&
name|Buffer
argument_list|)
decl|const
block|{
if|if
condition|(
name|ViewOffset
operator|+
name|Offset
operator|<
name|Offset
condition|)
return|return
name|make_error
operator|<
name|CodeViewError
operator|>
operator|(
name|cv_error_code
operator|::
name|insufficient_buffer
operator|)
return|;
if|if
condition|(
name|Size
operator|+
name|Offset
operator|>
name|Length
condition|)
return|return
name|make_error
operator|<
name|CodeViewError
operator|>
operator|(
name|cv_error_code
operator|::
name|insufficient_buffer
operator|)
return|;
return|return
name|Stream
operator|->
name|readBytes
argument_list|(
name|ViewOffset
operator|+
name|Offset
argument_list|,
name|Size
argument_list|,
name|Buffer
argument_list|)
return|;
block|}
comment|// Given an offset into the stream, read as much as possible without copying
comment|// any data.
name|Error
name|readLongestContiguousChunk
argument_list|(
name|uint32_t
name|Offset
argument_list|,
name|ArrayRef
operator|<
name|uint8_t
operator|>
operator|&
name|Buffer
argument_list|)
decl|const
block|{
if|if
condition|(
name|Offset
operator|>=
name|Length
condition|)
return|return
name|make_error
operator|<
name|CodeViewError
operator|>
operator|(
name|cv_error_code
operator|::
name|insufficient_buffer
operator|)
return|;
if|if
condition|(
name|auto
name|EC
init|=
name|Stream
operator|->
name|readLongestContiguousChunk
argument_list|(
name|Offset
argument_list|,
name|Buffer
argument_list|)
condition|)
return|return
name|EC
return|;
comment|// This StreamRef might refer to a smaller window over a larger stream.  In
comment|// that case we will have read out more bytes than we should return, because
comment|// we should not read past the end of the current view.
name|uint32_t
name|MaxLength
init|=
name|Length
operator|-
name|Offset
decl_stmt|;
if|if
condition|(
name|Buffer
operator|.
name|size
argument_list|()
operator|>
name|MaxLength
condition|)
name|Buffer
operator|=
name|Buffer
operator|.
name|slice
argument_list|(
literal|0
argument_list|,
name|MaxLength
argument_list|)
expr_stmt|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
name|Error
name|writeBytes
argument_list|(
name|uint32_t
name|Offset
argument_list|,
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|Data
argument_list|)
decl|const
block|{
if|if
condition|(
name|Data
operator|.
name|size
argument_list|()
operator|+
name|Offset
operator|>
name|Length
condition|)
return|return
name|make_error
operator|<
name|CodeViewError
operator|>
operator|(
name|cv_error_code
operator|::
name|insufficient_buffer
operator|)
return|;
return|return
name|Stream
operator|->
name|writeBytes
argument_list|(
name|ViewOffset
operator|+
name|Offset
argument_list|,
name|Data
argument_list|)
return|;
block|}
name|uint32_t
name|getLength
argument_list|()
specifier|const
block|{
return|return
name|Length
return|;
block|}
name|Error
name|commit
argument_list|()
specifier|const
block|{
return|return
name|Stream
operator|->
name|commit
argument_list|()
return|;
block|}
name|StreamRef
name|drop_front
argument_list|(
name|uint32_t
name|N
argument_list|)
decl|const
block|{
if|if
condition|(
operator|!
name|Stream
condition|)
return|return
name|StreamRef
argument_list|()
return|;
name|N
operator|=
name|std
operator|::
name|min
argument_list|(
name|N
argument_list|,
name|Length
argument_list|)
expr_stmt|;
return|return
name|StreamRef
argument_list|(
operator|*
name|Stream
argument_list|,
name|ViewOffset
operator|+
name|N
argument_list|,
name|Length
operator|-
name|N
argument_list|)
return|;
block|}
name|StreamRef
name|keep_front
argument_list|(
name|uint32_t
name|N
argument_list|)
decl|const
block|{
if|if
condition|(
operator|!
name|Stream
condition|)
return|return
name|StreamRef
argument_list|()
return|;
name|N
operator|=
name|std
operator|::
name|min
argument_list|(
name|N
argument_list|,
name|Length
argument_list|)
expr_stmt|;
return|return
name|StreamRef
argument_list|(
operator|*
name|Stream
argument_list|,
name|ViewOffset
argument_list|,
name|N
argument_list|)
return|;
block|}
name|StreamRef
name|slice
argument_list|(
name|uint32_t
name|Offset
argument_list|,
name|uint32_t
name|Len
argument_list|)
decl|const
block|{
return|return
name|drop_front
argument_list|(
name|Offset
argument_list|)
operator|.
name|keep_front
argument_list|(
name|Len
argument_list|)
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|StreamRef
operator|&
name|Other
operator|)
specifier|const
block|{
if|if
condition|(
name|Stream
operator|!=
name|Other
operator|.
name|Stream
condition|)
return|return
name|false
return|;
if|if
condition|(
name|ViewOffset
operator|!=
name|Other
operator|.
name|ViewOffset
condition|)
return|return
name|false
return|;
if|if
condition|(
name|Length
operator|!=
name|Other
operator|.
name|Length
condition|)
return|return
name|false
return|;
return|return
name|true
return|;
block|}
name|private
label|:
specifier|const
name|StreamInterface
modifier|*
name|Stream
decl_stmt|;
name|uint32_t
name|ViewOffset
decl_stmt|;
name|uint32_t
name|Length
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_DEBUGINFO_CODEVIEW_STREAMREF_H
end_comment

end_unit

