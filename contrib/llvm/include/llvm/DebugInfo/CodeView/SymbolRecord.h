begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- SymbolRecord.h -------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_CODEVIEW_SYMBOLRECORD_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_CODEVIEW_SYMBOLRECORD_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/APSInt.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/Optional.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/iterator_range.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/CVRecord.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/CodeView.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/RecordSerialization.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/TypeIndex.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/BinaryStreamArray.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Endian.h"
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|codeview
block|{
name|class
name|SymbolRecord
block|{
name|protected
label|:
name|explicit
name|SymbolRecord
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
block|:
name|Kind
argument_list|(
argument|Kind
argument_list|)
block|{}
name|public
label|:
name|SymbolRecordKind
name|getKind
argument_list|()
specifier|const
block|{
return|return
name|Kind
return|;
block|}
name|SymbolRecordKind
name|Kind
decl_stmt|;
block|}
empty_stmt|;
comment|// S_GPROC32, S_LPROC32, S_GPROC32_ID, S_LPROC32_ID, S_LPROC32_DPC or
comment|// S_LPROC32_DPC_ID
name|class
name|ProcSym
range|:
name|public
name|SymbolRecord
block|{
specifier|static
name|constexpr
name|uint32_t
name|RelocationOffset
operator|=
literal|32
block|;
name|public
operator|:
name|explicit
name|ProcSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|ProcSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|Kind
argument_list|)
block|,
name|RecordOffset
argument_list|(
argument|RecordOffset
argument_list|)
block|{}
name|uint32_t
name|getRelocationOffset
argument_list|()
specifier|const
block|{
return|return
name|RecordOffset
operator|+
name|RelocationOffset
return|;
block|}
name|uint32_t
name|Parent
operator|=
literal|0
block|;
name|uint32_t
name|End
operator|=
literal|0
block|;
name|uint32_t
name|Next
operator|=
literal|0
block|;
name|uint32_t
name|CodeSize
operator|=
literal|0
block|;
name|uint32_t
name|DbgStart
operator|=
literal|0
block|;
name|uint32_t
name|DbgEnd
operator|=
literal|0
block|;
name|TypeIndex
name|FunctionType
block|;
name|uint32_t
name|CodeOffset
operator|=
literal|0
block|;
name|uint16_t
name|Segment
operator|=
literal|0
block|;
name|ProcSymFlags
name|Flags
operator|=
name|ProcSymFlags
operator|::
name|None
block|;
name|StringRef
name|Name
block|;
name|uint32_t
name|RecordOffset
operator|=
literal|0
block|; }
decl_stmt|;
comment|// S_THUNK32
name|class
name|Thunk32Sym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
name|explicit
name|Thunk32Sym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|Thunk32Sym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|Kind
argument_list|)
block|,
name|RecordOffset
argument_list|(
argument|RecordOffset
argument_list|)
block|{}
name|uint32_t
name|Parent
block|;
name|uint32_t
name|End
block|;
name|uint32_t
name|Next
block|;
name|uint32_t
name|Offset
block|;
name|uint16_t
name|Segment
block|;
name|uint16_t
name|Length
block|;
name|ThunkOrdinal
name|Thunk
block|;
name|StringRef
name|Name
block|;
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|VariantData
block|;
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
comment|// S_TRAMPOLINE
name|class
name|TrampolineSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
name|explicit
name|TrampolineSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|TrampolineSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|Kind
argument_list|)
block|,
name|RecordOffset
argument_list|(
argument|RecordOffset
argument_list|)
block|{}
name|TrampolineType
name|Type
block|;
name|uint16_t
name|Size
block|;
name|uint32_t
name|ThunkOffset
block|;
name|uint32_t
name|TargetOffset
block|;
name|uint16_t
name|ThunkSection
block|;
name|uint16_t
name|TargetSection
block|;
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
comment|// S_SECTION
name|class
name|SectionSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
name|explicit
name|SectionSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|SectionSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|Kind
argument_list|)
block|,
name|RecordOffset
argument_list|(
argument|RecordOffset
argument_list|)
block|{}
name|uint16_t
name|SectionNumber
block|;
name|uint8_t
name|Alignment
block|;
name|uint32_t
name|Rva
block|;
name|uint32_t
name|Length
block|;
name|uint32_t
name|Characteristics
block|;
name|StringRef
name|Name
block|;
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
comment|// S_COFFGROUP
name|class
name|CoffGroupSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
name|explicit
name|CoffGroupSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|CoffGroupSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|Kind
argument_list|)
block|,
name|RecordOffset
argument_list|(
argument|RecordOffset
argument_list|)
block|{}
name|uint32_t
name|Size
block|;
name|uint32_t
name|Characteristics
block|;
name|uint32_t
name|Offset
block|;
name|uint16_t
name|Segment
block|;
name|StringRef
name|Name
block|;
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
name|class
name|ScopeEndSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
name|explicit
name|ScopeEndSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|ScopeEndSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|Kind
argument_list|)
block|,
name|RecordOffset
argument_list|(
argument|RecordOffset
argument_list|)
block|{}
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
name|class
name|CallerSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
name|explicit
name|CallerSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|CallerSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|Kind
argument_list|)
block|,
name|RecordOffset
argument_list|(
argument|RecordOffset
argument_list|)
block|{}
name|std
operator|::
name|vector
operator|<
name|TypeIndex
operator|>
name|Indices
block|;
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
struct|struct
name|BinaryAnnotationIterator
block|{
struct|struct
name|AnnotationData
block|{
name|BinaryAnnotationsOpCode
name|OpCode
decl_stmt|;
name|StringRef
name|Name
decl_stmt|;
name|uint32_t
name|U1
decl_stmt|;
name|uint32_t
name|U2
decl_stmt|;
name|int32_t
name|S1
decl_stmt|;
block|}
struct|;
name|BinaryAnnotationIterator
argument_list|()
operator|=
expr|default
expr_stmt|;
name|BinaryAnnotationIterator
argument_list|(
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|Annotations
argument_list|)
operator|:
name|Data
argument_list|(
argument|Annotations
argument_list|)
block|{}
name|BinaryAnnotationIterator
argument_list|(
specifier|const
name|BinaryAnnotationIterator
operator|&
name|Other
argument_list|)
operator|:
name|Data
argument_list|(
argument|Other.Data
argument_list|)
block|{}
name|bool
name|operator
operator|==
operator|(
name|BinaryAnnotationIterator
name|Other
operator|)
specifier|const
block|{
return|return
name|Data
operator|==
name|Other
operator|.
name|Data
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|BinaryAnnotationIterator
operator|&
name|Other
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|Other
operator|)
return|;
block|}
name|BinaryAnnotationIterator
modifier|&
name|operator
init|=
operator|(
specifier|const
name|BinaryAnnotationIterator
name|Other
operator|)
block|{
name|Data
operator|=
name|Other
operator|.
name|Data
block|;
return|return
operator|*
name|this
return|;
block|}
name|BinaryAnnotationIterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
if|if
condition|(
operator|!
name|ParseCurrentAnnotation
argument_list|()
condition|)
block|{
operator|*
name|this
operator|=
name|BinaryAnnotationIterator
argument_list|()
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|Data
operator|=
name|Next
expr_stmt|;
name|Next
operator|=
name|ArrayRef
operator|<
name|uint8_t
operator|>
operator|(
operator|)
expr_stmt|;
name|Current
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|BinaryAnnotationIterator
name|operator
decl|++
argument_list|(
name|int
argument_list|)
block|{
name|BinaryAnnotationIterator
name|Orig
argument_list|(
operator|*
name|this
argument_list|)
decl_stmt|;
operator|++
operator|(
operator|*
name|this
operator|)
expr_stmt|;
return|return
name|Orig
return|;
block|}
decl|const
name|AnnotationData
modifier|&
name|operator
modifier|*
argument_list|()
block|{
name|ParseCurrentAnnotation
argument_list|()
expr_stmt|;
return|return
name|Current
operator|.
name|getValue
argument_list|()
return|;
block|}
name|private
range|:
specifier|static
name|uint32_t
name|GetCompressedAnnotation
argument_list|(
argument|ArrayRef<uint8_t>&Annotations
argument_list|)
block|{
if|if
condition|(
name|Annotations
operator|.
name|empty
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|uint8_t
name|FirstByte
operator|=
name|Annotations
operator|.
name|front
argument_list|()
struct|;
name|Annotations
operator|=
name|Annotations
operator|.
name|drop_front
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|FirstByte
operator|&
literal|0x80
operator|)
operator|==
literal|0x00
condition|)
return|return
name|FirstByte
return|;
if|if
condition|(
name|Annotations
operator|.
name|empty
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|uint8_t
name|SecondByte
init|=
name|Annotations
operator|.
name|front
argument_list|()
decl_stmt|;
name|Annotations
operator|=
name|Annotations
operator|.
name|drop_front
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|FirstByte
operator|&
literal|0xC0
operator|)
operator|==
literal|0x80
condition|)
return|return
operator|(
operator|(
name|FirstByte
operator|&
literal|0x3F
operator|)
operator|<<
literal|8
operator|)
operator||
name|SecondByte
return|;
if|if
condition|(
name|Annotations
operator|.
name|empty
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|uint8_t
name|ThirdByte
init|=
name|Annotations
operator|.
name|front
argument_list|()
decl_stmt|;
name|Annotations
operator|=
name|Annotations
operator|.
name|drop_front
argument_list|()
expr_stmt|;
if|if
condition|(
name|Annotations
operator|.
name|empty
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|uint8_t
name|FourthByte
init|=
name|Annotations
operator|.
name|front
argument_list|()
decl_stmt|;
name|Annotations
operator|=
name|Annotations
operator|.
name|drop_front
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|FirstByte
operator|&
literal|0xE0
operator|)
operator|==
literal|0xC0
condition|)
return|return
operator|(
operator|(
name|FirstByte
operator|&
literal|0x1F
operator|)
operator|<<
literal|24
operator|)
operator||
operator|(
name|SecondByte
operator|<<
literal|16
operator|)
operator||
operator|(
name|ThirdByte
operator|<<
literal|8
operator|)
operator||
name|FourthByte
return|;
return|return
operator|-
literal|1
return|;
block|}
empty_stmt|;
specifier|static
name|int32_t
name|DecodeSignedOperand
parameter_list|(
name|uint32_t
name|Operand
parameter_list|)
block|{
if|if
condition|(
name|Operand
operator|&
literal|1
condition|)
return|return
operator|-
operator|(
name|Operand
operator|>>
literal|1
operator|)
return|;
return|return
name|Operand
operator|>>
literal|1
return|;
block|}
empty_stmt|;
specifier|static
name|int32_t
name|DecodeSignedOperand
argument_list|(
name|ArrayRef
operator|<
name|uint8_t
operator|>
operator|&
name|Annotations
argument_list|)
block|{
return|return
name|DecodeSignedOperand
argument_list|(
name|GetCompressedAnnotation
argument_list|(
name|Annotations
argument_list|)
argument_list|)
return|;
block|}
empty_stmt|;
name|bool
name|ParseCurrentAnnotation
parameter_list|()
block|{
if|if
condition|(
name|Current
operator|.
name|hasValue
argument_list|()
condition|)
return|return
name|true
return|;
name|Next
operator|=
name|Data
expr_stmt|;
name|uint32_t
name|Op
init|=
name|GetCompressedAnnotation
argument_list|(
name|Next
argument_list|)
decl_stmt|;
name|AnnotationData
name|Result
decl_stmt|;
name|Result
operator|.
name|OpCode
operator|=
name|static_cast
operator|<
name|BinaryAnnotationsOpCode
operator|>
operator|(
name|Op
operator|)
expr_stmt|;
switch|switch
condition|(
name|Result
operator|.
name|OpCode
condition|)
block|{
case|case
name|BinaryAnnotationsOpCode
operator|::
name|Invalid
case|:
name|Result
operator|.
name|Name
operator|=
literal|"Invalid"
expr_stmt|;
name|Next
operator|=
name|ArrayRef
operator|<
name|uint8_t
operator|>
operator|(
operator|)
expr_stmt|;
break|break;
case|case
name|BinaryAnnotationsOpCode
operator|::
name|CodeOffset
case|:
name|Result
operator|.
name|Name
operator|=
literal|"CodeOffset"
expr_stmt|;
name|Result
operator|.
name|U1
operator|=
name|GetCompressedAnnotation
argument_list|(
name|Next
argument_list|)
expr_stmt|;
break|break;
case|case
name|BinaryAnnotationsOpCode
operator|::
name|ChangeCodeOffsetBase
case|:
name|Result
operator|.
name|Name
operator|=
literal|"ChangeCodeOffsetBase"
expr_stmt|;
name|Result
operator|.
name|U1
operator|=
name|GetCompressedAnnotation
argument_list|(
name|Next
argument_list|)
expr_stmt|;
break|break;
case|case
name|BinaryAnnotationsOpCode
operator|::
name|ChangeCodeOffset
case|:
name|Result
operator|.
name|Name
operator|=
literal|"ChangeCodeOffset"
expr_stmt|;
name|Result
operator|.
name|U1
operator|=
name|GetCompressedAnnotation
argument_list|(
name|Next
argument_list|)
expr_stmt|;
break|break;
case|case
name|BinaryAnnotationsOpCode
operator|::
name|ChangeCodeLength
case|:
name|Result
operator|.
name|Name
operator|=
literal|"ChangeCodeLength"
expr_stmt|;
name|Result
operator|.
name|U1
operator|=
name|GetCompressedAnnotation
argument_list|(
name|Next
argument_list|)
expr_stmt|;
break|break;
case|case
name|BinaryAnnotationsOpCode
operator|::
name|ChangeFile
case|:
name|Result
operator|.
name|Name
operator|=
literal|"ChangeFile"
expr_stmt|;
name|Result
operator|.
name|U1
operator|=
name|GetCompressedAnnotation
argument_list|(
name|Next
argument_list|)
expr_stmt|;
break|break;
case|case
name|BinaryAnnotationsOpCode
operator|::
name|ChangeLineEndDelta
case|:
name|Result
operator|.
name|Name
operator|=
literal|"ChangeLineEndDelta"
expr_stmt|;
name|Result
operator|.
name|U1
operator|=
name|GetCompressedAnnotation
argument_list|(
name|Next
argument_list|)
expr_stmt|;
break|break;
case|case
name|BinaryAnnotationsOpCode
operator|::
name|ChangeRangeKind
case|:
name|Result
operator|.
name|Name
operator|=
literal|"ChangeRangeKind"
expr_stmt|;
name|Result
operator|.
name|U1
operator|=
name|GetCompressedAnnotation
argument_list|(
name|Next
argument_list|)
expr_stmt|;
break|break;
case|case
name|BinaryAnnotationsOpCode
operator|::
name|ChangeColumnStart
case|:
name|Result
operator|.
name|Name
operator|=
literal|"ChangeColumnStart"
expr_stmt|;
name|Result
operator|.
name|U1
operator|=
name|GetCompressedAnnotation
argument_list|(
name|Next
argument_list|)
expr_stmt|;
break|break;
case|case
name|BinaryAnnotationsOpCode
operator|::
name|ChangeColumnEnd
case|:
name|Result
operator|.
name|Name
operator|=
literal|"ChangeColumnEnd"
expr_stmt|;
name|Result
operator|.
name|U1
operator|=
name|GetCompressedAnnotation
argument_list|(
name|Next
argument_list|)
expr_stmt|;
break|break;
case|case
name|BinaryAnnotationsOpCode
operator|::
name|ChangeLineOffset
case|:
name|Result
operator|.
name|Name
operator|=
literal|"ChangeLineOffset"
expr_stmt|;
name|Result
operator|.
name|S1
operator|=
name|DecodeSignedOperand
argument_list|(
name|Next
argument_list|)
expr_stmt|;
break|break;
case|case
name|BinaryAnnotationsOpCode
operator|::
name|ChangeColumnEndDelta
case|:
name|Result
operator|.
name|Name
operator|=
literal|"ChangeColumnEndDelta"
expr_stmt|;
name|Result
operator|.
name|S1
operator|=
name|DecodeSignedOperand
argument_list|(
name|Next
argument_list|)
expr_stmt|;
break|break;
case|case
name|BinaryAnnotationsOpCode
operator|::
name|ChangeCodeOffsetAndLineOffset
case|:
block|{
name|Result
operator|.
name|Name
operator|=
literal|"ChangeCodeOffsetAndLineOffset"
expr_stmt|;
name|uint32_t
name|Annotation
init|=
name|GetCompressedAnnotation
argument_list|(
name|Next
argument_list|)
decl_stmt|;
name|Result
operator|.
name|S1
operator|=
name|DecodeSignedOperand
argument_list|(
name|Annotation
operator|>>
literal|4
argument_list|)
expr_stmt|;
name|Result
operator|.
name|U1
operator|=
name|Annotation
operator|&
literal|0xf
expr_stmt|;
break|break;
block|}
case|case
name|BinaryAnnotationsOpCode
operator|::
name|ChangeCodeLengthAndCodeOffset
case|:
block|{
name|Result
operator|.
name|Name
operator|=
literal|"ChangeCodeLengthAndCodeOffset"
expr_stmt|;
name|Result
operator|.
name|U1
operator|=
name|GetCompressedAnnotation
argument_list|(
name|Next
argument_list|)
expr_stmt|;
name|Result
operator|.
name|U2
operator|=
name|GetCompressedAnnotation
argument_list|(
name|Next
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|Current
operator|=
name|Result
expr_stmt|;
return|return
name|true
return|;
block|}
name|Optional
operator|<
name|AnnotationData
operator|>
name|Current
expr_stmt|;
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|Data
expr_stmt|;
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|Next
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// S_INLINESITE
end_comment

begin_decl_stmt
name|class
name|InlineSiteSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
name|explicit
name|InlineSiteSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|InlineSiteSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|InlineSiteSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
argument|RecordOffset
argument_list|)
block|{}
name|iterator_range
operator|<
name|BinaryAnnotationIterator
operator|>
name|annotations
argument_list|()
specifier|const
block|{
return|return
name|make_range
argument_list|(
name|BinaryAnnotationIterator
argument_list|(
name|AnnotationData
argument_list|)
argument_list|,
name|BinaryAnnotationIterator
argument_list|()
argument_list|)
return|;
block|}
name|uint32_t
name|Parent
block|;
name|uint32_t
name|End
block|;
name|TypeIndex
name|Inlinee
block|;
name|std
operator|::
name|vector
operator|<
name|uint8_t
operator|>
name|AnnotationData
block|;
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_PUB32
end_comment

begin_decl_stmt
name|class
name|PublicSym32
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
name|explicit
name|PublicSym32
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|explicit
name|PublicSym32
argument_list|(
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|PublicSym32
argument_list|)
block|,
name|RecordOffset
argument_list|(
argument|RecordOffset
argument_list|)
block|{}
name|PublicSymFlags
name|Flags
block|;
name|uint32_t
name|Offset
block|;
name|uint16_t
name|Segment
block|;
name|StringRef
name|Name
block|;
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_REGISTER
end_comment

begin_decl_stmt
name|class
name|RegisterSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
name|explicit
name|RegisterSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|RegisterSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|RegisterSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
argument|RecordOffset
argument_list|)
block|{}
name|TypeIndex
name|Index
block|;
name|RegisterId
name|Register
block|;
name|StringRef
name|Name
block|;
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_PROCREF, S_LPROCREF
end_comment

begin_decl_stmt
name|class
name|ProcRefSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
name|explicit
name|ProcRefSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|explicit
name|ProcRefSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|ProcRefSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
argument|RecordOffset
argument_list|)
block|{   }
name|uint32_t
name|SumName
block|;
name|uint32_t
name|SymOffset
block|;
name|uint16_t
name|Module
block|;
name|StringRef
name|Name
block|;
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_LOCAL
end_comment

begin_decl_stmt
name|class
name|LocalSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
name|explicit
name|LocalSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|explicit
name|LocalSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|LocalSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
argument|RecordOffset
argument_list|)
block|{}
name|TypeIndex
name|Type
block|;
name|LocalSymFlags
name|Flags
block|;
name|StringRef
name|Name
block|;
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|LocalVariableAddrRange
block|{
name|uint32_t
name|OffsetStart
decl_stmt|;
name|uint16_t
name|ISectStart
decl_stmt|;
name|uint16_t
name|Range
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|LocalVariableAddrGap
block|{
name|uint16_t
name|GapStartOffset
decl_stmt|;
name|uint16_t
name|Range
decl_stmt|;
block|}
struct|;
end_struct

begin_enum_decl
enum_decl|enum :
name|uint16_t
block|{
name|MaxDefRange
init|=
literal|0xf000
block|}
enum_decl|;
end_enum_decl

begin_comment
comment|// S_DEFRANGE
end_comment

begin_decl_stmt
name|class
name|DefRangeSym
range|:
name|public
name|SymbolRecord
block|{
specifier|static
name|constexpr
name|uint32_t
name|RelocationOffset
operator|=
literal|8
block|;
name|public
operator|:
name|explicit
name|DefRangeSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|explicit
name|DefRangeSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|DefRangeSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
argument|RecordOffset
argument_list|)
block|{}
name|uint32_t
name|getRelocationOffset
argument_list|()
specifier|const
block|{
return|return
name|RecordOffset
operator|+
name|RelocationOffset
return|;
block|}
name|uint32_t
name|Program
block|;
name|LocalVariableAddrRange
name|Range
block|;
name|std
operator|::
name|vector
operator|<
name|LocalVariableAddrGap
operator|>
name|Gaps
block|;
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_DEFRANGE_SUBFIELD
end_comment

begin_decl_stmt
name|class
name|DefRangeSubfieldSym
range|:
name|public
name|SymbolRecord
block|{
specifier|static
name|constexpr
name|uint32_t
name|RelocationOffset
operator|=
literal|12
block|;
name|public
operator|:
name|explicit
name|DefRangeSubfieldSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|DefRangeSubfieldSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|DefRangeSubfieldSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
argument|RecordOffset
argument_list|)
block|{}
name|uint32_t
name|getRelocationOffset
argument_list|()
specifier|const
block|{
return|return
name|RecordOffset
operator|+
name|RelocationOffset
return|;
block|}
name|uint32_t
name|Program
block|;
name|uint16_t
name|OffsetInParent
block|;
name|LocalVariableAddrRange
name|Range
block|;
name|std
operator|::
name|vector
operator|<
name|LocalVariableAddrGap
operator|>
name|Gaps
block|;
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_DEFRANGE_REGISTER
end_comment

begin_decl_stmt
name|class
name|DefRangeRegisterSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Header
block|{
name|ulittle16_t
name|Register
block|;
name|ulittle16_t
name|MayHaveNoName
block|;   }
block|;
name|explicit
name|DefRangeRegisterSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|DefRangeRegisterSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|DefRangeRegisterSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
argument|RecordOffset
argument_list|)
block|{}
name|uint32_t
name|getRelocationOffset
argument_list|()
specifier|const
block|{
return|return
name|RecordOffset
operator|+
sizeof|sizeof
argument_list|(
name|Header
argument_list|)
return|;
block|}
name|Header
name|Hdr
block|;
name|LocalVariableAddrRange
name|Range
block|;
name|std
operator|::
name|vector
operator|<
name|LocalVariableAddrGap
operator|>
name|Gaps
block|;
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_DEFRANGE_SUBFIELD_REGISTER
end_comment

begin_decl_stmt
name|class
name|DefRangeSubfieldRegisterSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Header
block|{
name|ulittle16_t
name|Register
block|;
name|ulittle16_t
name|MayHaveNoName
block|;
name|ulittle32_t
name|OffsetInParent
block|;   }
block|;
name|explicit
name|DefRangeSubfieldRegisterSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|DefRangeSubfieldRegisterSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|DefRangeSubfieldRegisterSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
argument|RecordOffset
argument_list|)
block|{}
name|uint32_t
name|getRelocationOffset
argument_list|()
specifier|const
block|{
return|return
name|RecordOffset
operator|+
sizeof|sizeof
argument_list|(
name|Header
argument_list|)
return|;
block|}
name|Header
name|Hdr
block|;
name|LocalVariableAddrRange
name|Range
block|;
name|std
operator|::
name|vector
operator|<
name|LocalVariableAddrGap
operator|>
name|Gaps
block|;
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_DEFRANGE_FRAMEPOINTER_REL
end_comment

begin_decl_stmt
name|class
name|DefRangeFramePointerRelSym
range|:
name|public
name|SymbolRecord
block|{
specifier|static
name|constexpr
name|uint32_t
name|RelocationOffset
operator|=
literal|8
block|;
name|public
operator|:
name|explicit
name|DefRangeFramePointerRelSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|DefRangeFramePointerRelSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|DefRangeFramePointerRelSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
argument|RecordOffset
argument_list|)
block|{}
name|uint32_t
name|getRelocationOffset
argument_list|()
specifier|const
block|{
return|return
name|RecordOffset
operator|+
name|RelocationOffset
return|;
block|}
name|int32_t
name|Offset
block|;
name|LocalVariableAddrRange
name|Range
block|;
name|std
operator|::
name|vector
operator|<
name|LocalVariableAddrGap
operator|>
name|Gaps
block|;
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_DEFRANGE_REGISTER_REL
end_comment

begin_decl_stmt
name|class
name|DefRangeRegisterRelSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Header
block|{
name|ulittle16_t
name|Register
block|;
name|ulittle16_t
name|Flags
block|;
name|little32_t
name|BasePointerOffset
block|;   }
block|;
name|explicit
name|DefRangeRegisterRelSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|explicit
name|DefRangeRegisterRelSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|DefRangeRegisterRelSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
argument|RecordOffset
argument_list|)
block|{}
comment|// The flags implement this notional bitfield:
comment|//   uint16_t IsSubfield : 1;
comment|//   uint16_t Padding : 3;
comment|//   uint16_t OffsetInParent : 12;
expr|enum
operator|:
name|uint16_t
block|{
name|IsSubfieldFlag
operator|=
literal|1
block|,
name|OffsetInParentShift
operator|=
literal|4
block|,   }
block|;
name|bool
name|hasSpilledUDTMember
argument_list|()
specifier|const
block|{
return|return
name|Hdr
operator|.
name|Flags
operator|&
name|IsSubfieldFlag
return|;
block|}
name|uint16_t
name|offsetInParent
argument_list|()
specifier|const
block|{
return|return
name|Hdr
operator|.
name|Flags
operator|>>
name|OffsetInParentShift
return|;
block|}
name|uint32_t
name|getRelocationOffset
argument_list|()
specifier|const
block|{
return|return
name|RecordOffset
operator|+
sizeof|sizeof
argument_list|(
name|Header
argument_list|)
return|;
block|}
name|Header
name|Hdr
block|;
name|LocalVariableAddrRange
name|Range
block|;
name|std
operator|::
name|vector
operator|<
name|LocalVariableAddrGap
operator|>
name|Gaps
block|;
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_DEFRANGE_FRAMEPOINTER_REL_FULL_SCOPE
end_comment

begin_decl_stmt
name|class
name|DefRangeFramePointerRelFullScopeSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
name|explicit
name|DefRangeFramePointerRelFullScopeSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|explicit
name|DefRangeFramePointerRelFullScopeSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|DefRangeFramePointerRelFullScopeSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
argument|RecordOffset
argument_list|)
block|{}
name|int32_t
name|Offset
block|;
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_BLOCK32
end_comment

begin_decl_stmt
name|class
name|BlockSym
range|:
name|public
name|SymbolRecord
block|{
specifier|static
name|constexpr
name|uint32_t
name|RelocationOffset
operator|=
literal|16
block|;
name|public
operator|:
name|explicit
name|BlockSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|explicit
name|BlockSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|BlockSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
argument|RecordOffset
argument_list|)
block|{}
name|uint32_t
name|getRelocationOffset
argument_list|()
specifier|const
block|{
return|return
name|RecordOffset
operator|+
name|RelocationOffset
return|;
block|}
name|uint32_t
name|Parent
block|;
name|uint32_t
name|End
block|;
name|uint32_t
name|CodeSize
block|;
name|uint32_t
name|CodeOffset
block|;
name|uint16_t
name|Segment
block|;
name|StringRef
name|Name
block|;
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_LABEL32
end_comment

begin_decl_stmt
name|class
name|LabelSym
range|:
name|public
name|SymbolRecord
block|{
specifier|static
name|constexpr
name|uint32_t
name|RelocationOffset
operator|=
literal|4
block|;
name|public
operator|:
name|explicit
name|LabelSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|explicit
name|LabelSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|LabelSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
argument|RecordOffset
argument_list|)
block|{}
name|uint32_t
name|getRelocationOffset
argument_list|()
specifier|const
block|{
return|return
name|RecordOffset
operator|+
name|RelocationOffset
return|;
block|}
name|uint32_t
name|CodeOffset
block|;
name|uint16_t
name|Segment
block|;
name|ProcSymFlags
name|Flags
block|;
name|StringRef
name|Name
block|;
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_OBJNAME
end_comment

begin_decl_stmt
name|class
name|ObjNameSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
name|explicit
name|ObjNameSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|ObjNameSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|ObjNameSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
argument|RecordOffset
argument_list|)
block|{   }
name|uint32_t
name|Signature
block|;
name|StringRef
name|Name
block|;
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_ENVBLOCK
end_comment

begin_decl_stmt
name|class
name|EnvBlockSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
name|explicit
name|EnvBlockSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|EnvBlockSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|EnvBlockSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
argument|RecordOffset
argument_list|)
block|{}
name|std
operator|::
name|vector
operator|<
name|StringRef
operator|>
name|Fields
block|;
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_EXPORT
end_comment

begin_decl_stmt
name|class
name|ExportSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
name|explicit
name|ExportSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|ExportSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|ExportSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
argument|RecordOffset
argument_list|)
block|{}
name|uint16_t
name|Ordinal
block|;
name|ExportFlags
name|Flags
block|;
name|StringRef
name|Name
block|;
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_FILESTATIC
end_comment

begin_decl_stmt
name|class
name|FileStaticSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
name|explicit
name|FileStaticSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|FileStaticSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|FileStaticSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
argument|RecordOffset
argument_list|)
block|{}
name|TypeIndex
name|Index
block|;
name|uint32_t
name|ModFilenameOffset
block|;
name|LocalSymFlags
name|Flags
block|;
name|StringRef
name|Name
block|;
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_COMPILE2
end_comment

begin_decl_stmt
name|class
name|Compile2Sym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
name|explicit
name|Compile2Sym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|Compile2Sym
argument_list|(
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|Compile2Sym
argument_list|)
block|,
name|RecordOffset
argument_list|(
argument|RecordOffset
argument_list|)
block|{}
name|CompileSym2Flags
name|Flags
block|;
name|CPUType
name|Machine
block|;
name|uint16_t
name|VersionFrontendMajor
block|;
name|uint16_t
name|VersionFrontendMinor
block|;
name|uint16_t
name|VersionFrontendBuild
block|;
name|uint16_t
name|VersionBackendMajor
block|;
name|uint16_t
name|VersionBackendMinor
block|;
name|uint16_t
name|VersionBackendBuild
block|;
name|StringRef
name|Version
block|;
name|std
operator|::
name|vector
operator|<
name|StringRef
operator|>
name|ExtraStrings
block|;
name|uint8_t
name|getLanguage
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|uint32_t
operator|>
operator|(
name|Flags
operator|)
operator|&
literal|0xFF
return|;
block|}
name|uint32_t
name|getFlags
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|uint32_t
operator|>
operator|(
name|Flags
operator|)
operator|&
operator|~
literal|0xFF
return|;
block|}
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_COMPILE3
end_comment

begin_decl_stmt
name|class
name|Compile3Sym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
name|explicit
name|Compile3Sym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|Compile3Sym
argument_list|(
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|Compile3Sym
argument_list|)
block|,
name|RecordOffset
argument_list|(
argument|RecordOffset
argument_list|)
block|{}
name|CompileSym3Flags
name|Flags
block|;
name|CPUType
name|Machine
block|;
name|uint16_t
name|VersionFrontendMajor
block|;
name|uint16_t
name|VersionFrontendMinor
block|;
name|uint16_t
name|VersionFrontendBuild
block|;
name|uint16_t
name|VersionFrontendQFE
block|;
name|uint16_t
name|VersionBackendMajor
block|;
name|uint16_t
name|VersionBackendMinor
block|;
name|uint16_t
name|VersionBackendBuild
block|;
name|uint16_t
name|VersionBackendQFE
block|;
name|StringRef
name|Version
block|;
name|void
name|setLanguage
argument_list|(
argument|SourceLanguage Lang
argument_list|)
block|{
name|Flags
operator|=
name|CompileSym3Flags
argument_list|(
operator|(
name|uint32_t
argument_list|(
name|Flags
argument_list|)
operator|&
literal|0xFFFFFF00
operator|)
operator||
name|uint32_t
argument_list|(
name|Lang
argument_list|)
argument_list|)
block|;   }
name|uint8_t
name|getLanguage
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|uint32_t
operator|>
operator|(
name|Flags
operator|)
operator|&
literal|0xFF
return|;
block|}
name|uint32_t
name|getFlags
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|uint32_t
operator|>
operator|(
name|Flags
operator|)
operator|&
operator|~
literal|0xFF
return|;
block|}
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_FRAMEPROC
end_comment

begin_decl_stmt
name|class
name|FrameProcSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
name|explicit
name|FrameProcSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|explicit
name|FrameProcSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|FrameProcSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
argument|RecordOffset
argument_list|)
block|{}
name|uint32_t
name|TotalFrameBytes
block|;
name|uint32_t
name|PaddingFrameBytes
block|;
name|uint32_t
name|OffsetToPadding
block|;
name|uint32_t
name|BytesOfCalleeSavedRegisters
block|;
name|uint32_t
name|OffsetOfExceptionHandler
block|;
name|uint16_t
name|SectionIdOfExceptionHandler
block|;
name|FrameProcedureOptions
name|Flags
block|;
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_CALLSITEINFO
end_comment

begin_decl_stmt
name|class
name|CallSiteInfoSym
range|:
name|public
name|SymbolRecord
block|{
specifier|static
name|constexpr
name|uint32_t
name|RelocationOffset
operator|=
literal|4
block|;
name|public
operator|:
name|explicit
name|CallSiteInfoSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|explicit
name|CallSiteInfoSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|SymbolRecordKind::CallSiteInfoSym
argument_list|)
block|{}
name|uint32_t
name|getRelocationOffset
argument_list|()
specifier|const
block|{
return|return
name|RecordOffset
operator|+
name|RelocationOffset
return|;
block|}
name|uint32_t
name|CodeOffset
block|;
name|uint16_t
name|Segment
block|;
name|TypeIndex
name|Type
block|;
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_HEAPALLOCSITE
end_comment

begin_decl_stmt
name|class
name|HeapAllocationSiteSym
range|:
name|public
name|SymbolRecord
block|{
specifier|static
name|constexpr
name|uint32_t
name|RelocationOffset
operator|=
literal|4
block|;
name|public
operator|:
name|explicit
name|HeapAllocationSiteSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|explicit
name|HeapAllocationSiteSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|HeapAllocationSiteSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
argument|RecordOffset
argument_list|)
block|{}
name|uint32_t
name|getRelocationOffset
argument_list|()
specifier|const
block|{
return|return
name|RecordOffset
operator|+
name|RelocationOffset
return|;
block|}
name|uint32_t
name|CodeOffset
block|;
name|uint16_t
name|Segment
block|;
name|uint16_t
name|CallInstructionSize
block|;
name|TypeIndex
name|Type
block|;
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_FRAMECOOKIE
end_comment

begin_decl_stmt
name|class
name|FrameCookieSym
range|:
name|public
name|SymbolRecord
block|{
specifier|static
name|constexpr
name|uint32_t
name|RelocationOffset
operator|=
literal|4
block|;
name|public
operator|:
name|explicit
name|FrameCookieSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|explicit
name|FrameCookieSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|SymbolRecordKind::FrameCookieSym
argument_list|)
block|{}
name|uint32_t
name|getRelocationOffset
argument_list|()
specifier|const
block|{
return|return
name|RecordOffset
operator|+
name|RelocationOffset
return|;
block|}
name|uint32_t
name|CodeOffset
block|;
name|uint16_t
name|Register
block|;
name|FrameCookieKind
name|CookieKind
block|;
name|uint8_t
name|Flags
block|;
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_UDT, S_COBOLUDT
end_comment

begin_decl_stmt
name|class
name|UDTSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
name|explicit
name|UDTSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|explicit
name|UDTSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|SymbolRecordKind::UDTSym
argument_list|)
block|{}
name|TypeIndex
name|Type
block|;
name|StringRef
name|Name
block|;
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_BUILDINFO
end_comment

begin_decl_stmt
name|class
name|BuildInfoSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
name|explicit
name|BuildInfoSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|BuildInfoSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|BuildInfoSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
argument|RecordOffset
argument_list|)
block|{}
name|uint32_t
name|BuildId
block|;
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_BPREL32
end_comment

begin_decl_stmt
name|class
name|BPRelativeSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
name|explicit
name|BPRelativeSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|explicit
name|BPRelativeSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|BPRelativeSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
argument|RecordOffset
argument_list|)
block|{}
name|int32_t
name|Offset
block|;
name|TypeIndex
name|Type
block|;
name|StringRef
name|Name
block|;
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_REGREL32
end_comment

begin_decl_stmt
name|class
name|RegRelativeSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
name|explicit
name|RegRelativeSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|explicit
name|RegRelativeSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|RegRelativeSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
argument|RecordOffset
argument_list|)
block|{}
name|uint32_t
name|Offset
block|;
name|TypeIndex
name|Type
block|;
name|RegisterId
name|Register
block|;
name|StringRef
name|Name
block|;
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_CONSTANT, S_MANCONSTANT
end_comment

begin_decl_stmt
name|class
name|ConstantSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
name|explicit
name|ConstantSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|ConstantSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|ConstantSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
argument|RecordOffset
argument_list|)
block|{}
name|TypeIndex
name|Type
block|;
name|APSInt
name|Value
block|;
name|StringRef
name|Name
block|;
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_LDATA32, S_GDATA32, S_LMANDATA, S_GMANDATA
end_comment

begin_decl_stmt
name|class
name|DataSym
range|:
name|public
name|SymbolRecord
block|{
specifier|static
name|constexpr
name|uint32_t
name|RelocationOffset
operator|=
literal|8
block|;
name|public
operator|:
name|explicit
name|DataSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|DataSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|DataSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
argument|RecordOffset
argument_list|)
block|{}
name|uint32_t
name|getRelocationOffset
argument_list|()
specifier|const
block|{
return|return
name|RecordOffset
operator|+
name|RelocationOffset
return|;
block|}
name|TypeIndex
name|Type
block|;
name|uint32_t
name|DataOffset
block|;
name|uint16_t
name|Segment
block|;
name|StringRef
name|Name
block|;
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_LTHREAD32, S_GTHREAD32
end_comment

begin_decl_stmt
name|class
name|ThreadLocalDataSym
range|:
name|public
name|SymbolRecord
block|{
specifier|static
name|constexpr
name|uint32_t
name|RelocationOffset
operator|=
literal|8
block|;
name|public
operator|:
name|explicit
name|ThreadLocalDataSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
argument|Kind
argument_list|)
block|{}
name|explicit
name|ThreadLocalDataSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|ThreadLocalDataSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
argument|RecordOffset
argument_list|)
block|{}
name|uint32_t
name|getRelocationOffset
argument_list|()
specifier|const
block|{
return|return
name|RecordOffset
operator|+
name|RelocationOffset
return|;
block|}
name|TypeIndex
name|Type
block|;
name|uint32_t
name|DataOffset
block|;
name|uint16_t
name|Segment
block|;
name|StringRef
name|Name
block|;
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|using
name|CVSymbol
init|=
name|CVRecord
operator|<
name|SymbolKind
operator|>
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|using
name|CVSymbolArray
init|=
name|VarStreamArray
operator|<
name|CVSymbol
operator|>
decl_stmt|;
end_decl_stmt

begin_comment
unit|}
comment|// end namespace codeview
end_comment

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_DEBUGINFO_CODEVIEW_SYMBOLRECORD_H
end_comment

end_unit

