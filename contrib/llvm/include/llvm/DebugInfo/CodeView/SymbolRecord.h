begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- SymbolRecord.h -------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_CODEVIEW_SYMBOLRECORD_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_CODEVIEW_SYMBOLRECORD_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/APSInt.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/Optional.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/CVRecord.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/CodeView.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/RecordSerialization.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/StreamArray.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/StreamInterface.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/TypeIndex.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Endian.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Error.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|codeview
block|{
name|using
name|llvm
operator|::
name|support
operator|::
name|ulittle16_t
expr_stmt|;
name|using
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
expr_stmt|;
name|using
name|llvm
operator|::
name|support
operator|::
name|little32_t
expr_stmt|;
name|class
name|SymbolRecord
block|{
name|protected
label|:
name|explicit
name|SymbolRecord
argument_list|(
argument|SymbolRecordKind Kind
argument_list|)
block|:
name|Kind
argument_list|(
argument|Kind
argument_list|)
block|{}
name|public
label|:
name|SymbolRecordKind
name|getKind
argument_list|()
specifier|const
block|{
return|return
name|Kind
return|;
block|}
name|private
label|:
name|SymbolRecordKind
name|Kind
decl_stmt|;
block|}
empty_stmt|;
comment|// S_GPROC32, S_LPROC32, S_GPROC32_ID, S_LPROC32_ID, S_LPROC32_DPC or
comment|// S_LPROC32_DPC_ID
name|class
name|ProcSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Hdr
block|{
name|ulittle32_t
name|PtrParent
block|;
name|ulittle32_t
name|PtrEnd
block|;
name|ulittle32_t
name|PtrNext
block|;
name|ulittle32_t
name|CodeSize
block|;
name|ulittle32_t
name|DbgStart
block|;
name|ulittle32_t
name|DbgEnd
block|;
name|TypeIndex
name|FunctionType
block|;
name|ulittle32_t
name|CodeOffset
block|;
name|ulittle16_t
name|Segment
block|;
name|uint8_t
name|Flags
block|;
comment|// ProcSymFlags enum
comment|// Name: The null-terminated name follows.
block|}
block|;
name|ProcSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|const Hdr *H
argument_list|,
argument|StringRef Name
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|Kind
argument_list|)
block|,
name|RecordOffset
argument_list|(
name|RecordOffset
argument_list|)
block|,
name|Header
argument_list|(
operator|*
name|H
argument_list|)
block|,
name|Name
argument_list|(
argument|Name
argument_list|)
block|{   }
specifier|static
name|ErrorOr
operator|<
name|ProcSym
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
specifier|const
name|Hdr
operator|*
name|H
operator|=
name|nullptr
block|;
name|StringRef
name|Name
block|;
name|CV_DESERIALIZE
argument_list|(
name|Data
argument_list|,
name|H
argument_list|,
name|Name
argument_list|)
block|;
return|return
name|ProcSym
argument_list|(
name|Kind
argument_list|,
name|RecordOffset
argument_list|,
name|H
argument_list|,
name|Name
argument_list|)
return|;
block|}
name|uint32_t
name|getRelocationOffset
argument_list|()
specifier|const
block|{
return|return
name|RecordOffset
operator|+
name|offsetof
argument_list|(
name|Hdr
argument_list|,
name|CodeOffset
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|;
name|Hdr
name|Header
block|;
name|StringRef
name|Name
block|; }
decl_stmt|;
comment|// S_THUNK32
name|class
name|Thunk32Sym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Hdr
block|{
name|ulittle32_t
name|Parent
block|;
name|ulittle32_t
name|End
block|;
name|ulittle32_t
name|Next
block|;
name|ulittle32_t
name|Off
block|;
name|ulittle16_t
name|Seg
block|;
name|ulittle16_t
name|Len
block|;
name|uint8_t
name|Ord
block|;
comment|// ThunkOrdinal enumeration
comment|// Name: The null-terminated name follows.
comment|// Variant portion of thunk
block|}
block|;
name|Thunk32Sym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|const Hdr *H
argument_list|,
argument|StringRef Name
argument_list|,
argument|ArrayRef<uint8_t> VariantData
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|Kind
argument_list|)
block|,
name|RecordOffset
argument_list|(
name|RecordOffset
argument_list|)
block|,
name|Header
argument_list|(
operator|*
name|H
argument_list|)
block|,
name|Name
argument_list|(
name|Name
argument_list|)
block|,
name|VariantData
argument_list|(
argument|VariantData
argument_list|)
block|{}
specifier|static
name|ErrorOr
operator|<
name|Thunk32Sym
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
specifier|const
name|Hdr
operator|*
name|H
operator|=
name|nullptr
block|;
name|StringRef
name|Name
block|;
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|VariantData
block|;
name|CV_DESERIALIZE
argument_list|(
name|Data
argument_list|,
name|H
argument_list|,
name|Name
argument_list|,
name|CV_ARRAY_FIELD_TAIL
argument_list|(
name|VariantData
argument_list|)
argument_list|)
block|;
return|return
name|Thunk32Sym
argument_list|(
name|Kind
argument_list|,
name|RecordOffset
argument_list|,
name|H
argument_list|,
name|Name
argument_list|,
name|VariantData
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|;
name|Hdr
name|Header
block|;
name|StringRef
name|Name
block|;
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|VariantData
block|; }
decl_stmt|;
comment|// S_TRAMPOLINE
name|class
name|TrampolineSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Hdr
block|{
name|ulittle16_t
name|Type
block|;
comment|// TrampolineType enum
name|ulittle16_t
name|Size
block|;
name|ulittle32_t
name|ThunkOff
block|;
name|ulittle32_t
name|TargetOff
block|;
name|ulittle16_t
name|ThunkSection
block|;
name|ulittle16_t
name|TargetSection
block|;   }
block|;
name|TrampolineSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|const Hdr *H
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|Kind
argument_list|)
block|,
name|RecordOffset
argument_list|(
name|RecordOffset
argument_list|)
block|,
name|Header
argument_list|(
argument|*H
argument_list|)
block|{}
specifier|static
name|ErrorOr
operator|<
name|TrampolineSym
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
specifier|const
name|Hdr
operator|*
name|H
operator|=
name|nullptr
block|;
name|CV_DESERIALIZE
argument_list|(
name|Data
argument_list|,
name|H
argument_list|)
block|;
return|return
name|TrampolineSym
argument_list|(
name|Kind
argument_list|,
name|RecordOffset
argument_list|,
name|H
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|;
name|Hdr
name|Header
block|; }
decl_stmt|;
comment|// S_SECTION
name|class
name|SectionSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Hdr
block|{
name|ulittle16_t
name|SectionNumber
block|;
name|uint8_t
name|Alignment
block|;
name|uint8_t
name|Reserved
block|;
comment|// Must be 0
name|ulittle32_t
name|Rva
block|;
name|ulittle32_t
name|Length
block|;
name|ulittle32_t
name|Characteristics
block|;
comment|// Name: The null-terminated name follows.
block|}
block|;
name|SectionSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|const Hdr *H
argument_list|,
argument|StringRef Name
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|Kind
argument_list|)
block|,
name|RecordOffset
argument_list|(
name|RecordOffset
argument_list|)
block|,
name|Header
argument_list|(
operator|*
name|H
argument_list|)
block|,
name|Name
argument_list|(
argument|Name
argument_list|)
block|{   }
specifier|static
name|ErrorOr
operator|<
name|SectionSym
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
specifier|const
name|Hdr
operator|*
name|H
operator|=
name|nullptr
block|;
name|StringRef
name|Name
block|;
name|CV_DESERIALIZE
argument_list|(
name|Data
argument_list|,
name|H
argument_list|,
name|Name
argument_list|)
block|;
return|return
name|SectionSym
argument_list|(
name|Kind
argument_list|,
name|RecordOffset
argument_list|,
name|H
argument_list|,
name|Name
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|;
name|Hdr
name|Header
block|;
name|StringRef
name|Name
block|; }
decl_stmt|;
comment|// S_COFFGROUP
name|class
name|CoffGroupSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Hdr
block|{
name|ulittle32_t
name|Size
block|;
name|ulittle32_t
name|Characteristics
block|;
name|ulittle32_t
name|Offset
block|;
name|ulittle16_t
name|Segment
block|;
comment|// Name: The null-terminated name follows.
block|}
block|;
name|CoffGroupSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|const Hdr *H
argument_list|,
argument|StringRef Name
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|Kind
argument_list|)
block|,
name|RecordOffset
argument_list|(
name|RecordOffset
argument_list|)
block|,
name|Header
argument_list|(
operator|*
name|H
argument_list|)
block|,
name|Name
argument_list|(
argument|Name
argument_list|)
block|{   }
specifier|static
name|ErrorOr
operator|<
name|CoffGroupSym
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
specifier|const
name|Hdr
operator|*
name|H
operator|=
name|nullptr
block|;
name|StringRef
name|Name
block|;
name|CV_DESERIALIZE
argument_list|(
name|Data
argument_list|,
name|H
argument_list|,
name|Name
argument_list|)
block|;
return|return
name|CoffGroupSym
argument_list|(
name|Kind
argument_list|,
name|RecordOffset
argument_list|,
name|H
argument_list|,
name|Name
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|;
name|Hdr
name|Header
block|;
name|StringRef
name|Name
block|; }
decl_stmt|;
name|class
name|ScopeEndSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
name|ScopeEndSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|Kind
argument_list|)
block|,
name|RecordOffset
argument_list|(
argument|RecordOffset
argument_list|)
block|{}
specifier|static
name|ErrorOr
operator|<
name|ScopeEndSym
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
return|return
name|ScopeEndSym
argument_list|(
name|Kind
argument_list|,
name|RecordOffset
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|; }
decl_stmt|;
name|class
name|CallerSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Hdr
block|{
name|ulittle32_t
name|Count
block|;   }
block|;
name|CallerSym
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|const Hdr *Header
argument_list|,
argument|ArrayRef<TypeIndex> Indices
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|Kind
argument_list|)
block|,
name|RecordOffset
argument_list|(
name|RecordOffset
argument_list|)
block|,
name|Header
argument_list|(
operator|*
name|Header
argument_list|)
block|,
name|Indices
argument_list|(
argument|Indices
argument_list|)
block|{}
specifier|static
name|ErrorOr
operator|<
name|CallerSym
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
specifier|const
name|Hdr
operator|*
name|Header
block|;
name|ArrayRef
operator|<
name|TypeIndex
operator|>
name|Indices
block|;
name|CV_DESERIALIZE
argument_list|(
name|Data
argument_list|,
name|Header
argument_list|,
name|CV_ARRAY_FIELD_N
argument_list|(
name|Indices
argument_list|,
name|Header
operator|->
name|Count
argument_list|)
argument_list|)
block|;
return|return
name|CallerSym
argument_list|(
name|Kind
argument_list|,
name|RecordOffset
argument_list|,
name|Header
argument_list|,
name|Indices
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|;
name|Hdr
name|Header
block|;
name|ArrayRef
operator|<
name|TypeIndex
operator|>
name|Indices
block|; }
decl_stmt|;
struct|struct
name|BinaryAnnotationIterator
block|{
struct|struct
name|AnnotationData
block|{
name|BinaryAnnotationsOpCode
name|OpCode
decl_stmt|;
name|StringRef
name|Name
decl_stmt|;
name|uint32_t
name|U1
decl_stmt|;
name|uint32_t
name|U2
decl_stmt|;
name|int32_t
name|S1
decl_stmt|;
block|}
struct|;
name|BinaryAnnotationIterator
argument_list|(
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|Annotations
argument_list|)
operator|:
name|Data
argument_list|(
argument|Annotations
argument_list|)
block|{}
name|BinaryAnnotationIterator
argument_list|()
block|{}
name|BinaryAnnotationIterator
argument_list|(
specifier|const
name|BinaryAnnotationIterator
operator|&
name|Other
argument_list|)
operator|:
name|Data
argument_list|(
argument|Other.Data
argument_list|)
block|{}
name|bool
name|operator
operator|==
operator|(
name|BinaryAnnotationIterator
name|Other
operator|)
specifier|const
block|{
return|return
name|Data
operator|==
name|Other
operator|.
name|Data
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
name|BinaryAnnotationIterator
name|Other
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|Other
operator|)
return|;
block|}
name|BinaryAnnotationIterator
modifier|&
name|operator
init|=
operator|(
specifier|const
name|BinaryAnnotationIterator
name|Other
operator|)
block|{
name|Data
operator|=
name|Other
operator|.
name|Data
block|;
return|return
operator|*
name|this
return|;
block|}
name|BinaryAnnotationIterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
if|if
condition|(
operator|!
name|ParseCurrentAnnotation
argument_list|()
condition|)
block|{
operator|*
name|this
operator|=
name|BinaryAnnotationIterator
argument_list|()
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|Data
operator|=
name|Next
expr_stmt|;
name|Next
operator|=
name|ArrayRef
operator|<
name|uint8_t
operator|>
operator|(
operator|)
expr_stmt|;
name|Current
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|BinaryAnnotationIterator
name|operator
decl|++
argument_list|(
name|int
argument_list|)
block|{
name|BinaryAnnotationIterator
name|Orig
argument_list|(
operator|*
name|this
argument_list|)
decl_stmt|;
operator|++
operator|(
operator|*
name|this
operator|)
expr_stmt|;
return|return
name|Orig
return|;
block|}
decl|const
name|AnnotationData
modifier|&
name|operator
modifier|*
argument_list|()
block|{
name|ParseCurrentAnnotation
argument_list|()
expr_stmt|;
return|return
name|Current
operator|.
name|getValue
argument_list|()
return|;
block|}
name|private
range|:
specifier|static
name|uint32_t
name|GetCompressedAnnotation
argument_list|(
argument|ArrayRef<uint8_t>&Annotations
argument_list|)
block|{
if|if
condition|(
name|Annotations
operator|.
name|empty
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|uint8_t
name|FirstByte
operator|=
name|Annotations
operator|.
name|front
argument_list|()
struct|;
name|Annotations
operator|=
name|Annotations
operator|.
name|drop_front
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|FirstByte
operator|&
literal|0x80
operator|)
operator|==
literal|0x00
condition|)
return|return
name|FirstByte
return|;
if|if
condition|(
name|Annotations
operator|.
name|empty
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|uint8_t
name|SecondByte
init|=
name|Annotations
operator|.
name|front
argument_list|()
decl_stmt|;
name|Annotations
operator|=
name|Annotations
operator|.
name|drop_front
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|FirstByte
operator|&
literal|0xC0
operator|)
operator|==
literal|0x80
condition|)
return|return
operator|(
operator|(
name|FirstByte
operator|&
literal|0x3F
operator|)
operator|<<
literal|8
operator|)
operator||
name|SecondByte
return|;
if|if
condition|(
name|Annotations
operator|.
name|empty
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|uint8_t
name|ThirdByte
init|=
name|Annotations
operator|.
name|front
argument_list|()
decl_stmt|;
name|Annotations
operator|=
name|Annotations
operator|.
name|drop_front
argument_list|()
expr_stmt|;
if|if
condition|(
name|Annotations
operator|.
name|empty
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|uint8_t
name|FourthByte
init|=
name|Annotations
operator|.
name|front
argument_list|()
decl_stmt|;
name|Annotations
operator|=
name|Annotations
operator|.
name|drop_front
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|FirstByte
operator|&
literal|0xE0
operator|)
operator|==
literal|0xC0
condition|)
return|return
operator|(
operator|(
name|FirstByte
operator|&
literal|0x1F
operator|)
operator|<<
literal|24
operator|)
operator||
operator|(
name|SecondByte
operator|<<
literal|16
operator|)
operator||
operator|(
name|ThirdByte
operator|<<
literal|8
operator|)
operator||
name|FourthByte
return|;
return|return
operator|-
literal|1
return|;
block|}
empty_stmt|;
specifier|static
name|int32_t
name|DecodeSignedOperand
parameter_list|(
name|uint32_t
name|Operand
parameter_list|)
block|{
if|if
condition|(
name|Operand
operator|&
literal|1
condition|)
return|return
operator|-
operator|(
name|Operand
operator|>>
literal|1
operator|)
return|;
return|return
name|Operand
operator|>>
literal|1
return|;
block|}
empty_stmt|;
specifier|static
name|int32_t
name|DecodeSignedOperand
argument_list|(
name|ArrayRef
operator|<
name|uint8_t
operator|>
operator|&
name|Annotations
argument_list|)
block|{
return|return
name|DecodeSignedOperand
argument_list|(
name|GetCompressedAnnotation
argument_list|(
name|Annotations
argument_list|)
argument_list|)
return|;
block|}
empty_stmt|;
name|bool
name|ParseCurrentAnnotation
parameter_list|()
block|{
if|if
condition|(
name|Current
operator|.
name|hasValue
argument_list|()
condition|)
return|return
name|true
return|;
name|Next
operator|=
name|Data
expr_stmt|;
name|uint32_t
name|Op
init|=
name|GetCompressedAnnotation
argument_list|(
name|Next
argument_list|)
decl_stmt|;
name|AnnotationData
name|Result
decl_stmt|;
name|Result
operator|.
name|OpCode
operator|=
name|static_cast
operator|<
name|BinaryAnnotationsOpCode
operator|>
operator|(
name|Op
operator|)
expr_stmt|;
switch|switch
condition|(
name|Result
operator|.
name|OpCode
condition|)
block|{
case|case
name|BinaryAnnotationsOpCode
operator|::
name|Invalid
case|:
name|Result
operator|.
name|Name
operator|=
literal|"Invalid"
expr_stmt|;
name|Next
operator|=
name|ArrayRef
operator|<
name|uint8_t
operator|>
operator|(
operator|)
expr_stmt|;
break|break;
case|case
name|BinaryAnnotationsOpCode
operator|::
name|CodeOffset
case|:
name|Result
operator|.
name|Name
operator|=
literal|"CodeOffset"
expr_stmt|;
name|Result
operator|.
name|U1
operator|=
name|GetCompressedAnnotation
argument_list|(
name|Next
argument_list|)
expr_stmt|;
break|break;
case|case
name|BinaryAnnotationsOpCode
operator|::
name|ChangeCodeOffsetBase
case|:
name|Result
operator|.
name|Name
operator|=
literal|"ChangeCodeOffsetBase"
expr_stmt|;
name|Result
operator|.
name|U1
operator|=
name|GetCompressedAnnotation
argument_list|(
name|Next
argument_list|)
expr_stmt|;
break|break;
case|case
name|BinaryAnnotationsOpCode
operator|::
name|ChangeCodeOffset
case|:
name|Result
operator|.
name|Name
operator|=
literal|"ChangeCodeOffset"
expr_stmt|;
name|Result
operator|.
name|U1
operator|=
name|GetCompressedAnnotation
argument_list|(
name|Next
argument_list|)
expr_stmt|;
break|break;
case|case
name|BinaryAnnotationsOpCode
operator|::
name|ChangeCodeLength
case|:
name|Result
operator|.
name|Name
operator|=
literal|"ChangeCodeLength"
expr_stmt|;
name|Result
operator|.
name|U1
operator|=
name|GetCompressedAnnotation
argument_list|(
name|Next
argument_list|)
expr_stmt|;
break|break;
case|case
name|BinaryAnnotationsOpCode
operator|::
name|ChangeFile
case|:
name|Result
operator|.
name|Name
operator|=
literal|"ChangeFile"
expr_stmt|;
name|Result
operator|.
name|U1
operator|=
name|GetCompressedAnnotation
argument_list|(
name|Next
argument_list|)
expr_stmt|;
break|break;
case|case
name|BinaryAnnotationsOpCode
operator|::
name|ChangeLineEndDelta
case|:
name|Result
operator|.
name|Name
operator|=
literal|"ChangeLineEndDelta"
expr_stmt|;
name|Result
operator|.
name|U1
operator|=
name|GetCompressedAnnotation
argument_list|(
name|Next
argument_list|)
expr_stmt|;
break|break;
case|case
name|BinaryAnnotationsOpCode
operator|::
name|ChangeRangeKind
case|:
name|Result
operator|.
name|Name
operator|=
literal|"ChangeRangeKind"
expr_stmt|;
name|Result
operator|.
name|U1
operator|=
name|GetCompressedAnnotation
argument_list|(
name|Next
argument_list|)
expr_stmt|;
break|break;
case|case
name|BinaryAnnotationsOpCode
operator|::
name|ChangeColumnStart
case|:
name|Result
operator|.
name|Name
operator|=
literal|"ChangeColumnStart"
expr_stmt|;
name|Result
operator|.
name|U1
operator|=
name|GetCompressedAnnotation
argument_list|(
name|Next
argument_list|)
expr_stmt|;
break|break;
case|case
name|BinaryAnnotationsOpCode
operator|::
name|ChangeColumnEnd
case|:
name|Result
operator|.
name|Name
operator|=
literal|"ChangeColumnEnd"
expr_stmt|;
name|Result
operator|.
name|U1
operator|=
name|GetCompressedAnnotation
argument_list|(
name|Next
argument_list|)
expr_stmt|;
break|break;
case|case
name|BinaryAnnotationsOpCode
operator|::
name|ChangeLineOffset
case|:
name|Result
operator|.
name|Name
operator|=
literal|"ChangeLineOffset"
expr_stmt|;
name|Result
operator|.
name|S1
operator|=
name|DecodeSignedOperand
argument_list|(
name|Next
argument_list|)
expr_stmt|;
break|break;
case|case
name|BinaryAnnotationsOpCode
operator|::
name|ChangeColumnEndDelta
case|:
name|Result
operator|.
name|Name
operator|=
literal|"ChangeColumnEndDelta"
expr_stmt|;
name|Result
operator|.
name|S1
operator|=
name|DecodeSignedOperand
argument_list|(
name|Next
argument_list|)
expr_stmt|;
break|break;
case|case
name|BinaryAnnotationsOpCode
operator|::
name|ChangeCodeOffsetAndLineOffset
case|:
block|{
name|Result
operator|.
name|Name
operator|=
literal|"ChangeCodeOffsetAndLineOffset"
expr_stmt|;
name|uint32_t
name|Annotation
init|=
name|GetCompressedAnnotation
argument_list|(
name|Next
argument_list|)
decl_stmt|;
name|Result
operator|.
name|S1
operator|=
name|DecodeSignedOperand
argument_list|(
name|Annotation
operator|>>
literal|4
argument_list|)
expr_stmt|;
name|Result
operator|.
name|U1
operator|=
name|Annotation
operator|&
literal|0xf
expr_stmt|;
break|break;
block|}
case|case
name|BinaryAnnotationsOpCode
operator|::
name|ChangeCodeLengthAndCodeOffset
case|:
block|{
name|Result
operator|.
name|Name
operator|=
literal|"ChangeCodeLengthAndCodeOffset"
expr_stmt|;
name|Result
operator|.
name|U1
operator|=
name|GetCompressedAnnotation
argument_list|(
name|Next
argument_list|)
expr_stmt|;
name|Result
operator|.
name|U2
operator|=
name|GetCompressedAnnotation
argument_list|(
name|Next
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|Current
operator|=
name|Result
expr_stmt|;
return|return
name|true
return|;
block|}
name|Optional
operator|<
name|AnnotationData
operator|>
name|Current
expr_stmt|;
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|Data
expr_stmt|;
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|Next
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// S_INLINESITE
end_comment

begin_decl_stmt
name|class
name|InlineSiteSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Hdr
block|{
name|ulittle32_t
name|PtrParent
block|;
name|ulittle32_t
name|PtrEnd
block|;
name|TypeIndex
name|Inlinee
block|;
comment|// BinaryAnnotations
block|}
block|;
name|InlineSiteSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|,
argument|const Hdr *H
argument_list|,
argument|ArrayRef<uint8_t> Annotations
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|InlineSiteSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
name|RecordOffset
argument_list|)
block|,
name|Header
argument_list|(
operator|*
name|H
argument_list|)
block|,
name|Annotations
argument_list|(
argument|Annotations
argument_list|)
block|{}
specifier|static
name|ErrorOr
operator|<
name|InlineSiteSym
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
specifier|const
name|Hdr
operator|*
name|H
operator|=
name|nullptr
block|;
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|Annotations
block|;
name|CV_DESERIALIZE
argument_list|(
name|Data
argument_list|,
name|H
argument_list|,
name|CV_ARRAY_FIELD_TAIL
argument_list|(
name|Annotations
argument_list|)
argument_list|)
block|;
return|return
name|InlineSiteSym
argument_list|(
name|RecordOffset
argument_list|,
name|H
argument_list|,
name|Annotations
argument_list|)
return|;
block|}
name|llvm
operator|::
name|iterator_range
operator|<
name|BinaryAnnotationIterator
operator|>
name|annotations
argument_list|()
specifier|const
block|{
return|return
name|llvm
operator|::
name|make_range
argument_list|(
name|BinaryAnnotationIterator
argument_list|(
name|Annotations
argument_list|)
argument_list|,
name|BinaryAnnotationIterator
argument_list|()
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|;
name|Hdr
name|Header
block|;
name|private
operator|:
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|Annotations
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_PUB32
end_comment

begin_decl_stmt
name|class
name|PublicSym32
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Hdr
block|{
name|ulittle32_t
name|Index
block|;
comment|// Type index, or Metadata token if a managed symbol
name|ulittle32_t
name|Off
block|;
name|ulittle16_t
name|Seg
block|;
comment|// Name: The null-terminated name follows.
block|}
block|;
name|PublicSym32
argument_list|(
argument|uint32_t RecordOffset
argument_list|,
argument|const Hdr *H
argument_list|,
argument|StringRef Name
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|PublicSym32
argument_list|)
block|,
name|RecordOffset
argument_list|(
name|RecordOffset
argument_list|)
block|,
name|Header
argument_list|(
operator|*
name|H
argument_list|)
block|,
name|Name
argument_list|(
argument|Name
argument_list|)
block|{}
specifier|static
name|ErrorOr
operator|<
name|PublicSym32
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
specifier|const
name|Hdr
operator|*
name|H
operator|=
name|nullptr
block|;
name|StringRef
name|Name
block|;
name|CV_DESERIALIZE
argument_list|(
name|Data
argument_list|,
name|H
argument_list|,
name|Name
argument_list|)
block|;
return|return
name|PublicSym32
argument_list|(
name|RecordOffset
argument_list|,
name|H
argument_list|,
name|Name
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|;
name|Hdr
name|Header
block|;
name|StringRef
name|Name
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_REGISTER
end_comment

begin_decl_stmt
name|class
name|RegisterSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Hdr
block|{
name|ulittle32_t
name|Index
block|;
comment|// Type index or Metadata token
name|ulittle16_t
name|Register
block|;
comment|// RegisterId enumeration
comment|// Name: The null-terminated name follows.
block|}
block|;
name|RegisterSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|,
argument|const Hdr *H
argument_list|,
argument|StringRef Name
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|RegisterSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
name|RecordOffset
argument_list|)
block|,
name|Header
argument_list|(
operator|*
name|H
argument_list|)
block|,
name|Name
argument_list|(
argument|Name
argument_list|)
block|{}
specifier|static
name|ErrorOr
operator|<
name|RegisterSym
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
specifier|const
name|Hdr
operator|*
name|H
operator|=
name|nullptr
block|;
name|StringRef
name|Name
block|;
name|CV_DESERIALIZE
argument_list|(
name|Data
argument_list|,
name|H
argument_list|,
name|Name
argument_list|)
block|;
return|return
name|RegisterSym
argument_list|(
name|RecordOffset
argument_list|,
name|H
argument_list|,
name|Name
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|;
name|Hdr
name|Header
block|;
name|StringRef
name|Name
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_PROCREF, S_LPROCREF
end_comment

begin_decl_stmt
name|class
name|ProcRefSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Hdr
block|{
name|ulittle32_t
name|SumName
block|;
comment|// SUC of the name (?)
name|ulittle32_t
name|SymOffset
block|;
comment|// Offset of actual symbol in $$Symbols
name|ulittle16_t
name|Mod
block|;
comment|// Module containing the actual symbol
comment|// Name:  The null-terminated name follows.
block|}
block|;
name|ProcRefSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|,
argument|const Hdr *H
argument_list|,
argument|StringRef Name
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|ProcRefSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
name|RecordOffset
argument_list|)
block|,
name|Header
argument_list|(
operator|*
name|H
argument_list|)
block|,
name|Name
argument_list|(
argument|Name
argument_list|)
block|{}
specifier|static
name|ErrorOr
operator|<
name|ProcRefSym
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
specifier|const
name|Hdr
operator|*
name|H
operator|=
name|nullptr
block|;
name|StringRef
name|Name
block|;
name|CV_DESERIALIZE
argument_list|(
name|Data
argument_list|,
name|H
argument_list|,
name|Name
argument_list|)
block|;
return|return
name|ProcRefSym
argument_list|(
name|RecordOffset
argument_list|,
name|H
argument_list|,
name|Name
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|;
name|Hdr
name|Header
block|;
name|StringRef
name|Name
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_LOCAL
end_comment

begin_decl_stmt
name|class
name|LocalSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Hdr
block|{
name|TypeIndex
name|Type
block|;
name|ulittle16_t
name|Flags
block|;
comment|// LocalSymFlags enum
comment|// Name: The null-terminated name follows.
block|}
block|;
name|LocalSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|,
argument|const Hdr *H
argument_list|,
argument|StringRef Name
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|LocalSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
name|RecordOffset
argument_list|)
block|,
name|Header
argument_list|(
operator|*
name|H
argument_list|)
block|,
name|Name
argument_list|(
argument|Name
argument_list|)
block|{}
specifier|static
name|ErrorOr
operator|<
name|LocalSym
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
specifier|const
name|Hdr
operator|*
name|H
operator|=
name|nullptr
block|;
name|StringRef
name|Name
block|;
name|CV_DESERIALIZE
argument_list|(
name|Data
argument_list|,
name|H
argument_list|,
name|Name
argument_list|)
block|;
return|return
name|LocalSym
argument_list|(
name|RecordOffset
argument_list|,
name|H
argument_list|,
name|Name
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|;
name|Hdr
name|Header
block|;
name|StringRef
name|Name
block|; }
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|LocalVariableAddrRange
block|{
name|ulittle32_t
name|OffsetStart
decl_stmt|;
name|ulittle16_t
name|ISectStart
decl_stmt|;
name|ulittle16_t
name|Range
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|LocalVariableAddrGap
block|{
name|ulittle16_t
name|GapStartOffset
decl_stmt|;
name|ulittle16_t
name|Range
decl_stmt|;
block|}
struct|;
end_struct

begin_enum_decl
enum_decl|enum :
name|uint16_t
block|{
name|MaxDefRange
init|=
literal|0xf000
block|}
enum_decl|;
end_enum_decl

begin_comment
comment|// S_DEFRANGE
end_comment

begin_decl_stmt
name|class
name|DefRangeSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Hdr
block|{
name|ulittle32_t
name|Program
block|;
name|LocalVariableAddrRange
name|Range
block|;
comment|// LocalVariableAddrGap Gaps[];
block|}
block|;
name|DefRangeSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|,
argument|const Hdr *H
argument_list|,
argument|ArrayRef<LocalVariableAddrGap> Gaps
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|DefRangeSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
name|RecordOffset
argument_list|)
block|,
name|Header
argument_list|(
operator|*
name|H
argument_list|)
block|,
name|Gaps
argument_list|(
argument|Gaps
argument_list|)
block|{}
specifier|static
name|ErrorOr
operator|<
name|DefRangeSym
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
specifier|const
name|Hdr
operator|*
name|H
operator|=
name|nullptr
block|;
name|ArrayRef
operator|<
name|LocalVariableAddrGap
operator|>
name|Gaps
block|;
name|CV_DESERIALIZE
argument_list|(
name|Data
argument_list|,
name|H
argument_list|,
name|CV_ARRAY_FIELD_TAIL
argument_list|(
name|Gaps
argument_list|)
argument_list|)
block|;
return|return
name|DefRangeSym
argument_list|(
name|RecordOffset
argument_list|,
name|H
argument_list|,
name|Gaps
argument_list|)
return|;
block|}
name|uint32_t
name|getRelocationOffset
argument_list|()
specifier|const
block|{
return|return
name|RecordOffset
operator|+
name|offsetof
argument_list|(
name|Hdr
argument_list|,
name|Range
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|;
name|Hdr
name|Header
block|;
name|ArrayRef
operator|<
name|LocalVariableAddrGap
operator|>
name|Gaps
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_DEFRANGE_SUBFIELD
end_comment

begin_decl_stmt
name|class
name|DefRangeSubfieldSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Hdr
block|{
name|ulittle32_t
name|Program
block|;
name|ulittle16_t
name|OffsetInParent
block|;
name|LocalVariableAddrRange
name|Range
block|;
comment|// LocalVariableAddrGap Gaps[];
block|}
block|;
name|DefRangeSubfieldSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|,
argument|const Hdr *H
argument_list|,
argument|ArrayRef<LocalVariableAddrGap> Gaps
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|DefRangeSubfieldSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
name|RecordOffset
argument_list|)
block|,
name|Header
argument_list|(
operator|*
name|H
argument_list|)
block|,
name|Gaps
argument_list|(
argument|Gaps
argument_list|)
block|{}
specifier|static
name|ErrorOr
operator|<
name|DefRangeSubfieldSym
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
specifier|const
name|Hdr
operator|*
name|H
operator|=
name|nullptr
block|;
name|ArrayRef
operator|<
name|LocalVariableAddrGap
operator|>
name|Gaps
block|;
name|CV_DESERIALIZE
argument_list|(
name|Data
argument_list|,
name|H
argument_list|,
name|CV_ARRAY_FIELD_TAIL
argument_list|(
name|Gaps
argument_list|)
argument_list|)
block|;
return|return
name|DefRangeSubfieldSym
argument_list|(
name|RecordOffset
argument_list|,
name|H
argument_list|,
name|Gaps
argument_list|)
return|;
block|}
name|uint32_t
name|getRelocationOffset
argument_list|()
specifier|const
block|{
return|return
name|RecordOffset
operator|+
name|offsetof
argument_list|(
name|Hdr
argument_list|,
name|Range
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|;
name|Hdr
name|Header
block|;
name|ArrayRef
operator|<
name|LocalVariableAddrGap
operator|>
name|Gaps
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_DEFRANGE_REGISTER
end_comment

begin_decl_stmt
name|class
name|DefRangeRegisterSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Hdr
block|{
name|ulittle16_t
name|Register
block|;
name|ulittle16_t
name|MayHaveNoName
block|;
name|LocalVariableAddrRange
name|Range
block|;
comment|// LocalVariableAddrGap Gaps[];
block|}
block|;
name|DefRangeRegisterSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|,
argument|const Hdr *H
argument_list|,
argument|ArrayRef<LocalVariableAddrGap> Gaps
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|DefRangeRegisterSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
name|RecordOffset
argument_list|)
block|,
name|Header
argument_list|(
operator|*
name|H
argument_list|)
block|,
name|Gaps
argument_list|(
argument|Gaps
argument_list|)
block|{}
name|DefRangeRegisterSym
argument_list|(
argument|uint16_t Register
argument_list|,
argument|uint16_t MayHaveNoName
argument_list|,
argument|uint32_t OffsetStart
argument_list|,
argument|uint16_t ISectStart
argument_list|,
argument|uint16_t Range
argument_list|,
argument|ArrayRef<LocalVariableAddrGap> Gaps
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|DefRangeRegisterSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
literal|0
argument_list|)
block|,
name|Gaps
argument_list|(
argument|Gaps
argument_list|)
block|{
name|Header
operator|.
name|Register
operator|=
name|Register
block|;
name|Header
operator|.
name|MayHaveNoName
operator|=
name|MayHaveNoName
block|;
name|Header
operator|.
name|Range
operator|.
name|OffsetStart
operator|=
name|OffsetStart
block|;
name|Header
operator|.
name|Range
operator|.
name|ISectStart
operator|=
name|ISectStart
block|;
name|Header
operator|.
name|Range
operator|.
name|Range
operator|=
name|Range
block|;   }
specifier|static
name|ErrorOr
operator|<
name|DefRangeRegisterSym
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
specifier|const
name|Hdr
operator|*
name|H
operator|=
name|nullptr
block|;
name|ArrayRef
operator|<
name|LocalVariableAddrGap
operator|>
name|Gaps
block|;
name|CV_DESERIALIZE
argument_list|(
name|Data
argument_list|,
name|H
argument_list|,
name|CV_ARRAY_FIELD_TAIL
argument_list|(
name|Gaps
argument_list|)
argument_list|)
block|;
return|return
name|DefRangeRegisterSym
argument_list|(
name|RecordOffset
argument_list|,
name|H
argument_list|,
name|Gaps
argument_list|)
return|;
block|}
name|uint32_t
name|getRelocationOffset
argument_list|()
specifier|const
block|{
return|return
name|RecordOffset
operator|+
name|offsetof
argument_list|(
name|Hdr
argument_list|,
name|Range
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|;
name|Hdr
name|Header
block|;
name|ArrayRef
operator|<
name|LocalVariableAddrGap
operator|>
name|Gaps
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_DEFRANGE_SUBFIELD_REGISTER
end_comment

begin_decl_stmt
name|class
name|DefRangeSubfieldRegisterSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Hdr
block|{
name|ulittle16_t
name|Register
block|;
comment|// Register to which the variable is relative
name|ulittle16_t
name|MayHaveNoName
block|;
name|ulittle32_t
name|OffsetInParent
block|;
name|LocalVariableAddrRange
name|Range
block|;
comment|// LocalVariableAddrGap Gaps[];
block|}
block|;
name|DefRangeSubfieldRegisterSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|,
argument|const Hdr *H
argument_list|,
argument|ArrayRef<LocalVariableAddrGap> Gaps
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|DefRangeSubfieldRegisterSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
name|RecordOffset
argument_list|)
block|,
name|Header
argument_list|(
operator|*
name|H
argument_list|)
block|,
name|Gaps
argument_list|(
argument|Gaps
argument_list|)
block|{}
name|DefRangeSubfieldRegisterSym
argument_list|(
argument|uint16_t Register
argument_list|,
argument|uint16_t MayHaveNoName
argument_list|,
argument|uint32_t OffsetInParent
argument_list|,
argument|ArrayRef<LocalVariableAddrGap> Gaps
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|DefRangeSubfieldRegisterSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
literal|0
argument_list|)
block|,
name|Gaps
argument_list|(
argument|Gaps
argument_list|)
block|{
name|Header
operator|.
name|Register
operator|=
name|Register
block|;
name|Header
operator|.
name|MayHaveNoName
operator|=
name|MayHaveNoName
block|;
name|Header
operator|.
name|OffsetInParent
operator|=
name|OffsetInParent
block|;   }
specifier|static
name|ErrorOr
operator|<
name|DefRangeSubfieldRegisterSym
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
specifier|const
name|Hdr
operator|*
name|H
operator|=
name|nullptr
block|;
name|ArrayRef
operator|<
name|LocalVariableAddrGap
operator|>
name|Gaps
block|;
name|CV_DESERIALIZE
argument_list|(
name|Data
argument_list|,
name|H
argument_list|,
name|CV_ARRAY_FIELD_TAIL
argument_list|(
name|Gaps
argument_list|)
argument_list|)
block|;
return|return
name|DefRangeSubfieldRegisterSym
argument_list|(
name|RecordOffset
argument_list|,
name|H
argument_list|,
name|Gaps
argument_list|)
return|;
block|}
name|uint32_t
name|getRelocationOffset
argument_list|()
specifier|const
block|{
return|return
name|RecordOffset
operator|+
name|offsetof
argument_list|(
name|Hdr
argument_list|,
name|Range
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|;
name|Hdr
name|Header
block|;
name|ArrayRef
operator|<
name|LocalVariableAddrGap
operator|>
name|Gaps
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_DEFRANGE_FRAMEPOINTER_REL
end_comment

begin_decl_stmt
name|class
name|DefRangeFramePointerRelSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Hdr
block|{
name|little32_t
name|Offset
block|;
comment|// Offset from the frame pointer register
name|LocalVariableAddrRange
name|Range
block|;
comment|// LocalVariableAddrGap Gaps[];
block|}
block|;
name|DefRangeFramePointerRelSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|,
argument|const Hdr *H
argument_list|,
argument|ArrayRef<LocalVariableAddrGap> Gaps
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|DefRangeFramePointerRelSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
name|RecordOffset
argument_list|)
block|,
name|Header
argument_list|(
operator|*
name|H
argument_list|)
block|,
name|Gaps
argument_list|(
argument|Gaps
argument_list|)
block|{}
specifier|static
name|ErrorOr
operator|<
name|DefRangeFramePointerRelSym
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
specifier|const
name|Hdr
operator|*
name|H
operator|=
name|nullptr
block|;
name|ArrayRef
operator|<
name|LocalVariableAddrGap
operator|>
name|Gaps
block|;
name|CV_DESERIALIZE
argument_list|(
name|Data
argument_list|,
name|H
argument_list|,
name|CV_ARRAY_FIELD_TAIL
argument_list|(
name|Gaps
argument_list|)
argument_list|)
block|;
return|return
name|DefRangeFramePointerRelSym
argument_list|(
name|RecordOffset
argument_list|,
name|H
argument_list|,
name|Gaps
argument_list|)
return|;
block|}
name|uint32_t
name|getRelocationOffset
argument_list|()
specifier|const
block|{
return|return
name|RecordOffset
operator|+
name|offsetof
argument_list|(
name|Hdr
argument_list|,
name|Range
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|;
name|Hdr
name|Header
block|;
name|ArrayRef
operator|<
name|LocalVariableAddrGap
operator|>
name|Gaps
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_DEFRANGE_REGISTER_REL
end_comment

begin_decl_stmt
name|class
name|DefRangeRegisterRelSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Hdr
block|{
name|ulittle16_t
name|BaseRegister
block|;
name|ulittle16_t
name|Flags
block|;
name|little32_t
name|BasePointerOffset
block|;
name|LocalVariableAddrRange
name|Range
block|;
comment|// LocalVariableAddrGap Gaps[];
block|}
block|;
name|DefRangeRegisterRelSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|,
argument|const Hdr *H
argument_list|,
argument|ArrayRef<LocalVariableAddrGap> Gaps
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|DefRangeRegisterRelSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
name|RecordOffset
argument_list|)
block|,
name|Header
argument_list|(
operator|*
name|H
argument_list|)
block|,
name|Gaps
argument_list|(
argument|Gaps
argument_list|)
block|{}
name|DefRangeRegisterRelSym
argument_list|(
argument|uint16_t BaseRegister
argument_list|,
argument|uint16_t Flags
argument_list|,
argument|int32_t BasePointerOffset
argument_list|,
argument|uint32_t OffsetStart
argument_list|,
argument|uint16_t ISectStart
argument_list|,
argument|uint16_t Range
argument_list|,
argument|ArrayRef<LocalVariableAddrGap> Gaps
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|DefRangeRegisterRelSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
literal|0
argument_list|)
block|,
name|Gaps
argument_list|(
argument|Gaps
argument_list|)
block|{
name|Header
operator|.
name|BaseRegister
operator|=
name|BaseRegister
block|;
name|Header
operator|.
name|Flags
operator|=
name|Flags
block|;
name|Header
operator|.
name|BasePointerOffset
operator|=
name|BasePointerOffset
block|;
name|Header
operator|.
name|Range
operator|.
name|OffsetStart
operator|=
name|OffsetStart
block|;
name|Header
operator|.
name|Range
operator|.
name|ISectStart
operator|=
name|ISectStart
block|;
name|Header
operator|.
name|Range
operator|.
name|Range
operator|=
name|Range
block|;   }
specifier|static
name|ErrorOr
operator|<
name|DefRangeRegisterRelSym
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
specifier|const
name|Hdr
operator|*
name|H
operator|=
name|nullptr
block|;
name|ArrayRef
operator|<
name|LocalVariableAddrGap
operator|>
name|Gaps
block|;
name|CV_DESERIALIZE
argument_list|(
name|Data
argument_list|,
name|H
argument_list|,
name|CV_ARRAY_FIELD_TAIL
argument_list|(
name|Gaps
argument_list|)
argument_list|)
block|;
return|return
name|DefRangeRegisterRelSym
argument_list|(
name|RecordOffset
argument_list|,
name|H
argument_list|,
name|Gaps
argument_list|)
return|;
block|}
name|bool
name|hasSpilledUDTMember
argument_list|()
specifier|const
block|{
return|return
name|Header
operator|.
name|Flags
operator|&
literal|1
return|;
block|}
name|uint16_t
name|offsetInParent
argument_list|()
specifier|const
block|{
return|return
name|Header
operator|.
name|Flags
operator|>>
literal|4
return|;
block|}
name|uint32_t
name|getRelocationOffset
argument_list|()
specifier|const
block|{
return|return
name|RecordOffset
operator|+
name|offsetof
argument_list|(
name|Hdr
argument_list|,
name|Range
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|;
name|Hdr
name|Header
block|;
name|ArrayRef
operator|<
name|LocalVariableAddrGap
operator|>
name|Gaps
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_DEFRANGE_FRAMEPOINTER_REL_FULL_SCOPE
end_comment

begin_decl_stmt
name|class
name|DefRangeFramePointerRelFullScopeSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Hdr
block|{
name|little32_t
name|Offset
block|;
comment|// Offset from the frame pointer register
block|}
block|;
name|DefRangeFramePointerRelFullScopeSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|,
argument|const Hdr *H
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|DefRangeFramePointerRelFullScopeSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
name|RecordOffset
argument_list|)
block|,
name|Header
argument_list|(
argument|*H
argument_list|)
block|{}
specifier|static
name|ErrorOr
operator|<
name|DefRangeFramePointerRelFullScopeSym
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
specifier|const
name|Hdr
operator|*
name|H
operator|=
name|nullptr
block|;
name|CV_DESERIALIZE
argument_list|(
name|Data
argument_list|,
name|H
argument_list|)
block|;
return|return
name|DefRangeFramePointerRelFullScopeSym
argument_list|(
name|RecordOffset
argument_list|,
name|H
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|;
name|Hdr
name|Header
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_BLOCK32
end_comment

begin_decl_stmt
name|class
name|BlockSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Hdr
block|{
name|ulittle32_t
name|PtrParent
block|;
name|ulittle32_t
name|PtrEnd
block|;
name|ulittle32_t
name|CodeSize
block|;
name|ulittle32_t
name|CodeOffset
block|;
name|ulittle16_t
name|Segment
block|;
comment|// Name: The null-terminated name follows.
block|}
block|;
name|BlockSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|,
argument|const Hdr *H
argument_list|,
argument|StringRef Name
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|BlockSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
name|RecordOffset
argument_list|)
block|,
name|Header
argument_list|(
operator|*
name|H
argument_list|)
block|,
name|Name
argument_list|(
argument|Name
argument_list|)
block|{}
specifier|static
name|ErrorOr
operator|<
name|BlockSym
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
specifier|const
name|Hdr
operator|*
name|H
operator|=
name|nullptr
block|;
name|StringRef
name|Name
block|;
name|CV_DESERIALIZE
argument_list|(
name|Data
argument_list|,
name|H
argument_list|,
name|Name
argument_list|)
block|;
return|return
name|BlockSym
argument_list|(
name|RecordOffset
argument_list|,
name|H
argument_list|,
name|Name
argument_list|)
return|;
block|}
name|uint32_t
name|getRelocationOffset
argument_list|()
specifier|const
block|{
return|return
name|RecordOffset
operator|+
name|offsetof
argument_list|(
name|Hdr
argument_list|,
name|CodeOffset
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|;
name|Hdr
name|Header
block|;
name|StringRef
name|Name
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_LABEL32
end_comment

begin_decl_stmt
name|class
name|LabelSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Hdr
block|{
name|ulittle32_t
name|CodeOffset
block|;
name|ulittle16_t
name|Segment
block|;
name|uint8_t
name|Flags
block|;
comment|// CV_PROCFLAGS
comment|// Name: The null-terminated name follows.
block|}
block|;
name|LabelSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|,
argument|const Hdr *H
argument_list|,
argument|StringRef Name
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|LabelSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
name|RecordOffset
argument_list|)
block|,
name|Header
argument_list|(
operator|*
name|H
argument_list|)
block|,
name|Name
argument_list|(
argument|Name
argument_list|)
block|{}
specifier|static
name|ErrorOr
operator|<
name|LabelSym
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
specifier|const
name|Hdr
operator|*
name|H
operator|=
name|nullptr
block|;
name|StringRef
name|Name
block|;
name|CV_DESERIALIZE
argument_list|(
name|Data
argument_list|,
name|H
argument_list|,
name|Name
argument_list|)
block|;
return|return
name|LabelSym
argument_list|(
name|RecordOffset
argument_list|,
name|H
argument_list|,
name|Name
argument_list|)
return|;
block|}
name|uint32_t
name|getRelocationOffset
argument_list|()
specifier|const
block|{
return|return
name|RecordOffset
operator|+
name|offsetof
argument_list|(
name|Hdr
argument_list|,
name|CodeOffset
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|;
name|Hdr
name|Header
block|;
name|StringRef
name|Name
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_OBJNAME
end_comment

begin_decl_stmt
name|class
name|ObjNameSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Hdr
block|{
name|ulittle32_t
name|Signature
block|;
comment|// Name: The null-terminated name follows.
block|}
block|;
name|ObjNameSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|,
argument|const Hdr *H
argument_list|,
argument|StringRef Name
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|ObjNameSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
name|RecordOffset
argument_list|)
block|,
name|Header
argument_list|(
operator|*
name|H
argument_list|)
block|,
name|Name
argument_list|(
argument|Name
argument_list|)
block|{}
specifier|static
name|ErrorOr
operator|<
name|ObjNameSym
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
specifier|const
name|Hdr
operator|*
name|H
operator|=
name|nullptr
block|;
name|StringRef
name|Name
block|;
name|CV_DESERIALIZE
argument_list|(
name|Data
argument_list|,
name|H
argument_list|,
name|Name
argument_list|)
block|;
return|return
name|ObjNameSym
argument_list|(
name|RecordOffset
argument_list|,
name|H
argument_list|,
name|Name
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|;
name|Hdr
name|Header
block|;
name|StringRef
name|Name
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_ENVBLOCK
end_comment

begin_decl_stmt
name|class
name|EnvBlockSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Hdr
block|{
name|uint8_t
name|Reserved
block|;
comment|// Sequence of zero terminated strings.
block|}
block|;
name|EnvBlockSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|,
argument|const Hdr *H
argument_list|,
argument|const std::vector<StringRef>&Fields
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|EnvBlockSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
name|RecordOffset
argument_list|)
block|,
name|Header
argument_list|(
operator|*
name|H
argument_list|)
block|,
name|Fields
argument_list|(
argument|Fields
argument_list|)
block|{}
specifier|static
name|ErrorOr
operator|<
name|EnvBlockSym
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
specifier|const
name|Hdr
operator|*
name|H
operator|=
name|nullptr
block|;
name|std
operator|::
name|vector
operator|<
name|StringRef
operator|>
name|Fields
block|;
name|CV_DESERIALIZE
argument_list|(
name|Data
argument_list|,
name|H
argument_list|,
name|CV_STRING_ARRAY_NULL_TERM
argument_list|(
name|Fields
argument_list|)
argument_list|)
block|;
return|return
name|EnvBlockSym
argument_list|(
name|RecordOffset
argument_list|,
name|H
argument_list|,
name|Fields
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|;
name|Hdr
name|Header
block|;
name|std
operator|::
name|vector
operator|<
name|StringRef
operator|>
name|Fields
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_EXPORT
end_comment

begin_decl_stmt
name|class
name|ExportSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Hdr
block|{
name|ulittle16_t
name|Ordinal
block|;
name|ulittle16_t
name|Flags
block|;
comment|// ExportFlags
comment|// Name: The null-terminated name follows.
block|}
block|;
name|ExportSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|,
argument|const Hdr *H
argument_list|,
argument|StringRef Name
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|ExportSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
name|RecordOffset
argument_list|)
block|,
name|Header
argument_list|(
operator|*
name|H
argument_list|)
block|,
name|Name
argument_list|(
argument|Name
argument_list|)
block|{}
specifier|static
name|ErrorOr
operator|<
name|ExportSym
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
specifier|const
name|Hdr
operator|*
name|H
operator|=
name|nullptr
block|;
name|StringRef
name|Name
block|;
name|CV_DESERIALIZE
argument_list|(
name|Data
argument_list|,
name|H
argument_list|,
name|Name
argument_list|)
block|;
return|return
name|ExportSym
argument_list|(
name|RecordOffset
argument_list|,
name|H
argument_list|,
name|Name
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|;
name|Hdr
name|Header
block|;
name|StringRef
name|Name
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_FILESTATIC
end_comment

begin_decl_stmt
name|class
name|FileStaticSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Hdr
block|{
name|ulittle32_t
name|Index
block|;
comment|// Type Index
name|ulittle32_t
name|ModFilenameOffset
block|;
comment|// Index of mod filename in string table
name|ulittle16_t
name|Flags
block|;
comment|// LocalSymFlags enum
comment|// Name: The null-terminated name follows.
block|}
block|;
name|FileStaticSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|,
argument|const Hdr *H
argument_list|,
argument|StringRef Name
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|FileStaticSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
name|RecordOffset
argument_list|)
block|,
name|Header
argument_list|(
operator|*
name|H
argument_list|)
block|,
name|Name
argument_list|(
argument|Name
argument_list|)
block|{}
specifier|static
name|ErrorOr
operator|<
name|FileStaticSym
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
specifier|const
name|Hdr
operator|*
name|H
operator|=
name|nullptr
block|;
name|StringRef
name|Name
block|;
name|CV_DESERIALIZE
argument_list|(
name|Data
argument_list|,
name|H
argument_list|,
name|Name
argument_list|)
block|;
return|return
name|FileStaticSym
argument_list|(
name|RecordOffset
argument_list|,
name|H
argument_list|,
name|Name
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|;
name|Hdr
name|Header
block|;
name|StringRef
name|Name
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_COMPILE2
end_comment

begin_decl_stmt
name|class
name|Compile2Sym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Hdr
block|{
name|ulittle32_t
name|flags
block|;
comment|// CompileSym2Flags enum
name|uint8_t
name|getLanguage
argument_list|()
specifier|const
block|{
return|return
name|flags
operator|&
literal|0xFF
return|;
block|}
name|unsigned
name|short
name|Machine
block|;
comment|// CPUType enum
name|unsigned
name|short
name|VersionFrontendMajor
block|;
name|unsigned
name|short
name|VersionFrontendMinor
block|;
name|unsigned
name|short
name|VersionFrontendBuild
block|;
name|unsigned
name|short
name|VersionBackendMajor
block|;
name|unsigned
name|short
name|VersionBackendMinor
block|;
name|unsigned
name|short
name|VersionBackendBuild
block|;
comment|// Version: The null-terminated version string follows.
comment|// Optional block of zero terminated strings terminated with a double zero.
block|}
block|;
name|Compile2Sym
argument_list|(
argument|uint32_t RecordOffset
argument_list|,
argument|const Hdr *H
argument_list|,
argument|StringRef Version
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|Compile2Sym
argument_list|)
block|,
name|RecordOffset
argument_list|(
name|RecordOffset
argument_list|)
block|,
name|Header
argument_list|(
operator|*
name|H
argument_list|)
block|,
name|Version
argument_list|(
argument|Version
argument_list|)
block|{}
specifier|static
name|ErrorOr
operator|<
name|Compile2Sym
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
specifier|const
name|Hdr
operator|*
name|H
operator|=
name|nullptr
block|;
name|StringRef
name|Version
block|;
name|CV_DESERIALIZE
argument_list|(
name|Data
argument_list|,
name|H
argument_list|,
name|Version
argument_list|)
block|;
return|return
name|Compile2Sym
argument_list|(
name|RecordOffset
argument_list|,
name|H
argument_list|,
name|Version
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|;
name|Hdr
name|Header
block|;
name|StringRef
name|Version
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_COMPILE3
end_comment

begin_decl_stmt
name|class
name|Compile3Sym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Hdr
block|{
name|ulittle32_t
name|flags
block|;
comment|// CompileSym3Flags enum
name|uint8_t
name|getLanguage
argument_list|()
specifier|const
block|{
return|return
name|flags
operator|&
literal|0xff
return|;
block|}
name|ulittle16_t
name|Machine
block|;
comment|// CPUType enum
name|ulittle16_t
name|VersionFrontendMajor
block|;
name|ulittle16_t
name|VersionFrontendMinor
block|;
name|ulittle16_t
name|VersionFrontendBuild
block|;
name|ulittle16_t
name|VersionFrontendQFE
block|;
name|ulittle16_t
name|VersionBackendMajor
block|;
name|ulittle16_t
name|VersionBackendMinor
block|;
name|ulittle16_t
name|VersionBackendBuild
block|;
name|ulittle16_t
name|VersionBackendQFE
block|;
comment|// VersionString: The null-terminated version string follows.
block|}
block|;
name|Compile3Sym
argument_list|(
argument|uint32_t RecordOffset
argument_list|,
argument|const Hdr *H
argument_list|,
argument|StringRef Version
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|Compile3Sym
argument_list|)
block|,
name|RecordOffset
argument_list|(
name|RecordOffset
argument_list|)
block|,
name|Header
argument_list|(
operator|*
name|H
argument_list|)
block|,
name|Version
argument_list|(
argument|Version
argument_list|)
block|{}
specifier|static
name|ErrorOr
operator|<
name|Compile3Sym
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
specifier|const
name|Hdr
operator|*
name|H
operator|=
name|nullptr
block|;
name|StringRef
name|Version
block|;
name|CV_DESERIALIZE
argument_list|(
name|Data
argument_list|,
name|H
argument_list|,
name|Version
argument_list|)
block|;
return|return
name|Compile3Sym
argument_list|(
name|RecordOffset
argument_list|,
name|H
argument_list|,
name|Version
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|;
name|Hdr
name|Header
block|;
name|StringRef
name|Version
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_FRAMEPROC
end_comment

begin_decl_stmt
name|class
name|FrameProcSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Hdr
block|{
name|ulittle32_t
name|TotalFrameBytes
block|;
name|ulittle32_t
name|PaddingFrameBytes
block|;
name|ulittle32_t
name|OffsetToPadding
block|;
name|ulittle32_t
name|BytesOfCalleeSavedRegisters
block|;
name|ulittle32_t
name|OffsetOfExceptionHandler
block|;
name|ulittle16_t
name|SectionIdOfExceptionHandler
block|;
name|ulittle32_t
name|Flags
block|;   }
block|;
name|FrameProcSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|,
argument|const Hdr *H
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|FrameProcSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
name|RecordOffset
argument_list|)
block|,
name|Header
argument_list|(
argument|*H
argument_list|)
block|{}
specifier|static
name|ErrorOr
operator|<
name|FrameProcSym
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
specifier|const
name|Hdr
operator|*
name|H
operator|=
name|nullptr
block|;
name|CV_DESERIALIZE
argument_list|(
name|Data
argument_list|,
name|H
argument_list|)
block|;
return|return
name|FrameProcSym
argument_list|(
name|RecordOffset
argument_list|,
name|H
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|;
name|Hdr
name|Header
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_CALLSITEINFO
end_comment

begin_decl_stmt
name|class
name|CallSiteInfoSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Hdr
block|{
name|ulittle32_t
name|CodeOffset
block|;
name|ulittle16_t
name|Segment
block|;
name|ulittle16_t
name|Reserved
block|;
name|TypeIndex
name|Type
block|;   }
block|;
name|CallSiteInfoSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|,
argument|const Hdr *H
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|CallSiteInfoSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
name|RecordOffset
argument_list|)
block|,
name|Header
argument_list|(
argument|*H
argument_list|)
block|{}
specifier|static
name|ErrorOr
operator|<
name|CallSiteInfoSym
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
specifier|const
name|Hdr
operator|*
name|H
operator|=
name|nullptr
block|;
name|CV_DESERIALIZE
argument_list|(
name|Data
argument_list|,
name|H
argument_list|)
block|;
return|return
name|CallSiteInfoSym
argument_list|(
name|RecordOffset
argument_list|,
name|H
argument_list|)
return|;
block|}
name|uint32_t
name|getRelocationOffset
argument_list|()
specifier|const
block|{
return|return
name|RecordOffset
operator|+
name|offsetof
argument_list|(
name|Hdr
argument_list|,
name|CodeOffset
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|;
name|Hdr
name|Header
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_HEAPALLOCSITE
end_comment

begin_decl_stmt
name|class
name|HeapAllocationSiteSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Hdr
block|{
name|ulittle32_t
name|CodeOffset
block|;
name|ulittle16_t
name|Segment
block|;
name|ulittle16_t
name|CallInstructionSize
block|;
name|TypeIndex
name|Type
block|;   }
block|;
name|HeapAllocationSiteSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|,
argument|const Hdr *H
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|HeapAllocationSiteSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
name|RecordOffset
argument_list|)
block|,
name|Header
argument_list|(
argument|*H
argument_list|)
block|{}
specifier|static
name|ErrorOr
operator|<
name|HeapAllocationSiteSym
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
specifier|const
name|Hdr
operator|*
name|H
operator|=
name|nullptr
block|;
name|CV_DESERIALIZE
argument_list|(
name|Data
argument_list|,
name|H
argument_list|)
block|;
return|return
name|HeapAllocationSiteSym
argument_list|(
name|RecordOffset
argument_list|,
name|H
argument_list|)
return|;
block|}
name|uint32_t
name|getRelocationOffset
argument_list|()
specifier|const
block|{
return|return
name|RecordOffset
operator|+
name|offsetof
argument_list|(
name|Hdr
argument_list|,
name|CodeOffset
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|;
name|Hdr
name|Header
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_FRAMECOOKIE
end_comment

begin_decl_stmt
name|class
name|FrameCookieSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Hdr
block|{
name|ulittle32_t
name|CodeOffset
block|;
name|ulittle16_t
name|Register
block|;
name|uint8_t
name|CookieKind
block|;
name|uint8_t
name|Flags
block|;   }
block|;
name|FrameCookieSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|,
argument|const Hdr *H
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|FrameCookieSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
name|RecordOffset
argument_list|)
block|,
name|Header
argument_list|(
argument|*H
argument_list|)
block|{}
specifier|static
name|ErrorOr
operator|<
name|FrameCookieSym
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
specifier|const
name|Hdr
operator|*
name|H
operator|=
name|nullptr
block|;
name|CV_DESERIALIZE
argument_list|(
name|Data
argument_list|,
name|H
argument_list|)
block|;
return|return
name|FrameCookieSym
argument_list|(
name|RecordOffset
argument_list|,
name|H
argument_list|)
return|;
block|}
name|uint32_t
name|getRelocationOffset
argument_list|()
specifier|const
block|{
return|return
name|RecordOffset
operator|+
name|offsetof
argument_list|(
name|Hdr
argument_list|,
name|CodeOffset
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|;
name|Hdr
name|Header
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_UDT, S_COBOLUDT
end_comment

begin_decl_stmt
name|class
name|UDTSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Hdr
block|{
name|TypeIndex
name|Type
block|;
comment|// Type of the UDT
comment|// Name: The null-terminated name follows.
block|}
block|;
name|UDTSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|,
argument|const Hdr *H
argument_list|,
argument|StringRef Name
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|UDTSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
name|RecordOffset
argument_list|)
block|,
name|Header
argument_list|(
operator|*
name|H
argument_list|)
block|,
name|Name
argument_list|(
argument|Name
argument_list|)
block|{}
specifier|static
name|ErrorOr
operator|<
name|UDTSym
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
specifier|const
name|Hdr
operator|*
name|H
operator|=
name|nullptr
block|;
name|StringRef
name|Name
block|;
name|CV_DESERIALIZE
argument_list|(
name|Data
argument_list|,
name|H
argument_list|,
name|Name
argument_list|)
block|;
return|return
name|UDTSym
argument_list|(
name|RecordOffset
argument_list|,
name|H
argument_list|,
name|Name
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|;
name|Hdr
name|Header
block|;
name|StringRef
name|Name
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_BUILDINFO
end_comment

begin_decl_stmt
name|class
name|BuildInfoSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Hdr
block|{
name|ulittle32_t
name|BuildId
block|;   }
block|;
name|BuildInfoSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|,
argument|const Hdr *H
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|BuildInfoSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
name|RecordOffset
argument_list|)
block|,
name|Header
argument_list|(
argument|*H
argument_list|)
block|{}
specifier|static
name|ErrorOr
operator|<
name|BuildInfoSym
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
specifier|const
name|Hdr
operator|*
name|H
operator|=
name|nullptr
block|;
name|CV_DESERIALIZE
argument_list|(
name|Data
argument_list|,
name|H
argument_list|)
block|;
return|return
name|BuildInfoSym
argument_list|(
name|RecordOffset
argument_list|,
name|H
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|;
name|Hdr
name|Header
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_BPREL32
end_comment

begin_decl_stmt
name|class
name|BPRelativeSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Hdr
block|{
name|little32_t
name|Offset
block|;
comment|// Offset from the base pointer register
name|TypeIndex
name|Type
block|;
comment|// Type of the variable
comment|// Name: The null-terminated name follows.
block|}
block|;
name|BPRelativeSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|,
argument|const Hdr *H
argument_list|,
argument|StringRef Name
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|BPRelativeSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
name|RecordOffset
argument_list|)
block|,
name|Header
argument_list|(
operator|*
name|H
argument_list|)
block|,
name|Name
argument_list|(
argument|Name
argument_list|)
block|{}
specifier|static
name|ErrorOr
operator|<
name|BPRelativeSym
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
specifier|const
name|Hdr
operator|*
name|H
operator|=
name|nullptr
block|;
name|StringRef
name|Name
block|;
name|CV_DESERIALIZE
argument_list|(
name|Data
argument_list|,
name|H
argument_list|,
name|Name
argument_list|)
block|;
return|return
name|BPRelativeSym
argument_list|(
name|RecordOffset
argument_list|,
name|H
argument_list|,
name|Name
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|;
name|Hdr
name|Header
block|;
name|StringRef
name|Name
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_REGREL32
end_comment

begin_decl_stmt
name|class
name|RegRelativeSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Hdr
block|{
name|ulittle32_t
name|Offset
block|;
comment|// Offset from the register
name|TypeIndex
name|Type
block|;
comment|// Type of the variable
name|ulittle16_t
name|Register
block|;
comment|// Register to which the variable is relative
comment|// Name: The null-terminated name follows.
block|}
block|;
name|RegRelativeSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|,
argument|const Hdr *H
argument_list|,
argument|StringRef Name
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|RegRelativeSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
name|RecordOffset
argument_list|)
block|,
name|Header
argument_list|(
operator|*
name|H
argument_list|)
block|,
name|Name
argument_list|(
argument|Name
argument_list|)
block|{}
specifier|static
name|ErrorOr
operator|<
name|RegRelativeSym
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
specifier|const
name|Hdr
operator|*
name|H
operator|=
name|nullptr
block|;
name|StringRef
name|Name
block|;
name|CV_DESERIALIZE
argument_list|(
name|Data
argument_list|,
name|H
argument_list|,
name|Name
argument_list|)
block|;
return|return
name|RegRelativeSym
argument_list|(
name|RecordOffset
argument_list|,
name|H
argument_list|,
name|Name
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|;
name|Hdr
name|Header
block|;
name|StringRef
name|Name
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_CONSTANT, S_MANCONSTANT
end_comment

begin_decl_stmt
name|class
name|ConstantSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Hdr
block|{
name|TypeIndex
name|Type
block|;
comment|// Value: The value of the constant.
comment|// Name: The null-terminated name follows.
block|}
block|;
name|ConstantSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|,
argument|const Hdr *H
argument_list|,
argument|const APSInt&Value
argument_list|,
argument|StringRef Name
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|ConstantSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
name|RecordOffset
argument_list|)
block|,
name|Header
argument_list|(
operator|*
name|H
argument_list|)
block|,
name|Value
argument_list|(
name|Value
argument_list|)
block|,
name|Name
argument_list|(
argument|Name
argument_list|)
block|{}
specifier|static
name|ErrorOr
operator|<
name|ConstantSym
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
specifier|const
name|Hdr
operator|*
name|H
operator|=
name|nullptr
block|;
name|APSInt
name|Value
block|;
name|StringRef
name|Name
block|;
name|CV_DESERIALIZE
argument_list|(
name|Data
argument_list|,
name|H
argument_list|,
name|Value
argument_list|,
name|Name
argument_list|)
block|;
return|return
name|ConstantSym
argument_list|(
name|RecordOffset
argument_list|,
name|H
argument_list|,
name|Value
argument_list|,
name|Name
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|;
name|Hdr
name|Header
block|;
name|APSInt
name|Value
block|;
name|StringRef
name|Name
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_LDATA32, S_GDATA32, S_LMANDATA, S_GMANDATA
end_comment

begin_decl_stmt
name|class
name|DataSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Hdr
block|{
name|TypeIndex
name|Type
block|;
name|ulittle32_t
name|DataOffset
block|;
name|ulittle16_t
name|Segment
block|;
comment|// Name: The null-terminated name follows.
block|}
block|;
name|DataSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|,
argument|const Hdr *H
argument_list|,
argument|StringRef Name
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|DataSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
name|RecordOffset
argument_list|)
block|,
name|Header
argument_list|(
operator|*
name|H
argument_list|)
block|,
name|Name
argument_list|(
argument|Name
argument_list|)
block|{}
specifier|static
name|ErrorOr
operator|<
name|DataSym
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
specifier|const
name|Hdr
operator|*
name|H
operator|=
name|nullptr
block|;
name|StringRef
name|Name
block|;
name|CV_DESERIALIZE
argument_list|(
name|Data
argument_list|,
name|H
argument_list|,
name|Name
argument_list|)
block|;
return|return
name|DataSym
argument_list|(
name|RecordOffset
argument_list|,
name|H
argument_list|,
name|Name
argument_list|)
return|;
block|}
name|uint32_t
name|getRelocationOffset
argument_list|()
specifier|const
block|{
return|return
name|RecordOffset
operator|+
name|offsetof
argument_list|(
name|Hdr
argument_list|,
name|DataOffset
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|;
name|Hdr
name|Header
block|;
name|StringRef
name|Name
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// S_LTHREAD32, S_GTHREAD32
end_comment

begin_decl_stmt
name|class
name|ThreadLocalDataSym
range|:
name|public
name|SymbolRecord
block|{
name|public
operator|:
expr|struct
name|Hdr
block|{
name|TypeIndex
name|Type
block|;
name|ulittle32_t
name|DataOffset
block|;
name|ulittle16_t
name|Segment
block|;
comment|// Name: The null-terminated name follows.
block|}
block|;
name|ThreadLocalDataSym
argument_list|(
argument|uint32_t RecordOffset
argument_list|,
argument|const Hdr *H
argument_list|,
argument|StringRef Name
argument_list|)
operator|:
name|SymbolRecord
argument_list|(
name|SymbolRecordKind
operator|::
name|ThreadLocalDataSym
argument_list|)
block|,
name|RecordOffset
argument_list|(
name|RecordOffset
argument_list|)
block|,
name|Header
argument_list|(
operator|*
name|H
argument_list|)
block|,
name|Name
argument_list|(
argument|Name
argument_list|)
block|{}
specifier|static
name|ErrorOr
operator|<
name|ThreadLocalDataSym
operator|>
name|deserialize
argument_list|(
argument|SymbolRecordKind Kind
argument_list|,
argument|uint32_t RecordOffset
argument_list|,
argument|ArrayRef<uint8_t>&Data
argument_list|)
block|{
specifier|const
name|Hdr
operator|*
name|H
operator|=
name|nullptr
block|;
name|StringRef
name|Name
block|;
name|CV_DESERIALIZE
argument_list|(
name|Data
argument_list|,
name|H
argument_list|,
name|Name
argument_list|)
block|;
return|return
name|ThreadLocalDataSym
argument_list|(
name|RecordOffset
argument_list|,
name|H
argument_list|,
name|Name
argument_list|)
return|;
block|}
name|uint32_t
name|getRelocationOffset
argument_list|()
specifier|const
block|{
return|return
name|RecordOffset
operator|+
name|offsetof
argument_list|(
name|Hdr
argument_list|,
name|DataOffset
argument_list|)
return|;
block|}
name|uint32_t
name|RecordOffset
block|;
name|Hdr
name|Header
block|;
name|StringRef
name|Name
block|; }
decl_stmt|;
end_decl_stmt

begin_typedef
typedef|typedef
name|CVRecord
operator|<
name|SymbolKind
operator|>
name|CVSymbol
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|VarStreamArray
operator|<
name|CVSymbol
operator|>
name|CVSymbolArray
expr_stmt|;
end_typedef

begin_comment
unit|}
comment|// namespace codeview
end_comment

begin_comment
unit|}
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

