begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- GUID.h ---------------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_CODEVIEW_GUID_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_CODEVIEW_GUID_H
end_define

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_include
include|#
directive|include
file|<cstring>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|raw_ostream
decl_stmt|;
name|namespace
name|codeview
block|{
comment|/// This represents the 'GUID' type from windows.h.
struct|struct
name|GUID
block|{
name|uint8_t
name|Guid
index|[
literal|16
index|]
decl_stmt|;
block|}
struct|;
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|GUID
operator|&
name|LHS
operator|,
specifier|const
name|GUID
operator|&
name|RHS
operator|)
block|{
return|return
literal|0
operator|==
operator|::
name|memcmp
argument_list|(
name|LHS
operator|.
name|Guid
argument_list|,
name|RHS
operator|.
name|Guid
argument_list|,
sizeof|sizeof
argument_list|(
name|LHS
operator|.
name|Guid
argument_list|)
argument_list|)
return|;
block|}
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|GUID
operator|&
name|LHS
operator|,
specifier|const
name|GUID
operator|&
name|RHS
operator|)
block|{
return|return
operator|::
name|memcmp
argument_list|(
name|LHS
operator|.
name|Guid
argument_list|,
name|RHS
operator|.
name|Guid
argument_list|,
sizeof|sizeof
argument_list|(
name|LHS
operator|.
name|Guid
argument_list|)
argument_list|)
operator|<
literal|0
return|;
block|}
specifier|inline
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|GUID
operator|&
name|LHS
operator|,
specifier|const
name|GUID
operator|&
name|RHS
operator|)
block|{
return|return
operator|::
name|memcmp
argument_list|(
name|LHS
operator|.
name|Guid
argument_list|,
name|RHS
operator|.
name|Guid
argument_list|,
sizeof|sizeof
argument_list|(
name|LHS
operator|.
name|Guid
argument_list|)
argument_list|)
operator|<=
literal|0
return|;
block|}
specifier|inline
name|bool
name|operator
operator|>
operator|(
specifier|const
name|GUID
operator|&
name|LHS
operator|,
specifier|const
name|GUID
operator|&
name|RHS
operator|)
block|{
return|return
operator|!
operator|(
name|LHS
operator|<=
name|RHS
operator|)
return|;
block|}
specifier|inline
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|GUID
operator|&
name|LHS
operator|,
specifier|const
name|GUID
operator|&
name|RHS
operator|)
block|{
return|return
operator|!
operator|(
name|LHS
operator|<
name|RHS
operator|)
return|;
block|}
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|GUID
operator|&
name|LHS
operator|,
specifier|const
name|GUID
operator|&
name|RHS
operator|)
block|{
return|return
operator|!
operator|(
name|LHS
operator|==
name|RHS
operator|)
return|;
block|}
name|raw_ostream
operator|&
name|operator
operator|<<
operator|(
name|raw_ostream
operator|&
name|OS
operator|,
specifier|const
name|GUID
operator|&
name|Guid
operator|)
expr_stmt|;
block|}
comment|// namespace codeview
block|}
end_decl_stmt

begin_comment
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

