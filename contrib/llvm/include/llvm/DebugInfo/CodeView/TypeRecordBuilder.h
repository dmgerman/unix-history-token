begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- TypeRecordBuilder.h --------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_CODEVIEW_TYPERECORDBUILDER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_CODEVIEW_TYPERECORDBUILDER_H
end_define

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/CodeView.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/TypeIndex.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/EndianStream.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/raw_ostream.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|codeview
block|{
name|class
name|TypeRecordBuilder
block|{
name|private
label|:
name|TypeRecordBuilder
argument_list|(
specifier|const
name|TypeRecordBuilder
operator|&
argument_list|)
operator|=
name|delete
expr_stmt|;
name|TypeRecordBuilder
modifier|&
name|operator
init|=
operator|(
specifier|const
name|TypeRecordBuilder
operator|&
operator|)
operator|=
name|delete
decl_stmt|;
name|public
label|:
name|explicit
name|TypeRecordBuilder
parameter_list|(
name|TypeRecordKind
name|Kind
parameter_list|)
function_decl|;
name|void
name|writeUInt8
parameter_list|(
name|uint8_t
name|Value
parameter_list|)
function_decl|;
name|void
name|writeInt16
parameter_list|(
name|int16_t
name|Value
parameter_list|)
function_decl|;
name|void
name|writeUInt16
parameter_list|(
name|uint16_t
name|Value
parameter_list|)
function_decl|;
name|void
name|writeInt32
parameter_list|(
name|int32_t
name|Value
parameter_list|)
function_decl|;
name|void
name|writeUInt32
parameter_list|(
name|uint32_t
name|Value
parameter_list|)
function_decl|;
name|void
name|writeInt64
parameter_list|(
name|int64_t
name|Value
parameter_list|)
function_decl|;
name|void
name|writeUInt64
parameter_list|(
name|uint64_t
name|Value
parameter_list|)
function_decl|;
name|void
name|writeTypeIndex
parameter_list|(
name|TypeIndex
name|TypeInd
parameter_list|)
function_decl|;
name|void
name|writeTypeRecordKind
parameter_list|(
name|TypeRecordKind
name|Kind
parameter_list|)
function_decl|;
name|void
name|writeEncodedInteger
parameter_list|(
name|int64_t
name|Value
parameter_list|)
function_decl|;
name|void
name|writeEncodedSignedInteger
parameter_list|(
name|int64_t
name|Value
parameter_list|)
function_decl|;
name|void
name|writeEncodedUnsignedInteger
parameter_list|(
name|uint64_t
name|Value
parameter_list|)
function_decl|;
name|void
name|writeNullTerminatedString
parameter_list|(
specifier|const
name|char
modifier|*
name|Value
parameter_list|)
function_decl|;
name|void
name|writeNullTerminatedString
parameter_list|(
name|StringRef
name|Value
parameter_list|)
function_decl|;
name|llvm
operator|::
name|StringRef
name|str
argument_list|()
expr_stmt|;
name|uint64_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|Stream
operator|.
name|tell
argument_list|()
return|;
block|}
name|private
label|:
name|llvm
operator|::
name|SmallVector
operator|<
name|char
operator|,
literal|256
operator|>
name|Buffer
expr_stmt|;
name|llvm
operator|::
name|raw_svector_ostream
name|Stream
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|endian
operator|::
name|Writer
operator|<
name|llvm
operator|::
name|support
operator|::
name|endianness
operator|::
name|little
operator|>
name|Writer
expr_stmt|;
block|}
empty_stmt|;
block|}
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

