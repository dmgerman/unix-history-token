begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- DebugSubsectionVisitor.h -----------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_CODEVIEW_MODULEDEBUGFRAGMENTVISITOR_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_CODEVIEW_MODULEDEBUGFRAGMENTVISITOR_H
end_define

begin_include
include|#
directive|include
file|"llvm/Support/Error.h"
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|codeview
block|{
name|class
name|DebugChecksumsSubsectionRef
decl_stmt|;
name|class
name|DebugSubsectionRecord
decl_stmt|;
name|class
name|DebugInlineeLinesSubsectionRef
decl_stmt|;
name|class
name|DebugLinesSubsectionRef
decl_stmt|;
name|class
name|DebugUnknownSubsectionRef
decl_stmt|;
name|class
name|DebugSubsectionVisitor
block|{
name|public
label|:
name|virtual
operator|~
name|DebugSubsectionVisitor
argument_list|()
operator|=
expr|default
expr_stmt|;
name|virtual
name|Error
name|visitUnknown
parameter_list|(
name|DebugUnknownSubsectionRef
modifier|&
name|Unknown
parameter_list|)
block|{
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
name|virtual
name|Error
name|visitLines
parameter_list|(
name|DebugLinesSubsectionRef
modifier|&
name|Lines
parameter_list|)
block|{
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
name|virtual
name|Error
name|visitFileChecksums
parameter_list|(
name|DebugChecksumsSubsectionRef
modifier|&
name|Checksums
parameter_list|)
block|{
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
name|virtual
name|Error
name|visitInlineeLines
parameter_list|(
name|DebugInlineeLinesSubsectionRef
modifier|&
name|Inlinees
parameter_list|)
block|{
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
name|virtual
name|Error
name|finished
parameter_list|()
block|{
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
block|}
empty_stmt|;
name|Error
name|visitDebugSubsection
parameter_list|(
specifier|const
name|DebugSubsectionRecord
modifier|&
name|R
parameter_list|,
name|DebugSubsectionVisitor
modifier|&
name|V
parameter_list|)
function_decl|;
name|template
operator|<
name|typename
name|T
operator|>
name|Error
name|visitDebugSubsections
argument_list|(
argument|T&&FragmentRange
argument_list|,
argument|DebugSubsectionVisitor&V
argument_list|)
block|{
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|L
range|:
name|FragmentRange
control|)
block|{
if|if
condition|(
name|auto
name|EC
init|=
name|visitDebugSubsection
argument_list|(
name|L
argument_list|,
name|V
argument_list|)
condition|)
return|return
name|EC
return|;
block|}
if|if
condition|(
name|auto
name|EC
init|=
name|V
operator|.
name|finished
argument_list|()
condition|)
return|return
name|EC
return|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
block|}
end_decl_stmt

begin_comment
comment|// end namespace codeview
end_comment

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_DEBUGINFO_CODEVIEW_MODULEDEBUGFRAGMENTVISITOR_H
end_comment

end_unit

