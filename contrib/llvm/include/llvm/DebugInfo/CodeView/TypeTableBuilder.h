begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- TypeTableBuilder.h ---------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_CODEVIEW_TYPETABLEBUILDER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_CODEVIEW_TYPETABLEBUILDER_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/CodeView.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/TypeIndex.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/TypeSerializer.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/TypeRecord.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Allocator.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Error.h"
end_include

begin_include
include|#
directive|include
file|<algorithm>
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_include
include|#
directive|include
file|<type_traits>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|codeview
block|{
name|class
name|TypeTableBuilder
block|{
name|private
label|:
name|TypeIndex
name|handleError
argument_list|(
name|Error
name|EC
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|false
operator|&&
literal|"Couldn't write Type!"
argument_list|)
expr_stmt|;
name|consumeError
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|EC
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|TypeIndex
argument_list|()
return|;
block|}
name|BumpPtrAllocator
modifier|&
name|Allocator
decl_stmt|;
name|TypeSerializer
name|Serializer
decl_stmt|;
name|public
label|:
name|explicit
name|TypeTableBuilder
argument_list|(
name|BumpPtrAllocator
operator|&
name|Allocator
argument_list|)
operator|:
name|Allocator
argument_list|(
name|Allocator
argument_list|)
operator|,
name|Serializer
argument_list|(
argument|Allocator
argument_list|)
block|{}
name|TypeTableBuilder
argument_list|(
specifier|const
name|TypeTableBuilder
operator|&
argument_list|)
operator|=
name|delete
expr_stmt|;
name|TypeTableBuilder
modifier|&
name|operator
init|=
operator|(
specifier|const
name|TypeTableBuilder
operator|&
operator|)
operator|=
name|delete
decl_stmt|;
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|Serializer
operator|.
name|records
argument_list|()
operator|.
name|empty
argument_list|()
return|;
block|}
name|BumpPtrAllocator
operator|&
name|getAllocator
argument_list|()
specifier|const
block|{
return|return
name|Allocator
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|TypeIndex
name|writeKnownType
argument_list|(
argument|T&Record
argument_list|)
block|{
name|static_assert
argument_list|(
operator|!
name|std
operator|::
name|is_same
operator|<
name|T
argument_list|,
name|FieldListRecord
operator|>
operator|::
name|value
argument_list|,
literal|"Can't serialize FieldList!"
argument_list|)
block|;
name|CVType
name|Type
block|;
name|Type
operator|.
name|Type
operator|=
name|static_cast
operator|<
name|TypeLeafKind
operator|>
operator|(
name|Record
operator|.
name|getKind
argument_list|()
operator|)
block|;
if|if
condition|(
name|auto
name|EC
init|=
name|Serializer
operator|.
name|visitTypeBegin
argument_list|(
name|Type
argument_list|)
condition|)
return|return
name|handleError
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|EC
argument_list|)
argument_list|)
return|;
if|if
condition|(
name|auto
name|EC
init|=
name|Serializer
operator|.
name|visitKnownRecord
argument_list|(
name|Type
argument_list|,
name|Record
argument_list|)
condition|)
return|return
name|handleError
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|EC
argument_list|)
argument_list|)
return|;
name|auto
name|ExpectedIndex
init|=
name|Serializer
operator|.
name|visitTypeEndGetIndex
argument_list|(
name|Type
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ExpectedIndex
condition|)
return|return
name|handleError
argument_list|(
name|ExpectedIndex
operator|.
name|takeError
argument_list|()
argument_list|)
return|;
return|return
operator|*
name|ExpectedIndex
return|;
block|}
name|TypeIndex
name|writeSerializedRecord
argument_list|(
name|MutableArrayRef
operator|<
name|uint8_t
operator|>
name|Record
argument_list|)
block|{
return|return
name|Serializer
operator|.
name|insertRecordBytes
argument_list|(
name|Record
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|TFunc
operator|>
name|void
name|ForEachRecord
argument_list|(
argument|TFunc Func
argument_list|)
block|{
name|uint32_t
name|Index
operator|=
name|TypeIndex
operator|::
name|FirstNonSimpleIndex
block|;
for|for
control|(
name|auto
name|Record
range|:
name|Serializer
operator|.
name|records
argument_list|()
control|)
block|{
name|Func
argument_list|(
name|TypeIndex
argument_list|(
name|Index
argument_list|)
argument_list|,
name|Record
argument_list|)
expr_stmt|;
operator|++
name|Index
expr_stmt|;
block|}
block|}
name|ArrayRef
operator|<
name|MutableArrayRef
operator|<
name|uint8_t
operator|>>
name|records
argument_list|()
specifier|const
block|{
return|return
name|Serializer
operator|.
name|records
argument_list|()
return|;
block|}
block|}
empty_stmt|;
name|class
name|FieldListRecordBuilder
block|{
name|TypeTableBuilder
modifier|&
name|TypeTable
decl_stmt|;
name|TypeSerializer
name|TempSerializer
decl_stmt|;
name|CVType
name|Type
decl_stmt|;
name|public
label|:
name|explicit
name|FieldListRecordBuilder
argument_list|(
name|TypeTableBuilder
operator|&
name|TypeTable
argument_list|)
operator|:
name|TypeTable
argument_list|(
name|TypeTable
argument_list|)
operator|,
name|TempSerializer
argument_list|(
argument|TypeTable.getAllocator()
argument_list|)
block|{
name|Type
operator|.
name|Type
operator|=
name|TypeLeafKind
operator|::
name|LF_FIELDLIST
block|;   }
name|void
name|begin
argument_list|()
block|{
if|if
condition|(
name|auto
name|EC
init|=
name|TempSerializer
operator|.
name|visitTypeBegin
argument_list|(
name|Type
argument_list|)
condition|)
name|consumeError
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|EC
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|void
name|writeMemberType
argument_list|(
argument|T&Record
argument_list|)
block|{
name|CVMemberRecord
name|CVMR
block|;
name|CVMR
operator|.
name|Kind
operator|=
name|static_cast
operator|<
name|TypeLeafKind
operator|>
operator|(
name|Record
operator|.
name|getKind
argument_list|()
operator|)
block|;
if|if
condition|(
name|auto
name|EC
init|=
name|TempSerializer
operator|.
name|visitMemberBegin
argument_list|(
name|CVMR
argument_list|)
condition|)
name|consumeError
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|EC
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|auto
name|EC
init|=
name|TempSerializer
operator|.
name|visitKnownMember
argument_list|(
name|CVMR
argument_list|,
name|Record
argument_list|)
condition|)
name|consumeError
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|EC
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|auto
name|EC
init|=
name|TempSerializer
operator|.
name|visitMemberEnd
argument_list|(
name|CVMR
argument_list|)
condition|)
name|consumeError
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|EC
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TypeIndex
name|end
parameter_list|()
block|{
if|if
condition|(
name|auto
name|EC
init|=
name|TempSerializer
operator|.
name|visitTypeEnd
argument_list|(
name|Type
argument_list|)
condition|)
block|{
name|consumeError
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|EC
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|TypeIndex
argument_list|()
return|;
block|}
name|TypeIndex
name|Index
decl_stmt|;
for|for
control|(
name|auto
name|Record
range|:
name|TempSerializer
operator|.
name|records
argument_list|()
control|)
block|{
name|Index
operator|=
name|TypeTable
operator|.
name|writeSerializedRecord
argument_list|(
name|Record
argument_list|)
expr_stmt|;
block|}
return|return
name|Index
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// end namespace codeview
end_comment

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_DEBUGINFO_CODEVIEW_TYPETABLEBUILDER_H
end_comment

end_unit

