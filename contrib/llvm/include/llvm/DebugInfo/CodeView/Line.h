begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- Line.h ---------------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_CODEVIEW_LINE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_CODEVIEW_LINE_H
end_define

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/TypeIndex.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Endian.h"
end_include

begin_include
include|#
directive|include
file|<cinttypes>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|codeview
block|{
name|using
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
expr_stmt|;
name|class
name|LineInfo
block|{
name|public
label|:
enum_decl|enum :
name|uint32_t
block|{
name|AlwaysStepIntoLineNumber
init|=
literal|0xfeefee
block|,
name|NeverStepIntoLineNumber
init|=
literal|0xf00f00
block|}
enum_decl|;
enum_decl|enum :
name|int
block|{
name|EndLineDeltaShift
init|=
literal|24
block|}
enum_decl|;
enum_decl|enum :
name|uint32_t
block|{
name|StartLineMask
init|=
literal|0x00ffffff
block|,
name|EndLineDeltaMask
init|=
literal|0x7f000000
block|,
name|StatementFlag
init|=
literal|0x80000000u
block|}
enum_decl|;
name|LineInfo
argument_list|(
argument|uint32_t StartLine
argument_list|,
argument|uint32_t EndLine
argument_list|,
argument|bool IsStatement
argument_list|)
empty_stmt|;
name|LineInfo
argument_list|(
argument|uint32_t LineData
argument_list|)
block|:
name|LineData
argument_list|(
argument|LineData
argument_list|)
block|{}
name|uint32_t
name|getStartLine
argument_list|()
specifier|const
block|{
return|return
name|LineData
operator|&
name|StartLineMask
return|;
block|}
name|uint32_t
name|getLineDelta
argument_list|()
specifier|const
block|{
return|return
operator|(
name|LineData
operator|&
name|EndLineDeltaMask
operator|)
operator|>>
name|EndLineDeltaShift
return|;
block|}
name|uint32_t
name|getEndLine
argument_list|()
specifier|const
block|{
return|return
name|getStartLine
argument_list|()
operator|+
name|getLineDelta
argument_list|()
return|;
block|}
name|bool
name|isStatement
argument_list|()
specifier|const
block|{
return|return
operator|(
name|LineData
operator|&
name|StatementFlag
operator|)
operator|!=
literal|0
return|;
block|}
name|uint32_t
name|getRawData
argument_list|()
specifier|const
block|{
return|return
name|LineData
return|;
block|}
name|bool
name|isAlwaysStepInto
argument_list|()
specifier|const
block|{
return|return
name|getStartLine
argument_list|()
operator|==
name|AlwaysStepIntoLineNumber
return|;
block|}
name|bool
name|isNeverStepInto
argument_list|()
specifier|const
block|{
return|return
name|getStartLine
argument_list|()
operator|==
name|NeverStepIntoLineNumber
return|;
block|}
name|private
label|:
name|uint32_t
name|LineData
decl_stmt|;
block|}
empty_stmt|;
name|class
name|ColumnInfo
block|{
name|private
label|:
specifier|static
specifier|const
name|uint32_t
name|StartColumnMask
init|=
literal|0x0000ffffu
decl_stmt|;
specifier|static
specifier|const
name|uint32_t
name|EndColumnMask
init|=
literal|0xffff0000u
decl_stmt|;
specifier|static
specifier|const
name|int
name|EndColumnShift
init|=
literal|16
decl_stmt|;
name|public
label|:
name|ColumnInfo
argument_list|(
argument|uint16_t StartColumn
argument_list|,
argument|uint16_t EndColumn
argument_list|)
block|{
name|ColumnData
operator|=
operator|(
name|static_cast
operator|<
name|uint32_t
operator|>
operator|(
name|StartColumn
operator|)
operator|&
name|StartColumnMask
operator|)
operator||
operator|(
operator|(
name|static_cast
operator|<
name|uint32_t
operator|>
operator|(
name|EndColumn
operator|)
operator|<<
name|EndColumnShift
operator|)
operator|&
name|EndColumnMask
operator|)
expr_stmt|;
block|}
name|uint16_t
name|getStartColumn
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|uint16_t
operator|>
operator|(
name|ColumnData
operator|&
name|StartColumnMask
operator|)
return|;
block|}
name|uint16_t
name|getEndColumn
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|uint16_t
operator|>
operator|(
operator|(
name|ColumnData
operator|&
name|EndColumnMask
operator|)
operator|>>
name|EndColumnShift
operator|)
return|;
block|}
name|uint32_t
name|getRawData
argument_list|()
specifier|const
block|{
return|return
name|ColumnData
return|;
block|}
name|private
label|:
name|uint32_t
name|ColumnData
decl_stmt|;
block|}
empty_stmt|;
name|class
name|Line
block|{
name|private
label|:
name|int32_t
name|CodeOffset
decl_stmt|;
name|LineInfo
name|LineInf
decl_stmt|;
name|ColumnInfo
name|ColumnInf
decl_stmt|;
name|public
label|:
name|Line
argument_list|(
argument|int32_t CodeOffset
argument_list|,
argument|uint32_t StartLine
argument_list|,
argument|uint32_t EndLine
argument_list|,
argument|uint16_t StartColumn
argument_list|,
argument|uint16_t EndColumn
argument_list|,
argument|bool IsStatement
argument_list|)
block|:
name|CodeOffset
argument_list|(
name|CodeOffset
argument_list|)
operator|,
name|LineInf
argument_list|(
name|StartLine
argument_list|,
name|EndLine
argument_list|,
name|IsStatement
argument_list|)
operator|,
name|ColumnInf
argument_list|(
argument|StartColumn
argument_list|,
argument|EndColumn
argument_list|)
block|{}
name|Line
argument_list|(
argument|int32_t CodeOffset
argument_list|,
argument|LineInfo LineInf
argument_list|,
argument|ColumnInfo ColumnInf
argument_list|)
operator|:
name|CodeOffset
argument_list|(
name|CodeOffset
argument_list|)
operator|,
name|LineInf
argument_list|(
name|LineInf
argument_list|)
operator|,
name|ColumnInf
argument_list|(
argument|ColumnInf
argument_list|)
block|{}
name|LineInfo
name|getLineInfo
argument_list|()
specifier|const
block|{
return|return
name|LineInf
return|;
block|}
name|ColumnInfo
name|getColumnInfo
argument_list|()
specifier|const
block|{
return|return
name|ColumnInf
return|;
block|}
name|int32_t
name|getCodeOffset
argument_list|()
specifier|const
block|{
return|return
name|CodeOffset
return|;
block|}
name|uint32_t
name|getStartLine
argument_list|()
specifier|const
block|{
return|return
name|LineInf
operator|.
name|getStartLine
argument_list|()
return|;
block|}
name|uint32_t
name|getLineDelta
argument_list|()
specifier|const
block|{
return|return
name|LineInf
operator|.
name|getLineDelta
argument_list|()
return|;
block|}
name|uint32_t
name|getEndLine
argument_list|()
specifier|const
block|{
return|return
name|LineInf
operator|.
name|getEndLine
argument_list|()
return|;
block|}
name|uint16_t
name|getStartColumn
argument_list|()
specifier|const
block|{
return|return
name|ColumnInf
operator|.
name|getStartColumn
argument_list|()
return|;
block|}
name|uint16_t
name|getEndColumn
argument_list|()
specifier|const
block|{
return|return
name|ColumnInf
operator|.
name|getEndColumn
argument_list|()
return|;
block|}
name|bool
name|isStatement
argument_list|()
specifier|const
block|{
return|return
name|LineInf
operator|.
name|isStatement
argument_list|()
return|;
block|}
name|bool
name|isAlwaysStepInto
argument_list|()
specifier|const
block|{
return|return
name|LineInf
operator|.
name|isAlwaysStepInto
argument_list|()
return|;
block|}
name|bool
name|isNeverStepInto
argument_list|()
specifier|const
block|{
return|return
name|LineInf
operator|.
name|isNeverStepInto
argument_list|()
return|;
block|}
block|}
empty_stmt|;
block|}
comment|// namespace codeview
block|}
end_decl_stmt

begin_comment
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

