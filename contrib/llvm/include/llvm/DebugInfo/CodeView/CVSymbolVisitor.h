begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- CVSymbolVisitor.h ----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_CODEVIEW_CVSYMBOLVISITOR_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_CODEVIEW_CVSYMBOLVISITOR_H
end_define

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/CVRecord.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/CodeView.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/SymbolRecord.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/CodeView/SymbolVisitorDelegate.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ErrorOr.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|codeview
block|{
name|template
operator|<
name|typename
name|Derived
operator|>
name|class
name|CVSymbolVisitor
block|{
name|public
operator|:
name|CVSymbolVisitor
argument_list|(
name|SymbolVisitorDelegate
operator|*
name|Delegate
argument_list|)
operator|:
name|Delegate
argument_list|(
argument|Delegate
argument_list|)
block|{}
name|bool
name|hadError
argument_list|()
specifier|const
block|{
return|return
name|HadError
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|bool
name|consumeObject
argument_list|(
argument|ArrayRef<uint8_t>&Data
argument_list|,
argument|const T *&Res
argument_list|)
block|{
if|if
condition|(
name|Data
operator|.
name|size
argument_list|()
operator|<
sizeof|sizeof
argument_list|(
operator|*
name|Res
argument_list|)
condition|)
block|{
name|HadError
operator|=
name|true
expr_stmt|;
return|return
name|false
return|;
block|}
name|Res
operator|=
name|reinterpret_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|Data
operator|.
name|data
argument_list|()
operator|)
expr_stmt|;
name|Data
operator|=
name|Data
operator|.
name|drop_front
argument_list|(
sizeof|sizeof
argument_list|(
operator|*
name|Res
argument_list|)
argument_list|)
block|;
return|return
name|true
return|;
block|}
comment|/// Actions to take on known symbols. By default, they do nothing. Visit methods
comment|/// for member records take the FieldData by non-const reference and are
comment|/// expected to consume the trailing bytes used by the field.
comment|/// FIXME: Make the visitor interpret the trailing bytes so that clients don't
comment|/// need to.
define|#
directive|define
name|SYMBOL_RECORD
parameter_list|(
name|EnumName
parameter_list|,
name|EnumVal
parameter_list|,
name|Name
parameter_list|)
define|\
value|void visit##Name(SymbolRecordKind Kind, Name&Record) {}
define|#
directive|define
name|SYMBOL_RECORD_ALIAS
parameter_list|(
name|EnumName
parameter_list|,
name|EnumVal
parameter_list|,
name|Name
parameter_list|,
name|AliasName
parameter_list|)
include|#
directive|include
file|"CVSymbolTypes.def"
name|void
name|visitSymbolRecord
argument_list|(
specifier|const
name|CVRecord
operator|<
name|SymbolKind
operator|>
operator|&
name|Record
argument_list|)
block|{
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|Data
operator|=
name|Record
operator|.
name|Data
expr_stmt|;
name|auto
operator|*
name|DerivedThis
operator|=
name|static_cast
operator|<
name|Derived
operator|*
operator|>
operator|(
name|this
operator|)
expr_stmt|;
name|DerivedThis
operator|->
name|visitSymbolBegin
argument_list|(
name|Record
operator|.
name|Type
argument_list|,
name|Data
argument_list|)
expr_stmt|;
name|uint32_t
name|RecordOffset
init|=
name|Delegate
condition|?
name|Delegate
operator|->
name|getRecordOffset
argument_list|(
name|Data
argument_list|)
else|:
literal|0
decl_stmt|;
switch|switch
condition|(
name|Record
operator|.
name|Type
condition|)
block|{
default|default:
name|DerivedThis
operator|->
name|visitUnknownSymbol
argument_list|(
name|Record
operator|.
name|Type
argument_list|,
name|Data
argument_list|)
expr_stmt|;
break|break;
define|#
directive|define
name|SYMBOL_RECORD
parameter_list|(
name|EnumName
parameter_list|,
name|EnumVal
parameter_list|,
name|Name
parameter_list|)
define|\
value|case EnumName: {                                                             \     SymbolRecordKind RK = static_cast<SymbolRecordKind>(EnumName);             \     auto Result = Name::deserialize(RK, RecordOffset, Data);                   \     if (Result.getError())                                                     \       return parseError();                                                     \     DerivedThis->visit##Name(Record.Type, *Result);                            \     break;                                                                     \   }
define|#
directive|define
name|SYMBOL_RECORD_ALIAS
parameter_list|(
name|EnumName
parameter_list|,
name|EnumVal
parameter_list|,
name|Name
parameter_list|,
name|AliasName
parameter_list|)
define|\
value|SYMBOL_RECORD(EnumVal, EnumVal, AliasName)
include|#
directive|include
file|"CVSymbolTypes.def"
block|}
name|DerivedThis
operator|->
name|visitSymbolEnd
argument_list|(
name|Record
operator|.
name|Type
argument_list|,
name|Record
operator|.
name|Data
argument_list|)
expr_stmt|;
block|}
comment|/// Visits the symbol records in Data. Sets the error flag on parse failures.
name|void
name|visitSymbolStream
parameter_list|(
specifier|const
name|CVSymbolArray
modifier|&
name|Symbols
parameter_list|)
block|{
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|I
range|:
name|Symbols
control|)
block|{
name|visitSymbolRecord
argument_list|(
name|I
argument_list|)
expr_stmt|;
if|if
condition|(
name|hadError
argument_list|()
condition|)
break|break;
block|}
block|}
comment|/// Action to take on unknown symbols. By default, they are ignored.
name|void
name|visitUnknownSymbol
argument_list|(
name|SymbolKind
name|Kind
argument_list|,
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|Data
argument_list|)
block|{}
comment|/// Paired begin/end actions for all symbols. Receives all record data,
comment|/// including the fixed-length record prefix.
name|void
name|visitSymbolBegin
argument_list|(
name|SymbolKind
name|Leaf
argument_list|,
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|RecordData
argument_list|)
block|{}
name|void
name|visitSymbolEnd
argument_list|(
name|SymbolKind
name|Leaf
argument_list|,
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|OriginalSymData
argument_list|)
block|{}
comment|/// Helper for returning from a void function when the stream is corrupted.
name|void
name|parseError
parameter_list|()
block|{
name|HadError
operator|=
name|true
expr_stmt|;
block|}
name|private
label|:
name|SymbolVisitorDelegate
modifier|*
name|Delegate
decl_stmt|;
comment|/// Whether a symbol stream parsing error was encountered.
name|bool
name|HadError
init|=
name|false
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace codeview
end_comment

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_DEBUGINFO_CODEVIEW_CVSYMBOLVISITOR_H
end_comment

end_unit

