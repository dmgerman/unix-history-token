begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- DWARFUnit.h ----------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_DWARF_DWARFUNIT_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_DWARF_DWARFUNIT_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/iterator_range.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/Optional.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/STLExtras.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/DWARF/DWARFDebugInfoEntry.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/DWARF/DWARFDebugRangeList.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/DWARF/DWARFDie.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/DWARF/DWARFRelocMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/DWARF/DWARFSection.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/DWARF/DWARFUnitIndex.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/Binary.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/ObjectFile.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/DataExtractor.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Dwarf.h"
end_include

begin_include
include|#
directive|include
file|<algorithm>
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<cstddef>
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_include
include|#
directive|include
file|<memory>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|DWARFAbbreviationDeclarationSet
decl_stmt|;
name|class
name|DWARFContext
decl_stmt|;
name|class
name|DWARFDebugAbbrev
decl_stmt|;
name|class
name|DWARFUnit
decl_stmt|;
comment|/// Base class for all DWARFUnitSection classes. This provides the
comment|/// functionality common to all unit types.
name|class
name|DWARFUnitSectionBase
block|{
name|public
label|:
comment|/// Returns the Unit that contains the given section offset in the
comment|/// same section this Unit originated from.
name|virtual
name|DWARFUnit
modifier|*
name|getUnitForOffset
argument_list|(
name|uint32_t
name|Offset
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|void
name|parse
parameter_list|(
name|DWARFContext
modifier|&
name|C
parameter_list|,
specifier|const
name|DWARFSection
modifier|&
name|Section
parameter_list|)
function_decl|;
name|void
name|parseDWO
parameter_list|(
name|DWARFContext
modifier|&
name|C
parameter_list|,
specifier|const
name|DWARFSection
modifier|&
name|DWOSection
parameter_list|,
name|DWARFUnitIndex
modifier|*
name|Index
init|=
name|nullptr
parameter_list|)
function_decl|;
name|protected
label|:
operator|~
name|DWARFUnitSectionBase
argument_list|()
operator|=
expr|default
expr_stmt|;
name|virtual
name|void
name|parseImpl
parameter_list|(
name|DWARFContext
modifier|&
name|Context
parameter_list|,
specifier|const
name|DWARFSection
modifier|&
name|Section
parameter_list|,
specifier|const
name|DWARFDebugAbbrev
modifier|*
name|DA
parameter_list|,
specifier|const
name|DWARFSection
modifier|*
name|RS
parameter_list|,
name|StringRef
name|SS
parameter_list|,
name|StringRef
name|SOS
parameter_list|,
name|StringRef
name|AOS
parameter_list|,
name|StringRef
name|LS
parameter_list|,
name|bool
name|isLittleEndian
parameter_list|,
name|bool
name|isDWO
parameter_list|)
init|=
literal|0
function_decl|;
block|}
empty_stmt|;
specifier|const
name|DWARFUnitIndex
modifier|&
name|getDWARFUnitIndex
parameter_list|(
name|DWARFContext
modifier|&
name|Context
parameter_list|,
name|DWARFSectionKind
name|Kind
parameter_list|)
function_decl|;
comment|/// Concrete instance of DWARFUnitSection, specialized for one Unit type.
name|template
operator|<
name|typename
name|UnitType
operator|>
name|class
name|DWARFUnitSection
name|final
operator|:
name|public
name|SmallVector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|UnitType
operator|>
operator|,
literal|1
operator|>
operator|,
name|public
name|DWARFUnitSectionBase
block|{
name|bool
name|Parsed
operator|=
name|false
block|;
name|public
operator|:
typedef|typedef
name|SmallVectorImpl
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|UnitType
operator|>>
name|UnitVector
expr_stmt|;
typedef|typedef
name|typename
name|UnitVector
operator|::
name|iterator
name|iterator
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|iterator_range
operator|<
name|typename
name|UnitVector
operator|::
name|iterator
operator|>
name|iterator_range
expr_stmt|;
name|UnitType
modifier|*
name|getUnitForOffset
argument_list|(
name|uint32_t
name|Offset
argument_list|)
decl|const
name|override
block|{
name|auto
operator|*
name|CU
operator|=
name|std
operator|::
name|upper_bound
argument_list|(
name|this
operator|->
name|begin
argument_list|()
argument_list|,
name|this
operator|->
name|end
argument_list|()
argument_list|,
name|Offset
argument_list|,
index|[]
operator|(
name|uint32_t
name|LHS
operator|,
specifier|const
name|std
operator|::
name|unique_ptr
operator|<
name|UnitType
operator|>
operator|&
name|RHS
operator|)
block|{
return|return
name|LHS
operator|<
name|RHS
operator|->
name|getNextUnitOffset
argument_list|()
return|;
block|}
block|)
decl_stmt|;
if|if
condition|(
name|CU
operator|!=
name|this
operator|->
name|end
argument_list|()
condition|)
return|return
name|CU
operator|->
name|get
argument_list|()
return|;
return|return
name|nullptr
return|;
block|}
end_decl_stmt

begin_label
name|private
label|:
end_label

begin_function
name|void
name|parseImpl
parameter_list|(
name|DWARFContext
modifier|&
name|Context
parameter_list|,
specifier|const
name|DWARFSection
modifier|&
name|Section
parameter_list|,
specifier|const
name|DWARFDebugAbbrev
modifier|*
name|DA
parameter_list|,
specifier|const
name|DWARFSection
modifier|*
name|RS
parameter_list|,
name|StringRef
name|SS
parameter_list|,
name|StringRef
name|SOS
parameter_list|,
name|StringRef
name|AOS
parameter_list|,
name|StringRef
name|LS
parameter_list|,
name|bool
name|LE
parameter_list|,
name|bool
name|IsDWO
parameter_list|)
function|override
block|{
if|if
condition|(
name|Parsed
condition|)
return|return;
specifier|const
specifier|auto
modifier|&
name|Index
init|=
name|getDWARFUnitIndex
argument_list|(
name|Context
argument_list|,
name|UnitType
operator|::
name|Section
argument_list|)
decl_stmt|;
name|DataExtractor
name|Data
argument_list|(
name|Section
operator|.
name|Data
argument_list|,
name|LE
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|uint32_t
name|Offset
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|Data
operator|.
name|isValidOffset
argument_list|(
name|Offset
argument_list|)
condition|)
block|{
name|auto
name|U
init|=
name|llvm
operator|::
name|make_unique
operator|<
name|UnitType
operator|>
operator|(
name|Context
expr|,
name|Section
expr|,
name|DA
expr|,
name|RS
expr|,
name|SS
expr|,
name|SOS
expr|,
name|AOS
expr|,
name|LS
expr|,
name|LE
expr|,
name|IsDWO
expr|,
operator|*
name|this
expr|,
name|Index
operator|.
name|getFromOffset
argument_list|(
name|Offset
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|U
operator|->
name|extract
argument_list|(
name|Data
argument_list|,
operator|&
name|Offset
argument_list|)
condition|)
break|break;
name|this
operator|->
name|push_back
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|U
argument_list|)
argument_list|)
expr_stmt|;
name|Offset
operator|=
name|this
operator|->
name|back
argument_list|()
operator|->
name|getNextUnitOffset
argument_list|()
expr_stmt|;
block|}
name|Parsed
operator|=
name|true
expr_stmt|;
block|}
end_function

begin_decl_stmt
unit|};
name|class
name|DWARFUnit
block|{
name|DWARFContext
modifier|&
name|Context
decl_stmt|;
comment|// Section containing this DWARFUnit.
specifier|const
name|DWARFSection
modifier|&
name|InfoSection
decl_stmt|;
specifier|const
name|DWARFDebugAbbrev
modifier|*
name|Abbrev
decl_stmt|;
specifier|const
name|DWARFSection
modifier|*
name|RangeSection
decl_stmt|;
name|uint32_t
name|RangeSectionBase
decl_stmt|;
name|StringRef
name|LineSection
decl_stmt|;
name|StringRef
name|StringSection
decl_stmt|;
name|StringRef
name|StringOffsetSection
decl_stmt|;
name|StringRef
name|AddrOffsetSection
decl_stmt|;
name|uint32_t
name|AddrOffsetSectionBase
decl_stmt|;
name|bool
name|isLittleEndian
decl_stmt|;
name|bool
name|isDWO
decl_stmt|;
specifier|const
name|DWARFUnitSectionBase
modifier|&
name|UnitSection
decl_stmt|;
name|uint32_t
name|Offset
decl_stmt|;
name|uint32_t
name|Length
decl_stmt|;
specifier|const
name|DWARFAbbreviationDeclarationSet
modifier|*
name|Abbrevs
decl_stmt|;
name|uint16_t
name|Version
decl_stmt|;
name|uint8_t
name|UnitType
decl_stmt|;
name|uint8_t
name|AddrSize
decl_stmt|;
name|uint64_t
name|BaseAddr
decl_stmt|;
comment|// The compile unit debug information entry items.
name|std
operator|::
name|vector
operator|<
name|DWARFDebugInfoEntry
operator|>
name|DieArray
expr_stmt|;
comment|// Map from range's start address to end address and corresponding DIE.
comment|// IntervalMap does not support range removal, as a result, we use the
comment|// std::map::upper_bound for address range lookup.
name|std
operator|::
name|map
operator|<
name|uint64_t
operator|,
name|std
operator|::
name|pair
operator|<
name|uint64_t
operator|,
name|DWARFDie
operator|>>
name|AddrDieMap
expr_stmt|;
typedef|typedef
name|iterator_range
operator|<
name|std
operator|::
name|vector
operator|<
name|DWARFDebugInfoEntry
operator|>
operator|::
name|iterator
operator|>
name|die_iterator_range
expr_stmt|;
name|class
name|DWOHolder
block|{
name|object
operator|::
name|OwningBinary
operator|<
name|object
operator|::
name|ObjectFile
operator|>
name|DWOFile
expr_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|DWARFContext
operator|>
name|DWOContext
expr_stmt|;
name|DWARFUnit
modifier|*
name|DWOU
init|=
name|nullptr
decl_stmt|;
name|public
label|:
name|DWOHolder
argument_list|(
argument|StringRef DWOPath
argument_list|)
empty_stmt|;
name|DWARFUnit
operator|*
name|getUnit
argument_list|()
specifier|const
block|{
return|return
name|DWOU
return|;
block|}
block|}
empty_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|DWOHolder
operator|>
name|DWO
expr_stmt|;
specifier|const
name|DWARFUnitIndex
operator|::
name|Entry
operator|*
name|IndexEntry
expr_stmt|;
name|uint32_t
name|getDIEIndex
parameter_list|(
specifier|const
name|DWARFDebugInfoEntry
modifier|*
name|Die
parameter_list|)
block|{
name|auto
name|First
init|=
name|DieArray
operator|.
name|data
argument_list|()
decl_stmt|;
name|assert
argument_list|(
name|Die
operator|>=
name|First
operator|&&
name|Die
operator|<
name|First
operator|+
name|DieArray
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Die
operator|-
name|First
return|;
block|}
name|protected
label|:
name|virtual
name|bool
name|extractImpl
parameter_list|(
name|DataExtractor
name|debug_info
parameter_list|,
name|uint32_t
modifier|*
name|offset_ptr
parameter_list|)
function_decl|;
comment|/// Size in bytes of the unit header.
name|virtual
name|uint32_t
name|getHeaderSize
argument_list|()
specifier|const
block|{
return|return
name|Version
operator|<=
literal|4
operator|?
literal|11
operator|:
literal|12
return|;
block|}
name|public
label|:
name|DWARFUnit
argument_list|(
argument|DWARFContext&Context
argument_list|,
argument|const DWARFSection&Section
argument_list|,
argument|const DWARFDebugAbbrev *DA
argument_list|,
argument|const DWARFSection *RS
argument_list|,
argument|StringRef SS
argument_list|,
argument|StringRef SOS
argument_list|,
argument|StringRef AOS
argument_list|,
argument|StringRef LS
argument_list|,
argument|bool LE
argument_list|,
argument|bool IsDWO
argument_list|,
argument|const DWARFUnitSectionBase&UnitSection
argument_list|,
argument|const DWARFUnitIndex::Entry *IndexEntry = nullptr
argument_list|)
empty_stmt|;
name|virtual
operator|~
name|DWARFUnit
argument_list|()
expr_stmt|;
name|DWARFContext
operator|&
name|getContext
argument_list|()
specifier|const
block|{
return|return
name|Context
return|;
block|}
name|StringRef
name|getLineSection
argument_list|()
specifier|const
block|{
return|return
name|LineSection
return|;
block|}
name|StringRef
name|getStringSection
argument_list|()
specifier|const
block|{
return|return
name|StringSection
return|;
block|}
name|StringRef
name|getStringOffsetSection
argument_list|()
specifier|const
block|{
return|return
name|StringOffsetSection
return|;
block|}
name|void
name|setAddrOffsetSection
parameter_list|(
name|StringRef
name|AOS
parameter_list|,
name|uint32_t
name|Base
parameter_list|)
block|{
name|AddrOffsetSection
operator|=
name|AOS
expr_stmt|;
name|AddrOffsetSectionBase
operator|=
name|Base
expr_stmt|;
block|}
comment|// Recursively update address to Die map.
name|void
name|updateAddressDieMap
parameter_list|(
name|DWARFDie
name|Die
parameter_list|)
function_decl|;
name|void
name|setRangesSection
parameter_list|(
specifier|const
name|DWARFSection
modifier|*
name|RS
parameter_list|,
name|uint32_t
name|Base
parameter_list|)
block|{
name|RangeSection
operator|=
name|RS
expr_stmt|;
name|RangeSectionBase
operator|=
name|Base
expr_stmt|;
block|}
name|bool
name|getAddrOffsetSectionItem
argument_list|(
name|uint32_t
name|Index
argument_list|,
name|uint64_t
operator|&
name|Result
argument_list|)
decl|const
decl_stmt|;
comment|// FIXME: Result should be uint64_t in DWARF64.
name|bool
name|getStringOffsetSectionItem
argument_list|(
name|uint32_t
name|Index
argument_list|,
name|uint32_t
operator|&
name|Result
argument_list|)
decl|const
decl_stmt|;
name|DataExtractor
name|getDebugInfoExtractor
argument_list|()
specifier|const
block|{
return|return
name|DataExtractor
argument_list|(
name|InfoSection
operator|.
name|Data
argument_list|,
name|isLittleEndian
argument_list|,
name|AddrSize
argument_list|)
return|;
block|}
name|DataExtractor
name|getStringExtractor
argument_list|()
specifier|const
block|{
return|return
name|DataExtractor
argument_list|(
name|StringSection
argument_list|,
name|false
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|const
name|RelocAddrMap
operator|*
name|getRelocMap
argument_list|()
specifier|const
block|{
return|return
operator|&
name|InfoSection
operator|.
name|Relocs
return|;
block|}
name|bool
name|extract
parameter_list|(
name|DataExtractor
name|debug_info
parameter_list|,
name|uint32_t
modifier|*
name|offset_ptr
parameter_list|)
function_decl|;
comment|/// extractRangeList - extracts the range list referenced by this compile
comment|/// unit from .debug_ranges section. Returns true on success.
comment|/// Requires that compile unit is already extracted.
name|bool
name|extractRangeList
argument_list|(
name|uint32_t
name|RangeListOffset
argument_list|,
name|DWARFDebugRangeList
operator|&
name|RangeList
argument_list|)
decl|const
decl_stmt|;
name|void
name|clear
parameter_list|()
function_decl|;
name|uint32_t
name|getOffset
argument_list|()
specifier|const
block|{
return|return
name|Offset
return|;
block|}
name|uint32_t
name|getNextUnitOffset
argument_list|()
specifier|const
block|{
return|return
name|Offset
operator|+
name|Length
operator|+
literal|4
return|;
block|}
name|uint32_t
name|getLength
argument_list|()
specifier|const
block|{
return|return
name|Length
return|;
block|}
name|uint16_t
name|getVersion
argument_list|()
specifier|const
block|{
return|return
name|Version
return|;
block|}
name|dwarf
operator|::
name|DwarfFormat
name|getFormat
argument_list|()
specifier|const
block|{
return|return
name|dwarf
operator|::
name|DwarfFormat
operator|::
name|DWARF32
return|;
comment|// FIXME: Support DWARF64.
block|}
specifier|const
name|DWARFAbbreviationDeclarationSet
operator|*
name|getAbbreviations
argument_list|()
specifier|const
block|{
return|return
name|Abbrevs
return|;
block|}
name|uint8_t
name|getUnitType
argument_list|()
specifier|const
block|{
return|return
name|UnitType
return|;
block|}
name|uint8_t
name|getAddressByteSize
argument_list|()
specifier|const
block|{
return|return
name|AddrSize
return|;
block|}
name|uint8_t
name|getRefAddrByteSize
argument_list|()
specifier|const
block|{
if|if
condition|(
name|Version
operator|==
literal|2
condition|)
return|return
name|AddrSize
return|;
return|return
name|getDwarfOffsetByteSize
argument_list|()
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|uint8_t
name|getDwarfOffsetByteSize
argument_list|()
specifier|const
block|{
if|if
condition|(
name|getFormat
argument_list|()
operator|==
name|dwarf
operator|::
name|DwarfFormat
operator|::
name|DWARF64
condition|)
return|return
literal|8
return|;
end_expr_stmt

begin_return
return|return
literal|4
return|;
end_return

begin_macro
unit|}    uint64_t
name|getBaseAddress
argument_list|()
end_macro

begin_expr_stmt
specifier|const
block|{
return|return
name|BaseAddr
return|;
block|}
end_expr_stmt

begin_function
name|void
name|setBaseAddress
parameter_list|(
name|uint64_t
name|base_addr
parameter_list|)
block|{
name|BaseAddr
operator|=
name|base_addr
expr_stmt|;
block|}
end_function

begin_function
name|DWARFDie
name|getUnitDIE
parameter_list|(
name|bool
name|ExtractUnitDIEOnly
init|=
name|true
parameter_list|)
block|{
name|extractDIEsIfNeeded
argument_list|(
name|ExtractUnitDIEOnly
argument_list|)
expr_stmt|;
if|if
condition|(
name|DieArray
operator|.
name|empty
argument_list|()
condition|)
return|return
name|DWARFDie
argument_list|()
return|;
return|return
name|DWARFDie
argument_list|(
name|this
argument_list|,
operator|&
name|DieArray
index|[
literal|0
index|]
argument_list|)
return|;
block|}
end_function

begin_function_decl
specifier|const
name|char
modifier|*
name|getCompilationDir
parameter_list|()
function_decl|;
end_function_decl

begin_expr_stmt
name|Optional
operator|<
name|uint64_t
operator|>
name|getDWOId
argument_list|()
expr_stmt|;
end_expr_stmt

begin_function_decl
name|void
name|collectAddressRanges
parameter_list|(
name|DWARFAddressRangesVector
modifier|&
name|CURanges
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/// getInlinedChainForAddress - fetches inlined chain for a given address.
end_comment

begin_comment
comment|/// Returns empty chain if there is no subprogram containing address. The
end_comment

begin_comment
comment|/// chain is valid as long as parsed compile unit DIEs are not cleared.
end_comment

begin_decl_stmt
name|void
name|getInlinedChainForAddress
argument_list|(
name|uint64_t
name|Address
argument_list|,
name|SmallVectorImpl
operator|<
name|DWARFDie
operator|>
operator|&
name|InlinedChain
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/// getUnitSection - Return the DWARFUnitSection containing this unit.
end_comment

begin_expr_stmt
specifier|const
name|DWARFUnitSectionBase
operator|&
name|getUnitSection
argument_list|()
specifier|const
block|{
return|return
name|UnitSection
return|;
block|}
end_expr_stmt

begin_comment
comment|/// \brief Returns the number of DIEs in the unit. Parses the unit
end_comment

begin_comment
comment|/// if necessary.
end_comment

begin_function
name|unsigned
name|getNumDIEs
parameter_list|()
block|{
name|extractDIEsIfNeeded
argument_list|(
name|false
argument_list|)
expr_stmt|;
return|return
name|DieArray
operator|.
name|size
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/// \brief Return the index of a DIE inside the unit's DIE vector.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// It is illegal to call this method with a DIE that hasn't be
end_comment

begin_comment
comment|/// created by this unit. In other word, it's illegal to call this
end_comment

begin_comment
comment|/// method on a DIE that isn't accessible by following
end_comment

begin_comment
comment|/// children/sibling links starting from this unit's getUnitDIE().
end_comment

begin_function
name|uint32_t
name|getDIEIndex
parameter_list|(
specifier|const
name|DWARFDie
modifier|&
name|D
parameter_list|)
block|{
return|return
name|getDIEIndex
argument_list|(
name|D
operator|.
name|getDebugInfoEntry
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/// \brief Return the DIE object at the given index.
end_comment

begin_function
name|DWARFDie
name|getDIEAtIndex
parameter_list|(
name|unsigned
name|Index
parameter_list|)
block|{
name|assert
argument_list|(
name|Index
operator|<
name|DieArray
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|DWARFDie
argument_list|(
name|this
argument_list|,
operator|&
name|DieArray
index|[
name|Index
index|]
argument_list|)
return|;
block|}
end_function

begin_function_decl
name|DWARFDie
name|getParent
parameter_list|(
specifier|const
name|DWARFDebugInfoEntry
modifier|*
name|Die
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|DWARFDie
name|getSibling
parameter_list|(
specifier|const
name|DWARFDebugInfoEntry
modifier|*
name|Die
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/// \brief Return the DIE object for a given offset inside the
end_comment

begin_comment
comment|/// unit's DIE vector.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// The unit needs to have its DIEs extracted for this method to work.
end_comment

begin_function
name|DWARFDie
name|getDIEForOffset
parameter_list|(
name|uint32_t
name|Offset
parameter_list|)
block|{
name|extractDIEsIfNeeded
argument_list|(
name|false
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|DieArray
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|auto
name|it
init|=
name|std
operator|::
name|lower_bound
argument_list|(
name|DieArray
operator|.
name|begin
argument_list|()
argument_list|,
name|DieArray
operator|.
name|end
argument_list|()
argument_list|,
name|Offset
argument_list|,
index|[]
operator|(
specifier|const
name|DWARFDebugInfoEntry
operator|&
name|LHS
expr|,
name|uint32_t
name|Offset
operator|)
block|{
return|return
name|LHS
operator|.
name|getOffset
argument_list|()
operator|<
name|Offset
return|;
block|}
block|)
function|;
end_function

begin_if
if|if
condition|(
name|it
operator|==
name|DieArray
operator|.
name|end
argument_list|()
condition|)
return|return
name|DWARFDie
argument_list|()
return|;
end_if

begin_return
return|return
name|DWARFDie
argument_list|(
name|this
argument_list|,
operator|&
operator|*
name|it
argument_list|)
return|;
end_return

begin_macro
unit|}    uint32_t
name|getLineTableOffset
argument_list|()
end_macro

begin_expr_stmt
specifier|const
block|{
if|if
condition|(
name|IndexEntry
condition|)
if|if
condition|(
specifier|const
specifier|auto
modifier|*
name|Contrib
init|=
name|IndexEntry
operator|->
name|getOffset
argument_list|(
name|DW_SECT_LINE
argument_list|)
condition|)
return|return
name|Contrib
operator|->
name|Offset
return|;
end_expr_stmt

begin_return
return|return
literal|0
return|;
end_return

begin_macro
unit|}    die_iterator_range
name|dies
argument_list|()
end_macro

begin_block
block|{
name|extractDIEsIfNeeded
argument_list|(
name|false
argument_list|)
expr_stmt|;
return|return
name|die_iterator_range
argument_list|(
name|DieArray
operator|.
name|begin
argument_list|()
argument_list|,
name|DieArray
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
end_block

begin_label
name|private
label|:
end_label

begin_comment
comment|/// Size in bytes of the .debug_info data associated with this compile unit.
end_comment

begin_expr_stmt
name|size_t
name|getDebugInfoSize
argument_list|()
specifier|const
block|{
return|return
name|Length
operator|+
literal|4
operator|-
name|getHeaderSize
argument_list|()
return|;
block|}
end_expr_stmt

begin_comment
comment|/// extractDIEsIfNeeded - Parses a compile unit and indexes its DIEs if it
end_comment

begin_comment
comment|/// hasn't already been done. Returns the number of DIEs parsed at this call.
end_comment

begin_function_decl
name|size_t
name|extractDIEsIfNeeded
parameter_list|(
name|bool
name|CUDieOnly
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/// extractDIEsToVector - Appends all parsed DIEs to a vector.
end_comment

begin_decl_stmt
name|void
name|extractDIEsToVector
argument_list|(
name|bool
name|AppendCUDie
argument_list|,
name|bool
name|AppendNonCUDIEs
argument_list|,
name|std
operator|::
name|vector
operator|<
name|DWARFDebugInfoEntry
operator|>
operator|&
name|DIEs
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_comment
comment|/// clearDIEs - Clear parsed DIEs to keep memory usage low.
end_comment

begin_function_decl
name|void
name|clearDIEs
parameter_list|(
name|bool
name|KeepCUDie
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/// parseDWO - Parses .dwo file for current compile unit. Returns true if
end_comment

begin_comment
comment|/// it was actually constructed.
end_comment

begin_function_decl
name|bool
name|parseDWO
parameter_list|()
function_decl|;
end_function_decl

begin_comment
comment|/// getSubroutineForAddress - Returns subprogram DIE with address range
end_comment

begin_comment
comment|/// encompassing the provided address. The pointer is alive as long as parsed
end_comment

begin_comment
comment|/// compile unit DIEs are not cleared.
end_comment

begin_function_decl
name|DWARFDie
name|getSubroutineForAddress
parameter_list|(
name|uint64_t
name|Address
parameter_list|)
function_decl|;
end_function_decl

begin_comment
unit|};  }
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_DEBUGINFO_DWARF_DWARFUNIT_H
end_comment

end_unit

