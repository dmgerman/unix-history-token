begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- DWARFUnitIndex.h -----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_DWARF_DWARFUNITINDEX_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_DWARF_DWARFUNITINDEX_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/DataExtractor.h"
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_include
include|#
directive|include
file|<memory>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|raw_ostream
decl_stmt|;
enum|enum
name|DWARFSectionKind
block|{
name|DW_SECT_INFO
init|=
literal|1
block|,
name|DW_SECT_TYPES
block|,
name|DW_SECT_ABBREV
block|,
name|DW_SECT_LINE
block|,
name|DW_SECT_LOC
block|,
name|DW_SECT_STR_OFFSETS
block|,
name|DW_SECT_MACINFO
block|,
name|DW_SECT_MACRO
block|, }
enum|;
name|class
name|DWARFUnitIndex
block|{
struct|struct
name|Header
block|{
name|uint32_t
name|Version
decl_stmt|;
name|uint32_t
name|NumColumns
decl_stmt|;
name|uint32_t
name|NumUnits
decl_stmt|;
name|uint32_t
name|NumBuckets
init|=
literal|0
decl_stmt|;
name|bool
name|parse
parameter_list|(
name|DataExtractor
name|IndexData
parameter_list|,
name|uint32_t
modifier|*
name|OffsetPtr
parameter_list|)
function_decl|;
name|void
name|dump
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|)
decl|const
decl_stmt|;
block|}
struct|;
name|public
label|:
name|class
name|Entry
block|{
name|public
label|:
struct|struct
name|SectionContribution
block|{
name|uint32_t
name|Offset
decl_stmt|;
name|uint32_t
name|Length
decl_stmt|;
block|}
struct|;
name|private
label|:
specifier|const
name|DWARFUnitIndex
modifier|*
name|Index
decl_stmt|;
name|uint64_t
name|Signature
decl_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|SectionContribution
index|[]
operator|>
name|Contributions
expr_stmt|;
name|friend
name|class
name|DWARFUnitIndex
decl_stmt|;
name|public
label|:
specifier|const
name|SectionContribution
modifier|*
name|getOffset
argument_list|(
name|DWARFSectionKind
name|Sec
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|SectionContribution
operator|*
name|getOffset
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|SectionContribution
operator|*
name|getOffsets
argument_list|()
specifier|const
block|{
return|return
name|Contributions
operator|.
name|get
argument_list|()
return|;
block|}
name|uint64_t
name|getSignature
argument_list|()
specifier|const
block|{
return|return
name|Signature
return|;
block|}
block|}
empty_stmt|;
name|private
label|:
name|struct
name|Header
name|Header
decl_stmt|;
name|DWARFSectionKind
name|InfoColumnKind
decl_stmt|;
name|int
name|InfoColumn
init|=
operator|-
literal|1
decl_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|DWARFSectionKind
index|[]
operator|>
name|ColumnKinds
expr_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|Entry
index|[]
operator|>
name|Rows
expr_stmt|;
specifier|static
name|StringRef
name|getColumnHeader
parameter_list|(
name|DWARFSectionKind
name|DS
parameter_list|)
function_decl|;
name|bool
name|parseImpl
parameter_list|(
name|DataExtractor
name|IndexData
parameter_list|)
function_decl|;
name|public
label|:
name|DWARFUnitIndex
argument_list|(
argument|DWARFSectionKind InfoColumnKind
argument_list|)
block|:
name|InfoColumnKind
argument_list|(
argument|InfoColumnKind
argument_list|)
block|{}
name|bool
name|parse
parameter_list|(
name|DataExtractor
name|IndexData
parameter_list|)
function_decl|;
name|void
name|dump
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|Entry
modifier|*
name|getFromOffset
argument_list|(
name|uint32_t
name|Offset
argument_list|)
decl|const
decl_stmt|;
name|ArrayRef
operator|<
name|DWARFSectionKind
operator|>
name|getColumnKinds
argument_list|()
specifier|const
block|{
return|return
name|makeArrayRef
argument_list|(
name|ColumnKinds
operator|.
name|get
argument_list|()
argument_list|,
name|Header
operator|.
name|NumColumns
argument_list|)
return|;
block|}
name|ArrayRef
operator|<
name|Entry
operator|>
name|getRows
argument_list|()
specifier|const
block|{
return|return
name|makeArrayRef
argument_list|(
name|Rows
operator|.
name|get
argument_list|()
argument_list|,
name|Header
operator|.
name|NumBuckets
argument_list|)
return|;
block|}
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_DEBUGINFO_DWARF_DWARFUNITINDEX_H
end_comment

end_unit

