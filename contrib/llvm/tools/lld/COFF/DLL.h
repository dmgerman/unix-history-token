begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- DLL.h ----------------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_COFF_DLL_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_COFF_DLL_H
end_define

begin_include
include|#
directive|include
file|"Chunks.h"
end_include

begin_include
include|#
directive|include
file|"Symbols.h"
end_include

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|coff
block|{
comment|// Windows-specific.
comment|// IdataContents creates all chunks for the DLL import table.
comment|// You are supposed to call add() to add symbols and then
comment|// call getChunks() to get a list of chunks.
name|class
name|IdataContents
block|{
name|public
label|:
name|void
name|add
parameter_list|(
name|DefinedImportData
modifier|*
name|Sym
parameter_list|)
block|{
name|Imports
operator|.
name|push_back
argument_list|(
name|Sym
argument_list|)
expr_stmt|;
block|}
name|bool
name|empty
parameter_list|()
block|{
return|return
name|Imports
operator|.
name|empty
argument_list|()
return|;
block|}
name|std
operator|::
name|vector
operator|<
name|Chunk
operator|*
operator|>
name|getChunks
argument_list|()
expr_stmt|;
name|uint64_t
name|getDirRVA
parameter_list|()
block|{
return|return
name|Dirs
index|[
literal|0
index|]
operator|->
name|getRVA
argument_list|()
return|;
block|}
name|uint64_t
name|getDirSize
parameter_list|()
function_decl|;
name|uint64_t
name|getIATRVA
parameter_list|()
block|{
return|return
name|Addresses
index|[
literal|0
index|]
operator|->
name|getRVA
argument_list|()
return|;
block|}
name|uint64_t
name|getIATSize
parameter_list|()
function_decl|;
name|private
label|:
name|void
name|create
parameter_list|()
function_decl|;
name|std
operator|::
name|vector
operator|<
name|DefinedImportData
operator|*
operator|>
name|Imports
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|Chunk
operator|>>
name|Dirs
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|Chunk
operator|>>
name|Lookups
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|Chunk
operator|>>
name|Addresses
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|Chunk
operator|>>
name|Hints
expr_stmt|;
name|std
operator|::
name|map
operator|<
name|StringRef
operator|,
name|std
operator|::
name|unique_ptr
operator|<
name|Chunk
operator|>>
name|DLLNames
expr_stmt|;
block|}
empty_stmt|;
comment|// Windows-specific.
comment|// DelayLoadContents creates all chunks for the delay-load DLL import table.
name|class
name|DelayLoadContents
block|{
name|public
label|:
name|void
name|add
parameter_list|(
name|DefinedImportData
modifier|*
name|Sym
parameter_list|)
block|{
name|Imports
operator|.
name|push_back
argument_list|(
name|Sym
argument_list|)
expr_stmt|;
block|}
name|bool
name|empty
parameter_list|()
block|{
return|return
name|Imports
operator|.
name|empty
argument_list|()
return|;
block|}
name|void
name|create
parameter_list|(
name|Defined
modifier|*
name|Helper
parameter_list|)
function_decl|;
name|std
operator|::
name|vector
operator|<
name|Chunk
operator|*
operator|>
name|getChunks
argument_list|()
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|Chunk
operator|*
operator|>
name|getDataChunks
argument_list|()
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|Chunk
operator|>>
operator|&
name|getCodeChunks
argument_list|()
block|{
return|return
name|Thunks
return|;
block|}
name|uint64_t
name|getDirRVA
parameter_list|()
block|{
return|return
name|Dirs
index|[
literal|0
index|]
operator|->
name|getRVA
argument_list|()
return|;
block|}
name|uint64_t
name|getDirSize
parameter_list|()
function_decl|;
name|private
label|:
name|Chunk
modifier|*
name|newThunkChunk
parameter_list|(
name|DefinedImportData
modifier|*
name|S
parameter_list|,
name|Chunk
modifier|*
name|Dir
parameter_list|)
function_decl|;
name|Defined
modifier|*
name|Helper
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|DefinedImportData
operator|*
operator|>
name|Imports
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|Chunk
operator|>>
name|Dirs
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|Chunk
operator|>>
name|ModuleHandles
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|Chunk
operator|>>
name|Addresses
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|Chunk
operator|>>
name|Names
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|Chunk
operator|>>
name|HintNames
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|Chunk
operator|>>
name|Thunks
expr_stmt|;
name|std
operator|::
name|map
operator|<
name|StringRef
operator|,
name|std
operator|::
name|unique_ptr
operator|<
name|Chunk
operator|>>
name|DLLNames
expr_stmt|;
block|}
empty_stmt|;
comment|// Windows-specific.
comment|// EdataContents creates all chunks for the DLL export table.
name|class
name|EdataContents
block|{
name|public
label|:
name|EdataContents
argument_list|()
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|Chunk
operator|>>
name|Chunks
expr_stmt|;
block|}
empty_stmt|;
block|}
comment|// namespace coff
block|}
end_decl_stmt

begin_comment
comment|// namespace lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

