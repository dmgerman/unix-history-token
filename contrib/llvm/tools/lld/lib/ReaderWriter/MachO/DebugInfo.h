begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- lib/ReaderWriter/MachO/File.h ----------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_READER_WRITER_MACHO_DEBUGINFO_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_READER_WRITER_MACHO_DEBUGINFO_H
end_define

begin_include
include|#
directive|include
file|"lld/Core/Atom.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Format.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/raw_ostream.h"
end_include

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|mach_o
block|{
name|class
name|DebugInfo
block|{
name|public
label|:
name|enum
name|class
name|Kind
block|{
name|Dwarf
operator|,
name|Stabs
block|}
empty_stmt|;
name|Kind
name|kind
argument_list|()
specifier|const
block|{
return|return
name|_kind
return|;
block|}
name|void
name|setAllocator
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|llvm
operator|::
name|BumpPtrAllocator
operator|>
name|allocator
argument_list|)
block|{
name|_allocator
operator|=
name|std
operator|::
name|move
argument_list|(
name|allocator
argument_list|)
expr_stmt|;
block|}
name|protected
label|:
name|DebugInfo
argument_list|(
argument|Kind kind
argument_list|)
block|:
name|_kind
argument_list|(
argument|kind
argument_list|)
block|{}
name|private
label|:
name|std
operator|::
name|unique_ptr
operator|<
name|llvm
operator|::
name|BumpPtrAllocator
operator|>
name|_allocator
expr_stmt|;
name|Kind
name|_kind
decl_stmt|;
block|}
empty_stmt|;
struct|struct
name|TranslationUnitSource
block|{
name|StringRef
name|name
decl_stmt|;
name|StringRef
name|path
decl_stmt|;
block|}
struct|;
name|class
name|DwarfDebugInfo
range|:
name|public
name|DebugInfo
block|{
name|public
operator|:
name|DwarfDebugInfo
argument_list|(
argument|TranslationUnitSource tu
argument_list|)
operator|:
name|DebugInfo
argument_list|(
name|Kind
operator|::
name|Dwarf
argument_list|)
block|,
name|_tu
argument_list|(
argument|std::move(tu)
argument_list|)
block|{}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const DebugInfo *di
argument_list|)
block|{
return|return
name|di
operator|->
name|kind
argument_list|()
operator|==
name|Kind
operator|::
name|Dwarf
return|;
block|}
specifier|const
name|TranslationUnitSource
operator|&
name|translationUnitSource
argument_list|()
specifier|const
block|{
return|return
name|_tu
return|;
block|}
name|private
operator|:
name|TranslationUnitSource
name|_tu
block|; }
decl_stmt|;
struct|struct
name|Stab
block|{
name|Stab
argument_list|(
argument|const Atom* atom
argument_list|,
argument|uint8_t type
argument_list|,
argument|uint8_t other
argument_list|,
argument|uint16_t desc
argument_list|,
argument|uint32_t value
argument_list|,
argument|StringRef str
argument_list|)
block|:
name|atom
argument_list|(
name|atom
argument_list|)
operator|,
name|type
argument_list|(
name|type
argument_list|)
operator|,
name|other
argument_list|(
name|other
argument_list|)
operator|,
name|desc
argument_list|(
name|desc
argument_list|)
operator|,
name|value
argument_list|(
name|value
argument_list|)
operator|,
name|str
argument_list|(
argument|str
argument_list|)
block|{}
specifier|const
name|class
name|Atom
operator|*
name|atom
expr_stmt|;
name|uint8_t
name|type
decl_stmt|;
name|uint8_t
name|other
decl_stmt|;
name|uint16_t
name|desc
decl_stmt|;
name|uint32_t
name|value
decl_stmt|;
name|StringRef
name|str
decl_stmt|;
block|}
struct|;
specifier|inline
name|raw_ostream
operator|&
name|operator
operator|<<
operator|(
name|raw_ostream
operator|&
name|os
operator|,
name|Stab
operator|&
name|s
operator|)
block|{
name|os
operator|<<
literal|"Stab -- atom: "
operator|<<
name|llvm
operator|::
name|format
argument_list|(
literal|"%p"
argument_list|,
name|s
operator|.
name|atom
argument_list|)
operator|<<
literal|", type: "
operator|<<
operator|(
name|uint32_t
operator|)
name|s
operator|.
name|type
operator|<<
literal|", other: "
operator|<<
operator|(
name|uint32_t
operator|)
name|s
operator|.
name|other
operator|<<
literal|", desc: "
operator|<<
name|s
operator|.
name|desc
operator|<<
literal|", value: "
operator|<<
name|s
operator|.
name|value
operator|<<
literal|", str: '"
operator|<<
name|s
operator|.
name|str
operator|<<
literal|"'"
block|;
return|return
name|os
return|;
block|}
name|class
name|StabsDebugInfo
range|:
name|public
name|DebugInfo
block|{
name|public
operator|:
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|Stab
operator|>
name|StabsList
expr_stmt|;
name|StabsDebugInfo
argument_list|(
argument|StabsList stabs
argument_list|)
operator|:
name|DebugInfo
argument_list|(
name|Kind
operator|::
name|Stabs
argument_list|)
block|,
name|_stabs
argument_list|(
argument|std::move(stabs)
argument_list|)
block|{}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const DebugInfo *di
argument_list|)
block|{
return|return
name|di
operator|->
name|kind
argument_list|()
operator|==
name|Kind
operator|::
name|Stabs
return|;
block|}
specifier|const
name|StabsList
operator|&
name|stabs
argument_list|()
specifier|const
block|{
return|return
name|_stabs
return|;
block|}
name|public
label|:
name|StabsList
name|_stabs
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace mach_o
end_comment

begin_comment
unit|}
comment|// end namespace lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLD_READER_WRITER_MACHO_DEBUGINFO_H
end_comment

end_unit

