begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===---- lib/ReaderWriter/MachO/SectCreateFile.h ---------------*- c++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_READER_WRITER_MACHO_SECTCREATE_FILE_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_READER_WRITER_MACHO_SECTCREATE_FILE_H
end_define

begin_include
include|#
directive|include
file|"lld/Core/DefinedAtom.h"
end_include

begin_include
include|#
directive|include
file|"lld/Core/Simple.h"
end_include

begin_include
include|#
directive|include
file|"lld/ReaderWriter/MachOLinkingContext.h"
end_include

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|mach_o
block|{
comment|//
comment|// A FlateNamespaceFile instance may be added as a resolution source of last
comment|// resort, depending on how -flat_namespace and -undefined are set.
comment|//
name|class
name|SectCreateFile
range|:
name|public
name|File
block|{
name|public
operator|:
name|class
name|SectCreateAtom
operator|:
name|public
name|SimpleDefinedAtom
block|{
name|public
operator|:
name|SectCreateAtom
argument_list|(
argument|const File&file
argument_list|,
argument|StringRef segName
argument_list|,
argument|StringRef sectName
argument_list|,
argument|std::unique_ptr<MemoryBuffer> content
argument_list|)
operator|:
name|SimpleDefinedAtom
argument_list|(
name|file
argument_list|)
block|,
name|_combinedName
argument_list|(
operator|(
name|segName
operator|+
literal|"/"
operator|+
name|sectName
operator|)
operator|.
name|str
argument_list|()
argument_list|)
block|,
name|_content
argument_list|(
argument|std::move(content)
argument_list|)
block|{}
operator|~
name|SectCreateAtom
argument_list|()
name|override
operator|=
expr|default
block|;
name|uint64_t
name|size
argument_list|()
specifier|const
name|override
block|{
return|return
name|_content
operator|->
name|getBufferSize
argument_list|()
return|;
block|}
name|Scope
name|scope
argument_list|()
specifier|const
name|override
block|{
return|return
name|scopeGlobal
return|;
block|}
name|ContentType
name|contentType
argument_list|()
specifier|const
name|override
block|{
return|return
name|typeSectCreate
return|;
block|}
name|SectionChoice
name|sectionChoice
argument_list|()
specifier|const
name|override
block|{
return|return
name|sectionCustomRequired
return|;
block|}
name|StringRef
name|customSectionName
argument_list|()
specifier|const
name|override
block|{
return|return
name|_combinedName
return|;
block|}
name|DeadStripKind
name|deadStrip
argument_list|()
specifier|const
name|override
block|{
return|return
name|deadStripNever
return|;
block|}
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|rawContent
argument_list|()
specifier|const
name|override
block|{
specifier|const
name|uint8_t
operator|*
name|data
operator|=
name|reinterpret_cast
operator|<
specifier|const
name|uint8_t
operator|*
operator|>
operator|(
name|_content
operator|->
name|getBufferStart
argument_list|()
operator|)
block|;
return|return
name|ArrayRef
operator|<
name|uint8_t
operator|>
operator|(
name|data
expr|,
name|_content
operator|->
name|getBufferSize
argument_list|()
operator|)
return|;
block|}
name|StringRef
name|segmentName
argument_list|()
specifier|const
block|{
return|return
name|_segName
return|;
block|}
name|StringRef
name|sectionName
argument_list|()
specifier|const
block|{
return|return
name|_sectName
return|;
block|}
name|private
operator|:
name|std
operator|::
name|string
name|_combinedName
block|;
name|StringRef
name|_segName
block|;
name|StringRef
name|_sectName
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|MemoryBuffer
operator|>
name|_content
block|;   }
block|;
name|SectCreateFile
argument_list|()
operator|:
name|File
argument_list|(
literal|"sectcreate"
argument_list|,
argument|kindSectCreateObject
argument_list|)
block|{}
name|void
name|addSection
argument_list|(
argument|StringRef seg
argument_list|,
argument|StringRef sect
argument_list|,
argument|std::unique_ptr<MemoryBuffer> content
argument_list|)
block|{
name|_definedAtoms
operator|.
name|push_back
argument_list|(
name|new
argument_list|(
argument|allocator()
argument_list|)
name|SectCreateAtom
argument_list|(
operator|*
name|this
argument_list|,
name|seg
argument_list|,
name|sect
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|content
argument_list|)
argument_list|)
argument_list|)
block|;   }
specifier|const
name|AtomRange
operator|<
name|DefinedAtom
operator|>
name|defined
argument_list|()
specifier|const
name|override
block|{
return|return
name|_definedAtoms
return|;
block|}
specifier|const
name|AtomRange
operator|<
name|UndefinedAtom
operator|>
name|undefined
argument_list|()
specifier|const
name|override
block|{
return|return
name|_noUndefinedAtoms
return|;
block|}
specifier|const
name|AtomRange
operator|<
name|SharedLibraryAtom
operator|>
name|sharedLibrary
argument_list|()
specifier|const
name|override
block|{
return|return
name|_noSharedLibraryAtoms
return|;
block|}
specifier|const
name|AtomRange
operator|<
name|AbsoluteAtom
operator|>
name|absolute
argument_list|()
specifier|const
name|override
block|{
return|return
name|_noAbsoluteAtoms
return|;
block|}
name|void
name|clearAtoms
argument_list|()
name|override
block|{
name|_definedAtoms
operator|.
name|clear
argument_list|()
block|;
name|_noUndefinedAtoms
operator|.
name|clear
argument_list|()
block|;
name|_noSharedLibraryAtoms
operator|.
name|clear
argument_list|()
block|;
name|_noAbsoluteAtoms
operator|.
name|clear
argument_list|()
block|;   }
name|private
operator|:
name|AtomVector
operator|<
name|DefinedAtom
operator|>
name|_definedAtoms
block|; }
decl_stmt|;
block|}
comment|// namespace mach_o
block|}
end_decl_stmt

begin_comment
comment|// namespace lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLD_READER_WRITER_MACHO_SECTCREATE_FILE_H
end_comment

end_unit

