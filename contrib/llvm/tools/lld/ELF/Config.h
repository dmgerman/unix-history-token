begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- Config.h -------------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_ELF_CONFIG_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_ELF_CONFIG_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/MapVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/CachePruning.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/CodeGen.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ELF.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Endian.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|elf
block|{
name|class
name|InputFile
decl_stmt|;
struct_decl|struct
name|Symbol
struct_decl|;
enum|enum
name|ELFKind
block|{
name|ELFNoneKind
block|,
name|ELF32LEKind
block|,
name|ELF32BEKind
block|,
name|ELF64LEKind
block|,
name|ELF64BEKind
block|}
enum|;
comment|// For --build-id.
name|enum
name|class
name|BuildIdKind
block|{
name|None
operator|,
name|Fast
operator|,
name|Md5
operator|,
name|Sha1
operator|,
name|Hexstring
operator|,
name|Uuid
block|}
empty_stmt|;
comment|// For --discard-{all,locals,none}.
name|enum
name|class
name|DiscardPolicy
block|{
name|Default
operator|,
name|All
operator|,
name|Locals
operator|,
name|None
block|}
empty_stmt|;
comment|// For --strip-{all,debug}.
name|enum
name|class
name|StripPolicy
block|{
name|None
operator|,
name|All
operator|,
name|Debug
block|}
empty_stmt|;
comment|// For --unresolved-symbols.
name|enum
name|class
name|UnresolvedPolicy
block|{
name|ReportError
operator|,
name|Warn
operator|,
name|WarnAll
operator|,
name|Ignore
operator|,
name|IgnoreAll
block|}
empty_stmt|;
comment|// For --sort-section and linkerscript sorting rules.
name|enum
name|class
name|SortSectionPolicy
block|{
name|Default
operator|,
name|None
operator|,
name|Alignment
operator|,
name|Name
operator|,
name|Priority
block|}
empty_stmt|;
comment|// For --target2
name|enum
name|class
name|Target2Policy
block|{
name|Abs
operator|,
name|Rel
operator|,
name|GotRel
block|}
empty_stmt|;
struct|struct
name|SymbolVersion
block|{
name|llvm
operator|::
name|StringRef
name|Name
expr_stmt|;
name|bool
name|IsExternCpp
decl_stmt|;
name|bool
name|HasWildcard
decl_stmt|;
block|}
struct|;
comment|// This struct contains symbols version definition that
comment|// can be found in version script if it is used for link.
struct|struct
name|VersionDefinition
block|{
name|llvm
operator|::
name|StringRef
name|Name
expr_stmt|;
name|uint16_t
name|Id
init|=
literal|0
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|SymbolVersion
operator|>
name|Globals
expr_stmt|;
name|size_t
name|NameOff
init|=
literal|0
decl_stmt|;
comment|// Offset in the string table
block|}
struct|;
comment|// This struct contains the global configuration for the linker.
comment|// Most fields are direct mapping from the command line options
comment|// and such fields have the same name as the corresponding options.
comment|// Most fields are initialized by the driver.
struct|struct
name|Configuration
block|{
name|InputFile
modifier|*
name|FirstElf
init|=
name|nullptr
decl_stmt|;
name|bool
name|HasStaticTlsModel
init|=
name|false
decl_stmt|;
name|uint8_t
name|OSABI
init|=
literal|0
decl_stmt|;
name|llvm
operator|::
name|CachePruningPolicy
name|ThinLTOCachePolicy
expr_stmt|;
name|llvm
operator|::
name|StringMap
operator|<
name|uint64_t
operator|>
name|SectionStartMap
expr_stmt|;
name|llvm
operator|::
name|StringRef
name|DynamicLinker
expr_stmt|;
name|llvm
operator|::
name|StringRef
name|Entry
expr_stmt|;
name|llvm
operator|::
name|StringRef
name|Emulation
expr_stmt|;
name|llvm
operator|::
name|StringRef
name|Fini
expr_stmt|;
name|llvm
operator|::
name|StringRef
name|Init
expr_stmt|;
name|llvm
operator|::
name|StringRef
name|LTOAAPipeline
expr_stmt|;
name|llvm
operator|::
name|StringRef
name|LTONewPmPasses
expr_stmt|;
name|llvm
operator|::
name|StringRef
name|MapFile
expr_stmt|;
name|llvm
operator|::
name|StringRef
name|OutputFile
expr_stmt|;
name|llvm
operator|::
name|StringRef
name|OptRemarksFilename
expr_stmt|;
name|llvm
operator|::
name|StringRef
name|SoName
expr_stmt|;
name|llvm
operator|::
name|StringRef
name|Sysroot
expr_stmt|;
name|llvm
operator|::
name|StringRef
name|ThinLTOCacheDir
expr_stmt|;
name|std
operator|::
name|string
name|Rpath
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|VersionDefinition
operator|>
name|VersionDefinitions
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|llvm
operator|::
name|StringRef
operator|>
name|AuxiliaryList
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|llvm
operator|::
name|StringRef
operator|>
name|SearchPaths
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|llvm
operator|::
name|StringRef
operator|>
name|SymbolOrderingFile
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|llvm
operator|::
name|StringRef
operator|>
name|Undefined
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|SymbolVersion
operator|>
name|VersionScriptGlobals
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|SymbolVersion
operator|>
name|VersionScriptLocals
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|uint8_t
operator|>
name|BuildIdVector
expr_stmt|;
name|bool
name|AllowMultipleDefinition
decl_stmt|;
name|bool
name|AsNeeded
init|=
name|false
decl_stmt|;
name|bool
name|Bsymbolic
decl_stmt|;
name|bool
name|BsymbolicFunctions
decl_stmt|;
name|bool
name|ColorDiagnostics
init|=
name|false
decl_stmt|;
name|bool
name|CompressDebugSections
decl_stmt|;
name|bool
name|DefineCommon
decl_stmt|;
name|bool
name|Demangle
init|=
name|true
decl_stmt|;
name|bool
name|DisableVerify
decl_stmt|;
name|bool
name|EhFrameHdr
decl_stmt|;
name|bool
name|EmitRelocs
decl_stmt|;
name|bool
name|EnableNewDtags
decl_stmt|;
name|bool
name|ExportDynamic
decl_stmt|;
name|bool
name|FatalWarnings
decl_stmt|;
name|bool
name|GcSections
decl_stmt|;
name|bool
name|GdbIndex
decl_stmt|;
name|bool
name|GnuHash
decl_stmt|;
name|bool
name|ICF
decl_stmt|;
name|bool
name|MipsN32Abi
init|=
name|false
decl_stmt|;
name|bool
name|NoGnuUnique
decl_stmt|;
name|bool
name|NoUndefinedVersion
decl_stmt|;
name|bool
name|Nostdlib
decl_stmt|;
name|bool
name|OFormatBinary
decl_stmt|;
name|bool
name|Omagic
decl_stmt|;
name|bool
name|OptRemarksWithHotness
decl_stmt|;
name|bool
name|Pie
decl_stmt|;
name|bool
name|PrintGcSections
decl_stmt|;
name|bool
name|Relocatable
decl_stmt|;
name|bool
name|SaveTemps
decl_stmt|;
name|bool
name|SingleRoRx
decl_stmt|;
name|bool
name|Shared
decl_stmt|;
name|bool
name|Static
init|=
name|false
decl_stmt|;
name|bool
name|SysvHash
decl_stmt|;
name|bool
name|Target1Rel
decl_stmt|;
name|bool
name|Threads
decl_stmt|;
name|bool
name|Trace
decl_stmt|;
name|bool
name|Verbose
decl_stmt|;
name|bool
name|WarnCommon
decl_stmt|;
name|bool
name|WarnMissingEntry
decl_stmt|;
name|bool
name|ZCombreloc
decl_stmt|;
name|bool
name|ZExecstack
decl_stmt|;
name|bool
name|ZNocopyreloc
decl_stmt|;
name|bool
name|ZNodelete
decl_stmt|;
name|bool
name|ZNodlopen
decl_stmt|;
name|bool
name|ZNow
decl_stmt|;
name|bool
name|ZOrigin
decl_stmt|;
name|bool
name|ZRelro
decl_stmt|;
name|bool
name|ZText
decl_stmt|;
name|bool
name|ExitEarly
decl_stmt|;
name|bool
name|ZWxneeded
decl_stmt|;
name|DiscardPolicy
name|Discard
decl_stmt|;
name|SortSectionPolicy
name|SortSection
decl_stmt|;
name|StripPolicy
name|Strip
decl_stmt|;
name|UnresolvedPolicy
name|UnresolvedSymbols
decl_stmt|;
name|Target2Policy
name|Target2
decl_stmt|;
name|BuildIdKind
name|BuildId
init|=
name|BuildIdKind
operator|::
name|None
decl_stmt|;
name|ELFKind
name|EKind
init|=
name|ELFNoneKind
decl_stmt|;
name|uint16_t
name|DefaultSymbolVersion
init|=
name|llvm
operator|::
name|ELF
operator|::
name|VER_NDX_GLOBAL
decl_stmt|;
name|uint16_t
name|EMachine
init|=
name|llvm
operator|::
name|ELF
operator|::
name|EM_NONE
decl_stmt|;
name|uint64_t
name|ErrorLimit
init|=
literal|20
decl_stmt|;
name|uint64_t
name|ImageBase
decl_stmt|;
name|uint64_t
name|MaxPageSize
decl_stmt|;
name|uint64_t
name|ZStackSize
decl_stmt|;
name|unsigned
name|LTOPartitions
decl_stmt|;
name|unsigned
name|LTOO
decl_stmt|;
name|unsigned
name|Optimize
decl_stmt|;
name|unsigned
name|ThinLTOJobs
decl_stmt|;
comment|// The following config options do not directly correspond to any
comment|// particualr command line options.
comment|// True if we need to pass through relocations in input files to the
comment|// output file. Usually false because we consume relocations.
name|bool
name|CopyRelocs
decl_stmt|;
comment|// True if the target is ELF64. False if ELF32.
name|bool
name|Is64
decl_stmt|;
comment|// True if the target is little-endian. False if big-endian.
name|bool
name|IsLE
decl_stmt|;
comment|// endianness::little if IsLE is true. endianness::big otherwise.
name|llvm
operator|::
name|support
operator|::
name|endianness
name|Endianness
expr_stmt|;
comment|// True if the target is the little-endian MIPS64.
comment|//
comment|// The reason why we have this variable only for the MIPS is because
comment|// we use this often.  Some ELF headers for MIPS64EL are in a
comment|// mixed-endian (which is horrible and I'd say that's a serious spec
comment|// bug), and we need to know whether we are reading MIPS ELF files or
comment|// not in various places.
comment|//
comment|// (Note that MIPS64EL is not a typo for MIPS64LE. This is the official
comment|// name whatever that means. A fun hypothesis is that "EL" is short for
comment|// little-endian written in the little-endian order, but I don't know
comment|// if that's true.)
name|bool
name|IsMips64EL
decl_stmt|;
comment|// The ELF spec defines two types of relocation table entries, RELA and
comment|// REL. RELA is a triplet of (offset, info, addend) while REL is a
comment|// tuple of (offset, info). Addends for REL are implicit and read from
comment|// the location where the relocations are applied. So, REL is more
comment|// compact than RELA but requires a bit of more work to process.
comment|//
comment|// (From the linker writer's view, this distinction is not necessary.
comment|// If the ELF had chosen whichever and sticked with it, it would have
comment|// been easier to write code to process relocations, but it's too late
comment|// to change the spec.)
comment|//
comment|// Each ABI defines its relocation type. IsRela is true if target
comment|// uses RELA. As far as we know, all 64-bit ABIs are using RELA. A
comment|// few 32-bit ABIs are using RELA too.
name|bool
name|IsRela
decl_stmt|;
comment|// True if we are creating position-independent code.
name|bool
name|Pic
decl_stmt|;
comment|// 4 for ELF32, 8 for ELF64.
name|int
name|Wordsize
decl_stmt|;
block|}
struct|;
comment|// The only instance of Configuration struct.
specifier|extern
name|Configuration
modifier|*
name|Config
decl_stmt|;
block|}
comment|// namespace elf
block|}
end_decl_stmt

begin_comment
comment|// namespace lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

