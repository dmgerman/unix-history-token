begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- Relocations.h -------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_ELF_RELOCATIONS_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_ELF_RELOCATIONS_H
end_define

begin_include
include|#
directive|include
file|"lld/Core/LLVM.h"
end_include

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|elf
block|{
name|class
name|SymbolBody
decl_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|InputSection
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|InputSectionBase
expr_stmt|;
enum|enum
name|RelExpr
block|{
name|R_ABS
block|,
name|R_GOT
block|,
name|R_GOTONLY_PC
block|,
name|R_GOTREL
block|,
name|R_GOT_FROM_END
block|,
name|R_GOT_OFF
block|,
name|R_GOT_PAGE_PC
block|,
name|R_GOT_PC
block|,
name|R_HINT
block|,
name|R_MIPS_GOT_LOCAL_PAGE
block|,
name|R_MIPS_GOT_OFF
block|,
name|R_MIPS_TLSGD
block|,
name|R_MIPS_TLSLD
block|,
name|R_NEG_TLS
block|,
name|R_PAGE_PC
block|,
name|R_PC
block|,
name|R_PLT
block|,
name|R_PLT_PC
block|,
name|R_PLT_PAGE_PC
block|,
name|R_PPC_OPD
block|,
name|R_PPC_PLT_OPD
block|,
name|R_PPC_TOC
block|,
name|R_RELAX_GOT_PC
block|,
name|R_RELAX_GOT_PC_NOPIC
block|,
name|R_RELAX_TLS_GD_TO_IE
block|,
name|R_RELAX_TLS_GD_TO_IE_END
block|,
name|R_RELAX_TLS_GD_TO_IE_ABS
block|,
name|R_RELAX_TLS_GD_TO_IE_PAGE_PC
block|,
name|R_RELAX_TLS_GD_TO_LE
block|,
name|R_RELAX_TLS_GD_TO_LE_NEG
block|,
name|R_RELAX_TLS_IE_TO_LE
block|,
name|R_RELAX_TLS_LD_TO_LE
block|,
name|R_SIZE
block|,
name|R_THUNK_ABS
block|,
name|R_THUNK_PC
block|,
name|R_THUNK_PLT_PC
block|,
name|R_TLS
block|,
name|R_TLSDESC
block|,
name|R_TLSDESC_PAGE
block|,
name|R_TLSGD
block|,
name|R_TLSGD_PC
block|,
name|R_TLSLD
block|,
name|R_TLSLD_PC
block|}
enum|;
name|template
operator|<
name|class
name|ELFT
operator|>
expr|struct
name|Relocation
block|{
name|RelExpr
name|Expr
block|;
name|uint32_t
name|Type
block|;
name|InputSectionBase
operator|<
name|ELFT
operator|>
operator|*
name|InputSec
block|;
name|uint64_t
name|Offset
block|;
name|uint64_t
name|Addend
block|;
name|SymbolBody
operator|*
name|Sym
block|; }
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|void
name|scanRelocations
argument_list|(
name|InputSection
operator|<
name|ELFT
operator|>
operator|&
argument_list|)
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|void
name|scanRelocations
argument_list|(
argument|InputSectionBase<ELFT>&
argument_list|,
argument|const typename ELFT::Shdr&
argument_list|)
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
specifier|static
specifier|inline
name|typename
name|ELFT
operator|::
name|uint
name|getAddend
argument_list|(
argument|const typename ELFT::Rel&Rel
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|template
operator|<
name|class
name|ELFT
operator|>
specifier|static
specifier|inline
name|typename
name|ELFT
operator|::
name|uint
name|getAddend
argument_list|(
argument|const typename ELFT::Rela&Rel
argument_list|)
block|{
return|return
name|Rel
operator|.
name|r_addend
return|;
block|}
block|}
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

