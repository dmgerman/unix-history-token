begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- OutputSections.h -----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_ELF_OUTPUT_SECTIONS_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_ELF_OUTPUT_SECTIONS_H
end_define

begin_include
include|#
directive|include
file|"Config.h"
end_include

begin_include
include|#
directive|include
file|"InputSection.h"
end_include

begin_include
include|#
directive|include
file|"Relocations.h"
end_include

begin_include
include|#
directive|include
file|"lld/Core/LLVM.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/StringTableBuilder.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/ELF.h"
end_include

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|elf
block|{
struct_decl|struct
name|PhdrEntry
struct_decl|;
name|class
name|SymbolBody
decl_stmt|;
struct_decl|struct
name|EhSectionPiece
struct_decl|;
name|class
name|EhInputSection
decl_stmt|;
name|class
name|InputSection
decl_stmt|;
name|class
name|InputSectionBase
decl_stmt|;
name|class
name|MergeInputSection
decl_stmt|;
name|class
name|OutputSection
decl_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|ObjectFile
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|SharedFile
expr_stmt|;
name|class
name|SharedSymbol
decl_stmt|;
name|class
name|DefinedRegular
decl_stmt|;
comment|// This represents a section in an output file.
comment|// It is composed of multiple InputSections.
comment|// The writer creates multiple OutputSections and assign them unique,
comment|// non-overlapping file offsets and VAs.
name|class
name|OutputSection
name|final
range|:
name|public
name|SectionBase
block|{
name|public
operator|:
name|OutputSection
argument_list|(
argument|StringRef Name
argument_list|,
argument|uint32_t Type
argument_list|,
argument|uint64_t Flags
argument_list|)
block|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const SectionBase *S
argument_list|)
block|{
return|return
name|S
operator|->
name|kind
argument_list|()
operator|==
name|SectionBase
operator|::
name|Output
return|;
block|}
name|uint64_t
name|getLMA
argument_list|()
specifier|const
block|{
return|return
name|Addr
operator|+
name|LMAOffset
return|;
block|}
name|template
operator|<
name|typename
name|ELFT
operator|>
name|void
name|writeHeaderTo
argument_list|(
argument|typename ELFT::Shdr *SHdr
argument_list|)
block|;
name|unsigned
name|SectionIndex
block|;
name|unsigned
name|SortRank
block|;
name|uint32_t
name|getPhdrFlags
argument_list|()
specifier|const
block|;
name|void
name|updateAlignment
argument_list|(
argument|uint32_t Val
argument_list|)
block|{
if|if
condition|(
name|Val
operator|>
name|Alignment
condition|)
name|Alignment
operator|=
name|Val
expr_stmt|;
block|}
comment|// If true, this section will be page aligned on disk.
comment|// Typically the first section of each PT_LOAD segment has this flag.
name|bool
name|PageAlign
operator|=
name|false
block|;
comment|// Pointer to the first section in PT_LOAD segment, which this section
comment|// also resides in. This field is used to correctly compute file offset
comment|// of a section. When two sections share the same load segment, difference
comment|// between their file offsets should be equal to difference between their
comment|// virtual addresses. To compute some section offset we use the following
comment|// formula: Off = Off_first + VA - VA_first.
name|OutputSection
operator|*
name|FirstInPtLoad
operator|=
name|nullptr
block|;
comment|// The following fields correspond to Elf_Shdr members.
name|uint64_t
name|Size
operator|=
literal|0
block|;
name|uint64_t
name|Offset
operator|=
literal|0
block|;
name|uint64_t
name|LMAOffset
operator|=
literal|0
block|;
name|uint64_t
name|Addr
operator|=
literal|0
block|;
name|uint32_t
name|ShName
operator|=
literal|0
block|;
name|void
name|addSection
argument_list|(
name|InputSection
operator|*
name|S
argument_list|)
block|;
name|void
name|sort
argument_list|(
name|std
operator|::
name|function
operator|<
name|int
argument_list|(
name|InputSectionBase
operator|*
name|S
argument_list|)
operator|>
name|Order
argument_list|)
block|;
name|void
name|sortInitFini
argument_list|()
block|;
name|void
name|sortCtorsDtors
argument_list|()
block|;
name|uint32_t
name|getFiller
argument_list|()
block|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|void
name|writeTo
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|)
block|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|void
name|finalize
argument_list|()
block|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|void
name|maybeCompress
argument_list|()
block|;
name|void
name|assignOffsets
argument_list|()
block|;
name|std
operator|::
name|vector
operator|<
name|InputSection
operator|*
operator|>
name|Sections
block|;
comment|// Used for implementation of --compress-debug-sections option.
name|std
operator|::
name|vector
operator|<
name|uint8_t
operator|>
name|ZDebugHeader
block|;
name|llvm
operator|::
name|SmallVector
operator|<
name|char
block|,
literal|1
operator|>
name|CompressedData
block|;
comment|// Location in the output buffer.
name|uint8_t
operator|*
name|Loc
operator|=
name|nullptr
block|; }
decl_stmt|;
comment|// All output sections that are handled by the linker specially are
comment|// globally accessible. Writer initializes them, so don't use them
comment|// until Writer is initialized.
struct|struct
name|Out
block|{
specifier|static
name|uint8_t
name|First
decl_stmt|;
specifier|static
name|OutputSection
modifier|*
name|Opd
decl_stmt|;
specifier|static
name|uint8_t
modifier|*
name|OpdBuf
decl_stmt|;
specifier|static
name|PhdrEntry
modifier|*
name|TlsPhdr
decl_stmt|;
specifier|static
name|OutputSection
modifier|*
name|DebugInfo
decl_stmt|;
specifier|static
name|OutputSection
modifier|*
name|ElfHeader
decl_stmt|;
specifier|static
name|OutputSection
modifier|*
name|ProgramHeaders
decl_stmt|;
specifier|static
name|OutputSection
modifier|*
name|PreinitArray
decl_stmt|;
specifier|static
name|OutputSection
modifier|*
name|InitArray
decl_stmt|;
specifier|static
name|OutputSection
modifier|*
name|FiniArray
decl_stmt|;
block|}
struct|;
struct|struct
name|SectionKey
block|{
name|StringRef
name|Name
decl_stmt|;
name|uint64_t
name|Flags
decl_stmt|;
name|uint32_t
name|Alignment
decl_stmt|;
block|}
struct|;
block|}
block|}
end_decl_stmt

begin_decl_stmt
name|namespace
name|llvm
block|{
name|template
operator|<
operator|>
expr|struct
name|DenseMapInfo
operator|<
name|lld
operator|::
name|elf
operator|::
name|SectionKey
operator|>
block|{
specifier|static
name|lld
operator|::
name|elf
operator|::
name|SectionKey
name|getEmptyKey
argument_list|()
block|;
specifier|static
name|lld
operator|::
name|elf
operator|::
name|SectionKey
name|getTombstoneKey
argument_list|()
block|;
specifier|static
name|unsigned
name|getHashValue
argument_list|(
specifier|const
name|lld
operator|::
name|elf
operator|::
name|SectionKey
operator|&
name|Val
argument_list|)
block|;
specifier|static
name|bool
name|isEqual
argument_list|(
specifier|const
name|lld
operator|::
name|elf
operator|::
name|SectionKey
operator|&
name|LHS
argument_list|,
specifier|const
name|lld
operator|::
name|elf
operator|::
name|SectionKey
operator|&
name|RHS
argument_list|)
block|; }
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|elf
block|{
comment|// This class knows how to create an output section for a given
comment|// input section. Output section type is determined by various
comment|// factors, including input section's sh_flags, sh_type and
comment|// linker scripts.
name|class
name|OutputSectionFactory
block|{
name|public
label|:
name|OutputSectionFactory
argument_list|(
name|std
operator|::
name|vector
operator|<
name|OutputSection
operator|*
operator|>
operator|&
name|OutputSections
argument_list|)
expr_stmt|;
operator|~
name|OutputSectionFactory
argument_list|()
expr_stmt|;
name|void
name|addInputSec
parameter_list|(
name|InputSectionBase
modifier|*
name|IS
parameter_list|,
name|StringRef
name|OutsecName
parameter_list|)
function_decl|;
name|void
name|addInputSec
parameter_list|(
name|InputSectionBase
modifier|*
name|IS
parameter_list|,
name|StringRef
name|OutsecName
parameter_list|,
name|OutputSection
modifier|*
modifier|&
name|Sec
parameter_list|)
function_decl|;
name|private
label|:
name|llvm
operator|::
name|SmallDenseMap
operator|<
name|SectionKey
operator|,
name|OutputSection
operator|*
operator|>
name|Map
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|OutputSection
operator|*
operator|>
operator|&
name|OutputSections
expr_stmt|;
block|}
empty_stmt|;
name|uint64_t
name|getHeaderSize
parameter_list|()
function_decl|;
block|}
comment|// namespace elf
block|}
end_decl_stmt

begin_comment
comment|// namespace lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

